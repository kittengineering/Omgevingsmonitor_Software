
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012598  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  08012658  08012658  00013658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013540  08013540  0001531c  2**0
                  CONTENTS
  4 .ARM          00000008  08013540  08013540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013548  08013548  0001531c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013548  08013548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801354c  0801354c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08013550  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c00  2000031c  0801386c  0001531c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20001f1c  0801386c  00015f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001531c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d88  00000000  00000000  00015344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058aa  00000000  00000000  000360cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0003b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000145c  00000000  00000000  0003d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf21  00000000  00000000  0003e87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002902b  00000000  00000000  0005a79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f9e  00000000  00000000  000837c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116766  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007340  00000000  00000000  001167ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011daec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000031c 	.word	0x2000031c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012640 	.word	0x08012640

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000320 	.word	0x20000320
 8000104:	08012640 	.word	0x08012640

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	08013010 	.word	0x08013010
 8000d08:	08013050 	.word	0x08013050
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801308c 	.word	0x0801308c
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <batteryInit+0x18>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	20000338 	.word	0x20000338

08003568 <checkCharges>:

void checkCharges(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 800356c:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <checkCharges+0x10c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f005 fa95 	bl	8008aa0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 8003576:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <checkCharges+0x10c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	0018      	movs	r0, r3
 800357e:	f005 fae3 	bl	8008b48 <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 8003582:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <checkCharges+0x10c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f005 fb7a 	bl	8008c80 <HAL_ADC_GetValue>
 800358c:	0003      	movs	r3, r0
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd ffe8 	bl	8001564 <__aeabi_ui2f>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7ff fee2 	bl	8003360 <__aeabi_f2d>
 800359c:	2200      	movs	r2, #0
 800359e:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <checkCharges+0x110>)
 80035a0:	f7fe fb86 	bl	8001cb0 <__aeabi_ddiv>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0014      	movs	r4, r2
 80035aa:	001d      	movs	r5, r3
 80035ac:	4b33      	ldr	r3, [pc, #204]	@ (800367c <checkCharges+0x114>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fe83 	bl	80032bc <__aeabi_i2d>
 80035b6:	0002      	movs	r2, r0
 80035b8:	000b      	movs	r3, r1
 80035ba:	0020      	movs	r0, r4
 80035bc:	0029      	movs	r1, r5
 80035be:	f7fe ffbb 	bl	8002538 <__aeabi_dmul>
 80035c2:	0002      	movs	r2, r0
 80035c4:	000b      	movs	r3, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	0002      	movs	r2, r0
 80035cc:	000b      	movs	r3, r1
 80035ce:	f7fe f80b 	bl	80015e8 <__aeabi_dadd>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0010      	movs	r0, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	f7ff ff09 	bl	80033f0 <__aeabi_d2f>
 80035de:	1c02      	adds	r2, r0, #0
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <checkCharges+0x118>)
 80035e2:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <checkCharges+0x10c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f005 fa59 	bl	8008aa0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <checkCharges+0x10c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	0018      	movs	r0, r3
 80035f6:	f005 faa7 	bl	8008b48 <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <checkCharges+0x10c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f005 fb3e 	bl	8008c80 <HAL_ADC_GetValue>
 8003604:	0003      	movs	r3, r0
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd ffac 	bl	8001564 <__aeabi_ui2f>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	1c18      	adds	r0, r3, #0
 8003610:	f7ff fea6 	bl	8003360 <__aeabi_f2d>
 8003614:	2200      	movs	r2, #0
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <checkCharges+0x110>)
 8003618:	f7fe fb4a 	bl	8001cb0 <__aeabi_ddiv>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0014      	movs	r4, r2
 8003622:	001d      	movs	r5, r3
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <checkCharges+0x114>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fe47 	bl	80032bc <__aeabi_i2d>
 800362e:	0002      	movs	r2, r0
 8003630:	000b      	movs	r3, r1
 8003632:	0020      	movs	r0, r4
 8003634:	0029      	movs	r1, r5
 8003636:	f7fe ff7f 	bl	8002538 <__aeabi_dmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0010      	movs	r0, r2
 8003640:	0019      	movs	r1, r3
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	f7fd ffcf 	bl	80015e8 <__aeabi_dadd>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	f7ff fecd 	bl	80033f0 <__aeabi_d2f>
 8003656:	1c02      	adds	r2, r0, #0
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <checkCharges+0x11c>)
 800365a:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <checkCharges+0x118>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <checkCharges+0x11c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c19      	adds	r1, r3, #0
 8003666:	1c10      	adds	r0, r2, #0
 8003668:	f000 f80e 	bl	8003688 <setCharges>
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bdb0      	pop	{r4, r5, r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	20000338 	.word	0x20000338
 8003678:	40affe00 	.word	0x40affe00
 800367c:	20000000 	.word	0x20000000
 8003680:	2000033c 	.word	0x2000033c
 8003684:	20000340 	.word	0x20000340

08003688 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <setCharges+0x20>)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <setCharges+0x24>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	20000454 	.word	0x20000454
 80036ac:	20000458 	.word	0x20000458

080036b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <setMeasurement+0x2c>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <setMeasurement+0x30>)
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <setMeasurement+0x34>)
 80036cc:	1dba      	adds	r2, r7, #6
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	801a      	strh	r2, [r3, #0]
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	2000044c 	.word	0x2000044c
 80036e0:	20000450 	.word	0x20000450
 80036e4:	2000045c 	.word	0x2000045c

080036e8 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80036f0:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <ESP_Init+0x1c>)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <ESP_Init+0x20>)
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000344 	.word	0x20000344
 8003708:	200000fb 	.word	0x200000fb

0800370c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800370c:	b5b0      	push	{r4, r5, r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	000a      	movs	r2, r1
 8003716:	1cbb      	adds	r3, r7, #2
 8003718:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800371a:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <ESP_Send+0x48>)
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	250f      	movs	r5, #15
 8003720:	197c      	adds	r4, r7, r5
 8003722:	1cbb      	adds	r3, r7, #2
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0019      	movs	r1, r3
 800372a:	f00a fa61 	bl	800dbf0 <HAL_UART_Transmit_DMA>
 800372e:	0003      	movs	r3, r0
 8003730:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003732:	197b      	adds	r3, r7, r5
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 800373a:	4a07      	ldr	r2, [pc, #28]	@ (8003758 <ESP_Send+0x4c>)
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <ESP_Send+0x50>)
 800373e:	0019      	movs	r1, r3
 8003740:	2003      	movs	r0, #3
 8003742:	f004 fc13 	bl	8007f6c <CreateLine>
    return false;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <ESP_Send+0x40>
  }
  return true;
 800374a:	2301      	movs	r3, #1
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bdb0      	pop	{r4, r5, r7, pc}
 8003754:	20000344 	.word	0x20000344
 8003758:	08012658 	.word	0x08012658
 800375c:	08012678 	.word	0x08012678

08003760 <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	000a      	movs	r2, r1
 800376a:	1cfb      	adds	r3, r7, #3
 800376c:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 800376e:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <ESP_Receive+0x58>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <ESP_Receive+0x5c>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	1cfb      	adds	r3, r7, #3
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b29a      	uxth	r2, r3
 800377e:	250f      	movs	r5, #15
 8003780:	197c      	adds	r4, r7, r5
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0019      	movs	r1, r3
 8003786:	f00a fac3 	bl	800dd10 <HAL_UART_Receive_DMA>
 800378a:	0003      	movs	r3, r0
 800378c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800378e:	197b      	adds	r3, r7, r5
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003796:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <ESP_Receive+0x60>)
 8003798:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <ESP_Receive+0x64>)
 800379a:	0019      	movs	r1, r3
 800379c:	2003      	movs	r0, #3
 800379e:	f004 fbe5 	bl	8007f6c <CreateLine>
    RxComplete = true;
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <ESP_Receive+0x58>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    return false;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <ESP_Receive+0x4e>
  }
  return true;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	20000348 	.word	0x20000348
 80037bc:	20000344 	.word	0x20000344
 80037c0:	0801267c 	.word	0x0801267c
 80037c4:	08012678 	.word	0x08012678

080037c8 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_UART_RxCpltCallback+0x2c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d108      	bne.n	80037ec <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 80037da:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <HAL_UART_RxCpltCallback+0x30>)
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 80037e0:	4a06      	ldr	r2, [pc, #24]	@ (80037fc <HAL_UART_RxCpltCallback+0x34>)
 80037e2:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <HAL_UART_RxCpltCallback+0x38>)
 80037e4:	0019      	movs	r1, r3
 80037e6:	2003      	movs	r0, #3
 80037e8:	f004 fbc0 	bl	8007f6c <CreateLine>
  }
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000344 	.word	0x20000344
 80037f8:	20000348 	.word	0x20000348
 80037fc:	0801269c 	.word	0x0801269c
 8003800:	08012678 	.word	0x08012678

08003804 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800380c:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <HAL_UART_ErrorCallback+0x20>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d102      	bne.n	800381c <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003816:	4b04      	ldr	r3, [pc, #16]	@ (8003828 <HAL_UART_ErrorCallback+0x24>)
 8003818:	2207      	movs	r2, #7
 800381a:	701a      	strb	r2, [r3, #0]
  }
}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000344 	.word	0x20000344
 8003828:	200000fb 	.word	0x200000fb

0800382c <CreateMessage>:
uint16_t CreateMessage(){
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b085      	sub	sp, #20
 8003830:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 8003832:	1dbb      	adds	r3, r7, #6
 8003834:	2200      	movs	r2, #0
 8003836:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID1, Temperature);
 8003838:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <CreateMessage+0x104>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	1c18      	adds	r0, r3, #0
 800383e:	f7ff fd8f 	bl	8003360 <__aeabi_f2d>
 8003842:	0002      	movs	r2, r0
 8003844:	000b      	movs	r3, r1
 8003846:	4c3b      	ldr	r4, [pc, #236]	@ (8003934 <CreateMessage+0x108>)
 8003848:	493b      	ldr	r1, [pc, #236]	@ (8003938 <CreateMessage+0x10c>)
 800384a:	483c      	ldr	r0, [pc, #240]	@ (800393c <CreateMessage+0x110>)
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	0022      	movs	r2, r4
 8003852:	f00c fadb 	bl	800fe0c <siprintf>
  messageLength += strlen(messagePart1);
 8003856:	4b39      	ldr	r3, [pc, #228]	@ (800393c <CreateMessage+0x110>)
 8003858:	0018      	movs	r0, r3
 800385a:	f7fc fc55 	bl	8000108 <strlen>
 800385e:	0003      	movs	r3, r0
 8003860:	b299      	uxth	r1, r3
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	1dba      	adds	r2, r7, #6
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	188a      	adds	r2, r1, r2
 800386a:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID2, Humidity);
 800386c:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <CreateMessage+0x114>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c18      	adds	r0, r3, #0
 8003872:	f7ff fd75 	bl	8003360 <__aeabi_f2d>
 8003876:	0002      	movs	r2, r0
 8003878:	000b      	movs	r3, r1
 800387a:	4c32      	ldr	r4, [pc, #200]	@ (8003944 <CreateMessage+0x118>)
 800387c:	4932      	ldr	r1, [pc, #200]	@ (8003948 <CreateMessage+0x11c>)
 800387e:	4833      	ldr	r0, [pc, #204]	@ (800394c <CreateMessage+0x120>)
 8003880:	9200      	str	r2, [sp, #0]
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	0022      	movs	r2, r4
 8003886:	f00c fac1 	bl	800fe0c <siprintf>
  messageLength += strlen(messagePart2);
 800388a:	4b30      	ldr	r3, [pc, #192]	@ (800394c <CreateMessage+0x120>)
 800388c:	0018      	movs	r0, r3
 800388e:	f7fc fc3b 	bl	8000108 <strlen>
 8003892:	0003      	movs	r3, r0
 8003894:	b299      	uxth	r1, r3
 8003896:	1dbb      	adds	r3, r7, #6
 8003898:	1dba      	adds	r2, r7, #6
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	188a      	adds	r2, r1, r2
 800389e:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":77", sensorID3);
 80038a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <CreateMessage+0x124>)
 80038a2:	492c      	ldr	r1, [pc, #176]	@ (8003954 <CreateMessage+0x128>)
 80038a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003958 <CreateMessage+0x12c>)
 80038a6:	0018      	movs	r0, r3
 80038a8:	f00c fab0 	bl	800fe0c <siprintf>
  messageLength += strlen(messagePart3);
 80038ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <CreateMessage+0x12c>)
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7fc fc2a 	bl	8000108 <strlen>
 80038b4:	0003      	movs	r3, r0
 80038b6:	b299      	uxth	r1, r3
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	1dba      	adds	r2, r7, #6
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	188a      	adds	r2, r1, r2
 80038c0:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d", sensorID4, VOCIndex);
 80038c2:	4b26      	ldr	r3, [pc, #152]	@ (800395c <CreateMessage+0x130>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <CreateMessage+0x134>)
 80038c8:	4926      	ldr	r1, [pc, #152]	@ (8003964 <CreateMessage+0x138>)
 80038ca:	4827      	ldr	r0, [pc, #156]	@ (8003968 <CreateMessage+0x13c>)
 80038cc:	f00c fa9e 	bl	800fe0c <siprintf>
  messageLength += strlen(messagePart4);
 80038d0:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <CreateMessage+0x13c>)
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fc fc18 	bl	8000108 <strlen>
 80038d8:	0003      	movs	r3, r0
 80038da:	b299      	uxth	r1, r3
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	1dba      	adds	r2, r7, #6
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	188a      	adds	r2, r1, r2
 80038e4:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID5, batteryCharge);
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <CreateMessage+0x140>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1c18      	adds	r0, r3, #0
 80038ec:	f7ff fd38 	bl	8003360 <__aeabi_f2d>
 80038f0:	0002      	movs	r2, r0
 80038f2:	000b      	movs	r3, r1
 80038f4:	4c1e      	ldr	r4, [pc, #120]	@ (8003970 <CreateMessage+0x144>)
 80038f6:	491f      	ldr	r1, [pc, #124]	@ (8003974 <CreateMessage+0x148>)
 80038f8:	481f      	ldr	r0, [pc, #124]	@ (8003978 <CreateMessage+0x14c>)
 80038fa:	9200      	str	r2, [sp, #0]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	0022      	movs	r2, r4
 8003900:	f00c fa84 	bl	800fe0c <siprintf>
  messageLength += strlen(messagePart5);
 8003904:	4b1c      	ldr	r3, [pc, #112]	@ (8003978 <CreateMessage+0x14c>)
 8003906:	0018      	movs	r0, r3
 8003908:	f7fc fbfe 	bl	8000108 <strlen>
 800390c:	0003      	movs	r3, r0
 800390e:	b299      	uxth	r1, r3
 8003910:	1dbb      	adds	r3, r7, #6
 8003912:	1dba      	adds	r2, r7, #6
 8003914:	8812      	ldrh	r2, [r2, #0]
 8003916:	188a      	adds	r2, r1, r2
 8003918:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 800391a:	1dbb      	adds	r3, r7, #6
 800391c:	1dba      	adds	r2, r7, #6
 800391e:	8812      	ldrh	r2, [r2, #0]
 8003920:	3214      	adds	r2, #20
 8003922:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003924:	1dbb      	adds	r3, r7, #6
 8003926:	881b      	ldrh	r3, [r3, #0]
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b003      	add	sp, #12
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	2000044c 	.word	0x2000044c
 8003934:	20000070 	.word	0x20000070
 8003938:	080126a8 	.word	0x080126a8
 800393c:	20000460 	.word	0x20000460
 8003940:	20000450 	.word	0x20000450
 8003944:	2000008c 	.word	0x2000008c
 8003948:	080126ec 	.word	0x080126ec
 800394c:	200004e0 	.word	0x200004e0
 8003950:	200000a8 	.word	0x200000a8
 8003954:	08012730 	.word	0x08012730
 8003958:	20000560 	.word	0x20000560
 800395c:	2000045c 	.word	0x2000045c
 8003960:	200000c4 	.word	0x200000c4
 8003964:	08012774 	.word	0x08012774
 8003968:	200005e0 	.word	0x200005e0
 800396c:	20000454 	.word	0x20000454
 8003970:	200000e0 	.word	0x200000e0
 8003974:	080127b8 	.word	0x080127b8
 8003978:	20000660 	.word	0x20000660

0800397c <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <SetCommandBuffer+0x24>)
 800398c:	0018      	movs	r0, r3
 800398e:	f00c fae9 	bl	800ff64 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <SetCommandBuffer+0x28>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200006ec 	.word	0x200006ec
 80039a4:	200008ec 	.word	0x200008ec

080039a8 <StartProg>:
void StartProg(){
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 80039ac:	23fa      	movs	r3, #250	@ 0xfa
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f004 fedd 	bl	8008770 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80039b6:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <StartProg+0x6c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	2101      	movs	r1, #1
 80039bc:	0018      	movs	r0, r3
 80039be:	f006 f863 	bl	8009a88 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80039c2:	2064      	movs	r0, #100	@ 0x64
 80039c4:	f004 fed4 	bl	8008770 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80039c8:	4b12      	ldr	r3, [pc, #72]	@ (8003a14 <StartProg+0x6c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	2102      	movs	r1, #2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f006 f85a 	bl	8009a88 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80039d4:	23fa      	movs	r3, #250	@ 0xfa
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	0018      	movs	r0, r3
 80039da:	f004 fec9 	bl	8008770 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <StartProg+0x6c>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	2101      	movs	r1, #1
 80039e4:	0018      	movs	r0, r3
 80039e6:	f006 f84f 	bl	8009a88 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80039ea:	23fa      	movs	r3, #250	@ 0xfa
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	0018      	movs	r0, r3
 80039f0:	f004 febe 	bl	8008770 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80039f4:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <StartProg+0x6c>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	2102      	movs	r1, #2
 80039fa:	0018      	movs	r0, r3
 80039fc:	f006 f844 	bl	8009a88 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a00:	2028      	movs	r0, #40	@ 0x28
 8003a02:	f004 feb5 	bl	8008770 <HAL_Delay>
  EspState = ESP_STATE_BOOT;
 8003a06:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <StartProg+0x70>)
 8003a08:	220a      	movs	r2, #10
 8003a0a:	701a      	strb	r2, [r3, #0]
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	50001c00 	.word	0x50001c00
 8003a18:	200000fb 	.word	0x200000fb

08003a1c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	46c6      	mov	lr, r8
 8003a20:	b500      	push	{lr}
 8003a22:	b094      	sub	sp, #80	@ 0x50
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	61f8      	str	r0, [r7, #28]
 8003a28:	0008      	movs	r0, r1
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	261a      	movs	r6, #26
 8003a2e:	19bb      	adds	r3, r7, r6
 8003a30:	1c02      	adds	r2, r0, #0
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	2319      	movs	r3, #25
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	1c0a      	adds	r2, r1, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	466b      	mov	r3, sp
 8003a3e:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003a40:	19bb      	adds	r3, r7, r6
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	1e5a      	subs	r2, r3, #1
 8003a48:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	60ba      	str	r2, [r7, #8]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60fa      	str	r2, [r7, #12]
 8003a52:	68b8      	ldr	r0, [r7, #8]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	0002      	movs	r2, r0
 8003a58:	0f52      	lsrs	r2, r2, #29
 8003a5a:	000e      	movs	r6, r1
 8003a5c:	00f6      	lsls	r6, r6, #3
 8003a5e:	617e      	str	r6, [r7, #20]
 8003a60:	697e      	ldr	r6, [r7, #20]
 8003a62:	4316      	orrs	r6, r2
 8003a64:	617e      	str	r6, [r7, #20]
 8003a66:	0002      	movs	r2, r0
 8003a68:	00d2      	lsls	r2, r2, #3
 8003a6a:	613a      	str	r2, [r7, #16]
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	603a      	str	r2, [r7, #0]
 8003a70:	2200      	movs	r2, #0
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	6838      	ldr	r0, [r7, #0]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	0002      	movs	r2, r0
 8003a7a:	0f52      	lsrs	r2, r2, #29
 8003a7c:	000e      	movs	r6, r1
 8003a7e:	00f5      	lsls	r5, r6, #3
 8003a80:	4315      	orrs	r5, r2
 8003a82:	0002      	movs	r2, r0
 8003a84:	00d4      	lsls	r4, r2, #3
 8003a86:	3307      	adds	r3, #7
 8003a88:	08db      	lsrs	r3, r3, #3
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	466a      	mov	r2, sp
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	469d      	mov	sp, r3
 8003a92:	466b      	mov	r3, sp
 8003a94:	3300      	adds	r3, #0
 8003a96:	643b      	str	r3, [r7, #64]	@ 0x40
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003a98:	2337      	movs	r3, #55	@ 0x37
 8003a9a:	2118      	movs	r1, #24
 8003a9c:	185b      	adds	r3, r3, r1
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003aa4:	2334      	movs	r3, #52	@ 0x34
 8003aa6:	185b      	adds	r3, r3, r1
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e013      	b.n	8003ad8 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003ab0:	2034      	movs	r0, #52	@ 0x34
 8003ab2:	2418      	movs	r4, #24
 8003ab4:	1903      	adds	r3, r0, r4
 8003ab6:	19db      	adds	r3, r3, r7
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	18d2      	adds	r2, r2, r3
 8003abe:	1903      	adds	r3, r0, r4
 8003ac0:	19db      	adds	r3, r3, r7
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	7811      	ldrb	r1, [r2, #0]
 8003ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ac8:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003aca:	1903      	adds	r3, r0, r4
 8003acc:	19db      	adds	r3, r3, r7
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	1903      	adds	r3, r0, r4
 8003ad2:	19db      	adds	r3, r3, r7
 8003ad4:	3201      	adds	r2, #1
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	2334      	movs	r3, #52	@ 0x34
 8003ada:	2018      	movs	r0, #24
 8003adc:	181b      	adds	r3, r3, r0
 8003ade:	19da      	adds	r2, r3, r7
 8003ae0:	211a      	movs	r1, #26
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	8812      	ldrh	r2, [r2, #0]
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3e1      	bcc.n	8003ab0 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003af2:	2100      	movs	r1, #0
 8003af4:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003af6:	2327      	movs	r3, #39	@ 0x27
 8003af8:	0004      	movs	r4, r0
 8003afa:	191b      	adds	r3, r3, r4
 8003afc:	19db      	adds	r3, r3, r7
 8003afe:	224e      	movs	r2, #78	@ 0x4e
 8003b00:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  const char OK[] = AT_RESPONSE_OK;
 8003b02:	201c      	movs	r0, #28
 8003b04:	1903      	adds	r3, r0, r4
 8003b06:	19db      	adds	r3, r3, r7
 8003b08:	4a4f      	ldr	r2, [pc, #316]	@ (8003c48 <ParseBuffer+0x22c>)
 8003b0a:	8811      	ldrh	r1, [r2, #0]
 8003b0c:	8019      	strh	r1, [r3, #0]
 8003b0e:	7892      	ldrb	r2, [r2, #2]
 8003b10:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b12:	2314      	movs	r3, #20
 8003b14:	191b      	adds	r3, r3, r4
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	4a4c      	ldr	r2, [pc, #304]	@ (8003c4c <ParseBuffer+0x230>)
 8003b1a:	6811      	ldr	r1, [r2, #0]
 8003b1c:	6019      	str	r1, [r3, #0]
 8003b1e:	8892      	ldrh	r2, [r2, #4]
 8003b20:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b22:	230c      	movs	r3, #12
 8003b24:	191b      	adds	r3, r3, r4
 8003b26:	19db      	adds	r3, r3, r7
 8003b28:	4a49      	ldr	r2, [pc, #292]	@ (8003c50 <ParseBuffer+0x234>)
 8003b2a:	6811      	ldr	r1, [r2, #0]
 8003b2c:	6019      	str	r1, [r3, #0]
 8003b2e:	8892      	ldrh	r2, [r2, #4]
 8003b30:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b32:	2308      	movs	r3, #8
 8003b34:	0021      	movs	r1, r4
 8003b36:	185b      	adds	r3, r3, r1
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	223e      	movs	r2, #62	@ 0x3e
 8003b3c:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003b3e:	2319      	movs	r3, #25
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <ParseBuffer+0x13e>
    ParsePoint = strstr(tempBuf, OK);
 8003b48:	1843      	adds	r3, r0, r1
 8003b4a:	19da      	adds	r2, r3, r7
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4e:	0011      	movs	r1, r2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f00c fa1b 	bl	800ff8c <strstr>
 8003b56:	0003      	movs	r3, r0
 8003b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003b5a:	2319      	movs	r3, #25
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10a      	bne.n	8003b7a <ParseBuffer+0x15e>
    ParsePoint = strstr(tempBuf, ready);
 8003b64:	230c      	movs	r3, #12
 8003b66:	2218      	movs	r2, #24
 8003b68:	189b      	adds	r3, r3, r2
 8003b6a:	19da      	adds	r2, r3, r7
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6e:	0011      	movs	r1, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	f00c fa0b 	bl	800ff8c <strstr>
 8003b76:	0003      	movs	r3, r0
 8003b78:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003b7a:	2319      	movs	r3, #25
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d10a      	bne.n	8003b9a <ParseBuffer+0x17e>
    ParsePoint = strstr(tempBuf, start);
 8003b84:	2308      	movs	r3, #8
 8003b86:	2218      	movs	r2, #24
 8003b88:	189b      	adds	r3, r3, r2
 8003b8a:	19da      	adds	r2, r3, r7
 8003b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f00c f9fb 	bl	800ff8c <strstr>
 8003b96:	0003      	movs	r3, r0
 8003b98:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003b9a:	2314      	movs	r3, #20
 8003b9c:	2418      	movs	r4, #24
 8003b9e:	191b      	adds	r3, r3, r4
 8003ba0:	19da      	adds	r2, r3, r7
 8003ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba4:	0011      	movs	r1, r2
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f00c f9f0 	bl	800ff8c <strstr>
 8003bac:	0003      	movs	r3, r0
 8003bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(len > 1 ){
 8003bb0:	231a      	movs	r3, #26
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d939      	bls.n	8003c2e <ParseBuffer+0x212>
    TestChar = *ParsePoint;
 8003bba:	2127      	movs	r1, #39	@ 0x27
 8003bbc:	190b      	adds	r3, r1, r4
 8003bbe:	19db      	adds	r3, r3, r7
 8003bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003bc6:	190b      	adds	r3, r1, r4
 8003bc8:	19db      	adds	r3, r3, r7
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b4f      	cmp	r3, #79	@ 0x4f
 8003bce:	d104      	bne.n	8003bda <ParseBuffer+0x1be>
      status = RECEIVE_STATUS_OK;
 8003bd0:	2337      	movs	r3, #55	@ 0x37
 8003bd2:	191b      	adds	r3, r3, r4
 8003bd4:	19db      	adds	r3, r3, r7
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003bda:	2327      	movs	r3, #39	@ 0x27
 8003bdc:	2218      	movs	r2, #24
 8003bde:	189b      	adds	r3, r3, r2
 8003be0:	19db      	adds	r3, r3, r7
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b72      	cmp	r3, #114	@ 0x72
 8003be6:	d104      	bne.n	8003bf2 <ParseBuffer+0x1d6>
      status = RECEIVE_STATUS_READY;
 8003be8:	2337      	movs	r3, #55	@ 0x37
 8003bea:	189b      	adds	r3, r3, r2
 8003bec:	19db      	adds	r3, r3, r7
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003bf2:	2327      	movs	r3, #39	@ 0x27
 8003bf4:	2218      	movs	r2, #24
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	19db      	adds	r3, r3, r7
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8003bfe:	d104      	bne.n	8003c0a <ParseBuffer+0x1ee>
      status = RECEIVE_STATUS_START;
 8003c00:	2337      	movs	r3, #55	@ 0x37
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	19db      	adds	r3, r3, r7
 8003c06:	2205      	movs	r2, #5
 8003c08:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c0a:	2127      	movs	r1, #39	@ 0x27
 8003c0c:	2018      	movs	r0, #24
 8003c0e:	180b      	adds	r3, r1, r0
 8003c10:	19db      	adds	r3, r3, r7
 8003c12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003c18:	0002      	movs	r2, r0
 8003c1a:	188b      	adds	r3, r1, r2
 8003c1c:	19db      	adds	r3, r3, r7
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b45      	cmp	r3, #69	@ 0x45
 8003c22:	d104      	bne.n	8003c2e <ParseBuffer+0x212>
      status = RECEIVE_STATUS_ERROR;
 8003c24:	2337      	movs	r3, #55	@ 0x37
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	19db      	adds	r3, r3, r7
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003c2e:	2337      	movs	r3, #55	@ 0x37
 8003c30:	2218      	movs	r2, #24
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	19db      	adds	r3, r3, r7
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	46c5      	mov	sp, r8
//          if (TempIndex >= ESP_MAX_BUFFER_SIZE) {
//              TempIndex = 0;
//          }
//       }
//    }
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b014      	add	sp, #80	@ 0x50
 8003c40:	bc80      	pop	{r7}
 8003c42:	46b8      	mov	r8, r7
 8003c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	08012800 	.word	0x08012800
 8003c4c:	08012804 	.word	0x08012804
 8003c50:	0801280c 	.word	0x0801280c

08003c54 <PollAwake>:
/* line 228 to 383 contain the AT commands. This could be optimized by loading the commands into
 * an array and having the function handling the sending. This was the simple but verbose
 * implementation.
 */
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <PollAwake+0x3c>)
 8003c5c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff fe8b 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7fc fa4d 	bl	8000108 <strlen>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	0011      	movs	r1, r2
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fd48 	bl	800370c <ESP_Send>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d001      	beq.n	8003c84 <PollAwake+0x30>
    return true;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <PollAwake+0x32>
  }
  else{
    return false;
 8003c84:	2300      	movs	r3, #0
  }
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	08012814 	.word	0x08012814

08003c94 <RFPower>:
bool RFPower(){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <RFPower+0x3c>)
 8003c9c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7ff fe6b 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fc fa2d 	bl	8000108 <strlen>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff fd28 	bl	800370c <ESP_Send>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <RFPower+0x30>
    return true;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <RFPower+0x32>
  }
  else{
    return false;
 8003cc4:	2300      	movs	r3, #0
  }
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	0801281c 	.word	0x0801281c

08003cd4 <CheckRFPower>:
bool CheckRFPower(){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003cda:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <CheckRFPower+0x3c>)
 8003cdc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff fe4b 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7fc fa0d 	bl	8000108 <strlen>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0011      	movs	r1, r2
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7ff fd08 	bl	800370c <ESP_Send>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d001      	beq.n	8003d04 <CheckRFPower+0x30>
    return true;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <CheckRFPower+0x32>
  }
  else{
    return false;
 8003d04:	2300      	movs	r3, #0
  }
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	0801282c 	.word	0x0801282c

08003d14 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <ATRestore+0x3c>)
 8003d1c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7ff fe2b 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7fc f9ed 	bl	8000108 <strlen>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0011      	movs	r1, r2
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7ff fce8 	bl	800370c <ESP_Send>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d001      	beq.n	8003d44 <ATRestore+0x30>
    return true;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <ATRestore+0x32>
  }
  else{
    return false;
 8003d44:	2300      	movs	r3, #0
  }
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b002      	add	sp, #8
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	0801283c 	.word	0x0801283c

08003d54 <CWINIT>:
bool CWINIT(){
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <CWINIT+0x3c>)
 8003d5c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff fe0b 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7fc f9cd 	bl	8000108 <strlen>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0011      	movs	r1, r2
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff fcc8 	bl	800370c <ESP_Send>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d001      	beq.n	8003d84 <CWINIT+0x30>
    return true;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <CWINIT+0x32>
  }
  else{
    return false;
 8003d84:	2300      	movs	r3, #0
  }
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	0801284c 	.word	0x0801284c

08003d94 <CWMODE1>:
bool CWMODE1(){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <CWMODE1+0x3c>)
 8003d9c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff fdeb 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc f9ad 	bl	8000108 <strlen>
 8003dae:	0003      	movs	r3, r0
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0011      	movs	r1, r2
 8003db6:	0018      	movs	r0, r3
 8003db8:	f7ff fca8 	bl	800370c <ESP_Send>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d001      	beq.n	8003dc4 <CWMODE1+0x30>
    return true;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <CWMODE1+0x32>
  }
  else{
    return false;
 8003dc4:	2300      	movs	r3, #0
  }
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	0801285c 	.word	0x0801285c

08003dd4 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <CWAUTOCONN+0x3c>)
 8003ddc:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff fdcb 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fc f98d 	bl	8000108 <strlen>
 8003dee:	0003      	movs	r3, r0
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0011      	movs	r1, r2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff fc88 	bl	800370c <ESP_Send>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d001      	beq.n	8003e04 <CWAUTOCONN+0x30>
    return true;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003e04:	2300      	movs	r3, #0
  }
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b002      	add	sp, #8
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	0801286c 	.word	0x0801286c

08003e14 <CWJAP>:
bool CWJAP(){
 8003e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e16:	46c6      	mov	lr, r8
 8003e18:	b500      	push	{lr}
 8003e1a:	b0a2      	sub	sp, #136	@ 0x88
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	466b      	mov	r3, sp
 8003e20:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003e22:	2618      	movs	r6, #24
 8003e24:	19bb      	adds	r3, r7, r6
 8003e26:	2264      	movs	r2, #100	@ 0x64
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f00c f892 	bl	800ff54 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Password);
 8003e30:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <CWJAP+0xf0>)
 8003e32:	4a35      	ldr	r2, [pc, #212]	@ (8003f08 <CWJAP+0xf4>)
 8003e34:	4935      	ldr	r1, [pc, #212]	@ (8003f0c <CWJAP+0xf8>)
 8003e36:	19b8      	adds	r0, r7, r6
 8003e38:	f00b ffe8 	bl	800fe0c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003e3c:	19bb      	adds	r3, r7, r6
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7fc f962 	bl	8000108 <strlen>
 8003e44:	0002      	movs	r2, r0
 8003e46:	216f      	movs	r1, #111	@ 0x6f
 8003e48:	0030      	movs	r0, r6
 8003e4a:	180b      	adds	r3, r1, r0
 8003e4c:	19db      	adds	r3, r3, r7
 8003e4e:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003e50:	180b      	adds	r3, r1, r0
 8003e52:	19db      	adds	r3, r3, r7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	2180      	movs	r1, #128	@ 0x80
 8003e5c:	1879      	adds	r1, r7, r1
 8003e5e:	600a      	str	r2, [r1, #0]
 8003e60:	001a      	movs	r2, r3
 8003e62:	60ba      	str	r2, [r7, #8]
 8003e64:	2200      	movs	r2, #0
 8003e66:	60fa      	str	r2, [r7, #12]
 8003e68:	68b8      	ldr	r0, [r7, #8]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	0f52      	lsrs	r2, r2, #29
 8003e70:	000e      	movs	r6, r1
 8003e72:	00f6      	lsls	r6, r6, #3
 8003e74:	617e      	str	r6, [r7, #20]
 8003e76:	697e      	ldr	r6, [r7, #20]
 8003e78:	4316      	orrs	r6, r2
 8003e7a:	617e      	str	r6, [r7, #20]
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	00d2      	lsls	r2, r2, #3
 8003e80:	613a      	str	r2, [r7, #16]
 8003e82:	001a      	movs	r2, r3
 8003e84:	603a      	str	r2, [r7, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	6838      	ldr	r0, [r7, #0]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	0002      	movs	r2, r0
 8003e90:	0f52      	lsrs	r2, r2, #29
 8003e92:	000e      	movs	r6, r1
 8003e94:	00f5      	lsls	r5, r6, #3
 8003e96:	4315      	orrs	r5, r2
 8003e98:	0002      	movs	r2, r0
 8003e9a:	00d4      	lsls	r4, r2, #3
 8003e9c:	3307      	adds	r3, #7
 8003e9e:	08db      	lsrs	r3, r3, #3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	466a      	mov	r2, sp
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	469d      	mov	sp, r3
 8003ea8:	466b      	mov	r3, sp
 8003eaa:	3300      	adds	r3, #0
 8003eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  atCommand[len] = '\0';
 8003eae:	246f      	movs	r4, #111	@ 0x6f
 8003eb0:	2018      	movs	r0, #24
 8003eb2:	1823      	adds	r3, r4, r0
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003eba:	2100      	movs	r1, #0
 8003ebc:	54d1      	strb	r1, [r2, r3]
  strncpy(atCommand, atCommandBuff, len);
 8003ebe:	1823      	adds	r3, r4, r0
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	0005      	movs	r5, r0
 8003ec6:	1839      	adds	r1, r7, r0
 8003ec8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f00c f84a 	bl	800ff64 <strncpy>
  SetCommandBuffer(atCommand);
 8003ed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7ff fd52 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003ed8:	1963      	adds	r3, r4, r5
 8003eda:	19db      	adds	r3, r3, r7
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff fc11 	bl	800370c <ESP_Send>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <CWJAP+0xde>
    return true;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <CWJAP+0xe0>
  }
  else{
    return false;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	46c5      	mov	sp, r8
  }
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b022      	add	sp, #136	@ 0x88
 8003efc:	bc80      	pop	{r7}
 8003efe:	46b8      	mov	r8, r7
 8003f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	20000010 	.word	0x20000010
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	08012880 	.word	0x08012880

08003f10 <CWMODE3>:
bool CWMODE3(){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <CWMODE3+0x3c>)
 8003f18:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fd2d 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fc f8ef 	bl	8000108 <strlen>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff fbea 	bl	800370c <ESP_Send>
 8003f38:	1e03      	subs	r3, r0, #0
 8003f3a:	d001      	beq.n	8003f40 <CWMODE3+0x30>
    return true;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <CWMODE3+0x32>
  }
  else{
    return false;
 8003f40:	2300      	movs	r3, #0
  }
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	08012898 	.word	0x08012898

08003f50 <CWSAP>:
bool CWSAP(){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <CWSAP+0x3c>)
 8003f58:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff fd0d 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc f8cf 	bl	8000108 <strlen>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7ff fbca 	bl	800370c <ESP_Send>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <CWSAP+0x30>
    return true;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <CWSAP+0x32>
  }
  else{
    return false;
 8003f80:	2300      	movs	r3, #0
  }
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b002      	add	sp, #8
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	080128a8 	.word	0x080128a8

08003f90 <CIPMUX>:
bool CIPMUX(){
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <CIPMUX+0x3c>)
 8003f98:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff fced 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fc f8af 	bl	8000108 <strlen>
 8003faa:	0003      	movs	r3, r0
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0011      	movs	r1, r2
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7ff fbaa 	bl	800370c <ESP_Send>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d001      	beq.n	8003fc0 <CIPMUX+0x30>
    return true;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <CIPMUX+0x32>
  }
  else{
    return false;
 8003fc0:	2300      	movs	r3, #0
  }
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	080128cc 	.word	0x080128cc

08003fd0 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <WEBSERVER+0x3c>)
 8003fd8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fccd 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7fc f88f 	bl	8000108 <strlen>
 8003fea:	0003      	movs	r3, r0
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0011      	movs	r1, r2
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f7ff fb8a 	bl	800370c <ESP_Send>
 8003ff8:	1e03      	subs	r3, r0, #0
 8003ffa:	d001      	beq.n	8004000 <WEBSERVER+0x30>
    return true;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <WEBSERVER+0x32>
  }
  else{
    return false;
 8004000:	2300      	movs	r3, #0
  }
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	080128dc 	.word	0x080128dc

08004010 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	46c6      	mov	lr, r8
 8004014:	b500      	push	{lr}
 8004016:	4c47      	ldr	r4, [pc, #284]	@ (8004134 <HTTPCPOST+0x124>)
 8004018:	44a5      	add	sp, r4
 800401a:	af00      	add	r7, sp, #0
 800401c:	466b      	mov	r3, sp
 800401e:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004020:	4b45      	ldr	r3, [pc, #276]	@ (8004138 <HTTPCPOST+0x128>)
 8004022:	2218      	movs	r2, #24
 8004024:	189b      	adds	r3, r3, r2
 8004026:	19dc      	adds	r4, r3, r7
 8004028:	f7ff fc00 	bl	800382c <CreateMessage>
 800402c:	0003      	movs	r3, r0
 800402e:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", API, length);
 8004030:	4b41      	ldr	r3, [pc, #260]	@ (8004138 <HTTPCPOST+0x128>)
 8004032:	2218      	movs	r2, #24
 8004034:	189b      	adds	r3, r3, r2
 8004036:	19db      	adds	r3, r3, r7
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	4a40      	ldr	r2, [pc, #256]	@ (800413c <HTTPCPOST+0x12c>)
 800403c:	4940      	ldr	r1, [pc, #256]	@ (8004140 <HTTPCPOST+0x130>)
 800403e:	201c      	movs	r0, #28
 8004040:	1838      	adds	r0, r7, r0
 8004042:	f00b fee3 	bl	800fe0c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004046:	231c      	movs	r3, #28
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	0018      	movs	r0, r3
 800404c:	f7fc f85c 	bl	8000108 <strlen>
 8004050:	0002      	movs	r2, r0
 8004052:	4c3c      	ldr	r4, [pc, #240]	@ (8004144 <HTTPCPOST+0x134>)
 8004054:	2318      	movs	r3, #24
 8004056:	18e3      	adds	r3, r4, r3
 8004058:	19db      	adds	r3, r3, r7
 800405a:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800405c:	2318      	movs	r3, #24
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	19db      	adds	r3, r3, r7
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	1e5a      	subs	r2, r3, #1
 8004068:	2198      	movs	r1, #152	@ 0x98
 800406a:	0089      	lsls	r1, r1, #2
 800406c:	2018      	movs	r0, #24
 800406e:	1809      	adds	r1, r1, r0
 8004070:	19c9      	adds	r1, r1, r7
 8004072:	600a      	str	r2, [r1, #0]
 8004074:	001a      	movs	r2, r3
 8004076:	0015      	movs	r5, r2
 8004078:	2200      	movs	r2, #0
 800407a:	0016      	movs	r6, r2
 800407c:	0028      	movs	r0, r5
 800407e:	0031      	movs	r1, r6
 8004080:	0002      	movs	r2, r0
 8004082:	0f52      	lsrs	r2, r2, #29
 8004084:	000d      	movs	r5, r1
 8004086:	00ed      	lsls	r5, r5, #3
 8004088:	617d      	str	r5, [r7, #20]
 800408a:	697d      	ldr	r5, [r7, #20]
 800408c:	4315      	orrs	r5, r2
 800408e:	617d      	str	r5, [r7, #20]
 8004090:	0002      	movs	r2, r0
 8004092:	00d2      	lsls	r2, r2, #3
 8004094:	613a      	str	r2, [r7, #16]
 8004096:	001a      	movs	r2, r3
 8004098:	603a      	str	r2, [r7, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	6838      	ldr	r0, [r7, #0]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	0002      	movs	r2, r0
 80040a4:	0f52      	lsrs	r2, r2, #29
 80040a6:	000d      	movs	r5, r1
 80040a8:	00ed      	lsls	r5, r5, #3
 80040aa:	60fd      	str	r5, [r7, #12]
 80040ac:	68fd      	ldr	r5, [r7, #12]
 80040ae:	4315      	orrs	r5, r2
 80040b0:	60fd      	str	r5, [r7, #12]
 80040b2:	0002      	movs	r2, r0
 80040b4:	00d2      	lsls	r2, r2, #3
 80040b6:	60ba      	str	r2, [r7, #8]
 80040b8:	3307      	adds	r3, #7
 80040ba:	08db      	lsrs	r3, r3, #3
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	466a      	mov	r2, sp
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	469d      	mov	sp, r3
 80040c4:	466b      	mov	r3, sp
 80040c6:	3300      	adds	r3, #0
 80040c8:	2597      	movs	r5, #151	@ 0x97
 80040ca:	00ad      	lsls	r5, r5, #2
 80040cc:	2218      	movs	r2, #24
 80040ce:	18aa      	adds	r2, r5, r2
 80040d0:	19d2      	adds	r2, r2, r7
 80040d2:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 80040d4:	2318      	movs	r3, #24
 80040d6:	18e3      	adds	r3, r4, r3
 80040d8:	19db      	adds	r3, r3, r7
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	231c      	movs	r3, #28
 80040de:	18f9      	adds	r1, r7, r3
 80040e0:	2318      	movs	r3, #24
 80040e2:	18eb      	adds	r3, r5, r3
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f00b ff3b 	bl	800ff64 <strncpy>
  SetCommandBuffer(atCommand);
 80040ee:	2318      	movs	r3, #24
 80040f0:	18eb      	adds	r3, r5, r3
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff fc40 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 80040fc:	2318      	movs	r3, #24
 80040fe:	18e3      	adds	r3, r4, r3
 8004100:	19db      	adds	r3, r3, r7
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	b29a      	uxth	r2, r3
 8004106:	2318      	movs	r3, #24
 8004108:	18eb      	adds	r3, r5, r3
 800410a:	19db      	adds	r3, r3, r7
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0011      	movs	r1, r2
 8004110:	0018      	movs	r0, r3
 8004112:	f7ff fafb 	bl	800370c <ESP_Send>
 8004116:	1e03      	subs	r3, r0, #0
 8004118:	d001      	beq.n	800411e <HTTPCPOST+0x10e>
    return true;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HTTPCPOST+0x110>
  }
  else{
    return false;
 800411e:	2300      	movs	r3, #0
 8004120:	46c5      	mov	sp, r8
  }
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	23a0      	movs	r3, #160	@ 0xa0
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	449d      	add	sp, r3
 800412c:	bc80      	pop	{r7}
 800412e:	46b8      	mov	r8, r7
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	fffffd80 	.word	0xfffffd80
 8004138:	00000266 	.word	0x00000266
 800413c:	2000002c 	.word	0x2000002c
 8004140:	080128f4 	.word	0x080128f4
 8004144:	00000265 	.word	0x00000265

08004148 <SENDDATA>:
bool SENDDATA(){
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414a:	46c6      	mov	lr, r8
 800414c:	b500      	push	{lr}
 800414e:	4c4c      	ldr	r4, [pc, #304]	@ (8004280 <SENDDATA+0x138>)
 8004150:	44a5      	add	sp, r4
 8004152:	af04      	add	r7, sp, #16
 8004154:	466b      	mov	r3, sp
 8004156:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004158:	23a4      	movs	r3, #164	@ 0xa4
 800415a:	009a      	lsls	r2, r3, #2
 800415c:	261c      	movs	r6, #28
 800415e:	19bb      	adds	r3, r7, r6
 8004160:	2100      	movs	r1, #0
 8004162:	0018      	movs	r0, r3
 8004164:	f00b fef6 	bl	800ff54 <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 8004168:	4a46      	ldr	r2, [pc, #280]	@ (8004284 <SENDDATA+0x13c>)
 800416a:	4947      	ldr	r1, [pc, #284]	@ (8004288 <SENDDATA+0x140>)
 800416c:	4847      	ldr	r0, [pc, #284]	@ (800428c <SENDDATA+0x144>)
 800416e:	19be      	adds	r6, r7, r6
 8004170:	4b47      	ldr	r3, [pc, #284]	@ (8004290 <SENDDATA+0x148>)
 8004172:	9302      	str	r3, [sp, #8]
 8004174:	4b47      	ldr	r3, [pc, #284]	@ (8004294 <SENDDATA+0x14c>)
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	4b47      	ldr	r3, [pc, #284]	@ (8004298 <SENDDATA+0x150>)
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	0013      	movs	r3, r2
 800417e:	000a      	movs	r2, r1
 8004180:	0001      	movs	r1, r0
 8004182:	0030      	movs	r0, r6
 8004184:	f00b fe42 	bl	800fe0c <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004188:	231c      	movs	r3, #28
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	0018      	movs	r0, r3
 800418e:	f7fb ffbb 	bl	8000108 <strlen>
 8004192:	0002      	movs	r2, r0
 8004194:	4e41      	ldr	r6, [pc, #260]	@ (800429c <SENDDATA+0x154>)
 8004196:	2018      	movs	r0, #24
 8004198:	1831      	adds	r1, r6, r0
 800419a:	19cb      	adds	r3, r1, r7
 800419c:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 800419e:	1832      	adds	r2, r6, r0
 80041a0:	19d3      	adds	r3, r2, r7
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	3301      	adds	r3, #1
 80041a6:	1e5a      	subs	r2, r3, #1
 80041a8:	21a6      	movs	r1, #166	@ 0xa6
 80041aa:	0089      	lsls	r1, r1, #2
 80041ac:	1809      	adds	r1, r1, r0
 80041ae:	19c9      	adds	r1, r1, r7
 80041b0:	600a      	str	r2, [r1, #0]
 80041b2:	001a      	movs	r2, r3
 80041b4:	60ba      	str	r2, [r7, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	60fa      	str	r2, [r7, #12]
 80041ba:	68b8      	ldr	r0, [r7, #8]
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	0002      	movs	r2, r0
 80041c0:	0f52      	lsrs	r2, r2, #29
 80041c2:	000e      	movs	r6, r1
 80041c4:	00f6      	lsls	r6, r6, #3
 80041c6:	617e      	str	r6, [r7, #20]
 80041c8:	697e      	ldr	r6, [r7, #20]
 80041ca:	4316      	orrs	r6, r2
 80041cc:	617e      	str	r6, [r7, #20]
 80041ce:	0002      	movs	r2, r0
 80041d0:	00d2      	lsls	r2, r2, #3
 80041d2:	613a      	str	r2, [r7, #16]
 80041d4:	001a      	movs	r2, r3
 80041d6:	603a      	str	r2, [r7, #0]
 80041d8:	2200      	movs	r2, #0
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	6838      	ldr	r0, [r7, #0]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	0002      	movs	r2, r0
 80041e2:	0f52      	lsrs	r2, r2, #29
 80041e4:	000e      	movs	r6, r1
 80041e6:	00f5      	lsls	r5, r6, #3
 80041e8:	4315      	orrs	r5, r2
 80041ea:	0002      	movs	r2, r0
 80041ec:	00d4      	lsls	r4, r2, #3
 80041ee:	3307      	adds	r3, #7
 80041f0:	08db      	lsrs	r3, r3, #3
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	466a      	mov	r2, sp
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	469d      	mov	sp, r3
 80041fa:	ab04      	add	r3, sp, #16
 80041fc:	3300      	adds	r3, #0
 80041fe:	21a5      	movs	r1, #165	@ 0xa5
 8004200:	0089      	lsls	r1, r1, #2
 8004202:	2018      	movs	r0, #24
 8004204:	180a      	adds	r2, r1, r0
 8004206:	19d2      	adds	r2, r2, r7
 8004208:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 800420a:	4e24      	ldr	r6, [pc, #144]	@ (800429c <SENDDATA+0x154>)
 800420c:	1832      	adds	r2, r6, r0
 800420e:	19d3      	adds	r3, r2, r7
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	001a      	movs	r2, r3
 8004216:	000c      	movs	r4, r1
 8004218:	0005      	movs	r5, r0
 800421a:	1821      	adds	r1, r4, r0
 800421c:	19cb      	adds	r3, r1, r7
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2100      	movs	r1, #0
 8004222:	0018      	movs	r0, r3
 8004224:	f00b fe96 	bl	800ff54 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004228:	0028      	movs	r0, r5
 800422a:	1832      	adds	r2, r6, r0
 800422c:	19d3      	adds	r3, r2, r7
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	231c      	movs	r3, #28
 8004232:	18f9      	adds	r1, r7, r3
 8004234:	0005      	movs	r5, r0
 8004236:	1963      	adds	r3, r4, r5
 8004238:	19db      	adds	r3, r3, r7
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0018      	movs	r0, r3
 800423e:	f00b fe91 	bl	800ff64 <strncpy>
  SetCommandBuffer(atCommand);
 8004242:	1963      	adds	r3, r4, r5
 8004244:	19db      	adds	r3, r3, r7
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0018      	movs	r0, r3
 800424a:	f7ff fb97 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800424e:	0028      	movs	r0, r5
 8004250:	1833      	adds	r3, r6, r0
 8004252:	19db      	adds	r3, r3, r7
 8004254:	881a      	ldrh	r2, [r3, #0]
 8004256:	1823      	adds	r3, r4, r0
 8004258:	19db      	adds	r3, r3, r7
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0011      	movs	r1, r2
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff fa54 	bl	800370c <ESP_Send>
 8004264:	1e03      	subs	r3, r0, #0
 8004266:	d001      	beq.n	800426c <SENDDATA+0x124>
    return true;
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <SENDDATA+0x126>
  }
  else{
    return false;
 800426c:	2300      	movs	r3, #0
 800426e:	46c5      	mov	sp, r8
  }
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	23ae      	movs	r3, #174	@ 0xae
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	449d      	add	sp, r3
 800427a:	bc80      	pop	{r7}
 800427c:	46b8      	mov	r8, r7
 800427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004280:	fffffd38 	.word	0xfffffd38
 8004284:	200004e0 	.word	0x200004e0
 8004288:	20000460 	.word	0x20000460
 800428c:	0801292c 	.word	0x0801292c
 8004290:	20000660 	.word	0x20000660
 8004294:	200005e0 	.word	0x200005e0
 8004298:	20000560 	.word	0x20000560
 800429c:	0000029e 	.word	0x0000029e

080042a0 <SLEEP>:
bool SLEEP(){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <SLEEP+0x3c>)
 80042a8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff fb65 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7fb ff27 	bl	8000108 <strlen>
 80042ba:	0003      	movs	r3, r0
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7ff fa22 	bl	800370c <ESP_Send>
 80042c8:	1e03      	subs	r3, r0, #0
 80042ca:	d001      	beq.n	80042d0 <SLEEP+0x30>
    return true;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <SLEEP+0x32>
  }
  else{
    return false;
 80042d0:	2300      	movs	r3, #0
  }
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	0801294c 	.word	0x0801294c

080042e0 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	0002      	movs	r2, r0
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80042ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <DMA_ProcessBuffer+0x138>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	210e      	movs	r1, #14
 80042f6:	187b      	adds	r3, r7, r1
 80042f8:	43d2      	mvns	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 80042fc:	200f      	movs	r0, #15
 80042fe:	183b      	adds	r3, r7, r0
 8004300:	2203      	movs	r2, #3
 8004302:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004304:	4b45      	ldr	r3, [pc, #276]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	187a      	adds	r2, r7, r1
 800430c:	7812      	ldrb	r2, [r2, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d124      	bne.n	800435c <DMA_ProcessBuffer+0x7c>
      if(retry >4){
 8004312:	4b43      	ldr	r3, [pc, #268]	@ (8004420 <DMA_ProcessBuffer+0x140>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b04      	cmp	r3, #4
 8004318:	d90e      	bls.n	8004338 <DMA_ProcessBuffer+0x58>
        retry = 0;
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <DMA_ProcessBuffer+0x140>)
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommands == AT_WAKEUP){
 8004320:	4b40      	ldr	r3, [pc, #256]	@ (8004424 <DMA_ProcessBuffer+0x144>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <DMA_ProcessBuffer+0x4e>
          status = RECEIVE_STATUS_UNPROGGED;
 8004328:	183b      	adds	r3, r7, r0
 800432a:	2207      	movs	r2, #7
 800432c:	701a      	strb	r2, [r3, #0]
        }

        status = RECEIVE_STATUS_TIMEOUT;
 800432e:	230f      	movs	r3, #15
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2206      	movs	r2, #6
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e011      	b.n	800435c <DMA_ProcessBuffer+0x7c>
      }
     else{
       retry ++;
 8004338:	4b39      	ldr	r3, [pc, #228]	@ (8004420 <DMA_ProcessBuffer+0x140>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b37      	ldr	r3, [pc, #220]	@ (8004420 <DMA_ProcessBuffer+0x140>)
 8004342:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004344:	f004 fa0a 	bl	800875c <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	33f5      	adds	r3, #245	@ 0xf5
 800434c:	33ff      	adds	r3, #255	@ 0xff
 800434e:	001a      	movs	r2, r3
 8004350:	4b35      	ldr	r3, [pc, #212]	@ (8004428 <DMA_ProcessBuffer+0x148>)
 8004352:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2204      	movs	r2, #4
 800435a:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 800435c:	4b2f      	ldr	r3, [pc, #188]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	210e      	movs	r1, #14
 8004364:	187a      	adds	r2, r7, r1
 8004366:	7812      	ldrb	r2, [r2, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d048      	beq.n	80043fe <DMA_ProcessBuffer+0x11e>
      retry = 0;
 800436c:	4b2c      	ldr	r3, [pc, #176]	@ (8004420 <DMA_ProcessBuffer+0x140>)
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004372:	4b2a      	ldr	r3, [pc, #168]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	187a      	adds	r2, r7, r1
 800437a:	7812      	ldrb	r2, [r2, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d917      	bls.n	80043b0 <DMA_ProcessBuffer+0xd0>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004380:	4b26      	ldr	r3, [pc, #152]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	001a      	movs	r2, r3
 8004388:	4b28      	ldr	r3, [pc, #160]	@ (800442c <DMA_ProcessBuffer+0x14c>)
 800438a:	18d0      	adds	r0, r2, r3
 800438c:	187b      	adds	r3, r7, r1
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	4a22      	ldr	r2, [pc, #136]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	b299      	uxth	r1, r3
 800439c:	230f      	movs	r3, #15
 800439e:	18fc      	adds	r4, r7, r3
 80043a0:	1dfb      	adds	r3, r7, #7
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	001a      	movs	r2, r3
 80043a6:	f7ff fb39 	bl	8003a1c <ParseBuffer>
 80043aa:	0003      	movs	r3, r0
 80043ac:	7023      	strb	r3, [r4, #0]
 80043ae:	e026      	b.n	80043fe <DMA_ProcessBuffer+0x11e>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80043b0:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	001a      	movs	r2, r3
 80043b8:	4b1c      	ldr	r3, [pc, #112]	@ (800442c <DMA_ProcessBuffer+0x14c>)
 80043ba:	18d0      	adds	r0, r2, r3
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	001a      	movs	r2, r3
 80043c4:	23ff      	movs	r3, #255	@ 0xff
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	b299      	uxth	r1, r3
 80043ca:	250f      	movs	r5, #15
 80043cc:	197c      	adds	r4, r7, r5
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	001a      	movs	r2, r3
 80043d4:	f7ff fb22 	bl	8003a1c <ParseBuffer>
 80043d8:	0003      	movs	r3, r0
 80043da:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 80043dc:	220e      	movs	r2, #14
 80043de:	18bb      	adds	r3, r7, r2
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <DMA_ProcessBuffer+0x11e>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80043e6:	18bb      	adds	r3, r7, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b299      	uxth	r1, r3
 80043ec:	197c      	adds	r4, r7, r5
 80043ee:	1dfb      	adds	r3, r7, #7
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <DMA_ProcessBuffer+0x14c>)
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7ff fb11 	bl	8003a1c <ParseBuffer>
 80043fa:	0003      	movs	r3, r0
 80043fc:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80043fe:	4b07      	ldr	r3, [pc, #28]	@ (800441c <DMA_ProcessBuffer+0x13c>)
 8004400:	220e      	movs	r2, #14
 8004402:	18ba      	adds	r2, r7, r2
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	701a      	strb	r2, [r3, #0]
    return status;
 8004408:	230f      	movs	r3, #15
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	781b      	ldrb	r3, [r3, #0]
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b004      	add	sp, #16
 8004414:	bdb0      	pop	{r4, r5, r7, pc}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	2000122c 	.word	0x2000122c
 800441c:	200006e0 	.word	0x200006e0
 8004420:	200006e8 	.word	0x200006e8
 8004424:	200008ed 	.word	0x200008ed
 8004428:	200006e4 	.word	0x200006e4
 800442c:	2000034c 	.word	0x2000034c

08004430 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	0002      	movs	r2, r0
 8004438:	1dfb      	adds	r3, r7, #7
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	1dbb      	adds	r3, r7, #6
 800443e:	1c0a      	adds	r2, r1, #0
 8004440:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004442:	210f      	movs	r1, #15
 8004444:	187b      	adds	r3, r7, r1
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800444a:	1dbb      	adds	r3, r7, #6
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004452:	187b      	adds	r3, r7, r1
 8004454:	1dfa      	adds	r2, r7, #7
 8004456:	7812      	ldrb	r2, [r2, #0]
 8004458:	4251      	negs	r1, r2
 800445a:	414a      	adcs	r2, r1
 800445c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800445e:	1dbb      	adds	r3, r7, #6
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d107      	bne.n	8004476 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004466:	230f      	movs	r3, #15
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	1dfa      	adds	r2, r7, #7
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	3a02      	subs	r2, #2
 8004470:	4251      	negs	r1, r2
 8004472:	414a      	adcs	r2, r1
 8004474:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004476:	1dbb      	adds	r3, r7, #6
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d107      	bne.n	800448e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800447e:	230f      	movs	r3, #15
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	1dfa      	adds	r2, r7, #7
 8004484:	7812      	ldrb	r2, [r2, #0]
 8004486:	3a05      	subs	r2, #5
 8004488:	4251      	negs	r1, r2
 800448a:	414a      	adcs	r2, r1
 800448c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800448e:	230f      	movs	r3, #15
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	781b      	ldrb	r3, [r3, #0]
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b004      	add	sp, #16
 800449a:	bd80      	pop	{r7, pc}

0800449c <AT_Send>:

bool AT_Send(AT_Commands state){
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	0002      	movs	r2, r0
 80044a4:	1dfb      	adds	r3, r7, #7
 80044a6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
  switch (state){
 80044b0:	1dfb      	adds	r3, r7, #7
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b0e      	cmp	r3, #14
 80044b6:	d900      	bls.n	80044ba <AT_Send+0x1e>
 80044b8:	e136      	b.n	8004728 <AT_Send+0x28c>
 80044ba:	009a      	lsls	r2, r3, #2
 80044bc:	4b9e      	ldr	r3, [pc, #632]	@ (8004738 <AT_Send+0x29c>)
 80044be:	18d3      	adds	r3, r2, r3
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80044c4:	4b9d      	ldr	r3, [pc, #628]	@ (800473c <AT_Send+0x2a0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f003 fcf9 	bl	8007ec0 <TimestampIsReached>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d100      	bne.n	80044d4 <AT_Send+0x38>
 80044d2:	e128      	b.n	8004726 <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 80044d4:	230f      	movs	r3, #15
 80044d6:	18fc      	adds	r4, r7, r3
 80044d8:	f7ff fbbc 	bl	8003c54 <PollAwake>
 80044dc:	0003      	movs	r3, r0
 80044de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80044e0:	f004 f93c 	bl	800875c <HAL_GetTick>
 80044e4:	0003      	movs	r3, r0
 80044e6:	330a      	adds	r3, #10
 80044e8:	001a      	movs	r2, r3
 80044ea:	4b94      	ldr	r3, [pc, #592]	@ (800473c <AT_Send+0x2a0>)
 80044ec:	601a      	str	r2, [r3, #0]
  }
  break;
 80044ee:	e11a      	b.n	8004726 <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80044f0:	4a93      	ldr	r2, [pc, #588]	@ (8004740 <AT_Send+0x2a4>)
 80044f2:	4b94      	ldr	r3, [pc, #592]	@ (8004744 <AT_Send+0x2a8>)
 80044f4:	0019      	movs	r1, r3
 80044f6:	2003      	movs	r0, #3
 80044f8:	f003 fd38 	bl	8007f6c <CreateLine>
    ATCommandSend = RFPower();
 80044fc:	230f      	movs	r3, #15
 80044fe:	18fc      	adds	r4, r7, r3
 8004500:	f7ff fbc8 	bl	8003c94 <RFPower>
 8004504:	0003      	movs	r3, r0
 8004506:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004508:	f004 f928 	bl	800875c <HAL_GetTick>
 800450c:	0003      	movs	r3, r0
 800450e:	330a      	adds	r3, #10
 8004510:	001a      	movs	r2, r3
 8004512:	4b8a      	ldr	r3, [pc, #552]	@ (800473c <AT_Send+0x2a0>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e107      	b.n	8004728 <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004518:	4a8b      	ldr	r2, [pc, #556]	@ (8004748 <AT_Send+0x2ac>)
 800451a:	4b8a      	ldr	r3, [pc, #552]	@ (8004744 <AT_Send+0x2a8>)
 800451c:	0019      	movs	r1, r3
 800451e:	2003      	movs	r0, #3
 8004520:	f003 fd24 	bl	8007f6c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004524:	230f      	movs	r3, #15
 8004526:	18fc      	adds	r4, r7, r3
 8004528:	f7ff fbd4 	bl	8003cd4 <CheckRFPower>
 800452c:	0003      	movs	r3, r0
 800452e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004530:	f004 f914 	bl	800875c <HAL_GetTick>
 8004534:	0003      	movs	r3, r0
 8004536:	330a      	adds	r3, #10
 8004538:	001a      	movs	r2, r3
 800453a:	4b80      	ldr	r3, [pc, #512]	@ (800473c <AT_Send+0x2a0>)
 800453c:	601a      	str	r2, [r3, #0]
    break;
 800453e:	e0f3      	b.n	8004728 <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004540:	4a82      	ldr	r2, [pc, #520]	@ (800474c <AT_Send+0x2b0>)
 8004542:	4b80      	ldr	r3, [pc, #512]	@ (8004744 <AT_Send+0x2a8>)
 8004544:	0019      	movs	r1, r3
 8004546:	2003      	movs	r0, #3
 8004548:	f003 fd10 	bl	8007f6c <CreateLine>
    ATCommandSend = ATRestore();
 800454c:	230f      	movs	r3, #15
 800454e:	18fc      	adds	r4, r7, r3
 8004550:	f7ff fbe0 	bl	8003d14 <ATRestore>
 8004554:	0003      	movs	r3, r0
 8004556:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004558:	f004 f900 	bl	800875c <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	3332      	adds	r3, #50	@ 0x32
 8004560:	001a      	movs	r2, r3
 8004562:	4b76      	ldr	r3, [pc, #472]	@ (800473c <AT_Send+0x2a0>)
 8004564:	601a      	str	r2, [r3, #0]
    break;
 8004566:	e0df      	b.n	8004728 <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004568:	4a79      	ldr	r2, [pc, #484]	@ (8004750 <AT_Send+0x2b4>)
 800456a:	4b76      	ldr	r3, [pc, #472]	@ (8004744 <AT_Send+0x2a8>)
 800456c:	0019      	movs	r1, r3
 800456e:	2003      	movs	r0, #3
 8004570:	f003 fcfc 	bl	8007f6c <CreateLine>
    ATCommandSend = CWINIT();
 8004574:	230f      	movs	r3, #15
 8004576:	18fc      	adds	r4, r7, r3
 8004578:	f7ff fbec 	bl	8003d54 <CWINIT>
 800457c:	0003      	movs	r3, r0
 800457e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004580:	f004 f8ec 	bl	800875c <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	33f5      	adds	r3, #245	@ 0xf5
 8004588:	33ff      	adds	r3, #255	@ 0xff
 800458a:	001a      	movs	r2, r3
 800458c:	4b6b      	ldr	r3, [pc, #428]	@ (800473c <AT_Send+0x2a0>)
 800458e:	601a      	str	r2, [r3, #0]
    break;
 8004590:	e0ca      	b.n	8004728 <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004592:	4a70      	ldr	r2, [pc, #448]	@ (8004754 <AT_Send+0x2b8>)
 8004594:	4b6b      	ldr	r3, [pc, #428]	@ (8004744 <AT_Send+0x2a8>)
 8004596:	0019      	movs	r1, r3
 8004598:	2003      	movs	r0, #3
 800459a:	f003 fce7 	bl	8007f6c <CreateLine>
    ATCommandSend = CWMODE1();
 800459e:	230f      	movs	r3, #15
 80045a0:	18fc      	adds	r4, r7, r3
 80045a2:	f7ff fbf7 	bl	8003d94 <CWMODE1>
 80045a6:	0003      	movs	r3, r0
 80045a8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045aa:	f004 f8d7 	bl	800875c <HAL_GetTick>
 80045ae:	0003      	movs	r3, r0
 80045b0:	330a      	adds	r3, #10
 80045b2:	001a      	movs	r2, r3
 80045b4:	4b61      	ldr	r3, [pc, #388]	@ (800473c <AT_Send+0x2a0>)
 80045b6:	601a      	str	r2, [r3, #0]
    break;
 80045b8:	e0b6      	b.n	8004728 <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80045ba:	4a67      	ldr	r2, [pc, #412]	@ (8004758 <AT_Send+0x2bc>)
 80045bc:	4b61      	ldr	r3, [pc, #388]	@ (8004744 <AT_Send+0x2a8>)
 80045be:	0019      	movs	r1, r3
 80045c0:	2003      	movs	r0, #3
 80045c2:	f003 fcd3 	bl	8007f6c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fc      	adds	r4, r7, r3
 80045ca:	f7ff fc03 	bl	8003dd4 <CWAUTOCONN>
 80045ce:	0003      	movs	r3, r0
 80045d0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045d2:	f004 f8c3 	bl	800875c <HAL_GetTick>
 80045d6:	0003      	movs	r3, r0
 80045d8:	330a      	adds	r3, #10
 80045da:	001a      	movs	r2, r3
 80045dc:	4b57      	ldr	r3, [pc, #348]	@ (800473c <AT_Send+0x2a0>)
 80045de:	601a      	str	r2, [r3, #0]
    break;
 80045e0:	e0a2      	b.n	8004728 <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80045e2:	4a5e      	ldr	r2, [pc, #376]	@ (800475c <AT_Send+0x2c0>)
 80045e4:	4b57      	ldr	r3, [pc, #348]	@ (8004744 <AT_Send+0x2a8>)
 80045e6:	0019      	movs	r1, r3
 80045e8:	2003      	movs	r0, #3
 80045ea:	f003 fcbf 	bl	8007f6c <CreateLine>
    ATCommandSend = CWJAP();
 80045ee:	230f      	movs	r3, #15
 80045f0:	18fc      	adds	r4, r7, r3
 80045f2:	f7ff fc0f 	bl	8003e14 <CWJAP>
 80045f6:	0003      	movs	r3, r0
 80045f8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045fa:	f004 f8af 	bl	800875c <HAL_GetTick>
 80045fe:	0003      	movs	r3, r0
 8004600:	3332      	adds	r3, #50	@ 0x32
 8004602:	001a      	movs	r2, r3
 8004604:	4b4d      	ldr	r3, [pc, #308]	@ (800473c <AT_Send+0x2a0>)
 8004606:	601a      	str	r2, [r3, #0]
    break;
 8004608:	e08e      	b.n	8004728 <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800460a:	4a55      	ldr	r2, [pc, #340]	@ (8004760 <AT_Send+0x2c4>)
 800460c:	4b4d      	ldr	r3, [pc, #308]	@ (8004744 <AT_Send+0x2a8>)
 800460e:	0019      	movs	r1, r3
 8004610:	2003      	movs	r0, #3
 8004612:	f003 fcab 	bl	8007f6c <CreateLine>
    ATCommandSend = CWMODE3();
 8004616:	230f      	movs	r3, #15
 8004618:	18fc      	adds	r4, r7, r3
 800461a:	f7ff fc79 	bl	8003f10 <CWMODE3>
 800461e:	0003      	movs	r3, r0
 8004620:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004622:	f004 f89b 	bl	800875c <HAL_GetTick>
 8004626:	0003      	movs	r3, r0
 8004628:	330a      	adds	r3, #10
 800462a:	001a      	movs	r2, r3
 800462c:	4b43      	ldr	r3, [pc, #268]	@ (800473c <AT_Send+0x2a0>)
 800462e:	601a      	str	r2, [r3, #0]
    break;
 8004630:	e07a      	b.n	8004728 <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004632:	4a4c      	ldr	r2, [pc, #304]	@ (8004764 <AT_Send+0x2c8>)
 8004634:	4b43      	ldr	r3, [pc, #268]	@ (8004744 <AT_Send+0x2a8>)
 8004636:	0019      	movs	r1, r3
 8004638:	2003      	movs	r0, #3
 800463a:	f003 fc97 	bl	8007f6c <CreateLine>
    ATCommandSend = CWSAP();
 800463e:	230f      	movs	r3, #15
 8004640:	18fc      	adds	r4, r7, r3
 8004642:	f7ff fc85 	bl	8003f50 <CWSAP>
 8004646:	0003      	movs	r3, r0
 8004648:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800464a:	f004 f887 	bl	800875c <HAL_GetTick>
 800464e:	0003      	movs	r3, r0
 8004650:	330a      	adds	r3, #10
 8004652:	001a      	movs	r2, r3
 8004654:	4b39      	ldr	r3, [pc, #228]	@ (800473c <AT_Send+0x2a0>)
 8004656:	601a      	str	r2, [r3, #0]
    break;
 8004658:	e066      	b.n	8004728 <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET in station/soft-ap mode");
 800465a:	4a41      	ldr	r2, [pc, #260]	@ (8004760 <AT_Send+0x2c4>)
 800465c:	4b39      	ldr	r3, [pc, #228]	@ (8004744 <AT_Send+0x2a8>)
 800465e:	0019      	movs	r1, r3
 8004660:	2003      	movs	r0, #3
 8004662:	f003 fc83 	bl	8007f6c <CreateLine>
    ATCommandSend = CIPMUX();
 8004666:	230f      	movs	r3, #15
 8004668:	18fc      	adds	r4, r7, r3
 800466a:	f7ff fc91 	bl	8003f90 <CIPMUX>
 800466e:	0003      	movs	r3, r0
 8004670:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004672:	f004 f873 	bl	800875c <HAL_GetTick>
 8004676:	0003      	movs	r3, r0
 8004678:	330a      	adds	r3, #10
 800467a:	001a      	movs	r2, r3
 800467c:	4b2f      	ldr	r3, [pc, #188]	@ (800473c <AT_Send+0x2a0>)
 800467e:	601a      	str	r2, [r3, #0]
    break;
 8004680:	e052      	b.n	8004728 <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004682:	4a37      	ldr	r2, [pc, #220]	@ (8004760 <AT_Send+0x2c4>)
 8004684:	4b2f      	ldr	r3, [pc, #188]	@ (8004744 <AT_Send+0x2a8>)
 8004686:	0019      	movs	r1, r3
 8004688:	2003      	movs	r0, #3
 800468a:	f003 fc6f 	bl	8007f6c <CreateLine>
    ATCommandSend = WEBSERVER();
 800468e:	230f      	movs	r3, #15
 8004690:	18fc      	adds	r4, r7, r3
 8004692:	f7ff fc9d 	bl	8003fd0 <WEBSERVER>
 8004696:	0003      	movs	r3, r0
 8004698:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800469a:	f004 f85f 	bl	800875c <HAL_GetTick>
 800469e:	0003      	movs	r3, r0
 80046a0:	330a      	adds	r3, #10
 80046a2:	001a      	movs	r2, r3
 80046a4:	4b25      	ldr	r3, [pc, #148]	@ (800473c <AT_Send+0x2a0>)
 80046a6:	601a      	str	r2, [r3, #0]
    break;
 80046a8:	e03e      	b.n	8004728 <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80046aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004760 <AT_Send+0x2c4>)
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <AT_Send+0x2a8>)
 80046ae:	0019      	movs	r1, r3
 80046b0:	2003      	movs	r0, #3
 80046b2:	f003 fc5b 	bl	8007f6c <CreateLine>
    ATCommandSend = HTTPCPOST();
 80046b6:	230f      	movs	r3, #15
 80046b8:	18fc      	adds	r4, r7, r3
 80046ba:	f7ff fca9 	bl	8004010 <HTTPCPOST>
 80046be:	0003      	movs	r3, r0
 80046c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80046c2:	f004 f84b 	bl	800875c <HAL_GetTick>
 80046c6:	0003      	movs	r3, r0
 80046c8:	33f5      	adds	r3, #245	@ 0xf5
 80046ca:	33ff      	adds	r3, #255	@ 0xff
 80046cc:	001a      	movs	r2, r3
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <AT_Send+0x2a0>)
 80046d0:	601a      	str	r2, [r3, #0]
    break;
 80046d2:	e029      	b.n	8004728 <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 80046d4:	4a24      	ldr	r2, [pc, #144]	@ (8004768 <AT_Send+0x2cc>)
 80046d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <AT_Send+0x2a8>)
 80046d8:	0019      	movs	r1, r3
 80046da:	2003      	movs	r0, #3
 80046dc:	f003 fc46 	bl	8007f6c <CreateLine>
    ATCommandSend = SENDDATA();
 80046e0:	230f      	movs	r3, #15
 80046e2:	18fc      	adds	r4, r7, r3
 80046e4:	f7ff fd30 	bl	8004148 <SENDDATA>
 80046e8:	0003      	movs	r3, r0
 80046ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80046ec:	f004 f836 	bl	800875c <HAL_GetTick>
 80046f0:	0003      	movs	r3, r0
 80046f2:	33f5      	adds	r3, #245	@ 0xf5
 80046f4:	33ff      	adds	r3, #255	@ 0xff
 80046f6:	001a      	movs	r2, r3
 80046f8:	4b10      	ldr	r3, [pc, #64]	@ (800473c <AT_Send+0x2a0>)
 80046fa:	601a      	str	r2, [r3, #0]
    break;
 80046fc:	e014      	b.n	8004728 <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80046fe:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <AT_Send+0x2d0>)
 8004700:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <AT_Send+0x2a8>)
 8004702:	0019      	movs	r1, r3
 8004704:	2003      	movs	r0, #3
 8004706:	f003 fc31 	bl	8007f6c <CreateLine>
    ATCommandSend = SLEEP();
 800470a:	230f      	movs	r3, #15
 800470c:	18fc      	adds	r4, r7, r3
 800470e:	f7ff fdc7 	bl	80042a0 <SLEEP>
 8004712:	0003      	movs	r3, r0
 8004714:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004716:	f004 f821 	bl	800875c <HAL_GetTick>
 800471a:	0003      	movs	r3, r0
 800471c:	330a      	adds	r3, #10
 800471e:	001a      	movs	r2, r3
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <AT_Send+0x2a0>)
 8004722:	601a      	str	r2, [r3, #0]
    break;
 8004724:	e000      	b.n	8004728 <AT_Send+0x28c>
  break;
 8004726:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004728:	230f      	movs	r3, #15
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b005      	add	sp, #20
 8004734:	bd90      	pop	{r4, r7, pc}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	080130cc 	.word	0x080130cc
 800473c:	200006e4 	.word	0x200006e4
 8004740:	0801295c 	.word	0x0801295c
 8004744:	08012678 	.word	0x08012678
 8004748:	08012970 	.word	0x08012970
 800474c:	08012984 	.word	0x08012984
 8004750:	08012994 	.word	0x08012994
 8004754:	080129a8 	.word	0x080129a8
 8004758:	080129c0 	.word	0x080129c0
 800475c:	080129d8 	.word	0x080129d8
 8004760:	080129ec 	.word	0x080129ec
 8004764:	08012a08 	.word	0x08012a08
 8004768:	08012a24 	.word	0x08012a24
 800476c:	08012a34 	.word	0x08012a34

08004770 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004776:	1dfb      	adds	r3, r7, #7
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
  uint8_t ATReceived = RECEIVE_STATUS_INCOMPLETE;
 800477c:	1dbb      	adds	r3, r7, #6
 800477e:	2203      	movs	r2, #3
 8004780:	701a      	strb	r2, [r3, #0]
  switch (EspState) {
 8004782:	4b8b      	ldr	r3, [pc, #556]	@ (80049b0 <ESP_Upkeep+0x240>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b0a      	cmp	r3, #10
 8004788:	d900      	bls.n	800478c <ESP_Upkeep+0x1c>
 800478a:	e100      	b.n	800498e <ESP_Upkeep+0x21e>
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	4b89      	ldr	r3, [pc, #548]	@ (80049b4 <ESP_Upkeep+0x244>)
 8004790:	18d3      	adds	r3, r2, r3
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004796:	4b86      	ldr	r3, [pc, #536]	@ (80049b0 <ESP_Upkeep+0x240>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
      break;
 800479c:	e104      	b.n	80049a8 <ESP_Upkeep+0x238>
//      ATCommands[offset++] = (ATCommands) {};
      // TODO: Add turning on the ESP32 and wait for ready after, so we know for sure that the ESP is on.
      // Initialization state
//      StartUpTime = GetCurrentHalTicks() + ESP_START_UP_TIME;
//      StartUpDone = false;
      if(!EspTurnedOn) {
 800479e:	4b86      	ldr	r3, [pc, #536]	@ (80049b8 <ESP_Upkeep+0x248>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	4053      	eors	r3, r2
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01e      	beq.n	80047ea <ESP_Upkeep+0x7a>

        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80047ac:	2380      	movs	r3, #128	@ 0x80
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	4882      	ldr	r0, [pc, #520]	@ (80049bc <ESP_Upkeep+0x24c>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	0019      	movs	r1, r3
 80047b6:	f005 f967 	bl	8009a88 <HAL_GPIO_WritePin>
//        // Turn ESP on.
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	487f      	ldr	r0, [pc, #508]	@ (80049bc <ESP_Upkeep+0x24c>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	0019      	movs	r1, r3
 80047c4:	f005 f960 	bl	8009a88 <HAL_GPIO_WritePin>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80047c8:	4b7d      	ldr	r3, [pc, #500]	@ (80049c0 <ESP_Upkeep+0x250>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	2101      	movs	r1, #1
 80047ce:	0018      	movs	r0, r3
 80047d0:	f005 f95a 	bl	8009a88 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80047d4:	f003 ffc2 	bl	800875c <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	22af      	movs	r2, #175	@ 0xaf
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	189a      	adds	r2, r3, r2
 80047e0:	4b78      	ldr	r3, [pc, #480]	@ (80049c4 <ESP_Upkeep+0x254>)
 80047e2:	601a      	str	r2, [r3, #0]

        EspTurnedOn = true;
 80047e4:	4b74      	ldr	r3, [pc, #464]	@ (80049b8 <ESP_Upkeep+0x248>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80047ea:	4b77      	ldr	r3, [pc, #476]	@ (80049c8 <ESP_Upkeep+0x258>)
 80047ec:	21ff      	movs	r1, #255	@ 0xff
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7fe ffb6 	bl	8003760 <ESP_Receive>
 80047f4:	1e03      	subs	r3, r0, #0
 80047f6:	d100      	bne.n	80047fa <ESP_Upkeep+0x8a>
 80047f8:	e0cf      	b.n	800499a <ESP_Upkeep+0x22a>
        EspState = ESP_STATE_SEND;
 80047fa:	4b6d      	ldr	r3, [pc, #436]	@ (80049b0 <ESP_Upkeep+0x240>)
 80047fc:	2204      	movs	r2, #4
 80047fe:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004800:	e0cb      	b.n	800499a <ESP_Upkeep+0x22a>

    case ESP_STATE_SEND:
        ATSend = AT_Send(nextATCommand);
 8004802:	4b72      	ldr	r3, [pc, #456]	@ (80049cc <ESP_Upkeep+0x25c>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	1dfc      	adds	r4, r7, #7
 8004808:	0018      	movs	r0, r3
 800480a:	f7ff fe47 	bl	800449c <AT_Send>
 800480e:	0003      	movs	r3, r0
 8004810:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004812:	1dfb      	adds	r3, r7, #7
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d100      	bne.n	800481c <ESP_Upkeep+0xac>
 800481a:	e0c0      	b.n	800499e <ESP_Upkeep+0x22e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800481c:	4b64      	ldr	r3, [pc, #400]	@ (80049b0 <ESP_Upkeep+0x240>)
 800481e:	2203      	movs	r2, #3
 8004820:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004822:	e0bc      	b.n	800499e <ESP_Upkeep+0x22e>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004824:	4b67      	ldr	r3, [pc, #412]	@ (80049c4 <ESP_Upkeep+0x254>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	0018      	movs	r0, r3
 800482a:	f003 fb49 	bl	8007ec0 <TimestampIsReached>
 800482e:	1e03      	subs	r3, r0, #0
 8004830:	d100      	bne.n	8004834 <ESP_Upkeep+0xc4>
 8004832:	e0b6      	b.n	80049a2 <ESP_Upkeep+0x232>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004834:	4b66      	ldr	r3, [pc, #408]	@ (80049d0 <ESP_Upkeep+0x260>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	1dbc      	adds	r4, r7, #6
 800483a:	0018      	movs	r0, r3
 800483c:	f7ff fd50 	bl	80042e0 <DMA_ProcessBuffer>
 8004840:	0003      	movs	r3, r0
 8004842:	7023      	strb	r3, [r4, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004844:	4b62      	ldr	r3, [pc, #392]	@ (80049d0 <ESP_Upkeep+0x260>)
 8004846:	781a      	ldrb	r2, [r3, #0]
 8004848:	1d7c      	adds	r4, r7, #5
 800484a:	1dbb      	adds	r3, r7, #6
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	0011      	movs	r1, r2
 8004850:	0018      	movs	r0, r3
 8004852:	f7ff fded 	bl	8004430 <ATCompare>
 8004856:	0003      	movs	r3, r0
 8004858:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800485a:	1dbb      	adds	r3, r7, #6
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d102      	bne.n	8004868 <ESP_Upkeep+0xf8>
          EspState = ESP_STATE_SEND;
 8004862:	4b53      	ldr	r3, [pc, #332]	@ (80049b0 <ESP_Upkeep+0x240>)
 8004864:	2204      	movs	r2, #4
 8004866:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004868:	1dbb      	adds	r3, r7, #6
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d106      	bne.n	800487e <ESP_Upkeep+0x10e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004870:	f003 ff74 	bl	800875c <HAL_GetTick>
 8004874:	0003      	movs	r3, r0
 8004876:	330a      	adds	r3, #10
 8004878:	001a      	movs	r2, r3
 800487a:	4b52      	ldr	r3, [pc, #328]	@ (80049c4 <ESP_Upkeep+0x254>)
 800487c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800487e:	1dbb      	adds	r3, r7, #6
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b07      	cmp	r3, #7
 8004884:	d101      	bne.n	800488a <ESP_Upkeep+0x11a>
          StartProg();
 8004886:	f7ff f88f 	bl	80039a8 <StartProg>
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 800488a:	1dbb      	adds	r3, r7, #6
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d113      	bne.n	80048ba <ESP_Upkeep+0x14a>
          if(nextATCommand != AT_SENDDATA){
 8004892:	4b4e      	ldr	r3, [pc, #312]	@ (80049cc <ESP_Upkeep+0x25c>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b0d      	cmp	r3, #13
 8004898:	d003      	beq.n	80048a2 <ESP_Upkeep+0x132>
            EspState = ESP_STATE_SEND;
 800489a:	4b45      	ldr	r3, [pc, #276]	@ (80049b0 <ESP_Upkeep+0x240>)
 800489c:	2204      	movs	r2, #4
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e00b      	b.n	80048ba <ESP_Upkeep+0x14a>
          }
          else{
            nextATCommand = AT_HTTPCPOST;
 80048a2:	4b4a      	ldr	r3, [pc, #296]	@ (80049cc <ESP_Upkeep+0x25c>)
 80048a4:	220c      	movs	r2, #12
 80048a6:	701a      	strb	r2, [r3, #0]
            ATCommands = AT_HTTPCPOST;
 80048a8:	4b4a      	ldr	r3, [pc, #296]	@ (80049d4 <ESP_Upkeep+0x264>)
 80048aa:	220c      	movs	r2, #12
 80048ac:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80048ae:	4b48      	ldr	r3, [pc, #288]	@ (80049d0 <ESP_Upkeep+0x260>)
 80048b0:	2202      	movs	r2, #2
 80048b2:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80048b4:	4b3e      	ldr	r3, [pc, #248]	@ (80049b0 <ESP_Upkeep+0x240>)
 80048b6:	2204      	movs	r2, #4
 80048b8:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80048ba:	1d7b      	adds	r3, r7, #5
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d100      	bne.n	80048c4 <ESP_Upkeep+0x154>
 80048c2:	e06e      	b.n	80049a2 <ESP_Upkeep+0x232>
          EspState = ESP_STATE_NEXT_AT;
 80048c4:	4b3a      	ldr	r3, [pc, #232]	@ (80049b0 <ESP_Upkeep+0x240>)
 80048c6:	2205      	movs	r2, #5
 80048c8:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80048ca:	e06a      	b.n	80049a2 <ESP_Upkeep+0x232>

    case ESP_STATE_NEXT_AT:
      if(ATCommands < AT_SLEEP){
 80048cc:	4b41      	ldr	r3, [pc, #260]	@ (80049d4 <ESP_Upkeep+0x264>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b0d      	cmp	r3, #13
 80048d2:	d82a      	bhi.n	800492a <ESP_Upkeep+0x1ba>
        ATCommands = ATCommands+1;
 80048d4:	4b3f      	ldr	r3, [pc, #252]	@ (80049d4 <ESP_Upkeep+0x264>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	4b3d      	ldr	r3, [pc, #244]	@ (80049d4 <ESP_Upkeep+0x264>)
 80048de:	701a      	strb	r2, [r3, #0]
        if(ATCommands == AT_RESTORE){
 80048e0:	4b3c      	ldr	r3, [pc, #240]	@ (80049d4 <ESP_Upkeep+0x264>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d102      	bne.n	80048ee <ESP_Upkeep+0x17e>
            ATExpectation = RECEIVE_EXPECTATION_READY;
 80048e8:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <ESP_Upkeep+0x260>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands == AT_HTTPCPOST){
 80048ee:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <ESP_Upkeep+0x264>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d102      	bne.n	80048fc <ESP_Upkeep+0x18c>
          ATExpectation = RECEIVE_EXPECTATION_START;
 80048f6:	4b36      	ldr	r3, [pc, #216]	@ (80049d0 <ESP_Upkeep+0x260>)
 80048f8:	2202      	movs	r2, #2
 80048fa:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands != AT_HTTPCPOST && ATCommands != AT_RESTORE){
 80048fc:	4b35      	ldr	r3, [pc, #212]	@ (80049d4 <ESP_Upkeep+0x264>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b0c      	cmp	r3, #12
 8004902:	d006      	beq.n	8004912 <ESP_Upkeep+0x1a2>
 8004904:	4b33      	ldr	r3, [pc, #204]	@ (80049d4 <ESP_Upkeep+0x264>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d002      	beq.n	8004912 <ESP_Upkeep+0x1a2>
          ATExpectation = RECEIVE_EXPECTATION_OK;
 800490c:	4b30      	ldr	r3, [pc, #192]	@ (80049d0 <ESP_Upkeep+0x260>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
        }
        EspState = EspState = ESP_STATE_SEND;
 8004912:	4b27      	ldr	r3, [pc, #156]	@ (80049b0 <ESP_Upkeep+0x240>)
 8004914:	2204      	movs	r2, #4
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <ESP_Upkeep+0x240>)
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	4b24      	ldr	r3, [pc, #144]	@ (80049b0 <ESP_Upkeep+0x240>)
 800491e:	701a      	strb	r2, [r3, #0]
        nextATCommand = ATCommands;
 8004920:	4b2c      	ldr	r3, [pc, #176]	@ (80049d4 <ESP_Upkeep+0x264>)
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	4b29      	ldr	r3, [pc, #164]	@ (80049cc <ESP_Upkeep+0x25c>)
 8004926:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
        break;
      }


    break;
 8004928:	e03e      	b.n	80049a8 <ESP_Upkeep+0x238>
        ESPTimeStamp = HAL_GetTick() + 300000;
 800492a:	f003 ff17 	bl	800875c <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	4a29      	ldr	r2, [pc, #164]	@ (80049d8 <ESP_Upkeep+0x268>)
 8004932:	189a      	adds	r2, r3, r2
 8004934:	4b23      	ldr	r3, [pc, #140]	@ (80049c4 <ESP_Upkeep+0x254>)
 8004936:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
 8004938:	4b1d      	ldr	r3, [pc, #116]	@ (80049b0 <ESP_Upkeep+0x240>)
 800493a:	2209      	movs	r2, #9
 800493c:	701a      	strb	r2, [r3, #0]
        break;
 800493e:	e033      	b.n	80049a8 <ESP_Upkeep+0x238>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004940:	4b20      	ldr	r3, [pc, #128]	@ (80049c4 <ESP_Upkeep+0x254>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0018      	movs	r0, r3
 8004946:	f003 fabb 	bl	8007ec0 <TimestampIsReached>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d02b      	beq.n	80049a6 <ESP_Upkeep+0x236>
        nextATCommand = AT_HTTPCPOST;
 800494e:	4b1f      	ldr	r3, [pc, #124]	@ (80049cc <ESP_Upkeep+0x25c>)
 8004950:	220c      	movs	r2, #12
 8004952:	701a      	strb	r2, [r3, #0]
        ATCommands = AT_HTTPCPOST;
 8004954:	4b1f      	ldr	r3, [pc, #124]	@ (80049d4 <ESP_Upkeep+0x264>)
 8004956:	220c      	movs	r2, #12
 8004958:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800495a:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <ESP_Upkeep+0x240>)
 800495c:	2204      	movs	r2, #4
 800495e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004960:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <ESP_Upkeep+0x260>)
 8004962:	2202      	movs	r2, #2
 8004964:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004966:	e01e      	b.n	80049a6 <ESP_Upkeep+0x236>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004968:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <ESP_Upkeep+0x26c>)
 800496a:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <ESP_Upkeep+0x270>)
 800496c:	0019      	movs	r1, r3
 800496e:	2003      	movs	r0, #3
 8004970:	f003 fafc 	bl	8007f6c <CreateLine>
      EspState = ESP_STATE_INIT;
 8004974:	4b0e      	ldr	r3, [pc, #56]	@ (80049b0 <ESP_Upkeep+0x240>)
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]
      break;
 800497a:	e015      	b.n	80049a8 <ESP_Upkeep+0x238>

    case ESP_STATE_BOOT:
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	23a0      	movs	r3, #160	@ 0xa0
 8004982:	05db      	lsls	r3, r3, #23
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f005 f89b 	bl	8009ac2 <HAL_GPIO_TogglePin>
      //WAIT FOR RESET;
      break;
 800498c:	e00c      	b.n	80049a8 <ESP_Upkeep+0x238>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 800498e:	4b08      	ldr	r3, [pc, #32]	@ (80049b0 <ESP_Upkeep+0x240>)
 8004990:	2207      	movs	r2, #7
 8004992:	701a      	strb	r2, [r3, #0]
      break;
 8004994:	e008      	b.n	80049a8 <ESP_Upkeep+0x238>
      break;
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	e006      	b.n	80049a8 <ESP_Upkeep+0x238>
      break;
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	e004      	b.n	80049a8 <ESP_Upkeep+0x238>
         break;
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	e002      	b.n	80049a8 <ESP_Upkeep+0x238>
      break;
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	e000      	b.n	80049a8 <ESP_Upkeep+0x238>
      break;
 80049a6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b003      	add	sp, #12
 80049ae:	bd90      	pop	{r4, r7, pc}
 80049b0:	200000fb 	.word	0x200000fb
 80049b4:	08013108 	.word	0x08013108
 80049b8:	2000044b 	.word	0x2000044b
 80049bc:	50000800 	.word	0x50000800
 80049c0:	50001c00 	.word	0x50001c00
 80049c4:	200006e4 	.word	0x200006e4
 80049c8:	2000034c 	.word	0x2000034c
 80049cc:	200006ea 	.word	0x200006ea
 80049d0:	200006e9 	.word	0x200006e9
 80049d4:	200008ed 	.word	0x200008ed
 80049d8:	000493e0 	.word	0x000493e0
 80049dc:	08012a58 	.word	0x08012a58
 80049e0:	08012678 	.word	0x08012678

080049e4 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80049ec:	4b09      	ldr	r3, [pc, #36]	@ (8004a14 <I2CSensors_Init+0x30>)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <I2CSensors_Init+0x34>)
 80049f4:	4b09      	ldr	r3, [pc, #36]	@ (8004a1c <I2CSensors_Init+0x38>)
 80049f6:	0011      	movs	r1, r2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 fae1 	bl	8004fc0 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80049fe:	4a06      	ldr	r2, [pc, #24]	@ (8004a18 <I2CSensors_Init+0x34>)
 8004a00:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <I2CSensors_Init+0x38>)
 8004a02:	0011      	movs	r1, r2
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 f964 	bl	8004cd2 <Gas_Init>
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	200008f0 	.word	0x200008f0
 8004a18:	08004a75 	.word	0x08004a75
 8004a1c:	08004a21 	.word	0x08004a21

08004a20 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004a20:	b5b0      	push	{r4, r5, r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6039      	str	r1, [r7, #0]
 8004a28:	0011      	movs	r1, r2
 8004a2a:	1dfb      	adds	r3, r7, #7
 8004a2c:	1c02      	adds	r2, r0, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	1dbb      	adds	r3, r7, #6
 8004a32:	1c0a      	adds	r2, r1, #0
 8004a34:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004a36:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <ReadI2C+0x50>)
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	1dfb      	adds	r3, r7, #7
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	18db      	adds	r3, r3, r3
 8004a42:	b299      	uxth	r1, r3
 8004a44:	1dbb      	adds	r3, r7, #6
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	250f      	movs	r5, #15
 8004a4c:	197c      	adds	r4, r7, r5
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	f005 f9ee 	bl	8009e30 <HAL_I2C_Master_Receive_DMA>
 8004a54:	0003      	movs	r3, r0
 8004a56:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004a58:	197b      	adds	r3, r7, r5
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <ReadI2C+0x44>
        return false;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e000      	b.n	8004a66 <ReadI2C+0x46>
    }
    return true;
 8004a64:	2301      	movs	r3, #1
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b004      	add	sp, #16
 8004a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	200008f0 	.word	0x200008f0

08004a74 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004a74:	b5b0      	push	{r4, r5, r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6039      	str	r1, [r7, #0]
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	1dfb      	adds	r3, r7, #7
 8004a80:	1c02      	adds	r2, r0, #0
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	1dbb      	adds	r3, r7, #6
 8004a86:	1c0a      	adds	r2, r1, #0
 8004a88:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <WriteI2C+0x50>)
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	1dfb      	adds	r3, r7, #7
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	18db      	adds	r3, r3, r3
 8004a96:	b299      	uxth	r1, r3
 8004a98:	1dbb      	adds	r3, r7, #6
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	250f      	movs	r5, #15
 8004aa0:	197c      	adds	r4, r7, r5
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	f005 f8be 	bl	8009c24 <HAL_I2C_Master_Transmit_DMA>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004aac:	197b      	adds	r3, r7, r5
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <WriteI2C+0x44>
        return false;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <WriteI2C+0x46>
    }
    return true;
 8004ab8:	2301      	movs	r3, #1
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	200008f0 	.word	0x200008f0

08004ac8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ace:	003b      	movs	r3, r7
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	f00b fa3c 	bl	800ff54 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004adc:	4b30      	ldr	r3, [pc, #192]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004ade:	4a31      	ldr	r2, [pc, #196]	@ (8004ba4 <MX_ADC_Init+0xdc>)
 8004ae0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004aea:	22c0      	movs	r2, #192	@ 0xc0
 8004aec:	0612      	lsls	r2, r2, #24
 8004aee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004af0:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004af6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004afc:	4b28      	ldr	r3, [pc, #160]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b02:	4b27      	ldr	r3, [pc, #156]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004b08:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004b10:	4b23      	ldr	r3, [pc, #140]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b12:	2221      	movs	r2, #33	@ 0x21
 8004b14:	2101      	movs	r1, #1
 8004b16:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b18:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b20:	22c2      	movs	r2, #194	@ 0xc2
 8004b22:	32ff      	adds	r2, #255	@ 0xff
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004b26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b28:	222c      	movs	r2, #44	@ 0x2c
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b30:	2204      	movs	r2, #4
 8004b32:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b34:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004b3a:	4b19      	ldr	r3, [pc, #100]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004b40:	4b17      	ldr	r3, [pc, #92]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004b46:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004b4c:	4b14      	ldr	r3, [pc, #80]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f003 fe32 	bl	80087b8 <HAL_ADC_Init>
 8004b54:	1e03      	subs	r3, r0, #0
 8004b56:	d001      	beq.n	8004b5c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004b58:	f000 fd38 	bl	80055cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004b5c:	003b      	movs	r3, r7
 8004b5e:	4a12      	ldr	r2, [pc, #72]	@ (8004ba8 <MX_ADC_Init+0xe0>)
 8004b60:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004b62:	003b      	movs	r3, r7
 8004b64:	2280      	movs	r2, #128	@ 0x80
 8004b66:	0152      	lsls	r2, r2, #5
 8004b68:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b6a:	003a      	movs	r2, r7
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b6e:	0011      	movs	r1, r2
 8004b70:	0018      	movs	r0, r3
 8004b72:	f004 f891 	bl	8008c98 <HAL_ADC_ConfigChannel>
 8004b76:	1e03      	subs	r3, r0, #0
 8004b78:	d001      	beq.n	8004b7e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004b7a:	f000 fd27 	bl	80055cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004b7e:	003b      	movs	r3, r7
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <MX_ADC_Init+0xe4>)
 8004b82:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b84:	003a      	movs	r2, r7
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <MX_ADC_Init+0xd8>)
 8004b88:	0011      	movs	r1, r2
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f004 f884 	bl	8008c98 <HAL_ADC_ConfigChannel>
 8004b90:	1e03      	subs	r3, r0, #0
 8004b92:	d001      	beq.n	8004b98 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004b94:	f000 fd1a 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004b98:	46c0      	nop			@ (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	200008f4 	.word	0x200008f4
 8004ba4:	40012400 	.word	0x40012400
 8004ba8:	38004000 	.word	0x38004000
 8004bac:	3c008000 	.word	0x3c008000

08004bb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b089      	sub	sp, #36	@ 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb8:	240c      	movs	r4, #12
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	2314      	movs	r3, #20
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	f00b f9c6 	bl	800ff54 <memset>
  if(adcHandle->Instance==ADC1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	@ (8004c20 <HAL_ADC_MspInit+0x70>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d121      	bne.n	8004c16 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bd2:	4b14      	ldr	r3, [pc, #80]	@ (8004c24 <HAL_ADC_MspInit+0x74>)
 8004bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bd6:	4b13      	ldr	r3, [pc, #76]	@ (8004c24 <HAL_ADC_MspInit+0x74>)
 8004bd8:	2180      	movs	r1, #128	@ 0x80
 8004bda:	0089      	lsls	r1, r1, #2
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004be0:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <HAL_ADC_MspInit+0x74>)
 8004be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <HAL_ADC_MspInit+0x74>)
 8004be6:	2104      	movs	r1, #4
 8004be8:	430a      	orrs	r2, r1
 8004bea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004bec:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <HAL_ADC_MspInit+0x74>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8004bf8:	193b      	adds	r3, r7, r4
 8004bfa:	2230      	movs	r2, #48	@ 0x30
 8004bfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bfe:	193b      	adds	r3, r7, r4
 8004c00:	2203      	movs	r2, #3
 8004c02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	193b      	adds	r3, r7, r4
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	4a06      	ldr	r2, [pc, #24]	@ (8004c28 <HAL_ADC_MspInit+0x78>)
 8004c0e:	0019      	movs	r1, r3
 8004c10:	0010      	movs	r0, r2
 8004c12:	f004 fcd9 	bl	80095c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b009      	add	sp, #36	@ 0x24
 8004c1c:	bd90      	pop	{r4, r7, pc}
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	40012400 	.word	0x40012400
 8004c24:	40021000 	.word	0x40021000
 8004c28:	50000800 	.word	0x50000800

08004c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c32:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <MX_DMA_Init+0x48>)
 8004c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c36:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <MX_DMA_Init+0x48>)
 8004c38:	2101      	movs	r1, #1
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <MX_DMA_Init+0x48>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c42:	2201      	movs	r2, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	200a      	movs	r0, #10
 8004c50:	f004 f9dc 	bl	800900c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004c54:	200a      	movs	r0, #10
 8004c56:	f004 f9ee 	bl	8009036 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2103      	movs	r1, #3
 8004c5e:	200b      	movs	r0, #11
 8004c60:	f004 f9d4 	bl	800900c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004c64:	200b      	movs	r0, #11
 8004c66:	f004 f9e6 	bl	8009036 <HAL_NVIC_EnableIRQ>

}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	40021000 	.word	0x40021000

08004c78 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8004c86:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb8 <Gadget_Init+0x40>)
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	f000 ff1f 	bl	8005acc <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f000 fce9 	bl	800566c <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7fe fd23 	bl	80036e8 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8004ca2:	4a06      	ldr	r2, [pc, #24]	@ (8004cbc <Gadget_Init+0x44>)
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <Gadget_Init+0x48>)
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	2003      	movs	r0, #3
 8004caa:	f003 f95f 	bl	8007f6c <CreateLine>
}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	b004      	add	sp, #16
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	200000fc 	.word	0x200000fc
 8004cbc:	08012a6c 	.word	0x08012a6c
 8004cc0:	08012a80 	.word	0x08012a80

08004cc4 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8004cc8:	f000 fe8c 	bl	80059e4 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0011      	movs	r1, r2
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f002 f81a 	bl	8006d1c <SGP_Init>
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8004cf4:	f002 f82c 	bl	8006d50 <SGP_StartMeasurement>
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f002 f891 	bl	8006e30 <SGP_GetMeasurementValues>
 8004d0e:	0003      	movs	r3, r0
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8004d1c:	f002 faaa 	bl	8007274 <SGP_DeviceConnected>
 8004d20:	0003      	movs	r3, r0
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b08b      	sub	sp, #44	@ 0x2c
 8004d2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d2e:	2414      	movs	r4, #20
 8004d30:	193b      	adds	r3, r7, r4
 8004d32:	0018      	movs	r0, r3
 8004d34:	2314      	movs	r3, #20
 8004d36:	001a      	movs	r2, r3
 8004d38:	2100      	movs	r1, #0
 8004d3a:	f00b f90b 	bl	800ff54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d3e:	4b70      	ldr	r3, [pc, #448]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d42:	4b6f      	ldr	r3, [pc, #444]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d44:	2104      	movs	r1, #4
 8004d46:	430a      	orrs	r2, r1
 8004d48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	2204      	movs	r2, #4
 8004d50:	4013      	ands	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d56:	4b6a      	ldr	r3, [pc, #424]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5a:	4b69      	ldr	r3, [pc, #420]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d5c:	2180      	movs	r1, #128	@ 0x80
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d62:	4b67      	ldr	r3, [pc, #412]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	2280      	movs	r2, #128	@ 0x80
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6e:	4b64      	ldr	r3, [pc, #400]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d72:	4b63      	ldr	r3, [pc, #396]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d74:	2101      	movs	r1, #1
 8004d76:	430a      	orrs	r2, r1
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d7a:	4b61      	ldr	r3, [pc, #388]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d86:	4b5e      	ldr	r3, [pc, #376]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d92:	4b5b      	ldr	r3, [pc, #364]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	2202      	movs	r2, #2
 8004d98:	4013      	ands	r3, r2
 8004d9a:	607b      	str	r3, [r7, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d9e:	4b58      	ldr	r3, [pc, #352]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	4b57      	ldr	r3, [pc, #348]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004da4:	2108      	movs	r1, #8
 8004da6:	430a      	orrs	r2, r1
 8004da8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004daa:	4b55      	ldr	r3, [pc, #340]	@ (8004f00 <MX_GPIO_Init+0x1d8>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	2208      	movs	r2, #8
 8004db0:	4013      	ands	r3, r2
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004db6:	4b53      	ldr	r3, [pc, #332]	@ (8004f04 <MX_GPIO_Init+0x1dc>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	2101      	movs	r1, #1
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f004 fe63 	bl	8009a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004dc2:	4b50      	ldr	r3, [pc, #320]	@ (8004f04 <MX_GPIO_Init+0x1dc>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f004 fe5d 	bl	8009a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8004dce:	494e      	ldr	r1, [pc, #312]	@ (8004f08 <MX_GPIO_Init+0x1e0>)
 8004dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8004f0c <MX_GPIO_Init+0x1e4>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f004 fe57 	bl	8009a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004dda:	2380      	movs	r3, #128	@ 0x80
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	484c      	ldr	r0, [pc, #304]	@ (8004f10 <MX_GPIO_Init+0x1e8>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	0019      	movs	r1, r3
 8004de4:	f004 fe50 	bl	8009a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8004de8:	193b      	adds	r3, r7, r4
 8004dea:	4a4a      	ldr	r2, [pc, #296]	@ (8004f14 <MX_GPIO_Init+0x1ec>)
 8004dec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	2203      	movs	r2, #3
 8004df2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df4:	193b      	adds	r3, r7, r4
 8004df6:	2200      	movs	r2, #0
 8004df8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	4a44      	ldr	r2, [pc, #272]	@ (8004f10 <MX_GPIO_Init+0x1e8>)
 8004dfe:	0019      	movs	r1, r3
 8004e00:	0010      	movs	r0, r2
 8004e02:	f004 fbe1 	bl	80095c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8004e06:	193b      	adds	r3, r7, r4
 8004e08:	2203      	movs	r2, #3
 8004e0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e0c:	193b      	adds	r3, r7, r4
 8004e0e:	2201      	movs	r2, #1
 8004e10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e1e:	193b      	adds	r3, r7, r4
 8004e20:	4a38      	ldr	r2, [pc, #224]	@ (8004f04 <MX_GPIO_Init+0x1dc>)
 8004e22:	0019      	movs	r1, r3
 8004e24:	0010      	movs	r0, r2
 8004e26:	f004 fbcf 	bl	80095c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f18 <MX_GPIO_Init+0x1f0>)
 8004e2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e30:	193b      	adds	r3, r7, r4
 8004e32:	2203      	movs	r2, #3
 8004e34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	193b      	adds	r3, r7, r4
 8004e38:	2200      	movs	r2, #0
 8004e3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e3c:	193a      	adds	r2, r7, r4
 8004e3e:	23a0      	movs	r3, #160	@ 0xa0
 8004e40:	05db      	lsls	r3, r3, #23
 8004e42:	0011      	movs	r1, r2
 8004e44:	0018      	movs	r0, r3
 8004e46:	f004 fbbf 	bl	80095c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8004e4a:	193b      	adds	r3, r7, r4
 8004e4c:	22c0      	movs	r2, #192	@ 0xc0
 8004e4e:	0052      	lsls	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e52:	193b      	adds	r3, r7, r4
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5e:	193a      	adds	r2, r7, r4
 8004e60:	23a0      	movs	r3, #160	@ 0xa0
 8004e62:	05db      	lsls	r3, r3, #23
 8004e64:	0011      	movs	r1, r2
 8004e66:	0018      	movs	r0, r3
 8004e68:	f004 fbae 	bl	80095c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8004e6c:	193b      	adds	r3, r7, r4
 8004e6e:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <MX_GPIO_Init+0x1e0>)
 8004e70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e72:	193b      	adds	r3, r7, r4
 8004e74:	2201      	movs	r2, #1
 8004e76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	193b      	adds	r3, r7, r4
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7e:	193b      	adds	r3, r7, r4
 8004e80:	2200      	movs	r2, #0
 8004e82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <MX_GPIO_Init+0x1e4>)
 8004e88:	0019      	movs	r1, r3
 8004e8a:	0010      	movs	r0, r2
 8004e8c:	f004 fb9c 	bl	80095c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8004e90:	193b      	adds	r3, r7, r4
 8004e92:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <MX_GPIO_Init+0x1f4>)
 8004e94:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e96:	193b      	adds	r3, r7, r4
 8004e98:	2203      	movs	r2, #3
 8004e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	193b      	adds	r3, r7, r4
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea2:	193b      	adds	r3, r7, r4
 8004ea4:	4a19      	ldr	r2, [pc, #100]	@ (8004f0c <MX_GPIO_Init+0x1e4>)
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	f004 fb8d 	bl	80095c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8004eae:	0021      	movs	r1, r4
 8004eb0:	187b      	adds	r3, r7, r1
 8004eb2:	2280      	movs	r2, #128	@ 0x80
 8004eb4:	0112      	lsls	r2, r2, #4
 8004eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eb8:	000c      	movs	r4, r1
 8004eba:	193b      	adds	r3, r7, r4
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	193b      	adds	r3, r7, r4
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec6:	193b      	adds	r3, r7, r4
 8004ec8:	2200      	movs	r2, #0
 8004eca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8004ecc:	193b      	adds	r3, r7, r4
 8004ece:	4a10      	ldr	r2, [pc, #64]	@ (8004f10 <MX_GPIO_Init+0x1e8>)
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	0010      	movs	r0, r2
 8004ed4:	f004 fb78 	bl	80095c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8004ed8:	0021      	movs	r1, r4
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	2204      	movs	r2, #4
 8004ede:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	2200      	movs	r2, #0
 8004eea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	4a0c      	ldr	r2, [pc, #48]	@ (8004f20 <MX_GPIO_Init+0x1f8>)
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	0010      	movs	r0, r2
 8004ef4:	f004 fb68 	bl	80095c8 <HAL_GPIO_Init>

}
 8004ef8:	46c0      	nop			@ (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b00b      	add	sp, #44	@ 0x2c
 8004efe:	bd90      	pop	{r4, r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	50001c00 	.word	0x50001c00
 8004f08:	00000301 	.word	0x00000301
 8004f0c:	50000400 	.word	0x50000400
 8004f10:	50000800 	.word	0x50000800
 8004f14:	0000320f 	.word	0x0000320f
 8004f18:	00008070 	.word	0x00008070
 8004f1c:	0000403e 	.word	0x0000403e
 8004f20:	50000c00 	.word	0x50000c00

08004f24 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2100      	movs	r1, #0
 8004f32:	0018      	movs	r0, r3
 8004f34:	f008 f9fc 	bl	800d330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2108      	movs	r1, #8
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f008 f9f7 	bl	800d330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	210c      	movs	r1, #12
 8004f46:	0018      	movs	r0, r3
 8004f48:	f008 f9f2 	bl	800d330 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	05db      	lsls	r3, r3, #23
 8004f50:	22fa      	movs	r2, #250	@ 0xfa
 8004f52:	0112      	lsls	r2, r2, #4
 8004f54:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8004f56:	2380      	movs	r3, #128	@ 0x80
 8004f58:	05db      	lsls	r3, r3, #23
 8004f5a:	22fa      	movs	r2, #250	@ 0xfa
 8004f5c:	0112      	lsls	r2, r2, #4
 8004f5e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8004f60:	2380      	movs	r3, #128	@ 0x80
 8004f62:	05db      	lsls	r3, r3, #23
 8004f64:	22fa      	movs	r2, #250	@ 0xfa
 8004f66:	0112      	lsls	r2, r2, #4
 8004f68:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	05db      	lsls	r3, r3, #23
 8004f6e:	22fa      	movs	r2, #250	@ 0xfa
 8004f70:	0112      	lsls	r2, r2, #4
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2100      	movs	r1, #0
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f008 f9d9 	bl	800d330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2104      	movs	r1, #4
 8004f82:	0018      	movs	r0, r3
 8004f84:	f008 f9d4 	bl	800d330 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2108      	movs	r1, #8
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f008 f9cf 	bl	800d330 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8004f92:	4b0a      	ldr	r3, [pc, #40]	@ (8004fbc <GPIO_InitPWMLEDs+0x98>)
 8004f94:	22fa      	movs	r2, #250	@ 0xfa
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8004f9a:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <GPIO_InitPWMLEDs+0x98>)
 8004f9c:	22fa      	movs	r2, #250	@ 0xfa
 8004f9e:	0112      	lsls	r2, r2, #4
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <GPIO_InitPWMLEDs+0x98>)
 8004fa4:	22fa      	movs	r2, #250	@ 0xfa
 8004fa6:	0112      	lsls	r2, r2, #4
 8004fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8004faa:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <GPIO_InitPWMLEDs+0x98>)
 8004fac:	22fa      	movs	r2, #250	@ 0xfa
 8004fae:	0112      	lsls	r2, r2, #4
 8004fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b002      	add	sp, #8
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	40000400 	.word	0x40000400

08004fc0 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0011      	movs	r1, r2
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f003 f923 	bl	800821c <HIDS_Init>
}
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b002      	add	sp, #8
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8004fe2:	f003 f93d 	bl	8008260 <HIDS_StartMeasurement>
}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0011      	movs	r1, r2
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f003 fa0b 	bl	8008418 <HIDS_GetMeasurementValues>
 8005002:	0003      	movs	r3, r0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}

0800500c <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005010:	f003 f9a6 	bl	8008360 <HIDS_DeviceConnected>
 8005014:	0003      	movs	r3, r0
}
 8005016:	0018      	movs	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005020:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005022:	4a1c      	ldr	r2, [pc, #112]	@ (8005094 <MX_I2C1_Init+0x78>)
 8005024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005026:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005028:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <MX_I2C1_Init+0x7c>)
 800502a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800502c:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <MX_I2C1_Init+0x74>)
 800502e:	2200      	movs	r2, #0
 8005030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005032:	4b17      	ldr	r3, [pc, #92]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005034:	2201      	movs	r2, #1
 8005036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005038:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <MX_I2C1_Init+0x74>)
 800503a:	2200      	movs	r2, #0
 800503c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800503e:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005040:	2200      	movs	r2, #0
 8005042:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005044:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005046:	2200      	movs	r2, #0
 8005048:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800504a:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <MX_I2C1_Init+0x74>)
 800504c:	2200      	movs	r2, #0
 800504e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005050:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005052:	2200      	movs	r2, #0
 8005054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005056:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005058:	0018      	movs	r0, r3
 800505a:	f004 fd4d 	bl	8009af8 <HAL_I2C_Init>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d001      	beq.n	8005066 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005062:	f000 fab3 	bl	80055cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005066:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <MX_I2C1_Init+0x74>)
 8005068:	2100      	movs	r1, #0
 800506a:	0018      	movs	r0, r3
 800506c:	f006 fcbc 	bl	800b9e8 <HAL_I2CEx_ConfigAnalogFilter>
 8005070:	1e03      	subs	r3, r0, #0
 8005072:	d001      	beq.n	8005078 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005074:	f000 faaa 	bl	80055cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005078:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <MX_I2C1_Init+0x74>)
 800507a:	2100      	movs	r1, #0
 800507c:	0018      	movs	r0, r3
 800507e:	f006 fcff 	bl	800ba80 <HAL_I2CEx_ConfigDigitalFilter>
 8005082:	1e03      	subs	r3, r0, #0
 8005084:	d001      	beq.n	800508a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005086:	f000 faa1 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000950 	.word	0x20000950
 8005094:	40005400 	.word	0x40005400
 8005098:	00503d58 	.word	0x00503d58

0800509c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80050a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005114 <MX_I2C2_Init+0x78>)
 80050a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80050a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005118 <MX_I2C2_Init+0x7c>)
 80050aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80050ac:	4b18      	ldr	r3, [pc, #96]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050b2:	4b17      	ldr	r3, [pc, #92]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050b8:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80050be:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050c4:	4b12      	ldr	r3, [pc, #72]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050ca:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050d8:	0018      	movs	r0, r3
 80050da:	f004 fd0d 	bl	8009af8 <HAL_I2C_Init>
 80050de:	1e03      	subs	r3, r0, #0
 80050e0:	d001      	beq.n	80050e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80050e2:	f000 fa73 	bl	80055cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050e8:	2100      	movs	r1, #0
 80050ea:	0018      	movs	r0, r3
 80050ec:	f006 fc7c 	bl	800b9e8 <HAL_I2CEx_ConfigAnalogFilter>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d001      	beq.n	80050f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80050f4:	f000 fa6a 	bl	80055cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <MX_I2C2_Init+0x74>)
 80050fa:	2100      	movs	r1, #0
 80050fc:	0018      	movs	r0, r3
 80050fe:	f006 fcbf 	bl	800ba80 <HAL_I2CEx_ConfigDigitalFilter>
 8005102:	1e03      	subs	r3, r0, #0
 8005104:	d001      	beq.n	800510a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005106:	f000 fa61 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	200009a4 	.word	0x200009a4
 8005114:	40005800 	.word	0x40005800
 8005118:	00503d58 	.word	0x00503d58

0800511c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b08b      	sub	sp, #44	@ 0x2c
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005124:	2414      	movs	r4, #20
 8005126:	193b      	adds	r3, r7, r4
 8005128:	0018      	movs	r0, r3
 800512a:	2314      	movs	r3, #20
 800512c:	001a      	movs	r2, r3
 800512e:	2100      	movs	r1, #0
 8005130:	f00a ff10 	bl	800ff54 <memset>
  if(i2cHandle->Instance==I2C1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a5d      	ldr	r2, [pc, #372]	@ (80052b0 <HAL_I2C_MspInit+0x194>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d000      	beq.n	8005140 <HAL_I2C_MspInit+0x24>
 800513e:	e083      	b.n	8005248 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005140:	4b5c      	ldr	r3, [pc, #368]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 8005142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005144:	4b5b      	ldr	r3, [pc, #364]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 8005146:	2102      	movs	r1, #2
 8005148:	430a      	orrs	r2, r1
 800514a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800514c:	4b59      	ldr	r3, [pc, #356]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	2202      	movs	r2, #2
 8005152:	4013      	ands	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005158:	0021      	movs	r1, r4
 800515a:	187b      	adds	r3, r7, r1
 800515c:	22c0      	movs	r2, #192	@ 0xc0
 800515e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005160:	187b      	adds	r3, r7, r1
 8005162:	2212      	movs	r2, #18
 8005164:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	187b      	adds	r3, r7, r1
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516c:	187b      	adds	r3, r7, r1
 800516e:	2203      	movs	r2, #3
 8005170:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005172:	187b      	adds	r3, r7, r1
 8005174:	2201      	movs	r2, #1
 8005176:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005178:	187b      	adds	r3, r7, r1
 800517a:	4a4f      	ldr	r2, [pc, #316]	@ (80052b8 <HAL_I2C_MspInit+0x19c>)
 800517c:	0019      	movs	r1, r3
 800517e:	0010      	movs	r0, r2
 8005180:	f004 fa22 	bl	80095c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005184:	4b4b      	ldr	r3, [pc, #300]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 8005186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005188:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	0389      	lsls	r1, r1, #14
 800518e:	430a      	orrs	r2, r1
 8005190:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005192:	4b4a      	ldr	r3, [pc, #296]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 8005194:	4a4a      	ldr	r2, [pc, #296]	@ (80052c0 <HAL_I2C_MspInit+0x1a4>)
 8005196:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005198:	4b48      	ldr	r3, [pc, #288]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 800519a:	2206      	movs	r2, #6
 800519c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800519e:	4b47      	ldr	r3, [pc, #284]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051a4:	4b45      	ldr	r3, [pc, #276]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051aa:	4b44      	ldr	r3, [pc, #272]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051ac:	2280      	movs	r2, #128	@ 0x80
 80051ae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051b0:	4b42      	ldr	r3, [pc, #264]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051b6:	4b41      	ldr	r3, [pc, #260]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80051bc:	4b3f      	ldr	r3, [pc, #252]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051be:	2200      	movs	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051c2:	4b3e      	ldr	r3, [pc, #248]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80051c8:	4b3c      	ldr	r3, [pc, #240]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051ca:	0018      	movs	r0, r3
 80051cc:	f003 ff50 	bl	8009070 <HAL_DMA_Init>
 80051d0:	1e03      	subs	r3, r0, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80051d4:	f000 f9fa 	bl	80055cc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a38      	ldr	r2, [pc, #224]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051de:	4b37      	ldr	r3, [pc, #220]	@ (80052bc <HAL_I2C_MspInit+0x1a0>)
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80051e4:	4b37      	ldr	r3, [pc, #220]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 80051e6:	4a38      	ldr	r2, [pc, #224]	@ (80052c8 <HAL_I2C_MspInit+0x1ac>)
 80051e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80051ea:	4b36      	ldr	r3, [pc, #216]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 80051ec:	2206      	movs	r2, #6
 80051ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051f0:	4b34      	ldr	r3, [pc, #208]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 80051f2:	2210      	movs	r2, #16
 80051f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051f6:	4b33      	ldr	r3, [pc, #204]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051fc:	4b31      	ldr	r3, [pc, #196]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 80051fe:	2280      	movs	r2, #128	@ 0x80
 8005200:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005202:	4b30      	ldr	r3, [pc, #192]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 8005204:	2200      	movs	r2, #0
 8005206:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005208:	4b2e      	ldr	r3, [pc, #184]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 800520a:	2200      	movs	r2, #0
 800520c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800520e:	4b2d      	ldr	r3, [pc, #180]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 8005210:	2200      	movs	r2, #0
 8005212:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005214:	4b2b      	ldr	r3, [pc, #172]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 8005216:	2200      	movs	r2, #0
 8005218:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800521a:	4b2a      	ldr	r3, [pc, #168]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 800521c:	0018      	movs	r0, r3
 800521e:	f003 ff27 	bl	8009070 <HAL_DMA_Init>
 8005222:	1e03      	subs	r3, r0, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005226:	f000 f9d1 	bl	80055cc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a25      	ldr	r2, [pc, #148]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 800522e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005230:	4b24      	ldr	r3, [pc, #144]	@ (80052c4 <HAL_I2C_MspInit+0x1a8>)
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	2017      	movs	r0, #23
 800523c:	f003 fee6 	bl	800900c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005240:	2017      	movs	r0, #23
 8005242:	f003 fef8 	bl	8009036 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005246:	e02e      	b.n	80052a6 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1f      	ldr	r2, [pc, #124]	@ (80052cc <HAL_I2C_MspInit+0x1b0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d129      	bne.n	80052a6 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005252:	4b18      	ldr	r3, [pc, #96]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 8005254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005256:	4b17      	ldr	r3, [pc, #92]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 8005258:	2102      	movs	r1, #2
 800525a:	430a      	orrs	r2, r1
 800525c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800525e:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 8005260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005262:	2202      	movs	r2, #2
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800526a:	2114      	movs	r1, #20
 800526c:	187b      	adds	r3, r7, r1
 800526e:	22c0      	movs	r2, #192	@ 0xc0
 8005270:	0112      	lsls	r2, r2, #4
 8005272:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005274:	187b      	adds	r3, r7, r1
 8005276:	2212      	movs	r2, #18
 8005278:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527a:	187b      	adds	r3, r7, r1
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005280:	187b      	adds	r3, r7, r1
 8005282:	2203      	movs	r2, #3
 8005284:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005286:	187b      	adds	r3, r7, r1
 8005288:	2206      	movs	r2, #6
 800528a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800528c:	187b      	adds	r3, r7, r1
 800528e:	4a0a      	ldr	r2, [pc, #40]	@ (80052b8 <HAL_I2C_MspInit+0x19c>)
 8005290:	0019      	movs	r1, r3
 8005292:	0010      	movs	r0, r2
 8005294:	f004 f998 	bl	80095c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005298:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 800529a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_I2C_MspInit+0x198>)
 800529e:	2180      	movs	r1, #128	@ 0x80
 80052a0:	03c9      	lsls	r1, r1, #15
 80052a2:	430a      	orrs	r2, r1
 80052a4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b00b      	add	sp, #44	@ 0x2c
 80052ac:	bd90      	pop	{r4, r7, pc}
 80052ae:	46c0      	nop			@ (mov r8, r8)
 80052b0:	40005400 	.word	0x40005400
 80052b4:	40021000 	.word	0x40021000
 80052b8:	50000400 	.word	0x50000400
 80052bc:	200009f8 	.word	0x200009f8
 80052c0:	40020030 	.word	0x40020030
 80052c4:	20000a40 	.word	0x20000a40
 80052c8:	4002001c 	.word	0x4002001c
 80052cc:	40005800 	.word	0x40005800

080052d0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80052d4:	4b10      	ldr	r3, [pc, #64]	@ (8005318 <MX_I2S2_Init+0x48>)
 80052d6:	4a11      	ldr	r2, [pc, #68]	@ (800531c <MX_I2S2_Init+0x4c>)
 80052d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80052da:	4b0f      	ldr	r3, [pc, #60]	@ (8005318 <MX_I2S2_Init+0x48>)
 80052dc:	22c0      	movs	r2, #192	@ 0xc0
 80052de:	0092      	lsls	r2, r2, #2
 80052e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80052e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <MX_I2S2_Init+0x48>)
 80052e4:	2210      	movs	r2, #16
 80052e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 80052e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <MX_I2S2_Init+0x48>)
 80052ea:	2205      	movs	r2, #5
 80052ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80052ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <MX_I2S2_Init+0x48>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80052f4:	4b08      	ldr	r3, [pc, #32]	@ (8005318 <MX_I2S2_Init+0x48>)
 80052f6:	22fa      	movs	r2, #250	@ 0xfa
 80052f8:	0152      	lsls	r2, r2, #5
 80052fa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80052fc:	4b06      	ldr	r3, [pc, #24]	@ (8005318 <MX_I2S2_Init+0x48>)
 80052fe:	2208      	movs	r2, #8
 8005300:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005302:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <MX_I2S2_Init+0x48>)
 8005304:	0018      	movs	r0, r3
 8005306:	f006 fc07 	bl	800bb18 <HAL_I2S_Init>
 800530a:	1e03      	subs	r3, r0, #0
 800530c:	d001      	beq.n	8005312 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800530e:	f000 f95d 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000a88 	.word	0x20000a88
 800531c:	40003800 	.word	0x40003800

08005320 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b089      	sub	sp, #36	@ 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005328:	240c      	movs	r4, #12
 800532a:	193b      	adds	r3, r7, r4
 800532c:	0018      	movs	r0, r3
 800532e:	2314      	movs	r3, #20
 8005330:	001a      	movs	r2, r3
 8005332:	2100      	movs	r1, #0
 8005334:	f00a fe0e 	bl	800ff54 <memset>
  if(i2sHandle->Instance==SPI2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2d      	ldr	r2, [pc, #180]	@ (80053f4 <HAL_I2S_MspInit+0xd4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d154      	bne.n	80053ec <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005342:	4b2d      	ldr	r3, [pc, #180]	@ (80053f8 <HAL_I2S_MspInit+0xd8>)
 8005344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005346:	4b2c      	ldr	r3, [pc, #176]	@ (80053f8 <HAL_I2S_MspInit+0xd8>)
 8005348:	2180      	movs	r1, #128	@ 0x80
 800534a:	01c9      	lsls	r1, r1, #7
 800534c:	430a      	orrs	r2, r1
 800534e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005350:	4b29      	ldr	r3, [pc, #164]	@ (80053f8 <HAL_I2S_MspInit+0xd8>)
 8005352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005354:	4b28      	ldr	r3, [pc, #160]	@ (80053f8 <HAL_I2S_MspInit+0xd8>)
 8005356:	2102      	movs	r1, #2
 8005358:	430a      	orrs	r2, r1
 800535a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800535c:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <HAL_I2S_MspInit+0xd8>)
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	2202      	movs	r2, #2
 8005362:	4013      	ands	r3, r2
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005368:	193b      	adds	r3, r7, r4
 800536a:	22b0      	movs	r2, #176	@ 0xb0
 800536c:	0212      	lsls	r2, r2, #8
 800536e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005370:	0021      	movs	r1, r4
 8005372:	187b      	adds	r3, r7, r1
 8005374:	2202      	movs	r2, #2
 8005376:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005378:	187b      	adds	r3, r7, r1
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537e:	187b      	adds	r3, r7, r1
 8005380:	2200      	movs	r2, #0
 8005382:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005384:	187b      	adds	r3, r7, r1
 8005386:	2200      	movs	r2, #0
 8005388:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538a:	187b      	adds	r3, r7, r1
 800538c:	4a1b      	ldr	r2, [pc, #108]	@ (80053fc <HAL_I2S_MspInit+0xdc>)
 800538e:	0019      	movs	r1, r3
 8005390:	0010      	movs	r0, r2
 8005392:	f004 f919 	bl	80095c8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005396:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 8005398:	4a1a      	ldr	r2, [pc, #104]	@ (8005404 <HAL_I2S_MspInit+0xe4>)
 800539a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800539c:	4b18      	ldr	r3, [pc, #96]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 800539e:	2202      	movs	r2, #2
 80053a0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053a2:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053a8:	4b15      	ldr	r3, [pc, #84]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053ae:	4b14      	ldr	r3, [pc, #80]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053b0:	2280      	movs	r2, #128	@ 0x80
 80053b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053b4:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053b6:	2280      	movs	r2, #128	@ 0x80
 80053b8:	0052      	lsls	r2, r2, #1
 80053ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80053bc:	4b10      	ldr	r3, [pc, #64]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053be:	2280      	movs	r2, #128	@ 0x80
 80053c0:	00d2      	lsls	r2, r2, #3
 80053c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80053c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053c6:	2220      	movs	r2, #32
 80053c8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80053d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053d2:	0018      	movs	r0, r3
 80053d4:	f003 fe4c 	bl	8009070 <HAL_DMA_Init>
 80053d8:	1e03      	subs	r3, r0, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80053dc:	f000 f8f6 	bl	80055cc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a07      	ldr	r2, [pc, #28]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <HAL_I2S_MspInit+0xe0>)
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80053ec:	46c0      	nop			@ (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b009      	add	sp, #36	@ 0x24
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	40003800 	.word	0x40003800
 80053f8:	40021000 	.word	0x40021000
 80053fc:	50000400 	.word	0x50000400
 8005400:	20000ac4 	.word	0x20000ac4
 8005404:	40020044 	.word	0x40020044

08005408 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0c      	ldr	r2, [pc, #48]	@ (8005448 <HAL_I2S_MspDeInit+0x40>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800541a:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <HAL_I2S_MspDeInit+0x44>)
 800541c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800541e:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_I2S_MspDeInit+0x44>)
 8005420:	490b      	ldr	r1, [pc, #44]	@ (8005450 <HAL_I2S_MspDeInit+0x48>)
 8005422:	400a      	ands	r2, r1
 8005424:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8005426:	23b0      	movs	r3, #176	@ 0xb0
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	4a0a      	ldr	r2, [pc, #40]	@ (8005454 <HAL_I2S_MspDeInit+0x4c>)
 800542c:	0019      	movs	r1, r3
 800542e:	0010      	movs	r0, r2
 8005430:	f004 fa48 	bl	80098c4 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005438:	0018      	movs	r0, r3
 800543a:	f003 fe91 	bl	8009160 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	40003800 	.word	0x40003800
 800544c:	40021000 	.word	0x40021000
 8005450:	ffffbfff 	.word	0xffffbfff
 8005454:	50000400 	.word	0x50000400

08005458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800545e:	f003 f917 	bl	8008690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005462:	f000 f841 	bl	80054e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005466:	f7ff fc5f 	bl	8004d28 <MX_GPIO_Init>
  MX_DMA_Init();
 800546a:	f7ff fbdf 	bl	8004c2c <MX_DMA_Init>
  MX_I2C1_Init();
 800546e:	f7ff fdd5 	bl	800501c <MX_I2C1_Init>
  MX_I2S2_Init();
 8005472:	f7ff ff2d 	bl	80052d0 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8005476:	f002 fb83 	bl	8007b80 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800547a:	f7ff fe0f 	bl	800509c <MX_I2C2_Init>
  MX_USB_PCD_Init();
 800547e:	f002 fce1 	bl	8007e44 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8005482:	f002 f9ff 	bl	8007884 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005486:	f002 fa71 	bl	800796c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800548a:	f002 fbad 	bl	8007be8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800548e:	f7ff fb1b 	bl	8004ac8 <MX_ADC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8005492:	4a0f      	ldr	r2, [pc, #60]	@ (80054d0 <main+0x78>)
 8005494:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <main+0x7c>)
 8005496:	0011      	movs	r1, r2
 8005498:	0018      	movs	r0, r3
 800549a:	f7ff fd43 	bl	8004f24 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 800549e:	f003 f95d 	bl	800875c <HAL_GetTick>
 80054a2:	0003      	movs	r3, r0
 80054a4:	22fa      	movs	r2, #250	@ 0xfa
 80054a6:	0092      	lsls	r2, r2, #2
 80054a8:	4694      	mov	ip, r2
 80054aa:	4463      	add	r3, ip
 80054ac:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 80054ae:	2003      	movs	r0, #3
 80054b0:	f002 fdd8 	bl	8008064 <SetVerboseLevel>
  BinaryReleaseInfo();
 80054b4:	f002 fdee 	bl	8008094 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80054b8:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <main+0x80>)
 80054ba:	4a08      	ldr	r2, [pc, #32]	@ (80054dc <main+0x84>)
 80054bc:	4908      	ldr	r1, [pc, #32]	@ (80054e0 <main+0x88>)
 80054be:	4809      	ldr	r0, [pc, #36]	@ (80054e4 <main+0x8c>)
 80054c0:	f7ff fbda 	bl	8004c78 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    UpkeepGadget();
 80054c4:	f7ff fbfe 	bl	8004cc4 <UpkeepGadget>
    ESP_Upkeep();
 80054c8:	f7ff f952 	bl	8004770 <ESP_Upkeep>
    UpkeepGadget();
 80054cc:	46c0      	nop			@ (mov r8, r8)
 80054ce:	e7f9      	b.n	80054c4 <main+0x6c>
 80054d0:	2000107c 	.word	0x2000107c
 80054d4:	2000103c 	.word	0x2000103c
 80054d8:	200008f4 	.word	0x200008f4
 80054dc:	20001174 	.word	0x20001174
 80054e0:	20000a88 	.word	0x20000a88
 80054e4:	20000950 	.word	0x20000950

080054e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b09d      	sub	sp, #116	@ 0x74
 80054ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054ee:	2438      	movs	r4, #56	@ 0x38
 80054f0:	193b      	adds	r3, r7, r4
 80054f2:	0018      	movs	r0, r3
 80054f4:	2338      	movs	r3, #56	@ 0x38
 80054f6:	001a      	movs	r2, r3
 80054f8:	2100      	movs	r1, #0
 80054fa:	f00a fd2b 	bl	800ff54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054fe:	2324      	movs	r3, #36	@ 0x24
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	0018      	movs	r0, r3
 8005504:	2314      	movs	r3, #20
 8005506:	001a      	movs	r2, r3
 8005508:	2100      	movs	r1, #0
 800550a:	f00a fd23 	bl	800ff54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800550e:	003b      	movs	r3, r7
 8005510:	0018      	movs	r0, r3
 8005512:	2324      	movs	r3, #36	@ 0x24
 8005514:	001a      	movs	r2, r3
 8005516:	2100      	movs	r1, #0
 8005518:	f00a fd1c 	bl	800ff54 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800551c:	4b29      	ldr	r3, [pc, #164]	@ (80055c4 <SystemClock_Config+0xdc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a29      	ldr	r2, [pc, #164]	@ (80055c8 <SystemClock_Config+0xe0>)
 8005522:	401a      	ands	r2, r3
 8005524:	4b27      	ldr	r3, [pc, #156]	@ (80055c4 <SystemClock_Config+0xdc>)
 8005526:	2180      	movs	r1, #128	@ 0x80
 8005528:	0109      	lsls	r1, r1, #4
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800552e:	0021      	movs	r1, r4
 8005530:	187b      	adds	r3, r7, r1
 8005532:	2222      	movs	r2, #34	@ 0x22
 8005534:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005536:	187b      	adds	r3, r7, r1
 8005538:	2201      	movs	r2, #1
 800553a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800553c:	187b      	adds	r3, r7, r1
 800553e:	2210      	movs	r2, #16
 8005540:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005542:	187b      	adds	r3, r7, r1
 8005544:	2201      	movs	r2, #1
 8005546:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005548:	187b      	adds	r3, r7, r1
 800554a:	2200      	movs	r2, #0
 800554c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800554e:	187b      	adds	r3, r7, r1
 8005550:	0018      	movs	r0, r3
 8005552:	f006 ff59 	bl	800c408 <HAL_RCC_OscConfig>
 8005556:	1e03      	subs	r3, r0, #0
 8005558:	d001      	beq.n	800555e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800555a:	f000 f837 	bl	80055cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800555e:	2124      	movs	r1, #36	@ 0x24
 8005560:	187b      	adds	r3, r7, r1
 8005562:	220f      	movs	r2, #15
 8005564:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005566:	187b      	adds	r3, r7, r1
 8005568:	2201      	movs	r2, #1
 800556a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800556c:	187b      	adds	r3, r7, r1
 800556e:	2200      	movs	r2, #0
 8005570:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005572:	187b      	adds	r3, r7, r1
 8005574:	2200      	movs	r2, #0
 8005576:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005578:	187b      	adds	r3, r7, r1
 800557a:	2200      	movs	r2, #0
 800557c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800557e:	187b      	adds	r3, r7, r1
 8005580:	2100      	movs	r1, #0
 8005582:	0018      	movs	r0, r3
 8005584:	f007 fb14 	bl	800cbb0 <HAL_RCC_ClockConfig>
 8005588:	1e03      	subs	r3, r0, #0
 800558a:	d001      	beq.n	8005590 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800558c:	f000 f81e 	bl	80055cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005590:	003b      	movs	r3, r7
 8005592:	2249      	movs	r2, #73	@ 0x49
 8005594:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005596:	003b      	movs	r3, r7
 8005598:	2200      	movs	r2, #0
 800559a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800559c:	003b      	movs	r3, r7
 800559e:	2200      	movs	r2, #0
 80055a0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80055a2:	003b      	movs	r3, r7
 80055a4:	2280      	movs	r2, #128	@ 0x80
 80055a6:	04d2      	lsls	r2, r2, #19
 80055a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055aa:	003b      	movs	r3, r7
 80055ac:	0018      	movs	r0, r3
 80055ae:	f007 fd23 	bl	800cff8 <HAL_RCCEx_PeriphCLKConfig>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d001      	beq.n	80055ba <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80055b6:	f000 f809 	bl	80055cc <Error_Handler>
  }
}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	46bd      	mov	sp, r7
 80055be:	b01d      	add	sp, #116	@ 0x74
 80055c0:	bd90      	pop	{r4, r7, pc}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	40007000 	.word	0x40007000
 80055c8:	ffffe7ff 	.word	0xffffe7ff

080055cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055d0:	b672      	cpsid	i
}
 80055d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80055d4:	46c0      	nop			@ (mov r8, r8)
 80055d6:	e7fd      	b.n	80055d4 <Error_Handler+0x8>

080055d8 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80055dc:	f7ff fcff 	bl	8004fde <HT_StartMeasurement>
}
 80055e0:	46c0      	nop			@ (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80055ec:	4a04      	ldr	r2, [pc, #16]	@ (8005600 <HT_IsMeasurementDoneWrapper+0x18>)
 80055ee:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <HT_IsMeasurementDoneWrapper+0x1c>)
 80055f0:	0011      	movs	r1, r2
 80055f2:	0018      	movs	r0, r3
 80055f4:	f7ff fcfa 	bl	8004fec <HT_GetMeasurementValues>
 80055f8:	0003      	movs	r3, r0
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000b10 	.word	0x20000b10
 8005604:	20000b0c 	.word	0x20000b0c

08005608 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 800560c:	f7ff fb70 	bl	8004cf0 <Gas_StartMeasurement>
}
 8005610:	46c0      	nop			@ (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 800561c:	4b03      	ldr	r3, [pc, #12]	@ (800562c <VOC_IsMeasurementDoneWrapper+0x14>)
 800561e:	0018      	movs	r0, r3
 8005620:	f7ff fb6d 	bl	8004cfe <Gas_GetMeasurementValues>
 8005624:	0003      	movs	r3, r0
}
 8005626:	0018      	movs	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000b14 	.word	0x20000b14

08005630 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
}
 8005634:	46c0      	nop			@ (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800563a:	b580      	push	{r7, lr}
 800563c:	af00      	add	r7, sp, #0
  return true;
 800563e:	2301      	movs	r3, #1
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005646:	b580      	push	{r7, lr}
 8005648:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 800564a:	23fa      	movs	r3, #250	@ 0xfa
 800564c:	015b      	lsls	r3, r3, #5
 800564e:	2180      	movs	r1, #128	@ 0x80
 8005650:	0018      	movs	r0, r3
 8005652:	f000 fb63 	bl	8005d1c <MIC_Start>
}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005660:	f000 fbe8 	bl	8005e34 <MIC_MeasurementDone>
 8005664:	0003      	movs	r3, r0
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 800566c:	b5b0      	push	{r4, r5, r7, lr}
 800566e:	b096      	sub	sp, #88	@ 0x58
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005678:	4b86      	ldr	r3, [pc, #536]	@ (8005894 <Meas_Init+0x228>)
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
  batteryInit(ADC_HANDLER);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0018      	movs	r0, r3
 8005682:	f7fd ff63 	bl	800354c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005686:	4b84      	ldr	r3, [pc, #528]	@ (8005898 <Meas_Init+0x22c>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <Meas_Init+0x2a>
 800568e:	4b82      	ldr	r3, [pc, #520]	@ (8005898 <Meas_Init+0x22c>)
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d079      	beq.n	800578a <Meas_Init+0x11e>
    I2CSensors_Init(sensorI2C);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	0018      	movs	r0, r3
 800569a:	f7ff f9a3 	bl	80049e4 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 800569e:	f7ff fcb5 	bl	800500c <HT_DeviceConnected>
 80056a2:	0003      	movs	r3, r0
 80056a4:	001a      	movs	r2, r3
 80056a6:	2301      	movs	r3, #1
 80056a8:	4053      	eors	r3, r2
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d017      	beq.n	80056e0 <Meas_Init+0x74>
       Error("Humidity / Temperature sensor NOT connected!");
 80056b0:	4a7a      	ldr	r2, [pc, #488]	@ (800589c <Meas_Init+0x230>)
 80056b2:	4b7b      	ldr	r3, [pc, #492]	@ (80058a0 <Meas_Init+0x234>)
 80056b4:	0019      	movs	r1, r3
 80056b6:	2001      	movs	r0, #1
 80056b8:	f002 fc58 	bl	8007f6c <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 80056bc:	4b76      	ldr	r3, [pc, #472]	@ (8005898 <Meas_Init+0x22c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
       // HT Device NOT connected, turning LED on RED.
       // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
       TIM2 -> CCR1 = 0;
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	05db      	lsls	r3, r3, #23
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34
       TIM2 -> CCR3 = 4000;
 80056ca:	2380      	movs	r3, #128	@ 0x80
 80056cc:	05db      	lsls	r3, r3, #23
 80056ce:	22fa      	movs	r2, #250	@ 0xfa
 80056d0:	0112      	lsls	r2, r2, #4
 80056d2:	63da      	str	r2, [r3, #60]	@ 0x3c
       TIM2 -> CCR4 = 4000;
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	05db      	lsls	r3, r3, #23
 80056d8:	22fa      	movs	r2, #250	@ 0xfa
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80056de:	e013      	b.n	8005708 <Meas_Init+0x9c>
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      Debug("Humidity / Temperature sensor initialised.");
 80056e0:	4a70      	ldr	r2, [pc, #448]	@ (80058a4 <Meas_Init+0x238>)
 80056e2:	4b71      	ldr	r3, [pc, #452]	@ (80058a8 <Meas_Init+0x23c>)
 80056e4:	0019      	movs	r1, r3
 80056e6:	2003      	movs	r0, #3
 80056e8:	f002 fc40 	bl	8007f6c <CreateLine>
      TIM2 -> CCR1 = 4000;
 80056ec:	2380      	movs	r3, #128	@ 0x80
 80056ee:	05db      	lsls	r3, r3, #23
 80056f0:	22fa      	movs	r2, #250	@ 0xfa
 80056f2:	0112      	lsls	r2, r2, #4
 80056f4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 80056f6:	2380      	movs	r3, #128	@ 0x80
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	2200      	movs	r2, #0
 80056fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	05db      	lsls	r3, r3, #23
 8005702:	22fa      	movs	r2, #250	@ 0xfa
 8005704:	0112      	lsls	r2, r2, #4
 8005706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    if(!Gas_DeviceConnected()) {
 8005708:	f7ff fb06 	bl	8004d18 <Gas_DeviceConnected>
 800570c:	0003      	movs	r3, r0
 800570e:	001a      	movs	r2, r3
 8005710:	2301      	movs	r3, #1
 8005712:	4053      	eors	r3, r2
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01d      	beq.n	8005756 <Meas_Init+0xea>
       Error("SGP device not connected!");
 800571a:	4a64      	ldr	r2, [pc, #400]	@ (80058ac <Meas_Init+0x240>)
 800571c:	4b60      	ldr	r3, [pc, #384]	@ (80058a0 <Meas_Init+0x234>)
 800571e:	0019      	movs	r1, r3
 8005720:	2001      	movs	r0, #1
 8005722:	f002 fc23 	bl	8007f6c <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005726:	4b62      	ldr	r3, [pc, #392]	@ (80058b0 <Meas_Init+0x244>)
 8005728:	2200      	movs	r2, #0
 800572a:	2101      	movs	r1, #1
 800572c:	0018      	movs	r0, r3
 800572e:	f004 f9ab 	bl	8009a88 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005732:	2380      	movs	r3, #128	@ 0x80
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	485e      	ldr	r0, [pc, #376]	@ (80058b0 <Meas_Init+0x244>)
 8005738:	2201      	movs	r2, #1
 800573a:	0019      	movs	r1, r3
 800573c:	f004 f9a4 	bl	8009a88 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005740:	2380      	movs	r3, #128	@ 0x80
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	485a      	ldr	r0, [pc, #360]	@ (80058b0 <Meas_Init+0x244>)
 8005746:	2201      	movs	r2, #1
 8005748:	0019      	movs	r1, r3
 800574a:	f004 f99d 	bl	8009a88 <HAL_GPIO_WritePin>
       MeasEnabled.VOC_measurementEnabled = false;
 800574e:	4b52      	ldr	r3, [pc, #328]	@ (8005898 <Meas_Init+0x22c>)
 8005750:	2200      	movs	r2, #0
 8005752:	705a      	strb	r2, [r3, #1]
 8005754:	e019      	b.n	800578a <Meas_Init+0x11e>
    }else{
      Debug("SGP sensor initialised.");
 8005756:	4a57      	ldr	r2, [pc, #348]	@ (80058b4 <Meas_Init+0x248>)
 8005758:	4b53      	ldr	r3, [pc, #332]	@ (80058a8 <Meas_Init+0x23c>)
 800575a:	0019      	movs	r1, r3
 800575c:	2003      	movs	r0, #3
 800575e:	f002 fc05 	bl	8007f6c <CreateLine>
      // HT Device is connected, turning led on GREEN.
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005762:	4b53      	ldr	r3, [pc, #332]	@ (80058b0 <Meas_Init+0x244>)
 8005764:	2201      	movs	r2, #1
 8005766:	2101      	movs	r1, #1
 8005768:	0018      	movs	r0, r3
 800576a:	f004 f98d 	bl	8009a88 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800576e:	2380      	movs	r3, #128	@ 0x80
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	484f      	ldr	r0, [pc, #316]	@ (80058b0 <Meas_Init+0x244>)
 8005774:	2200      	movs	r2, #0
 8005776:	0019      	movs	r1, r3
 8005778:	f004 f986 	bl	8009a88 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	484b      	ldr	r0, [pc, #300]	@ (80058b0 <Meas_Init+0x244>)
 8005782:	2201      	movs	r2, #1
 8005784:	0019      	movs	r1, r3
 8005786:	f004 f97f 	bl	8009a88 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 800578a:	4b43      	ldr	r3, [pc, #268]	@ (8005898 <Meas_Init+0x22c>)
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <Meas_Init+0x12e>
    MIC_Init(micI2s);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	0018      	movs	r0, r3
 8005796:	f000 f9e7 	bl	8005b68 <MIC_Init>
  }
  uint8_t offset = 0;
 800579a:	2557      	movs	r5, #87	@ 0x57
 800579c:	197b      	adds	r3, r7, r5
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80057a2:	197b      	adds	r3, r7, r5
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	197a      	adds	r2, r7, r5
 80057a8:	1c59      	adds	r1, r3, #1
 80057aa:	7011      	strb	r1, [r2, #0]
 80057ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005898 <Meas_Init+0x22c>)
 80057ae:	7814      	ldrb	r4, [r2, #0]
 80057b0:	4a41      	ldr	r2, [pc, #260]	@ (80058b8 <Meas_Init+0x24c>)
 80057b2:	0119      	lsls	r1, r3, #4
 80057b4:	4841      	ldr	r0, [pc, #260]	@ (80058bc <Meas_Init+0x250>)
 80057b6:	5088      	str	r0, [r1, r2]
 80057b8:	493f      	ldr	r1, [pc, #252]	@ (80058b8 <Meas_Init+0x24c>)
 80057ba:	011a      	lsls	r2, r3, #4
 80057bc:	188a      	adds	r2, r1, r2
 80057be:	3204      	adds	r2, #4
 80057c0:	493f      	ldr	r1, [pc, #252]	@ (80058c0 <Meas_Init+0x254>)
 80057c2:	6011      	str	r1, [r2, #0]
 80057c4:	493c      	ldr	r1, [pc, #240]	@ (80058b8 <Meas_Init+0x24c>)
 80057c6:	011a      	lsls	r2, r3, #4
 80057c8:	188a      	adds	r2, r1, r2
 80057ca:	3208      	adds	r2, #8
 80057cc:	493d      	ldr	r1, [pc, #244]	@ (80058c4 <Meas_Init+0x258>)
 80057ce:	6011      	str	r1, [r2, #0]
 80057d0:	4a39      	ldr	r2, [pc, #228]	@ (80058b8 <Meas_Init+0x24c>)
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	330c      	adds	r3, #12
 80057d8:	1c22      	adds	r2, r4, #0
 80057da:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80057dc:	197b      	adds	r3, r7, r5
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	197a      	adds	r2, r7, r5
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	7011      	strb	r1, [r2, #0]
 80057e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005898 <Meas_Init+0x22c>)
 80057e8:	7854      	ldrb	r4, [r2, #1]
 80057ea:	4a33      	ldr	r2, [pc, #204]	@ (80058b8 <Meas_Init+0x24c>)
 80057ec:	0119      	lsls	r1, r3, #4
 80057ee:	4836      	ldr	r0, [pc, #216]	@ (80058c8 <Meas_Init+0x25c>)
 80057f0:	5088      	str	r0, [r1, r2]
 80057f2:	4931      	ldr	r1, [pc, #196]	@ (80058b8 <Meas_Init+0x24c>)
 80057f4:	011a      	lsls	r2, r3, #4
 80057f6:	188a      	adds	r2, r1, r2
 80057f8:	3204      	adds	r2, #4
 80057fa:	4934      	ldr	r1, [pc, #208]	@ (80058cc <Meas_Init+0x260>)
 80057fc:	6011      	str	r1, [r2, #0]
 80057fe:	492e      	ldr	r1, [pc, #184]	@ (80058b8 <Meas_Init+0x24c>)
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	188a      	adds	r2, r1, r2
 8005804:	3208      	adds	r2, #8
 8005806:	4932      	ldr	r1, [pc, #200]	@ (80058d0 <Meas_Init+0x264>)
 8005808:	6011      	str	r1, [r2, #0]
 800580a:	4a2b      	ldr	r2, [pc, #172]	@ (80058b8 <Meas_Init+0x24c>)
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	18d3      	adds	r3, r2, r3
 8005810:	330c      	adds	r3, #12
 8005812:	1c22      	adds	r2, r4, #0
 8005814:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005816:	197b      	adds	r3, r7, r5
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	197a      	adds	r2, r7, r5
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	7011      	strb	r1, [r2, #0]
 8005820:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <Meas_Init+0x22c>)
 8005822:	7894      	ldrb	r4, [r2, #2]
 8005824:	4a24      	ldr	r2, [pc, #144]	@ (80058b8 <Meas_Init+0x24c>)
 8005826:	0119      	lsls	r1, r3, #4
 8005828:	482a      	ldr	r0, [pc, #168]	@ (80058d4 <Meas_Init+0x268>)
 800582a:	5088      	str	r0, [r1, r2]
 800582c:	4922      	ldr	r1, [pc, #136]	@ (80058b8 <Meas_Init+0x24c>)
 800582e:	011a      	lsls	r2, r3, #4
 8005830:	188a      	adds	r2, r1, r2
 8005832:	3204      	adds	r2, #4
 8005834:	4928      	ldr	r1, [pc, #160]	@ (80058d8 <Meas_Init+0x26c>)
 8005836:	6011      	str	r1, [r2, #0]
 8005838:	491f      	ldr	r1, [pc, #124]	@ (80058b8 <Meas_Init+0x24c>)
 800583a:	011a      	lsls	r2, r3, #4
 800583c:	188a      	adds	r2, r1, r2
 800583e:	3208      	adds	r2, #8
 8005840:	4926      	ldr	r1, [pc, #152]	@ (80058dc <Meas_Init+0x270>)
 8005842:	6011      	str	r1, [r2, #0]
 8005844:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <Meas_Init+0x24c>)
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	18d3      	adds	r3, r2, r3
 800584a:	330c      	adds	r3, #12
 800584c:	1c22      	adds	r2, r4, #0
 800584e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8005850:	197b      	adds	r3, r7, r5
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	197a      	adds	r2, r7, r5
 8005856:	1c59      	adds	r1, r3, #1
 8005858:	7011      	strb	r1, [r2, #0]
 800585a:	4a0f      	ldr	r2, [pc, #60]	@ (8005898 <Meas_Init+0x22c>)
 800585c:	78d4      	ldrb	r4, [r2, #3]
 800585e:	4a16      	ldr	r2, [pc, #88]	@ (80058b8 <Meas_Init+0x24c>)
 8005860:	0119      	lsls	r1, r3, #4
 8005862:	481f      	ldr	r0, [pc, #124]	@ (80058e0 <Meas_Init+0x274>)
 8005864:	5088      	str	r0, [r1, r2]
 8005866:	4914      	ldr	r1, [pc, #80]	@ (80058b8 <Meas_Init+0x24c>)
 8005868:	011a      	lsls	r2, r3, #4
 800586a:	188a      	adds	r2, r1, r2
 800586c:	3204      	adds	r2, #4
 800586e:	491d      	ldr	r1, [pc, #116]	@ (80058e4 <Meas_Init+0x278>)
 8005870:	6011      	str	r1, [r2, #0]
 8005872:	4911      	ldr	r1, [pc, #68]	@ (80058b8 <Meas_Init+0x24c>)
 8005874:	011a      	lsls	r2, r3, #4
 8005876:	188a      	adds	r2, r1, r2
 8005878:	3208      	adds	r2, #8
 800587a:	491b      	ldr	r1, [pc, #108]	@ (80058e8 <Meas_Init+0x27c>)
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	4a0e      	ldr	r2, [pc, #56]	@ (80058b8 <Meas_Init+0x24c>)
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	18d3      	adds	r3, r2, r3
 8005884:	330c      	adds	r3, #12
 8005886:	1c22      	adds	r2, r4, #0
 8005888:	701a      	strb	r2, [r3, #0]
}
 800588a:	46c0      	nop			@ (mov r8, r8)
 800588c:	46bd      	mov	sp, r7
 800588e:	b016      	add	sp, #88	@ 0x58
 8005890:	bdb0      	pop	{r4, r5, r7, pc}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	20000b60 	.word	0x20000b60
 8005898:	20000b5c 	.word	0x20000b5c
 800589c:	08012a84 	.word	0x08012a84
 80058a0:	08012ab4 	.word	0x08012ab4
 80058a4:	08012ab8 	.word	0x08012ab8
 80058a8:	08012ae4 	.word	0x08012ae4
 80058ac:	08012ae8 	.word	0x08012ae8
 80058b0:	50000400 	.word	0x50000400
 80058b4:	08012b04 	.word	0x08012b04
 80058b8:	20000b1c 	.word	0x20000b1c
 80058bc:	080055d9 	.word	0x080055d9
 80058c0:	080055e9 	.word	0x080055e9
 80058c4:	20000b18 	.word	0x20000b18
 80058c8:	08005609 	.word	0x08005609
 80058cc:	08005619 	.word	0x08005619
 80058d0:	20000b19 	.word	0x20000b19
 80058d4:	08005631 	.word	0x08005631
 80058d8:	0800563b 	.word	0x0800563b
 80058dc:	20000b1a 	.word	0x20000b1a
 80058e0:	08005647 	.word	0x08005647
 80058e4:	0800565d 	.word	0x0800565d
 80058e8:	20000b1b 	.word	0x20000b1b

080058ec <StartMeasurements>:

void StartMeasurements(void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80058f0:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <StartMeasurements+0x48>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e015      	b.n	8005924 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80058f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005934 <StartMeasurements+0x48>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005938 <StartMeasurements+0x4c>)
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	18d3      	adds	r3, r2, r3
 8005902:	330c      	adds	r3, #12
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d006      	beq.n	8005918 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 800590a:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <StartMeasurements+0x48>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	001a      	movs	r2, r3
 8005910:	4b09      	ldr	r3, [pc, #36]	@ (8005938 <StartMeasurements+0x4c>)
 8005912:	0112      	lsls	r2, r2, #4
 8005914:	58d3      	ldr	r3, [r2, r3]
 8005916:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <StartMeasurements+0x48>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	b2da      	uxtb	r2, r3
 8005920:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <StartMeasurements+0x48>)
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	4b03      	ldr	r3, [pc, #12]	@ (8005934 <StartMeasurements+0x48>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d9e5      	bls.n	80058f8 <StartMeasurements+0xc>
    }
  }
}
 800592c:	46c0      	nop			@ (mov r8, r8)
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000b61 	.word	0x20000b61
 8005938:	20000b1c 	.word	0x20000b1c

0800593c <ResetMeasurements>:

void ResetMeasurements(void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005940:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <ResetMeasurements+0x34>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005946:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <ResetMeasurements+0x34>)
 8005948:	2200      	movs	r2, #0
 800594a:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 800594c:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <ResetMeasurements+0x34>)
 800594e:	2200      	movs	r2, #0
 8005950:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005952:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <ResetMeasurements+0x34>)
 8005954:	2200      	movs	r2, #0
 8005956:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <ResetMeasurements+0x34>)
 800595a:	2200      	movs	r2, #0
 800595c:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 800595e:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <ResetMeasurements+0x34>)
 8005960:	2200      	movs	r2, #0
 8005962:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005964:	4b02      	ldr	r3, [pc, #8]	@ (8005970 <ResetMeasurements+0x34>)
 8005966:	2200      	movs	r2, #0
 8005968:	73da      	strb	r2, [r3, #15]
}
 800596a:	46c0      	nop			@ (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20000b0c 	.word	0x20000b0c

08005974 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005978:	4b18      	ldr	r3, [pc, #96]	@ (80059dc <MeasurementsCompleted+0x68>)
 800597a:	2200      	movs	r2, #0
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e024      	b.n	80059ca <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005980:	4b16      	ldr	r3, [pc, #88]	@ (80059dc <MeasurementsCompleted+0x68>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	4a16      	ldr	r2, [pc, #88]	@ (80059e0 <MeasurementsCompleted+0x6c>)
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	18d3      	adds	r3, r2, r3
 800598a:	330c      	adds	r3, #12
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d015      	beq.n	80059be <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005992:	4b12      	ldr	r3, [pc, #72]	@ (80059dc <MeasurementsCompleted+0x68>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	4a12      	ldr	r2, [pc, #72]	@ (80059e0 <MeasurementsCompleted+0x6c>)
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	18d3      	adds	r3, r2, r3
 800599c:	3304      	adds	r3, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4798      	blx	r3
 80059a2:	1e03      	subs	r3, r0, #0
 80059a4:	d009      	beq.n	80059ba <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <MeasurementsCompleted+0x68>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	4a0d      	ldr	r2, [pc, #52]	@ (80059e0 <MeasurementsCompleted+0x6c>)
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	18d3      	adds	r3, r2, r3
 80059b0:	3308      	adds	r3, #8
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e001      	b.n	80059be <MeasurementsCompleted+0x4a>
      }else {
        return false;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e00a      	b.n	80059d4 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80059be:	4b07      	ldr	r3, [pc, #28]	@ (80059dc <MeasurementsCompleted+0x68>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	4b05      	ldr	r3, [pc, #20]	@ (80059dc <MeasurementsCompleted+0x68>)
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <MeasurementsCompleted+0x68>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d9d6      	bls.n	8005980 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 80059d2:	2301      	movs	r3, #1
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	20000b61 	.word	0x20000b61
 80059e0:	20000b1c 	.word	0x20000b1c

080059e4 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80059e4:	b5b0      	push	{r4, r5, r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80059ea:	4b30      	ldr	r3, [pc, #192]	@ (8005aac <Meas_Upkeep+0xc8>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d854      	bhi.n	8005a9c <Meas_Upkeep+0xb8>
 80059f2:	009a      	lsls	r2, r3, #2
 80059f4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab0 <Meas_Upkeep+0xcc>)
 80059f6:	18d3      	adds	r3, r2, r3
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 80059fc:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab4 <Meas_Upkeep+0xd0>)
 80059fe:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab8 <Meas_Upkeep+0xd4>)
 8005a00:	0019      	movs	r1, r3
 8005a02:	2003      	movs	r0, #3
 8005a04:	f002 fab2 	bl	8007f6c <CreateLine>
    break;
 8005a08:	e04d      	b.n	8005aa6 <Meas_Upkeep+0xc2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8005a0a:	f7ff ff97 	bl	800593c <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8005a0e:	4b27      	ldr	r3, [pc, #156]	@ (8005aac <Meas_Upkeep+0xc8>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	701a      	strb	r2, [r3, #0]
    break;
 8005a14:	e047      	b.n	8005aa6 <Meas_Upkeep+0xc2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005a16:	f7ff ff69 	bl	80058ec <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005a1a:	4b24      	ldr	r3, [pc, #144]	@ (8005aac <Meas_Upkeep+0xc8>)
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	701a      	strb	r2, [r3, #0]
   break;
 8005a20:	e041      	b.n	8005aa6 <Meas_Upkeep+0xc2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005a22:	f7ff ffa7 	bl	8005974 <MeasurementsCompleted>
 8005a26:	1e03      	subs	r3, r0, #0
 8005a28:	d03c      	beq.n	8005aa4 <Meas_Upkeep+0xc0>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005a2a:	4b20      	ldr	r3, [pc, #128]	@ (8005aac <Meas_Upkeep+0xc8>)
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005a30:	e038      	b.n	8005aa4 <Meas_Upkeep+0xc0>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8005a32:	4a22      	ldr	r2, [pc, #136]	@ (8005abc <Meas_Upkeep+0xd8>)
 8005a34:	4b20      	ldr	r3, [pc, #128]	@ (8005ab8 <Meas_Upkeep+0xd4>)
 8005a36:	0019      	movs	r1, r3
 8005a38:	2003      	movs	r0, #3
 8005a3a:	f002 fa97 	bl	8007f6c <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8005a3e:	4b20      	ldr	r3, [pc, #128]	@ (8005ac0 <Meas_Upkeep+0xdc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4a20      	ldr	r2, [pc, #128]	@ (8005ac4 <Meas_Upkeep+0xe0>)
 8005a44:	491c      	ldr	r1, [pc, #112]	@ (8005ab8 <Meas_Upkeep+0xd4>)
 8005a46:	2003      	movs	r0, #3
 8005a48:	f002 fa90 	bl	8007f6c <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac0 <Meas_Upkeep+0xdc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	1c18      	adds	r0, r3, #0
 8005a52:	f7fd fc85 	bl	8003360 <__aeabi_f2d>
 8005a56:	0004      	movs	r4, r0
 8005a58:	000d      	movs	r5, r1
 8005a5a:	4b19      	ldr	r3, [pc, #100]	@ (8005ac0 <Meas_Upkeep+0xdc>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	1c18      	adds	r0, r3, #0
 8005a60:	f7fd fc7e 	bl	8003360 <__aeabi_f2d>
 8005a64:	0002      	movs	r2, r0
 8005a66:	000b      	movs	r3, r1
 8005a68:	4817      	ldr	r0, [pc, #92]	@ (8005ac8 <Meas_Upkeep+0xe4>)
 8005a6a:	4913      	ldr	r1, [pc, #76]	@ (8005ab8 <Meas_Upkeep+0xd4>)
 8005a6c:	9202      	str	r2, [sp, #8]
 8005a6e:	9303      	str	r3, [sp, #12]
 8005a70:	9400      	str	r4, [sp, #0]
 8005a72:	9501      	str	r5, [sp, #4]
 8005a74:	0002      	movs	r2, r0
 8005a76:	2003      	movs	r0, #3
 8005a78:	f002 fa78 	bl	8007f6c <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8005a7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <Meas_Upkeep+0xdc>)
 8005a7e:	6858      	ldr	r0, [r3, #4]
 8005a80:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac0 <Meas_Upkeep+0xdc>)
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac0 <Meas_Upkeep+0xdc>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	f7fd fe10 	bl	80036b0 <setMeasurement>
    checkCharges();
 8005a90:	f7fd fd6a 	bl	8003568 <checkCharges>
    MeasState = MEAS_STATE_INIT;
 8005a94:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <Meas_Upkeep+0xc8>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
    break;
 8005a9a:	e004      	b.n	8005aa6 <Meas_Upkeep+0xc2>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	@ (8005aac <Meas_Upkeep+0xc8>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
    break;
 8005aa2:	e000      	b.n	8005aa6 <Meas_Upkeep+0xc2>
    break;
 8005aa4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005aa6:	46c0      	nop			@ (mov r8, r8)
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8005aac:	20000b60 	.word	0x20000b60
 8005ab0:	08013134 	.word	0x08013134
 8005ab4:	08012b1c 	.word	0x08012b1c
 8005ab8:	08012ae4 	.word	0x08012ae4
 8005abc:	08012b3c 	.word	0x08012b3c
 8005ac0:	20000b0c 	.word	0x20000b0c
 8005ac4:	08012b50 	.word	0x08012b50
 8005ac8:	08012b68 	.word	0x08012b68

08005acc <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8005ad6:	240f      	movs	r4, #15
 8005ad8:	193b      	adds	r3, r7, r4
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8005ade:	4b20      	ldr	r3, [pc, #128]	@ (8005b60 <Meas_SetEnabledSensors+0x94>)
 8005ae0:	1d3a      	adds	r2, r7, #4
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8005ae6:	193b      	adds	r3, r7, r4
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	193a      	adds	r2, r7, r4
 8005aec:	1c59      	adds	r1, r3, #1
 8005aee:	7011      	strb	r1, [r2, #0]
 8005af0:	0018      	movs	r0, r3
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	7819      	ldrb	r1, [r3, #0]
 8005af6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b64 <Meas_SetEnabledSensors+0x98>)
 8005af8:	0103      	lsls	r3, r0, #4
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	330c      	adds	r3, #12
 8005afe:	1c0a      	adds	r2, r1, #0
 8005b00:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8005b02:	193b      	adds	r3, r7, r4
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	193a      	adds	r2, r7, r4
 8005b08:	1c59      	adds	r1, r3, #1
 8005b0a:	7011      	strb	r1, [r2, #0]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	7859      	ldrb	r1, [r3, #1]
 8005b12:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <Meas_SetEnabledSensors+0x98>)
 8005b14:	0103      	lsls	r3, r0, #4
 8005b16:	18d3      	adds	r3, r2, r3
 8005b18:	330c      	adds	r3, #12
 8005b1a:	1c0a      	adds	r2, r1, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8005b1e:	193b      	adds	r3, r7, r4
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	193a      	adds	r2, r7, r4
 8005b24:	1c59      	adds	r1, r3, #1
 8005b26:	7011      	strb	r1, [r2, #0]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	7899      	ldrb	r1, [r3, #2]
 8005b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005b64 <Meas_SetEnabledSensors+0x98>)
 8005b30:	0103      	lsls	r3, r0, #4
 8005b32:	18d3      	adds	r3, r2, r3
 8005b34:	330c      	adds	r3, #12
 8005b36:	1c0a      	adds	r2, r1, #0
 8005b38:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8005b3a:	193b      	adds	r3, r7, r4
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	193a      	adds	r2, r7, r4
 8005b40:	1c59      	adds	r1, r3, #1
 8005b42:	7011      	strb	r1, [r2, #0]
 8005b44:	0018      	movs	r0, r3
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	78d9      	ldrb	r1, [r3, #3]
 8005b4a:	4a06      	ldr	r2, [pc, #24]	@ (8005b64 <Meas_SetEnabledSensors+0x98>)
 8005b4c:	0103      	lsls	r3, r0, #4
 8005b4e:	18d3      	adds	r3, r2, r3
 8005b50:	330c      	adds	r3, #12
 8005b52:	1c0a      	adds	r2, r1, #0
 8005b54:	701a      	strb	r2, [r3, #0]
}
 8005b56:	46c0      	nop			@ (mov r8, r8)
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b005      	add	sp, #20
 8005b5c:	bd90      	pop	{r4, r7, pc}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	20000b5c 	.word	0x20000b5c
 8005b64:	20000b1c 	.word	0x20000b1c

08005b68 <MIC_Init>:
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;
static uint8_t MIC_InitRetries = 0;
static uint8_t MIC_MaxRetries = 3;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) {
 8005b68:	b5b0      	push	{r4, r5, r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  I2SHandle = i2SHandle;
 8005b70:	4b42      	ldr	r3, [pc, #264]	@ (8005c7c <MIC_Init+0x114>)
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8005b76:	4b41      	ldr	r3, [pc, #260]	@ (8005c7c <MIC_Init+0x114>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <MIC_Init+0x24>
     Error("Microphone is not initialised.");
 8005b7e:	4a40      	ldr	r2, [pc, #256]	@ (8005c80 <MIC_Init+0x118>)
 8005b80:	4b40      	ldr	r3, [pc, #256]	@ (8005c84 <MIC_Init+0x11c>)
 8005b82:	0019      	movs	r1, r3
 8005b84:	2001      	movs	r0, #1
 8005b86:	f002 f9f1 	bl	8007f6c <CreateLine>
     return;
 8005b8a:	e073      	b.n	8005c74 <MIC_Init+0x10c>
  }
  // Start data receiving to check if MIC is connected.
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples);
 8005b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c7c <MIC_Init+0x114>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	4b3d      	ldr	r3, [pc, #244]	@ (8005c88 <MIC_Init+0x120>)
 8005b92:	881a      	ldrh	r2, [r3, #0]
 8005b94:	250f      	movs	r5, #15
 8005b96:	197c      	adds	r4, r7, r5
 8005b98:	4b3c      	ldr	r3, [pc, #240]	@ (8005c8c <MIC_Init+0x124>)
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	f006 f8da 	bl	800bd54 <HAL_I2S_Receive_DMA>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_ERROR) {
 8005ba4:	197b      	adds	r3, r7, r5
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d111      	bne.n	8005bd0 <MIC_Init+0x68>
    Error("Microphone NOT initialised.");
 8005bac:	4a38      	ldr	r2, [pc, #224]	@ (8005c90 <MIC_Init+0x128>)
 8005bae:	4b35      	ldr	r3, [pc, #212]	@ (8005c84 <MIC_Init+0x11c>)
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	f002 f9da 	bl	8007f6c <CreateLine>
    // Setting LED to RED to show mic is not working.
    TIM3 -> CCR1 = 2000;
 8005bb8:	4b36      	ldr	r3, [pc, #216]	@ (8005c94 <MIC_Init+0x12c>)
 8005bba:	22fa      	movs	r2, #250	@ 0xfa
 8005bbc:	00d2      	lsls	r2, r2, #3
 8005bbe:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 4000;
 8005bc0:	4b34      	ldr	r3, [pc, #208]	@ (8005c94 <MIC_Init+0x12c>)
 8005bc2:	22fa      	movs	r2, #250	@ 0xfa
 8005bc4:	0112      	lsls	r2, r2, #4
 8005bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8005bc8:	4b32      	ldr	r3, [pc, #200]	@ (8005c94 <MIC_Init+0x12c>)
 8005bca:	22fa      	movs	r2, #250	@ 0xfa
 8005bcc:	0112      	lsls	r2, r2, #4
 8005bce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if(status == HAL_BUSY) {
 8005bd0:	230f      	movs	r3, #15
 8005bd2:	18fb      	adds	r3, r7, r3
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d135      	bne.n	8005c46 <MIC_Init+0xde>
    Debug("Microphone is BUSY, retrying.");
 8005bda:	4a2f      	ldr	r2, [pc, #188]	@ (8005c98 <MIC_Init+0x130>)
 8005bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8005c9c <MIC_Init+0x134>)
 8005bde:	0019      	movs	r1, r3
 8005be0:	2003      	movs	r0, #3
 8005be2:	f002 f9c3 	bl	8007f6c <CreateLine>
    // Setting LED to YELLOW to show mic is busy.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 2000;
 8005be6:	4b2b      	ldr	r3, [pc, #172]	@ (8005c94 <MIC_Init+0x12c>)
 8005be8:	22fa      	movs	r2, #250	@ 0xfa
 8005bea:	00d2      	lsls	r2, r2, #3
 8005bec:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 8005bee:	4b29      	ldr	r3, [pc, #164]	@ (8005c94 <MIC_Init+0x12c>)
 8005bf0:	22fa      	movs	r2, #250	@ 0xfa
 8005bf2:	00d2      	lsls	r2, r2, #3
 8005bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8005bf6:	4b27      	ldr	r3, [pc, #156]	@ (8005c94 <MIC_Init+0x12c>)
 8005bf8:	22fa      	movs	r2, #250	@ 0xfa
 8005bfa:	0112      	lsls	r2, r2, #4
 8005bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(MIC_InitRetries <= MIC_MaxRetries) {
 8005bfe:	4b28      	ldr	r3, [pc, #160]	@ (8005ca0 <MIC_Init+0x138>)
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	4b28      	ldr	r3, [pc, #160]	@ (8005ca4 <MIC_Init+0x13c>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d80a      	bhi.n	8005c20 <MIC_Init+0xb8>
      MIC_InitRetries += 1;
 8005c0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ca0 <MIC_Init+0x138>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <MIC_Init+0x138>)
 8005c14:	701a      	strb	r2, [r3, #0]
      // Calling function again.
      MIC_Init(i2SHandle);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f7ff ffa5 	bl	8005b68 <MIC_Init>
 8005c1e:	e024      	b.n	8005c6a <MIC_Init+0x102>
    }else {
      Debug("Microphone is BUSY and is NOT working after retrying.");
 8005c20:	4a21      	ldr	r2, [pc, #132]	@ (8005ca8 <MIC_Init+0x140>)
 8005c22:	4b1e      	ldr	r3, [pc, #120]	@ (8005c9c <MIC_Init+0x134>)
 8005c24:	0019      	movs	r1, r3
 8005c26:	2003      	movs	r0, #3
 8005c28:	f002 f9a0 	bl	8007f6c <CreateLine>
      // Setting LED to RED to show mic is not working.
      // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
      TIM3 -> CCR1 = 2000;
 8005c2c:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <MIC_Init+0x12c>)
 8005c2e:	22fa      	movs	r2, #250	@ 0xfa
 8005c30:	00d2      	lsls	r2, r2, #3
 8005c32:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8005c34:	4b17      	ldr	r3, [pc, #92]	@ (8005c94 <MIC_Init+0x12c>)
 8005c36:	22fa      	movs	r2, #250	@ 0xfa
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8005c3c:	4b15      	ldr	r3, [pc, #84]	@ (8005c94 <MIC_Init+0x12c>)
 8005c3e:	22fa      	movs	r2, #250	@ 0xfa
 8005c40:	0112      	lsls	r2, r2, #4
 8005c42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c44:	e011      	b.n	8005c6a <MIC_Init+0x102>
    }
  }else {
    Debug("Microphone initialised.");
 8005c46:	4a19      	ldr	r2, [pc, #100]	@ (8005cac <MIC_Init+0x144>)
 8005c48:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <MIC_Init+0x134>)
 8005c4a:	0019      	movs	r1, r3
 8005c4c:	2003      	movs	r0, #3
 8005c4e:	f002 f98d 	bl	8007f6c <CreateLine>
    // Setting LED to GREEN to show mic is working.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 4000;
 8005c52:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <MIC_Init+0x12c>)
 8005c54:	22fa      	movs	r2, #250	@ 0xfa
 8005c56:	0112      	lsls	r2, r2, #4
 8005c58:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c94 <MIC_Init+0x12c>)
 8005c5c:	22fa      	movs	r2, #250	@ 0xfa
 8005c5e:	00d2      	lsls	r2, r2, #3
 8005c60:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8005c62:	4b0c      	ldr	r3, [pc, #48]	@ (8005c94 <MIC_Init+0x12c>)
 8005c64:	22fa      	movs	r2, #250	@ 0xfa
 8005c66:	0112      	lsls	r2, r2, #4
 8005c68:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  // Stop DMA
  HAL_I2S_DMAStop(I2SHandle);
 8005c6a:	4b04      	ldr	r3, [pc, #16]	@ (8005c7c <MIC_Init+0x114>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f006 f932 	bl	800bed8 <HAL_I2S_DMAStop>
}
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b004      	add	sp, #16
 8005c78:	bdb0      	pop	{r4, r5, r7, pc}
 8005c7a:	46c0      	nop			@ (mov r8, r8)
 8005c7c:	20000b64 	.word	0x20000b64
 8005c80:	08012b9c 	.word	0x08012b9c
 8005c84:	08012bbc 	.word	0x08012bbc
 8005c88:	20000100 	.word	0x20000100
 8005c8c:	20000b68 	.word	0x20000b68
 8005c90:	08012bc0 	.word	0x08012bc0
 8005c94:	40000400 	.word	0x40000400
 8005c98:	08012bdc 	.word	0x08012bdc
 8005c9c:	08012bfc 	.word	0x08012bfc
 8005ca0:	20000f72 	.word	0x20000f72
 8005ca4:	20000102 	.word	0x20000102
 8005ca8:	08012c00 	.word	0x08012c00
 8005cac:	08012c38 	.word	0x08012c38

08005cb0 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <UpdateSampleRate+0x3c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d00e      	beq.n	8005ce2 <UpdateSampleRate+0x32>
    return;
  }
  HAL_I2S_DeInit(I2SHandle);
 8005cc4:	4b09      	ldr	r3, [pc, #36]	@ (8005cec <UpdateSampleRate+0x3c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f006 f817 	bl	800bcfc <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8005cce:	4b07      	ldr	r3, [pc, #28]	@ (8005cec <UpdateSampleRate+0x3c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8005cd6:	4b05      	ldr	r3, [pc, #20]	@ (8005cec <UpdateSampleRate+0x3c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f005 ff1c 	bl	800bb18 <HAL_I2S_Init>
 8005ce0:	e000      	b.n	8005ce4 <UpdateSampleRate+0x34>
    return;
 8005ce2:	46c0      	nop			@ (mov r8, r8)
}
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b002      	add	sp, #8
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	20000b64 	.word	0x20000b64

08005cf0 <ConvertAudio>:

static uint32_t ConvertAudio(uint16_t* data) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t audioValue = data[1] | (data[0] << 16);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	001a      	movs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  audioValue = audioValue >> 7;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	09db      	lsrs	r3, r3, #7
 8005d0e:	60fb      	str	r3, [r7, #12]
  return audioValue;
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	0018      	movs	r0, r3
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b004      	add	sp, #16
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	000a      	movs	r2, r1
 8005d26:	1cbb      	adds	r3, r7, #2
 8005d28:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005da0 <MIC_Start+0x84>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8005d32:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <MIC_Start+0x88>)
 8005d34:	4b1c      	ldr	r3, [pc, #112]	@ (8005da8 <MIC_Start+0x8c>)
 8005d36:	0019      	movs	r1, r3
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f002 f917 	bl	8007f6c <CreateLine>
    return;
 8005d3e:	e02c      	b.n	8005d9a <MIC_Start+0x7e>
  }
  Debug("In mic start");
 8005d40:	4a1a      	ldr	r2, [pc, #104]	@ (8005dac <MIC_Start+0x90>)
 8005d42:	4b1b      	ldr	r3, [pc, #108]	@ (8005db0 <MIC_Start+0x94>)
 8005d44:	0019      	movs	r1, r3
 8005d46:	2003      	movs	r0, #3
 8005d48:	f002 f910 	bl	8007f6c <CreateLine>
  UpdateSampleRate(sampleRate);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f7ff ffae 	bl	8005cb0 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8005d54:	4b17      	ldr	r3, [pc, #92]	@ (8005db4 <MIC_Start+0x98>)
 8005d56:	1cba      	adds	r2, r7, #2
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 8005d5c:	f002 f992 	bl	8008084 <GetCurrentHalTicks>
 8005d60:	0002      	movs	r2, r0
 8005d62:	4b15      	ldr	r3, [pc, #84]	@ (8005db8 <MIC_Start+0x9c>)
 8005d64:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 8005d66:	4b14      	ldr	r3, [pc, #80]	@ (8005db8 <MIC_Start+0x9c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3314      	adds	r3, #20
 8005d6c:	001a      	movs	r2, r3
 8005d6e:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <MIC_Start+0xa0>)
 8005d70:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8005d72:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <MIC_Start+0xa4>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8005d78:	4b12      	ldr	r3, [pc, #72]	@ (8005dc4 <MIC_Start+0xa8>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples >> 1);
 8005d7e:	4b08      	ldr	r3, [pc, #32]	@ (8005da0 <MIC_Start+0x84>)
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	4b0c      	ldr	r3, [pc, #48]	@ (8005db4 <MIC_Start+0x98>)
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	230f      	movs	r3, #15
 8005d8c:	18fc      	adds	r4, r7, r3
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc8 <MIC_Start+0xac>)
 8005d90:	0019      	movs	r1, r3
 8005d92:	f005 ffdf 	bl	800bd54 <HAL_I2S_Receive_DMA>
 8005d96:	0003      	movs	r3, r0
 8005d98:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

//  Info("Status %d", status);

}
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b005      	add	sp, #20
 8005d9e:	bd90      	pop	{r4, r7, pc}
 8005da0:	20000b64 	.word	0x20000b64
 8005da4:	08012b9c 	.word	0x08012b9c
 8005da8:	08012bbc 	.word	0x08012bbc
 8005dac:	08012c50 	.word	0x08012c50
 8005db0:	08012bfc 	.word	0x08012bfc
 8005db4:	20000100 	.word	0x20000100
 8005db8:	20000f68 	.word	0x20000f68
 8005dbc:	20000f6c 	.word	0x20000f6c
 8005dc0:	20000f70 	.word	0x20000f70
 8005dc4:	20000f71 	.word	0x20000f71
 8005dc8:	20000b68 	.word	0x20000b68

08005dcc <MIC_Print>:
//static void MIC_ProcessFFT() {
//  CalculateFFT();
//}


void MIC_Print(void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
  Info("New samples");
 8005dd2:	4a13      	ldr	r2, [pc, #76]	@ (8005e20 <MIC_Print+0x54>)
 8005dd4:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <MIC_Print+0x58>)
 8005dd6:	0019      	movs	r1, r3
 8005dd8:	2002      	movs	r0, #2
 8005dda:	f002 f8c7 	bl	8007f6c <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	e011      	b.n	8005e08 <MIC_Print+0x3c>
    uint32_t sample = ConvertAudio(&AudioRxBuffer[i]);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	005a      	lsls	r2, r3, #1
 8005de8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <MIC_Print+0x5c>)
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	0018      	movs	r0, r3
 8005dee:	f7ff ff7f 	bl	8005cf0 <ConvertAudio>
 8005df2:	0003      	movs	r3, r0
 8005df4:	603b      	str	r3, [r7, #0]
    Info("0x%08x", sample);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	4a0c      	ldr	r2, [pc, #48]	@ (8005e2c <MIC_Print+0x60>)
 8005dfa:	490a      	ldr	r1, [pc, #40]	@ (8005e24 <MIC_Print+0x58>)
 8005dfc:	2002      	movs	r0, #2
 8005dfe:	f002 f8b5 	bl	8007f6c <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3302      	adds	r3, #2
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <MIC_Print+0x64>)
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d3e7      	bcc.n	8005de4 <MIC_Print+0x18>
  }
}
 8005e14:	46c0      	nop			@ (mov r8, r8)
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b002      	add	sp, #8
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	08012c60 	.word	0x08012c60
 8005e24:	08012c6c 	.word	0x08012c6c
 8005e28:	20000b68 	.word	0x20000b68
 8005e2c:	08012c70 	.word	0x08012c70
 8005e30:	20000100 	.word	0x20000100

08005e34 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  if(DataReady) {
 8005e38:	4b0a      	ldr	r3, [pc, #40]	@ (8005e64 <MIC_MeasurementDone+0x30>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <MIC_MeasurementDone+0x28>
    MIC_Print();
 8005e42:	f7ff ffc3 	bl	8005dcc <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples >> 1);
 8005e46:	4b08      	ldr	r3, [pc, #32]	@ (8005e68 <MIC_MeasurementDone+0x34>)
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	4a07      	ldr	r2, [pc, #28]	@ (8005e6c <MIC_MeasurementDone+0x38>)
 8005e50:	4907      	ldr	r1, [pc, #28]	@ (8005e70 <MIC_MeasurementDone+0x3c>)
 8005e52:	2003      	movs	r0, #3
 8005e54:	f002 f88a 	bl	8007f6c <CreateLine>
    return true;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <MIC_MeasurementDone+0x2a>
  }
  return false;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	0018      	movs	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000f71 	.word	0x20000f71
 8005e68:	20000100 	.word	0x20000100
 8005e6c:	08012c78 	.word	0x08012c78
 8005e70:	08012bfc 	.word	0x08012bfc

08005e74 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8005e7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <HAL_I2S_RxCpltCallback+0x4c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d118      	bne.n	8005eb8 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8005e86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <HAL_I2S_RxCpltCallback+0x50>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8005e90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <HAL_I2S_RxCpltCallback+0x4c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f006 f81f 	bl	800bed8 <HAL_I2S_DMAStop>
    DataReady = true;
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec8 <HAL_I2S_RxCpltCallback+0x54>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e00b      	b.n	8005eba <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <HAL_I2S_RxCpltCallback+0x58>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f002 f80a 	bl	8007ec0 <TimestampIsReached>
 8005eac:	1e03      	subs	r3, r0, #0
 8005eae:	d004      	beq.n	8005eba <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8005eb0:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <HAL_I2S_RxCpltCallback+0x50>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e000      	b.n	8005eba <HAL_I2S_RxCpltCallback+0x46>
    return;
 8005eb8:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b002      	add	sp, #8
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000b64 	.word	0x20000b64
 8005ec4:	20000f70 	.word	0x20000f70
 8005ec8:	20000f71 	.word	0x20000f71
 8005ecc:	20000f6c 	.word	0x20000f6c

08005ed0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d113      	bne.n	8005f16 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	22fe      	movs	r2, #254	@ 0xfe
 8005ef2:	0592      	lsls	r2, r2, #22
 8005ef4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f64 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8005efa:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8005f00:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8005f06:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a19      	ldr	r2, [pc, #100]	@ (8005f70 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8005f0c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a18      	ldr	r2, [pc, #96]	@ (8005f74 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8005f12:	61da      	str	r2, [r3, #28]
 8005f14:	e011      	b.n	8005f3a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a17      	ldr	r2, [pc, #92]	@ (8005f78 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8005f1a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a17      	ldr	r2, [pc, #92]	@ (8005f7c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8005f20:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a16      	ldr	r2, [pc, #88]	@ (8005f80 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8005f26:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a16      	ldr	r2, [pc, #88]	@ (8005f84 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8005f2c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a15      	ldr	r2, [pc, #84]	@ (8005f88 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8005f32:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8005f38:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a14      	ldr	r2, [pc, #80]	@ (8005f90 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8005f3e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a14      	ldr	r2, [pc, #80]	@ (8005f94 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8005f44:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8005f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a12      	ldr	r2, [pc, #72]	@ (8005f98 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8005f50:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 f831 	bl	8005fbc <GasIndexAlgorithm_reset>
}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b004      	add	sp, #16
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	00002710 	.word	0x00002710
 8005f68:	44340000 	.word	0x44340000
 8005f6c:	46859800 	.word	0x46859800
 8005f70:	46a05000 	.word	0x46a05000
 8005f74:	41f00000 	.word	0x41f00000
 8005f78:	42c80000 	.word	0x42c80000
 8005f7c:	00004e20 	.word	0x00004e20
 8005f80:	43340000 	.word	0x43340000
 8005f84:	4528c000 	.word	0x4528c000
 8005f88:	45a32000 	.word	0x45a32000
 8005f8c:	43aa0000 	.word	0x43aa0000
 8005f90:	43660000 	.word	0x43660000
 8005f94:	41400000 	.word	0x41400000
 8005f98:	42480000 	.word	0x42480000

08005f9c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8005fa6:	22fe      	movs	r2, #254	@ 0xfe
 8005fa8:	0592      	lsls	r2, r2, #22
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7ff ff8e 	bl	8005ed0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8005fb4:	46c0      	nop			@ (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 f805 	bl	8005fe8 <GasIndexAlgorithm__init_instances>
}
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b002      	add	sp, #8
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 f8e8 	bl	80061c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 f9a6 	bl	800634c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006000:	1c04      	adds	r4, r0, #0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 f9ab 	bl	8006360 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800600a:	1c02      	adds	r2, r0, #0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	1c21      	adds	r1, r4, #0
 8006010:	0018      	movs	r0, r3
 8006012:	f000 fc3b 	bl	800688c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d107      	bne.n	800602e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800601e:	23fe      	movs	r3, #254	@ 0xfe
 8006020:	059b      	lsls	r3, r3, #22
 8006022:	4a0a      	ldr	r2, [pc, #40]	@ (800604c <GasIndexAlgorithm__init_instances+0x64>)
 8006024:	490a      	ldr	r1, [pc, #40]	@ (8006050 <GasIndexAlgorithm__init_instances+0x68>)
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc86 	bl	8006938 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800602c:	e005      	b.n	800603a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800602e:	4b09      	ldr	r3, [pc, #36]	@ (8006054 <GasIndexAlgorithm__init_instances+0x6c>)
 8006030:	4a09      	ldr	r2, [pc, #36]	@ (8006058 <GasIndexAlgorithm__init_instances+0x70>)
 8006032:	490a      	ldr	r1, [pc, #40]	@ (800605c <GasIndexAlgorithm__init_instances+0x74>)
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fc7f 	bl	8006938 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f000 fd35 	bl	8006aac <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	46bd      	mov	sp, r7
 8006046:	b003      	add	sp, #12
 8006048:	bd90      	pop	{r4, r7, pc}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	bc257a78 	.word	0xbc257a78
 8006050:	44198000 	.word	0x44198000
 8006054:	42c80000 	.word	0x42c80000
 8006058:	bbd4fdf4 	.word	0xbbd4fdf4
 800605c:	43550000 	.word	0x43550000

08006060 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006070:	4952      	ldr	r1, [pc, #328]	@ (80061bc <GasIndexAlgorithm_process+0x15c>)
 8006072:	1c18      	adds	r0, r3, #0
 8006074:	f7fa fa34 	bl	80004e0 <__aeabi_fcmple>
 8006078:	1e03      	subs	r3, r0, #0
 800607a:	d00c      	beq.n	8006096 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	1c19      	adds	r1, r3, #0
 8006086:	1c10      	adds	r0, r2, #0
 8006088:	f7fa fb98 	bl	80007bc <__aeabi_fadd>
 800608c:	1c03      	adds	r3, r0, #0
 800608e:	1c1a      	adds	r2, r3, #0
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
 8006094:	e080      	b.n	8006198 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	dd25      	ble.n	80060e8 <GasIndexAlgorithm_process+0x88>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4a48      	ldr	r2, [pc, #288]	@ (80061c0 <GasIndexAlgorithm_process+0x160>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	dc21      	bgt.n	80060e8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	dc04      	bgt.n	80060b8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	e00d      	b.n	80060d4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a41      	ldr	r2, [pc, #260]	@ (80061c4 <GasIndexAlgorithm_process+0x164>)
 80060be:	4694      	mov	ip, r2
 80060c0:	4463      	add	r3, ip
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	dd05      	ble.n	80060d4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4a3d      	ldr	r2, [pc, #244]	@ (80061c4 <GasIndexAlgorithm_process+0x164>)
 80060ce:	4694      	mov	ip, r2
 80060d0:	4463      	add	r3, ip
 80060d2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	0018      	movs	r0, r3
 80060de:	f7fb f9f5 	bl	80014cc <__aeabi_i2f>
 80060e2:	1c02      	adds	r2, r0, #0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 f945 	bl	8006382 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80060f8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80060fa:	d014      	beq.n	8006126 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1c11      	adds	r1, r2, #0
 8006104:	0018      	movs	r0, r3
 8006106:	f000 fbd1 	bl	80068ac <GasIndexAlgorithm__mox_model__process>
 800610a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1c11      	adds	r1, r2, #0
 8006118:	0018      	movs	r0, r3
 800611a:	f000 fc25 	bl	8006968 <GasIndexAlgorithm__sigmoid_scaled__process>
 800611e:	1c02      	adds	r2, r0, #0
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	639a      	str	r2, [r3, #56]	@ 0x38
 8006124:	e003      	b.n	800612e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1c11      	adds	r1, r2, #0
 8006136:	0018      	movs	r0, r3
 8006138:	f000 fcec 	bl	8006b14 <GasIndexAlgorithm__adaptive_lowpass__process>
 800613c:	1c02      	adds	r2, r0, #0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006146:	21fc      	movs	r1, #252	@ 0xfc
 8006148:	0589      	lsls	r1, r1, #22
 800614a:	1c18      	adds	r0, r3, #0
 800614c:	f7fa f9be 	bl	80004cc <__aeabi_fcmplt>
 8006150:	1e03      	subs	r3, r0, #0
 8006152:	d003      	beq.n	800615c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	22fc      	movs	r2, #252	@ 0xfc
 8006158:	0592      	lsls	r2, r2, #22
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006160:	2100      	movs	r1, #0
 8006162:	1c18      	adds	r0, r3, #0
 8006164:	f7fa f9c6 	bl	80004f4 <__aeabi_fcmpgt>
 8006168:	1e03      	subs	r3, r0, #0
 800616a:	d015      	beq.n	8006198 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	1c11      	adds	r1, r2, #0
 8006174:	0018      	movs	r0, r3
 8006176:	f000 fa4f 	bl	8006618 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	0018      	movs	r0, r3
 800617e:	f000 f8e5 	bl	800634c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006182:	1c04      	adds	r4, r0, #0
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0018      	movs	r0, r3
 8006188:	f000 f8ea 	bl	8006360 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800618c:	1c02      	adds	r2, r0, #0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1c21      	adds	r1, r4, #0
 8006192:	0018      	movs	r0, r3
 8006194:	f000 fb7a 	bl	800688c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	21fc      	movs	r1, #252	@ 0xfc
 800619e:	0589      	lsls	r1, r1, #22
 80061a0:	1c18      	adds	r0, r3, #0
 80061a2:	f7fa fb0b 	bl	80007bc <__aeabi_fadd>
 80061a6:	1c03      	adds	r3, r0, #0
 80061a8:	1c18      	adds	r0, r3, #0
 80061aa:	f7fb f96f 	bl	800148c <__aeabi_f2iz>
 80061ae:	0002      	movs	r2, r0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
    return;
 80061b4:	46c0      	nop			@ (mov r8, r8)
}
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b005      	add	sp, #20
 80061ba:	bd90      	pop	{r4, r7, pc}
 80061bc:	42340000 	.word	0x42340000
 80061c0:	0000fde7 	.word	0x0000fde7
 80061c4:	00007fff 	.word	0x00007fff

080061c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	223c      	movs	r2, #60	@ 0x3c
 80061d4:	2100      	movs	r1, #0
 80061d6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4952      	ldr	r1, [pc, #328]	@ (800633c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80061f2:	1c18      	adds	r0, r3, #0
 80061f4:	f7fa fc6c 	bl	8000ad0 <__aeabi_fdiv>
 80061f8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80061fa:	2188      	movs	r1, #136	@ 0x88
 80061fc:	05c9      	lsls	r1, r1, #23
 80061fe:	1c18      	adds	r0, r3, #0
 8006200:	f7fa fe4c 	bl	8000e9c <__aeabi_fmul>
 8006204:	1c03      	adds	r3, r0, #0
 8006206:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	494a      	ldr	r1, [pc, #296]	@ (800633c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006212:	1c18      	adds	r0, r3, #0
 8006214:	f7fa fc5c 	bl	8000ad0 <__aeabi_fdiv>
 8006218:	1c03      	adds	r3, r0, #0
 800621a:	1c19      	adds	r1, r3, #0
 800621c:	1c20      	adds	r0, r4, #0
 800621e:	f7fa facd 	bl	80007bc <__aeabi_fadd>
 8006222:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006224:	1c19      	adds	r1, r3, #0
 8006226:	1c28      	adds	r0, r5, #0
 8006228:	f7fa fc52 	bl	8000ad0 <__aeabi_fdiv>
 800622c:	1c03      	adds	r3, r0, #0
 800622e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4940      	ldr	r1, [pc, #256]	@ (800633c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800623a:	1c18      	adds	r0, r3, #0
 800623c:	f7fa fc48 	bl	8000ad0 <__aeabi_fdiv>
 8006240:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006242:	2185      	movs	r1, #133	@ 0x85
 8006244:	05c9      	lsls	r1, r1, #23
 8006246:	1c18      	adds	r0, r3, #0
 8006248:	f7fa fe28 	bl	8000e9c <__aeabi_fmul>
 800624c:	1c03      	adds	r3, r0, #0
 800624e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4938      	ldr	r1, [pc, #224]	@ (800633c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800625a:	1c18      	adds	r0, r3, #0
 800625c:	f7fa fc38 	bl	8000ad0 <__aeabi_fdiv>
 8006260:	1c03      	adds	r3, r0, #0
 8006262:	1c19      	adds	r1, r3, #0
 8006264:	1c20      	adds	r0, r4, #0
 8006266:	f7fa faa9 	bl	80007bc <__aeabi_fadd>
 800626a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800626c:	1c19      	adds	r1, r3, #0
 800626e:	1c28      	adds	r0, r5, #0
 8006270:	f7fa fc2e 	bl	8000ad0 <__aeabi_fdiv>
 8006274:	1c03      	adds	r3, r0, #0
 8006276:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d118      	bne.n	80062b6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006288:	2188      	movs	r1, #136	@ 0x88
 800628a:	05c9      	lsls	r1, r1, #23
 800628c:	1c18      	adds	r0, r3, #0
 800628e:	f7fa fe05 	bl	8000e9c <__aeabi_fmul>
 8006292:	1c03      	adds	r3, r0, #0
 8006294:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800629a:	4929      	ldr	r1, [pc, #164]	@ (8006340 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800629c:	1c18      	adds	r0, r3, #0
 800629e:	f7fa fa8d 	bl	80007bc <__aeabi_fadd>
 80062a2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80062a4:	1c19      	adds	r1, r3, #0
 80062a6:	1c20      	adds	r0, r4, #0
 80062a8:	f7fa fc12 	bl	8000ad0 <__aeabi_fdiv>
 80062ac:	1c03      	adds	r3, r0, #0
 80062ae:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80062b4:	e017      	b.n	80062e6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80062ba:	2188      	movs	r1, #136	@ 0x88
 80062bc:	05c9      	lsls	r1, r1, #23
 80062be:	1c18      	adds	r0, r3, #0
 80062c0:	f7fa fdec 	bl	8000e9c <__aeabi_fmul>
 80062c4:	1c03      	adds	r3, r0, #0
 80062c6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80062cc:	491d      	ldr	r1, [pc, #116]	@ (8006344 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80062ce:	1c18      	adds	r0, r3, #0
 80062d0:	f7fa fa74 	bl	80007bc <__aeabi_fadd>
 80062d4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80062d6:	1c19      	adds	r1, r3, #0
 80062d8:	1c20      	adds	r0, r4, #0
 80062da:	f7fa fbf9 	bl	8000ad0 <__aeabi_fdiv>
 80062de:	1c03      	adds	r3, r0, #0
 80062e0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80062ea:	2185      	movs	r1, #133	@ 0x85
 80062ec:	05c9      	lsls	r1, r1, #23
 80062ee:	1c18      	adds	r0, r3, #0
 80062f0:	f7fa fdd4 	bl	8000e9c <__aeabi_fmul>
 80062f4:	1c03      	adds	r3, r0, #0
 80062f6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4912      	ldr	r1, [pc, #72]	@ (8006348 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80062fe:	1c18      	adds	r0, r3, #0
 8006300:	f7fa fa5c 	bl	80007bc <__aeabi_fadd>
 8006304:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006306:	1c19      	adds	r1, r3, #0
 8006308:	1c20      	adds	r0, r4, #0
 800630a:	f7fa fbe1 	bl	8000ad0 <__aeabi_fdiv>
 800630e:	1c03      	adds	r3, r0, #0
 8006310:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006334:	46c0      	nop			@ (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bdb0      	pop	{r4, r5, r7, pc}
 800633c:	45610000 	.word	0x45610000
 8006340:	44960000 	.word	0x44960000
 8006344:	41a00000 	.word	0x41a00000
 8006348:	451c4000 	.word	0x451c4000

0800634c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006358:	1c18      	adds	r0, r3, #0
 800635a:	46bd      	mov	sp, r7
 800635c:	b002      	add	sp, #8
 800635e:	bd80      	pop	{r7, pc}

08006360 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006370:	1c19      	adds	r1, r3, #0
 8006372:	1c10      	adds	r0, r2, #0
 8006374:	f7fa fa22 	bl	80007bc <__aeabi_fadd>
 8006378:	1c03      	adds	r3, r0, #0
}
 800637a:	1c18      	adds	r0, r3, #0
 800637c:	46bd      	mov	sp, r7
 800637e:	b002      	add	sp, #8
 8006380:	bd80      	pop	{r7, pc}

08006382 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	223c      	movs	r2, #60	@ 0x3c
 800638e:	5c9b      	ldrb	r3, [r3, r2]
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b002      	add	sp, #8
 8006396:	bd80      	pop	{r7, pc}

08006398 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006398:	b5b0      	push	{r4, r5, r7, lr}
 800639a:	b08c      	sub	sp, #48	@ 0x30
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80063a4:	1c19      	adds	r1, r3, #0
 80063a6:	4895      	ldr	r0, [pc, #596]	@ (80065fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80063a8:	f7fa feb6 	bl	8001118 <__aeabi_fsub>
 80063ac:	1c03      	adds	r3, r0, #0
 80063ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063b4:	1c19      	adds	r1, r3, #0
 80063b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063b8:	f7fa f89c 	bl	80004f4 <__aeabi_fcmpgt>
 80063bc:	1e03      	subs	r3, r0, #0
 80063be:	d00b      	beq.n	80063d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80063c8:	1c19      	adds	r1, r3, #0
 80063ca:	1c10      	adds	r0, r2, #0
 80063cc:	f7fa f9f6 	bl	80007bc <__aeabi_fadd>
 80063d0:	1c03      	adds	r3, r0, #0
 80063d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063dc:	1c19      	adds	r1, r3, #0
 80063de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063e0:	f7fa f888 	bl	80004f4 <__aeabi_fcmpgt>
 80063e4:	1e03      	subs	r3, r0, #0
 80063e6:	d00b      	beq.n	8006400 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80063f0:	1c19      	adds	r1, r3, #0
 80063f2:	1c10      	adds	r0, r2, #0
 80063f4:	f7fa f9e2 	bl	80007bc <__aeabi_fadd>
 80063f8:	1c03      	adds	r3, r0, #0
 80063fa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6959      	ldr	r1, [r3, #20]
 8006404:	4a7e      	ldr	r2, [pc, #504]	@ (8006600 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0018      	movs	r0, r3
 800640a:	f000 f9f1 	bl	80067f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1c11      	adds	r1, r2, #0
 8006416:	0018      	movs	r0, r3
 8006418:	f000 f9fa 	bl	8006810 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800641c:	1c03      	adds	r3, r0, #0
 800641e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800642c:	1c19      	adds	r1, r3, #0
 800642e:	1c10      	adds	r0, r2, #0
 8006430:	f7fa fe72 	bl	8001118 <__aeabi_fsub>
 8006434:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006438:	1c18      	adds	r0, r3, #0
 800643a:	f7fa fd2f 	bl	8000e9c <__aeabi_fmul>
 800643e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006440:	1c19      	adds	r1, r3, #0
 8006442:	1c20      	adds	r0, r4, #0
 8006444:	f7fa f9ba 	bl	80007bc <__aeabi_fadd>
 8006448:	1c03      	adds	r3, r0, #0
 800644a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006454:	1c19      	adds	r1, r3, #0
 8006456:	486b      	ldr	r0, [pc, #428]	@ (8006604 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006458:	f7fa fe5e 	bl	8001118 <__aeabi_fsub>
 800645c:	1c03      	adds	r3, r0, #0
 800645e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	1c11      	adds	r1, r2, #0
 8006468:	0018      	movs	r0, r3
 800646a:	f000 f9d1 	bl	8006810 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800646e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006470:	1c19      	adds	r1, r3, #0
 8006472:	1c28      	adds	r0, r5, #0
 8006474:	f7fa fd12 	bl	8000e9c <__aeabi_fmul>
 8006478:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800647a:	1c19      	adds	r1, r3, #0
 800647c:	1c20      	adds	r0, r4, #0
 800647e:	f7fa f99d 	bl	80007bc <__aeabi_fadd>
 8006482:	1c03      	adds	r3, r0, #0
 8006484:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006486:	4a60      	ldr	r2, [pc, #384]	@ (8006608 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006488:	6a39      	ldr	r1, [r7, #32]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	0018      	movs	r0, r3
 800648e:	f000 f9af 	bl	80067f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	1c11      	adds	r1, r2, #0
 800649a:	0018      	movs	r0, r3
 800649c:	f000 f9b8 	bl	8006810 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80064a0:	1c03      	adds	r3, r0, #0
 80064a2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80064a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064a6:	69f8      	ldr	r0, [r7, #28]
 80064a8:	f7fa fcf8 	bl	8000e9c <__aeabi_fmul>
 80064ac:	1c03      	adds	r3, r0, #0
 80064ae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6999      	ldr	r1, [r3, #24]
 80064b8:	4a51      	ldr	r2, [pc, #324]	@ (8006600 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0018      	movs	r0, r3
 80064be:	f000 f997 	bl	80067f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	1c11      	adds	r1, r2, #0
 80064ca:	0018      	movs	r0, r3
 80064cc:	f000 f9a0 	bl	8006810 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80064d0:	1c03      	adds	r3, r0, #0
 80064d2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80064e0:	1c19      	adds	r1, r3, #0
 80064e2:	1c10      	adds	r0, r2, #0
 80064e4:	f7fa fe18 	bl	8001118 <__aeabi_fsub>
 80064e8:	1c03      	adds	r3, r0, #0
 80064ea:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80064ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ee:	69b8      	ldr	r0, [r7, #24]
 80064f0:	f7fa fe12 	bl	8001118 <__aeabi_fsub>
 80064f4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80064f6:	1c19      	adds	r1, r3, #0
 80064f8:	1c28      	adds	r0, r5, #0
 80064fa:	f7fa fccf 	bl	8000e9c <__aeabi_fmul>
 80064fe:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8006500:	1c19      	adds	r1, r3, #0
 8006502:	1c20      	adds	r0, r4, #0
 8006504:	f7fa f95a 	bl	80007bc <__aeabi_fadd>
 8006508:	1c03      	adds	r3, r0, #0
 800650a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006514:	1c19      	adds	r1, r3, #0
 8006516:	483b      	ldr	r0, [pc, #236]	@ (8006604 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006518:	f7fa fdfe 	bl	8001118 <__aeabi_fsub>
 800651c:	1c03      	adds	r3, r0, #0
 800651e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	1c11      	adds	r1, r2, #0
 8006528:	0018      	movs	r0, r3
 800652a:	f000 f971 	bl	8006810 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800652e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006530:	1c19      	adds	r1, r3, #0
 8006532:	1c28      	adds	r0, r5, #0
 8006534:	f7fa fcb2 	bl	8000e9c <__aeabi_fmul>
 8006538:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800653a:	1c19      	adds	r1, r3, #0
 800653c:	1c20      	adds	r0, r4, #0
 800653e:	f7fa f93d 	bl	80007bc <__aeabi_fadd>
 8006542:	1c03      	adds	r3, r0, #0
 8006544:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006546:	4a30      	ldr	r2, [pc, #192]	@ (8006608 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006548:	6939      	ldr	r1, [r7, #16]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0018      	movs	r0, r3
 800654e:	f000 f94f 	bl	80067f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	1c11      	adds	r1, r2, #0
 800655a:	0018      	movs	r0, r3
 800655c:	f000 f958 	bl	8006810 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006560:	1c03      	adds	r3, r0, #0
 8006562:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8006564:	6979      	ldr	r1, [r7, #20]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7fa fc98 	bl	8000e9c <__aeabi_fmul>
 800656c:	1c03      	adds	r3, r0, #0
 800656e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4923      	ldr	r1, [pc, #140]	@ (800660c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800657e:	1c18      	adds	r0, r3, #0
 8006580:	f7fa faa6 	bl	8000ad0 <__aeabi_fdiv>
 8006584:	1c03      	adds	r3, r0, #0
 8006586:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	20fe      	movs	r0, #254	@ 0xfe
 800658c:	0580      	lsls	r0, r0, #22
 800658e:	f7fa fdc3 	bl	8001118 <__aeabi_fsub>
 8006592:	1c03      	adds	r3, r0, #0
 8006594:	491e      	ldr	r1, [pc, #120]	@ (8006610 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8006596:	1c18      	adds	r0, r3, #0
 8006598:	f7fa fc80 	bl	8000e9c <__aeabi_fmul>
 800659c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800659e:	491d      	ldr	r1, [pc, #116]	@ (8006614 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80065a0:	1c18      	adds	r0, r3, #0
 80065a2:	f7fa fdb9 	bl	8001118 <__aeabi_fsub>
 80065a6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80065a8:	1c19      	adds	r1, r3, #0
 80065aa:	1c28      	adds	r0, r5, #0
 80065ac:	f7fa fc76 	bl	8000e9c <__aeabi_fmul>
 80065b0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80065b2:	1c19      	adds	r1, r3, #0
 80065b4:	1c20      	adds	r0, r4, #0
 80065b6:	f7fa f901 	bl	80007bc <__aeabi_fadd>
 80065ba:	1c03      	adds	r3, r0, #0
 80065bc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c6:	2100      	movs	r1, #0
 80065c8:	1c18      	adds	r0, r3, #0
 80065ca:	f7f9 ff7f 	bl	80004cc <__aeabi_fcmplt>
 80065ce:	1e03      	subs	r3, r0, #0
 80065d0:	d002      	beq.n	80065d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80065e0:	1c19      	adds	r1, r3, #0
 80065e2:	1c10      	adds	r0, r2, #0
 80065e4:	f7f9 ff86 	bl	80004f4 <__aeabi_fcmpgt>
 80065e8:	1e03      	subs	r3, r0, #0
 80065ea:	d100      	bne.n	80065ee <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80065ec:	e002      	b.n	80065f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065f4:	46c0      	nop			@ (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b00c      	add	sp, #48	@ 0x30
 80065fa:	bdb0      	pop	{r4, r5, r7, pc}
 80065fc:	46fffe00 	.word	0x46fffe00
 8006600:	3c23d70a 	.word	0x3c23d70a
 8006604:	43ff0000 	.word	0x43ff0000
 8006608:	3db851ec 	.word	0x3db851ec
 800660c:	42700000 	.word	0x42700000
 8006610:	3fa66666 	.word	0x3fa66666
 8006614:	3e99999a 	.word	0x3e99999a

08006618 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8006618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	223c      	movs	r2, #60	@ 0x3c
 8006626:	5c9b      	ldrb	r3, [r3, r2]
 8006628:	2201      	movs	r2, #1
 800662a:	4053      	eors	r3, r2
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	223c      	movs	r2, #60	@ 0x3c
 8006636:	2101      	movs	r1, #1
 8006638:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8006646:	e0c8      	b.n	80067da <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	4965      	ldr	r1, [pc, #404]	@ (80067e4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800664e:	1c18      	adds	r0, r3, #0
 8006650:	f7f9 ff5a 	bl	8000508 <__aeabi_fcmpge>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d107      	bne.n	8006668 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800665c:	4962      	ldr	r1, [pc, #392]	@ (80067e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800665e:	1c18      	adds	r0, r3, #0
 8006660:	f7f9 ff3e 	bl	80004e0 <__aeabi_fcmple>
 8006664:	1e03      	subs	r3, r0, #0
 8006666:	d00e      	beq.n	8006686 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006670:	1c19      	adds	r1, r3, #0
 8006672:	1c10      	adds	r0, r2, #0
 8006674:	f7fa f8a2 	bl	80007bc <__aeabi_fadd>
 8006678:	1c03      	adds	r3, r0, #0
 800667a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	1c19      	adds	r1, r3, #0
 800668c:	6838      	ldr	r0, [r7, #0]
 800668e:	f7fa fd43 	bl	8001118 <__aeabi_fsub>
 8006692:	1c03      	adds	r3, r0, #0
 8006694:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0018      	movs	r0, r3
 800669a:	f7ff fe7d 	bl	8006398 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	1c19      	adds	r1, r3, #0
 80066a4:	6838      	ldr	r0, [r7, #0]
 80066a6:	f7fa fd37 	bl	8001118 <__aeabi_fsub>
 80066aa:	1c03      	adds	r3, r0, #0
 80066ac:	2185      	movs	r1, #133	@ 0x85
 80066ae:	05c9      	lsls	r1, r1, #23
 80066b0:	1c18      	adds	r0, r3, #0
 80066b2:	f7fa fa0d 	bl	8000ad0 <__aeabi_fdiv>
 80066b6:	1c03      	adds	r3, r0, #0
 80066b8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80066ba:	2100      	movs	r1, #0
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7f9 ff05 	bl	80004cc <__aeabi_fcmplt>
 80066c2:	1e03      	subs	r3, r0, #0
 80066c4:	d008      	beq.n	80066d8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	1c18      	adds	r0, r3, #0
 80066ce:	f7fa fd23 	bl	8001118 <__aeabi_fsub>
 80066d2:	1c03      	adds	r3, r0, #0
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	e007      	b.n	80066e8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066dc:	1c19      	adds	r1, r3, #0
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7fa f86c 	bl	80007bc <__aeabi_fadd>
 80066e4:	1c03      	adds	r3, r0, #0
 80066e6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80066e8:	23fe      	movs	r3, #254	@ 0xfe
 80066ea:	059b      	lsls	r3, r3, #22
 80066ec:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80066ee:	493f      	ldr	r1, [pc, #252]	@ (80067ec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	f7f9 feff 	bl	80004f4 <__aeabi_fcmpgt>
 80066f6:	1e03      	subs	r3, r0, #0
 80066f8:	d010      	beq.n	800671c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80066fa:	493c      	ldr	r1, [pc, #240]	@ (80067ec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80066fc:	6978      	ldr	r0, [r7, #20]
 80066fe:	f7fa f9e7 	bl	8000ad0 <__aeabi_fdiv>
 8006702:	1c03      	adds	r3, r0, #0
 8006704:	1c1c      	adds	r4, r3, #0
 8006706:	4939      	ldr	r1, [pc, #228]	@ (80067ec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8006708:	6978      	ldr	r0, [r7, #20]
 800670a:	f7fa f9e1 	bl	8000ad0 <__aeabi_fdiv>
 800670e:	1c03      	adds	r3, r0, #0
 8006710:	1c19      	adds	r1, r3, #0
 8006712:	1c20      	adds	r0, r4, #0
 8006714:	f7fa fbc2 	bl	8000e9c <__aeabi_fmul>
 8006718:	1c03      	adds	r3, r0, #0
 800671a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8006720:	1c19      	adds	r1, r3, #0
 8006722:	2085      	movs	r0, #133	@ 0x85
 8006724:	05c0      	lsls	r0, r0, #23
 8006726:	f7fa fcf7 	bl	8001118 <__aeabi_fsub>
 800672a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800672c:	6939      	ldr	r1, [r7, #16]
 800672e:	1c18      	adds	r0, r3, #0
 8006730:	f7fa fbb4 	bl	8000e9c <__aeabi_fmul>
 8006734:	1c03      	adds	r3, r0, #0
 8006736:	1c18      	adds	r0, r3, #0
 8006738:	f00b fdd2 	bl	80122e0 <sqrtf>
 800673c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006746:	2185      	movs	r1, #133	@ 0x85
 8006748:	05c9      	lsls	r1, r1, #23
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f7fa fba6 	bl	8000e9c <__aeabi_fmul>
 8006750:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8006752:	1c19      	adds	r1, r3, #0
 8006754:	1c28      	adds	r0, r5, #0
 8006756:	f7fa f9bb 	bl	8000ad0 <__aeabi_fdiv>
 800675a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800675c:	1c19      	adds	r1, r3, #0
 800675e:	1c20      	adds	r0, r4, #0
 8006760:	f7fa fb9c 	bl	8000e9c <__aeabi_fmul>
 8006764:	1c03      	adds	r3, r0, #0
 8006766:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676c:	68f9      	ldr	r1, [r7, #12]
 800676e:	1c18      	adds	r0, r3, #0
 8006770:	f7fa fb94 	bl	8000e9c <__aeabi_fmul>
 8006774:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8006776:	6939      	ldr	r1, [r7, #16]
 8006778:	1c18      	adds	r0, r3, #0
 800677a:	f7fa f9a9 	bl	8000ad0 <__aeabi_fdiv>
 800677e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8006780:	68f9      	ldr	r1, [r7, #12]
 8006782:	1c18      	adds	r0, r3, #0
 8006784:	f7fa fb8a 	bl	8000e9c <__aeabi_fmul>
 8006788:	1c03      	adds	r3, r0, #0
             sqrtf(
 800678a:	1c19      	adds	r1, r3, #0
 800678c:	1c20      	adds	r0, r4, #0
 800678e:	f7fa f815 	bl	80007bc <__aeabi_fadd>
 8006792:	1c03      	adds	r3, r0, #0
 8006794:	1c18      	adds	r0, r3, #0
 8006796:	f00b fda3 	bl	80122e0 <sqrtf>
 800679a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800679c:	1c19      	adds	r1, r3, #0
 800679e:	1c30      	adds	r0, r6, #0
 80067a0:	f7fa fb7c 	bl	8000e9c <__aeabi_fmul>
 80067a4:	1c03      	adds	r3, r0, #0
 80067a6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	1c18      	adds	r0, r3, #0
 80067b8:	f7fa fb70 	bl	8000e9c <__aeabi_fmul>
 80067bc:	1c03      	adds	r3, r0, #0
 80067be:	2182      	movs	r1, #130	@ 0x82
 80067c0:	05c9      	lsls	r1, r1, #23
 80067c2:	1c18      	adds	r0, r3, #0
 80067c4:	f7fa f984 	bl	8000ad0 <__aeabi_fdiv>
 80067c8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80067ca:	1c19      	adds	r1, r3, #0
 80067cc:	1c20      	adds	r0, r4, #0
 80067ce:	f7f9 fff5 	bl	80007bc <__aeabi_fadd>
 80067d2:	1c03      	adds	r3, r0, #0
 80067d4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	46bd      	mov	sp, r7
 80067de:	b007      	add	sp, #28
 80067e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	42c80000 	.word	0x42c80000
 80067e8:	c2c80000 	.word	0xc2c80000
 80067ec:	44b40000 	.word	0x44b40000

080067f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006808:	46c0      	nop			@ (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b004      	add	sp, #16
 800680e:	bd80      	pop	{r7, pc}

08006810 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006822:	1c19      	adds	r1, r3, #0
 8006824:	6838      	ldr	r0, [r7, #0]
 8006826:	f7fa fc77 	bl	8001118 <__aeabi_fsub>
 800682a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800682c:	1c19      	adds	r1, r3, #0
 800682e:	1c20      	adds	r0, r4, #0
 8006830:	f7fa fb34 	bl	8000e9c <__aeabi_fmul>
 8006834:	1c03      	adds	r3, r0, #0
 8006836:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8006838:	4912      	ldr	r1, [pc, #72]	@ (8006884 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7f9 fe46 	bl	80004cc <__aeabi_fcmplt>
 8006840:	1e03      	subs	r3, r0, #0
 8006842:	d002      	beq.n	800684a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8006844:	23fe      	movs	r3, #254	@ 0xfe
 8006846:	059b      	lsls	r3, r3, #22
 8006848:	e018      	b.n	800687c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800684a:	490f      	ldr	r1, [pc, #60]	@ (8006888 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7f9 fe51 	bl	80004f4 <__aeabi_fcmpgt>
 8006852:	1e03      	subs	r3, r0, #0
 8006854:	d001      	beq.n	800685a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8006856:	2300      	movs	r3, #0
 8006858:	e010      	b.n	800687c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1c18      	adds	r0, r3, #0
 800685e:	f00b fd17 	bl	8012290 <expf>
 8006862:	1c03      	adds	r3, r0, #0
 8006864:	21fe      	movs	r1, #254	@ 0xfe
 8006866:	0589      	lsls	r1, r1, #22
 8006868:	1c18      	adds	r0, r3, #0
 800686a:	f7f9 ffa7 	bl	80007bc <__aeabi_fadd>
 800686e:	1c03      	adds	r3, r0, #0
 8006870:	1c19      	adds	r1, r3, #0
 8006872:	20fe      	movs	r0, #254	@ 0xfe
 8006874:	0580      	lsls	r0, r0, #22
 8006876:	f7fa f92b 	bl	8000ad0 <__aeabi_fdiv>
 800687a:	1c03      	adds	r3, r0, #0
    }
}
 800687c:	1c18      	adds	r0, r3, #0
 800687e:	46bd      	mov	sp, r7
 8006880:	b005      	add	sp, #20
 8006882:	bd90      	pop	{r4, r7, pc}
 8006884:	c2480000 	.word	0xc2480000
 8006888:	42480000 	.word	0x42480000

0800688c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80068a4:	46c0      	nop			@ (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b004      	add	sp, #16
 80068aa:	bd80      	pop	{r7, pc}

080068ac <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80068ac:	b590      	push	{r4, r7, lr}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d114      	bne.n	80068e8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c2:	1c19      	adds	r1, r3, #0
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f7fa fc27 	bl	8001118 <__aeabi_fsub>
 80068ca:	1c03      	adds	r3, r0, #0
 80068cc:	4918      	ldr	r1, [pc, #96]	@ (8006930 <GasIndexAlgorithm__mox_model__process+0x84>)
 80068ce:	1c18      	adds	r0, r3, #0
 80068d0:	f7fa f8fe 	bl	8000ad0 <__aeabi_fdiv>
 80068d4:	1c03      	adds	r3, r0, #0
 80068d6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80068dc:	1c19      	adds	r1, r3, #0
 80068de:	1c10      	adds	r0, r2, #0
 80068e0:	f7fa fadc 	bl	8000e9c <__aeabi_fmul>
 80068e4:	1c03      	adds	r3, r0, #0
 80068e6:	e01f      	b.n	8006928 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068ec:	1c19      	adds	r1, r3, #0
 80068ee:	6838      	ldr	r0, [r7, #0]
 80068f0:	f7fa fc12 	bl	8001118 <__aeabi_fsub>
 80068f4:	1c03      	adds	r3, r0, #0
 80068f6:	1c1a      	adds	r2, r3, #0
 80068f8:	2380      	movs	r3, #128	@ 0x80
 80068fa:	061b      	lsls	r3, r3, #24
 80068fc:	4053      	eors	r3, r2
 80068fe:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006904:	490b      	ldr	r1, [pc, #44]	@ (8006934 <GasIndexAlgorithm__mox_model__process+0x88>)
 8006906:	1c18      	adds	r0, r3, #0
 8006908:	f7f9 ff58 	bl	80007bc <__aeabi_fadd>
 800690c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800690e:	1c19      	adds	r1, r3, #0
 8006910:	1c20      	adds	r0, r4, #0
 8006912:	f7fa f8dd 	bl	8000ad0 <__aeabi_fdiv>
 8006916:	1c03      	adds	r3, r0, #0
 8006918:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800691e:	1c19      	adds	r1, r3, #0
 8006920:	1c10      	adds	r0, r2, #0
 8006922:	f7fa fabb 	bl	8000e9c <__aeabi_fmul>
 8006926:	1c03      	adds	r3, r0, #0
    }
}
 8006928:	1c18      	adds	r0, r3, #0
 800692a:	46bd      	mov	sp, r7
 800692c:	b003      	add	sp, #12
 800692e:	bd90      	pop	{r4, r7, pc}
 8006930:	44fa0000 	.word	0x44fa0000
 8006934:	435c0000 	.word	0x435c0000

08006938 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2180      	movs	r1, #128	@ 0x80
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2184      	movs	r1, #132	@ 0x84
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2188      	movs	r1, #136	@ 0x88
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	505a      	str	r2, [r3, r1]
}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b004      	add	sp, #16
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2280      	movs	r2, #128	@ 0x80
 8006976:	589c      	ldr	r4, [r3, r2]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2284      	movs	r2, #132	@ 0x84
 800697c:	589b      	ldr	r3, [r3, r2]
 800697e:	1c19      	adds	r1, r3, #0
 8006980:	6838      	ldr	r0, [r7, #0]
 8006982:	f7fa fbc9 	bl	8001118 <__aeabi_fsub>
 8006986:	1c03      	adds	r3, r0, #0
 8006988:	1c19      	adds	r1, r3, #0
 800698a:	1c20      	adds	r0, r4, #0
 800698c:	f7fa fa86 	bl	8000e9c <__aeabi_fmul>
 8006990:	1c03      	adds	r3, r0, #0
 8006992:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8006994:	4940      	ldr	r1, [pc, #256]	@ (8006a98 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8006996:	68b8      	ldr	r0, [r7, #8]
 8006998:	f7f9 fd98 	bl	80004cc <__aeabi_fcmplt>
 800699c:	1e03      	subs	r3, r0, #0
 800699e:	d001      	beq.n	80069a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80069a0:	4b3e      	ldr	r3, [pc, #248]	@ (8006a9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80069a2:	e075      	b.n	8006a90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80069a4:	493e      	ldr	r1, [pc, #248]	@ (8006aa0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	f7f9 fda4 	bl	80004f4 <__aeabi_fcmpgt>
 80069ac:	1e03      	subs	r3, r0, #0
 80069ae:	d001      	beq.n	80069b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e06d      	b.n	8006a90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80069b4:	2100      	movs	r1, #0
 80069b6:	6838      	ldr	r0, [r7, #0]
 80069b8:	f7f9 fda6 	bl	8000508 <__aeabi_fcmpge>
 80069bc:	1e03      	subs	r3, r0, #0
 80069be:	d047      	beq.n	8006a50 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2288      	movs	r2, #136	@ 0x88
 80069c4:	589b      	ldr	r3, [r3, r2]
 80069c6:	21fe      	movs	r1, #254	@ 0xfe
 80069c8:	0589      	lsls	r1, r1, #22
 80069ca:	1c18      	adds	r0, r3, #0
 80069cc:	f7f9 fd78 	bl	80004c0 <__aeabi_fcmpeq>
 80069d0:	1e03      	subs	r3, r0, #0
 80069d2:	d00e      	beq.n	80069f2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	1c19      	adds	r1, r3, #0
 80069da:	20fe      	movs	r0, #254	@ 0xfe
 80069dc:	0580      	lsls	r0, r0, #22
 80069de:	f7fa fb9b 	bl	8001118 <__aeabi_fsub>
 80069e2:	1c03      	adds	r3, r0, #0
 80069e4:	492f      	ldr	r1, [pc, #188]	@ (8006aa4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80069e6:	1c18      	adds	r0, r3, #0
 80069e8:	f7fa fa58 	bl	8000e9c <__aeabi_fmul>
 80069ec:	1c03      	adds	r3, r0, #0
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e012      	b.n	8006a18 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	492c      	ldr	r1, [pc, #176]	@ (8006aa8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80069f8:	1c18      	adds	r0, r3, #0
 80069fa:	f7fa fa4f 	bl	8000e9c <__aeabi_fmul>
 80069fe:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8006a00:	1c19      	adds	r1, r3, #0
 8006a02:	4826      	ldr	r0, [pc, #152]	@ (8006a9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006a04:	f7fa fb88 	bl	8001118 <__aeabi_fsub>
 8006a08:	1c03      	adds	r3, r0, #0
 8006a0a:	2181      	movs	r1, #129	@ 0x81
 8006a0c:	05c9      	lsls	r1, r1, #23
 8006a0e:	1c18      	adds	r0, r3, #0
 8006a10:	f7fa f85e 	bl	8000ad0 <__aeabi_fdiv>
 8006a14:	1c03      	adds	r3, r0, #0
 8006a16:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8006a18:	4920      	ldr	r1, [pc, #128]	@ (8006a9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7f9 fece 	bl	80007bc <__aeabi_fadd>
 8006a20:	1c03      	adds	r3, r0, #0
 8006a22:	1c1c      	adds	r4, r3, #0
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	1c18      	adds	r0, r3, #0
 8006a28:	f00b fc32 	bl	8012290 <expf>
 8006a2c:	1c03      	adds	r3, r0, #0
 8006a2e:	21fe      	movs	r1, #254	@ 0xfe
 8006a30:	0589      	lsls	r1, r1, #22
 8006a32:	1c18      	adds	r0, r3, #0
 8006a34:	f7f9 fec2 	bl	80007bc <__aeabi_fadd>
 8006a38:	1c03      	adds	r3, r0, #0
 8006a3a:	1c19      	adds	r1, r3, #0
 8006a3c:	1c20      	adds	r0, r4, #0
 8006a3e:	f7fa f847 	bl	8000ad0 <__aeabi_fdiv>
 8006a42:	1c03      	adds	r3, r0, #0
 8006a44:	68f9      	ldr	r1, [r7, #12]
 8006a46:	1c18      	adds	r0, r3, #0
 8006a48:	f7fa fb66 	bl	8001118 <__aeabi_fsub>
 8006a4c:	1c03      	adds	r3, r0, #0
 8006a4e:	e01f      	b.n	8006a90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2188      	movs	r1, #136	@ 0x88
 8006a58:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8006a5a:	1c19      	adds	r1, r3, #0
 8006a5c:	1c10      	adds	r0, r2, #0
 8006a5e:	f7fa f837 	bl	8000ad0 <__aeabi_fdiv>
 8006a62:	1c03      	adds	r3, r0, #0
 8006a64:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	1c18      	adds	r0, r3, #0
 8006a6a:	f00b fc11 	bl	8012290 <expf>
 8006a6e:	1c03      	adds	r3, r0, #0
 8006a70:	21fe      	movs	r1, #254	@ 0xfe
 8006a72:	0589      	lsls	r1, r1, #22
 8006a74:	1c18      	adds	r0, r3, #0
 8006a76:	f7f9 fea1 	bl	80007bc <__aeabi_fadd>
 8006a7a:	1c03      	adds	r3, r0, #0
 8006a7c:	1c19      	adds	r1, r3, #0
 8006a7e:	4807      	ldr	r0, [pc, #28]	@ (8006a9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006a80:	f7fa f826 	bl	8000ad0 <__aeabi_fdiv>
 8006a84:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8006a86:	1c19      	adds	r1, r3, #0
 8006a88:	1c20      	adds	r0, r4, #0
 8006a8a:	f7fa fa07 	bl	8000e9c <__aeabi_fmul>
 8006a8e:	1c03      	adds	r3, r0, #0
        }
    }
}
 8006a90:	1c18      	adds	r0, r3, #0
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b005      	add	sp, #20
 8006a96:	bd90      	pop	{r4, r7, pc}
 8006a98:	c2480000 	.word	0xc2480000
 8006a9c:	43fa0000 	.word	0x43fa0000
 8006aa0:	42480000 	.word	0x42480000
 8006aa4:	3f8041ab 	.word	0x3f8041ab
 8006aa8:	40a00000 	.word	0x40a00000

08006aac <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006aac:	b590      	push	{r4, r7, lr}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4913      	ldr	r1, [pc, #76]	@ (8006b0c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8006abe:	1c18      	adds	r0, r3, #0
 8006ac0:	f7f9 fe7c 	bl	80007bc <__aeabi_fadd>
 8006ac4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8006ac6:	1c19      	adds	r1, r3, #0
 8006ac8:	1c20      	adds	r0, r4, #0
 8006aca:	f7fa f801 	bl	8000ad0 <__aeabi_fdiv>
 8006ace:	1c03      	adds	r3, r0, #0
 8006ad0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	228c      	movs	r2, #140	@ 0x8c
 8006ad6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	490b      	ldr	r1, [pc, #44]	@ (8006b10 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8006ae2:	1c18      	adds	r0, r3, #0
 8006ae4:	f7f9 fe6a 	bl	80007bc <__aeabi_fadd>
 8006ae8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8006aea:	1c19      	adds	r1, r3, #0
 8006aec:	1c20      	adds	r0, r4, #0
 8006aee:	f7f9 ffef 	bl	8000ad0 <__aeabi_fdiv>
 8006af2:	1c03      	adds	r3, r0, #0
 8006af4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2290      	movs	r2, #144	@ 0x90
 8006afa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2294      	movs	r2, #148	@ 0x94
 8006b00:	2100      	movs	r1, #0
 8006b02:	5499      	strb	r1, [r3, r2]
}
 8006b04:	46c0      	nop			@ (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b003      	add	sp, #12
 8006b0a:	bd90      	pop	{r4, r7, pc}
 8006b0c:	41a00000 	.word	0x41a00000
 8006b10:	43fa0000 	.word	0x43fa0000

08006b14 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2294      	movs	r2, #148	@ 0x94
 8006b22:	5c9b      	ldrb	r3, [r3, r2]
 8006b24:	2201      	movs	r2, #1
 8006b26:	4053      	eors	r3, r2
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00f      	beq.n	8006b4e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2198      	movs	r1, #152	@ 0x98
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	219c      	movs	r1, #156	@ 0x9c
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	21a0      	movs	r1, #160	@ 0xa0
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2294      	movs	r2, #148	@ 0x94
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	228c      	movs	r2, #140	@ 0x8c
 8006b52:	589b      	ldr	r3, [r3, r2]
 8006b54:	1c19      	adds	r1, r3, #0
 8006b56:	20fe      	movs	r0, #254	@ 0xfe
 8006b58:	0580      	lsls	r0, r0, #22
 8006b5a:	f7fa fadd 	bl	8001118 <__aeabi_fsub>
 8006b5e:	1c03      	adds	r3, r0, #0
 8006b60:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2298      	movs	r2, #152	@ 0x98
 8006b66:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006b68:	1c19      	adds	r1, r3, #0
 8006b6a:	f7fa f997 	bl	8000e9c <__aeabi_fmul>
 8006b6e:	1c03      	adds	r3, r0, #0
 8006b70:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	228c      	movs	r2, #140	@ 0x8c
 8006b76:	589b      	ldr	r3, [r3, r2]
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	1c18      	adds	r0, r3, #0
 8006b7c:	f7fa f98e 	bl	8000e9c <__aeabi_fmul>
 8006b80:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8006b82:	1c19      	adds	r1, r3, #0
 8006b84:	1c20      	adds	r0, r4, #0
 8006b86:	f7f9 fe19 	bl	80007bc <__aeabi_fadd>
 8006b8a:	1c03      	adds	r3, r0, #0
 8006b8c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2298      	movs	r2, #152	@ 0x98
 8006b92:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2290      	movs	r2, #144	@ 0x90
 8006b98:	589b      	ldr	r3, [r3, r2]
 8006b9a:	1c19      	adds	r1, r3, #0
 8006b9c:	20fe      	movs	r0, #254	@ 0xfe
 8006b9e:	0580      	lsls	r0, r0, #22
 8006ba0:	f7fa faba 	bl	8001118 <__aeabi_fsub>
 8006ba4:	1c03      	adds	r3, r0, #0
 8006ba6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	229c      	movs	r2, #156	@ 0x9c
 8006bac:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8006bae:	1c19      	adds	r1, r3, #0
 8006bb0:	f7fa f974 	bl	8000e9c <__aeabi_fmul>
 8006bb4:	1c03      	adds	r3, r0, #0
 8006bb6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2290      	movs	r2, #144	@ 0x90
 8006bbc:	589b      	ldr	r3, [r3, r2]
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	1c18      	adds	r0, r3, #0
 8006bc2:	f7fa f96b 	bl	8000e9c <__aeabi_fmul>
 8006bc6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8006bc8:	1c19      	adds	r1, r3, #0
 8006bca:	1c20      	adds	r0, r4, #0
 8006bcc:	f7f9 fdf6 	bl	80007bc <__aeabi_fadd>
 8006bd0:	1c03      	adds	r3, r0, #0
 8006bd2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	229c      	movs	r2, #156	@ 0x9c
 8006bd8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2298      	movs	r2, #152	@ 0x98
 8006bde:	589a      	ldr	r2, [r3, r2]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	219c      	movs	r1, #156	@ 0x9c
 8006be4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8006be6:	1c19      	adds	r1, r3, #0
 8006be8:	1c10      	adds	r0, r2, #0
 8006bea:	f7fa fa95 	bl	8001118 <__aeabi_fsub>
 8006bee:	1c03      	adds	r3, r0, #0
 8006bf0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	6978      	ldr	r0, [r7, #20]
 8006bf6:	f7f9 fc69 	bl	80004cc <__aeabi_fcmplt>
 8006bfa:	1e03      	subs	r3, r0, #0
 8006bfc:	d004      	beq.n	8006c08 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2280      	movs	r2, #128	@ 0x80
 8006c02:	0612      	lsls	r2, r2, #24
 8006c04:	4053      	eors	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8006c08:	4923      	ldr	r1, [pc, #140]	@ (8006c98 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8006c0a:	6978      	ldr	r0, [r7, #20]
 8006c0c:	f7fa f946 	bl	8000e9c <__aeabi_fmul>
 8006c10:	1c03      	adds	r3, r0, #0
 8006c12:	1c18      	adds	r0, r3, #0
 8006c14:	f00b fb3c 	bl	8012290 <expf>
 8006c18:	1c03      	adds	r3, r0, #0
 8006c1a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8006c1c:	491f      	ldr	r1, [pc, #124]	@ (8006c9c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8006c1e:	6938      	ldr	r0, [r7, #16]
 8006c20:	f7fa f93c 	bl	8000e9c <__aeabi_fmul>
 8006c24:	1c03      	adds	r3, r0, #0
 8006c26:	491e      	ldr	r1, [pc, #120]	@ (8006ca0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8006c28:	1c18      	adds	r0, r3, #0
 8006c2a:	f7f9 fdc7 	bl	80007bc <__aeabi_fadd>
 8006c2e:	1c03      	adds	r3, r0, #0
 8006c30:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685c      	ldr	r4, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	1c18      	adds	r0, r3, #0
 8006c3e:	f7f9 fdbd 	bl	80007bc <__aeabi_fadd>
 8006c42:	1c03      	adds	r3, r0, #0
 8006c44:	1c19      	adds	r1, r3, #0
 8006c46:	1c20      	adds	r0, r4, #0
 8006c48:	f7f9 ff42 	bl	8000ad0 <__aeabi_fdiv>
 8006c4c:	1c03      	adds	r3, r0, #0
 8006c4e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	20fe      	movs	r0, #254	@ 0xfe
 8006c54:	0580      	lsls	r0, r0, #22
 8006c56:	f7fa fa5f 	bl	8001118 <__aeabi_fsub>
 8006c5a:	1c03      	adds	r3, r0, #0
 8006c5c:	1c18      	adds	r0, r3, #0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	22a0      	movs	r2, #160	@ 0xa0
 8006c62:	589b      	ldr	r3, [r3, r2]
 8006c64:	1c19      	adds	r1, r3, #0
 8006c66:	f7fa f919 	bl	8000e9c <__aeabi_fmul>
 8006c6a:	1c03      	adds	r3, r0, #0
 8006c6c:	1c1c      	adds	r4, r3, #0
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	68b8      	ldr	r0, [r7, #8]
 8006c72:	f7fa f913 	bl	8000e9c <__aeabi_fmul>
 8006c76:	1c03      	adds	r3, r0, #0
 8006c78:	1c19      	adds	r1, r3, #0
 8006c7a:	1c20      	adds	r0, r4, #0
 8006c7c:	f7f9 fd9e 	bl	80007bc <__aeabi_fadd>
 8006c80:	1c03      	adds	r3, r0, #0
 8006c82:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	22a0      	movs	r2, #160	@ 0xa0
 8006c88:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	22a0      	movs	r2, #160	@ 0xa0
 8006c8e:	589b      	ldr	r3, [r3, r2]
}
 8006c90:	1c18      	adds	r0, r3, #0
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b007      	add	sp, #28
 8006c96:	bd90      	pop	{r4, r7, pc}
 8006c98:	be4ccccd 	.word	0xbe4ccccd
 8006c9c:	43f00000 	.word	0x43f00000
 8006ca0:	41a00000 	.word	0x41a00000

08006ca4 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8006ca4:	b590      	push	{r4, r7, lr}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6039      	str	r1, [r7, #0]
 8006cac:	0011      	movs	r1, r2
 8006cae:	1dfb      	adds	r3, r7, #7
 8006cb0:	1c02      	adds	r2, r0, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	1dbb      	adds	r3, r7, #6
 8006cb6:	1c0a      	adds	r2, r1, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8006cba:	4b08      	ldr	r3, [pc, #32]	@ (8006cdc <ReadRegister+0x38>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8006cc2:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <ReadRegister+0x38>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	1dba      	adds	r2, r7, #6
 8006cc8:	7814      	ldrb	r4, [r2, #0]
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	1dfa      	adds	r2, r7, #7
 8006cce:	7810      	ldrb	r0, [r2, #0]
 8006cd0:	0022      	movs	r2, r4
 8006cd2:	4798      	blx	r3
  }
}
 8006cd4:	46c0      	nop			@ (mov r8, r8)
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b003      	add	sp, #12
 8006cda:	bd90      	pop	{r4, r7, pc}
 8006cdc:	20000f74 	.word	0x20000f74

08006ce0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8006ce0:	b590      	push	{r4, r7, lr}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6039      	str	r1, [r7, #0]
 8006ce8:	0011      	movs	r1, r2
 8006cea:	1dfb      	adds	r3, r7, #7
 8006cec:	1c02      	adds	r2, r0, #0
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	1dbb      	adds	r3, r7, #6
 8006cf2:	1c0a      	adds	r2, r1, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8006cf6:	4b08      	ldr	r3, [pc, #32]	@ (8006d18 <WriteRegister+0x38>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8006cfe:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <WriteRegister+0x38>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	1dba      	adds	r2, r7, #6
 8006d04:	7814      	ldrb	r4, [r2, #0]
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	1dfa      	adds	r2, r7, #7
 8006d0a:	7810      	ldrb	r0, [r2, #0]
 8006d0c:	0022      	movs	r2, r4
 8006d0e:	4798      	blx	r3
  }
}
 8006d10:	46c0      	nop			@ (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b003      	add	sp, #12
 8006d16:	bd90      	pop	{r4, r7, pc}
 8006d18:	20000f78 	.word	0x20000f78

08006d1c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8006d26:	4b07      	ldr	r3, [pc, #28]	@ (8006d44 <SGP_Init+0x28>)
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8006d2c:	4b06      	ldr	r3, [pc, #24]	@ (8006d48 <SGP_Init+0x2c>)
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <SGP_Init+0x30>)
 8006d34:	2100      	movs	r1, #0
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7ff f930 	bl	8005f9c <GasIndexAlgorithm_init>
}
 8006d3c:	46c0      	nop			@ (mov r8, r8)
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b002      	add	sp, #8
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000f74 	.word	0x20000f74
 8006d48:	20000f78 	.word	0x20000f78
 8006d4c:	20000f88 	.word	0x20000f88

08006d50 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8006d54:	4b13      	ldr	r3, [pc, #76]	@ (8006da4 <SGP_StartMeasurement+0x54>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006d5c:	4b12      	ldr	r3, [pc, #72]	@ (8006da8 <SGP_StartMeasurement+0x58>)
 8006d5e:	2208      	movs	r2, #8
 8006d60:	0019      	movs	r1, r3
 8006d62:	2059      	movs	r0, #89	@ 0x59
 8006d64:	f7ff ffbc 	bl	8006ce0 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006d68:	f001 f98c 	bl	8008084 <GetCurrentHalTicks>
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	331e      	adds	r3, #30
 8006d70:	001a      	movs	r2, r3
 8006d72:	4b0e      	ldr	r3, [pc, #56]	@ (8006dac <SGP_StartMeasurement+0x5c>)
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e00c      	b.n	8006d92 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006d78:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <SGP_StartMeasurement+0x60>)
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	0019      	movs	r1, r3
 8006d7e:	2059      	movs	r0, #89	@ 0x59
 8006d80:	f7ff ffae 	bl	8006ce0 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8006d84:	f001 f97e 	bl	8008084 <GetCurrentHalTicks>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	33aa      	adds	r3, #170	@ 0xaa
 8006d8c:	001a      	movs	r2, r3
 8006d8e:	4b09      	ldr	r3, [pc, #36]	@ (8006db4 <SGP_StartMeasurement+0x64>)
 8006d90:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8006d92:	4b09      	ldr	r3, [pc, #36]	@ (8006db8 <SGP_StartMeasurement+0x68>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8006d98:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <SGP_StartMeasurement+0x6c>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
}
 8006d9e:	46c0      	nop			@ (mov r8, r8)
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20001030 	.word	0x20001030
 8006da8:	20000114 	.word	0x20000114
 8006dac:	20000128 	.word	0x20000128
 8006db0:	2000010c 	.word	0x2000010c
 8006db4:	20000120 	.word	0x20000120
 8006db8:	20000f86 	.word	0x20000f86
 8006dbc:	20000f87 	.word	0x20000f87

08006dc0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	4b04      	ldr	r3, [pc, #16]	@ (8006dd8 <SGP_HeatedUp+0x18>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f001 f879 	bl	8007ec0 <TimestampIsReached>
 8006dce:	0003      	movs	r3, r0
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	46c0      	nop			@ (mov r8, r8)
 8006dd8:	20000120 	.word	0x20000120

08006ddc <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8006de0:	4b04      	ldr	r3, [pc, #16]	@ (8006df4 <SGP_MeasurementReady+0x18>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f001 f86b 	bl	8007ec0 <TimestampIsReached>
 8006dea:	0003      	movs	r3, r0
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	46c0      	nop			@ (mov r8, r8)
 8006df4:	20000128 	.word	0x20000128

08006df8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8006dfc:	4b04      	ldr	r3, [pc, #16]	@ (8006e10 <SGP_MeasurementDone+0x18>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	0018      	movs	r0, r3
 8006e02:	f001 f85d 	bl	8007ec0 <TimestampIsReached>
 8006e06:	0003      	movs	r3, r0
}
 8006e08:	0018      	movs	r0, r3
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	20000124 	.word	0x20000124

08006e14 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8006e18:	4b04      	ldr	r3, [pc, #16]	@ (8006e2c <SGP_TurnHeaterOff+0x18>)
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	2059      	movs	r0, #89	@ 0x59
 8006e20:	f7ff ff5e 	bl	8006ce0 <WriteRegister>
}
 8006e24:	46c0      	nop			@ (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			@ (mov r8, r8)
 8006e2c:	20000104 	.word	0x20000104

08006e30 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8006e30:	b5b0      	push	{r4, r5, r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8006e38:	f7ff ffc2 	bl	8006dc0 <SGP_HeatedUp>
 8006e3c:	1e03      	subs	r3, r0, #0
 8006e3e:	d038      	beq.n	8006eb2 <SGP_GetMeasurementValues+0x82>
 8006e40:	4bdb      	ldr	r3, [pc, #876]	@ (80071b0 <SGP_GetMeasurementValues+0x380>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2201      	movs	r2, #1
 8006e46:	4053      	eors	r3, r2
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d031      	beq.n	8006eb2 <SGP_GetMeasurementValues+0x82>
 8006e4e:	4bd9      	ldr	r3, [pc, #868]	@ (80071b4 <SGP_GetMeasurementValues+0x384>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2201      	movs	r2, #1
 8006e54:	4053      	eors	r3, r2
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d02a      	beq.n	8006eb2 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8006e5c:	4ad6      	ldr	r2, [pc, #856]	@ (80071b8 <SGP_GetMeasurementValues+0x388>)
 8006e5e:	4bd7      	ldr	r3, [pc, #860]	@ (80071bc <SGP_GetMeasurementValues+0x38c>)
 8006e60:	0019      	movs	r1, r3
 8006e62:	2003      	movs	r0, #3
 8006e64:	f001 f882 	bl	8007f6c <CreateLine>
    HeatUpIsDone = true;
 8006e68:	4bd1      	ldr	r3, [pc, #836]	@ (80071b0 <SGP_GetMeasurementValues+0x380>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8006e6e:	4bd4      	ldr	r3, [pc, #848]	@ (80071c0 <SGP_GetMeasurementValues+0x390>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00d      	beq.n	8006e92 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006e76:	4bd3      	ldr	r3, [pc, #844]	@ (80071c4 <SGP_GetMeasurementValues+0x394>)
 8006e78:	2208      	movs	r2, #8
 8006e7a:	0019      	movs	r1, r3
 8006e7c:	2059      	movs	r0, #89	@ 0x59
 8006e7e:	f7ff ff2f 	bl	8006ce0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006e82:	f001 f8ff 	bl	8008084 <GetCurrentHalTicks>
 8006e86:	0003      	movs	r3, r0
 8006e88:	331e      	adds	r3, #30
 8006e8a:	001a      	movs	r2, r3
 8006e8c:	4bce      	ldr	r3, [pc, #824]	@ (80071c8 <SGP_GetMeasurementValues+0x398>)
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	e00c      	b.n	8006eac <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006e92:	4bce      	ldr	r3, [pc, #824]	@ (80071cc <SGP_GetMeasurementValues+0x39c>)
 8006e94:	2208      	movs	r2, #8
 8006e96:	0019      	movs	r1, r3
 8006e98:	2059      	movs	r0, #89	@ 0x59
 8006e9a:	f7ff ff21 	bl	8006ce0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006e9e:	f001 f8f1 	bl	8008084 <GetCurrentHalTicks>
 8006ea2:	0003      	movs	r3, r0
 8006ea4:	331e      	adds	r3, #30
 8006ea6:	001a      	movs	r2, r3
 8006ea8:	4bc7      	ldr	r3, [pc, #796]	@ (80071c8 <SGP_GetMeasurementValues+0x398>)
 8006eaa:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8006eac:	4bc1      	ldr	r3, [pc, #772]	@ (80071b4 <SGP_GetMeasurementValues+0x384>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8006eb2:	4bbf      	ldr	r3, [pc, #764]	@ (80071b0 <SGP_GetMeasurementValues+0x380>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d100      	bne.n	8006ebc <SGP_GetMeasurementValues+0x8c>
 8006eba:	e1b5      	b.n	8007228 <SGP_GetMeasurementValues+0x3f8>
 8006ebc:	f7ff ff8e 	bl	8006ddc <SGP_MeasurementReady>
 8006ec0:	1e03      	subs	r3, r0, #0
 8006ec2:	d100      	bne.n	8006ec6 <SGP_GetMeasurementValues+0x96>
 8006ec4:	e1b0      	b.n	8007228 <SGP_GetMeasurementValues+0x3f8>
 8006ec6:	4bc2      	ldr	r3, [pc, #776]	@ (80071d0 <SGP_GetMeasurementValues+0x3a0>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4053      	eors	r3, r2
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d100      	bne.n	8006ed6 <SGP_GetMeasurementValues+0xa6>
 8006ed4:	e1a8      	b.n	8007228 <SGP_GetMeasurementValues+0x3f8>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8006ed6:	4bbf      	ldr	r3, [pc, #764]	@ (80071d4 <SGP_GetMeasurementValues+0x3a4>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	4abe      	ldr	r2, [pc, #760]	@ (80071d8 <SGP_GetMeasurementValues+0x3a8>)
 8006ede:	49b7      	ldr	r1, [pc, #732]	@ (80071bc <SGP_GetMeasurementValues+0x38c>)
 8006ee0:	2003      	movs	r0, #3
 8006ee2:	f001 f843 	bl	8007f6c <CreateLine>
    MeasurementIsReady = true;
 8006ee6:	4bba      	ldr	r3, [pc, #744]	@ (80071d0 <SGP_GetMeasurementValues+0x3a0>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8006eec:	4bbb      	ldr	r3, [pc, #748]	@ (80071dc <SGP_GetMeasurementValues+0x3ac>)
 8006eee:	2203      	movs	r2, #3
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	2059      	movs	r0, #89	@ 0x59
 8006ef4:	f7ff fed6 	bl	8006ca4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8006ef8:	4bb8      	ldr	r3, [pc, #736]	@ (80071dc <SGP_GetMeasurementValues+0x3ac>)
 8006efa:	2203      	movs	r2, #3
 8006efc:	2103      	movs	r1, #3
 8006efe:	0018      	movs	r0, r3
 8006f00:	f000 f9f8 	bl	80072f4 <CheckCRC>
 8006f04:	0003      	movs	r3, r0
 8006f06:	001a      	movs	r2, r3
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4053      	eors	r3, r2
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d02a      	beq.n	8006f68 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8006f12:	4ab3      	ldr	r2, [pc, #716]	@ (80071e0 <SGP_GetMeasurementValues+0x3b0>)
 8006f14:	4bb3      	ldr	r3, [pc, #716]	@ (80071e4 <SGP_GetMeasurementValues+0x3b4>)
 8006f16:	0019      	movs	r1, r3
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f001 f827 	bl	8007f6c <CreateLine>
      Info("SGP_Measure buffer structure:");
 8006f1e:	4ab2      	ldr	r2, [pc, #712]	@ (80071e8 <SGP_GetMeasurementValues+0x3b8>)
 8006f20:	4bb2      	ldr	r3, [pc, #712]	@ (80071ec <SGP_GetMeasurementValues+0x3bc>)
 8006f22:	0019      	movs	r1, r3
 8006f24:	2002      	movs	r0, #2
 8006f26:	f001 f821 	bl	8007f6c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006f2a:	230f      	movs	r3, #15
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e012      	b.n	8006f5a <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8006f34:	240f      	movs	r4, #15
 8006f36:	193b      	adds	r3, r7, r4
 8006f38:	7818      	ldrb	r0, [r3, #0]
 8006f3a:	193b      	adds	r3, r7, r4
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	4aa7      	ldr	r2, [pc, #668]	@ (80071dc <SGP_GetMeasurementValues+0x3ac>)
 8006f40:	5cd3      	ldrb	r3, [r2, r3]
 8006f42:	4aab      	ldr	r2, [pc, #684]	@ (80071f0 <SGP_GetMeasurementValues+0x3c0>)
 8006f44:	499d      	ldr	r1, [pc, #628]	@ (80071bc <SGP_GetMeasurementValues+0x38c>)
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	0003      	movs	r3, r0
 8006f4a:	2003      	movs	r0, #3
 8006f4c:	f001 f80e 	bl	8007f6c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006f50:	193b      	adds	r3, r7, r4
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	193b      	adds	r3, r7, r4
 8006f56:	3201      	adds	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	230f      	movs	r3, #15
 8006f5c:	18fb      	adds	r3, r7, r3
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d9e7      	bls.n	8006f34 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e177      	b.n	8007258 <SGP_GetMeasurementValues+0x428>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8006f68:	f001 f88c 	bl	8008084 <GetCurrentHalTicks>
 8006f6c:	0003      	movs	r3, r0
 8006f6e:	22fa      	movs	r2, #250	@ 0xfa
 8006f70:	0092      	lsls	r2, r2, #2
 8006f72:	189a      	adds	r2, r3, r2
 8006f74:	4b9f      	ldr	r3, [pc, #636]	@ (80071f4 <SGP_GetMeasurementValues+0x3c4>)
 8006f76:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8006f78:	f7ff ff4c 	bl	8006e14 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8006f7c:	4b95      	ldr	r3, [pc, #596]	@ (80071d4 <SGP_GetMeasurementValues+0x3a4>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	4b93      	ldr	r3, [pc, #588]	@ (80071d4 <SGP_GetMeasurementValues+0x3a4>)
 8006f86:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8006f88:	4b92      	ldr	r3, [pc, #584]	@ (80071d4 <SGP_GetMeasurementValues+0x3a4>)
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	4b9a      	ldr	r3, [pc, #616]	@ (80071f8 <SGP_GetMeasurementValues+0x3c8>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d200      	bcs.n	8006f96 <SGP_GetMeasurementValues+0x166>
 8006f94:	e148      	b.n	8007228 <SGP_GetMeasurementValues+0x3f8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8006f96:	4b91      	ldr	r3, [pc, #580]	@ (80071dc <SGP_GetMeasurementValues+0x3ac>)
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	b21a      	sxth	r2, r3
 8006f9e:	4b8f      	ldr	r3, [pc, #572]	@ (80071dc <SGP_GetMeasurementValues+0x3ac>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b21b      	sxth	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b21a      	sxth	r2, r3
 8006fa8:	240c      	movs	r4, #12
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8006fae:	193b      	adds	r3, r7, r4
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	4a92      	ldr	r2, [pc, #584]	@ (80071fc <SGP_GetMeasurementValues+0x3cc>)
 8006fb4:	4981      	ldr	r1, [pc, #516]	@ (80071bc <SGP_GetMeasurementValues+0x38c>)
 8006fb6:	2003      	movs	r0, #3
 8006fb8:	f000 ffd8 	bl	8007f6c <CreateLine>
      int32_t tempVocIndex = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8006fc0:	193b      	adds	r3, r7, r4
 8006fc2:	8819      	ldrh	r1, [r3, #0]
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	18fa      	adds	r2, r7, r3
 8006fc8:	4b8d      	ldr	r3, [pc, #564]	@ (8007200 <SGP_GetMeasurementValues+0x3d0>)
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f7ff f848 	bl	8006060 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a8c      	ldr	r2, [pc, #560]	@ (8007204 <SGP_GetMeasurementValues+0x3d4>)
 8006fd4:	4979      	ldr	r1, [pc, #484]	@ (80071bc <SGP_GetMeasurementValues+0x38c>)
 8006fd6:	2003      	movs	r0, #3
 8006fd8:	f000 ffc8 	bl	8007f6c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	dd60      	ble.n	80070ac <SGP_GetMeasurementValues+0x27c>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b64      	cmp	r3, #100	@ 0x64
 8006ff0:	dc5c      	bgt.n	80070ac <SGP_GetMeasurementValues+0x27c>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f7fc f960 	bl	80032bc <__aeabi_i2d>
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4b82      	ldr	r3, [pc, #520]	@ (8007208 <SGP_GetMeasurementValues+0x3d8>)
 8007000:	f7fa fe56 	bl	8001cb0 <__aeabi_ddiv>
 8007004:	0002      	movs	r2, r0
 8007006:	000b      	movs	r3, r1
 8007008:	2000      	movs	r0, #0
 800700a:	4980      	ldr	r1, [pc, #512]	@ (800720c <SGP_GetMeasurementValues+0x3dc>)
 800700c:	f7fb fd5c 	bl	8002ac8 <__aeabi_dsub>
 8007010:	0002      	movs	r2, r0
 8007012:	000b      	movs	r3, r1
 8007014:	0014      	movs	r4, r2
 8007016:	001d      	movs	r5, r3
 8007018:	4b7d      	ldr	r3, [pc, #500]	@ (8007210 <SGP_GetMeasurementValues+0x3e0>)
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	0018      	movs	r0, r3
 800701e:	f7fc f94d 	bl	80032bc <__aeabi_i2d>
 8007022:	0002      	movs	r2, r0
 8007024:	000b      	movs	r3, r1
 8007026:	0020      	movs	r0, r4
 8007028:	0029      	movs	r1, r5
 800702a:	f7fb fa85 	bl	8002538 <__aeabi_dmul>
 800702e:	0002      	movs	r2, r0
 8007030:	000b      	movs	r3, r1
 8007032:	0010      	movs	r0, r2
 8007034:	0019      	movs	r1, r3
 8007036:	f7f9 fad7 	bl	80005e8 <__aeabi_d2uiz>
 800703a:	0003      	movs	r3, r0
 800703c:	b29a      	uxth	r2, r3
 800703e:	4b75      	ldr	r3, [pc, #468]	@ (8007214 <SGP_GetMeasurementValues+0x3e4>)
 8007040:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	0018      	movs	r0, r3
 8007048:	f7fc f938 	bl	80032bc <__aeabi_i2d>
 800704c:	2200      	movs	r2, #0
 800704e:	4b6e      	ldr	r3, [pc, #440]	@ (8007208 <SGP_GetMeasurementValues+0x3d8>)
 8007050:	f7fa fe2e 	bl	8001cb0 <__aeabi_ddiv>
 8007054:	0002      	movs	r2, r0
 8007056:	000b      	movs	r3, r1
 8007058:	0014      	movs	r4, r2
 800705a:	001d      	movs	r5, r3
 800705c:	4b6c      	ldr	r3, [pc, #432]	@ (8007210 <SGP_GetMeasurementValues+0x3e0>)
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	0018      	movs	r0, r3
 8007062:	f7fc f92b 	bl	80032bc <__aeabi_i2d>
 8007066:	0002      	movs	r2, r0
 8007068:	000b      	movs	r3, r1
 800706a:	0020      	movs	r0, r4
 800706c:	0029      	movs	r1, r5
 800706e:	f7fb fa63 	bl	8002538 <__aeabi_dmul>
 8007072:	0002      	movs	r2, r0
 8007074:	000b      	movs	r3, r1
 8007076:	0010      	movs	r0, r2
 8007078:	0019      	movs	r1, r3
 800707a:	f7f9 fab5 	bl	80005e8 <__aeabi_d2uiz>
 800707e:	0003      	movs	r3, r0
 8007080:	b29a      	uxth	r2, r3
 8007082:	4b65      	ldr	r3, [pc, #404]	@ (8007218 <SGP_GetMeasurementValues+0x3e8>)
 8007084:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8007086:	4b62      	ldr	r3, [pc, #392]	@ (8007210 <SGP_GetMeasurementValues+0x3e0>)
 8007088:	881a      	ldrh	r2, [r3, #0]
 800708a:	4b64      	ldr	r3, [pc, #400]	@ (800721c <SGP_GetMeasurementValues+0x3ec>)
 800708c:	801a      	strh	r2, [r3, #0]
      TIM2->CCR1 = Red;
 800708e:	4b63      	ldr	r3, [pc, #396]	@ (800721c <SGP_GetMeasurementValues+0x3ec>)
 8007090:	881a      	ldrh	r2, [r3, #0]
 8007092:	2380      	movs	r3, #128	@ 0x80
 8007094:	05db      	lsls	r3, r3, #23
 8007096:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2->CCR3 = Green;
 8007098:	4b5e      	ldr	r3, [pc, #376]	@ (8007214 <SGP_GetMeasurementValues+0x3e4>)
 800709a:	881a      	ldrh	r2, [r3, #0]
 800709c:	2380      	movs	r3, #128	@ 0x80
 800709e:	05db      	lsls	r3, r3, #23
 80070a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = Blue;
 80070a2:	4b5d      	ldr	r3, [pc, #372]	@ (8007218 <SGP_GetMeasurementValues+0x3e8>)
 80070a4:	881a      	ldrh	r2, [r3, #0]
 80070a6:	2380      	movs	r3, #128	@ 0x80
 80070a8:	05db      	lsls	r3, r3, #23
 80070aa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      if(*vocIndex > 100){
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b64      	cmp	r3, #100	@ 0x64
 80070b2:	dd6c      	ble.n	800718e <SGP_GetMeasurementValues+0x35e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	0018      	movs	r0, r3
 80070ba:	f7fc f8ff 	bl	80032bc <__aeabi_i2d>
 80070be:	2200      	movs	r2, #0
 80070c0:	4b51      	ldr	r3, [pc, #324]	@ (8007208 <SGP_GetMeasurementValues+0x3d8>)
 80070c2:	f7fb fd01 	bl	8002ac8 <__aeabi_dsub>
 80070c6:	0002      	movs	r2, r0
 80070c8:	000b      	movs	r3, r1
 80070ca:	0010      	movs	r0, r2
 80070cc:	0019      	movs	r1, r3
 80070ce:	2200      	movs	r2, #0
 80070d0:	4b53      	ldr	r3, [pc, #332]	@ (8007220 <SGP_GetMeasurementValues+0x3f0>)
 80070d2:	f7fa fded 	bl	8001cb0 <__aeabi_ddiv>
 80070d6:	0002      	movs	r2, r0
 80070d8:	000b      	movs	r3, r1
 80070da:	0014      	movs	r4, r2
 80070dc:	001d      	movs	r5, r3
 80070de:	4b4c      	ldr	r3, [pc, #304]	@ (8007210 <SGP_GetMeasurementValues+0x3e0>)
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7fc f8ea 	bl	80032bc <__aeabi_i2d>
 80070e8:	0002      	movs	r2, r0
 80070ea:	000b      	movs	r3, r1
 80070ec:	0020      	movs	r0, r4
 80070ee:	0029      	movs	r1, r5
 80070f0:	f7fb fa22 	bl	8002538 <__aeabi_dmul>
 80070f4:	0002      	movs	r2, r0
 80070f6:	000b      	movs	r3, r1
 80070f8:	0010      	movs	r0, r2
 80070fa:	0019      	movs	r1, r3
 80070fc:	f7f9 fa74 	bl	80005e8 <__aeabi_d2uiz>
 8007100:	0003      	movs	r3, r0
 8007102:	b29a      	uxth	r2, r3
 8007104:	4b43      	ldr	r3, [pc, #268]	@ (8007214 <SGP_GetMeasurementValues+0x3e4>)
 8007106:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	0018      	movs	r0, r3
 800710e:	f7fc f8d5 	bl	80032bc <__aeabi_i2d>
 8007112:	2200      	movs	r2, #0
 8007114:	4b3c      	ldr	r3, [pc, #240]	@ (8007208 <SGP_GetMeasurementValues+0x3d8>)
 8007116:	f7fb fcd7 	bl	8002ac8 <__aeabi_dsub>
 800711a:	0002      	movs	r2, r0
 800711c:	000b      	movs	r3, r1
 800711e:	0010      	movs	r0, r2
 8007120:	0019      	movs	r1, r3
 8007122:	2200      	movs	r2, #0
 8007124:	4b3e      	ldr	r3, [pc, #248]	@ (8007220 <SGP_GetMeasurementValues+0x3f0>)
 8007126:	f7fa fdc3 	bl	8001cb0 <__aeabi_ddiv>
 800712a:	0002      	movs	r2, r0
 800712c:	000b      	movs	r3, r1
 800712e:	2000      	movs	r0, #0
 8007130:	4936      	ldr	r1, [pc, #216]	@ (800720c <SGP_GetMeasurementValues+0x3dc>)
 8007132:	f7fb fcc9 	bl	8002ac8 <__aeabi_dsub>
 8007136:	0002      	movs	r2, r0
 8007138:	000b      	movs	r3, r1
 800713a:	0014      	movs	r4, r2
 800713c:	001d      	movs	r5, r3
 800713e:	4b34      	ldr	r3, [pc, #208]	@ (8007210 <SGP_GetMeasurementValues+0x3e0>)
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	0018      	movs	r0, r3
 8007144:	f7fc f8ba 	bl	80032bc <__aeabi_i2d>
 8007148:	0002      	movs	r2, r0
 800714a:	000b      	movs	r3, r1
 800714c:	0020      	movs	r0, r4
 800714e:	0029      	movs	r1, r5
 8007150:	f7fb f9f2 	bl	8002538 <__aeabi_dmul>
 8007154:	0002      	movs	r2, r0
 8007156:	000b      	movs	r3, r1
 8007158:	0010      	movs	r0, r2
 800715a:	0019      	movs	r1, r3
 800715c:	f7f9 fa44 	bl	80005e8 <__aeabi_d2uiz>
 8007160:	0003      	movs	r3, r0
 8007162:	b29a      	uxth	r2, r3
 8007164:	4b2d      	ldr	r3, [pc, #180]	@ (800721c <SGP_GetMeasurementValues+0x3ec>)
 8007166:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007168:	4b29      	ldr	r3, [pc, #164]	@ (8007210 <SGP_GetMeasurementValues+0x3e0>)
 800716a:	881a      	ldrh	r2, [r3, #0]
 800716c:	4b2a      	ldr	r3, [pc, #168]	@ (8007218 <SGP_GetMeasurementValues+0x3e8>)
 800716e:	801a      	strh	r2, [r3, #0]
        TIM2->CCR1 = Red;
 8007170:	4b2a      	ldr	r3, [pc, #168]	@ (800721c <SGP_GetMeasurementValues+0x3ec>)
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	2380      	movs	r3, #128	@ 0x80
 8007176:	05db      	lsls	r3, r3, #23
 8007178:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR3 = Green;
 800717a:	4b26      	ldr	r3, [pc, #152]	@ (8007214 <SGP_GetMeasurementValues+0x3e4>)
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	2380      	movs	r3, #128	@ 0x80
 8007180:	05db      	lsls	r3, r3, #23
 8007182:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2->CCR4 = Blue;
 8007184:	4b24      	ldr	r3, [pc, #144]	@ (8007218 <SGP_GetMeasurementValues+0x3e8>)
 8007186:	881a      	ldrh	r2, [r3, #0]
 8007188:	2380      	movs	r3, #128	@ 0x80
 800718a:	05db      	lsls	r3, r3, #23
 800718c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      SGP_AmountOfSamplesDone = 0;
 800718e:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <SGP_GetMeasurementValues+0x3a4>)
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007194:	4a23      	ldr	r2, [pc, #140]	@ (8007224 <SGP_GetMeasurementValues+0x3f4>)
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <SGP_GetMeasurementValues+0x38c>)
 8007198:	0019      	movs	r1, r3
 800719a:	2003      	movs	r0, #3
 800719c:	f000 fee6 	bl	8007f6c <CreateLine>
      HT_MeasurementReceived = false;
 80071a0:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <SGP_GetMeasurementValues+0x390>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80071a6:	4b03      	ldr	r3, [pc, #12]	@ (80071b4 <SGP_GetMeasurementValues+0x384>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e053      	b.n	8007258 <SGP_GetMeasurementValues+0x428>
 80071b0:	20000f86 	.word	0x20000f86
 80071b4:	20001031 	.word	0x20001031
 80071b8:	08012ca4 	.word	0x08012ca4
 80071bc:	08012cd0 	.word	0x08012cd0
 80071c0:	20001030 	.word	0x20001030
 80071c4:	20000114 	.word	0x20000114
 80071c8:	20000128 	.word	0x20000128
 80071cc:	2000010c 	.word	0x2000010c
 80071d0:	20000f87 	.word	0x20000f87
 80071d4:	20000f85 	.word	0x20000f85
 80071d8:	08012cd4 	.word	0x08012cd4
 80071dc:	20000f7c 	.word	0x20000f7c
 80071e0:	08012d04 	.word	0x08012d04
 80071e4:	08012d28 	.word	0x08012d28
 80071e8:	08012d2c 	.word	0x08012d2c
 80071ec:	08012d4c 	.word	0x08012d4c
 80071f0:	08012d50 	.word	0x08012d50
 80071f4:	20000124 	.word	0x20000124
 80071f8:	2000011c 	.word	0x2000011c
 80071fc:	08012d70 	.word	0x08012d70
 8007200:	20000f88 	.word	0x20000f88
 8007204:	08012d84 	.word	0x08012d84
 8007208:	40590000 	.word	0x40590000
 800720c:	3ff00000 	.word	0x3ff00000
 8007210:	2000012c 	.word	0x2000012c
 8007214:	20001036 	.word	0x20001036
 8007218:	20001034 	.word	0x20001034
 800721c:	20001032 	.word	0x20001032
 8007220:	40790000 	.word	0x40790000
 8007224:	08012d98 	.word	0x08012d98
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007228:	f7ff fde6 	bl	8006df8 <SGP_MeasurementDone>
 800722c:	1e03      	subs	r3, r0, #0
 800722e:	d012      	beq.n	8007256 <SGP_GetMeasurementValues+0x426>
 8007230:	4b0b      	ldr	r3, [pc, #44]	@ (8007260 <SGP_GetMeasurementValues+0x430>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00e      	beq.n	8007256 <SGP_GetMeasurementValues+0x426>
 8007238:	4b0a      	ldr	r3, [pc, #40]	@ (8007264 <SGP_GetMeasurementValues+0x434>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <SGP_GetMeasurementValues+0x426>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007240:	4a09      	ldr	r2, [pc, #36]	@ (8007268 <SGP_GetMeasurementValues+0x438>)
 8007242:	4b0a      	ldr	r3, [pc, #40]	@ (800726c <SGP_GetMeasurementValues+0x43c>)
 8007244:	0019      	movs	r1, r3
 8007246:	2003      	movs	r0, #3
 8007248:	f000 fe90 	bl	8007f6c <CreateLine>
    SGP_StartMeasurement();
 800724c:	f7ff fd80 	bl	8006d50 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007250:	4b07      	ldr	r3, [pc, #28]	@ (8007270 <SGP_GetMeasurementValues+0x440>)
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007256:	2300      	movs	r3, #0
}
 8007258:	0018      	movs	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	b004      	add	sp, #16
 800725e:	bdb0      	pop	{r4, r5, r7, pc}
 8007260:	20000f86 	.word	0x20000f86
 8007264:	20000f87 	.word	0x20000f87
 8007268:	08012dbc 	.word	0x08012dbc
 800726c:	08012cd0 	.word	0x08012cd0
 8007270:	20001031 	.word	0x20001031

08007274 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800727a:	4b1a      	ldr	r3, [pc, #104]	@ (80072e4 <SGP_DeviceConnected+0x70>)
 800727c:	2202      	movs	r2, #2
 800727e:	0019      	movs	r1, r3
 8007280:	2059      	movs	r0, #89	@ 0x59
 8007282:	f7ff fd2d 	bl	8006ce0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007286:	2001      	movs	r0, #1
 8007288:	f001 fa72 	bl	8008770 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800728c:	4b16      	ldr	r3, [pc, #88]	@ (80072e8 <SGP_DeviceConnected+0x74>)
 800728e:	2209      	movs	r2, #9
 8007290:	0019      	movs	r1, r3
 8007292:	2059      	movs	r0, #89	@ 0x59
 8007294:	f7ff fd06 	bl	8006ca4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007298:	1dfb      	adds	r3, r7, #7
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	e011      	b.n	80072c4 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80072a0:	1dfb      	adds	r3, r7, #7
 80072a2:	7818      	ldrb	r0, [r3, #0]
 80072a4:	1dfb      	adds	r3, r7, #7
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	4a0f      	ldr	r2, [pc, #60]	@ (80072e8 <SGP_DeviceConnected+0x74>)
 80072aa:	5cd3      	ldrb	r3, [r2, r3]
 80072ac:	4a0f      	ldr	r2, [pc, #60]	@ (80072ec <SGP_DeviceConnected+0x78>)
 80072ae:	4910      	ldr	r1, [pc, #64]	@ (80072f0 <SGP_DeviceConnected+0x7c>)
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	0003      	movs	r3, r0
 80072b4:	2002      	movs	r0, #2
 80072b6:	f000 fe59 	bl	8007f6c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80072ba:	1dfb      	adds	r3, r7, #7
 80072bc:	781a      	ldrb	r2, [r3, #0]
 80072be:	1dfb      	adds	r3, r7, #7
 80072c0:	3201      	adds	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	1dfb      	adds	r3, r7, #7
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d9e9      	bls.n	80072a0 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80072cc:	4b06      	ldr	r3, [pc, #24]	@ (80072e8 <SGP_DeviceConnected+0x74>)
 80072ce:	2203      	movs	r2, #3
 80072d0:	2109      	movs	r1, #9
 80072d2:	0018      	movs	r0, r3
 80072d4:	f000 f80e 	bl	80072f4 <CheckCRC>
 80072d8:	0003      	movs	r3, r0
}
 80072da:	0018      	movs	r0, r3
 80072dc:	46bd      	mov	sp, r7
 80072de:	b002      	add	sp, #8
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	20000108 	.word	0x20000108
 80072e8:	20000f7c 	.word	0x20000f7c
 80072ec:	08012ddc 	.word	0x08012ddc
 80072f0:	08012d4c 	.word	0x08012d4c

080072f4 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	b08f      	sub	sp, #60	@ 0x3c
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6278      	str	r0, [r7, #36]	@ 0x24
 80072fc:	0008      	movs	r0, r1
 80072fe:	0011      	movs	r1, r2
 8007300:	2323      	movs	r3, #35	@ 0x23
 8007302:	18fb      	adds	r3, r7, r3
 8007304:	1c02      	adds	r2, r0, #0
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	2322      	movs	r3, #34	@ 0x22
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	1c0a      	adds	r2, r1, #0
 800730e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007310:	2317      	movs	r3, #23
 8007312:	2220      	movs	r2, #32
 8007314:	189b      	adds	r3, r3, r2
 8007316:	19db      	adds	r3, r3, r7
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
 800731c:	e09f      	b.n	800745e <CheckCRC+0x16a>
 800731e:	466b      	mov	r3, sp
 8007320:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007322:	2322      	movs	r3, #34	@ 0x22
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	001a      	movs	r2, r3
 800732a:	3a01      	subs	r2, #1
 800732c:	633a      	str	r2, [r7, #48]	@ 0x30
 800732e:	60bb      	str	r3, [r7, #8]
 8007330:	2200      	movs	r2, #0
 8007332:	60fa      	str	r2, [r7, #12]
 8007334:	68b8      	ldr	r0, [r7, #8]
 8007336:	68f9      	ldr	r1, [r7, #12]
 8007338:	0002      	movs	r2, r0
 800733a:	0f52      	lsrs	r2, r2, #29
 800733c:	000c      	movs	r4, r1
 800733e:	00e4      	lsls	r4, r4, #3
 8007340:	61fc      	str	r4, [r7, #28]
 8007342:	69fc      	ldr	r4, [r7, #28]
 8007344:	4314      	orrs	r4, r2
 8007346:	61fc      	str	r4, [r7, #28]
 8007348:	0002      	movs	r2, r0
 800734a:	00d2      	lsls	r2, r2, #3
 800734c:	61ba      	str	r2, [r7, #24]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	6838      	ldr	r0, [r7, #0]
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	0002      	movs	r2, r0
 800735a:	0f52      	lsrs	r2, r2, #29
 800735c:	000c      	movs	r4, r1
 800735e:	00e4      	lsls	r4, r4, #3
 8007360:	617c      	str	r4, [r7, #20]
 8007362:	697c      	ldr	r4, [r7, #20]
 8007364:	4314      	orrs	r4, r2
 8007366:	617c      	str	r4, [r7, #20]
 8007368:	0002      	movs	r2, r0
 800736a:	00d2      	lsls	r2, r2, #3
 800736c:	613a      	str	r2, [r7, #16]
 800736e:	3307      	adds	r3, #7
 8007370:	08db      	lsrs	r3, r3, #3
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	466a      	mov	r2, sp
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	469d      	mov	sp, r3
 800737a:	466b      	mov	r3, sp
 800737c:	3300      	adds	r3, #0
 800737e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007380:	2316      	movs	r3, #22
 8007382:	2220      	movs	r2, #32
 8007384:	189b      	adds	r3, r3, r2
 8007386:	19db      	adds	r3, r3, r7
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	e01e      	b.n	80073cc <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800738e:	2317      	movs	r3, #23
 8007390:	2220      	movs	r2, #32
 8007392:	189b      	adds	r3, r3, r2
 8007394:	19db      	adds	r3, r3, r7
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	2116      	movs	r1, #22
 800739a:	2320      	movs	r3, #32
 800739c:	18cb      	adds	r3, r1, r3
 800739e:	19db      	adds	r3, r3, r7
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	18d3      	adds	r3, r2, r3
 80073a4:	001a      	movs	r2, r3
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	189a      	adds	r2, r3, r2
 80073aa:	0008      	movs	r0, r1
 80073ac:	2320      	movs	r3, #32
 80073ae:	18cb      	adds	r3, r1, r3
 80073b0:	19db      	adds	r3, r3, r7
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	7811      	ldrb	r1, [r2, #0]
 80073b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80073ba:	2320      	movs	r3, #32
 80073bc:	18c3      	adds	r3, r0, r3
 80073be:	19db      	adds	r3, r3, r7
 80073c0:	781a      	ldrb	r2, [r3, #0]
 80073c2:	2320      	movs	r3, #32
 80073c4:	18c3      	adds	r3, r0, r3
 80073c6:	19db      	adds	r3, r3, r7
 80073c8:	3201      	adds	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	2316      	movs	r3, #22
 80073ce:	2220      	movs	r2, #32
 80073d0:	189b      	adds	r3, r3, r2
 80073d2:	19da      	adds	r2, r3, r7
 80073d4:	2322      	movs	r3, #34	@ 0x22
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	7812      	ldrb	r2, [r2, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d3d6      	bcc.n	800738e <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80073e0:	2417      	movs	r4, #23
 80073e2:	2320      	movs	r3, #32
 80073e4:	18e3      	adds	r3, r4, r3
 80073e6:	19db      	adds	r3, r3, r7
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	2322      	movs	r3, #34	@ 0x22
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	18d3      	adds	r3, r2, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f6:	18d2      	adds	r2, r2, r3
 80073f8:	250b      	movs	r5, #11
 80073fa:	2320      	movs	r3, #32
 80073fc:	18eb      	adds	r3, r5, r3
 80073fe:	19db      	adds	r3, r3, r7
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007404:	2322      	movs	r3, #34	@ 0x22
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	3b01      	subs	r3, #1
 800740c:	b2da      	uxtb	r2, r3
 800740e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007410:	0011      	movs	r1, r2
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f838 	bl	8007488 <CalculateCRC>
 8007418:	0003      	movs	r3, r0
 800741a:	001a      	movs	r2, r3
 800741c:	2320      	movs	r3, #32
 800741e:	18eb      	adds	r3, r5, r3
 8007420:	19db      	adds	r3, r3, r7
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	4293      	cmp	r3, r2
 8007426:	d00c      	beq.n	8007442 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007428:	2320      	movs	r3, #32
 800742a:	18e3      	adds	r3, r4, r3
 800742c:	19db      	adds	r3, r3, r7
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	4a13      	ldr	r2, [pc, #76]	@ (8007480 <CheckCRC+0x18c>)
 8007434:	4913      	ldr	r1, [pc, #76]	@ (8007484 <CheckCRC+0x190>)
 8007436:	2001      	movs	r0, #1
 8007438:	f000 fd98 	bl	8007f6c <CreateLine>
      return false;
 800743c:	2300      	movs	r3, #0
 800743e:	46b5      	mov	sp, r6
 8007440:	e019      	b.n	8007476 <CheckCRC+0x182>
 8007442:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007444:	2217      	movs	r2, #23
 8007446:	2320      	movs	r3, #32
 8007448:	18d3      	adds	r3, r2, r3
 800744a:	19db      	adds	r3, r3, r7
 800744c:	2120      	movs	r1, #32
 800744e:	1852      	adds	r2, r2, r1
 8007450:	19d1      	adds	r1, r2, r7
 8007452:	2222      	movs	r2, #34	@ 0x22
 8007454:	18ba      	adds	r2, r7, r2
 8007456:	7809      	ldrb	r1, [r1, #0]
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	188a      	adds	r2, r1, r2
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	2317      	movs	r3, #23
 8007460:	2220      	movs	r2, #32
 8007462:	189b      	adds	r3, r3, r2
 8007464:	19da      	adds	r2, r3, r7
 8007466:	2323      	movs	r3, #35	@ 0x23
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d200      	bcs.n	8007474 <CheckCRC+0x180>
 8007472:	e754      	b.n	800731e <CheckCRC+0x2a>
    }
  }
  return true;
 8007474:	2301      	movs	r3, #1
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b00f      	add	sp, #60	@ 0x3c
 800747c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	08012dfc 	.word	0x08012dfc
 8007484:	08012d28 	.word	0x08012d28

08007488 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	000a      	movs	r2, r1
 8007492:	1cfb      	adds	r3, r7, #3
 8007494:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8007496:	230f      	movs	r3, #15
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	22ff      	movs	r2, #255	@ 0xff
 800749c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800749e:	230e      	movs	r3, #14
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	e037      	b.n	8007518 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80074a8:	230e      	movs	r3, #14
 80074aa:	18fb      	adds	r3, r7, r3
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	18d3      	adds	r3, r2, r3
 80074b2:	7819      	ldrb	r1, [r3, #0]
 80074b4:	220f      	movs	r2, #15
 80074b6:	18bb      	adds	r3, r7, r2
 80074b8:	18ba      	adds	r2, r7, r2
 80074ba:	7812      	ldrb	r2, [r2, #0]
 80074bc:	404a      	eors	r2, r1
 80074be:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80074c0:	230d      	movs	r3, #13
 80074c2:	18fb      	adds	r3, r7, r3
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e01b      	b.n	8007502 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80074ca:	210f      	movs	r1, #15
 80074cc:	187b      	adds	r3, r7, r1
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da09      	bge.n	80074ea <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80074d6:	187b      	adds	r3, r7, r1
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	2231      	movs	r2, #49	@ 0x31
 80074e0:	4053      	eors	r3, r2
 80074e2:	b25a      	sxtb	r2, r3
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	e005      	b.n	80074f6 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80074ea:	230f      	movs	r3, #15
 80074ec:	18fa      	adds	r2, r7, r3
 80074ee:	18fb      	adds	r3, r7, r3
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	18db      	adds	r3, r3, r3
 80074f4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80074f6:	210d      	movs	r1, #13
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	187b      	adds	r3, r7, r1
 80074fe:	3201      	adds	r2, #1
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	230d      	movs	r3, #13
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b07      	cmp	r3, #7
 800750a:	d9de      	bls.n	80074ca <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800750c:	210e      	movs	r1, #14
 800750e:	187b      	adds	r3, r7, r1
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	187b      	adds	r3, r7, r1
 8007514:	3201      	adds	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	230e      	movs	r3, #14
 800751a:	18fa      	adds	r2, r7, r3
 800751c:	1cfb      	adds	r3, r7, #3
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d3c0      	bcc.n	80074a8 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8007526:	230f      	movs	r3, #15
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	781b      	ldrb	r3, [r3, #0]
}
 800752c:	0018      	movs	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	b004      	add	sp, #16
 8007532:	bd80      	pop	{r7, pc}

08007534 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4936      	ldr	r1, [pc, #216]	@ (800761c <SGP_GetHT+0xe8>)
 8007544:	1c18      	adds	r0, r3, #0
 8007546:	f7f9 f939 	bl	80007bc <__aeabi_fadd>
 800754a:	1c03      	adds	r3, r0, #0
 800754c:	4934      	ldr	r1, [pc, #208]	@ (8007620 <SGP_GetHT+0xec>)
 800754e:	1c18      	adds	r0, r3, #0
 8007550:	f7f9 fabe 	bl	8000ad0 <__aeabi_fdiv>
 8007554:	1c03      	adds	r3, r0, #0
 8007556:	4933      	ldr	r1, [pc, #204]	@ (8007624 <SGP_GetHT+0xf0>)
 8007558:	1c18      	adds	r0, r3, #0
 800755a:	f7f9 fc9f 	bl	8000e9c <__aeabi_fmul>
 800755e:	1c03      	adds	r3, r0, #0
 8007560:	1c18      	adds	r0, r3, #0
 8007562:	f7f9 f829 	bl	80005b8 <__aeabi_f2uiz>
 8007566:	0003      	movs	r3, r0
 8007568:	b29a      	uxth	r2, r3
 800756a:	4b2f      	ldr	r3, [pc, #188]	@ (8007628 <SGP_GetHT+0xf4>)
 800756c:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	492e      	ldr	r1, [pc, #184]	@ (800762c <SGP_GetHT+0xf8>)
 8007574:	1c18      	adds	r0, r3, #0
 8007576:	f7f9 faab 	bl	8000ad0 <__aeabi_fdiv>
 800757a:	1c03      	adds	r3, r0, #0
 800757c:	4929      	ldr	r1, [pc, #164]	@ (8007624 <SGP_GetHT+0xf0>)
 800757e:	1c18      	adds	r0, r3, #0
 8007580:	f7f9 fc8c 	bl	8000e9c <__aeabi_fmul>
 8007584:	1c03      	adds	r3, r0, #0
 8007586:	1c18      	adds	r0, r3, #0
 8007588:	f7f9 f816 	bl	80005b8 <__aeabi_f2uiz>
 800758c:	0003      	movs	r3, r0
 800758e:	b29a      	uxth	r2, r3
 8007590:	4b27      	ldr	r3, [pc, #156]	@ (8007630 <SGP_GetHT+0xfc>)
 8007592:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8007594:	4b26      	ldr	r3, [pc, #152]	@ (8007630 <SGP_GetHT+0xfc>)
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	0a1b      	lsrs	r3, r3, #8
 800759a:	b29b      	uxth	r3, r3
 800759c:	b2da      	uxtb	r2, r3
 800759e:	4b25      	ldr	r3, [pc, #148]	@ (8007634 <SGP_GetHT+0x100>)
 80075a0:	709a      	strb	r2, [r3, #2]
 80075a2:	4b24      	ldr	r3, [pc, #144]	@ (8007634 <SGP_GetHT+0x100>)
 80075a4:	789a      	ldrb	r2, [r3, #2]
 80075a6:	210c      	movs	r1, #12
 80075a8:	187b      	adds	r3, r7, r1
 80075aa:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 80075ac:	4b20      	ldr	r3, [pc, #128]	@ (8007630 <SGP_GetHT+0xfc>)
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	4b20      	ldr	r3, [pc, #128]	@ (8007634 <SGP_GetHT+0x100>)
 80075b4:	70da      	strb	r2, [r3, #3]
 80075b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007634 <SGP_GetHT+0x100>)
 80075b8:	78da      	ldrb	r2, [r3, #3]
 80075ba:	187b      	adds	r3, r7, r1
 80075bc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80075be:	187b      	adds	r3, r7, r1
 80075c0:	2102      	movs	r1, #2
 80075c2:	0018      	movs	r0, r3
 80075c4:	f7ff ff60 	bl	8007488 <CalculateCRC>
 80075c8:	0003      	movs	r3, r0
 80075ca:	001a      	movs	r2, r3
 80075cc:	4b19      	ldr	r3, [pc, #100]	@ (8007634 <SGP_GetHT+0x100>)
 80075ce:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80075d0:	4b15      	ldr	r3, [pc, #84]	@ (8007628 <SGP_GetHT+0xf4>)
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	0a1b      	lsrs	r3, r3, #8
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	4b16      	ldr	r3, [pc, #88]	@ (8007634 <SGP_GetHT+0x100>)
 80075dc:	715a      	strb	r2, [r3, #5]
 80075de:	4b15      	ldr	r3, [pc, #84]	@ (8007634 <SGP_GetHT+0x100>)
 80075e0:	795a      	ldrb	r2, [r3, #5]
 80075e2:	2108      	movs	r1, #8
 80075e4:	187b      	adds	r3, r7, r1
 80075e6:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80075e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007628 <SGP_GetHT+0xf4>)
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4b11      	ldr	r3, [pc, #68]	@ (8007634 <SGP_GetHT+0x100>)
 80075f0:	719a      	strb	r2, [r3, #6]
 80075f2:	4b10      	ldr	r3, [pc, #64]	@ (8007634 <SGP_GetHT+0x100>)
 80075f4:	799a      	ldrb	r2, [r3, #6]
 80075f6:	187b      	adds	r3, r7, r1
 80075f8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80075fa:	187b      	adds	r3, r7, r1
 80075fc:	2102      	movs	r1, #2
 80075fe:	0018      	movs	r0, r3
 8007600:	f7ff ff42 	bl	8007488 <CalculateCRC>
 8007604:	0003      	movs	r3, r0
 8007606:	001a      	movs	r2, r3
 8007608:	4b0a      	ldr	r3, [pc, #40]	@ (8007634 <SGP_GetHT+0x100>)
 800760a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800760c:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <SGP_GetHT+0x104>)
 800760e:	2201      	movs	r2, #1
 8007610:	701a      	strb	r2, [r3, #0]
}
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	46bd      	mov	sp, r7
 8007616:	b004      	add	sp, #16
 8007618:	bd80      	pop	{r7, pc}
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	42340000 	.word	0x42340000
 8007620:	432f0000 	.word	0x432f0000
 8007624:	477fff00 	.word	0x477fff00
 8007628:	2000102e 	.word	0x2000102e
 800762c:	42c80000 	.word	0x42c80000
 8007630:	2000102c 	.word	0x2000102c
 8007634:	20000114 	.word	0x20000114
 8007638:	20001030 	.word	0x20001030

0800763c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007640:	4b07      	ldr	r3, [pc, #28]	@ (8007660 <HAL_MspInit+0x24>)
 8007642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <HAL_MspInit+0x24>)
 8007646:	2101      	movs	r1, #1
 8007648:	430a      	orrs	r2, r1
 800764a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800764c:	4b04      	ldr	r3, [pc, #16]	@ (8007660 <HAL_MspInit+0x24>)
 800764e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007650:	4b03      	ldr	r3, [pc, #12]	@ (8007660 <HAL_MspInit+0x24>)
 8007652:	2180      	movs	r1, #128	@ 0x80
 8007654:	0549      	lsls	r1, r1, #21
 8007656:	430a      	orrs	r2, r1
 8007658:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800765a:	46c0      	nop			@ (mov r8, r8)
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40021000 	.word	0x40021000

08007664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007668:	46c0      	nop			@ (mov r8, r8)
 800766a:	e7fd      	b.n	8007668 <NMI_Handler+0x4>

0800766c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007670:	46c0      	nop			@ (mov r8, r8)
 8007672:	e7fd      	b.n	8007670 <HardFault_Handler+0x4>

08007674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800768c:	f001 f854 	bl	8008738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007690:	46c0      	nop			@ (mov r8, r8)
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800769c:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800769e:	0018      	movs	r0, r3
 80076a0:	f001 fea9 	bl	80093f6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80076a4:	4b04      	ldr	r3, [pc, #16]	@ (80076b8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80076a6:	0018      	movs	r0, r3
 80076a8:	f001 fea5 	bl	80093f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80076ac:	46c0      	nop			@ (mov r8, r8)
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	46c0      	nop			@ (mov r8, r8)
 80076b4:	20000a40 	.word	0x20000a40
 80076b8:	200009f8 	.word	0x200009f8

080076bc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80076c0:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80076c2:	0018      	movs	r0, r3
 80076c4:	f001 fe97 	bl	80093f6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80076c8:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80076ca:	0018      	movs	r0, r3
 80076cc:	f001 fe93 	bl	80093f6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80076d2:	0018      	movs	r0, r3
 80076d4:	f001 fe8f 	bl	80093f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80076d8:	46c0      	nop			@ (mov r8, r8)
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			@ (mov r8, r8)
 80076e0:	20000ac4 	.word	0x20000ac4
 80076e4:	2000122c 	.word	0x2000122c
 80076e8:	20001274 	.word	0x20001274

080076ec <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80076f0:	4b03      	ldr	r3, [pc, #12]	@ (8007700 <USART4_5_IRQHandler+0x14>)
 80076f2:	0018      	movs	r0, r3
 80076f4:	f006 fb6a 	bl	800ddcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80076f8:	46c0      	nop			@ (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	46c0      	nop			@ (mov r8, r8)
 8007700:	20001174 	.word	0x20001174

08007704 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8007708:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <I2C1_IRQHandler+0x2c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	23e0      	movs	r3, #224	@ 0xe0
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	4013      	ands	r3, r2
 8007714:	d004      	beq.n	8007720 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8007716:	4b06      	ldr	r3, [pc, #24]	@ (8007730 <I2C1_IRQHandler+0x2c>)
 8007718:	0018      	movs	r0, r3
 800771a:	f002 fca9 	bl	800a070 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800771e:	e003      	b.n	8007728 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8007720:	4b03      	ldr	r3, [pc, #12]	@ (8007730 <I2C1_IRQHandler+0x2c>)
 8007722:	0018      	movs	r0, r3
 8007724:	f002 fc8a 	bl	800a03c <HAL_I2C_EV_IRQHandler>
}
 8007728:	46c0      	nop			@ (mov r8, r8)
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	46c0      	nop			@ (mov r8, r8)
 8007730:	20000950 	.word	0x20000950

08007734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  return 1;
 8007738:	2301      	movs	r3, #1
}
 800773a:	0018      	movs	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <_kill>:

int _kill(int pid, int sig)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800774a:	f008 fc87 	bl	801005c <__errno>
 800774e:	0003      	movs	r3, r0
 8007750:	2216      	movs	r2, #22
 8007752:	601a      	str	r2, [r3, #0]
  return -1;
 8007754:	2301      	movs	r3, #1
 8007756:	425b      	negs	r3, r3
}
 8007758:	0018      	movs	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	b002      	add	sp, #8
 800775e:	bd80      	pop	{r7, pc}

08007760 <_exit>:

void _exit (int status)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007768:	2301      	movs	r3, #1
 800776a:	425a      	negs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	0011      	movs	r1, r2
 8007770:	0018      	movs	r0, r3
 8007772:	f7ff ffe5 	bl	8007740 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007776:	46c0      	nop			@ (mov r8, r8)
 8007778:	e7fd      	b.n	8007776 <_exit+0x16>

0800777a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b086      	sub	sp, #24
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e00a      	b.n	80077a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800778c:	e000      	b.n	8007790 <_read+0x16>
 800778e:	bf00      	nop
 8007790:	0001      	movs	r1, r0
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	60ba      	str	r2, [r7, #8]
 8007798:	b2ca      	uxtb	r2, r1
 800779a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	3301      	adds	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	dbf0      	blt.n	800778c <_read+0x12>
  }

  return len;
 80077aa:	687b      	ldr	r3, [r7, #4]
}
 80077ac:	0018      	movs	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b006      	add	sp, #24
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80077bc:	2301      	movs	r3, #1
 80077be:	425b      	negs	r3, r3
}
 80077c0:	0018      	movs	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b002      	add	sp, #8
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2280      	movs	r2, #128	@ 0x80
 80077d6:	0192      	lsls	r2, r2, #6
 80077d8:	605a      	str	r2, [r3, #4]
  return 0;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	0018      	movs	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	b002      	add	sp, #8
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <_isatty>:

int _isatty(int file)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80077ec:	2301      	movs	r3, #1
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b002      	add	sp, #8
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007802:	2300      	movs	r3, #0
}
 8007804:	0018      	movs	r0, r3
 8007806:	46bd      	mov	sp, r7
 8007808:	b004      	add	sp, #16
 800780a:	bd80      	pop	{r7, pc}

0800780c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007814:	4a14      	ldr	r2, [pc, #80]	@ (8007868 <_sbrk+0x5c>)
 8007816:	4b15      	ldr	r3, [pc, #84]	@ (800786c <_sbrk+0x60>)
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007820:	4b13      	ldr	r3, [pc, #76]	@ (8007870 <_sbrk+0x64>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007828:	4b11      	ldr	r3, [pc, #68]	@ (8007870 <_sbrk+0x64>)
 800782a:	4a12      	ldr	r2, [pc, #72]	@ (8007874 <_sbrk+0x68>)
 800782c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800782e:	4b10      	ldr	r3, [pc, #64]	@ (8007870 <_sbrk+0x64>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	18d3      	adds	r3, r2, r3
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	429a      	cmp	r2, r3
 800783a:	d207      	bcs.n	800784c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800783c:	f008 fc0e 	bl	801005c <__errno>
 8007840:	0003      	movs	r3, r0
 8007842:	220c      	movs	r2, #12
 8007844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007846:	2301      	movs	r3, #1
 8007848:	425b      	negs	r3, r3
 800784a:	e009      	b.n	8007860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800784c:	4b08      	ldr	r3, [pc, #32]	@ (8007870 <_sbrk+0x64>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007852:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <_sbrk+0x64>)
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	18d2      	adds	r2, r2, r3
 800785a:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <_sbrk+0x64>)
 800785c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800785e:	68fb      	ldr	r3, [r7, #12]
}
 8007860:	0018      	movs	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	b006      	add	sp, #24
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20005000 	.word	0x20005000
 800786c:	00000400 	.word	0x00000400
 8007870:	20001038 	.word	0x20001038
 8007874:	20001f20 	.word	0x20001f20

08007878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800787c:	46c0      	nop			@ (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800788a:	2310      	movs	r3, #16
 800788c:	18fb      	adds	r3, r7, r3
 800788e:	0018      	movs	r0, r3
 8007890:	2308      	movs	r3, #8
 8007892:	001a      	movs	r2, r3
 8007894:	2100      	movs	r1, #0
 8007896:	f008 fb5d 	bl	800ff54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800789a:	003b      	movs	r3, r7
 800789c:	0018      	movs	r0, r3
 800789e:	2310      	movs	r3, #16
 80078a0:	001a      	movs	r2, r3
 80078a2:	2100      	movs	r1, #0
 80078a4:	f008 fb56 	bl	800ff54 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80078a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078aa:	2280      	movs	r2, #128	@ 0x80
 80078ac:	05d2      	lsls	r2, r2, #23
 80078ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80078b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80078bc:	4b29      	ldr	r3, [pc, #164]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078be:	4a2a      	ldr	r2, [pc, #168]	@ (8007968 <MX_TIM2_Init+0xe4>)
 80078c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078c2:	4b28      	ldr	r3, [pc, #160]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078c8:	4b26      	ldr	r3, [pc, #152]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80078ce:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078d0:	0018      	movs	r0, r3
 80078d2:	f005 fced 	bl	800d2b0 <HAL_TIM_PWM_Init>
 80078d6:	1e03      	subs	r3, r0, #0
 80078d8:	d001      	beq.n	80078de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80078da:	f7fd fe77 	bl	80055cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078de:	2110      	movs	r1, #16
 80078e0:	187b      	adds	r3, r7, r1
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078e6:	187b      	adds	r3, r7, r1
 80078e8:	2200      	movs	r2, #0
 80078ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80078ec:	187a      	adds	r2, r7, r1
 80078ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007964 <MX_TIM2_Init+0xe0>)
 80078f0:	0011      	movs	r1, r2
 80078f2:	0018      	movs	r0, r3
 80078f4:	f005 fffa 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 80078f8:	1e03      	subs	r3, r0, #0
 80078fa:	d001      	beq.n	8007900 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80078fc:	f7fd fe66 	bl	80055cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007900:	003b      	movs	r3, r7
 8007902:	2260      	movs	r2, #96	@ 0x60
 8007904:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8007906:	003b      	movs	r3, r7
 8007908:	2200      	movs	r2, #0
 800790a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800790c:	003b      	movs	r3, r7
 800790e:	2200      	movs	r2, #0
 8007910:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007912:	003b      	movs	r3, r7
 8007914:	2200      	movs	r2, #0
 8007916:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007918:	0039      	movs	r1, r7
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <MX_TIM2_Init+0xe0>)
 800791c:	2200      	movs	r2, #0
 800791e:	0018      	movs	r0, r3
 8007920:	f005 fd98 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8007924:	1e03      	subs	r3, r0, #0
 8007926:	d001      	beq.n	800792c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8007928:	f7fd fe50 	bl	80055cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800792c:	0039      	movs	r1, r7
 800792e:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <MX_TIM2_Init+0xe0>)
 8007930:	2208      	movs	r2, #8
 8007932:	0018      	movs	r0, r3
 8007934:	f005 fd8e 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8007938:	1e03      	subs	r3, r0, #0
 800793a:	d001      	beq.n	8007940 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800793c:	f7fd fe46 	bl	80055cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007940:	0039      	movs	r1, r7
 8007942:	4b08      	ldr	r3, [pc, #32]	@ (8007964 <MX_TIM2_Init+0xe0>)
 8007944:	220c      	movs	r2, #12
 8007946:	0018      	movs	r0, r3
 8007948:	f005 fd84 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 800794c:	1e03      	subs	r3, r0, #0
 800794e:	d001      	beq.n	8007954 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8007950:	f7fd fe3c 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007954:	4b03      	ldr	r3, [pc, #12]	@ (8007964 <MX_TIM2_Init+0xe0>)
 8007956:	0018      	movs	r0, r3
 8007958:	f000 f8aa 	bl	8007ab0 <HAL_TIM_MspPostInit>

}
 800795c:	46c0      	nop			@ (mov r8, r8)
 800795e:	46bd      	mov	sp, r7
 8007960:	b006      	add	sp, #24
 8007962:	bd80      	pop	{r7, pc}
 8007964:	2000103c 	.word	0x2000103c
 8007968:	0000ffff 	.word	0x0000ffff

0800796c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007972:	2310      	movs	r3, #16
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	0018      	movs	r0, r3
 8007978:	2308      	movs	r3, #8
 800797a:	001a      	movs	r2, r3
 800797c:	2100      	movs	r1, #0
 800797e:	f008 fae9 	bl	800ff54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007982:	003b      	movs	r3, r7
 8007984:	0018      	movs	r0, r3
 8007986:	2310      	movs	r3, #16
 8007988:	001a      	movs	r2, r3
 800798a:	2100      	movs	r1, #0
 800798c:	f008 fae2 	bl	800ff54 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007990:	4b32      	ldr	r3, [pc, #200]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 8007992:	4a33      	ldr	r2, [pc, #204]	@ (8007a60 <MX_TIM3_Init+0xf4>)
 8007994:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007996:	4b31      	ldr	r3, [pc, #196]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 8007998:	2200      	movs	r2, #0
 800799a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800799c:	4b2f      	ldr	r3, [pc, #188]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 800799e:	2200      	movs	r2, #0
 80079a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80079a2:	4b2e      	ldr	r3, [pc, #184]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 80079a4:	4a2f      	ldr	r2, [pc, #188]	@ (8007a64 <MX_TIM3_Init+0xf8>)
 80079a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079a8:	4b2c      	ldr	r3, [pc, #176]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079ae:	4b2b      	ldr	r3, [pc, #172]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80079b4:	4b29      	ldr	r3, [pc, #164]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 80079b6:	0018      	movs	r0, r3
 80079b8:	f005 fc7a 	bl	800d2b0 <HAL_TIM_PWM_Init>
 80079bc:	1e03      	subs	r3, r0, #0
 80079be:	d001      	beq.n	80079c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80079c0:	f7fd fe04 	bl	80055cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079c4:	2110      	movs	r1, #16
 80079c6:	187b      	adds	r3, r7, r1
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	2200      	movs	r2, #0
 80079d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80079d2:	187a      	adds	r2, r7, r1
 80079d4:	4b21      	ldr	r3, [pc, #132]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 80079d6:	0011      	movs	r1, r2
 80079d8:	0018      	movs	r0, r3
 80079da:	f005 ff87 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 80079de:	1e03      	subs	r3, r0, #0
 80079e0:	d001      	beq.n	80079e6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80079e2:	f7fd fdf3 	bl	80055cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80079e6:	003b      	movs	r3, r7
 80079e8:	2260      	movs	r2, #96	@ 0x60
 80079ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80079ec:	003b      	movs	r3, r7
 80079ee:	2200      	movs	r2, #0
 80079f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80079f2:	003b      	movs	r3, r7
 80079f4:	2200      	movs	r2, #0
 80079f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80079f8:	003b      	movs	r3, r7
 80079fa:	2200      	movs	r2, #0
 80079fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80079fe:	0039      	movs	r1, r7
 8007a00:	4b16      	ldr	r3, [pc, #88]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	0018      	movs	r0, r3
 8007a06:	f005 fd25 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8007a0a:	1e03      	subs	r3, r0, #0
 8007a0c:	d001      	beq.n	8007a12 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8007a0e:	f7fd fddd 	bl	80055cc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8007a12:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 8007a14:	2104      	movs	r1, #4
 8007a16:	0018      	movs	r0, r3
 8007a18:	f005 ffc6 	bl	800d9a8 <HAL_TIMEx_RemapConfig>
 8007a1c:	1e03      	subs	r3, r0, #0
 8007a1e:	d001      	beq.n	8007a24 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8007a20:	f7fd fdd4 	bl	80055cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007a24:	0039      	movs	r1, r7
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 8007a28:	2204      	movs	r2, #4
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f005 fd12 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8007a30:	1e03      	subs	r3, r0, #0
 8007a32:	d001      	beq.n	8007a38 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8007a34:	f7fd fdca 	bl	80055cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007a38:	0039      	movs	r1, r7
 8007a3a:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f005 fd08 	bl	800d454 <HAL_TIM_PWM_ConfigChannel>
 8007a44:	1e03      	subs	r3, r0, #0
 8007a46:	d001      	beq.n	8007a4c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8007a48:	f7fd fdc0 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007a4c:	4b03      	ldr	r3, [pc, #12]	@ (8007a5c <MX_TIM3_Init+0xf0>)
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f000 f82e 	bl	8007ab0 <HAL_TIM_MspPostInit>

}
 8007a54:	46c0      	nop			@ (mov r8, r8)
 8007a56:	46bd      	mov	sp, r7
 8007a58:	b006      	add	sp, #24
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	2000107c 	.word	0x2000107c
 8007a60:	40000400 	.word	0x40000400
 8007a64:	0000ffff 	.word	0x0000ffff

08007a68 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	2380      	movs	r3, #128	@ 0x80
 8007a76:	05db      	lsls	r3, r3, #23
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d106      	bne.n	8007a8a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa8 <HAL_TIM_PWM_MspInit+0x40>)
 8007a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a80:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <HAL_TIM_PWM_MspInit+0x40>)
 8007a82:	2101      	movs	r1, #1
 8007a84:	430a      	orrs	r2, r1
 8007a86:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007a88:	e00a      	b.n	8007aa0 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a07      	ldr	r2, [pc, #28]	@ (8007aac <HAL_TIM_PWM_MspInit+0x44>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d105      	bne.n	8007aa0 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a94:	4b04      	ldr	r3, [pc, #16]	@ (8007aa8 <HAL_TIM_PWM_MspInit+0x40>)
 8007a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a98:	4b03      	ldr	r3, [pc, #12]	@ (8007aa8 <HAL_TIM_PWM_MspInit+0x40>)
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007aa0:	46c0      	nop			@ (mov r8, r8)
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b002      	add	sp, #8
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	40000400 	.word	0x40000400

08007ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007ab0:	b590      	push	{r4, r7, lr}
 8007ab2:	b08b      	sub	sp, #44	@ 0x2c
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab8:	2414      	movs	r4, #20
 8007aba:	193b      	adds	r3, r7, r4
 8007abc:	0018      	movs	r0, r3
 8007abe:	2314      	movs	r3, #20
 8007ac0:	001a      	movs	r2, r3
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	f008 fa46 	bl	800ff54 <memset>
  if(timHandle->Instance==TIM2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	2380      	movs	r3, #128	@ 0x80
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d123      	bne.n	8007b1c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad4:	4b27      	ldr	r3, [pc, #156]	@ (8007b74 <HAL_TIM_MspPostInit+0xc4>)
 8007ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad8:	4b26      	ldr	r3, [pc, #152]	@ (8007b74 <HAL_TIM_MspPostInit+0xc4>)
 8007ada:	2101      	movs	r1, #1
 8007adc:	430a      	orrs	r2, r1
 8007ade:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ae0:	4b24      	ldr	r3, [pc, #144]	@ (8007b74 <HAL_TIM_MspPostInit+0xc4>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8007aec:	0021      	movs	r1, r4
 8007aee:	187b      	adds	r3, r7, r1
 8007af0:	220d      	movs	r2, #13
 8007af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af4:	187b      	adds	r3, r7, r1
 8007af6:	2202      	movs	r2, #2
 8007af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007afa:	187b      	adds	r3, r7, r1
 8007afc:	2200      	movs	r2, #0
 8007afe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b00:	187b      	adds	r3, r7, r1
 8007b02:	2200      	movs	r2, #0
 8007b04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007b06:	187b      	adds	r3, r7, r1
 8007b08:	2202      	movs	r2, #2
 8007b0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b0c:	187a      	adds	r2, r7, r1
 8007b0e:	23a0      	movs	r3, #160	@ 0xa0
 8007b10:	05db      	lsls	r3, r3, #23
 8007b12:	0011      	movs	r1, r2
 8007b14:	0018      	movs	r0, r3
 8007b16:	f001 fd57 	bl	80095c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007b1a:	e027      	b.n	8007b6c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a15      	ldr	r2, [pc, #84]	@ (8007b78 <HAL_TIM_MspPostInit+0xc8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d122      	bne.n	8007b6c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b26:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <HAL_TIM_MspPostInit+0xc4>)
 8007b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2a:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <HAL_TIM_MspPostInit+0xc4>)
 8007b2c:	2104      	movs	r1, #4
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007b32:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <HAL_TIM_MspPostInit+0xc4>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	2204      	movs	r2, #4
 8007b38:	4013      	ands	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8007b3e:	2114      	movs	r1, #20
 8007b40:	187b      	adds	r3, r7, r1
 8007b42:	22e0      	movs	r2, #224	@ 0xe0
 8007b44:	0052      	lsls	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b48:	187b      	adds	r3, r7, r1
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b4e:	187b      	adds	r3, r7, r1
 8007b50:	2200      	movs	r2, #0
 8007b52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b54:	187b      	adds	r3, r7, r1
 8007b56:	2200      	movs	r2, #0
 8007b58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007b5a:	187b      	adds	r3, r7, r1
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b60:	187b      	adds	r3, r7, r1
 8007b62:	4a06      	ldr	r2, [pc, #24]	@ (8007b7c <HAL_TIM_MspPostInit+0xcc>)
 8007b64:	0019      	movs	r1, r3
 8007b66:	0010      	movs	r0, r2
 8007b68:	f001 fd2e 	bl	80095c8 <HAL_GPIO_Init>
}
 8007b6c:	46c0      	nop			@ (mov r8, r8)
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b00b      	add	sp, #44	@ 0x2c
 8007b72:	bd90      	pop	{r4, r7, pc}
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	50000800 	.word	0x50000800

08007b80 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007b84:	4b16      	ldr	r3, [pc, #88]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007b86:	4a17      	ldr	r2, [pc, #92]	@ (8007be4 <MX_USART1_UART_Init+0x64>)
 8007b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007b8a:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007b8c:	22e1      	movs	r2, #225	@ 0xe1
 8007b8e:	0252      	lsls	r2, r2, #9
 8007b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007b92:	4b13      	ldr	r3, [pc, #76]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007b98:	4b11      	ldr	r3, [pc, #68]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007b9e:	4b10      	ldr	r3, [pc, #64]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007ba6:	220c      	movs	r2, #12
 8007ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007baa:	4b0d      	ldr	r3, [pc, #52]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8007bbc:	4b08      	ldr	r3, [pc, #32]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8007bc2:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007bc4:	2280      	movs	r2, #128	@ 0x80
 8007bc6:	0212      	lsls	r2, r2, #8
 8007bc8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007bca:	4b05      	ldr	r3, [pc, #20]	@ (8007be0 <MX_USART1_UART_Init+0x60>)
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f005 ff09 	bl	800d9e4 <HAL_UART_Init>
 8007bd2:	1e03      	subs	r3, r0, #0
 8007bd4:	d001      	beq.n	8007bda <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8007bd6:	f7fd fcf9 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007bda:	46c0      	nop			@ (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	200010bc 	.word	0x200010bc
 8007be4:	40013800 	.word	0x40013800

08007be8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8007bec:	4b14      	ldr	r3, [pc, #80]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007bee:	4a15      	ldr	r2, [pc, #84]	@ (8007c44 <MX_USART4_UART_Init+0x5c>)
 8007bf0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007bf2:	4b13      	ldr	r3, [pc, #76]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007bf4:	22e1      	movs	r2, #225	@ 0xe1
 8007bf6:	0252      	lsls	r2, r2, #9
 8007bf8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007bfa:	4b11      	ldr	r3, [pc, #68]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007c00:	4b0f      	ldr	r3, [pc, #60]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007c06:	4b0e      	ldr	r3, [pc, #56]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c0e:	220c      	movs	r2, #12
 8007c10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c12:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c18:	4b09      	ldr	r3, [pc, #36]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c1e:	4b08      	ldr	r3, [pc, #32]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007c24:	4b06      	ldr	r3, [pc, #24]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007c2a:	4b05      	ldr	r3, [pc, #20]	@ (8007c40 <MX_USART4_UART_Init+0x58>)
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f005 fed9 	bl	800d9e4 <HAL_UART_Init>
 8007c32:	1e03      	subs	r3, r0, #0
 8007c34:	d001      	beq.n	8007c3a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8007c36:	f7fd fcc9 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007c3a:	46c0      	nop			@ (mov r8, r8)
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20001174 	.word	0x20001174
 8007c44:	40004c00 	.word	0x40004c00

08007c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007c48:	b590      	push	{r4, r7, lr}
 8007c4a:	b08b      	sub	sp, #44	@ 0x2c
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c50:	2414      	movs	r4, #20
 8007c52:	193b      	adds	r3, r7, r4
 8007c54:	0018      	movs	r0, r3
 8007c56:	2314      	movs	r3, #20
 8007c58:	001a      	movs	r2, r3
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	f008 f97a 	bl	800ff54 <memset>
  if(uartHandle->Instance==USART1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a6f      	ldr	r2, [pc, #444]	@ (8007e24 <HAL_UART_MspInit+0x1dc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d12b      	bne.n	8007cc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007c70:	2180      	movs	r1, #128	@ 0x80
 8007c72:	01c9      	lsls	r1, r1, #7
 8007c74:	430a      	orrs	r2, r1
 8007c76:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c78:	4b6b      	ldr	r3, [pc, #428]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007c7e:	2101      	movs	r1, #1
 8007c80:	430a      	orrs	r2, r1
 8007c82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007c84:	4b68      	ldr	r3, [pc, #416]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
 8007c8e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007c90:	193b      	adds	r3, r7, r4
 8007c92:	22c0      	movs	r2, #192	@ 0xc0
 8007c94:	00d2      	lsls	r2, r2, #3
 8007c96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c98:	0021      	movs	r1, r4
 8007c9a:	187b      	adds	r3, r7, r1
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca0:	187b      	adds	r3, r7, r1
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ca6:	187b      	adds	r3, r7, r1
 8007ca8:	2203      	movs	r2, #3
 8007caa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007cac:	187b      	adds	r3, r7, r1
 8007cae:	2204      	movs	r2, #4
 8007cb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cb2:	187a      	adds	r2, r7, r1
 8007cb4:	23a0      	movs	r3, #160	@ 0xa0
 8007cb6:	05db      	lsls	r3, r3, #23
 8007cb8:	0011      	movs	r1, r2
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f001 fc84 	bl	80095c8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8007cc0:	e0ac      	b.n	8007e1c <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a59      	ldr	r2, [pc, #356]	@ (8007e2c <HAL_UART_MspInit+0x1e4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d000      	beq.n	8007cce <HAL_UART_MspInit+0x86>
 8007ccc:	e0a6      	b.n	8007e1c <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007cce:	4b56      	ldr	r3, [pc, #344]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cd2:	4b55      	ldr	r3, [pc, #340]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007cd4:	2180      	movs	r1, #128	@ 0x80
 8007cd6:	0309      	lsls	r1, r1, #12
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cdc:	4b52      	ldr	r3, [pc, #328]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce0:	4b51      	ldr	r3, [pc, #324]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	2201      	movs	r2, #1
 8007cee:	4013      	ands	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007cfa:	2104      	movs	r1, #4
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d00:	4b49      	ldr	r3, [pc, #292]	@ (8007e28 <HAL_UART_MspInit+0x1e0>)
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	2204      	movs	r2, #4
 8007d06:	4013      	ands	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007d0c:	2414      	movs	r4, #20
 8007d0e:	193b      	adds	r3, r7, r4
 8007d10:	2202      	movs	r2, #2
 8007d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d14:	193b      	adds	r3, r7, r4
 8007d16:	2202      	movs	r2, #2
 8007d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1a:	193b      	adds	r3, r7, r4
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d20:	193b      	adds	r3, r7, r4
 8007d22:	2203      	movs	r2, #3
 8007d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8007d26:	193b      	adds	r3, r7, r4
 8007d28:	2206      	movs	r2, #6
 8007d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d2c:	193a      	adds	r2, r7, r4
 8007d2e:	23a0      	movs	r3, #160	@ 0xa0
 8007d30:	05db      	lsls	r3, r3, #23
 8007d32:	0011      	movs	r1, r2
 8007d34:	0018      	movs	r0, r3
 8007d36:	f001 fc47 	bl	80095c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d3a:	0021      	movs	r1, r4
 8007d3c:	187b      	adds	r3, r7, r1
 8007d3e:	2280      	movs	r2, #128	@ 0x80
 8007d40:	00d2      	lsls	r2, r2, #3
 8007d42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d44:	187b      	adds	r3, r7, r1
 8007d46:	2202      	movs	r2, #2
 8007d48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d50:	187b      	adds	r3, r7, r1
 8007d52:	2203      	movs	r2, #3
 8007d54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8007d56:	187b      	adds	r3, r7, r1
 8007d58:	2206      	movs	r2, #6
 8007d5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d5c:	187b      	adds	r3, r7, r1
 8007d5e:	4a34      	ldr	r2, [pc, #208]	@ (8007e30 <HAL_UART_MspInit+0x1e8>)
 8007d60:	0019      	movs	r1, r3
 8007d62:	0010      	movs	r0, r2
 8007d64:	f001 fc30 	bl	80095c8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8007d68:	4b32      	ldr	r3, [pc, #200]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d6a:	4a33      	ldr	r2, [pc, #204]	@ (8007e38 <HAL_UART_MspInit+0x1f0>)
 8007d6c:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8007d6e:	4b31      	ldr	r3, [pc, #196]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d70:	220c      	movs	r2, #12
 8007d72:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007d74:	4b2f      	ldr	r3, [pc, #188]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d80:	4b2c      	ldr	r3, [pc, #176]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d82:	2280      	movs	r2, #128	@ 0x80
 8007d84:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d86:	4b2b      	ldr	r3, [pc, #172]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d8c:	4b29      	ldr	r3, [pc, #164]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8007d92:	4b28      	ldr	r3, [pc, #160]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d94:	2220      	movs	r2, #32
 8007d96:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007d98:	4b26      	ldr	r3, [pc, #152]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8007d9e:	4b25      	ldr	r3, [pc, #148]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007da0:	0018      	movs	r0, r3
 8007da2:	f001 f965 	bl	8009070 <HAL_DMA_Init>
 8007da6:	1e03      	subs	r3, r0, #0
 8007da8:	d001      	beq.n	8007dae <HAL_UART_MspInit+0x166>
      Error_Handler();
 8007daa:	f7fd fc0f 	bl	80055cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a20      	ldr	r2, [pc, #128]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007db2:	675a      	str	r2, [r3, #116]	@ 0x74
 8007db4:	4b1f      	ldr	r3, [pc, #124]	@ (8007e34 <HAL_UART_MspInit+0x1ec>)
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8007dba:	4b20      	ldr	r3, [pc, #128]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007dbc:	4a20      	ldr	r2, [pc, #128]	@ (8007e40 <HAL_UART_MspInit+0x1f8>)
 8007dbe:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007dc2:	220c      	movs	r2, #12
 8007dc4:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007dc8:	2210      	movs	r2, #16
 8007dca:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007dd4:	2280      	movs	r2, #128	@ 0x80
 8007dd6:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007dd8:	4b18      	ldr	r3, [pc, #96]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007dde:	4b17      	ldr	r3, [pc, #92]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8007de4:	4b15      	ldr	r3, [pc, #84]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007dea:	4b14      	ldr	r3, [pc, #80]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8007df0:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007df2:	0018      	movs	r0, r3
 8007df4:	f001 f93c 	bl	8009070 <HAL_DMA_Init>
 8007df8:	1e03      	subs	r3, r0, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8007dfc:	f7fd fbe6 	bl	80055cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a0e      	ldr	r2, [pc, #56]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007e04:	671a      	str	r2, [r3, #112]	@ 0x70
 8007e06:	4b0d      	ldr	r3, [pc, #52]	@ (8007e3c <HAL_UART_MspInit+0x1f4>)
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2100      	movs	r1, #0
 8007e10:	200e      	movs	r0, #14
 8007e12:	f001 f8fb 	bl	800900c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8007e16:	200e      	movs	r0, #14
 8007e18:	f001 f90d 	bl	8009036 <HAL_NVIC_EnableIRQ>
}
 8007e1c:	46c0      	nop			@ (mov r8, r8)
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b00b      	add	sp, #44	@ 0x2c
 8007e22:	bd90      	pop	{r4, r7, pc}
 8007e24:	40013800 	.word	0x40013800
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	40004c00 	.word	0x40004c00
 8007e30:	50000800 	.word	0x50000800
 8007e34:	2000122c 	.word	0x2000122c
 8007e38:	4002006c 	.word	0x4002006c
 8007e3c:	20001274 	.word	0x20001274
 8007e40:	40020080 	.word	0x40020080

08007e44 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007e48:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e4a:	4a10      	ldr	r2, [pc, #64]	@ (8007e8c <MX_USB_PCD_Init+0x48>)
 8007e4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e50:	2208      	movs	r2, #8
 8007e52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e54:	4b0c      	ldr	r3, [pc, #48]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e56:	2202      	movs	r2, #2
 8007e58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e60:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e66:	4b08      	ldr	r3, [pc, #32]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e72:	4b05      	ldr	r3, [pc, #20]	@ (8007e88 <MX_USB_PCD_Init+0x44>)
 8007e74:	0018      	movs	r0, r3
 8007e76:	f004 f99d 	bl	800c1b4 <HAL_PCD_Init>
 8007e7a:	1e03      	subs	r3, r0, #0
 8007e7c:	d001      	beq.n	8007e82 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8007e7e:	f7fd fba5 	bl	80055cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007e82:	46c0      	nop			@ (mov r8, r8)
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	200012bc 	.word	0x200012bc
 8007e8c:	40005c00 	.word	0x40005c00

08007e90 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a06      	ldr	r2, [pc, #24]	@ (8007eb8 <HAL_PCD_MspInit+0x28>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d106      	bne.n	8007eb0 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ea2:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <HAL_PCD_MspInit+0x2c>)
 8007ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ea6:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <HAL_PCD_MspInit+0x2c>)
 8007ea8:	2180      	movs	r1, #128	@ 0x80
 8007eaa:	0409      	lsls	r1, r1, #16
 8007eac:	430a      	orrs	r2, r1
 8007eae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007eb0:	46c0      	nop			@ (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40005c00 	.word	0x40005c00
 8007ebc:	40021000 	.word	0x40021000

08007ec0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8007ec8:	f000 fc48 	bl	800875c <HAL_GetTick>
 8007ecc:	0003      	movs	r3, r0
 8007ece:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8007ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f44 <TimestampIsReached+0x84>)
 8007ed2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d307      	bcc.n	8007eec <TimestampIsReached+0x2c>
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d901      	bls.n	8007eec <TimestampIsReached+0x2c>
 8007ee8:	2201      	movs	r2, #1
 8007eea:	e000      	b.n	8007eee <TimestampIsReached+0x2e>
 8007eec:	2200      	movs	r2, #0
 8007eee:	230f      	movs	r3, #15
 8007ef0:	18fb      	adds	r3, r7, r3
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	781a      	ldrb	r2, [r3, #0]
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	400a      	ands	r2, r1
 8007efa:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d207      	bcs.n	8007f14 <TimestampIsReached+0x54>
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d201      	bcs.n	8007f14 <TimestampIsReached+0x54>
 8007f10:	2201      	movs	r2, #1
 8007f12:	e000      	b.n	8007f16 <TimestampIsReached+0x56>
 8007f14:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8007f16:	200e      	movs	r0, #14
 8007f18:	183b      	adds	r3, r7, r0
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	2101      	movs	r1, #1
 8007f20:	400a      	ands	r2, r1
 8007f22:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8007f24:	230f      	movs	r3, #15
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <TimestampIsReached+0x76>
 8007f2e:	183b      	adds	r3, r7, r0
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b006      	add	sp, #24
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	7fffffff 	.word	0x7fffffff

08007f48 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8007f50:	f000 fc04 	bl	800875c <HAL_GetTick>
 8007f54:	0002      	movs	r2, r0
 8007f56:	4904      	ldr	r1, [pc, #16]	@ (8007f68 <AddTimestamp+0x20>)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f007 ff56 	bl	800fe0c <siprintf>
}
 8007f60:	46c0      	nop			@ (mov r8, r8)
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b002      	add	sp, #8
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	08012ea4 	.word	0x08012ea4

08007f6c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8007f6c:	b40c      	push	{r2, r3}
 8007f6e:	b5b0      	push	{r4, r5, r7, lr}
 8007f70:	4c2b      	ldr	r4, [pc, #172]	@ (8008020 <CreateLine+0xb4>)
 8007f72:	44a5      	add	sp, r4
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	0002      	movs	r2, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8008024 <CreateLine+0xb8>)
 8007f7c:	2182      	movs	r1, #130	@ 0x82
 8007f7e:	00c9      	lsls	r1, r1, #3
 8007f80:	185b      	adds	r3, r3, r1
 8007f82:	19db      	adds	r3, r3, r7
 8007f84:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8007f86:	4b28      	ldr	r3, [pc, #160]	@ (8008028 <CreateLine+0xbc>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	4a26      	ldr	r2, [pc, #152]	@ (8008024 <CreateLine+0xb8>)
 8007f8c:	1852      	adds	r2, r2, r1
 8007f8e:	19d2      	adds	r2, r2, r7
 8007f90:	7812      	ldrb	r2, [r2, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d83b      	bhi.n	800800e <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	4924      	ldr	r1, [pc, #144]	@ (800802c <CreateLine+0xc0>)
 8007f9a:	240c      	movs	r4, #12
 8007f9c:	193b      	adds	r3, r7, r4
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f007 ff34 	bl	800fe0c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8007fa4:	4b20      	ldr	r3, [pc, #128]	@ (8008028 <CreateLine+0xbc>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d909      	bls.n	8007fc0 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8007fac:	193b      	adds	r3, r7, r4
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f7f8 f8aa 	bl	8000108 <strlen>
 8007fb4:	0002      	movs	r2, r0
 8007fb6:	193b      	adds	r3, r7, r4
 8007fb8:	189b      	adds	r3, r3, r2
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f7ff ffc4 	bl	8007f48 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8007fc0:	240c      	movs	r4, #12
 8007fc2:	193b      	adds	r3, r7, r4
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f7f8 f89f 	bl	8000108 <strlen>
 8007fca:	0003      	movs	r3, r0
 8007fcc:	4918      	ldr	r1, [pc, #96]	@ (8008030 <CreateLine+0xc4>)
 8007fce:	187a      	adds	r2, r7, r1
 8007fd0:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8007fd2:	4b18      	ldr	r3, [pc, #96]	@ (8008034 <CreateLine+0xc8>)
 8007fd4:	2508      	movs	r5, #8
 8007fd6:	195b      	adds	r3, r3, r5
 8007fd8:	19db      	adds	r3, r3, r7
 8007fda:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8007fdc:	193a      	adds	r2, r7, r4
 8007fde:	187b      	adds	r3, r7, r1
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	18d0      	adds	r0, r2, r3
 8007fe4:	187b      	adds	r3, r7, r1
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2280      	movs	r2, #128	@ 0x80
 8007fea:	00d2      	lsls	r2, r2, #3
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	0019      	movs	r1, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2283      	movs	r2, #131	@ 0x83
 8007ff4:	00d2      	lsls	r2, r2, #3
 8007ff6:	1952      	adds	r2, r2, r5
 8007ff8:	19d2      	adds	r2, r2, r7
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	f007 ff9e 	bl	800ff3c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8008000:	193a      	adds	r2, r7, r4
 8008002:	4b0d      	ldr	r3, [pc, #52]	@ (8008038 <CreateLine+0xcc>)
 8008004:	0011      	movs	r1, r2
 8008006:	0018      	movs	r0, r3
 8008008:	f007 fef0 	bl	800fdec <iprintf>
 800800c:	e000      	b.n	8008010 <CreateLine+0xa4>
    return;
 800800e:	46c0      	nop			@ (mov r8, r8)
}
 8008010:	46bd      	mov	sp, r7
 8008012:	2382      	movs	r3, #130	@ 0x82
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	449d      	add	sp, r3
 8008018:	bcb0      	pop	{r4, r5, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	b002      	add	sp, #8
 800801e:	4718      	bx	r3
 8008020:	fffffbf0 	.word	0xfffffbf0
 8008024:	fffffbf7 	.word	0xfffffbf7
 8008028:	20000134 	.word	0x20000134
 800802c:	08012eb0 	.word	0x08012eb0
 8008030:	0000040c 	.word	0x0000040c
 8008034:	0000041c 	.word	0x0000041c
 8008038:	08012eb4 	.word	0x08012eb4

0800803c <_write>:

int _write(int fd, const void *buf, size_t count) {
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	b29a      	uxth	r2, r3
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	4804      	ldr	r0, [pc, #16]	@ (8008060 <_write+0x24>)
 8008050:	2364      	movs	r3, #100	@ 0x64
 8008052:	f005 fd2d 	bl	800dab0 <HAL_UART_Transmit>
  return count;
 8008056:	687b      	ldr	r3, [r7, #4]
}
 8008058:	0018      	movs	r0, r3
 800805a:	46bd      	mov	sp, r7
 800805c:	b004      	add	sp, #16
 800805e:	bd80      	pop	{r7, pc}
 8008060:	200010bc 	.word	0x200010bc

08008064 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	0002      	movs	r2, r0
 800806c:	1dfb      	adds	r3, r7, #7
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	4b03      	ldr	r3, [pc, #12]	@ (8008080 <SetVerboseLevel+0x1c>)
 8008072:	1dfa      	adds	r2, r7, #7
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	701a      	strb	r2, [r3, #0]
 8008078:	46c0      	nop			@ (mov r8, r8)
 800807a:	46bd      	mov	sp, r7
 800807c:	b002      	add	sp, #8
 800807e:	bd80      	pop	{r7, pc}
 8008080:	20000134 	.word	0x20000134

08008084 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008088:	f000 fb68 	bl	800875c <HAL_GetTick>
 800808c:	0003      	movs	r3, r0
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800809a:	4a0f      	ldr	r2, [pc, #60]	@ (80080d8 <BinaryReleaseInfo+0x44>)
 800809c:	4b0f      	ldr	r3, [pc, #60]	@ (80080dc <BinaryReleaseInfo+0x48>)
 800809e:	0019      	movs	r1, r3
 80080a0:	2002      	movs	r0, #2
 80080a2:	f7ff ff63 	bl	8007f6c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80080a6:	480e      	ldr	r0, [pc, #56]	@ (80080e0 <BinaryReleaseInfo+0x4c>)
 80080a8:	4a0e      	ldr	r2, [pc, #56]	@ (80080e4 <BinaryReleaseInfo+0x50>)
 80080aa:	490c      	ldr	r1, [pc, #48]	@ (80080dc <BinaryReleaseInfo+0x48>)
 80080ac:	4b0e      	ldr	r3, [pc, #56]	@ (80080e8 <BinaryReleaseInfo+0x54>)
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	0003      	movs	r3, r0
 80080b2:	2002      	movs	r0, #2
 80080b4:	f7ff ff5a 	bl	8007f6c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 80080b8:	4a0c      	ldr	r2, [pc, #48]	@ (80080ec <BinaryReleaseInfo+0x58>)
 80080ba:	4b08      	ldr	r3, [pc, #32]	@ (80080dc <BinaryReleaseInfo+0x48>)
 80080bc:	0019      	movs	r1, r3
 80080be:	2002      	movs	r0, #2
 80080c0:	f7ff ff54 	bl	8007f6c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80080c4:	4b0a      	ldr	r3, [pc, #40]	@ (80080f0 <BinaryReleaseInfo+0x5c>)
 80080c6:	4a0b      	ldr	r2, [pc, #44]	@ (80080f4 <BinaryReleaseInfo+0x60>)
 80080c8:	4904      	ldr	r1, [pc, #16]	@ (80080dc <BinaryReleaseInfo+0x48>)
 80080ca:	2002      	movs	r0, #2
 80080cc:	f7ff ff4e 	bl	8007f6c <CreateLine>
}
 80080d0:	46c0      	nop			@ (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	46c0      	nop			@ (mov r8, r8)
 80080d8:	08012ebc 	.word	0x08012ebc
 80080dc:	08012ee8 	.word	0x08012ee8
 80080e0:	08012eec 	.word	0x08012eec
 80080e4:	08012ef8 	.word	0x08012ef8
 80080e8:	08012f0c 	.word	0x08012f0c
 80080ec:	08012f18 	.word	0x08012f18
 80080f0:	08012f24 	.word	0x08012f24
 80080f4:	08012f2c 	.word	0x08012f2c

080080f8 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6039      	str	r1, [r7, #0]
 8008100:	0011      	movs	r1, r2
 8008102:	1dfb      	adds	r3, r7, #7
 8008104:	1c02      	adds	r2, r0, #0
 8008106:	701a      	strb	r2, [r3, #0]
 8008108:	1dbb      	adds	r3, r7, #6
 800810a:	1c0a      	adds	r2, r1, #0
 800810c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800810e:	4b08      	ldr	r3, [pc, #32]	@ (8008130 <ReadRegister+0x38>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008116:	4b06      	ldr	r3, [pc, #24]	@ (8008130 <ReadRegister+0x38>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	1dba      	adds	r2, r7, #6
 800811c:	7814      	ldrb	r4, [r2, #0]
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	1dfa      	adds	r2, r7, #7
 8008122:	7810      	ldrb	r0, [r2, #0]
 8008124:	0022      	movs	r2, r4
 8008126:	4798      	blx	r3
	}
}
 8008128:	46c0      	nop			@ (mov r8, r8)
 800812a:	46bd      	mov	sp, r7
 800812c:	b003      	add	sp, #12
 800812e:	bd90      	pop	{r4, r7, pc}
 8008130:	200015b0 	.word	0x200015b0

08008134 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008134:	b590      	push	{r4, r7, lr}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6039      	str	r1, [r7, #0]
 800813c:	0011      	movs	r1, r2
 800813e:	1dfb      	adds	r3, r7, #7
 8008140:	1c02      	adds	r2, r0, #0
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	1dbb      	adds	r3, r7, #6
 8008146:	1c0a      	adds	r2, r1, #0
 8008148:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800814a:	4b08      	ldr	r3, [pc, #32]	@ (800816c <WriteRegister+0x38>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d008      	beq.n	8008164 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008152:	4b06      	ldr	r3, [pc, #24]	@ (800816c <WriteRegister+0x38>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	1dba      	adds	r2, r7, #6
 8008158:	7814      	ldrb	r4, [r2, #0]
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	1dfa      	adds	r2, r7, #7
 800815e:	7810      	ldrb	r0, [r2, #0]
 8008160:	0022      	movs	r2, r4
 8008162:	4798      	blx	r3
  }
}
 8008164:	46c0      	nop			@ (mov r8, r8)
 8008166:	46bd      	mov	sp, r7
 8008168:	b003      	add	sp, #12
 800816a:	bd90      	pop	{r4, r7, pc}
 800816c:	200015b4 	.word	0x200015b4

08008170 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	000a      	movs	r2, r1
 800817a:	1cfb      	adds	r3, r7, #3
 800817c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800817e:	230f      	movs	r3, #15
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	22ff      	movs	r2, #255	@ 0xff
 8008184:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008186:	230e      	movs	r3, #14
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	2200      	movs	r2, #0
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e037      	b.n	8008200 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008190:	230e      	movs	r3, #14
 8008192:	18fb      	adds	r3, r7, r3
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	18d3      	adds	r3, r2, r3
 800819a:	7819      	ldrb	r1, [r3, #0]
 800819c:	220f      	movs	r2, #15
 800819e:	18bb      	adds	r3, r7, r2
 80081a0:	18ba      	adds	r2, r7, r2
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	404a      	eors	r2, r1
 80081a6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80081a8:	230d      	movs	r3, #13
 80081aa:	18fb      	adds	r3, r7, r3
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	e01b      	b.n	80081ea <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80081b2:	210f      	movs	r1, #15
 80081b4:	187b      	adds	r3, r7, r1
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da09      	bge.n	80081d2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80081be:	187b      	adds	r3, r7, r1
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	b25b      	sxtb	r3, r3
 80081c6:	2231      	movs	r2, #49	@ 0x31
 80081c8:	4053      	eors	r3, r2
 80081ca:	b25a      	sxtb	r2, r3
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e005      	b.n	80081de <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80081d2:	230f      	movs	r3, #15
 80081d4:	18fa      	adds	r2, r7, r3
 80081d6:	18fb      	adds	r3, r7, r3
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	18db      	adds	r3, r3, r3
 80081dc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80081de:	210d      	movs	r1, #13
 80081e0:	187b      	adds	r3, r7, r1
 80081e2:	781a      	ldrb	r2, [r3, #0]
 80081e4:	187b      	adds	r3, r7, r1
 80081e6:	3201      	adds	r2, #1
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	230d      	movs	r3, #13
 80081ec:	18fb      	adds	r3, r7, r3
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b07      	cmp	r3, #7
 80081f2:	d9de      	bls.n	80081b2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80081f4:	210e      	movs	r1, #14
 80081f6:	187b      	adds	r3, r7, r1
 80081f8:	781a      	ldrb	r2, [r3, #0]
 80081fa:	187b      	adds	r3, r7, r1
 80081fc:	3201      	adds	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
 8008200:	230e      	movs	r3, #14
 8008202:	18fa      	adds	r2, r7, r3
 8008204:	1cfb      	adds	r3, r7, #3
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d3c0      	bcc.n	8008190 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800820e:	230f      	movs	r3, #15
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	781b      	ldrb	r3, [r3, #0]
}
 8008214:	0018      	movs	r0, r3
 8008216:	46bd      	mov	sp, r7
 8008218:	b004      	add	sp, #16
 800821a:	bd80      	pop	{r7, pc}

0800821c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008226:	4b0a      	ldr	r3, [pc, #40]	@ (8008250 <HIDS_Init+0x34>)
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800822c:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <HIDS_Init+0x38>)
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008232:	4b09      	ldr	r3, [pc, #36]	@ (8008258 <HIDS_Init+0x3c>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	0018      	movs	r0, r3
 8008238:	f000 f8d0 	bl	80083dc <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800823c:	4b07      	ldr	r3, [pc, #28]	@ (800825c <HIDS_Init+0x40>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	0018      	movs	r0, r3
 8008242:	f000 f82b 	bl	800829c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	46bd      	mov	sp, r7
 800824a:	b002      	add	sp, #8
 800824c:	bd80      	pop	{r7, pc}
 800824e:	46c0      	nop			@ (mov r8, r8)
 8008250:	200015b0 	.word	0x200015b0
 8008254:	200015b4 	.word	0x200015b4
 8008258:	20000136 	.word	0x20000136
 800825c:	20000135 	.word	0x20000135

08008260 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008264:	f7ff ff0e 	bl	8008084 <GetCurrentHalTicks>
 8008268:	0002      	movs	r2, r0
 800826a:	4b08      	ldr	r3, [pc, #32]	@ (800828c <HIDS_StartMeasurement+0x2c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	18d2      	adds	r2, r2, r3
 8008270:	4b07      	ldr	r3, [pc, #28]	@ (8008290 <HIDS_StartMeasurement+0x30>)
 8008272:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008274:	4b07      	ldr	r3, [pc, #28]	@ (8008294 <HIDS_StartMeasurement+0x34>)
 8008276:	2201      	movs	r2, #1
 8008278:	0019      	movs	r1, r3
 800827a:	2044      	movs	r0, #68	@ 0x44
 800827c:	f7ff ff5a 	bl	8008134 <WriteRegister>
  MeasurementDone = false;
 8008280:	4b05      	ldr	r3, [pc, #20]	@ (8008298 <HIDS_StartMeasurement+0x38>)
 8008282:	2200      	movs	r2, #0
 8008284:	701a      	strb	r2, [r3, #0]
}
 8008286:	46c0      	nop			@ (mov r8, r8)
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	2000013c 	.word	0x2000013c
 8008290:	20000138 	.word	0x20000138
 8008294:	20000136 	.word	0x20000136
 8008298:	200015c6 	.word	0x200015c6

0800829c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	0002      	movs	r2, r0
 80082a4:	1dfb      	adds	r3, r7, #7
 80082a6:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80082a8:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <HIDS_SetHeaterMode+0x1c>)
 80082aa:	1dfa      	adds	r2, r7, #7
 80082ac:	7812      	ldrb	r2, [r2, #0]
 80082ae:	701a      	strb	r2, [r3, #0]
}
 80082b0:	46c0      	nop			@ (mov r8, r8)
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b002      	add	sp, #8
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000135 	.word	0x20000135

080082bc <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	781a      	ldrb	r2, [r3, #0]
 80082c8:	210c      	movs	r1, #12
 80082ca:	187b      	adds	r3, r7, r1
 80082cc:	701a      	strb	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	785a      	ldrb	r2, [r3, #1]
 80082d2:	187b      	adds	r3, r7, r1
 80082d4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80082d6:	240f      	movs	r4, #15
 80082d8:	193b      	adds	r3, r7, r4
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	7892      	ldrb	r2, [r2, #2]
 80082de:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80082e0:	187b      	adds	r3, r7, r1
 80082e2:	2102      	movs	r1, #2
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7ff ff43 	bl	8008170 <CalculateCRC>
 80082ea:	0003      	movs	r3, r0
 80082ec:	001a      	movs	r2, r3
 80082ee:	193b      	adds	r3, r7, r4
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d007      	beq.n	8008306 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80082f6:	4a17      	ldr	r2, [pc, #92]	@ (8008354 <CheckCRC+0x98>)
 80082f8:	4b17      	ldr	r3, [pc, #92]	@ (8008358 <CheckCRC+0x9c>)
 80082fa:	0019      	movs	r1, r3
 80082fc:	2001      	movs	r0, #1
 80082fe:	f7ff fe35 	bl	8007f6c <CreateLine>
		return false;
 8008302:	2300      	movs	r3, #0
 8008304:	e021      	b.n	800834a <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	78da      	ldrb	r2, [r3, #3]
 800830a:	2108      	movs	r1, #8
 800830c:	187b      	adds	r3, r7, r1
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	791a      	ldrb	r2, [r3, #4]
 8008314:	187b      	adds	r3, r7, r1
 8008316:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008318:	240e      	movs	r4, #14
 800831a:	193b      	adds	r3, r7, r4
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7952      	ldrb	r2, [r2, #5]
 8008320:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008322:	187b      	adds	r3, r7, r1
 8008324:	2102      	movs	r1, #2
 8008326:	0018      	movs	r0, r3
 8008328:	f7ff ff22 	bl	8008170 <CalculateCRC>
 800832c:	0003      	movs	r3, r0
 800832e:	001a      	movs	r2, r3
 8008330:	193b      	adds	r3, r7, r4
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	4293      	cmp	r3, r2
 8008336:	d007      	beq.n	8008348 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008338:	4a08      	ldr	r2, [pc, #32]	@ (800835c <CheckCRC+0xa0>)
 800833a:	4b07      	ldr	r3, [pc, #28]	@ (8008358 <CheckCRC+0x9c>)
 800833c:	0019      	movs	r1, r3
 800833e:	2001      	movs	r0, #1
 8008340:	f7ff fe14 	bl	8007f6c <CreateLine>
		return false;
 8008344:	2300      	movs	r3, #0
 8008346:	e000      	b.n	800834a <CheckCRC+0x8e>
	}
	return true;
 8008348:	2301      	movs	r3, #1
}
 800834a:	0018      	movs	r0, r3
 800834c:	46bd      	mov	sp, r7
 800834e:	b005      	add	sp, #20
 8008350:	bd90      	pop	{r4, r7, pc}
 8008352:	46c0      	nop			@ (mov r8, r8)
 8008354:	08012f68 	.word	0x08012f68
 8008358:	08012f90 	.word	0x08012f90
 800835c:	08012f94 	.word	0x08012f94

08008360 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008366:	1dbb      	adds	r3, r7, #6
 8008368:	2289      	movs	r2, #137	@ 0x89
 800836a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800836c:	1dbb      	adds	r3, r7, #6
 800836e:	2201      	movs	r2, #1
 8008370:	0019      	movs	r1, r3
 8008372:	2044      	movs	r0, #68	@ 0x44
 8008374:	f7ff fede 	bl	8008134 <WriteRegister>
	HAL_Delay(30);
 8008378:	201e      	movs	r0, #30
 800837a:	f000 f9f9 	bl	8008770 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800837e:	4b14      	ldr	r3, [pc, #80]	@ (80083d0 <HIDS_DeviceConnected+0x70>)
 8008380:	2206      	movs	r2, #6
 8008382:	0019      	movs	r1, r3
 8008384:	2044      	movs	r0, #68	@ 0x44
 8008386:	f7ff feb7 	bl	80080f8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800838a:	1dfb      	adds	r3, r7, #7
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e011      	b.n	80083b6 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008392:	1dfb      	adds	r3, r7, #7
 8008394:	7818      	ldrb	r0, [r3, #0]
 8008396:	1dfb      	adds	r3, r7, #7
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	4a0d      	ldr	r2, [pc, #52]	@ (80083d0 <HIDS_DeviceConnected+0x70>)
 800839c:	5cd3      	ldrb	r3, [r2, r3]
 800839e:	4a0d      	ldr	r2, [pc, #52]	@ (80083d4 <HIDS_DeviceConnected+0x74>)
 80083a0:	490d      	ldr	r1, [pc, #52]	@ (80083d8 <HIDS_DeviceConnected+0x78>)
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	0003      	movs	r3, r0
 80083a6:	2002      	movs	r0, #2
 80083a8:	f7ff fde0 	bl	8007f6c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80083ac:	1dfb      	adds	r3, r7, #7
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	1dfb      	adds	r3, r7, #7
 80083b2:	3201      	adds	r2, #1
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	1dfb      	adds	r3, r7, #7
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d9e9      	bls.n	8008392 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80083be:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <HIDS_DeviceConnected+0x70>)
 80083c0:	0018      	movs	r0, r3
 80083c2:	f7ff ff7b 	bl	80082bc <CheckCRC>
 80083c6:	0003      	movs	r3, r0
}
 80083c8:	0018      	movs	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b002      	add	sp, #8
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	200015b8 	.word	0x200015b8
 80083d4:	08012fc0 	.word	0x08012fc0
 80083d8:	08012f64 	.word	0x08012f64

080083dc <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	0002      	movs	r2, r0
 80083e4:	1dfb      	adds	r3, r7, #7
 80083e6:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 80083e8:	4b03      	ldr	r3, [pc, #12]	@ (80083f8 <HIDS_SetMeasurementMode+0x1c>)
 80083ea:	1dfa      	adds	r2, r7, #7
 80083ec:	7812      	ldrb	r2, [r2, #0]
 80083ee:	701a      	strb	r2, [r3, #0]
}
 80083f0:	46c0      	nop			@ (mov r8, r8)
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b002      	add	sp, #8
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000136 	.word	0x20000136

080083fc <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008400:	4b04      	ldr	r3, [pc, #16]	@ (8008414 <HIDS_MeasurementReady+0x18>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	0018      	movs	r0, r3
 8008406:	f7ff fd5b 	bl	8007ec0 <TimestampIsReached>
 800840a:	0003      	movs	r3, r0
}
 800840c:	0018      	movs	r0, r3
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	46c0      	nop			@ (mov r8, r8)
 8008414:	20000138 	.word	0x20000138

08008418 <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b08c      	sub	sp, #48	@ 0x30
 800841c:	af02      	add	r7, sp, #8
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008422:	4b7a      	ldr	r3, [pc, #488]	@ (800860c <HIDS_GetMeasurementValues+0x1f4>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <HIDS_GetMeasurementValues+0x16>
 800842a:	2301      	movs	r3, #1
 800842c:	e0ea      	b.n	8008604 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 800842e:	f7ff ffe5 	bl	80083fc <HIDS_MeasurementReady>
 8008432:	0003      	movs	r3, r0
 8008434:	001a      	movs	r2, r3
 8008436:	2301      	movs	r3, #1
 8008438:	4053      	eors	r3, r2
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <HIDS_GetMeasurementValues+0x2c>
 8008440:	2300      	movs	r3, #0
 8008442:	e0df      	b.n	8008604 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008444:	4b72      	ldr	r3, [pc, #456]	@ (8008610 <HIDS_GetMeasurementValues+0x1f8>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	4b72      	ldr	r3, [pc, #456]	@ (8008614 <HIDS_GetMeasurementValues+0x1fc>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	0019      	movs	r1, r3
 800844e:	0010      	movs	r0, r2
 8008450:	f7f7 fe76 	bl	8000140 <__udivsi3>
 8008454:	0003      	movs	r3, r0
 8008456:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008458:	4b6f      	ldr	r3, [pc, #444]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	1c58      	adds	r0, r3, #1
 800845e:	4a6f      	ldr	r2, [pc, #444]	@ (800861c <HIDS_GetMeasurementValues+0x204>)
 8008460:	496f      	ldr	r1, [pc, #444]	@ (8008620 <HIDS_GetMeasurementValues+0x208>)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	0003      	movs	r3, r0
 8008468:	2003      	movs	r0, #3
 800846a:	f7ff fd7f 	bl	8007f6c <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800846e:	4b6d      	ldr	r3, [pc, #436]	@ (8008624 <HIDS_GetMeasurementValues+0x20c>)
 8008470:	2206      	movs	r2, #6
 8008472:	0019      	movs	r1, r3
 8008474:	2044      	movs	r0, #68	@ 0x44
 8008476:	f7ff fe3f 	bl	80080f8 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 800847a:	4b6a      	ldr	r3, [pc, #424]	@ (8008624 <HIDS_GetMeasurementValues+0x20c>)
 800847c:	0018      	movs	r0, r3
 800847e:	f7ff ff1d 	bl	80082bc <CheckCRC>
 8008482:	0003      	movs	r3, r0
 8008484:	001a      	movs	r2, r3
 8008486:	2301      	movs	r3, #1
 8008488:	4053      	eors	r3, r2
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d011      	beq.n	80084b4 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8008490:	2327      	movs	r3, #39	@ 0x27
 8008492:	18fb      	adds	r3, r7, r3
 8008494:	2200      	movs	r2, #0
 8008496:	701a      	strb	r2, [r3, #0]
 8008498:	e005      	b.n	80084a6 <HIDS_GetMeasurementValues+0x8e>
 800849a:	2127      	movs	r1, #39	@ 0x27
 800849c:	187b      	adds	r3, r7, r1
 800849e:	781a      	ldrb	r2, [r3, #0]
 80084a0:	187b      	adds	r3, r7, r1
 80084a2:	3201      	adds	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	2327      	movs	r3, #39	@ 0x27
 80084a8:	18fb      	adds	r3, r7, r3
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b05      	cmp	r3, #5
 80084ae:	d9f4      	bls.n	800849a <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 80084b0:	2300      	movs	r3, #0
 80084b2:	e0a7      	b.n	8008604 <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 80084b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008624 <HIDS_GetMeasurementValues+0x20c>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	22af      	movs	r2, #175	@ 0xaf
 80084bc:	4353      	muls	r3, r2
 80084be:	4a59      	ldr	r2, [pc, #356]	@ (8008624 <HIDS_GetMeasurementValues+0x20c>)
 80084c0:	7852      	ldrb	r2, [r2, #1]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	0018      	movs	r0, r3
 80084c6:	f7fa fef9 	bl	80032bc <__aeabi_i2d>
 80084ca:	2200      	movs	r2, #0
 80084cc:	4b56      	ldr	r3, [pc, #344]	@ (8008628 <HIDS_GetMeasurementValues+0x210>)
 80084ce:	f7f9 fbef 	bl	8001cb0 <__aeabi_ddiv>
 80084d2:	0002      	movs	r2, r0
 80084d4:	000b      	movs	r3, r1
 80084d6:	0010      	movs	r0, r2
 80084d8:	0019      	movs	r1, r3
 80084da:	f7fa ff89 	bl	80033f0 <__aeabi_d2f>
 80084de:	1c03      	adds	r3, r0, #0
 80084e0:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 80084e2:	4952      	ldr	r1, [pc, #328]	@ (800862c <HIDS_GetMeasurementValues+0x214>)
 80084e4:	6938      	ldr	r0, [r7, #16]
 80084e6:	f7f8 fe17 	bl	8001118 <__aeabi_fsub>
 80084ea:	1c03      	adds	r3, r0, #0
 80084ec:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80084ee:	4b4d      	ldr	r3, [pc, #308]	@ (8008624 <HIDS_GetMeasurementValues+0x20c>)
 80084f0:	78db      	ldrb	r3, [r3, #3]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	4a4b      	ldr	r2, [pc, #300]	@ (8008624 <HIDS_GetMeasurementValues+0x20c>)
 80084f6:	7912      	ldrb	r2, [r2, #4]
 80084f8:	431a      	orrs	r2, r3
 80084fa:	0013      	movs	r3, r2
 80084fc:	015b      	lsls	r3, r3, #5
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	189b      	adds	r3, r3, r2
 8008504:	0018      	movs	r0, r3
 8008506:	f7fa fed9 	bl	80032bc <__aeabi_i2d>
 800850a:	2200      	movs	r2, #0
 800850c:	4b46      	ldr	r3, [pc, #280]	@ (8008628 <HIDS_GetMeasurementValues+0x210>)
 800850e:	f7f9 fbcf 	bl	8001cb0 <__aeabi_ddiv>
 8008512:	0002      	movs	r2, r0
 8008514:	000b      	movs	r3, r1
 8008516:	0010      	movs	r0, r2
 8008518:	0019      	movs	r1, r3
 800851a:	f7fa ff69 	bl	80033f0 <__aeabi_d2f>
 800851e:	1c03      	adds	r3, r0, #0
 8008520:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8008522:	4943      	ldr	r1, [pc, #268]	@ (8008630 <HIDS_GetMeasurementValues+0x218>)
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7f8 fdf7 	bl	8001118 <__aeabi_fsub>
 800852a:	1c03      	adds	r3, r0, #0
 800852c:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 800852e:	4b3a      	ldr	r3, [pc, #232]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	d910      	bls.n	800855a <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8008538:	4b37      	ldr	r3, [pc, #220]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	4b3d      	ldr	r3, [pc, #244]	@ (8008634 <HIDS_GetMeasurementValues+0x21c>)
 800853e:	0092      	lsls	r2, r2, #2
 8008540:	6939      	ldr	r1, [r7, #16]
 8008542:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8008544:	4b34      	ldr	r3, [pc, #208]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	4b3b      	ldr	r3, [pc, #236]	@ (8008638 <HIDS_GetMeasurementValues+0x220>)
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	68f9      	ldr	r1, [r7, #12]
 800854e:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8008550:	4b31      	ldr	r3, [pc, #196]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	4b30      	ldr	r3, [pc, #192]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 8008558:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 800855a:	4b2f      	ldr	r3, [pc, #188]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	429a      	cmp	r2, r3
 8008562:	d84c      	bhi.n	80085fe <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8008564:	2300      	movs	r3, #0
 8008566:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8008568:	2300      	movs	r3, #0
 800856a:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 800856c:	2300      	movs	r3, #0
 800856e:	61bb      	str	r3, [r7, #24]
 8008570:	e016      	b.n	80085a0 <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 8008572:	4b30      	ldr	r3, [pc, #192]	@ (8008634 <HIDS_GetMeasurementValues+0x21c>)
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	0092      	lsls	r2, r2, #2
 8008578:	58d3      	ldr	r3, [r2, r3]
 800857a:	1c19      	adds	r1, r3, #0
 800857c:	6a38      	ldr	r0, [r7, #32]
 800857e:	f7f8 f91d 	bl	80007bc <__aeabi_fadd>
 8008582:	1c03      	adds	r3, r0, #0
 8008584:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8008586:	4b2c      	ldr	r3, [pc, #176]	@ (8008638 <HIDS_GetMeasurementValues+0x220>)
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	0092      	lsls	r2, r2, #2
 800858c:	58d3      	ldr	r3, [r2, r3]
 800858e:	1c19      	adds	r1, r3, #0
 8008590:	69f8      	ldr	r0, [r7, #28]
 8008592:	f7f8 f913 	bl	80007bc <__aeabi_fadd>
 8008596:	1c03      	adds	r3, r0, #0
 8008598:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	3301      	adds	r3, #1
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d3e3      	bcc.n	8008572 <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 80085aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	0018      	movs	r0, r3
 80085b0:	f7f8 ffd8 	bl	8001564 <__aeabi_ui2f>
 80085b4:	1c03      	adds	r3, r0, #0
 80085b6:	1c19      	adds	r1, r3, #0
 80085b8:	6a38      	ldr	r0, [r7, #32]
 80085ba:	f7f8 fa89 	bl	8000ad0 <__aeabi_fdiv>
 80085be:	1c03      	adds	r3, r0, #0
 80085c0:	1c1a      	adds	r2, r3, #0
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 80085c6:	4b14      	ldr	r3, [pc, #80]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	0018      	movs	r0, r3
 80085cc:	f7f8 ffca 	bl	8001564 <__aeabi_ui2f>
 80085d0:	1c03      	adds	r3, r0, #0
 80085d2:	1c19      	adds	r1, r3, #0
 80085d4:	69f8      	ldr	r0, [r7, #28]
 80085d6:	f7f8 fa7b 	bl	8000ad0 <__aeabi_fdiv>
 80085da:	1c03      	adds	r3, r0, #0
 80085dc:	1c1a      	adds	r2, r3, #0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	0011      	movs	r1, r2
 80085e8:	0018      	movs	r0, r3
 80085ea:	f7fe ffa3 	bl	8007534 <SGP_GetHT>

    measurements = 0;
 80085ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008618 <HIDS_GetMeasurementValues+0x200>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 80085f4:	4b05      	ldr	r3, [pc, #20]	@ (800860c <HIDS_GetMeasurementValues+0x1f4>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e002      	b.n	8008604 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 80085fe:	f7ff fe2f 	bl	8008260 <HIDS_StartMeasurement>
	return false;
 8008602:	2300      	movs	r3, #0
}
 8008604:	0018      	movs	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	b00a      	add	sp, #40	@ 0x28
 800860a:	bd80      	pop	{r7, pc}
 800860c:	200015c6 	.word	0x200015c6
 8008610:	20000140 	.word	0x20000140
 8008614:	2000013c 	.word	0x2000013c
 8008618:	200015c8 	.word	0x200015c8
 800861c:	08012fe0 	.word	0x08012fe0
 8008620:	0801300c 	.word	0x0801300c
 8008624:	200015c0 	.word	0x200015c0
 8008628:	40efffe0 	.word	0x40efffe0
 800862c:	42340000 	.word	0x42340000
 8008630:	40c00000 	.word	0x40c00000
 8008634:	200015cc 	.word	0x200015cc
 8008638:	200019cc 	.word	0x200019cc

0800863c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800863c:	480d      	ldr	r0, [pc, #52]	@ (8008674 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800863e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008640:	f7ff f91a 	bl	8007878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008644:	480c      	ldr	r0, [pc, #48]	@ (8008678 <LoopForever+0x6>)
  ldr r1, =_edata
 8008646:	490d      	ldr	r1, [pc, #52]	@ (800867c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008648:	4a0d      	ldr	r2, [pc, #52]	@ (8008680 <LoopForever+0xe>)
  movs r3, #0
 800864a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800864c:	e002      	b.n	8008654 <LoopCopyDataInit>

0800864e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800864e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008652:	3304      	adds	r3, #4

08008654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008658:	d3f9      	bcc.n	800864e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800865a:	4a0a      	ldr	r2, [pc, #40]	@ (8008684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800865c:	4c0a      	ldr	r4, [pc, #40]	@ (8008688 <LoopForever+0x16>)
  movs r3, #0
 800865e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008660:	e001      	b.n	8008666 <LoopFillZerobss>

08008662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008664:	3204      	adds	r2, #4

08008666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008668:	d3fb      	bcc.n	8008662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800866a:	f007 fcfd 	bl	8010068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800866e:	f7fc fef3 	bl	8005458 <main>

08008672 <LoopForever>:

LoopForever:
    b LoopForever
 8008672:	e7fe      	b.n	8008672 <LoopForever>
   ldr   r0, =_estack
 8008674:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8008678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800867c:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8008680:	08013550 	.word	0x08013550
  ldr r2, =_sbss
 8008684:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8008688:	20001f1c 	.word	0x20001f1c

0800868c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800868c:	e7fe      	b.n	800868c <ADC1_COMP_IRQHandler>
	...

08008690 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008696:	1dfb      	adds	r3, r7, #7
 8008698:	2200      	movs	r2, #0
 800869a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800869c:	4b0b      	ldr	r3, [pc, #44]	@ (80086cc <HAL_Init+0x3c>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <HAL_Init+0x3c>)
 80086a2:	2140      	movs	r1, #64	@ 0x40
 80086a4:	430a      	orrs	r2, r1
 80086a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80086a8:	2003      	movs	r0, #3
 80086aa:	f000 f811 	bl	80086d0 <HAL_InitTick>
 80086ae:	1e03      	subs	r3, r0, #0
 80086b0:	d003      	beq.n	80086ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80086b2:	1dfb      	adds	r3, r7, #7
 80086b4:	2201      	movs	r2, #1
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	e001      	b.n	80086be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80086ba:	f7fe ffbf 	bl	800763c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80086be:	1dfb      	adds	r3, r7, #7
 80086c0:	781b      	ldrb	r3, [r3, #0]
}
 80086c2:	0018      	movs	r0, r3
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b002      	add	sp, #8
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	40022000 	.word	0x40022000

080086d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80086d0:	b590      	push	{r4, r7, lr}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80086d8:	4b14      	ldr	r3, [pc, #80]	@ (800872c <HAL_InitTick+0x5c>)
 80086da:	681c      	ldr	r4, [r3, #0]
 80086dc:	4b14      	ldr	r3, [pc, #80]	@ (8008730 <HAL_InitTick+0x60>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	0019      	movs	r1, r3
 80086e2:	23fa      	movs	r3, #250	@ 0xfa
 80086e4:	0098      	lsls	r0, r3, #2
 80086e6:	f7f7 fd2b 	bl	8000140 <__udivsi3>
 80086ea:	0003      	movs	r3, r0
 80086ec:	0019      	movs	r1, r3
 80086ee:	0020      	movs	r0, r4
 80086f0:	f7f7 fd26 	bl	8000140 <__udivsi3>
 80086f4:	0003      	movs	r3, r0
 80086f6:	0018      	movs	r0, r3
 80086f8:	f000 fcad 	bl	8009056 <HAL_SYSTICK_Config>
 80086fc:	1e03      	subs	r3, r0, #0
 80086fe:	d001      	beq.n	8008704 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e00f      	b.n	8008724 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b03      	cmp	r3, #3
 8008708:	d80b      	bhi.n	8008722 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	2301      	movs	r3, #1
 800870e:	425b      	negs	r3, r3
 8008710:	2200      	movs	r2, #0
 8008712:	0018      	movs	r0, r3
 8008714:	f000 fc7a 	bl	800900c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008718:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <HAL_InitTick+0x64>)
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	e000      	b.n	8008724 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b003      	add	sp, #12
 800872a:	bd90      	pop	{r4, r7, pc}
 800872c:	20000130 	.word	0x20000130
 8008730:	20000148 	.word	0x20000148
 8008734:	20000144 	.word	0x20000144

08008738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800873c:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <HAL_IncTick+0x1c>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	001a      	movs	r2, r3
 8008742:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <HAL_IncTick+0x20>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	18d2      	adds	r2, r2, r3
 8008748:	4b03      	ldr	r3, [pc, #12]	@ (8008758 <HAL_IncTick+0x20>)
 800874a:	601a      	str	r2, [r3, #0]
}
 800874c:	46c0      	nop			@ (mov r8, r8)
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	46c0      	nop			@ (mov r8, r8)
 8008754:	20000148 	.word	0x20000148
 8008758:	20001dcc 	.word	0x20001dcc

0800875c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  return uwTick;
 8008760:	4b02      	ldr	r3, [pc, #8]	@ (800876c <HAL_GetTick+0x10>)
 8008762:	681b      	ldr	r3, [r3, #0]
}
 8008764:	0018      	movs	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	46c0      	nop			@ (mov r8, r8)
 800876c:	20001dcc 	.word	0x20001dcc

08008770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008778:	f7ff fff0 	bl	800875c <HAL_GetTick>
 800877c:	0003      	movs	r3, r0
 800877e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3301      	adds	r3, #1
 8008788:	d005      	beq.n	8008796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800878a:	4b0a      	ldr	r3, [pc, #40]	@ (80087b4 <HAL_Delay+0x44>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	001a      	movs	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	189b      	adds	r3, r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	f7ff ffe0 	bl	800875c <HAL_GetTick>
 800879c:	0002      	movs	r2, r0
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d8f7      	bhi.n	8008798 <HAL_Delay+0x28>
  {
  }
}
 80087a8:	46c0      	nop			@ (mov r8, r8)
 80087aa:	46c0      	nop			@ (mov r8, r8)
 80087ac:	46bd      	mov	sp, r7
 80087ae:	b004      	add	sp, #16
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	46c0      	nop			@ (mov r8, r8)
 80087b4:	20000148 	.word	0x20000148

080087b8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e159      	b.n	8008a7e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2250      	movs	r2, #80	@ 0x50
 80087dc:	2100      	movs	r1, #0
 80087de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	0018      	movs	r0, r3
 80087e4:	f7fc f9e4 	bl	8004bb0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ec:	2210      	movs	r2, #16
 80087ee:	4013      	ands	r3, r2
 80087f0:	2b10      	cmp	r3, #16
 80087f2:	d005      	beq.n	8008800 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	2204      	movs	r2, #4
 80087fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80087fe:	d00b      	beq.n	8008818 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008804:	2210      	movs	r2, #16
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2250      	movs	r2, #80	@ 0x50
 8008810:	2100      	movs	r1, #0
 8008812:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e132      	b.n	8008a7e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881c:	4a9a      	ldr	r2, [pc, #616]	@ (8008a88 <HAL_ADC_Init+0x2d0>)
 800881e:	4013      	ands	r3, r2
 8008820:	2202      	movs	r2, #2
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2203      	movs	r2, #3
 8008830:	4013      	ands	r3, r2
 8008832:	2b01      	cmp	r3, #1
 8008834:	d108      	bne.n	8008848 <HAL_ADC_Init+0x90>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2201      	movs	r2, #1
 800883e:	4013      	ands	r3, r2
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_ADC_Init+0x90>
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <HAL_ADC_Init+0x92>
 8008848:	2300      	movs	r3, #0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d149      	bne.n	80088e2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	23c0      	movs	r3, #192	@ 0xc0
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	429a      	cmp	r2, r3
 8008858:	d00b      	beq.n	8008872 <HAL_ADC_Init+0xba>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	2380      	movs	r3, #128	@ 0x80
 8008860:	05db      	lsls	r3, r3, #23
 8008862:	429a      	cmp	r2, r3
 8008864:	d005      	beq.n	8008872 <HAL_ADC_Init+0xba>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	2380      	movs	r3, #128	@ 0x80
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	429a      	cmp	r2, r3
 8008870:	d111      	bne.n	8008896 <HAL_ADC_Init+0xde>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	691a      	ldr	r2, [r3, #16]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	0092      	lsls	r2, r2, #2
 800887e:	0892      	lsrs	r2, r2, #2
 8008880:	611a      	str	r2, [r3, #16]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6919      	ldr	r1, [r3, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	611a      	str	r2, [r3, #16]
 8008894:	e014      	b.n	80088c0 <HAL_ADC_Init+0x108>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	0092      	lsls	r2, r2, #2
 80088a2:	0892      	lsrs	r2, r2, #2
 80088a4:	611a      	str	r2, [r3, #16]
 80088a6:	4b79      	ldr	r3, [pc, #484]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b78      	ldr	r3, [pc, #480]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088ac:	4978      	ldr	r1, [pc, #480]	@ (8008a90 <HAL_ADC_Init+0x2d8>)
 80088ae:	400a      	ands	r2, r1
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	4b76      	ldr	r3, [pc, #472]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088b4:	6819      	ldr	r1, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	4b74      	ldr	r3, [pc, #464]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088bc:	430a      	orrs	r2, r1
 80088be:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2118      	movs	r1, #24
 80088cc:	438a      	bics	r2, r1
 80088ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68d9      	ldr	r1, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80088e2:	4b6a      	ldr	r3, [pc, #424]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4b69      	ldr	r3, [pc, #420]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088e8:	496a      	ldr	r1, [pc, #424]	@ (8008a94 <HAL_ADC_Init+0x2dc>)
 80088ea:	400a      	ands	r2, r1
 80088ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80088ee:	4b67      	ldr	r3, [pc, #412]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088f0:	6819      	ldr	r1, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f6:	065a      	lsls	r2, r3, #25
 80088f8:	4b64      	ldr	r3, [pc, #400]	@ (8008a8c <HAL_ADC_Init+0x2d4>)
 80088fa:	430a      	orrs	r2, r1
 80088fc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	2380      	movs	r3, #128	@ 0x80
 8008906:	055b      	lsls	r3, r3, #21
 8008908:	4013      	ands	r3, r2
 800890a:	d108      	bne.n	800891e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2180      	movs	r1, #128	@ 0x80
 8008918:	0549      	lsls	r1, r1, #21
 800891a:	430a      	orrs	r2, r1
 800891c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	495b      	ldr	r1, [pc, #364]	@ (8008a98 <HAL_ADC_Init+0x2e0>)
 800892a:	400a      	ands	r2, r1
 800892c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68d9      	ldr	r1, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d101      	bne.n	8008944 <HAL_ADC_Init+0x18c>
 8008940:	2304      	movs	r3, #4
 8008942:	e000      	b.n	8008946 <HAL_ADC_Init+0x18e>
 8008944:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008946:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2020      	movs	r0, #32
 800894c:	5c1b      	ldrb	r3, [r3, r0]
 800894e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008950:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	202c      	movs	r0, #44	@ 0x2c
 8008956:	5c1b      	ldrb	r3, [r3, r0]
 8008958:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800895a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008960:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8008968:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008970:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800897e:	23c2      	movs	r3, #194	@ 0xc2
 8008980:	33ff      	adds	r3, #255	@ 0xff
 8008982:	429a      	cmp	r2, r3
 8008984:	d00b      	beq.n	800899e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68d9      	ldr	r1, [r3, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2221      	movs	r2, #33	@ 0x21
 80089a2:	5c9b      	ldrb	r3, [r3, r2]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d11a      	bne.n	80089de <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	5c9b      	ldrb	r3, [r3, r2]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2180      	movs	r1, #128	@ 0x80
 80089be:	0249      	lsls	r1, r1, #9
 80089c0:	430a      	orrs	r2, r1
 80089c2:	60da      	str	r2, [r3, #12]
 80089c4:	e00b      	b.n	80089de <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ca:	2220      	movs	r2, #32
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d6:	2201      	movs	r2, #1
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d11f      	bne.n	8008a26 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	492a      	ldr	r1, [pc, #168]	@ (8008a9c <HAL_ADC_Init+0x2e4>)
 80089f2:	400a      	ands	r2, r1
 80089f4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6919      	ldr	r1, [r3, #16]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8008a04:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8008a0a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	691a      	ldr	r2, [r3, #16]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2101      	movs	r1, #1
 8008a20:	430a      	orrs	r2, r1
 8008a22:	611a      	str	r2, [r3, #16]
 8008a24:	e00e      	b.n	8008a44 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	4013      	ands	r3, r2
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d107      	bne.n	8008a44 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691a      	ldr	r2, [r3, #16]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2101      	movs	r1, #1
 8008a40:	438a      	bics	r2, r1
 8008a42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2107      	movs	r1, #7
 8008a50:	438a      	bics	r2, r1
 8008a52:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6959      	ldr	r1, [r3, #20]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a70:	2203      	movs	r2, #3
 8008a72:	4393      	bics	r3, r2
 8008a74:	2201      	movs	r2, #1
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	0018      	movs	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	b002      	add	sp, #8
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	46c0      	nop			@ (mov r8, r8)
 8008a88:	fffffefd 	.word	0xfffffefd
 8008a8c:	40012708 	.word	0x40012708
 8008a90:	ffc3ffff 	.word	0xffc3ffff
 8008a94:	fdffffff 	.word	0xfdffffff
 8008a98:	fffe0219 	.word	0xfffe0219
 8008a9c:	fffffc03 	.word	0xfffffc03

08008aa0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008aa0:	b590      	push	{r4, r7, lr}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008aa8:	230f      	movs	r3, #15
 8008aaa:	18fb      	adds	r3, r7, r3
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	2204      	movs	r2, #4
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d138      	bne.n	8008b2e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2250      	movs	r2, #80	@ 0x50
 8008ac0:	5c9b      	ldrb	r3, [r3, r2]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <HAL_ADC_Start+0x2a>
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e038      	b.n	8008b3c <HAL_ADC_Start+0x9c>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2250      	movs	r2, #80	@ 0x50
 8008ace:	2101      	movs	r1, #1
 8008ad0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d007      	beq.n	8008aea <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8008ada:	230f      	movs	r3, #15
 8008adc:	18fc      	adds	r4, r7, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f000 f95f 	bl	8008da4 <ADC_Enable>
 8008ae6:	0003      	movs	r3, r0
 8008ae8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008aea:	230f      	movs	r3, #15
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d120      	bne.n	8008b36 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af8:	4a12      	ldr	r2, [pc, #72]	@ (8008b44 <HAL_ADC_Start+0xa4>)
 8008afa:	4013      	ands	r3, r2
 8008afc:	2280      	movs	r2, #128	@ 0x80
 8008afe:	0052      	lsls	r2, r2, #1
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2250      	movs	r2, #80	@ 0x50
 8008b10:	2100      	movs	r1, #0
 8008b12:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	221c      	movs	r2, #28
 8008b1a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2104      	movs	r1, #4
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	609a      	str	r2, [r3, #8]
 8008b2c:	e003      	b.n	8008b36 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008b2e:	230f      	movs	r3, #15
 8008b30:	18fb      	adds	r3, r7, r3
 8008b32:	2202      	movs	r2, #2
 8008b34:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8008b36:	230f      	movs	r3, #15
 8008b38:	18fb      	adds	r3, r7, r3
 8008b3a:	781b      	ldrb	r3, [r3, #0]
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b005      	add	sp, #20
 8008b42:	bd90      	pop	{r4, r7, pc}
 8008b44:	fffff0fe 	.word	0xfffff0fe

08008b48 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d102      	bne.n	8008b68 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8008b62:	2308      	movs	r3, #8
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	e014      	b.n	8008b92 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	4013      	ands	r3, r2
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d10b      	bne.n	8008b8e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2250      	movs	r2, #80	@ 0x50
 8008b86:	2100      	movs	r1, #0
 8008b88:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e072      	b.n	8008c74 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8008b8e:	230c      	movs	r3, #12
 8008b90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8008b92:	f7ff fde3 	bl	800875c <HAL_GetTick>
 8008b96:	0003      	movs	r3, r0
 8008b98:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008b9a:	e01f      	b.n	8008bdc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	d01c      	beq.n	8008bdc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <HAL_ADC_PollForConversion+0x70>
 8008ba8:	f7ff fdd8 	bl	800875c <HAL_GetTick>
 8008bac:	0002      	movs	r2, r0
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d211      	bcs.n	8008bdc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	d10b      	bne.n	8008bdc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc8:	2204      	movs	r2, #4
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2250      	movs	r2, #80	@ 0x50
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e04b      	b.n	8008c74 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	4013      	ands	r3, r2
 8008be6:	d0d9      	beq.n	8008b9c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bec:	2280      	movs	r2, #128	@ 0x80
 8008bee:	0092      	lsls	r2, r2, #2
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	23c0      	movs	r3, #192	@ 0xc0
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4013      	ands	r3, r2
 8008c02:	d12e      	bne.n	8008c62 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d129      	bne.n	8008c62 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2208      	movs	r2, #8
 8008c16:	4013      	ands	r3, r2
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d122      	bne.n	8008c62 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2204      	movs	r2, #4
 8008c24:	4013      	ands	r3, r2
 8008c26:	d110      	bne.n	8008c4a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	210c      	movs	r1, #12
 8008c34:	438a      	bics	r2, r1
 8008c36:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8008c7c <HAL_ADC_PollForConversion+0x134>)
 8008c3e:	4013      	ands	r3, r2
 8008c40:	2201      	movs	r2, #1
 8008c42:	431a      	orrs	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	655a      	str	r2, [r3, #84]	@ 0x54
 8008c48:	e00b      	b.n	8008c62 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c4e:	2220      	movs	r2, #32
 8008c50:	431a      	orrs	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	220c      	movs	r2, #12
 8008c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	0018      	movs	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b004      	add	sp, #16
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	fffffefe 	.word	0xfffffefe

08008c80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8008c8e:	0018      	movs	r0, r3
 8008c90:	46bd      	mov	sp, r7
 8008c92:	b002      	add	sp, #8
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2250      	movs	r2, #80	@ 0x50
 8008ca6:	5c9b      	ldrb	r3, [r3, r2]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_ADC_ConfigChannel+0x18>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e06c      	b.n	8008d8a <HAL_ADC_ConfigChannel+0xf2>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2250      	movs	r2, #80	@ 0x50
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2204      	movs	r2, #4
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	d00b      	beq.n	8008cdc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc8:	2220      	movs	r2, #32
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2250      	movs	r2, #80	@ 0x50
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e056      	b.n	8008d8a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8008d94 <HAL_ADC_ConfigChannel+0xfc>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d028      	beq.n	8008d38 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	035b      	lsls	r3, r3, #13
 8008cf2:	0b5a      	lsrs	r2, r3, #13
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	2380      	movs	r3, #128	@ 0x80
 8008d02:	02db      	lsls	r3, r3, #11
 8008d04:	4013      	ands	r3, r2
 8008d06:	d009      	beq.n	8008d1c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8008d08:	4b23      	ldr	r3, [pc, #140]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	4b22      	ldr	r3, [pc, #136]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d0e:	2180      	movs	r1, #128	@ 0x80
 8008d10:	0409      	lsls	r1, r1, #16
 8008d12:	430a      	orrs	r2, r1
 8008d14:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8008d16:	200a      	movs	r0, #10
 8008d18:	f000 f8ac 	bl	8008e74 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	2380      	movs	r3, #128	@ 0x80
 8008d22:	029b      	lsls	r3, r3, #10
 8008d24:	4013      	ands	r3, r2
 8008d26:	d02b      	beq.n	8008d80 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8008d28:	4b1b      	ldr	r3, [pc, #108]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d2e:	2180      	movs	r1, #128	@ 0x80
 8008d30:	03c9      	lsls	r1, r1, #15
 8008d32:	430a      	orrs	r2, r1
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	e023      	b.n	8008d80 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	035b      	lsls	r3, r3, #13
 8008d44:	0b5b      	lsrs	r3, r3, #13
 8008d46:	43d9      	mvns	r1, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	400a      	ands	r2, r1
 8008d4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	2380      	movs	r3, #128	@ 0x80
 8008d56:	02db      	lsls	r3, r3, #11
 8008d58:	4013      	ands	r3, r2
 8008d5a:	d005      	beq.n	8008d68 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8008d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	4b0d      	ldr	r3, [pc, #52]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d62:	490e      	ldr	r1, [pc, #56]	@ (8008d9c <HAL_ADC_ConfigChannel+0x104>)
 8008d64:	400a      	ands	r2, r1
 8008d66:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	2380      	movs	r3, #128	@ 0x80
 8008d6e:	029b      	lsls	r3, r3, #10
 8008d70:	4013      	ands	r3, r2
 8008d72:	d005      	beq.n	8008d80 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8008d74:	4b08      	ldr	r3, [pc, #32]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	4b07      	ldr	r3, [pc, #28]	@ (8008d98 <HAL_ADC_ConfigChannel+0x100>)
 8008d7a:	4909      	ldr	r1, [pc, #36]	@ (8008da0 <HAL_ADC_ConfigChannel+0x108>)
 8008d7c:	400a      	ands	r2, r1
 8008d7e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2250      	movs	r2, #80	@ 0x50
 8008d84:	2100      	movs	r1, #0
 8008d86:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b002      	add	sp, #8
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	46c0      	nop			@ (mov r8, r8)
 8008d94:	00001001 	.word	0x00001001
 8008d98:	40012708 	.word	0x40012708
 8008d9c:	ff7fffff 	.word	0xff7fffff
 8008da0:	ffbfffff 	.word	0xffbfffff

08008da4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2203      	movs	r2, #3
 8008db8:	4013      	ands	r3, r2
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d108      	bne.n	8008dd0 <ADC_Enable+0x2c>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <ADC_Enable+0x2c>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e000      	b.n	8008dd2 <ADC_Enable+0x2e>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d146      	bne.n	8008e64 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	4a24      	ldr	r2, [pc, #144]	@ (8008e70 <ADC_Enable+0xcc>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	d00d      	beq.n	8008dfe <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de6:	2210      	movs	r2, #16
 8008de8:	431a      	orrs	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df2:	2201      	movs	r2, #1
 8008df4:	431a      	orrs	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e033      	b.n	8008e66 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2101      	movs	r1, #1
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8008e0e:	2001      	movs	r0, #1
 8008e10:	f000 f830 	bl	8008e74 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8008e14:	f7ff fca2 	bl	800875c <HAL_GetTick>
 8008e18:	0003      	movs	r3, r0
 8008e1a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008e1c:	e01b      	b.n	8008e56 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008e1e:	f7ff fc9d 	bl	800875c <HAL_GetTick>
 8008e22:	0002      	movs	r2, r0
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b0a      	cmp	r3, #10
 8008e2a:	d914      	bls.n	8008e56 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2201      	movs	r2, #1
 8008e34:	4013      	ands	r3, r2
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d00d      	beq.n	8008e56 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3e:	2210      	movs	r2, #16
 8008e40:	431a      	orrs	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	431a      	orrs	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e007      	b.n	8008e66 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d1dc      	bne.n	8008e1e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	0018      	movs	r0, r3
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b004      	add	sp, #16
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	46c0      	nop			@ (mov r8, r8)
 8008e70:	80000017 	.word	0x80000017

08008e74 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8008e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008eac <ADC_DelayMicroSecond+0x38>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	490b      	ldr	r1, [pc, #44]	@ (8008eb0 <ADC_DelayMicroSecond+0x3c>)
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7f7 f95c 	bl	8000140 <__udivsi3>
 8008e88:	0003      	movs	r3, r0
 8008e8a:	001a      	movs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4353      	muls	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8008e92:	e002      	b.n	8008e9a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1f9      	bne.n	8008e94 <ADC_DelayMicroSecond+0x20>
  }
}
 8008ea0:	46c0      	nop			@ (mov r8, r8)
 8008ea2:	46c0      	nop			@ (mov r8, r8)
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b004      	add	sp, #16
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	46c0      	nop			@ (mov r8, r8)
 8008eac:	20000130 	.word	0x20000130
 8008eb0:	000f4240 	.word	0x000f4240

08008eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	0002      	movs	r2, r0
 8008ebc:	1dfb      	adds	r3, r7, #7
 8008ebe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008ec0:	1dfb      	adds	r3, r7, #7
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ec6:	d809      	bhi.n	8008edc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ec8:	1dfb      	adds	r3, r7, #7
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	001a      	movs	r2, r3
 8008ece:	231f      	movs	r3, #31
 8008ed0:	401a      	ands	r2, r3
 8008ed2:	4b04      	ldr	r3, [pc, #16]	@ (8008ee4 <__NVIC_EnableIRQ+0x30>)
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	4091      	lsls	r1, r2
 8008ed8:	000a      	movs	r2, r1
 8008eda:	601a      	str	r2, [r3, #0]
  }
}
 8008edc:	46c0      	nop			@ (mov r8, r8)
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	b002      	add	sp, #8
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	e000e100 	.word	0xe000e100

08008ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ee8:	b590      	push	{r4, r7, lr}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	0002      	movs	r2, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	1dfb      	adds	r3, r7, #7
 8008ef4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008ef6:	1dfb      	adds	r3, r7, #7
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8008efc:	d828      	bhi.n	8008f50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008efe:	4a2f      	ldr	r2, [pc, #188]	@ (8008fbc <__NVIC_SetPriority+0xd4>)
 8008f00:	1dfb      	adds	r3, r7, #7
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b25b      	sxtb	r3, r3
 8008f06:	089b      	lsrs	r3, r3, #2
 8008f08:	33c0      	adds	r3, #192	@ 0xc0
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	589b      	ldr	r3, [r3, r2]
 8008f0e:	1dfa      	adds	r2, r7, #7
 8008f10:	7812      	ldrb	r2, [r2, #0]
 8008f12:	0011      	movs	r1, r2
 8008f14:	2203      	movs	r2, #3
 8008f16:	400a      	ands	r2, r1
 8008f18:	00d2      	lsls	r2, r2, #3
 8008f1a:	21ff      	movs	r1, #255	@ 0xff
 8008f1c:	4091      	lsls	r1, r2
 8008f1e:	000a      	movs	r2, r1
 8008f20:	43d2      	mvns	r2, r2
 8008f22:	401a      	ands	r2, r3
 8008f24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	019b      	lsls	r3, r3, #6
 8008f2a:	22ff      	movs	r2, #255	@ 0xff
 8008f2c:	401a      	ands	r2, r3
 8008f2e:	1dfb      	adds	r3, r7, #7
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	0018      	movs	r0, r3
 8008f34:	2303      	movs	r3, #3
 8008f36:	4003      	ands	r3, r0
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008f3c:	481f      	ldr	r0, [pc, #124]	@ (8008fbc <__NVIC_SetPriority+0xd4>)
 8008f3e:	1dfb      	adds	r3, r7, #7
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	b25b      	sxtb	r3, r3
 8008f44:	089b      	lsrs	r3, r3, #2
 8008f46:	430a      	orrs	r2, r1
 8008f48:	33c0      	adds	r3, #192	@ 0xc0
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008f4e:	e031      	b.n	8008fb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008f50:	4a1b      	ldr	r2, [pc, #108]	@ (8008fc0 <__NVIC_SetPriority+0xd8>)
 8008f52:	1dfb      	adds	r3, r7, #7
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	0019      	movs	r1, r3
 8008f58:	230f      	movs	r3, #15
 8008f5a:	400b      	ands	r3, r1
 8008f5c:	3b08      	subs	r3, #8
 8008f5e:	089b      	lsrs	r3, r3, #2
 8008f60:	3306      	adds	r3, #6
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	18d3      	adds	r3, r2, r3
 8008f66:	3304      	adds	r3, #4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	1dfa      	adds	r2, r7, #7
 8008f6c:	7812      	ldrb	r2, [r2, #0]
 8008f6e:	0011      	movs	r1, r2
 8008f70:	2203      	movs	r2, #3
 8008f72:	400a      	ands	r2, r1
 8008f74:	00d2      	lsls	r2, r2, #3
 8008f76:	21ff      	movs	r1, #255	@ 0xff
 8008f78:	4091      	lsls	r1, r2
 8008f7a:	000a      	movs	r2, r1
 8008f7c:	43d2      	mvns	r2, r2
 8008f7e:	401a      	ands	r2, r3
 8008f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	019b      	lsls	r3, r3, #6
 8008f86:	22ff      	movs	r2, #255	@ 0xff
 8008f88:	401a      	ands	r2, r3
 8008f8a:	1dfb      	adds	r3, r7, #7
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	0018      	movs	r0, r3
 8008f90:	2303      	movs	r3, #3
 8008f92:	4003      	ands	r3, r0
 8008f94:	00db      	lsls	r3, r3, #3
 8008f96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008f98:	4809      	ldr	r0, [pc, #36]	@ (8008fc0 <__NVIC_SetPriority+0xd8>)
 8008f9a:	1dfb      	adds	r3, r7, #7
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	001c      	movs	r4, r3
 8008fa0:	230f      	movs	r3, #15
 8008fa2:	4023      	ands	r3, r4
 8008fa4:	3b08      	subs	r3, #8
 8008fa6:	089b      	lsrs	r3, r3, #2
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	3306      	adds	r3, #6
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	18c3      	adds	r3, r0, r3
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	46c0      	nop			@ (mov r8, r8)
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	b003      	add	sp, #12
 8008fba:	bd90      	pop	{r4, r7, pc}
 8008fbc:	e000e100 	.word	0xe000e100
 8008fc0:	e000ed00 	.word	0xe000ed00

08008fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	1e5a      	subs	r2, r3, #1
 8008fd0:	2380      	movs	r3, #128	@ 0x80
 8008fd2:	045b      	lsls	r3, r3, #17
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d301      	bcc.n	8008fdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e010      	b.n	8008ffe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009008 <SysTick_Config+0x44>)
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	3a01      	subs	r2, #1
 8008fe2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	425b      	negs	r3, r3
 8008fe8:	2103      	movs	r1, #3
 8008fea:	0018      	movs	r0, r3
 8008fec:	f7ff ff7c 	bl	8008ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ff0:	4b05      	ldr	r3, [pc, #20]	@ (8009008 <SysTick_Config+0x44>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ff6:	4b04      	ldr	r3, [pc, #16]	@ (8009008 <SysTick_Config+0x44>)
 8008ff8:	2207      	movs	r2, #7
 8008ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	0018      	movs	r0, r3
 8009000:	46bd      	mov	sp, r7
 8009002:	b002      	add	sp, #8
 8009004:	bd80      	pop	{r7, pc}
 8009006:	46c0      	nop			@ (mov r8, r8)
 8009008:	e000e010 	.word	0xe000e010

0800900c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	607a      	str	r2, [r7, #4]
 8009016:	210f      	movs	r1, #15
 8009018:	187b      	adds	r3, r7, r1
 800901a:	1c02      	adds	r2, r0, #0
 800901c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	187b      	adds	r3, r7, r1
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	b25b      	sxtb	r3, r3
 8009026:	0011      	movs	r1, r2
 8009028:	0018      	movs	r0, r3
 800902a:	f7ff ff5d 	bl	8008ee8 <__NVIC_SetPriority>
}
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	46bd      	mov	sp, r7
 8009032:	b004      	add	sp, #16
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	0002      	movs	r2, r0
 800903e:	1dfb      	adds	r3, r7, #7
 8009040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009042:	1dfb      	adds	r3, r7, #7
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b25b      	sxtb	r3, r3
 8009048:	0018      	movs	r0, r3
 800904a:	f7ff ff33 	bl	8008eb4 <__NVIC_EnableIRQ>
}
 800904e:	46c0      	nop			@ (mov r8, r8)
 8009050:	46bd      	mov	sp, r7
 8009052:	b002      	add	sp, #8
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	0018      	movs	r0, r3
 8009062:	f7ff ffaf 	bl	8008fc4 <SysTick_Config>
 8009066:	0003      	movs	r3, r0
}
 8009068:	0018      	movs	r0, r3
 800906a:	46bd      	mov	sp, r7
 800906c:	b002      	add	sp, #8
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e061      	b.n	8009146 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a32      	ldr	r2, [pc, #200]	@ (8009150 <HAL_DMA_Init+0xe0>)
 8009088:	4694      	mov	ip, r2
 800908a:	4463      	add	r3, ip
 800908c:	2114      	movs	r1, #20
 800908e:	0018      	movs	r0, r3
 8009090:	f7f7 f856 	bl	8000140 <__udivsi3>
 8009094:	0003      	movs	r3, r0
 8009096:	009a      	lsls	r2, r3, #2
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a2d      	ldr	r2, [pc, #180]	@ (8009154 <HAL_DMA_Init+0xe4>)
 80090a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2225      	movs	r2, #37	@ 0x25
 80090a6:	2102      	movs	r1, #2
 80090a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4a28      	ldr	r2, [pc, #160]	@ (8009158 <HAL_DMA_Init+0xe8>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80090c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	2380      	movs	r3, #128	@ 0x80
 80090f6:	01db      	lsls	r3, r3, #7
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d018      	beq.n	800912e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80090fc:	4b17      	ldr	r3, [pc, #92]	@ (800915c <HAL_DMA_Init+0xec>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009104:	211c      	movs	r1, #28
 8009106:	400b      	ands	r3, r1
 8009108:	210f      	movs	r1, #15
 800910a:	4099      	lsls	r1, r3
 800910c:	000b      	movs	r3, r1
 800910e:	43d9      	mvns	r1, r3
 8009110:	4b12      	ldr	r3, [pc, #72]	@ (800915c <HAL_DMA_Init+0xec>)
 8009112:	400a      	ands	r2, r1
 8009114:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009116:	4b11      	ldr	r3, [pc, #68]	@ (800915c <HAL_DMA_Init+0xec>)
 8009118:	6819      	ldr	r1, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009122:	201c      	movs	r0, #28
 8009124:	4003      	ands	r3, r0
 8009126:	409a      	lsls	r2, r3
 8009128:	4b0c      	ldr	r3, [pc, #48]	@ (800915c <HAL_DMA_Init+0xec>)
 800912a:	430a      	orrs	r2, r1
 800912c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2225      	movs	r2, #37	@ 0x25
 8009138:	2101      	movs	r1, #1
 800913a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2224      	movs	r2, #36	@ 0x24
 8009140:	2100      	movs	r1, #0
 8009142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	0018      	movs	r0, r3
 8009148:	46bd      	mov	sp, r7
 800914a:	b004      	add	sp, #16
 800914c:	bd80      	pop	{r7, pc}
 800914e:	46c0      	nop			@ (mov r8, r8)
 8009150:	bffdfff8 	.word	0xbffdfff8
 8009154:	40020000 	.word	0x40020000
 8009158:	ffff800f 	.word	0xffff800f
 800915c:	400200a8 	.word	0x400200a8

08009160 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e04a      	b.n	8009208 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2101      	movs	r1, #1
 800917e:	438a      	bics	r2, r1
 8009180:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a22      	ldr	r2, [pc, #136]	@ (8009210 <HAL_DMA_DeInit+0xb0>)
 8009188:	4694      	mov	ip, r2
 800918a:	4463      	add	r3, ip
 800918c:	2114      	movs	r1, #20
 800918e:	0018      	movs	r0, r3
 8009190:	f7f6 ffd6 	bl	8000140 <__udivsi3>
 8009194:	0003      	movs	r3, r0
 8009196:	009a      	lsls	r2, r3, #2
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a1d      	ldr	r2, [pc, #116]	@ (8009214 <HAL_DMA_DeInit+0xb4>)
 80091a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ae:	221c      	movs	r2, #28
 80091b0:	401a      	ands	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	2101      	movs	r1, #1
 80091b8:	4091      	lsls	r1, r2
 80091ba:	000a      	movs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80091be:	4b16      	ldr	r3, [pc, #88]	@ (8009218 <HAL_DMA_DeInit+0xb8>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c6:	211c      	movs	r1, #28
 80091c8:	400b      	ands	r3, r1
 80091ca:	210f      	movs	r1, #15
 80091cc:	4099      	lsls	r1, r3
 80091ce:	000b      	movs	r3, r1
 80091d0:	43d9      	mvns	r1, r3
 80091d2:	4b11      	ldr	r3, [pc, #68]	@ (8009218 <HAL_DMA_DeInit+0xb8>)
 80091d4:	400a      	ands	r2, r1
 80091d6:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2225      	movs	r2, #37	@ 0x25
 80091fa:	2100      	movs	r1, #0
 80091fc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2224      	movs	r2, #36	@ 0x24
 8009202:	2100      	movs	r1, #0
 8009204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	0018      	movs	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	b002      	add	sp, #8
 800920e:	bd80      	pop	{r7, pc}
 8009210:	bffdfff8 	.word	0xbffdfff8
 8009214:	40020000 	.word	0x40020000
 8009218:	400200a8 	.word	0x400200a8

0800921c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800922a:	2317      	movs	r3, #23
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2224      	movs	r2, #36	@ 0x24
 8009236:	5c9b      	ldrb	r3, [r3, r2]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_DMA_Start_IT+0x24>
 800923c:	2302      	movs	r3, #2
 800923e:	e04f      	b.n	80092e0 <HAL_DMA_Start_IT+0xc4>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2224      	movs	r2, #36	@ 0x24
 8009244:	2101      	movs	r1, #1
 8009246:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2225      	movs	r2, #37	@ 0x25
 800924c:	5c9b      	ldrb	r3, [r3, r2]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b01      	cmp	r3, #1
 8009252:	d13a      	bne.n	80092ca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2225      	movs	r2, #37	@ 0x25
 8009258:	2102      	movs	r1, #2
 800925a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2101      	movs	r1, #1
 800926e:	438a      	bics	r2, r1
 8009270:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f976 	bl	800956a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	210e      	movs	r1, #14
 8009292:	430a      	orrs	r2, r1
 8009294:	601a      	str	r2, [r3, #0]
 8009296:	e00f      	b.n	80092b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2104      	movs	r1, #4
 80092a4:	438a      	bics	r2, r1
 80092a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	210a      	movs	r1, #10
 80092b4:	430a      	orrs	r2, r1
 80092b6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2101      	movs	r1, #1
 80092c4:	430a      	orrs	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	e007      	b.n	80092da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2224      	movs	r2, #36	@ 0x24
 80092ce:	2100      	movs	r1, #0
 80092d0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80092d2:	2317      	movs	r3, #23
 80092d4:	18fb      	adds	r3, r7, r3
 80092d6:	2202      	movs	r2, #2
 80092d8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80092da:	2317      	movs	r3, #23
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	781b      	ldrb	r3, [r3, #0]
}
 80092e0:	0018      	movs	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b006      	add	sp, #24
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f0:	230f      	movs	r3, #15
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2225      	movs	r2, #37	@ 0x25
 80092fc:	5c9b      	ldrb	r3, [r3, r2]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d008      	beq.n	8009316 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2204      	movs	r2, #4
 8009308:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2224      	movs	r2, #36	@ 0x24
 800930e:	2100      	movs	r1, #0
 8009310:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e024      	b.n	8009360 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	210e      	movs	r1, #14
 8009322:	438a      	bics	r2, r1
 8009324:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2101      	movs	r1, #1
 8009332:	438a      	bics	r2, r1
 8009334:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933a:	221c      	movs	r2, #28
 800933c:	401a      	ands	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009342:	2101      	movs	r1, #1
 8009344:	4091      	lsls	r1, r2
 8009346:	000a      	movs	r2, r1
 8009348:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2225      	movs	r2, #37	@ 0x25
 800934e:	2101      	movs	r1, #1
 8009350:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2224      	movs	r2, #36	@ 0x24
 8009356:	2100      	movs	r1, #0
 8009358:	5499      	strb	r1, [r3, r2]

    return status;
 800935a:	230f      	movs	r3, #15
 800935c:	18fb      	adds	r3, r7, r3
 800935e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009360:	0018      	movs	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	b004      	add	sp, #16
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009370:	210f      	movs	r1, #15
 8009372:	187b      	adds	r3, r7, r1
 8009374:	2200      	movs	r2, #0
 8009376:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2225      	movs	r2, #37	@ 0x25
 800937c:	5c9b      	ldrb	r3, [r3, r2]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d006      	beq.n	8009392 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2204      	movs	r2, #4
 8009388:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800938a:	187b      	adds	r3, r7, r1
 800938c:	2201      	movs	r2, #1
 800938e:	701a      	strb	r2, [r3, #0]
 8009390:	e02a      	b.n	80093e8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	210e      	movs	r1, #14
 800939e:	438a      	bics	r2, r1
 80093a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2101      	movs	r1, #1
 80093ae:	438a      	bics	r2, r1
 80093b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b6:	221c      	movs	r2, #28
 80093b8:	401a      	ands	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093be:	2101      	movs	r1, #1
 80093c0:	4091      	lsls	r1, r2
 80093c2:	000a      	movs	r2, r1
 80093c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2225      	movs	r2, #37	@ 0x25
 80093ca:	2101      	movs	r1, #1
 80093cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2224      	movs	r2, #36	@ 0x24
 80093d2:	2100      	movs	r1, #0
 80093d4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d004      	beq.n	80093e8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	0010      	movs	r0, r2
 80093e6:	4798      	blx	r3
    }
  }
  return status;
 80093e8:	230f      	movs	r3, #15
 80093ea:	18fb      	adds	r3, r7, r3
 80093ec:	781b      	ldrb	r3, [r3, #0]
}
 80093ee:	0018      	movs	r0, r3
 80093f0:	46bd      	mov	sp, r7
 80093f2:	b004      	add	sp, #16
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009412:	221c      	movs	r2, #28
 8009414:	4013      	ands	r3, r2
 8009416:	2204      	movs	r2, #4
 8009418:	409a      	lsls	r2, r3
 800941a:	0013      	movs	r3, r2
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4013      	ands	r3, r2
 8009420:	d026      	beq.n	8009470 <HAL_DMA_IRQHandler+0x7a>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2204      	movs	r2, #4
 8009426:	4013      	ands	r3, r2
 8009428:	d022      	beq.n	8009470 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2220      	movs	r2, #32
 8009432:	4013      	ands	r3, r2
 8009434:	d107      	bne.n	8009446 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2104      	movs	r1, #4
 8009442:	438a      	bics	r2, r1
 8009444:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944a:	221c      	movs	r2, #28
 800944c:	401a      	ands	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009452:	2104      	movs	r1, #4
 8009454:	4091      	lsls	r1, r2
 8009456:	000a      	movs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945e:	2b00      	cmp	r3, #0
 8009460:	d100      	bne.n	8009464 <HAL_DMA_IRQHandler+0x6e>
 8009462:	e071      	b.n	8009548 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	0010      	movs	r0, r2
 800946c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800946e:	e06b      	b.n	8009548 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009474:	221c      	movs	r2, #28
 8009476:	4013      	ands	r3, r2
 8009478:	2202      	movs	r2, #2
 800947a:	409a      	lsls	r2, r3
 800947c:	0013      	movs	r3, r2
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4013      	ands	r3, r2
 8009482:	d02d      	beq.n	80094e0 <HAL_DMA_IRQHandler+0xea>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2202      	movs	r2, #2
 8009488:	4013      	ands	r3, r2
 800948a:	d029      	beq.n	80094e0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2220      	movs	r2, #32
 8009494:	4013      	ands	r3, r2
 8009496:	d10b      	bne.n	80094b0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	210a      	movs	r1, #10
 80094a4:	438a      	bics	r2, r1
 80094a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2225      	movs	r2, #37	@ 0x25
 80094ac:	2101      	movs	r1, #1
 80094ae:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b4:	221c      	movs	r2, #28
 80094b6:	401a      	ands	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	2102      	movs	r1, #2
 80094be:	4091      	lsls	r1, r2
 80094c0:	000a      	movs	r2, r1
 80094c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	@ 0x24
 80094c8:	2100      	movs	r1, #0
 80094ca:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d039      	beq.n	8009548 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	0010      	movs	r0, r2
 80094dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80094de:	e033      	b.n	8009548 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e4:	221c      	movs	r2, #28
 80094e6:	4013      	ands	r3, r2
 80094e8:	2208      	movs	r2, #8
 80094ea:	409a      	lsls	r2, r3
 80094ec:	0013      	movs	r3, r2
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4013      	ands	r3, r2
 80094f2:	d02a      	beq.n	800954a <HAL_DMA_IRQHandler+0x154>
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2208      	movs	r2, #8
 80094f8:	4013      	ands	r3, r2
 80094fa:	d026      	beq.n	800954a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	210e      	movs	r1, #14
 8009508:	438a      	bics	r2, r1
 800950a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009510:	221c      	movs	r2, #28
 8009512:	401a      	ands	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009518:	2101      	movs	r1, #1
 800951a:	4091      	lsls	r1, r2
 800951c:	000a      	movs	r2, r1
 800951e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2225      	movs	r2, #37	@ 0x25
 800952a:	2101      	movs	r1, #1
 800952c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2224      	movs	r2, #36	@ 0x24
 8009532:	2100      	movs	r1, #0
 8009534:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	0010      	movs	r0, r2
 8009546:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009548:	46c0      	nop			@ (mov r8, r8)
 800954a:	46c0      	nop			@ (mov r8, r8)
}
 800954c:	46bd      	mov	sp, r7
 800954e:	b004      	add	sp, #16
 8009550:	bd80      	pop	{r7, pc}

08009552 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2225      	movs	r2, #37	@ 0x25
 800955e:	5c9b      	ldrb	r3, [r3, r2]
 8009560:	b2db      	uxtb	r3, r3
}
 8009562:	0018      	movs	r0, r3
 8009564:	46bd      	mov	sp, r7
 8009566:	b002      	add	sp, #8
 8009568:	bd80      	pop	{r7, pc}

0800956a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800957c:	221c      	movs	r2, #28
 800957e:	401a      	ands	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009584:	2101      	movs	r1, #1
 8009586:	4091      	lsls	r1, r2
 8009588:	000a      	movs	r2, r1
 800958a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	2b10      	cmp	r3, #16
 800959a:	d108      	bne.n	80095ae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80095ac:	e007      	b.n	80095be <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	60da      	str	r2, [r3, #12]
}
 80095be:	46c0      	nop			@ (mov r8, r8)
 80095c0:	46bd      	mov	sp, r7
 80095c2:	b004      	add	sp, #16
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80095da:	2300      	movs	r3, #0
 80095dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80095de:	e155      	b.n	800988c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2101      	movs	r1, #1
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4091      	lsls	r1, r2
 80095ea:	000a      	movs	r2, r1
 80095ec:	4013      	ands	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d100      	bne.n	80095f8 <HAL_GPIO_Init+0x30>
 80095f6:	e146      	b.n	8009886 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	2203      	movs	r2, #3
 80095fe:	4013      	ands	r3, r2
 8009600:	2b01      	cmp	r3, #1
 8009602:	d005      	beq.n	8009610 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2203      	movs	r2, #3
 800960a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800960c:	2b02      	cmp	r3, #2
 800960e:	d130      	bne.n	8009672 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	2203      	movs	r2, #3
 800961c:	409a      	lsls	r2, r3
 800961e:	0013      	movs	r3, r2
 8009620:	43da      	mvns	r2, r3
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	4013      	ands	r3, r2
 8009626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	409a      	lsls	r2, r3
 8009632:	0013      	movs	r3, r2
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009646:	2201      	movs	r2, #1
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	409a      	lsls	r2, r3
 800964c:	0013      	movs	r3, r2
 800964e:	43da      	mvns	r2, r3
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	4013      	ands	r3, r2
 8009654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	091b      	lsrs	r3, r3, #4
 800965c:	2201      	movs	r2, #1
 800965e:	401a      	ands	r2, r3
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	409a      	lsls	r2, r3
 8009664:	0013      	movs	r3, r2
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	4313      	orrs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2203      	movs	r2, #3
 8009678:	4013      	ands	r3, r2
 800967a:	2b03      	cmp	r3, #3
 800967c:	d017      	beq.n	80096ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	2203      	movs	r2, #3
 800968a:	409a      	lsls	r2, r3
 800968c:	0013      	movs	r3, r2
 800968e:	43da      	mvns	r2, r3
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	4013      	ands	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	409a      	lsls	r2, r3
 80096a0:	0013      	movs	r3, r2
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2203      	movs	r2, #3
 80096b4:	4013      	ands	r3, r2
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d123      	bne.n	8009702 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	08da      	lsrs	r2, r3, #3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3208      	adds	r2, #8
 80096c2:	0092      	lsls	r2, r2, #2
 80096c4:	58d3      	ldr	r3, [r2, r3]
 80096c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2207      	movs	r2, #7
 80096cc:	4013      	ands	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	220f      	movs	r2, #15
 80096d2:	409a      	lsls	r2, r3
 80096d4:	0013      	movs	r3, r2
 80096d6:	43da      	mvns	r2, r3
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4013      	ands	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	691a      	ldr	r2, [r3, #16]
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2107      	movs	r1, #7
 80096e6:	400b      	ands	r3, r1
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	409a      	lsls	r2, r3
 80096ec:	0013      	movs	r3, r2
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	08da      	lsrs	r2, r3, #3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3208      	adds	r2, #8
 80096fc:	0092      	lsls	r2, r2, #2
 80096fe:	6939      	ldr	r1, [r7, #16]
 8009700:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	2203      	movs	r2, #3
 800970e:	409a      	lsls	r2, r3
 8009710:	0013      	movs	r3, r2
 8009712:	43da      	mvns	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	4013      	ands	r3, r2
 8009718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2203      	movs	r2, #3
 8009720:	401a      	ands	r2, r3
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	409a      	lsls	r2, r3
 8009728:	0013      	movs	r3, r2
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	4313      	orrs	r3, r2
 800972e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	23c0      	movs	r3, #192	@ 0xc0
 800973c:	029b      	lsls	r3, r3, #10
 800973e:	4013      	ands	r3, r2
 8009740:	d100      	bne.n	8009744 <HAL_GPIO_Init+0x17c>
 8009742:	e0a0      	b.n	8009886 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009744:	4b57      	ldr	r3, [pc, #348]	@ (80098a4 <HAL_GPIO_Init+0x2dc>)
 8009746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009748:	4b56      	ldr	r3, [pc, #344]	@ (80098a4 <HAL_GPIO_Init+0x2dc>)
 800974a:	2101      	movs	r1, #1
 800974c:	430a      	orrs	r2, r1
 800974e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8009750:	4a55      	ldr	r2, [pc, #340]	@ (80098a8 <HAL_GPIO_Init+0x2e0>)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	089b      	lsrs	r3, r3, #2
 8009756:	3302      	adds	r3, #2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	589b      	ldr	r3, [r3, r2]
 800975c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2203      	movs	r2, #3
 8009762:	4013      	ands	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	220f      	movs	r2, #15
 8009768:	409a      	lsls	r2, r3
 800976a:	0013      	movs	r3, r2
 800976c:	43da      	mvns	r2, r3
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	4013      	ands	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	23a0      	movs	r3, #160	@ 0xa0
 8009778:	05db      	lsls	r3, r3, #23
 800977a:	429a      	cmp	r2, r3
 800977c:	d01f      	beq.n	80097be <HAL_GPIO_Init+0x1f6>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a4a      	ldr	r2, [pc, #296]	@ (80098ac <HAL_GPIO_Init+0x2e4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d019      	beq.n	80097ba <HAL_GPIO_Init+0x1f2>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a49      	ldr	r2, [pc, #292]	@ (80098b0 <HAL_GPIO_Init+0x2e8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d013      	beq.n	80097b6 <HAL_GPIO_Init+0x1ee>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a48      	ldr	r2, [pc, #288]	@ (80098b4 <HAL_GPIO_Init+0x2ec>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00d      	beq.n	80097b2 <HAL_GPIO_Init+0x1ea>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a47      	ldr	r2, [pc, #284]	@ (80098b8 <HAL_GPIO_Init+0x2f0>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d007      	beq.n	80097ae <HAL_GPIO_Init+0x1e6>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a46      	ldr	r2, [pc, #280]	@ (80098bc <HAL_GPIO_Init+0x2f4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d101      	bne.n	80097aa <HAL_GPIO_Init+0x1e2>
 80097a6:	2305      	movs	r3, #5
 80097a8:	e00a      	b.n	80097c0 <HAL_GPIO_Init+0x1f8>
 80097aa:	2306      	movs	r3, #6
 80097ac:	e008      	b.n	80097c0 <HAL_GPIO_Init+0x1f8>
 80097ae:	2304      	movs	r3, #4
 80097b0:	e006      	b.n	80097c0 <HAL_GPIO_Init+0x1f8>
 80097b2:	2303      	movs	r3, #3
 80097b4:	e004      	b.n	80097c0 <HAL_GPIO_Init+0x1f8>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e002      	b.n	80097c0 <HAL_GPIO_Init+0x1f8>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <HAL_GPIO_Init+0x1f8>
 80097be:	2300      	movs	r3, #0
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	2103      	movs	r1, #3
 80097c4:	400a      	ands	r2, r1
 80097c6:	0092      	lsls	r2, r2, #2
 80097c8:	4093      	lsls	r3, r2
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80097d0:	4935      	ldr	r1, [pc, #212]	@ (80098a8 <HAL_GPIO_Init+0x2e0>)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	089b      	lsrs	r3, r3, #2
 80097d6:	3302      	adds	r3, #2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80097de:	4b38      	ldr	r3, [pc, #224]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	43da      	mvns	r2, r3
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	4013      	ands	r3, r2
 80097ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	2380      	movs	r3, #128	@ 0x80
 80097f4:	035b      	lsls	r3, r3, #13
 80097f6:	4013      	ands	r3, r2
 80097f8:	d003      	beq.n	8009802 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4313      	orrs	r3, r2
 8009800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009802:	4b2f      	ldr	r3, [pc, #188]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009808:	4b2d      	ldr	r3, [pc, #180]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	43da      	mvns	r2, r3
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	4013      	ands	r3, r2
 8009816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	2380      	movs	r3, #128	@ 0x80
 800981e:	039b      	lsls	r3, r3, #14
 8009820:	4013      	ands	r3, r2
 8009822:	d003      	beq.n	800982c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4313      	orrs	r3, r2
 800982a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800982c:	4b24      	ldr	r3, [pc, #144]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8009832:	4b23      	ldr	r3, [pc, #140]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	43da      	mvns	r2, r3
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	4013      	ands	r3, r2
 8009840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	2380      	movs	r3, #128	@ 0x80
 8009848:	029b      	lsls	r3, r3, #10
 800984a:	4013      	ands	r3, r2
 800984c:	d003      	beq.n	8009856 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009856:	4b1a      	ldr	r3, [pc, #104]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800985c:	4b18      	ldr	r3, [pc, #96]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	43da      	mvns	r2, r3
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	4013      	ands	r3, r2
 800986a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	2380      	movs	r3, #128	@ 0x80
 8009872:	025b      	lsls	r3, r3, #9
 8009874:	4013      	ands	r3, r2
 8009876:	d003      	beq.n	8009880 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009880:	4b0f      	ldr	r3, [pc, #60]	@ (80098c0 <HAL_GPIO_Init+0x2f8>)
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	3301      	adds	r3, #1
 800988a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	40da      	lsrs	r2, r3
 8009894:	1e13      	subs	r3, r2, #0
 8009896:	d000      	beq.n	800989a <HAL_GPIO_Init+0x2d2>
 8009898:	e6a2      	b.n	80095e0 <HAL_GPIO_Init+0x18>
  }
}
 800989a:	46c0      	nop			@ (mov r8, r8)
 800989c:	46c0      	nop			@ (mov r8, r8)
 800989e:	46bd      	mov	sp, r7
 80098a0:	b006      	add	sp, #24
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	40021000 	.word	0x40021000
 80098a8:	40010000 	.word	0x40010000
 80098ac:	50000400 	.word	0x50000400
 80098b0:	50000800 	.word	0x50000800
 80098b4:	50000c00 	.word	0x50000c00
 80098b8:	50001000 	.word	0x50001000
 80098bc:	50001c00 	.word	0x50001c00
 80098c0:	40010400 	.word	0x40010400

080098c4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80098da:	e0bc      	b.n	8009a56 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80098dc:	2201      	movs	r2, #1
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	409a      	lsls	r2, r3
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	4013      	ands	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d100      	bne.n	80098f0 <HAL_GPIO_DeInit+0x2c>
 80098ee:	e0af      	b.n	8009a50 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80098f0:	4a5e      	ldr	r2, [pc, #376]	@ (8009a6c <HAL_GPIO_DeInit+0x1a8>)
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	089b      	lsrs	r3, r3, #2
 80098f6:	3302      	adds	r3, #2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	589b      	ldr	r3, [r3, r2]
 80098fc:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2203      	movs	r2, #3
 8009902:	4013      	ands	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	220f      	movs	r2, #15
 8009908:	409a      	lsls	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4013      	ands	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	23a0      	movs	r3, #160	@ 0xa0
 8009914:	05db      	lsls	r3, r3, #23
 8009916:	429a      	cmp	r2, r3
 8009918:	d01f      	beq.n	800995a <HAL_GPIO_DeInit+0x96>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a54      	ldr	r2, [pc, #336]	@ (8009a70 <HAL_GPIO_DeInit+0x1ac>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d019      	beq.n	8009956 <HAL_GPIO_DeInit+0x92>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a53      	ldr	r2, [pc, #332]	@ (8009a74 <HAL_GPIO_DeInit+0x1b0>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <HAL_GPIO_DeInit+0x8e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a52      	ldr	r2, [pc, #328]	@ (8009a78 <HAL_GPIO_DeInit+0x1b4>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00d      	beq.n	800994e <HAL_GPIO_DeInit+0x8a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a51      	ldr	r2, [pc, #324]	@ (8009a7c <HAL_GPIO_DeInit+0x1b8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d007      	beq.n	800994a <HAL_GPIO_DeInit+0x86>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a50      	ldr	r2, [pc, #320]	@ (8009a80 <HAL_GPIO_DeInit+0x1bc>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d101      	bne.n	8009946 <HAL_GPIO_DeInit+0x82>
 8009942:	2305      	movs	r3, #5
 8009944:	e00a      	b.n	800995c <HAL_GPIO_DeInit+0x98>
 8009946:	2306      	movs	r3, #6
 8009948:	e008      	b.n	800995c <HAL_GPIO_DeInit+0x98>
 800994a:	2304      	movs	r3, #4
 800994c:	e006      	b.n	800995c <HAL_GPIO_DeInit+0x98>
 800994e:	2303      	movs	r3, #3
 8009950:	e004      	b.n	800995c <HAL_GPIO_DeInit+0x98>
 8009952:	2302      	movs	r3, #2
 8009954:	e002      	b.n	800995c <HAL_GPIO_DeInit+0x98>
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <HAL_GPIO_DeInit+0x98>
 800995a:	2300      	movs	r3, #0
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	2103      	movs	r1, #3
 8009960:	400a      	ands	r2, r1
 8009962:	0092      	lsls	r2, r2, #2
 8009964:	4093      	lsls	r3, r2
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	429a      	cmp	r2, r3
 800996a:	d132      	bne.n	80099d2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800996c:	4b45      	ldr	r3, [pc, #276]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	43d9      	mvns	r1, r3
 8009974:	4b43      	ldr	r3, [pc, #268]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 8009976:	400a      	ands	r2, r1
 8009978:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800997a:	4b42      	ldr	r3, [pc, #264]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	43d9      	mvns	r1, r3
 8009982:	4b40      	ldr	r3, [pc, #256]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 8009984:	400a      	ands	r2, r1
 8009986:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009988:	4b3e      	ldr	r3, [pc, #248]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 800998a:	68da      	ldr	r2, [r3, #12]
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	43d9      	mvns	r1, r3
 8009990:	4b3c      	ldr	r3, [pc, #240]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 8009992:	400a      	ands	r2, r1
 8009994:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009996:	4b3b      	ldr	r3, [pc, #236]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	43d9      	mvns	r1, r3
 800999e:	4b39      	ldr	r3, [pc, #228]	@ (8009a84 <HAL_GPIO_DeInit+0x1c0>)
 80099a0:	400a      	ands	r2, r1
 80099a2:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	2203      	movs	r2, #3
 80099a8:	4013      	ands	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	220f      	movs	r2, #15
 80099ae:	409a      	lsls	r2, r3
 80099b0:	0013      	movs	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80099b4:	4a2d      	ldr	r2, [pc, #180]	@ (8009a6c <HAL_GPIO_DeInit+0x1a8>)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	089b      	lsrs	r3, r3, #2
 80099ba:	3302      	adds	r3, #2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	589a      	ldr	r2, [r3, r2]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	43d9      	mvns	r1, r3
 80099c4:	4829      	ldr	r0, [pc, #164]	@ (8009a6c <HAL_GPIO_DeInit+0x1a8>)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	089b      	lsrs	r3, r3, #2
 80099ca:	400a      	ands	r2, r1
 80099cc:	3302      	adds	r3, #2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	2103      	movs	r1, #3
 80099dc:	4099      	lsls	r1, r3
 80099de:	000b      	movs	r3, r1
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	08da      	lsrs	r2, r3, #3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3208      	adds	r2, #8
 80099ee:	0092      	lsls	r2, r2, #2
 80099f0:	58d3      	ldr	r3, [r2, r3]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	2107      	movs	r1, #7
 80099f6:	400a      	ands	r2, r1
 80099f8:	0092      	lsls	r2, r2, #2
 80099fa:	210f      	movs	r1, #15
 80099fc:	4091      	lsls	r1, r2
 80099fe:	000a      	movs	r2, r1
 8009a00:	43d1      	mvns	r1, r2
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	08d2      	lsrs	r2, r2, #3
 8009a06:	4019      	ands	r1, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3208      	adds	r2, #8
 8009a0c:	0092      	lsls	r2, r2, #2
 8009a0e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	0052      	lsls	r2, r2, #1
 8009a18:	2103      	movs	r1, #3
 8009a1a:	4091      	lsls	r1, r2
 8009a1c:	000a      	movs	r2, r1
 8009a1e:	43d2      	mvns	r2, r2
 8009a20:	401a      	ands	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	4091      	lsls	r1, r2
 8009a30:	000a      	movs	r2, r1
 8009a32:	43d2      	mvns	r2, r2
 8009a34:	401a      	ands	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	0052      	lsls	r2, r2, #1
 8009a42:	2103      	movs	r1, #3
 8009a44:	4091      	lsls	r1, r2
 8009a46:	000a      	movs	r2, r1
 8009a48:	43d2      	mvns	r2, r2
 8009a4a:	401a      	ands	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	3301      	adds	r3, #1
 8009a54:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	40da      	lsrs	r2, r3
 8009a5c:	1e13      	subs	r3, r2, #0
 8009a5e:	d000      	beq.n	8009a62 <HAL_GPIO_DeInit+0x19e>
 8009a60:	e73c      	b.n	80098dc <HAL_GPIO_DeInit+0x18>
  }
}
 8009a62:	46c0      	nop			@ (mov r8, r8)
 8009a64:	46c0      	nop			@ (mov r8, r8)
 8009a66:	46bd      	mov	sp, r7
 8009a68:	b006      	add	sp, #24
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	40010000 	.word	0x40010000
 8009a70:	50000400 	.word	0x50000400
 8009a74:	50000800 	.word	0x50000800
 8009a78:	50000c00 	.word	0x50000c00
 8009a7c:	50001000 	.word	0x50001000
 8009a80:	50001c00 	.word	0x50001c00
 8009a84:	40010400 	.word	0x40010400

08009a88 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	0008      	movs	r0, r1
 8009a92:	0011      	movs	r1, r2
 8009a94:	1cbb      	adds	r3, r7, #2
 8009a96:	1c02      	adds	r2, r0, #0
 8009a98:	801a      	strh	r2, [r3, #0]
 8009a9a:	1c7b      	adds	r3, r7, #1
 8009a9c:	1c0a      	adds	r2, r1, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009aa0:	1c7b      	adds	r3, r7, #1
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009aa8:	1cbb      	adds	r3, r7, #2
 8009aaa:	881a      	ldrh	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8009ab0:	e003      	b.n	8009aba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8009ab2:	1cbb      	adds	r3, r7, #2
 8009ab4:	881a      	ldrh	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009aba:	46c0      	nop			@ (mov r8, r8)
 8009abc:	46bd      	mov	sp, r7
 8009abe:	b002      	add	sp, #8
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	000a      	movs	r2, r1
 8009acc:	1cbb      	adds	r3, r7, #2
 8009ace:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ad6:	1cbb      	adds	r3, r7, #2
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	4013      	ands	r3, r2
 8009ade:	041a      	lsls	r2, r3, #16
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	43db      	mvns	r3, r3
 8009ae4:	1cb9      	adds	r1, r7, #2
 8009ae6:	8809      	ldrh	r1, [r1, #0]
 8009ae8:	400b      	ands	r3, r1
 8009aea:	431a      	orrs	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	619a      	str	r2, [r3, #24]
}
 8009af0:	46c0      	nop			@ (mov r8, r8)
 8009af2:	46bd      	mov	sp, r7
 8009af4:	b004      	add	sp, #16
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e082      	b.n	8009c10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2241      	movs	r2, #65	@ 0x41
 8009b0e:	5c9b      	ldrb	r3, [r3, r2]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d107      	bne.n	8009b26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2240      	movs	r2, #64	@ 0x40
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0018      	movs	r0, r3
 8009b22:	f7fb fafb 	bl	800511c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2241      	movs	r2, #65	@ 0x41
 8009b2a:	2124      	movs	r1, #36	@ 0x24
 8009b2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2101      	movs	r1, #1
 8009b3a:	438a      	bics	r2, r1
 8009b3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4934      	ldr	r1, [pc, #208]	@ (8009c18 <HAL_I2C_Init+0x120>)
 8009b48:	400a      	ands	r2, r1
 8009b4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4931      	ldr	r1, [pc, #196]	@ (8009c1c <HAL_I2C_Init+0x124>)
 8009b58:	400a      	ands	r2, r1
 8009b5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d108      	bne.n	8009b76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2180      	movs	r1, #128	@ 0x80
 8009b6e:	0209      	lsls	r1, r1, #8
 8009b70:	430a      	orrs	r2, r1
 8009b72:	609a      	str	r2, [r3, #8]
 8009b74:	e007      	b.n	8009b86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2184      	movs	r1, #132	@ 0x84
 8009b80:	0209      	lsls	r1, r1, #8
 8009b82:	430a      	orrs	r2, r1
 8009b84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d104      	bne.n	8009b98 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2280      	movs	r2, #128	@ 0x80
 8009b94:	0112      	lsls	r2, r2, #4
 8009b96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	491f      	ldr	r1, [pc, #124]	@ (8009c20 <HAL_I2C_Init+0x128>)
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	491a      	ldr	r1, [pc, #104]	@ (8009c1c <HAL_I2C_Init+0x124>)
 8009bb4:	400a      	ands	r2, r1
 8009bb6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69d9      	ldr	r1, [r3, #28]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1a      	ldr	r2, [r3, #32]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2101      	movs	r1, #1
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2241      	movs	r2, #65	@ 0x41
 8009bfc:	2120      	movs	r1, #32
 8009bfe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2242      	movs	r2, #66	@ 0x42
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b002      	add	sp, #8
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	f0ffffff 	.word	0xf0ffffff
 8009c1c:	ffff7fff 	.word	0xffff7fff
 8009c20:	02008000 	.word	0x02008000

08009c24 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8009c24:	b5b0      	push	{r4, r5, r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	0008      	movs	r0, r1
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	0019      	movs	r1, r3
 8009c32:	230a      	movs	r3, #10
 8009c34:	18fb      	adds	r3, r7, r3
 8009c36:	1c02      	adds	r2, r0, #0
 8009c38:	801a      	strh	r2, [r3, #0]
 8009c3a:	2308      	movs	r3, #8
 8009c3c:	18fb      	adds	r3, r7, r3
 8009c3e:	1c0a      	adds	r2, r1, #0
 8009c40:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2241      	movs	r2, #65	@ 0x41
 8009c46:	5c9b      	ldrb	r3, [r3, r2]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	d000      	beq.n	8009c50 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8009c4e:	e0dd      	b.n	8009e0c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	2380      	movs	r3, #128	@ 0x80
 8009c58:	021b      	lsls	r3, r3, #8
 8009c5a:	401a      	ands	r2, r3
 8009c5c:	2380      	movs	r3, #128	@ 0x80
 8009c5e:	021b      	lsls	r3, r3, #8
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d101      	bne.n	8009c68 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8009c64:	2302      	movs	r3, #2
 8009c66:	e0d2      	b.n	8009e0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2240      	movs	r2, #64	@ 0x40
 8009c6c:	5c9b      	ldrb	r3, [r3, r2]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <HAL_I2C_Master_Transmit_DMA+0x52>
 8009c72:	2302      	movs	r3, #2
 8009c74:	e0cb      	b.n	8009e0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2240      	movs	r2, #64	@ 0x40
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2241      	movs	r2, #65	@ 0x41
 8009c82:	2121      	movs	r1, #33	@ 0x21
 8009c84:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2242      	movs	r2, #66	@ 0x42
 8009c8a:	2110      	movs	r1, #16
 8009c8c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	18ba      	adds	r2, r7, r2
 8009ca0:	8812      	ldrh	r2, [r2, #0]
 8009ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8009e18 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8009ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4a5b      	ldr	r2, [pc, #364]	@ (8009e1c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8009cae:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	2bff      	cmp	r3, #255	@ 0xff
 8009cb8:	d906      	bls.n	8009cc8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	22ff      	movs	r2, #255	@ 0xff
 8009cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009cc0:	2380      	movs	r3, #128	@ 0x80
 8009cc2:	045b      	lsls	r3, r3, #17
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	e007      	b.n	8009cd8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009cd2:	2380      	movs	r3, #128	@ 0x80
 8009cd4:	049b      	lsls	r3, r3, #18
 8009cd6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d100      	bne.n	8009ce2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8009ce0:	e078      	b.n	8009dd4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d023      	beq.n	8009d32 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cee:	4a4c      	ldr	r2, [pc, #304]	@ (8009e20 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8009cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf6:	4a4b      	ldr	r2, [pc, #300]	@ (8009e24 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8009cf8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfe:	2200      	movs	r2, #0
 8009d00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d06:	2200      	movs	r2, #0
 8009d08:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3328      	adds	r3, #40	@ 0x28
 8009d16:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8009d1c:	2513      	movs	r5, #19
 8009d1e:	197c      	adds	r4, r7, r5
 8009d20:	f7ff fa7c 	bl	800921c <HAL_DMA_Start_IT>
 8009d24:	0003      	movs	r3, r0
 8009d26:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009d28:	197b      	adds	r3, r7, r5
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d13d      	bne.n	8009dac <HAL_I2C_Master_Transmit_DMA+0x188>
 8009d30:	e013      	b.n	8009d5a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2241      	movs	r2, #65	@ 0x41
 8009d36:	2120      	movs	r1, #32
 8009d38:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2242      	movs	r2, #66	@ 0x42
 8009d3e:	2100      	movs	r1, #0
 8009d40:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d46:	2280      	movs	r2, #128	@ 0x80
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2240      	movs	r2, #64	@ 0x40
 8009d52:	2100      	movs	r1, #0
 8009d54:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e059      	b.n	8009e0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	697c      	ldr	r4, [r7, #20]
 8009d62:	230a      	movs	r3, #10
 8009d64:	18fb      	adds	r3, r7, r3
 8009d66:	8819      	ldrh	r1, [r3, #0]
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e28 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	0023      	movs	r3, r4
 8009d70:	f001 fd0e 	bl	800b790 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2240      	movs	r2, #64	@ 0x40
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2110      	movs	r1, #16
 8009d92:	0018      	movs	r0, r3
 8009d94:	f001 fd36 	bl	800b804 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2180      	movs	r1, #128	@ 0x80
 8009da4:	01c9      	lsls	r1, r1, #7
 8009da6:	430a      	orrs	r2, r1
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	e02d      	b.n	8009e08 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2241      	movs	r2, #65	@ 0x41
 8009db0:	2120      	movs	r1, #32
 8009db2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2242      	movs	r2, #66	@ 0x42
 8009db8:	2100      	movs	r1, #0
 8009dba:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2240      	movs	r2, #64	@ 0x40
 8009dcc:	2100      	movs	r1, #0
 8009dce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e01c      	b.n	8009e0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4a15      	ldr	r2, [pc, #84]	@ (8009e2c <HAL_I2C_Master_Transmit_DMA+0x208>)
 8009dd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	2380      	movs	r3, #128	@ 0x80
 8009de2:	049c      	lsls	r4, r3, #18
 8009de4:	230a      	movs	r3, #10
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	8819      	ldrh	r1, [r3, #0]
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	4b0e      	ldr	r3, [pc, #56]	@ (8009e28 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	0023      	movs	r3, r4
 8009df2:	f001 fccd 	bl	800b790 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2240      	movs	r2, #64	@ 0x40
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2101      	movs	r1, #1
 8009e02:	0018      	movs	r0, r3
 8009e04:	f001 fcfe 	bl	800b804 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e000      	b.n	8009e0e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009e0c:	2302      	movs	r3, #2
  }
}
 8009e0e:	0018      	movs	r0, r3
 8009e10:	46bd      	mov	sp, r7
 8009e12:	b006      	add	sp, #24
 8009e14:	bdb0      	pop	{r4, r5, r7, pc}
 8009e16:	46c0      	nop			@ (mov r8, r8)
 8009e18:	ffff0000 	.word	0xffff0000
 8009e1c:	0800a629 	.word	0x0800a629
 8009e20:	0800b5e1 	.word	0x0800b5e1
 8009e24:	0800b721 	.word	0x0800b721
 8009e28:	80002000 	.word	0x80002000
 8009e2c:	0800a1d5 	.word	0x0800a1d5

08009e30 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009e30:	b5b0      	push	{r4, r5, r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	0008      	movs	r0, r1
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	0019      	movs	r1, r3
 8009e3e:	230a      	movs	r3, #10
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	1c02      	adds	r2, r0, #0
 8009e44:	801a      	strh	r2, [r3, #0]
 8009e46:	2308      	movs	r3, #8
 8009e48:	18fb      	adds	r3, r7, r3
 8009e4a:	1c0a      	adds	r2, r1, #0
 8009e4c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2241      	movs	r2, #65	@ 0x41
 8009e52:	5c9b      	ldrb	r3, [r3, r2]
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	d000      	beq.n	8009e5c <HAL_I2C_Master_Receive_DMA+0x2c>
 8009e5a:	e0dd      	b.n	800a018 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	699a      	ldr	r2, [r3, #24]
 8009e62:	2380      	movs	r3, #128	@ 0x80
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	401a      	ands	r2, r3
 8009e68:	2380      	movs	r3, #128	@ 0x80
 8009e6a:	021b      	lsls	r3, r3, #8
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d101      	bne.n	8009e74 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8009e70:	2302      	movs	r3, #2
 8009e72:	e0d2      	b.n	800a01a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2240      	movs	r2, #64	@ 0x40
 8009e78:	5c9b      	ldrb	r3, [r3, r2]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d101      	bne.n	8009e82 <HAL_I2C_Master_Receive_DMA+0x52>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e0cb      	b.n	800a01a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2240      	movs	r2, #64	@ 0x40
 8009e86:	2101      	movs	r1, #1
 8009e88:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2241      	movs	r2, #65	@ 0x41
 8009e8e:	2122      	movs	r1, #34	@ 0x22
 8009e90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2242      	movs	r2, #66	@ 0x42
 8009e96:	2110      	movs	r1, #16
 8009e98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2208      	movs	r2, #8
 8009eaa:	18ba      	adds	r2, r7, r2
 8009eac:	8812      	ldrh	r2, [r2, #0]
 8009eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4a5c      	ldr	r2, [pc, #368]	@ (800a024 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8009eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	4a5b      	ldr	r2, [pc, #364]	@ (800a028 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8009eba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2bff      	cmp	r3, #255	@ 0xff
 8009ec4:	d906      	bls.n	8009ed4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	22ff      	movs	r2, #255	@ 0xff
 8009eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009ecc:	2380      	movs	r3, #128	@ 0x80
 8009ece:	045b      	lsls	r3, r3, #17
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	e007      	b.n	8009ee4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009ede:	2380      	movs	r3, #128	@ 0x80
 8009ee0:	049b      	lsls	r3, r3, #18
 8009ee2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d100      	bne.n	8009eee <HAL_I2C_Master_Receive_DMA+0xbe>
 8009eec:	e078      	b.n	8009fe0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d023      	beq.n	8009f3e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009efa:	4a4c      	ldr	r2, [pc, #304]	@ (800a02c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8009efc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f02:	4a4b      	ldr	r2, [pc, #300]	@ (800a030 <HAL_I2C_Master_Receive_DMA+0x200>)
 8009f04:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f12:	2200      	movs	r2, #0
 8009f14:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3324      	adds	r3, #36	@ 0x24
 8009f20:	0019      	movs	r1, r3
 8009f22:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009f28:	2513      	movs	r5, #19
 8009f2a:	197c      	adds	r4, r7, r5
 8009f2c:	f7ff f976 	bl	800921c <HAL_DMA_Start_IT>
 8009f30:	0003      	movs	r3, r0
 8009f32:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009f34:	197b      	adds	r3, r7, r5
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d13d      	bne.n	8009fb8 <HAL_I2C_Master_Receive_DMA+0x188>
 8009f3c:	e013      	b.n	8009f66 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2241      	movs	r2, #65	@ 0x41
 8009f42:	2120      	movs	r1, #32
 8009f44:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2242      	movs	r2, #66	@ 0x42
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f52:	2280      	movs	r2, #128	@ 0x80
 8009f54:	431a      	orrs	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2240      	movs	r2, #64	@ 0x40
 8009f5e:	2100      	movs	r1, #0
 8009f60:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e059      	b.n	800a01a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	697c      	ldr	r4, [r7, #20]
 8009f6e:	230a      	movs	r3, #10
 8009f70:	18fb      	adds	r3, r7, r3
 8009f72:	8819      	ldrh	r1, [r3, #0]
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	4b2f      	ldr	r3, [pc, #188]	@ (800a034 <HAL_I2C_Master_Receive_DMA+0x204>)
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	0023      	movs	r3, r4
 8009f7c:	f001 fc08 	bl	800b790 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2240      	movs	r2, #64	@ 0x40
 8009f96:	2100      	movs	r1, #0
 8009f98:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2110      	movs	r1, #16
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	f001 fc30 	bl	800b804 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2180      	movs	r1, #128	@ 0x80
 8009fb0:	0209      	lsls	r1, r1, #8
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	e02d      	b.n	800a014 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2241      	movs	r2, #65	@ 0x41
 8009fbc:	2120      	movs	r1, #32
 8009fbe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2242      	movs	r2, #66	@ 0x42
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fcc:	2210      	movs	r2, #16
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2240      	movs	r2, #64	@ 0x40
 8009fd8:	2100      	movs	r1, #0
 8009fda:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e01c      	b.n	800a01a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	4a15      	ldr	r2, [pc, #84]	@ (800a038 <HAL_I2C_Master_Receive_DMA+0x208>)
 8009fe4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	2380      	movs	r3, #128	@ 0x80
 8009fee:	049c      	lsls	r4, r3, #18
 8009ff0:	230a      	movs	r3, #10
 8009ff2:	18fb      	adds	r3, r7, r3
 8009ff4:	8819      	ldrh	r1, [r3, #0]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	4b0e      	ldr	r3, [pc, #56]	@ (800a034 <HAL_I2C_Master_Receive_DMA+0x204>)
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	0023      	movs	r3, r4
 8009ffe:	f001 fbc7 	bl	800b790 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2240      	movs	r2, #64	@ 0x40
 800a006:	2100      	movs	r1, #0
 800a008:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2101      	movs	r1, #1
 800a00e:	0018      	movs	r0, r3
 800a010:	f001 fbf8 	bl	800b804 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	e000      	b.n	800a01a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a018:	2302      	movs	r3, #2
  }
}
 800a01a:	0018      	movs	r0, r3
 800a01c:	46bd      	mov	sp, r7
 800a01e:	b006      	add	sp, #24
 800a020:	bdb0      	pop	{r4, r5, r7, pc}
 800a022:	46c0      	nop			@ (mov r8, r8)
 800a024:	ffff0000 	.word	0xffff0000
 800a028:	0800a629 	.word	0x0800a629
 800a02c:	0800b681 	.word	0x0800b681
 800a030:	0800b721 	.word	0x0800b721
 800a034:	80002400 	.word	0x80002400
 800a038:	0800a1d5 	.word	0x0800a1d5

0800a03c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d005      	beq.n	800a068 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
  }
}
 800a068:	46c0      	nop			@ (mov r8, r8)
 800a06a:	46bd      	mov	sp, r7
 800a06c:	b004      	add	sp, #16
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	2380      	movs	r3, #128	@ 0x80
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	4013      	ands	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2280      	movs	r2, #128	@ 0x80
 800a096:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a098:	d00a      	beq.n	800a0b0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a09e:	2201      	movs	r2, #1
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2280      	movs	r2, #128	@ 0x80
 800a0ac:	0052      	lsls	r2, r2, #1
 800a0ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	2380      	movs	r3, #128	@ 0x80
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	d00e      	beq.n	800a0d8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2280      	movs	r2, #128	@ 0x80
 800a0be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a0c0:	d00a      	beq.n	800a0d8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c6:	2208      	movs	r2, #8
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2280      	movs	r2, #128	@ 0x80
 800a0d4:	00d2      	lsls	r2, r2, #3
 800a0d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	2380      	movs	r3, #128	@ 0x80
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4013      	ands	r3, r2
 800a0e0:	d00e      	beq.n	800a100 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2280      	movs	r2, #128	@ 0x80
 800a0e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a0e8:	d00a      	beq.n	800a100 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2280      	movs	r2, #128	@ 0x80
 800a0fc:	0092      	lsls	r2, r2, #2
 800a0fe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a104:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	220b      	movs	r2, #11
 800a10a:	4013      	ands	r3, r2
 800a10c:	d005      	beq.n	800a11a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	0011      	movs	r1, r2
 800a114:	0018      	movs	r0, r3
 800a116:	f001 f915 	bl	800b344 <I2C_ITError>
  }
}
 800a11a:	46c0      	nop			@ (mov r8, r8)
 800a11c:	46bd      	mov	sp, r7
 800a11e:	b006      	add	sp, #24
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a12a:	46c0      	nop			@ (mov r8, r8)
 800a12c:	46bd      	mov	sp, r7
 800a12e:	b002      	add	sp, #8
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a13a:	46c0      	nop			@ (mov r8, r8)
 800a13c:	46bd      	mov	sp, r7
 800a13e:	b002      	add	sp, #8
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a14a:	46c0      	nop			@ (mov r8, r8)
 800a14c:	46bd      	mov	sp, r7
 800a14e:	b002      	add	sp, #8
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a15a:	46c0      	nop			@ (mov r8, r8)
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b002      	add	sp, #8
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	0008      	movs	r0, r1
 800a16c:	0011      	movs	r1, r2
 800a16e:	1cfb      	adds	r3, r7, #3
 800a170:	1c02      	adds	r2, r0, #0
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	003b      	movs	r3, r7
 800a176:	1c0a      	adds	r2, r1, #0
 800a178:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a17a:	46c0      	nop			@ (mov r8, r8)
 800a17c:	46bd      	mov	sp, r7
 800a17e:	b002      	add	sp, #8
 800a180:	bd80      	pop	{r7, pc}

0800a182 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b082      	sub	sp, #8
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a18a:	46c0      	nop			@ (mov r8, r8)
 800a18c:	46bd      	mov	sp, r7
 800a18e:	b002      	add	sp, #8
 800a190:	bd80      	pop	{r7, pc}

0800a192 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a19a:	46c0      	nop			@ (mov r8, r8)
 800a19c:	46bd      	mov	sp, r7
 800a19e:	b002      	add	sp, #8
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a1aa:	46c0      	nop			@ (mov r8, r8)
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	b002      	add	sp, #8
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a1ba:	46c0      	nop			@ (mov r8, r8)
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	b002      	add	sp, #8
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a1ca:	46c0      	nop			@ (mov r8, r8)
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	b002      	add	sp, #8
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a1d4:	b590      	push	{r4, r7, lr}
 800a1d6:	b089      	sub	sp, #36	@ 0x24
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2240      	movs	r2, #64	@ 0x40
 800a1e8:	5c9b      	ldrb	r3, [r3, r2]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d101      	bne.n	800a1f2 <I2C_Master_ISR_IT+0x1e>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e113      	b.n	800a41a <I2C_Master_ISR_IT+0x246>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2240      	movs	r2, #64	@ 0x40
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2210      	movs	r2, #16
 800a1fe:	4013      	ands	r3, r2
 800a200:	d012      	beq.n	800a228 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2210      	movs	r2, #16
 800a206:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a208:	d00e      	beq.n	800a228 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2210      	movs	r2, #16
 800a210:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a216:	2204      	movs	r2, #4
 800a218:	431a      	orrs	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	0018      	movs	r0, r3
 800a222:	f001 f9ba 	bl	800b59a <I2C_Flush_TXDR>
 800a226:	e0e5      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2204      	movs	r2, #4
 800a22c:	4013      	ands	r3, r2
 800a22e:	d021      	beq.n	800a274 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2204      	movs	r2, #4
 800a234:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a236:	d01d      	beq.n	800a274 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2204      	movs	r2, #4
 800a23c:	4393      	bics	r3, r2
 800a23e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	b2d2      	uxtb	r2, r2
 800a24c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a25c:	3b01      	subs	r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a268:	b29b      	uxth	r3, r3
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b29a      	uxth	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a272:	e0bf      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2202      	movs	r2, #2
 800a278:	4013      	ands	r3, r2
 800a27a:	d01c      	beq.n	800a2b6 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a282:	d018      	beq.n	800a2b6 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a294:	1c5a      	adds	r2, r3, #1
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a2b4:	e09e      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2280      	movs	r2, #128	@ 0x80
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	d100      	bne.n	800a2c0 <I2C_Master_ISR_IT+0xec>
 800a2be:	e069      	b.n	800a394 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2240      	movs	r2, #64	@ 0x40
 800a2c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a2c6:	d065      	beq.n	800a394 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d04a      	beq.n	800a368 <I2C_Master_ISR_IT+0x194>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d146      	bne.n	800a368 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	2112      	movs	r1, #18
 800a2e4:	187b      	adds	r3, r7, r1
 800a2e6:	0592      	lsls	r2, r2, #22
 800a2e8:	0d92      	lsrs	r2, r2, #22
 800a2ea:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2bff      	cmp	r3, #255	@ 0xff
 800a2f4:	d910      	bls.n	800a318 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	22ff      	movs	r2, #255	@ 0xff
 800a2fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a300:	b2da      	uxtb	r2, r3
 800a302:	2380      	movs	r3, #128	@ 0x80
 800a304:	045c      	lsls	r4, r3, #17
 800a306:	187b      	adds	r3, r7, r1
 800a308:	8819      	ldrh	r1, [r3, #0]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	2300      	movs	r3, #0
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	0023      	movs	r3, r4
 800a312:	f001 fa3d 	bl	800b790 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a316:	e03c      	b.n	800a392 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	4a3f      	ldr	r2, [pc, #252]	@ (800a424 <I2C_Master_ISR_IT+0x250>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00e      	beq.n	800a34a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a330:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a336:	2312      	movs	r3, #18
 800a338:	18fb      	adds	r3, r7, r3
 800a33a:	8819      	ldrh	r1, [r3, #0]
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	2300      	movs	r3, #0
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	0023      	movs	r3, r4
 800a344:	f001 fa24 	bl	800b790 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a348:	e023      	b.n	800a392 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	2380      	movs	r3, #128	@ 0x80
 800a352:	049c      	lsls	r4, r3, #18
 800a354:	2312      	movs	r3, #18
 800a356:	18fb      	adds	r3, r7, r3
 800a358:	8819      	ldrh	r1, [r3, #0]
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	2300      	movs	r3, #0
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	0023      	movs	r3, r4
 800a362:	f001 fa15 	bl	800b790 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a366:	e014      	b.n	800a392 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	2380      	movs	r3, #128	@ 0x80
 800a370:	049b      	lsls	r3, r3, #18
 800a372:	401a      	ands	r2, r3
 800a374:	2380      	movs	r3, #128	@ 0x80
 800a376:	049b      	lsls	r3, r3, #18
 800a378:	429a      	cmp	r2, r3
 800a37a:	d004      	beq.n	800a386 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	0018      	movs	r0, r3
 800a380:	f000 fcf4 	bl	800ad6c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a384:	e036      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2140      	movs	r1, #64	@ 0x40
 800a38a:	0018      	movs	r0, r3
 800a38c:	f000 ffda 	bl	800b344 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a390:	e030      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
 800a392:	e02f      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	2240      	movs	r2, #64	@ 0x40
 800a398:	4013      	ands	r3, r2
 800a39a:	d02b      	beq.n	800a3f4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2240      	movs	r2, #64	@ 0x40
 800a3a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a3a2:	d027      	beq.n	800a3f4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d11d      	bne.n	800a3ea <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	2380      	movs	r3, #128	@ 0x80
 800a3b6:	049b      	lsls	r3, r3, #18
 800a3b8:	401a      	ands	r2, r3
 800a3ba:	2380      	movs	r3, #128	@ 0x80
 800a3bc:	049b      	lsls	r3, r3, #18
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d018      	beq.n	800a3f4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c6:	4a17      	ldr	r2, [pc, #92]	@ (800a424 <I2C_Master_ISR_IT+0x250>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d109      	bne.n	800a3e0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2180      	movs	r1, #128	@ 0x80
 800a3d8:	01c9      	lsls	r1, r1, #7
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	e009      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f000 fcc2 	bl	800ad6c <I2C_ITMasterSeqCplt>
 800a3e8:	e004      	b.n	800a3f4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2140      	movs	r1, #64	@ 0x40
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	f000 ffa8 	bl	800b344 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	d009      	beq.n	800a410 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2220      	movs	r2, #32
 800a400:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a402:	d005      	beq.n	800a410 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	0011      	movs	r1, r2
 800a40a:	0018      	movs	r0, r3
 800a40c:	f000 fd54 	bl	800aeb8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2240      	movs	r2, #64	@ 0x40
 800a414:	2100      	movs	r1, #0
 800a416:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	0018      	movs	r0, r3
 800a41c:	46bd      	mov	sp, r7
 800a41e:	b007      	add	sp, #28
 800a420:	bd90      	pop	{r4, r7, pc}
 800a422:	46c0      	nop			@ (mov r8, r8)
 800a424:	ffff0000 	.word	0xffff0000

0800a428 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a438:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2240      	movs	r2, #64	@ 0x40
 800a442:	5c9b      	ldrb	r3, [r3, r2]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d101      	bne.n	800a44c <I2C_Slave_ISR_IT+0x24>
 800a448:	2302      	movs	r3, #2
 800a44a:	e0e6      	b.n	800a61a <I2C_Slave_ISR_IT+0x1f2>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2240      	movs	r2, #64	@ 0x40
 800a450:	2101      	movs	r1, #1
 800a452:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2220      	movs	r2, #32
 800a458:	4013      	ands	r3, r2
 800a45a:	d009      	beq.n	800a470 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2220      	movs	r2, #32
 800a460:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a462:	d005      	beq.n	800a470 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	0011      	movs	r1, r2
 800a46a:	0018      	movs	r0, r3
 800a46c:	f000 fdf2 	bl	800b054 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	2210      	movs	r2, #16
 800a474:	4013      	ands	r3, r2
 800a476:	d052      	beq.n	800a51e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2210      	movs	r2, #16
 800a47c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a47e:	d04e      	beq.n	800a51e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d12d      	bne.n	800a4e6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2241      	movs	r2, #65	@ 0x41
 800a48e:	5c9b      	ldrb	r3, [r3, r2]
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b28      	cmp	r3, #40	@ 0x28
 800a494:	d10b      	bne.n	800a4ae <I2C_Slave_ISR_IT+0x86>
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	2380      	movs	r3, #128	@ 0x80
 800a49a:	049b      	lsls	r3, r3, #18
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d106      	bne.n	800a4ae <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	0011      	movs	r1, r2
 800a4a6:	0018      	movs	r0, r3
 800a4a8:	f000 fef4 	bl	800b294 <I2C_ITListenCplt>
 800a4ac:	e036      	b.n	800a51c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2241      	movs	r2, #65	@ 0x41
 800a4b2:	5c9b      	ldrb	r3, [r3, r2]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b29      	cmp	r3, #41	@ 0x29
 800a4b8:	d110      	bne.n	800a4dc <I2C_Slave_ISR_IT+0xb4>
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	4a59      	ldr	r2, [pc, #356]	@ (800a624 <I2C_Slave_ISR_IT+0x1fc>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d00c      	beq.n	800a4dc <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2210      	movs	r2, #16
 800a4c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f001 f864 	bl	800b59a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f000 fc8b 	bl	800adf0 <I2C_ITSlaveSeqCplt>
 800a4da:	e01f      	b.n	800a51c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2210      	movs	r2, #16
 800a4e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a4e4:	e091      	b.n	800a60a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2210      	movs	r2, #16
 800a4ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <I2C_Slave_ISR_IT+0xe4>
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	2380      	movs	r3, #128	@ 0x80
 800a504:	045b      	lsls	r3, r3, #17
 800a506:	429a      	cmp	r2, r3
 800a508:	d000      	beq.n	800a50c <I2C_Slave_ISR_IT+0xe4>
 800a50a:	e07e      	b.n	800a60a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	0011      	movs	r1, r2
 800a514:	0018      	movs	r0, r3
 800a516:	f000 ff15 	bl	800b344 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a51a:	e076      	b.n	800a60a <I2C_Slave_ISR_IT+0x1e2>
 800a51c:	e075      	b.n	800a60a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	2204      	movs	r2, #4
 800a522:	4013      	ands	r3, r2
 800a524:	d02f      	beq.n	800a586 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2204      	movs	r2, #4
 800a52a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a52c:	d02b      	beq.n	800a586 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a532:	b29b      	uxth	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	d018      	beq.n	800a56a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a542:	b2d2      	uxtb	r2, r2
 800a544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a554:	3b01      	subs	r3, #1
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a56e:	b29b      	uxth	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d14c      	bne.n	800a60e <I2C_Slave_ISR_IT+0x1e6>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4a2b      	ldr	r2, [pc, #172]	@ (800a624 <I2C_Slave_ISR_IT+0x1fc>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d048      	beq.n	800a60e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	0018      	movs	r0, r3
 800a580:	f000 fc36 	bl	800adf0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a584:	e043      	b.n	800a60e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2208      	movs	r2, #8
 800a58a:	4013      	ands	r3, r2
 800a58c:	d00a      	beq.n	800a5a4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2208      	movs	r2, #8
 800a592:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a594:	d006      	beq.n	800a5a4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	0011      	movs	r1, r2
 800a59c:	0018      	movs	r0, r3
 800a59e:	f000 fb41 	bl	800ac24 <I2C_ITAddrCplt>
 800a5a2:	e035      	b.n	800a610 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	d031      	beq.n	800a610 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a5b2:	d02d      	beq.n	800a610 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d018      	beq.n	800a5f0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c2:	781a      	ldrb	r2, [r3, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a5ee:	e00f      	b.n	800a610 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	2380      	movs	r3, #128	@ 0x80
 800a5f4:	045b      	lsls	r3, r3, #17
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d002      	beq.n	800a600 <I2C_Slave_ISR_IT+0x1d8>
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d107      	bne.n	800a610 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	0018      	movs	r0, r3
 800a604:	f000 fbf4 	bl	800adf0 <I2C_ITSlaveSeqCplt>
 800a608:	e002      	b.n	800a610 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800a60a:	46c0      	nop			@ (mov r8, r8)
 800a60c:	e000      	b.n	800a610 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800a60e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2240      	movs	r2, #64	@ 0x40
 800a614:	2100      	movs	r1, #0
 800a616:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	0018      	movs	r0, r3
 800a61c:	46bd      	mov	sp, r7
 800a61e:	b006      	add	sp, #24
 800a620:	bd80      	pop	{r7, pc}
 800a622:	46c0      	nop			@ (mov r8, r8)
 800a624:	ffff0000 	.word	0xffff0000

0800a628 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800a628:	b590      	push	{r4, r7, lr}
 800a62a:	b089      	sub	sp, #36	@ 0x24
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2240      	movs	r2, #64	@ 0x40
 800a638:	5c9b      	ldrb	r3, [r3, r2]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d101      	bne.n	800a642 <I2C_Master_ISR_DMA+0x1a>
 800a63e:	2302      	movs	r3, #2
 800a640:	e0e7      	b.n	800a812 <I2C_Master_ISR_DMA+0x1ea>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2240      	movs	r2, #64	@ 0x40
 800a646:	2101      	movs	r1, #1
 800a648:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2210      	movs	r2, #16
 800a64e:	4013      	ands	r3, r2
 800a650:	d017      	beq.n	800a682 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2210      	movs	r2, #16
 800a656:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a658:	d013      	beq.n	800a682 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2210      	movs	r2, #16
 800a660:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a666:	2204      	movs	r2, #4
 800a668:	431a      	orrs	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2120      	movs	r1, #32
 800a672:	0018      	movs	r0, r3
 800a674:	f001 f8c6 	bl	800b804 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	0018      	movs	r0, r3
 800a67c:	f000 ff8d 	bl	800b59a <I2C_Flush_TXDR>
 800a680:	e0c2      	b.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2280      	movs	r2, #128	@ 0x80
 800a686:	4013      	ands	r3, r2
 800a688:	d100      	bne.n	800a68c <I2C_Master_ISR_DMA+0x64>
 800a68a:	e07c      	b.n	800a786 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2240      	movs	r2, #64	@ 0x40
 800a690:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a692:	d100      	bne.n	800a696 <I2C_Master_ISR_DMA+0x6e>
 800a694:	e077      	b.n	800a786 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2140      	movs	r1, #64	@ 0x40
 800a6a2:	438a      	bics	r2, r1
 800a6a4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d055      	beq.n	800a75c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	2312      	movs	r3, #18
 800a6ba:	18fb      	adds	r3, r7, r3
 800a6bc:	0592      	lsls	r2, r2, #22
 800a6be:	0d92      	lsrs	r2, r2, #22
 800a6c0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	2bff      	cmp	r3, #255	@ 0xff
 800a6ca:	d906      	bls.n	800a6da <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	22ff      	movs	r2, #255	@ 0xff
 800a6d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800a6d2:	2380      	movs	r3, #128	@ 0x80
 800a6d4:	045b      	lsls	r3, r3, #17
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	e010      	b.n	800a6fc <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	4a4c      	ldr	r2, [pc, #304]	@ (800a81c <I2C_Master_ISR_DMA+0x1f4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	e002      	b.n	800a6fc <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a6f6:	2380      	movs	r3, #128	@ 0x80
 800a6f8:	049b      	lsls	r3, r3, #18
 800a6fa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a700:	b2da      	uxtb	r2, r3
 800a702:	697c      	ldr	r4, [r7, #20]
 800a704:	2312      	movs	r3, #18
 800a706:	18fb      	adds	r3, r7, r3
 800a708:	8819      	ldrh	r1, [r3, #0]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	2300      	movs	r3, #0
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	0023      	movs	r3, r4
 800a712:	f001 f83d 	bl	800b790 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	b29a      	uxth	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2241      	movs	r2, #65	@ 0x41
 800a72c:	5c9b      	ldrb	r3, [r3, r2]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b22      	cmp	r3, #34	@ 0x22
 800a732:	d109      	bne.n	800a748 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2180      	movs	r1, #128	@ 0x80
 800a740:	0209      	lsls	r1, r1, #8
 800a742:	430a      	orrs	r2, r1
 800a744:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a746:	e05f      	b.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2180      	movs	r1, #128	@ 0x80
 800a754:	01c9      	lsls	r1, r1, #7
 800a756:	430a      	orrs	r2, r1
 800a758:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a75a:	e055      	b.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	2380      	movs	r3, #128	@ 0x80
 800a764:	049b      	lsls	r3, r3, #18
 800a766:	401a      	ands	r2, r3
 800a768:	2380      	movs	r3, #128	@ 0x80
 800a76a:	049b      	lsls	r3, r3, #18
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d004      	beq.n	800a77a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	0018      	movs	r0, r3
 800a774:	f000 fafa 	bl	800ad6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a778:	e046      	b.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2140      	movs	r1, #64	@ 0x40
 800a77e:	0018      	movs	r0, r3
 800a780:	f000 fde0 	bl	800b344 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a784:	e040      	b.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2240      	movs	r2, #64	@ 0x40
 800a78a:	4013      	ands	r3, r2
 800a78c:	d02c      	beq.n	800a7e8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2240      	movs	r2, #64	@ 0x40
 800a792:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a794:	d028      	beq.n	800a7e8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d11d      	bne.n	800a7dc <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	2380      	movs	r3, #128	@ 0x80
 800a7a8:	049b      	lsls	r3, r3, #18
 800a7aa:	401a      	ands	r2, r3
 800a7ac:	2380      	movs	r3, #128	@ 0x80
 800a7ae:	049b      	lsls	r3, r3, #18
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d028      	beq.n	800a806 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b8:	4a18      	ldr	r2, [pc, #96]	@ (800a81c <I2C_Master_ISR_DMA+0x1f4>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d109      	bne.n	800a7d2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2180      	movs	r1, #128	@ 0x80
 800a7ca:	01c9      	lsls	r1, r1, #7
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a7d0:	e019      	b.n	800a806 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	f000 fac9 	bl	800ad6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a7da:	e014      	b.n	800a806 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2140      	movs	r1, #64	@ 0x40
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f000 fdaf 	bl	800b344 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a7e6:	e00e      	b.n	800a806 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	d00b      	beq.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a7f6:	d007      	beq.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	0011      	movs	r1, r2
 800a7fe:	0018      	movs	r0, r3
 800a800:	f000 fb5a 	bl	800aeb8 <I2C_ITMasterCplt>
 800a804:	e000      	b.n	800a808 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800a806:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2240      	movs	r2, #64	@ 0x40
 800a80c:	2100      	movs	r1, #0
 800a80e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	0018      	movs	r0, r3
 800a814:	46bd      	mov	sp, r7
 800a816:	b007      	add	sp, #28
 800a818:	bd90      	pop	{r4, r7, pc}
 800a81a:	46c0      	nop			@ (mov r8, r8)
 800a81c:	ffff0000 	.word	0xffff0000

0800a820 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b089      	sub	sp, #36	@ 0x24
 800a824:	af02      	add	r7, sp, #8
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800a82c:	4b88      	ldr	r3, [pc, #544]	@ (800aa50 <I2C_Mem_ISR_DMA+0x230>)
 800a82e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2240      	movs	r2, #64	@ 0x40
 800a834:	5c9b      	ldrb	r3, [r3, r2]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <I2C_Mem_ISR_DMA+0x1e>
 800a83a:	2302      	movs	r3, #2
 800a83c:	e104      	b.n	800aa48 <I2C_Mem_ISR_DMA+0x228>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2240      	movs	r2, #64	@ 0x40
 800a842:	2101      	movs	r1, #1
 800a844:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2210      	movs	r2, #16
 800a84a:	4013      	ands	r3, r2
 800a84c:	d017      	beq.n	800a87e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2210      	movs	r2, #16
 800a852:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a854:	d013      	beq.n	800a87e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2210      	movs	r2, #16
 800a85c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a862:	2204      	movs	r2, #4
 800a864:	431a      	orrs	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2120      	movs	r1, #32
 800a86e:	0018      	movs	r0, r3
 800a870:	f000 ffc8 	bl	800b804 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	0018      	movs	r0, r3
 800a878:	f000 fe8f 	bl	800b59a <I2C_Flush_TXDR>
 800a87c:	e0df      	b.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2202      	movs	r2, #2
 800a882:	4013      	ands	r3, r2
 800a884:	d00d      	beq.n	800a8a2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2202      	movs	r2, #2
 800a88a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a88c:	d009      	beq.n	800a8a2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a896:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2201      	movs	r2, #1
 800a89c:	4252      	negs	r2, r2
 800a89e:	651a      	str	r2, [r3, #80]	@ 0x50
 800a8a0:	e0cd      	b.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2280      	movs	r2, #128	@ 0x80
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	d05e      	beq.n	800a968 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2240      	movs	r2, #64	@ 0x40
 800a8ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a8b0:	d05a      	beq.n	800a968 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2110      	movs	r1, #16
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f000 ffa4 	bl	800b804 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d04a      	beq.n	800a95c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	2bff      	cmp	r3, #255	@ 0xff
 800a8ce:	d910      	bls.n	800a8f2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	22ff      	movs	r2, #255	@ 0xff
 800a8d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8da:	b299      	uxth	r1, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	2380      	movs	r3, #128	@ 0x80
 800a8e4:	045b      	lsls	r3, r3, #17
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	2400      	movs	r4, #0
 800a8ea:	9400      	str	r4, [sp, #0]
 800a8ec:	f000 ff50 	bl	800b790 <I2C_TransferConfig>
 800a8f0:	e011      	b.n	800a916 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a900:	b299      	uxth	r1, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a906:	b2da      	uxtb	r2, r3
 800a908:	2380      	movs	r3, #128	@ 0x80
 800a90a:	049b      	lsls	r3, r3, #18
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	2400      	movs	r4, #0
 800a910:	9400      	str	r4, [sp, #0]
 800a912:	f000 ff3d 	bl	800b790 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	b29a      	uxth	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2241      	movs	r2, #65	@ 0x41
 800a92c:	5c9b      	ldrb	r3, [r3, r2]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b22      	cmp	r3, #34	@ 0x22
 800a932:	d109      	bne.n	800a948 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2180      	movs	r1, #128	@ 0x80
 800a940:	0209      	lsls	r1, r1, #8
 800a942:	430a      	orrs	r2, r1
 800a944:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a946:	e07a      	b.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2180      	movs	r1, #128	@ 0x80
 800a954:	01c9      	lsls	r1, r1, #7
 800a956:	430a      	orrs	r2, r1
 800a958:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a95a:	e070      	b.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2140      	movs	r1, #64	@ 0x40
 800a960:	0018      	movs	r0, r3
 800a962:	f000 fcef 	bl	800b344 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a966:	e06a      	b.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2240      	movs	r2, #64	@ 0x40
 800a96c:	4013      	ands	r3, r2
 800a96e:	d058      	beq.n	800aa22 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2240      	movs	r2, #64	@ 0x40
 800a974:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a976:	d054      	beq.n	800aa22 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2241      	movs	r2, #65	@ 0x41
 800a97c:	5c9b      	ldrb	r3, [r3, r2]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b22      	cmp	r3, #34	@ 0x22
 800a982:	d101      	bne.n	800a988 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800a984:	4b33      	ldr	r3, [pc, #204]	@ (800aa54 <I2C_Mem_ISR_DMA+0x234>)
 800a986:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	2bff      	cmp	r3, #255	@ 0xff
 800a990:	d911      	bls.n	800a9b6 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	22ff      	movs	r2, #255	@ 0xff
 800a996:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a99c:	b299      	uxth	r1, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	2380      	movs	r3, #128	@ 0x80
 800a9a6:	045c      	lsls	r4, r3, #17
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	0023      	movs	r3, r4
 800a9b0:	f000 feee 	bl	800b790 <I2C_TransferConfig>
 800a9b4:	e012      	b.n	800a9dc <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9c4:	b299      	uxth	r1, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	2380      	movs	r3, #128	@ 0x80
 800a9ce:	049c      	lsls	r4, r3, #18
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	0023      	movs	r3, r4
 800a9d8:	f000 feda 	bl	800b790 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2241      	movs	r2, #65	@ 0x41
 800a9f2:	5c9b      	ldrb	r3, [r3, r2]
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b22      	cmp	r3, #34	@ 0x22
 800a9f8:	d109      	bne.n	800aa0e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2180      	movs	r1, #128	@ 0x80
 800aa06:	0209      	lsls	r1, r1, #8
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa0c:	e017      	b.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2180      	movs	r1, #128	@ 0x80
 800aa1a:	01c9      	lsls	r1, r1, #7
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa20:	e00d      	b.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2220      	movs	r2, #32
 800aa26:	4013      	ands	r3, r2
 800aa28:	d009      	beq.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa30:	d005      	beq.n	800aa3e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	0011      	movs	r1, r2
 800aa38:	0018      	movs	r0, r3
 800aa3a:	f000 fa3d 	bl	800aeb8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2240      	movs	r2, #64	@ 0x40
 800aa42:	2100      	movs	r1, #0
 800aa44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	0018      	movs	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	b007      	add	sp, #28
 800aa4e:	bd90      	pop	{r4, r7, pc}
 800aa50:	80002000 	.word	0x80002000
 800aa54:	80002400 	.word	0x80002400

0800aa58 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa68:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2240      	movs	r2, #64	@ 0x40
 800aa72:	5c9b      	ldrb	r3, [r3, r2]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d101      	bne.n	800aa7c <I2C_Slave_ISR_DMA+0x24>
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e0cd      	b.n	800ac18 <I2C_Slave_ISR_DMA+0x1c0>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2240      	movs	r2, #64	@ 0x40
 800aa80:	2101      	movs	r1, #1
 800aa82:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2220      	movs	r2, #32
 800aa88:	4013      	ands	r3, r2
 800aa8a:	d009      	beq.n	800aaa0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa92:	d005      	beq.n	800aaa0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	0011      	movs	r1, r2
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	f000 fada 	bl	800b054 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2210      	movs	r2, #16
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	d100      	bne.n	800aaaa <I2C_Slave_ISR_DMA+0x52>
 800aaa8:	e0a3      	b.n	800abf2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2210      	movs	r2, #16
 800aaae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aab0:	d100      	bne.n	800aab4 <I2C_Slave_ISR_DMA+0x5c>
 800aab2:	e09e      	b.n	800abf2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	2380      	movs	r3, #128	@ 0x80
 800aab8:	01db      	lsls	r3, r3, #7
 800aaba:	4013      	ands	r3, r2
 800aabc:	d105      	bne.n	800aaca <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	2380      	movs	r3, #128	@ 0x80
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aac6:	d100      	bne.n	800aaca <I2C_Slave_ISR_DMA+0x72>
 800aac8:	e08c      	b.n	800abe4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00c      	beq.n	800aaec <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	2380      	movs	r3, #128	@ 0x80
 800aad6:	021b      	lsls	r3, r3, #8
 800aad8:	4013      	ands	r3, r2
 800aada:	d007      	beq.n	800aaec <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800aae8:	2301      	movs	r3, #1
 800aaea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00c      	beq.n	800ab0e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	2380      	movs	r3, #128	@ 0x80
 800aaf8:	01db      	lsls	r3, r3, #7
 800aafa:	4013      	ands	r3, r2
 800aafc:	d007      	beq.n	800ab0e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d12d      	bne.n	800ab70 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2241      	movs	r2, #65	@ 0x41
 800ab18:	5c9b      	ldrb	r3, [r3, r2]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b28      	cmp	r3, #40	@ 0x28
 800ab1e:	d10b      	bne.n	800ab38 <I2C_Slave_ISR_DMA+0xe0>
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	2380      	movs	r3, #128	@ 0x80
 800ab24:	049b      	lsls	r3, r3, #18
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d106      	bne.n	800ab38 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	0011      	movs	r1, r2
 800ab30:	0018      	movs	r0, r3
 800ab32:	f000 fbaf 	bl	800b294 <I2C_ITListenCplt>
 800ab36:	e054      	b.n	800abe2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2241      	movs	r2, #65	@ 0x41
 800ab3c:	5c9b      	ldrb	r3, [r3, r2]
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b29      	cmp	r3, #41	@ 0x29
 800ab42:	d110      	bne.n	800ab66 <I2C_Slave_ISR_DMA+0x10e>
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	4a36      	ldr	r2, [pc, #216]	@ (800ac20 <I2C_Slave_ISR_DMA+0x1c8>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00c      	beq.n	800ab66 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2210      	movs	r2, #16
 800ab52:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	0018      	movs	r0, r3
 800ab58:	f000 fd1f 	bl	800b59a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	0018      	movs	r0, r3
 800ab60:	f000 f946 	bl	800adf0 <I2C_ITSlaveSeqCplt>
 800ab64:	e03d      	b.n	800abe2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2210      	movs	r2, #16
 800ab6c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ab6e:	e03e      	b.n	800abee <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2210      	movs	r2, #16
 800ab76:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7c:	2204      	movs	r2, #4
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ab84:	2317      	movs	r3, #23
 800ab86:	18fb      	adds	r3, r7, r3
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	2141      	movs	r1, #65	@ 0x41
 800ab8c:	5c52      	ldrb	r2, [r2, r1]
 800ab8e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d004      	beq.n	800aba0 <I2C_Slave_ISR_DMA+0x148>
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	2380      	movs	r3, #128	@ 0x80
 800ab9a:	045b      	lsls	r3, r3, #17
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d126      	bne.n	800abee <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800aba0:	2217      	movs	r2, #23
 800aba2:	18bb      	adds	r3, r7, r2
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b21      	cmp	r3, #33	@ 0x21
 800aba8:	d003      	beq.n	800abb2 <I2C_Slave_ISR_DMA+0x15a>
 800abaa:	18bb      	adds	r3, r7, r2
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b29      	cmp	r3, #41	@ 0x29
 800abb0:	d103      	bne.n	800abba <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2221      	movs	r2, #33	@ 0x21
 800abb6:	631a      	str	r2, [r3, #48]	@ 0x30
 800abb8:	e00b      	b.n	800abd2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800abba:	2217      	movs	r2, #23
 800abbc:	18bb      	adds	r3, r7, r2
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	2b22      	cmp	r3, #34	@ 0x22
 800abc2:	d003      	beq.n	800abcc <I2C_Slave_ISR_DMA+0x174>
 800abc4:	18bb      	adds	r3, r7, r2
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abca:	d102      	bne.n	800abd2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2222      	movs	r2, #34	@ 0x22
 800abd0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	0011      	movs	r1, r2
 800abda:	0018      	movs	r0, r3
 800abdc:	f000 fbb2 	bl	800b344 <I2C_ITError>
      if (treatdmanack == 1U)
 800abe0:	e005      	b.n	800abee <I2C_Slave_ISR_DMA+0x196>
 800abe2:	e004      	b.n	800abee <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2210      	movs	r2, #16
 800abea:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800abec:	e00f      	b.n	800ac0e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800abee:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800abf0:	e00d      	b.n	800ac0e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2208      	movs	r2, #8
 800abf6:	4013      	ands	r3, r2
 800abf8:	d009      	beq.n	800ac0e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2208      	movs	r2, #8
 800abfe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac00:	d005      	beq.n	800ac0e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	0011      	movs	r1, r2
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f000 f80b 	bl	800ac24 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2240      	movs	r2, #64	@ 0x40
 800ac12:	2100      	movs	r1, #0
 800ac14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	0018      	movs	r0, r3
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	b008      	add	sp, #32
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	ffff0000 	.word	0xffff0000

0800ac24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ac24:	b5b0      	push	{r4, r5, r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2241      	movs	r2, #65	@ 0x41
 800ac32:	5c9b      	ldrb	r3, [r3, r2]
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	001a      	movs	r2, r3
 800ac38:	2328      	movs	r3, #40	@ 0x28
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b28      	cmp	r3, #40	@ 0x28
 800ac3e:	d000      	beq.n	800ac42 <I2C_ITAddrCplt+0x1e>
 800ac40:	e088      	b.n	800ad54 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	0c1b      	lsrs	r3, r3, #16
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	250f      	movs	r5, #15
 800ac4e:	197b      	adds	r3, r7, r5
 800ac50:	2101      	movs	r1, #1
 800ac52:	400a      	ands	r2, r1
 800ac54:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	0c1b      	lsrs	r3, r3, #16
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	200c      	movs	r0, #12
 800ac62:	183b      	adds	r3, r7, r0
 800ac64:	21fe      	movs	r1, #254	@ 0xfe
 800ac66:	400a      	ands	r2, r1
 800ac68:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	240a      	movs	r4, #10
 800ac74:	193b      	adds	r3, r7, r4
 800ac76:	0592      	lsls	r2, r2, #22
 800ac78:	0d92      	lsrs	r2, r2, #22
 800ac7a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	2308      	movs	r3, #8
 800ac86:	18fb      	adds	r3, r7, r3
 800ac88:	21fe      	movs	r1, #254	@ 0xfe
 800ac8a:	400a      	ands	r2, r1
 800ac8c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d148      	bne.n	800ad28 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ac96:	0021      	movs	r1, r4
 800ac98:	187b      	adds	r3, r7, r1
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	09db      	lsrs	r3, r3, #7
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	183b      	adds	r3, r7, r0
 800aca2:	881b      	ldrh	r3, [r3, #0]
 800aca4:	4053      	eors	r3, r2
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	001a      	movs	r2, r3
 800acaa:	2306      	movs	r3, #6
 800acac:	4013      	ands	r3, r2
 800acae:	d120      	bne.n	800acf2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800acb0:	183b      	adds	r3, r7, r0
 800acb2:	187a      	adds	r2, r7, r1
 800acb4:	8812      	ldrh	r2, [r2, #0]
 800acb6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d14c      	bne.n	800ad64 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2208      	movs	r2, #8
 800acd6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2240      	movs	r2, #64	@ 0x40
 800acdc:	2100      	movs	r1, #0
 800acde:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ace0:	183b      	adds	r3, r7, r0
 800ace2:	881a      	ldrh	r2, [r3, #0]
 800ace4:	197b      	adds	r3, r7, r5
 800ace6:	7819      	ldrb	r1, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	0018      	movs	r0, r3
 800acec:	f7ff fa39 	bl	800a162 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800acf0:	e038      	b.n	800ad64 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800acf2:	240c      	movs	r4, #12
 800acf4:	193b      	adds	r3, r7, r4
 800acf6:	2208      	movs	r2, #8
 800acf8:	18ba      	adds	r2, r7, r2
 800acfa:	8812      	ldrh	r2, [r2, #0]
 800acfc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800acfe:	2380      	movs	r3, #128	@ 0x80
 800ad00:	021a      	lsls	r2, r3, #8
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	0011      	movs	r1, r2
 800ad06:	0018      	movs	r0, r3
 800ad08:	f000 fe0a 	bl	800b920 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2240      	movs	r2, #64	@ 0x40
 800ad10:	2100      	movs	r1, #0
 800ad12:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ad14:	193b      	adds	r3, r7, r4
 800ad16:	881a      	ldrh	r2, [r3, #0]
 800ad18:	230f      	movs	r3, #15
 800ad1a:	18fb      	adds	r3, r7, r3
 800ad1c:	7819      	ldrb	r1, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	0018      	movs	r0, r3
 800ad22:	f7ff fa1e 	bl	800a162 <HAL_I2C_AddrCallback>
}
 800ad26:	e01d      	b.n	800ad64 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ad28:	2380      	movs	r3, #128	@ 0x80
 800ad2a:	021a      	lsls	r2, r3, #8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	0011      	movs	r1, r2
 800ad30:	0018      	movs	r0, r3
 800ad32:	f000 fdf5 	bl	800b920 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2240      	movs	r2, #64	@ 0x40
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ad3e:	230c      	movs	r3, #12
 800ad40:	18fb      	adds	r3, r7, r3
 800ad42:	881a      	ldrh	r2, [r3, #0]
 800ad44:	230f      	movs	r3, #15
 800ad46:	18fb      	adds	r3, r7, r3
 800ad48:	7819      	ldrb	r1, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f7ff fa08 	bl	800a162 <HAL_I2C_AddrCallback>
}
 800ad52:	e007      	b.n	800ad64 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2208      	movs	r2, #8
 800ad5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2240      	movs	r2, #64	@ 0x40
 800ad60:	2100      	movs	r1, #0
 800ad62:	5499      	strb	r1, [r3, r2]
}
 800ad64:	46c0      	nop			@ (mov r8, r8)
 800ad66:	46bd      	mov	sp, r7
 800ad68:	b004      	add	sp, #16
 800ad6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ad6c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2242      	movs	r2, #66	@ 0x42
 800ad78:	2100      	movs	r1, #0
 800ad7a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2241      	movs	r2, #65	@ 0x41
 800ad80:	5c9b      	ldrb	r3, [r3, r2]
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b21      	cmp	r3, #33	@ 0x21
 800ad86:	d117      	bne.n	800adb8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2241      	movs	r2, #65	@ 0x41
 800ad8c:	2120      	movs	r1, #32
 800ad8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2211      	movs	r2, #17
 800ad94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2101      	movs	r1, #1
 800ada0:	0018      	movs	r0, r3
 800ada2:	f000 fdbd 	bl	800b920 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2240      	movs	r2, #64	@ 0x40
 800adaa:	2100      	movs	r1, #0
 800adac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	0018      	movs	r0, r3
 800adb2:	f7ff f9b6 	bl	800a122 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800adb6:	e016      	b.n	800ade6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2241      	movs	r2, #65	@ 0x41
 800adbc:	2120      	movs	r1, #32
 800adbe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2212      	movs	r2, #18
 800adc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2102      	movs	r1, #2
 800add0:	0018      	movs	r0, r3
 800add2:	f000 fda5 	bl	800b920 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2240      	movs	r2, #64	@ 0x40
 800adda:	2100      	movs	r1, #0
 800addc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	0018      	movs	r0, r3
 800ade2:	f7ff f9a6 	bl	800a132 <HAL_I2C_MasterRxCpltCallback>
}
 800ade6:	46c0      	nop			@ (mov r8, r8)
 800ade8:	46bd      	mov	sp, r7
 800adea:	b002      	add	sp, #8
 800adec:	bd80      	pop	{r7, pc}
	...

0800adf0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2242      	movs	r2, #66	@ 0x42
 800ae04:	2100      	movs	r1, #0
 800ae06:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	2380      	movs	r3, #128	@ 0x80
 800ae0c:	01db      	lsls	r3, r3, #7
 800ae0e:	4013      	ands	r3, r2
 800ae10:	d008      	beq.n	800ae24 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4924      	ldr	r1, [pc, #144]	@ (800aeb0 <I2C_ITSlaveSeqCplt+0xc0>)
 800ae1e:	400a      	ands	r2, r1
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	e00c      	b.n	800ae3e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	2380      	movs	r3, #128	@ 0x80
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	d007      	beq.n	800ae3e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	491e      	ldr	r1, [pc, #120]	@ (800aeb4 <I2C_ITSlaveSeqCplt+0xc4>)
 800ae3a:	400a      	ands	r2, r1
 800ae3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2241      	movs	r2, #65	@ 0x41
 800ae42:	5c9b      	ldrb	r3, [r3, r2]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b29      	cmp	r3, #41	@ 0x29
 800ae48:	d114      	bne.n	800ae74 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2241      	movs	r2, #65	@ 0x41
 800ae4e:	2128      	movs	r1, #40	@ 0x28
 800ae50:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2221      	movs	r2, #33	@ 0x21
 800ae56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	0018      	movs	r0, r3
 800ae5e:	f000 fd5f 	bl	800b920 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2240      	movs	r2, #64	@ 0x40
 800ae66:	2100      	movs	r1, #0
 800ae68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	f7ff f968 	bl	800a142 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae72:	e019      	b.n	800aea8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2241      	movs	r2, #65	@ 0x41
 800ae78:	5c9b      	ldrb	r3, [r3, r2]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae7e:	d113      	bne.n	800aea8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2241      	movs	r2, #65	@ 0x41
 800ae84:	2128      	movs	r1, #40	@ 0x28
 800ae86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2222      	movs	r2, #34	@ 0x22
 800ae8c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2102      	movs	r1, #2
 800ae92:	0018      	movs	r0, r3
 800ae94:	f000 fd44 	bl	800b920 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2240      	movs	r2, #64	@ 0x40
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	0018      	movs	r0, r3
 800aea4:	f7ff f955 	bl	800a152 <HAL_I2C_SlaveRxCpltCallback>
}
 800aea8:	46c0      	nop			@ (mov r8, r8)
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b004      	add	sp, #16
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	ffffbfff 	.word	0xffffbfff
 800aeb4:	ffff7fff 	.word	0xffff7fff

0800aeb8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2220      	movs	r2, #32
 800aecc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2241      	movs	r2, #65	@ 0x41
 800aed2:	5c9b      	ldrb	r3, [r3, r2]
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b21      	cmp	r3, #33	@ 0x21
 800aed8:	d108      	bne.n	800aeec <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2101      	movs	r1, #1
 800aede:	0018      	movs	r0, r3
 800aee0:	f000 fd1e 	bl	800b920 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2211      	movs	r2, #17
 800aee8:	631a      	str	r2, [r3, #48]	@ 0x30
 800aeea:	e00d      	b.n	800af08 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2241      	movs	r2, #65	@ 0x41
 800aef0:	5c9b      	ldrb	r3, [r3, r2]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b22      	cmp	r3, #34	@ 0x22
 800aef6:	d107      	bne.n	800af08 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2102      	movs	r1, #2
 800aefc:	0018      	movs	r0, r3
 800aefe:	f000 fd0f 	bl	800b920 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2212      	movs	r2, #18
 800af06:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	494e      	ldr	r1, [pc, #312]	@ (800b04c <I2C_ITMasterCplt+0x194>)
 800af14:	400a      	ands	r2, r1
 800af16:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a4b      	ldr	r2, [pc, #300]	@ (800b050 <I2C_ITMasterCplt+0x198>)
 800af22:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2210      	movs	r2, #16
 800af28:	4013      	ands	r3, r2
 800af2a:	d009      	beq.n	800af40 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2210      	movs	r2, #16
 800af32:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af38:	2204      	movs	r2, #4
 800af3a:	431a      	orrs	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2241      	movs	r2, #65	@ 0x41
 800af44:	5c9b      	ldrb	r3, [r3, r2]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b60      	cmp	r3, #96	@ 0x60
 800af4a:	d109      	bne.n	800af60 <I2C_ITMasterCplt+0xa8>
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2204      	movs	r2, #4
 800af50:	4013      	ands	r3, r2
 800af52:	d005      	beq.n	800af60 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800af5e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	0018      	movs	r0, r3
 800af64:	f000 fb19 	bl	800b59a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af6c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2241      	movs	r2, #65	@ 0x41
 800af72:	5c9b      	ldrb	r3, [r3, r2]
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b60      	cmp	r3, #96	@ 0x60
 800af78:	d002      	beq.n	800af80 <I2C_ITMasterCplt+0xc8>
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	0011      	movs	r1, r2
 800af88:	0018      	movs	r0, r3
 800af8a:	f000 f9db 	bl	800b344 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800af8e:	e058      	b.n	800b042 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2241      	movs	r2, #65	@ 0x41
 800af94:	5c9b      	ldrb	r3, [r3, r2]
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b21      	cmp	r3, #33	@ 0x21
 800af9a:	d126      	bne.n	800afea <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2241      	movs	r2, #65	@ 0x41
 800afa0:	2120      	movs	r1, #32
 800afa2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2242      	movs	r2, #66	@ 0x42
 800afae:	5c9b      	ldrb	r3, [r3, r2]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b40      	cmp	r3, #64	@ 0x40
 800afb4:	d10c      	bne.n	800afd0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2242      	movs	r2, #66	@ 0x42
 800afba:	2100      	movs	r1, #0
 800afbc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2240      	movs	r2, #64	@ 0x40
 800afc2:	2100      	movs	r1, #0
 800afc4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	0018      	movs	r0, r3
 800afca:	f7ff f8e2 	bl	800a192 <HAL_I2C_MemTxCpltCallback>
}
 800afce:	e038      	b.n	800b042 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2242      	movs	r2, #66	@ 0x42
 800afd4:	2100      	movs	r1, #0
 800afd6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2240      	movs	r2, #64	@ 0x40
 800afdc:	2100      	movs	r1, #0
 800afde:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	0018      	movs	r0, r3
 800afe4:	f7ff f89d 	bl	800a122 <HAL_I2C_MasterTxCpltCallback>
}
 800afe8:	e02b      	b.n	800b042 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2241      	movs	r2, #65	@ 0x41
 800afee:	5c9b      	ldrb	r3, [r3, r2]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b22      	cmp	r3, #34	@ 0x22
 800aff4:	d125      	bne.n	800b042 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2241      	movs	r2, #65	@ 0x41
 800affa:	2120      	movs	r1, #32
 800affc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2242      	movs	r2, #66	@ 0x42
 800b008:	5c9b      	ldrb	r3, [r3, r2]
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b40      	cmp	r3, #64	@ 0x40
 800b00e:	d10c      	bne.n	800b02a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2242      	movs	r2, #66	@ 0x42
 800b014:	2100      	movs	r1, #0
 800b016:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2240      	movs	r2, #64	@ 0x40
 800b01c:	2100      	movs	r1, #0
 800b01e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	0018      	movs	r0, r3
 800b024:	f7ff f8bd 	bl	800a1a2 <HAL_I2C_MemRxCpltCallback>
}
 800b028:	e00b      	b.n	800b042 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2242      	movs	r2, #66	@ 0x42
 800b02e:	2100      	movs	r1, #0
 800b030:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2240      	movs	r2, #64	@ 0x40
 800b036:	2100      	movs	r1, #0
 800b038:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	0018      	movs	r0, r3
 800b03e:	f7ff f878 	bl	800a132 <HAL_I2C_MasterRxCpltCallback>
}
 800b042:	46c0      	nop			@ (mov r8, r8)
 800b044:	46bd      	mov	sp, r7
 800b046:	b006      	add	sp, #24
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	46c0      	nop			@ (mov r8, r8)
 800b04c:	fe00e800 	.word	0xfe00e800
 800b050:	ffff0000 	.word	0xffff0000

0800b054 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b06a:	200f      	movs	r0, #15
 800b06c:	183b      	adds	r3, r7, r0
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	2141      	movs	r1, #65	@ 0x41
 800b072:	5c52      	ldrb	r2, [r2, r1]
 800b074:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2220      	movs	r2, #32
 800b07c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b07e:	183b      	adds	r3, r7, r0
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b21      	cmp	r3, #33	@ 0x21
 800b084:	d003      	beq.n	800b08e <I2C_ITSlaveCplt+0x3a>
 800b086:	183b      	adds	r3, r7, r0
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	2b29      	cmp	r3, #41	@ 0x29
 800b08c:	d109      	bne.n	800b0a2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b08e:	4a7b      	ldr	r2, [pc, #492]	@ (800b27c <I2C_ITSlaveCplt+0x228>)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	0011      	movs	r1, r2
 800b094:	0018      	movs	r0, r3
 800b096:	f000 fc43 	bl	800b920 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2221      	movs	r2, #33	@ 0x21
 800b09e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0a0:	e011      	b.n	800b0c6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b0a2:	220f      	movs	r2, #15
 800b0a4:	18bb      	adds	r3, r7, r2
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b22      	cmp	r3, #34	@ 0x22
 800b0aa:	d003      	beq.n	800b0b4 <I2C_ITSlaveCplt+0x60>
 800b0ac:	18bb      	adds	r3, r7, r2
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0b2:	d108      	bne.n	800b0c6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b0b4:	4a72      	ldr	r2, [pc, #456]	@ (800b280 <I2C_ITSlaveCplt+0x22c>)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	0011      	movs	r1, r2
 800b0ba:	0018      	movs	r0, r3
 800b0bc:	f000 fc30 	bl	800b920 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2222      	movs	r2, #34	@ 0x22
 800b0c4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2180      	movs	r1, #128	@ 0x80
 800b0d2:	0209      	lsls	r1, r1, #8
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4968      	ldr	r1, [pc, #416]	@ (800b284 <I2C_ITSlaveCplt+0x230>)
 800b0e4:	400a      	ands	r2, r1
 800b0e6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	f000 fa55 	bl	800b59a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	2380      	movs	r3, #128	@ 0x80
 800b0f4:	01db      	lsls	r3, r3, #7
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	d013      	beq.n	800b122 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4960      	ldr	r1, [pc, #384]	@ (800b288 <I2C_ITSlaveCplt+0x234>)
 800b106:	400a      	ands	r2, r1
 800b108:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d01f      	beq.n	800b152 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b120:	e017      	b.n	800b152 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	2380      	movs	r3, #128	@ 0x80
 800b126:	021b      	lsls	r3, r3, #8
 800b128:	4013      	ands	r3, r2
 800b12a:	d012      	beq.n	800b152 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4955      	ldr	r1, [pc, #340]	@ (800b28c <I2C_ITSlaveCplt+0x238>)
 800b138:	400a      	ands	r2, r1
 800b13a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b140:	2b00      	cmp	r3, #0
 800b142:	d006      	beq.n	800b152 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2204      	movs	r2, #4
 800b156:	4013      	ands	r3, r2
 800b158:	d020      	beq.n	800b19c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2204      	movs	r2, #4
 800b15e:	4393      	bics	r3, r2
 800b160:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16c:	b2d2      	uxtb	r2, r2
 800b16e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00c      	beq.n	800b19c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b186:	3b01      	subs	r3, #1
 800b188:	b29a      	uxth	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b192:	b29b      	uxth	r3, r3
 800b194:	3b01      	subs	r3, #1
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d005      	beq.n	800b1b2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1aa:	2204      	movs	r2, #4
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2242      	movs	r2, #66	@ 0x42
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d013      	beq.n	800b1f0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	0011      	movs	r1, r2
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	f000 f8b7 	bl	800b344 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2241      	movs	r2, #65	@ 0x41
 800b1da:	5c9b      	ldrb	r3, [r3, r2]
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b28      	cmp	r3, #40	@ 0x28
 800b1e0:	d147      	bne.n	800b272 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	0011      	movs	r1, r2
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	f000 f853 	bl	800b294 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b1ee:	e040      	b.n	800b272 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f4:	4a26      	ldr	r2, [pc, #152]	@ (800b290 <I2C_ITSlaveCplt+0x23c>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d016      	beq.n	800b228 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	0018      	movs	r0, r3
 800b1fe:	f7ff fdf7 	bl	800adf0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a22      	ldr	r2, [pc, #136]	@ (800b290 <I2C_ITSlaveCplt+0x23c>)
 800b206:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2241      	movs	r2, #65	@ 0x41
 800b20c:	2120      	movs	r1, #32
 800b20e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2240      	movs	r2, #64	@ 0x40
 800b21a:	2100      	movs	r1, #0
 800b21c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	0018      	movs	r0, r3
 800b222:	f7fe ffae 	bl	800a182 <HAL_I2C_ListenCpltCallback>
}
 800b226:	e024      	b.n	800b272 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2241      	movs	r2, #65	@ 0x41
 800b22c:	5c9b      	ldrb	r3, [r3, r2]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b22      	cmp	r3, #34	@ 0x22
 800b232:	d10f      	bne.n	800b254 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2241      	movs	r2, #65	@ 0x41
 800b238:	2120      	movs	r1, #32
 800b23a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2240      	movs	r2, #64	@ 0x40
 800b246:	2100      	movs	r1, #0
 800b248:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	0018      	movs	r0, r3
 800b24e:	f7fe ff80 	bl	800a152 <HAL_I2C_SlaveRxCpltCallback>
}
 800b252:	e00e      	b.n	800b272 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2241      	movs	r2, #65	@ 0x41
 800b258:	2120      	movs	r1, #32
 800b25a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2240      	movs	r2, #64	@ 0x40
 800b266:	2100      	movs	r1, #0
 800b268:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	0018      	movs	r0, r3
 800b26e:	f7fe ff68 	bl	800a142 <HAL_I2C_SlaveTxCpltCallback>
}
 800b272:	46c0      	nop			@ (mov r8, r8)
 800b274:	46bd      	mov	sp, r7
 800b276:	b006      	add	sp, #24
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	46c0      	nop			@ (mov r8, r8)
 800b27c:	00008001 	.word	0x00008001
 800b280:	00008002 	.word	0x00008002
 800b284:	fe00e800 	.word	0xfe00e800
 800b288:	ffffbfff 	.word	0xffffbfff
 800b28c:	ffff7fff 	.word	0xffff7fff
 800b290:	ffff0000 	.word	0xffff0000

0800b294 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a26      	ldr	r2, [pc, #152]	@ (800b33c <I2C_ITListenCplt+0xa8>)
 800b2a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2241      	movs	r2, #65	@ 0x41
 800b2ae:	2120      	movs	r1, #32
 800b2b0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2242      	movs	r2, #66	@ 0x42
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2204      	movs	r2, #4
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	d022      	beq.n	800b30e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d2:	b2d2      	uxtb	r2, r2
 800b2d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d012      	beq.n	800b30e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b306:	2204      	movs	r2, #4
 800b308:	431a      	orrs	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b30e:	4a0c      	ldr	r2, [pc, #48]	@ (800b340 <I2C_ITListenCplt+0xac>)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	0011      	movs	r1, r2
 800b314:	0018      	movs	r0, r3
 800b316:	f000 fb03 	bl	800b920 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2210      	movs	r2, #16
 800b320:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2240      	movs	r2, #64	@ 0x40
 800b326:	2100      	movs	r1, #0
 800b328:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	0018      	movs	r0, r3
 800b32e:	f7fe ff28 	bl	800a182 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b332:	46c0      	nop			@ (mov r8, r8)
 800b334:	46bd      	mov	sp, r7
 800b336:	b002      	add	sp, #8
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	46c0      	nop			@ (mov r8, r8)
 800b33c:	ffff0000 	.word	0xffff0000
 800b340:	00008003 	.word	0x00008003

0800b344 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b34e:	200f      	movs	r0, #15
 800b350:	183b      	adds	r3, r7, r0
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	2141      	movs	r1, #65	@ 0x41
 800b356:	5c52      	ldrb	r2, [r2, r1]
 800b358:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2242      	movs	r2, #66	@ 0x42
 800b35e:	2100      	movs	r1, #0
 800b360:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a72      	ldr	r2, [pc, #456]	@ (800b530 <I2C_ITError+0x1ec>)
 800b366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b37a:	183b      	adds	r3, r7, r0
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	2b28      	cmp	r3, #40	@ 0x28
 800b380:	d007      	beq.n	800b392 <I2C_ITError+0x4e>
 800b382:	183b      	adds	r3, r7, r0
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b29      	cmp	r3, #41	@ 0x29
 800b388:	d003      	beq.n	800b392 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b38a:	183b      	adds	r3, r7, r0
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b390:	d10c      	bne.n	800b3ac <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2103      	movs	r1, #3
 800b396:	0018      	movs	r0, r3
 800b398:	f000 fac2 	bl	800b920 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2241      	movs	r2, #65	@ 0x41
 800b3a0:	2128      	movs	r1, #40	@ 0x28
 800b3a2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a63      	ldr	r2, [pc, #396]	@ (800b534 <I2C_ITError+0x1f0>)
 800b3a8:	635a      	str	r2, [r3, #52]	@ 0x34
 800b3aa:	e032      	b.n	800b412 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b3ac:	4a62      	ldr	r2, [pc, #392]	@ (800b538 <I2C_ITError+0x1f4>)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	0011      	movs	r1, r2
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	f000 fab4 	bl	800b920 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	0018      	movs	r0, r3
 800b3bc:	f000 f8ed 	bl	800b59a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2241      	movs	r2, #65	@ 0x41
 800b3c4:	5c9b      	ldrb	r3, [r3, r2]
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b60      	cmp	r3, #96	@ 0x60
 800b3ca:	d01f      	beq.n	800b40c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2241      	movs	r2, #65	@ 0x41
 800b3d0:	2120      	movs	r1, #32
 800b3d2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	2220      	movs	r2, #32
 800b3dc:	4013      	ands	r3, r2
 800b3de:	2b20      	cmp	r3, #32
 800b3e0:	d114      	bne.n	800b40c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	2210      	movs	r2, #16
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	2b10      	cmp	r3, #16
 800b3ee:	d109      	bne.n	800b404 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2210      	movs	r2, #16
 800b3f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3fc:	2204      	movs	r2, #4
 800b3fe:	431a      	orrs	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2220      	movs	r2, #32
 800b40a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b416:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d03b      	beq.n	800b498 <I2C_ITError+0x154>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b11      	cmp	r3, #17
 800b424:	d002      	beq.n	800b42c <I2C_ITError+0xe8>
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2b21      	cmp	r3, #33	@ 0x21
 800b42a:	d135      	bne.n	800b498 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	2380      	movs	r3, #128	@ 0x80
 800b434:	01db      	lsls	r3, r3, #7
 800b436:	401a      	ands	r2, r3
 800b438:	2380      	movs	r3, #128	@ 0x80
 800b43a:	01db      	lsls	r3, r3, #7
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d107      	bne.n	800b450 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	493c      	ldr	r1, [pc, #240]	@ (800b53c <I2C_ITError+0x1f8>)
 800b44c:	400a      	ands	r2, r1
 800b44e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b454:	0018      	movs	r0, r3
 800b456:	f7fe f87c 	bl	8009552 <HAL_DMA_GetState>
 800b45a:	0003      	movs	r3, r0
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d016      	beq.n	800b48e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b464:	4a36      	ldr	r2, [pc, #216]	@ (800b540 <I2C_ITError+0x1fc>)
 800b466:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2240      	movs	r2, #64	@ 0x40
 800b46c:	2100      	movs	r1, #0
 800b46e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b474:	0018      	movs	r0, r3
 800b476:	f7fd ff77 	bl	8009368 <HAL_DMA_Abort_IT>
 800b47a:	1e03      	subs	r3, r0, #0
 800b47c:	d051      	beq.n	800b522 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b488:	0018      	movs	r0, r3
 800b48a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b48c:	e049      	b.n	800b522 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	0018      	movs	r0, r3
 800b492:	f000 f859 	bl	800b548 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b496:	e044      	b.n	800b522 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d03b      	beq.n	800b518 <I2C_ITError+0x1d4>
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2b12      	cmp	r3, #18
 800b4a4:	d002      	beq.n	800b4ac <I2C_ITError+0x168>
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b22      	cmp	r3, #34	@ 0x22
 800b4aa:	d135      	bne.n	800b518 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	2380      	movs	r3, #128	@ 0x80
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	401a      	ands	r2, r3
 800b4b8:	2380      	movs	r3, #128	@ 0x80
 800b4ba:	021b      	lsls	r3, r3, #8
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d107      	bne.n	800b4d0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	491e      	ldr	r1, [pc, #120]	@ (800b544 <I2C_ITError+0x200>)
 800b4cc:	400a      	ands	r2, r1
 800b4ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f7fe f83c 	bl	8009552 <HAL_DMA_GetState>
 800b4da:	0003      	movs	r3, r0
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d016      	beq.n	800b50e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4e4:	4a16      	ldr	r2, [pc, #88]	@ (800b540 <I2C_ITError+0x1fc>)
 800b4e6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2240      	movs	r2, #64	@ 0x40
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f7fd ff37 	bl	8009368 <HAL_DMA_Abort_IT>
 800b4fa:	1e03      	subs	r3, r0, #0
 800b4fc:	d013      	beq.n	800b526 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b508:	0018      	movs	r0, r3
 800b50a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b50c:	e00b      	b.n	800b526 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	0018      	movs	r0, r3
 800b512:	f000 f819 	bl	800b548 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b516:	e006      	b.n	800b526 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	0018      	movs	r0, r3
 800b51c:	f000 f814 	bl	800b548 <I2C_TreatErrorCallback>
  }
}
 800b520:	e002      	b.n	800b528 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b522:	46c0      	nop			@ (mov r8, r8)
 800b524:	e000      	b.n	800b528 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b526:	46c0      	nop			@ (mov r8, r8)
}
 800b528:	46c0      	nop			@ (mov r8, r8)
 800b52a:	46bd      	mov	sp, r7
 800b52c:	b004      	add	sp, #16
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	ffff0000 	.word	0xffff0000
 800b534:	0800a429 	.word	0x0800a429
 800b538:	00008003 	.word	0x00008003
 800b53c:	ffffbfff 	.word	0xffffbfff
 800b540:	0800b753 	.word	0x0800b753
 800b544:	ffff7fff 	.word	0xffff7fff

0800b548 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2241      	movs	r2, #65	@ 0x41
 800b554:	5c9b      	ldrb	r3, [r3, r2]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b60      	cmp	r3, #96	@ 0x60
 800b55a:	d10f      	bne.n	800b57c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2241      	movs	r2, #65	@ 0x41
 800b560:	2120      	movs	r1, #32
 800b562:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2240      	movs	r2, #64	@ 0x40
 800b56e:	2100      	movs	r1, #0
 800b570:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	0018      	movs	r0, r3
 800b576:	f7fe fe24 	bl	800a1c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b57a:	e00a      	b.n	800b592 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2240      	movs	r2, #64	@ 0x40
 800b586:	2100      	movs	r1, #0
 800b588:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	0018      	movs	r0, r3
 800b58e:	f7fe fe10 	bl	800a1b2 <HAL_I2C_ErrorCallback>
}
 800b592:	46c0      	nop			@ (mov r8, r8)
 800b594:	46bd      	mov	sp, r7
 800b596:	b002      	add	sp, #8
 800b598:	bd80      	pop	{r7, pc}

0800b59a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d103      	bne.n	800b5b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d007      	beq.n	800b5d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	699a      	ldr	r2, [r3, #24]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	430a      	orrs	r2, r1
 800b5d4:	619a      	str	r2, [r3, #24]
  }
}
 800b5d6:	46c0      	nop			@ (mov r8, r8)
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	b002      	add	sp, #8
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ec:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4920      	ldr	r1, [pc, #128]	@ (800b67c <I2C_DMAMasterTransmitCplt+0x9c>)
 800b5fa:	400a      	ands	r2, r1
 800b5fc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b602:	b29b      	uxth	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d105      	bne.n	800b614 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2120      	movs	r1, #32
 800b60c:	0018      	movs	r0, r3
 800b60e:	f000 f8f9 	bl	800b804 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b612:	e02e      	b.n	800b672 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b61c:	189a      	adds	r2, r3, r2
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b626:	b29b      	uxth	r3, r3
 800b628:	2bff      	cmp	r3, #255	@ 0xff
 800b62a:	d903      	bls.n	800b634 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	22ff      	movs	r2, #255	@ 0xff
 800b630:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b632:	e004      	b.n	800b63e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b638:	b29a      	uxth	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b646:	0019      	movs	r1, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	3328      	adds	r3, #40	@ 0x28
 800b64e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b654:	f7fd fde2 	bl	800921c <HAL_DMA_Start_IT>
 800b658:	1e03      	subs	r3, r0, #0
 800b65a:	d005      	beq.n	800b668 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2110      	movs	r1, #16
 800b660:	0018      	movs	r0, r3
 800b662:	f7ff fe6f 	bl	800b344 <I2C_ITError>
}
 800b666:	e004      	b.n	800b672 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2140      	movs	r1, #64	@ 0x40
 800b66c:	0018      	movs	r0, r3
 800b66e:	f000 f8c9 	bl	800b804 <I2C_Enable_IRQ>
}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	46bd      	mov	sp, r7
 800b676:	b004      	add	sp, #16
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	46c0      	nop			@ (mov r8, r8)
 800b67c:	ffffbfff 	.word	0xffffbfff

0800b680 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4920      	ldr	r1, [pc, #128]	@ (800b71c <I2C_DMAMasterReceiveCplt+0x9c>)
 800b69a:	400a      	ands	r2, r1
 800b69c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d105      	bne.n	800b6b4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2120      	movs	r1, #32
 800b6ac:	0018      	movs	r0, r3
 800b6ae:	f000 f8a9 	bl	800b804 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b6b2:	e02e      	b.n	800b712 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b6bc:	189a      	adds	r2, r3, r2
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	2bff      	cmp	r3, #255	@ 0xff
 800b6ca:	d903      	bls.n	800b6d4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	22ff      	movs	r2, #255	@ 0xff
 800b6d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b6d2:	e004      	b.n	800b6de <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3324      	adds	r3, #36	@ 0x24
 800b6e8:	0019      	movs	r1, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ee:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b6f4:	f7fd fd92 	bl	800921c <HAL_DMA_Start_IT>
 800b6f8:	1e03      	subs	r3, r0, #0
 800b6fa:	d005      	beq.n	800b708 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2110      	movs	r1, #16
 800b700:	0018      	movs	r0, r3
 800b702:	f7ff fe1f 	bl	800b344 <I2C_ITError>
}
 800b706:	e004      	b.n	800b712 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2140      	movs	r1, #64	@ 0x40
 800b70c:	0018      	movs	r0, r3
 800b70e:	f000 f879 	bl	800b804 <I2C_Enable_IRQ>
}
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	46bd      	mov	sp, r7
 800b716:	b004      	add	sp, #16
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	46c0      	nop			@ (mov r8, r8)
 800b71c:	ffff7fff 	.word	0xffff7fff

0800b720 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2180      	movs	r1, #128	@ 0x80
 800b73a:	0209      	lsls	r1, r1, #8
 800b73c:	430a      	orrs	r2, r1
 800b73e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2110      	movs	r1, #16
 800b744:	0018      	movs	r0, r3
 800b746:	f7ff fdfd 	bl	800b344 <I2C_ITError>
}
 800b74a:	46c0      	nop			@ (mov r8, r8)
 800b74c:	46bd      	mov	sp, r7
 800b74e:	b004      	add	sp, #16
 800b750:	bd80      	pop	{r7, pc}

0800b752 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b76c:	2200      	movs	r2, #0
 800b76e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d003      	beq.n	800b780 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b77c:	2200      	movs	r2, #0
 800b77e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	0018      	movs	r0, r3
 800b784:	f7ff fee0 	bl	800b548 <I2C_TreatErrorCallback>
}
 800b788:	46c0      	nop			@ (mov r8, r8)
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b004      	add	sp, #16
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	0008      	movs	r0, r1
 800b79a:	0011      	movs	r1, r2
 800b79c:	607b      	str	r3, [r7, #4]
 800b79e:	240a      	movs	r4, #10
 800b7a0:	193b      	adds	r3, r7, r4
 800b7a2:	1c02      	adds	r2, r0, #0
 800b7a4:	801a      	strh	r2, [r3, #0]
 800b7a6:	2009      	movs	r0, #9
 800b7a8:	183b      	adds	r3, r7, r0
 800b7aa:	1c0a      	adds	r2, r1, #0
 800b7ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7ae:	193b      	adds	r3, r7, r4
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	059b      	lsls	r3, r3, #22
 800b7b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7b6:	183b      	adds	r3, r7, r0
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	0419      	lsls	r1, r3, #16
 800b7bc:	23ff      	movs	r3, #255	@ 0xff
 800b7be:	041b      	lsls	r3, r3, #16
 800b7c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	085b      	lsrs	r3, r3, #1
 800b7d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7da:	0d51      	lsrs	r1, r2, #21
 800b7dc:	2280      	movs	r2, #128	@ 0x80
 800b7de:	00d2      	lsls	r2, r2, #3
 800b7e0:	400a      	ands	r2, r1
 800b7e2:	4907      	ldr	r1, [pc, #28]	@ (800b800 <I2C_TransferConfig+0x70>)
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	43d2      	mvns	r2, r2
 800b7e8:	401a      	ands	r2, r3
 800b7ea:	0011      	movs	r1, r2
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	697a      	ldr	r2, [r7, #20]
 800b7f2:	430a      	orrs	r2, r1
 800b7f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b7f6:	46c0      	nop			@ (mov r8, r8)
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	b007      	add	sp, #28
 800b7fc:	bd90      	pop	{r4, r7, pc}
 800b7fe:	46c0      	nop			@ (mov r8, r8)
 800b800:	03ff63ff 	.word	0x03ff63ff

0800b804 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	000a      	movs	r2, r1
 800b80e:	1cbb      	adds	r3, r7, #2
 800b810:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b81a:	4b3e      	ldr	r3, [pc, #248]	@ (800b914 <I2C_Enable_IRQ+0x110>)
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d035      	beq.n	800b88c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b824:	4b3c      	ldr	r3, [pc, #240]	@ (800b918 <I2C_Enable_IRQ+0x114>)
 800b826:	429a      	cmp	r2, r3
 800b828:	d030      	beq.n	800b88c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b82e:	4b3b      	ldr	r3, [pc, #236]	@ (800b91c <I2C_Enable_IRQ+0x118>)
 800b830:	429a      	cmp	r2, r3
 800b832:	d02b      	beq.n	800b88c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b834:	1cbb      	adds	r3, r7, #2
 800b836:	2200      	movs	r2, #0
 800b838:	5e9b      	ldrsh	r3, [r3, r2]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	da03      	bge.n	800b846 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	22b8      	movs	r2, #184	@ 0xb8
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b846:	1cbb      	adds	r3, r7, #2
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	2201      	movs	r2, #1
 800b84c:	4013      	ands	r3, r2
 800b84e:	d003      	beq.n	800b858 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	22f2      	movs	r2, #242	@ 0xf2
 800b854:	4313      	orrs	r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b858:	1cbb      	adds	r3, r7, #2
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	2202      	movs	r2, #2
 800b85e:	4013      	ands	r3, r2
 800b860:	d003      	beq.n	800b86a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	22f4      	movs	r2, #244	@ 0xf4
 800b866:	4313      	orrs	r3, r2
 800b868:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b86a:	1cbb      	adds	r3, r7, #2
 800b86c:	881b      	ldrh	r3, [r3, #0]
 800b86e:	2b10      	cmp	r3, #16
 800b870:	d103      	bne.n	800b87a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2290      	movs	r2, #144	@ 0x90
 800b876:	4313      	orrs	r3, r2
 800b878:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b87a:	1cbb      	adds	r3, r7, #2
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	2b20      	cmp	r3, #32
 800b880:	d13c      	bne.n	800b8fc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2220      	movs	r2, #32
 800b886:	4313      	orrs	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b88a:	e037      	b.n	800b8fc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b88c:	1cbb      	adds	r3, r7, #2
 800b88e:	2200      	movs	r2, #0
 800b890:	5e9b      	ldrsh	r3, [r3, r2]
 800b892:	2b00      	cmp	r3, #0
 800b894:	da03      	bge.n	800b89e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	22b8      	movs	r2, #184	@ 0xb8
 800b89a:	4313      	orrs	r3, r2
 800b89c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b89e:	1cbb      	adds	r3, r7, #2
 800b8a0:	881b      	ldrh	r3, [r3, #0]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	d003      	beq.n	800b8b0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	22f2      	movs	r2, #242	@ 0xf2
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b8b0:	1cbb      	adds	r3, r7, #2
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	d003      	beq.n	800b8c2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	22f4      	movs	r2, #244	@ 0xf4
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b8c2:	1cbb      	adds	r3, r7, #2
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	2b10      	cmp	r3, #16
 800b8c8:	d103      	bne.n	800b8d2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2290      	movs	r2, #144	@ 0x90
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b8d2:	1cbb      	adds	r3, r7, #2
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	d103      	bne.n	800b8e2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2260      	movs	r2, #96	@ 0x60
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b91c <I2C_Enable_IRQ+0x118>)
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d007      	beq.n	800b8fc <I2C_Enable_IRQ+0xf8>
 800b8ec:	1cbb      	adds	r3, r7, #2
 800b8ee:	881b      	ldrh	r3, [r3, #0]
 800b8f0:	2b40      	cmp	r3, #64	@ 0x40
 800b8f2:	d103      	bne.n	800b8fc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2240      	movs	r2, #64	@ 0x40
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6819      	ldr	r1, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	430a      	orrs	r2, r1
 800b90a:	601a      	str	r2, [r3, #0]
}
 800b90c:	46c0      	nop			@ (mov r8, r8)
 800b90e:	46bd      	mov	sp, r7
 800b910:	b004      	add	sp, #16
 800b912:	bd80      	pop	{r7, pc}
 800b914:	0800a629 	.word	0x0800a629
 800b918:	0800aa59 	.word	0x0800aa59
 800b91c:	0800a821 	.word	0x0800a821

0800b920 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	000a      	movs	r2, r1
 800b92a:	1cbb      	adds	r3, r7, #2
 800b92c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b932:	1cbb      	adds	r3, r7, #2
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	2201      	movs	r2, #1
 800b938:	4013      	ands	r3, r2
 800b93a:	d010      	beq.n	800b95e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2242      	movs	r2, #66	@ 0x42
 800b940:	4313      	orrs	r3, r2
 800b942:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2241      	movs	r2, #65	@ 0x41
 800b948:	5c9b      	ldrb	r3, [r3, r2]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	001a      	movs	r2, r3
 800b94e:	2328      	movs	r3, #40	@ 0x28
 800b950:	4013      	ands	r3, r2
 800b952:	2b28      	cmp	r3, #40	@ 0x28
 800b954:	d003      	beq.n	800b95e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	22b0      	movs	r2, #176	@ 0xb0
 800b95a:	4313      	orrs	r3, r2
 800b95c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b95e:	1cbb      	adds	r3, r7, #2
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	2202      	movs	r2, #2
 800b964:	4013      	ands	r3, r2
 800b966:	d010      	beq.n	800b98a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2244      	movs	r2, #68	@ 0x44
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2241      	movs	r2, #65	@ 0x41
 800b974:	5c9b      	ldrb	r3, [r3, r2]
 800b976:	b2db      	uxtb	r3, r3
 800b978:	001a      	movs	r2, r3
 800b97a:	2328      	movs	r3, #40	@ 0x28
 800b97c:	4013      	ands	r3, r2
 800b97e:	2b28      	cmp	r3, #40	@ 0x28
 800b980:	d003      	beq.n	800b98a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	22b0      	movs	r2, #176	@ 0xb0
 800b986:	4313      	orrs	r3, r2
 800b988:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b98a:	1cbb      	adds	r3, r7, #2
 800b98c:	2200      	movs	r2, #0
 800b98e:	5e9b      	ldrsh	r3, [r3, r2]
 800b990:	2b00      	cmp	r3, #0
 800b992:	da03      	bge.n	800b99c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	22b8      	movs	r2, #184	@ 0xb8
 800b998:	4313      	orrs	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b99c:	1cbb      	adds	r3, r7, #2
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	2b10      	cmp	r3, #16
 800b9a2:	d103      	bne.n	800b9ac <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2290      	movs	r2, #144	@ 0x90
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b9ac:	1cbb      	adds	r3, r7, #2
 800b9ae:	881b      	ldrh	r3, [r3, #0]
 800b9b0:	2b20      	cmp	r3, #32
 800b9b2:	d103      	bne.n	800b9bc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b9bc:	1cbb      	adds	r3, r7, #2
 800b9be:	881b      	ldrh	r3, [r3, #0]
 800b9c0:	2b40      	cmp	r3, #64	@ 0x40
 800b9c2:	d103      	bne.n	800b9cc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2240      	movs	r2, #64	@ 0x40
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	43d9      	mvns	r1, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	400a      	ands	r2, r1
 800b9dc:	601a      	str	r2, [r3, #0]
}
 800b9de:	46c0      	nop			@ (mov r8, r8)
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	b004      	add	sp, #16
 800b9e4:	bd80      	pop	{r7, pc}
	...

0800b9e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2241      	movs	r2, #65	@ 0x41
 800b9f6:	5c9b      	ldrb	r3, [r3, r2]
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b20      	cmp	r3, #32
 800b9fc:	d138      	bne.n	800ba70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2240      	movs	r2, #64	@ 0x40
 800ba02:	5c9b      	ldrb	r3, [r3, r2]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d101      	bne.n	800ba0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e032      	b.n	800ba72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2240      	movs	r2, #64	@ 0x40
 800ba10:	2101      	movs	r1, #1
 800ba12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2241      	movs	r2, #65	@ 0x41
 800ba18:	2124      	movs	r1, #36	@ 0x24
 800ba1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2101      	movs	r1, #1
 800ba28:	438a      	bics	r2, r1
 800ba2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4911      	ldr	r1, [pc, #68]	@ (800ba7c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800ba38:	400a      	ands	r2, r1
 800ba3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6819      	ldr	r1, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	430a      	orrs	r2, r1
 800ba4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2101      	movs	r1, #1
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2241      	movs	r2, #65	@ 0x41
 800ba60:	2120      	movs	r1, #32
 800ba62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2240      	movs	r2, #64	@ 0x40
 800ba68:	2100      	movs	r1, #0
 800ba6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	e000      	b.n	800ba72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba70:	2302      	movs	r3, #2
  }
}
 800ba72:	0018      	movs	r0, r3
 800ba74:	46bd      	mov	sp, r7
 800ba76:	b002      	add	sp, #8
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	46c0      	nop			@ (mov r8, r8)
 800ba7c:	ffffefff 	.word	0xffffefff

0800ba80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2241      	movs	r2, #65	@ 0x41
 800ba8e:	5c9b      	ldrb	r3, [r3, r2]
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b20      	cmp	r3, #32
 800ba94:	d139      	bne.n	800bb0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2240      	movs	r2, #64	@ 0x40
 800ba9a:	5c9b      	ldrb	r3, [r3, r2]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d101      	bne.n	800baa4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800baa0:	2302      	movs	r3, #2
 800baa2:	e033      	b.n	800bb0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2240      	movs	r2, #64	@ 0x40
 800baa8:	2101      	movs	r1, #1
 800baaa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2241      	movs	r2, #65	@ 0x41
 800bab0:	2124      	movs	r1, #36	@ 0x24
 800bab2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2101      	movs	r1, #1
 800bac0:	438a      	bics	r2, r1
 800bac2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4a11      	ldr	r2, [pc, #68]	@ (800bb14 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800bad0:	4013      	ands	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	4313      	orrs	r3, r2
 800badc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2101      	movs	r1, #1
 800baf2:	430a      	orrs	r2, r1
 800baf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2241      	movs	r2, #65	@ 0x41
 800bafa:	2120      	movs	r1, #32
 800bafc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2240      	movs	r2, #64	@ 0x40
 800bb02:	2100      	movs	r1, #0
 800bb04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e000      	b.n	800bb0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bb0a:	2302      	movs	r3, #2
  }
}
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	b004      	add	sp, #16
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	fffff0ff 	.word	0xfffff0ff

0800bb18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e0e1      	b.n	800bcee <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2235      	movs	r2, #53	@ 0x35
 800bb2e:	5c9b      	ldrb	r3, [r3, r2]
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d107      	bne.n	800bb46 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2234      	movs	r2, #52	@ 0x34
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	0018      	movs	r0, r3
 800bb42:	f7f9 fbed 	bl	8005320 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2235      	movs	r2, #53	@ 0x35
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69da      	ldr	r2, [r3, #28]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4967      	ldr	r1, [pc, #412]	@ (800bcf8 <HAL_I2S_Init+0x1e0>)
 800bb5a:	400a      	ands	r2, r1
 800bb5c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2202      	movs	r2, #2
 800bb64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d073      	beq.n	800bc56 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800bb76:	2310      	movs	r3, #16
 800bb78:	617b      	str	r3, [r7, #20]
 800bb7a:	e001      	b.n	800bb80 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800bb7c:	2320      	movs	r3, #32
 800bb7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	2b20      	cmp	r3, #32
 800bb86:	d802      	bhi.n	800bb8e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	005b      	lsls	r3, r3, #1
 800bb8c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800bb8e:	f001 f957 	bl	800ce40 <HAL_RCC_GetSysClockFreq>
 800bb92:	0003      	movs	r3, r0
 800bb94:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	691a      	ldr	r2, [r3, #16]
 800bb9a:	2380      	movs	r3, #128	@ 0x80
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d131      	bne.n	800bc06 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d016      	beq.n	800bbd8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	0019      	movs	r1, r3
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7f4 fac5 	bl	8000140 <__udivsi3>
 800bbb6:	0003      	movs	r3, r0
 800bbb8:	001a      	movs	r2, r3
 800bbba:	0013      	movs	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	189b      	adds	r3, r3, r2
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	001a      	movs	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	0019      	movs	r1, r3
 800bbca:	0010      	movs	r0, r2
 800bbcc:	f7f4 fab8 	bl	8000140 <__udivsi3>
 800bbd0:	0003      	movs	r3, r0
 800bbd2:	3305      	adds	r3, #5
 800bbd4:	613b      	str	r3, [r7, #16]
 800bbd6:	e02a      	b.n	800bc2e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	0019      	movs	r1, r3
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f7f4 faae 	bl	8000140 <__udivsi3>
 800bbe4:	0003      	movs	r3, r0
 800bbe6:	001a      	movs	r2, r3
 800bbe8:	0013      	movs	r3, r2
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	189b      	adds	r3, r3, r2
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	001a      	movs	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	0019      	movs	r1, r3
 800bbf8:	0010      	movs	r0, r2
 800bbfa:	f7f4 faa1 	bl	8000140 <__udivsi3>
 800bbfe:	0003      	movs	r3, r0
 800bc00:	3305      	adds	r3, #5
 800bc02:	613b      	str	r3, [r7, #16]
 800bc04:	e013      	b.n	800bc2e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800bc06:	6979      	ldr	r1, [r7, #20]
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f7f4 fa99 	bl	8000140 <__udivsi3>
 800bc0e:	0003      	movs	r3, r0
 800bc10:	001a      	movs	r2, r3
 800bc12:	0013      	movs	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	189b      	adds	r3, r3, r2
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	001a      	movs	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	0019      	movs	r1, r3
 800bc22:	0010      	movs	r0, r2
 800bc24:	f7f4 fa8c 	bl	8000140 <__udivsi3>
 800bc28:	0003      	movs	r3, r0
 800bc2a:	3305      	adds	r3, #5
 800bc2c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	210a      	movs	r1, #10
 800bc32:	0018      	movs	r0, r3
 800bc34:	f7f4 fa84 	bl	8000140 <__udivsi3>
 800bc38:	0003      	movs	r3, r0
 800bc3a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	4013      	ands	r3, r2
 800bc42:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	021b      	lsls	r3, r3, #8
 800bc52:	61bb      	str	r3, [r7, #24]
 800bc54:	e003      	b.n	800bc5e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800bc56:	2302      	movs	r3, #2
 800bc58:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d902      	bls.n	800bc6a <HAL_I2S_Init+0x152>
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	2bff      	cmp	r3, #255	@ 0xff
 800bc68:	d907      	bls.n	800bc7a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6e:	2210      	movs	r2, #16
 800bc70:	431a      	orrs	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e039      	b.n	800bcee <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691a      	ldr	r2, [r3, #16]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	431a      	orrs	r2, r3
 800bc82:	0011      	movs	r1, r2
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	69fa      	ldr	r2, [r7, #28]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	69db      	ldr	r3, [r3, #28]
 800bc94:	4a18      	ldr	r2, [pc, #96]	@ (800bcf8 <HAL_I2S_Init+0x1e0>)
 800bc96:	401a      	ands	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6859      	ldr	r1, [r3, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	4319      	orrs	r1, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	4319      	orrs	r1, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	430b      	orrs	r3, r1
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2180      	movs	r1, #128	@ 0x80
 800bcb6:	0109      	lsls	r1, r1, #4
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	2b30      	cmp	r3, #48	@ 0x30
 800bcc2:	d003      	beq.n	800bccc <HAL_I2S_Init+0x1b4>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2bb0      	cmp	r3, #176	@ 0xb0
 800bcca:	d108      	bne.n	800bcde <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	69da      	ldr	r2, [r3, #28]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2180      	movs	r1, #128	@ 0x80
 800bcd8:	0149      	lsls	r1, r1, #5
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2235      	movs	r2, #53	@ 0x35
 800bce8:	2101      	movs	r1, #1
 800bcea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	0018      	movs	r0, r3
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	b008      	add	sp, #32
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	46c0      	nop			@ (mov r8, r8)
 800bcf8:	fffff040 	.word	0xfffff040

0800bcfc <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d101      	bne.n	800bd0e <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e01b      	b.n	800bd46 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2235      	movs	r2, #53	@ 0x35
 800bd12:	2102      	movs	r1, #2
 800bd14:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	69da      	ldr	r2, [r3, #28]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	490b      	ldr	r1, [pc, #44]	@ (800bd50 <HAL_I2S_DeInit+0x54>)
 800bd22:	400a      	ands	r2, r1
 800bd24:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	0018      	movs	r0, r3
 800bd2a:	f7f9 fb6d 	bl	8005408 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2235      	movs	r2, #53	@ 0x35
 800bd38:	2100      	movs	r1, #0
 800bd3a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2234      	movs	r2, #52	@ 0x34
 800bd40:	2100      	movs	r1, #0
 800bd42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	0018      	movs	r0, r3
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	b002      	add	sp, #8
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	46c0      	nop			@ (mov r8, r8)
 800bd50:	fffffbff 	.word	0xfffffbff

0800bd54 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	1dbb      	adds	r3, r7, #6
 800bd60:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d003      	beq.n	800bd70 <HAL_I2S_Receive_DMA+0x1c>
 800bd68:	1dbb      	adds	r3, r7, #6
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e0a6      	b.n	800bec2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2234      	movs	r2, #52	@ 0x34
 800bd78:	5c9b      	ldrb	r3, [r3, r2]
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d101      	bne.n	800bd84 <HAL_I2S_Receive_DMA+0x30>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e09e      	b.n	800bec2 <HAL_I2S_Receive_DMA+0x16e>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2234      	movs	r2, #52	@ 0x34
 800bd88:	2101      	movs	r1, #1
 800bd8a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2235      	movs	r2, #53	@ 0x35
 800bd90:	5c9b      	ldrb	r3, [r3, r2]
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d005      	beq.n	800bda4 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2234      	movs	r2, #52	@ 0x34
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800bda0:	2302      	movs	r3, #2
 800bda2:	e08e      	b.n	800bec2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2235      	movs	r2, #53	@ 0x35
 800bda8:	2104      	movs	r1, #4
 800bdaa:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	2207      	movs	r2, #7
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d002      	beq.n	800bdd0 <HAL_I2S_Receive_DMA+0x7c>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	d10c      	bne.n	800bdea <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800bdd0:	1dbb      	adds	r3, r7, #6
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	18db      	adds	r3, r3, r3
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800bddc:	1dbb      	adds	r3, r7, #6
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	18db      	adds	r3, r3, r3
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bde8:	e007      	b.n	800bdfa <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	1dba      	adds	r2, r7, #6
 800bdee:	8812      	ldrh	r2, [r2, #0]
 800bdf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1dba      	adds	r2, r7, #6
 800bdf6:	8812      	ldrh	r2, [r2, #0]
 800bdf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfe:	4a33      	ldr	r2, [pc, #204]	@ (800becc <HAL_I2S_Receive_DMA+0x178>)
 800be00:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be06:	4a32      	ldr	r2, [pc, #200]	@ (800bed0 <HAL_I2S_Receive_DMA+0x17c>)
 800be08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be0e:	4a31      	ldr	r2, [pc, #196]	@ (800bed4 <HAL_I2S_Receive_DMA+0x180>)
 800be10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69da      	ldr	r2, [r3, #28]
 800be18:	23c0      	movs	r3, #192	@ 0xc0
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	401a      	ands	r2, r3
 800be1e:	23c0      	movs	r3, #192	@ 0xc0
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	429a      	cmp	r2, r3
 800be24:	d10a      	bne.n	800be3c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800be26:	2300      	movs	r3, #0
 800be28:	613b      	str	r3, [r7, #16]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	613b      	str	r3, [r7, #16]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	613b      	str	r3, [r7, #16]
 800be3a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	330c      	adds	r3, #12
 800be46:	0019      	movs	r1, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be4c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be52:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800be54:	f7fd f9e2 	bl	800921c <HAL_DMA_Start_IT>
 800be58:	1e03      	subs	r3, r0, #0
 800be5a:	d00f      	beq.n	800be7c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be60:	2208      	movs	r2, #8
 800be62:	431a      	orrs	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2235      	movs	r2, #53	@ 0x35
 800be6c:	2101      	movs	r1, #1
 800be6e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2234      	movs	r2, #52	@ 0x34
 800be74:	2100      	movs	r1, #0
 800be76:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e022      	b.n	800bec2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	69da      	ldr	r2, [r3, #28]
 800be82:	2380      	movs	r3, #128	@ 0x80
 800be84:	00db      	lsls	r3, r3, #3
 800be86:	4013      	ands	r3, r2
 800be88:	d108      	bne.n	800be9c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	69da      	ldr	r2, [r3, #28]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2180      	movs	r1, #128	@ 0x80
 800be96:	00c9      	lsls	r1, r1, #3
 800be98:	430a      	orrs	r2, r1
 800be9a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	4013      	ands	r3, r2
 800bea6:	d107      	bne.n	800beb8 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685a      	ldr	r2, [r3, #4]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2101      	movs	r1, #1
 800beb4:	430a      	orrs	r2, r1
 800beb6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2234      	movs	r2, #52	@ 0x34
 800bebc:	2100      	movs	r1, #0
 800bebe:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	0018      	movs	r0, r3
 800bec4:	46bd      	mov	sp, r7
 800bec6:	b006      	add	sp, #24
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	46c0      	nop			@ (mov r8, r8)
 800becc:	0800c0d5 	.word	0x0800c0d5
 800bed0:	0800c091 	.word	0x0800c091
 800bed4:	0800c0f3 	.word	0x0800c0f3

0800bed8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bee0:	2317      	movs	r3, #23
 800bee2:	18fb      	adds	r3, r7, r3
 800bee4:	2200      	movs	r2, #0
 800bee6:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	2380      	movs	r3, #128	@ 0x80
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d003      	beq.n	800befc <HAL_I2S_DMAStop+0x24>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d158      	bne.n	800bfae <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d010      	beq.n	800bf26 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf08:	0018      	movs	r0, r3
 800bf0a:	f7fd f9ed 	bl	80092e8 <HAL_DMA_Abort>
 800bf0e:	1e03      	subs	r3, r0, #0
 800bf10:	d009      	beq.n	800bf26 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf16:	2208      	movs	r2, #8
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800bf1e:	2317      	movs	r3, #23
 800bf20:	18fb      	adds	r3, r7, r3
 800bf22:	2201      	movs	r2, #1
 800bf24:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	2364      	movs	r3, #100	@ 0x64
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	2102      	movs	r1, #2
 800bf2e:	f000 f907 	bl	800c140 <I2S_WaitFlagStateUntilTimeout>
 800bf32:	1e03      	subs	r3, r0, #0
 800bf34:	d00d      	beq.n	800bf52 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	431a      	orrs	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2235      	movs	r2, #53	@ 0x35
 800bf46:	2101      	movs	r1, #1
 800bf48:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800bf4a:	2317      	movs	r3, #23
 800bf4c:	18fb      	adds	r3, r7, r3
 800bf4e:	2201      	movs	r2, #1
 800bf50:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	2364      	movs	r3, #100	@ 0x64
 800bf56:	2200      	movs	r2, #0
 800bf58:	2180      	movs	r1, #128	@ 0x80
 800bf5a:	f000 f8f1 	bl	800c140 <I2S_WaitFlagStateUntilTimeout>
 800bf5e:	1e03      	subs	r3, r0, #0
 800bf60:	d00d      	beq.n	800bf7e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf66:	2201      	movs	r2, #1
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2235      	movs	r2, #53	@ 0x35
 800bf72:	2101      	movs	r1, #1
 800bf74:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800bf76:	2317      	movs	r3, #23
 800bf78:	18fb      	adds	r3, r7, r3
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	69da      	ldr	r2, [r3, #28]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4938      	ldr	r1, [pc, #224]	@ (800c06c <HAL_I2S_DMAStop+0x194>)
 800bf8a:	400a      	ands	r2, r1
 800bf8c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800bf8e:	2300      	movs	r3, #0
 800bf90:	613b      	str	r3, [r7, #16]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	613b      	str	r3, [r7, #16]
 800bf9a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2102      	movs	r1, #2
 800bfa8:	438a      	bics	r2, r1
 800bfaa:	605a      	str	r2, [r3, #4]
 800bfac:	e053      	b.n	800c056 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	23c0      	movs	r3, #192	@ 0xc0
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d005      	beq.n	800bfc6 <HAL_I2S_DMAStop+0xee>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	2380      	movs	r3, #128	@ 0x80
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d147      	bne.n	800c056 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d010      	beq.n	800bff0 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	f7fd f988 	bl	80092e8 <HAL_DMA_Abort>
 800bfd8:	1e03      	subs	r3, r0, #0
 800bfda:	d009      	beq.n	800bff0 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe0:	2208      	movs	r2, #8
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800bfe8:	2317      	movs	r3, #23
 800bfea:	18fb      	adds	r3, r7, r3
 800bfec:	2201      	movs	r2, #1
 800bfee:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	69da      	ldr	r2, [r3, #28]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	491c      	ldr	r1, [pc, #112]	@ (800c06c <HAL_I2S_DMAStop+0x194>)
 800bffc:	400a      	ands	r2, r1
 800bffe:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c000:	2300      	movs	r3, #0
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2101      	movs	r1, #1
 800c022:	438a      	bics	r2, r1
 800c024:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	2380      	movs	r3, #128	@ 0x80
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	429a      	cmp	r2, r3
 800c030:	d10e      	bne.n	800c050 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c036:	2240      	movs	r2, #64	@ 0x40
 800c038:	431a      	orrs	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2235      	movs	r2, #53	@ 0x35
 800c042:	2101      	movs	r1, #1
 800c044:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800c046:	2317      	movs	r3, #23
 800c048:	18fb      	adds	r3, r7, r3
 800c04a:	2201      	movs	r2, #1
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	e002      	b.n	800c056 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2235      	movs	r2, #53	@ 0x35
 800c05a:	2101      	movs	r1, #1
 800c05c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800c05e:	2317      	movs	r3, #23
 800c060:	18fb      	adds	r3, r7, r3
 800c062:	781b      	ldrb	r3, [r3, #0]
}
 800c064:	0018      	movs	r0, r3
 800c066:	46bd      	mov	sp, r7
 800c068:	b006      	add	sp, #24
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	fffffbff 	.word	0xfffffbff

0800c070 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c078:	46c0      	nop			@ (mov r8, r8)
 800c07a:	46bd      	mov	sp, r7
 800c07c:	b002      	add	sp, #8
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800c088:	46c0      	nop			@ (mov r8, r8)
 800c08a:	46bd      	mov	sp, r7
 800c08c:	b002      	add	sp, #8
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c09c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10e      	bne.n	800c0c4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	438a      	bics	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2235      	movs	r2, #53	@ 0x35
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f7f9 fed4 	bl	8005e74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c0cc:	46c0      	nop			@ (mov r8, r8)
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b004      	add	sp, #16
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	f7ff ffc3 	bl	800c070 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b004      	add	sp, #16
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0fe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2103      	movs	r1, #3
 800c10c:	438a      	bics	r2, r1
 800c10e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2235      	movs	r2, #53	@ 0x35
 800c120:	2101      	movs	r1, #1
 800c122:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c128:	2208      	movs	r2, #8
 800c12a:	431a      	orrs	r2, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	0018      	movs	r0, r3
 800c134:	f7ff ffa4 	bl	800c080 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c138:	46c0      	nop			@ (mov r8, r8)
 800c13a:	46bd      	mov	sp, r7
 800c13c:	b004      	add	sp, #16
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	603b      	str	r3, [r7, #0]
 800c14c:	1dfb      	adds	r3, r7, #7
 800c14e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800c150:	f7fc fb04 	bl	800875c <HAL_GetTick>
 800c154:	0003      	movs	r3, r0
 800c156:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c158:	e017      	b.n	800c18a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	3301      	adds	r3, #1
 800c15e:	d014      	beq.n	800c18a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800c160:	f7fc fafc 	bl	800875c <HAL_GetTick>
 800c164:	0002      	movs	r2, r0
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d902      	bls.n	800c176 <I2S_WaitFlagStateUntilTimeout+0x36>
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d109      	bne.n	800c18a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2235      	movs	r2, #53	@ 0x35
 800c17a:	2101      	movs	r1, #1
 800c17c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2234      	movs	r2, #52	@ 0x34
 800c182:	2100      	movs	r1, #0
 800c184:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c186:	2303      	movs	r3, #3
 800c188:	e00f      	b.n	800c1aa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	4013      	ands	r3, r2
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	425a      	negs	r2, r3
 800c19a:	4153      	adcs	r3, r2
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	001a      	movs	r2, r3
 800c1a0:	1dfb      	adds	r3, r7, #7
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d1d8      	bne.n	800c15a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	0018      	movs	r0, r3
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	b006      	add	sp, #24
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1b6:	b08b      	sub	sp, #44	@ 0x2c
 800c1b8:	af06      	add	r7, sp, #24
 800c1ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e0f0      	b.n	800c3a8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a79      	ldr	r2, [pc, #484]	@ (800c3b0 <HAL_PCD_Init+0x1fc>)
 800c1ca:	5c9b      	ldrb	r3, [r3, r2]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d108      	bne.n	800c1e4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	23aa      	movs	r3, #170	@ 0xaa
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	2100      	movs	r1, #0
 800c1da:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	0018      	movs	r0, r3
 800c1e0:	f7fb fe56 	bl	8007e90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a72      	ldr	r2, [pc, #456]	@ (800c3b0 <HAL_PCD_Init+0x1fc>)
 800c1e8:	2103      	movs	r1, #3
 800c1ea:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	0018      	movs	r0, r3
 800c1f2:	f003 f893 	bl	800f31c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1f6:	230f      	movs	r3, #15
 800c1f8:	18fb      	adds	r3, r7, r3
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	e049      	b.n	800c294 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c200:	200f      	movs	r0, #15
 800c202:	183b      	adds	r3, r7, r0
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	0013      	movs	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	189b      	adds	r3, r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	18cb      	adds	r3, r1, r3
 800c214:	3301      	adds	r3, #1
 800c216:	2201      	movs	r2, #1
 800c218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c21a:	183b      	adds	r3, r7, r0
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	1c5a      	adds	r2, r3, #1
 800c222:	0013      	movs	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	189b      	adds	r3, r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	183a      	adds	r2, r7, r0
 800c22c:	7812      	ldrb	r2, [r2, #0]
 800c22e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c230:	183b      	adds	r3, r7, r0
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	0013      	movs	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	189b      	adds	r3, r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	18cb      	adds	r3, r1, r3
 800c242:	3303      	adds	r3, #3
 800c244:	2200      	movs	r2, #0
 800c246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c248:	183b      	adds	r3, r7, r0
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	0013      	movs	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	189b      	adds	r3, r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	18cb      	adds	r3, r1, r3
 800c258:	3338      	adds	r3, #56	@ 0x38
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c25e:	183b      	adds	r3, r7, r0
 800c260:	781a      	ldrb	r2, [r3, #0]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	0013      	movs	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	189b      	adds	r3, r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	18cb      	adds	r3, r1, r3
 800c26e:	333c      	adds	r3, #60	@ 0x3c
 800c270:	2200      	movs	r2, #0
 800c272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c274:	183b      	adds	r3, r7, r0
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	0013      	movs	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	189b      	adds	r3, r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	18cb      	adds	r3, r1, r3
 800c284:	3340      	adds	r3, #64	@ 0x40
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c28a:	183b      	adds	r3, r7, r0
 800c28c:	781a      	ldrb	r2, [r3, #0]
 800c28e:	183b      	adds	r3, r7, r0
 800c290:	3201      	adds	r2, #1
 800c292:	701a      	strb	r2, [r3, #0]
 800c294:	210f      	movs	r1, #15
 800c296:	187b      	adds	r3, r7, r1
 800c298:	781a      	ldrb	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d3ae      	bcc.n	800c200 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2a2:	187b      	adds	r3, r7, r1
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
 800c2a8:	e056      	b.n	800c358 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c2aa:	240f      	movs	r4, #15
 800c2ac:	193b      	adds	r3, r7, r4
 800c2ae:	781a      	ldrb	r2, [r3, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	236a      	movs	r3, #106	@ 0x6a
 800c2b4:	33ff      	adds	r3, #255	@ 0xff
 800c2b6:	0019      	movs	r1, r3
 800c2b8:	0013      	movs	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	189b      	adds	r3, r3, r2
 800c2be:	00db      	lsls	r3, r3, #3
 800c2c0:	18c3      	adds	r3, r0, r3
 800c2c2:	185b      	adds	r3, r3, r1
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c2c8:	193b      	adds	r3, r7, r4
 800c2ca:	781a      	ldrb	r2, [r3, #0]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	23b4      	movs	r3, #180	@ 0xb4
 800c2d0:	0059      	lsls	r1, r3, #1
 800c2d2:	0013      	movs	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	189b      	adds	r3, r3, r2
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	18c3      	adds	r3, r0, r3
 800c2dc:	185b      	adds	r3, r3, r1
 800c2de:	193a      	adds	r2, r7, r4
 800c2e0:	7812      	ldrb	r2, [r2, #0]
 800c2e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c2e4:	193b      	adds	r3, r7, r4
 800c2e6:	781a      	ldrb	r2, [r3, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	236c      	movs	r3, #108	@ 0x6c
 800c2ec:	33ff      	adds	r3, #255	@ 0xff
 800c2ee:	0019      	movs	r1, r3
 800c2f0:	0013      	movs	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	189b      	adds	r3, r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	18c3      	adds	r3, r0, r3
 800c2fa:	185b      	adds	r3, r3, r1
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c300:	193b      	adds	r3, r7, r4
 800c302:	781a      	ldrb	r2, [r3, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	23bc      	movs	r3, #188	@ 0xbc
 800c308:	0059      	lsls	r1, r3, #1
 800c30a:	0013      	movs	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	189b      	adds	r3, r3, r2
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	18c3      	adds	r3, r0, r3
 800c314:	185b      	adds	r3, r3, r1
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c31a:	193b      	adds	r3, r7, r4
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	23be      	movs	r3, #190	@ 0xbe
 800c322:	0059      	lsls	r1, r3, #1
 800c324:	0013      	movs	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	189b      	adds	r3, r3, r2
 800c32a:	00db      	lsls	r3, r3, #3
 800c32c:	18c3      	adds	r3, r0, r3
 800c32e:	185b      	adds	r3, r3, r1
 800c330:	2200      	movs	r2, #0
 800c332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c334:	193b      	adds	r3, r7, r4
 800c336:	781a      	ldrb	r2, [r3, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	23c0      	movs	r3, #192	@ 0xc0
 800c33c:	0059      	lsls	r1, r3, #1
 800c33e:	0013      	movs	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	189b      	adds	r3, r3, r2
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	18c3      	adds	r3, r0, r3
 800c348:	185b      	adds	r3, r3, r1
 800c34a:	2200      	movs	r2, #0
 800c34c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c34e:	193b      	adds	r3, r7, r4
 800c350:	781a      	ldrb	r2, [r3, #0]
 800c352:	193b      	adds	r3, r7, r4
 800c354:	3201      	adds	r2, #1
 800c356:	701a      	strb	r2, [r3, #0]
 800c358:	230f      	movs	r3, #15
 800c35a:	18fb      	adds	r3, r7, r3
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	429a      	cmp	r2, r3
 800c364:	d3a1      	bcc.n	800c2aa <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	466a      	mov	r2, sp
 800c36e:	0011      	movs	r1, r2
 800c370:	001a      	movs	r2, r3
 800c372:	3210      	adds	r2, #16
 800c374:	ca70      	ldmia	r2!, {r4, r5, r6}
 800c376:	c170      	stmia	r1!, {r4, r5, r6}
 800c378:	ca30      	ldmia	r2!, {r4, r5}
 800c37a:	c130      	stmia	r1!, {r4, r5}
 800c37c:	6859      	ldr	r1, [r3, #4]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	f002 ffe5 	bl	800f350 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2224      	movs	r2, #36	@ 0x24
 800c38a:	2100      	movs	r1, #0
 800c38c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a07      	ldr	r2, [pc, #28]	@ (800c3b0 <HAL_PCD_Init+0x1fc>)
 800c392:	2101      	movs	r1, #1
 800c394:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d103      	bne.n	800c3a6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	f000 f807 	bl	800c3b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b005      	add	sp, #20
 800c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b0:	000002a9 	.word	0x000002a9

0800c3b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	23ba      	movs	r3, #186	@ 0xba
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	23b8      	movs	r3, #184	@ 0xb8
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2254      	movs	r2, #84	@ 0x54
 800c3da:	5a9b      	ldrh	r3, [r3, r2]
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	2201      	movs	r2, #1
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	b299      	uxth	r1, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2254      	movs	r2, #84	@ 0x54
 800c3e8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2254      	movs	r2, #84	@ 0x54
 800c3ee:	5a9b      	ldrh	r3, [r3, r2]
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	b299      	uxth	r1, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2254      	movs	r2, #84	@ 0x54
 800c3fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	0018      	movs	r0, r3
 800c402:	46bd      	mov	sp, r7
 800c404:	b004      	add	sp, #16
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c408:	b5b0      	push	{r4, r5, r7, lr}
 800c40a:	b08a      	sub	sp, #40	@ 0x28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d102      	bne.n	800c41c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	f000 fbbf 	bl	800cb9a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c41c:	4bc9      	ldr	r3, [pc, #804]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	220c      	movs	r2, #12
 800c422:	4013      	ands	r3, r2
 800c424:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c426:	4bc7      	ldr	r3, [pc, #796]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	2380      	movs	r3, #128	@ 0x80
 800c42c:	025b      	lsls	r3, r3, #9
 800c42e:	4013      	ands	r3, r2
 800c430:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2201      	movs	r2, #1
 800c438:	4013      	ands	r3, r2
 800c43a:	d100      	bne.n	800c43e <HAL_RCC_OscConfig+0x36>
 800c43c:	e07e      	b.n	800c53c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	2b08      	cmp	r3, #8
 800c442:	d007      	beq.n	800c454 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	2b0c      	cmp	r3, #12
 800c448:	d112      	bne.n	800c470 <HAL_RCC_OscConfig+0x68>
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	2380      	movs	r3, #128	@ 0x80
 800c44e:	025b      	lsls	r3, r3, #9
 800c450:	429a      	cmp	r2, r3
 800c452:	d10d      	bne.n	800c470 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c454:	4bbb      	ldr	r3, [pc, #748]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	2380      	movs	r3, #128	@ 0x80
 800c45a:	029b      	lsls	r3, r3, #10
 800c45c:	4013      	ands	r3, r2
 800c45e:	d100      	bne.n	800c462 <HAL_RCC_OscConfig+0x5a>
 800c460:	e06b      	b.n	800c53a <HAL_RCC_OscConfig+0x132>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d167      	bne.n	800c53a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	f000 fb95 	bl	800cb9a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	2380      	movs	r3, #128	@ 0x80
 800c476:	025b      	lsls	r3, r3, #9
 800c478:	429a      	cmp	r2, r3
 800c47a:	d107      	bne.n	800c48c <HAL_RCC_OscConfig+0x84>
 800c47c:	4bb1      	ldr	r3, [pc, #708]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	4bb0      	ldr	r3, [pc, #704]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c482:	2180      	movs	r1, #128	@ 0x80
 800c484:	0249      	lsls	r1, r1, #9
 800c486:	430a      	orrs	r2, r1
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	e027      	b.n	800c4dc <HAL_RCC_OscConfig+0xd4>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685a      	ldr	r2, [r3, #4]
 800c490:	23a0      	movs	r3, #160	@ 0xa0
 800c492:	02db      	lsls	r3, r3, #11
 800c494:	429a      	cmp	r2, r3
 800c496:	d10e      	bne.n	800c4b6 <HAL_RCC_OscConfig+0xae>
 800c498:	4baa      	ldr	r3, [pc, #680]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	4ba9      	ldr	r3, [pc, #676]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c49e:	2180      	movs	r1, #128	@ 0x80
 800c4a0:	02c9      	lsls	r1, r1, #11
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	4ba7      	ldr	r3, [pc, #668]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	4ba6      	ldr	r3, [pc, #664]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c4ac:	2180      	movs	r1, #128	@ 0x80
 800c4ae:	0249      	lsls	r1, r1, #9
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	e012      	b.n	800c4dc <HAL_RCC_OscConfig+0xd4>
 800c4b6:	4ba3      	ldr	r3, [pc, #652]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	4ba2      	ldr	r3, [pc, #648]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c4bc:	49a2      	ldr	r1, [pc, #648]	@ (800c748 <HAL_RCC_OscConfig+0x340>)
 800c4be:	400a      	ands	r2, r1
 800c4c0:	601a      	str	r2, [r3, #0]
 800c4c2:	4ba0      	ldr	r3, [pc, #640]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	2380      	movs	r3, #128	@ 0x80
 800c4c8:	025b      	lsls	r3, r3, #9
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	4b9c      	ldr	r3, [pc, #624]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	4b9b      	ldr	r3, [pc, #620]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c4d6:	499d      	ldr	r1, [pc, #628]	@ (800c74c <HAL_RCC_OscConfig+0x344>)
 800c4d8:	400a      	ands	r2, r1
 800c4da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d015      	beq.n	800c510 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4e4:	f7fc f93a 	bl	800875c <HAL_GetTick>
 800c4e8:	0003      	movs	r3, r0
 800c4ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c4ec:	e009      	b.n	800c502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c4ee:	f7fc f935 	bl	800875c <HAL_GetTick>
 800c4f2:	0002      	movs	r2, r0
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	2b64      	cmp	r3, #100	@ 0x64
 800c4fa:	d902      	bls.n	800c502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	f000 fb4c 	bl	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c502:	4b90      	ldr	r3, [pc, #576]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	2380      	movs	r3, #128	@ 0x80
 800c508:	029b      	lsls	r3, r3, #10
 800c50a:	4013      	ands	r3, r2
 800c50c:	d0ef      	beq.n	800c4ee <HAL_RCC_OscConfig+0xe6>
 800c50e:	e015      	b.n	800c53c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c510:	f7fc f924 	bl	800875c <HAL_GetTick>
 800c514:	0003      	movs	r3, r0
 800c516:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c518:	e008      	b.n	800c52c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c51a:	f7fc f91f 	bl	800875c <HAL_GetTick>
 800c51e:	0002      	movs	r2, r0
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	1ad3      	subs	r3, r2, r3
 800c524:	2b64      	cmp	r3, #100	@ 0x64
 800c526:	d901      	bls.n	800c52c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800c528:	2303      	movs	r3, #3
 800c52a:	e336      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c52c:	4b85      	ldr	r3, [pc, #532]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	2380      	movs	r3, #128	@ 0x80
 800c532:	029b      	lsls	r3, r3, #10
 800c534:	4013      	ands	r3, r2
 800c536:	d1f0      	bne.n	800c51a <HAL_RCC_OscConfig+0x112>
 800c538:	e000      	b.n	800c53c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c53a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2202      	movs	r2, #2
 800c542:	4013      	ands	r3, r2
 800c544:	d100      	bne.n	800c548 <HAL_RCC_OscConfig+0x140>
 800c546:	e099      	b.n	800c67c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800c54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c550:	2220      	movs	r2, #32
 800c552:	4013      	ands	r3, r2
 800c554:	d009      	beq.n	800c56a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800c556:	4b7b      	ldr	r3, [pc, #492]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	4b7a      	ldr	r3, [pc, #488]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c55c:	2120      	movs	r1, #32
 800c55e:	430a      	orrs	r2, r1
 800c560:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800c562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c564:	2220      	movs	r2, #32
 800c566:	4393      	bics	r3, r2
 800c568:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	2b04      	cmp	r3, #4
 800c56e:	d005      	beq.n	800c57c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	2b0c      	cmp	r3, #12
 800c574:	d13e      	bne.n	800c5f4 <HAL_RCC_OscConfig+0x1ec>
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d13b      	bne.n	800c5f4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800c57c:	4b71      	ldr	r3, [pc, #452]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2204      	movs	r2, #4
 800c582:	4013      	ands	r3, r2
 800c584:	d004      	beq.n	800c590 <HAL_RCC_OscConfig+0x188>
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	e304      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c590:	4b6c      	ldr	r3, [pc, #432]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	4a6e      	ldr	r2, [pc, #440]	@ (800c750 <HAL_RCC_OscConfig+0x348>)
 800c596:	4013      	ands	r3, r2
 800c598:	0019      	movs	r1, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	021a      	lsls	r2, r3, #8
 800c5a0:	4b68      	ldr	r3, [pc, #416]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800c5a6:	4b67      	ldr	r3, [pc, #412]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2209      	movs	r2, #9
 800c5ac:	4393      	bics	r3, r2
 800c5ae:	0019      	movs	r1, r3
 800c5b0:	4b64      	ldr	r3, [pc, #400]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c5b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5b4:	430a      	orrs	r2, r1
 800c5b6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5b8:	f000 fc42 	bl	800ce40 <HAL_RCC_GetSysClockFreq>
 800c5bc:	0001      	movs	r1, r0
 800c5be:	4b61      	ldr	r3, [pc, #388]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	091b      	lsrs	r3, r3, #4
 800c5c4:	220f      	movs	r2, #15
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	4a62      	ldr	r2, [pc, #392]	@ (800c754 <HAL_RCC_OscConfig+0x34c>)
 800c5ca:	5cd3      	ldrb	r3, [r2, r3]
 800c5cc:	000a      	movs	r2, r1
 800c5ce:	40da      	lsrs	r2, r3
 800c5d0:	4b61      	ldr	r3, [pc, #388]	@ (800c758 <HAL_RCC_OscConfig+0x350>)
 800c5d2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800c5d4:	4b61      	ldr	r3, [pc, #388]	@ (800c75c <HAL_RCC_OscConfig+0x354>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2513      	movs	r5, #19
 800c5da:	197c      	adds	r4, r7, r5
 800c5dc:	0018      	movs	r0, r3
 800c5de:	f7fc f877 	bl	80086d0 <HAL_InitTick>
 800c5e2:	0003      	movs	r3, r0
 800c5e4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800c5e6:	197b      	adds	r3, r7, r5
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d046      	beq.n	800c67c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800c5ee:	197b      	adds	r3, r7, r5
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	e2d2      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d027      	beq.n	800c64a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800c5fa:	4b52      	ldr	r3, [pc, #328]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2209      	movs	r2, #9
 800c600:	4393      	bics	r3, r2
 800c602:	0019      	movs	r1, r3
 800c604:	4b4f      	ldr	r3, [pc, #316]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c608:	430a      	orrs	r2, r1
 800c60a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c60c:	f7fc f8a6 	bl	800875c <HAL_GetTick>
 800c610:	0003      	movs	r3, r0
 800c612:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c614:	e008      	b.n	800c628 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c616:	f7fc f8a1 	bl	800875c <HAL_GetTick>
 800c61a:	0002      	movs	r2, r0
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	2b02      	cmp	r3, #2
 800c622:	d901      	bls.n	800c628 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800c624:	2303      	movs	r3, #3
 800c626:	e2b8      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c628:	4b46      	ldr	r3, [pc, #280]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2204      	movs	r2, #4
 800c62e:	4013      	ands	r3, r2
 800c630:	d0f1      	beq.n	800c616 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c632:	4b44      	ldr	r3, [pc, #272]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	4a46      	ldr	r2, [pc, #280]	@ (800c750 <HAL_RCC_OscConfig+0x348>)
 800c638:	4013      	ands	r3, r2
 800c63a:	0019      	movs	r1, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	021a      	lsls	r2, r3, #8
 800c642:	4b40      	ldr	r3, [pc, #256]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c644:	430a      	orrs	r2, r1
 800c646:	605a      	str	r2, [r3, #4]
 800c648:	e018      	b.n	800c67c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c64a:	4b3e      	ldr	r3, [pc, #248]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	4b3d      	ldr	r3, [pc, #244]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c650:	2101      	movs	r1, #1
 800c652:	438a      	bics	r2, r1
 800c654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c656:	f7fc f881 	bl	800875c <HAL_GetTick>
 800c65a:	0003      	movs	r3, r0
 800c65c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c65e:	e008      	b.n	800c672 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c660:	f7fc f87c 	bl	800875c <HAL_GetTick>
 800c664:	0002      	movs	r2, r0
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d901      	bls.n	800c672 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e293      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c672:	4b34      	ldr	r3, [pc, #208]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2204      	movs	r2, #4
 800c678:	4013      	ands	r3, r2
 800c67a:	d1f1      	bne.n	800c660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2210      	movs	r2, #16
 800c682:	4013      	ands	r3, r2
 800c684:	d100      	bne.n	800c688 <HAL_RCC_OscConfig+0x280>
 800c686:	e0a2      	b.n	800c7ce <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d140      	bne.n	800c710 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c68e:	4b2d      	ldr	r3, [pc, #180]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	2380      	movs	r3, #128	@ 0x80
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4013      	ands	r3, r2
 800c698:	d005      	beq.n	800c6a6 <HAL_RCC_OscConfig+0x29e>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	69db      	ldr	r3, [r3, #28]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e279      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c6a6:	4b27      	ldr	r3, [pc, #156]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	4a2d      	ldr	r2, [pc, #180]	@ (800c760 <HAL_RCC_OscConfig+0x358>)
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	0019      	movs	r1, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6b4:	4b23      	ldr	r3, [pc, #140]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c6b6:	430a      	orrs	r2, r1
 800c6b8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c6ba:	4b22      	ldr	r3, [pc, #136]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	021b      	lsls	r3, r3, #8
 800c6c0:	0a19      	lsrs	r1, r3, #8
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	061a      	lsls	r2, r3, #24
 800c6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d2:	0b5b      	lsrs	r3, r3, #13
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	2280      	movs	r2, #128	@ 0x80
 800c6d8:	0212      	lsls	r2, r2, #8
 800c6da:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800c6dc:	4b19      	ldr	r3, [pc, #100]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	091b      	lsrs	r3, r3, #4
 800c6e2:	210f      	movs	r1, #15
 800c6e4:	400b      	ands	r3, r1
 800c6e6:	491b      	ldr	r1, [pc, #108]	@ (800c754 <HAL_RCC_OscConfig+0x34c>)
 800c6e8:	5ccb      	ldrb	r3, [r1, r3]
 800c6ea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800c6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c758 <HAL_RCC_OscConfig+0x350>)
 800c6ee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800c6f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c75c <HAL_RCC_OscConfig+0x354>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2513      	movs	r5, #19
 800c6f6:	197c      	adds	r4, r7, r5
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f7fb ffe9 	bl	80086d0 <HAL_InitTick>
 800c6fe:	0003      	movs	r3, r0
 800c700:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800c702:	197b      	adds	r3, r7, r5
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d061      	beq.n	800c7ce <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800c70a:	197b      	adds	r3, r7, r5
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	e244      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d040      	beq.n	800c79a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c718:	4b0a      	ldr	r3, [pc, #40]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	4b09      	ldr	r3, [pc, #36]	@ (800c744 <HAL_RCC_OscConfig+0x33c>)
 800c71e:	2180      	movs	r1, #128	@ 0x80
 800c720:	0049      	lsls	r1, r1, #1
 800c722:	430a      	orrs	r2, r1
 800c724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c726:	f7fc f819 	bl	800875c <HAL_GetTick>
 800c72a:	0003      	movs	r3, r0
 800c72c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c72e:	e019      	b.n	800c764 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c730:	f7fc f814 	bl	800875c <HAL_GetTick>
 800c734:	0002      	movs	r2, r0
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	d912      	bls.n	800c764 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800c73e:	2303      	movs	r3, #3
 800c740:	e22b      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
 800c742:	46c0      	nop			@ (mov r8, r8)
 800c744:	40021000 	.word	0x40021000
 800c748:	fffeffff 	.word	0xfffeffff
 800c74c:	fffbffff 	.word	0xfffbffff
 800c750:	ffffe0ff 	.word	0xffffe0ff
 800c754:	0801314c 	.word	0x0801314c
 800c758:	20000130 	.word	0x20000130
 800c75c:	20000144 	.word	0x20000144
 800c760:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c764:	4bca      	ldr	r3, [pc, #808]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	2380      	movs	r3, #128	@ 0x80
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4013      	ands	r3, r2
 800c76e:	d0df      	beq.n	800c730 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c770:	4bc7      	ldr	r3, [pc, #796]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	4ac7      	ldr	r2, [pc, #796]	@ (800ca94 <HAL_RCC_OscConfig+0x68c>)
 800c776:	4013      	ands	r3, r2
 800c778:	0019      	movs	r1, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c77e:	4bc4      	ldr	r3, [pc, #784]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c780:	430a      	orrs	r2, r1
 800c782:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c784:	4bc2      	ldr	r3, [pc, #776]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	021b      	lsls	r3, r3, #8
 800c78a:	0a19      	lsrs	r1, r3, #8
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
 800c790:	061a      	lsls	r2, r3, #24
 800c792:	4bbf      	ldr	r3, [pc, #764]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c794:	430a      	orrs	r2, r1
 800c796:	605a      	str	r2, [r3, #4]
 800c798:	e019      	b.n	800c7ce <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c79a:	4bbd      	ldr	r3, [pc, #756]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	4bbc      	ldr	r3, [pc, #752]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c7a0:	49bd      	ldr	r1, [pc, #756]	@ (800ca98 <HAL_RCC_OscConfig+0x690>)
 800c7a2:	400a      	ands	r2, r1
 800c7a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7a6:	f7fb ffd9 	bl	800875c <HAL_GetTick>
 800c7aa:	0003      	movs	r3, r0
 800c7ac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800c7ae:	e008      	b.n	800c7c2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c7b0:	f7fb ffd4 	bl	800875c <HAL_GetTick>
 800c7b4:	0002      	movs	r2, r0
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d901      	bls.n	800c7c2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800c7be:	2303      	movs	r3, #3
 800c7c0:	e1eb      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800c7c2:	4bb3      	ldr	r3, [pc, #716]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	2380      	movs	r3, #128	@ 0x80
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	d1f0      	bne.n	800c7b0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2208      	movs	r2, #8
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	d036      	beq.n	800c846 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d019      	beq.n	800c814 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c7e0:	4bab      	ldr	r3, [pc, #684]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c7e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7e4:	4baa      	ldr	r3, [pc, #680]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	430a      	orrs	r2, r1
 800c7ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c7ec:	f7fb ffb6 	bl	800875c <HAL_GetTick>
 800c7f0:	0003      	movs	r3, r0
 800c7f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c7f4:	e008      	b.n	800c808 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c7f6:	f7fb ffb1 	bl	800875c <HAL_GetTick>
 800c7fa:	0002      	movs	r2, r0
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	2b02      	cmp	r3, #2
 800c802:	d901      	bls.n	800c808 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800c804:	2303      	movs	r3, #3
 800c806:	e1c8      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c808:	4ba1      	ldr	r3, [pc, #644]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c80a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c80c:	2202      	movs	r2, #2
 800c80e:	4013      	ands	r3, r2
 800c810:	d0f1      	beq.n	800c7f6 <HAL_RCC_OscConfig+0x3ee>
 800c812:	e018      	b.n	800c846 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c814:	4b9e      	ldr	r3, [pc, #632]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c818:	4b9d      	ldr	r3, [pc, #628]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c81a:	2101      	movs	r1, #1
 800c81c:	438a      	bics	r2, r1
 800c81e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c820:	f7fb ff9c 	bl	800875c <HAL_GetTick>
 800c824:	0003      	movs	r3, r0
 800c826:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c828:	e008      	b.n	800c83c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c82a:	f7fb ff97 	bl	800875c <HAL_GetTick>
 800c82e:	0002      	movs	r2, r0
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	2b02      	cmp	r3, #2
 800c836:	d901      	bls.n	800c83c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800c838:	2303      	movs	r3, #3
 800c83a:	e1ae      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c83c:	4b94      	ldr	r3, [pc, #592]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c840:	2202      	movs	r2, #2
 800c842:	4013      	ands	r3, r2
 800c844:	d1f1      	bne.n	800c82a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2204      	movs	r2, #4
 800c84c:	4013      	ands	r3, r2
 800c84e:	d100      	bne.n	800c852 <HAL_RCC_OscConfig+0x44a>
 800c850:	e0ae      	b.n	800c9b0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c852:	2023      	movs	r0, #35	@ 0x23
 800c854:	183b      	adds	r3, r7, r0
 800c856:	2200      	movs	r2, #0
 800c858:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c85a:	4b8d      	ldr	r3, [pc, #564]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c85c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c85e:	2380      	movs	r3, #128	@ 0x80
 800c860:	055b      	lsls	r3, r3, #21
 800c862:	4013      	ands	r3, r2
 800c864:	d109      	bne.n	800c87a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c866:	4b8a      	ldr	r3, [pc, #552]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c86a:	4b89      	ldr	r3, [pc, #548]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c86c:	2180      	movs	r1, #128	@ 0x80
 800c86e:	0549      	lsls	r1, r1, #21
 800c870:	430a      	orrs	r2, r1
 800c872:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800c874:	183b      	adds	r3, r7, r0
 800c876:	2201      	movs	r2, #1
 800c878:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c87a:	4b88      	ldr	r3, [pc, #544]	@ (800ca9c <HAL_RCC_OscConfig+0x694>)
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	2380      	movs	r3, #128	@ 0x80
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	4013      	ands	r3, r2
 800c884:	d11a      	bne.n	800c8bc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c886:	4b85      	ldr	r3, [pc, #532]	@ (800ca9c <HAL_RCC_OscConfig+0x694>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	4b84      	ldr	r3, [pc, #528]	@ (800ca9c <HAL_RCC_OscConfig+0x694>)
 800c88c:	2180      	movs	r1, #128	@ 0x80
 800c88e:	0049      	lsls	r1, r1, #1
 800c890:	430a      	orrs	r2, r1
 800c892:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c894:	f7fb ff62 	bl	800875c <HAL_GetTick>
 800c898:	0003      	movs	r3, r0
 800c89a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c89c:	e008      	b.n	800c8b0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c89e:	f7fb ff5d 	bl	800875c <HAL_GetTick>
 800c8a2:	0002      	movs	r2, r0
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	2b64      	cmp	r3, #100	@ 0x64
 800c8aa:	d901      	bls.n	800c8b0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e174      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8b0:	4b7a      	ldr	r3, [pc, #488]	@ (800ca9c <HAL_RCC_OscConfig+0x694>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	2380      	movs	r3, #128	@ 0x80
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	d0f0      	beq.n	800c89e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	2380      	movs	r3, #128	@ 0x80
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d107      	bne.n	800c8d8 <HAL_RCC_OscConfig+0x4d0>
 800c8c8:	4b71      	ldr	r3, [pc, #452]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c8ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8cc:	4b70      	ldr	r3, [pc, #448]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c8ce:	2180      	movs	r1, #128	@ 0x80
 800c8d0:	0049      	lsls	r1, r1, #1
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	651a      	str	r2, [r3, #80]	@ 0x50
 800c8d6:	e031      	b.n	800c93c <HAL_RCC_OscConfig+0x534>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10c      	bne.n	800c8fa <HAL_RCC_OscConfig+0x4f2>
 800c8e0:	4b6b      	ldr	r3, [pc, #428]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c8e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8e4:	4b6a      	ldr	r3, [pc, #424]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c8e6:	496c      	ldr	r1, [pc, #432]	@ (800ca98 <HAL_RCC_OscConfig+0x690>)
 800c8e8:	400a      	ands	r2, r1
 800c8ea:	651a      	str	r2, [r3, #80]	@ 0x50
 800c8ec:	4b68      	ldr	r3, [pc, #416]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c8ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c8f0:	4b67      	ldr	r3, [pc, #412]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c8f2:	496b      	ldr	r1, [pc, #428]	@ (800caa0 <HAL_RCC_OscConfig+0x698>)
 800c8f4:	400a      	ands	r2, r1
 800c8f6:	651a      	str	r2, [r3, #80]	@ 0x50
 800c8f8:	e020      	b.n	800c93c <HAL_RCC_OscConfig+0x534>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	689a      	ldr	r2, [r3, #8]
 800c8fe:	23a0      	movs	r3, #160	@ 0xa0
 800c900:	00db      	lsls	r3, r3, #3
 800c902:	429a      	cmp	r2, r3
 800c904:	d10e      	bne.n	800c924 <HAL_RCC_OscConfig+0x51c>
 800c906:	4b62      	ldr	r3, [pc, #392]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c90a:	4b61      	ldr	r3, [pc, #388]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c90c:	2180      	movs	r1, #128	@ 0x80
 800c90e:	00c9      	lsls	r1, r1, #3
 800c910:	430a      	orrs	r2, r1
 800c912:	651a      	str	r2, [r3, #80]	@ 0x50
 800c914:	4b5e      	ldr	r3, [pc, #376]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c918:	4b5d      	ldr	r3, [pc, #372]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c91a:	2180      	movs	r1, #128	@ 0x80
 800c91c:	0049      	lsls	r1, r1, #1
 800c91e:	430a      	orrs	r2, r1
 800c920:	651a      	str	r2, [r3, #80]	@ 0x50
 800c922:	e00b      	b.n	800c93c <HAL_RCC_OscConfig+0x534>
 800c924:	4b5a      	ldr	r3, [pc, #360]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c926:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c928:	4b59      	ldr	r3, [pc, #356]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c92a:	495b      	ldr	r1, [pc, #364]	@ (800ca98 <HAL_RCC_OscConfig+0x690>)
 800c92c:	400a      	ands	r2, r1
 800c92e:	651a      	str	r2, [r3, #80]	@ 0x50
 800c930:	4b57      	ldr	r3, [pc, #348]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c934:	4b56      	ldr	r3, [pc, #344]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c936:	495a      	ldr	r1, [pc, #360]	@ (800caa0 <HAL_RCC_OscConfig+0x698>)
 800c938:	400a      	ands	r2, r1
 800c93a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d015      	beq.n	800c970 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c944:	f7fb ff0a 	bl	800875c <HAL_GetTick>
 800c948:	0003      	movs	r3, r0
 800c94a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c94c:	e009      	b.n	800c962 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c94e:	f7fb ff05 	bl	800875c <HAL_GetTick>
 800c952:	0002      	movs	r2, r0
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	4a52      	ldr	r2, [pc, #328]	@ (800caa4 <HAL_RCC_OscConfig+0x69c>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d901      	bls.n	800c962 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800c95e:	2303      	movs	r3, #3
 800c960:	e11b      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c962:	4b4b      	ldr	r3, [pc, #300]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c966:	2380      	movs	r3, #128	@ 0x80
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4013      	ands	r3, r2
 800c96c:	d0ef      	beq.n	800c94e <HAL_RCC_OscConfig+0x546>
 800c96e:	e014      	b.n	800c99a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c970:	f7fb fef4 	bl	800875c <HAL_GetTick>
 800c974:	0003      	movs	r3, r0
 800c976:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c978:	e009      	b.n	800c98e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c97a:	f7fb feef 	bl	800875c <HAL_GetTick>
 800c97e:	0002      	movs	r2, r0
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	4a47      	ldr	r2, [pc, #284]	@ (800caa4 <HAL_RCC_OscConfig+0x69c>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d901      	bls.n	800c98e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800c98a:	2303      	movs	r3, #3
 800c98c:	e105      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c98e:	4b40      	ldr	r3, [pc, #256]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c992:	2380      	movs	r3, #128	@ 0x80
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4013      	ands	r3, r2
 800c998:	d1ef      	bne.n	800c97a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c99a:	2323      	movs	r3, #35	@ 0x23
 800c99c:	18fb      	adds	r3, r7, r3
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d105      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9a4:	4b3a      	ldr	r3, [pc, #232]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c9a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9a8:	4b39      	ldr	r3, [pc, #228]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c9aa:	493f      	ldr	r1, [pc, #252]	@ (800caa8 <HAL_RCC_OscConfig+0x6a0>)
 800c9ac:	400a      	ands	r2, r1
 800c9ae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	d049      	beq.n	800ca4e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d026      	beq.n	800ca10 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800c9c2:	4b33      	ldr	r3, [pc, #204]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c9c4:	689a      	ldr	r2, [r3, #8]
 800c9c6:	4b32      	ldr	r3, [pc, #200]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	430a      	orrs	r2, r1
 800c9cc:	609a      	str	r2, [r3, #8]
 800c9ce:	4b30      	ldr	r3, [pc, #192]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c9d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9d2:	4b2f      	ldr	r3, [pc, #188]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800c9d4:	2101      	movs	r1, #1
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	635a      	str	r2, [r3, #52]	@ 0x34
 800c9da:	4b34      	ldr	r3, [pc, #208]	@ (800caac <HAL_RCC_OscConfig+0x6a4>)
 800c9dc:	6a1a      	ldr	r2, [r3, #32]
 800c9de:	4b33      	ldr	r3, [pc, #204]	@ (800caac <HAL_RCC_OscConfig+0x6a4>)
 800c9e0:	2180      	movs	r1, #128	@ 0x80
 800c9e2:	0189      	lsls	r1, r1, #6
 800c9e4:	430a      	orrs	r2, r1
 800c9e6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9e8:	f7fb feb8 	bl	800875c <HAL_GetTick>
 800c9ec:	0003      	movs	r3, r0
 800c9ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c9f0:	e008      	b.n	800ca04 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9f2:	f7fb feb3 	bl	800875c <HAL_GetTick>
 800c9f6:	0002      	movs	r2, r0
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d901      	bls.n	800ca04 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e0ca      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ca04:	4b22      	ldr	r3, [pc, #136]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	2202      	movs	r2, #2
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	d0f1      	beq.n	800c9f2 <HAL_RCC_OscConfig+0x5ea>
 800ca0e:	e01e      	b.n	800ca4e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800ca10:	4b1f      	ldr	r3, [pc, #124]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	4b1e      	ldr	r3, [pc, #120]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800ca16:	2101      	movs	r1, #1
 800ca18:	438a      	bics	r2, r1
 800ca1a:	609a      	str	r2, [r3, #8]
 800ca1c:	4b23      	ldr	r3, [pc, #140]	@ (800caac <HAL_RCC_OscConfig+0x6a4>)
 800ca1e:	6a1a      	ldr	r2, [r3, #32]
 800ca20:	4b22      	ldr	r3, [pc, #136]	@ (800caac <HAL_RCC_OscConfig+0x6a4>)
 800ca22:	4923      	ldr	r1, [pc, #140]	@ (800cab0 <HAL_RCC_OscConfig+0x6a8>)
 800ca24:	400a      	ands	r2, r1
 800ca26:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca28:	f7fb fe98 	bl	800875c <HAL_GetTick>
 800ca2c:	0003      	movs	r3, r0
 800ca2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ca30:	e008      	b.n	800ca44 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ca32:	f7fb fe93 	bl	800875c <HAL_GetTick>
 800ca36:	0002      	movs	r2, r0
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d901      	bls.n	800ca44 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e0aa      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ca44:	4b12      	ldr	r3, [pc, #72]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	2202      	movs	r2, #2
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	d1f1      	bne.n	800ca32 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d100      	bne.n	800ca58 <HAL_RCC_OscConfig+0x650>
 800ca56:	e09f      	b.n	800cb98 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	2b0c      	cmp	r3, #12
 800ca5c:	d100      	bne.n	800ca60 <HAL_RCC_OscConfig+0x658>
 800ca5e:	e078      	b.n	800cb52 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d159      	bne.n	800cb1c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca68:	4b09      	ldr	r3, [pc, #36]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	4b08      	ldr	r3, [pc, #32]	@ (800ca90 <HAL_RCC_OscConfig+0x688>)
 800ca6e:	4911      	ldr	r1, [pc, #68]	@ (800cab4 <HAL_RCC_OscConfig+0x6ac>)
 800ca70:	400a      	ands	r2, r1
 800ca72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca74:	f7fb fe72 	bl	800875c <HAL_GetTick>
 800ca78:	0003      	movs	r3, r0
 800ca7a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ca7c:	e01c      	b.n	800cab8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca7e:	f7fb fe6d 	bl	800875c <HAL_GetTick>
 800ca82:	0002      	movs	r2, r0
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	d915      	bls.n	800cab8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e084      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
 800ca90:	40021000 	.word	0x40021000
 800ca94:	ffff1fff 	.word	0xffff1fff
 800ca98:	fffffeff 	.word	0xfffffeff
 800ca9c:	40007000 	.word	0x40007000
 800caa0:	fffffbff 	.word	0xfffffbff
 800caa4:	00001388 	.word	0x00001388
 800caa8:	efffffff 	.word	0xefffffff
 800caac:	40010000 	.word	0x40010000
 800cab0:	ffffdfff 	.word	0xffffdfff
 800cab4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800cab8:	4b3a      	ldr	r3, [pc, #232]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	2380      	movs	r3, #128	@ 0x80
 800cabe:	049b      	lsls	r3, r3, #18
 800cac0:	4013      	ands	r3, r2
 800cac2:	d1dc      	bne.n	800ca7e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cac4:	4b37      	ldr	r3, [pc, #220]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	4a37      	ldr	r2, [pc, #220]	@ (800cba8 <HAL_RCC_OscConfig+0x7a0>)
 800caca:	4013      	ands	r3, r2
 800cacc:	0019      	movs	r1, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad6:	431a      	orrs	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cadc:	431a      	orrs	r2, r3
 800cade:	4b31      	ldr	r3, [pc, #196]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cae0:	430a      	orrs	r2, r1
 800cae2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cae4:	4b2f      	ldr	r3, [pc, #188]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	4b2e      	ldr	r3, [pc, #184]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800caea:	2180      	movs	r1, #128	@ 0x80
 800caec:	0449      	lsls	r1, r1, #17
 800caee:	430a      	orrs	r2, r1
 800caf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800caf2:	f7fb fe33 	bl	800875c <HAL_GetTick>
 800caf6:	0003      	movs	r3, r0
 800caf8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800cafa:	e008      	b.n	800cb0e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cafc:	f7fb fe2e 	bl	800875c <HAL_GetTick>
 800cb00:	0002      	movs	r2, r0
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d901      	bls.n	800cb0e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e045      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800cb0e:	4b25      	ldr	r3, [pc, #148]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	2380      	movs	r3, #128	@ 0x80
 800cb14:	049b      	lsls	r3, r3, #18
 800cb16:	4013      	ands	r3, r2
 800cb18:	d0f0      	beq.n	800cafc <HAL_RCC_OscConfig+0x6f4>
 800cb1a:	e03d      	b.n	800cb98 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb1c:	4b21      	ldr	r3, [pc, #132]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	4b20      	ldr	r3, [pc, #128]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cb22:	4922      	ldr	r1, [pc, #136]	@ (800cbac <HAL_RCC_OscConfig+0x7a4>)
 800cb24:	400a      	ands	r2, r1
 800cb26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb28:	f7fb fe18 	bl	800875c <HAL_GetTick>
 800cb2c:	0003      	movs	r3, r0
 800cb2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800cb30:	e008      	b.n	800cb44 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb32:	f7fb fe13 	bl	800875c <HAL_GetTick>
 800cb36:	0002      	movs	r2, r0
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d901      	bls.n	800cb44 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e02a      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800cb44:	4b17      	ldr	r3, [pc, #92]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	2380      	movs	r3, #128	@ 0x80
 800cb4a:	049b      	lsls	r3, r3, #18
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	d1f0      	bne.n	800cb32 <HAL_RCC_OscConfig+0x72a>
 800cb50:	e022      	b.n	800cb98 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d101      	bne.n	800cb5e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e01d      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cb5e:	4b11      	ldr	r3, [pc, #68]	@ (800cba4 <HAL_RCC_OscConfig+0x79c>)
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb64:	69ba      	ldr	r2, [r7, #24]
 800cb66:	2380      	movs	r3, #128	@ 0x80
 800cb68:	025b      	lsls	r3, r3, #9
 800cb6a:	401a      	ands	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d10f      	bne.n	800cb94 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	23f0      	movs	r3, #240	@ 0xf0
 800cb78:	039b      	lsls	r3, r3, #14
 800cb7a:	401a      	ands	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d107      	bne.n	800cb94 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800cb84:	69ba      	ldr	r2, [r7, #24]
 800cb86:	23c0      	movs	r3, #192	@ 0xc0
 800cb88:	041b      	lsls	r3, r3, #16
 800cb8a:	401a      	ands	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d001      	beq.n	800cb98 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e000      	b.n	800cb9a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	0018      	movs	r0, r3
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	b00a      	add	sp, #40	@ 0x28
 800cba0:	bdb0      	pop	{r4, r5, r7, pc}
 800cba2:	46c0      	nop			@ (mov r8, r8)
 800cba4:	40021000 	.word	0x40021000
 800cba8:	ff02ffff 	.word	0xff02ffff
 800cbac:	feffffff 	.word	0xfeffffff

0800cbb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cbb0:	b5b0      	push	{r4, r5, r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d101      	bne.n	800cbc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e128      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cbc4:	4b96      	ldr	r3, [pc, #600]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	4013      	ands	r3, r2
 800cbcc:	683a      	ldr	r2, [r7, #0]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d91e      	bls.n	800cc10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbd2:	4b93      	ldr	r3, [pc, #588]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4393      	bics	r3, r2
 800cbda:	0019      	movs	r1, r3
 800cbdc:	4b90      	ldr	r3, [pc, #576]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cbe4:	f7fb fdba 	bl	800875c <HAL_GetTick>
 800cbe8:	0003      	movs	r3, r0
 800cbea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbec:	e009      	b.n	800cc02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbee:	f7fb fdb5 	bl	800875c <HAL_GetTick>
 800cbf2:	0002      	movs	r2, r0
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	4a8a      	ldr	r2, [pc, #552]	@ (800ce24 <HAL_RCC_ClockConfig+0x274>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d901      	bls.n	800cc02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e109      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc02:	4b87      	ldr	r3, [pc, #540]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2201      	movs	r2, #1
 800cc08:	4013      	ands	r3, r2
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d1ee      	bne.n	800cbee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2202      	movs	r2, #2
 800cc16:	4013      	ands	r3, r2
 800cc18:	d009      	beq.n	800cc2e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc1a:	4b83      	ldr	r3, [pc, #524]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	22f0      	movs	r2, #240	@ 0xf0
 800cc20:	4393      	bics	r3, r2
 800cc22:	0019      	movs	r1, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	689a      	ldr	r2, [r3, #8]
 800cc28:	4b7f      	ldr	r3, [pc, #508]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cc2a:	430a      	orrs	r2, r1
 800cc2c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2201      	movs	r2, #1
 800cc34:	4013      	ands	r3, r2
 800cc36:	d100      	bne.n	800cc3a <HAL_RCC_ClockConfig+0x8a>
 800cc38:	e089      	b.n	800cd4e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d107      	bne.n	800cc52 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc42:	4b79      	ldr	r3, [pc, #484]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	2380      	movs	r3, #128	@ 0x80
 800cc48:	029b      	lsls	r3, r3, #10
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	d120      	bne.n	800cc90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e0e1      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d107      	bne.n	800cc6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cc5a:	4b73      	ldr	r3, [pc, #460]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	2380      	movs	r3, #128	@ 0x80
 800cc60:	049b      	lsls	r3, r3, #18
 800cc62:	4013      	ands	r3, r2
 800cc64:	d114      	bne.n	800cc90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e0d5      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d106      	bne.n	800cc80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc72:	4b6d      	ldr	r3, [pc, #436]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2204      	movs	r2, #4
 800cc78:	4013      	ands	r3, r2
 800cc7a:	d109      	bne.n	800cc90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e0ca      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cc80:	4b69      	ldr	r3, [pc, #420]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	2380      	movs	r3, #128	@ 0x80
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4013      	ands	r3, r2
 800cc8a:	d101      	bne.n	800cc90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e0c2      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc90:	4b65      	ldr	r3, [pc, #404]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	2203      	movs	r2, #3
 800cc96:	4393      	bics	r3, r2
 800cc98:	0019      	movs	r1, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	4b62      	ldr	r3, [pc, #392]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cca0:	430a      	orrs	r2, r1
 800cca2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cca4:	f7fb fd5a 	bl	800875c <HAL_GetTick>
 800cca8:	0003      	movs	r3, r0
 800ccaa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d111      	bne.n	800ccd8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ccb4:	e009      	b.n	800ccca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ccb6:	f7fb fd51 	bl	800875c <HAL_GetTick>
 800ccba:	0002      	movs	r2, r0
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	4a58      	ldr	r2, [pc, #352]	@ (800ce24 <HAL_RCC_ClockConfig+0x274>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d901      	bls.n	800ccca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	e0a5      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800ccca:	4b57      	ldr	r3, [pc, #348]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	220c      	movs	r2, #12
 800ccd0:	4013      	ands	r3, r2
 800ccd2:	2b08      	cmp	r3, #8
 800ccd4:	d1ef      	bne.n	800ccb6 <HAL_RCC_ClockConfig+0x106>
 800ccd6:	e03a      	b.n	800cd4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	2b03      	cmp	r3, #3
 800ccde:	d111      	bne.n	800cd04 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cce0:	e009      	b.n	800ccf6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cce2:	f7fb fd3b 	bl	800875c <HAL_GetTick>
 800cce6:	0002      	movs	r2, r0
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	4a4d      	ldr	r2, [pc, #308]	@ (800ce24 <HAL_RCC_ClockConfig+0x274>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e08f      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ccf6:	4b4c      	ldr	r3, [pc, #304]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	220c      	movs	r2, #12
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	2b0c      	cmp	r3, #12
 800cd00:	d1ef      	bne.n	800cce2 <HAL_RCC_ClockConfig+0x132>
 800cd02:	e024      	b.n	800cd4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d11b      	bne.n	800cd44 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cd0c:	e009      	b.n	800cd22 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd0e:	f7fb fd25 	bl	800875c <HAL_GetTick>
 800cd12:	0002      	movs	r2, r0
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	4a42      	ldr	r2, [pc, #264]	@ (800ce24 <HAL_RCC_ClockConfig+0x274>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d901      	bls.n	800cd22 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e079      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cd22:	4b41      	ldr	r3, [pc, #260]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	220c      	movs	r2, #12
 800cd28:	4013      	ands	r3, r2
 800cd2a:	2b04      	cmp	r3, #4
 800cd2c:	d1ef      	bne.n	800cd0e <HAL_RCC_ClockConfig+0x15e>
 800cd2e:	e00e      	b.n	800cd4e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd30:	f7fb fd14 	bl	800875c <HAL_GetTick>
 800cd34:	0002      	movs	r2, r0
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	4a3a      	ldr	r2, [pc, #232]	@ (800ce24 <HAL_RCC_ClockConfig+0x274>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d901      	bls.n	800cd44 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e068      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800cd44:	4b38      	ldr	r3, [pc, #224]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	220c      	movs	r2, #12
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	d1f0      	bne.n	800cd30 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd4e:	4b34      	ldr	r3, [pc, #208]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2201      	movs	r2, #1
 800cd54:	4013      	ands	r3, r2
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d21e      	bcs.n	800cd9a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd5c:	4b30      	ldr	r3, [pc, #192]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2201      	movs	r2, #1
 800cd62:	4393      	bics	r3, r2
 800cd64:	0019      	movs	r1, r3
 800cd66:	4b2e      	ldr	r3, [pc, #184]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cd6e:	f7fb fcf5 	bl	800875c <HAL_GetTick>
 800cd72:	0003      	movs	r3, r0
 800cd74:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd76:	e009      	b.n	800cd8c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd78:	f7fb fcf0 	bl	800875c <HAL_GetTick>
 800cd7c:	0002      	movs	r2, r0
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	1ad3      	subs	r3, r2, r3
 800cd82:	4a28      	ldr	r2, [pc, #160]	@ (800ce24 <HAL_RCC_ClockConfig+0x274>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d901      	bls.n	800cd8c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e044      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd8c:	4b24      	ldr	r3, [pc, #144]	@ (800ce20 <HAL_RCC_ClockConfig+0x270>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2201      	movs	r2, #1
 800cd92:	4013      	ands	r3, r2
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d1ee      	bne.n	800cd78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2204      	movs	r2, #4
 800cda0:	4013      	ands	r3, r2
 800cda2:	d009      	beq.n	800cdb8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cda4:	4b20      	ldr	r3, [pc, #128]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	4a20      	ldr	r2, [pc, #128]	@ (800ce2c <HAL_RCC_ClockConfig+0x27c>)
 800cdaa:	4013      	ands	r3, r2
 800cdac:	0019      	movs	r1, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68da      	ldr	r2, [r3, #12]
 800cdb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2208      	movs	r2, #8
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	d00a      	beq.n	800cdd8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cdc2:	4b19      	ldr	r3, [pc, #100]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	4a1a      	ldr	r2, [pc, #104]	@ (800ce30 <HAL_RCC_ClockConfig+0x280>)
 800cdc8:	4013      	ands	r3, r2
 800cdca:	0019      	movs	r1, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	00da      	lsls	r2, r3, #3
 800cdd2:	4b15      	ldr	r3, [pc, #84]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cdd8:	f000 f832 	bl	800ce40 <HAL_RCC_GetSysClockFreq>
 800cddc:	0001      	movs	r1, r0
 800cdde:	4b12      	ldr	r3, [pc, #72]	@ (800ce28 <HAL_RCC_ClockConfig+0x278>)
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	091b      	lsrs	r3, r3, #4
 800cde4:	220f      	movs	r2, #15
 800cde6:	4013      	ands	r3, r2
 800cde8:	4a12      	ldr	r2, [pc, #72]	@ (800ce34 <HAL_RCC_ClockConfig+0x284>)
 800cdea:	5cd3      	ldrb	r3, [r2, r3]
 800cdec:	000a      	movs	r2, r1
 800cdee:	40da      	lsrs	r2, r3
 800cdf0:	4b11      	ldr	r3, [pc, #68]	@ (800ce38 <HAL_RCC_ClockConfig+0x288>)
 800cdf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cdf4:	4b11      	ldr	r3, [pc, #68]	@ (800ce3c <HAL_RCC_ClockConfig+0x28c>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	250b      	movs	r5, #11
 800cdfa:	197c      	adds	r4, r7, r5
 800cdfc:	0018      	movs	r0, r3
 800cdfe:	f7fb fc67 	bl	80086d0 <HAL_InitTick>
 800ce02:	0003      	movs	r3, r0
 800ce04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800ce06:	197b      	adds	r3, r7, r5
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800ce0e:	197b      	adds	r3, r7, r5
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	e000      	b.n	800ce16 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	0018      	movs	r0, r3
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	b004      	add	sp, #16
 800ce1c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce1e:	46c0      	nop			@ (mov r8, r8)
 800ce20:	40022000 	.word	0x40022000
 800ce24:	00001388 	.word	0x00001388
 800ce28:	40021000 	.word	0x40021000
 800ce2c:	fffff8ff 	.word	0xfffff8ff
 800ce30:	ffffc7ff 	.word	0xffffc7ff
 800ce34:	0801314c 	.word	0x0801314c
 800ce38:	20000130 	.word	0x20000130
 800ce3c:	20000144 	.word	0x20000144

0800ce40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce40:	b5b0      	push	{r4, r5, r7, lr}
 800ce42:	b08e      	sub	sp, #56	@ 0x38
 800ce44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800ce46:	4b4c      	ldr	r3, [pc, #304]	@ (800cf78 <HAL_RCC_GetSysClockFreq+0x138>)
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ce4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce4e:	230c      	movs	r3, #12
 800ce50:	4013      	ands	r3, r2
 800ce52:	2b0c      	cmp	r3, #12
 800ce54:	d014      	beq.n	800ce80 <HAL_RCC_GetSysClockFreq+0x40>
 800ce56:	d900      	bls.n	800ce5a <HAL_RCC_GetSysClockFreq+0x1a>
 800ce58:	e07b      	b.n	800cf52 <HAL_RCC_GetSysClockFreq+0x112>
 800ce5a:	2b04      	cmp	r3, #4
 800ce5c:	d002      	beq.n	800ce64 <HAL_RCC_GetSysClockFreq+0x24>
 800ce5e:	2b08      	cmp	r3, #8
 800ce60:	d00b      	beq.n	800ce7a <HAL_RCC_GetSysClockFreq+0x3a>
 800ce62:	e076      	b.n	800cf52 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800ce64:	4b44      	ldr	r3, [pc, #272]	@ (800cf78 <HAL_RCC_GetSysClockFreq+0x138>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2210      	movs	r2, #16
 800ce6a:	4013      	ands	r3, r2
 800ce6c:	d002      	beq.n	800ce74 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800ce6e:	4b43      	ldr	r3, [pc, #268]	@ (800cf7c <HAL_RCC_GetSysClockFreq+0x13c>)
 800ce70:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800ce72:	e07c      	b.n	800cf6e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800ce74:	4b42      	ldr	r3, [pc, #264]	@ (800cf80 <HAL_RCC_GetSysClockFreq+0x140>)
 800ce76:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ce78:	e079      	b.n	800cf6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ce7a:	4b42      	ldr	r3, [pc, #264]	@ (800cf84 <HAL_RCC_GetSysClockFreq+0x144>)
 800ce7c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ce7e:	e076      	b.n	800cf6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800ce80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce82:	0c9a      	lsrs	r2, r3, #18
 800ce84:	230f      	movs	r3, #15
 800ce86:	401a      	ands	r2, r3
 800ce88:	4b3f      	ldr	r3, [pc, #252]	@ (800cf88 <HAL_RCC_GetSysClockFreq+0x148>)
 800ce8a:	5c9b      	ldrb	r3, [r3, r2]
 800ce8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800ce8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce90:	0d9a      	lsrs	r2, r3, #22
 800ce92:	2303      	movs	r3, #3
 800ce94:	4013      	ands	r3, r2
 800ce96:	3301      	adds	r3, #1
 800ce98:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ce9a:	4b37      	ldr	r3, [pc, #220]	@ (800cf78 <HAL_RCC_GetSysClockFreq+0x138>)
 800ce9c:	68da      	ldr	r2, [r3, #12]
 800ce9e:	2380      	movs	r3, #128	@ 0x80
 800cea0:	025b      	lsls	r3, r3, #9
 800cea2:	4013      	ands	r3, r2
 800cea4:	d01a      	beq.n	800cedc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800cea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea8:	61bb      	str	r3, [r7, #24]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	61fb      	str	r3, [r7, #28]
 800ceae:	4a35      	ldr	r2, [pc, #212]	@ (800cf84 <HAL_RCC_GetSysClockFreq+0x144>)
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	69b8      	ldr	r0, [r7, #24]
 800ceb4:	69f9      	ldr	r1, [r7, #28]
 800ceb6:	f7f3 fb51 	bl	800055c <__aeabi_lmul>
 800ceba:	0002      	movs	r2, r0
 800cebc:	000b      	movs	r3, r1
 800cebe:	0010      	movs	r0, r2
 800cec0:	0019      	movs	r1, r3
 800cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec4:	613b      	str	r3, [r7, #16]
 800cec6:	2300      	movs	r3, #0
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	f7f3 fb25 	bl	800051c <__aeabi_uldivmod>
 800ced2:	0002      	movs	r2, r0
 800ced4:	000b      	movs	r3, r1
 800ced6:	0013      	movs	r3, r2
 800ced8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceda:	e037      	b.n	800cf4c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800cedc:	4b26      	ldr	r3, [pc, #152]	@ (800cf78 <HAL_RCC_GetSysClockFreq+0x138>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2210      	movs	r2, #16
 800cee2:	4013      	ands	r3, r2
 800cee4:	d01a      	beq.n	800cf1c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800cee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee8:	60bb      	str	r3, [r7, #8]
 800ceea:	2300      	movs	r3, #0
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	4a23      	ldr	r2, [pc, #140]	@ (800cf7c <HAL_RCC_GetSysClockFreq+0x13c>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	68b8      	ldr	r0, [r7, #8]
 800cef4:	68f9      	ldr	r1, [r7, #12]
 800cef6:	f7f3 fb31 	bl	800055c <__aeabi_lmul>
 800cefa:	0002      	movs	r2, r0
 800cefc:	000b      	movs	r3, r1
 800cefe:	0010      	movs	r0, r2
 800cf00:	0019      	movs	r1, r3
 800cf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf04:	603b      	str	r3, [r7, #0]
 800cf06:	2300      	movs	r3, #0
 800cf08:	607b      	str	r3, [r7, #4]
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f7f3 fb05 	bl	800051c <__aeabi_uldivmod>
 800cf12:	0002      	movs	r2, r0
 800cf14:	000b      	movs	r3, r1
 800cf16:	0013      	movs	r3, r2
 800cf18:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf1a:	e017      	b.n	800cf4c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800cf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1e:	0018      	movs	r0, r3
 800cf20:	2300      	movs	r3, #0
 800cf22:	0019      	movs	r1, r3
 800cf24:	4a16      	ldr	r2, [pc, #88]	@ (800cf80 <HAL_RCC_GetSysClockFreq+0x140>)
 800cf26:	2300      	movs	r3, #0
 800cf28:	f7f3 fb18 	bl	800055c <__aeabi_lmul>
 800cf2c:	0002      	movs	r2, r0
 800cf2e:	000b      	movs	r3, r1
 800cf30:	0010      	movs	r0, r2
 800cf32:	0019      	movs	r1, r3
 800cf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf36:	001c      	movs	r4, r3
 800cf38:	2300      	movs	r3, #0
 800cf3a:	001d      	movs	r5, r3
 800cf3c:	0022      	movs	r2, r4
 800cf3e:	002b      	movs	r3, r5
 800cf40:	f7f3 faec 	bl	800051c <__aeabi_uldivmod>
 800cf44:	0002      	movs	r2, r0
 800cf46:	000b      	movs	r3, r1
 800cf48:	0013      	movs	r3, r2
 800cf4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800cf4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cf50:	e00d      	b.n	800cf6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800cf52:	4b09      	ldr	r3, [pc, #36]	@ (800cf78 <HAL_RCC_GetSysClockFreq+0x138>)
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	0b5b      	lsrs	r3, r3, #13
 800cf58:	2207      	movs	r2, #7
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	3301      	adds	r3, #1
 800cf62:	2280      	movs	r2, #128	@ 0x80
 800cf64:	0212      	lsls	r2, r2, #8
 800cf66:	409a      	lsls	r2, r3
 800cf68:	0013      	movs	r3, r2
 800cf6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cf6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800cf70:	0018      	movs	r0, r3
 800cf72:	46bd      	mov	sp, r7
 800cf74:	b00e      	add	sp, #56	@ 0x38
 800cf76:	bdb0      	pop	{r4, r5, r7, pc}
 800cf78:	40021000 	.word	0x40021000
 800cf7c:	003d0900 	.word	0x003d0900
 800cf80:	00f42400 	.word	0x00f42400
 800cf84:	007a1200 	.word	0x007a1200
 800cf88:	08013164 	.word	0x08013164

0800cf8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf90:	4b02      	ldr	r3, [pc, #8]	@ (800cf9c <HAL_RCC_GetHCLKFreq+0x10>)
 800cf92:	681b      	ldr	r3, [r3, #0]
}
 800cf94:	0018      	movs	r0, r3
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	46c0      	nop			@ (mov r8, r8)
 800cf9c:	20000130 	.word	0x20000130

0800cfa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cfa4:	f7ff fff2 	bl	800cf8c <HAL_RCC_GetHCLKFreq>
 800cfa8:	0001      	movs	r1, r0
 800cfaa:	4b06      	ldr	r3, [pc, #24]	@ (800cfc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	0a1b      	lsrs	r3, r3, #8
 800cfb0:	2207      	movs	r2, #7
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	4a04      	ldr	r2, [pc, #16]	@ (800cfc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cfb6:	5cd3      	ldrb	r3, [r2, r3]
 800cfb8:	40d9      	lsrs	r1, r3
 800cfba:	000b      	movs	r3, r1
}
 800cfbc:	0018      	movs	r0, r3
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	46c0      	nop			@ (mov r8, r8)
 800cfc4:	40021000 	.word	0x40021000
 800cfc8:	0801315c 	.word	0x0801315c

0800cfcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cfd0:	f7ff ffdc 	bl	800cf8c <HAL_RCC_GetHCLKFreq>
 800cfd4:	0001      	movs	r1, r0
 800cfd6:	4b06      	ldr	r3, [pc, #24]	@ (800cff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	0adb      	lsrs	r3, r3, #11
 800cfdc:	2207      	movs	r2, #7
 800cfde:	4013      	ands	r3, r2
 800cfe0:	4a04      	ldr	r2, [pc, #16]	@ (800cff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cfe2:	5cd3      	ldrb	r3, [r2, r3]
 800cfe4:	40d9      	lsrs	r1, r3
 800cfe6:	000b      	movs	r3, r1
}
 800cfe8:	0018      	movs	r0, r3
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	46c0      	nop			@ (mov r8, r8)
 800cff0:	40021000 	.word	0x40021000
 800cff4:	0801315c 	.word	0x0801315c

0800cff8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800d000:	2017      	movs	r0, #23
 800d002:	183b      	adds	r3, r7, r0
 800d004:	2200      	movs	r2, #0
 800d006:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2220      	movs	r2, #32
 800d00e:	4013      	ands	r3, r2
 800d010:	d100      	bne.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800d012:	e0c7      	b.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d014:	4b9b      	ldr	r3, [pc, #620]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d018:	2380      	movs	r3, #128	@ 0x80
 800d01a:	055b      	lsls	r3, r3, #21
 800d01c:	4013      	ands	r3, r2
 800d01e:	d109      	bne.n	800d034 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d020:	4b98      	ldr	r3, [pc, #608]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d024:	4b97      	ldr	r3, [pc, #604]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d026:	2180      	movs	r1, #128	@ 0x80
 800d028:	0549      	lsls	r1, r1, #21
 800d02a:	430a      	orrs	r2, r1
 800d02c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800d02e:	183b      	adds	r3, r7, r0
 800d030:	2201      	movs	r2, #1
 800d032:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d034:	4b94      	ldr	r3, [pc, #592]	@ (800d288 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	2380      	movs	r3, #128	@ 0x80
 800d03a:	005b      	lsls	r3, r3, #1
 800d03c:	4013      	ands	r3, r2
 800d03e:	d11a      	bne.n	800d076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d040:	4b91      	ldr	r3, [pc, #580]	@ (800d288 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	4b90      	ldr	r3, [pc, #576]	@ (800d288 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d046:	2180      	movs	r1, #128	@ 0x80
 800d048:	0049      	lsls	r1, r1, #1
 800d04a:	430a      	orrs	r2, r1
 800d04c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d04e:	f7fb fb85 	bl	800875c <HAL_GetTick>
 800d052:	0003      	movs	r3, r0
 800d054:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d056:	e008      	b.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d058:	f7fb fb80 	bl	800875c <HAL_GetTick>
 800d05c:	0002      	movs	r2, r0
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b64      	cmp	r3, #100	@ 0x64
 800d064:	d901      	bls.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800d066:	2303      	movs	r3, #3
 800d068:	e107      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d06a:	4b87      	ldr	r3, [pc, #540]	@ (800d288 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	2380      	movs	r3, #128	@ 0x80
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	4013      	ands	r3, r2
 800d074:	d0f0      	beq.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800d076:	4b83      	ldr	r3, [pc, #524]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	23c0      	movs	r3, #192	@ 0xc0
 800d07c:	039b      	lsls	r3, r3, #14
 800d07e:	4013      	ands	r3, r2
 800d080:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	23c0      	movs	r3, #192	@ 0xc0
 800d088:	039b      	lsls	r3, r3, #14
 800d08a:	4013      	ands	r3, r2
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d013      	beq.n	800d0ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	23c0      	movs	r3, #192	@ 0xc0
 800d098:	029b      	lsls	r3, r3, #10
 800d09a:	401a      	ands	r2, r3
 800d09c:	23c0      	movs	r3, #192	@ 0xc0
 800d09e:	029b      	lsls	r3, r3, #10
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d10a      	bne.n	800d0ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0a4:	4b77      	ldr	r3, [pc, #476]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	2380      	movs	r3, #128	@ 0x80
 800d0aa:	029b      	lsls	r3, r3, #10
 800d0ac:	401a      	ands	r2, r3
 800d0ae:	2380      	movs	r3, #128	@ 0x80
 800d0b0:	029b      	lsls	r3, r3, #10
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d101      	bne.n	800d0ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e0df      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800d0ba:	4b72      	ldr	r3, [pc, #456]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0be:	23c0      	movs	r3, #192	@ 0xc0
 800d0c0:	029b      	lsls	r3, r3, #10
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d03b      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685a      	ldr	r2, [r3, #4]
 800d0d0:	23c0      	movs	r3, #192	@ 0xc0
 800d0d2:	029b      	lsls	r3, r3, #10
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d033      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	d02e      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d0e6:	4b67      	ldr	r3, [pc, #412]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0ea:	4a68      	ldr	r2, [pc, #416]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d0f0:	4b64      	ldr	r3, [pc, #400]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0f4:	4b63      	ldr	r3, [pc, #396]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0f6:	2180      	movs	r1, #128	@ 0x80
 800d0f8:	0309      	lsls	r1, r1, #12
 800d0fa:	430a      	orrs	r2, r1
 800d0fc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d0fe:	4b61      	ldr	r3, [pc, #388]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d102:	4b60      	ldr	r3, [pc, #384]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d104:	4962      	ldr	r1, [pc, #392]	@ (800d290 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800d106:	400a      	ands	r2, r1
 800d108:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800d10a:	4b5e      	ldr	r3, [pc, #376]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	2380      	movs	r3, #128	@ 0x80
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	4013      	ands	r3, r2
 800d118:	d014      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d11a:	f7fb fb1f 	bl	800875c <HAL_GetTick>
 800d11e:	0003      	movs	r3, r0
 800d120:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d122:	e009      	b.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d124:	f7fb fb1a 	bl	800875c <HAL_GetTick>
 800d128:	0002      	movs	r2, r0
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	4a59      	ldr	r2, [pc, #356]	@ (800d294 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d901      	bls.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800d134:	2303      	movs	r3, #3
 800d136:	e0a0      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d138:	4b52      	ldr	r3, [pc, #328]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d13a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d13c:	2380      	movs	r3, #128	@ 0x80
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4013      	ands	r3, r2
 800d142:	d0ef      	beq.n	800d124 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2220      	movs	r2, #32
 800d14a:	4013      	ands	r3, r2
 800d14c:	d01f      	beq.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685a      	ldr	r2, [r3, #4]
 800d152:	23c0      	movs	r3, #192	@ 0xc0
 800d154:	029b      	lsls	r3, r3, #10
 800d156:	401a      	ands	r2, r3
 800d158:	23c0      	movs	r3, #192	@ 0xc0
 800d15a:	029b      	lsls	r3, r3, #10
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d10c      	bne.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800d160:	4b48      	ldr	r3, [pc, #288]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a4c      	ldr	r2, [pc, #304]	@ (800d298 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800d166:	4013      	ands	r3, r2
 800d168:	0019      	movs	r1, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	23c0      	movs	r3, #192	@ 0xc0
 800d170:	039b      	lsls	r3, r3, #14
 800d172:	401a      	ands	r2, r3
 800d174:	4b43      	ldr	r3, [pc, #268]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d176:	430a      	orrs	r2, r1
 800d178:	601a      	str	r2, [r3, #0]
 800d17a:	4b42      	ldr	r3, [pc, #264]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d17c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	23c0      	movs	r3, #192	@ 0xc0
 800d184:	029b      	lsls	r3, r3, #10
 800d186:	401a      	ands	r2, r3
 800d188:	4b3e      	ldr	r3, [pc, #248]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d18a:	430a      	orrs	r2, r1
 800d18c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d18e:	2317      	movs	r3, #23
 800d190:	18fb      	adds	r3, r7, r3
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d105      	bne.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d198:	4b3a      	ldr	r3, [pc, #232]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d19a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d19c:	4b39      	ldr	r3, [pc, #228]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d19e:	493f      	ldr	r1, [pc, #252]	@ (800d29c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d1a0:	400a      	ands	r2, r1
 800d1a2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	d009      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d1ae:	4b35      	ldr	r3, [pc, #212]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d1b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1b2:	2203      	movs	r2, #3
 800d1b4:	4393      	bics	r3, r2
 800d1b6:	0019      	movs	r1, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689a      	ldr	r2, [r3, #8]
 800d1bc:	4b31      	ldr	r3, [pc, #196]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d1be:	430a      	orrs	r2, r1
 800d1c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2202      	movs	r2, #2
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	d009      	beq.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d1cc:	4b2d      	ldr	r3, [pc, #180]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d1ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1d0:	220c      	movs	r2, #12
 800d1d2:	4393      	bics	r3, r2
 800d1d4:	0019      	movs	r1, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	68da      	ldr	r2, [r3, #12]
 800d1da:	4b2a      	ldr	r3, [pc, #168]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2204      	movs	r2, #4
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	d009      	beq.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d1ea:	4b26      	ldr	r3, [pc, #152]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d1ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1ee:	4a2c      	ldr	r2, [pc, #176]	@ (800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	0019      	movs	r1, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	691a      	ldr	r2, [r3, #16]
 800d1f8:	4b22      	ldr	r3, [pc, #136]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2208      	movs	r2, #8
 800d204:	4013      	ands	r3, r2
 800d206:	d009      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d208:	4b1e      	ldr	r3, [pc, #120]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d20a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d20c:	4a25      	ldr	r2, [pc, #148]	@ (800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800d20e:	4013      	ands	r3, r2
 800d210:	0019      	movs	r1, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	695a      	ldr	r2, [r3, #20]
 800d216:	4b1b      	ldr	r3, [pc, #108]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d218:	430a      	orrs	r2, r1
 800d21a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	2380      	movs	r3, #128	@ 0x80
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	4013      	ands	r3, r2
 800d226:	d009      	beq.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d228:	4b16      	ldr	r3, [pc, #88]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d22a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d22c:	4a17      	ldr	r2, [pc, #92]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800d22e:	4013      	ands	r3, r2
 800d230:	0019      	movs	r1, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	699a      	ldr	r2, [r3, #24]
 800d236:	4b13      	ldr	r3, [pc, #76]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d238:	430a      	orrs	r2, r1
 800d23a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2240      	movs	r2, #64	@ 0x40
 800d242:	4013      	ands	r3, r2
 800d244:	d009      	beq.n	800d25a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d246:	4b0f      	ldr	r3, [pc, #60]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d24a:	4a17      	ldr	r2, [pc, #92]	@ (800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800d24c:	4013      	ands	r3, r2
 800d24e:	0019      	movs	r1, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a1a      	ldr	r2, [r3, #32]
 800d254:	4b0b      	ldr	r3, [pc, #44]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d256:	430a      	orrs	r2, r1
 800d258:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2280      	movs	r2, #128	@ 0x80
 800d260:	4013      	ands	r3, r2
 800d262:	d009      	beq.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800d264:	4b07      	ldr	r3, [pc, #28]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d268:	4a10      	ldr	r2, [pc, #64]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800d26a:	4013      	ands	r3, r2
 800d26c:	0019      	movs	r1, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	69da      	ldr	r2, [r3, #28]
 800d272:	4b04      	ldr	r3, [pc, #16]	@ (800d284 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d274:	430a      	orrs	r2, r1
 800d276:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	0018      	movs	r0, r3
 800d27c:	46bd      	mov	sp, r7
 800d27e:	b006      	add	sp, #24
 800d280:	bd80      	pop	{r7, pc}
 800d282:	46c0      	nop			@ (mov r8, r8)
 800d284:	40021000 	.word	0x40021000
 800d288:	40007000 	.word	0x40007000
 800d28c:	fffcffff 	.word	0xfffcffff
 800d290:	fff7ffff 	.word	0xfff7ffff
 800d294:	00001388 	.word	0x00001388
 800d298:	ffcfffff 	.word	0xffcfffff
 800d29c:	efffffff 	.word	0xefffffff
 800d2a0:	fffff3ff 	.word	0xfffff3ff
 800d2a4:	ffffcfff 	.word	0xffffcfff
 800d2a8:	fbffffff 	.word	0xfbffffff
 800d2ac:	fff3ffff 	.word	0xfff3ffff

0800d2b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d101      	bne.n	800d2c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e032      	b.n	800d328 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2239      	movs	r2, #57	@ 0x39
 800d2c6:	5c9b      	ldrb	r3, [r3, r2]
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d107      	bne.n	800d2de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2238      	movs	r2, #56	@ 0x38
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	0018      	movs	r0, r3
 800d2da:	f7fa fbc5 	bl	8007a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2239      	movs	r2, #57	@ 0x39
 800d2e2:	2102      	movs	r1, #2
 800d2e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	0019      	movs	r1, r3
 800d2f0:	0010      	movs	r0, r2
 800d2f2:	f000 f975 	bl	800d5e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	223e      	movs	r2, #62	@ 0x3e
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	223a      	movs	r2, #58	@ 0x3a
 800d302:	2101      	movs	r1, #1
 800d304:	5499      	strb	r1, [r3, r2]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	223b      	movs	r2, #59	@ 0x3b
 800d30a:	2101      	movs	r1, #1
 800d30c:	5499      	strb	r1, [r3, r2]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	223c      	movs	r2, #60	@ 0x3c
 800d312:	2101      	movs	r1, #1
 800d314:	5499      	strb	r1, [r3, r2]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	223d      	movs	r2, #61	@ 0x3d
 800d31a:	2101      	movs	r1, #1
 800d31c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2239      	movs	r2, #57	@ 0x39
 800d322:	2101      	movs	r1, #1
 800d324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d326:	2300      	movs	r3, #0
}
 800d328:	0018      	movs	r0, r3
 800d32a:	46bd      	mov	sp, r7
 800d32c:	b002      	add	sp, #8
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d108      	bne.n	800d352 <HAL_TIM_PWM_Start+0x22>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	223a      	movs	r2, #58	@ 0x3a
 800d344:	5c9b      	ldrb	r3, [r3, r2]
 800d346:	b2db      	uxtb	r3, r3
 800d348:	3b01      	subs	r3, #1
 800d34a:	1e5a      	subs	r2, r3, #1
 800d34c:	4193      	sbcs	r3, r2
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	e01f      	b.n	800d392 <HAL_TIM_PWM_Start+0x62>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b04      	cmp	r3, #4
 800d356:	d108      	bne.n	800d36a <HAL_TIM_PWM_Start+0x3a>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	223b      	movs	r2, #59	@ 0x3b
 800d35c:	5c9b      	ldrb	r3, [r3, r2]
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	3b01      	subs	r3, #1
 800d362:	1e5a      	subs	r2, r3, #1
 800d364:	4193      	sbcs	r3, r2
 800d366:	b2db      	uxtb	r3, r3
 800d368:	e013      	b.n	800d392 <HAL_TIM_PWM_Start+0x62>
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b08      	cmp	r3, #8
 800d36e:	d108      	bne.n	800d382 <HAL_TIM_PWM_Start+0x52>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	223c      	movs	r2, #60	@ 0x3c
 800d374:	5c9b      	ldrb	r3, [r3, r2]
 800d376:	b2db      	uxtb	r3, r3
 800d378:	3b01      	subs	r3, #1
 800d37a:	1e5a      	subs	r2, r3, #1
 800d37c:	4193      	sbcs	r3, r2
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	e007      	b.n	800d392 <HAL_TIM_PWM_Start+0x62>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	223d      	movs	r2, #61	@ 0x3d
 800d386:	5c9b      	ldrb	r3, [r3, r2]
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	3b01      	subs	r3, #1
 800d38c:	1e5a      	subs	r2, r3, #1
 800d38e:	4193      	sbcs	r3, r2
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e052      	b.n	800d440 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d104      	bne.n	800d3aa <HAL_TIM_PWM_Start+0x7a>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	223a      	movs	r2, #58	@ 0x3a
 800d3a4:	2102      	movs	r1, #2
 800d3a6:	5499      	strb	r1, [r3, r2]
 800d3a8:	e013      	b.n	800d3d2 <HAL_TIM_PWM_Start+0xa2>
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	2b04      	cmp	r3, #4
 800d3ae:	d104      	bne.n	800d3ba <HAL_TIM_PWM_Start+0x8a>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	223b      	movs	r2, #59	@ 0x3b
 800d3b4:	2102      	movs	r1, #2
 800d3b6:	5499      	strb	r1, [r3, r2]
 800d3b8:	e00b      	b.n	800d3d2 <HAL_TIM_PWM_Start+0xa2>
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2b08      	cmp	r3, #8
 800d3be:	d104      	bne.n	800d3ca <HAL_TIM_PWM_Start+0x9a>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	223c      	movs	r2, #60	@ 0x3c
 800d3c4:	2102      	movs	r1, #2
 800d3c6:	5499      	strb	r1, [r3, r2]
 800d3c8:	e003      	b.n	800d3d2 <HAL_TIM_PWM_Start+0xa2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	223d      	movs	r2, #61	@ 0x3d
 800d3ce:	2102      	movs	r1, #2
 800d3d0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	0018      	movs	r0, r3
 800d3dc:	f000 fa62 	bl	800d8a4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	2380      	movs	r3, #128	@ 0x80
 800d3e6:	05db      	lsls	r3, r3, #23
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d00e      	beq.n	800d40a <HAL_TIM_PWM_Start+0xda>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a15      	ldr	r2, [pc, #84]	@ (800d448 <HAL_TIM_PWM_Start+0x118>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d009      	beq.n	800d40a <HAL_TIM_PWM_Start+0xda>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a14      	ldr	r2, [pc, #80]	@ (800d44c <HAL_TIM_PWM_Start+0x11c>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d004      	beq.n	800d40a <HAL_TIM_PWM_Start+0xda>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a12      	ldr	r2, [pc, #72]	@ (800d450 <HAL_TIM_PWM_Start+0x120>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d111      	bne.n	800d42e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	2207      	movs	r2, #7
 800d412:	4013      	ands	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b06      	cmp	r3, #6
 800d41a:	d010      	beq.n	800d43e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2101      	movs	r1, #1
 800d428:	430a      	orrs	r2, r1
 800d42a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d42c:	e007      	b.n	800d43e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2101      	movs	r1, #1
 800d43a:	430a      	orrs	r2, r1
 800d43c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	0018      	movs	r0, r3
 800d442:	46bd      	mov	sp, r7
 800d444:	b004      	add	sp, #16
 800d446:	bd80      	pop	{r7, pc}
 800d448:	40000400 	.word	0x40000400
 800d44c:	40010800 	.word	0x40010800
 800d450:	40011400 	.word	0x40011400

0800d454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d460:	2317      	movs	r3, #23
 800d462:	18fb      	adds	r3, r7, r3
 800d464:	2200      	movs	r2, #0
 800d466:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2238      	movs	r2, #56	@ 0x38
 800d46c:	5c9b      	ldrb	r3, [r3, r2]
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d101      	bne.n	800d476 <HAL_TIM_PWM_ConfigChannel+0x22>
 800d472:	2302      	movs	r3, #2
 800d474:	e0ad      	b.n	800d5d2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2238      	movs	r2, #56	@ 0x38
 800d47a:	2101      	movs	r1, #1
 800d47c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b0c      	cmp	r3, #12
 800d482:	d100      	bne.n	800d486 <HAL_TIM_PWM_ConfigChannel+0x32>
 800d484:	e076      	b.n	800d574 <HAL_TIM_PWM_ConfigChannel+0x120>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b0c      	cmp	r3, #12
 800d48a:	d900      	bls.n	800d48e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800d48c:	e095      	b.n	800d5ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b08      	cmp	r3, #8
 800d492:	d04e      	beq.n	800d532 <HAL_TIM_PWM_ConfigChannel+0xde>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b08      	cmp	r3, #8
 800d498:	d900      	bls.n	800d49c <HAL_TIM_PWM_ConfigChannel+0x48>
 800d49a:	e08e      	b.n	800d5ba <HAL_TIM_PWM_ConfigChannel+0x166>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <HAL_TIM_PWM_ConfigChannel+0x56>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b04      	cmp	r3, #4
 800d4a6:	d021      	beq.n	800d4ec <HAL_TIM_PWM_ConfigChannel+0x98>
 800d4a8:	e087      	b.n	800d5ba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	0011      	movs	r1, r2
 800d4b2:	0018      	movs	r0, r3
 800d4b4:	f000 f8f2 	bl	800d69c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	699a      	ldr	r2, [r3, #24]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2108      	movs	r1, #8
 800d4c4:	430a      	orrs	r2, r1
 800d4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	699a      	ldr	r2, [r3, #24]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2104      	movs	r1, #4
 800d4d4:	438a      	bics	r2, r1
 800d4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6999      	ldr	r1, [r3, #24]
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	619a      	str	r2, [r3, #24]
      break;
 800d4ea:	e06b      	b.n	800d5c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	0011      	movs	r1, r2
 800d4f4:	0018      	movs	r0, r3
 800d4f6:	f000 f90d 	bl	800d714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	699a      	ldr	r2, [r3, #24]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2180      	movs	r1, #128	@ 0x80
 800d506:	0109      	lsls	r1, r1, #4
 800d508:	430a      	orrs	r2, r1
 800d50a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	699a      	ldr	r2, [r3, #24]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4931      	ldr	r1, [pc, #196]	@ (800d5dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 800d518:	400a      	ands	r2, r1
 800d51a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6999      	ldr	r1, [r3, #24]
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	021a      	lsls	r2, r3, #8
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	430a      	orrs	r2, r1
 800d52e:	619a      	str	r2, [r3, #24]
      break;
 800d530:	e048      	b.n	800d5c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	0011      	movs	r1, r2
 800d53a:	0018      	movs	r0, r3
 800d53c:	f000 f92c 	bl	800d798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	69da      	ldr	r2, [r3, #28]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2108      	movs	r1, #8
 800d54c:	430a      	orrs	r2, r1
 800d54e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	69da      	ldr	r2, [r3, #28]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2104      	movs	r1, #4
 800d55c:	438a      	bics	r2, r1
 800d55e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	69d9      	ldr	r1, [r3, #28]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	68da      	ldr	r2, [r3, #12]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	430a      	orrs	r2, r1
 800d570:	61da      	str	r2, [r3, #28]
      break;
 800d572:	e027      	b.n	800d5c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	0011      	movs	r1, r2
 800d57c:	0018      	movs	r0, r3
 800d57e:	f000 f94b 	bl	800d818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	69da      	ldr	r2, [r3, #28]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2180      	movs	r1, #128	@ 0x80
 800d58e:	0109      	lsls	r1, r1, #4
 800d590:	430a      	orrs	r2, r1
 800d592:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	69da      	ldr	r2, [r3, #28]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	490f      	ldr	r1, [pc, #60]	@ (800d5dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 800d5a0:	400a      	ands	r2, r1
 800d5a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	69d9      	ldr	r1, [r3, #28]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	021a      	lsls	r2, r3, #8
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	430a      	orrs	r2, r1
 800d5b6:	61da      	str	r2, [r3, #28]
      break;
 800d5b8:	e004      	b.n	800d5c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800d5ba:	2317      	movs	r3, #23
 800d5bc:	18fb      	adds	r3, r7, r3
 800d5be:	2201      	movs	r2, #1
 800d5c0:	701a      	strb	r2, [r3, #0]
      break;
 800d5c2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2238      	movs	r2, #56	@ 0x38
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	5499      	strb	r1, [r3, r2]

  return status;
 800d5cc:	2317      	movs	r3, #23
 800d5ce:	18fb      	adds	r3, r7, r3
 800d5d0:	781b      	ldrb	r3, [r3, #0]
}
 800d5d2:	0018      	movs	r0, r3
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	b006      	add	sp, #24
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	46c0      	nop			@ (mov r8, r8)
 800d5dc:	fffffbff 	.word	0xfffffbff

0800d5e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	2380      	movs	r3, #128	@ 0x80
 800d5f4:	05db      	lsls	r3, r3, #23
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d00b      	beq.n	800d612 <TIM_Base_SetConfig+0x32>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4a23      	ldr	r2, [pc, #140]	@ (800d68c <TIM_Base_SetConfig+0xac>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d007      	beq.n	800d612 <TIM_Base_SetConfig+0x32>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a22      	ldr	r2, [pc, #136]	@ (800d690 <TIM_Base_SetConfig+0xb0>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d003      	beq.n	800d612 <TIM_Base_SetConfig+0x32>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a21      	ldr	r2, [pc, #132]	@ (800d694 <TIM_Base_SetConfig+0xb4>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d108      	bne.n	800d624 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2270      	movs	r2, #112	@ 0x70
 800d616:	4393      	bics	r3, r2
 800d618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	4313      	orrs	r3, r2
 800d622:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	2380      	movs	r3, #128	@ 0x80
 800d628:	05db      	lsls	r3, r3, #23
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d00b      	beq.n	800d646 <TIM_Base_SetConfig+0x66>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a16      	ldr	r2, [pc, #88]	@ (800d68c <TIM_Base_SetConfig+0xac>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d007      	beq.n	800d646 <TIM_Base_SetConfig+0x66>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a15      	ldr	r2, [pc, #84]	@ (800d690 <TIM_Base_SetConfig+0xb0>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d003      	beq.n	800d646 <TIM_Base_SetConfig+0x66>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a14      	ldr	r2, [pc, #80]	@ (800d694 <TIM_Base_SetConfig+0xb4>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d108      	bne.n	800d658 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	4a13      	ldr	r2, [pc, #76]	@ (800d698 <TIM_Base_SetConfig+0xb8>)
 800d64a:	4013      	ands	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	4313      	orrs	r3, r2
 800d656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2280      	movs	r2, #128	@ 0x80
 800d65c:	4393      	bics	r3, r2
 800d65e:	001a      	movs	r2, r3
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	4313      	orrs	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	689a      	ldr	r2, [r3, #8]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	615a      	str	r2, [r3, #20]
}
 800d684:	46c0      	nop			@ (mov r8, r8)
 800d686:	46bd      	mov	sp, r7
 800d688:	b004      	add	sp, #16
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	40000400 	.word	0x40000400
 800d690:	40010800 	.word	0x40010800
 800d694:	40011400 	.word	0x40011400
 800d698:	fffffcff 	.word	0xfffffcff

0800d69c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6a1b      	ldr	r3, [r3, #32]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	4393      	bics	r3, r2
 800d6ae:	001a      	movs	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6a1b      	ldr	r3, [r3, #32]
 800d6b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2270      	movs	r2, #112	@ 0x70
 800d6ca:	4393      	bics	r3, r2
 800d6cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2203      	movs	r2, #3
 800d6d2:	4393      	bics	r3, r2
 800d6d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	4393      	bics	r3, r2
 800d6e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	693a      	ldr	r2, [r7, #16]
 800d6f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	685a      	ldr	r2, [r3, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	697a      	ldr	r2, [r7, #20]
 800d70a:	621a      	str	r2, [r3, #32]
}
 800d70c:	46c0      	nop			@ (mov r8, r8)
 800d70e:	46bd      	mov	sp, r7
 800d710:	b006      	add	sp, #24
 800d712:	bd80      	pop	{r7, pc}

0800d714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	2210      	movs	r2, #16
 800d724:	4393      	bics	r3, r2
 800d726:	001a      	movs	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a1b      	ldr	r3, [r3, #32]
 800d730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	4a13      	ldr	r2, [pc, #76]	@ (800d790 <TIM_OC2_SetConfig+0x7c>)
 800d742:	4013      	ands	r3, r2
 800d744:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4a12      	ldr	r2, [pc, #72]	@ (800d794 <TIM_OC2_SetConfig+0x80>)
 800d74a:	4013      	ands	r3, r2
 800d74c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	021b      	lsls	r3, r3, #8
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	4313      	orrs	r3, r2
 800d758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2220      	movs	r2, #32
 800d75e:	4393      	bics	r3, r2
 800d760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	011b      	lsls	r3, r3, #4
 800d768:	697a      	ldr	r2, [r7, #20]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	685a      	ldr	r2, [r3, #4]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	697a      	ldr	r2, [r7, #20]
 800d786:	621a      	str	r2, [r3, #32]
}
 800d788:	46c0      	nop			@ (mov r8, r8)
 800d78a:	46bd      	mov	sp, r7
 800d78c:	b006      	add	sp, #24
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	ffff8fff 	.word	0xffff8fff
 800d794:	fffffcff 	.word	0xfffffcff

0800d798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	4a1a      	ldr	r2, [pc, #104]	@ (800d810 <TIM_OC3_SetConfig+0x78>)
 800d7a8:	401a      	ands	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	69db      	ldr	r3, [r3, #28]
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2270      	movs	r2, #112	@ 0x70
 800d7c4:	4393      	bics	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2203      	movs	r2, #3
 800d7cc:	4393      	bics	r3, r2
 800d7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	4a0d      	ldr	r2, [pc, #52]	@ (800d814 <TIM_OC3_SetConfig+0x7c>)
 800d7de:	4013      	ands	r3, r2
 800d7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	021b      	lsls	r3, r3, #8
 800d7e8:	697a      	ldr	r2, [r7, #20]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	621a      	str	r2, [r3, #32]
}
 800d808:	46c0      	nop			@ (mov r8, r8)
 800d80a:	46bd      	mov	sp, r7
 800d80c:	b006      	add	sp, #24
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	fffffeff 	.word	0xfffffeff
 800d814:	fffffdff 	.word	0xfffffdff

0800d818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6a1b      	ldr	r3, [r3, #32]
 800d826:	4a1b      	ldr	r2, [pc, #108]	@ (800d894 <TIM_OC4_SetConfig+0x7c>)
 800d828:	401a      	ands	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	69db      	ldr	r3, [r3, #28]
 800d83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a15      	ldr	r2, [pc, #84]	@ (800d898 <TIM_OC4_SetConfig+0x80>)
 800d844:	4013      	ands	r3, r2
 800d846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	4a14      	ldr	r2, [pc, #80]	@ (800d89c <TIM_OC4_SetConfig+0x84>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	021b      	lsls	r3, r3, #8
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	4313      	orrs	r3, r2
 800d85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	4a10      	ldr	r2, [pc, #64]	@ (800d8a0 <TIM_OC4_SetConfig+0x88>)
 800d860:	4013      	ands	r3, r2
 800d862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	031b      	lsls	r3, r3, #12
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	693a      	ldr	r2, [r7, #16]
 800d874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	697a      	ldr	r2, [r7, #20]
 800d888:	621a      	str	r2, [r3, #32]
}
 800d88a:	46c0      	nop			@ (mov r8, r8)
 800d88c:	46bd      	mov	sp, r7
 800d88e:	b006      	add	sp, #24
 800d890:	bd80      	pop	{r7, pc}
 800d892:	46c0      	nop			@ (mov r8, r8)
 800d894:	ffffefff 	.word	0xffffefff
 800d898:	ffff8fff 	.word	0xffff8fff
 800d89c:	fffffcff 	.word	0xfffffcff
 800d8a0:	ffffdfff 	.word	0xffffdfff

0800d8a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	221f      	movs	r2, #31
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	409a      	lsls	r2, r3
 800d8ba:	0013      	movs	r3, r2
 800d8bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	43d2      	mvns	r2, r2
 800d8c6:	401a      	ands	r2, r3
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6a1a      	ldr	r2, [r3, #32]
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	211f      	movs	r1, #31
 800d8d4:	400b      	ands	r3, r1
 800d8d6:	6879      	ldr	r1, [r7, #4]
 800d8d8:	4099      	lsls	r1, r3
 800d8da:	000b      	movs	r3, r1
 800d8dc:	431a      	orrs	r2, r3
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	621a      	str	r2, [r3, #32]
}
 800d8e2:	46c0      	nop			@ (mov r8, r8)
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	b006      	add	sp, #24
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2238      	movs	r2, #56	@ 0x38
 800d8fa:	5c9b      	ldrb	r3, [r3, r2]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d101      	bne.n	800d904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d900:	2302      	movs	r3, #2
 800d902:	e047      	b.n	800d994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2238      	movs	r2, #56	@ 0x38
 800d908:	2101      	movs	r1, #1
 800d90a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2239      	movs	r2, #57	@ 0x39
 800d910:	2102      	movs	r1, #2
 800d912:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2270      	movs	r2, #112	@ 0x70
 800d928:	4393      	bics	r3, r2
 800d92a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	4313      	orrs	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	2380      	movs	r3, #128	@ 0x80
 800d944:	05db      	lsls	r3, r3, #23
 800d946:	429a      	cmp	r2, r3
 800d948:	d00e      	beq.n	800d968 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a13      	ldr	r2, [pc, #76]	@ (800d99c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d009      	beq.n	800d968 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a11      	ldr	r2, [pc, #68]	@ (800d9a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d004      	beq.n	800d968 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a10      	ldr	r2, [pc, #64]	@ (800d9a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d10c      	bne.n	800d982 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	2280      	movs	r2, #128	@ 0x80
 800d96c:	4393      	bics	r3, r2
 800d96e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	4313      	orrs	r3, r2
 800d978:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2239      	movs	r2, #57	@ 0x39
 800d986:	2101      	movs	r1, #1
 800d988:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2238      	movs	r2, #56	@ 0x38
 800d98e:	2100      	movs	r1, #0
 800d990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	0018      	movs	r0, r3
 800d996:	46bd      	mov	sp, r7
 800d998:	b004      	add	sp, #16
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	40000400 	.word	0x40000400
 800d9a0:	40010800 	.word	0x40010800
 800d9a4:	40011400 	.word	0x40011400

0800d9a8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2238      	movs	r2, #56	@ 0x38
 800d9b6:	5c9b      	ldrb	r3, [r3, r2]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d101      	bne.n	800d9c0 <HAL_TIMEx_RemapConfig+0x18>
 800d9bc:	2302      	movs	r3, #2
 800d9be:	e00c      	b.n	800d9da <HAL_TIMEx_RemapConfig+0x32>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2238      	movs	r2, #56	@ 0x38
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2238      	movs	r2, #56	@ 0x38
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	0018      	movs	r0, r3
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	b002      	add	sp, #8
 800d9e0:	bd80      	pop	{r7, pc}
	...

0800d9e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e053      	b.n	800da9e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d116      	bne.n	800da2c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2278      	movs	r2, #120	@ 0x78
 800da02:	2100      	movs	r1, #0
 800da04:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	0018      	movs	r0, r3
 800da0a:	f000 fd07 	bl	800e41c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	22b0      	movs	r2, #176	@ 0xb0
 800da12:	589b      	ldr	r3, [r3, r2]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d103      	bne.n	800da20 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	21b0      	movs	r1, #176	@ 0xb0
 800da1c:	4a22      	ldr	r2, [pc, #136]	@ (800daa8 <HAL_UART_Init+0xc4>)
 800da1e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	22b0      	movs	r2, #176	@ 0xb0
 800da24:	589b      	ldr	r3, [r3, r2]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	0010      	movs	r0, r2
 800da2a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2224      	movs	r2, #36	@ 0x24
 800da30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2101      	movs	r1, #1
 800da3e:	438a      	bics	r2, r1
 800da40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	0018      	movs	r0, r3
 800da46:	f000 fd2d 	bl	800e4a4 <UART_SetConfig>
 800da4a:	0003      	movs	r3, r0
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d101      	bne.n	800da54 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e024      	b.n	800da9e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d003      	beq.n	800da64 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	0018      	movs	r0, r3
 800da60:	f000 ffbe 	bl	800e9e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	685a      	ldr	r2, [r3, #4]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	490f      	ldr	r1, [pc, #60]	@ (800daac <HAL_UART_Init+0xc8>)
 800da70:	400a      	ands	r2, r1
 800da72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689a      	ldr	r2, [r3, #8]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	212a      	movs	r1, #42	@ 0x2a
 800da80:	438a      	bics	r2, r1
 800da82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2101      	movs	r1, #1
 800da90:	430a      	orrs	r2, r1
 800da92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	0018      	movs	r0, r3
 800da98:	f001 f856 	bl	800eb48 <UART_CheckIdleState>
 800da9c:	0003      	movs	r3, r0
}
 800da9e:	0018      	movs	r0, r3
 800daa0:	46bd      	mov	sp, r7
 800daa2:	b002      	add	sp, #8
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	46c0      	nop			@ (mov r8, r8)
 800daa8:	08007c49 	.word	0x08007c49
 800daac:	ffffb7ff 	.word	0xffffb7ff

0800dab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b08a      	sub	sp, #40	@ 0x28
 800dab4:	af02      	add	r7, sp, #8
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	603b      	str	r3, [r7, #0]
 800dabc:	1dbb      	adds	r3, r7, #6
 800dabe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dac4:	2b20      	cmp	r3, #32
 800dac6:	d000      	beq.n	800daca <HAL_UART_Transmit+0x1a>
 800dac8:	e08c      	b.n	800dbe4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d003      	beq.n	800dad8 <HAL_UART_Transmit+0x28>
 800dad0:	1dbb      	adds	r3, r7, #6
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d101      	bne.n	800dadc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	e084      	b.n	800dbe6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	689a      	ldr	r2, [r3, #8]
 800dae0:	2380      	movs	r3, #128	@ 0x80
 800dae2:	015b      	lsls	r3, r3, #5
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d109      	bne.n	800dafc <HAL_UART_Transmit+0x4c>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d105      	bne.n	800dafc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2201      	movs	r2, #1
 800daf4:	4013      	ands	r3, r2
 800daf6:	d001      	beq.n	800dafc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e074      	b.n	800dbe6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2284      	movs	r2, #132	@ 0x84
 800db00:	2100      	movs	r1, #0
 800db02:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2221      	movs	r2, #33	@ 0x21
 800db08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db0a:	f7fa fe27 	bl	800875c <HAL_GetTick>
 800db0e:	0003      	movs	r3, r0
 800db10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	1dba      	adds	r2, r7, #6
 800db16:	2150      	movs	r1, #80	@ 0x50
 800db18:	8812      	ldrh	r2, [r2, #0]
 800db1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	1dba      	adds	r2, r7, #6
 800db20:	2152      	movs	r1, #82	@ 0x52
 800db22:	8812      	ldrh	r2, [r2, #0]
 800db24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	689a      	ldr	r2, [r3, #8]
 800db2a:	2380      	movs	r3, #128	@ 0x80
 800db2c:	015b      	lsls	r3, r3, #5
 800db2e:	429a      	cmp	r2, r3
 800db30:	d108      	bne.n	800db44 <HAL_UART_Transmit+0x94>
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d104      	bne.n	800db44 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	61bb      	str	r3, [r7, #24]
 800db42:	e003      	b.n	800db4c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db48:	2300      	movs	r3, #0
 800db4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800db4c:	e02f      	b.n	800dbae <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	0013      	movs	r3, r2
 800db58:	2200      	movs	r2, #0
 800db5a:	2180      	movs	r1, #128	@ 0x80
 800db5c:	f001 f89c 	bl	800ec98 <UART_WaitOnFlagUntilTimeout>
 800db60:	1e03      	subs	r3, r0, #0
 800db62:	d004      	beq.n	800db6e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2220      	movs	r2, #32
 800db68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800db6a:	2303      	movs	r3, #3
 800db6c:	e03b      	b.n	800dbe6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10b      	bne.n	800db8c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	001a      	movs	r2, r3
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	05d2      	lsls	r2, r2, #23
 800db80:	0dd2      	lsrs	r2, r2, #23
 800db82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	3302      	adds	r3, #2
 800db88:	61bb      	str	r3, [r7, #24]
 800db8a:	e007      	b.n	800db9c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	781a      	ldrb	r2, [r3, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	3301      	adds	r3, #1
 800db9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2252      	movs	r2, #82	@ 0x52
 800dba0:	5a9b      	ldrh	r3, [r3, r2]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	3b01      	subs	r3, #1
 800dba6:	b299      	uxth	r1, r3
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2252      	movs	r2, #82	@ 0x52
 800dbac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2252      	movs	r2, #82	@ 0x52
 800dbb2:	5a9b      	ldrh	r3, [r3, r2]
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1c9      	bne.n	800db4e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	0013      	movs	r3, r2
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2140      	movs	r1, #64	@ 0x40
 800dbc8:	f001 f866 	bl	800ec98 <UART_WaitOnFlagUntilTimeout>
 800dbcc:	1e03      	subs	r3, r0, #0
 800dbce:	d004      	beq.n	800dbda <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2220      	movs	r2, #32
 800dbd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800dbd6:	2303      	movs	r3, #3
 800dbd8:	e005      	b.n	800dbe6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e000      	b.n	800dbe6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800dbe4:	2302      	movs	r3, #2
  }
}
 800dbe6:	0018      	movs	r0, r3
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	b008      	add	sp, #32
 800dbec:	bd80      	pop	{r7, pc}
	...

0800dbf0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b088      	sub	sp, #32
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	1dbb      	adds	r3, r7, #6
 800dbfc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc02:	2b20      	cmp	r3, #32
 800dc04:	d000      	beq.n	800dc08 <HAL_UART_Transmit_DMA+0x18>
 800dc06:	e077      	b.n	800dcf8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <HAL_UART_Transmit_DMA+0x26>
 800dc0e:	1dbb      	adds	r3, r7, #6
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800dc16:	2301      	movs	r3, #1
 800dc18:	e06f      	b.n	800dcfa <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	689a      	ldr	r2, [r3, #8]
 800dc1e:	2380      	movs	r3, #128	@ 0x80
 800dc20:	015b      	lsls	r3, r3, #5
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d109      	bne.n	800dc3a <HAL_UART_Transmit_DMA+0x4a>
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d105      	bne.n	800dc3a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	2201      	movs	r2, #1
 800dc32:	4013      	ands	r3, r2
 800dc34:	d001      	beq.n	800dc3a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e05f      	b.n	800dcfa <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	1dba      	adds	r2, r7, #6
 800dc44:	2150      	movs	r1, #80	@ 0x50
 800dc46:	8812      	ldrh	r2, [r2, #0]
 800dc48:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	1dba      	adds	r2, r7, #6
 800dc4e:	2152      	movs	r1, #82	@ 0x52
 800dc50:	8812      	ldrh	r2, [r2, #0]
 800dc52:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2284      	movs	r2, #132	@ 0x84
 800dc58:	2100      	movs	r1, #0
 800dc5a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2221      	movs	r2, #33	@ 0x21
 800dc60:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d027      	beq.n	800dcba <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc6e:	4a25      	ldr	r2, [pc, #148]	@ (800dd04 <HAL_UART_Transmit_DMA+0x114>)
 800dc70:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc76:	4a24      	ldr	r2, [pc, #144]	@ (800dd08 <HAL_UART_Transmit_DMA+0x118>)
 800dc78:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc7e:	4a23      	ldr	r2, [pc, #140]	@ (800dd0c <HAL_UART_Transmit_DMA+0x11c>)
 800dc80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc86:	2200      	movs	r2, #0
 800dc88:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc92:	0019      	movs	r1, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3328      	adds	r3, #40	@ 0x28
 800dc9a:	001a      	movs	r2, r3
 800dc9c:	1dbb      	adds	r3, r7, #6
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	f7fb fabc 	bl	800921c <HAL_DMA_Start_IT>
 800dca4:	1e03      	subs	r3, r0, #0
 800dca6:	d008      	beq.n	800dcba <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2284      	movs	r2, #132	@ 0x84
 800dcac:	2110      	movs	r1, #16
 800dcae:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e01f      	b.n	800dcfa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2240      	movs	r2, #64	@ 0x40
 800dcc0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcc2:	f3ef 8310 	mrs	r3, PRIMASK
 800dcc6:	613b      	str	r3, [r7, #16]
  return(result);
 800dcc8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dcca:	61fb      	str	r3, [r7, #28]
 800dccc:	2301      	movs	r3, #1
 800dcce:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f383 8810 	msr	PRIMASK, r3
}
 800dcd6:	46c0      	nop			@ (mov r8, r8)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	689a      	ldr	r2, [r3, #8]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2180      	movs	r1, #128	@ 0x80
 800dce4:	430a      	orrs	r2, r1
 800dce6:	609a      	str	r2, [r3, #8]
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	f383 8810 	msr	PRIMASK, r3
}
 800dcf2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e000      	b.n	800dcfa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800dcf8:	2302      	movs	r3, #2
  }
}
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	b008      	add	sp, #32
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	46c0      	nop			@ (mov r8, r8)
 800dd04:	0800efbd 	.word	0x0800efbd
 800dd08:	0800f059 	.word	0x0800f059
 800dd0c:	0800f1f9 	.word	0x0800f1f9

0800dd10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b088      	sub	sp, #32
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	1dbb      	adds	r3, r7, #6
 800dd1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2280      	movs	r2, #128	@ 0x80
 800dd22:	589b      	ldr	r3, [r3, r2]
 800dd24:	2b20      	cmp	r3, #32
 800dd26:	d14a      	bne.n	800ddbe <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <HAL_UART_Receive_DMA+0x26>
 800dd2e:	1dbb      	adds	r3, r7, #6
 800dd30:	881b      	ldrh	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d101      	bne.n	800dd3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	e042      	b.n	800ddc0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	689a      	ldr	r2, [r3, #8]
 800dd3e:	2380      	movs	r3, #128	@ 0x80
 800dd40:	015b      	lsls	r3, r3, #5
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d109      	bne.n	800dd5a <HAL_UART_Receive_DMA+0x4a>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d105      	bne.n	800dd5a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	2201      	movs	r2, #1
 800dd52:	4013      	ands	r3, r2
 800dd54:	d001      	beq.n	800dd5a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	e032      	b.n	800ddc0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a18      	ldr	r2, [pc, #96]	@ (800ddc8 <HAL_UART_Receive_DMA+0xb8>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d020      	beq.n	800ddac <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	2380      	movs	r3, #128	@ 0x80
 800dd72:	041b      	lsls	r3, r3, #16
 800dd74:	4013      	ands	r3, r2
 800dd76:	d019      	beq.n	800ddac <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd78:	f3ef 8310 	mrs	r3, PRIMASK
 800dd7c:	613b      	str	r3, [r7, #16]
  return(result);
 800dd7e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd80:	61fb      	str	r3, [r7, #28]
 800dd82:	2301      	movs	r3, #1
 800dd84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	f383 8810 	msr	PRIMASK, r3
}
 800dd8c:	46c0      	nop			@ (mov r8, r8)
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2180      	movs	r1, #128	@ 0x80
 800dd9a:	04c9      	lsls	r1, r1, #19
 800dd9c:	430a      	orrs	r2, r1
 800dd9e:	601a      	str	r2, [r3, #0]
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	f383 8810 	msr	PRIMASK, r3
}
 800ddaa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ddac:	1dbb      	adds	r3, r7, #6
 800ddae:	881a      	ldrh	r2, [r3, #0]
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	0018      	movs	r0, r3
 800ddb6:	f000 ffd9 	bl	800ed6c <UART_Start_Receive_DMA>
 800ddba:	0003      	movs	r3, r0
 800ddbc:	e000      	b.n	800ddc0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800ddbe:	2302      	movs	r3, #2
  }
}
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	b008      	add	sp, #32
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	40004800 	.word	0x40004800

0800ddcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ddcc:	b590      	push	{r4, r7, lr}
 800ddce:	b0ab      	sub	sp, #172	@ 0xac
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	69db      	ldr	r3, [r3, #28]
 800ddda:	22a4      	movs	r2, #164	@ 0xa4
 800dddc:	18b9      	adds	r1, r7, r2
 800ddde:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	20a0      	movs	r0, #160	@ 0xa0
 800dde8:	1839      	adds	r1, r7, r0
 800ddea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	219c      	movs	r1, #156	@ 0x9c
 800ddf4:	1879      	adds	r1, r7, r1
 800ddf6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddf8:	0011      	movs	r1, r2
 800ddfa:	18bb      	adds	r3, r7, r2
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a9c      	ldr	r2, [pc, #624]	@ (800e070 <HAL_UART_IRQHandler+0x2a4>)
 800de00:	4013      	ands	r3, r2
 800de02:	2298      	movs	r2, #152	@ 0x98
 800de04:	18bc      	adds	r4, r7, r2
 800de06:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800de08:	18bb      	adds	r3, r7, r2
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d114      	bne.n	800de3a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800de10:	187b      	adds	r3, r7, r1
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2220      	movs	r2, #32
 800de16:	4013      	ands	r3, r2
 800de18:	d00f      	beq.n	800de3a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800de1a:	183b      	adds	r3, r7, r0
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2220      	movs	r2, #32
 800de20:	4013      	ands	r3, r2
 800de22:	d00a      	beq.n	800de3a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d100      	bne.n	800de2e <HAL_UART_IRQHandler+0x62>
 800de2c:	e2aa      	b.n	800e384 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	0010      	movs	r0, r2
 800de36:	4798      	blx	r3
      }
      return;
 800de38:	e2a4      	b.n	800e384 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de3a:	2398      	movs	r3, #152	@ 0x98
 800de3c:	18fb      	adds	r3, r7, r3
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d100      	bne.n	800de46 <HAL_UART_IRQHandler+0x7a>
 800de44:	e11a      	b.n	800e07c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800de46:	239c      	movs	r3, #156	@ 0x9c
 800de48:	18fb      	adds	r3, r7, r3
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2201      	movs	r2, #1
 800de4e:	4013      	ands	r3, r2
 800de50:	d106      	bne.n	800de60 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800de52:	23a0      	movs	r3, #160	@ 0xa0
 800de54:	18fb      	adds	r3, r7, r3
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a86      	ldr	r2, [pc, #536]	@ (800e074 <HAL_UART_IRQHandler+0x2a8>)
 800de5a:	4013      	ands	r3, r2
 800de5c:	d100      	bne.n	800de60 <HAL_UART_IRQHandler+0x94>
 800de5e:	e10d      	b.n	800e07c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de60:	23a4      	movs	r3, #164	@ 0xa4
 800de62:	18fb      	adds	r3, r7, r3
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2201      	movs	r2, #1
 800de68:	4013      	ands	r3, r2
 800de6a:	d012      	beq.n	800de92 <HAL_UART_IRQHandler+0xc6>
 800de6c:	23a0      	movs	r3, #160	@ 0xa0
 800de6e:	18fb      	adds	r3, r7, r3
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	2380      	movs	r3, #128	@ 0x80
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	4013      	ands	r3, r2
 800de78:	d00b      	beq.n	800de92 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2201      	movs	r2, #1
 800de80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2284      	movs	r2, #132	@ 0x84
 800de86:	589b      	ldr	r3, [r3, r2]
 800de88:	2201      	movs	r2, #1
 800de8a:	431a      	orrs	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2184      	movs	r1, #132	@ 0x84
 800de90:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de92:	23a4      	movs	r3, #164	@ 0xa4
 800de94:	18fb      	adds	r3, r7, r3
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2202      	movs	r2, #2
 800de9a:	4013      	ands	r3, r2
 800de9c:	d011      	beq.n	800dec2 <HAL_UART_IRQHandler+0xf6>
 800de9e:	239c      	movs	r3, #156	@ 0x9c
 800dea0:	18fb      	adds	r3, r7, r3
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2201      	movs	r2, #1
 800dea6:	4013      	ands	r3, r2
 800dea8:	d00b      	beq.n	800dec2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2202      	movs	r2, #2
 800deb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2284      	movs	r2, #132	@ 0x84
 800deb6:	589b      	ldr	r3, [r3, r2]
 800deb8:	2204      	movs	r2, #4
 800deba:	431a      	orrs	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2184      	movs	r1, #132	@ 0x84
 800dec0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dec2:	23a4      	movs	r3, #164	@ 0xa4
 800dec4:	18fb      	adds	r3, r7, r3
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2204      	movs	r2, #4
 800deca:	4013      	ands	r3, r2
 800decc:	d011      	beq.n	800def2 <HAL_UART_IRQHandler+0x126>
 800dece:	239c      	movs	r3, #156	@ 0x9c
 800ded0:	18fb      	adds	r3, r7, r3
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2201      	movs	r2, #1
 800ded6:	4013      	ands	r3, r2
 800ded8:	d00b      	beq.n	800def2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2204      	movs	r2, #4
 800dee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2284      	movs	r2, #132	@ 0x84
 800dee6:	589b      	ldr	r3, [r3, r2]
 800dee8:	2202      	movs	r2, #2
 800deea:	431a      	orrs	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2184      	movs	r1, #132	@ 0x84
 800def0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800def2:	23a4      	movs	r3, #164	@ 0xa4
 800def4:	18fb      	adds	r3, r7, r3
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2208      	movs	r2, #8
 800defa:	4013      	ands	r3, r2
 800defc:	d017      	beq.n	800df2e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800defe:	23a0      	movs	r3, #160	@ 0xa0
 800df00:	18fb      	adds	r3, r7, r3
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2220      	movs	r2, #32
 800df06:	4013      	ands	r3, r2
 800df08:	d105      	bne.n	800df16 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800df0a:	239c      	movs	r3, #156	@ 0x9c
 800df0c:	18fb      	adds	r3, r7, r3
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2201      	movs	r2, #1
 800df12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800df14:	d00b      	beq.n	800df2e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2208      	movs	r2, #8
 800df1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2284      	movs	r2, #132	@ 0x84
 800df22:	589b      	ldr	r3, [r3, r2]
 800df24:	2208      	movs	r2, #8
 800df26:	431a      	orrs	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2184      	movs	r1, #132	@ 0x84
 800df2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800df2e:	23a4      	movs	r3, #164	@ 0xa4
 800df30:	18fb      	adds	r3, r7, r3
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	2380      	movs	r3, #128	@ 0x80
 800df36:	011b      	lsls	r3, r3, #4
 800df38:	4013      	ands	r3, r2
 800df3a:	d013      	beq.n	800df64 <HAL_UART_IRQHandler+0x198>
 800df3c:	23a0      	movs	r3, #160	@ 0xa0
 800df3e:	18fb      	adds	r3, r7, r3
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	2380      	movs	r3, #128	@ 0x80
 800df44:	04db      	lsls	r3, r3, #19
 800df46:	4013      	ands	r3, r2
 800df48:	d00c      	beq.n	800df64 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2280      	movs	r2, #128	@ 0x80
 800df50:	0112      	lsls	r2, r2, #4
 800df52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2284      	movs	r2, #132	@ 0x84
 800df58:	589b      	ldr	r3, [r3, r2]
 800df5a:	2220      	movs	r2, #32
 800df5c:	431a      	orrs	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2184      	movs	r1, #132	@ 0x84
 800df62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2284      	movs	r2, #132	@ 0x84
 800df68:	589b      	ldr	r3, [r3, r2]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d100      	bne.n	800df70 <HAL_UART_IRQHandler+0x1a4>
 800df6e:	e20b      	b.n	800e388 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800df70:	23a4      	movs	r3, #164	@ 0xa4
 800df72:	18fb      	adds	r3, r7, r3
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2220      	movs	r2, #32
 800df78:	4013      	ands	r3, r2
 800df7a:	d00e      	beq.n	800df9a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800df7c:	23a0      	movs	r3, #160	@ 0xa0
 800df7e:	18fb      	adds	r3, r7, r3
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2220      	movs	r2, #32
 800df84:	4013      	ands	r3, r2
 800df86:	d008      	beq.n	800df9a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d004      	beq.n	800df9a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	0010      	movs	r0, r2
 800df98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2284      	movs	r2, #132	@ 0x84
 800df9e:	589b      	ldr	r3, [r3, r2]
 800dfa0:	2194      	movs	r1, #148	@ 0x94
 800dfa2:	187a      	adds	r2, r7, r1
 800dfa4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	2240      	movs	r2, #64	@ 0x40
 800dfae:	4013      	ands	r3, r2
 800dfb0:	2b40      	cmp	r3, #64	@ 0x40
 800dfb2:	d004      	beq.n	800dfbe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dfb4:	187b      	adds	r3, r7, r1
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2228      	movs	r2, #40	@ 0x28
 800dfba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dfbc:	d04b      	beq.n	800e056 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	0018      	movs	r0, r3
 800dfc2:	f000 ff97 	bl	800eef4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	2240      	movs	r2, #64	@ 0x40
 800dfce:	4013      	ands	r3, r2
 800dfd0:	2b40      	cmp	r3, #64	@ 0x40
 800dfd2:	d139      	bne.n	800e048 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfd4:	f3ef 8310 	mrs	r3, PRIMASK
 800dfd8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800dfda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfdc:	2090      	movs	r0, #144	@ 0x90
 800dfde:	183a      	adds	r2, r7, r0
 800dfe0:	6013      	str	r3, [r2, #0]
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dfe8:	f383 8810 	msr	PRIMASK, r3
}
 800dfec:	46c0      	nop			@ (mov r8, r8)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2140      	movs	r1, #64	@ 0x40
 800dffa:	438a      	bics	r2, r1
 800dffc:	609a      	str	r2, [r3, #8]
 800dffe:	183b      	adds	r3, r7, r0
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e006:	f383 8810 	msr	PRIMASK, r3
}
 800e00a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e010:	2b00      	cmp	r3, #0
 800e012:	d012      	beq.n	800e03a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e018:	4a17      	ldr	r2, [pc, #92]	@ (800e078 <HAL_UART_IRQHandler+0x2ac>)
 800e01a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e020:	0018      	movs	r0, r3
 800e022:	f7fb f9a1 	bl	8009368 <HAL_DMA_Abort_IT>
 800e026:	1e03      	subs	r3, r0, #0
 800e028:	d020      	beq.n	800e06c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e02e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e034:	0018      	movs	r0, r3
 800e036:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e038:	e018      	b.n	800e06c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2298      	movs	r2, #152	@ 0x98
 800e03e:	589b      	ldr	r3, [r3, r2]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	0010      	movs	r0, r2
 800e044:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e046:	e011      	b.n	800e06c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2298      	movs	r2, #152	@ 0x98
 800e04c:	589b      	ldr	r3, [r3, r2]
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	0010      	movs	r0, r2
 800e052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e054:	e00a      	b.n	800e06c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2298      	movs	r2, #152	@ 0x98
 800e05a:	589b      	ldr	r3, [r3, r2]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	0010      	movs	r0, r2
 800e060:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2284      	movs	r2, #132	@ 0x84
 800e066:	2100      	movs	r1, #0
 800e068:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800e06a:	e18d      	b.n	800e388 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e06c:	46c0      	nop			@ (mov r8, r8)
    return;
 800e06e:	e18b      	b.n	800e388 <HAL_UART_IRQHandler+0x5bc>
 800e070:	0000080f 	.word	0x0000080f
 800e074:	04000120 	.word	0x04000120
 800e078:	0800f281 	.word	0x0800f281

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e080:	2b01      	cmp	r3, #1
 800e082:	d000      	beq.n	800e086 <HAL_UART_IRQHandler+0x2ba>
 800e084:	e13d      	b.n	800e302 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e086:	23a4      	movs	r3, #164	@ 0xa4
 800e088:	18fb      	adds	r3, r7, r3
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2210      	movs	r2, #16
 800e08e:	4013      	ands	r3, r2
 800e090:	d100      	bne.n	800e094 <HAL_UART_IRQHandler+0x2c8>
 800e092:	e136      	b.n	800e302 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e094:	23a0      	movs	r3, #160	@ 0xa0
 800e096:	18fb      	adds	r3, r7, r3
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2210      	movs	r2, #16
 800e09c:	4013      	ands	r3, r2
 800e09e:	d100      	bne.n	800e0a2 <HAL_UART_IRQHandler+0x2d6>
 800e0a0:	e12f      	b.n	800e302 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2210      	movs	r2, #16
 800e0a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	2240      	movs	r2, #64	@ 0x40
 800e0b2:	4013      	ands	r3, r2
 800e0b4:	2b40      	cmp	r3, #64	@ 0x40
 800e0b6:	d000      	beq.n	800e0ba <HAL_UART_IRQHandler+0x2ee>
 800e0b8:	e0a2      	b.n	800e200 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	685a      	ldr	r2, [r3, #4]
 800e0c2:	217e      	movs	r1, #126	@ 0x7e
 800e0c4:	187b      	adds	r3, r7, r1
 800e0c6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800e0c8:	187b      	adds	r3, r7, r1
 800e0ca:	881b      	ldrh	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d100      	bne.n	800e0d2 <HAL_UART_IRQHandler+0x306>
 800e0d0:	e15c      	b.n	800e38c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2258      	movs	r2, #88	@ 0x58
 800e0d6:	5a9b      	ldrh	r3, [r3, r2]
 800e0d8:	187a      	adds	r2, r7, r1
 800e0da:	8812      	ldrh	r2, [r2, #0]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d300      	bcc.n	800e0e2 <HAL_UART_IRQHandler+0x316>
 800e0e0:	e154      	b.n	800e38c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	187a      	adds	r2, r7, r1
 800e0e6:	215a      	movs	r1, #90	@ 0x5a
 800e0e8:	8812      	ldrh	r2, [r2, #0]
 800e0ea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2220      	movs	r2, #32
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	d16f      	bne.n	800e1da <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e0fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e102:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e104:	2301      	movs	r3, #1
 800e106:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e10a:	f383 8810 	msr	PRIMASK, r3
}
 800e10e:	46c0      	nop			@ (mov r8, r8)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	49a0      	ldr	r1, [pc, #640]	@ (800e39c <HAL_UART_IRQHandler+0x5d0>)
 800e11c:	400a      	ands	r2, r1
 800e11e:	601a      	str	r2, [r3, #0]
 800e120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e122:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e126:	f383 8810 	msr	PRIMASK, r3
}
 800e12a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e12c:	f3ef 8310 	mrs	r3, PRIMASK
 800e130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800e132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e134:	677b      	str	r3, [r7, #116]	@ 0x74
 800e136:	2301      	movs	r3, #1
 800e138:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e13c:	f383 8810 	msr	PRIMASK, r3
}
 800e140:	46c0      	nop			@ (mov r8, r8)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	689a      	ldr	r2, [r3, #8]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2101      	movs	r1, #1
 800e14e:	438a      	bics	r2, r1
 800e150:	609a      	str	r2, [r3, #8]
 800e152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e154:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e158:	f383 8810 	msr	PRIMASK, r3
}
 800e15c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e15e:	f3ef 8310 	mrs	r3, PRIMASK
 800e162:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800e164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e166:	673b      	str	r3, [r7, #112]	@ 0x70
 800e168:	2301      	movs	r3, #1
 800e16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e16e:	f383 8810 	msr	PRIMASK, r3
}
 800e172:	46c0      	nop			@ (mov r8, r8)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	689a      	ldr	r2, [r3, #8]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2140      	movs	r1, #64	@ 0x40
 800e180:	438a      	bics	r2, r1
 800e182:	609a      	str	r2, [r3, #8]
 800e184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e186:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e18a:	f383 8810 	msr	PRIMASK, r3
}
 800e18e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2280      	movs	r2, #128	@ 0x80
 800e194:	2120      	movs	r1, #32
 800e196:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e19e:	f3ef 8310 	mrs	r3, PRIMASK
 800e1a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800e1a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1ae:	f383 8810 	msr	PRIMASK, r3
}
 800e1b2:	46c0      	nop			@ (mov r8, r8)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2110      	movs	r1, #16
 800e1c0:	438a      	bics	r2, r1
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1ca:	f383 8810 	msr	PRIMASK, r3
}
 800e1ce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d4:	0018      	movs	r0, r3
 800e1d6:	f7fb f887 	bl	80092e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2202      	movs	r2, #2
 800e1de:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	22ac      	movs	r2, #172	@ 0xac
 800e1e4:	589b      	ldr	r3, [r3, r2]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	2158      	movs	r1, #88	@ 0x58
 800e1ea:	5a51      	ldrh	r1, [r2, r1]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	205a      	movs	r0, #90	@ 0x5a
 800e1f0:	5a12      	ldrh	r2, [r2, r0]
 800e1f2:	b292      	uxth	r2, r2
 800e1f4:	1a8a      	subs	r2, r1, r2
 800e1f6:	b291      	uxth	r1, r2
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	0010      	movs	r0, r2
 800e1fc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e1fe:	e0c5      	b.n	800e38c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2258      	movs	r2, #88	@ 0x58
 800e204:	5a99      	ldrh	r1, [r3, r2]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	225a      	movs	r2, #90	@ 0x5a
 800e20a:	5a9b      	ldrh	r3, [r3, r2]
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	208e      	movs	r0, #142	@ 0x8e
 800e210:	183b      	adds	r3, r7, r0
 800e212:	1a8a      	subs	r2, r1, r2
 800e214:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	225a      	movs	r2, #90	@ 0x5a
 800e21a:	5a9b      	ldrh	r3, [r3, r2]
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d100      	bne.n	800e224 <HAL_UART_IRQHandler+0x458>
 800e222:	e0b5      	b.n	800e390 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800e224:	183b      	adds	r3, r7, r0
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d100      	bne.n	800e22e <HAL_UART_IRQHandler+0x462>
 800e22c:	e0b0      	b.n	800e390 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e22e:	f3ef 8310 	mrs	r3, PRIMASK
 800e232:	60fb      	str	r3, [r7, #12]
  return(result);
 800e234:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e236:	2488      	movs	r4, #136	@ 0x88
 800e238:	193a      	adds	r2, r7, r4
 800e23a:	6013      	str	r3, [r2, #0]
 800e23c:	2301      	movs	r3, #1
 800e23e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	f383 8810 	msr	PRIMASK, r3
}
 800e246:	46c0      	nop			@ (mov r8, r8)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4953      	ldr	r1, [pc, #332]	@ (800e3a0 <HAL_UART_IRQHandler+0x5d4>)
 800e254:	400a      	ands	r2, r1
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	193b      	adds	r3, r7, r4
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	f383 8810 	msr	PRIMASK, r3
}
 800e264:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e266:	f3ef 8310 	mrs	r3, PRIMASK
 800e26a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e26c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e26e:	2484      	movs	r4, #132	@ 0x84
 800e270:	193a      	adds	r2, r7, r4
 800e272:	6013      	str	r3, [r2, #0]
 800e274:	2301      	movs	r3, #1
 800e276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	f383 8810 	msr	PRIMASK, r3
}
 800e27e:	46c0      	nop			@ (mov r8, r8)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	689a      	ldr	r2, [r3, #8]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2101      	movs	r1, #1
 800e28c:	438a      	bics	r2, r1
 800e28e:	609a      	str	r2, [r3, #8]
 800e290:	193b      	adds	r3, r7, r4
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	f383 8810 	msr	PRIMASK, r3
}
 800e29c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2280      	movs	r2, #128	@ 0x80
 800e2a2:	2120      	movs	r1, #32
 800e2a4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e2b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2ba:	2480      	movs	r4, #128	@ 0x80
 800e2bc:	193a      	adds	r2, r7, r4
 800e2be:	6013      	str	r3, [r2, #0]
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c6:	f383 8810 	msr	PRIMASK, r3
}
 800e2ca:	46c0      	nop			@ (mov r8, r8)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2110      	movs	r1, #16
 800e2d8:	438a      	bics	r2, r1
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	193b      	adds	r3, r7, r4
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e4:	f383 8810 	msr	PRIMASK, r3
}
 800e2e8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2202      	movs	r2, #2
 800e2ee:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	22ac      	movs	r2, #172	@ 0xac
 800e2f4:	589b      	ldr	r3, [r3, r2]
 800e2f6:	183a      	adds	r2, r7, r0
 800e2f8:	8811      	ldrh	r1, [r2, #0]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	0010      	movs	r0, r2
 800e2fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e300:	e046      	b.n	800e390 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e302:	23a4      	movs	r3, #164	@ 0xa4
 800e304:	18fb      	adds	r3, r7, r3
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	2380      	movs	r3, #128	@ 0x80
 800e30a:	035b      	lsls	r3, r3, #13
 800e30c:	4013      	ands	r3, r2
 800e30e:	d012      	beq.n	800e336 <HAL_UART_IRQHandler+0x56a>
 800e310:	239c      	movs	r3, #156	@ 0x9c
 800e312:	18fb      	adds	r3, r7, r3
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	2380      	movs	r3, #128	@ 0x80
 800e318:	03db      	lsls	r3, r3, #15
 800e31a:	4013      	ands	r3, r2
 800e31c:	d00b      	beq.n	800e336 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2280      	movs	r2, #128	@ 0x80
 800e324:	0352      	lsls	r2, r2, #13
 800e326:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	22a8      	movs	r2, #168	@ 0xa8
 800e32c:	589b      	ldr	r3, [r3, r2]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	0010      	movs	r0, r2
 800e332:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e334:	e02f      	b.n	800e396 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e336:	23a4      	movs	r3, #164	@ 0xa4
 800e338:	18fb      	adds	r3, r7, r3
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2280      	movs	r2, #128	@ 0x80
 800e33e:	4013      	ands	r3, r2
 800e340:	d00f      	beq.n	800e362 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e342:	23a0      	movs	r3, #160	@ 0xa0
 800e344:	18fb      	adds	r3, r7, r3
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2280      	movs	r2, #128	@ 0x80
 800e34a:	4013      	ands	r3, r2
 800e34c:	d009      	beq.n	800e362 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e352:	2b00      	cmp	r3, #0
 800e354:	d01e      	beq.n	800e394 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	0010      	movs	r0, r2
 800e35e:	4798      	blx	r3
    }
    return;
 800e360:	e018      	b.n	800e394 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e362:	23a4      	movs	r3, #164	@ 0xa4
 800e364:	18fb      	adds	r3, r7, r3
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2240      	movs	r2, #64	@ 0x40
 800e36a:	4013      	ands	r3, r2
 800e36c:	d013      	beq.n	800e396 <HAL_UART_IRQHandler+0x5ca>
 800e36e:	23a0      	movs	r3, #160	@ 0xa0
 800e370:	18fb      	adds	r3, r7, r3
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2240      	movs	r2, #64	@ 0x40
 800e376:	4013      	ands	r3, r2
 800e378:	d00d      	beq.n	800e396 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	0018      	movs	r0, r3
 800e37e:	f000 ff98 	bl	800f2b2 <UART_EndTransmit_IT>
    return;
 800e382:	e008      	b.n	800e396 <HAL_UART_IRQHandler+0x5ca>
      return;
 800e384:	46c0      	nop			@ (mov r8, r8)
 800e386:	e006      	b.n	800e396 <HAL_UART_IRQHandler+0x5ca>
    return;
 800e388:	46c0      	nop			@ (mov r8, r8)
 800e38a:	e004      	b.n	800e396 <HAL_UART_IRQHandler+0x5ca>
      return;
 800e38c:	46c0      	nop			@ (mov r8, r8)
 800e38e:	e002      	b.n	800e396 <HAL_UART_IRQHandler+0x5ca>
      return;
 800e390:	46c0      	nop			@ (mov r8, r8)
 800e392:	e000      	b.n	800e396 <HAL_UART_IRQHandler+0x5ca>
    return;
 800e394:	46c0      	nop			@ (mov r8, r8)
  }

}
 800e396:	46bd      	mov	sp, r7
 800e398:	b02b      	add	sp, #172	@ 0xac
 800e39a:	bd90      	pop	{r4, r7, pc}
 800e39c:	fffffeff 	.word	0xfffffeff
 800e3a0:	fffffedf 	.word	0xfffffedf

0800e3a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e3ac:	46c0      	nop			@ (mov r8, r8)
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	b002      	add	sp, #8
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e3bc:	46c0      	nop			@ (mov r8, r8)
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	b002      	add	sp, #8
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e3cc:	46c0      	nop			@ (mov r8, r8)
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	b002      	add	sp, #8
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e3dc:	46c0      	nop			@ (mov r8, r8)
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	b002      	add	sp, #8
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e3ec:	46c0      	nop			@ (mov r8, r8)
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	b002      	add	sp, #8
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e3fc:	46c0      	nop			@ (mov r8, r8)
 800e3fe:	46bd      	mov	sp, r7
 800e400:	b002      	add	sp, #8
 800e402:	bd80      	pop	{r7, pc}

0800e404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	000a      	movs	r2, r1
 800e40e:	1cbb      	adds	r3, r7, #2
 800e410:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e412:	46c0      	nop			@ (mov r8, r8)
 800e414:	46bd      	mov	sp, r7
 800e416:	b002      	add	sp, #8
 800e418:	bd80      	pop	{r7, pc}
	...

0800e41c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2188      	movs	r1, #136	@ 0x88
 800e428:	4a14      	ldr	r2, [pc, #80]	@ (800e47c <UART_InitCallbacksToDefault+0x60>)
 800e42a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	218c      	movs	r1, #140	@ 0x8c
 800e430:	4a13      	ldr	r2, [pc, #76]	@ (800e480 <UART_InitCallbacksToDefault+0x64>)
 800e432:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2190      	movs	r1, #144	@ 0x90
 800e438:	4a12      	ldr	r2, [pc, #72]	@ (800e484 <UART_InitCallbacksToDefault+0x68>)
 800e43a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2194      	movs	r1, #148	@ 0x94
 800e440:	4a11      	ldr	r2, [pc, #68]	@ (800e488 <UART_InitCallbacksToDefault+0x6c>)
 800e442:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2198      	movs	r1, #152	@ 0x98
 800e448:	4a10      	ldr	r2, [pc, #64]	@ (800e48c <UART_InitCallbacksToDefault+0x70>)
 800e44a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	219c      	movs	r1, #156	@ 0x9c
 800e450:	4a0f      	ldr	r2, [pc, #60]	@ (800e490 <UART_InitCallbacksToDefault+0x74>)
 800e452:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	21a0      	movs	r1, #160	@ 0xa0
 800e458:	4a0e      	ldr	r2, [pc, #56]	@ (800e494 <UART_InitCallbacksToDefault+0x78>)
 800e45a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	21a4      	movs	r1, #164	@ 0xa4
 800e460:	4a0d      	ldr	r2, [pc, #52]	@ (800e498 <UART_InitCallbacksToDefault+0x7c>)
 800e462:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	21a8      	movs	r1, #168	@ 0xa8
 800e468:	4a0c      	ldr	r2, [pc, #48]	@ (800e49c <UART_InitCallbacksToDefault+0x80>)
 800e46a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	21ac      	movs	r1, #172	@ 0xac
 800e470:	4a0b      	ldr	r2, [pc, #44]	@ (800e4a0 <UART_InitCallbacksToDefault+0x84>)
 800e472:	505a      	str	r2, [r3, r1]

}
 800e474:	46c0      	nop			@ (mov r8, r8)
 800e476:	46bd      	mov	sp, r7
 800e478:	b002      	add	sp, #8
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	0800e3b5 	.word	0x0800e3b5
 800e480:	0800e3a5 	.word	0x0800e3a5
 800e484:	0800e3c5 	.word	0x0800e3c5
 800e488:	080037c9 	.word	0x080037c9
 800e48c:	08003805 	.word	0x08003805
 800e490:	0800e3d5 	.word	0x0800e3d5
 800e494:	0800e3e5 	.word	0x0800e3e5
 800e498:	0800e3f5 	.word	0x0800e3f5
 800e49c:	0800f30d 	.word	0x0800f30d
 800e4a0:	0800e405 	.word	0x0800e405

0800e4a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4a4:	b5b0      	push	{r4, r5, r7, lr}
 800e4a6:	b08e      	sub	sp, #56	@ 0x38
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4ac:	231a      	movs	r3, #26
 800e4ae:	2218      	movs	r2, #24
 800e4b0:	189b      	adds	r3, r3, r2
 800e4b2:	19db      	adds	r3, r3, r7
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	689a      	ldr	r2, [r3, #8]
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	431a      	orrs	r2, r3
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	431a      	orrs	r2, r3
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	69db      	ldr	r3, [r3, #28]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4ac3      	ldr	r2, [pc, #780]	@ (800e7e4 <UART_SetConfig+0x340>)
 800e4d8:	4013      	ands	r3, r2
 800e4da:	0019      	movs	r1, r3
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4e2:	430a      	orrs	r2, r1
 800e4e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	4abe      	ldr	r2, [pc, #760]	@ (800e7e8 <UART_SetConfig+0x344>)
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	0019      	movs	r1, r3
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	68da      	ldr	r2, [r3, #12]
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	430a      	orrs	r2, r1
 800e4fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	699b      	ldr	r3, [r3, #24]
 800e502:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4ab8      	ldr	r2, [pc, #736]	@ (800e7ec <UART_SetConfig+0x348>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d004      	beq.n	800e518 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e514:	4313      	orrs	r3, r2
 800e516:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	4ab4      	ldr	r2, [pc, #720]	@ (800e7f0 <UART_SetConfig+0x34c>)
 800e520:	4013      	ands	r3, r2
 800e522:	0019      	movs	r1, r3
 800e524:	69fb      	ldr	r3, [r7, #28]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e52a:	430a      	orrs	r2, r1
 800e52c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4ab0      	ldr	r2, [pc, #704]	@ (800e7f4 <UART_SetConfig+0x350>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d131      	bne.n	800e59c <UART_SetConfig+0xf8>
 800e538:	4baf      	ldr	r3, [pc, #700]	@ (800e7f8 <UART_SetConfig+0x354>)
 800e53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e53c:	2203      	movs	r2, #3
 800e53e:	4013      	ands	r3, r2
 800e540:	2b03      	cmp	r3, #3
 800e542:	d01d      	beq.n	800e580 <UART_SetConfig+0xdc>
 800e544:	d823      	bhi.n	800e58e <UART_SetConfig+0xea>
 800e546:	2b02      	cmp	r3, #2
 800e548:	d00c      	beq.n	800e564 <UART_SetConfig+0xc0>
 800e54a:	d820      	bhi.n	800e58e <UART_SetConfig+0xea>
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <UART_SetConfig+0xb2>
 800e550:	2b01      	cmp	r3, #1
 800e552:	d00e      	beq.n	800e572 <UART_SetConfig+0xce>
 800e554:	e01b      	b.n	800e58e <UART_SetConfig+0xea>
 800e556:	231b      	movs	r3, #27
 800e558:	2218      	movs	r2, #24
 800e55a:	189b      	adds	r3, r3, r2
 800e55c:	19db      	adds	r3, r3, r7
 800e55e:	2201      	movs	r2, #1
 800e560:	701a      	strb	r2, [r3, #0]
 800e562:	e0b4      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e564:	231b      	movs	r3, #27
 800e566:	2218      	movs	r2, #24
 800e568:	189b      	adds	r3, r3, r2
 800e56a:	19db      	adds	r3, r3, r7
 800e56c:	2202      	movs	r2, #2
 800e56e:	701a      	strb	r2, [r3, #0]
 800e570:	e0ad      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e572:	231b      	movs	r3, #27
 800e574:	2218      	movs	r2, #24
 800e576:	189b      	adds	r3, r3, r2
 800e578:	19db      	adds	r3, r3, r7
 800e57a:	2204      	movs	r2, #4
 800e57c:	701a      	strb	r2, [r3, #0]
 800e57e:	e0a6      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e580:	231b      	movs	r3, #27
 800e582:	2218      	movs	r2, #24
 800e584:	189b      	adds	r3, r3, r2
 800e586:	19db      	adds	r3, r3, r7
 800e588:	2208      	movs	r2, #8
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	e09f      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e58e:	231b      	movs	r3, #27
 800e590:	2218      	movs	r2, #24
 800e592:	189b      	adds	r3, r3, r2
 800e594:	19db      	adds	r3, r3, r7
 800e596:	2210      	movs	r2, #16
 800e598:	701a      	strb	r2, [r3, #0]
 800e59a:	e098      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a96      	ldr	r2, [pc, #600]	@ (800e7fc <UART_SetConfig+0x358>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d131      	bne.n	800e60a <UART_SetConfig+0x166>
 800e5a6:	4b94      	ldr	r3, [pc, #592]	@ (800e7f8 <UART_SetConfig+0x354>)
 800e5a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5aa:	220c      	movs	r2, #12
 800e5ac:	4013      	ands	r3, r2
 800e5ae:	2b0c      	cmp	r3, #12
 800e5b0:	d01d      	beq.n	800e5ee <UART_SetConfig+0x14a>
 800e5b2:	d823      	bhi.n	800e5fc <UART_SetConfig+0x158>
 800e5b4:	2b08      	cmp	r3, #8
 800e5b6:	d00c      	beq.n	800e5d2 <UART_SetConfig+0x12e>
 800e5b8:	d820      	bhi.n	800e5fc <UART_SetConfig+0x158>
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <UART_SetConfig+0x120>
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d00e      	beq.n	800e5e0 <UART_SetConfig+0x13c>
 800e5c2:	e01b      	b.n	800e5fc <UART_SetConfig+0x158>
 800e5c4:	231b      	movs	r3, #27
 800e5c6:	2218      	movs	r2, #24
 800e5c8:	189b      	adds	r3, r3, r2
 800e5ca:	19db      	adds	r3, r3, r7
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	701a      	strb	r2, [r3, #0]
 800e5d0:	e07d      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e5d2:	231b      	movs	r3, #27
 800e5d4:	2218      	movs	r2, #24
 800e5d6:	189b      	adds	r3, r3, r2
 800e5d8:	19db      	adds	r3, r3, r7
 800e5da:	2202      	movs	r2, #2
 800e5dc:	701a      	strb	r2, [r3, #0]
 800e5de:	e076      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e5e0:	231b      	movs	r3, #27
 800e5e2:	2218      	movs	r2, #24
 800e5e4:	189b      	adds	r3, r3, r2
 800e5e6:	19db      	adds	r3, r3, r7
 800e5e8:	2204      	movs	r2, #4
 800e5ea:	701a      	strb	r2, [r3, #0]
 800e5ec:	e06f      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e5ee:	231b      	movs	r3, #27
 800e5f0:	2218      	movs	r2, #24
 800e5f2:	189b      	adds	r3, r3, r2
 800e5f4:	19db      	adds	r3, r3, r7
 800e5f6:	2208      	movs	r2, #8
 800e5f8:	701a      	strb	r2, [r3, #0]
 800e5fa:	e068      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e5fc:	231b      	movs	r3, #27
 800e5fe:	2218      	movs	r2, #24
 800e600:	189b      	adds	r3, r3, r2
 800e602:	19db      	adds	r3, r3, r7
 800e604:	2210      	movs	r2, #16
 800e606:	701a      	strb	r2, [r3, #0]
 800e608:	e061      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a7c      	ldr	r2, [pc, #496]	@ (800e800 <UART_SetConfig+0x35c>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d106      	bne.n	800e622 <UART_SetConfig+0x17e>
 800e614:	231b      	movs	r3, #27
 800e616:	2218      	movs	r2, #24
 800e618:	189b      	adds	r3, r3, r2
 800e61a:	19db      	adds	r3, r3, r7
 800e61c:	2200      	movs	r2, #0
 800e61e:	701a      	strb	r2, [r3, #0]
 800e620:	e055      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a77      	ldr	r2, [pc, #476]	@ (800e804 <UART_SetConfig+0x360>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d106      	bne.n	800e63a <UART_SetConfig+0x196>
 800e62c:	231b      	movs	r3, #27
 800e62e:	2218      	movs	r2, #24
 800e630:	189b      	adds	r3, r3, r2
 800e632:	19db      	adds	r3, r3, r7
 800e634:	2200      	movs	r2, #0
 800e636:	701a      	strb	r2, [r3, #0]
 800e638:	e049      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	4a6b      	ldr	r2, [pc, #428]	@ (800e7ec <UART_SetConfig+0x348>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d13e      	bne.n	800e6c2 <UART_SetConfig+0x21e>
 800e644:	4b6c      	ldr	r3, [pc, #432]	@ (800e7f8 <UART_SetConfig+0x354>)
 800e646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e648:	23c0      	movs	r3, #192	@ 0xc0
 800e64a:	011b      	lsls	r3, r3, #4
 800e64c:	4013      	ands	r3, r2
 800e64e:	22c0      	movs	r2, #192	@ 0xc0
 800e650:	0112      	lsls	r2, r2, #4
 800e652:	4293      	cmp	r3, r2
 800e654:	d027      	beq.n	800e6a6 <UART_SetConfig+0x202>
 800e656:	22c0      	movs	r2, #192	@ 0xc0
 800e658:	0112      	lsls	r2, r2, #4
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d82a      	bhi.n	800e6b4 <UART_SetConfig+0x210>
 800e65e:	2280      	movs	r2, #128	@ 0x80
 800e660:	0112      	lsls	r2, r2, #4
 800e662:	4293      	cmp	r3, r2
 800e664:	d011      	beq.n	800e68a <UART_SetConfig+0x1e6>
 800e666:	2280      	movs	r2, #128	@ 0x80
 800e668:	0112      	lsls	r2, r2, #4
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d822      	bhi.n	800e6b4 <UART_SetConfig+0x210>
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d004      	beq.n	800e67c <UART_SetConfig+0x1d8>
 800e672:	2280      	movs	r2, #128	@ 0x80
 800e674:	00d2      	lsls	r2, r2, #3
 800e676:	4293      	cmp	r3, r2
 800e678:	d00e      	beq.n	800e698 <UART_SetConfig+0x1f4>
 800e67a:	e01b      	b.n	800e6b4 <UART_SetConfig+0x210>
 800e67c:	231b      	movs	r3, #27
 800e67e:	2218      	movs	r2, #24
 800e680:	189b      	adds	r3, r3, r2
 800e682:	19db      	adds	r3, r3, r7
 800e684:	2200      	movs	r2, #0
 800e686:	701a      	strb	r2, [r3, #0]
 800e688:	e021      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e68a:	231b      	movs	r3, #27
 800e68c:	2218      	movs	r2, #24
 800e68e:	189b      	adds	r3, r3, r2
 800e690:	19db      	adds	r3, r3, r7
 800e692:	2202      	movs	r2, #2
 800e694:	701a      	strb	r2, [r3, #0]
 800e696:	e01a      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e698:	231b      	movs	r3, #27
 800e69a:	2218      	movs	r2, #24
 800e69c:	189b      	adds	r3, r3, r2
 800e69e:	19db      	adds	r3, r3, r7
 800e6a0:	2204      	movs	r2, #4
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	e013      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e6a6:	231b      	movs	r3, #27
 800e6a8:	2218      	movs	r2, #24
 800e6aa:	189b      	adds	r3, r3, r2
 800e6ac:	19db      	adds	r3, r3, r7
 800e6ae:	2208      	movs	r2, #8
 800e6b0:	701a      	strb	r2, [r3, #0]
 800e6b2:	e00c      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e6b4:	231b      	movs	r3, #27
 800e6b6:	2218      	movs	r2, #24
 800e6b8:	189b      	adds	r3, r3, r2
 800e6ba:	19db      	adds	r3, r3, r7
 800e6bc:	2210      	movs	r2, #16
 800e6be:	701a      	strb	r2, [r3, #0]
 800e6c0:	e005      	b.n	800e6ce <UART_SetConfig+0x22a>
 800e6c2:	231b      	movs	r3, #27
 800e6c4:	2218      	movs	r2, #24
 800e6c6:	189b      	adds	r3, r3, r2
 800e6c8:	19db      	adds	r3, r3, r7
 800e6ca:	2210      	movs	r2, #16
 800e6cc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4a46      	ldr	r2, [pc, #280]	@ (800e7ec <UART_SetConfig+0x348>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d000      	beq.n	800e6da <UART_SetConfig+0x236>
 800e6d8:	e09a      	b.n	800e810 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e6da:	231b      	movs	r3, #27
 800e6dc:	2218      	movs	r2, #24
 800e6de:	189b      	adds	r3, r3, r2
 800e6e0:	19db      	adds	r3, r3, r7
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	2b08      	cmp	r3, #8
 800e6e6:	d01d      	beq.n	800e724 <UART_SetConfig+0x280>
 800e6e8:	dc20      	bgt.n	800e72c <UART_SetConfig+0x288>
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	d015      	beq.n	800e71a <UART_SetConfig+0x276>
 800e6ee:	dc1d      	bgt.n	800e72c <UART_SetConfig+0x288>
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <UART_SetConfig+0x256>
 800e6f4:	2b02      	cmp	r3, #2
 800e6f6:	d005      	beq.n	800e704 <UART_SetConfig+0x260>
 800e6f8:	e018      	b.n	800e72c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6fa:	f7fe fc51 	bl	800cfa0 <HAL_RCC_GetPCLK1Freq>
 800e6fe:	0003      	movs	r3, r0
 800e700:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e702:	e01c      	b.n	800e73e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e704:	4b3c      	ldr	r3, [pc, #240]	@ (800e7f8 <UART_SetConfig+0x354>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2210      	movs	r2, #16
 800e70a:	4013      	ands	r3, r2
 800e70c:	d002      	beq.n	800e714 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800e70e:	4b3e      	ldr	r3, [pc, #248]	@ (800e808 <UART_SetConfig+0x364>)
 800e710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e712:	e014      	b.n	800e73e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800e714:	4b3d      	ldr	r3, [pc, #244]	@ (800e80c <UART_SetConfig+0x368>)
 800e716:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e718:	e011      	b.n	800e73e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e71a:	f7fe fb91 	bl	800ce40 <HAL_RCC_GetSysClockFreq>
 800e71e:	0003      	movs	r3, r0
 800e720:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e722:	e00c      	b.n	800e73e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e724:	2380      	movs	r3, #128	@ 0x80
 800e726:	021b      	lsls	r3, r3, #8
 800e728:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e72a:	e008      	b.n	800e73e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800e72c:	2300      	movs	r3, #0
 800e72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800e730:	231a      	movs	r3, #26
 800e732:	2218      	movs	r2, #24
 800e734:	189b      	adds	r3, r3, r2
 800e736:	19db      	adds	r3, r3, r7
 800e738:	2201      	movs	r2, #1
 800e73a:	701a      	strb	r2, [r3, #0]
        break;
 800e73c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e740:	2b00      	cmp	r3, #0
 800e742:	d100      	bne.n	800e746 <UART_SetConfig+0x2a2>
 800e744:	e133      	b.n	800e9ae <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	685a      	ldr	r2, [r3, #4]
 800e74a:	0013      	movs	r3, r2
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	189b      	adds	r3, r3, r2
 800e750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e752:	429a      	cmp	r2, r3
 800e754:	d305      	bcc.n	800e762 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e75c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e75e:	429a      	cmp	r2, r3
 800e760:	d906      	bls.n	800e770 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800e762:	231a      	movs	r3, #26
 800e764:	2218      	movs	r2, #24
 800e766:	189b      	adds	r3, r3, r2
 800e768:	19db      	adds	r3, r3, r7
 800e76a:	2201      	movs	r2, #1
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	e11e      	b.n	800e9ae <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e772:	613b      	str	r3, [r7, #16]
 800e774:	2300      	movs	r3, #0
 800e776:	617b      	str	r3, [r7, #20]
 800e778:	6939      	ldr	r1, [r7, #16]
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	000b      	movs	r3, r1
 800e77e:	0e1b      	lsrs	r3, r3, #24
 800e780:	0010      	movs	r0, r2
 800e782:	0205      	lsls	r5, r0, #8
 800e784:	431d      	orrs	r5, r3
 800e786:	000b      	movs	r3, r1
 800e788:	021c      	lsls	r4, r3, #8
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	085b      	lsrs	r3, r3, #1
 800e790:	60bb      	str	r3, [r7, #8]
 800e792:	2300      	movs	r3, #0
 800e794:	60fb      	str	r3, [r7, #12]
 800e796:	68b8      	ldr	r0, [r7, #8]
 800e798:	68f9      	ldr	r1, [r7, #12]
 800e79a:	1900      	adds	r0, r0, r4
 800e79c:	4169      	adcs	r1, r5
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	603b      	str	r3, [r7, #0]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	607b      	str	r3, [r7, #4]
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f7f1 feb6 	bl	800051c <__aeabi_uldivmod>
 800e7b0:	0002      	movs	r2, r0
 800e7b2:	000b      	movs	r3, r1
 800e7b4:	0013      	movs	r3, r2
 800e7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e7b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7ba:	23c0      	movs	r3, #192	@ 0xc0
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d309      	bcc.n	800e7d6 <UART_SetConfig+0x332>
 800e7c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7c4:	2380      	movs	r3, #128	@ 0x80
 800e7c6:	035b      	lsls	r3, r3, #13
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d204      	bcs.n	800e7d6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7d2:	60da      	str	r2, [r3, #12]
 800e7d4:	e0eb      	b.n	800e9ae <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800e7d6:	231a      	movs	r3, #26
 800e7d8:	2218      	movs	r2, #24
 800e7da:	189b      	adds	r3, r3, r2
 800e7dc:	19db      	adds	r3, r3, r7
 800e7de:	2201      	movs	r2, #1
 800e7e0:	701a      	strb	r2, [r3, #0]
 800e7e2:	e0e4      	b.n	800e9ae <UART_SetConfig+0x50a>
 800e7e4:	efff69f3 	.word	0xefff69f3
 800e7e8:	ffffcfff 	.word	0xffffcfff
 800e7ec:	40004800 	.word	0x40004800
 800e7f0:	fffff4ff 	.word	0xfffff4ff
 800e7f4:	40013800 	.word	0x40013800
 800e7f8:	40021000 	.word	0x40021000
 800e7fc:	40004400 	.word	0x40004400
 800e800:	40004c00 	.word	0x40004c00
 800e804:	40005000 	.word	0x40005000
 800e808:	003d0900 	.word	0x003d0900
 800e80c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	69da      	ldr	r2, [r3, #28]
 800e814:	2380      	movs	r3, #128	@ 0x80
 800e816:	021b      	lsls	r3, r3, #8
 800e818:	429a      	cmp	r2, r3
 800e81a:	d000      	beq.n	800e81e <UART_SetConfig+0x37a>
 800e81c:	e070      	b.n	800e900 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800e81e:	231b      	movs	r3, #27
 800e820:	2218      	movs	r2, #24
 800e822:	189b      	adds	r3, r3, r2
 800e824:	19db      	adds	r3, r3, r7
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	2b08      	cmp	r3, #8
 800e82a:	d822      	bhi.n	800e872 <UART_SetConfig+0x3ce>
 800e82c:	009a      	lsls	r2, r3, #2
 800e82e:	4b67      	ldr	r3, [pc, #412]	@ (800e9cc <UART_SetConfig+0x528>)
 800e830:	18d3      	adds	r3, r2, r3
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e836:	f7fe fbb3 	bl	800cfa0 <HAL_RCC_GetPCLK1Freq>
 800e83a:	0003      	movs	r3, r0
 800e83c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e83e:	e021      	b.n	800e884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e840:	f7fe fbc4 	bl	800cfcc <HAL_RCC_GetPCLK2Freq>
 800e844:	0003      	movs	r3, r0
 800e846:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e848:	e01c      	b.n	800e884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e84a:	4b61      	ldr	r3, [pc, #388]	@ (800e9d0 <UART_SetConfig+0x52c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2210      	movs	r2, #16
 800e850:	4013      	ands	r3, r2
 800e852:	d002      	beq.n	800e85a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800e854:	4b5f      	ldr	r3, [pc, #380]	@ (800e9d4 <UART_SetConfig+0x530>)
 800e856:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e858:	e014      	b.n	800e884 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800e85a:	4b5f      	ldr	r3, [pc, #380]	@ (800e9d8 <UART_SetConfig+0x534>)
 800e85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e85e:	e011      	b.n	800e884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e860:	f7fe faee 	bl	800ce40 <HAL_RCC_GetSysClockFreq>
 800e864:	0003      	movs	r3, r0
 800e866:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e868:	e00c      	b.n	800e884 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e86a:	2380      	movs	r3, #128	@ 0x80
 800e86c:	021b      	lsls	r3, r3, #8
 800e86e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e870:	e008      	b.n	800e884 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800e872:	2300      	movs	r3, #0
 800e874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800e876:	231a      	movs	r3, #26
 800e878:	2218      	movs	r2, #24
 800e87a:	189b      	adds	r3, r3, r2
 800e87c:	19db      	adds	r3, r3, r7
 800e87e:	2201      	movs	r2, #1
 800e880:	701a      	strb	r2, [r3, #0]
        break;
 800e882:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e886:	2b00      	cmp	r3, #0
 800e888:	d100      	bne.n	800e88c <UART_SetConfig+0x3e8>
 800e88a:	e090      	b.n	800e9ae <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e88e:	005a      	lsls	r2, r3, #1
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	085b      	lsrs	r3, r3, #1
 800e896:	18d2      	adds	r2, r2, r3
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	0019      	movs	r1, r3
 800e89e:	0010      	movs	r0, r2
 800e8a0:	f7f1 fc4e 	bl	8000140 <__udivsi3>
 800e8a4:	0003      	movs	r3, r0
 800e8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8aa:	2b0f      	cmp	r3, #15
 800e8ac:	d921      	bls.n	800e8f2 <UART_SetConfig+0x44e>
 800e8ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8b0:	2380      	movs	r3, #128	@ 0x80
 800e8b2:	025b      	lsls	r3, r3, #9
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d21c      	bcs.n	800e8f2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	200e      	movs	r0, #14
 800e8be:	2418      	movs	r4, #24
 800e8c0:	1903      	adds	r3, r0, r4
 800e8c2:	19db      	adds	r3, r3, r7
 800e8c4:	210f      	movs	r1, #15
 800e8c6:	438a      	bics	r2, r1
 800e8c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	085b      	lsrs	r3, r3, #1
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	2207      	movs	r2, #7
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	b299      	uxth	r1, r3
 800e8d6:	1903      	adds	r3, r0, r4
 800e8d8:	19db      	adds	r3, r3, r7
 800e8da:	1902      	adds	r2, r0, r4
 800e8dc:	19d2      	adds	r2, r2, r7
 800e8de:	8812      	ldrh	r2, [r2, #0]
 800e8e0:	430a      	orrs	r2, r1
 800e8e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	1902      	adds	r2, r0, r4
 800e8ea:	19d2      	adds	r2, r2, r7
 800e8ec:	8812      	ldrh	r2, [r2, #0]
 800e8ee:	60da      	str	r2, [r3, #12]
 800e8f0:	e05d      	b.n	800e9ae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800e8f2:	231a      	movs	r3, #26
 800e8f4:	2218      	movs	r2, #24
 800e8f6:	189b      	adds	r3, r3, r2
 800e8f8:	19db      	adds	r3, r3, r7
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	701a      	strb	r2, [r3, #0]
 800e8fe:	e056      	b.n	800e9ae <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e900:	231b      	movs	r3, #27
 800e902:	2218      	movs	r2, #24
 800e904:	189b      	adds	r3, r3, r2
 800e906:	19db      	adds	r3, r3, r7
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	2b08      	cmp	r3, #8
 800e90c:	d822      	bhi.n	800e954 <UART_SetConfig+0x4b0>
 800e90e:	009a      	lsls	r2, r3, #2
 800e910:	4b32      	ldr	r3, [pc, #200]	@ (800e9dc <UART_SetConfig+0x538>)
 800e912:	18d3      	adds	r3, r2, r3
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e918:	f7fe fb42 	bl	800cfa0 <HAL_RCC_GetPCLK1Freq>
 800e91c:	0003      	movs	r3, r0
 800e91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e920:	e021      	b.n	800e966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e922:	f7fe fb53 	bl	800cfcc <HAL_RCC_GetPCLK2Freq>
 800e926:	0003      	movs	r3, r0
 800e928:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e92a:	e01c      	b.n	800e966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e92c:	4b28      	ldr	r3, [pc, #160]	@ (800e9d0 <UART_SetConfig+0x52c>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2210      	movs	r2, #16
 800e932:	4013      	ands	r3, r2
 800e934:	d002      	beq.n	800e93c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800e936:	4b27      	ldr	r3, [pc, #156]	@ (800e9d4 <UART_SetConfig+0x530>)
 800e938:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e93a:	e014      	b.n	800e966 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800e93c:	4b26      	ldr	r3, [pc, #152]	@ (800e9d8 <UART_SetConfig+0x534>)
 800e93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e940:	e011      	b.n	800e966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e942:	f7fe fa7d 	bl	800ce40 <HAL_RCC_GetSysClockFreq>
 800e946:	0003      	movs	r3, r0
 800e948:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e94a:	e00c      	b.n	800e966 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e94c:	2380      	movs	r3, #128	@ 0x80
 800e94e:	021b      	lsls	r3, r3, #8
 800e950:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e952:	e008      	b.n	800e966 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800e954:	2300      	movs	r3, #0
 800e956:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800e958:	231a      	movs	r3, #26
 800e95a:	2218      	movs	r2, #24
 800e95c:	189b      	adds	r3, r3, r2
 800e95e:	19db      	adds	r3, r3, r7
 800e960:	2201      	movs	r2, #1
 800e962:	701a      	strb	r2, [r3, #0]
        break;
 800e964:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800e966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d020      	beq.n	800e9ae <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	085a      	lsrs	r2, r3, #1
 800e972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e974:	18d2      	adds	r2, r2, r3
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	0019      	movs	r1, r3
 800e97c:	0010      	movs	r0, r2
 800e97e:	f7f1 fbdf 	bl	8000140 <__udivsi3>
 800e982:	0003      	movs	r3, r0
 800e984:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e988:	2b0f      	cmp	r3, #15
 800e98a:	d90a      	bls.n	800e9a2 <UART_SetConfig+0x4fe>
 800e98c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e98e:	2380      	movs	r3, #128	@ 0x80
 800e990:	025b      	lsls	r3, r3, #9
 800e992:	429a      	cmp	r2, r3
 800e994:	d205      	bcs.n	800e9a2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e998:	b29a      	uxth	r2, r3
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	60da      	str	r2, [r3, #12]
 800e9a0:	e005      	b.n	800e9ae <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800e9a2:	231a      	movs	r3, #26
 800e9a4:	2218      	movs	r2, #24
 800e9a6:	189b      	adds	r3, r3, r2
 800e9a8:	19db      	adds	r3, r3, r7
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e9ba:	231a      	movs	r3, #26
 800e9bc:	2218      	movs	r2, #24
 800e9be:	189b      	adds	r3, r3, r2
 800e9c0:	19db      	adds	r3, r3, r7
 800e9c2:	781b      	ldrb	r3, [r3, #0]
}
 800e9c4:	0018      	movs	r0, r3
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	b00e      	add	sp, #56	@ 0x38
 800e9ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e9cc:	08013170 	.word	0x08013170
 800e9d0:	40021000 	.word	0x40021000
 800e9d4:	003d0900 	.word	0x003d0900
 800e9d8:	00f42400 	.word	0x00f42400
 800e9dc:	08013194 	.word	0x08013194

0800e9e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	4013      	ands	r3, r2
 800e9f0:	d00b      	beq.n	800ea0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	4a4a      	ldr	r2, [pc, #296]	@ (800eb24 <UART_AdvFeatureConfig+0x144>)
 800e9fa:	4013      	ands	r3, r2
 800e9fc:	0019      	movs	r1, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	430a      	orrs	r2, r1
 800ea08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea0e:	2202      	movs	r2, #2
 800ea10:	4013      	ands	r3, r2
 800ea12:	d00b      	beq.n	800ea2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	4a43      	ldr	r2, [pc, #268]	@ (800eb28 <UART_AdvFeatureConfig+0x148>)
 800ea1c:	4013      	ands	r3, r2
 800ea1e:	0019      	movs	r1, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	430a      	orrs	r2, r1
 800ea2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea30:	2204      	movs	r2, #4
 800ea32:	4013      	ands	r3, r2
 800ea34:	d00b      	beq.n	800ea4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	4a3b      	ldr	r2, [pc, #236]	@ (800eb2c <UART_AdvFeatureConfig+0x14c>)
 800ea3e:	4013      	ands	r3, r2
 800ea40:	0019      	movs	r1, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	430a      	orrs	r2, r1
 800ea4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea52:	2208      	movs	r2, #8
 800ea54:	4013      	ands	r3, r2
 800ea56:	d00b      	beq.n	800ea70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	4a34      	ldr	r2, [pc, #208]	@ (800eb30 <UART_AdvFeatureConfig+0x150>)
 800ea60:	4013      	ands	r3, r2
 800ea62:	0019      	movs	r1, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	430a      	orrs	r2, r1
 800ea6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea74:	2210      	movs	r2, #16
 800ea76:	4013      	ands	r3, r2
 800ea78:	d00b      	beq.n	800ea92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	4a2c      	ldr	r2, [pc, #176]	@ (800eb34 <UART_AdvFeatureConfig+0x154>)
 800ea82:	4013      	ands	r3, r2
 800ea84:	0019      	movs	r1, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	430a      	orrs	r2, r1
 800ea90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea96:	2220      	movs	r2, #32
 800ea98:	4013      	ands	r3, r2
 800ea9a:	d00b      	beq.n	800eab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	689b      	ldr	r3, [r3, #8]
 800eaa2:	4a25      	ldr	r2, [pc, #148]	@ (800eb38 <UART_AdvFeatureConfig+0x158>)
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	0019      	movs	r1, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	430a      	orrs	r2, r1
 800eab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eab8:	2240      	movs	r2, #64	@ 0x40
 800eaba:	4013      	ands	r3, r2
 800eabc:	d01d      	beq.n	800eafa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	4a1d      	ldr	r2, [pc, #116]	@ (800eb3c <UART_AdvFeatureConfig+0x15c>)
 800eac6:	4013      	ands	r3, r2
 800eac8:	0019      	movs	r1, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	430a      	orrs	r2, r1
 800ead4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eada:	2380      	movs	r3, #128	@ 0x80
 800eadc:	035b      	lsls	r3, r3, #13
 800eade:	429a      	cmp	r2, r3
 800eae0:	d10b      	bne.n	800eafa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	4a15      	ldr	r2, [pc, #84]	@ (800eb40 <UART_AdvFeatureConfig+0x160>)
 800eaea:	4013      	ands	r3, r2
 800eaec:	0019      	movs	r1, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eafe:	2280      	movs	r2, #128	@ 0x80
 800eb00:	4013      	ands	r3, r2
 800eb02:	d00b      	beq.n	800eb1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	4a0e      	ldr	r2, [pc, #56]	@ (800eb44 <UART_AdvFeatureConfig+0x164>)
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	0019      	movs	r1, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	430a      	orrs	r2, r1
 800eb1a:	605a      	str	r2, [r3, #4]
  }
}
 800eb1c:	46c0      	nop			@ (mov r8, r8)
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	b002      	add	sp, #8
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	fffdffff 	.word	0xfffdffff
 800eb28:	fffeffff 	.word	0xfffeffff
 800eb2c:	fffbffff 	.word	0xfffbffff
 800eb30:	ffff7fff 	.word	0xffff7fff
 800eb34:	ffffefff 	.word	0xffffefff
 800eb38:	ffffdfff 	.word	0xffffdfff
 800eb3c:	ffefffff 	.word	0xffefffff
 800eb40:	ff9fffff 	.word	0xff9fffff
 800eb44:	fff7ffff 	.word	0xfff7ffff

0800eb48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b092      	sub	sp, #72	@ 0x48
 800eb4c:	af02      	add	r7, sp, #8
 800eb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2284      	movs	r2, #132	@ 0x84
 800eb54:	2100      	movs	r1, #0
 800eb56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb58:	f7f9 fe00 	bl	800875c <HAL_GetTick>
 800eb5c:	0003      	movs	r3, r0
 800eb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2208      	movs	r2, #8
 800eb68:	4013      	ands	r3, r2
 800eb6a:	2b08      	cmp	r3, #8
 800eb6c:	d12c      	bne.n	800ebc8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb70:	2280      	movs	r2, #128	@ 0x80
 800eb72:	0391      	lsls	r1, r2, #14
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	4a46      	ldr	r2, [pc, #280]	@ (800ec90 <UART_CheckIdleState+0x148>)
 800eb78:	9200      	str	r2, [sp, #0]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f000 f88c 	bl	800ec98 <UART_WaitOnFlagUntilTimeout>
 800eb80:	1e03      	subs	r3, r0, #0
 800eb82:	d021      	beq.n	800ebc8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb84:	f3ef 8310 	mrs	r3, PRIMASK
 800eb88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800eb8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eb8e:	2301      	movs	r3, #1
 800eb90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb94:	f383 8810 	msr	PRIMASK, r3
}
 800eb98:	46c0      	nop			@ (mov r8, r8)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2180      	movs	r1, #128	@ 0x80
 800eba6:	438a      	bics	r2, r1
 800eba8:	601a      	str	r2, [r3, #0]
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb0:	f383 8810 	msr	PRIMASK, r3
}
 800ebb4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2220      	movs	r2, #32
 800ebba:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2278      	movs	r2, #120	@ 0x78
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebc4:	2303      	movs	r3, #3
 800ebc6:	e05f      	b.n	800ec88 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2204      	movs	r2, #4
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	2b04      	cmp	r3, #4
 800ebd4:	d146      	bne.n	800ec64 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebd8:	2280      	movs	r2, #128	@ 0x80
 800ebda:	03d1      	lsls	r1, r2, #15
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	4a2c      	ldr	r2, [pc, #176]	@ (800ec90 <UART_CheckIdleState+0x148>)
 800ebe0:	9200      	str	r2, [sp, #0]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f000 f858 	bl	800ec98 <UART_WaitOnFlagUntilTimeout>
 800ebe8:	1e03      	subs	r3, r0, #0
 800ebea:	d03b      	beq.n	800ec64 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebec:	f3ef 8310 	mrs	r3, PRIMASK
 800ebf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ebf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	f383 8810 	msr	PRIMASK, r3
}
 800ec00:	46c0      	nop			@ (mov r8, r8)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4921      	ldr	r1, [pc, #132]	@ (800ec94 <UART_CheckIdleState+0x14c>)
 800ec0e:	400a      	ands	r2, r1
 800ec10:	601a      	str	r2, [r3, #0]
 800ec12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f383 8810 	msr	PRIMASK, r3
}
 800ec1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ec22:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec24:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec26:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec28:	2301      	movs	r3, #1
 800ec2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	f383 8810 	msr	PRIMASK, r3
}
 800ec32:	46c0      	nop			@ (mov r8, r8)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	689a      	ldr	r2, [r3, #8]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2101      	movs	r1, #1
 800ec40:	438a      	bics	r2, r1
 800ec42:	609a      	str	r2, [r3, #8]
 800ec44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec46:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec48:	6a3b      	ldr	r3, [r7, #32]
 800ec4a:	f383 8810 	msr	PRIMASK, r3
}
 800ec4e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2280      	movs	r2, #128	@ 0x80
 800ec54:	2120      	movs	r1, #32
 800ec56:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2278      	movs	r2, #120	@ 0x78
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec60:	2303      	movs	r3, #3
 800ec62:	e011      	b.n	800ec88 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2220      	movs	r2, #32
 800ec68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2280      	movs	r2, #128	@ 0x80
 800ec6e:	2120      	movs	r1, #32
 800ec70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2278      	movs	r2, #120	@ 0x78
 800ec82:	2100      	movs	r1, #0
 800ec84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	0018      	movs	r0, r3
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	b010      	add	sp, #64	@ 0x40
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	01ffffff 	.word	0x01ffffff
 800ec94:	fffffedf 	.word	0xfffffedf

0800ec98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	603b      	str	r3, [r7, #0]
 800eca4:	1dfb      	adds	r3, r7, #7
 800eca6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eca8:	e04b      	b.n	800ed42 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	3301      	adds	r3, #1
 800ecae:	d048      	beq.n	800ed42 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecb0:	f7f9 fd54 	bl	800875c <HAL_GetTick>
 800ecb4:	0002      	movs	r2, r0
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d302      	bcc.n	800ecc6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d101      	bne.n	800ecca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800ecc6:	2303      	movs	r3, #3
 800ecc8:	e04b      	b.n	800ed62 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2204      	movs	r2, #4
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	d035      	beq.n	800ed42 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	69db      	ldr	r3, [r3, #28]
 800ecdc:	2208      	movs	r2, #8
 800ecde:	4013      	ands	r3, r2
 800ece0:	2b08      	cmp	r3, #8
 800ece2:	d111      	bne.n	800ed08 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2208      	movs	r2, #8
 800ecea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	0018      	movs	r0, r3
 800ecf0:	f000 f900 	bl	800eef4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2284      	movs	r2, #132	@ 0x84
 800ecf8:	2108      	movs	r1, #8
 800ecfa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2278      	movs	r2, #120	@ 0x78
 800ed00:	2100      	movs	r1, #0
 800ed02:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800ed04:	2301      	movs	r3, #1
 800ed06:	e02c      	b.n	800ed62 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	69da      	ldr	r2, [r3, #28]
 800ed0e:	2380      	movs	r3, #128	@ 0x80
 800ed10:	011b      	lsls	r3, r3, #4
 800ed12:	401a      	ands	r2, r3
 800ed14:	2380      	movs	r3, #128	@ 0x80
 800ed16:	011b      	lsls	r3, r3, #4
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d112      	bne.n	800ed42 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2280      	movs	r2, #128	@ 0x80
 800ed22:	0112      	lsls	r2, r2, #4
 800ed24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	0018      	movs	r0, r3
 800ed2a:	f000 f8e3 	bl	800eef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2284      	movs	r2, #132	@ 0x84
 800ed32:	2120      	movs	r1, #32
 800ed34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2278      	movs	r2, #120	@ 0x78
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ed3e:	2303      	movs	r3, #3
 800ed40:	e00f      	b.n	800ed62 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	69db      	ldr	r3, [r3, #28]
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	425a      	negs	r2, r3
 800ed52:	4153      	adcs	r3, r2
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	001a      	movs	r2, r3
 800ed58:	1dfb      	adds	r3, r7, #7
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d0a4      	beq.n	800ecaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	0018      	movs	r0, r3
 800ed64:	46bd      	mov	sp, r7
 800ed66:	b004      	add	sp, #16
 800ed68:	bd80      	pop	{r7, pc}
	...

0800ed6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b090      	sub	sp, #64	@ 0x40
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	1dbb      	adds	r3, r7, #6
 800ed78:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	1dba      	adds	r2, r7, #6
 800ed84:	2158      	movs	r1, #88	@ 0x58
 800ed86:	8812      	ldrh	r2, [r2, #0]
 800ed88:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2284      	movs	r2, #132	@ 0x84
 800ed8e:	2100      	movs	r1, #0
 800ed90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2280      	movs	r2, #128	@ 0x80
 800ed96:	2122      	movs	r1, #34	@ 0x22
 800ed98:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d028      	beq.n	800edf4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eda6:	4a3e      	ldr	r2, [pc, #248]	@ (800eea0 <UART_Start_Receive_DMA+0x134>)
 800eda8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edae:	4a3d      	ldr	r2, [pc, #244]	@ (800eea4 <UART_Start_Receive_DMA+0x138>)
 800edb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edb6:	4a3c      	ldr	r2, [pc, #240]	@ (800eea8 <UART_Start_Receive_DMA+0x13c>)
 800edb8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edbe:	2200      	movs	r2, #0
 800edc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	3324      	adds	r3, #36	@ 0x24
 800edcc:	0019      	movs	r1, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edd2:	001a      	movs	r2, r3
 800edd4:	1dbb      	adds	r3, r7, #6
 800edd6:	881b      	ldrh	r3, [r3, #0]
 800edd8:	f7fa fa20 	bl	800921c <HAL_DMA_Start_IT>
 800eddc:	1e03      	subs	r3, r0, #0
 800edde:	d009      	beq.n	800edf4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2284      	movs	r2, #132	@ 0x84
 800ede4:	2110      	movs	r1, #16
 800ede6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2280      	movs	r2, #128	@ 0x80
 800edec:	2120      	movs	r1, #32
 800edee:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	e050      	b.n	800ee96 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	691b      	ldr	r3, [r3, #16]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d019      	beq.n	800ee30 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edfc:	f3ef 8310 	mrs	r3, PRIMASK
 800ee00:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800ee02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee06:	2301      	movs	r3, #1
 800ee08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee0c:	f383 8810 	msr	PRIMASK, r3
}
 800ee10:	46c0      	nop			@ (mov r8, r8)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2180      	movs	r1, #128	@ 0x80
 800ee1e:	0049      	lsls	r1, r1, #1
 800ee20:	430a      	orrs	r2, r1
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee26:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2a:	f383 8810 	msr	PRIMASK, r3
}
 800ee2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee30:	f3ef 8310 	mrs	r3, PRIMASK
 800ee34:	613b      	str	r3, [r7, #16]
  return(result);
 800ee36:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee38:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	f383 8810 	msr	PRIMASK, r3
}
 800ee44:	46c0      	nop			@ (mov r8, r8)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	689a      	ldr	r2, [r3, #8]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2101      	movs	r1, #1
 800ee52:	430a      	orrs	r2, r1
 800ee54:	609a      	str	r2, [r3, #8]
 800ee56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	f383 8810 	msr	PRIMASK, r3
}
 800ee60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee62:	f3ef 8310 	mrs	r3, PRIMASK
 800ee66:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee68:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee70:	6a3b      	ldr	r3, [r7, #32]
 800ee72:	f383 8810 	msr	PRIMASK, r3
}
 800ee76:	46c0      	nop			@ (mov r8, r8)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	689a      	ldr	r2, [r3, #8]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2140      	movs	r1, #64	@ 0x40
 800ee84:	430a      	orrs	r2, r1
 800ee86:	609a      	str	r2, [r3, #8]
 800ee88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8e:	f383 8810 	msr	PRIMASK, r3
}
 800ee92:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800ee94:	2300      	movs	r3, #0
}
 800ee96:	0018      	movs	r0, r3
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	b010      	add	sp, #64	@ 0x40
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	46c0      	nop			@ (mov r8, r8)
 800eea0:	0800f07d 	.word	0x0800f07d
 800eea4:	0800f1b1 	.word	0x0800f1b1
 800eea8:	0800f1f9 	.word	0x0800f1f9

0800eeac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b086      	sub	sp, #24
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeb4:	f3ef 8310 	mrs	r3, PRIMASK
 800eeb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800eeba:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eebc:	617b      	str	r3, [r7, #20]
 800eebe:	2301      	movs	r3, #1
 800eec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f383 8810 	msr	PRIMASK, r3
}
 800eec8:	46c0      	nop			@ (mov r8, r8)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	21c0      	movs	r1, #192	@ 0xc0
 800eed6:	438a      	bics	r2, r1
 800eed8:	601a      	str	r2, [r3, #0]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	f383 8810 	msr	PRIMASK, r3
}
 800eee4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2220      	movs	r2, #32
 800eeea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800eeec:	46c0      	nop			@ (mov r8, r8)
 800eeee:	46bd      	mov	sp, r7
 800eef0:	b006      	add	sp, #24
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b08e      	sub	sp, #56	@ 0x38
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eefc:	f3ef 8310 	mrs	r3, PRIMASK
 800ef00:	617b      	str	r3, [r7, #20]
  return(result);
 800ef02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef06:	2301      	movs	r3, #1
 800ef08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	f383 8810 	msr	PRIMASK, r3
}
 800ef10:	46c0      	nop			@ (mov r8, r8)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4926      	ldr	r1, [pc, #152]	@ (800efb8 <UART_EndRxTransfer+0xc4>)
 800ef1e:	400a      	ands	r2, r1
 800ef20:	601a      	str	r2, [r3, #0]
 800ef22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	f383 8810 	msr	PRIMASK, r3
}
 800ef2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ef32:	623b      	str	r3, [r7, #32]
  return(result);
 800ef34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef36:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef38:	2301      	movs	r3, #1
 800ef3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3e:	f383 8810 	msr	PRIMASK, r3
}
 800ef42:	46c0      	nop			@ (mov r8, r8)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	689a      	ldr	r2, [r3, #8]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2101      	movs	r1, #1
 800ef50:	438a      	bics	r2, r1
 800ef52:	609a      	str	r2, [r3, #8]
 800ef54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5a:	f383 8810 	msr	PRIMASK, r3
}
 800ef5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d118      	bne.n	800ef9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef68:	f3ef 8310 	mrs	r3, PRIMASK
 800ef6c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef72:	2301      	movs	r3, #1
 800ef74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f383 8810 	msr	PRIMASK, r3
}
 800ef7c:	46c0      	nop			@ (mov r8, r8)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2110      	movs	r1, #16
 800ef8a:	438a      	bics	r2, r1
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	f383 8810 	msr	PRIMASK, r3
}
 800ef98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2280      	movs	r2, #128	@ 0x80
 800ef9e:	2120      	movs	r1, #32
 800efa0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800efae:	46c0      	nop			@ (mov r8, r8)
 800efb0:	46bd      	mov	sp, r7
 800efb2:	b00e      	add	sp, #56	@ 0x38
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	46c0      	nop			@ (mov r8, r8)
 800efb8:	fffffedf 	.word	0xfffffedf

0800efbc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b08c      	sub	sp, #48	@ 0x30
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2220      	movs	r2, #32
 800efd2:	4013      	ands	r3, r2
 800efd4:	d135      	bne.n	800f042 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800efd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd8:	2252      	movs	r2, #82	@ 0x52
 800efda:	2100      	movs	r1, #0
 800efdc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efde:	f3ef 8310 	mrs	r3, PRIMASK
 800efe2:	60fb      	str	r3, [r7, #12]
  return(result);
 800efe4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800efe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800efe8:	2301      	movs	r3, #1
 800efea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	f383 8810 	msr	PRIMASK, r3
}
 800eff2:	46c0      	nop			@ (mov r8, r8)
 800eff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	689a      	ldr	r2, [r3, #8]
 800effa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2180      	movs	r1, #128	@ 0x80
 800f000:	438a      	bics	r2, r1
 800f002:	609a      	str	r2, [r3, #8]
 800f004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	f383 8810 	msr	PRIMASK, r3
}
 800f00e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f010:	f3ef 8310 	mrs	r3, PRIMASK
 800f014:	61bb      	str	r3, [r7, #24]
  return(result);
 800f016:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f018:	627b      	str	r3, [r7, #36]	@ 0x24
 800f01a:	2301      	movs	r3, #1
 800f01c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	f383 8810 	msr	PRIMASK, r3
}
 800f024:	46c0      	nop			@ (mov r8, r8)
 800f026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2140      	movs	r1, #64	@ 0x40
 800f032:	430a      	orrs	r2, r1
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f038:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f03a:	6a3b      	ldr	r3, [r7, #32]
 800f03c:	f383 8810 	msr	PRIMASK, r3
}
 800f040:	e006      	b.n	800f050 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800f042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f044:	228c      	movs	r2, #140	@ 0x8c
 800f046:	589b      	ldr	r3, [r3, r2]
 800f048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f04a:	0010      	movs	r0, r2
 800f04c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f04e:	46c0      	nop			@ (mov r8, r8)
 800f050:	46c0      	nop			@ (mov r8, r8)
 800f052:	46bd      	mov	sp, r7
 800f054:	b00c      	add	sp, #48	@ 0x30
 800f056:	bd80      	pop	{r7, pc}

0800f058 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f064:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2288      	movs	r2, #136	@ 0x88
 800f06a:	589b      	ldr	r3, [r3, r2]
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	0010      	movs	r0, r2
 800f070:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f072:	46c0      	nop			@ (mov r8, r8)
 800f074:	46bd      	mov	sp, r7
 800f076:	b004      	add	sp, #16
 800f078:	bd80      	pop	{r7, pc}
	...

0800f07c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b094      	sub	sp, #80	@ 0x50
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f088:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2220      	movs	r2, #32
 800f092:	4013      	ands	r3, r2
 800f094:	d16f      	bne.n	800f176 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800f096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f098:	225a      	movs	r2, #90	@ 0x5a
 800f09a:	2100      	movs	r1, #0
 800f09c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f09e:	f3ef 8310 	mrs	r3, PRIMASK
 800f0a2:	61bb      	str	r3, [r7, #24]
  return(result);
 800f0a4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	f383 8810 	msr	PRIMASK, r3
}
 800f0b2:	46c0      	nop			@ (mov r8, r8)
 800f0b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	493b      	ldr	r1, [pc, #236]	@ (800f1ac <UART_DMAReceiveCplt+0x130>)
 800f0c0:	400a      	ands	r2, r1
 800f0c2:	601a      	str	r2, [r3, #0]
 800f0c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0c8:	6a3b      	ldr	r3, [r7, #32]
 800f0ca:	f383 8810 	msr	PRIMASK, r3
}
 800f0ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0d0:	f3ef 8310 	mrs	r3, PRIMASK
 800f0d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0da:	2301      	movs	r3, #1
 800f0dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e0:	f383 8810 	msr	PRIMASK, r3
}
 800f0e4:	46c0      	nop			@ (mov r8, r8)
 800f0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	689a      	ldr	r2, [r3, #8]
 800f0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	438a      	bics	r2, r1
 800f0f4:	609a      	str	r2, [r3, #8]
 800f0f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fc:	f383 8810 	msr	PRIMASK, r3
}
 800f100:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f102:	f3ef 8310 	mrs	r3, PRIMASK
 800f106:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f10a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f10c:	2301      	movs	r3, #1
 800f10e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f112:	f383 8810 	msr	PRIMASK, r3
}
 800f116:	46c0      	nop			@ (mov r8, r8)
 800f118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	689a      	ldr	r2, [r3, #8]
 800f11e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2140      	movs	r1, #64	@ 0x40
 800f124:	438a      	bics	r2, r1
 800f126:	609a      	str	r2, [r3, #8]
 800f128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f12a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12e:	f383 8810 	msr	PRIMASK, r3
}
 800f132:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f136:	2280      	movs	r2, #128	@ 0x80
 800f138:	2120      	movs	r1, #32
 800f13a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f13c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f13e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f140:	2b01      	cmp	r3, #1
 800f142:	d118      	bne.n	800f176 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f144:	f3ef 8310 	mrs	r3, PRIMASK
 800f148:	60fb      	str	r3, [r7, #12]
  return(result);
 800f14a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f14e:	2301      	movs	r3, #1
 800f150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	f383 8810 	msr	PRIMASK, r3
}
 800f158:	46c0      	nop			@ (mov r8, r8)
 800f15a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2110      	movs	r1, #16
 800f166:	438a      	bics	r2, r1
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f16c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	f383 8810 	msr	PRIMASK, r3
}
 800f174:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f178:	2200      	movs	r2, #0
 800f17a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f17e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f180:	2b01      	cmp	r3, #1
 800f182:	d109      	bne.n	800f198 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800f184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f186:	22ac      	movs	r2, #172	@ 0xac
 800f188:	589b      	ldr	r3, [r3, r2]
 800f18a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f18c:	2158      	movs	r1, #88	@ 0x58
 800f18e:	5a51      	ldrh	r1, [r2, r1]
 800f190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f192:	0010      	movs	r0, r2
 800f194:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f196:	e005      	b.n	800f1a4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800f198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f19a:	2294      	movs	r2, #148	@ 0x94
 800f19c:	589b      	ldr	r3, [r3, r2]
 800f19e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f1a0:	0010      	movs	r0, r2
 800f1a2:	4798      	blx	r3
}
 800f1a4:	46c0      	nop			@ (mov r8, r8)
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	b014      	add	sp, #80	@ 0x50
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	fffffeff 	.word	0xfffffeff

0800f1b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d10b      	bne.n	800f1e4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	22ac      	movs	r2, #172	@ 0xac
 800f1d0:	589b      	ldr	r3, [r3, r2]
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	2158      	movs	r1, #88	@ 0x58
 800f1d6:	5a52      	ldrh	r2, [r2, r1]
 800f1d8:	0852      	lsrs	r2, r2, #1
 800f1da:	b291      	uxth	r1, r2
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	0010      	movs	r0, r2
 800f1e0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f1e2:	e005      	b.n	800f1f0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2290      	movs	r2, #144	@ 0x90
 800f1e8:	589b      	ldr	r3, [r3, r2]
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	0010      	movs	r0, r2
 800f1ee:	4798      	blx	r3
}
 800f1f0:	46c0      	nop			@ (mov r8, r8)
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	b004      	add	sp, #16
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f204:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f20a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	2280      	movs	r2, #128	@ 0x80
 800f210:	589b      	ldr	r3, [r3, r2]
 800f212:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	2280      	movs	r2, #128	@ 0x80
 800f21c:	4013      	ands	r3, r2
 800f21e:	2b80      	cmp	r3, #128	@ 0x80
 800f220:	d10a      	bne.n	800f238 <UART_DMAError+0x40>
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	2b21      	cmp	r3, #33	@ 0x21
 800f226:	d107      	bne.n	800f238 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	2252      	movs	r2, #82	@ 0x52
 800f22c:	2100      	movs	r1, #0
 800f22e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	0018      	movs	r0, r3
 800f234:	f7ff fe3a 	bl	800eeac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	2240      	movs	r2, #64	@ 0x40
 800f240:	4013      	ands	r3, r2
 800f242:	2b40      	cmp	r3, #64	@ 0x40
 800f244:	d10a      	bne.n	800f25c <UART_DMAError+0x64>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2b22      	cmp	r3, #34	@ 0x22
 800f24a:	d107      	bne.n	800f25c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	225a      	movs	r2, #90	@ 0x5a
 800f250:	2100      	movs	r1, #0
 800f252:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	0018      	movs	r0, r3
 800f258:	f7ff fe4c 	bl	800eef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	2284      	movs	r2, #132	@ 0x84
 800f260:	589b      	ldr	r3, [r3, r2]
 800f262:	2210      	movs	r2, #16
 800f264:	431a      	orrs	r2, r3
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2184      	movs	r1, #132	@ 0x84
 800f26a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	2298      	movs	r2, #152	@ 0x98
 800f270:	589b      	ldr	r3, [r3, r2]
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	0010      	movs	r0, r2
 800f276:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f278:	46c0      	nop			@ (mov r8, r8)
 800f27a:	46bd      	mov	sp, r7
 800f27c:	b006      	add	sp, #24
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f28c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	225a      	movs	r2, #90	@ 0x5a
 800f292:	2100      	movs	r1, #0
 800f294:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2252      	movs	r2, #82	@ 0x52
 800f29a:	2100      	movs	r1, #0
 800f29c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2298      	movs	r2, #152	@ 0x98
 800f2a2:	589b      	ldr	r3, [r3, r2]
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	0010      	movs	r0, r2
 800f2a8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2aa:	46c0      	nop			@ (mov r8, r8)
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	b004      	add	sp, #16
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b086      	sub	sp, #24
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2ba:	f3ef 8310 	mrs	r3, PRIMASK
 800f2be:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f2c2:	617b      	str	r3, [r7, #20]
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f383 8810 	msr	PRIMASK, r3
}
 800f2ce:	46c0      	nop			@ (mov r8, r8)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2140      	movs	r1, #64	@ 0x40
 800f2dc:	438a      	bics	r2, r1
 800f2de:	601a      	str	r2, [r3, #0]
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	f383 8810 	msr	PRIMASK, r3
}
 800f2ea:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2220      	movs	r2, #32
 800f2f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	228c      	movs	r2, #140	@ 0x8c
 800f2fc:	589b      	ldr	r3, [r3, r2]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	0010      	movs	r0, r2
 800f302:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f304:	46c0      	nop			@ (mov r8, r8)
 800f306:	46bd      	mov	sp, r7
 800f308:	b006      	add	sp, #24
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f314:	46c0      	nop			@ (mov r8, r8)
 800f316:	46bd      	mov	sp, r7
 800f318:	b002      	add	sp, #8
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f324:	4b09      	ldr	r3, [pc, #36]	@ (800f34c <USB_DisableGlobalInt+0x30>)
 800f326:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2240      	movs	r2, #64	@ 0x40
 800f32c:	5a9b      	ldrh	r3, [r3, r2]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	b292      	uxth	r2, r2
 800f334:	43d2      	mvns	r2, r2
 800f336:	b292      	uxth	r2, r2
 800f338:	4013      	ands	r3, r2
 800f33a:	b299      	uxth	r1, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2240      	movs	r2, #64	@ 0x40
 800f340:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f342:	2300      	movs	r3, #0
}
 800f344:	0018      	movs	r0, r3
 800f346:	46bd      	mov	sp, r7
 800f348:	b004      	add	sp, #16
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	0000bf80 	.word	0x0000bf80

0800f350 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f350:	b084      	sub	sp, #16
 800f352:	b590      	push	{r4, r7, lr}
 800f354:	b083      	sub	sp, #12
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
 800f35a:	2004      	movs	r0, #4
 800f35c:	2410      	movs	r4, #16
 800f35e:	1900      	adds	r0, r0, r4
 800f360:	2408      	movs	r4, #8
 800f362:	46a4      	mov	ip, r4
 800f364:	44bc      	add	ip, r7
 800f366:	4460      	add	r0, ip
 800f368:	6001      	str	r1, [r0, #0]
 800f36a:	6042      	str	r2, [r0, #4]
 800f36c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2240      	movs	r2, #64	@ 0x40
 800f372:	2101      	movs	r1, #1
 800f374:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2240      	movs	r2, #64	@ 0x40
 800f37a:	2100      	movs	r1, #0
 800f37c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2244      	movs	r2, #68	@ 0x44
 800f382:	2100      	movs	r1, #0
 800f384:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2250      	movs	r2, #80	@ 0x50
 800f38a:	2100      	movs	r1, #0
 800f38c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	0018      	movs	r0, r3
 800f392:	46bd      	mov	sp, r7
 800f394:	b003      	add	sp, #12
 800f396:	bc90      	pop	{r4, r7}
 800f398:	bc08      	pop	{r3}
 800f39a:	b004      	add	sp, #16
 800f39c:	4718      	bx	r3

0800f39e <__cvt>:
 800f39e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3a0:	001f      	movs	r7, r3
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	0016      	movs	r6, r2
 800f3a6:	b08b      	sub	sp, #44	@ 0x2c
 800f3a8:	429f      	cmp	r7, r3
 800f3aa:	da04      	bge.n	800f3b6 <__cvt+0x18>
 800f3ac:	2180      	movs	r1, #128	@ 0x80
 800f3ae:	0609      	lsls	r1, r1, #24
 800f3b0:	187b      	adds	r3, r7, r1
 800f3b2:	001f      	movs	r7, r3
 800f3b4:	232d      	movs	r3, #45	@ 0x2d
 800f3b6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f3b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f3ba:	7013      	strb	r3, [r2, #0]
 800f3bc:	2320      	movs	r3, #32
 800f3be:	2203      	movs	r2, #3
 800f3c0:	439d      	bics	r5, r3
 800f3c2:	2d46      	cmp	r5, #70	@ 0x46
 800f3c4:	d007      	beq.n	800f3d6 <__cvt+0x38>
 800f3c6:	002b      	movs	r3, r5
 800f3c8:	3b45      	subs	r3, #69	@ 0x45
 800f3ca:	4259      	negs	r1, r3
 800f3cc:	414b      	adcs	r3, r1
 800f3ce:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f3d0:	3a01      	subs	r2, #1
 800f3d2:	18cb      	adds	r3, r1, r3
 800f3d4:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3d6:	ab09      	add	r3, sp, #36	@ 0x24
 800f3d8:	9304      	str	r3, [sp, #16]
 800f3da:	ab08      	add	r3, sp, #32
 800f3dc:	9303      	str	r3, [sp, #12]
 800f3de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f3e0:	9200      	str	r2, [sp, #0]
 800f3e2:	9302      	str	r3, [sp, #8]
 800f3e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3e6:	0032      	movs	r2, r6
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	003b      	movs	r3, r7
 800f3ec:	f000 fefc 	bl	80101e8 <_dtoa_r>
 800f3f0:	0004      	movs	r4, r0
 800f3f2:	2d47      	cmp	r5, #71	@ 0x47
 800f3f4:	d11b      	bne.n	800f42e <__cvt+0x90>
 800f3f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f3f8:	07db      	lsls	r3, r3, #31
 800f3fa:	d511      	bpl.n	800f420 <__cvt+0x82>
 800f3fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3fe:	18c3      	adds	r3, r0, r3
 800f400:	9307      	str	r3, [sp, #28]
 800f402:	2200      	movs	r2, #0
 800f404:	2300      	movs	r3, #0
 800f406:	0030      	movs	r0, r6
 800f408:	0039      	movs	r1, r7
 800f40a:	f7f1 f81f 	bl	800044c <__aeabi_dcmpeq>
 800f40e:	2800      	cmp	r0, #0
 800f410:	d001      	beq.n	800f416 <__cvt+0x78>
 800f412:	9b07      	ldr	r3, [sp, #28]
 800f414:	9309      	str	r3, [sp, #36]	@ 0x24
 800f416:	2230      	movs	r2, #48	@ 0x30
 800f418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41a:	9907      	ldr	r1, [sp, #28]
 800f41c:	428b      	cmp	r3, r1
 800f41e:	d320      	bcc.n	800f462 <__cvt+0xc4>
 800f420:	0020      	movs	r0, r4
 800f422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f424:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f426:	1b1b      	subs	r3, r3, r4
 800f428:	6013      	str	r3, [r2, #0]
 800f42a:	b00b      	add	sp, #44	@ 0x2c
 800f42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f42e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f430:	18c3      	adds	r3, r0, r3
 800f432:	9307      	str	r3, [sp, #28]
 800f434:	2d46      	cmp	r5, #70	@ 0x46
 800f436:	d1e4      	bne.n	800f402 <__cvt+0x64>
 800f438:	7803      	ldrb	r3, [r0, #0]
 800f43a:	2b30      	cmp	r3, #48	@ 0x30
 800f43c:	d10c      	bne.n	800f458 <__cvt+0xba>
 800f43e:	2200      	movs	r2, #0
 800f440:	2300      	movs	r3, #0
 800f442:	0030      	movs	r0, r6
 800f444:	0039      	movs	r1, r7
 800f446:	f7f1 f801 	bl	800044c <__aeabi_dcmpeq>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d104      	bne.n	800f458 <__cvt+0xba>
 800f44e:	2301      	movs	r3, #1
 800f450:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f452:	1a9b      	subs	r3, r3, r2
 800f454:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f456:	6013      	str	r3, [r2, #0]
 800f458:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f45a:	9a07      	ldr	r2, [sp, #28]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	18d3      	adds	r3, r2, r3
 800f460:	e7ce      	b.n	800f400 <__cvt+0x62>
 800f462:	1c59      	adds	r1, r3, #1
 800f464:	9109      	str	r1, [sp, #36]	@ 0x24
 800f466:	701a      	strb	r2, [r3, #0]
 800f468:	e7d6      	b.n	800f418 <__cvt+0x7a>

0800f46a <__exponent>:
 800f46a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f46c:	232b      	movs	r3, #43	@ 0x2b
 800f46e:	0005      	movs	r5, r0
 800f470:	000c      	movs	r4, r1
 800f472:	b085      	sub	sp, #20
 800f474:	7002      	strb	r2, [r0, #0]
 800f476:	2900      	cmp	r1, #0
 800f478:	da01      	bge.n	800f47e <__exponent+0x14>
 800f47a:	424c      	negs	r4, r1
 800f47c:	3302      	adds	r3, #2
 800f47e:	706b      	strb	r3, [r5, #1]
 800f480:	2c09      	cmp	r4, #9
 800f482:	dd2c      	ble.n	800f4de <__exponent+0x74>
 800f484:	ab02      	add	r3, sp, #8
 800f486:	1dde      	adds	r6, r3, #7
 800f488:	0020      	movs	r0, r4
 800f48a:	210a      	movs	r1, #10
 800f48c:	f7f0 ffc8 	bl	8000420 <__aeabi_idivmod>
 800f490:	0037      	movs	r7, r6
 800f492:	3130      	adds	r1, #48	@ 0x30
 800f494:	3e01      	subs	r6, #1
 800f496:	0020      	movs	r0, r4
 800f498:	7031      	strb	r1, [r6, #0]
 800f49a:	210a      	movs	r1, #10
 800f49c:	9401      	str	r4, [sp, #4]
 800f49e:	f7f0 fed9 	bl	8000254 <__divsi3>
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	0004      	movs	r4, r0
 800f4a6:	2b63      	cmp	r3, #99	@ 0x63
 800f4a8:	dcee      	bgt.n	800f488 <__exponent+0x1e>
 800f4aa:	1eba      	subs	r2, r7, #2
 800f4ac:	1ca8      	adds	r0, r5, #2
 800f4ae:	0001      	movs	r1, r0
 800f4b0:	0013      	movs	r3, r2
 800f4b2:	3430      	adds	r4, #48	@ 0x30
 800f4b4:	7014      	strb	r4, [r2, #0]
 800f4b6:	ac02      	add	r4, sp, #8
 800f4b8:	3407      	adds	r4, #7
 800f4ba:	429c      	cmp	r4, r3
 800f4bc:	d80a      	bhi.n	800f4d4 <__exponent+0x6a>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	42a2      	cmp	r2, r4
 800f4c2:	d803      	bhi.n	800f4cc <__exponent+0x62>
 800f4c4:	3309      	adds	r3, #9
 800f4c6:	aa02      	add	r2, sp, #8
 800f4c8:	189b      	adds	r3, r3, r2
 800f4ca:	1bdb      	subs	r3, r3, r7
 800f4cc:	18c0      	adds	r0, r0, r3
 800f4ce:	1b40      	subs	r0, r0, r5
 800f4d0:	b005      	add	sp, #20
 800f4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4d4:	781c      	ldrb	r4, [r3, #0]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	700c      	strb	r4, [r1, #0]
 800f4da:	3101      	adds	r1, #1
 800f4dc:	e7eb      	b.n	800f4b6 <__exponent+0x4c>
 800f4de:	2330      	movs	r3, #48	@ 0x30
 800f4e0:	18e4      	adds	r4, r4, r3
 800f4e2:	70ab      	strb	r3, [r5, #2]
 800f4e4:	1d28      	adds	r0, r5, #4
 800f4e6:	70ec      	strb	r4, [r5, #3]
 800f4e8:	e7f1      	b.n	800f4ce <__exponent+0x64>
	...

0800f4ec <_printf_float>:
 800f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ee:	b097      	sub	sp, #92	@ 0x5c
 800f4f0:	000d      	movs	r5, r1
 800f4f2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f4f4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f4f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800f4fa:	f000 fd5d 	bl	800ffb8 <_localeconv_r>
 800f4fe:	6803      	ldr	r3, [r0, #0]
 800f500:	0018      	movs	r0, r3
 800f502:	930d      	str	r3, [sp, #52]	@ 0x34
 800f504:	f7f0 fe00 	bl	8000108 <strlen>
 800f508:	2300      	movs	r3, #0
 800f50a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f50c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f50e:	7e2b      	ldrb	r3, [r5, #24]
 800f510:	2207      	movs	r2, #7
 800f512:	930c      	str	r3, [sp, #48]	@ 0x30
 800f514:	682b      	ldr	r3, [r5, #0]
 800f516:	930e      	str	r3, [sp, #56]	@ 0x38
 800f518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	05c9      	lsls	r1, r1, #23
 800f51e:	d545      	bpl.n	800f5ac <_printf_float+0xc0>
 800f520:	189b      	adds	r3, r3, r2
 800f522:	4393      	bics	r3, r2
 800f524:	001a      	movs	r2, r3
 800f526:	3208      	adds	r2, #8
 800f528:	6022      	str	r2, [r4, #0]
 800f52a:	2201      	movs	r2, #1
 800f52c:	681e      	ldr	r6, [r3, #0]
 800f52e:	685f      	ldr	r7, [r3, #4]
 800f530:	007b      	lsls	r3, r7, #1
 800f532:	085b      	lsrs	r3, r3, #1
 800f534:	9311      	str	r3, [sp, #68]	@ 0x44
 800f536:	9610      	str	r6, [sp, #64]	@ 0x40
 800f538:	64ae      	str	r6, [r5, #72]	@ 0x48
 800f53a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800f53c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f53e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f540:	4ba7      	ldr	r3, [pc, #668]	@ (800f7e0 <_printf_float+0x2f4>)
 800f542:	4252      	negs	r2, r2
 800f544:	f7f3 fe5c 	bl	8003200 <__aeabi_dcmpun>
 800f548:	2800      	cmp	r0, #0
 800f54a:	d131      	bne.n	800f5b0 <_printf_float+0xc4>
 800f54c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f54e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f550:	2201      	movs	r2, #1
 800f552:	4ba3      	ldr	r3, [pc, #652]	@ (800f7e0 <_printf_float+0x2f4>)
 800f554:	4252      	negs	r2, r2
 800f556:	f7f0 ff89 	bl	800046c <__aeabi_dcmple>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	d128      	bne.n	800f5b0 <_printf_float+0xc4>
 800f55e:	2200      	movs	r2, #0
 800f560:	2300      	movs	r3, #0
 800f562:	0030      	movs	r0, r6
 800f564:	0039      	movs	r1, r7
 800f566:	f7f0 ff77 	bl	8000458 <__aeabi_dcmplt>
 800f56a:	2800      	cmp	r0, #0
 800f56c:	d003      	beq.n	800f576 <_printf_float+0x8a>
 800f56e:	002b      	movs	r3, r5
 800f570:	222d      	movs	r2, #45	@ 0x2d
 800f572:	3343      	adds	r3, #67	@ 0x43
 800f574:	701a      	strb	r2, [r3, #0]
 800f576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f578:	4f9a      	ldr	r7, [pc, #616]	@ (800f7e4 <_printf_float+0x2f8>)
 800f57a:	2b47      	cmp	r3, #71	@ 0x47
 800f57c:	d900      	bls.n	800f580 <_printf_float+0x94>
 800f57e:	4f9a      	ldr	r7, [pc, #616]	@ (800f7e8 <_printf_float+0x2fc>)
 800f580:	2303      	movs	r3, #3
 800f582:	2400      	movs	r4, #0
 800f584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f586:	612b      	str	r3, [r5, #16]
 800f588:	3301      	adds	r3, #1
 800f58a:	439a      	bics	r2, r3
 800f58c:	602a      	str	r2, [r5, #0]
 800f58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f590:	0029      	movs	r1, r5
 800f592:	9300      	str	r3, [sp, #0]
 800f594:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f598:	aa15      	add	r2, sp, #84	@ 0x54
 800f59a:	f000 f9e5 	bl	800f968 <_printf_common>
 800f59e:	3001      	adds	r0, #1
 800f5a0:	d000      	beq.n	800f5a4 <_printf_float+0xb8>
 800f5a2:	e09f      	b.n	800f6e4 <_printf_float+0x1f8>
 800f5a4:	2001      	movs	r0, #1
 800f5a6:	4240      	negs	r0, r0
 800f5a8:	b017      	add	sp, #92	@ 0x5c
 800f5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ac:	3307      	adds	r3, #7
 800f5ae:	e7b8      	b.n	800f522 <_printf_float+0x36>
 800f5b0:	0032      	movs	r2, r6
 800f5b2:	003b      	movs	r3, r7
 800f5b4:	0030      	movs	r0, r6
 800f5b6:	0039      	movs	r1, r7
 800f5b8:	f7f3 fe22 	bl	8003200 <__aeabi_dcmpun>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d00b      	beq.n	800f5d8 <_printf_float+0xec>
 800f5c0:	2f00      	cmp	r7, #0
 800f5c2:	da03      	bge.n	800f5cc <_printf_float+0xe0>
 800f5c4:	002b      	movs	r3, r5
 800f5c6:	222d      	movs	r2, #45	@ 0x2d
 800f5c8:	3343      	adds	r3, #67	@ 0x43
 800f5ca:	701a      	strb	r2, [r3, #0]
 800f5cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5ce:	4f87      	ldr	r7, [pc, #540]	@ (800f7ec <_printf_float+0x300>)
 800f5d0:	2b47      	cmp	r3, #71	@ 0x47
 800f5d2:	d9d5      	bls.n	800f580 <_printf_float+0x94>
 800f5d4:	4f86      	ldr	r7, [pc, #536]	@ (800f7f0 <_printf_float+0x304>)
 800f5d6:	e7d3      	b.n	800f580 <_printf_float+0x94>
 800f5d8:	2220      	movs	r2, #32
 800f5da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f5dc:	686b      	ldr	r3, [r5, #4]
 800f5de:	4394      	bics	r4, r2
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	d146      	bne.n	800f672 <_printf_float+0x186>
 800f5e4:	3307      	adds	r3, #7
 800f5e6:	606b      	str	r3, [r5, #4]
 800f5e8:	2380      	movs	r3, #128	@ 0x80
 800f5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5ec:	00db      	lsls	r3, r3, #3
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	602b      	str	r3, [r5, #0]
 800f5f4:	9206      	str	r2, [sp, #24]
 800f5f6:	aa14      	add	r2, sp, #80	@ 0x50
 800f5f8:	9205      	str	r2, [sp, #20]
 800f5fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f5fc:	a90a      	add	r1, sp, #40	@ 0x28
 800f5fe:	9204      	str	r2, [sp, #16]
 800f600:	aa13      	add	r2, sp, #76	@ 0x4c
 800f602:	9203      	str	r2, [sp, #12]
 800f604:	2223      	movs	r2, #35	@ 0x23
 800f606:	1852      	adds	r2, r2, r1
 800f608:	9202      	str	r2, [sp, #8]
 800f60a:	9301      	str	r3, [sp, #4]
 800f60c:	686b      	ldr	r3, [r5, #4]
 800f60e:	0032      	movs	r2, r6
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f614:	003b      	movs	r3, r7
 800f616:	f7ff fec2 	bl	800f39e <__cvt>
 800f61a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f61c:	0007      	movs	r7, r0
 800f61e:	2c47      	cmp	r4, #71	@ 0x47
 800f620:	d12d      	bne.n	800f67e <_printf_float+0x192>
 800f622:	1cd3      	adds	r3, r2, #3
 800f624:	db02      	blt.n	800f62c <_printf_float+0x140>
 800f626:	686b      	ldr	r3, [r5, #4]
 800f628:	429a      	cmp	r2, r3
 800f62a:	dd48      	ble.n	800f6be <_printf_float+0x1d2>
 800f62c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f62e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f630:	3b02      	subs	r3, #2
 800f632:	b2db      	uxtb	r3, r3
 800f634:	930c      	str	r3, [sp, #48]	@ 0x30
 800f636:	0028      	movs	r0, r5
 800f638:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f63a:	3901      	subs	r1, #1
 800f63c:	3050      	adds	r0, #80	@ 0x50
 800f63e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f640:	f7ff ff13 	bl	800f46a <__exponent>
 800f644:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f646:	0004      	movs	r4, r0
 800f648:	1813      	adds	r3, r2, r0
 800f64a:	612b      	str	r3, [r5, #16]
 800f64c:	2a01      	cmp	r2, #1
 800f64e:	dc02      	bgt.n	800f656 <_printf_float+0x16a>
 800f650:	682a      	ldr	r2, [r5, #0]
 800f652:	07d2      	lsls	r2, r2, #31
 800f654:	d501      	bpl.n	800f65a <_printf_float+0x16e>
 800f656:	3301      	adds	r3, #1
 800f658:	612b      	str	r3, [r5, #16]
 800f65a:	2323      	movs	r3, #35	@ 0x23
 800f65c:	aa0a      	add	r2, sp, #40	@ 0x28
 800f65e:	189b      	adds	r3, r3, r2
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d100      	bne.n	800f668 <_printf_float+0x17c>
 800f666:	e792      	b.n	800f58e <_printf_float+0xa2>
 800f668:	002b      	movs	r3, r5
 800f66a:	222d      	movs	r2, #45	@ 0x2d
 800f66c:	3343      	adds	r3, #67	@ 0x43
 800f66e:	701a      	strb	r2, [r3, #0]
 800f670:	e78d      	b.n	800f58e <_printf_float+0xa2>
 800f672:	2c47      	cmp	r4, #71	@ 0x47
 800f674:	d1b8      	bne.n	800f5e8 <_printf_float+0xfc>
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1b6      	bne.n	800f5e8 <_printf_float+0xfc>
 800f67a:	3301      	adds	r3, #1
 800f67c:	e7b3      	b.n	800f5e6 <_printf_float+0xfa>
 800f67e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f680:	0011      	movs	r1, r2
 800f682:	2b65      	cmp	r3, #101	@ 0x65
 800f684:	d9d7      	bls.n	800f636 <_printf_float+0x14a>
 800f686:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f688:	2b66      	cmp	r3, #102	@ 0x66
 800f68a:	d11a      	bne.n	800f6c2 <_printf_float+0x1d6>
 800f68c:	686b      	ldr	r3, [r5, #4]
 800f68e:	2a00      	cmp	r2, #0
 800f690:	dd09      	ble.n	800f6a6 <_printf_float+0x1ba>
 800f692:	612a      	str	r2, [r5, #16]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d102      	bne.n	800f69e <_printf_float+0x1b2>
 800f698:	6829      	ldr	r1, [r5, #0]
 800f69a:	07c9      	lsls	r1, r1, #31
 800f69c:	d50b      	bpl.n	800f6b6 <_printf_float+0x1ca>
 800f69e:	3301      	adds	r3, #1
 800f6a0:	189b      	adds	r3, r3, r2
 800f6a2:	612b      	str	r3, [r5, #16]
 800f6a4:	e007      	b.n	800f6b6 <_printf_float+0x1ca>
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d103      	bne.n	800f6b2 <_printf_float+0x1c6>
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	6829      	ldr	r1, [r5, #0]
 800f6ae:	4211      	tst	r1, r2
 800f6b0:	d000      	beq.n	800f6b4 <_printf_float+0x1c8>
 800f6b2:	1c9a      	adds	r2, r3, #2
 800f6b4:	612a      	str	r2, [r5, #16]
 800f6b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6b8:	2400      	movs	r4, #0
 800f6ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f6bc:	e7cd      	b.n	800f65a <_printf_float+0x16e>
 800f6be:	2367      	movs	r3, #103	@ 0x67
 800f6c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f6c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f6c6:	4299      	cmp	r1, r3
 800f6c8:	db06      	blt.n	800f6d8 <_printf_float+0x1ec>
 800f6ca:	682b      	ldr	r3, [r5, #0]
 800f6cc:	6129      	str	r1, [r5, #16]
 800f6ce:	07db      	lsls	r3, r3, #31
 800f6d0:	d5f1      	bpl.n	800f6b6 <_printf_float+0x1ca>
 800f6d2:	3101      	adds	r1, #1
 800f6d4:	6129      	str	r1, [r5, #16]
 800f6d6:	e7ee      	b.n	800f6b6 <_printf_float+0x1ca>
 800f6d8:	2201      	movs	r2, #1
 800f6da:	2900      	cmp	r1, #0
 800f6dc:	dce0      	bgt.n	800f6a0 <_printf_float+0x1b4>
 800f6de:	1892      	adds	r2, r2, r2
 800f6e0:	1a52      	subs	r2, r2, r1
 800f6e2:	e7dd      	b.n	800f6a0 <_printf_float+0x1b4>
 800f6e4:	682a      	ldr	r2, [r5, #0]
 800f6e6:	0553      	lsls	r3, r2, #21
 800f6e8:	d408      	bmi.n	800f6fc <_printf_float+0x210>
 800f6ea:	692b      	ldr	r3, [r5, #16]
 800f6ec:	003a      	movs	r2, r7
 800f6ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f6f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f6f4:	47a0      	blx	r4
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	d129      	bne.n	800f74e <_printf_float+0x262>
 800f6fa:	e753      	b.n	800f5a4 <_printf_float+0xb8>
 800f6fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6fe:	2b65      	cmp	r3, #101	@ 0x65
 800f700:	d800      	bhi.n	800f704 <_printf_float+0x218>
 800f702:	e0da      	b.n	800f8ba <_printf_float+0x3ce>
 800f704:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f706:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f708:	2200      	movs	r2, #0
 800f70a:	2300      	movs	r3, #0
 800f70c:	f7f0 fe9e 	bl	800044c <__aeabi_dcmpeq>
 800f710:	2800      	cmp	r0, #0
 800f712:	d033      	beq.n	800f77c <_printf_float+0x290>
 800f714:	2301      	movs	r3, #1
 800f716:	4a37      	ldr	r2, [pc, #220]	@ (800f7f4 <_printf_float+0x308>)
 800f718:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f71c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f71e:	47a0      	blx	r4
 800f720:	3001      	adds	r0, #1
 800f722:	d100      	bne.n	800f726 <_printf_float+0x23a>
 800f724:	e73e      	b.n	800f5a4 <_printf_float+0xb8>
 800f726:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f728:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f72a:	42b3      	cmp	r3, r6
 800f72c:	db02      	blt.n	800f734 <_printf_float+0x248>
 800f72e:	682b      	ldr	r3, [r5, #0]
 800f730:	07db      	lsls	r3, r3, #31
 800f732:	d50c      	bpl.n	800f74e <_printf_float+0x262>
 800f734:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f73a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f73c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f73e:	47a0      	blx	r4
 800f740:	2400      	movs	r4, #0
 800f742:	3001      	adds	r0, #1
 800f744:	d100      	bne.n	800f748 <_printf_float+0x25c>
 800f746:	e72d      	b.n	800f5a4 <_printf_float+0xb8>
 800f748:	1e73      	subs	r3, r6, #1
 800f74a:	42a3      	cmp	r3, r4
 800f74c:	dc0a      	bgt.n	800f764 <_printf_float+0x278>
 800f74e:	682b      	ldr	r3, [r5, #0]
 800f750:	079b      	lsls	r3, r3, #30
 800f752:	d500      	bpl.n	800f756 <_printf_float+0x26a>
 800f754:	e105      	b.n	800f962 <_printf_float+0x476>
 800f756:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f758:	68e8      	ldr	r0, [r5, #12]
 800f75a:	4298      	cmp	r0, r3
 800f75c:	db00      	blt.n	800f760 <_printf_float+0x274>
 800f75e:	e723      	b.n	800f5a8 <_printf_float+0xbc>
 800f760:	0018      	movs	r0, r3
 800f762:	e721      	b.n	800f5a8 <_printf_float+0xbc>
 800f764:	002a      	movs	r2, r5
 800f766:	2301      	movs	r3, #1
 800f768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f76a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f76c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f76e:	321a      	adds	r2, #26
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	d100      	bne.n	800f778 <_printf_float+0x28c>
 800f776:	e715      	b.n	800f5a4 <_printf_float+0xb8>
 800f778:	3401      	adds	r4, #1
 800f77a:	e7e5      	b.n	800f748 <_printf_float+0x25c>
 800f77c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f77e:	2b00      	cmp	r3, #0
 800f780:	dc3a      	bgt.n	800f7f8 <_printf_float+0x30c>
 800f782:	2301      	movs	r3, #1
 800f784:	4a1b      	ldr	r2, [pc, #108]	@ (800f7f4 <_printf_float+0x308>)
 800f786:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f788:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f78a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f78c:	47a0      	blx	r4
 800f78e:	3001      	adds	r0, #1
 800f790:	d100      	bne.n	800f794 <_printf_float+0x2a8>
 800f792:	e707      	b.n	800f5a4 <_printf_float+0xb8>
 800f794:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f796:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f798:	4333      	orrs	r3, r6
 800f79a:	d102      	bne.n	800f7a2 <_printf_float+0x2b6>
 800f79c:	682b      	ldr	r3, [r5, #0]
 800f79e:	07db      	lsls	r3, r3, #31
 800f7a0:	d5d5      	bpl.n	800f74e <_printf_float+0x262>
 800f7a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7ac:	47a0      	blx	r4
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	d100      	bne.n	800f7b6 <_printf_float+0x2ca>
 800f7b4:	e6f6      	b.n	800f5a4 <_printf_float+0xb8>
 800f7b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f7bc:	425b      	negs	r3, r3
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	dc01      	bgt.n	800f7c6 <_printf_float+0x2da>
 800f7c2:	0033      	movs	r3, r6
 800f7c4:	e792      	b.n	800f6ec <_printf_float+0x200>
 800f7c6:	002a      	movs	r2, r5
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7d0:	321a      	adds	r2, #26
 800f7d2:	47a0      	blx	r4
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	d100      	bne.n	800f7da <_printf_float+0x2ee>
 800f7d8:	e6e4      	b.n	800f5a4 <_printf_float+0xb8>
 800f7da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7dc:	3301      	adds	r3, #1
 800f7de:	e7ea      	b.n	800f7b6 <_printf_float+0x2ca>
 800f7e0:	7fefffff 	.word	0x7fefffff
 800f7e4:	080131b8 	.word	0x080131b8
 800f7e8:	080131bc 	.word	0x080131bc
 800f7ec:	080131c0 	.word	0x080131c0
 800f7f0:	080131c4 	.word	0x080131c4
 800f7f4:	080131c8 	.word	0x080131c8
 800f7f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f7fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f7fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7fe:	429e      	cmp	r6, r3
 800f800:	dd00      	ble.n	800f804 <_printf_float+0x318>
 800f802:	001e      	movs	r6, r3
 800f804:	2e00      	cmp	r6, #0
 800f806:	dc31      	bgt.n	800f86c <_printf_float+0x380>
 800f808:	43f3      	mvns	r3, r6
 800f80a:	2400      	movs	r4, #0
 800f80c:	17db      	asrs	r3, r3, #31
 800f80e:	4033      	ands	r3, r6
 800f810:	930e      	str	r3, [sp, #56]	@ 0x38
 800f812:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f816:	1af3      	subs	r3, r6, r3
 800f818:	42a3      	cmp	r3, r4
 800f81a:	dc30      	bgt.n	800f87e <_printf_float+0x392>
 800f81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f81e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f820:	429a      	cmp	r2, r3
 800f822:	dc38      	bgt.n	800f896 <_printf_float+0x3aa>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	07db      	lsls	r3, r3, #31
 800f828:	d435      	bmi.n	800f896 <_printf_float+0x3aa>
 800f82a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f82c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f82e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f830:	1b9b      	subs	r3, r3, r6
 800f832:	1b14      	subs	r4, r2, r4
 800f834:	429c      	cmp	r4, r3
 800f836:	dd00      	ble.n	800f83a <_printf_float+0x34e>
 800f838:	001c      	movs	r4, r3
 800f83a:	2c00      	cmp	r4, #0
 800f83c:	dc34      	bgt.n	800f8a8 <_printf_float+0x3bc>
 800f83e:	43e3      	mvns	r3, r4
 800f840:	2600      	movs	r6, #0
 800f842:	17db      	asrs	r3, r3, #31
 800f844:	401c      	ands	r4, r3
 800f846:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f848:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f84a:	1ad3      	subs	r3, r2, r3
 800f84c:	1b1b      	subs	r3, r3, r4
 800f84e:	42b3      	cmp	r3, r6
 800f850:	dc00      	bgt.n	800f854 <_printf_float+0x368>
 800f852:	e77c      	b.n	800f74e <_printf_float+0x262>
 800f854:	002a      	movs	r2, r5
 800f856:	2301      	movs	r3, #1
 800f858:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f85a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f85c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f85e:	321a      	adds	r2, #26
 800f860:	47b8      	blx	r7
 800f862:	3001      	adds	r0, #1
 800f864:	d100      	bne.n	800f868 <_printf_float+0x37c>
 800f866:	e69d      	b.n	800f5a4 <_printf_float+0xb8>
 800f868:	3601      	adds	r6, #1
 800f86a:	e7ec      	b.n	800f846 <_printf_float+0x35a>
 800f86c:	0033      	movs	r3, r6
 800f86e:	003a      	movs	r2, r7
 800f870:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f874:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f876:	47a0      	blx	r4
 800f878:	3001      	adds	r0, #1
 800f87a:	d1c5      	bne.n	800f808 <_printf_float+0x31c>
 800f87c:	e692      	b.n	800f5a4 <_printf_float+0xb8>
 800f87e:	002a      	movs	r2, r5
 800f880:	2301      	movs	r3, #1
 800f882:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f884:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f886:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f888:	321a      	adds	r2, #26
 800f88a:	47b0      	blx	r6
 800f88c:	3001      	adds	r0, #1
 800f88e:	d100      	bne.n	800f892 <_printf_float+0x3a6>
 800f890:	e688      	b.n	800f5a4 <_printf_float+0xb8>
 800f892:	3401      	adds	r4, #1
 800f894:	e7bd      	b.n	800f812 <_printf_float+0x326>
 800f896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f89a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f89c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f89e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f8a0:	47a0      	blx	r4
 800f8a2:	3001      	adds	r0, #1
 800f8a4:	d1c1      	bne.n	800f82a <_printf_float+0x33e>
 800f8a6:	e67d      	b.n	800f5a4 <_printf_float+0xb8>
 800f8a8:	19ba      	adds	r2, r7, r6
 800f8aa:	0023      	movs	r3, r4
 800f8ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f8b2:	47b0      	blx	r6
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	d1c2      	bne.n	800f83e <_printf_float+0x352>
 800f8b8:	e674      	b.n	800f5a4 <_printf_float+0xb8>
 800f8ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f8bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	dc02      	bgt.n	800f8c8 <_printf_float+0x3dc>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	421a      	tst	r2, r3
 800f8c6:	d039      	beq.n	800f93c <_printf_float+0x450>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	003a      	movs	r2, r7
 800f8cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f8d2:	47b0      	blx	r6
 800f8d4:	3001      	adds	r0, #1
 800f8d6:	d100      	bne.n	800f8da <_printf_float+0x3ee>
 800f8d8:	e664      	b.n	800f5a4 <_printf_float+0xb8>
 800f8da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f8de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8e2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f8e4:	47b0      	blx	r6
 800f8e6:	3001      	adds	r0, #1
 800f8e8:	d100      	bne.n	800f8ec <_printf_float+0x400>
 800f8ea:	e65b      	b.n	800f5a4 <_printf_float+0xb8>
 800f8ec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f8ee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f8f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	f7f0 fda7 	bl	800044c <__aeabi_dcmpeq>
 800f8fe:	2800      	cmp	r0, #0
 800f900:	d11a      	bne.n	800f938 <_printf_float+0x44c>
 800f902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f904:	1c7a      	adds	r2, r7, #1
 800f906:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f908:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f90a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f90c:	47b0      	blx	r6
 800f90e:	3001      	adds	r0, #1
 800f910:	d10e      	bne.n	800f930 <_printf_float+0x444>
 800f912:	e647      	b.n	800f5a4 <_printf_float+0xb8>
 800f914:	002a      	movs	r2, r5
 800f916:	2301      	movs	r3, #1
 800f918:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f91a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f91c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f91e:	321a      	adds	r2, #26
 800f920:	47b8      	blx	r7
 800f922:	3001      	adds	r0, #1
 800f924:	d100      	bne.n	800f928 <_printf_float+0x43c>
 800f926:	e63d      	b.n	800f5a4 <_printf_float+0xb8>
 800f928:	3601      	adds	r6, #1
 800f92a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f92c:	429e      	cmp	r6, r3
 800f92e:	dbf1      	blt.n	800f914 <_printf_float+0x428>
 800f930:	002a      	movs	r2, r5
 800f932:	0023      	movs	r3, r4
 800f934:	3250      	adds	r2, #80	@ 0x50
 800f936:	e6da      	b.n	800f6ee <_printf_float+0x202>
 800f938:	2600      	movs	r6, #0
 800f93a:	e7f6      	b.n	800f92a <_printf_float+0x43e>
 800f93c:	003a      	movs	r2, r7
 800f93e:	e7e2      	b.n	800f906 <_printf_float+0x41a>
 800f940:	002a      	movs	r2, r5
 800f942:	2301      	movs	r3, #1
 800f944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f948:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f94a:	3219      	adds	r2, #25
 800f94c:	47b0      	blx	r6
 800f94e:	3001      	adds	r0, #1
 800f950:	d100      	bne.n	800f954 <_printf_float+0x468>
 800f952:	e627      	b.n	800f5a4 <_printf_float+0xb8>
 800f954:	3401      	adds	r4, #1
 800f956:	68eb      	ldr	r3, [r5, #12]
 800f958:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f95a:	1a9b      	subs	r3, r3, r2
 800f95c:	42a3      	cmp	r3, r4
 800f95e:	dcef      	bgt.n	800f940 <_printf_float+0x454>
 800f960:	e6f9      	b.n	800f756 <_printf_float+0x26a>
 800f962:	2400      	movs	r4, #0
 800f964:	e7f7      	b.n	800f956 <_printf_float+0x46a>
 800f966:	46c0      	nop			@ (mov r8, r8)

0800f968 <_printf_common>:
 800f968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f96a:	0016      	movs	r6, r2
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	688a      	ldr	r2, [r1, #8]
 800f970:	690b      	ldr	r3, [r1, #16]
 800f972:	000c      	movs	r4, r1
 800f974:	9000      	str	r0, [sp, #0]
 800f976:	4293      	cmp	r3, r2
 800f978:	da00      	bge.n	800f97c <_printf_common+0x14>
 800f97a:	0013      	movs	r3, r2
 800f97c:	0022      	movs	r2, r4
 800f97e:	6033      	str	r3, [r6, #0]
 800f980:	3243      	adds	r2, #67	@ 0x43
 800f982:	7812      	ldrb	r2, [r2, #0]
 800f984:	2a00      	cmp	r2, #0
 800f986:	d001      	beq.n	800f98c <_printf_common+0x24>
 800f988:	3301      	adds	r3, #1
 800f98a:	6033      	str	r3, [r6, #0]
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	069b      	lsls	r3, r3, #26
 800f990:	d502      	bpl.n	800f998 <_printf_common+0x30>
 800f992:	6833      	ldr	r3, [r6, #0]
 800f994:	3302      	adds	r3, #2
 800f996:	6033      	str	r3, [r6, #0]
 800f998:	6822      	ldr	r2, [r4, #0]
 800f99a:	2306      	movs	r3, #6
 800f99c:	0015      	movs	r5, r2
 800f99e:	401d      	ands	r5, r3
 800f9a0:	421a      	tst	r2, r3
 800f9a2:	d027      	beq.n	800f9f4 <_printf_common+0x8c>
 800f9a4:	0023      	movs	r3, r4
 800f9a6:	3343      	adds	r3, #67	@ 0x43
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	1e5a      	subs	r2, r3, #1
 800f9ac:	4193      	sbcs	r3, r2
 800f9ae:	6822      	ldr	r2, [r4, #0]
 800f9b0:	0692      	lsls	r2, r2, #26
 800f9b2:	d430      	bmi.n	800fa16 <_printf_common+0xae>
 800f9b4:	0022      	movs	r2, r4
 800f9b6:	9901      	ldr	r1, [sp, #4]
 800f9b8:	9800      	ldr	r0, [sp, #0]
 800f9ba:	9d08      	ldr	r5, [sp, #32]
 800f9bc:	3243      	adds	r2, #67	@ 0x43
 800f9be:	47a8      	blx	r5
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	d025      	beq.n	800fa10 <_printf_common+0xa8>
 800f9c4:	2206      	movs	r2, #6
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	2500      	movs	r5, #0
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	2b04      	cmp	r3, #4
 800f9ce:	d105      	bne.n	800f9dc <_printf_common+0x74>
 800f9d0:	6833      	ldr	r3, [r6, #0]
 800f9d2:	68e5      	ldr	r5, [r4, #12]
 800f9d4:	1aed      	subs	r5, r5, r3
 800f9d6:	43eb      	mvns	r3, r5
 800f9d8:	17db      	asrs	r3, r3, #31
 800f9da:	401d      	ands	r5, r3
 800f9dc:	68a3      	ldr	r3, [r4, #8]
 800f9de:	6922      	ldr	r2, [r4, #16]
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	dd01      	ble.n	800f9e8 <_printf_common+0x80>
 800f9e4:	1a9b      	subs	r3, r3, r2
 800f9e6:	18ed      	adds	r5, r5, r3
 800f9e8:	2600      	movs	r6, #0
 800f9ea:	42b5      	cmp	r5, r6
 800f9ec:	d120      	bne.n	800fa30 <_printf_common+0xc8>
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	e010      	b.n	800fa14 <_printf_common+0xac>
 800f9f2:	3501      	adds	r5, #1
 800f9f4:	68e3      	ldr	r3, [r4, #12]
 800f9f6:	6832      	ldr	r2, [r6, #0]
 800f9f8:	1a9b      	subs	r3, r3, r2
 800f9fa:	42ab      	cmp	r3, r5
 800f9fc:	ddd2      	ble.n	800f9a4 <_printf_common+0x3c>
 800f9fe:	0022      	movs	r2, r4
 800fa00:	2301      	movs	r3, #1
 800fa02:	9901      	ldr	r1, [sp, #4]
 800fa04:	9800      	ldr	r0, [sp, #0]
 800fa06:	9f08      	ldr	r7, [sp, #32]
 800fa08:	3219      	adds	r2, #25
 800fa0a:	47b8      	blx	r7
 800fa0c:	3001      	adds	r0, #1
 800fa0e:	d1f0      	bne.n	800f9f2 <_printf_common+0x8a>
 800fa10:	2001      	movs	r0, #1
 800fa12:	4240      	negs	r0, r0
 800fa14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa16:	2030      	movs	r0, #48	@ 0x30
 800fa18:	18e1      	adds	r1, r4, r3
 800fa1a:	3143      	adds	r1, #67	@ 0x43
 800fa1c:	7008      	strb	r0, [r1, #0]
 800fa1e:	0021      	movs	r1, r4
 800fa20:	1c5a      	adds	r2, r3, #1
 800fa22:	3145      	adds	r1, #69	@ 0x45
 800fa24:	7809      	ldrb	r1, [r1, #0]
 800fa26:	18a2      	adds	r2, r4, r2
 800fa28:	3243      	adds	r2, #67	@ 0x43
 800fa2a:	3302      	adds	r3, #2
 800fa2c:	7011      	strb	r1, [r2, #0]
 800fa2e:	e7c1      	b.n	800f9b4 <_printf_common+0x4c>
 800fa30:	0022      	movs	r2, r4
 800fa32:	2301      	movs	r3, #1
 800fa34:	9901      	ldr	r1, [sp, #4]
 800fa36:	9800      	ldr	r0, [sp, #0]
 800fa38:	9f08      	ldr	r7, [sp, #32]
 800fa3a:	321a      	adds	r2, #26
 800fa3c:	47b8      	blx	r7
 800fa3e:	3001      	adds	r0, #1
 800fa40:	d0e6      	beq.n	800fa10 <_printf_common+0xa8>
 800fa42:	3601      	adds	r6, #1
 800fa44:	e7d1      	b.n	800f9ea <_printf_common+0x82>
	...

0800fa48 <_printf_i>:
 800fa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4a:	b08b      	sub	sp, #44	@ 0x2c
 800fa4c:	9206      	str	r2, [sp, #24]
 800fa4e:	000a      	movs	r2, r1
 800fa50:	3243      	adds	r2, #67	@ 0x43
 800fa52:	9307      	str	r3, [sp, #28]
 800fa54:	9005      	str	r0, [sp, #20]
 800fa56:	9203      	str	r2, [sp, #12]
 800fa58:	7e0a      	ldrb	r2, [r1, #24]
 800fa5a:	000c      	movs	r4, r1
 800fa5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa5e:	2a78      	cmp	r2, #120	@ 0x78
 800fa60:	d809      	bhi.n	800fa76 <_printf_i+0x2e>
 800fa62:	2a62      	cmp	r2, #98	@ 0x62
 800fa64:	d80b      	bhi.n	800fa7e <_printf_i+0x36>
 800fa66:	2a00      	cmp	r2, #0
 800fa68:	d100      	bne.n	800fa6c <_printf_i+0x24>
 800fa6a:	e0bc      	b.n	800fbe6 <_printf_i+0x19e>
 800fa6c:	497b      	ldr	r1, [pc, #492]	@ (800fc5c <_printf_i+0x214>)
 800fa6e:	9104      	str	r1, [sp, #16]
 800fa70:	2a58      	cmp	r2, #88	@ 0x58
 800fa72:	d100      	bne.n	800fa76 <_printf_i+0x2e>
 800fa74:	e090      	b.n	800fb98 <_printf_i+0x150>
 800fa76:	0025      	movs	r5, r4
 800fa78:	3542      	adds	r5, #66	@ 0x42
 800fa7a:	702a      	strb	r2, [r5, #0]
 800fa7c:	e022      	b.n	800fac4 <_printf_i+0x7c>
 800fa7e:	0010      	movs	r0, r2
 800fa80:	3863      	subs	r0, #99	@ 0x63
 800fa82:	2815      	cmp	r0, #21
 800fa84:	d8f7      	bhi.n	800fa76 <_printf_i+0x2e>
 800fa86:	f7f0 fb51 	bl	800012c <__gnu_thumb1_case_shi>
 800fa8a:	0016      	.short	0x0016
 800fa8c:	fff6001f 	.word	0xfff6001f
 800fa90:	fff6fff6 	.word	0xfff6fff6
 800fa94:	001ffff6 	.word	0x001ffff6
 800fa98:	fff6fff6 	.word	0xfff6fff6
 800fa9c:	fff6fff6 	.word	0xfff6fff6
 800faa0:	003600a1 	.word	0x003600a1
 800faa4:	fff60080 	.word	0xfff60080
 800faa8:	00b2fff6 	.word	0x00b2fff6
 800faac:	0036fff6 	.word	0x0036fff6
 800fab0:	fff6fff6 	.word	0xfff6fff6
 800fab4:	0084      	.short	0x0084
 800fab6:	0025      	movs	r5, r4
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	3542      	adds	r5, #66	@ 0x42
 800fabc:	1d11      	adds	r1, r2, #4
 800fabe:	6019      	str	r1, [r3, #0]
 800fac0:	6813      	ldr	r3, [r2, #0]
 800fac2:	702b      	strb	r3, [r5, #0]
 800fac4:	2301      	movs	r3, #1
 800fac6:	e0a0      	b.n	800fc0a <_printf_i+0x1c2>
 800fac8:	6818      	ldr	r0, [r3, #0]
 800faca:	6809      	ldr	r1, [r1, #0]
 800facc:	1d02      	adds	r2, r0, #4
 800face:	060d      	lsls	r5, r1, #24
 800fad0:	d50b      	bpl.n	800faea <_printf_i+0xa2>
 800fad2:	6806      	ldr	r6, [r0, #0]
 800fad4:	601a      	str	r2, [r3, #0]
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	da03      	bge.n	800fae2 <_printf_i+0x9a>
 800fada:	232d      	movs	r3, #45	@ 0x2d
 800fadc:	9a03      	ldr	r2, [sp, #12]
 800fade:	4276      	negs	r6, r6
 800fae0:	7013      	strb	r3, [r2, #0]
 800fae2:	4b5e      	ldr	r3, [pc, #376]	@ (800fc5c <_printf_i+0x214>)
 800fae4:	270a      	movs	r7, #10
 800fae6:	9304      	str	r3, [sp, #16]
 800fae8:	e018      	b.n	800fb1c <_printf_i+0xd4>
 800faea:	6806      	ldr	r6, [r0, #0]
 800faec:	601a      	str	r2, [r3, #0]
 800faee:	0649      	lsls	r1, r1, #25
 800faf0:	d5f1      	bpl.n	800fad6 <_printf_i+0x8e>
 800faf2:	b236      	sxth	r6, r6
 800faf4:	e7ef      	b.n	800fad6 <_printf_i+0x8e>
 800faf6:	6808      	ldr	r0, [r1, #0]
 800faf8:	6819      	ldr	r1, [r3, #0]
 800fafa:	c940      	ldmia	r1!, {r6}
 800fafc:	0605      	lsls	r5, r0, #24
 800fafe:	d402      	bmi.n	800fb06 <_printf_i+0xbe>
 800fb00:	0640      	lsls	r0, r0, #25
 800fb02:	d500      	bpl.n	800fb06 <_printf_i+0xbe>
 800fb04:	b2b6      	uxth	r6, r6
 800fb06:	6019      	str	r1, [r3, #0]
 800fb08:	4b54      	ldr	r3, [pc, #336]	@ (800fc5c <_printf_i+0x214>)
 800fb0a:	270a      	movs	r7, #10
 800fb0c:	9304      	str	r3, [sp, #16]
 800fb0e:	2a6f      	cmp	r2, #111	@ 0x6f
 800fb10:	d100      	bne.n	800fb14 <_printf_i+0xcc>
 800fb12:	3f02      	subs	r7, #2
 800fb14:	0023      	movs	r3, r4
 800fb16:	2200      	movs	r2, #0
 800fb18:	3343      	adds	r3, #67	@ 0x43
 800fb1a:	701a      	strb	r2, [r3, #0]
 800fb1c:	6863      	ldr	r3, [r4, #4]
 800fb1e:	60a3      	str	r3, [r4, #8]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	db03      	blt.n	800fb2c <_printf_i+0xe4>
 800fb24:	2104      	movs	r1, #4
 800fb26:	6822      	ldr	r2, [r4, #0]
 800fb28:	438a      	bics	r2, r1
 800fb2a:	6022      	str	r2, [r4, #0]
 800fb2c:	2e00      	cmp	r6, #0
 800fb2e:	d102      	bne.n	800fb36 <_printf_i+0xee>
 800fb30:	9d03      	ldr	r5, [sp, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00c      	beq.n	800fb50 <_printf_i+0x108>
 800fb36:	9d03      	ldr	r5, [sp, #12]
 800fb38:	0030      	movs	r0, r6
 800fb3a:	0039      	movs	r1, r7
 800fb3c:	f7f0 fb86 	bl	800024c <__aeabi_uidivmod>
 800fb40:	9b04      	ldr	r3, [sp, #16]
 800fb42:	3d01      	subs	r5, #1
 800fb44:	5c5b      	ldrb	r3, [r3, r1]
 800fb46:	702b      	strb	r3, [r5, #0]
 800fb48:	0033      	movs	r3, r6
 800fb4a:	0006      	movs	r6, r0
 800fb4c:	429f      	cmp	r7, r3
 800fb4e:	d9f3      	bls.n	800fb38 <_printf_i+0xf0>
 800fb50:	2f08      	cmp	r7, #8
 800fb52:	d109      	bne.n	800fb68 <_printf_i+0x120>
 800fb54:	6823      	ldr	r3, [r4, #0]
 800fb56:	07db      	lsls	r3, r3, #31
 800fb58:	d506      	bpl.n	800fb68 <_printf_i+0x120>
 800fb5a:	6862      	ldr	r2, [r4, #4]
 800fb5c:	6923      	ldr	r3, [r4, #16]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	dc02      	bgt.n	800fb68 <_printf_i+0x120>
 800fb62:	2330      	movs	r3, #48	@ 0x30
 800fb64:	3d01      	subs	r5, #1
 800fb66:	702b      	strb	r3, [r5, #0]
 800fb68:	9b03      	ldr	r3, [sp, #12]
 800fb6a:	1b5b      	subs	r3, r3, r5
 800fb6c:	6123      	str	r3, [r4, #16]
 800fb6e:	9b07      	ldr	r3, [sp, #28]
 800fb70:	0021      	movs	r1, r4
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	9805      	ldr	r0, [sp, #20]
 800fb76:	9b06      	ldr	r3, [sp, #24]
 800fb78:	aa09      	add	r2, sp, #36	@ 0x24
 800fb7a:	f7ff fef5 	bl	800f968 <_printf_common>
 800fb7e:	3001      	adds	r0, #1
 800fb80:	d148      	bne.n	800fc14 <_printf_i+0x1cc>
 800fb82:	2001      	movs	r0, #1
 800fb84:	4240      	negs	r0, r0
 800fb86:	b00b      	add	sp, #44	@ 0x2c
 800fb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb8a:	2220      	movs	r2, #32
 800fb8c:	6809      	ldr	r1, [r1, #0]
 800fb8e:	430a      	orrs	r2, r1
 800fb90:	6022      	str	r2, [r4, #0]
 800fb92:	2278      	movs	r2, #120	@ 0x78
 800fb94:	4932      	ldr	r1, [pc, #200]	@ (800fc60 <_printf_i+0x218>)
 800fb96:	9104      	str	r1, [sp, #16]
 800fb98:	0021      	movs	r1, r4
 800fb9a:	3145      	adds	r1, #69	@ 0x45
 800fb9c:	700a      	strb	r2, [r1, #0]
 800fb9e:	6819      	ldr	r1, [r3, #0]
 800fba0:	6822      	ldr	r2, [r4, #0]
 800fba2:	c940      	ldmia	r1!, {r6}
 800fba4:	0610      	lsls	r0, r2, #24
 800fba6:	d402      	bmi.n	800fbae <_printf_i+0x166>
 800fba8:	0650      	lsls	r0, r2, #25
 800fbaa:	d500      	bpl.n	800fbae <_printf_i+0x166>
 800fbac:	b2b6      	uxth	r6, r6
 800fbae:	6019      	str	r1, [r3, #0]
 800fbb0:	07d3      	lsls	r3, r2, #31
 800fbb2:	d502      	bpl.n	800fbba <_printf_i+0x172>
 800fbb4:	2320      	movs	r3, #32
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	2e00      	cmp	r6, #0
 800fbbc:	d001      	beq.n	800fbc2 <_printf_i+0x17a>
 800fbbe:	2710      	movs	r7, #16
 800fbc0:	e7a8      	b.n	800fb14 <_printf_i+0xcc>
 800fbc2:	2220      	movs	r2, #32
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	4393      	bics	r3, r2
 800fbc8:	6023      	str	r3, [r4, #0]
 800fbca:	e7f8      	b.n	800fbbe <_printf_i+0x176>
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	680d      	ldr	r5, [r1, #0]
 800fbd0:	1d10      	adds	r0, r2, #4
 800fbd2:	6949      	ldr	r1, [r1, #20]
 800fbd4:	6018      	str	r0, [r3, #0]
 800fbd6:	6813      	ldr	r3, [r2, #0]
 800fbd8:	062e      	lsls	r6, r5, #24
 800fbda:	d501      	bpl.n	800fbe0 <_printf_i+0x198>
 800fbdc:	6019      	str	r1, [r3, #0]
 800fbde:	e002      	b.n	800fbe6 <_printf_i+0x19e>
 800fbe0:	066d      	lsls	r5, r5, #25
 800fbe2:	d5fb      	bpl.n	800fbdc <_printf_i+0x194>
 800fbe4:	8019      	strh	r1, [r3, #0]
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	9d03      	ldr	r5, [sp, #12]
 800fbea:	6123      	str	r3, [r4, #16]
 800fbec:	e7bf      	b.n	800fb6e <_printf_i+0x126>
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	1d11      	adds	r1, r2, #4
 800fbf2:	6019      	str	r1, [r3, #0]
 800fbf4:	6815      	ldr	r5, [r2, #0]
 800fbf6:	2100      	movs	r1, #0
 800fbf8:	0028      	movs	r0, r5
 800fbfa:	6862      	ldr	r2, [r4, #4]
 800fbfc:	f000 fa5b 	bl	80100b6 <memchr>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	d001      	beq.n	800fc08 <_printf_i+0x1c0>
 800fc04:	1b40      	subs	r0, r0, r5
 800fc06:	6060      	str	r0, [r4, #4]
 800fc08:	6863      	ldr	r3, [r4, #4]
 800fc0a:	6123      	str	r3, [r4, #16]
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	9a03      	ldr	r2, [sp, #12]
 800fc10:	7013      	strb	r3, [r2, #0]
 800fc12:	e7ac      	b.n	800fb6e <_printf_i+0x126>
 800fc14:	002a      	movs	r2, r5
 800fc16:	6923      	ldr	r3, [r4, #16]
 800fc18:	9906      	ldr	r1, [sp, #24]
 800fc1a:	9805      	ldr	r0, [sp, #20]
 800fc1c:	9d07      	ldr	r5, [sp, #28]
 800fc1e:	47a8      	blx	r5
 800fc20:	3001      	adds	r0, #1
 800fc22:	d0ae      	beq.n	800fb82 <_printf_i+0x13a>
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	079b      	lsls	r3, r3, #30
 800fc28:	d415      	bmi.n	800fc56 <_printf_i+0x20e>
 800fc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc2c:	68e0      	ldr	r0, [r4, #12]
 800fc2e:	4298      	cmp	r0, r3
 800fc30:	daa9      	bge.n	800fb86 <_printf_i+0x13e>
 800fc32:	0018      	movs	r0, r3
 800fc34:	e7a7      	b.n	800fb86 <_printf_i+0x13e>
 800fc36:	0022      	movs	r2, r4
 800fc38:	2301      	movs	r3, #1
 800fc3a:	9906      	ldr	r1, [sp, #24]
 800fc3c:	9805      	ldr	r0, [sp, #20]
 800fc3e:	9e07      	ldr	r6, [sp, #28]
 800fc40:	3219      	adds	r2, #25
 800fc42:	47b0      	blx	r6
 800fc44:	3001      	adds	r0, #1
 800fc46:	d09c      	beq.n	800fb82 <_printf_i+0x13a>
 800fc48:	3501      	adds	r5, #1
 800fc4a:	68e3      	ldr	r3, [r4, #12]
 800fc4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc4e:	1a9b      	subs	r3, r3, r2
 800fc50:	42ab      	cmp	r3, r5
 800fc52:	dcf0      	bgt.n	800fc36 <_printf_i+0x1ee>
 800fc54:	e7e9      	b.n	800fc2a <_printf_i+0x1e2>
 800fc56:	2500      	movs	r5, #0
 800fc58:	e7f7      	b.n	800fc4a <_printf_i+0x202>
 800fc5a:	46c0      	nop			@ (mov r8, r8)
 800fc5c:	080131ca 	.word	0x080131ca
 800fc60:	080131db 	.word	0x080131db

0800fc64 <std>:
 800fc64:	2300      	movs	r3, #0
 800fc66:	b510      	push	{r4, lr}
 800fc68:	0004      	movs	r4, r0
 800fc6a:	6003      	str	r3, [r0, #0]
 800fc6c:	6043      	str	r3, [r0, #4]
 800fc6e:	6083      	str	r3, [r0, #8]
 800fc70:	8181      	strh	r1, [r0, #12]
 800fc72:	6643      	str	r3, [r0, #100]	@ 0x64
 800fc74:	81c2      	strh	r2, [r0, #14]
 800fc76:	6103      	str	r3, [r0, #16]
 800fc78:	6143      	str	r3, [r0, #20]
 800fc7a:	6183      	str	r3, [r0, #24]
 800fc7c:	0019      	movs	r1, r3
 800fc7e:	2208      	movs	r2, #8
 800fc80:	305c      	adds	r0, #92	@ 0x5c
 800fc82:	f000 f967 	bl	800ff54 <memset>
 800fc86:	4b0b      	ldr	r3, [pc, #44]	@ (800fcb4 <std+0x50>)
 800fc88:	6224      	str	r4, [r4, #32]
 800fc8a:	6263      	str	r3, [r4, #36]	@ 0x24
 800fc8c:	4b0a      	ldr	r3, [pc, #40]	@ (800fcb8 <std+0x54>)
 800fc8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fc90:	4b0a      	ldr	r3, [pc, #40]	@ (800fcbc <std+0x58>)
 800fc92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fc94:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc0 <std+0x5c>)
 800fc96:	6323      	str	r3, [r4, #48]	@ 0x30
 800fc98:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc4 <std+0x60>)
 800fc9a:	429c      	cmp	r4, r3
 800fc9c:	d005      	beq.n	800fcaa <std+0x46>
 800fc9e:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc8 <std+0x64>)
 800fca0:	429c      	cmp	r4, r3
 800fca2:	d002      	beq.n	800fcaa <std+0x46>
 800fca4:	4b09      	ldr	r3, [pc, #36]	@ (800fccc <std+0x68>)
 800fca6:	429c      	cmp	r4, r3
 800fca8:	d103      	bne.n	800fcb2 <std+0x4e>
 800fcaa:	0020      	movs	r0, r4
 800fcac:	3058      	adds	r0, #88	@ 0x58
 800fcae:	f000 f9ff 	bl	80100b0 <__retarget_lock_init_recursive>
 800fcb2:	bd10      	pop	{r4, pc}
 800fcb4:	0800fe4d 	.word	0x0800fe4d
 800fcb8:	0800fe75 	.word	0x0800fe75
 800fcbc:	0800fead 	.word	0x0800fead
 800fcc0:	0800fed9 	.word	0x0800fed9
 800fcc4:	20001dd0 	.word	0x20001dd0
 800fcc8:	20001e38 	.word	0x20001e38
 800fccc:	20001ea0 	.word	0x20001ea0

0800fcd0 <stdio_exit_handler>:
 800fcd0:	b510      	push	{r4, lr}
 800fcd2:	4a03      	ldr	r2, [pc, #12]	@ (800fce0 <stdio_exit_handler+0x10>)
 800fcd4:	4903      	ldr	r1, [pc, #12]	@ (800fce4 <stdio_exit_handler+0x14>)
 800fcd6:	4804      	ldr	r0, [pc, #16]	@ (800fce8 <stdio_exit_handler+0x18>)
 800fcd8:	f000 f86c 	bl	800fdb4 <_fwalk_sglue>
 800fcdc:	bd10      	pop	{r4, pc}
 800fcde:	46c0      	nop			@ (mov r8, r8)
 800fce0:	2000014c 	.word	0x2000014c
 800fce4:	08011d75 	.word	0x08011d75
 800fce8:	2000015c 	.word	0x2000015c

0800fcec <cleanup_stdio>:
 800fcec:	6841      	ldr	r1, [r0, #4]
 800fcee:	4b0b      	ldr	r3, [pc, #44]	@ (800fd1c <cleanup_stdio+0x30>)
 800fcf0:	b510      	push	{r4, lr}
 800fcf2:	0004      	movs	r4, r0
 800fcf4:	4299      	cmp	r1, r3
 800fcf6:	d001      	beq.n	800fcfc <cleanup_stdio+0x10>
 800fcf8:	f002 f83c 	bl	8011d74 <_fflush_r>
 800fcfc:	68a1      	ldr	r1, [r4, #8]
 800fcfe:	4b08      	ldr	r3, [pc, #32]	@ (800fd20 <cleanup_stdio+0x34>)
 800fd00:	4299      	cmp	r1, r3
 800fd02:	d002      	beq.n	800fd0a <cleanup_stdio+0x1e>
 800fd04:	0020      	movs	r0, r4
 800fd06:	f002 f835 	bl	8011d74 <_fflush_r>
 800fd0a:	68e1      	ldr	r1, [r4, #12]
 800fd0c:	4b05      	ldr	r3, [pc, #20]	@ (800fd24 <cleanup_stdio+0x38>)
 800fd0e:	4299      	cmp	r1, r3
 800fd10:	d002      	beq.n	800fd18 <cleanup_stdio+0x2c>
 800fd12:	0020      	movs	r0, r4
 800fd14:	f002 f82e 	bl	8011d74 <_fflush_r>
 800fd18:	bd10      	pop	{r4, pc}
 800fd1a:	46c0      	nop			@ (mov r8, r8)
 800fd1c:	20001dd0 	.word	0x20001dd0
 800fd20:	20001e38 	.word	0x20001e38
 800fd24:	20001ea0 	.word	0x20001ea0

0800fd28 <global_stdio_init.part.0>:
 800fd28:	b510      	push	{r4, lr}
 800fd2a:	4b09      	ldr	r3, [pc, #36]	@ (800fd50 <global_stdio_init.part.0+0x28>)
 800fd2c:	4a09      	ldr	r2, [pc, #36]	@ (800fd54 <global_stdio_init.part.0+0x2c>)
 800fd2e:	2104      	movs	r1, #4
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	4809      	ldr	r0, [pc, #36]	@ (800fd58 <global_stdio_init.part.0+0x30>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	f7ff ff95 	bl	800fc64 <std>
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	2109      	movs	r1, #9
 800fd3e:	4807      	ldr	r0, [pc, #28]	@ (800fd5c <global_stdio_init.part.0+0x34>)
 800fd40:	f7ff ff90 	bl	800fc64 <std>
 800fd44:	2202      	movs	r2, #2
 800fd46:	2112      	movs	r1, #18
 800fd48:	4805      	ldr	r0, [pc, #20]	@ (800fd60 <global_stdio_init.part.0+0x38>)
 800fd4a:	f7ff ff8b 	bl	800fc64 <std>
 800fd4e:	bd10      	pop	{r4, pc}
 800fd50:	20001f08 	.word	0x20001f08
 800fd54:	0800fcd1 	.word	0x0800fcd1
 800fd58:	20001dd0 	.word	0x20001dd0
 800fd5c:	20001e38 	.word	0x20001e38
 800fd60:	20001ea0 	.word	0x20001ea0

0800fd64 <__sfp_lock_acquire>:
 800fd64:	b510      	push	{r4, lr}
 800fd66:	4802      	ldr	r0, [pc, #8]	@ (800fd70 <__sfp_lock_acquire+0xc>)
 800fd68:	f000 f9a3 	bl	80100b2 <__retarget_lock_acquire_recursive>
 800fd6c:	bd10      	pop	{r4, pc}
 800fd6e:	46c0      	nop			@ (mov r8, r8)
 800fd70:	20001f11 	.word	0x20001f11

0800fd74 <__sfp_lock_release>:
 800fd74:	b510      	push	{r4, lr}
 800fd76:	4802      	ldr	r0, [pc, #8]	@ (800fd80 <__sfp_lock_release+0xc>)
 800fd78:	f000 f99c 	bl	80100b4 <__retarget_lock_release_recursive>
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	46c0      	nop			@ (mov r8, r8)
 800fd80:	20001f11 	.word	0x20001f11

0800fd84 <__sinit>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	0004      	movs	r4, r0
 800fd88:	f7ff ffec 	bl	800fd64 <__sfp_lock_acquire>
 800fd8c:	6a23      	ldr	r3, [r4, #32]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d002      	beq.n	800fd98 <__sinit+0x14>
 800fd92:	f7ff ffef 	bl	800fd74 <__sfp_lock_release>
 800fd96:	bd10      	pop	{r4, pc}
 800fd98:	4b04      	ldr	r3, [pc, #16]	@ (800fdac <__sinit+0x28>)
 800fd9a:	6223      	str	r3, [r4, #32]
 800fd9c:	4b04      	ldr	r3, [pc, #16]	@ (800fdb0 <__sinit+0x2c>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1f6      	bne.n	800fd92 <__sinit+0xe>
 800fda4:	f7ff ffc0 	bl	800fd28 <global_stdio_init.part.0>
 800fda8:	e7f3      	b.n	800fd92 <__sinit+0xe>
 800fdaa:	46c0      	nop			@ (mov r8, r8)
 800fdac:	0800fced 	.word	0x0800fced
 800fdb0:	20001f08 	.word	0x20001f08

0800fdb4 <_fwalk_sglue>:
 800fdb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdb6:	0014      	movs	r4, r2
 800fdb8:	2600      	movs	r6, #0
 800fdba:	9000      	str	r0, [sp, #0]
 800fdbc:	9101      	str	r1, [sp, #4]
 800fdbe:	68a5      	ldr	r5, [r4, #8]
 800fdc0:	6867      	ldr	r7, [r4, #4]
 800fdc2:	3f01      	subs	r7, #1
 800fdc4:	d504      	bpl.n	800fdd0 <_fwalk_sglue+0x1c>
 800fdc6:	6824      	ldr	r4, [r4, #0]
 800fdc8:	2c00      	cmp	r4, #0
 800fdca:	d1f8      	bne.n	800fdbe <_fwalk_sglue+0xa>
 800fdcc:	0030      	movs	r0, r6
 800fdce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fdd0:	89ab      	ldrh	r3, [r5, #12]
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d908      	bls.n	800fde8 <_fwalk_sglue+0x34>
 800fdd6:	220e      	movs	r2, #14
 800fdd8:	5eab      	ldrsh	r3, [r5, r2]
 800fdda:	3301      	adds	r3, #1
 800fddc:	d004      	beq.n	800fde8 <_fwalk_sglue+0x34>
 800fdde:	0029      	movs	r1, r5
 800fde0:	9800      	ldr	r0, [sp, #0]
 800fde2:	9b01      	ldr	r3, [sp, #4]
 800fde4:	4798      	blx	r3
 800fde6:	4306      	orrs	r6, r0
 800fde8:	3568      	adds	r5, #104	@ 0x68
 800fdea:	e7ea      	b.n	800fdc2 <_fwalk_sglue+0xe>

0800fdec <iprintf>:
 800fdec:	b40f      	push	{r0, r1, r2, r3}
 800fdee:	b507      	push	{r0, r1, r2, lr}
 800fdf0:	4905      	ldr	r1, [pc, #20]	@ (800fe08 <iprintf+0x1c>)
 800fdf2:	ab04      	add	r3, sp, #16
 800fdf4:	6808      	ldr	r0, [r1, #0]
 800fdf6:	cb04      	ldmia	r3!, {r2}
 800fdf8:	6881      	ldr	r1, [r0, #8]
 800fdfa:	9301      	str	r3, [sp, #4]
 800fdfc:	f001 fe18 	bl	8011a30 <_vfiprintf_r>
 800fe00:	b003      	add	sp, #12
 800fe02:	bc08      	pop	{r3}
 800fe04:	b004      	add	sp, #16
 800fe06:	4718      	bx	r3
 800fe08:	20000158 	.word	0x20000158

0800fe0c <siprintf>:
 800fe0c:	b40e      	push	{r1, r2, r3}
 800fe0e:	b500      	push	{lr}
 800fe10:	490b      	ldr	r1, [pc, #44]	@ (800fe40 <siprintf+0x34>)
 800fe12:	b09c      	sub	sp, #112	@ 0x70
 800fe14:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe16:	9002      	str	r0, [sp, #8]
 800fe18:	9006      	str	r0, [sp, #24]
 800fe1a:	9107      	str	r1, [sp, #28]
 800fe1c:	9104      	str	r1, [sp, #16]
 800fe1e:	4809      	ldr	r0, [pc, #36]	@ (800fe44 <siprintf+0x38>)
 800fe20:	4909      	ldr	r1, [pc, #36]	@ (800fe48 <siprintf+0x3c>)
 800fe22:	cb04      	ldmia	r3!, {r2}
 800fe24:	9105      	str	r1, [sp, #20]
 800fe26:	6800      	ldr	r0, [r0, #0]
 800fe28:	a902      	add	r1, sp, #8
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	f001 fcda 	bl	80117e4 <_svfiprintf_r>
 800fe30:	2200      	movs	r2, #0
 800fe32:	9b02      	ldr	r3, [sp, #8]
 800fe34:	701a      	strb	r2, [r3, #0]
 800fe36:	b01c      	add	sp, #112	@ 0x70
 800fe38:	bc08      	pop	{r3}
 800fe3a:	b003      	add	sp, #12
 800fe3c:	4718      	bx	r3
 800fe3e:	46c0      	nop			@ (mov r8, r8)
 800fe40:	7fffffff 	.word	0x7fffffff
 800fe44:	20000158 	.word	0x20000158
 800fe48:	ffff0208 	.word	0xffff0208

0800fe4c <__sread>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	000c      	movs	r4, r1
 800fe50:	250e      	movs	r5, #14
 800fe52:	5f49      	ldrsh	r1, [r1, r5]
 800fe54:	f000 f8da 	bl	801000c <_read_r>
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	db03      	blt.n	800fe64 <__sread+0x18>
 800fe5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800fe5e:	181b      	adds	r3, r3, r0
 800fe60:	6563      	str	r3, [r4, #84]	@ 0x54
 800fe62:	bd70      	pop	{r4, r5, r6, pc}
 800fe64:	89a3      	ldrh	r3, [r4, #12]
 800fe66:	4a02      	ldr	r2, [pc, #8]	@ (800fe70 <__sread+0x24>)
 800fe68:	4013      	ands	r3, r2
 800fe6a:	81a3      	strh	r3, [r4, #12]
 800fe6c:	e7f9      	b.n	800fe62 <__sread+0x16>
 800fe6e:	46c0      	nop			@ (mov r8, r8)
 800fe70:	ffffefff 	.word	0xffffefff

0800fe74 <__swrite>:
 800fe74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe76:	001f      	movs	r7, r3
 800fe78:	898b      	ldrh	r3, [r1, #12]
 800fe7a:	0005      	movs	r5, r0
 800fe7c:	000c      	movs	r4, r1
 800fe7e:	0016      	movs	r6, r2
 800fe80:	05db      	lsls	r3, r3, #23
 800fe82:	d505      	bpl.n	800fe90 <__swrite+0x1c>
 800fe84:	230e      	movs	r3, #14
 800fe86:	5ec9      	ldrsh	r1, [r1, r3]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	f000 f8aa 	bl	800ffe4 <_lseek_r>
 800fe90:	89a3      	ldrh	r3, [r4, #12]
 800fe92:	4a05      	ldr	r2, [pc, #20]	@ (800fea8 <__swrite+0x34>)
 800fe94:	0028      	movs	r0, r5
 800fe96:	4013      	ands	r3, r2
 800fe98:	81a3      	strh	r3, [r4, #12]
 800fe9a:	0032      	movs	r2, r6
 800fe9c:	230e      	movs	r3, #14
 800fe9e:	5ee1      	ldrsh	r1, [r4, r3]
 800fea0:	003b      	movs	r3, r7
 800fea2:	f000 f8c7 	bl	8010034 <_write_r>
 800fea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea8:	ffffefff 	.word	0xffffefff

0800feac <__sseek>:
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	000c      	movs	r4, r1
 800feb0:	250e      	movs	r5, #14
 800feb2:	5f49      	ldrsh	r1, [r1, r5]
 800feb4:	f000 f896 	bl	800ffe4 <_lseek_r>
 800feb8:	89a3      	ldrh	r3, [r4, #12]
 800feba:	1c42      	adds	r2, r0, #1
 800febc:	d103      	bne.n	800fec6 <__sseek+0x1a>
 800febe:	4a05      	ldr	r2, [pc, #20]	@ (800fed4 <__sseek+0x28>)
 800fec0:	4013      	ands	r3, r2
 800fec2:	81a3      	strh	r3, [r4, #12]
 800fec4:	bd70      	pop	{r4, r5, r6, pc}
 800fec6:	2280      	movs	r2, #128	@ 0x80
 800fec8:	0152      	lsls	r2, r2, #5
 800feca:	4313      	orrs	r3, r2
 800fecc:	81a3      	strh	r3, [r4, #12]
 800fece:	6560      	str	r0, [r4, #84]	@ 0x54
 800fed0:	e7f8      	b.n	800fec4 <__sseek+0x18>
 800fed2:	46c0      	nop			@ (mov r8, r8)
 800fed4:	ffffefff 	.word	0xffffefff

0800fed8 <__sclose>:
 800fed8:	b510      	push	{r4, lr}
 800feda:	230e      	movs	r3, #14
 800fedc:	5ec9      	ldrsh	r1, [r1, r3]
 800fede:	f000 f86f 	bl	800ffc0 <_close_r>
 800fee2:	bd10      	pop	{r4, pc}

0800fee4 <_vsniprintf_r>:
 800fee4:	b530      	push	{r4, r5, lr}
 800fee6:	0014      	movs	r4, r2
 800fee8:	0005      	movs	r5, r0
 800feea:	001a      	movs	r2, r3
 800feec:	b09b      	sub	sp, #108	@ 0x6c
 800feee:	2c00      	cmp	r4, #0
 800fef0:	da05      	bge.n	800fefe <_vsniprintf_r+0x1a>
 800fef2:	238b      	movs	r3, #139	@ 0x8b
 800fef4:	6003      	str	r3, [r0, #0]
 800fef6:	2001      	movs	r0, #1
 800fef8:	4240      	negs	r0, r0
 800fefa:	b01b      	add	sp, #108	@ 0x6c
 800fefc:	bd30      	pop	{r4, r5, pc}
 800fefe:	2382      	movs	r3, #130	@ 0x82
 800ff00:	4668      	mov	r0, sp
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	8183      	strh	r3, [r0, #12]
 800ff06:	2300      	movs	r3, #0
 800ff08:	9100      	str	r1, [sp, #0]
 800ff0a:	9104      	str	r1, [sp, #16]
 800ff0c:	429c      	cmp	r4, r3
 800ff0e:	d000      	beq.n	800ff12 <_vsniprintf_r+0x2e>
 800ff10:	1e63      	subs	r3, r4, #1
 800ff12:	9302      	str	r3, [sp, #8]
 800ff14:	9305      	str	r3, [sp, #20]
 800ff16:	2301      	movs	r3, #1
 800ff18:	4669      	mov	r1, sp
 800ff1a:	425b      	negs	r3, r3
 800ff1c:	81cb      	strh	r3, [r1, #14]
 800ff1e:	0028      	movs	r0, r5
 800ff20:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ff22:	f001 fc5f 	bl	80117e4 <_svfiprintf_r>
 800ff26:	1c43      	adds	r3, r0, #1
 800ff28:	da01      	bge.n	800ff2e <_vsniprintf_r+0x4a>
 800ff2a:	238b      	movs	r3, #139	@ 0x8b
 800ff2c:	602b      	str	r3, [r5, #0]
 800ff2e:	2c00      	cmp	r4, #0
 800ff30:	d0e3      	beq.n	800fefa <_vsniprintf_r+0x16>
 800ff32:	2200      	movs	r2, #0
 800ff34:	9b00      	ldr	r3, [sp, #0]
 800ff36:	701a      	strb	r2, [r3, #0]
 800ff38:	e7df      	b.n	800fefa <_vsniprintf_r+0x16>
	...

0800ff3c <vsniprintf>:
 800ff3c:	b513      	push	{r0, r1, r4, lr}
 800ff3e:	4c04      	ldr	r4, [pc, #16]	@ (800ff50 <vsniprintf+0x14>)
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	0013      	movs	r3, r2
 800ff44:	000a      	movs	r2, r1
 800ff46:	0001      	movs	r1, r0
 800ff48:	6820      	ldr	r0, [r4, #0]
 800ff4a:	f7ff ffcb 	bl	800fee4 <_vsniprintf_r>
 800ff4e:	bd16      	pop	{r1, r2, r4, pc}
 800ff50:	20000158 	.word	0x20000158

0800ff54 <memset>:
 800ff54:	0003      	movs	r3, r0
 800ff56:	1882      	adds	r2, r0, r2
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d100      	bne.n	800ff5e <memset+0xa>
 800ff5c:	4770      	bx	lr
 800ff5e:	7019      	strb	r1, [r3, #0]
 800ff60:	3301      	adds	r3, #1
 800ff62:	e7f9      	b.n	800ff58 <memset+0x4>

0800ff64 <strncpy>:
 800ff64:	0003      	movs	r3, r0
 800ff66:	b530      	push	{r4, r5, lr}
 800ff68:	001d      	movs	r5, r3
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	d006      	beq.n	800ff7c <strncpy+0x18>
 800ff6e:	780c      	ldrb	r4, [r1, #0]
 800ff70:	3a01      	subs	r2, #1
 800ff72:	3301      	adds	r3, #1
 800ff74:	702c      	strb	r4, [r5, #0]
 800ff76:	3101      	adds	r1, #1
 800ff78:	2c00      	cmp	r4, #0
 800ff7a:	d1f5      	bne.n	800ff68 <strncpy+0x4>
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	189a      	adds	r2, r3, r2
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d100      	bne.n	800ff86 <strncpy+0x22>
 800ff84:	bd30      	pop	{r4, r5, pc}
 800ff86:	7019      	strb	r1, [r3, #0]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	e7f9      	b.n	800ff80 <strncpy+0x1c>

0800ff8c <strstr>:
 800ff8c:	780a      	ldrb	r2, [r1, #0]
 800ff8e:	b530      	push	{r4, r5, lr}
 800ff90:	2a00      	cmp	r2, #0
 800ff92:	d10c      	bne.n	800ffae <strstr+0x22>
 800ff94:	bd30      	pop	{r4, r5, pc}
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d108      	bne.n	800ffac <strstr+0x20>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	5ccc      	ldrb	r4, [r1, r3]
 800ff9e:	2c00      	cmp	r4, #0
 800ffa0:	d0f8      	beq.n	800ff94 <strstr+0x8>
 800ffa2:	5cc5      	ldrb	r5, [r0, r3]
 800ffa4:	42a5      	cmp	r5, r4
 800ffa6:	d101      	bne.n	800ffac <strstr+0x20>
 800ffa8:	3301      	adds	r3, #1
 800ffaa:	e7f7      	b.n	800ff9c <strstr+0x10>
 800ffac:	3001      	adds	r0, #1
 800ffae:	7803      	ldrb	r3, [r0, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1f0      	bne.n	800ff96 <strstr+0xa>
 800ffb4:	0018      	movs	r0, r3
 800ffb6:	e7ed      	b.n	800ff94 <strstr+0x8>

0800ffb8 <_localeconv_r>:
 800ffb8:	4800      	ldr	r0, [pc, #0]	@ (800ffbc <_localeconv_r+0x4>)
 800ffba:	4770      	bx	lr
 800ffbc:	20000298 	.word	0x20000298

0800ffc0 <_close_r>:
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	b570      	push	{r4, r5, r6, lr}
 800ffc4:	4d06      	ldr	r5, [pc, #24]	@ (800ffe0 <_close_r+0x20>)
 800ffc6:	0004      	movs	r4, r0
 800ffc8:	0008      	movs	r0, r1
 800ffca:	602b      	str	r3, [r5, #0]
 800ffcc:	f7f7 fbf2 	bl	80077b4 <_close>
 800ffd0:	1c43      	adds	r3, r0, #1
 800ffd2:	d103      	bne.n	800ffdc <_close_r+0x1c>
 800ffd4:	682b      	ldr	r3, [r5, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d000      	beq.n	800ffdc <_close_r+0x1c>
 800ffda:	6023      	str	r3, [r4, #0]
 800ffdc:	bd70      	pop	{r4, r5, r6, pc}
 800ffde:	46c0      	nop			@ (mov r8, r8)
 800ffe0:	20001f0c 	.word	0x20001f0c

0800ffe4 <_lseek_r>:
 800ffe4:	b570      	push	{r4, r5, r6, lr}
 800ffe6:	0004      	movs	r4, r0
 800ffe8:	0008      	movs	r0, r1
 800ffea:	0011      	movs	r1, r2
 800ffec:	001a      	movs	r2, r3
 800ffee:	2300      	movs	r3, #0
 800fff0:	4d05      	ldr	r5, [pc, #20]	@ (8010008 <_lseek_r+0x24>)
 800fff2:	602b      	str	r3, [r5, #0]
 800fff4:	f7f7 fbff 	bl	80077f6 <_lseek>
 800fff8:	1c43      	adds	r3, r0, #1
 800fffa:	d103      	bne.n	8010004 <_lseek_r+0x20>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d000      	beq.n	8010004 <_lseek_r+0x20>
 8010002:	6023      	str	r3, [r4, #0]
 8010004:	bd70      	pop	{r4, r5, r6, pc}
 8010006:	46c0      	nop			@ (mov r8, r8)
 8010008:	20001f0c 	.word	0x20001f0c

0801000c <_read_r>:
 801000c:	b570      	push	{r4, r5, r6, lr}
 801000e:	0004      	movs	r4, r0
 8010010:	0008      	movs	r0, r1
 8010012:	0011      	movs	r1, r2
 8010014:	001a      	movs	r2, r3
 8010016:	2300      	movs	r3, #0
 8010018:	4d05      	ldr	r5, [pc, #20]	@ (8010030 <_read_r+0x24>)
 801001a:	602b      	str	r3, [r5, #0]
 801001c:	f7f7 fbad 	bl	800777a <_read>
 8010020:	1c43      	adds	r3, r0, #1
 8010022:	d103      	bne.n	801002c <_read_r+0x20>
 8010024:	682b      	ldr	r3, [r5, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d000      	beq.n	801002c <_read_r+0x20>
 801002a:	6023      	str	r3, [r4, #0]
 801002c:	bd70      	pop	{r4, r5, r6, pc}
 801002e:	46c0      	nop			@ (mov r8, r8)
 8010030:	20001f0c 	.word	0x20001f0c

08010034 <_write_r>:
 8010034:	b570      	push	{r4, r5, r6, lr}
 8010036:	0004      	movs	r4, r0
 8010038:	0008      	movs	r0, r1
 801003a:	0011      	movs	r1, r2
 801003c:	001a      	movs	r2, r3
 801003e:	2300      	movs	r3, #0
 8010040:	4d05      	ldr	r5, [pc, #20]	@ (8010058 <_write_r+0x24>)
 8010042:	602b      	str	r3, [r5, #0]
 8010044:	f7f7 fffa 	bl	800803c <_write>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d103      	bne.n	8010054 <_write_r+0x20>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d000      	beq.n	8010054 <_write_r+0x20>
 8010052:	6023      	str	r3, [r4, #0]
 8010054:	bd70      	pop	{r4, r5, r6, pc}
 8010056:	46c0      	nop			@ (mov r8, r8)
 8010058:	20001f0c 	.word	0x20001f0c

0801005c <__errno>:
 801005c:	4b01      	ldr	r3, [pc, #4]	@ (8010064 <__errno+0x8>)
 801005e:	6818      	ldr	r0, [r3, #0]
 8010060:	4770      	bx	lr
 8010062:	46c0      	nop			@ (mov r8, r8)
 8010064:	20000158 	.word	0x20000158

08010068 <__libc_init_array>:
 8010068:	b570      	push	{r4, r5, r6, lr}
 801006a:	2600      	movs	r6, #0
 801006c:	4c0c      	ldr	r4, [pc, #48]	@ (80100a0 <__libc_init_array+0x38>)
 801006e:	4d0d      	ldr	r5, [pc, #52]	@ (80100a4 <__libc_init_array+0x3c>)
 8010070:	1b64      	subs	r4, r4, r5
 8010072:	10a4      	asrs	r4, r4, #2
 8010074:	42a6      	cmp	r6, r4
 8010076:	d109      	bne.n	801008c <__libc_init_array+0x24>
 8010078:	2600      	movs	r6, #0
 801007a:	f002 fae1 	bl	8012640 <_init>
 801007e:	4c0a      	ldr	r4, [pc, #40]	@ (80100a8 <__libc_init_array+0x40>)
 8010080:	4d0a      	ldr	r5, [pc, #40]	@ (80100ac <__libc_init_array+0x44>)
 8010082:	1b64      	subs	r4, r4, r5
 8010084:	10a4      	asrs	r4, r4, #2
 8010086:	42a6      	cmp	r6, r4
 8010088:	d105      	bne.n	8010096 <__libc_init_array+0x2e>
 801008a:	bd70      	pop	{r4, r5, r6, pc}
 801008c:	00b3      	lsls	r3, r6, #2
 801008e:	58eb      	ldr	r3, [r5, r3]
 8010090:	4798      	blx	r3
 8010092:	3601      	adds	r6, #1
 8010094:	e7ee      	b.n	8010074 <__libc_init_array+0xc>
 8010096:	00b3      	lsls	r3, r6, #2
 8010098:	58eb      	ldr	r3, [r5, r3]
 801009a:	4798      	blx	r3
 801009c:	3601      	adds	r6, #1
 801009e:	e7f2      	b.n	8010086 <__libc_init_array+0x1e>
 80100a0:	08013548 	.word	0x08013548
 80100a4:	08013548 	.word	0x08013548
 80100a8:	0801354c 	.word	0x0801354c
 80100ac:	08013548 	.word	0x08013548

080100b0 <__retarget_lock_init_recursive>:
 80100b0:	4770      	bx	lr

080100b2 <__retarget_lock_acquire_recursive>:
 80100b2:	4770      	bx	lr

080100b4 <__retarget_lock_release_recursive>:
 80100b4:	4770      	bx	lr

080100b6 <memchr>:
 80100b6:	b2c9      	uxtb	r1, r1
 80100b8:	1882      	adds	r2, r0, r2
 80100ba:	4290      	cmp	r0, r2
 80100bc:	d101      	bne.n	80100c2 <memchr+0xc>
 80100be:	2000      	movs	r0, #0
 80100c0:	4770      	bx	lr
 80100c2:	7803      	ldrb	r3, [r0, #0]
 80100c4:	428b      	cmp	r3, r1
 80100c6:	d0fb      	beq.n	80100c0 <memchr+0xa>
 80100c8:	3001      	adds	r0, #1
 80100ca:	e7f6      	b.n	80100ba <memchr+0x4>

080100cc <quorem>:
 80100cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ce:	6902      	ldr	r2, [r0, #16]
 80100d0:	690f      	ldr	r7, [r1, #16]
 80100d2:	b087      	sub	sp, #28
 80100d4:	0006      	movs	r6, r0
 80100d6:	000b      	movs	r3, r1
 80100d8:	2000      	movs	r0, #0
 80100da:	9102      	str	r1, [sp, #8]
 80100dc:	42ba      	cmp	r2, r7
 80100de:	db6d      	blt.n	80101bc <quorem+0xf0>
 80100e0:	3f01      	subs	r7, #1
 80100e2:	00bc      	lsls	r4, r7, #2
 80100e4:	3314      	adds	r3, #20
 80100e6:	9305      	str	r3, [sp, #20]
 80100e8:	191b      	adds	r3, r3, r4
 80100ea:	9303      	str	r3, [sp, #12]
 80100ec:	0033      	movs	r3, r6
 80100ee:	3314      	adds	r3, #20
 80100f0:	191c      	adds	r4, r3, r4
 80100f2:	9301      	str	r3, [sp, #4]
 80100f4:	6823      	ldr	r3, [r4, #0]
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	9b03      	ldr	r3, [sp, #12]
 80100fa:	9804      	ldr	r0, [sp, #16]
 80100fc:	681d      	ldr	r5, [r3, #0]
 80100fe:	3501      	adds	r5, #1
 8010100:	0029      	movs	r1, r5
 8010102:	f7f0 f81d 	bl	8000140 <__udivsi3>
 8010106:	9b04      	ldr	r3, [sp, #16]
 8010108:	9000      	str	r0, [sp, #0]
 801010a:	42ab      	cmp	r3, r5
 801010c:	d32b      	bcc.n	8010166 <quorem+0x9a>
 801010e:	9b05      	ldr	r3, [sp, #20]
 8010110:	9d01      	ldr	r5, [sp, #4]
 8010112:	469c      	mov	ip, r3
 8010114:	2300      	movs	r3, #0
 8010116:	9305      	str	r3, [sp, #20]
 8010118:	9304      	str	r3, [sp, #16]
 801011a:	4662      	mov	r2, ip
 801011c:	ca08      	ldmia	r2!, {r3}
 801011e:	6828      	ldr	r0, [r5, #0]
 8010120:	4694      	mov	ip, r2
 8010122:	9a00      	ldr	r2, [sp, #0]
 8010124:	b299      	uxth	r1, r3
 8010126:	4351      	muls	r1, r2
 8010128:	9a05      	ldr	r2, [sp, #20]
 801012a:	0c1b      	lsrs	r3, r3, #16
 801012c:	1889      	adds	r1, r1, r2
 801012e:	9a00      	ldr	r2, [sp, #0]
 8010130:	4353      	muls	r3, r2
 8010132:	0c0a      	lsrs	r2, r1, #16
 8010134:	189b      	adds	r3, r3, r2
 8010136:	0c1a      	lsrs	r2, r3, #16
 8010138:	b289      	uxth	r1, r1
 801013a:	9205      	str	r2, [sp, #20]
 801013c:	b282      	uxth	r2, r0
 801013e:	1a52      	subs	r2, r2, r1
 8010140:	9904      	ldr	r1, [sp, #16]
 8010142:	0c00      	lsrs	r0, r0, #16
 8010144:	1852      	adds	r2, r2, r1
 8010146:	b29b      	uxth	r3, r3
 8010148:	1411      	asrs	r1, r2, #16
 801014a:	1ac3      	subs	r3, r0, r3
 801014c:	185b      	adds	r3, r3, r1
 801014e:	1419      	asrs	r1, r3, #16
 8010150:	b292      	uxth	r2, r2
 8010152:	041b      	lsls	r3, r3, #16
 8010154:	431a      	orrs	r2, r3
 8010156:	9b03      	ldr	r3, [sp, #12]
 8010158:	9104      	str	r1, [sp, #16]
 801015a:	c504      	stmia	r5!, {r2}
 801015c:	4563      	cmp	r3, ip
 801015e:	d2dc      	bcs.n	801011a <quorem+0x4e>
 8010160:	6823      	ldr	r3, [r4, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d030      	beq.n	80101c8 <quorem+0xfc>
 8010166:	0030      	movs	r0, r6
 8010168:	9902      	ldr	r1, [sp, #8]
 801016a:	f001 f9c5 	bl	80114f8 <__mcmp>
 801016e:	2800      	cmp	r0, #0
 8010170:	db23      	blt.n	80101ba <quorem+0xee>
 8010172:	0034      	movs	r4, r6
 8010174:	2500      	movs	r5, #0
 8010176:	9902      	ldr	r1, [sp, #8]
 8010178:	3414      	adds	r4, #20
 801017a:	3114      	adds	r1, #20
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	c901      	ldmia	r1!, {r0}
 8010180:	9302      	str	r3, [sp, #8]
 8010182:	466b      	mov	r3, sp
 8010184:	891b      	ldrh	r3, [r3, #8]
 8010186:	b282      	uxth	r2, r0
 8010188:	1a9a      	subs	r2, r3, r2
 801018a:	9b02      	ldr	r3, [sp, #8]
 801018c:	1952      	adds	r2, r2, r5
 801018e:	0c00      	lsrs	r0, r0, #16
 8010190:	0c1b      	lsrs	r3, r3, #16
 8010192:	1a1b      	subs	r3, r3, r0
 8010194:	1410      	asrs	r0, r2, #16
 8010196:	181b      	adds	r3, r3, r0
 8010198:	141d      	asrs	r5, r3, #16
 801019a:	b292      	uxth	r2, r2
 801019c:	041b      	lsls	r3, r3, #16
 801019e:	431a      	orrs	r2, r3
 80101a0:	9b03      	ldr	r3, [sp, #12]
 80101a2:	c404      	stmia	r4!, {r2}
 80101a4:	428b      	cmp	r3, r1
 80101a6:	d2e9      	bcs.n	801017c <quorem+0xb0>
 80101a8:	9a01      	ldr	r2, [sp, #4]
 80101aa:	00bb      	lsls	r3, r7, #2
 80101ac:	18d3      	adds	r3, r2, r3
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	2a00      	cmp	r2, #0
 80101b2:	d013      	beq.n	80101dc <quorem+0x110>
 80101b4:	9b00      	ldr	r3, [sp, #0]
 80101b6:	3301      	adds	r3, #1
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	9800      	ldr	r0, [sp, #0]
 80101bc:	b007      	add	sp, #28
 80101be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101c0:	6823      	ldr	r3, [r4, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d104      	bne.n	80101d0 <quorem+0x104>
 80101c6:	3f01      	subs	r7, #1
 80101c8:	9b01      	ldr	r3, [sp, #4]
 80101ca:	3c04      	subs	r4, #4
 80101cc:	42a3      	cmp	r3, r4
 80101ce:	d3f7      	bcc.n	80101c0 <quorem+0xf4>
 80101d0:	6137      	str	r7, [r6, #16]
 80101d2:	e7c8      	b.n	8010166 <quorem+0x9a>
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d104      	bne.n	80101e4 <quorem+0x118>
 80101da:	3f01      	subs	r7, #1
 80101dc:	9a01      	ldr	r2, [sp, #4]
 80101de:	3b04      	subs	r3, #4
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d3f7      	bcc.n	80101d4 <quorem+0x108>
 80101e4:	6137      	str	r7, [r6, #16]
 80101e6:	e7e5      	b.n	80101b4 <quorem+0xe8>

080101e8 <_dtoa_r>:
 80101e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ea:	0014      	movs	r4, r2
 80101ec:	001d      	movs	r5, r3
 80101ee:	69c6      	ldr	r6, [r0, #28]
 80101f0:	b09d      	sub	sp, #116	@ 0x74
 80101f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80101f4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80101f6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80101f8:	9003      	str	r0, [sp, #12]
 80101fa:	2e00      	cmp	r6, #0
 80101fc:	d10f      	bne.n	801021e <_dtoa_r+0x36>
 80101fe:	2010      	movs	r0, #16
 8010200:	f000 fe30 	bl	8010e64 <malloc>
 8010204:	9b03      	ldr	r3, [sp, #12]
 8010206:	1e02      	subs	r2, r0, #0
 8010208:	61d8      	str	r0, [r3, #28]
 801020a:	d104      	bne.n	8010216 <_dtoa_r+0x2e>
 801020c:	21ef      	movs	r1, #239	@ 0xef
 801020e:	4bc7      	ldr	r3, [pc, #796]	@ (801052c <_dtoa_r+0x344>)
 8010210:	48c7      	ldr	r0, [pc, #796]	@ (8010530 <_dtoa_r+0x348>)
 8010212:	f001 feab 	bl	8011f6c <__assert_func>
 8010216:	6046      	str	r6, [r0, #4]
 8010218:	6086      	str	r6, [r0, #8]
 801021a:	6006      	str	r6, [r0, #0]
 801021c:	60c6      	str	r6, [r0, #12]
 801021e:	9b03      	ldr	r3, [sp, #12]
 8010220:	69db      	ldr	r3, [r3, #28]
 8010222:	6819      	ldr	r1, [r3, #0]
 8010224:	2900      	cmp	r1, #0
 8010226:	d00b      	beq.n	8010240 <_dtoa_r+0x58>
 8010228:	685a      	ldr	r2, [r3, #4]
 801022a:	2301      	movs	r3, #1
 801022c:	4093      	lsls	r3, r2
 801022e:	604a      	str	r2, [r1, #4]
 8010230:	608b      	str	r3, [r1, #8]
 8010232:	9803      	ldr	r0, [sp, #12]
 8010234:	f000 ff16 	bl	8011064 <_Bfree>
 8010238:	2200      	movs	r2, #0
 801023a:	9b03      	ldr	r3, [sp, #12]
 801023c:	69db      	ldr	r3, [r3, #28]
 801023e:	601a      	str	r2, [r3, #0]
 8010240:	2d00      	cmp	r5, #0
 8010242:	da1e      	bge.n	8010282 <_dtoa_r+0x9a>
 8010244:	2301      	movs	r3, #1
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	006b      	lsls	r3, r5, #1
 801024a:	085b      	lsrs	r3, r3, #1
 801024c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801024e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010250:	4bb8      	ldr	r3, [pc, #736]	@ (8010534 <_dtoa_r+0x34c>)
 8010252:	4ab8      	ldr	r2, [pc, #736]	@ (8010534 <_dtoa_r+0x34c>)
 8010254:	403b      	ands	r3, r7
 8010256:	4293      	cmp	r3, r2
 8010258:	d116      	bne.n	8010288 <_dtoa_r+0xa0>
 801025a:	4bb7      	ldr	r3, [pc, #732]	@ (8010538 <_dtoa_r+0x350>)
 801025c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801025e:	6013      	str	r3, [r2, #0]
 8010260:	033b      	lsls	r3, r7, #12
 8010262:	0b1b      	lsrs	r3, r3, #12
 8010264:	4323      	orrs	r3, r4
 8010266:	d101      	bne.n	801026c <_dtoa_r+0x84>
 8010268:	f000 fd83 	bl	8010d72 <_dtoa_r+0xb8a>
 801026c:	4bb3      	ldr	r3, [pc, #716]	@ (801053c <_dtoa_r+0x354>)
 801026e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010270:	9308      	str	r3, [sp, #32]
 8010272:	2a00      	cmp	r2, #0
 8010274:	d002      	beq.n	801027c <_dtoa_r+0x94>
 8010276:	4bb2      	ldr	r3, [pc, #712]	@ (8010540 <_dtoa_r+0x358>)
 8010278:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801027a:	6013      	str	r3, [r2, #0]
 801027c:	9808      	ldr	r0, [sp, #32]
 801027e:	b01d      	add	sp, #116	@ 0x74
 8010280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010282:	2300      	movs	r3, #0
 8010284:	603b      	str	r3, [r7, #0]
 8010286:	e7e2      	b.n	801024e <_dtoa_r+0x66>
 8010288:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801028a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801028c:	9212      	str	r2, [sp, #72]	@ 0x48
 801028e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010290:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010292:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010294:	2200      	movs	r2, #0
 8010296:	2300      	movs	r3, #0
 8010298:	f7f0 f8d8 	bl	800044c <__aeabi_dcmpeq>
 801029c:	1e06      	subs	r6, r0, #0
 801029e:	d00b      	beq.n	80102b8 <_dtoa_r+0xd0>
 80102a0:	2301      	movs	r3, #1
 80102a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80102a4:	6013      	str	r3, [r2, #0]
 80102a6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d002      	beq.n	80102b2 <_dtoa_r+0xca>
 80102ac:	4ba5      	ldr	r3, [pc, #660]	@ (8010544 <_dtoa_r+0x35c>)
 80102ae:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80102b0:	6013      	str	r3, [r2, #0]
 80102b2:	4ba5      	ldr	r3, [pc, #660]	@ (8010548 <_dtoa_r+0x360>)
 80102b4:	9308      	str	r3, [sp, #32]
 80102b6:	e7e1      	b.n	801027c <_dtoa_r+0x94>
 80102b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	9803      	ldr	r0, [sp, #12]
 80102c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80102c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80102c6:	f001 f9cd 	bl	8011664 <__d2b>
 80102ca:	007a      	lsls	r2, r7, #1
 80102cc:	9005      	str	r0, [sp, #20]
 80102ce:	0d52      	lsrs	r2, r2, #21
 80102d0:	d100      	bne.n	80102d4 <_dtoa_r+0xec>
 80102d2:	e07b      	b.n	80103cc <_dtoa_r+0x1e4>
 80102d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80102d6:	9618      	str	r6, [sp, #96]	@ 0x60
 80102d8:	0319      	lsls	r1, r3, #12
 80102da:	4b9c      	ldr	r3, [pc, #624]	@ (801054c <_dtoa_r+0x364>)
 80102dc:	0b09      	lsrs	r1, r1, #12
 80102de:	430b      	orrs	r3, r1
 80102e0:	499b      	ldr	r1, [pc, #620]	@ (8010550 <_dtoa_r+0x368>)
 80102e2:	1857      	adds	r7, r2, r1
 80102e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80102e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80102e8:	0019      	movs	r1, r3
 80102ea:	2200      	movs	r2, #0
 80102ec:	4b99      	ldr	r3, [pc, #612]	@ (8010554 <_dtoa_r+0x36c>)
 80102ee:	f7f2 fbeb 	bl	8002ac8 <__aeabi_dsub>
 80102f2:	4a99      	ldr	r2, [pc, #612]	@ (8010558 <_dtoa_r+0x370>)
 80102f4:	4b99      	ldr	r3, [pc, #612]	@ (801055c <_dtoa_r+0x374>)
 80102f6:	f7f2 f91f 	bl	8002538 <__aeabi_dmul>
 80102fa:	4a99      	ldr	r2, [pc, #612]	@ (8010560 <_dtoa_r+0x378>)
 80102fc:	4b99      	ldr	r3, [pc, #612]	@ (8010564 <_dtoa_r+0x37c>)
 80102fe:	f7f1 f973 	bl	80015e8 <__aeabi_dadd>
 8010302:	0004      	movs	r4, r0
 8010304:	0038      	movs	r0, r7
 8010306:	000d      	movs	r5, r1
 8010308:	f7f2 ffd8 	bl	80032bc <__aeabi_i2d>
 801030c:	4a96      	ldr	r2, [pc, #600]	@ (8010568 <_dtoa_r+0x380>)
 801030e:	4b97      	ldr	r3, [pc, #604]	@ (801056c <_dtoa_r+0x384>)
 8010310:	f7f2 f912 	bl	8002538 <__aeabi_dmul>
 8010314:	0002      	movs	r2, r0
 8010316:	000b      	movs	r3, r1
 8010318:	0020      	movs	r0, r4
 801031a:	0029      	movs	r1, r5
 801031c:	f7f1 f964 	bl	80015e8 <__aeabi_dadd>
 8010320:	0004      	movs	r4, r0
 8010322:	000d      	movs	r5, r1
 8010324:	f7f2 ff8e 	bl	8003244 <__aeabi_d2iz>
 8010328:	2200      	movs	r2, #0
 801032a:	9004      	str	r0, [sp, #16]
 801032c:	2300      	movs	r3, #0
 801032e:	0020      	movs	r0, r4
 8010330:	0029      	movs	r1, r5
 8010332:	f7f0 f891 	bl	8000458 <__aeabi_dcmplt>
 8010336:	2800      	cmp	r0, #0
 8010338:	d00b      	beq.n	8010352 <_dtoa_r+0x16a>
 801033a:	9804      	ldr	r0, [sp, #16]
 801033c:	f7f2 ffbe 	bl	80032bc <__aeabi_i2d>
 8010340:	002b      	movs	r3, r5
 8010342:	0022      	movs	r2, r4
 8010344:	f7f0 f882 	bl	800044c <__aeabi_dcmpeq>
 8010348:	4243      	negs	r3, r0
 801034a:	4158      	adcs	r0, r3
 801034c:	9b04      	ldr	r3, [sp, #16]
 801034e:	1a1b      	subs	r3, r3, r0
 8010350:	9304      	str	r3, [sp, #16]
 8010352:	2301      	movs	r3, #1
 8010354:	9315      	str	r3, [sp, #84]	@ 0x54
 8010356:	9b04      	ldr	r3, [sp, #16]
 8010358:	2b16      	cmp	r3, #22
 801035a:	d810      	bhi.n	801037e <_dtoa_r+0x196>
 801035c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801035e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010360:	9a04      	ldr	r2, [sp, #16]
 8010362:	4b83      	ldr	r3, [pc, #524]	@ (8010570 <_dtoa_r+0x388>)
 8010364:	00d2      	lsls	r2, r2, #3
 8010366:	189b      	adds	r3, r3, r2
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	f7f0 f874 	bl	8000458 <__aeabi_dcmplt>
 8010370:	2800      	cmp	r0, #0
 8010372:	d047      	beq.n	8010404 <_dtoa_r+0x21c>
 8010374:	9b04      	ldr	r3, [sp, #16]
 8010376:	3b01      	subs	r3, #1
 8010378:	9304      	str	r3, [sp, #16]
 801037a:	2300      	movs	r3, #0
 801037c:	9315      	str	r3, [sp, #84]	@ 0x54
 801037e:	2200      	movs	r2, #0
 8010380:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010382:	9206      	str	r2, [sp, #24]
 8010384:	1bdb      	subs	r3, r3, r7
 8010386:	1e5a      	subs	r2, r3, #1
 8010388:	d53e      	bpl.n	8010408 <_dtoa_r+0x220>
 801038a:	2201      	movs	r2, #1
 801038c:	1ad3      	subs	r3, r2, r3
 801038e:	9306      	str	r3, [sp, #24]
 8010390:	2300      	movs	r3, #0
 8010392:	930d      	str	r3, [sp, #52]	@ 0x34
 8010394:	9b04      	ldr	r3, [sp, #16]
 8010396:	2b00      	cmp	r3, #0
 8010398:	db38      	blt.n	801040c <_dtoa_r+0x224>
 801039a:	9a04      	ldr	r2, [sp, #16]
 801039c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801039e:	4694      	mov	ip, r2
 80103a0:	4463      	add	r3, ip
 80103a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80103a4:	2300      	movs	r3, #0
 80103a6:	9214      	str	r2, [sp, #80]	@ 0x50
 80103a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80103ac:	2401      	movs	r4, #1
 80103ae:	2b09      	cmp	r3, #9
 80103b0:	d867      	bhi.n	8010482 <_dtoa_r+0x29a>
 80103b2:	2b05      	cmp	r3, #5
 80103b4:	dd02      	ble.n	80103bc <_dtoa_r+0x1d4>
 80103b6:	2400      	movs	r4, #0
 80103b8:	3b04      	subs	r3, #4
 80103ba:	9322      	str	r3, [sp, #136]	@ 0x88
 80103bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80103be:	1e98      	subs	r0, r3, #2
 80103c0:	2803      	cmp	r0, #3
 80103c2:	d867      	bhi.n	8010494 <_dtoa_r+0x2ac>
 80103c4:	f7ef fea8 	bl	8000118 <__gnu_thumb1_case_uqi>
 80103c8:	5b383a2b 	.word	0x5b383a2b
 80103cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80103ce:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80103d0:	18f6      	adds	r6, r6, r3
 80103d2:	4b68      	ldr	r3, [pc, #416]	@ (8010574 <_dtoa_r+0x38c>)
 80103d4:	18f2      	adds	r2, r6, r3
 80103d6:	2a20      	cmp	r2, #32
 80103d8:	dd0f      	ble.n	80103fa <_dtoa_r+0x212>
 80103da:	2340      	movs	r3, #64	@ 0x40
 80103dc:	1a9b      	subs	r3, r3, r2
 80103de:	409f      	lsls	r7, r3
 80103e0:	4b65      	ldr	r3, [pc, #404]	@ (8010578 <_dtoa_r+0x390>)
 80103e2:	0038      	movs	r0, r7
 80103e4:	18f3      	adds	r3, r6, r3
 80103e6:	40dc      	lsrs	r4, r3
 80103e8:	4320      	orrs	r0, r4
 80103ea:	f7f2 ff95 	bl	8003318 <__aeabi_ui2d>
 80103ee:	2201      	movs	r2, #1
 80103f0:	4b62      	ldr	r3, [pc, #392]	@ (801057c <_dtoa_r+0x394>)
 80103f2:	1e77      	subs	r7, r6, #1
 80103f4:	18cb      	adds	r3, r1, r3
 80103f6:	9218      	str	r2, [sp, #96]	@ 0x60
 80103f8:	e776      	b.n	80102e8 <_dtoa_r+0x100>
 80103fa:	2320      	movs	r3, #32
 80103fc:	0020      	movs	r0, r4
 80103fe:	1a9b      	subs	r3, r3, r2
 8010400:	4098      	lsls	r0, r3
 8010402:	e7f2      	b.n	80103ea <_dtoa_r+0x202>
 8010404:	9015      	str	r0, [sp, #84]	@ 0x54
 8010406:	e7ba      	b.n	801037e <_dtoa_r+0x196>
 8010408:	920d      	str	r2, [sp, #52]	@ 0x34
 801040a:	e7c3      	b.n	8010394 <_dtoa_r+0x1ac>
 801040c:	9b06      	ldr	r3, [sp, #24]
 801040e:	9a04      	ldr	r2, [sp, #16]
 8010410:	1a9b      	subs	r3, r3, r2
 8010412:	9306      	str	r3, [sp, #24]
 8010414:	4253      	negs	r3, r2
 8010416:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010418:	2300      	movs	r3, #0
 801041a:	9314      	str	r3, [sp, #80]	@ 0x50
 801041c:	e7c5      	b.n	80103aa <_dtoa_r+0x1c2>
 801041e:	2300      	movs	r3, #0
 8010420:	9310      	str	r3, [sp, #64]	@ 0x40
 8010422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010424:	930e      	str	r3, [sp, #56]	@ 0x38
 8010426:	9309      	str	r3, [sp, #36]	@ 0x24
 8010428:	2b00      	cmp	r3, #0
 801042a:	dc13      	bgt.n	8010454 <_dtoa_r+0x26c>
 801042c:	2301      	movs	r3, #1
 801042e:	001a      	movs	r2, r3
 8010430:	930e      	str	r3, [sp, #56]	@ 0x38
 8010432:	9309      	str	r3, [sp, #36]	@ 0x24
 8010434:	9223      	str	r2, [sp, #140]	@ 0x8c
 8010436:	e00d      	b.n	8010454 <_dtoa_r+0x26c>
 8010438:	2301      	movs	r3, #1
 801043a:	e7f1      	b.n	8010420 <_dtoa_r+0x238>
 801043c:	2300      	movs	r3, #0
 801043e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010440:	9310      	str	r3, [sp, #64]	@ 0x40
 8010442:	4694      	mov	ip, r2
 8010444:	9b04      	ldr	r3, [sp, #16]
 8010446:	4463      	add	r3, ip
 8010448:	930e      	str	r3, [sp, #56]	@ 0x38
 801044a:	3301      	adds	r3, #1
 801044c:	9309      	str	r3, [sp, #36]	@ 0x24
 801044e:	2b00      	cmp	r3, #0
 8010450:	dc00      	bgt.n	8010454 <_dtoa_r+0x26c>
 8010452:	2301      	movs	r3, #1
 8010454:	9a03      	ldr	r2, [sp, #12]
 8010456:	2100      	movs	r1, #0
 8010458:	69d0      	ldr	r0, [r2, #28]
 801045a:	2204      	movs	r2, #4
 801045c:	0015      	movs	r5, r2
 801045e:	3514      	adds	r5, #20
 8010460:	429d      	cmp	r5, r3
 8010462:	d91b      	bls.n	801049c <_dtoa_r+0x2b4>
 8010464:	6041      	str	r1, [r0, #4]
 8010466:	9803      	ldr	r0, [sp, #12]
 8010468:	f000 fdb8 	bl	8010fdc <_Balloc>
 801046c:	9008      	str	r0, [sp, #32]
 801046e:	2800      	cmp	r0, #0
 8010470:	d117      	bne.n	80104a2 <_dtoa_r+0x2ba>
 8010472:	21b0      	movs	r1, #176	@ 0xb0
 8010474:	4b42      	ldr	r3, [pc, #264]	@ (8010580 <_dtoa_r+0x398>)
 8010476:	482e      	ldr	r0, [pc, #184]	@ (8010530 <_dtoa_r+0x348>)
 8010478:	9a08      	ldr	r2, [sp, #32]
 801047a:	31ff      	adds	r1, #255	@ 0xff
 801047c:	e6c9      	b.n	8010212 <_dtoa_r+0x2a>
 801047e:	2301      	movs	r3, #1
 8010480:	e7dd      	b.n	801043e <_dtoa_r+0x256>
 8010482:	2300      	movs	r3, #0
 8010484:	9410      	str	r4, [sp, #64]	@ 0x40
 8010486:	9322      	str	r3, [sp, #136]	@ 0x88
 8010488:	3b01      	subs	r3, #1
 801048a:	930e      	str	r3, [sp, #56]	@ 0x38
 801048c:	9309      	str	r3, [sp, #36]	@ 0x24
 801048e:	2200      	movs	r2, #0
 8010490:	3313      	adds	r3, #19
 8010492:	e7cf      	b.n	8010434 <_dtoa_r+0x24c>
 8010494:	2301      	movs	r3, #1
 8010496:	9310      	str	r3, [sp, #64]	@ 0x40
 8010498:	3b02      	subs	r3, #2
 801049a:	e7f6      	b.n	801048a <_dtoa_r+0x2a2>
 801049c:	3101      	adds	r1, #1
 801049e:	0052      	lsls	r2, r2, #1
 80104a0:	e7dc      	b.n	801045c <_dtoa_r+0x274>
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	9a08      	ldr	r2, [sp, #32]
 80104a6:	69db      	ldr	r3, [r3, #28]
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ac:	2b0e      	cmp	r3, #14
 80104ae:	d900      	bls.n	80104b2 <_dtoa_r+0x2ca>
 80104b0:	e0d9      	b.n	8010666 <_dtoa_r+0x47e>
 80104b2:	2c00      	cmp	r4, #0
 80104b4:	d100      	bne.n	80104b8 <_dtoa_r+0x2d0>
 80104b6:	e0d6      	b.n	8010666 <_dtoa_r+0x47e>
 80104b8:	9b04      	ldr	r3, [sp, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	dd64      	ble.n	8010588 <_dtoa_r+0x3a0>
 80104be:	210f      	movs	r1, #15
 80104c0:	9a04      	ldr	r2, [sp, #16]
 80104c2:	4b2b      	ldr	r3, [pc, #172]	@ (8010570 <_dtoa_r+0x388>)
 80104c4:	400a      	ands	r2, r1
 80104c6:	00d2      	lsls	r2, r2, #3
 80104c8:	189b      	adds	r3, r3, r2
 80104ca:	681e      	ldr	r6, [r3, #0]
 80104cc:	685f      	ldr	r7, [r3, #4]
 80104ce:	9b04      	ldr	r3, [sp, #16]
 80104d0:	2402      	movs	r4, #2
 80104d2:	111d      	asrs	r5, r3, #4
 80104d4:	05db      	lsls	r3, r3, #23
 80104d6:	d50a      	bpl.n	80104ee <_dtoa_r+0x306>
 80104d8:	4b2a      	ldr	r3, [pc, #168]	@ (8010584 <_dtoa_r+0x39c>)
 80104da:	400d      	ands	r5, r1
 80104dc:	6a1a      	ldr	r2, [r3, #32]
 80104de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80104e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80104e4:	f7f1 fbe4 	bl	8001cb0 <__aeabi_ddiv>
 80104e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80104ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 80104ec:	3401      	adds	r4, #1
 80104ee:	4b25      	ldr	r3, [pc, #148]	@ (8010584 <_dtoa_r+0x39c>)
 80104f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80104f2:	2d00      	cmp	r5, #0
 80104f4:	d108      	bne.n	8010508 <_dtoa_r+0x320>
 80104f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80104f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80104fa:	0032      	movs	r2, r6
 80104fc:	003b      	movs	r3, r7
 80104fe:	f7f1 fbd7 	bl	8001cb0 <__aeabi_ddiv>
 8010502:	900a      	str	r0, [sp, #40]	@ 0x28
 8010504:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010506:	e05a      	b.n	80105be <_dtoa_r+0x3d6>
 8010508:	2301      	movs	r3, #1
 801050a:	421d      	tst	r5, r3
 801050c:	d009      	beq.n	8010522 <_dtoa_r+0x33a>
 801050e:	18e4      	adds	r4, r4, r3
 8010510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010512:	0030      	movs	r0, r6
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	0039      	movs	r1, r7
 801051a:	f7f2 f80d 	bl	8002538 <__aeabi_dmul>
 801051e:	0006      	movs	r6, r0
 8010520:	000f      	movs	r7, r1
 8010522:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010524:	106d      	asrs	r5, r5, #1
 8010526:	3308      	adds	r3, #8
 8010528:	e7e2      	b.n	80104f0 <_dtoa_r+0x308>
 801052a:	46c0      	nop			@ (mov r8, r8)
 801052c:	080131f9 	.word	0x080131f9
 8010530:	08013210 	.word	0x08013210
 8010534:	7ff00000 	.word	0x7ff00000
 8010538:	0000270f 	.word	0x0000270f
 801053c:	080131f5 	.word	0x080131f5
 8010540:	080131f8 	.word	0x080131f8
 8010544:	080131c9 	.word	0x080131c9
 8010548:	080131c8 	.word	0x080131c8
 801054c:	3ff00000 	.word	0x3ff00000
 8010550:	fffffc01 	.word	0xfffffc01
 8010554:	3ff80000 	.word	0x3ff80000
 8010558:	636f4361 	.word	0x636f4361
 801055c:	3fd287a7 	.word	0x3fd287a7
 8010560:	8b60c8b3 	.word	0x8b60c8b3
 8010564:	3fc68a28 	.word	0x3fc68a28
 8010568:	509f79fb 	.word	0x509f79fb
 801056c:	3fd34413 	.word	0x3fd34413
 8010570:	08013308 	.word	0x08013308
 8010574:	00000432 	.word	0x00000432
 8010578:	00000412 	.word	0x00000412
 801057c:	fe100000 	.word	0xfe100000
 8010580:	08013268 	.word	0x08013268
 8010584:	080132e0 	.word	0x080132e0
 8010588:	9b04      	ldr	r3, [sp, #16]
 801058a:	2402      	movs	r4, #2
 801058c:	2b00      	cmp	r3, #0
 801058e:	d016      	beq.n	80105be <_dtoa_r+0x3d6>
 8010590:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010592:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010594:	220f      	movs	r2, #15
 8010596:	425d      	negs	r5, r3
 8010598:	402a      	ands	r2, r5
 801059a:	4bd7      	ldr	r3, [pc, #860]	@ (80108f8 <_dtoa_r+0x710>)
 801059c:	00d2      	lsls	r2, r2, #3
 801059e:	189b      	adds	r3, r3, r2
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	f7f1 ffc8 	bl	8002538 <__aeabi_dmul>
 80105a8:	2701      	movs	r7, #1
 80105aa:	2300      	movs	r3, #0
 80105ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80105ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 80105b0:	4ed2      	ldr	r6, [pc, #840]	@ (80108fc <_dtoa_r+0x714>)
 80105b2:	112d      	asrs	r5, r5, #4
 80105b4:	2d00      	cmp	r5, #0
 80105b6:	d000      	beq.n	80105ba <_dtoa_r+0x3d2>
 80105b8:	e0ba      	b.n	8010730 <_dtoa_r+0x548>
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d1a1      	bne.n	8010502 <_dtoa_r+0x31a>
 80105be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80105c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80105c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d100      	bne.n	80105ca <_dtoa_r+0x3e2>
 80105c8:	e0bd      	b.n	8010746 <_dtoa_r+0x55e>
 80105ca:	2200      	movs	r2, #0
 80105cc:	0030      	movs	r0, r6
 80105ce:	0039      	movs	r1, r7
 80105d0:	4bcb      	ldr	r3, [pc, #812]	@ (8010900 <_dtoa_r+0x718>)
 80105d2:	f7ef ff41 	bl	8000458 <__aeabi_dcmplt>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	d100      	bne.n	80105dc <_dtoa_r+0x3f4>
 80105da:	e0b4      	b.n	8010746 <_dtoa_r+0x55e>
 80105dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d100      	bne.n	80105e4 <_dtoa_r+0x3fc>
 80105e2:	e0b0      	b.n	8010746 <_dtoa_r+0x55e>
 80105e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	dd39      	ble.n	801065e <_dtoa_r+0x476>
 80105ea:	9b04      	ldr	r3, [sp, #16]
 80105ec:	2200      	movs	r2, #0
 80105ee:	3b01      	subs	r3, #1
 80105f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80105f2:	0030      	movs	r0, r6
 80105f4:	4bc3      	ldr	r3, [pc, #780]	@ (8010904 <_dtoa_r+0x71c>)
 80105f6:	0039      	movs	r1, r7
 80105f8:	f7f1 ff9e 	bl	8002538 <__aeabi_dmul>
 80105fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80105fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010602:	3401      	adds	r4, #1
 8010604:	0020      	movs	r0, r4
 8010606:	9311      	str	r3, [sp, #68]	@ 0x44
 8010608:	f7f2 fe58 	bl	80032bc <__aeabi_i2d>
 801060c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801060e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010610:	f7f1 ff92 	bl	8002538 <__aeabi_dmul>
 8010614:	4bbc      	ldr	r3, [pc, #752]	@ (8010908 <_dtoa_r+0x720>)
 8010616:	2200      	movs	r2, #0
 8010618:	f7f0 ffe6 	bl	80015e8 <__aeabi_dadd>
 801061c:	4bbb      	ldr	r3, [pc, #748]	@ (801090c <_dtoa_r+0x724>)
 801061e:	0006      	movs	r6, r0
 8010620:	18cf      	adds	r7, r1, r3
 8010622:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010624:	2b00      	cmp	r3, #0
 8010626:	d000      	beq.n	801062a <_dtoa_r+0x442>
 8010628:	e091      	b.n	801074e <_dtoa_r+0x566>
 801062a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801062c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801062e:	2200      	movs	r2, #0
 8010630:	4bb7      	ldr	r3, [pc, #732]	@ (8010910 <_dtoa_r+0x728>)
 8010632:	f7f2 fa49 	bl	8002ac8 <__aeabi_dsub>
 8010636:	0032      	movs	r2, r6
 8010638:	003b      	movs	r3, r7
 801063a:	0004      	movs	r4, r0
 801063c:	000d      	movs	r5, r1
 801063e:	f7ef ff1f 	bl	8000480 <__aeabi_dcmpgt>
 8010642:	2800      	cmp	r0, #0
 8010644:	d000      	beq.n	8010648 <_dtoa_r+0x460>
 8010646:	e29d      	b.n	8010b84 <_dtoa_r+0x99c>
 8010648:	2180      	movs	r1, #128	@ 0x80
 801064a:	0609      	lsls	r1, r1, #24
 801064c:	187b      	adds	r3, r7, r1
 801064e:	0032      	movs	r2, r6
 8010650:	0020      	movs	r0, r4
 8010652:	0029      	movs	r1, r5
 8010654:	f7ef ff00 	bl	8000458 <__aeabi_dcmplt>
 8010658:	2800      	cmp	r0, #0
 801065a:	d000      	beq.n	801065e <_dtoa_r+0x476>
 801065c:	e130      	b.n	80108c0 <_dtoa_r+0x6d8>
 801065e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010660:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010662:	930a      	str	r3, [sp, #40]	@ 0x28
 8010664:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010666:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010668:	2b00      	cmp	r3, #0
 801066a:	da00      	bge.n	801066e <_dtoa_r+0x486>
 801066c:	e177      	b.n	801095e <_dtoa_r+0x776>
 801066e:	9a04      	ldr	r2, [sp, #16]
 8010670:	2a0e      	cmp	r2, #14
 8010672:	dd00      	ble.n	8010676 <_dtoa_r+0x48e>
 8010674:	e173      	b.n	801095e <_dtoa_r+0x776>
 8010676:	4ba0      	ldr	r3, [pc, #640]	@ (80108f8 <_dtoa_r+0x710>)
 8010678:	00d2      	lsls	r2, r2, #3
 801067a:	189b      	adds	r3, r3, r2
 801067c:	685c      	ldr	r4, [r3, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	9306      	str	r3, [sp, #24]
 8010682:	9407      	str	r4, [sp, #28]
 8010684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010686:	2b00      	cmp	r3, #0
 8010688:	da03      	bge.n	8010692 <_dtoa_r+0x4aa>
 801068a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801068c:	2b00      	cmp	r3, #0
 801068e:	dc00      	bgt.n	8010692 <_dtoa_r+0x4aa>
 8010690:	e106      	b.n	80108a0 <_dtoa_r+0x6b8>
 8010692:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010694:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010698:	9d08      	ldr	r5, [sp, #32]
 801069a:	3b01      	subs	r3, #1
 801069c:	195b      	adds	r3, r3, r5
 801069e:	930a      	str	r3, [sp, #40]	@ 0x28
 80106a0:	9a06      	ldr	r2, [sp, #24]
 80106a2:	9b07      	ldr	r3, [sp, #28]
 80106a4:	0030      	movs	r0, r6
 80106a6:	0039      	movs	r1, r7
 80106a8:	f7f1 fb02 	bl	8001cb0 <__aeabi_ddiv>
 80106ac:	f7f2 fdca 	bl	8003244 <__aeabi_d2iz>
 80106b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80106b2:	f7f2 fe03 	bl	80032bc <__aeabi_i2d>
 80106b6:	9a06      	ldr	r2, [sp, #24]
 80106b8:	9b07      	ldr	r3, [sp, #28]
 80106ba:	f7f1 ff3d 	bl	8002538 <__aeabi_dmul>
 80106be:	0002      	movs	r2, r0
 80106c0:	000b      	movs	r3, r1
 80106c2:	0030      	movs	r0, r6
 80106c4:	0039      	movs	r1, r7
 80106c6:	f7f2 f9ff 	bl	8002ac8 <__aeabi_dsub>
 80106ca:	002b      	movs	r3, r5
 80106cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106ce:	3501      	adds	r5, #1
 80106d0:	3230      	adds	r2, #48	@ 0x30
 80106d2:	701a      	strb	r2, [r3, #0]
 80106d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106d6:	002c      	movs	r4, r5
 80106d8:	429a      	cmp	r2, r3
 80106da:	d000      	beq.n	80106de <_dtoa_r+0x4f6>
 80106dc:	e131      	b.n	8010942 <_dtoa_r+0x75a>
 80106de:	0002      	movs	r2, r0
 80106e0:	000b      	movs	r3, r1
 80106e2:	f7f0 ff81 	bl	80015e8 <__aeabi_dadd>
 80106e6:	9a06      	ldr	r2, [sp, #24]
 80106e8:	9b07      	ldr	r3, [sp, #28]
 80106ea:	0006      	movs	r6, r0
 80106ec:	000f      	movs	r7, r1
 80106ee:	f7ef fec7 	bl	8000480 <__aeabi_dcmpgt>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d000      	beq.n	80106f8 <_dtoa_r+0x510>
 80106f6:	e10f      	b.n	8010918 <_dtoa_r+0x730>
 80106f8:	9a06      	ldr	r2, [sp, #24]
 80106fa:	9b07      	ldr	r3, [sp, #28]
 80106fc:	0030      	movs	r0, r6
 80106fe:	0039      	movs	r1, r7
 8010700:	f7ef fea4 	bl	800044c <__aeabi_dcmpeq>
 8010704:	2800      	cmp	r0, #0
 8010706:	d003      	beq.n	8010710 <_dtoa_r+0x528>
 8010708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801070a:	07dd      	lsls	r5, r3, #31
 801070c:	d500      	bpl.n	8010710 <_dtoa_r+0x528>
 801070e:	e103      	b.n	8010918 <_dtoa_r+0x730>
 8010710:	9905      	ldr	r1, [sp, #20]
 8010712:	9803      	ldr	r0, [sp, #12]
 8010714:	f000 fca6 	bl	8011064 <_Bfree>
 8010718:	2300      	movs	r3, #0
 801071a:	7023      	strb	r3, [r4, #0]
 801071c:	9b04      	ldr	r3, [sp, #16]
 801071e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010720:	3301      	adds	r3, #1
 8010722:	6013      	str	r3, [r2, #0]
 8010724:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010726:	2b00      	cmp	r3, #0
 8010728:	d100      	bne.n	801072c <_dtoa_r+0x544>
 801072a:	e5a7      	b.n	801027c <_dtoa_r+0x94>
 801072c:	601c      	str	r4, [r3, #0]
 801072e:	e5a5      	b.n	801027c <_dtoa_r+0x94>
 8010730:	423d      	tst	r5, r7
 8010732:	d005      	beq.n	8010740 <_dtoa_r+0x558>
 8010734:	6832      	ldr	r2, [r6, #0]
 8010736:	6873      	ldr	r3, [r6, #4]
 8010738:	f7f1 fefe 	bl	8002538 <__aeabi_dmul>
 801073c:	003b      	movs	r3, r7
 801073e:	3401      	adds	r4, #1
 8010740:	106d      	asrs	r5, r5, #1
 8010742:	3608      	adds	r6, #8
 8010744:	e736      	b.n	80105b4 <_dtoa_r+0x3cc>
 8010746:	9b04      	ldr	r3, [sp, #16]
 8010748:	930c      	str	r3, [sp, #48]	@ 0x30
 801074a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801074c:	e75a      	b.n	8010604 <_dtoa_r+0x41c>
 801074e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010750:	4b69      	ldr	r3, [pc, #420]	@ (80108f8 <_dtoa_r+0x710>)
 8010752:	3a01      	subs	r2, #1
 8010754:	00d2      	lsls	r2, r2, #3
 8010756:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010758:	189b      	adds	r3, r3, r2
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	2900      	cmp	r1, #0
 8010760:	d04c      	beq.n	80107fc <_dtoa_r+0x614>
 8010762:	2000      	movs	r0, #0
 8010764:	496b      	ldr	r1, [pc, #428]	@ (8010914 <_dtoa_r+0x72c>)
 8010766:	f7f1 faa3 	bl	8001cb0 <__aeabi_ddiv>
 801076a:	0032      	movs	r2, r6
 801076c:	003b      	movs	r3, r7
 801076e:	f7f2 f9ab 	bl	8002ac8 <__aeabi_dsub>
 8010772:	9a08      	ldr	r2, [sp, #32]
 8010774:	0006      	movs	r6, r0
 8010776:	4694      	mov	ip, r2
 8010778:	000f      	movs	r7, r1
 801077a:	9b08      	ldr	r3, [sp, #32]
 801077c:	9316      	str	r3, [sp, #88]	@ 0x58
 801077e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010780:	4463      	add	r3, ip
 8010782:	9311      	str	r3, [sp, #68]	@ 0x44
 8010784:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010786:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010788:	f7f2 fd5c 	bl	8003244 <__aeabi_d2iz>
 801078c:	0005      	movs	r5, r0
 801078e:	f7f2 fd95 	bl	80032bc <__aeabi_i2d>
 8010792:	0002      	movs	r2, r0
 8010794:	000b      	movs	r3, r1
 8010796:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010798:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801079a:	f7f2 f995 	bl	8002ac8 <__aeabi_dsub>
 801079e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80107a0:	3530      	adds	r5, #48	@ 0x30
 80107a2:	1c5c      	adds	r4, r3, #1
 80107a4:	701d      	strb	r5, [r3, #0]
 80107a6:	0032      	movs	r2, r6
 80107a8:	003b      	movs	r3, r7
 80107aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80107ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80107ae:	f7ef fe53 	bl	8000458 <__aeabi_dcmplt>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	d16a      	bne.n	801088c <_dtoa_r+0x6a4>
 80107b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107ba:	2000      	movs	r0, #0
 80107bc:	4950      	ldr	r1, [pc, #320]	@ (8010900 <_dtoa_r+0x718>)
 80107be:	f7f2 f983 	bl	8002ac8 <__aeabi_dsub>
 80107c2:	0032      	movs	r2, r6
 80107c4:	003b      	movs	r3, r7
 80107c6:	f7ef fe47 	bl	8000458 <__aeabi_dcmplt>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d000      	beq.n	80107d0 <_dtoa_r+0x5e8>
 80107ce:	e0a5      	b.n	801091c <_dtoa_r+0x734>
 80107d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107d2:	42a3      	cmp	r3, r4
 80107d4:	d100      	bne.n	80107d8 <_dtoa_r+0x5f0>
 80107d6:	e742      	b.n	801065e <_dtoa_r+0x476>
 80107d8:	2200      	movs	r2, #0
 80107da:	0030      	movs	r0, r6
 80107dc:	0039      	movs	r1, r7
 80107de:	4b49      	ldr	r3, [pc, #292]	@ (8010904 <_dtoa_r+0x71c>)
 80107e0:	f7f1 feaa 	bl	8002538 <__aeabi_dmul>
 80107e4:	2200      	movs	r2, #0
 80107e6:	0006      	movs	r6, r0
 80107e8:	000f      	movs	r7, r1
 80107ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80107ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80107ee:	4b45      	ldr	r3, [pc, #276]	@ (8010904 <_dtoa_r+0x71c>)
 80107f0:	f7f1 fea2 	bl	8002538 <__aeabi_dmul>
 80107f4:	9416      	str	r4, [sp, #88]	@ 0x58
 80107f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80107f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80107fa:	e7c3      	b.n	8010784 <_dtoa_r+0x59c>
 80107fc:	0030      	movs	r0, r6
 80107fe:	0039      	movs	r1, r7
 8010800:	f7f1 fe9a 	bl	8002538 <__aeabi_dmul>
 8010804:	9d08      	ldr	r5, [sp, #32]
 8010806:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010808:	002b      	movs	r3, r5
 801080a:	4694      	mov	ip, r2
 801080c:	9016      	str	r0, [sp, #88]	@ 0x58
 801080e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010810:	4463      	add	r3, ip
 8010812:	9319      	str	r3, [sp, #100]	@ 0x64
 8010814:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010816:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010818:	f7f2 fd14 	bl	8003244 <__aeabi_d2iz>
 801081c:	0004      	movs	r4, r0
 801081e:	f7f2 fd4d 	bl	80032bc <__aeabi_i2d>
 8010822:	000b      	movs	r3, r1
 8010824:	0002      	movs	r2, r0
 8010826:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010828:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801082a:	f7f2 f94d 	bl	8002ac8 <__aeabi_dsub>
 801082e:	3430      	adds	r4, #48	@ 0x30
 8010830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010832:	702c      	strb	r4, [r5, #0]
 8010834:	3501      	adds	r5, #1
 8010836:	0006      	movs	r6, r0
 8010838:	000f      	movs	r7, r1
 801083a:	42ab      	cmp	r3, r5
 801083c:	d129      	bne.n	8010892 <_dtoa_r+0x6aa>
 801083e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010840:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010842:	9b08      	ldr	r3, [sp, #32]
 8010844:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8010846:	469c      	mov	ip, r3
 8010848:	2200      	movs	r2, #0
 801084a:	4b32      	ldr	r3, [pc, #200]	@ (8010914 <_dtoa_r+0x72c>)
 801084c:	4464      	add	r4, ip
 801084e:	f7f0 fecb 	bl	80015e8 <__aeabi_dadd>
 8010852:	0002      	movs	r2, r0
 8010854:	000b      	movs	r3, r1
 8010856:	0030      	movs	r0, r6
 8010858:	0039      	movs	r1, r7
 801085a:	f7ef fe11 	bl	8000480 <__aeabi_dcmpgt>
 801085e:	2800      	cmp	r0, #0
 8010860:	d15c      	bne.n	801091c <_dtoa_r+0x734>
 8010862:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010864:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010866:	2000      	movs	r0, #0
 8010868:	492a      	ldr	r1, [pc, #168]	@ (8010914 <_dtoa_r+0x72c>)
 801086a:	f7f2 f92d 	bl	8002ac8 <__aeabi_dsub>
 801086e:	0002      	movs	r2, r0
 8010870:	000b      	movs	r3, r1
 8010872:	0030      	movs	r0, r6
 8010874:	0039      	movs	r1, r7
 8010876:	f7ef fdef 	bl	8000458 <__aeabi_dcmplt>
 801087a:	2800      	cmp	r0, #0
 801087c:	d100      	bne.n	8010880 <_dtoa_r+0x698>
 801087e:	e6ee      	b.n	801065e <_dtoa_r+0x476>
 8010880:	0023      	movs	r3, r4
 8010882:	3c01      	subs	r4, #1
 8010884:	7822      	ldrb	r2, [r4, #0]
 8010886:	2a30      	cmp	r2, #48	@ 0x30
 8010888:	d0fa      	beq.n	8010880 <_dtoa_r+0x698>
 801088a:	001c      	movs	r4, r3
 801088c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801088e:	9304      	str	r3, [sp, #16]
 8010890:	e73e      	b.n	8010710 <_dtoa_r+0x528>
 8010892:	2200      	movs	r2, #0
 8010894:	4b1b      	ldr	r3, [pc, #108]	@ (8010904 <_dtoa_r+0x71c>)
 8010896:	f7f1 fe4f 	bl	8002538 <__aeabi_dmul>
 801089a:	900a      	str	r0, [sp, #40]	@ 0x28
 801089c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801089e:	e7b9      	b.n	8010814 <_dtoa_r+0x62c>
 80108a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10c      	bne.n	80108c0 <_dtoa_r+0x6d8>
 80108a6:	9806      	ldr	r0, [sp, #24]
 80108a8:	9907      	ldr	r1, [sp, #28]
 80108aa:	2200      	movs	r2, #0
 80108ac:	4b18      	ldr	r3, [pc, #96]	@ (8010910 <_dtoa_r+0x728>)
 80108ae:	f7f1 fe43 	bl	8002538 <__aeabi_dmul>
 80108b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108b6:	f7ef fded 	bl	8000494 <__aeabi_dcmpge>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	d100      	bne.n	80108c0 <_dtoa_r+0x6d8>
 80108be:	e164      	b.n	8010b8a <_dtoa_r+0x9a2>
 80108c0:	2600      	movs	r6, #0
 80108c2:	0037      	movs	r7, r6
 80108c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80108c6:	9c08      	ldr	r4, [sp, #32]
 80108c8:	43db      	mvns	r3, r3
 80108ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80108cc:	2300      	movs	r3, #0
 80108ce:	9304      	str	r3, [sp, #16]
 80108d0:	0031      	movs	r1, r6
 80108d2:	9803      	ldr	r0, [sp, #12]
 80108d4:	f000 fbc6 	bl	8011064 <_Bfree>
 80108d8:	2f00      	cmp	r7, #0
 80108da:	d0d7      	beq.n	801088c <_dtoa_r+0x6a4>
 80108dc:	9b04      	ldr	r3, [sp, #16]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d005      	beq.n	80108ee <_dtoa_r+0x706>
 80108e2:	42bb      	cmp	r3, r7
 80108e4:	d003      	beq.n	80108ee <_dtoa_r+0x706>
 80108e6:	0019      	movs	r1, r3
 80108e8:	9803      	ldr	r0, [sp, #12]
 80108ea:	f000 fbbb 	bl	8011064 <_Bfree>
 80108ee:	0039      	movs	r1, r7
 80108f0:	9803      	ldr	r0, [sp, #12]
 80108f2:	f000 fbb7 	bl	8011064 <_Bfree>
 80108f6:	e7c9      	b.n	801088c <_dtoa_r+0x6a4>
 80108f8:	08013308 	.word	0x08013308
 80108fc:	080132e0 	.word	0x080132e0
 8010900:	3ff00000 	.word	0x3ff00000
 8010904:	40240000 	.word	0x40240000
 8010908:	401c0000 	.word	0x401c0000
 801090c:	fcc00000 	.word	0xfcc00000
 8010910:	40140000 	.word	0x40140000
 8010914:	3fe00000 	.word	0x3fe00000
 8010918:	9b04      	ldr	r3, [sp, #16]
 801091a:	930c      	str	r3, [sp, #48]	@ 0x30
 801091c:	0023      	movs	r3, r4
 801091e:	001c      	movs	r4, r3
 8010920:	3b01      	subs	r3, #1
 8010922:	781a      	ldrb	r2, [r3, #0]
 8010924:	2a39      	cmp	r2, #57	@ 0x39
 8010926:	d108      	bne.n	801093a <_dtoa_r+0x752>
 8010928:	9a08      	ldr	r2, [sp, #32]
 801092a:	429a      	cmp	r2, r3
 801092c:	d1f7      	bne.n	801091e <_dtoa_r+0x736>
 801092e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010930:	9908      	ldr	r1, [sp, #32]
 8010932:	3201      	adds	r2, #1
 8010934:	920c      	str	r2, [sp, #48]	@ 0x30
 8010936:	2230      	movs	r2, #48	@ 0x30
 8010938:	700a      	strb	r2, [r1, #0]
 801093a:	781a      	ldrb	r2, [r3, #0]
 801093c:	3201      	adds	r2, #1
 801093e:	701a      	strb	r2, [r3, #0]
 8010940:	e7a4      	b.n	801088c <_dtoa_r+0x6a4>
 8010942:	2200      	movs	r2, #0
 8010944:	4bc6      	ldr	r3, [pc, #792]	@ (8010c60 <_dtoa_r+0xa78>)
 8010946:	f7f1 fdf7 	bl	8002538 <__aeabi_dmul>
 801094a:	2200      	movs	r2, #0
 801094c:	2300      	movs	r3, #0
 801094e:	0006      	movs	r6, r0
 8010950:	000f      	movs	r7, r1
 8010952:	f7ef fd7b 	bl	800044c <__aeabi_dcmpeq>
 8010956:	2800      	cmp	r0, #0
 8010958:	d100      	bne.n	801095c <_dtoa_r+0x774>
 801095a:	e6a1      	b.n	80106a0 <_dtoa_r+0x4b8>
 801095c:	e6d8      	b.n	8010710 <_dtoa_r+0x528>
 801095e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010960:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010962:	9c06      	ldr	r4, [sp, #24]
 8010964:	2f00      	cmp	r7, #0
 8010966:	d014      	beq.n	8010992 <_dtoa_r+0x7aa>
 8010968:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801096a:	2a01      	cmp	r2, #1
 801096c:	dd00      	ble.n	8010970 <_dtoa_r+0x788>
 801096e:	e0c8      	b.n	8010b02 <_dtoa_r+0x91a>
 8010970:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010972:	2a00      	cmp	r2, #0
 8010974:	d100      	bne.n	8010978 <_dtoa_r+0x790>
 8010976:	e0be      	b.n	8010af6 <_dtoa_r+0x90e>
 8010978:	4aba      	ldr	r2, [pc, #744]	@ (8010c64 <_dtoa_r+0xa7c>)
 801097a:	189b      	adds	r3, r3, r2
 801097c:	9a06      	ldr	r2, [sp, #24]
 801097e:	2101      	movs	r1, #1
 8010980:	18d2      	adds	r2, r2, r3
 8010982:	9206      	str	r2, [sp, #24]
 8010984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010986:	9803      	ldr	r0, [sp, #12]
 8010988:	18d3      	adds	r3, r2, r3
 801098a:	930d      	str	r3, [sp, #52]	@ 0x34
 801098c:	f000 fc22 	bl	80111d4 <__i2b>
 8010990:	0007      	movs	r7, r0
 8010992:	2c00      	cmp	r4, #0
 8010994:	d00e      	beq.n	80109b4 <_dtoa_r+0x7cc>
 8010996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010998:	2b00      	cmp	r3, #0
 801099a:	dd0b      	ble.n	80109b4 <_dtoa_r+0x7cc>
 801099c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801099e:	0023      	movs	r3, r4
 80109a0:	4294      	cmp	r4, r2
 80109a2:	dd00      	ble.n	80109a6 <_dtoa_r+0x7be>
 80109a4:	0013      	movs	r3, r2
 80109a6:	9a06      	ldr	r2, [sp, #24]
 80109a8:	1ae4      	subs	r4, r4, r3
 80109aa:	1ad2      	subs	r2, r2, r3
 80109ac:	9206      	str	r2, [sp, #24]
 80109ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80109b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d01f      	beq.n	80109fa <_dtoa_r+0x812>
 80109ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d100      	bne.n	80109c2 <_dtoa_r+0x7da>
 80109c0:	e0b5      	b.n	8010b2e <_dtoa_r+0x946>
 80109c2:	2d00      	cmp	r5, #0
 80109c4:	d010      	beq.n	80109e8 <_dtoa_r+0x800>
 80109c6:	0039      	movs	r1, r7
 80109c8:	002a      	movs	r2, r5
 80109ca:	9803      	ldr	r0, [sp, #12]
 80109cc:	f000 fccc 	bl	8011368 <__pow5mult>
 80109d0:	9a05      	ldr	r2, [sp, #20]
 80109d2:	0001      	movs	r1, r0
 80109d4:	0007      	movs	r7, r0
 80109d6:	9803      	ldr	r0, [sp, #12]
 80109d8:	f000 fc14 	bl	8011204 <__multiply>
 80109dc:	0006      	movs	r6, r0
 80109de:	9905      	ldr	r1, [sp, #20]
 80109e0:	9803      	ldr	r0, [sp, #12]
 80109e2:	f000 fb3f 	bl	8011064 <_Bfree>
 80109e6:	9605      	str	r6, [sp, #20]
 80109e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ea:	1b5a      	subs	r2, r3, r5
 80109ec:	42ab      	cmp	r3, r5
 80109ee:	d004      	beq.n	80109fa <_dtoa_r+0x812>
 80109f0:	9905      	ldr	r1, [sp, #20]
 80109f2:	9803      	ldr	r0, [sp, #12]
 80109f4:	f000 fcb8 	bl	8011368 <__pow5mult>
 80109f8:	9005      	str	r0, [sp, #20]
 80109fa:	2101      	movs	r1, #1
 80109fc:	9803      	ldr	r0, [sp, #12]
 80109fe:	f000 fbe9 	bl	80111d4 <__i2b>
 8010a02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a04:	0006      	movs	r6, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d100      	bne.n	8010a0c <_dtoa_r+0x824>
 8010a0a:	e1bc      	b.n	8010d86 <_dtoa_r+0xb9e>
 8010a0c:	001a      	movs	r2, r3
 8010a0e:	0001      	movs	r1, r0
 8010a10:	9803      	ldr	r0, [sp, #12]
 8010a12:	f000 fca9 	bl	8011368 <__pow5mult>
 8010a16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010a18:	0006      	movs	r6, r0
 8010a1a:	2500      	movs	r5, #0
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	dc16      	bgt.n	8010a4e <_dtoa_r+0x866>
 8010a20:	2500      	movs	r5, #0
 8010a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a24:	42ab      	cmp	r3, r5
 8010a26:	d10e      	bne.n	8010a46 <_dtoa_r+0x85e>
 8010a28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a2a:	031b      	lsls	r3, r3, #12
 8010a2c:	42ab      	cmp	r3, r5
 8010a2e:	d10a      	bne.n	8010a46 <_dtoa_r+0x85e>
 8010a30:	4b8d      	ldr	r3, [pc, #564]	@ (8010c68 <_dtoa_r+0xa80>)
 8010a32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010a34:	4213      	tst	r3, r2
 8010a36:	d006      	beq.n	8010a46 <_dtoa_r+0x85e>
 8010a38:	9b06      	ldr	r3, [sp, #24]
 8010a3a:	3501      	adds	r5, #1
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	9306      	str	r3, [sp, #24]
 8010a40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a42:	3301      	adds	r3, #1
 8010a44:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010a48:	2001      	movs	r0, #1
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d008      	beq.n	8010a60 <_dtoa_r+0x878>
 8010a4e:	6933      	ldr	r3, [r6, #16]
 8010a50:	3303      	adds	r3, #3
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	18f3      	adds	r3, r6, r3
 8010a56:	6858      	ldr	r0, [r3, #4]
 8010a58:	f000 fb6c 	bl	8011134 <__hi0bits>
 8010a5c:	2320      	movs	r3, #32
 8010a5e:	1a18      	subs	r0, r3, r0
 8010a60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a62:	1818      	adds	r0, r3, r0
 8010a64:	0002      	movs	r2, r0
 8010a66:	231f      	movs	r3, #31
 8010a68:	401a      	ands	r2, r3
 8010a6a:	4218      	tst	r0, r3
 8010a6c:	d065      	beq.n	8010b3a <_dtoa_r+0x952>
 8010a6e:	3301      	adds	r3, #1
 8010a70:	1a9b      	subs	r3, r3, r2
 8010a72:	2b04      	cmp	r3, #4
 8010a74:	dd5d      	ble.n	8010b32 <_dtoa_r+0x94a>
 8010a76:	231c      	movs	r3, #28
 8010a78:	1a9b      	subs	r3, r3, r2
 8010a7a:	9a06      	ldr	r2, [sp, #24]
 8010a7c:	18e4      	adds	r4, r4, r3
 8010a7e:	18d2      	adds	r2, r2, r3
 8010a80:	9206      	str	r2, [sp, #24]
 8010a82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a84:	18d3      	adds	r3, r2, r3
 8010a86:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a88:	9b06      	ldr	r3, [sp, #24]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dd05      	ble.n	8010a9a <_dtoa_r+0x8b2>
 8010a8e:	001a      	movs	r2, r3
 8010a90:	9905      	ldr	r1, [sp, #20]
 8010a92:	9803      	ldr	r0, [sp, #12]
 8010a94:	f000 fcc4 	bl	8011420 <__lshift>
 8010a98:	9005      	str	r0, [sp, #20]
 8010a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	dd05      	ble.n	8010aac <_dtoa_r+0x8c4>
 8010aa0:	0031      	movs	r1, r6
 8010aa2:	001a      	movs	r2, r3
 8010aa4:	9803      	ldr	r0, [sp, #12]
 8010aa6:	f000 fcbb 	bl	8011420 <__lshift>
 8010aaa:	0006      	movs	r6, r0
 8010aac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d045      	beq.n	8010b3e <_dtoa_r+0x956>
 8010ab2:	0031      	movs	r1, r6
 8010ab4:	9805      	ldr	r0, [sp, #20]
 8010ab6:	f000 fd1f 	bl	80114f8 <__mcmp>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	da3f      	bge.n	8010b3e <_dtoa_r+0x956>
 8010abe:	9b04      	ldr	r3, [sp, #16]
 8010ac0:	220a      	movs	r2, #10
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ac6:	9905      	ldr	r1, [sp, #20]
 8010ac8:	2300      	movs	r3, #0
 8010aca:	9803      	ldr	r0, [sp, #12]
 8010acc:	f000 faee 	bl	80110ac <__multadd>
 8010ad0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ad2:	9005      	str	r0, [sp, #20]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d100      	bne.n	8010ada <_dtoa_r+0x8f2>
 8010ad8:	e15c      	b.n	8010d94 <_dtoa_r+0xbac>
 8010ada:	2300      	movs	r3, #0
 8010adc:	0039      	movs	r1, r7
 8010ade:	220a      	movs	r2, #10
 8010ae0:	9803      	ldr	r0, [sp, #12]
 8010ae2:	f000 fae3 	bl	80110ac <__multadd>
 8010ae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ae8:	0007      	movs	r7, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	dc55      	bgt.n	8010b9a <_dtoa_r+0x9b2>
 8010aee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	dc2d      	bgt.n	8010b50 <_dtoa_r+0x968>
 8010af4:	e051      	b.n	8010b9a <_dtoa_r+0x9b2>
 8010af6:	2336      	movs	r3, #54	@ 0x36
 8010af8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010afa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010afc:	9c06      	ldr	r4, [sp, #24]
 8010afe:	1a9b      	subs	r3, r3, r2
 8010b00:	e73c      	b.n	801097c <_dtoa_r+0x794>
 8010b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b04:	1e5d      	subs	r5, r3, #1
 8010b06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b08:	42ab      	cmp	r3, r5
 8010b0a:	db08      	blt.n	8010b1e <_dtoa_r+0x936>
 8010b0c:	1b5d      	subs	r5, r3, r5
 8010b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b10:	9c06      	ldr	r4, [sp, #24]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	db00      	blt.n	8010b18 <_dtoa_r+0x930>
 8010b16:	e731      	b.n	801097c <_dtoa_r+0x794>
 8010b18:	1ae4      	subs	r4, r4, r3
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e72e      	b.n	801097c <_dtoa_r+0x794>
 8010b1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010b22:	1aeb      	subs	r3, r5, r3
 8010b24:	18d3      	adds	r3, r2, r3
 8010b26:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010b28:	9314      	str	r3, [sp, #80]	@ 0x50
 8010b2a:	2500      	movs	r5, #0
 8010b2c:	e7ef      	b.n	8010b0e <_dtoa_r+0x926>
 8010b2e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b30:	e75e      	b.n	80109f0 <_dtoa_r+0x808>
 8010b32:	2b04      	cmp	r3, #4
 8010b34:	d0a8      	beq.n	8010a88 <_dtoa_r+0x8a0>
 8010b36:	331c      	adds	r3, #28
 8010b38:	e79f      	b.n	8010a7a <_dtoa_r+0x892>
 8010b3a:	0013      	movs	r3, r2
 8010b3c:	e7fb      	b.n	8010b36 <_dtoa_r+0x94e>
 8010b3e:	9b04      	ldr	r3, [sp, #16]
 8010b40:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b44:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	dc23      	bgt.n	8010b92 <_dtoa_r+0x9aa>
 8010b4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010b4c:	2b02      	cmp	r3, #2
 8010b4e:	dd20      	ble.n	8010b92 <_dtoa_r+0x9aa>
 8010b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d000      	beq.n	8010b58 <_dtoa_r+0x970>
 8010b56:	e6b5      	b.n	80108c4 <_dtoa_r+0x6dc>
 8010b58:	0031      	movs	r1, r6
 8010b5a:	2205      	movs	r2, #5
 8010b5c:	9803      	ldr	r0, [sp, #12]
 8010b5e:	f000 faa5 	bl	80110ac <__multadd>
 8010b62:	0006      	movs	r6, r0
 8010b64:	0001      	movs	r1, r0
 8010b66:	9805      	ldr	r0, [sp, #20]
 8010b68:	f000 fcc6 	bl	80114f8 <__mcmp>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	dc00      	bgt.n	8010b72 <_dtoa_r+0x98a>
 8010b70:	e6a8      	b.n	80108c4 <_dtoa_r+0x6dc>
 8010b72:	9b08      	ldr	r3, [sp, #32]
 8010b74:	9a08      	ldr	r2, [sp, #32]
 8010b76:	1c5c      	adds	r4, r3, #1
 8010b78:	2331      	movs	r3, #49	@ 0x31
 8010b7a:	7013      	strb	r3, [r2, #0]
 8010b7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b7e:	3301      	adds	r3, #1
 8010b80:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b82:	e6a3      	b.n	80108cc <_dtoa_r+0x6e4>
 8010b84:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010b86:	0037      	movs	r7, r6
 8010b88:	e7f3      	b.n	8010b72 <_dtoa_r+0x98a>
 8010b8a:	9b04      	ldr	r3, [sp, #16]
 8010b8c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010b8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b90:	e7f9      	b.n	8010b86 <_dtoa_r+0x99e>
 8010b92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d100      	bne.n	8010b9a <_dtoa_r+0x9b2>
 8010b98:	e100      	b.n	8010d9c <_dtoa_r+0xbb4>
 8010b9a:	2c00      	cmp	r4, #0
 8010b9c:	dd05      	ble.n	8010baa <_dtoa_r+0x9c2>
 8010b9e:	0039      	movs	r1, r7
 8010ba0:	0022      	movs	r2, r4
 8010ba2:	9803      	ldr	r0, [sp, #12]
 8010ba4:	f000 fc3c 	bl	8011420 <__lshift>
 8010ba8:	0007      	movs	r7, r0
 8010baa:	0038      	movs	r0, r7
 8010bac:	2d00      	cmp	r5, #0
 8010bae:	d018      	beq.n	8010be2 <_dtoa_r+0x9fa>
 8010bb0:	6879      	ldr	r1, [r7, #4]
 8010bb2:	9803      	ldr	r0, [sp, #12]
 8010bb4:	f000 fa12 	bl	8010fdc <_Balloc>
 8010bb8:	1e04      	subs	r4, r0, #0
 8010bba:	d105      	bne.n	8010bc8 <_dtoa_r+0x9e0>
 8010bbc:	0022      	movs	r2, r4
 8010bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8010c6c <_dtoa_r+0xa84>)
 8010bc0:	482b      	ldr	r0, [pc, #172]	@ (8010c70 <_dtoa_r+0xa88>)
 8010bc2:	492c      	ldr	r1, [pc, #176]	@ (8010c74 <_dtoa_r+0xa8c>)
 8010bc4:	f7ff fb25 	bl	8010212 <_dtoa_r+0x2a>
 8010bc8:	0039      	movs	r1, r7
 8010bca:	693a      	ldr	r2, [r7, #16]
 8010bcc:	310c      	adds	r1, #12
 8010bce:	3202      	adds	r2, #2
 8010bd0:	0092      	lsls	r2, r2, #2
 8010bd2:	300c      	adds	r0, #12
 8010bd4:	f001 f9c0 	bl	8011f58 <memcpy>
 8010bd8:	2201      	movs	r2, #1
 8010bda:	0021      	movs	r1, r4
 8010bdc:	9803      	ldr	r0, [sp, #12]
 8010bde:	f000 fc1f 	bl	8011420 <__lshift>
 8010be2:	9b08      	ldr	r3, [sp, #32]
 8010be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010be6:	9306      	str	r3, [sp, #24]
 8010be8:	3b01      	subs	r3, #1
 8010bea:	189b      	adds	r3, r3, r2
 8010bec:	2201      	movs	r2, #1
 8010bee:	9704      	str	r7, [sp, #16]
 8010bf0:	0007      	movs	r7, r0
 8010bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bf6:	4013      	ands	r3, r2
 8010bf8:	930e      	str	r3, [sp, #56]	@ 0x38
 8010bfa:	0031      	movs	r1, r6
 8010bfc:	9805      	ldr	r0, [sp, #20]
 8010bfe:	f7ff fa65 	bl	80100cc <quorem>
 8010c02:	9904      	ldr	r1, [sp, #16]
 8010c04:	0005      	movs	r5, r0
 8010c06:	900a      	str	r0, [sp, #40]	@ 0x28
 8010c08:	9805      	ldr	r0, [sp, #20]
 8010c0a:	f000 fc75 	bl	80114f8 <__mcmp>
 8010c0e:	003a      	movs	r2, r7
 8010c10:	900d      	str	r0, [sp, #52]	@ 0x34
 8010c12:	0031      	movs	r1, r6
 8010c14:	9803      	ldr	r0, [sp, #12]
 8010c16:	f000 fc8b 	bl	8011530 <__mdiff>
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	68c3      	ldr	r3, [r0, #12]
 8010c1e:	0004      	movs	r4, r0
 8010c20:	3530      	adds	r5, #48	@ 0x30
 8010c22:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d104      	bne.n	8010c32 <_dtoa_r+0xa4a>
 8010c28:	0001      	movs	r1, r0
 8010c2a:	9805      	ldr	r0, [sp, #20]
 8010c2c:	f000 fc64 	bl	80114f8 <__mcmp>
 8010c30:	9009      	str	r0, [sp, #36]	@ 0x24
 8010c32:	0021      	movs	r1, r4
 8010c34:	9803      	ldr	r0, [sp, #12]
 8010c36:	f000 fa15 	bl	8011064 <_Bfree>
 8010c3a:	9b06      	ldr	r3, [sp, #24]
 8010c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c3e:	1c5c      	adds	r4, r3, #1
 8010c40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010c42:	4313      	orrs	r3, r2
 8010c44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c46:	4313      	orrs	r3, r2
 8010c48:	d116      	bne.n	8010c78 <_dtoa_r+0xa90>
 8010c4a:	2d39      	cmp	r5, #57	@ 0x39
 8010c4c:	d02f      	beq.n	8010cae <_dtoa_r+0xac6>
 8010c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	dd01      	ble.n	8010c58 <_dtoa_r+0xa70>
 8010c54:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010c56:	3531      	adds	r5, #49	@ 0x31
 8010c58:	9b06      	ldr	r3, [sp, #24]
 8010c5a:	701d      	strb	r5, [r3, #0]
 8010c5c:	e638      	b.n	80108d0 <_dtoa_r+0x6e8>
 8010c5e:	46c0      	nop			@ (mov r8, r8)
 8010c60:	40240000 	.word	0x40240000
 8010c64:	00000433 	.word	0x00000433
 8010c68:	7ff00000 	.word	0x7ff00000
 8010c6c:	08013268 	.word	0x08013268
 8010c70:	08013210 	.word	0x08013210
 8010c74:	000002ef 	.word	0x000002ef
 8010c78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	db04      	blt.n	8010c88 <_dtoa_r+0xaa0>
 8010c7e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010c80:	4313      	orrs	r3, r2
 8010c82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c84:	4313      	orrs	r3, r2
 8010c86:	d11e      	bne.n	8010cc6 <_dtoa_r+0xade>
 8010c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	dde4      	ble.n	8010c58 <_dtoa_r+0xa70>
 8010c8e:	9905      	ldr	r1, [sp, #20]
 8010c90:	2201      	movs	r2, #1
 8010c92:	9803      	ldr	r0, [sp, #12]
 8010c94:	f000 fbc4 	bl	8011420 <__lshift>
 8010c98:	0031      	movs	r1, r6
 8010c9a:	9005      	str	r0, [sp, #20]
 8010c9c:	f000 fc2c 	bl	80114f8 <__mcmp>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	dc02      	bgt.n	8010caa <_dtoa_r+0xac2>
 8010ca4:	d1d8      	bne.n	8010c58 <_dtoa_r+0xa70>
 8010ca6:	07eb      	lsls	r3, r5, #31
 8010ca8:	d5d6      	bpl.n	8010c58 <_dtoa_r+0xa70>
 8010caa:	2d39      	cmp	r5, #57	@ 0x39
 8010cac:	d1d2      	bne.n	8010c54 <_dtoa_r+0xa6c>
 8010cae:	2339      	movs	r3, #57	@ 0x39
 8010cb0:	9a06      	ldr	r2, [sp, #24]
 8010cb2:	7013      	strb	r3, [r2, #0]
 8010cb4:	0023      	movs	r3, r4
 8010cb6:	001c      	movs	r4, r3
 8010cb8:	3b01      	subs	r3, #1
 8010cba:	781a      	ldrb	r2, [r3, #0]
 8010cbc:	2a39      	cmp	r2, #57	@ 0x39
 8010cbe:	d04f      	beq.n	8010d60 <_dtoa_r+0xb78>
 8010cc0:	3201      	adds	r2, #1
 8010cc2:	701a      	strb	r2, [r3, #0]
 8010cc4:	e604      	b.n	80108d0 <_dtoa_r+0x6e8>
 8010cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	dd03      	ble.n	8010cd4 <_dtoa_r+0xaec>
 8010ccc:	2d39      	cmp	r5, #57	@ 0x39
 8010cce:	d0ee      	beq.n	8010cae <_dtoa_r+0xac6>
 8010cd0:	3501      	adds	r5, #1
 8010cd2:	e7c1      	b.n	8010c58 <_dtoa_r+0xa70>
 8010cd4:	9b06      	ldr	r3, [sp, #24]
 8010cd6:	9a06      	ldr	r2, [sp, #24]
 8010cd8:	701d      	strb	r5, [r3, #0]
 8010cda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d02a      	beq.n	8010d36 <_dtoa_r+0xb4e>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	220a      	movs	r2, #10
 8010ce4:	9905      	ldr	r1, [sp, #20]
 8010ce6:	9803      	ldr	r0, [sp, #12]
 8010ce8:	f000 f9e0 	bl	80110ac <__multadd>
 8010cec:	9b04      	ldr	r3, [sp, #16]
 8010cee:	9005      	str	r0, [sp, #20]
 8010cf0:	42bb      	cmp	r3, r7
 8010cf2:	d109      	bne.n	8010d08 <_dtoa_r+0xb20>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	220a      	movs	r2, #10
 8010cf8:	9904      	ldr	r1, [sp, #16]
 8010cfa:	9803      	ldr	r0, [sp, #12]
 8010cfc:	f000 f9d6 	bl	80110ac <__multadd>
 8010d00:	9004      	str	r0, [sp, #16]
 8010d02:	0007      	movs	r7, r0
 8010d04:	9406      	str	r4, [sp, #24]
 8010d06:	e778      	b.n	8010bfa <_dtoa_r+0xa12>
 8010d08:	9904      	ldr	r1, [sp, #16]
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	220a      	movs	r2, #10
 8010d0e:	9803      	ldr	r0, [sp, #12]
 8010d10:	f000 f9cc 	bl	80110ac <__multadd>
 8010d14:	2300      	movs	r3, #0
 8010d16:	9004      	str	r0, [sp, #16]
 8010d18:	220a      	movs	r2, #10
 8010d1a:	0039      	movs	r1, r7
 8010d1c:	9803      	ldr	r0, [sp, #12]
 8010d1e:	f000 f9c5 	bl	80110ac <__multadd>
 8010d22:	e7ee      	b.n	8010d02 <_dtoa_r+0xb1a>
 8010d24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d26:	2401      	movs	r4, #1
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	dd00      	ble.n	8010d2e <_dtoa_r+0xb46>
 8010d2c:	001c      	movs	r4, r3
 8010d2e:	9b08      	ldr	r3, [sp, #32]
 8010d30:	191c      	adds	r4, r3, r4
 8010d32:	2300      	movs	r3, #0
 8010d34:	9304      	str	r3, [sp, #16]
 8010d36:	9905      	ldr	r1, [sp, #20]
 8010d38:	2201      	movs	r2, #1
 8010d3a:	9803      	ldr	r0, [sp, #12]
 8010d3c:	f000 fb70 	bl	8011420 <__lshift>
 8010d40:	0031      	movs	r1, r6
 8010d42:	9005      	str	r0, [sp, #20]
 8010d44:	f000 fbd8 	bl	80114f8 <__mcmp>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	dcb3      	bgt.n	8010cb4 <_dtoa_r+0xacc>
 8010d4c:	d101      	bne.n	8010d52 <_dtoa_r+0xb6a>
 8010d4e:	07ed      	lsls	r5, r5, #31
 8010d50:	d4b0      	bmi.n	8010cb4 <_dtoa_r+0xacc>
 8010d52:	0023      	movs	r3, r4
 8010d54:	001c      	movs	r4, r3
 8010d56:	3b01      	subs	r3, #1
 8010d58:	781a      	ldrb	r2, [r3, #0]
 8010d5a:	2a30      	cmp	r2, #48	@ 0x30
 8010d5c:	d0fa      	beq.n	8010d54 <_dtoa_r+0xb6c>
 8010d5e:	e5b7      	b.n	80108d0 <_dtoa_r+0x6e8>
 8010d60:	9a08      	ldr	r2, [sp, #32]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d1a7      	bne.n	8010cb6 <_dtoa_r+0xace>
 8010d66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d68:	3301      	adds	r3, #1
 8010d6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d6c:	2331      	movs	r3, #49	@ 0x31
 8010d6e:	7013      	strb	r3, [r2, #0]
 8010d70:	e5ae      	b.n	80108d0 <_dtoa_r+0x6e8>
 8010d72:	4b15      	ldr	r3, [pc, #84]	@ (8010dc8 <_dtoa_r+0xbe0>)
 8010d74:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010d76:	9308      	str	r3, [sp, #32]
 8010d78:	4b14      	ldr	r3, [pc, #80]	@ (8010dcc <_dtoa_r+0xbe4>)
 8010d7a:	2a00      	cmp	r2, #0
 8010d7c:	d001      	beq.n	8010d82 <_dtoa_r+0xb9a>
 8010d7e:	f7ff fa7b 	bl	8010278 <_dtoa_r+0x90>
 8010d82:	f7ff fa7b 	bl	801027c <_dtoa_r+0x94>
 8010d86:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	dc00      	bgt.n	8010d8e <_dtoa_r+0xba6>
 8010d8c:	e648      	b.n	8010a20 <_dtoa_r+0x838>
 8010d8e:	2001      	movs	r0, #1
 8010d90:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010d92:	e665      	b.n	8010a60 <_dtoa_r+0x878>
 8010d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	dc00      	bgt.n	8010d9c <_dtoa_r+0xbb4>
 8010d9a:	e6d6      	b.n	8010b4a <_dtoa_r+0x962>
 8010d9c:	2400      	movs	r4, #0
 8010d9e:	0031      	movs	r1, r6
 8010da0:	9805      	ldr	r0, [sp, #20]
 8010da2:	f7ff f993 	bl	80100cc <quorem>
 8010da6:	9b08      	ldr	r3, [sp, #32]
 8010da8:	3030      	adds	r0, #48	@ 0x30
 8010daa:	5518      	strb	r0, [r3, r4]
 8010dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dae:	3401      	adds	r4, #1
 8010db0:	0005      	movs	r5, r0
 8010db2:	429c      	cmp	r4, r3
 8010db4:	dab6      	bge.n	8010d24 <_dtoa_r+0xb3c>
 8010db6:	2300      	movs	r3, #0
 8010db8:	220a      	movs	r2, #10
 8010dba:	9905      	ldr	r1, [sp, #20]
 8010dbc:	9803      	ldr	r0, [sp, #12]
 8010dbe:	f000 f975 	bl	80110ac <__multadd>
 8010dc2:	9005      	str	r0, [sp, #20]
 8010dc4:	e7eb      	b.n	8010d9e <_dtoa_r+0xbb6>
 8010dc6:	46c0      	nop			@ (mov r8, r8)
 8010dc8:	080131ec 	.word	0x080131ec
 8010dcc:	080131f4 	.word	0x080131f4

08010dd0 <_free_r>:
 8010dd0:	b570      	push	{r4, r5, r6, lr}
 8010dd2:	0005      	movs	r5, r0
 8010dd4:	1e0c      	subs	r4, r1, #0
 8010dd6:	d010      	beq.n	8010dfa <_free_r+0x2a>
 8010dd8:	3c04      	subs	r4, #4
 8010dda:	6823      	ldr	r3, [r4, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	da00      	bge.n	8010de2 <_free_r+0x12>
 8010de0:	18e4      	adds	r4, r4, r3
 8010de2:	0028      	movs	r0, r5
 8010de4:	f000 f8ea 	bl	8010fbc <__malloc_lock>
 8010de8:	4a1d      	ldr	r2, [pc, #116]	@ (8010e60 <_free_r+0x90>)
 8010dea:	6813      	ldr	r3, [r2, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d105      	bne.n	8010dfc <_free_r+0x2c>
 8010df0:	6063      	str	r3, [r4, #4]
 8010df2:	6014      	str	r4, [r2, #0]
 8010df4:	0028      	movs	r0, r5
 8010df6:	f000 f8e9 	bl	8010fcc <__malloc_unlock>
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	42a3      	cmp	r3, r4
 8010dfe:	d908      	bls.n	8010e12 <_free_r+0x42>
 8010e00:	6820      	ldr	r0, [r4, #0]
 8010e02:	1821      	adds	r1, r4, r0
 8010e04:	428b      	cmp	r3, r1
 8010e06:	d1f3      	bne.n	8010df0 <_free_r+0x20>
 8010e08:	6819      	ldr	r1, [r3, #0]
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	1809      	adds	r1, r1, r0
 8010e0e:	6021      	str	r1, [r4, #0]
 8010e10:	e7ee      	b.n	8010df0 <_free_r+0x20>
 8010e12:	001a      	movs	r2, r3
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d001      	beq.n	8010e1e <_free_r+0x4e>
 8010e1a:	42a3      	cmp	r3, r4
 8010e1c:	d9f9      	bls.n	8010e12 <_free_r+0x42>
 8010e1e:	6811      	ldr	r1, [r2, #0]
 8010e20:	1850      	adds	r0, r2, r1
 8010e22:	42a0      	cmp	r0, r4
 8010e24:	d10b      	bne.n	8010e3e <_free_r+0x6e>
 8010e26:	6820      	ldr	r0, [r4, #0]
 8010e28:	1809      	adds	r1, r1, r0
 8010e2a:	1850      	adds	r0, r2, r1
 8010e2c:	6011      	str	r1, [r2, #0]
 8010e2e:	4283      	cmp	r3, r0
 8010e30:	d1e0      	bne.n	8010df4 <_free_r+0x24>
 8010e32:	6818      	ldr	r0, [r3, #0]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	1841      	adds	r1, r0, r1
 8010e38:	6011      	str	r1, [r2, #0]
 8010e3a:	6053      	str	r3, [r2, #4]
 8010e3c:	e7da      	b.n	8010df4 <_free_r+0x24>
 8010e3e:	42a0      	cmp	r0, r4
 8010e40:	d902      	bls.n	8010e48 <_free_r+0x78>
 8010e42:	230c      	movs	r3, #12
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	e7d5      	b.n	8010df4 <_free_r+0x24>
 8010e48:	6820      	ldr	r0, [r4, #0]
 8010e4a:	1821      	adds	r1, r4, r0
 8010e4c:	428b      	cmp	r3, r1
 8010e4e:	d103      	bne.n	8010e58 <_free_r+0x88>
 8010e50:	6819      	ldr	r1, [r3, #0]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	1809      	adds	r1, r1, r0
 8010e56:	6021      	str	r1, [r4, #0]
 8010e58:	6063      	str	r3, [r4, #4]
 8010e5a:	6054      	str	r4, [r2, #4]
 8010e5c:	e7ca      	b.n	8010df4 <_free_r+0x24>
 8010e5e:	46c0      	nop			@ (mov r8, r8)
 8010e60:	20001f18 	.word	0x20001f18

08010e64 <malloc>:
 8010e64:	b510      	push	{r4, lr}
 8010e66:	4b03      	ldr	r3, [pc, #12]	@ (8010e74 <malloc+0x10>)
 8010e68:	0001      	movs	r1, r0
 8010e6a:	6818      	ldr	r0, [r3, #0]
 8010e6c:	f000 f826 	bl	8010ebc <_malloc_r>
 8010e70:	bd10      	pop	{r4, pc}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	20000158 	.word	0x20000158

08010e78 <sbrk_aligned>:
 8010e78:	b570      	push	{r4, r5, r6, lr}
 8010e7a:	4e0f      	ldr	r6, [pc, #60]	@ (8010eb8 <sbrk_aligned+0x40>)
 8010e7c:	000d      	movs	r5, r1
 8010e7e:	6831      	ldr	r1, [r6, #0]
 8010e80:	0004      	movs	r4, r0
 8010e82:	2900      	cmp	r1, #0
 8010e84:	d102      	bne.n	8010e8c <sbrk_aligned+0x14>
 8010e86:	f001 f855 	bl	8011f34 <_sbrk_r>
 8010e8a:	6030      	str	r0, [r6, #0]
 8010e8c:	0029      	movs	r1, r5
 8010e8e:	0020      	movs	r0, r4
 8010e90:	f001 f850 	bl	8011f34 <_sbrk_r>
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	d103      	bne.n	8010ea0 <sbrk_aligned+0x28>
 8010e98:	2501      	movs	r5, #1
 8010e9a:	426d      	negs	r5, r5
 8010e9c:	0028      	movs	r0, r5
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ea0:	2303      	movs	r3, #3
 8010ea2:	1cc5      	adds	r5, r0, #3
 8010ea4:	439d      	bics	r5, r3
 8010ea6:	42a8      	cmp	r0, r5
 8010ea8:	d0f8      	beq.n	8010e9c <sbrk_aligned+0x24>
 8010eaa:	1a29      	subs	r1, r5, r0
 8010eac:	0020      	movs	r0, r4
 8010eae:	f001 f841 	bl	8011f34 <_sbrk_r>
 8010eb2:	3001      	adds	r0, #1
 8010eb4:	d1f2      	bne.n	8010e9c <sbrk_aligned+0x24>
 8010eb6:	e7ef      	b.n	8010e98 <sbrk_aligned+0x20>
 8010eb8:	20001f14 	.word	0x20001f14

08010ebc <_malloc_r>:
 8010ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ebe:	2203      	movs	r2, #3
 8010ec0:	1ccb      	adds	r3, r1, #3
 8010ec2:	4393      	bics	r3, r2
 8010ec4:	3308      	adds	r3, #8
 8010ec6:	0005      	movs	r5, r0
 8010ec8:	001f      	movs	r7, r3
 8010eca:	2b0c      	cmp	r3, #12
 8010ecc:	d234      	bcs.n	8010f38 <_malloc_r+0x7c>
 8010ece:	270c      	movs	r7, #12
 8010ed0:	42b9      	cmp	r1, r7
 8010ed2:	d833      	bhi.n	8010f3c <_malloc_r+0x80>
 8010ed4:	0028      	movs	r0, r5
 8010ed6:	f000 f871 	bl	8010fbc <__malloc_lock>
 8010eda:	4e37      	ldr	r6, [pc, #220]	@ (8010fb8 <_malloc_r+0xfc>)
 8010edc:	6833      	ldr	r3, [r6, #0]
 8010ede:	001c      	movs	r4, r3
 8010ee0:	2c00      	cmp	r4, #0
 8010ee2:	d12f      	bne.n	8010f44 <_malloc_r+0x88>
 8010ee4:	0039      	movs	r1, r7
 8010ee6:	0028      	movs	r0, r5
 8010ee8:	f7ff ffc6 	bl	8010e78 <sbrk_aligned>
 8010eec:	0004      	movs	r4, r0
 8010eee:	1c43      	adds	r3, r0, #1
 8010ef0:	d15f      	bne.n	8010fb2 <_malloc_r+0xf6>
 8010ef2:	6834      	ldr	r4, [r6, #0]
 8010ef4:	9400      	str	r4, [sp, #0]
 8010ef6:	9b00      	ldr	r3, [sp, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d14a      	bne.n	8010f92 <_malloc_r+0xd6>
 8010efc:	2c00      	cmp	r4, #0
 8010efe:	d052      	beq.n	8010fa6 <_malloc_r+0xea>
 8010f00:	6823      	ldr	r3, [r4, #0]
 8010f02:	0028      	movs	r0, r5
 8010f04:	18e3      	adds	r3, r4, r3
 8010f06:	9900      	ldr	r1, [sp, #0]
 8010f08:	9301      	str	r3, [sp, #4]
 8010f0a:	f001 f813 	bl	8011f34 <_sbrk_r>
 8010f0e:	9b01      	ldr	r3, [sp, #4]
 8010f10:	4283      	cmp	r3, r0
 8010f12:	d148      	bne.n	8010fa6 <_malloc_r+0xea>
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	0028      	movs	r0, r5
 8010f18:	1aff      	subs	r7, r7, r3
 8010f1a:	0039      	movs	r1, r7
 8010f1c:	f7ff ffac 	bl	8010e78 <sbrk_aligned>
 8010f20:	3001      	adds	r0, #1
 8010f22:	d040      	beq.n	8010fa6 <_malloc_r+0xea>
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	19db      	adds	r3, r3, r7
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	6833      	ldr	r3, [r6, #0]
 8010f2c:	685a      	ldr	r2, [r3, #4]
 8010f2e:	2a00      	cmp	r2, #0
 8010f30:	d133      	bne.n	8010f9a <_malloc_r+0xde>
 8010f32:	9b00      	ldr	r3, [sp, #0]
 8010f34:	6033      	str	r3, [r6, #0]
 8010f36:	e019      	b.n	8010f6c <_malloc_r+0xb0>
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	dac9      	bge.n	8010ed0 <_malloc_r+0x14>
 8010f3c:	230c      	movs	r3, #12
 8010f3e:	602b      	str	r3, [r5, #0]
 8010f40:	2000      	movs	r0, #0
 8010f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f44:	6821      	ldr	r1, [r4, #0]
 8010f46:	1bc9      	subs	r1, r1, r7
 8010f48:	d420      	bmi.n	8010f8c <_malloc_r+0xd0>
 8010f4a:	290b      	cmp	r1, #11
 8010f4c:	d90a      	bls.n	8010f64 <_malloc_r+0xa8>
 8010f4e:	19e2      	adds	r2, r4, r7
 8010f50:	6027      	str	r7, [r4, #0]
 8010f52:	42a3      	cmp	r3, r4
 8010f54:	d104      	bne.n	8010f60 <_malloc_r+0xa4>
 8010f56:	6032      	str	r2, [r6, #0]
 8010f58:	6863      	ldr	r3, [r4, #4]
 8010f5a:	6011      	str	r1, [r2, #0]
 8010f5c:	6053      	str	r3, [r2, #4]
 8010f5e:	e005      	b.n	8010f6c <_malloc_r+0xb0>
 8010f60:	605a      	str	r2, [r3, #4]
 8010f62:	e7f9      	b.n	8010f58 <_malloc_r+0x9c>
 8010f64:	6862      	ldr	r2, [r4, #4]
 8010f66:	42a3      	cmp	r3, r4
 8010f68:	d10e      	bne.n	8010f88 <_malloc_r+0xcc>
 8010f6a:	6032      	str	r2, [r6, #0]
 8010f6c:	0028      	movs	r0, r5
 8010f6e:	f000 f82d 	bl	8010fcc <__malloc_unlock>
 8010f72:	0020      	movs	r0, r4
 8010f74:	2207      	movs	r2, #7
 8010f76:	300b      	adds	r0, #11
 8010f78:	1d23      	adds	r3, r4, #4
 8010f7a:	4390      	bics	r0, r2
 8010f7c:	1ac2      	subs	r2, r0, r3
 8010f7e:	4298      	cmp	r0, r3
 8010f80:	d0df      	beq.n	8010f42 <_malloc_r+0x86>
 8010f82:	1a1b      	subs	r3, r3, r0
 8010f84:	50a3      	str	r3, [r4, r2]
 8010f86:	e7dc      	b.n	8010f42 <_malloc_r+0x86>
 8010f88:	605a      	str	r2, [r3, #4]
 8010f8a:	e7ef      	b.n	8010f6c <_malloc_r+0xb0>
 8010f8c:	0023      	movs	r3, r4
 8010f8e:	6864      	ldr	r4, [r4, #4]
 8010f90:	e7a6      	b.n	8010ee0 <_malloc_r+0x24>
 8010f92:	9c00      	ldr	r4, [sp, #0]
 8010f94:	6863      	ldr	r3, [r4, #4]
 8010f96:	9300      	str	r3, [sp, #0]
 8010f98:	e7ad      	b.n	8010ef6 <_malloc_r+0x3a>
 8010f9a:	001a      	movs	r2, r3
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	42a3      	cmp	r3, r4
 8010fa0:	d1fb      	bne.n	8010f9a <_malloc_r+0xde>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	e7da      	b.n	8010f5c <_malloc_r+0xa0>
 8010fa6:	230c      	movs	r3, #12
 8010fa8:	0028      	movs	r0, r5
 8010faa:	602b      	str	r3, [r5, #0]
 8010fac:	f000 f80e 	bl	8010fcc <__malloc_unlock>
 8010fb0:	e7c6      	b.n	8010f40 <_malloc_r+0x84>
 8010fb2:	6007      	str	r7, [r0, #0]
 8010fb4:	e7da      	b.n	8010f6c <_malloc_r+0xb0>
 8010fb6:	46c0      	nop			@ (mov r8, r8)
 8010fb8:	20001f18 	.word	0x20001f18

08010fbc <__malloc_lock>:
 8010fbc:	b510      	push	{r4, lr}
 8010fbe:	4802      	ldr	r0, [pc, #8]	@ (8010fc8 <__malloc_lock+0xc>)
 8010fc0:	f7ff f877 	bl	80100b2 <__retarget_lock_acquire_recursive>
 8010fc4:	bd10      	pop	{r4, pc}
 8010fc6:	46c0      	nop			@ (mov r8, r8)
 8010fc8:	20001f10 	.word	0x20001f10

08010fcc <__malloc_unlock>:
 8010fcc:	b510      	push	{r4, lr}
 8010fce:	4802      	ldr	r0, [pc, #8]	@ (8010fd8 <__malloc_unlock+0xc>)
 8010fd0:	f7ff f870 	bl	80100b4 <__retarget_lock_release_recursive>
 8010fd4:	bd10      	pop	{r4, pc}
 8010fd6:	46c0      	nop			@ (mov r8, r8)
 8010fd8:	20001f10 	.word	0x20001f10

08010fdc <_Balloc>:
 8010fdc:	b570      	push	{r4, r5, r6, lr}
 8010fde:	69c5      	ldr	r5, [r0, #28]
 8010fe0:	0006      	movs	r6, r0
 8010fe2:	000c      	movs	r4, r1
 8010fe4:	2d00      	cmp	r5, #0
 8010fe6:	d10e      	bne.n	8011006 <_Balloc+0x2a>
 8010fe8:	2010      	movs	r0, #16
 8010fea:	f7ff ff3b 	bl	8010e64 <malloc>
 8010fee:	1e02      	subs	r2, r0, #0
 8010ff0:	61f0      	str	r0, [r6, #28]
 8010ff2:	d104      	bne.n	8010ffe <_Balloc+0x22>
 8010ff4:	216b      	movs	r1, #107	@ 0x6b
 8010ff6:	4b19      	ldr	r3, [pc, #100]	@ (801105c <_Balloc+0x80>)
 8010ff8:	4819      	ldr	r0, [pc, #100]	@ (8011060 <_Balloc+0x84>)
 8010ffa:	f000 ffb7 	bl	8011f6c <__assert_func>
 8010ffe:	6045      	str	r5, [r0, #4]
 8011000:	6085      	str	r5, [r0, #8]
 8011002:	6005      	str	r5, [r0, #0]
 8011004:	60c5      	str	r5, [r0, #12]
 8011006:	69f5      	ldr	r5, [r6, #28]
 8011008:	68eb      	ldr	r3, [r5, #12]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d013      	beq.n	8011036 <_Balloc+0x5a>
 801100e:	69f3      	ldr	r3, [r6, #28]
 8011010:	00a2      	lsls	r2, r4, #2
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	189b      	adds	r3, r3, r2
 8011016:	6818      	ldr	r0, [r3, #0]
 8011018:	2800      	cmp	r0, #0
 801101a:	d118      	bne.n	801104e <_Balloc+0x72>
 801101c:	2101      	movs	r1, #1
 801101e:	000d      	movs	r5, r1
 8011020:	40a5      	lsls	r5, r4
 8011022:	1d6a      	adds	r2, r5, #5
 8011024:	0030      	movs	r0, r6
 8011026:	0092      	lsls	r2, r2, #2
 8011028:	f000 ffbe 	bl	8011fa8 <_calloc_r>
 801102c:	2800      	cmp	r0, #0
 801102e:	d00c      	beq.n	801104a <_Balloc+0x6e>
 8011030:	6044      	str	r4, [r0, #4]
 8011032:	6085      	str	r5, [r0, #8]
 8011034:	e00d      	b.n	8011052 <_Balloc+0x76>
 8011036:	2221      	movs	r2, #33	@ 0x21
 8011038:	2104      	movs	r1, #4
 801103a:	0030      	movs	r0, r6
 801103c:	f000 ffb4 	bl	8011fa8 <_calloc_r>
 8011040:	69f3      	ldr	r3, [r6, #28]
 8011042:	60e8      	str	r0, [r5, #12]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1e1      	bne.n	801100e <_Balloc+0x32>
 801104a:	2000      	movs	r0, #0
 801104c:	bd70      	pop	{r4, r5, r6, pc}
 801104e:	6802      	ldr	r2, [r0, #0]
 8011050:	601a      	str	r2, [r3, #0]
 8011052:	2300      	movs	r3, #0
 8011054:	6103      	str	r3, [r0, #16]
 8011056:	60c3      	str	r3, [r0, #12]
 8011058:	e7f8      	b.n	801104c <_Balloc+0x70>
 801105a:	46c0      	nop			@ (mov r8, r8)
 801105c:	080131f9 	.word	0x080131f9
 8011060:	08013279 	.word	0x08013279

08011064 <_Bfree>:
 8011064:	b570      	push	{r4, r5, r6, lr}
 8011066:	69c6      	ldr	r6, [r0, #28]
 8011068:	0005      	movs	r5, r0
 801106a:	000c      	movs	r4, r1
 801106c:	2e00      	cmp	r6, #0
 801106e:	d10e      	bne.n	801108e <_Bfree+0x2a>
 8011070:	2010      	movs	r0, #16
 8011072:	f7ff fef7 	bl	8010e64 <malloc>
 8011076:	1e02      	subs	r2, r0, #0
 8011078:	61e8      	str	r0, [r5, #28]
 801107a:	d104      	bne.n	8011086 <_Bfree+0x22>
 801107c:	218f      	movs	r1, #143	@ 0x8f
 801107e:	4b09      	ldr	r3, [pc, #36]	@ (80110a4 <_Bfree+0x40>)
 8011080:	4809      	ldr	r0, [pc, #36]	@ (80110a8 <_Bfree+0x44>)
 8011082:	f000 ff73 	bl	8011f6c <__assert_func>
 8011086:	6046      	str	r6, [r0, #4]
 8011088:	6086      	str	r6, [r0, #8]
 801108a:	6006      	str	r6, [r0, #0]
 801108c:	60c6      	str	r6, [r0, #12]
 801108e:	2c00      	cmp	r4, #0
 8011090:	d007      	beq.n	80110a2 <_Bfree+0x3e>
 8011092:	69eb      	ldr	r3, [r5, #28]
 8011094:	6862      	ldr	r2, [r4, #4]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	0092      	lsls	r2, r2, #2
 801109a:	189b      	adds	r3, r3, r2
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	6022      	str	r2, [r4, #0]
 80110a0:	601c      	str	r4, [r3, #0]
 80110a2:	bd70      	pop	{r4, r5, r6, pc}
 80110a4:	080131f9 	.word	0x080131f9
 80110a8:	08013279 	.word	0x08013279

080110ac <__multadd>:
 80110ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110ae:	000f      	movs	r7, r1
 80110b0:	9001      	str	r0, [sp, #4]
 80110b2:	000c      	movs	r4, r1
 80110b4:	001e      	movs	r6, r3
 80110b6:	2000      	movs	r0, #0
 80110b8:	690d      	ldr	r5, [r1, #16]
 80110ba:	3714      	adds	r7, #20
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	3001      	adds	r0, #1
 80110c0:	b299      	uxth	r1, r3
 80110c2:	4351      	muls	r1, r2
 80110c4:	0c1b      	lsrs	r3, r3, #16
 80110c6:	4353      	muls	r3, r2
 80110c8:	1989      	adds	r1, r1, r6
 80110ca:	0c0e      	lsrs	r6, r1, #16
 80110cc:	199b      	adds	r3, r3, r6
 80110ce:	0c1e      	lsrs	r6, r3, #16
 80110d0:	b289      	uxth	r1, r1
 80110d2:	041b      	lsls	r3, r3, #16
 80110d4:	185b      	adds	r3, r3, r1
 80110d6:	c708      	stmia	r7!, {r3}
 80110d8:	4285      	cmp	r5, r0
 80110da:	dcef      	bgt.n	80110bc <__multadd+0x10>
 80110dc:	2e00      	cmp	r6, #0
 80110de:	d022      	beq.n	8011126 <__multadd+0x7a>
 80110e0:	68a3      	ldr	r3, [r4, #8]
 80110e2:	42ab      	cmp	r3, r5
 80110e4:	dc19      	bgt.n	801111a <__multadd+0x6e>
 80110e6:	6861      	ldr	r1, [r4, #4]
 80110e8:	9801      	ldr	r0, [sp, #4]
 80110ea:	3101      	adds	r1, #1
 80110ec:	f7ff ff76 	bl	8010fdc <_Balloc>
 80110f0:	1e07      	subs	r7, r0, #0
 80110f2:	d105      	bne.n	8011100 <__multadd+0x54>
 80110f4:	003a      	movs	r2, r7
 80110f6:	21ba      	movs	r1, #186	@ 0xba
 80110f8:	4b0c      	ldr	r3, [pc, #48]	@ (801112c <__multadd+0x80>)
 80110fa:	480d      	ldr	r0, [pc, #52]	@ (8011130 <__multadd+0x84>)
 80110fc:	f000 ff36 	bl	8011f6c <__assert_func>
 8011100:	0021      	movs	r1, r4
 8011102:	6922      	ldr	r2, [r4, #16]
 8011104:	310c      	adds	r1, #12
 8011106:	3202      	adds	r2, #2
 8011108:	0092      	lsls	r2, r2, #2
 801110a:	300c      	adds	r0, #12
 801110c:	f000 ff24 	bl	8011f58 <memcpy>
 8011110:	0021      	movs	r1, r4
 8011112:	9801      	ldr	r0, [sp, #4]
 8011114:	f7ff ffa6 	bl	8011064 <_Bfree>
 8011118:	003c      	movs	r4, r7
 801111a:	1d2b      	adds	r3, r5, #4
 801111c:	009b      	lsls	r3, r3, #2
 801111e:	18e3      	adds	r3, r4, r3
 8011120:	3501      	adds	r5, #1
 8011122:	605e      	str	r6, [r3, #4]
 8011124:	6125      	str	r5, [r4, #16]
 8011126:	0020      	movs	r0, r4
 8011128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801112a:	46c0      	nop			@ (mov r8, r8)
 801112c:	08013268 	.word	0x08013268
 8011130:	08013279 	.word	0x08013279

08011134 <__hi0bits>:
 8011134:	2280      	movs	r2, #128	@ 0x80
 8011136:	0003      	movs	r3, r0
 8011138:	0252      	lsls	r2, r2, #9
 801113a:	2000      	movs	r0, #0
 801113c:	4293      	cmp	r3, r2
 801113e:	d201      	bcs.n	8011144 <__hi0bits+0x10>
 8011140:	041b      	lsls	r3, r3, #16
 8011142:	3010      	adds	r0, #16
 8011144:	2280      	movs	r2, #128	@ 0x80
 8011146:	0452      	lsls	r2, r2, #17
 8011148:	4293      	cmp	r3, r2
 801114a:	d201      	bcs.n	8011150 <__hi0bits+0x1c>
 801114c:	3008      	adds	r0, #8
 801114e:	021b      	lsls	r3, r3, #8
 8011150:	2280      	movs	r2, #128	@ 0x80
 8011152:	0552      	lsls	r2, r2, #21
 8011154:	4293      	cmp	r3, r2
 8011156:	d201      	bcs.n	801115c <__hi0bits+0x28>
 8011158:	3004      	adds	r0, #4
 801115a:	011b      	lsls	r3, r3, #4
 801115c:	2280      	movs	r2, #128	@ 0x80
 801115e:	05d2      	lsls	r2, r2, #23
 8011160:	4293      	cmp	r3, r2
 8011162:	d201      	bcs.n	8011168 <__hi0bits+0x34>
 8011164:	3002      	adds	r0, #2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	2b00      	cmp	r3, #0
 801116a:	db03      	blt.n	8011174 <__hi0bits+0x40>
 801116c:	3001      	adds	r0, #1
 801116e:	4213      	tst	r3, r2
 8011170:	d100      	bne.n	8011174 <__hi0bits+0x40>
 8011172:	2020      	movs	r0, #32
 8011174:	4770      	bx	lr

08011176 <__lo0bits>:
 8011176:	6803      	ldr	r3, [r0, #0]
 8011178:	0001      	movs	r1, r0
 801117a:	2207      	movs	r2, #7
 801117c:	0018      	movs	r0, r3
 801117e:	4010      	ands	r0, r2
 8011180:	4213      	tst	r3, r2
 8011182:	d00d      	beq.n	80111a0 <__lo0bits+0x2a>
 8011184:	3a06      	subs	r2, #6
 8011186:	2000      	movs	r0, #0
 8011188:	4213      	tst	r3, r2
 801118a:	d105      	bne.n	8011198 <__lo0bits+0x22>
 801118c:	3002      	adds	r0, #2
 801118e:	4203      	tst	r3, r0
 8011190:	d003      	beq.n	801119a <__lo0bits+0x24>
 8011192:	40d3      	lsrs	r3, r2
 8011194:	0010      	movs	r0, r2
 8011196:	600b      	str	r3, [r1, #0]
 8011198:	4770      	bx	lr
 801119a:	089b      	lsrs	r3, r3, #2
 801119c:	600b      	str	r3, [r1, #0]
 801119e:	e7fb      	b.n	8011198 <__lo0bits+0x22>
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	2a00      	cmp	r2, #0
 80111a4:	d101      	bne.n	80111aa <__lo0bits+0x34>
 80111a6:	2010      	movs	r0, #16
 80111a8:	0c1b      	lsrs	r3, r3, #16
 80111aa:	b2da      	uxtb	r2, r3
 80111ac:	2a00      	cmp	r2, #0
 80111ae:	d101      	bne.n	80111b4 <__lo0bits+0x3e>
 80111b0:	3008      	adds	r0, #8
 80111b2:	0a1b      	lsrs	r3, r3, #8
 80111b4:	071a      	lsls	r2, r3, #28
 80111b6:	d101      	bne.n	80111bc <__lo0bits+0x46>
 80111b8:	3004      	adds	r0, #4
 80111ba:	091b      	lsrs	r3, r3, #4
 80111bc:	079a      	lsls	r2, r3, #30
 80111be:	d101      	bne.n	80111c4 <__lo0bits+0x4e>
 80111c0:	3002      	adds	r0, #2
 80111c2:	089b      	lsrs	r3, r3, #2
 80111c4:	07da      	lsls	r2, r3, #31
 80111c6:	d4e9      	bmi.n	801119c <__lo0bits+0x26>
 80111c8:	3001      	adds	r0, #1
 80111ca:	085b      	lsrs	r3, r3, #1
 80111cc:	d1e6      	bne.n	801119c <__lo0bits+0x26>
 80111ce:	2020      	movs	r0, #32
 80111d0:	e7e2      	b.n	8011198 <__lo0bits+0x22>
	...

080111d4 <__i2b>:
 80111d4:	b510      	push	{r4, lr}
 80111d6:	000c      	movs	r4, r1
 80111d8:	2101      	movs	r1, #1
 80111da:	f7ff feff 	bl	8010fdc <_Balloc>
 80111de:	2800      	cmp	r0, #0
 80111e0:	d107      	bne.n	80111f2 <__i2b+0x1e>
 80111e2:	2146      	movs	r1, #70	@ 0x46
 80111e4:	4c05      	ldr	r4, [pc, #20]	@ (80111fc <__i2b+0x28>)
 80111e6:	0002      	movs	r2, r0
 80111e8:	4b05      	ldr	r3, [pc, #20]	@ (8011200 <__i2b+0x2c>)
 80111ea:	0020      	movs	r0, r4
 80111ec:	31ff      	adds	r1, #255	@ 0xff
 80111ee:	f000 febd 	bl	8011f6c <__assert_func>
 80111f2:	2301      	movs	r3, #1
 80111f4:	6144      	str	r4, [r0, #20]
 80111f6:	6103      	str	r3, [r0, #16]
 80111f8:	bd10      	pop	{r4, pc}
 80111fa:	46c0      	nop			@ (mov r8, r8)
 80111fc:	08013279 	.word	0x08013279
 8011200:	08013268 	.word	0x08013268

08011204 <__multiply>:
 8011204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011206:	0014      	movs	r4, r2
 8011208:	690a      	ldr	r2, [r1, #16]
 801120a:	6923      	ldr	r3, [r4, #16]
 801120c:	000d      	movs	r5, r1
 801120e:	b08b      	sub	sp, #44	@ 0x2c
 8011210:	429a      	cmp	r2, r3
 8011212:	db02      	blt.n	801121a <__multiply+0x16>
 8011214:	0023      	movs	r3, r4
 8011216:	000c      	movs	r4, r1
 8011218:	001d      	movs	r5, r3
 801121a:	6927      	ldr	r7, [r4, #16]
 801121c:	692e      	ldr	r6, [r5, #16]
 801121e:	6861      	ldr	r1, [r4, #4]
 8011220:	19bb      	adds	r3, r7, r6
 8011222:	9303      	str	r3, [sp, #12]
 8011224:	68a3      	ldr	r3, [r4, #8]
 8011226:	19ba      	adds	r2, r7, r6
 8011228:	4293      	cmp	r3, r2
 801122a:	da00      	bge.n	801122e <__multiply+0x2a>
 801122c:	3101      	adds	r1, #1
 801122e:	f7ff fed5 	bl	8010fdc <_Balloc>
 8011232:	9002      	str	r0, [sp, #8]
 8011234:	2800      	cmp	r0, #0
 8011236:	d106      	bne.n	8011246 <__multiply+0x42>
 8011238:	21b1      	movs	r1, #177	@ 0xb1
 801123a:	4b49      	ldr	r3, [pc, #292]	@ (8011360 <__multiply+0x15c>)
 801123c:	4849      	ldr	r0, [pc, #292]	@ (8011364 <__multiply+0x160>)
 801123e:	9a02      	ldr	r2, [sp, #8]
 8011240:	0049      	lsls	r1, r1, #1
 8011242:	f000 fe93 	bl	8011f6c <__assert_func>
 8011246:	9b02      	ldr	r3, [sp, #8]
 8011248:	2200      	movs	r2, #0
 801124a:	3314      	adds	r3, #20
 801124c:	469c      	mov	ip, r3
 801124e:	19bb      	adds	r3, r7, r6
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	4463      	add	r3, ip
 8011254:	9304      	str	r3, [sp, #16]
 8011256:	4663      	mov	r3, ip
 8011258:	9904      	ldr	r1, [sp, #16]
 801125a:	428b      	cmp	r3, r1
 801125c:	d32a      	bcc.n	80112b4 <__multiply+0xb0>
 801125e:	0023      	movs	r3, r4
 8011260:	00bf      	lsls	r7, r7, #2
 8011262:	3314      	adds	r3, #20
 8011264:	3514      	adds	r5, #20
 8011266:	9308      	str	r3, [sp, #32]
 8011268:	00b6      	lsls	r6, r6, #2
 801126a:	19db      	adds	r3, r3, r7
 801126c:	9305      	str	r3, [sp, #20]
 801126e:	19ab      	adds	r3, r5, r6
 8011270:	9309      	str	r3, [sp, #36]	@ 0x24
 8011272:	2304      	movs	r3, #4
 8011274:	9306      	str	r3, [sp, #24]
 8011276:	0023      	movs	r3, r4
 8011278:	9a05      	ldr	r2, [sp, #20]
 801127a:	3315      	adds	r3, #21
 801127c:	9501      	str	r5, [sp, #4]
 801127e:	429a      	cmp	r2, r3
 8011280:	d305      	bcc.n	801128e <__multiply+0x8a>
 8011282:	1b13      	subs	r3, r2, r4
 8011284:	3b15      	subs	r3, #21
 8011286:	089b      	lsrs	r3, r3, #2
 8011288:	3301      	adds	r3, #1
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	9306      	str	r3, [sp, #24]
 801128e:	9b01      	ldr	r3, [sp, #4]
 8011290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011292:	4293      	cmp	r3, r2
 8011294:	d310      	bcc.n	80112b8 <__multiply+0xb4>
 8011296:	9b03      	ldr	r3, [sp, #12]
 8011298:	2b00      	cmp	r3, #0
 801129a:	dd05      	ble.n	80112a8 <__multiply+0xa4>
 801129c:	9b04      	ldr	r3, [sp, #16]
 801129e:	3b04      	subs	r3, #4
 80112a0:	9304      	str	r3, [sp, #16]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d056      	beq.n	8011356 <__multiply+0x152>
 80112a8:	9b02      	ldr	r3, [sp, #8]
 80112aa:	9a03      	ldr	r2, [sp, #12]
 80112ac:	0018      	movs	r0, r3
 80112ae:	611a      	str	r2, [r3, #16]
 80112b0:	b00b      	add	sp, #44	@ 0x2c
 80112b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112b4:	c304      	stmia	r3!, {r2}
 80112b6:	e7cf      	b.n	8011258 <__multiply+0x54>
 80112b8:	9b01      	ldr	r3, [sp, #4]
 80112ba:	6818      	ldr	r0, [r3, #0]
 80112bc:	b280      	uxth	r0, r0
 80112be:	2800      	cmp	r0, #0
 80112c0:	d01e      	beq.n	8011300 <__multiply+0xfc>
 80112c2:	4667      	mov	r7, ip
 80112c4:	2500      	movs	r5, #0
 80112c6:	9e08      	ldr	r6, [sp, #32]
 80112c8:	ce02      	ldmia	r6!, {r1}
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	9307      	str	r3, [sp, #28]
 80112ce:	b28b      	uxth	r3, r1
 80112d0:	4343      	muls	r3, r0
 80112d2:	001a      	movs	r2, r3
 80112d4:	466b      	mov	r3, sp
 80112d6:	0c09      	lsrs	r1, r1, #16
 80112d8:	8b9b      	ldrh	r3, [r3, #28]
 80112da:	4341      	muls	r1, r0
 80112dc:	18d3      	adds	r3, r2, r3
 80112de:	9a07      	ldr	r2, [sp, #28]
 80112e0:	195b      	adds	r3, r3, r5
 80112e2:	0c12      	lsrs	r2, r2, #16
 80112e4:	1889      	adds	r1, r1, r2
 80112e6:	0c1a      	lsrs	r2, r3, #16
 80112e8:	188a      	adds	r2, r1, r2
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	0c15      	lsrs	r5, r2, #16
 80112ee:	0412      	lsls	r2, r2, #16
 80112f0:	431a      	orrs	r2, r3
 80112f2:	9b05      	ldr	r3, [sp, #20]
 80112f4:	c704      	stmia	r7!, {r2}
 80112f6:	42b3      	cmp	r3, r6
 80112f8:	d8e6      	bhi.n	80112c8 <__multiply+0xc4>
 80112fa:	4663      	mov	r3, ip
 80112fc:	9a06      	ldr	r2, [sp, #24]
 80112fe:	509d      	str	r5, [r3, r2]
 8011300:	9b01      	ldr	r3, [sp, #4]
 8011302:	6818      	ldr	r0, [r3, #0]
 8011304:	0c00      	lsrs	r0, r0, #16
 8011306:	d020      	beq.n	801134a <__multiply+0x146>
 8011308:	4663      	mov	r3, ip
 801130a:	0025      	movs	r5, r4
 801130c:	4661      	mov	r1, ip
 801130e:	2700      	movs	r7, #0
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3514      	adds	r5, #20
 8011314:	682a      	ldr	r2, [r5, #0]
 8011316:	680e      	ldr	r6, [r1, #0]
 8011318:	b292      	uxth	r2, r2
 801131a:	4342      	muls	r2, r0
 801131c:	0c36      	lsrs	r6, r6, #16
 801131e:	1992      	adds	r2, r2, r6
 8011320:	19d2      	adds	r2, r2, r7
 8011322:	0416      	lsls	r6, r2, #16
 8011324:	b29b      	uxth	r3, r3
 8011326:	431e      	orrs	r6, r3
 8011328:	600e      	str	r6, [r1, #0]
 801132a:	cd40      	ldmia	r5!, {r6}
 801132c:	684b      	ldr	r3, [r1, #4]
 801132e:	0c36      	lsrs	r6, r6, #16
 8011330:	4346      	muls	r6, r0
 8011332:	b29b      	uxth	r3, r3
 8011334:	0c12      	lsrs	r2, r2, #16
 8011336:	18f3      	adds	r3, r6, r3
 8011338:	189b      	adds	r3, r3, r2
 801133a:	9a05      	ldr	r2, [sp, #20]
 801133c:	0c1f      	lsrs	r7, r3, #16
 801133e:	3104      	adds	r1, #4
 8011340:	42aa      	cmp	r2, r5
 8011342:	d8e7      	bhi.n	8011314 <__multiply+0x110>
 8011344:	4662      	mov	r2, ip
 8011346:	9906      	ldr	r1, [sp, #24]
 8011348:	5053      	str	r3, [r2, r1]
 801134a:	9b01      	ldr	r3, [sp, #4]
 801134c:	3304      	adds	r3, #4
 801134e:	9301      	str	r3, [sp, #4]
 8011350:	2304      	movs	r3, #4
 8011352:	449c      	add	ip, r3
 8011354:	e79b      	b.n	801128e <__multiply+0x8a>
 8011356:	9b03      	ldr	r3, [sp, #12]
 8011358:	3b01      	subs	r3, #1
 801135a:	9303      	str	r3, [sp, #12]
 801135c:	e79b      	b.n	8011296 <__multiply+0x92>
 801135e:	46c0      	nop			@ (mov r8, r8)
 8011360:	08013268 	.word	0x08013268
 8011364:	08013279 	.word	0x08013279

08011368 <__pow5mult>:
 8011368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801136a:	2303      	movs	r3, #3
 801136c:	0015      	movs	r5, r2
 801136e:	0007      	movs	r7, r0
 8011370:	000e      	movs	r6, r1
 8011372:	401a      	ands	r2, r3
 8011374:	421d      	tst	r5, r3
 8011376:	d008      	beq.n	801138a <__pow5mult+0x22>
 8011378:	4925      	ldr	r1, [pc, #148]	@ (8011410 <__pow5mult+0xa8>)
 801137a:	3a01      	subs	r2, #1
 801137c:	0092      	lsls	r2, r2, #2
 801137e:	5852      	ldr	r2, [r2, r1]
 8011380:	2300      	movs	r3, #0
 8011382:	0031      	movs	r1, r6
 8011384:	f7ff fe92 	bl	80110ac <__multadd>
 8011388:	0006      	movs	r6, r0
 801138a:	10ad      	asrs	r5, r5, #2
 801138c:	d03d      	beq.n	801140a <__pow5mult+0xa2>
 801138e:	69fc      	ldr	r4, [r7, #28]
 8011390:	2c00      	cmp	r4, #0
 8011392:	d10f      	bne.n	80113b4 <__pow5mult+0x4c>
 8011394:	2010      	movs	r0, #16
 8011396:	f7ff fd65 	bl	8010e64 <malloc>
 801139a:	1e02      	subs	r2, r0, #0
 801139c:	61f8      	str	r0, [r7, #28]
 801139e:	d105      	bne.n	80113ac <__pow5mult+0x44>
 80113a0:	21b4      	movs	r1, #180	@ 0xb4
 80113a2:	4b1c      	ldr	r3, [pc, #112]	@ (8011414 <__pow5mult+0xac>)
 80113a4:	481c      	ldr	r0, [pc, #112]	@ (8011418 <__pow5mult+0xb0>)
 80113a6:	31ff      	adds	r1, #255	@ 0xff
 80113a8:	f000 fde0 	bl	8011f6c <__assert_func>
 80113ac:	6044      	str	r4, [r0, #4]
 80113ae:	6084      	str	r4, [r0, #8]
 80113b0:	6004      	str	r4, [r0, #0]
 80113b2:	60c4      	str	r4, [r0, #12]
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	689c      	ldr	r4, [r3, #8]
 80113b8:	9301      	str	r3, [sp, #4]
 80113ba:	2c00      	cmp	r4, #0
 80113bc:	d108      	bne.n	80113d0 <__pow5mult+0x68>
 80113be:	0038      	movs	r0, r7
 80113c0:	4916      	ldr	r1, [pc, #88]	@ (801141c <__pow5mult+0xb4>)
 80113c2:	f7ff ff07 	bl	80111d4 <__i2b>
 80113c6:	9b01      	ldr	r3, [sp, #4]
 80113c8:	0004      	movs	r4, r0
 80113ca:	6098      	str	r0, [r3, #8]
 80113cc:	2300      	movs	r3, #0
 80113ce:	6003      	str	r3, [r0, #0]
 80113d0:	2301      	movs	r3, #1
 80113d2:	421d      	tst	r5, r3
 80113d4:	d00a      	beq.n	80113ec <__pow5mult+0x84>
 80113d6:	0031      	movs	r1, r6
 80113d8:	0022      	movs	r2, r4
 80113da:	0038      	movs	r0, r7
 80113dc:	f7ff ff12 	bl	8011204 <__multiply>
 80113e0:	0031      	movs	r1, r6
 80113e2:	9001      	str	r0, [sp, #4]
 80113e4:	0038      	movs	r0, r7
 80113e6:	f7ff fe3d 	bl	8011064 <_Bfree>
 80113ea:	9e01      	ldr	r6, [sp, #4]
 80113ec:	106d      	asrs	r5, r5, #1
 80113ee:	d00c      	beq.n	801140a <__pow5mult+0xa2>
 80113f0:	6820      	ldr	r0, [r4, #0]
 80113f2:	2800      	cmp	r0, #0
 80113f4:	d107      	bne.n	8011406 <__pow5mult+0x9e>
 80113f6:	0022      	movs	r2, r4
 80113f8:	0021      	movs	r1, r4
 80113fa:	0038      	movs	r0, r7
 80113fc:	f7ff ff02 	bl	8011204 <__multiply>
 8011400:	2300      	movs	r3, #0
 8011402:	6020      	str	r0, [r4, #0]
 8011404:	6003      	str	r3, [r0, #0]
 8011406:	0004      	movs	r4, r0
 8011408:	e7e2      	b.n	80113d0 <__pow5mult+0x68>
 801140a:	0030      	movs	r0, r6
 801140c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801140e:	46c0      	nop			@ (mov r8, r8)
 8011410:	080132d4 	.word	0x080132d4
 8011414:	080131f9 	.word	0x080131f9
 8011418:	08013279 	.word	0x08013279
 801141c:	00000271 	.word	0x00000271

08011420 <__lshift>:
 8011420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011422:	000c      	movs	r4, r1
 8011424:	0016      	movs	r6, r2
 8011426:	6923      	ldr	r3, [r4, #16]
 8011428:	1157      	asrs	r7, r2, #5
 801142a:	b085      	sub	sp, #20
 801142c:	18fb      	adds	r3, r7, r3
 801142e:	9301      	str	r3, [sp, #4]
 8011430:	3301      	adds	r3, #1
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	6849      	ldr	r1, [r1, #4]
 8011436:	68a3      	ldr	r3, [r4, #8]
 8011438:	9002      	str	r0, [sp, #8]
 801143a:	9a00      	ldr	r2, [sp, #0]
 801143c:	4293      	cmp	r3, r2
 801143e:	db10      	blt.n	8011462 <__lshift+0x42>
 8011440:	9802      	ldr	r0, [sp, #8]
 8011442:	f7ff fdcb 	bl	8010fdc <_Balloc>
 8011446:	2300      	movs	r3, #0
 8011448:	0001      	movs	r1, r0
 801144a:	0005      	movs	r5, r0
 801144c:	001a      	movs	r2, r3
 801144e:	3114      	adds	r1, #20
 8011450:	4298      	cmp	r0, r3
 8011452:	d10c      	bne.n	801146e <__lshift+0x4e>
 8011454:	21ef      	movs	r1, #239	@ 0xef
 8011456:	002a      	movs	r2, r5
 8011458:	4b25      	ldr	r3, [pc, #148]	@ (80114f0 <__lshift+0xd0>)
 801145a:	4826      	ldr	r0, [pc, #152]	@ (80114f4 <__lshift+0xd4>)
 801145c:	0049      	lsls	r1, r1, #1
 801145e:	f000 fd85 	bl	8011f6c <__assert_func>
 8011462:	3101      	adds	r1, #1
 8011464:	005b      	lsls	r3, r3, #1
 8011466:	e7e8      	b.n	801143a <__lshift+0x1a>
 8011468:	0098      	lsls	r0, r3, #2
 801146a:	500a      	str	r2, [r1, r0]
 801146c:	3301      	adds	r3, #1
 801146e:	42bb      	cmp	r3, r7
 8011470:	dbfa      	blt.n	8011468 <__lshift+0x48>
 8011472:	43fb      	mvns	r3, r7
 8011474:	17db      	asrs	r3, r3, #31
 8011476:	401f      	ands	r7, r3
 8011478:	00bf      	lsls	r7, r7, #2
 801147a:	0023      	movs	r3, r4
 801147c:	201f      	movs	r0, #31
 801147e:	19c9      	adds	r1, r1, r7
 8011480:	0037      	movs	r7, r6
 8011482:	6922      	ldr	r2, [r4, #16]
 8011484:	3314      	adds	r3, #20
 8011486:	0092      	lsls	r2, r2, #2
 8011488:	189a      	adds	r2, r3, r2
 801148a:	4007      	ands	r7, r0
 801148c:	4206      	tst	r6, r0
 801148e:	d029      	beq.n	80114e4 <__lshift+0xc4>
 8011490:	3001      	adds	r0, #1
 8011492:	1bc0      	subs	r0, r0, r7
 8011494:	9003      	str	r0, [sp, #12]
 8011496:	468c      	mov	ip, r1
 8011498:	2000      	movs	r0, #0
 801149a:	681e      	ldr	r6, [r3, #0]
 801149c:	40be      	lsls	r6, r7
 801149e:	4306      	orrs	r6, r0
 80114a0:	4660      	mov	r0, ip
 80114a2:	c040      	stmia	r0!, {r6}
 80114a4:	4684      	mov	ip, r0
 80114a6:	9e03      	ldr	r6, [sp, #12]
 80114a8:	cb01      	ldmia	r3!, {r0}
 80114aa:	40f0      	lsrs	r0, r6
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d8f4      	bhi.n	801149a <__lshift+0x7a>
 80114b0:	0026      	movs	r6, r4
 80114b2:	3615      	adds	r6, #21
 80114b4:	2304      	movs	r3, #4
 80114b6:	42b2      	cmp	r2, r6
 80114b8:	d304      	bcc.n	80114c4 <__lshift+0xa4>
 80114ba:	1b13      	subs	r3, r2, r4
 80114bc:	3b15      	subs	r3, #21
 80114be:	089b      	lsrs	r3, r3, #2
 80114c0:	3301      	adds	r3, #1
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	50c8      	str	r0, [r1, r3]
 80114c6:	2800      	cmp	r0, #0
 80114c8:	d002      	beq.n	80114d0 <__lshift+0xb0>
 80114ca:	9b01      	ldr	r3, [sp, #4]
 80114cc:	3302      	adds	r3, #2
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	9b00      	ldr	r3, [sp, #0]
 80114d2:	9802      	ldr	r0, [sp, #8]
 80114d4:	3b01      	subs	r3, #1
 80114d6:	0021      	movs	r1, r4
 80114d8:	612b      	str	r3, [r5, #16]
 80114da:	f7ff fdc3 	bl	8011064 <_Bfree>
 80114de:	0028      	movs	r0, r5
 80114e0:	b005      	add	sp, #20
 80114e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114e4:	cb01      	ldmia	r3!, {r0}
 80114e6:	c101      	stmia	r1!, {r0}
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d8fb      	bhi.n	80114e4 <__lshift+0xc4>
 80114ec:	e7f0      	b.n	80114d0 <__lshift+0xb0>
 80114ee:	46c0      	nop			@ (mov r8, r8)
 80114f0:	08013268 	.word	0x08013268
 80114f4:	08013279 	.word	0x08013279

080114f8 <__mcmp>:
 80114f8:	b530      	push	{r4, r5, lr}
 80114fa:	690b      	ldr	r3, [r1, #16]
 80114fc:	6904      	ldr	r4, [r0, #16]
 80114fe:	0002      	movs	r2, r0
 8011500:	1ae0      	subs	r0, r4, r3
 8011502:	429c      	cmp	r4, r3
 8011504:	d10f      	bne.n	8011526 <__mcmp+0x2e>
 8011506:	3214      	adds	r2, #20
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	3114      	adds	r1, #20
 801150c:	0014      	movs	r4, r2
 801150e:	18c9      	adds	r1, r1, r3
 8011510:	18d2      	adds	r2, r2, r3
 8011512:	3a04      	subs	r2, #4
 8011514:	3904      	subs	r1, #4
 8011516:	6815      	ldr	r5, [r2, #0]
 8011518:	680b      	ldr	r3, [r1, #0]
 801151a:	429d      	cmp	r5, r3
 801151c:	d004      	beq.n	8011528 <__mcmp+0x30>
 801151e:	2001      	movs	r0, #1
 8011520:	429d      	cmp	r5, r3
 8011522:	d200      	bcs.n	8011526 <__mcmp+0x2e>
 8011524:	3802      	subs	r0, #2
 8011526:	bd30      	pop	{r4, r5, pc}
 8011528:	4294      	cmp	r4, r2
 801152a:	d3f2      	bcc.n	8011512 <__mcmp+0x1a>
 801152c:	e7fb      	b.n	8011526 <__mcmp+0x2e>
	...

08011530 <__mdiff>:
 8011530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011532:	000c      	movs	r4, r1
 8011534:	b087      	sub	sp, #28
 8011536:	9000      	str	r0, [sp, #0]
 8011538:	0011      	movs	r1, r2
 801153a:	0020      	movs	r0, r4
 801153c:	0017      	movs	r7, r2
 801153e:	f7ff ffdb 	bl	80114f8 <__mcmp>
 8011542:	1e05      	subs	r5, r0, #0
 8011544:	d110      	bne.n	8011568 <__mdiff+0x38>
 8011546:	0001      	movs	r1, r0
 8011548:	9800      	ldr	r0, [sp, #0]
 801154a:	f7ff fd47 	bl	8010fdc <_Balloc>
 801154e:	1e02      	subs	r2, r0, #0
 8011550:	d104      	bne.n	801155c <__mdiff+0x2c>
 8011552:	4b40      	ldr	r3, [pc, #256]	@ (8011654 <__mdiff+0x124>)
 8011554:	4840      	ldr	r0, [pc, #256]	@ (8011658 <__mdiff+0x128>)
 8011556:	4941      	ldr	r1, [pc, #260]	@ (801165c <__mdiff+0x12c>)
 8011558:	f000 fd08 	bl	8011f6c <__assert_func>
 801155c:	2301      	movs	r3, #1
 801155e:	6145      	str	r5, [r0, #20]
 8011560:	6103      	str	r3, [r0, #16]
 8011562:	0010      	movs	r0, r2
 8011564:	b007      	add	sp, #28
 8011566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011568:	2600      	movs	r6, #0
 801156a:	42b0      	cmp	r0, r6
 801156c:	da03      	bge.n	8011576 <__mdiff+0x46>
 801156e:	0023      	movs	r3, r4
 8011570:	003c      	movs	r4, r7
 8011572:	001f      	movs	r7, r3
 8011574:	3601      	adds	r6, #1
 8011576:	6861      	ldr	r1, [r4, #4]
 8011578:	9800      	ldr	r0, [sp, #0]
 801157a:	f7ff fd2f 	bl	8010fdc <_Balloc>
 801157e:	1e02      	subs	r2, r0, #0
 8011580:	d103      	bne.n	801158a <__mdiff+0x5a>
 8011582:	4b34      	ldr	r3, [pc, #208]	@ (8011654 <__mdiff+0x124>)
 8011584:	4834      	ldr	r0, [pc, #208]	@ (8011658 <__mdiff+0x128>)
 8011586:	4936      	ldr	r1, [pc, #216]	@ (8011660 <__mdiff+0x130>)
 8011588:	e7e6      	b.n	8011558 <__mdiff+0x28>
 801158a:	6923      	ldr	r3, [r4, #16]
 801158c:	3414      	adds	r4, #20
 801158e:	9300      	str	r3, [sp, #0]
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	18e3      	adds	r3, r4, r3
 8011594:	0021      	movs	r1, r4
 8011596:	9401      	str	r4, [sp, #4]
 8011598:	003c      	movs	r4, r7
 801159a:	9302      	str	r3, [sp, #8]
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	3414      	adds	r4, #20
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	18e3      	adds	r3, r4, r3
 80115a4:	9303      	str	r3, [sp, #12]
 80115a6:	0003      	movs	r3, r0
 80115a8:	60c6      	str	r6, [r0, #12]
 80115aa:	468c      	mov	ip, r1
 80115ac:	2000      	movs	r0, #0
 80115ae:	3314      	adds	r3, #20
 80115b0:	9304      	str	r3, [sp, #16]
 80115b2:	9305      	str	r3, [sp, #20]
 80115b4:	4663      	mov	r3, ip
 80115b6:	cb20      	ldmia	r3!, {r5}
 80115b8:	b2a9      	uxth	r1, r5
 80115ba:	000e      	movs	r6, r1
 80115bc:	469c      	mov	ip, r3
 80115be:	cc08      	ldmia	r4!, {r3}
 80115c0:	0c2d      	lsrs	r5, r5, #16
 80115c2:	b299      	uxth	r1, r3
 80115c4:	1a71      	subs	r1, r6, r1
 80115c6:	1809      	adds	r1, r1, r0
 80115c8:	0c1b      	lsrs	r3, r3, #16
 80115ca:	1408      	asrs	r0, r1, #16
 80115cc:	1aeb      	subs	r3, r5, r3
 80115ce:	181b      	adds	r3, r3, r0
 80115d0:	1418      	asrs	r0, r3, #16
 80115d2:	b289      	uxth	r1, r1
 80115d4:	041b      	lsls	r3, r3, #16
 80115d6:	4319      	orrs	r1, r3
 80115d8:	9b05      	ldr	r3, [sp, #20]
 80115da:	c302      	stmia	r3!, {r1}
 80115dc:	9305      	str	r3, [sp, #20]
 80115de:	9b03      	ldr	r3, [sp, #12]
 80115e0:	42a3      	cmp	r3, r4
 80115e2:	d8e7      	bhi.n	80115b4 <__mdiff+0x84>
 80115e4:	0039      	movs	r1, r7
 80115e6:	9c03      	ldr	r4, [sp, #12]
 80115e8:	3115      	adds	r1, #21
 80115ea:	2304      	movs	r3, #4
 80115ec:	428c      	cmp	r4, r1
 80115ee:	d304      	bcc.n	80115fa <__mdiff+0xca>
 80115f0:	1be3      	subs	r3, r4, r7
 80115f2:	3b15      	subs	r3, #21
 80115f4:	089b      	lsrs	r3, r3, #2
 80115f6:	3301      	adds	r3, #1
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	9901      	ldr	r1, [sp, #4]
 80115fc:	18cd      	adds	r5, r1, r3
 80115fe:	9904      	ldr	r1, [sp, #16]
 8011600:	002e      	movs	r6, r5
 8011602:	18cb      	adds	r3, r1, r3
 8011604:	001f      	movs	r7, r3
 8011606:	9902      	ldr	r1, [sp, #8]
 8011608:	428e      	cmp	r6, r1
 801160a:	d311      	bcc.n	8011630 <__mdiff+0x100>
 801160c:	9c02      	ldr	r4, [sp, #8]
 801160e:	1ee9      	subs	r1, r5, #3
 8011610:	2000      	movs	r0, #0
 8011612:	428c      	cmp	r4, r1
 8011614:	d304      	bcc.n	8011620 <__mdiff+0xf0>
 8011616:	0021      	movs	r1, r4
 8011618:	3103      	adds	r1, #3
 801161a:	1b49      	subs	r1, r1, r5
 801161c:	0889      	lsrs	r1, r1, #2
 801161e:	0088      	lsls	r0, r1, #2
 8011620:	181b      	adds	r3, r3, r0
 8011622:	3b04      	subs	r3, #4
 8011624:	6819      	ldr	r1, [r3, #0]
 8011626:	2900      	cmp	r1, #0
 8011628:	d010      	beq.n	801164c <__mdiff+0x11c>
 801162a:	9b00      	ldr	r3, [sp, #0]
 801162c:	6113      	str	r3, [r2, #16]
 801162e:	e798      	b.n	8011562 <__mdiff+0x32>
 8011630:	4684      	mov	ip, r0
 8011632:	ce02      	ldmia	r6!, {r1}
 8011634:	b288      	uxth	r0, r1
 8011636:	4460      	add	r0, ip
 8011638:	1400      	asrs	r0, r0, #16
 801163a:	0c0c      	lsrs	r4, r1, #16
 801163c:	1904      	adds	r4, r0, r4
 801163e:	4461      	add	r1, ip
 8011640:	1420      	asrs	r0, r4, #16
 8011642:	b289      	uxth	r1, r1
 8011644:	0424      	lsls	r4, r4, #16
 8011646:	4321      	orrs	r1, r4
 8011648:	c702      	stmia	r7!, {r1}
 801164a:	e7dc      	b.n	8011606 <__mdiff+0xd6>
 801164c:	9900      	ldr	r1, [sp, #0]
 801164e:	3901      	subs	r1, #1
 8011650:	9100      	str	r1, [sp, #0]
 8011652:	e7e6      	b.n	8011622 <__mdiff+0xf2>
 8011654:	08013268 	.word	0x08013268
 8011658:	08013279 	.word	0x08013279
 801165c:	00000237 	.word	0x00000237
 8011660:	00000245 	.word	0x00000245

08011664 <__d2b>:
 8011664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011666:	2101      	movs	r1, #1
 8011668:	0016      	movs	r6, r2
 801166a:	001f      	movs	r7, r3
 801166c:	f7ff fcb6 	bl	8010fdc <_Balloc>
 8011670:	1e04      	subs	r4, r0, #0
 8011672:	d105      	bne.n	8011680 <__d2b+0x1c>
 8011674:	0022      	movs	r2, r4
 8011676:	4b25      	ldr	r3, [pc, #148]	@ (801170c <__d2b+0xa8>)
 8011678:	4825      	ldr	r0, [pc, #148]	@ (8011710 <__d2b+0xac>)
 801167a:	4926      	ldr	r1, [pc, #152]	@ (8011714 <__d2b+0xb0>)
 801167c:	f000 fc76 	bl	8011f6c <__assert_func>
 8011680:	033b      	lsls	r3, r7, #12
 8011682:	007d      	lsls	r5, r7, #1
 8011684:	0b1b      	lsrs	r3, r3, #12
 8011686:	0d6d      	lsrs	r5, r5, #21
 8011688:	d002      	beq.n	8011690 <__d2b+0x2c>
 801168a:	2280      	movs	r2, #128	@ 0x80
 801168c:	0352      	lsls	r2, r2, #13
 801168e:	4313      	orrs	r3, r2
 8011690:	9301      	str	r3, [sp, #4]
 8011692:	2e00      	cmp	r6, #0
 8011694:	d025      	beq.n	80116e2 <__d2b+0x7e>
 8011696:	4668      	mov	r0, sp
 8011698:	9600      	str	r6, [sp, #0]
 801169a:	f7ff fd6c 	bl	8011176 <__lo0bits>
 801169e:	9b01      	ldr	r3, [sp, #4]
 80116a0:	9900      	ldr	r1, [sp, #0]
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d01b      	beq.n	80116de <__d2b+0x7a>
 80116a6:	2220      	movs	r2, #32
 80116a8:	001e      	movs	r6, r3
 80116aa:	1a12      	subs	r2, r2, r0
 80116ac:	4096      	lsls	r6, r2
 80116ae:	0032      	movs	r2, r6
 80116b0:	40c3      	lsrs	r3, r0
 80116b2:	430a      	orrs	r2, r1
 80116b4:	6162      	str	r2, [r4, #20]
 80116b6:	9301      	str	r3, [sp, #4]
 80116b8:	9e01      	ldr	r6, [sp, #4]
 80116ba:	61a6      	str	r6, [r4, #24]
 80116bc:	1e73      	subs	r3, r6, #1
 80116be:	419e      	sbcs	r6, r3
 80116c0:	3601      	adds	r6, #1
 80116c2:	6126      	str	r6, [r4, #16]
 80116c4:	2d00      	cmp	r5, #0
 80116c6:	d014      	beq.n	80116f2 <__d2b+0x8e>
 80116c8:	2635      	movs	r6, #53	@ 0x35
 80116ca:	4b13      	ldr	r3, [pc, #76]	@ (8011718 <__d2b+0xb4>)
 80116cc:	18ed      	adds	r5, r5, r3
 80116ce:	9b08      	ldr	r3, [sp, #32]
 80116d0:	182d      	adds	r5, r5, r0
 80116d2:	601d      	str	r5, [r3, #0]
 80116d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116d6:	1a36      	subs	r6, r6, r0
 80116d8:	601e      	str	r6, [r3, #0]
 80116da:	0020      	movs	r0, r4
 80116dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80116de:	6161      	str	r1, [r4, #20]
 80116e0:	e7ea      	b.n	80116b8 <__d2b+0x54>
 80116e2:	a801      	add	r0, sp, #4
 80116e4:	f7ff fd47 	bl	8011176 <__lo0bits>
 80116e8:	9b01      	ldr	r3, [sp, #4]
 80116ea:	2601      	movs	r6, #1
 80116ec:	6163      	str	r3, [r4, #20]
 80116ee:	3020      	adds	r0, #32
 80116f0:	e7e7      	b.n	80116c2 <__d2b+0x5e>
 80116f2:	4b0a      	ldr	r3, [pc, #40]	@ (801171c <__d2b+0xb8>)
 80116f4:	18c0      	adds	r0, r0, r3
 80116f6:	9b08      	ldr	r3, [sp, #32]
 80116f8:	6018      	str	r0, [r3, #0]
 80116fa:	4b09      	ldr	r3, [pc, #36]	@ (8011720 <__d2b+0xbc>)
 80116fc:	18f3      	adds	r3, r6, r3
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	18e3      	adds	r3, r4, r3
 8011702:	6958      	ldr	r0, [r3, #20]
 8011704:	f7ff fd16 	bl	8011134 <__hi0bits>
 8011708:	0176      	lsls	r6, r6, #5
 801170a:	e7e3      	b.n	80116d4 <__d2b+0x70>
 801170c:	08013268 	.word	0x08013268
 8011710:	08013279 	.word	0x08013279
 8011714:	0000030f 	.word	0x0000030f
 8011718:	fffffbcd 	.word	0xfffffbcd
 801171c:	fffffbce 	.word	0xfffffbce
 8011720:	3fffffff 	.word	0x3fffffff

08011724 <__ssputs_r>:
 8011724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011726:	688e      	ldr	r6, [r1, #8]
 8011728:	b085      	sub	sp, #20
 801172a:	001f      	movs	r7, r3
 801172c:	000c      	movs	r4, r1
 801172e:	680b      	ldr	r3, [r1, #0]
 8011730:	9002      	str	r0, [sp, #8]
 8011732:	9203      	str	r2, [sp, #12]
 8011734:	42be      	cmp	r6, r7
 8011736:	d830      	bhi.n	801179a <__ssputs_r+0x76>
 8011738:	210c      	movs	r1, #12
 801173a:	5e62      	ldrsh	r2, [r4, r1]
 801173c:	2190      	movs	r1, #144	@ 0x90
 801173e:	00c9      	lsls	r1, r1, #3
 8011740:	420a      	tst	r2, r1
 8011742:	d028      	beq.n	8011796 <__ssputs_r+0x72>
 8011744:	2003      	movs	r0, #3
 8011746:	6921      	ldr	r1, [r4, #16]
 8011748:	1a5b      	subs	r3, r3, r1
 801174a:	9301      	str	r3, [sp, #4]
 801174c:	6963      	ldr	r3, [r4, #20]
 801174e:	4343      	muls	r3, r0
 8011750:	9801      	ldr	r0, [sp, #4]
 8011752:	0fdd      	lsrs	r5, r3, #31
 8011754:	18ed      	adds	r5, r5, r3
 8011756:	1c7b      	adds	r3, r7, #1
 8011758:	181b      	adds	r3, r3, r0
 801175a:	106d      	asrs	r5, r5, #1
 801175c:	42ab      	cmp	r3, r5
 801175e:	d900      	bls.n	8011762 <__ssputs_r+0x3e>
 8011760:	001d      	movs	r5, r3
 8011762:	0552      	lsls	r2, r2, #21
 8011764:	d528      	bpl.n	80117b8 <__ssputs_r+0x94>
 8011766:	0029      	movs	r1, r5
 8011768:	9802      	ldr	r0, [sp, #8]
 801176a:	f7ff fba7 	bl	8010ebc <_malloc_r>
 801176e:	1e06      	subs	r6, r0, #0
 8011770:	d02c      	beq.n	80117cc <__ssputs_r+0xa8>
 8011772:	9a01      	ldr	r2, [sp, #4]
 8011774:	6921      	ldr	r1, [r4, #16]
 8011776:	f000 fbef 	bl	8011f58 <memcpy>
 801177a:	89a2      	ldrh	r2, [r4, #12]
 801177c:	4b18      	ldr	r3, [pc, #96]	@ (80117e0 <__ssputs_r+0xbc>)
 801177e:	401a      	ands	r2, r3
 8011780:	2380      	movs	r3, #128	@ 0x80
 8011782:	4313      	orrs	r3, r2
 8011784:	81a3      	strh	r3, [r4, #12]
 8011786:	9b01      	ldr	r3, [sp, #4]
 8011788:	6126      	str	r6, [r4, #16]
 801178a:	18f6      	adds	r6, r6, r3
 801178c:	6026      	str	r6, [r4, #0]
 801178e:	003e      	movs	r6, r7
 8011790:	6165      	str	r5, [r4, #20]
 8011792:	1aed      	subs	r5, r5, r3
 8011794:	60a5      	str	r5, [r4, #8]
 8011796:	42be      	cmp	r6, r7
 8011798:	d900      	bls.n	801179c <__ssputs_r+0x78>
 801179a:	003e      	movs	r6, r7
 801179c:	0032      	movs	r2, r6
 801179e:	9903      	ldr	r1, [sp, #12]
 80117a0:	6820      	ldr	r0, [r4, #0]
 80117a2:	f000 fbb3 	bl	8011f0c <memmove>
 80117a6:	2000      	movs	r0, #0
 80117a8:	68a3      	ldr	r3, [r4, #8]
 80117aa:	1b9b      	subs	r3, r3, r6
 80117ac:	60a3      	str	r3, [r4, #8]
 80117ae:	6823      	ldr	r3, [r4, #0]
 80117b0:	199b      	adds	r3, r3, r6
 80117b2:	6023      	str	r3, [r4, #0]
 80117b4:	b005      	add	sp, #20
 80117b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b8:	002a      	movs	r2, r5
 80117ba:	9802      	ldr	r0, [sp, #8]
 80117bc:	f000 fc33 	bl	8012026 <_realloc_r>
 80117c0:	1e06      	subs	r6, r0, #0
 80117c2:	d1e0      	bne.n	8011786 <__ssputs_r+0x62>
 80117c4:	6921      	ldr	r1, [r4, #16]
 80117c6:	9802      	ldr	r0, [sp, #8]
 80117c8:	f7ff fb02 	bl	8010dd0 <_free_r>
 80117cc:	230c      	movs	r3, #12
 80117ce:	2001      	movs	r0, #1
 80117d0:	9a02      	ldr	r2, [sp, #8]
 80117d2:	4240      	negs	r0, r0
 80117d4:	6013      	str	r3, [r2, #0]
 80117d6:	89a2      	ldrh	r2, [r4, #12]
 80117d8:	3334      	adds	r3, #52	@ 0x34
 80117da:	4313      	orrs	r3, r2
 80117dc:	81a3      	strh	r3, [r4, #12]
 80117de:	e7e9      	b.n	80117b4 <__ssputs_r+0x90>
 80117e0:	fffffb7f 	.word	0xfffffb7f

080117e4 <_svfiprintf_r>:
 80117e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117e6:	b0a1      	sub	sp, #132	@ 0x84
 80117e8:	9003      	str	r0, [sp, #12]
 80117ea:	001d      	movs	r5, r3
 80117ec:	898b      	ldrh	r3, [r1, #12]
 80117ee:	000f      	movs	r7, r1
 80117f0:	0016      	movs	r6, r2
 80117f2:	061b      	lsls	r3, r3, #24
 80117f4:	d511      	bpl.n	801181a <_svfiprintf_r+0x36>
 80117f6:	690b      	ldr	r3, [r1, #16]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d10e      	bne.n	801181a <_svfiprintf_r+0x36>
 80117fc:	2140      	movs	r1, #64	@ 0x40
 80117fe:	f7ff fb5d 	bl	8010ebc <_malloc_r>
 8011802:	6038      	str	r0, [r7, #0]
 8011804:	6138      	str	r0, [r7, #16]
 8011806:	2800      	cmp	r0, #0
 8011808:	d105      	bne.n	8011816 <_svfiprintf_r+0x32>
 801180a:	230c      	movs	r3, #12
 801180c:	9a03      	ldr	r2, [sp, #12]
 801180e:	6013      	str	r3, [r2, #0]
 8011810:	2001      	movs	r0, #1
 8011812:	4240      	negs	r0, r0
 8011814:	e0cf      	b.n	80119b6 <_svfiprintf_r+0x1d2>
 8011816:	2340      	movs	r3, #64	@ 0x40
 8011818:	617b      	str	r3, [r7, #20]
 801181a:	2300      	movs	r3, #0
 801181c:	ac08      	add	r4, sp, #32
 801181e:	6163      	str	r3, [r4, #20]
 8011820:	3320      	adds	r3, #32
 8011822:	7663      	strb	r3, [r4, #25]
 8011824:	3310      	adds	r3, #16
 8011826:	76a3      	strb	r3, [r4, #26]
 8011828:	9507      	str	r5, [sp, #28]
 801182a:	0035      	movs	r5, r6
 801182c:	782b      	ldrb	r3, [r5, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d001      	beq.n	8011836 <_svfiprintf_r+0x52>
 8011832:	2b25      	cmp	r3, #37	@ 0x25
 8011834:	d148      	bne.n	80118c8 <_svfiprintf_r+0xe4>
 8011836:	1bab      	subs	r3, r5, r6
 8011838:	9305      	str	r3, [sp, #20]
 801183a:	42b5      	cmp	r5, r6
 801183c:	d00b      	beq.n	8011856 <_svfiprintf_r+0x72>
 801183e:	0032      	movs	r2, r6
 8011840:	0039      	movs	r1, r7
 8011842:	9803      	ldr	r0, [sp, #12]
 8011844:	f7ff ff6e 	bl	8011724 <__ssputs_r>
 8011848:	3001      	adds	r0, #1
 801184a:	d100      	bne.n	801184e <_svfiprintf_r+0x6a>
 801184c:	e0ae      	b.n	80119ac <_svfiprintf_r+0x1c8>
 801184e:	6963      	ldr	r3, [r4, #20]
 8011850:	9a05      	ldr	r2, [sp, #20]
 8011852:	189b      	adds	r3, r3, r2
 8011854:	6163      	str	r3, [r4, #20]
 8011856:	782b      	ldrb	r3, [r5, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d100      	bne.n	801185e <_svfiprintf_r+0x7a>
 801185c:	e0a6      	b.n	80119ac <_svfiprintf_r+0x1c8>
 801185e:	2201      	movs	r2, #1
 8011860:	2300      	movs	r3, #0
 8011862:	4252      	negs	r2, r2
 8011864:	6062      	str	r2, [r4, #4]
 8011866:	a904      	add	r1, sp, #16
 8011868:	3254      	adds	r2, #84	@ 0x54
 801186a:	1852      	adds	r2, r2, r1
 801186c:	1c6e      	adds	r6, r5, #1
 801186e:	6023      	str	r3, [r4, #0]
 8011870:	60e3      	str	r3, [r4, #12]
 8011872:	60a3      	str	r3, [r4, #8]
 8011874:	7013      	strb	r3, [r2, #0]
 8011876:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011878:	4b54      	ldr	r3, [pc, #336]	@ (80119cc <_svfiprintf_r+0x1e8>)
 801187a:	2205      	movs	r2, #5
 801187c:	0018      	movs	r0, r3
 801187e:	7831      	ldrb	r1, [r6, #0]
 8011880:	9305      	str	r3, [sp, #20]
 8011882:	f7fe fc18 	bl	80100b6 <memchr>
 8011886:	1c75      	adds	r5, r6, #1
 8011888:	2800      	cmp	r0, #0
 801188a:	d11f      	bne.n	80118cc <_svfiprintf_r+0xe8>
 801188c:	6822      	ldr	r2, [r4, #0]
 801188e:	06d3      	lsls	r3, r2, #27
 8011890:	d504      	bpl.n	801189c <_svfiprintf_r+0xb8>
 8011892:	2353      	movs	r3, #83	@ 0x53
 8011894:	a904      	add	r1, sp, #16
 8011896:	185b      	adds	r3, r3, r1
 8011898:	2120      	movs	r1, #32
 801189a:	7019      	strb	r1, [r3, #0]
 801189c:	0713      	lsls	r3, r2, #28
 801189e:	d504      	bpl.n	80118aa <_svfiprintf_r+0xc6>
 80118a0:	2353      	movs	r3, #83	@ 0x53
 80118a2:	a904      	add	r1, sp, #16
 80118a4:	185b      	adds	r3, r3, r1
 80118a6:	212b      	movs	r1, #43	@ 0x2b
 80118a8:	7019      	strb	r1, [r3, #0]
 80118aa:	7833      	ldrb	r3, [r6, #0]
 80118ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80118ae:	d016      	beq.n	80118de <_svfiprintf_r+0xfa>
 80118b0:	0035      	movs	r5, r6
 80118b2:	2100      	movs	r1, #0
 80118b4:	200a      	movs	r0, #10
 80118b6:	68e3      	ldr	r3, [r4, #12]
 80118b8:	782a      	ldrb	r2, [r5, #0]
 80118ba:	1c6e      	adds	r6, r5, #1
 80118bc:	3a30      	subs	r2, #48	@ 0x30
 80118be:	2a09      	cmp	r2, #9
 80118c0:	d950      	bls.n	8011964 <_svfiprintf_r+0x180>
 80118c2:	2900      	cmp	r1, #0
 80118c4:	d111      	bne.n	80118ea <_svfiprintf_r+0x106>
 80118c6:	e017      	b.n	80118f8 <_svfiprintf_r+0x114>
 80118c8:	3501      	adds	r5, #1
 80118ca:	e7af      	b.n	801182c <_svfiprintf_r+0x48>
 80118cc:	9b05      	ldr	r3, [sp, #20]
 80118ce:	6822      	ldr	r2, [r4, #0]
 80118d0:	1ac0      	subs	r0, r0, r3
 80118d2:	2301      	movs	r3, #1
 80118d4:	4083      	lsls	r3, r0
 80118d6:	4313      	orrs	r3, r2
 80118d8:	002e      	movs	r6, r5
 80118da:	6023      	str	r3, [r4, #0]
 80118dc:	e7cc      	b.n	8011878 <_svfiprintf_r+0x94>
 80118de:	9b07      	ldr	r3, [sp, #28]
 80118e0:	1d19      	adds	r1, r3, #4
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	9107      	str	r1, [sp, #28]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	db01      	blt.n	80118ee <_svfiprintf_r+0x10a>
 80118ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118ec:	e004      	b.n	80118f8 <_svfiprintf_r+0x114>
 80118ee:	425b      	negs	r3, r3
 80118f0:	60e3      	str	r3, [r4, #12]
 80118f2:	2302      	movs	r3, #2
 80118f4:	4313      	orrs	r3, r2
 80118f6:	6023      	str	r3, [r4, #0]
 80118f8:	782b      	ldrb	r3, [r5, #0]
 80118fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80118fc:	d10c      	bne.n	8011918 <_svfiprintf_r+0x134>
 80118fe:	786b      	ldrb	r3, [r5, #1]
 8011900:	2b2a      	cmp	r3, #42	@ 0x2a
 8011902:	d134      	bne.n	801196e <_svfiprintf_r+0x18a>
 8011904:	9b07      	ldr	r3, [sp, #28]
 8011906:	3502      	adds	r5, #2
 8011908:	1d1a      	adds	r2, r3, #4
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	9207      	str	r2, [sp, #28]
 801190e:	2b00      	cmp	r3, #0
 8011910:	da01      	bge.n	8011916 <_svfiprintf_r+0x132>
 8011912:	2301      	movs	r3, #1
 8011914:	425b      	negs	r3, r3
 8011916:	9309      	str	r3, [sp, #36]	@ 0x24
 8011918:	4e2d      	ldr	r6, [pc, #180]	@ (80119d0 <_svfiprintf_r+0x1ec>)
 801191a:	2203      	movs	r2, #3
 801191c:	0030      	movs	r0, r6
 801191e:	7829      	ldrb	r1, [r5, #0]
 8011920:	f7fe fbc9 	bl	80100b6 <memchr>
 8011924:	2800      	cmp	r0, #0
 8011926:	d006      	beq.n	8011936 <_svfiprintf_r+0x152>
 8011928:	2340      	movs	r3, #64	@ 0x40
 801192a:	1b80      	subs	r0, r0, r6
 801192c:	4083      	lsls	r3, r0
 801192e:	6822      	ldr	r2, [r4, #0]
 8011930:	3501      	adds	r5, #1
 8011932:	4313      	orrs	r3, r2
 8011934:	6023      	str	r3, [r4, #0]
 8011936:	7829      	ldrb	r1, [r5, #0]
 8011938:	2206      	movs	r2, #6
 801193a:	4826      	ldr	r0, [pc, #152]	@ (80119d4 <_svfiprintf_r+0x1f0>)
 801193c:	1c6e      	adds	r6, r5, #1
 801193e:	7621      	strb	r1, [r4, #24]
 8011940:	f7fe fbb9 	bl	80100b6 <memchr>
 8011944:	2800      	cmp	r0, #0
 8011946:	d038      	beq.n	80119ba <_svfiprintf_r+0x1d6>
 8011948:	4b23      	ldr	r3, [pc, #140]	@ (80119d8 <_svfiprintf_r+0x1f4>)
 801194a:	2b00      	cmp	r3, #0
 801194c:	d122      	bne.n	8011994 <_svfiprintf_r+0x1b0>
 801194e:	2207      	movs	r2, #7
 8011950:	9b07      	ldr	r3, [sp, #28]
 8011952:	3307      	adds	r3, #7
 8011954:	4393      	bics	r3, r2
 8011956:	3308      	adds	r3, #8
 8011958:	9307      	str	r3, [sp, #28]
 801195a:	6963      	ldr	r3, [r4, #20]
 801195c:	9a04      	ldr	r2, [sp, #16]
 801195e:	189b      	adds	r3, r3, r2
 8011960:	6163      	str	r3, [r4, #20]
 8011962:	e762      	b.n	801182a <_svfiprintf_r+0x46>
 8011964:	4343      	muls	r3, r0
 8011966:	0035      	movs	r5, r6
 8011968:	2101      	movs	r1, #1
 801196a:	189b      	adds	r3, r3, r2
 801196c:	e7a4      	b.n	80118b8 <_svfiprintf_r+0xd4>
 801196e:	2300      	movs	r3, #0
 8011970:	200a      	movs	r0, #10
 8011972:	0019      	movs	r1, r3
 8011974:	3501      	adds	r5, #1
 8011976:	6063      	str	r3, [r4, #4]
 8011978:	782a      	ldrb	r2, [r5, #0]
 801197a:	1c6e      	adds	r6, r5, #1
 801197c:	3a30      	subs	r2, #48	@ 0x30
 801197e:	2a09      	cmp	r2, #9
 8011980:	d903      	bls.n	801198a <_svfiprintf_r+0x1a6>
 8011982:	2b00      	cmp	r3, #0
 8011984:	d0c8      	beq.n	8011918 <_svfiprintf_r+0x134>
 8011986:	9109      	str	r1, [sp, #36]	@ 0x24
 8011988:	e7c6      	b.n	8011918 <_svfiprintf_r+0x134>
 801198a:	4341      	muls	r1, r0
 801198c:	0035      	movs	r5, r6
 801198e:	2301      	movs	r3, #1
 8011990:	1889      	adds	r1, r1, r2
 8011992:	e7f1      	b.n	8011978 <_svfiprintf_r+0x194>
 8011994:	aa07      	add	r2, sp, #28
 8011996:	9200      	str	r2, [sp, #0]
 8011998:	0021      	movs	r1, r4
 801199a:	003a      	movs	r2, r7
 801199c:	4b0f      	ldr	r3, [pc, #60]	@ (80119dc <_svfiprintf_r+0x1f8>)
 801199e:	9803      	ldr	r0, [sp, #12]
 80119a0:	f7fd fda4 	bl	800f4ec <_printf_float>
 80119a4:	9004      	str	r0, [sp, #16]
 80119a6:	9b04      	ldr	r3, [sp, #16]
 80119a8:	3301      	adds	r3, #1
 80119aa:	d1d6      	bne.n	801195a <_svfiprintf_r+0x176>
 80119ac:	89bb      	ldrh	r3, [r7, #12]
 80119ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80119b0:	065b      	lsls	r3, r3, #25
 80119b2:	d500      	bpl.n	80119b6 <_svfiprintf_r+0x1d2>
 80119b4:	e72c      	b.n	8011810 <_svfiprintf_r+0x2c>
 80119b6:	b021      	add	sp, #132	@ 0x84
 80119b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ba:	aa07      	add	r2, sp, #28
 80119bc:	9200      	str	r2, [sp, #0]
 80119be:	0021      	movs	r1, r4
 80119c0:	003a      	movs	r2, r7
 80119c2:	4b06      	ldr	r3, [pc, #24]	@ (80119dc <_svfiprintf_r+0x1f8>)
 80119c4:	9803      	ldr	r0, [sp, #12]
 80119c6:	f7fe f83f 	bl	800fa48 <_printf_i>
 80119ca:	e7eb      	b.n	80119a4 <_svfiprintf_r+0x1c0>
 80119cc:	080133d0 	.word	0x080133d0
 80119d0:	080133d6 	.word	0x080133d6
 80119d4:	080133da 	.word	0x080133da
 80119d8:	0800f4ed 	.word	0x0800f4ed
 80119dc:	08011725 	.word	0x08011725

080119e0 <__sfputc_r>:
 80119e0:	6893      	ldr	r3, [r2, #8]
 80119e2:	b510      	push	{r4, lr}
 80119e4:	3b01      	subs	r3, #1
 80119e6:	6093      	str	r3, [r2, #8]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	da04      	bge.n	80119f6 <__sfputc_r+0x16>
 80119ec:	6994      	ldr	r4, [r2, #24]
 80119ee:	42a3      	cmp	r3, r4
 80119f0:	db07      	blt.n	8011a02 <__sfputc_r+0x22>
 80119f2:	290a      	cmp	r1, #10
 80119f4:	d005      	beq.n	8011a02 <__sfputc_r+0x22>
 80119f6:	6813      	ldr	r3, [r2, #0]
 80119f8:	1c58      	adds	r0, r3, #1
 80119fa:	6010      	str	r0, [r2, #0]
 80119fc:	7019      	strb	r1, [r3, #0]
 80119fe:	0008      	movs	r0, r1
 8011a00:	bd10      	pop	{r4, pc}
 8011a02:	f000 f9e2 	bl	8011dca <__swbuf_r>
 8011a06:	0001      	movs	r1, r0
 8011a08:	e7f9      	b.n	80119fe <__sfputc_r+0x1e>

08011a0a <__sfputs_r>:
 8011a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0c:	0006      	movs	r6, r0
 8011a0e:	000f      	movs	r7, r1
 8011a10:	0014      	movs	r4, r2
 8011a12:	18d5      	adds	r5, r2, r3
 8011a14:	42ac      	cmp	r4, r5
 8011a16:	d101      	bne.n	8011a1c <__sfputs_r+0x12>
 8011a18:	2000      	movs	r0, #0
 8011a1a:	e007      	b.n	8011a2c <__sfputs_r+0x22>
 8011a1c:	7821      	ldrb	r1, [r4, #0]
 8011a1e:	003a      	movs	r2, r7
 8011a20:	0030      	movs	r0, r6
 8011a22:	f7ff ffdd 	bl	80119e0 <__sfputc_r>
 8011a26:	3401      	adds	r4, #1
 8011a28:	1c43      	adds	r3, r0, #1
 8011a2a:	d1f3      	bne.n	8011a14 <__sfputs_r+0xa>
 8011a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a30 <_vfiprintf_r>:
 8011a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a32:	b0a1      	sub	sp, #132	@ 0x84
 8011a34:	000f      	movs	r7, r1
 8011a36:	0015      	movs	r5, r2
 8011a38:	001e      	movs	r6, r3
 8011a3a:	9003      	str	r0, [sp, #12]
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	d004      	beq.n	8011a4a <_vfiprintf_r+0x1a>
 8011a40:	6a03      	ldr	r3, [r0, #32]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d101      	bne.n	8011a4a <_vfiprintf_r+0x1a>
 8011a46:	f7fe f99d 	bl	800fd84 <__sinit>
 8011a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011a4c:	07db      	lsls	r3, r3, #31
 8011a4e:	d405      	bmi.n	8011a5c <_vfiprintf_r+0x2c>
 8011a50:	89bb      	ldrh	r3, [r7, #12]
 8011a52:	059b      	lsls	r3, r3, #22
 8011a54:	d402      	bmi.n	8011a5c <_vfiprintf_r+0x2c>
 8011a56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011a58:	f7fe fb2b 	bl	80100b2 <__retarget_lock_acquire_recursive>
 8011a5c:	89bb      	ldrh	r3, [r7, #12]
 8011a5e:	071b      	lsls	r3, r3, #28
 8011a60:	d502      	bpl.n	8011a68 <_vfiprintf_r+0x38>
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d113      	bne.n	8011a90 <_vfiprintf_r+0x60>
 8011a68:	0039      	movs	r1, r7
 8011a6a:	9803      	ldr	r0, [sp, #12]
 8011a6c:	f000 f9f0 	bl	8011e50 <__swsetup_r>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	d00d      	beq.n	8011a90 <_vfiprintf_r+0x60>
 8011a74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011a76:	07db      	lsls	r3, r3, #31
 8011a78:	d503      	bpl.n	8011a82 <_vfiprintf_r+0x52>
 8011a7a:	2001      	movs	r0, #1
 8011a7c:	4240      	negs	r0, r0
 8011a7e:	b021      	add	sp, #132	@ 0x84
 8011a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a82:	89bb      	ldrh	r3, [r7, #12]
 8011a84:	059b      	lsls	r3, r3, #22
 8011a86:	d4f8      	bmi.n	8011a7a <_vfiprintf_r+0x4a>
 8011a88:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011a8a:	f7fe fb13 	bl	80100b4 <__retarget_lock_release_recursive>
 8011a8e:	e7f4      	b.n	8011a7a <_vfiprintf_r+0x4a>
 8011a90:	2300      	movs	r3, #0
 8011a92:	ac08      	add	r4, sp, #32
 8011a94:	6163      	str	r3, [r4, #20]
 8011a96:	3320      	adds	r3, #32
 8011a98:	7663      	strb	r3, [r4, #25]
 8011a9a:	3310      	adds	r3, #16
 8011a9c:	76a3      	strb	r3, [r4, #26]
 8011a9e:	9607      	str	r6, [sp, #28]
 8011aa0:	002e      	movs	r6, r5
 8011aa2:	7833      	ldrb	r3, [r6, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d001      	beq.n	8011aac <_vfiprintf_r+0x7c>
 8011aa8:	2b25      	cmp	r3, #37	@ 0x25
 8011aaa:	d148      	bne.n	8011b3e <_vfiprintf_r+0x10e>
 8011aac:	1b73      	subs	r3, r6, r5
 8011aae:	9305      	str	r3, [sp, #20]
 8011ab0:	42ae      	cmp	r6, r5
 8011ab2:	d00b      	beq.n	8011acc <_vfiprintf_r+0x9c>
 8011ab4:	002a      	movs	r2, r5
 8011ab6:	0039      	movs	r1, r7
 8011ab8:	9803      	ldr	r0, [sp, #12]
 8011aba:	f7ff ffa6 	bl	8011a0a <__sfputs_r>
 8011abe:	3001      	adds	r0, #1
 8011ac0:	d100      	bne.n	8011ac4 <_vfiprintf_r+0x94>
 8011ac2:	e0ae      	b.n	8011c22 <_vfiprintf_r+0x1f2>
 8011ac4:	6963      	ldr	r3, [r4, #20]
 8011ac6:	9a05      	ldr	r2, [sp, #20]
 8011ac8:	189b      	adds	r3, r3, r2
 8011aca:	6163      	str	r3, [r4, #20]
 8011acc:	7833      	ldrb	r3, [r6, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d100      	bne.n	8011ad4 <_vfiprintf_r+0xa4>
 8011ad2:	e0a6      	b.n	8011c22 <_vfiprintf_r+0x1f2>
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	4252      	negs	r2, r2
 8011ada:	6062      	str	r2, [r4, #4]
 8011adc:	a904      	add	r1, sp, #16
 8011ade:	3254      	adds	r2, #84	@ 0x54
 8011ae0:	1852      	adds	r2, r2, r1
 8011ae2:	1c75      	adds	r5, r6, #1
 8011ae4:	6023      	str	r3, [r4, #0]
 8011ae6:	60e3      	str	r3, [r4, #12]
 8011ae8:	60a3      	str	r3, [r4, #8]
 8011aea:	7013      	strb	r3, [r2, #0]
 8011aec:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011aee:	4b59      	ldr	r3, [pc, #356]	@ (8011c54 <_vfiprintf_r+0x224>)
 8011af0:	2205      	movs	r2, #5
 8011af2:	0018      	movs	r0, r3
 8011af4:	7829      	ldrb	r1, [r5, #0]
 8011af6:	9305      	str	r3, [sp, #20]
 8011af8:	f7fe fadd 	bl	80100b6 <memchr>
 8011afc:	1c6e      	adds	r6, r5, #1
 8011afe:	2800      	cmp	r0, #0
 8011b00:	d11f      	bne.n	8011b42 <_vfiprintf_r+0x112>
 8011b02:	6822      	ldr	r2, [r4, #0]
 8011b04:	06d3      	lsls	r3, r2, #27
 8011b06:	d504      	bpl.n	8011b12 <_vfiprintf_r+0xe2>
 8011b08:	2353      	movs	r3, #83	@ 0x53
 8011b0a:	a904      	add	r1, sp, #16
 8011b0c:	185b      	adds	r3, r3, r1
 8011b0e:	2120      	movs	r1, #32
 8011b10:	7019      	strb	r1, [r3, #0]
 8011b12:	0713      	lsls	r3, r2, #28
 8011b14:	d504      	bpl.n	8011b20 <_vfiprintf_r+0xf0>
 8011b16:	2353      	movs	r3, #83	@ 0x53
 8011b18:	a904      	add	r1, sp, #16
 8011b1a:	185b      	adds	r3, r3, r1
 8011b1c:	212b      	movs	r1, #43	@ 0x2b
 8011b1e:	7019      	strb	r1, [r3, #0]
 8011b20:	782b      	ldrb	r3, [r5, #0]
 8011b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b24:	d016      	beq.n	8011b54 <_vfiprintf_r+0x124>
 8011b26:	002e      	movs	r6, r5
 8011b28:	2100      	movs	r1, #0
 8011b2a:	200a      	movs	r0, #10
 8011b2c:	68e3      	ldr	r3, [r4, #12]
 8011b2e:	7832      	ldrb	r2, [r6, #0]
 8011b30:	1c75      	adds	r5, r6, #1
 8011b32:	3a30      	subs	r2, #48	@ 0x30
 8011b34:	2a09      	cmp	r2, #9
 8011b36:	d950      	bls.n	8011bda <_vfiprintf_r+0x1aa>
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	d111      	bne.n	8011b60 <_vfiprintf_r+0x130>
 8011b3c:	e017      	b.n	8011b6e <_vfiprintf_r+0x13e>
 8011b3e:	3601      	adds	r6, #1
 8011b40:	e7af      	b.n	8011aa2 <_vfiprintf_r+0x72>
 8011b42:	9b05      	ldr	r3, [sp, #20]
 8011b44:	6822      	ldr	r2, [r4, #0]
 8011b46:	1ac0      	subs	r0, r0, r3
 8011b48:	2301      	movs	r3, #1
 8011b4a:	4083      	lsls	r3, r0
 8011b4c:	4313      	orrs	r3, r2
 8011b4e:	0035      	movs	r5, r6
 8011b50:	6023      	str	r3, [r4, #0]
 8011b52:	e7cc      	b.n	8011aee <_vfiprintf_r+0xbe>
 8011b54:	9b07      	ldr	r3, [sp, #28]
 8011b56:	1d19      	adds	r1, r3, #4
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	9107      	str	r1, [sp, #28]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	db01      	blt.n	8011b64 <_vfiprintf_r+0x134>
 8011b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b62:	e004      	b.n	8011b6e <_vfiprintf_r+0x13e>
 8011b64:	425b      	negs	r3, r3
 8011b66:	60e3      	str	r3, [r4, #12]
 8011b68:	2302      	movs	r3, #2
 8011b6a:	4313      	orrs	r3, r2
 8011b6c:	6023      	str	r3, [r4, #0]
 8011b6e:	7833      	ldrb	r3, [r6, #0]
 8011b70:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b72:	d10c      	bne.n	8011b8e <_vfiprintf_r+0x15e>
 8011b74:	7873      	ldrb	r3, [r6, #1]
 8011b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b78:	d134      	bne.n	8011be4 <_vfiprintf_r+0x1b4>
 8011b7a:	9b07      	ldr	r3, [sp, #28]
 8011b7c:	3602      	adds	r6, #2
 8011b7e:	1d1a      	adds	r2, r3, #4
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	9207      	str	r2, [sp, #28]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	da01      	bge.n	8011b8c <_vfiprintf_r+0x15c>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	425b      	negs	r3, r3
 8011b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b8e:	4d32      	ldr	r5, [pc, #200]	@ (8011c58 <_vfiprintf_r+0x228>)
 8011b90:	2203      	movs	r2, #3
 8011b92:	0028      	movs	r0, r5
 8011b94:	7831      	ldrb	r1, [r6, #0]
 8011b96:	f7fe fa8e 	bl	80100b6 <memchr>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	d006      	beq.n	8011bac <_vfiprintf_r+0x17c>
 8011b9e:	2340      	movs	r3, #64	@ 0x40
 8011ba0:	1b40      	subs	r0, r0, r5
 8011ba2:	4083      	lsls	r3, r0
 8011ba4:	6822      	ldr	r2, [r4, #0]
 8011ba6:	3601      	adds	r6, #1
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	6023      	str	r3, [r4, #0]
 8011bac:	7831      	ldrb	r1, [r6, #0]
 8011bae:	2206      	movs	r2, #6
 8011bb0:	482a      	ldr	r0, [pc, #168]	@ (8011c5c <_vfiprintf_r+0x22c>)
 8011bb2:	1c75      	adds	r5, r6, #1
 8011bb4:	7621      	strb	r1, [r4, #24]
 8011bb6:	f7fe fa7e 	bl	80100b6 <memchr>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	d040      	beq.n	8011c40 <_vfiprintf_r+0x210>
 8011bbe:	4b28      	ldr	r3, [pc, #160]	@ (8011c60 <_vfiprintf_r+0x230>)
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d122      	bne.n	8011c0a <_vfiprintf_r+0x1da>
 8011bc4:	2207      	movs	r2, #7
 8011bc6:	9b07      	ldr	r3, [sp, #28]
 8011bc8:	3307      	adds	r3, #7
 8011bca:	4393      	bics	r3, r2
 8011bcc:	3308      	adds	r3, #8
 8011bce:	9307      	str	r3, [sp, #28]
 8011bd0:	6963      	ldr	r3, [r4, #20]
 8011bd2:	9a04      	ldr	r2, [sp, #16]
 8011bd4:	189b      	adds	r3, r3, r2
 8011bd6:	6163      	str	r3, [r4, #20]
 8011bd8:	e762      	b.n	8011aa0 <_vfiprintf_r+0x70>
 8011bda:	4343      	muls	r3, r0
 8011bdc:	002e      	movs	r6, r5
 8011bde:	2101      	movs	r1, #1
 8011be0:	189b      	adds	r3, r3, r2
 8011be2:	e7a4      	b.n	8011b2e <_vfiprintf_r+0xfe>
 8011be4:	2300      	movs	r3, #0
 8011be6:	200a      	movs	r0, #10
 8011be8:	0019      	movs	r1, r3
 8011bea:	3601      	adds	r6, #1
 8011bec:	6063      	str	r3, [r4, #4]
 8011bee:	7832      	ldrb	r2, [r6, #0]
 8011bf0:	1c75      	adds	r5, r6, #1
 8011bf2:	3a30      	subs	r2, #48	@ 0x30
 8011bf4:	2a09      	cmp	r2, #9
 8011bf6:	d903      	bls.n	8011c00 <_vfiprintf_r+0x1d0>
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d0c8      	beq.n	8011b8e <_vfiprintf_r+0x15e>
 8011bfc:	9109      	str	r1, [sp, #36]	@ 0x24
 8011bfe:	e7c6      	b.n	8011b8e <_vfiprintf_r+0x15e>
 8011c00:	4341      	muls	r1, r0
 8011c02:	002e      	movs	r6, r5
 8011c04:	2301      	movs	r3, #1
 8011c06:	1889      	adds	r1, r1, r2
 8011c08:	e7f1      	b.n	8011bee <_vfiprintf_r+0x1be>
 8011c0a:	aa07      	add	r2, sp, #28
 8011c0c:	9200      	str	r2, [sp, #0]
 8011c0e:	0021      	movs	r1, r4
 8011c10:	003a      	movs	r2, r7
 8011c12:	4b14      	ldr	r3, [pc, #80]	@ (8011c64 <_vfiprintf_r+0x234>)
 8011c14:	9803      	ldr	r0, [sp, #12]
 8011c16:	f7fd fc69 	bl	800f4ec <_printf_float>
 8011c1a:	9004      	str	r0, [sp, #16]
 8011c1c:	9b04      	ldr	r3, [sp, #16]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	d1d6      	bne.n	8011bd0 <_vfiprintf_r+0x1a0>
 8011c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011c24:	07db      	lsls	r3, r3, #31
 8011c26:	d405      	bmi.n	8011c34 <_vfiprintf_r+0x204>
 8011c28:	89bb      	ldrh	r3, [r7, #12]
 8011c2a:	059b      	lsls	r3, r3, #22
 8011c2c:	d402      	bmi.n	8011c34 <_vfiprintf_r+0x204>
 8011c2e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011c30:	f7fe fa40 	bl	80100b4 <__retarget_lock_release_recursive>
 8011c34:	89bb      	ldrh	r3, [r7, #12]
 8011c36:	065b      	lsls	r3, r3, #25
 8011c38:	d500      	bpl.n	8011c3c <_vfiprintf_r+0x20c>
 8011c3a:	e71e      	b.n	8011a7a <_vfiprintf_r+0x4a>
 8011c3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011c3e:	e71e      	b.n	8011a7e <_vfiprintf_r+0x4e>
 8011c40:	aa07      	add	r2, sp, #28
 8011c42:	9200      	str	r2, [sp, #0]
 8011c44:	0021      	movs	r1, r4
 8011c46:	003a      	movs	r2, r7
 8011c48:	4b06      	ldr	r3, [pc, #24]	@ (8011c64 <_vfiprintf_r+0x234>)
 8011c4a:	9803      	ldr	r0, [sp, #12]
 8011c4c:	f7fd fefc 	bl	800fa48 <_printf_i>
 8011c50:	e7e3      	b.n	8011c1a <_vfiprintf_r+0x1ea>
 8011c52:	46c0      	nop			@ (mov r8, r8)
 8011c54:	080133d0 	.word	0x080133d0
 8011c58:	080133d6 	.word	0x080133d6
 8011c5c:	080133da 	.word	0x080133da
 8011c60:	0800f4ed 	.word	0x0800f4ed
 8011c64:	08011a0b 	.word	0x08011a0b

08011c68 <__sflush_r>:
 8011c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c6a:	220c      	movs	r2, #12
 8011c6c:	5e8b      	ldrsh	r3, [r1, r2]
 8011c6e:	0005      	movs	r5, r0
 8011c70:	000c      	movs	r4, r1
 8011c72:	071a      	lsls	r2, r3, #28
 8011c74:	d456      	bmi.n	8011d24 <__sflush_r+0xbc>
 8011c76:	684a      	ldr	r2, [r1, #4]
 8011c78:	2a00      	cmp	r2, #0
 8011c7a:	dc02      	bgt.n	8011c82 <__sflush_r+0x1a>
 8011c7c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8011c7e:	2a00      	cmp	r2, #0
 8011c80:	dd4e      	ble.n	8011d20 <__sflush_r+0xb8>
 8011c82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011c84:	2f00      	cmp	r7, #0
 8011c86:	d04b      	beq.n	8011d20 <__sflush_r+0xb8>
 8011c88:	2200      	movs	r2, #0
 8011c8a:	2080      	movs	r0, #128	@ 0x80
 8011c8c:	682e      	ldr	r6, [r5, #0]
 8011c8e:	602a      	str	r2, [r5, #0]
 8011c90:	001a      	movs	r2, r3
 8011c92:	0140      	lsls	r0, r0, #5
 8011c94:	6a21      	ldr	r1, [r4, #32]
 8011c96:	4002      	ands	r2, r0
 8011c98:	4203      	tst	r3, r0
 8011c9a:	d033      	beq.n	8011d04 <__sflush_r+0x9c>
 8011c9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c9e:	89a3      	ldrh	r3, [r4, #12]
 8011ca0:	075b      	lsls	r3, r3, #29
 8011ca2:	d506      	bpl.n	8011cb2 <__sflush_r+0x4a>
 8011ca4:	6863      	ldr	r3, [r4, #4]
 8011ca6:	1ad2      	subs	r2, r2, r3
 8011ca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d001      	beq.n	8011cb2 <__sflush_r+0x4a>
 8011cae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011cb0:	1ad2      	subs	r2, r2, r3
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	0028      	movs	r0, r5
 8011cb6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011cb8:	6a21      	ldr	r1, [r4, #32]
 8011cba:	47b8      	blx	r7
 8011cbc:	89a2      	ldrh	r2, [r4, #12]
 8011cbe:	1c43      	adds	r3, r0, #1
 8011cc0:	d106      	bne.n	8011cd0 <__sflush_r+0x68>
 8011cc2:	6829      	ldr	r1, [r5, #0]
 8011cc4:	291d      	cmp	r1, #29
 8011cc6:	d846      	bhi.n	8011d56 <__sflush_r+0xee>
 8011cc8:	4b29      	ldr	r3, [pc, #164]	@ (8011d70 <__sflush_r+0x108>)
 8011cca:	410b      	asrs	r3, r1
 8011ccc:	07db      	lsls	r3, r3, #31
 8011cce:	d442      	bmi.n	8011d56 <__sflush_r+0xee>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	6063      	str	r3, [r4, #4]
 8011cd4:	6923      	ldr	r3, [r4, #16]
 8011cd6:	6023      	str	r3, [r4, #0]
 8011cd8:	04d2      	lsls	r2, r2, #19
 8011cda:	d505      	bpl.n	8011ce8 <__sflush_r+0x80>
 8011cdc:	1c43      	adds	r3, r0, #1
 8011cde:	d102      	bne.n	8011ce6 <__sflush_r+0x7e>
 8011ce0:	682b      	ldr	r3, [r5, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d100      	bne.n	8011ce8 <__sflush_r+0x80>
 8011ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cea:	602e      	str	r6, [r5, #0]
 8011cec:	2900      	cmp	r1, #0
 8011cee:	d017      	beq.n	8011d20 <__sflush_r+0xb8>
 8011cf0:	0023      	movs	r3, r4
 8011cf2:	3344      	adds	r3, #68	@ 0x44
 8011cf4:	4299      	cmp	r1, r3
 8011cf6:	d002      	beq.n	8011cfe <__sflush_r+0x96>
 8011cf8:	0028      	movs	r0, r5
 8011cfa:	f7ff f869 	bl	8010dd0 <_free_r>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d02:	e00d      	b.n	8011d20 <__sflush_r+0xb8>
 8011d04:	2301      	movs	r3, #1
 8011d06:	0028      	movs	r0, r5
 8011d08:	47b8      	blx	r7
 8011d0a:	0002      	movs	r2, r0
 8011d0c:	1c43      	adds	r3, r0, #1
 8011d0e:	d1c6      	bne.n	8011c9e <__sflush_r+0x36>
 8011d10:	682b      	ldr	r3, [r5, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d0c3      	beq.n	8011c9e <__sflush_r+0x36>
 8011d16:	2b1d      	cmp	r3, #29
 8011d18:	d001      	beq.n	8011d1e <__sflush_r+0xb6>
 8011d1a:	2b16      	cmp	r3, #22
 8011d1c:	d11a      	bne.n	8011d54 <__sflush_r+0xec>
 8011d1e:	602e      	str	r6, [r5, #0]
 8011d20:	2000      	movs	r0, #0
 8011d22:	e01e      	b.n	8011d62 <__sflush_r+0xfa>
 8011d24:	690e      	ldr	r6, [r1, #16]
 8011d26:	2e00      	cmp	r6, #0
 8011d28:	d0fa      	beq.n	8011d20 <__sflush_r+0xb8>
 8011d2a:	680f      	ldr	r7, [r1, #0]
 8011d2c:	600e      	str	r6, [r1, #0]
 8011d2e:	1bba      	subs	r2, r7, r6
 8011d30:	9201      	str	r2, [sp, #4]
 8011d32:	2200      	movs	r2, #0
 8011d34:	079b      	lsls	r3, r3, #30
 8011d36:	d100      	bne.n	8011d3a <__sflush_r+0xd2>
 8011d38:	694a      	ldr	r2, [r1, #20]
 8011d3a:	60a2      	str	r2, [r4, #8]
 8011d3c:	9b01      	ldr	r3, [sp, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	ddee      	ble.n	8011d20 <__sflush_r+0xb8>
 8011d42:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011d44:	0032      	movs	r2, r6
 8011d46:	001f      	movs	r7, r3
 8011d48:	0028      	movs	r0, r5
 8011d4a:	9b01      	ldr	r3, [sp, #4]
 8011d4c:	6a21      	ldr	r1, [r4, #32]
 8011d4e:	47b8      	blx	r7
 8011d50:	2800      	cmp	r0, #0
 8011d52:	dc07      	bgt.n	8011d64 <__sflush_r+0xfc>
 8011d54:	89a2      	ldrh	r2, [r4, #12]
 8011d56:	2340      	movs	r3, #64	@ 0x40
 8011d58:	2001      	movs	r0, #1
 8011d5a:	4313      	orrs	r3, r2
 8011d5c:	b21b      	sxth	r3, r3
 8011d5e:	81a3      	strh	r3, [r4, #12]
 8011d60:	4240      	negs	r0, r0
 8011d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011d64:	9b01      	ldr	r3, [sp, #4]
 8011d66:	1836      	adds	r6, r6, r0
 8011d68:	1a1b      	subs	r3, r3, r0
 8011d6a:	9301      	str	r3, [sp, #4]
 8011d6c:	e7e6      	b.n	8011d3c <__sflush_r+0xd4>
 8011d6e:	46c0      	nop			@ (mov r8, r8)
 8011d70:	dfbffffe 	.word	0xdfbffffe

08011d74 <_fflush_r>:
 8011d74:	690b      	ldr	r3, [r1, #16]
 8011d76:	b570      	push	{r4, r5, r6, lr}
 8011d78:	0005      	movs	r5, r0
 8011d7a:	000c      	movs	r4, r1
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d102      	bne.n	8011d86 <_fflush_r+0x12>
 8011d80:	2500      	movs	r5, #0
 8011d82:	0028      	movs	r0, r5
 8011d84:	bd70      	pop	{r4, r5, r6, pc}
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d004      	beq.n	8011d94 <_fflush_r+0x20>
 8011d8a:	6a03      	ldr	r3, [r0, #32]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d101      	bne.n	8011d94 <_fflush_r+0x20>
 8011d90:	f7fd fff8 	bl	800fd84 <__sinit>
 8011d94:	220c      	movs	r2, #12
 8011d96:	5ea3      	ldrsh	r3, [r4, r2]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d0f1      	beq.n	8011d80 <_fflush_r+0xc>
 8011d9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011d9e:	07d2      	lsls	r2, r2, #31
 8011da0:	d404      	bmi.n	8011dac <_fflush_r+0x38>
 8011da2:	059b      	lsls	r3, r3, #22
 8011da4:	d402      	bmi.n	8011dac <_fflush_r+0x38>
 8011da6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011da8:	f7fe f983 	bl	80100b2 <__retarget_lock_acquire_recursive>
 8011dac:	0028      	movs	r0, r5
 8011dae:	0021      	movs	r1, r4
 8011db0:	f7ff ff5a 	bl	8011c68 <__sflush_r>
 8011db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011db6:	0005      	movs	r5, r0
 8011db8:	07db      	lsls	r3, r3, #31
 8011dba:	d4e2      	bmi.n	8011d82 <_fflush_r+0xe>
 8011dbc:	89a3      	ldrh	r3, [r4, #12]
 8011dbe:	059b      	lsls	r3, r3, #22
 8011dc0:	d4df      	bmi.n	8011d82 <_fflush_r+0xe>
 8011dc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dc4:	f7fe f976 	bl	80100b4 <__retarget_lock_release_recursive>
 8011dc8:	e7db      	b.n	8011d82 <_fflush_r+0xe>

08011dca <__swbuf_r>:
 8011dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dcc:	0006      	movs	r6, r0
 8011dce:	000d      	movs	r5, r1
 8011dd0:	0014      	movs	r4, r2
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	d004      	beq.n	8011de0 <__swbuf_r+0x16>
 8011dd6:	6a03      	ldr	r3, [r0, #32]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d101      	bne.n	8011de0 <__swbuf_r+0x16>
 8011ddc:	f7fd ffd2 	bl	800fd84 <__sinit>
 8011de0:	69a3      	ldr	r3, [r4, #24]
 8011de2:	60a3      	str	r3, [r4, #8]
 8011de4:	89a3      	ldrh	r3, [r4, #12]
 8011de6:	071b      	lsls	r3, r3, #28
 8011de8:	d502      	bpl.n	8011df0 <__swbuf_r+0x26>
 8011dea:	6923      	ldr	r3, [r4, #16]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d109      	bne.n	8011e04 <__swbuf_r+0x3a>
 8011df0:	0021      	movs	r1, r4
 8011df2:	0030      	movs	r0, r6
 8011df4:	f000 f82c 	bl	8011e50 <__swsetup_r>
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	d003      	beq.n	8011e04 <__swbuf_r+0x3a>
 8011dfc:	2501      	movs	r5, #1
 8011dfe:	426d      	negs	r5, r5
 8011e00:	0028      	movs	r0, r5
 8011e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e04:	6923      	ldr	r3, [r4, #16]
 8011e06:	6820      	ldr	r0, [r4, #0]
 8011e08:	b2ef      	uxtb	r7, r5
 8011e0a:	1ac0      	subs	r0, r0, r3
 8011e0c:	6963      	ldr	r3, [r4, #20]
 8011e0e:	b2ed      	uxtb	r5, r5
 8011e10:	4283      	cmp	r3, r0
 8011e12:	dc05      	bgt.n	8011e20 <__swbuf_r+0x56>
 8011e14:	0021      	movs	r1, r4
 8011e16:	0030      	movs	r0, r6
 8011e18:	f7ff ffac 	bl	8011d74 <_fflush_r>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	d1ed      	bne.n	8011dfc <__swbuf_r+0x32>
 8011e20:	68a3      	ldr	r3, [r4, #8]
 8011e22:	3001      	adds	r0, #1
 8011e24:	3b01      	subs	r3, #1
 8011e26:	60a3      	str	r3, [r4, #8]
 8011e28:	6823      	ldr	r3, [r4, #0]
 8011e2a:	1c5a      	adds	r2, r3, #1
 8011e2c:	6022      	str	r2, [r4, #0]
 8011e2e:	701f      	strb	r7, [r3, #0]
 8011e30:	6963      	ldr	r3, [r4, #20]
 8011e32:	4283      	cmp	r3, r0
 8011e34:	d004      	beq.n	8011e40 <__swbuf_r+0x76>
 8011e36:	89a3      	ldrh	r3, [r4, #12]
 8011e38:	07db      	lsls	r3, r3, #31
 8011e3a:	d5e1      	bpl.n	8011e00 <__swbuf_r+0x36>
 8011e3c:	2d0a      	cmp	r5, #10
 8011e3e:	d1df      	bne.n	8011e00 <__swbuf_r+0x36>
 8011e40:	0021      	movs	r1, r4
 8011e42:	0030      	movs	r0, r6
 8011e44:	f7ff ff96 	bl	8011d74 <_fflush_r>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	d0d9      	beq.n	8011e00 <__swbuf_r+0x36>
 8011e4c:	e7d6      	b.n	8011dfc <__swbuf_r+0x32>
	...

08011e50 <__swsetup_r>:
 8011e50:	4b2d      	ldr	r3, [pc, #180]	@ (8011f08 <__swsetup_r+0xb8>)
 8011e52:	b570      	push	{r4, r5, r6, lr}
 8011e54:	0005      	movs	r5, r0
 8011e56:	6818      	ldr	r0, [r3, #0]
 8011e58:	000c      	movs	r4, r1
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	d004      	beq.n	8011e68 <__swsetup_r+0x18>
 8011e5e:	6a03      	ldr	r3, [r0, #32]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d101      	bne.n	8011e68 <__swsetup_r+0x18>
 8011e64:	f7fd ff8e 	bl	800fd84 <__sinit>
 8011e68:	230c      	movs	r3, #12
 8011e6a:	5ee2      	ldrsh	r2, [r4, r3]
 8011e6c:	0713      	lsls	r3, r2, #28
 8011e6e:	d423      	bmi.n	8011eb8 <__swsetup_r+0x68>
 8011e70:	06d3      	lsls	r3, r2, #27
 8011e72:	d407      	bmi.n	8011e84 <__swsetup_r+0x34>
 8011e74:	2309      	movs	r3, #9
 8011e76:	602b      	str	r3, [r5, #0]
 8011e78:	2340      	movs	r3, #64	@ 0x40
 8011e7a:	2001      	movs	r0, #1
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	81a3      	strh	r3, [r4, #12]
 8011e80:	4240      	negs	r0, r0
 8011e82:	e03a      	b.n	8011efa <__swsetup_r+0xaa>
 8011e84:	0752      	lsls	r2, r2, #29
 8011e86:	d513      	bpl.n	8011eb0 <__swsetup_r+0x60>
 8011e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e8a:	2900      	cmp	r1, #0
 8011e8c:	d008      	beq.n	8011ea0 <__swsetup_r+0x50>
 8011e8e:	0023      	movs	r3, r4
 8011e90:	3344      	adds	r3, #68	@ 0x44
 8011e92:	4299      	cmp	r1, r3
 8011e94:	d002      	beq.n	8011e9c <__swsetup_r+0x4c>
 8011e96:	0028      	movs	r0, r5
 8011e98:	f7fe ff9a 	bl	8010dd0 <_free_r>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ea0:	2224      	movs	r2, #36	@ 0x24
 8011ea2:	89a3      	ldrh	r3, [r4, #12]
 8011ea4:	4393      	bics	r3, r2
 8011ea6:	81a3      	strh	r3, [r4, #12]
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	6063      	str	r3, [r4, #4]
 8011eac:	6923      	ldr	r3, [r4, #16]
 8011eae:	6023      	str	r3, [r4, #0]
 8011eb0:	2308      	movs	r3, #8
 8011eb2:	89a2      	ldrh	r2, [r4, #12]
 8011eb4:	4313      	orrs	r3, r2
 8011eb6:	81a3      	strh	r3, [r4, #12]
 8011eb8:	6923      	ldr	r3, [r4, #16]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d10b      	bne.n	8011ed6 <__swsetup_r+0x86>
 8011ebe:	21a0      	movs	r1, #160	@ 0xa0
 8011ec0:	2280      	movs	r2, #128	@ 0x80
 8011ec2:	89a3      	ldrh	r3, [r4, #12]
 8011ec4:	0089      	lsls	r1, r1, #2
 8011ec6:	0092      	lsls	r2, r2, #2
 8011ec8:	400b      	ands	r3, r1
 8011eca:	4293      	cmp	r3, r2
 8011ecc:	d003      	beq.n	8011ed6 <__swsetup_r+0x86>
 8011ece:	0021      	movs	r1, r4
 8011ed0:	0028      	movs	r0, r5
 8011ed2:	f000 f91f 	bl	8012114 <__smakebuf_r>
 8011ed6:	230c      	movs	r3, #12
 8011ed8:	5ee2      	ldrsh	r2, [r4, r3]
 8011eda:	2101      	movs	r1, #1
 8011edc:	0013      	movs	r3, r2
 8011ede:	400b      	ands	r3, r1
 8011ee0:	420a      	tst	r2, r1
 8011ee2:	d00b      	beq.n	8011efc <__swsetup_r+0xac>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	60a3      	str	r3, [r4, #8]
 8011ee8:	6963      	ldr	r3, [r4, #20]
 8011eea:	425b      	negs	r3, r3
 8011eec:	61a3      	str	r3, [r4, #24]
 8011eee:	2000      	movs	r0, #0
 8011ef0:	6923      	ldr	r3, [r4, #16]
 8011ef2:	4283      	cmp	r3, r0
 8011ef4:	d101      	bne.n	8011efa <__swsetup_r+0xaa>
 8011ef6:	0613      	lsls	r3, r2, #24
 8011ef8:	d4be      	bmi.n	8011e78 <__swsetup_r+0x28>
 8011efa:	bd70      	pop	{r4, r5, r6, pc}
 8011efc:	0791      	lsls	r1, r2, #30
 8011efe:	d400      	bmi.n	8011f02 <__swsetup_r+0xb2>
 8011f00:	6963      	ldr	r3, [r4, #20]
 8011f02:	60a3      	str	r3, [r4, #8]
 8011f04:	e7f3      	b.n	8011eee <__swsetup_r+0x9e>
 8011f06:	46c0      	nop			@ (mov r8, r8)
 8011f08:	20000158 	.word	0x20000158

08011f0c <memmove>:
 8011f0c:	b510      	push	{r4, lr}
 8011f0e:	4288      	cmp	r0, r1
 8011f10:	d806      	bhi.n	8011f20 <memmove+0x14>
 8011f12:	2300      	movs	r3, #0
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d008      	beq.n	8011f2a <memmove+0x1e>
 8011f18:	5ccc      	ldrb	r4, [r1, r3]
 8011f1a:	54c4      	strb	r4, [r0, r3]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	e7f9      	b.n	8011f14 <memmove+0x8>
 8011f20:	188b      	adds	r3, r1, r2
 8011f22:	4298      	cmp	r0, r3
 8011f24:	d2f5      	bcs.n	8011f12 <memmove+0x6>
 8011f26:	3a01      	subs	r2, #1
 8011f28:	d200      	bcs.n	8011f2c <memmove+0x20>
 8011f2a:	bd10      	pop	{r4, pc}
 8011f2c:	5c8b      	ldrb	r3, [r1, r2]
 8011f2e:	5483      	strb	r3, [r0, r2]
 8011f30:	e7f9      	b.n	8011f26 <memmove+0x1a>
	...

08011f34 <_sbrk_r>:
 8011f34:	2300      	movs	r3, #0
 8011f36:	b570      	push	{r4, r5, r6, lr}
 8011f38:	4d06      	ldr	r5, [pc, #24]	@ (8011f54 <_sbrk_r+0x20>)
 8011f3a:	0004      	movs	r4, r0
 8011f3c:	0008      	movs	r0, r1
 8011f3e:	602b      	str	r3, [r5, #0]
 8011f40:	f7f5 fc64 	bl	800780c <_sbrk>
 8011f44:	1c43      	adds	r3, r0, #1
 8011f46:	d103      	bne.n	8011f50 <_sbrk_r+0x1c>
 8011f48:	682b      	ldr	r3, [r5, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d000      	beq.n	8011f50 <_sbrk_r+0x1c>
 8011f4e:	6023      	str	r3, [r4, #0]
 8011f50:	bd70      	pop	{r4, r5, r6, pc}
 8011f52:	46c0      	nop			@ (mov r8, r8)
 8011f54:	20001f0c 	.word	0x20001f0c

08011f58 <memcpy>:
 8011f58:	2300      	movs	r3, #0
 8011f5a:	b510      	push	{r4, lr}
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d100      	bne.n	8011f62 <memcpy+0xa>
 8011f60:	bd10      	pop	{r4, pc}
 8011f62:	5ccc      	ldrb	r4, [r1, r3]
 8011f64:	54c4      	strb	r4, [r0, r3]
 8011f66:	3301      	adds	r3, #1
 8011f68:	e7f8      	b.n	8011f5c <memcpy+0x4>
	...

08011f6c <__assert_func>:
 8011f6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011f6e:	0014      	movs	r4, r2
 8011f70:	001a      	movs	r2, r3
 8011f72:	4b09      	ldr	r3, [pc, #36]	@ (8011f98 <__assert_func+0x2c>)
 8011f74:	0005      	movs	r5, r0
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	000e      	movs	r6, r1
 8011f7a:	68d8      	ldr	r0, [r3, #12]
 8011f7c:	4b07      	ldr	r3, [pc, #28]	@ (8011f9c <__assert_func+0x30>)
 8011f7e:	2c00      	cmp	r4, #0
 8011f80:	d101      	bne.n	8011f86 <__assert_func+0x1a>
 8011f82:	4b07      	ldr	r3, [pc, #28]	@ (8011fa0 <__assert_func+0x34>)
 8011f84:	001c      	movs	r4, r3
 8011f86:	4907      	ldr	r1, [pc, #28]	@ (8011fa4 <__assert_func+0x38>)
 8011f88:	9301      	str	r3, [sp, #4]
 8011f8a:	9402      	str	r4, [sp, #8]
 8011f8c:	002b      	movs	r3, r5
 8011f8e:	9600      	str	r6, [sp, #0]
 8011f90:	f000 f886 	bl	80120a0 <fiprintf>
 8011f94:	f000 f924 	bl	80121e0 <abort>
 8011f98:	20000158 	.word	0x20000158
 8011f9c:	080133eb 	.word	0x080133eb
 8011fa0:	08013426 	.word	0x08013426
 8011fa4:	080133f8 	.word	0x080133f8

08011fa8 <_calloc_r>:
 8011fa8:	b570      	push	{r4, r5, r6, lr}
 8011faa:	0c0b      	lsrs	r3, r1, #16
 8011fac:	0c15      	lsrs	r5, r2, #16
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d11e      	bne.n	8011ff0 <_calloc_r+0x48>
 8011fb2:	2d00      	cmp	r5, #0
 8011fb4:	d10c      	bne.n	8011fd0 <_calloc_r+0x28>
 8011fb6:	b289      	uxth	r1, r1
 8011fb8:	b294      	uxth	r4, r2
 8011fba:	434c      	muls	r4, r1
 8011fbc:	0021      	movs	r1, r4
 8011fbe:	f7fe ff7d 	bl	8010ebc <_malloc_r>
 8011fc2:	1e05      	subs	r5, r0, #0
 8011fc4:	d01a      	beq.n	8011ffc <_calloc_r+0x54>
 8011fc6:	0022      	movs	r2, r4
 8011fc8:	2100      	movs	r1, #0
 8011fca:	f7fd ffc3 	bl	800ff54 <memset>
 8011fce:	e016      	b.n	8011ffe <_calloc_r+0x56>
 8011fd0:	1c2b      	adds	r3, r5, #0
 8011fd2:	1c0c      	adds	r4, r1, #0
 8011fd4:	b289      	uxth	r1, r1
 8011fd6:	b292      	uxth	r2, r2
 8011fd8:	434a      	muls	r2, r1
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	b2a1      	uxth	r1, r4
 8011fde:	4359      	muls	r1, r3
 8011fe0:	0c14      	lsrs	r4, r2, #16
 8011fe2:	190c      	adds	r4, r1, r4
 8011fe4:	0c23      	lsrs	r3, r4, #16
 8011fe6:	d107      	bne.n	8011ff8 <_calloc_r+0x50>
 8011fe8:	0424      	lsls	r4, r4, #16
 8011fea:	b292      	uxth	r2, r2
 8011fec:	4314      	orrs	r4, r2
 8011fee:	e7e5      	b.n	8011fbc <_calloc_r+0x14>
 8011ff0:	2d00      	cmp	r5, #0
 8011ff2:	d101      	bne.n	8011ff8 <_calloc_r+0x50>
 8011ff4:	1c14      	adds	r4, r2, #0
 8011ff6:	e7ed      	b.n	8011fd4 <_calloc_r+0x2c>
 8011ff8:	230c      	movs	r3, #12
 8011ffa:	6003      	str	r3, [r0, #0]
 8011ffc:	2500      	movs	r5, #0
 8011ffe:	0028      	movs	r0, r5
 8012000:	bd70      	pop	{r4, r5, r6, pc}

08012002 <__ascii_mbtowc>:
 8012002:	b082      	sub	sp, #8
 8012004:	2900      	cmp	r1, #0
 8012006:	d100      	bne.n	801200a <__ascii_mbtowc+0x8>
 8012008:	a901      	add	r1, sp, #4
 801200a:	1e10      	subs	r0, r2, #0
 801200c:	d006      	beq.n	801201c <__ascii_mbtowc+0x1a>
 801200e:	2b00      	cmp	r3, #0
 8012010:	d006      	beq.n	8012020 <__ascii_mbtowc+0x1e>
 8012012:	7813      	ldrb	r3, [r2, #0]
 8012014:	600b      	str	r3, [r1, #0]
 8012016:	7810      	ldrb	r0, [r2, #0]
 8012018:	1e43      	subs	r3, r0, #1
 801201a:	4198      	sbcs	r0, r3
 801201c:	b002      	add	sp, #8
 801201e:	4770      	bx	lr
 8012020:	2002      	movs	r0, #2
 8012022:	4240      	negs	r0, r0
 8012024:	e7fa      	b.n	801201c <__ascii_mbtowc+0x1a>

08012026 <_realloc_r>:
 8012026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012028:	0006      	movs	r6, r0
 801202a:	000c      	movs	r4, r1
 801202c:	0015      	movs	r5, r2
 801202e:	2900      	cmp	r1, #0
 8012030:	d105      	bne.n	801203e <_realloc_r+0x18>
 8012032:	0011      	movs	r1, r2
 8012034:	f7fe ff42 	bl	8010ebc <_malloc_r>
 8012038:	0004      	movs	r4, r0
 801203a:	0020      	movs	r0, r4
 801203c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801203e:	2a00      	cmp	r2, #0
 8012040:	d103      	bne.n	801204a <_realloc_r+0x24>
 8012042:	f7fe fec5 	bl	8010dd0 <_free_r>
 8012046:	2400      	movs	r4, #0
 8012048:	e7f7      	b.n	801203a <_realloc_r+0x14>
 801204a:	f000 f8d0 	bl	80121ee <_malloc_usable_size_r>
 801204e:	0007      	movs	r7, r0
 8012050:	4285      	cmp	r5, r0
 8012052:	d802      	bhi.n	801205a <_realloc_r+0x34>
 8012054:	0843      	lsrs	r3, r0, #1
 8012056:	42ab      	cmp	r3, r5
 8012058:	d3ef      	bcc.n	801203a <_realloc_r+0x14>
 801205a:	0029      	movs	r1, r5
 801205c:	0030      	movs	r0, r6
 801205e:	f7fe ff2d 	bl	8010ebc <_malloc_r>
 8012062:	9001      	str	r0, [sp, #4]
 8012064:	2800      	cmp	r0, #0
 8012066:	d0ee      	beq.n	8012046 <_realloc_r+0x20>
 8012068:	002a      	movs	r2, r5
 801206a:	42bd      	cmp	r5, r7
 801206c:	d900      	bls.n	8012070 <_realloc_r+0x4a>
 801206e:	003a      	movs	r2, r7
 8012070:	0021      	movs	r1, r4
 8012072:	9801      	ldr	r0, [sp, #4]
 8012074:	f7ff ff70 	bl	8011f58 <memcpy>
 8012078:	0021      	movs	r1, r4
 801207a:	0030      	movs	r0, r6
 801207c:	f7fe fea8 	bl	8010dd0 <_free_r>
 8012080:	9c01      	ldr	r4, [sp, #4]
 8012082:	e7da      	b.n	801203a <_realloc_r+0x14>

08012084 <__ascii_wctomb>:
 8012084:	0003      	movs	r3, r0
 8012086:	1e08      	subs	r0, r1, #0
 8012088:	d005      	beq.n	8012096 <__ascii_wctomb+0x12>
 801208a:	2aff      	cmp	r2, #255	@ 0xff
 801208c:	d904      	bls.n	8012098 <__ascii_wctomb+0x14>
 801208e:	228a      	movs	r2, #138	@ 0x8a
 8012090:	2001      	movs	r0, #1
 8012092:	601a      	str	r2, [r3, #0]
 8012094:	4240      	negs	r0, r0
 8012096:	4770      	bx	lr
 8012098:	2001      	movs	r0, #1
 801209a:	700a      	strb	r2, [r1, #0]
 801209c:	e7fb      	b.n	8012096 <__ascii_wctomb+0x12>
	...

080120a0 <fiprintf>:
 80120a0:	b40e      	push	{r1, r2, r3}
 80120a2:	b517      	push	{r0, r1, r2, r4, lr}
 80120a4:	4c05      	ldr	r4, [pc, #20]	@ (80120bc <fiprintf+0x1c>)
 80120a6:	ab05      	add	r3, sp, #20
 80120a8:	cb04      	ldmia	r3!, {r2}
 80120aa:	0001      	movs	r1, r0
 80120ac:	6820      	ldr	r0, [r4, #0]
 80120ae:	9301      	str	r3, [sp, #4]
 80120b0:	f7ff fcbe 	bl	8011a30 <_vfiprintf_r>
 80120b4:	bc1e      	pop	{r1, r2, r3, r4}
 80120b6:	bc08      	pop	{r3}
 80120b8:	b003      	add	sp, #12
 80120ba:	4718      	bx	r3
 80120bc:	20000158 	.word	0x20000158

080120c0 <__swhatbuf_r>:
 80120c0:	b570      	push	{r4, r5, r6, lr}
 80120c2:	000e      	movs	r6, r1
 80120c4:	001d      	movs	r5, r3
 80120c6:	230e      	movs	r3, #14
 80120c8:	5ec9      	ldrsh	r1, [r1, r3]
 80120ca:	0014      	movs	r4, r2
 80120cc:	b096      	sub	sp, #88	@ 0x58
 80120ce:	2900      	cmp	r1, #0
 80120d0:	da0c      	bge.n	80120ec <__swhatbuf_r+0x2c>
 80120d2:	89b2      	ldrh	r2, [r6, #12]
 80120d4:	2380      	movs	r3, #128	@ 0x80
 80120d6:	0011      	movs	r1, r2
 80120d8:	4019      	ands	r1, r3
 80120da:	421a      	tst	r2, r3
 80120dc:	d114      	bne.n	8012108 <__swhatbuf_r+0x48>
 80120de:	2380      	movs	r3, #128	@ 0x80
 80120e0:	00db      	lsls	r3, r3, #3
 80120e2:	2000      	movs	r0, #0
 80120e4:	6029      	str	r1, [r5, #0]
 80120e6:	6023      	str	r3, [r4, #0]
 80120e8:	b016      	add	sp, #88	@ 0x58
 80120ea:	bd70      	pop	{r4, r5, r6, pc}
 80120ec:	466a      	mov	r2, sp
 80120ee:	f000 f853 	bl	8012198 <_fstat_r>
 80120f2:	2800      	cmp	r0, #0
 80120f4:	dbed      	blt.n	80120d2 <__swhatbuf_r+0x12>
 80120f6:	23f0      	movs	r3, #240	@ 0xf0
 80120f8:	9901      	ldr	r1, [sp, #4]
 80120fa:	021b      	lsls	r3, r3, #8
 80120fc:	4019      	ands	r1, r3
 80120fe:	4b04      	ldr	r3, [pc, #16]	@ (8012110 <__swhatbuf_r+0x50>)
 8012100:	18c9      	adds	r1, r1, r3
 8012102:	424b      	negs	r3, r1
 8012104:	4159      	adcs	r1, r3
 8012106:	e7ea      	b.n	80120de <__swhatbuf_r+0x1e>
 8012108:	2100      	movs	r1, #0
 801210a:	2340      	movs	r3, #64	@ 0x40
 801210c:	e7e9      	b.n	80120e2 <__swhatbuf_r+0x22>
 801210e:	46c0      	nop			@ (mov r8, r8)
 8012110:	ffffe000 	.word	0xffffe000

08012114 <__smakebuf_r>:
 8012114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012116:	2602      	movs	r6, #2
 8012118:	898b      	ldrh	r3, [r1, #12]
 801211a:	0005      	movs	r5, r0
 801211c:	000c      	movs	r4, r1
 801211e:	b085      	sub	sp, #20
 8012120:	4233      	tst	r3, r6
 8012122:	d007      	beq.n	8012134 <__smakebuf_r+0x20>
 8012124:	0023      	movs	r3, r4
 8012126:	3347      	adds	r3, #71	@ 0x47
 8012128:	6023      	str	r3, [r4, #0]
 801212a:	6123      	str	r3, [r4, #16]
 801212c:	2301      	movs	r3, #1
 801212e:	6163      	str	r3, [r4, #20]
 8012130:	b005      	add	sp, #20
 8012132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012134:	ab03      	add	r3, sp, #12
 8012136:	aa02      	add	r2, sp, #8
 8012138:	f7ff ffc2 	bl	80120c0 <__swhatbuf_r>
 801213c:	9f02      	ldr	r7, [sp, #8]
 801213e:	9001      	str	r0, [sp, #4]
 8012140:	0039      	movs	r1, r7
 8012142:	0028      	movs	r0, r5
 8012144:	f7fe feba 	bl	8010ebc <_malloc_r>
 8012148:	2800      	cmp	r0, #0
 801214a:	d108      	bne.n	801215e <__smakebuf_r+0x4a>
 801214c:	220c      	movs	r2, #12
 801214e:	5ea3      	ldrsh	r3, [r4, r2]
 8012150:	059a      	lsls	r2, r3, #22
 8012152:	d4ed      	bmi.n	8012130 <__smakebuf_r+0x1c>
 8012154:	2203      	movs	r2, #3
 8012156:	4393      	bics	r3, r2
 8012158:	431e      	orrs	r6, r3
 801215a:	81a6      	strh	r6, [r4, #12]
 801215c:	e7e2      	b.n	8012124 <__smakebuf_r+0x10>
 801215e:	2380      	movs	r3, #128	@ 0x80
 8012160:	89a2      	ldrh	r2, [r4, #12]
 8012162:	6020      	str	r0, [r4, #0]
 8012164:	4313      	orrs	r3, r2
 8012166:	81a3      	strh	r3, [r4, #12]
 8012168:	9b03      	ldr	r3, [sp, #12]
 801216a:	6120      	str	r0, [r4, #16]
 801216c:	6167      	str	r7, [r4, #20]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00c      	beq.n	801218c <__smakebuf_r+0x78>
 8012172:	0028      	movs	r0, r5
 8012174:	230e      	movs	r3, #14
 8012176:	5ee1      	ldrsh	r1, [r4, r3]
 8012178:	f000 f820 	bl	80121bc <_isatty_r>
 801217c:	2800      	cmp	r0, #0
 801217e:	d005      	beq.n	801218c <__smakebuf_r+0x78>
 8012180:	2303      	movs	r3, #3
 8012182:	89a2      	ldrh	r2, [r4, #12]
 8012184:	439a      	bics	r2, r3
 8012186:	3b02      	subs	r3, #2
 8012188:	4313      	orrs	r3, r2
 801218a:	81a3      	strh	r3, [r4, #12]
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	9a01      	ldr	r2, [sp, #4]
 8012190:	4313      	orrs	r3, r2
 8012192:	81a3      	strh	r3, [r4, #12]
 8012194:	e7cc      	b.n	8012130 <__smakebuf_r+0x1c>
	...

08012198 <_fstat_r>:
 8012198:	2300      	movs	r3, #0
 801219a:	b570      	push	{r4, r5, r6, lr}
 801219c:	4d06      	ldr	r5, [pc, #24]	@ (80121b8 <_fstat_r+0x20>)
 801219e:	0004      	movs	r4, r0
 80121a0:	0008      	movs	r0, r1
 80121a2:	0011      	movs	r1, r2
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	f7f5 fb0f 	bl	80077c8 <_fstat>
 80121aa:	1c43      	adds	r3, r0, #1
 80121ac:	d103      	bne.n	80121b6 <_fstat_r+0x1e>
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d000      	beq.n	80121b6 <_fstat_r+0x1e>
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	bd70      	pop	{r4, r5, r6, pc}
 80121b8:	20001f0c 	.word	0x20001f0c

080121bc <_isatty_r>:
 80121bc:	2300      	movs	r3, #0
 80121be:	b570      	push	{r4, r5, r6, lr}
 80121c0:	4d06      	ldr	r5, [pc, #24]	@ (80121dc <_isatty_r+0x20>)
 80121c2:	0004      	movs	r4, r0
 80121c4:	0008      	movs	r0, r1
 80121c6:	602b      	str	r3, [r5, #0]
 80121c8:	f7f5 fb0c 	bl	80077e4 <_isatty>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d103      	bne.n	80121d8 <_isatty_r+0x1c>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d000      	beq.n	80121d8 <_isatty_r+0x1c>
 80121d6:	6023      	str	r3, [r4, #0]
 80121d8:	bd70      	pop	{r4, r5, r6, pc}
 80121da:	46c0      	nop			@ (mov r8, r8)
 80121dc:	20001f0c 	.word	0x20001f0c

080121e0 <abort>:
 80121e0:	2006      	movs	r0, #6
 80121e2:	b510      	push	{r4, lr}
 80121e4:	f000 f834 	bl	8012250 <raise>
 80121e8:	2001      	movs	r0, #1
 80121ea:	f7f5 fab9 	bl	8007760 <_exit>

080121ee <_malloc_usable_size_r>:
 80121ee:	1f0b      	subs	r3, r1, #4
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	1f18      	subs	r0, r3, #4
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	da01      	bge.n	80121fc <_malloc_usable_size_r+0xe>
 80121f8:	580b      	ldr	r3, [r1, r0]
 80121fa:	18c0      	adds	r0, r0, r3
 80121fc:	4770      	bx	lr

080121fe <_raise_r>:
 80121fe:	b570      	push	{r4, r5, r6, lr}
 8012200:	0004      	movs	r4, r0
 8012202:	000d      	movs	r5, r1
 8012204:	291f      	cmp	r1, #31
 8012206:	d904      	bls.n	8012212 <_raise_r+0x14>
 8012208:	2316      	movs	r3, #22
 801220a:	6003      	str	r3, [r0, #0]
 801220c:	2001      	movs	r0, #1
 801220e:	4240      	negs	r0, r0
 8012210:	bd70      	pop	{r4, r5, r6, pc}
 8012212:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012214:	2b00      	cmp	r3, #0
 8012216:	d004      	beq.n	8012222 <_raise_r+0x24>
 8012218:	008a      	lsls	r2, r1, #2
 801221a:	189b      	adds	r3, r3, r2
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	2a00      	cmp	r2, #0
 8012220:	d108      	bne.n	8012234 <_raise_r+0x36>
 8012222:	0020      	movs	r0, r4
 8012224:	f000 f830 	bl	8012288 <_getpid_r>
 8012228:	002a      	movs	r2, r5
 801222a:	0001      	movs	r1, r0
 801222c:	0020      	movs	r0, r4
 801222e:	f000 f819 	bl	8012264 <_kill_r>
 8012232:	e7ed      	b.n	8012210 <_raise_r+0x12>
 8012234:	2a01      	cmp	r2, #1
 8012236:	d009      	beq.n	801224c <_raise_r+0x4e>
 8012238:	1c51      	adds	r1, r2, #1
 801223a:	d103      	bne.n	8012244 <_raise_r+0x46>
 801223c:	2316      	movs	r3, #22
 801223e:	6003      	str	r3, [r0, #0]
 8012240:	2001      	movs	r0, #1
 8012242:	e7e5      	b.n	8012210 <_raise_r+0x12>
 8012244:	2100      	movs	r1, #0
 8012246:	0028      	movs	r0, r5
 8012248:	6019      	str	r1, [r3, #0]
 801224a:	4790      	blx	r2
 801224c:	2000      	movs	r0, #0
 801224e:	e7df      	b.n	8012210 <_raise_r+0x12>

08012250 <raise>:
 8012250:	b510      	push	{r4, lr}
 8012252:	4b03      	ldr	r3, [pc, #12]	@ (8012260 <raise+0x10>)
 8012254:	0001      	movs	r1, r0
 8012256:	6818      	ldr	r0, [r3, #0]
 8012258:	f7ff ffd1 	bl	80121fe <_raise_r>
 801225c:	bd10      	pop	{r4, pc}
 801225e:	46c0      	nop			@ (mov r8, r8)
 8012260:	20000158 	.word	0x20000158

08012264 <_kill_r>:
 8012264:	2300      	movs	r3, #0
 8012266:	b570      	push	{r4, r5, r6, lr}
 8012268:	4d06      	ldr	r5, [pc, #24]	@ (8012284 <_kill_r+0x20>)
 801226a:	0004      	movs	r4, r0
 801226c:	0008      	movs	r0, r1
 801226e:	0011      	movs	r1, r2
 8012270:	602b      	str	r3, [r5, #0]
 8012272:	f7f5 fa65 	bl	8007740 <_kill>
 8012276:	1c43      	adds	r3, r0, #1
 8012278:	d103      	bne.n	8012282 <_kill_r+0x1e>
 801227a:	682b      	ldr	r3, [r5, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d000      	beq.n	8012282 <_kill_r+0x1e>
 8012280:	6023      	str	r3, [r4, #0]
 8012282:	bd70      	pop	{r4, r5, r6, pc}
 8012284:	20001f0c 	.word	0x20001f0c

08012288 <_getpid_r>:
 8012288:	b510      	push	{r4, lr}
 801228a:	f7f5 fa53 	bl	8007734 <_getpid>
 801228e:	bd10      	pop	{r4, pc}

08012290 <expf>:
 8012290:	b570      	push	{r4, r5, r6, lr}
 8012292:	1c04      	adds	r4, r0, #0
 8012294:	f000 f8c2 	bl	801241c <__ieee754_expf>
 8012298:	1c05      	adds	r5, r0, #0
 801229a:	1c20      	adds	r0, r4, #0
 801229c:	f000 f83c 	bl	8012318 <finitef>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d00b      	beq.n	80122bc <expf+0x2c>
 80122a4:	490c      	ldr	r1, [pc, #48]	@ (80122d8 <expf+0x48>)
 80122a6:	1c20      	adds	r0, r4, #0
 80122a8:	f7ee f924 	bl	80004f4 <__aeabi_fcmpgt>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d007      	beq.n	80122c0 <expf+0x30>
 80122b0:	f7fd fed4 	bl	801005c <__errno>
 80122b4:	25ff      	movs	r5, #255	@ 0xff
 80122b6:	2322      	movs	r3, #34	@ 0x22
 80122b8:	05ed      	lsls	r5, r5, #23
 80122ba:	6003      	str	r3, [r0, #0]
 80122bc:	1c28      	adds	r0, r5, #0
 80122be:	bd70      	pop	{r4, r5, r6, pc}
 80122c0:	4906      	ldr	r1, [pc, #24]	@ (80122dc <expf+0x4c>)
 80122c2:	1c20      	adds	r0, r4, #0
 80122c4:	f7ee f902 	bl	80004cc <__aeabi_fcmplt>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d0f7      	beq.n	80122bc <expf+0x2c>
 80122cc:	f7fd fec6 	bl	801005c <__errno>
 80122d0:	2322      	movs	r3, #34	@ 0x22
 80122d2:	2500      	movs	r5, #0
 80122d4:	6003      	str	r3, [r0, #0]
 80122d6:	e7f1      	b.n	80122bc <expf+0x2c>
 80122d8:	42b17217 	.word	0x42b17217
 80122dc:	c2cff1b5 	.word	0xc2cff1b5

080122e0 <sqrtf>:
 80122e0:	b570      	push	{r4, r5, r6, lr}
 80122e2:	1c05      	adds	r5, r0, #0
 80122e4:	f000 f822 	bl	801232c <__ieee754_sqrtf>
 80122e8:	1c29      	adds	r1, r5, #0
 80122ea:	1c04      	adds	r4, r0, #0
 80122ec:	1c28      	adds	r0, r5, #0
 80122ee:	f7ef f8b7 	bl	8001460 <__aeabi_fcmpun>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d10e      	bne.n	8012314 <sqrtf+0x34>
 80122f6:	2100      	movs	r1, #0
 80122f8:	1c28      	adds	r0, r5, #0
 80122fa:	f7ee f8e7 	bl	80004cc <__aeabi_fcmplt>
 80122fe:	2800      	cmp	r0, #0
 8012300:	d008      	beq.n	8012314 <sqrtf+0x34>
 8012302:	f7fd feab 	bl	801005c <__errno>
 8012306:	2321      	movs	r3, #33	@ 0x21
 8012308:	2100      	movs	r1, #0
 801230a:	6003      	str	r3, [r0, #0]
 801230c:	1c08      	adds	r0, r1, #0
 801230e:	f7ee fbdf 	bl	8000ad0 <__aeabi_fdiv>
 8012312:	1c04      	adds	r4, r0, #0
 8012314:	1c20      	adds	r0, r4, #0
 8012316:	bd70      	pop	{r4, r5, r6, pc}

08012318 <finitef>:
 8012318:	22ff      	movs	r2, #255	@ 0xff
 801231a:	0043      	lsls	r3, r0, #1
 801231c:	085b      	lsrs	r3, r3, #1
 801231e:	2001      	movs	r0, #1
 8012320:	05d2      	lsls	r2, r2, #23
 8012322:	4293      	cmp	r3, r2
 8012324:	db00      	blt.n	8012328 <finitef+0x10>
 8012326:	2000      	movs	r0, #0
 8012328:	4770      	bx	lr
	...

0801232c <__ieee754_sqrtf>:
 801232c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801232e:	0003      	movs	r3, r0
 8012330:	0042      	lsls	r2, r0, #1
 8012332:	1c04      	adds	r4, r0, #0
 8012334:	20ff      	movs	r0, #255	@ 0xff
 8012336:	0852      	lsrs	r2, r2, #1
 8012338:	05c0      	lsls	r0, r0, #23
 801233a:	4282      	cmp	r2, r0
 801233c:	d30a      	bcc.n	8012354 <__ieee754_sqrtf+0x28>
 801233e:	1c21      	adds	r1, r4, #0
 8012340:	1c20      	adds	r0, r4, #0
 8012342:	f7ee fdab 	bl	8000e9c <__aeabi_fmul>
 8012346:	1c01      	adds	r1, r0, #0
 8012348:	1c20      	adds	r0, r4, #0
 801234a:	f7ee fa37 	bl	80007bc <__aeabi_fadd>
 801234e:	1c04      	adds	r4, r0, #0
 8012350:	1c20      	adds	r0, r4, #0
 8012352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012354:	2a00      	cmp	r2, #0
 8012356:	d0fb      	beq.n	8012350 <__ieee754_sqrtf+0x24>
 8012358:	2c00      	cmp	r4, #0
 801235a:	da07      	bge.n	801236c <__ieee754_sqrtf+0x40>
 801235c:	1c21      	adds	r1, r4, #0
 801235e:	1c20      	adds	r0, r4, #0
 8012360:	f7ee feda 	bl	8001118 <__aeabi_fsub>
 8012364:	1c01      	adds	r1, r0, #0
 8012366:	f7ee fbb3 	bl	8000ad0 <__aeabi_fdiv>
 801236a:	e7f0      	b.n	801234e <__ieee754_sqrtf+0x22>
 801236c:	0022      	movs	r2, r4
 801236e:	15e1      	asrs	r1, r4, #23
 8012370:	4002      	ands	r2, r0
 8012372:	4204      	tst	r4, r0
 8012374:	d046      	beq.n	8012404 <__ieee754_sqrtf+0xd8>
 8012376:	2280      	movs	r2, #128	@ 0x80
 8012378:	000f      	movs	r7, r1
 801237a:	025b      	lsls	r3, r3, #9
 801237c:	0a5b      	lsrs	r3, r3, #9
 801237e:	0412      	lsls	r2, r2, #16
 8012380:	3f7f      	subs	r7, #127	@ 0x7f
 8012382:	4313      	orrs	r3, r2
 8012384:	07c9      	lsls	r1, r1, #31
 8012386:	d400      	bmi.n	801238a <__ieee754_sqrtf+0x5e>
 8012388:	005b      	lsls	r3, r3, #1
 801238a:	2400      	movs	r4, #0
 801238c:	2180      	movs	r1, #128	@ 0x80
 801238e:	2019      	movs	r0, #25
 8012390:	0026      	movs	r6, r4
 8012392:	107f      	asrs	r7, r7, #1
 8012394:	005b      	lsls	r3, r3, #1
 8012396:	0449      	lsls	r1, r1, #17
 8012398:	1875      	adds	r5, r6, r1
 801239a:	001a      	movs	r2, r3
 801239c:	429d      	cmp	r5, r3
 801239e:	dc02      	bgt.n	80123a6 <__ieee754_sqrtf+0x7a>
 80123a0:	186e      	adds	r6, r5, r1
 80123a2:	1b5a      	subs	r2, r3, r5
 80123a4:	1864      	adds	r4, r4, r1
 80123a6:	3801      	subs	r0, #1
 80123a8:	0053      	lsls	r3, r2, #1
 80123aa:	0849      	lsrs	r1, r1, #1
 80123ac:	2800      	cmp	r0, #0
 80123ae:	d1f3      	bne.n	8012398 <__ieee754_sqrtf+0x6c>
 80123b0:	2a00      	cmp	r2, #0
 80123b2:	d019      	beq.n	80123e8 <__ieee754_sqrtf+0xbc>
 80123b4:	4d17      	ldr	r5, [pc, #92]	@ (8012414 <__ieee754_sqrtf+0xe8>)
 80123b6:	4e18      	ldr	r6, [pc, #96]	@ (8012418 <__ieee754_sqrtf+0xec>)
 80123b8:	6828      	ldr	r0, [r5, #0]
 80123ba:	6831      	ldr	r1, [r6, #0]
 80123bc:	682b      	ldr	r3, [r5, #0]
 80123be:	9301      	str	r3, [sp, #4]
 80123c0:	f7ee feaa 	bl	8001118 <__aeabi_fsub>
 80123c4:	1c01      	adds	r1, r0, #0
 80123c6:	9801      	ldr	r0, [sp, #4]
 80123c8:	f7ee f88a 	bl	80004e0 <__aeabi_fcmple>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	d00b      	beq.n	80123e8 <__ieee754_sqrtf+0xbc>
 80123d0:	6828      	ldr	r0, [r5, #0]
 80123d2:	6831      	ldr	r1, [r6, #0]
 80123d4:	f7ee f9f2 	bl	80007bc <__aeabi_fadd>
 80123d8:	682d      	ldr	r5, [r5, #0]
 80123da:	1c01      	adds	r1, r0, #0
 80123dc:	1c28      	adds	r0, r5, #0
 80123de:	f7ee f875 	bl	80004cc <__aeabi_fcmplt>
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d011      	beq.n	801240a <__ieee754_sqrtf+0xde>
 80123e6:	3402      	adds	r4, #2
 80123e8:	23fc      	movs	r3, #252	@ 0xfc
 80123ea:	1064      	asrs	r4, r4, #1
 80123ec:	059b      	lsls	r3, r3, #22
 80123ee:	18e3      	adds	r3, r4, r3
 80123f0:	05fc      	lsls	r4, r7, #23
 80123f2:	18e4      	adds	r4, r4, r3
 80123f4:	e7ac      	b.n	8012350 <__ieee754_sqrtf+0x24>
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	3201      	adds	r2, #1
 80123fa:	4203      	tst	r3, r0
 80123fc:	d0fb      	beq.n	80123f6 <__ieee754_sqrtf+0xca>
 80123fe:	3a01      	subs	r2, #1
 8012400:	1a89      	subs	r1, r1, r2
 8012402:	e7b8      	b.n	8012376 <__ieee754_sqrtf+0x4a>
 8012404:	2080      	movs	r0, #128	@ 0x80
 8012406:	0400      	lsls	r0, r0, #16
 8012408:	e7f7      	b.n	80123fa <__ieee754_sqrtf+0xce>
 801240a:	2301      	movs	r3, #1
 801240c:	3401      	adds	r4, #1
 801240e:	439c      	bics	r4, r3
 8012410:	e7ea      	b.n	80123e8 <__ieee754_sqrtf+0xbc>
 8012412:	46c0      	nop			@ (mov r8, r8)
 8012414:	20000318 	.word	0x20000318
 8012418:	20000314 	.word	0x20000314

0801241c <__ieee754_expf>:
 801241c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801241e:	21ff      	movs	r1, #255	@ 0xff
 8012420:	0043      	lsls	r3, r0, #1
 8012422:	1c04      	adds	r4, r0, #0
 8012424:	085b      	lsrs	r3, r3, #1
 8012426:	05c9      	lsls	r1, r1, #23
 8012428:	428b      	cmp	r3, r1
 801242a:	d904      	bls.n	8012436 <__ieee754_expf+0x1a>
 801242c:	1c01      	adds	r1, r0, #0
 801242e:	1c20      	adds	r0, r4, #0
 8012430:	f7ee f9c4 	bl	80007bc <__aeabi_fadd>
 8012434:	e00d      	b.n	8012452 <__ieee754_expf+0x36>
 8012436:	0fc6      	lsrs	r6, r0, #31
 8012438:	428b      	cmp	r3, r1
 801243a:	d104      	bne.n	8012446 <__ieee754_expf+0x2a>
 801243c:	2e00      	cmp	r6, #0
 801243e:	d000      	beq.n	8012442 <__ieee754_expf+0x26>
 8012440:	e0ba      	b.n	80125b8 <__ieee754_expf+0x19c>
 8012442:	1c20      	adds	r0, r4, #0
 8012444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012446:	495d      	ldr	r1, [pc, #372]	@ (80125bc <__ieee754_expf+0x1a0>)
 8012448:	4288      	cmp	r0, r1
 801244a:	dd04      	ble.n	8012456 <__ieee754_expf+0x3a>
 801244c:	2000      	movs	r0, #0
 801244e:	f000 f8f1 	bl	8012634 <__math_oflowf>
 8012452:	1c04      	adds	r4, r0, #0
 8012454:	e7f5      	b.n	8012442 <__ieee754_expf+0x26>
 8012456:	2800      	cmp	r0, #0
 8012458:	da06      	bge.n	8012468 <__ieee754_expf+0x4c>
 801245a:	4a59      	ldr	r2, [pc, #356]	@ (80125c0 <__ieee754_expf+0x1a4>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d903      	bls.n	8012468 <__ieee754_expf+0x4c>
 8012460:	2000      	movs	r0, #0
 8012462:	f000 f8e1 	bl	8012628 <__math_uflowf>
 8012466:	e7f4      	b.n	8012452 <__ieee754_expf+0x36>
 8012468:	4a56      	ldr	r2, [pc, #344]	@ (80125c4 <__ieee754_expf+0x1a8>)
 801246a:	4293      	cmp	r3, r2
 801246c:	d96e      	bls.n	801254c <__ieee754_expf+0x130>
 801246e:	4a56      	ldr	r2, [pc, #344]	@ (80125c8 <__ieee754_expf+0x1ac>)
 8012470:	00b5      	lsls	r5, r6, #2
 8012472:	4293      	cmp	r3, r2
 8012474:	d84e      	bhi.n	8012514 <__ieee754_expf+0xf8>
 8012476:	4b55      	ldr	r3, [pc, #340]	@ (80125cc <__ieee754_expf+0x1b0>)
 8012478:	1c20      	adds	r0, r4, #0
 801247a:	5959      	ldr	r1, [r3, r5]
 801247c:	f7ee fe4c 	bl	8001118 <__aeabi_fsub>
 8012480:	4b53      	ldr	r3, [pc, #332]	@ (80125d0 <__ieee754_expf+0x1b4>)
 8012482:	1c07      	adds	r7, r0, #0
 8012484:	595b      	ldr	r3, [r3, r5]
 8012486:	2501      	movs	r5, #1
 8012488:	1bad      	subs	r5, r5, r6
 801248a:	9300      	str	r3, [sp, #0]
 801248c:	1bad      	subs	r5, r5, r6
 801248e:	9900      	ldr	r1, [sp, #0]
 8012490:	1c38      	adds	r0, r7, #0
 8012492:	f7ee fe41 	bl	8001118 <__aeabi_fsub>
 8012496:	1c04      	adds	r4, r0, #0
 8012498:	1c21      	adds	r1, r4, #0
 801249a:	1c20      	adds	r0, r4, #0
 801249c:	f7ee fcfe 	bl	8000e9c <__aeabi_fmul>
 80124a0:	494c      	ldr	r1, [pc, #304]	@ (80125d4 <__ieee754_expf+0x1b8>)
 80124a2:	1c06      	adds	r6, r0, #0
 80124a4:	f7ee fcfa 	bl	8000e9c <__aeabi_fmul>
 80124a8:	494b      	ldr	r1, [pc, #300]	@ (80125d8 <__ieee754_expf+0x1bc>)
 80124aa:	f7ee fe35 	bl	8001118 <__aeabi_fsub>
 80124ae:	1c31      	adds	r1, r6, #0
 80124b0:	f7ee fcf4 	bl	8000e9c <__aeabi_fmul>
 80124b4:	4949      	ldr	r1, [pc, #292]	@ (80125dc <__ieee754_expf+0x1c0>)
 80124b6:	f7ee f981 	bl	80007bc <__aeabi_fadd>
 80124ba:	1c31      	adds	r1, r6, #0
 80124bc:	f7ee fcee 	bl	8000e9c <__aeabi_fmul>
 80124c0:	4947      	ldr	r1, [pc, #284]	@ (80125e0 <__ieee754_expf+0x1c4>)
 80124c2:	f7ee fe29 	bl	8001118 <__aeabi_fsub>
 80124c6:	1c31      	adds	r1, r6, #0
 80124c8:	f7ee fce8 	bl	8000e9c <__aeabi_fmul>
 80124cc:	4945      	ldr	r1, [pc, #276]	@ (80125e4 <__ieee754_expf+0x1c8>)
 80124ce:	f7ee f975 	bl	80007bc <__aeabi_fadd>
 80124d2:	1c31      	adds	r1, r6, #0
 80124d4:	f7ee fce2 	bl	8000e9c <__aeabi_fmul>
 80124d8:	1c01      	adds	r1, r0, #0
 80124da:	1c20      	adds	r0, r4, #0
 80124dc:	f7ee fe1c 	bl	8001118 <__aeabi_fsub>
 80124e0:	1c01      	adds	r1, r0, #0
 80124e2:	1c06      	adds	r6, r0, #0
 80124e4:	1c20      	adds	r0, r4, #0
 80124e6:	f7ee fcd9 	bl	8000e9c <__aeabi_fmul>
 80124ea:	9001      	str	r0, [sp, #4]
 80124ec:	2d00      	cmp	r5, #0
 80124ee:	d140      	bne.n	8012572 <__ieee754_expf+0x156>
 80124f0:	2180      	movs	r1, #128	@ 0x80
 80124f2:	1c30      	adds	r0, r6, #0
 80124f4:	05c9      	lsls	r1, r1, #23
 80124f6:	f7ee fe0f 	bl	8001118 <__aeabi_fsub>
 80124fa:	1c01      	adds	r1, r0, #0
 80124fc:	9801      	ldr	r0, [sp, #4]
 80124fe:	f7ee fae7 	bl	8000ad0 <__aeabi_fdiv>
 8012502:	1c21      	adds	r1, r4, #0
 8012504:	f7ee fe08 	bl	8001118 <__aeabi_fsub>
 8012508:	1c01      	adds	r1, r0, #0
 801250a:	20fe      	movs	r0, #254	@ 0xfe
 801250c:	0580      	lsls	r0, r0, #22
 801250e:	f7ee fe03 	bl	8001118 <__aeabi_fsub>
 8012512:	e79e      	b.n	8012452 <__ieee754_expf+0x36>
 8012514:	4934      	ldr	r1, [pc, #208]	@ (80125e8 <__ieee754_expf+0x1cc>)
 8012516:	1c20      	adds	r0, r4, #0
 8012518:	f7ee fcc0 	bl	8000e9c <__aeabi_fmul>
 801251c:	4b33      	ldr	r3, [pc, #204]	@ (80125ec <__ieee754_expf+0x1d0>)
 801251e:	5959      	ldr	r1, [r3, r5]
 8012520:	f7ee f94c 	bl	80007bc <__aeabi_fadd>
 8012524:	f7ee ffb2 	bl	800148c <__aeabi_f2iz>
 8012528:	0005      	movs	r5, r0
 801252a:	f7ee ffcf 	bl	80014cc <__aeabi_i2f>
 801252e:	4930      	ldr	r1, [pc, #192]	@ (80125f0 <__ieee754_expf+0x1d4>)
 8012530:	1c06      	adds	r6, r0, #0
 8012532:	f7ee fcb3 	bl	8000e9c <__aeabi_fmul>
 8012536:	1c01      	adds	r1, r0, #0
 8012538:	1c20      	adds	r0, r4, #0
 801253a:	f7ee fded 	bl	8001118 <__aeabi_fsub>
 801253e:	492d      	ldr	r1, [pc, #180]	@ (80125f4 <__ieee754_expf+0x1d8>)
 8012540:	1c07      	adds	r7, r0, #0
 8012542:	1c30      	adds	r0, r6, #0
 8012544:	f7ee fcaa 	bl	8000e9c <__aeabi_fmul>
 8012548:	9000      	str	r0, [sp, #0]
 801254a:	e7a0      	b.n	801248e <__ieee754_expf+0x72>
 801254c:	22d0      	movs	r2, #208	@ 0xd0
 801254e:	0592      	lsls	r2, r2, #22
 8012550:	4293      	cmp	r3, r2
 8012552:	d20c      	bcs.n	801256e <__ieee754_expf+0x152>
 8012554:	4928      	ldr	r1, [pc, #160]	@ (80125f8 <__ieee754_expf+0x1dc>)
 8012556:	1c20      	adds	r0, r4, #0
 8012558:	f7ee f930 	bl	80007bc <__aeabi_fadd>
 801255c:	21fe      	movs	r1, #254	@ 0xfe
 801255e:	0589      	lsls	r1, r1, #22
 8012560:	f7ed ffc8 	bl	80004f4 <__aeabi_fcmpgt>
 8012564:	1e05      	subs	r5, r0, #0
 8012566:	d097      	beq.n	8012498 <__ieee754_expf+0x7c>
 8012568:	21fe      	movs	r1, #254	@ 0xfe
 801256a:	0589      	lsls	r1, r1, #22
 801256c:	e75f      	b.n	801242e <__ieee754_expf+0x12>
 801256e:	2500      	movs	r5, #0
 8012570:	e792      	b.n	8012498 <__ieee754_expf+0x7c>
 8012572:	2080      	movs	r0, #128	@ 0x80
 8012574:	1c31      	adds	r1, r6, #0
 8012576:	05c0      	lsls	r0, r0, #23
 8012578:	f7ee fdce 	bl	8001118 <__aeabi_fsub>
 801257c:	1c01      	adds	r1, r0, #0
 801257e:	9801      	ldr	r0, [sp, #4]
 8012580:	f7ee faa6 	bl	8000ad0 <__aeabi_fdiv>
 8012584:	1c01      	adds	r1, r0, #0
 8012586:	9800      	ldr	r0, [sp, #0]
 8012588:	f7ee fdc6 	bl	8001118 <__aeabi_fsub>
 801258c:	1c39      	adds	r1, r7, #0
 801258e:	f7ee fdc3 	bl	8001118 <__aeabi_fsub>
 8012592:	1c01      	adds	r1, r0, #0
 8012594:	20fe      	movs	r0, #254	@ 0xfe
 8012596:	0580      	lsls	r0, r0, #22
 8012598:	f7ee fdbe 	bl	8001118 <__aeabi_fsub>
 801259c:	002b      	movs	r3, r5
 801259e:	337d      	adds	r3, #125	@ 0x7d
 80125a0:	db02      	blt.n	80125a8 <__ieee754_expf+0x18c>
 80125a2:	05ec      	lsls	r4, r5, #23
 80125a4:	1824      	adds	r4, r4, r0
 80125a6:	e74c      	b.n	8012442 <__ieee754_expf+0x26>
 80125a8:	21d8      	movs	r1, #216	@ 0xd8
 80125aa:	3564      	adds	r5, #100	@ 0x64
 80125ac:	05ed      	lsls	r5, r5, #23
 80125ae:	1828      	adds	r0, r5, r0
 80125b0:	0509      	lsls	r1, r1, #20
 80125b2:	f7ee fc73 	bl	8000e9c <__aeabi_fmul>
 80125b6:	e74c      	b.n	8012452 <__ieee754_expf+0x36>
 80125b8:	2400      	movs	r4, #0
 80125ba:	e742      	b.n	8012442 <__ieee754_expf+0x26>
 80125bc:	42b17217 	.word	0x42b17217
 80125c0:	42cff1b5 	.word	0x42cff1b5
 80125c4:	3eb17218 	.word	0x3eb17218
 80125c8:	3f851591 	.word	0x3f851591
 80125cc:	08013530 	.word	0x08013530
 80125d0:	08013528 	.word	0x08013528
 80125d4:	3331bb4c 	.word	0x3331bb4c
 80125d8:	35ddea0e 	.word	0x35ddea0e
 80125dc:	388ab355 	.word	0x388ab355
 80125e0:	3b360b61 	.word	0x3b360b61
 80125e4:	3e2aaaab 	.word	0x3e2aaaab
 80125e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80125ec:	08013538 	.word	0x08013538
 80125f0:	3f317180 	.word	0x3f317180
 80125f4:	3717f7d1 	.word	0x3717f7d1
 80125f8:	7149f2ca 	.word	0x7149f2ca

080125fc <with_errnof>:
 80125fc:	b570      	push	{r4, r5, r6, lr}
 80125fe:	000d      	movs	r5, r1
 8012600:	1c04      	adds	r4, r0, #0
 8012602:	f7fd fd2b 	bl	801005c <__errno>
 8012606:	6005      	str	r5, [r0, #0]
 8012608:	1c20      	adds	r0, r4, #0
 801260a:	bd70      	pop	{r4, r5, r6, pc}

0801260c <xflowf>:
 801260c:	b510      	push	{r4, lr}
 801260e:	1c0b      	adds	r3, r1, #0
 8012610:	2800      	cmp	r0, #0
 8012612:	d002      	beq.n	801261a <xflowf+0xe>
 8012614:	2380      	movs	r3, #128	@ 0x80
 8012616:	061b      	lsls	r3, r3, #24
 8012618:	18cb      	adds	r3, r1, r3
 801261a:	1c18      	adds	r0, r3, #0
 801261c:	f7ee fc3e 	bl	8000e9c <__aeabi_fmul>
 8012620:	2122      	movs	r1, #34	@ 0x22
 8012622:	f7ff ffeb 	bl	80125fc <with_errnof>
 8012626:	bd10      	pop	{r4, pc}

08012628 <__math_uflowf>:
 8012628:	2180      	movs	r1, #128	@ 0x80
 801262a:	b510      	push	{r4, lr}
 801262c:	0549      	lsls	r1, r1, #21
 801262e:	f7ff ffed 	bl	801260c <xflowf>
 8012632:	bd10      	pop	{r4, pc}

08012634 <__math_oflowf>:
 8012634:	21e0      	movs	r1, #224	@ 0xe0
 8012636:	b510      	push	{r4, lr}
 8012638:	05c9      	lsls	r1, r1, #23
 801263a:	f7ff ffe7 	bl	801260c <xflowf>
 801263e:	bd10      	pop	{r4, pc}

08012640 <_init>:
 8012640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012642:	46c0      	nop			@ (mov r8, r8)
 8012644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012646:	bc08      	pop	{r3}
 8012648:	469e      	mov	lr, r3
 801264a:	4770      	bx	lr

0801264c <_fini>:
 801264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264e:	46c0      	nop			@ (mov r8, r8)
 8012650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012652:	bc08      	pop	{r3}
 8012654:	469e      	mov	lr, r3
 8012656:	4770      	bx	lr
