
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014870  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012ce0  08014930  08014930  00015930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027610  08027610  0002931c  2**0
                  CONTENTS
  4 .ARM          00000008  08027610  08027610  00028610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027618  08027618  0002931c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027618  08027618  00028618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802761c  0802761c  0002861c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08027620  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000344c  2000031c  0802793c  0002931c  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003768  0802793c  00029768  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002931c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024665  00000000  00000000  00029344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000635c  00000000  00000000  0004d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  00053d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d6  00000000  00000000  00055988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c153  00000000  00000000  00056e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002abae  00000000  00000000  00072fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e1a  00000000  00000000  0009db5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00132979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007850  00000000  00000000  00132a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013a27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002742  00000000  00000000  0013a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000a8  00000000  00000000  0013ca16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000031c 	.word	0x2000031c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08014918 	.word	0x08014918

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000320 	.word	0x20000320
 8000104:	08014918 	.word	0x08014918

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strlen>:
 8000158:	2300      	movs	r3, #0
 800015a:	5cc2      	ldrb	r2, [r0, r3]
 800015c:	3301      	adds	r3, #1
 800015e:	2a00      	cmp	r2, #0
 8000160:	d1fb      	bne.n	800015a <strlen+0x2>
 8000162:	1e58      	subs	r0, r3, #1
 8000164:	4770      	bx	lr
	...

08000168 <__gnu_thumb1_case_uqi>:
 8000168:	b402      	push	{r1}
 800016a:	4671      	mov	r1, lr
 800016c:	0849      	lsrs	r1, r1, #1
 800016e:	0049      	lsls	r1, r1, #1
 8000170:	5c09      	ldrb	r1, [r1, r0]
 8000172:	0049      	lsls	r1, r1, #1
 8000174:	448e      	add	lr, r1
 8000176:	bc02      	pop	{r1}
 8000178:	4770      	bx	lr
 800017a:	46c0      	nop			@ (mov r8, r8)

0800017c <__gnu_thumb1_case_shi>:
 800017c:	b403      	push	{r0, r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0040      	lsls	r0, r0, #1
 8000184:	0049      	lsls	r1, r1, #1
 8000186:	5e09      	ldrsh	r1, [r1, r0]
 8000188:	0049      	lsls	r1, r1, #1
 800018a:	448e      	add	lr, r1
 800018c:	bc03      	pop	{r0, r1}
 800018e:	4770      	bx	lr

08000190 <__udivsi3>:
 8000190:	2200      	movs	r2, #0
 8000192:	0843      	lsrs	r3, r0, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d374      	bcc.n	8000282 <__udivsi3+0xf2>
 8000198:	0903      	lsrs	r3, r0, #4
 800019a:	428b      	cmp	r3, r1
 800019c:	d35f      	bcc.n	800025e <__udivsi3+0xce>
 800019e:	0a03      	lsrs	r3, r0, #8
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d344      	bcc.n	800022e <__udivsi3+0x9e>
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d328      	bcc.n	80001fc <__udivsi3+0x6c>
 80001aa:	0c03      	lsrs	r3, r0, #16
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d30d      	bcc.n	80001cc <__udivsi3+0x3c>
 80001b0:	22ff      	movs	r2, #255	@ 0xff
 80001b2:	0209      	lsls	r1, r1, #8
 80001b4:	ba12      	rev	r2, r2
 80001b6:	0c03      	lsrs	r3, r0, #16
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d302      	bcc.n	80001c2 <__udivsi3+0x32>
 80001bc:	1212      	asrs	r2, r2, #8
 80001be:	0209      	lsls	r1, r1, #8
 80001c0:	d065      	beq.n	800028e <__udivsi3+0xfe>
 80001c2:	0b03      	lsrs	r3, r0, #12
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d319      	bcc.n	80001fc <__udivsi3+0x6c>
 80001c8:	e000      	b.n	80001cc <__udivsi3+0x3c>
 80001ca:	0a09      	lsrs	r1, r1, #8
 80001cc:	0bc3      	lsrs	r3, r0, #15
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x46>
 80001d2:	03cb      	lsls	r3, r1, #15
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0b83      	lsrs	r3, r0, #14
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x52>
 80001de:	038b      	lsls	r3, r1, #14
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0b43      	lsrs	r3, r0, #13
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x5e>
 80001ea:	034b      	lsls	r3, r1, #13
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0b03      	lsrs	r3, r0, #12
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x6a>
 80001f6:	030b      	lsls	r3, r1, #12
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0ac3      	lsrs	r3, r0, #11
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x76>
 8000202:	02cb      	lsls	r3, r1, #11
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0a83      	lsrs	r3, r0, #10
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x82>
 800020e:	028b      	lsls	r3, r1, #10
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0a43      	lsrs	r3, r0, #9
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x8e>
 800021a:	024b      	lsls	r3, r1, #9
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0a03      	lsrs	r3, r0, #8
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x9a>
 8000226:	020b      	lsls	r3, r1, #8
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	d2cd      	bcs.n	80001ca <__udivsi3+0x3a>
 800022e:	09c3      	lsrs	r3, r0, #7
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xa8>
 8000234:	01cb      	lsls	r3, r1, #7
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0983      	lsrs	r3, r0, #6
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xb4>
 8000240:	018b      	lsls	r3, r1, #6
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0943      	lsrs	r3, r0, #5
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xc0>
 800024c:	014b      	lsls	r3, r1, #5
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xcc>
 8000258:	010b      	lsls	r3, r1, #4
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	08c3      	lsrs	r3, r0, #3
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xd8>
 8000264:	00cb      	lsls	r3, r1, #3
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0883      	lsrs	r3, r0, #2
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xe4>
 8000270:	008b      	lsls	r3, r1, #2
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0843      	lsrs	r3, r0, #1
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xf0>
 800027c:	004b      	lsls	r3, r1, #1
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	1a41      	subs	r1, r0, r1
 8000284:	d200      	bcs.n	8000288 <__udivsi3+0xf8>
 8000286:	4601      	mov	r1, r0
 8000288:	4152      	adcs	r2, r2
 800028a:	4610      	mov	r0, r2
 800028c:	4770      	bx	lr
 800028e:	e7ff      	b.n	8000290 <__udivsi3+0x100>
 8000290:	b501      	push	{r0, lr}
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f8f0 	bl	8000478 <__aeabi_idiv0>
 8000298:	bd02      	pop	{r1, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_uidivmod>:
 800029c:	2900      	cmp	r1, #0
 800029e:	d0f7      	beq.n	8000290 <__udivsi3+0x100>
 80002a0:	e776      	b.n	8000190 <__udivsi3>
 80002a2:	4770      	bx	lr

080002a4 <__divsi3>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	430b      	orrs	r3, r1
 80002a8:	d47f      	bmi.n	80003aa <__divsi3+0x106>
 80002aa:	2200      	movs	r2, #0
 80002ac:	0843      	lsrs	r3, r0, #1
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d374      	bcc.n	800039c <__divsi3+0xf8>
 80002b2:	0903      	lsrs	r3, r0, #4
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d35f      	bcc.n	8000378 <__divsi3+0xd4>
 80002b8:	0a03      	lsrs	r3, r0, #8
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d344      	bcc.n	8000348 <__divsi3+0xa4>
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d328      	bcc.n	8000316 <__divsi3+0x72>
 80002c4:	0c03      	lsrs	r3, r0, #16
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d30d      	bcc.n	80002e6 <__divsi3+0x42>
 80002ca:	22ff      	movs	r2, #255	@ 0xff
 80002cc:	0209      	lsls	r1, r1, #8
 80002ce:	ba12      	rev	r2, r2
 80002d0:	0c03      	lsrs	r3, r0, #16
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__divsi3+0x38>
 80002d6:	1212      	asrs	r2, r2, #8
 80002d8:	0209      	lsls	r1, r1, #8
 80002da:	d065      	beq.n	80003a8 <__divsi3+0x104>
 80002dc:	0b03      	lsrs	r3, r0, #12
 80002de:	428b      	cmp	r3, r1
 80002e0:	d319      	bcc.n	8000316 <__divsi3+0x72>
 80002e2:	e000      	b.n	80002e6 <__divsi3+0x42>
 80002e4:	0a09      	lsrs	r1, r1, #8
 80002e6:	0bc3      	lsrs	r3, r0, #15
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x4c>
 80002ec:	03cb      	lsls	r3, r1, #15
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0b83      	lsrs	r3, r0, #14
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x58>
 80002f8:	038b      	lsls	r3, r1, #14
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0b43      	lsrs	r3, r0, #13
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x64>
 8000304:	034b      	lsls	r3, r1, #13
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0b03      	lsrs	r3, r0, #12
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0x70>
 8000310:	030b      	lsls	r3, r1, #12
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	0ac3      	lsrs	r3, r0, #11
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__divsi3+0x7c>
 800031c:	02cb      	lsls	r3, r1, #11
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0a83      	lsrs	r3, r0, #10
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__divsi3+0x88>
 8000328:	028b      	lsls	r3, r1, #10
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	0a43      	lsrs	r3, r0, #9
 8000330:	428b      	cmp	r3, r1
 8000332:	d301      	bcc.n	8000338 <__divsi3+0x94>
 8000334:	024b      	lsls	r3, r1, #9
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4152      	adcs	r2, r2
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d301      	bcc.n	8000344 <__divsi3+0xa0>
 8000340:	020b      	lsls	r3, r1, #8
 8000342:	1ac0      	subs	r0, r0, r3
 8000344:	4152      	adcs	r2, r2
 8000346:	d2cd      	bcs.n	80002e4 <__divsi3+0x40>
 8000348:	09c3      	lsrs	r3, r0, #7
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xae>
 800034e:	01cb      	lsls	r3, r1, #7
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0983      	lsrs	r3, r0, #6
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xba>
 800035a:	018b      	lsls	r3, r1, #6
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0943      	lsrs	r3, r0, #5
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xc6>
 8000366:	014b      	lsls	r3, r1, #5
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d301      	bcc.n	8000376 <__divsi3+0xd2>
 8000372:	010b      	lsls	r3, r1, #4
 8000374:	1ac0      	subs	r0, r0, r3
 8000376:	4152      	adcs	r2, r2
 8000378:	08c3      	lsrs	r3, r0, #3
 800037a:	428b      	cmp	r3, r1
 800037c:	d301      	bcc.n	8000382 <__divsi3+0xde>
 800037e:	00cb      	lsls	r3, r1, #3
 8000380:	1ac0      	subs	r0, r0, r3
 8000382:	4152      	adcs	r2, r2
 8000384:	0883      	lsrs	r3, r0, #2
 8000386:	428b      	cmp	r3, r1
 8000388:	d301      	bcc.n	800038e <__divsi3+0xea>
 800038a:	008b      	lsls	r3, r1, #2
 800038c:	1ac0      	subs	r0, r0, r3
 800038e:	4152      	adcs	r2, r2
 8000390:	0843      	lsrs	r3, r0, #1
 8000392:	428b      	cmp	r3, r1
 8000394:	d301      	bcc.n	800039a <__divsi3+0xf6>
 8000396:	004b      	lsls	r3, r1, #1
 8000398:	1ac0      	subs	r0, r0, r3
 800039a:	4152      	adcs	r2, r2
 800039c:	1a41      	subs	r1, r0, r1
 800039e:	d200      	bcs.n	80003a2 <__divsi3+0xfe>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4152      	adcs	r2, r2
 80003a4:	4610      	mov	r0, r2
 80003a6:	4770      	bx	lr
 80003a8:	e05d      	b.n	8000466 <__divsi3+0x1c2>
 80003aa:	0fca      	lsrs	r2, r1, #31
 80003ac:	d000      	beq.n	80003b0 <__divsi3+0x10c>
 80003ae:	4249      	negs	r1, r1
 80003b0:	1003      	asrs	r3, r0, #32
 80003b2:	d300      	bcc.n	80003b6 <__divsi3+0x112>
 80003b4:	4240      	negs	r0, r0
 80003b6:	4053      	eors	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	469c      	mov	ip, r3
 80003bc:	0903      	lsrs	r3, r0, #4
 80003be:	428b      	cmp	r3, r1
 80003c0:	d32d      	bcc.n	800041e <__divsi3+0x17a>
 80003c2:	0a03      	lsrs	r3, r0, #8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d312      	bcc.n	80003ee <__divsi3+0x14a>
 80003c8:	22fc      	movs	r2, #252	@ 0xfc
 80003ca:	0189      	lsls	r1, r1, #6
 80003cc:	ba12      	rev	r2, r2
 80003ce:	0a03      	lsrs	r3, r0, #8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d30c      	bcc.n	80003ee <__divsi3+0x14a>
 80003d4:	0189      	lsls	r1, r1, #6
 80003d6:	1192      	asrs	r2, r2, #6
 80003d8:	428b      	cmp	r3, r1
 80003da:	d308      	bcc.n	80003ee <__divsi3+0x14a>
 80003dc:	0189      	lsls	r1, r1, #6
 80003de:	1192      	asrs	r2, r2, #6
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d304      	bcc.n	80003ee <__divsi3+0x14a>
 80003e4:	0189      	lsls	r1, r1, #6
 80003e6:	d03a      	beq.n	800045e <__divsi3+0x1ba>
 80003e8:	1192      	asrs	r2, r2, #6
 80003ea:	e000      	b.n	80003ee <__divsi3+0x14a>
 80003ec:	0989      	lsrs	r1, r1, #6
 80003ee:	09c3      	lsrs	r3, r0, #7
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x154>
 80003f4:	01cb      	lsls	r3, r1, #7
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0983      	lsrs	r3, r0, #6
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x160>
 8000400:	018b      	lsls	r3, r1, #6
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	0943      	lsrs	r3, r0, #5
 8000408:	428b      	cmp	r3, r1
 800040a:	d301      	bcc.n	8000410 <__divsi3+0x16c>
 800040c:	014b      	lsls	r3, r1, #5
 800040e:	1ac0      	subs	r0, r0, r3
 8000410:	4152      	adcs	r2, r2
 8000412:	0903      	lsrs	r3, r0, #4
 8000414:	428b      	cmp	r3, r1
 8000416:	d301      	bcc.n	800041c <__divsi3+0x178>
 8000418:	010b      	lsls	r3, r1, #4
 800041a:	1ac0      	subs	r0, r0, r3
 800041c:	4152      	adcs	r2, r2
 800041e:	08c3      	lsrs	r3, r0, #3
 8000420:	428b      	cmp	r3, r1
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x184>
 8000424:	00cb      	lsls	r3, r1, #3
 8000426:	1ac0      	subs	r0, r0, r3
 8000428:	4152      	adcs	r2, r2
 800042a:	0883      	lsrs	r3, r0, #2
 800042c:	428b      	cmp	r3, r1
 800042e:	d301      	bcc.n	8000434 <__divsi3+0x190>
 8000430:	008b      	lsls	r3, r1, #2
 8000432:	1ac0      	subs	r0, r0, r3
 8000434:	4152      	adcs	r2, r2
 8000436:	d2d9      	bcs.n	80003ec <__divsi3+0x148>
 8000438:	0843      	lsrs	r3, r0, #1
 800043a:	428b      	cmp	r3, r1
 800043c:	d301      	bcc.n	8000442 <__divsi3+0x19e>
 800043e:	004b      	lsls	r3, r1, #1
 8000440:	1ac0      	subs	r0, r0, r3
 8000442:	4152      	adcs	r2, r2
 8000444:	1a41      	subs	r1, r0, r1
 8000446:	d200      	bcs.n	800044a <__divsi3+0x1a6>
 8000448:	4601      	mov	r1, r0
 800044a:	4663      	mov	r3, ip
 800044c:	4152      	adcs	r2, r2
 800044e:	105b      	asrs	r3, r3, #1
 8000450:	4610      	mov	r0, r2
 8000452:	d301      	bcc.n	8000458 <__divsi3+0x1b4>
 8000454:	4240      	negs	r0, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d500      	bpl.n	800045c <__divsi3+0x1b8>
 800045a:	4249      	negs	r1, r1
 800045c:	4770      	bx	lr
 800045e:	4663      	mov	r3, ip
 8000460:	105b      	asrs	r3, r3, #1
 8000462:	d300      	bcc.n	8000466 <__divsi3+0x1c2>
 8000464:	4240      	negs	r0, r0
 8000466:	b501      	push	{r0, lr}
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f805 	bl	8000478 <__aeabi_idiv0>
 800046e:	bd02      	pop	{r1, pc}

08000470 <__aeabi_idivmod>:
 8000470:	2900      	cmp	r1, #0
 8000472:	d0f8      	beq.n	8000466 <__divsi3+0x1c2>
 8000474:	e716      	b.n	80002a4 <__divsi3>
 8000476:	4770      	bx	lr

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_cdrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	0010      	movs	r0, r2
 8000480:	4662      	mov	r2, ip
 8000482:	468c      	mov	ip, r1
 8000484:	0019      	movs	r1, r3
 8000486:	4663      	mov	r3, ip
 8000488:	e000      	b.n	800048c <__aeabi_cdcmpeq>
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_cdcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f002 f827 	bl	80024e0 <__ledf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cdcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_dcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f001 ff67 	bl	8002370 <__eqdf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_dcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f819 	bl	80024e0 <__ledf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_dcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f80f 	bl	80024e0 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_dcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f001 ff91 	bl	80023f8 <__gedf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_dcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ff87 	bl	80023f8 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_dcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_cfrcmple>:
 80004f8:	4684      	mov	ip, r0
 80004fa:	0008      	movs	r0, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	e7ff      	b.n	8000500 <__aeabi_cfcmpeq>

08000500 <__aeabi_cfcmpeq>:
 8000500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000502:	f000 fcc3 	bl	8000e8c <__lesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	d401      	bmi.n	800050e <__aeabi_cfcmpeq+0xe>
 800050a:	2100      	movs	r1, #0
 800050c:	42c8      	cmn	r0, r1
 800050e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000510 <__aeabi_fcmpeq>:
 8000510:	b510      	push	{r4, lr}
 8000512:	f000 fc43 	bl	8000d9c <__eqsf2>
 8000516:	4240      	negs	r0, r0
 8000518:	3001      	adds	r0, #1
 800051a:	bd10      	pop	{r4, pc}

0800051c <__aeabi_fcmplt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fcb5 	bl	8000e8c <__lesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	db01      	blt.n	800052a <__aeabi_fcmplt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmple>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fcab 	bl	8000e8c <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	dd01      	ble.n	800053e <__aeabi_fcmple+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmpgt>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fc51 	bl	8000dec <__gesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dc01      	bgt.n	8000552 <__aeabi_fcmpgt+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpge>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc47 	bl	8000dec <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	da01      	bge.n	8000566 <__aeabi_fcmpge+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__clzsi2>:
 800056c:	211c      	movs	r1, #28
 800056e:	2301      	movs	r3, #1
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	4298      	cmp	r0, r3
 8000574:	d301      	bcc.n	800057a <__clzsi2+0xe>
 8000576:	0c00      	lsrs	r0, r0, #16
 8000578:	3910      	subs	r1, #16
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	4298      	cmp	r0, r3
 800057e:	d301      	bcc.n	8000584 <__clzsi2+0x18>
 8000580:	0a00      	lsrs	r0, r0, #8
 8000582:	3908      	subs	r1, #8
 8000584:	091b      	lsrs	r3, r3, #4
 8000586:	4298      	cmp	r0, r3
 8000588:	d301      	bcc.n	800058e <__clzsi2+0x22>
 800058a:	0900      	lsrs	r0, r0, #4
 800058c:	3904      	subs	r1, #4
 800058e:	a202      	add	r2, pc, #8	@ (adr r2, 8000598 <__clzsi2+0x2c>)
 8000590:	5c10      	ldrb	r0, [r2, r0]
 8000592:	1840      	adds	r0, r0, r1
 8000594:	4770      	bx	lr
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	02020304 	.word	0x02020304
 800059c:	01010101 	.word	0x01010101
	...

080005a8 <__aeabi_uldivmod>:
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d111      	bne.n	80005d0 <__aeabi_uldivmod+0x28>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d10f      	bne.n	80005d0 <__aeabi_uldivmod+0x28>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_uldivmod+0xe>
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d002      	beq.n	80005be <__aeabi_uldivmod+0x16>
 80005b8:	2100      	movs	r1, #0
 80005ba:	43c9      	mvns	r1, r1
 80005bc:	0008      	movs	r0, r1
 80005be:	b407      	push	{r0, r1, r2}
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <__aeabi_uldivmod+0x24>)
 80005c2:	a102      	add	r1, pc, #8	@ (adr r1, 80005cc <__aeabi_uldivmod+0x24>)
 80005c4:	1840      	adds	r0, r0, r1
 80005c6:	9002      	str	r0, [sp, #8]
 80005c8:	bd03      	pop	{r0, r1, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	fffffead 	.word	0xfffffead
 80005d0:	b403      	push	{r0, r1}
 80005d2:	4668      	mov	r0, sp
 80005d4:	b501      	push	{r0, lr}
 80005d6:	9802      	ldr	r0, [sp, #8]
 80005d8:	f000 f86a 	bl	80006b0 <__udivmoddi4>
 80005dc:	9b01      	ldr	r3, [sp, #4]
 80005de:	469e      	mov	lr, r3
 80005e0:	b002      	add	sp, #8
 80005e2:	bc0c      	pop	{r2, r3}
 80005e4:	4770      	bx	lr
 80005e6:	46c0      	nop			@ (mov r8, r8)

080005e8 <__aeabi_lmul>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	46ce      	mov	lr, r9
 80005ec:	4699      	mov	r9, r3
 80005ee:	0c03      	lsrs	r3, r0, #16
 80005f0:	469c      	mov	ip, r3
 80005f2:	0413      	lsls	r3, r2, #16
 80005f4:	4647      	mov	r7, r8
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	001d      	movs	r5, r3
 80005fa:	000e      	movs	r6, r1
 80005fc:	4661      	mov	r1, ip
 80005fe:	0404      	lsls	r4, r0, #16
 8000600:	0c24      	lsrs	r4, r4, #16
 8000602:	b580      	push	{r7, lr}
 8000604:	0007      	movs	r7, r0
 8000606:	0c10      	lsrs	r0, r2, #16
 8000608:	434b      	muls	r3, r1
 800060a:	4365      	muls	r5, r4
 800060c:	4341      	muls	r1, r0
 800060e:	4360      	muls	r0, r4
 8000610:	0c2c      	lsrs	r4, r5, #16
 8000612:	18c0      	adds	r0, r0, r3
 8000614:	1824      	adds	r4, r4, r0
 8000616:	468c      	mov	ip, r1
 8000618:	42a3      	cmp	r3, r4
 800061a:	d903      	bls.n	8000624 <__aeabi_lmul+0x3c>
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	025b      	lsls	r3, r3, #9
 8000620:	4698      	mov	r8, r3
 8000622:	44c4      	add	ip, r8
 8000624:	4649      	mov	r1, r9
 8000626:	4379      	muls	r1, r7
 8000628:	4356      	muls	r6, r2
 800062a:	0c23      	lsrs	r3, r4, #16
 800062c:	042d      	lsls	r5, r5, #16
 800062e:	0c2d      	lsrs	r5, r5, #16
 8000630:	1989      	adds	r1, r1, r6
 8000632:	4463      	add	r3, ip
 8000634:	0424      	lsls	r4, r4, #16
 8000636:	1960      	adds	r0, r4, r5
 8000638:	18c9      	adds	r1, r1, r3
 800063a:	bcc0      	pop	{r6, r7}
 800063c:	46b9      	mov	r9, r7
 800063e:	46b0      	mov	r8, r6
 8000640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)

08000644 <__aeabi_f2uiz>:
 8000644:	219e      	movs	r1, #158	@ 0x9e
 8000646:	b510      	push	{r4, lr}
 8000648:	05c9      	lsls	r1, r1, #23
 800064a:	1c04      	adds	r4, r0, #0
 800064c:	f7ff ff84 	bl	8000558 <__aeabi_fcmpge>
 8000650:	2800      	cmp	r0, #0
 8000652:	d103      	bne.n	800065c <__aeabi_f2uiz+0x18>
 8000654:	1c20      	adds	r0, r4, #0
 8000656:	f000 ff5f 	bl	8001518 <__aeabi_f2iz>
 800065a:	bd10      	pop	{r4, pc}
 800065c:	219e      	movs	r1, #158	@ 0x9e
 800065e:	1c20      	adds	r0, r4, #0
 8000660:	05c9      	lsls	r1, r1, #23
 8000662:	f000 fd9f 	bl	80011a4 <__aeabi_fsub>
 8000666:	f000 ff57 	bl	8001518 <__aeabi_f2iz>
 800066a:	2380      	movs	r3, #128	@ 0x80
 800066c:	061b      	lsls	r3, r3, #24
 800066e:	469c      	mov	ip, r3
 8000670:	4460      	add	r0, ip
 8000672:	e7f2      	b.n	800065a <__aeabi_f2uiz+0x16>

08000674 <__aeabi_d2uiz>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2200      	movs	r2, #0
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <__aeabi_d2uiz+0x38>)
 800067a:	0004      	movs	r4, r0
 800067c:	000d      	movs	r5, r1
 800067e:	f7ff ff31 	bl	80004e4 <__aeabi_dcmpge>
 8000682:	2800      	cmp	r0, #0
 8000684:	d104      	bne.n	8000690 <__aeabi_d2uiz+0x1c>
 8000686:	0020      	movs	r0, r4
 8000688:	0029      	movs	r1, r5
 800068a:	f002 fe21 	bl	80032d0 <__aeabi_d2iz>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <__aeabi_d2uiz+0x38>)
 8000692:	2200      	movs	r2, #0
 8000694:	0020      	movs	r0, r4
 8000696:	0029      	movs	r1, r5
 8000698:	f002 fa5c 	bl	8002b54 <__aeabi_dsub>
 800069c:	f002 fe18 	bl	80032d0 <__aeabi_d2iz>
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	061b      	lsls	r3, r3, #24
 80006a4:	469c      	mov	ip, r3
 80006a6:	4460      	add	r0, ip
 80006a8:	e7f1      	b.n	800068e <__aeabi_d2uiz+0x1a>
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	41e00000 	.word	0x41e00000

080006b0 <__udivmoddi4>:
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	4657      	mov	r7, sl
 80006b4:	464e      	mov	r6, r9
 80006b6:	4645      	mov	r5, r8
 80006b8:	46de      	mov	lr, fp
 80006ba:	b5e0      	push	{r5, r6, r7, lr}
 80006bc:	0004      	movs	r4, r0
 80006be:	000d      	movs	r5, r1
 80006c0:	4692      	mov	sl, r2
 80006c2:	4699      	mov	r9, r3
 80006c4:	b083      	sub	sp, #12
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d830      	bhi.n	800072c <__udivmoddi4+0x7c>
 80006ca:	d02d      	beq.n	8000728 <__udivmoddi4+0x78>
 80006cc:	4649      	mov	r1, r9
 80006ce:	4650      	mov	r0, sl
 80006d0:	f002 ff58 	bl	8003584 <__clzdi2>
 80006d4:	0029      	movs	r1, r5
 80006d6:	0006      	movs	r6, r0
 80006d8:	0020      	movs	r0, r4
 80006da:	f002 ff53 	bl	8003584 <__clzdi2>
 80006de:	1a33      	subs	r3, r6, r0
 80006e0:	4698      	mov	r8, r3
 80006e2:	3b20      	subs	r3, #32
 80006e4:	d434      	bmi.n	8000750 <__udivmoddi4+0xa0>
 80006e6:	469b      	mov	fp, r3
 80006e8:	4653      	mov	r3, sl
 80006ea:	465a      	mov	r2, fp
 80006ec:	4093      	lsls	r3, r2
 80006ee:	4642      	mov	r2, r8
 80006f0:	001f      	movs	r7, r3
 80006f2:	4653      	mov	r3, sl
 80006f4:	4093      	lsls	r3, r2
 80006f6:	001e      	movs	r6, r3
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d83b      	bhi.n	8000774 <__udivmoddi4+0xc4>
 80006fc:	42af      	cmp	r7, r5
 80006fe:	d100      	bne.n	8000702 <__udivmoddi4+0x52>
 8000700:	e079      	b.n	80007f6 <__udivmoddi4+0x146>
 8000702:	465b      	mov	r3, fp
 8000704:	1ba4      	subs	r4, r4, r6
 8000706:	41bd      	sbcs	r5, r7
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <__udivmoddi4+0x5e>
 800070c:	e076      	b.n	80007fc <__udivmoddi4+0x14c>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2301      	movs	r3, #1
 8000718:	465a      	mov	r2, fp
 800071a:	4093      	lsls	r3, r2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	4642      	mov	r2, r8
 8000722:	4093      	lsls	r3, r2
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	e029      	b.n	800077c <__udivmoddi4+0xcc>
 8000728:	4282      	cmp	r2, r0
 800072a:	d9cf      	bls.n	80006cc <__udivmoddi4+0x1c>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <__udivmoddi4+0x8e>
 800073a:	601c      	str	r4, [r3, #0]
 800073c:	605d      	str	r5, [r3, #4]
 800073e:	9800      	ldr	r0, [sp, #0]
 8000740:	9901      	ldr	r1, [sp, #4]
 8000742:	b003      	add	sp, #12
 8000744:	bcf0      	pop	{r4, r5, r6, r7}
 8000746:	46bb      	mov	fp, r7
 8000748:	46b2      	mov	sl, r6
 800074a:	46a9      	mov	r9, r5
 800074c:	46a0      	mov	r8, r4
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	4642      	mov	r2, r8
 8000752:	469b      	mov	fp, r3
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	4652      	mov	r2, sl
 800075a:	40da      	lsrs	r2, r3
 800075c:	4641      	mov	r1, r8
 800075e:	0013      	movs	r3, r2
 8000760:	464a      	mov	r2, r9
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	4642      	mov	r2, r8
 8000768:	431f      	orrs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d9c3      	bls.n	80006fc <__udivmoddi4+0x4c>
 8000774:	2200      	movs	r2, #0
 8000776:	2300      	movs	r3, #0
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4643      	mov	r3, r8
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0d8      	beq.n	8000734 <__udivmoddi4+0x84>
 8000782:	07fb      	lsls	r3, r7, #31
 8000784:	0872      	lsrs	r2, r6, #1
 8000786:	431a      	orrs	r2, r3
 8000788:	4646      	mov	r6, r8
 800078a:	087b      	lsrs	r3, r7, #1
 800078c:	e00e      	b.n	80007ac <__udivmoddi4+0xfc>
 800078e:	42ab      	cmp	r3, r5
 8000790:	d101      	bne.n	8000796 <__udivmoddi4+0xe6>
 8000792:	42a2      	cmp	r2, r4
 8000794:	d80c      	bhi.n	80007b0 <__udivmoddi4+0x100>
 8000796:	1aa4      	subs	r4, r4, r2
 8000798:	419d      	sbcs	r5, r3
 800079a:	2001      	movs	r0, #1
 800079c:	1924      	adds	r4, r4, r4
 800079e:	416d      	adcs	r5, r5
 80007a0:	2100      	movs	r1, #0
 80007a2:	3e01      	subs	r6, #1
 80007a4:	1824      	adds	r4, r4, r0
 80007a6:	414d      	adcs	r5, r1
 80007a8:	2e00      	cmp	r6, #0
 80007aa:	d006      	beq.n	80007ba <__udivmoddi4+0x10a>
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d9ee      	bls.n	800078e <__udivmoddi4+0xde>
 80007b0:	3e01      	subs	r6, #1
 80007b2:	1924      	adds	r4, r4, r4
 80007b4:	416d      	adcs	r5, r5
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d1f8      	bne.n	80007ac <__udivmoddi4+0xfc>
 80007ba:	9800      	ldr	r0, [sp, #0]
 80007bc:	9901      	ldr	r1, [sp, #4]
 80007be:	465b      	mov	r3, fp
 80007c0:	1900      	adds	r0, r0, r4
 80007c2:	4169      	adcs	r1, r5
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db24      	blt.n	8000812 <__udivmoddi4+0x162>
 80007c8:	002b      	movs	r3, r5
 80007ca:	465a      	mov	r2, fp
 80007cc:	4644      	mov	r4, r8
 80007ce:	40d3      	lsrs	r3, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	40e2      	lsrs	r2, r4
 80007d4:	001c      	movs	r4, r3
 80007d6:	465b      	mov	r3, fp
 80007d8:	0015      	movs	r5, r2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db2a      	blt.n	8000834 <__udivmoddi4+0x184>
 80007de:	0026      	movs	r6, r4
 80007e0:	409e      	lsls	r6, r3
 80007e2:	0033      	movs	r3, r6
 80007e4:	0026      	movs	r6, r4
 80007e6:	4647      	mov	r7, r8
 80007e8:	40be      	lsls	r6, r7
 80007ea:	0032      	movs	r2, r6
 80007ec:	1a80      	subs	r0, r0, r2
 80007ee:	4199      	sbcs	r1, r3
 80007f0:	9000      	str	r0, [sp, #0]
 80007f2:	9101      	str	r1, [sp, #4]
 80007f4:	e79e      	b.n	8000734 <__udivmoddi4+0x84>
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	d8bc      	bhi.n	8000774 <__udivmoddi4+0xc4>
 80007fa:	e782      	b.n	8000702 <__udivmoddi4+0x52>
 80007fc:	4642      	mov	r2, r8
 80007fe:	2320      	movs	r3, #32
 8000800:	2100      	movs	r1, #0
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	9100      	str	r1, [sp, #0]
 8000808:	9201      	str	r2, [sp, #4]
 800080a:	2201      	movs	r2, #1
 800080c:	40da      	lsrs	r2, r3
 800080e:	9201      	str	r2, [sp, #4]
 8000810:	e785      	b.n	800071e <__udivmoddi4+0x6e>
 8000812:	4642      	mov	r2, r8
 8000814:	2320      	movs	r3, #32
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	002a      	movs	r2, r5
 800081a:	4646      	mov	r6, r8
 800081c:	409a      	lsls	r2, r3
 800081e:	0023      	movs	r3, r4
 8000820:	40f3      	lsrs	r3, r6
 8000822:	4644      	mov	r4, r8
 8000824:	4313      	orrs	r3, r2
 8000826:	002a      	movs	r2, r5
 8000828:	40e2      	lsrs	r2, r4
 800082a:	001c      	movs	r4, r3
 800082c:	465b      	mov	r3, fp
 800082e:	0015      	movs	r5, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	dad4      	bge.n	80007de <__udivmoddi4+0x12e>
 8000834:	4642      	mov	r2, r8
 8000836:	002f      	movs	r7, r5
 8000838:	2320      	movs	r3, #32
 800083a:	0026      	movs	r6, r4
 800083c:	4097      	lsls	r7, r2
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	40de      	lsrs	r6, r3
 8000842:	003b      	movs	r3, r7
 8000844:	4333      	orrs	r3, r6
 8000846:	e7cd      	b.n	80007e4 <__udivmoddi4+0x134>

08000848 <__aeabi_fadd>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	46ce      	mov	lr, r9
 800084c:	4647      	mov	r7, r8
 800084e:	0243      	lsls	r3, r0, #9
 8000850:	0a5a      	lsrs	r2, r3, #9
 8000852:	024e      	lsls	r6, r1, #9
 8000854:	0045      	lsls	r5, r0, #1
 8000856:	0fc4      	lsrs	r4, r0, #31
 8000858:	0048      	lsls	r0, r1, #1
 800085a:	4691      	mov	r9, r2
 800085c:	0e2d      	lsrs	r5, r5, #24
 800085e:	0a72      	lsrs	r2, r6, #9
 8000860:	0e00      	lsrs	r0, r0, #24
 8000862:	4694      	mov	ip, r2
 8000864:	b580      	push	{r7, lr}
 8000866:	099b      	lsrs	r3, r3, #6
 8000868:	0fc9      	lsrs	r1, r1, #31
 800086a:	09b6      	lsrs	r6, r6, #6
 800086c:	1a2a      	subs	r2, r5, r0
 800086e:	428c      	cmp	r4, r1
 8000870:	d021      	beq.n	80008b6 <__aeabi_fadd+0x6e>
 8000872:	2a00      	cmp	r2, #0
 8000874:	dd0d      	ble.n	8000892 <__aeabi_fadd+0x4a>
 8000876:	2800      	cmp	r0, #0
 8000878:	d12d      	bne.n	80008d6 <__aeabi_fadd+0x8e>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x38>
 800087e:	e08d      	b.n	800099c <__aeabi_fadd+0x154>
 8000880:	1e51      	subs	r1, r2, #1
 8000882:	2a01      	cmp	r2, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x40>
 8000886:	e11d      	b.n	8000ac4 <__aeabi_fadd+0x27c>
 8000888:	2aff      	cmp	r2, #255	@ 0xff
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x46>
 800088c:	e0ab      	b.n	80009e6 <__aeabi_fadd+0x19e>
 800088e:	000a      	movs	r2, r1
 8000890:	e027      	b.n	80008e2 <__aeabi_fadd+0x9a>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d04d      	beq.n	8000932 <__aeabi_fadd+0xea>
 8000896:	1b42      	subs	r2, r0, r5
 8000898:	2d00      	cmp	r5, #0
 800089a:	d000      	beq.n	800089e <__aeabi_fadd+0x56>
 800089c:	e0cc      	b.n	8000a38 <__aeabi_fadd+0x1f0>
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x5c>
 80008a2:	e079      	b.n	8000998 <__aeabi_fadd+0x150>
 80008a4:	1e54      	subs	r4, r2, #1
 80008a6:	2a01      	cmp	r2, #1
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x64>
 80008aa:	e128      	b.n	8000afe <__aeabi_fadd+0x2b6>
 80008ac:	2aff      	cmp	r2, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0x6a>
 80008b0:	e097      	b.n	80009e2 <__aeabi_fadd+0x19a>
 80008b2:	0022      	movs	r2, r4
 80008b4:	e0c5      	b.n	8000a42 <__aeabi_fadd+0x1fa>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_fadd+0x74>
 80008ba:	e096      	b.n	80009ea <__aeabi_fadd+0x1a2>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d04f      	beq.n	8000960 <__aeabi_fadd+0x118>
 80008c0:	2dff      	cmp	r5, #255	@ 0xff
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x7e>
 80008c4:	e08f      	b.n	80009e6 <__aeabi_fadd+0x19e>
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	04c9      	lsls	r1, r1, #19
 80008ca:	430e      	orrs	r6, r1
 80008cc:	2a1b      	cmp	r2, #27
 80008ce:	dd51      	ble.n	8000974 <__aeabi_fadd+0x12c>
 80008d0:	002a      	movs	r2, r5
 80008d2:	3301      	adds	r3, #1
 80008d4:	e018      	b.n	8000908 <__aeabi_fadd+0xc0>
 80008d6:	2dff      	cmp	r5, #255	@ 0xff
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x94>
 80008da:	e084      	b.n	80009e6 <__aeabi_fadd+0x19e>
 80008dc:	2180      	movs	r1, #128	@ 0x80
 80008de:	04c9      	lsls	r1, r1, #19
 80008e0:	430e      	orrs	r6, r1
 80008e2:	2101      	movs	r1, #1
 80008e4:	2a1b      	cmp	r2, #27
 80008e6:	dc08      	bgt.n	80008fa <__aeabi_fadd+0xb2>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	4311      	orrs	r1, r2
 80008fa:	1a5b      	subs	r3, r3, r1
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d459      	bmi.n	80009b4 <__aeabi_fadd+0x16c>
 8000900:	2107      	movs	r1, #7
 8000902:	002a      	movs	r2, r5
 8000904:	4019      	ands	r1, r3
 8000906:	d049      	beq.n	800099c <__aeabi_fadd+0x154>
 8000908:	210f      	movs	r1, #15
 800090a:	4019      	ands	r1, r3
 800090c:	2904      	cmp	r1, #4
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0xca>
 8000910:	3304      	adds	r3, #4
 8000912:	0159      	lsls	r1, r3, #5
 8000914:	d542      	bpl.n	800099c <__aeabi_fadd+0x154>
 8000916:	1c50      	adds	r0, r2, #1
 8000918:	2afe      	cmp	r2, #254	@ 0xfe
 800091a:	d03a      	beq.n	8000992 <__aeabi_fadd+0x14a>
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	b2c0      	uxtb	r0, r0
 8000920:	0a5b      	lsrs	r3, r3, #9
 8000922:	05c0      	lsls	r0, r0, #23
 8000924:	4318      	orrs	r0, r3
 8000926:	07e4      	lsls	r4, r4, #31
 8000928:	4320      	orrs	r0, r4
 800092a:	bcc0      	pop	{r6, r7}
 800092c:	46b9      	mov	r9, r7
 800092e:	46b0      	mov	r8, r6
 8000930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000932:	20fe      	movs	r0, #254	@ 0xfe
 8000934:	4680      	mov	r8, r0
 8000936:	1c6f      	adds	r7, r5, #1
 8000938:	0038      	movs	r0, r7
 800093a:	4647      	mov	r7, r8
 800093c:	4207      	tst	r7, r0
 800093e:	d000      	beq.n	8000942 <__aeabi_fadd+0xfa>
 8000940:	e08e      	b.n	8000a60 <__aeabi_fadd+0x218>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x100>
 8000946:	e0b4      	b.n	8000ab2 <__aeabi_fadd+0x26a>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d100      	bne.n	800094e <__aeabi_fadd+0x106>
 800094c:	e0db      	b.n	8000b06 <__aeabi_fadd+0x2be>
 800094e:	2e00      	cmp	r6, #0
 8000950:	d06c      	beq.n	8000a2c <__aeabi_fadd+0x1e4>
 8000952:	1b98      	subs	r0, r3, r6
 8000954:	0145      	lsls	r5, r0, #5
 8000956:	d400      	bmi.n	800095a <__aeabi_fadd+0x112>
 8000958:	e0f7      	b.n	8000b4a <__aeabi_fadd+0x302>
 800095a:	000c      	movs	r4, r1
 800095c:	1af3      	subs	r3, r6, r3
 800095e:	e03d      	b.n	80009dc <__aeabi_fadd+0x194>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d01b      	beq.n	800099c <__aeabi_fadd+0x154>
 8000964:	1e51      	subs	r1, r2, #1
 8000966:	2a01      	cmp	r2, #1
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x124>
 800096a:	e082      	b.n	8000a72 <__aeabi_fadd+0x22a>
 800096c:	2aff      	cmp	r2, #255	@ 0xff
 800096e:	d03a      	beq.n	80009e6 <__aeabi_fadd+0x19e>
 8000970:	000a      	movs	r2, r1
 8000972:	e7ab      	b.n	80008cc <__aeabi_fadd+0x84>
 8000974:	0031      	movs	r1, r6
 8000976:	2020      	movs	r0, #32
 8000978:	40d1      	lsrs	r1, r2
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	4096      	lsls	r6, r2
 800097e:	0032      	movs	r2, r6
 8000980:	1e50      	subs	r0, r2, #1
 8000982:	4182      	sbcs	r2, r0
 8000984:	430a      	orrs	r2, r1
 8000986:	189b      	adds	r3, r3, r2
 8000988:	015a      	lsls	r2, r3, #5
 800098a:	d5b9      	bpl.n	8000900 <__aeabi_fadd+0xb8>
 800098c:	1c6a      	adds	r2, r5, #1
 800098e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000990:	d175      	bne.n	8000a7e <__aeabi_fadd+0x236>
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	2300      	movs	r3, #0
 8000996:	e7c4      	b.n	8000922 <__aeabi_fadd+0xda>
 8000998:	000c      	movs	r4, r1
 800099a:	0033      	movs	r3, r6
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	2aff      	cmp	r2, #255	@ 0xff
 80009a0:	d146      	bne.n	8000a30 <__aeabi_fadd+0x1e8>
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f5      	beq.n	8000992 <__aeabi_fadd+0x14a>
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	03d2      	lsls	r2, r2, #15
 80009aa:	4313      	orrs	r3, r2
 80009ac:	025b      	lsls	r3, r3, #9
 80009ae:	20ff      	movs	r0, #255	@ 0xff
 80009b0:	0a5b      	lsrs	r3, r3, #9
 80009b2:	e7b6      	b.n	8000922 <__aeabi_fadd+0xda>
 80009b4:	019f      	lsls	r7, r3, #6
 80009b6:	09bf      	lsrs	r7, r7, #6
 80009b8:	0038      	movs	r0, r7
 80009ba:	f7ff fdd7 	bl	800056c <__clzsi2>
 80009be:	3805      	subs	r0, #5
 80009c0:	4087      	lsls	r7, r0
 80009c2:	4285      	cmp	r5, r0
 80009c4:	dc24      	bgt.n	8000a10 <__aeabi_fadd+0x1c8>
 80009c6:	003b      	movs	r3, r7
 80009c8:	2120      	movs	r1, #32
 80009ca:	1b42      	subs	r2, r0, r5
 80009cc:	3201      	adds	r2, #1
 80009ce:	40d3      	lsrs	r3, r2
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	4097      	lsls	r7, r2
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	4197      	sbcs	r7, r2
 80009d8:	2200      	movs	r2, #0
 80009da:	433b      	orrs	r3, r7
 80009dc:	0759      	lsls	r1, r3, #29
 80009de:	d193      	bne.n	8000908 <__aeabi_fadd+0xc0>
 80009e0:	e797      	b.n	8000912 <__aeabi_fadd+0xca>
 80009e2:	000c      	movs	r4, r1
 80009e4:	0033      	movs	r3, r6
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	e7db      	b.n	80009a2 <__aeabi_fadd+0x15a>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d014      	beq.n	8000a18 <__aeabi_fadd+0x1d0>
 80009ee:	1b42      	subs	r2, r0, r5
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d14b      	bne.n	8000a8c <__aeabi_fadd+0x244>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0d0      	beq.n	800099a <__aeabi_fadd+0x152>
 80009f8:	1e51      	subs	r1, r2, #1
 80009fa:	2a01      	cmp	r2, #1
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fadd+0x1b8>
 80009fe:	e09e      	b.n	8000b3e <__aeabi_fadd+0x2f6>
 8000a00:	2aff      	cmp	r2, #255	@ 0xff
 8000a02:	d0ef      	beq.n	80009e4 <__aeabi_fadd+0x19c>
 8000a04:	000a      	movs	r2, r1
 8000a06:	2a1b      	cmp	r2, #27
 8000a08:	dd5f      	ble.n	8000aca <__aeabi_fadd+0x282>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	1c73      	adds	r3, r6, #1
 8000a0e:	e77b      	b.n	8000908 <__aeabi_fadd+0xc0>
 8000a10:	4b50      	ldr	r3, [pc, #320]	@ (8000b54 <__aeabi_fadd+0x30c>)
 8000a12:	1a2a      	subs	r2, r5, r0
 8000a14:	403b      	ands	r3, r7
 8000a16:	e7e1      	b.n	80009dc <__aeabi_fadd+0x194>
 8000a18:	21fe      	movs	r1, #254	@ 0xfe
 8000a1a:	1c6a      	adds	r2, r5, #1
 8000a1c:	4211      	tst	r1, r2
 8000a1e:	d13b      	bne.n	8000a98 <__aeabi_fadd+0x250>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d15d      	bne.n	8000ae0 <__aeabi_fadd+0x298>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d07f      	beq.n	8000b28 <__aeabi_fadd+0x2e0>
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d17f      	bne.n	8000b2c <__aeabi_fadd+0x2e4>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	0a5b      	lsrs	r3, r3, #9
 8000a34:	b2d0      	uxtb	r0, r2
 8000a36:	e774      	b.n	8000922 <__aeabi_fadd+0xda>
 8000a38:	28ff      	cmp	r0, #255	@ 0xff
 8000a3a:	d0d2      	beq.n	80009e2 <__aeabi_fadd+0x19a>
 8000a3c:	2480      	movs	r4, #128	@ 0x80
 8000a3e:	04e4      	lsls	r4, r4, #19
 8000a40:	4323      	orrs	r3, r4
 8000a42:	2401      	movs	r4, #1
 8000a44:	2a1b      	cmp	r2, #27
 8000a46:	dc07      	bgt.n	8000a58 <__aeabi_fadd+0x210>
 8000a48:	001c      	movs	r4, r3
 8000a4a:	2520      	movs	r5, #32
 8000a4c:	40d4      	lsrs	r4, r2
 8000a4e:	1aaa      	subs	r2, r5, r2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	4193      	sbcs	r3, r2
 8000a56:	431c      	orrs	r4, r3
 8000a58:	1b33      	subs	r3, r6, r4
 8000a5a:	0005      	movs	r5, r0
 8000a5c:	000c      	movs	r4, r1
 8000a5e:	e74d      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000a60:	1b9f      	subs	r7, r3, r6
 8000a62:	017a      	lsls	r2, r7, #5
 8000a64:	d422      	bmi.n	8000aac <__aeabi_fadd+0x264>
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d1a6      	bne.n	80009b8 <__aeabi_fadd+0x170>
 8000a6a:	2400      	movs	r4, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e757      	b.n	8000922 <__aeabi_fadd+0xda>
 8000a72:	199b      	adds	r3, r3, r6
 8000a74:	2501      	movs	r5, #1
 8000a76:	3201      	adds	r2, #1
 8000a78:	0159      	lsls	r1, r3, #5
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_fadd+0x236>
 8000a7c:	e740      	b.n	8000900 <__aeabi_fadd+0xb8>
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4835      	ldr	r0, [pc, #212]	@ (8000b58 <__aeabi_fadd+0x310>)
 8000a82:	4019      	ands	r1, r3
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	4003      	ands	r3, r0
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	e7a7      	b.n	80009dc <__aeabi_fadd+0x194>
 8000a8c:	28ff      	cmp	r0, #255	@ 0xff
 8000a8e:	d0a9      	beq.n	80009e4 <__aeabi_fadd+0x19c>
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	04c9      	lsls	r1, r1, #19
 8000a94:	430b      	orrs	r3, r1
 8000a96:	e7b6      	b.n	8000a06 <__aeabi_fadd+0x1be>
 8000a98:	2aff      	cmp	r2, #255	@ 0xff
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fadd+0x256>
 8000a9c:	e779      	b.n	8000992 <__aeabi_fadd+0x14a>
 8000a9e:	199b      	adds	r3, r3, r6
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	0759      	lsls	r1, r3, #29
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fadd+0x260>
 8000aa6:	e72f      	b.n	8000908 <__aeabi_fadd+0xc0>
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	e7c1      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000aac:	000c      	movs	r4, r1
 8000aae:	1af7      	subs	r7, r6, r3
 8000ab0:	e782      	b.n	80009b8 <__aeabi_fadd+0x170>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d12c      	bne.n	8000b10 <__aeabi_fadd+0x2c8>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d193      	bne.n	80009e2 <__aeabi_fadd+0x19a>
 8000aba:	2380      	movs	r3, #128	@ 0x80
 8000abc:	2400      	movs	r4, #0
 8000abe:	20ff      	movs	r0, #255	@ 0xff
 8000ac0:	03db      	lsls	r3, r3, #15
 8000ac2:	e72e      	b.n	8000922 <__aeabi_fadd+0xda>
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	1b9b      	subs	r3, r3, r6
 8000ac8:	e718      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000aca:	0019      	movs	r1, r3
 8000acc:	2520      	movs	r5, #32
 8000ace:	40d1      	lsrs	r1, r2
 8000ad0:	1aaa      	subs	r2, r5, r2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	4193      	sbcs	r3, r2
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	0005      	movs	r5, r0
 8000adc:	199b      	adds	r3, r3, r6
 8000ade:	e753      	b.n	8000988 <__aeabi_fadd+0x140>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fadd+0x29e>
 8000ae4:	e77e      	b.n	80009e4 <__aeabi_fadd+0x19c>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fadd+0x2a4>
 8000aea:	e77c      	b.n	80009e6 <__aeabi_fadd+0x19e>
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4591      	cmp	r9, r2
 8000af2:	d302      	bcc.n	8000afa <__aeabi_fadd+0x2b2>
 8000af4:	4594      	cmp	ip, r2
 8000af6:	d200      	bcs.n	8000afa <__aeabi_fadd+0x2b2>
 8000af8:	0033      	movs	r3, r6
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	e753      	b.n	80009a6 <__aeabi_fadd+0x15e>
 8000afe:	000c      	movs	r4, r1
 8000b00:	1af3      	subs	r3, r6, r3
 8000b02:	3501      	adds	r5, #1
 8000b04:	e6fa      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d0af      	beq.n	8000a6a <__aeabi_fadd+0x222>
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e78d      	b.n	8000a2c <__aeabi_fadd+0x1e4>
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x2ce>
 8000b14:	e767      	b.n	80009e6 <__aeabi_fadd+0x19e>
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	03d2      	lsls	r2, r2, #15
 8000b1a:	4591      	cmp	r9, r2
 8000b1c:	d3ed      	bcc.n	8000afa <__aeabi_fadd+0x2b2>
 8000b1e:	4594      	cmp	ip, r2
 8000b20:	d2eb      	bcs.n	8000afa <__aeabi_fadd+0x2b2>
 8000b22:	000c      	movs	r4, r1
 8000b24:	0033      	movs	r3, r6
 8000b26:	e7e8      	b.n	8000afa <__aeabi_fadd+0x2b2>
 8000b28:	0033      	movs	r3, r6
 8000b2a:	e77f      	b.n	8000a2c <__aeabi_fadd+0x1e4>
 8000b2c:	199b      	adds	r3, r3, r6
 8000b2e:	2200      	movs	r2, #0
 8000b30:	0159      	lsls	r1, r3, #5
 8000b32:	d5b9      	bpl.n	8000aa8 <__aeabi_fadd+0x260>
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <__aeabi_fadd+0x30c>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	e778      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000b3e:	199b      	adds	r3, r3, r6
 8000b40:	3201      	adds	r2, #1
 8000b42:	3501      	adds	r5, #1
 8000b44:	0159      	lsls	r1, r3, #5
 8000b46:	d49a      	bmi.n	8000a7e <__aeabi_fadd+0x236>
 8000b48:	e6da      	b.n	8000900 <__aeabi_fadd+0xb8>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d08d      	beq.n	8000a6a <__aeabi_fadd+0x222>
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	e76e      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	fbffffff 	.word	0xfbffffff
 8000b58:	7dffffff 	.word	0x7dffffff

08000b5c <__aeabi_fdiv>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	0244      	lsls	r4, r0, #9
 8000b66:	b5c0      	push	{r6, r7, lr}
 8000b68:	0047      	lsls	r7, r0, #1
 8000b6a:	1c0e      	adds	r6, r1, #0
 8000b6c:	0a64      	lsrs	r4, r4, #9
 8000b6e:	0e3f      	lsrs	r7, r7, #24
 8000b70:	0fc5      	lsrs	r5, r0, #31
 8000b72:	2f00      	cmp	r7, #0
 8000b74:	d03c      	beq.n	8000bf0 <__aeabi_fdiv+0x94>
 8000b76:	2fff      	cmp	r7, #255	@ 0xff
 8000b78:	d042      	beq.n	8000c00 <__aeabi_fdiv+0xa4>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	4699      	mov	r9, r3
 8000b80:	469a      	mov	sl, r3
 8000b82:	00e4      	lsls	r4, r4, #3
 8000b84:	04d2      	lsls	r2, r2, #19
 8000b86:	4314      	orrs	r4, r2
 8000b88:	3f7f      	subs	r7, #127	@ 0x7f
 8000b8a:	0273      	lsls	r3, r6, #9
 8000b8c:	0a5b      	lsrs	r3, r3, #9
 8000b8e:	4698      	mov	r8, r3
 8000b90:	0073      	lsls	r3, r6, #1
 8000b92:	0e1b      	lsrs	r3, r3, #24
 8000b94:	0ff6      	lsrs	r6, r6, #31
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d01b      	beq.n	8000bd2 <__aeabi_fdiv+0x76>
 8000b9a:	2bff      	cmp	r3, #255	@ 0xff
 8000b9c:	d013      	beq.n	8000bc6 <__aeabi_fdiv+0x6a>
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	04c9      	lsls	r1, r1, #19
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	4688      	mov	r8, r1
 8000baa:	2000      	movs	r0, #0
 8000bac:	3b7f      	subs	r3, #127	@ 0x7f
 8000bae:	0029      	movs	r1, r5
 8000bb0:	1aff      	subs	r7, r7, r3
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	4071      	eors	r1, r6
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d900      	bls.n	8000bbe <__aeabi_fdiv+0x62>
 8000bbc:	e0b5      	b.n	8000d2a <__aeabi_fdiv+0x1ce>
 8000bbe:	4a74      	ldr	r2, [pc, #464]	@ (8000d90 <__aeabi_fdiv+0x234>)
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	58d3      	ldr	r3, [r2, r3]
 8000bc4:	469f      	mov	pc, r3
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d13f      	bne.n	8000c4c <__aeabi_fdiv+0xf0>
 8000bcc:	3fff      	subs	r7, #255	@ 0xff
 8000bce:	3302      	adds	r3, #2
 8000bd0:	e003      	b.n	8000bda <__aeabi_fdiv+0x7e>
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d12d      	bne.n	8000c34 <__aeabi_fdiv+0xd8>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	0029      	movs	r1, r5
 8000bdc:	464a      	mov	r2, r9
 8000bde:	4071      	eors	r1, r6
 8000be0:	b2c9      	uxtb	r1, r1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	2a0e      	cmp	r2, #14
 8000be6:	d838      	bhi.n	8000c5a <__aeabi_fdiv+0xfe>
 8000be8:	486a      	ldr	r0, [pc, #424]	@ (8000d94 <__aeabi_fdiv+0x238>)
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	5882      	ldr	r2, [r0, r2]
 8000bee:	4697      	mov	pc, r2
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d113      	bne.n	8000c1c <__aeabi_fdiv+0xc0>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	2700      	movs	r7, #0
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7c4      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d105      	bne.n	8000c10 <__aeabi_fdiv+0xb4>
 8000c04:	2308      	movs	r3, #8
 8000c06:	4699      	mov	r9, r3
 8000c08:	3b06      	subs	r3, #6
 8000c0a:	27ff      	movs	r7, #255	@ 0xff
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	e7bc      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	27ff      	movs	r7, #255	@ 0xff
 8000c18:	469a      	mov	sl, r3
 8000c1a:	e7b6      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f7ff fca5 	bl	800056c <__clzsi2>
 8000c22:	2776      	movs	r7, #118	@ 0x76
 8000c24:	1f43      	subs	r3, r0, #5
 8000c26:	409c      	lsls	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	427f      	negs	r7, r7
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	469a      	mov	sl, r3
 8000c30:	1a3f      	subs	r7, r7, r0
 8000c32:	e7aa      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c34:	4640      	mov	r0, r8
 8000c36:	f7ff fc99 	bl	800056c <__clzsi2>
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	1f43      	subs	r3, r0, #5
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	2376      	movs	r3, #118	@ 0x76
 8000c42:	425b      	negs	r3, r3
 8000c44:	1a1b      	subs	r3, r3, r0
 8000c46:	4690      	mov	r8, r2
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e7b0      	b.n	8000bae <__aeabi_fdiv+0x52>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	464a      	mov	r2, r9
 8000c50:	431a      	orrs	r2, r3
 8000c52:	4691      	mov	r9, r2
 8000c54:	2003      	movs	r0, #3
 8000c56:	33fc      	adds	r3, #252	@ 0xfc
 8000c58:	e7a9      	b.n	8000bae <__aeabi_fdiv+0x52>
 8000c5a:	000d      	movs	r5, r1
 8000c5c:	20ff      	movs	r0, #255	@ 0xff
 8000c5e:	2200      	movs	r2, #0
 8000c60:	05c0      	lsls	r0, r0, #23
 8000c62:	07ed      	lsls	r5, r5, #31
 8000c64:	4310      	orrs	r0, r2
 8000c66:	4328      	orrs	r0, r5
 8000c68:	bce0      	pop	{r5, r6, r7}
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	46b1      	mov	r9, r6
 8000c6e:	46a8      	mov	r8, r5
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	000d      	movs	r5, r1
 8000c74:	2000      	movs	r0, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	e7f2      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d0ed      	beq.n	8000c5c <__aeabi_fdiv+0x100>
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d033      	beq.n	8000cec <__aeabi_fdiv+0x190>
 8000c84:	46a0      	mov	r8, r4
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d105      	bne.n	8000c96 <__aeabi_fdiv+0x13a>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e7e7      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000c90:	0035      	movs	r5, r6
 8000c92:	2803      	cmp	r0, #3
 8000c94:	d07a      	beq.n	8000d8c <__aeabi_fdiv+0x230>
 8000c96:	003b      	movs	r3, r7
 8000c98:	337f      	adds	r3, #127	@ 0x7f
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dd2d      	ble.n	8000cfa <__aeabi_fdiv+0x19e>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0752      	lsls	r2, r2, #29
 8000ca2:	d007      	beq.n	8000cb4 <__aeabi_fdiv+0x158>
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	400a      	ands	r2, r1
 8000caa:	2a04      	cmp	r2, #4
 8000cac:	d002      	beq.n	8000cb4 <__aeabi_fdiv+0x158>
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	44e0      	add	r8, ip
 8000cb4:	4642      	mov	r2, r8
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	d505      	bpl.n	8000cc6 <__aeabi_fdiv+0x16a>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <__aeabi_fdiv+0x23c>)
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	3380      	adds	r3, #128	@ 0x80
 8000cc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cc8:	dcc8      	bgt.n	8000c5c <__aeabi_fdiv+0x100>
 8000cca:	4642      	mov	r2, r8
 8000ccc:	0192      	lsls	r2, r2, #6
 8000cce:	0a52      	lsrs	r2, r2, #9
 8000cd0:	b2d8      	uxtb	r0, r3
 8000cd2:	e7c5      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	03d2      	lsls	r2, r2, #15
 8000cdc:	e7c0      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cde:	2280      	movs	r2, #128	@ 0x80
 8000ce0:	03d2      	lsls	r2, r2, #15
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d002      	beq.n	8000cec <__aeabi_fdiv+0x190>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	4213      	tst	r3, r2
 8000cea:	d049      	beq.n	8000d80 <__aeabi_fdiv+0x224>
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	03d2      	lsls	r2, r2, #15
 8000cf0:	4322      	orrs	r2, r4
 8000cf2:	0252      	lsls	r2, r2, #9
 8000cf4:	20ff      	movs	r0, #255	@ 0xff
 8000cf6:	0a52      	lsrs	r2, r2, #9
 8000cf8:	e7b2      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b1b      	cmp	r3, #27
 8000d00:	dcc3      	bgt.n	8000c8a <__aeabi_fdiv+0x12e>
 8000d02:	4642      	mov	r2, r8
 8000d04:	40da      	lsrs	r2, r3
 8000d06:	4643      	mov	r3, r8
 8000d08:	379e      	adds	r7, #158	@ 0x9e
 8000d0a:	40bb      	lsls	r3, r7
 8000d0c:	1e59      	subs	r1, r3, #1
 8000d0e:	418b      	sbcs	r3, r1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	0753      	lsls	r3, r2, #29
 8000d14:	d004      	beq.n	8000d20 <__aeabi_fdiv+0x1c4>
 8000d16:	230f      	movs	r3, #15
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fdiv+0x1c4>
 8000d1e:	3204      	adds	r2, #4
 8000d20:	0153      	lsls	r3, r2, #5
 8000d22:	d529      	bpl.n	8000d78 <__aeabi_fdiv+0x21c>
 8000d24:	2001      	movs	r0, #1
 8000d26:	2200      	movs	r2, #0
 8000d28:	e79a      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	0163      	lsls	r3, r4, #5
 8000d2e:	0155      	lsls	r5, r2, #5
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d215      	bcs.n	8000d60 <__aeabi_fdiv+0x204>
 8000d34:	201b      	movs	r0, #27
 8000d36:	2200      	movs	r2, #0
 8000d38:	3f01      	subs	r7, #1
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	001c      	movs	r4, r3
 8000d3e:	0052      	lsls	r2, r2, #1
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	db01      	blt.n	8000d4a <__aeabi_fdiv+0x1ee>
 8000d46:	429d      	cmp	r5, r3
 8000d48:	d801      	bhi.n	8000d4e <__aeabi_fdiv+0x1f2>
 8000d4a:	1b5b      	subs	r3, r3, r5
 8000d4c:	4332      	orrs	r2, r6
 8000d4e:	3801      	subs	r0, #1
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d1f3      	bne.n	8000d3c <__aeabi_fdiv+0x1e0>
 8000d54:	1e58      	subs	r0, r3, #1
 8000d56:	4183      	sbcs	r3, r0
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	000d      	movs	r5, r1
 8000d5e:	e79a      	b.n	8000c96 <__aeabi_fdiv+0x13a>
 8000d60:	201a      	movs	r0, #26
 8000d62:	2201      	movs	r2, #1
 8000d64:	1b5b      	subs	r3, r3, r5
 8000d66:	e7e8      	b.n	8000d3a <__aeabi_fdiv+0x1de>
 8000d68:	3b02      	subs	r3, #2
 8000d6a:	425a      	negs	r2, r3
 8000d6c:	4153      	adcs	r3, r2
 8000d6e:	425b      	negs	r3, r3
 8000d70:	0035      	movs	r5, r6
 8000d72:	2200      	movs	r2, #0
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	e773      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d78:	0192      	lsls	r2, r2, #6
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	0a52      	lsrs	r2, r2, #9
 8000d7e:	e76f      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d80:	431a      	orrs	r2, r3
 8000d82:	0252      	lsls	r2, r2, #9
 8000d84:	0035      	movs	r5, r6
 8000d86:	20ff      	movs	r0, #255	@ 0xff
 8000d88:	0a52      	lsrs	r2, r2, #9
 8000d8a:	e769      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d8c:	4644      	mov	r4, r8
 8000d8e:	e7ad      	b.n	8000cec <__aeabi_fdiv+0x190>
 8000d90:	08015270 	.word	0x08015270
 8000d94:	080152b0 	.word	0x080152b0
 8000d98:	f7ffffff 	.word	0xf7ffffff

08000d9c <__eqsf2>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	024e      	lsls	r6, r1, #9
 8000da2:	004c      	lsls	r4, r1, #1
 8000da4:	0245      	lsls	r5, r0, #9
 8000da6:	0a6d      	lsrs	r5, r5, #9
 8000da8:	0e12      	lsrs	r2, r2, #24
 8000daa:	0fc3      	lsrs	r3, r0, #31
 8000dac:	0a76      	lsrs	r6, r6, #9
 8000dae:	0e24      	lsrs	r4, r4, #24
 8000db0:	0fc9      	lsrs	r1, r1, #31
 8000db2:	2aff      	cmp	r2, #255	@ 0xff
 8000db4:	d010      	beq.n	8000dd8 <__eqsf2+0x3c>
 8000db6:	2cff      	cmp	r4, #255	@ 0xff
 8000db8:	d00c      	beq.n	8000dd4 <__eqsf2+0x38>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	42a2      	cmp	r2, r4
 8000dbe:	d10a      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dc0:	42b5      	cmp	r5, r6
 8000dc2:	d108      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d00f      	beq.n	8000de8 <__eqsf2+0x4c>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d104      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dcc:	0028      	movs	r0, r5
 8000dce:	1e43      	subs	r3, r0, #1
 8000dd0:	4198      	sbcs	r0, r3
 8000dd2:	e000      	b.n	8000dd6 <__eqsf2+0x3a>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	2001      	movs	r0, #1
 8000dda:	2cff      	cmp	r4, #255	@ 0xff
 8000ddc:	d1fb      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dde:	4335      	orrs	r5, r6
 8000de0:	d1f9      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000de2:	404b      	eors	r3, r1
 8000de4:	0018      	movs	r0, r3
 8000de6:	e7f6      	b.n	8000dd6 <__eqsf2+0x3a>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7f4      	b.n	8000dd6 <__eqsf2+0x3a>

08000dec <__gesf2>:
 8000dec:	b530      	push	{r4, r5, lr}
 8000dee:	0042      	lsls	r2, r0, #1
 8000df0:	0244      	lsls	r4, r0, #9
 8000df2:	024d      	lsls	r5, r1, #9
 8000df4:	0fc3      	lsrs	r3, r0, #31
 8000df6:	0048      	lsls	r0, r1, #1
 8000df8:	0a64      	lsrs	r4, r4, #9
 8000dfa:	0e12      	lsrs	r2, r2, #24
 8000dfc:	0a6d      	lsrs	r5, r5, #9
 8000dfe:	0e00      	lsrs	r0, r0, #24
 8000e00:	0fc9      	lsrs	r1, r1, #31
 8000e02:	2aff      	cmp	r2, #255	@ 0xff
 8000e04:	d019      	beq.n	8000e3a <__gesf2+0x4e>
 8000e06:	28ff      	cmp	r0, #255	@ 0xff
 8000e08:	d00b      	beq.n	8000e22 <__gesf2+0x36>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d11e      	bne.n	8000e4c <__gesf2+0x60>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d10b      	bne.n	8000e2a <__gesf2+0x3e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d027      	beq.n	8000e66 <__gesf2+0x7a>
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d134      	bne.n	8000e84 <__gesf2+0x98>
 8000e1a:	2900      	cmp	r1, #0
 8000e1c:	d02f      	beq.n	8000e7e <__gesf2+0x92>
 8000e1e:	0008      	movs	r0, r1
 8000e20:	bd30      	pop	{r4, r5, pc}
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d128      	bne.n	8000e78 <__gesf2+0x8c>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d101      	bne.n	8000e2e <__gesf2+0x42>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d0f5      	beq.n	8000e1a <__gesf2+0x2e>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d107      	bne.n	8000e42 <__gesf2+0x56>
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d023      	beq.n	8000e7e <__gesf2+0x92>
 8000e36:	0018      	movs	r0, r3
 8000e38:	e7f2      	b.n	8000e20 <__gesf2+0x34>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d11c      	bne.n	8000e78 <__gesf2+0x8c>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d014      	beq.n	8000e6c <__gesf2+0x80>
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	2302      	movs	r3, #2
 8000e46:	4018      	ands	r0, r3
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7e9      	b.n	8000e20 <__gesf2+0x34>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d0f8      	beq.n	8000e42 <__gesf2+0x56>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d1f6      	bne.n	8000e42 <__gesf2+0x56>
 8000e54:	4282      	cmp	r2, r0
 8000e56:	dcf4      	bgt.n	8000e42 <__gesf2+0x56>
 8000e58:	dbeb      	blt.n	8000e32 <__gesf2+0x46>
 8000e5a:	42ac      	cmp	r4, r5
 8000e5c:	d8f1      	bhi.n	8000e42 <__gesf2+0x56>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	42ac      	cmp	r4, r5
 8000e62:	d2dd      	bcs.n	8000e20 <__gesf2+0x34>
 8000e64:	e7e5      	b.n	8000e32 <__gesf2+0x46>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d0da      	beq.n	8000e20 <__gesf2+0x34>
 8000e6a:	e7ea      	b.n	8000e42 <__gesf2+0x56>
 8000e6c:	2d00      	cmp	r5, #0
 8000e6e:	d103      	bne.n	8000e78 <__gesf2+0x8c>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d1e6      	bne.n	8000e42 <__gesf2+0x56>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7d3      	b.n	8000e20 <__gesf2+0x34>
 8000e78:	2002      	movs	r0, #2
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	e7d0      	b.n	8000e20 <__gesf2+0x34>
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4240      	negs	r0, r0
 8000e82:	e7cd      	b.n	8000e20 <__gesf2+0x34>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d0e8      	beq.n	8000e5a <__gesf2+0x6e>
 8000e88:	e7db      	b.n	8000e42 <__gesf2+0x56>
 8000e8a:	46c0      	nop			@ (mov r8, r8)

08000e8c <__lesf2>:
 8000e8c:	b530      	push	{r4, r5, lr}
 8000e8e:	0042      	lsls	r2, r0, #1
 8000e90:	0244      	lsls	r4, r0, #9
 8000e92:	024d      	lsls	r5, r1, #9
 8000e94:	0fc3      	lsrs	r3, r0, #31
 8000e96:	0048      	lsls	r0, r1, #1
 8000e98:	0a64      	lsrs	r4, r4, #9
 8000e9a:	0e12      	lsrs	r2, r2, #24
 8000e9c:	0a6d      	lsrs	r5, r5, #9
 8000e9e:	0e00      	lsrs	r0, r0, #24
 8000ea0:	0fc9      	lsrs	r1, r1, #31
 8000ea2:	2aff      	cmp	r2, #255	@ 0xff
 8000ea4:	d01a      	beq.n	8000edc <__lesf2+0x50>
 8000ea6:	28ff      	cmp	r0, #255	@ 0xff
 8000ea8:	d00e      	beq.n	8000ec8 <__lesf2+0x3c>
 8000eaa:	2a00      	cmp	r2, #0
 8000eac:	d11e      	bne.n	8000eec <__lesf2+0x60>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d10e      	bne.n	8000ed0 <__lesf2+0x44>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d02a      	beq.n	8000f0c <__lesf2+0x80>
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d00c      	beq.n	8000ed4 <__lesf2+0x48>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d01d      	beq.n	8000efa <__lesf2+0x6e>
 8000ebe:	1e58      	subs	r0, r3, #1
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	4018      	ands	r0, r3
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e010      	b.n	8000eea <__lesf2+0x5e>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d10d      	bne.n	8000ee8 <__lesf2+0x5c>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d120      	bne.n	8000f12 <__lesf2+0x86>
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	d11e      	bne.n	8000f12 <__lesf2+0x86>
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d023      	beq.n	8000f20 <__lesf2+0x94>
 8000ed8:	0008      	movs	r0, r1
 8000eda:	e006      	b.n	8000eea <__lesf2+0x5e>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d103      	bne.n	8000ee8 <__lesf2+0x5c>
 8000ee0:	28ff      	cmp	r0, #255	@ 0xff
 8000ee2:	d1ec      	bne.n	8000ebe <__lesf2+0x32>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d017      	beq.n	8000f18 <__lesf2+0x8c>
 8000ee8:	2002      	movs	r0, #2
 8000eea:	bd30      	pop	{r4, r5, pc}
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d0e6      	beq.n	8000ebe <__lesf2+0x32>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d1e4      	bne.n	8000ebe <__lesf2+0x32>
 8000ef4:	4282      	cmp	r2, r0
 8000ef6:	dce2      	bgt.n	8000ebe <__lesf2+0x32>
 8000ef8:	db04      	blt.n	8000f04 <__lesf2+0x78>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d8df      	bhi.n	8000ebe <__lesf2+0x32>
 8000efe:	2000      	movs	r0, #0
 8000f00:	42ac      	cmp	r4, r5
 8000f02:	d2f2      	bcs.n	8000eea <__lesf2+0x5e>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00b      	beq.n	8000f20 <__lesf2+0x94>
 8000f08:	0018      	movs	r0, r3
 8000f0a:	e7ee      	b.n	8000eea <__lesf2+0x5e>
 8000f0c:	2c00      	cmp	r4, #0
 8000f0e:	d0ec      	beq.n	8000eea <__lesf2+0x5e>
 8000f10:	e7d5      	b.n	8000ebe <__lesf2+0x32>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d1d3      	bne.n	8000ebe <__lesf2+0x32>
 8000f16:	e7f5      	b.n	8000f04 <__lesf2+0x78>
 8000f18:	2000      	movs	r0, #0
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d0e5      	beq.n	8000eea <__lesf2+0x5e>
 8000f1e:	e7ce      	b.n	8000ebe <__lesf2+0x32>
 8000f20:	2001      	movs	r0, #1
 8000f22:	4240      	negs	r0, r0
 8000f24:	e7e1      	b.n	8000eea <__lesf2+0x5e>
 8000f26:	46c0      	nop			@ (mov r8, r8)

08000f28 <__aeabi_fmul>:
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	464f      	mov	r7, r9
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	0243      	lsls	r3, r0, #9
 8000f32:	0a5b      	lsrs	r3, r3, #9
 8000f34:	0045      	lsls	r5, r0, #1
 8000f36:	b5c0      	push	{r6, r7, lr}
 8000f38:	4699      	mov	r9, r3
 8000f3a:	1c0f      	adds	r7, r1, #0
 8000f3c:	0e2d      	lsrs	r5, r5, #24
 8000f3e:	0fc6      	lsrs	r6, r0, #31
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fmul+0x1e>
 8000f44:	e088      	b.n	8001058 <__aeabi_fmul+0x130>
 8000f46:	2dff      	cmp	r5, #255	@ 0xff
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fmul+0x24>
 8000f4a:	e08d      	b.n	8001068 <__aeabi_fmul+0x140>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	04d2      	lsls	r2, r2, #19
 8000f52:	431a      	orrs	r2, r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	4691      	mov	r9, r2
 8000f58:	4698      	mov	r8, r3
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	3d7f      	subs	r5, #127	@ 0x7f
 8000f5e:	027c      	lsls	r4, r7, #9
 8000f60:	007b      	lsls	r3, r7, #1
 8000f62:	0a64      	lsrs	r4, r4, #9
 8000f64:	0e1b      	lsrs	r3, r3, #24
 8000f66:	0fff      	lsrs	r7, r7, #31
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d068      	beq.n	800103e <__aeabi_fmul+0x116>
 8000f6c:	2bff      	cmp	r3, #255	@ 0xff
 8000f6e:	d021      	beq.n	8000fb4 <__aeabi_fmul+0x8c>
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	00e4      	lsls	r4, r4, #3
 8000f74:	04d2      	lsls	r2, r2, #19
 8000f76:	4314      	orrs	r4, r2
 8000f78:	4642      	mov	r2, r8
 8000f7a:	3b7f      	subs	r3, #127	@ 0x7f
 8000f7c:	195b      	adds	r3, r3, r5
 8000f7e:	2100      	movs	r1, #0
 8000f80:	1c5d      	adds	r5, r3, #1
 8000f82:	2a0a      	cmp	r2, #10
 8000f84:	dc2e      	bgt.n	8000fe4 <__aeabi_fmul+0xbc>
 8000f86:	407e      	eors	r6, r7
 8000f88:	4642      	mov	r2, r8
 8000f8a:	2a02      	cmp	r2, #2
 8000f8c:	dc23      	bgt.n	8000fd6 <__aeabi_fmul+0xae>
 8000f8e:	3a01      	subs	r2, #1
 8000f90:	2a01      	cmp	r2, #1
 8000f92:	d900      	bls.n	8000f96 <__aeabi_fmul+0x6e>
 8000f94:	e0bd      	b.n	8001112 <__aeabi_fmul+0x1ea>
 8000f96:	2902      	cmp	r1, #2
 8000f98:	d06e      	beq.n	8001078 <__aeabi_fmul+0x150>
 8000f9a:	2901      	cmp	r1, #1
 8000f9c:	d12c      	bne.n	8000ff8 <__aeabi_fmul+0xd0>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	05c0      	lsls	r0, r0, #23
 8000fa4:	07f6      	lsls	r6, r6, #31
 8000fa6:	4310      	orrs	r0, r2
 8000fa8:	4330      	orrs	r0, r6
 8000faa:	bce0      	pop	{r5, r6, r7}
 8000fac:	46ba      	mov	sl, r7
 8000fae:	46b1      	mov	r9, r6
 8000fb0:	46a8      	mov	r8, r5
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	002b      	movs	r3, r5
 8000fb6:	33ff      	adds	r3, #255	@ 0xff
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d065      	beq.n	8001088 <__aeabi_fmul+0x160>
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	0032      	movs	r2, r6
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	4688      	mov	r8, r1
 8000fc8:	407a      	eors	r2, r7
 8000fca:	35ff      	adds	r5, #255	@ 0xff
 8000fcc:	290a      	cmp	r1, #10
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_fmul+0xaa>
 8000fd0:	e0d8      	b.n	8001184 <__aeabi_fmul+0x25c>
 8000fd2:	0016      	movs	r6, r2
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4082      	lsls	r2, r0
 8000fdc:	20a6      	movs	r0, #166	@ 0xa6
 8000fde:	00c0      	lsls	r0, r0, #3
 8000fe0:	4202      	tst	r2, r0
 8000fe2:	d020      	beq.n	8001026 <__aeabi_fmul+0xfe>
 8000fe4:	4653      	mov	r3, sl
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d046      	beq.n	8001078 <__aeabi_fmul+0x150>
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fmul+0xc8>
 8000fee:	e0bb      	b.n	8001168 <__aeabi_fmul+0x240>
 8000ff0:	4651      	mov	r1, sl
 8000ff2:	464c      	mov	r4, r9
 8000ff4:	2901      	cmp	r1, #1
 8000ff6:	d0d2      	beq.n	8000f9e <__aeabi_fmul+0x76>
 8000ff8:	002b      	movs	r3, r5
 8000ffa:	337f      	adds	r3, #127	@ 0x7f
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd70      	ble.n	80010e2 <__aeabi_fmul+0x1ba>
 8001000:	0762      	lsls	r2, r4, #29
 8001002:	d004      	beq.n	800100e <__aeabi_fmul+0xe6>
 8001004:	220f      	movs	r2, #15
 8001006:	4022      	ands	r2, r4
 8001008:	2a04      	cmp	r2, #4
 800100a:	d000      	beq.n	800100e <__aeabi_fmul+0xe6>
 800100c:	3404      	adds	r4, #4
 800100e:	0122      	lsls	r2, r4, #4
 8001010:	d503      	bpl.n	800101a <__aeabi_fmul+0xf2>
 8001012:	4b63      	ldr	r3, [pc, #396]	@ (80011a0 <__aeabi_fmul+0x278>)
 8001014:	401c      	ands	r4, r3
 8001016:	002b      	movs	r3, r5
 8001018:	3380      	adds	r3, #128	@ 0x80
 800101a:	2bfe      	cmp	r3, #254	@ 0xfe
 800101c:	dc2c      	bgt.n	8001078 <__aeabi_fmul+0x150>
 800101e:	01a2      	lsls	r2, r4, #6
 8001020:	0a52      	lsrs	r2, r2, #9
 8001022:	b2d8      	uxtb	r0, r3
 8001024:	e7bd      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001026:	2090      	movs	r0, #144	@ 0x90
 8001028:	0080      	lsls	r0, r0, #2
 800102a:	4202      	tst	r2, r0
 800102c:	d127      	bne.n	800107e <__aeabi_fmul+0x156>
 800102e:	38b9      	subs	r0, #185	@ 0xb9
 8001030:	38ff      	subs	r0, #255	@ 0xff
 8001032:	4210      	tst	r0, r2
 8001034:	d06d      	beq.n	8001112 <__aeabi_fmul+0x1ea>
 8001036:	003e      	movs	r6, r7
 8001038:	46a1      	mov	r9, r4
 800103a:	468a      	mov	sl, r1
 800103c:	e7d2      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 800103e:	2c00      	cmp	r4, #0
 8001040:	d141      	bne.n	80010c6 <__aeabi_fmul+0x19e>
 8001042:	2301      	movs	r3, #1
 8001044:	4642      	mov	r2, r8
 8001046:	431a      	orrs	r2, r3
 8001048:	4690      	mov	r8, r2
 800104a:	002b      	movs	r3, r5
 800104c:	4642      	mov	r2, r8
 800104e:	2101      	movs	r1, #1
 8001050:	1c5d      	adds	r5, r3, #1
 8001052:	2a0a      	cmp	r2, #10
 8001054:	dd97      	ble.n	8000f86 <__aeabi_fmul+0x5e>
 8001056:	e7c5      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d126      	bne.n	80010aa <__aeabi_fmul+0x182>
 800105c:	2304      	movs	r3, #4
 800105e:	4698      	mov	r8, r3
 8001060:	3b03      	subs	r3, #3
 8001062:	2500      	movs	r5, #0
 8001064:	469a      	mov	sl, r3
 8001066:	e77a      	b.n	8000f5e <__aeabi_fmul+0x36>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d118      	bne.n	800109e <__aeabi_fmul+0x176>
 800106c:	2308      	movs	r3, #8
 800106e:	4698      	mov	r8, r3
 8001070:	3b06      	subs	r3, #6
 8001072:	25ff      	movs	r5, #255	@ 0xff
 8001074:	469a      	mov	sl, r3
 8001076:	e772      	b.n	8000f5e <__aeabi_fmul+0x36>
 8001078:	20ff      	movs	r0, #255	@ 0xff
 800107a:	2200      	movs	r2, #0
 800107c:	e791      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	2600      	movs	r6, #0
 8001082:	20ff      	movs	r0, #255	@ 0xff
 8001084:	03d2      	lsls	r2, r2, #15
 8001086:	e78c      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001088:	4641      	mov	r1, r8
 800108a:	2202      	movs	r2, #2
 800108c:	3501      	adds	r5, #1
 800108e:	4311      	orrs	r1, r2
 8001090:	4688      	mov	r8, r1
 8001092:	35ff      	adds	r5, #255	@ 0xff
 8001094:	290a      	cmp	r1, #10
 8001096:	dca5      	bgt.n	8000fe4 <__aeabi_fmul+0xbc>
 8001098:	2102      	movs	r1, #2
 800109a:	407e      	eors	r6, r7
 800109c:	e774      	b.n	8000f88 <__aeabi_fmul+0x60>
 800109e:	230c      	movs	r3, #12
 80010a0:	4698      	mov	r8, r3
 80010a2:	3b09      	subs	r3, #9
 80010a4:	25ff      	movs	r5, #255	@ 0xff
 80010a6:	469a      	mov	sl, r3
 80010a8:	e759      	b.n	8000f5e <__aeabi_fmul+0x36>
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fa5e 	bl	800056c <__clzsi2>
 80010b0:	464a      	mov	r2, r9
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	2576      	movs	r5, #118	@ 0x76
 80010b6:	409a      	lsls	r2, r3
 80010b8:	2300      	movs	r3, #0
 80010ba:	426d      	negs	r5, r5
 80010bc:	4691      	mov	r9, r2
 80010be:	4698      	mov	r8, r3
 80010c0:	469a      	mov	sl, r3
 80010c2:	1a2d      	subs	r5, r5, r0
 80010c4:	e74b      	b.n	8000f5e <__aeabi_fmul+0x36>
 80010c6:	0020      	movs	r0, r4
 80010c8:	f7ff fa50 	bl	800056c <__clzsi2>
 80010cc:	4642      	mov	r2, r8
 80010ce:	1f43      	subs	r3, r0, #5
 80010d0:	409c      	lsls	r4, r3
 80010d2:	1a2b      	subs	r3, r5, r0
 80010d4:	3b76      	subs	r3, #118	@ 0x76
 80010d6:	2100      	movs	r1, #0
 80010d8:	1c5d      	adds	r5, r3, #1
 80010da:	2a0a      	cmp	r2, #10
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_fmul+0x1b8>
 80010de:	e752      	b.n	8000f86 <__aeabi_fmul+0x5e>
 80010e0:	e780      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 80010e2:	2201      	movs	r2, #1
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b1b      	cmp	r3, #27
 80010e8:	dd00      	ble.n	80010ec <__aeabi_fmul+0x1c4>
 80010ea:	e758      	b.n	8000f9e <__aeabi_fmul+0x76>
 80010ec:	359e      	adds	r5, #158	@ 0x9e
 80010ee:	0022      	movs	r2, r4
 80010f0:	40ac      	lsls	r4, r5
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	1e63      	subs	r3, r4, #1
 80010f6:	419c      	sbcs	r4, r3
 80010f8:	4322      	orrs	r2, r4
 80010fa:	0753      	lsls	r3, r2, #29
 80010fc:	d004      	beq.n	8001108 <__aeabi_fmul+0x1e0>
 80010fe:	230f      	movs	r3, #15
 8001100:	4013      	ands	r3, r2
 8001102:	2b04      	cmp	r3, #4
 8001104:	d000      	beq.n	8001108 <__aeabi_fmul+0x1e0>
 8001106:	3204      	adds	r2, #4
 8001108:	0153      	lsls	r3, r2, #5
 800110a:	d537      	bpl.n	800117c <__aeabi_fmul+0x254>
 800110c:	2001      	movs	r0, #1
 800110e:	2200      	movs	r2, #0
 8001110:	e747      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001112:	0c21      	lsrs	r1, r4, #16
 8001114:	464a      	mov	r2, r9
 8001116:	0424      	lsls	r4, r4, #16
 8001118:	0c24      	lsrs	r4, r4, #16
 800111a:	0027      	movs	r7, r4
 800111c:	0c10      	lsrs	r0, r2, #16
 800111e:	0412      	lsls	r2, r2, #16
 8001120:	0c12      	lsrs	r2, r2, #16
 8001122:	4344      	muls	r4, r0
 8001124:	4357      	muls	r7, r2
 8001126:	4348      	muls	r0, r1
 8001128:	4351      	muls	r1, r2
 800112a:	0c3a      	lsrs	r2, r7, #16
 800112c:	1909      	adds	r1, r1, r4
 800112e:	1852      	adds	r2, r2, r1
 8001130:	4294      	cmp	r4, r2
 8001132:	d903      	bls.n	800113c <__aeabi_fmul+0x214>
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	0249      	lsls	r1, r1, #9
 8001138:	468c      	mov	ip, r1
 800113a:	4460      	add	r0, ip
 800113c:	043f      	lsls	r7, r7, #16
 800113e:	0411      	lsls	r1, r2, #16
 8001140:	0c3f      	lsrs	r7, r7, #16
 8001142:	19c9      	adds	r1, r1, r7
 8001144:	018c      	lsls	r4, r1, #6
 8001146:	1e67      	subs	r7, r4, #1
 8001148:	41bc      	sbcs	r4, r7
 800114a:	0c12      	lsrs	r2, r2, #16
 800114c:	0e89      	lsrs	r1, r1, #26
 800114e:	1812      	adds	r2, r2, r0
 8001150:	430c      	orrs	r4, r1
 8001152:	0192      	lsls	r2, r2, #6
 8001154:	4314      	orrs	r4, r2
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	d50e      	bpl.n	8001178 <__aeabi_fmul+0x250>
 800115a:	2301      	movs	r3, #1
 800115c:	0862      	lsrs	r2, r4, #1
 800115e:	401c      	ands	r4, r3
 8001160:	4314      	orrs	r4, r2
 8001162:	e749      	b.n	8000ff8 <__aeabi_fmul+0xd0>
 8001164:	003e      	movs	r6, r7
 8001166:	46a1      	mov	r9, r4
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	464b      	mov	r3, r9
 800116c:	03d2      	lsls	r2, r2, #15
 800116e:	431a      	orrs	r2, r3
 8001170:	0252      	lsls	r2, r2, #9
 8001172:	20ff      	movs	r0, #255	@ 0xff
 8001174:	0a52      	lsrs	r2, r2, #9
 8001176:	e714      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001178:	001d      	movs	r5, r3
 800117a:	e73d      	b.n	8000ff8 <__aeabi_fmul+0xd0>
 800117c:	0192      	lsls	r2, r2, #6
 800117e:	2000      	movs	r0, #0
 8001180:	0a52      	lsrs	r2, r2, #9
 8001182:	e70e      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001184:	290f      	cmp	r1, #15
 8001186:	d1ed      	bne.n	8001164 <__aeabi_fmul+0x23c>
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	464b      	mov	r3, r9
 800118c:	03d2      	lsls	r2, r2, #15
 800118e:	4213      	tst	r3, r2
 8001190:	d0ea      	beq.n	8001168 <__aeabi_fmul+0x240>
 8001192:	4214      	tst	r4, r2
 8001194:	d1e8      	bne.n	8001168 <__aeabi_fmul+0x240>
 8001196:	003e      	movs	r6, r7
 8001198:	20ff      	movs	r0, #255	@ 0xff
 800119a:	4322      	orrs	r2, r4
 800119c:	e701      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	f7ffffff 	.word	0xf7ffffff

080011a4 <__aeabi_fsub>:
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	4647      	mov	r7, r8
 80011a8:	46ce      	mov	lr, r9
 80011aa:	024e      	lsls	r6, r1, #9
 80011ac:	0243      	lsls	r3, r0, #9
 80011ae:	0045      	lsls	r5, r0, #1
 80011b0:	0a72      	lsrs	r2, r6, #9
 80011b2:	0fc4      	lsrs	r4, r0, #31
 80011b4:	0048      	lsls	r0, r1, #1
 80011b6:	b580      	push	{r7, lr}
 80011b8:	4694      	mov	ip, r2
 80011ba:	0a5f      	lsrs	r7, r3, #9
 80011bc:	0e2d      	lsrs	r5, r5, #24
 80011be:	099b      	lsrs	r3, r3, #6
 80011c0:	0e00      	lsrs	r0, r0, #24
 80011c2:	0fc9      	lsrs	r1, r1, #31
 80011c4:	09b6      	lsrs	r6, r6, #6
 80011c6:	28ff      	cmp	r0, #255	@ 0xff
 80011c8:	d024      	beq.n	8001214 <__aeabi_fsub+0x70>
 80011ca:	2201      	movs	r2, #1
 80011cc:	4051      	eors	r1, r2
 80011ce:	1a2a      	subs	r2, r5, r0
 80011d0:	428c      	cmp	r4, r1
 80011d2:	d00f      	beq.n	80011f4 <__aeabi_fsub+0x50>
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	dc00      	bgt.n	80011da <__aeabi_fsub+0x36>
 80011d8:	e16a      	b.n	80014b0 <__aeabi_fsub+0x30c>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d135      	bne.n	800124a <__aeabi_fsub+0xa6>
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_fsub+0x40>
 80011e2:	e0a2      	b.n	800132a <__aeabi_fsub+0x186>
 80011e4:	1e51      	subs	r1, r2, #1
 80011e6:	2a01      	cmp	r2, #1
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x48>
 80011ea:	e124      	b.n	8001436 <__aeabi_fsub+0x292>
 80011ec:	2aff      	cmp	r2, #255	@ 0xff
 80011ee:	d021      	beq.n	8001234 <__aeabi_fsub+0x90>
 80011f0:	000a      	movs	r2, r1
 80011f2:	e02f      	b.n	8001254 <__aeabi_fsub+0xb0>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_fsub+0x56>
 80011f8:	e167      	b.n	80014ca <__aeabi_fsub+0x326>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d05e      	beq.n	80012bc <__aeabi_fsub+0x118>
 80011fe:	2dff      	cmp	r5, #255	@ 0xff
 8001200:	d018      	beq.n	8001234 <__aeabi_fsub+0x90>
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	04c9      	lsls	r1, r1, #19
 8001206:	430e      	orrs	r6, r1
 8001208:	2a1b      	cmp	r2, #27
 800120a:	dc00      	bgt.n	800120e <__aeabi_fsub+0x6a>
 800120c:	e076      	b.n	80012fc <__aeabi_fsub+0x158>
 800120e:	002a      	movs	r2, r5
 8001210:	3301      	adds	r3, #1
 8001212:	e032      	b.n	800127a <__aeabi_fsub+0xd6>
 8001214:	002a      	movs	r2, r5
 8001216:	3aff      	subs	r2, #255	@ 0xff
 8001218:	4691      	mov	r9, r2
 800121a:	2e00      	cmp	r6, #0
 800121c:	d042      	beq.n	80012a4 <__aeabi_fsub+0x100>
 800121e:	428c      	cmp	r4, r1
 8001220:	d055      	beq.n	80012ce <__aeabi_fsub+0x12a>
 8001222:	464a      	mov	r2, r9
 8001224:	2a00      	cmp	r2, #0
 8001226:	d100      	bne.n	800122a <__aeabi_fsub+0x86>
 8001228:	e09c      	b.n	8001364 <__aeabi_fsub+0x1c0>
 800122a:	2d00      	cmp	r5, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_fsub+0x8c>
 800122e:	e077      	b.n	8001320 <__aeabi_fsub+0x17c>
 8001230:	000c      	movs	r4, r1
 8001232:	0033      	movs	r3, r6
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x98>
 800123a:	e06e      	b.n	800131a <__aeabi_fsub+0x176>
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	03d2      	lsls	r2, r2, #15
 8001240:	4313      	orrs	r3, r2
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	20ff      	movs	r0, #255	@ 0xff
 8001246:	0a5b      	lsrs	r3, r3, #9
 8001248:	e024      	b.n	8001294 <__aeabi_fsub+0xf0>
 800124a:	2dff      	cmp	r5, #255	@ 0xff
 800124c:	d0f2      	beq.n	8001234 <__aeabi_fsub+0x90>
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	04c9      	lsls	r1, r1, #19
 8001252:	430e      	orrs	r6, r1
 8001254:	2101      	movs	r1, #1
 8001256:	2a1b      	cmp	r2, #27
 8001258:	dc08      	bgt.n	800126c <__aeabi_fsub+0xc8>
 800125a:	0031      	movs	r1, r6
 800125c:	2020      	movs	r0, #32
 800125e:	40d1      	lsrs	r1, r2
 8001260:	1a82      	subs	r2, r0, r2
 8001262:	4096      	lsls	r6, r2
 8001264:	0032      	movs	r2, r6
 8001266:	1e50      	subs	r0, r2, #1
 8001268:	4182      	sbcs	r2, r0
 800126a:	4311      	orrs	r1, r2
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	d460      	bmi.n	8001334 <__aeabi_fsub+0x190>
 8001272:	2107      	movs	r1, #7
 8001274:	002a      	movs	r2, r5
 8001276:	4019      	ands	r1, r3
 8001278:	d057      	beq.n	800132a <__aeabi_fsub+0x186>
 800127a:	210f      	movs	r1, #15
 800127c:	4019      	ands	r1, r3
 800127e:	2904      	cmp	r1, #4
 8001280:	d000      	beq.n	8001284 <__aeabi_fsub+0xe0>
 8001282:	3304      	adds	r3, #4
 8001284:	0159      	lsls	r1, r3, #5
 8001286:	d550      	bpl.n	800132a <__aeabi_fsub+0x186>
 8001288:	1c50      	adds	r0, r2, #1
 800128a:	2afe      	cmp	r2, #254	@ 0xfe
 800128c:	d045      	beq.n	800131a <__aeabi_fsub+0x176>
 800128e:	019b      	lsls	r3, r3, #6
 8001290:	b2c0      	uxtb	r0, r0
 8001292:	0a5b      	lsrs	r3, r3, #9
 8001294:	05c0      	lsls	r0, r0, #23
 8001296:	4318      	orrs	r0, r3
 8001298:	07e4      	lsls	r4, r4, #31
 800129a:	4320      	orrs	r0, r4
 800129c:	bcc0      	pop	{r6, r7}
 800129e:	46b9      	mov	r9, r7
 80012a0:	46b0      	mov	r8, r6
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	2201      	movs	r2, #1
 80012a6:	4051      	eors	r1, r2
 80012a8:	428c      	cmp	r4, r1
 80012aa:	d1ba      	bne.n	8001222 <__aeabi_fsub+0x7e>
 80012ac:	464a      	mov	r2, r9
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d010      	beq.n	80012d4 <__aeabi_fsub+0x130>
 80012b2:	2d00      	cmp	r5, #0
 80012b4:	d100      	bne.n	80012b8 <__aeabi_fsub+0x114>
 80012b6:	e098      	b.n	80013ea <__aeabi_fsub+0x246>
 80012b8:	2300      	movs	r3, #0
 80012ba:	e7bb      	b.n	8001234 <__aeabi_fsub+0x90>
 80012bc:	2e00      	cmp	r6, #0
 80012be:	d034      	beq.n	800132a <__aeabi_fsub+0x186>
 80012c0:	1e51      	subs	r1, r2, #1
 80012c2:	2a01      	cmp	r2, #1
 80012c4:	d06e      	beq.n	80013a4 <__aeabi_fsub+0x200>
 80012c6:	2aff      	cmp	r2, #255	@ 0xff
 80012c8:	d0b4      	beq.n	8001234 <__aeabi_fsub+0x90>
 80012ca:	000a      	movs	r2, r1
 80012cc:	e79c      	b.n	8001208 <__aeabi_fsub+0x64>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x130>
 80012d2:	e088      	b.n	80013e6 <__aeabi_fsub+0x242>
 80012d4:	20fe      	movs	r0, #254	@ 0xfe
 80012d6:	1c6a      	adds	r2, r5, #1
 80012d8:	4210      	tst	r0, r2
 80012da:	d000      	beq.n	80012de <__aeabi_fsub+0x13a>
 80012dc:	e092      	b.n	8001404 <__aeabi_fsub+0x260>
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_fsub+0x140>
 80012e2:	e0a4      	b.n	800142e <__aeabi_fsub+0x28a>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x146>
 80012e8:	e0cb      	b.n	8001482 <__aeabi_fsub+0x2de>
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_fsub+0x14c>
 80012ee:	e0ca      	b.n	8001486 <__aeabi_fsub+0x2e2>
 80012f0:	2200      	movs	r2, #0
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0a5b      	lsrs	r3, r3, #9
 80012f8:	b2d0      	uxtb	r0, r2
 80012fa:	e7cb      	b.n	8001294 <__aeabi_fsub+0xf0>
 80012fc:	0031      	movs	r1, r6
 80012fe:	2020      	movs	r0, #32
 8001300:	40d1      	lsrs	r1, r2
 8001302:	1a82      	subs	r2, r0, r2
 8001304:	4096      	lsls	r6, r2
 8001306:	0032      	movs	r2, r6
 8001308:	1e50      	subs	r0, r2, #1
 800130a:	4182      	sbcs	r2, r0
 800130c:	430a      	orrs	r2, r1
 800130e:	189b      	adds	r3, r3, r2
 8001310:	015a      	lsls	r2, r3, #5
 8001312:	d5ae      	bpl.n	8001272 <__aeabi_fsub+0xce>
 8001314:	1c6a      	adds	r2, r5, #1
 8001316:	2dfe      	cmp	r5, #254	@ 0xfe
 8001318:	d14a      	bne.n	80013b0 <__aeabi_fsub+0x20c>
 800131a:	20ff      	movs	r0, #255	@ 0xff
 800131c:	2300      	movs	r3, #0
 800131e:	e7b9      	b.n	8001294 <__aeabi_fsub+0xf0>
 8001320:	22ff      	movs	r2, #255	@ 0xff
 8001322:	2b00      	cmp	r3, #0
 8001324:	d14b      	bne.n	80013be <__aeabi_fsub+0x21a>
 8001326:	000c      	movs	r4, r1
 8001328:	0033      	movs	r3, r6
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	2aff      	cmp	r2, #255	@ 0xff
 800132e:	d100      	bne.n	8001332 <__aeabi_fsub+0x18e>
 8001330:	e781      	b.n	8001236 <__aeabi_fsub+0x92>
 8001332:	e7df      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001334:	019f      	lsls	r7, r3, #6
 8001336:	09bf      	lsrs	r7, r7, #6
 8001338:	0038      	movs	r0, r7
 800133a:	f7ff f917 	bl	800056c <__clzsi2>
 800133e:	3805      	subs	r0, #5
 8001340:	4087      	lsls	r7, r0
 8001342:	4285      	cmp	r5, r0
 8001344:	dc21      	bgt.n	800138a <__aeabi_fsub+0x1e6>
 8001346:	003b      	movs	r3, r7
 8001348:	2120      	movs	r1, #32
 800134a:	1b42      	subs	r2, r0, r5
 800134c:	3201      	adds	r2, #1
 800134e:	40d3      	lsrs	r3, r2
 8001350:	1a8a      	subs	r2, r1, r2
 8001352:	4097      	lsls	r7, r2
 8001354:	1e7a      	subs	r2, r7, #1
 8001356:	4197      	sbcs	r7, r2
 8001358:	2200      	movs	r2, #0
 800135a:	433b      	orrs	r3, r7
 800135c:	0759      	lsls	r1, r3, #29
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x1be>
 8001360:	e78b      	b.n	800127a <__aeabi_fsub+0xd6>
 8001362:	e78f      	b.n	8001284 <__aeabi_fsub+0xe0>
 8001364:	20fe      	movs	r0, #254	@ 0xfe
 8001366:	1c6a      	adds	r2, r5, #1
 8001368:	4210      	tst	r0, r2
 800136a:	d112      	bne.n	8001392 <__aeabi_fsub+0x1ee>
 800136c:	2d00      	cmp	r5, #0
 800136e:	d152      	bne.n	8001416 <__aeabi_fsub+0x272>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d07c      	beq.n	800146e <__aeabi_fsub+0x2ca>
 8001374:	2e00      	cmp	r6, #0
 8001376:	d0bb      	beq.n	80012f0 <__aeabi_fsub+0x14c>
 8001378:	1b9a      	subs	r2, r3, r6
 800137a:	0150      	lsls	r0, r2, #5
 800137c:	d400      	bmi.n	8001380 <__aeabi_fsub+0x1dc>
 800137e:	e08b      	b.n	8001498 <__aeabi_fsub+0x2f4>
 8001380:	2401      	movs	r4, #1
 8001382:	2200      	movs	r2, #0
 8001384:	1af3      	subs	r3, r6, r3
 8001386:	400c      	ands	r4, r1
 8001388:	e7e8      	b.n	800135c <__aeabi_fsub+0x1b8>
 800138a:	4b56      	ldr	r3, [pc, #344]	@ (80014e4 <__aeabi_fsub+0x340>)
 800138c:	1a2a      	subs	r2, r5, r0
 800138e:	403b      	ands	r3, r7
 8001390:	e7e4      	b.n	800135c <__aeabi_fsub+0x1b8>
 8001392:	1b9f      	subs	r7, r3, r6
 8001394:	017a      	lsls	r2, r7, #5
 8001396:	d446      	bmi.n	8001426 <__aeabi_fsub+0x282>
 8001398:	2f00      	cmp	r7, #0
 800139a:	d1cd      	bne.n	8001338 <__aeabi_fsub+0x194>
 800139c:	2400      	movs	r4, #0
 800139e:	2000      	movs	r0, #0
 80013a0:	2300      	movs	r3, #0
 80013a2:	e777      	b.n	8001294 <__aeabi_fsub+0xf0>
 80013a4:	199b      	adds	r3, r3, r6
 80013a6:	2501      	movs	r5, #1
 80013a8:	3201      	adds	r2, #1
 80013aa:	0159      	lsls	r1, r3, #5
 80013ac:	d400      	bmi.n	80013b0 <__aeabi_fsub+0x20c>
 80013ae:	e760      	b.n	8001272 <__aeabi_fsub+0xce>
 80013b0:	2101      	movs	r1, #1
 80013b2:	484d      	ldr	r0, [pc, #308]	@ (80014e8 <__aeabi_fsub+0x344>)
 80013b4:	4019      	ands	r1, r3
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	4003      	ands	r3, r0
 80013ba:	430b      	orrs	r3, r1
 80013bc:	e7ce      	b.n	800135c <__aeabi_fsub+0x1b8>
 80013be:	1e57      	subs	r7, r2, #1
 80013c0:	2a01      	cmp	r2, #1
 80013c2:	d05a      	beq.n	800147a <__aeabi_fsub+0x2d6>
 80013c4:	000c      	movs	r4, r1
 80013c6:	2aff      	cmp	r2, #255	@ 0xff
 80013c8:	d033      	beq.n	8001432 <__aeabi_fsub+0x28e>
 80013ca:	2201      	movs	r2, #1
 80013cc:	2f1b      	cmp	r7, #27
 80013ce:	dc07      	bgt.n	80013e0 <__aeabi_fsub+0x23c>
 80013d0:	2120      	movs	r1, #32
 80013d2:	1bc9      	subs	r1, r1, r7
 80013d4:	001a      	movs	r2, r3
 80013d6:	408b      	lsls	r3, r1
 80013d8:	40fa      	lsrs	r2, r7
 80013da:	1e59      	subs	r1, r3, #1
 80013dc:	418b      	sbcs	r3, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	0005      	movs	r5, r0
 80013e2:	1ab3      	subs	r3, r6, r2
 80013e4:	e743      	b.n	800126e <__aeabi_fsub+0xca>
 80013e6:	2d00      	cmp	r5, #0
 80013e8:	d123      	bne.n	8001432 <__aeabi_fsub+0x28e>
 80013ea:	22ff      	movs	r2, #255	@ 0xff
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d09b      	beq.n	8001328 <__aeabi_fsub+0x184>
 80013f0:	1e51      	subs	r1, r2, #1
 80013f2:	2a01      	cmp	r2, #1
 80013f4:	d0d6      	beq.n	80013a4 <__aeabi_fsub+0x200>
 80013f6:	2aff      	cmp	r2, #255	@ 0xff
 80013f8:	d01b      	beq.n	8001432 <__aeabi_fsub+0x28e>
 80013fa:	291b      	cmp	r1, #27
 80013fc:	dd2c      	ble.n	8001458 <__aeabi_fsub+0x2b4>
 80013fe:	0002      	movs	r2, r0
 8001400:	1c73      	adds	r3, r6, #1
 8001402:	e73a      	b.n	800127a <__aeabi_fsub+0xd6>
 8001404:	2aff      	cmp	r2, #255	@ 0xff
 8001406:	d088      	beq.n	800131a <__aeabi_fsub+0x176>
 8001408:	199b      	adds	r3, r3, r6
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	0759      	lsls	r1, r3, #29
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x26e>
 8001410:	e733      	b.n	800127a <__aeabi_fsub+0xd6>
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	e76e      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001416:	2b00      	cmp	r3, #0
 8001418:	d110      	bne.n	800143c <__aeabi_fsub+0x298>
 800141a:	2e00      	cmp	r6, #0
 800141c:	d043      	beq.n	80014a6 <__aeabi_fsub+0x302>
 800141e:	2401      	movs	r4, #1
 8001420:	0033      	movs	r3, r6
 8001422:	400c      	ands	r4, r1
 8001424:	e706      	b.n	8001234 <__aeabi_fsub+0x90>
 8001426:	2401      	movs	r4, #1
 8001428:	1af7      	subs	r7, r6, r3
 800142a:	400c      	ands	r4, r1
 800142c:	e784      	b.n	8001338 <__aeabi_fsub+0x194>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d104      	bne.n	800143c <__aeabi_fsub+0x298>
 8001432:	0033      	movs	r3, r6
 8001434:	e6fe      	b.n	8001234 <__aeabi_fsub+0x90>
 8001436:	2501      	movs	r5, #1
 8001438:	1b9b      	subs	r3, r3, r6
 800143a:	e718      	b.n	800126e <__aeabi_fsub+0xca>
 800143c:	2e00      	cmp	r6, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_fsub+0x29e>
 8001440:	e6f8      	b.n	8001234 <__aeabi_fsub+0x90>
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	03d2      	lsls	r2, r2, #15
 8001446:	4297      	cmp	r7, r2
 8001448:	d304      	bcc.n	8001454 <__aeabi_fsub+0x2b0>
 800144a:	4594      	cmp	ip, r2
 800144c:	d202      	bcs.n	8001454 <__aeabi_fsub+0x2b0>
 800144e:	2401      	movs	r4, #1
 8001450:	0033      	movs	r3, r6
 8001452:	400c      	ands	r4, r1
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	e6f1      	b.n	800123c <__aeabi_fsub+0x98>
 8001458:	001a      	movs	r2, r3
 800145a:	2520      	movs	r5, #32
 800145c:	40ca      	lsrs	r2, r1
 800145e:	1a69      	subs	r1, r5, r1
 8001460:	408b      	lsls	r3, r1
 8001462:	1e59      	subs	r1, r3, #1
 8001464:	418b      	sbcs	r3, r1
 8001466:	4313      	orrs	r3, r2
 8001468:	0005      	movs	r5, r0
 800146a:	199b      	adds	r3, r3, r6
 800146c:	e750      	b.n	8001310 <__aeabi_fsub+0x16c>
 800146e:	2e00      	cmp	r6, #0
 8001470:	d094      	beq.n	800139c <__aeabi_fsub+0x1f8>
 8001472:	2401      	movs	r4, #1
 8001474:	0033      	movs	r3, r6
 8001476:	400c      	ands	r4, r1
 8001478:	e73a      	b.n	80012f0 <__aeabi_fsub+0x14c>
 800147a:	000c      	movs	r4, r1
 800147c:	2501      	movs	r5, #1
 800147e:	1af3      	subs	r3, r6, r3
 8001480:	e6f5      	b.n	800126e <__aeabi_fsub+0xca>
 8001482:	0033      	movs	r3, r6
 8001484:	e734      	b.n	80012f0 <__aeabi_fsub+0x14c>
 8001486:	199b      	adds	r3, r3, r6
 8001488:	2200      	movs	r2, #0
 800148a:	0159      	lsls	r1, r3, #5
 800148c:	d5c1      	bpl.n	8001412 <__aeabi_fsub+0x26e>
 800148e:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <__aeabi_fsub+0x340>)
 8001490:	4013      	ands	r3, r2
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	2201      	movs	r2, #1
 8001496:	e72d      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001498:	2a00      	cmp	r2, #0
 800149a:	d100      	bne.n	800149e <__aeabi_fsub+0x2fa>
 800149c:	e77e      	b.n	800139c <__aeabi_fsub+0x1f8>
 800149e:	0013      	movs	r3, r2
 80014a0:	2200      	movs	r2, #0
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	e726      	b.n	80012f4 <__aeabi_fsub+0x150>
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	2400      	movs	r4, #0
 80014aa:	20ff      	movs	r0, #255	@ 0xff
 80014ac:	03db      	lsls	r3, r3, #15
 80014ae:	e6f1      	b.n	8001294 <__aeabi_fsub+0xf0>
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_fsub+0x312>
 80014b4:	e756      	b.n	8001364 <__aeabi_fsub+0x1c0>
 80014b6:	1b47      	subs	r7, r0, r5
 80014b8:	003a      	movs	r2, r7
 80014ba:	2d00      	cmp	r5, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_fsub+0x31c>
 80014be:	e730      	b.n	8001322 <__aeabi_fsub+0x17e>
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	04d2      	lsls	r2, r2, #19
 80014c4:	000c      	movs	r4, r1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	e77f      	b.n	80013ca <__aeabi_fsub+0x226>
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_fsub+0x32c>
 80014ce:	e701      	b.n	80012d4 <__aeabi_fsub+0x130>
 80014d0:	1b41      	subs	r1, r0, r5
 80014d2:	2d00      	cmp	r5, #0
 80014d4:	d101      	bne.n	80014da <__aeabi_fsub+0x336>
 80014d6:	000a      	movs	r2, r1
 80014d8:	e788      	b.n	80013ec <__aeabi_fsub+0x248>
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	04d2      	lsls	r2, r2, #19
 80014de:	4313      	orrs	r3, r2
 80014e0:	e78b      	b.n	80013fa <__aeabi_fsub+0x256>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	fbffffff 	.word	0xfbffffff
 80014e8:	7dffffff 	.word	0x7dffffff

080014ec <__aeabi_fcmpun>:
 80014ec:	0243      	lsls	r3, r0, #9
 80014ee:	024a      	lsls	r2, r1, #9
 80014f0:	0040      	lsls	r0, r0, #1
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	0a5b      	lsrs	r3, r3, #9
 80014f6:	0a52      	lsrs	r2, r2, #9
 80014f8:	0e09      	lsrs	r1, r1, #24
 80014fa:	0e00      	lsrs	r0, r0, #24
 80014fc:	28ff      	cmp	r0, #255	@ 0xff
 80014fe:	d006      	beq.n	800150e <__aeabi_fcmpun+0x22>
 8001500:	2000      	movs	r0, #0
 8001502:	29ff      	cmp	r1, #255	@ 0xff
 8001504:	d102      	bne.n	800150c <__aeabi_fcmpun+0x20>
 8001506:	1e53      	subs	r3, r2, #1
 8001508:	419a      	sbcs	r2, r3
 800150a:	0010      	movs	r0, r2
 800150c:	4770      	bx	lr
 800150e:	38fe      	subs	r0, #254	@ 0xfe
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1fb      	bne.n	800150c <__aeabi_fcmpun+0x20>
 8001514:	e7f4      	b.n	8001500 <__aeabi_fcmpun+0x14>
 8001516:	46c0      	nop			@ (mov r8, r8)

08001518 <__aeabi_f2iz>:
 8001518:	0241      	lsls	r1, r0, #9
 800151a:	0042      	lsls	r2, r0, #1
 800151c:	0fc3      	lsrs	r3, r0, #31
 800151e:	0a49      	lsrs	r1, r1, #9
 8001520:	2000      	movs	r0, #0
 8001522:	0e12      	lsrs	r2, r2, #24
 8001524:	2a7e      	cmp	r2, #126	@ 0x7e
 8001526:	dd03      	ble.n	8001530 <__aeabi_f2iz+0x18>
 8001528:	2a9d      	cmp	r2, #157	@ 0x9d
 800152a:	dd02      	ble.n	8001532 <__aeabi_f2iz+0x1a>
 800152c:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <__aeabi_f2iz+0x3c>)
 800152e:	1898      	adds	r0, r3, r2
 8001530:	4770      	bx	lr
 8001532:	2080      	movs	r0, #128	@ 0x80
 8001534:	0400      	lsls	r0, r0, #16
 8001536:	4301      	orrs	r1, r0
 8001538:	2a95      	cmp	r2, #149	@ 0x95
 800153a:	dc07      	bgt.n	800154c <__aeabi_f2iz+0x34>
 800153c:	2096      	movs	r0, #150	@ 0x96
 800153e:	1a82      	subs	r2, r0, r2
 8001540:	40d1      	lsrs	r1, r2
 8001542:	4248      	negs	r0, r1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f3      	bne.n	8001530 <__aeabi_f2iz+0x18>
 8001548:	0008      	movs	r0, r1
 800154a:	e7f1      	b.n	8001530 <__aeabi_f2iz+0x18>
 800154c:	3a96      	subs	r2, #150	@ 0x96
 800154e:	4091      	lsls	r1, r2
 8001550:	e7f7      	b.n	8001542 <__aeabi_f2iz+0x2a>
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	7fffffff 	.word	0x7fffffff

08001558 <__aeabi_i2f>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	2800      	cmp	r0, #0
 800155c:	d013      	beq.n	8001586 <__aeabi_i2f+0x2e>
 800155e:	17c3      	asrs	r3, r0, #31
 8001560:	18c5      	adds	r5, r0, r3
 8001562:	405d      	eors	r5, r3
 8001564:	0fc4      	lsrs	r4, r0, #31
 8001566:	0028      	movs	r0, r5
 8001568:	f7ff f800 	bl	800056c <__clzsi2>
 800156c:	239e      	movs	r3, #158	@ 0x9e
 800156e:	0001      	movs	r1, r0
 8001570:	1a1b      	subs	r3, r3, r0
 8001572:	2b96      	cmp	r3, #150	@ 0x96
 8001574:	dc0f      	bgt.n	8001596 <__aeabi_i2f+0x3e>
 8001576:	2808      	cmp	r0, #8
 8001578:	d034      	beq.n	80015e4 <__aeabi_i2f+0x8c>
 800157a:	3908      	subs	r1, #8
 800157c:	408d      	lsls	r5, r1
 800157e:	026d      	lsls	r5, r5, #9
 8001580:	0a6d      	lsrs	r5, r5, #9
 8001582:	b2d8      	uxtb	r0, r3
 8001584:	e002      	b.n	800158c <__aeabi_i2f+0x34>
 8001586:	2400      	movs	r4, #0
 8001588:	2000      	movs	r0, #0
 800158a:	2500      	movs	r5, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4328      	orrs	r0, r5
 8001590:	07e4      	lsls	r4, r4, #31
 8001592:	4320      	orrs	r0, r4
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	2b99      	cmp	r3, #153	@ 0x99
 8001598:	dc16      	bgt.n	80015c8 <__aeabi_i2f+0x70>
 800159a:	1f42      	subs	r2, r0, #5
 800159c:	2805      	cmp	r0, #5
 800159e:	d000      	beq.n	80015a2 <__aeabi_i2f+0x4a>
 80015a0:	4095      	lsls	r5, r2
 80015a2:	002a      	movs	r2, r5
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <__aeabi_i2f+0x94>)
 80015a6:	4002      	ands	r2, r0
 80015a8:	076e      	lsls	r6, r5, #29
 80015aa:	d009      	beq.n	80015c0 <__aeabi_i2f+0x68>
 80015ac:	260f      	movs	r6, #15
 80015ae:	4035      	ands	r5, r6
 80015b0:	2d04      	cmp	r5, #4
 80015b2:	d005      	beq.n	80015c0 <__aeabi_i2f+0x68>
 80015b4:	3204      	adds	r2, #4
 80015b6:	0155      	lsls	r5, r2, #5
 80015b8:	d502      	bpl.n	80015c0 <__aeabi_i2f+0x68>
 80015ba:	239f      	movs	r3, #159	@ 0x9f
 80015bc:	4002      	ands	r2, r0
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	0192      	lsls	r2, r2, #6
 80015c2:	0a55      	lsrs	r5, r2, #9
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	e7e1      	b.n	800158c <__aeabi_i2f+0x34>
 80015c8:	2205      	movs	r2, #5
 80015ca:	1a12      	subs	r2, r2, r0
 80015cc:	0028      	movs	r0, r5
 80015ce:	40d0      	lsrs	r0, r2
 80015d0:	0002      	movs	r2, r0
 80015d2:	0008      	movs	r0, r1
 80015d4:	301b      	adds	r0, #27
 80015d6:	4085      	lsls	r5, r0
 80015d8:	0028      	movs	r0, r5
 80015da:	1e45      	subs	r5, r0, #1
 80015dc:	41a8      	sbcs	r0, r5
 80015de:	4302      	orrs	r2, r0
 80015e0:	0015      	movs	r5, r2
 80015e2:	e7de      	b.n	80015a2 <__aeabi_i2f+0x4a>
 80015e4:	026d      	lsls	r5, r5, #9
 80015e6:	2096      	movs	r0, #150	@ 0x96
 80015e8:	0a6d      	lsrs	r5, r5, #9
 80015ea:	e7cf      	b.n	800158c <__aeabi_i2f+0x34>
 80015ec:	fbffffff 	.word	0xfbffffff

080015f0 <__aeabi_ui2f>:
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	1e04      	subs	r4, r0, #0
 80015f4:	d00e      	beq.n	8001614 <__aeabi_ui2f+0x24>
 80015f6:	f7fe ffb9 	bl	800056c <__clzsi2>
 80015fa:	239e      	movs	r3, #158	@ 0x9e
 80015fc:	0001      	movs	r1, r0
 80015fe:	1a1b      	subs	r3, r3, r0
 8001600:	2b96      	cmp	r3, #150	@ 0x96
 8001602:	dc0c      	bgt.n	800161e <__aeabi_ui2f+0x2e>
 8001604:	2808      	cmp	r0, #8
 8001606:	d02f      	beq.n	8001668 <__aeabi_ui2f+0x78>
 8001608:	3908      	subs	r1, #8
 800160a:	408c      	lsls	r4, r1
 800160c:	0264      	lsls	r4, r4, #9
 800160e:	0a64      	lsrs	r4, r4, #9
 8001610:	b2d8      	uxtb	r0, r3
 8001612:	e001      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001614:	2000      	movs	r0, #0
 8001616:	2400      	movs	r4, #0
 8001618:	05c0      	lsls	r0, r0, #23
 800161a:	4320      	orrs	r0, r4
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	2b99      	cmp	r3, #153	@ 0x99
 8001620:	dc16      	bgt.n	8001650 <__aeabi_ui2f+0x60>
 8001622:	1f42      	subs	r2, r0, #5
 8001624:	2805      	cmp	r0, #5
 8001626:	d000      	beq.n	800162a <__aeabi_ui2f+0x3a>
 8001628:	4094      	lsls	r4, r2
 800162a:	0022      	movs	r2, r4
 800162c:	4810      	ldr	r0, [pc, #64]	@ (8001670 <__aeabi_ui2f+0x80>)
 800162e:	4002      	ands	r2, r0
 8001630:	0765      	lsls	r5, r4, #29
 8001632:	d009      	beq.n	8001648 <__aeabi_ui2f+0x58>
 8001634:	250f      	movs	r5, #15
 8001636:	402c      	ands	r4, r5
 8001638:	2c04      	cmp	r4, #4
 800163a:	d005      	beq.n	8001648 <__aeabi_ui2f+0x58>
 800163c:	3204      	adds	r2, #4
 800163e:	0154      	lsls	r4, r2, #5
 8001640:	d502      	bpl.n	8001648 <__aeabi_ui2f+0x58>
 8001642:	239f      	movs	r3, #159	@ 0x9f
 8001644:	4002      	ands	r2, r0
 8001646:	1a5b      	subs	r3, r3, r1
 8001648:	0192      	lsls	r2, r2, #6
 800164a:	0a54      	lsrs	r4, r2, #9
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	e7e3      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001650:	0002      	movs	r2, r0
 8001652:	0020      	movs	r0, r4
 8001654:	321b      	adds	r2, #27
 8001656:	4090      	lsls	r0, r2
 8001658:	0002      	movs	r2, r0
 800165a:	1e50      	subs	r0, r2, #1
 800165c:	4182      	sbcs	r2, r0
 800165e:	2005      	movs	r0, #5
 8001660:	1a40      	subs	r0, r0, r1
 8001662:	40c4      	lsrs	r4, r0
 8001664:	4314      	orrs	r4, r2
 8001666:	e7e0      	b.n	800162a <__aeabi_ui2f+0x3a>
 8001668:	0264      	lsls	r4, r4, #9
 800166a:	2096      	movs	r0, #150	@ 0x96
 800166c:	0a64      	lsrs	r4, r4, #9
 800166e:	e7d3      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001670:	fbffffff 	.word	0xfbffffff

08001674 <__aeabi_dadd>:
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	4645      	mov	r5, r8
 800167c:	46de      	mov	lr, fp
 800167e:	b5e0      	push	{r5, r6, r7, lr}
 8001680:	b083      	sub	sp, #12
 8001682:	9000      	str	r0, [sp, #0]
 8001684:	9101      	str	r1, [sp, #4]
 8001686:	030c      	lsls	r4, r1, #12
 8001688:	004f      	lsls	r7, r1, #1
 800168a:	0fce      	lsrs	r6, r1, #31
 800168c:	0a61      	lsrs	r1, r4, #9
 800168e:	9c00      	ldr	r4, [sp, #0]
 8001690:	031d      	lsls	r5, r3, #12
 8001692:	0f64      	lsrs	r4, r4, #29
 8001694:	430c      	orrs	r4, r1
 8001696:	9900      	ldr	r1, [sp, #0]
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	00c8      	lsls	r0, r1, #3
 800169e:	0059      	lsls	r1, r3, #1
 80016a0:	0d4b      	lsrs	r3, r1, #21
 80016a2:	4699      	mov	r9, r3
 80016a4:	9a00      	ldr	r2, [sp, #0]
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	0a6d      	lsrs	r5, r5, #9
 80016aa:	0fd9      	lsrs	r1, r3, #31
 80016ac:	0f53      	lsrs	r3, r2, #29
 80016ae:	432b      	orrs	r3, r5
 80016b0:	469a      	mov	sl, r3
 80016b2:	9b00      	ldr	r3, [sp, #0]
 80016b4:	0d7f      	lsrs	r7, r7, #21
 80016b6:	00da      	lsls	r2, r3, #3
 80016b8:	4694      	mov	ip, r2
 80016ba:	464a      	mov	r2, r9
 80016bc:	46b0      	mov	r8, r6
 80016be:	1aba      	subs	r2, r7, r2
 80016c0:	428e      	cmp	r6, r1
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x52>
 80016c4:	e0b0      	b.n	8001828 <__aeabi_dadd+0x1b4>
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	dc00      	bgt.n	80016cc <__aeabi_dadd+0x58>
 80016ca:	e078      	b.n	80017be <__aeabi_dadd+0x14a>
 80016cc:	4649      	mov	r1, r9
 80016ce:	2900      	cmp	r1, #0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x60>
 80016d2:	e0e9      	b.n	80018a8 <__aeabi_dadd+0x234>
 80016d4:	49c9      	ldr	r1, [pc, #804]	@ (80019fc <__aeabi_dadd+0x388>)
 80016d6:	428f      	cmp	r7, r1
 80016d8:	d100      	bne.n	80016dc <__aeabi_dadd+0x68>
 80016da:	e195      	b.n	8001a08 <__aeabi_dadd+0x394>
 80016dc:	2501      	movs	r5, #1
 80016de:	2a38      	cmp	r2, #56	@ 0x38
 80016e0:	dc16      	bgt.n	8001710 <__aeabi_dadd+0x9c>
 80016e2:	2180      	movs	r1, #128	@ 0x80
 80016e4:	4653      	mov	r3, sl
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	430b      	orrs	r3, r1
 80016ea:	469a      	mov	sl, r3
 80016ec:	2a1f      	cmp	r2, #31
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dadd+0x7e>
 80016f0:	e1e7      	b.n	8001ac2 <__aeabi_dadd+0x44e>
 80016f2:	2120      	movs	r1, #32
 80016f4:	4655      	mov	r5, sl
 80016f6:	1a8b      	subs	r3, r1, r2
 80016f8:	4661      	mov	r1, ip
 80016fa:	409d      	lsls	r5, r3
 80016fc:	40d1      	lsrs	r1, r2
 80016fe:	430d      	orrs	r5, r1
 8001700:	4661      	mov	r1, ip
 8001702:	4099      	lsls	r1, r3
 8001704:	1e4b      	subs	r3, r1, #1
 8001706:	4199      	sbcs	r1, r3
 8001708:	4653      	mov	r3, sl
 800170a:	40d3      	lsrs	r3, r2
 800170c:	430d      	orrs	r5, r1
 800170e:	1ae4      	subs	r4, r4, r3
 8001710:	1b45      	subs	r5, r0, r5
 8001712:	42a8      	cmp	r0, r5
 8001714:	4180      	sbcs	r0, r0
 8001716:	4240      	negs	r0, r0
 8001718:	1a24      	subs	r4, r4, r0
 800171a:	0223      	lsls	r3, r4, #8
 800171c:	d400      	bmi.n	8001720 <__aeabi_dadd+0xac>
 800171e:	e10f      	b.n	8001940 <__aeabi_dadd+0x2cc>
 8001720:	0264      	lsls	r4, r4, #9
 8001722:	0a64      	lsrs	r4, r4, #9
 8001724:	2c00      	cmp	r4, #0
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0xb6>
 8001728:	e139      	b.n	800199e <__aeabi_dadd+0x32a>
 800172a:	0020      	movs	r0, r4
 800172c:	f7fe ff1e 	bl	800056c <__clzsi2>
 8001730:	0003      	movs	r3, r0
 8001732:	3b08      	subs	r3, #8
 8001734:	2120      	movs	r1, #32
 8001736:	0028      	movs	r0, r5
 8001738:	1aca      	subs	r2, r1, r3
 800173a:	40d0      	lsrs	r0, r2
 800173c:	409c      	lsls	r4, r3
 800173e:	0002      	movs	r2, r0
 8001740:	409d      	lsls	r5, r3
 8001742:	4322      	orrs	r2, r4
 8001744:	429f      	cmp	r7, r3
 8001746:	dd00      	ble.n	800174a <__aeabi_dadd+0xd6>
 8001748:	e173      	b.n	8001a32 <__aeabi_dadd+0x3be>
 800174a:	1bd8      	subs	r0, r3, r7
 800174c:	3001      	adds	r0, #1
 800174e:	1a09      	subs	r1, r1, r0
 8001750:	002c      	movs	r4, r5
 8001752:	408d      	lsls	r5, r1
 8001754:	40c4      	lsrs	r4, r0
 8001756:	1e6b      	subs	r3, r5, #1
 8001758:	419d      	sbcs	r5, r3
 800175a:	0013      	movs	r3, r2
 800175c:	40c2      	lsrs	r2, r0
 800175e:	408b      	lsls	r3, r1
 8001760:	4325      	orrs	r5, r4
 8001762:	2700      	movs	r7, #0
 8001764:	0014      	movs	r4, r2
 8001766:	431d      	orrs	r5, r3
 8001768:	076b      	lsls	r3, r5, #29
 800176a:	d009      	beq.n	8001780 <__aeabi_dadd+0x10c>
 800176c:	230f      	movs	r3, #15
 800176e:	402b      	ands	r3, r5
 8001770:	2b04      	cmp	r3, #4
 8001772:	d005      	beq.n	8001780 <__aeabi_dadd+0x10c>
 8001774:	1d2b      	adds	r3, r5, #4
 8001776:	42ab      	cmp	r3, r5
 8001778:	41ad      	sbcs	r5, r5
 800177a:	426d      	negs	r5, r5
 800177c:	1964      	adds	r4, r4, r5
 800177e:	001d      	movs	r5, r3
 8001780:	0223      	lsls	r3, r4, #8
 8001782:	d400      	bmi.n	8001786 <__aeabi_dadd+0x112>
 8001784:	e12d      	b.n	80019e2 <__aeabi_dadd+0x36e>
 8001786:	4a9d      	ldr	r2, [pc, #628]	@ (80019fc <__aeabi_dadd+0x388>)
 8001788:	3701      	adds	r7, #1
 800178a:	4297      	cmp	r7, r2
 800178c:	d100      	bne.n	8001790 <__aeabi_dadd+0x11c>
 800178e:	e0d3      	b.n	8001938 <__aeabi_dadd+0x2c4>
 8001790:	4646      	mov	r6, r8
 8001792:	499b      	ldr	r1, [pc, #620]	@ (8001a00 <__aeabi_dadd+0x38c>)
 8001794:	08ed      	lsrs	r5, r5, #3
 8001796:	4021      	ands	r1, r4
 8001798:	074a      	lsls	r2, r1, #29
 800179a:	432a      	orrs	r2, r5
 800179c:	057c      	lsls	r4, r7, #21
 800179e:	024d      	lsls	r5, r1, #9
 80017a0:	0b2d      	lsrs	r5, r5, #12
 80017a2:	0d64      	lsrs	r4, r4, #21
 80017a4:	0524      	lsls	r4, r4, #20
 80017a6:	432c      	orrs	r4, r5
 80017a8:	07f6      	lsls	r6, r6, #31
 80017aa:	4334      	orrs	r4, r6
 80017ac:	0010      	movs	r0, r2
 80017ae:	0021      	movs	r1, r4
 80017b0:	b003      	add	sp, #12
 80017b2:	bcf0      	pop	{r4, r5, r6, r7}
 80017b4:	46bb      	mov	fp, r7
 80017b6:	46b2      	mov	sl, r6
 80017b8:	46a9      	mov	r9, r5
 80017ba:	46a0      	mov	r8, r4
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017be:	2a00      	cmp	r2, #0
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dadd+0x150>
 80017c2:	e084      	b.n	80018ce <__aeabi_dadd+0x25a>
 80017c4:	464a      	mov	r2, r9
 80017c6:	1bd2      	subs	r2, r2, r7
 80017c8:	2f00      	cmp	r7, #0
 80017ca:	d000      	beq.n	80017ce <__aeabi_dadd+0x15a>
 80017cc:	e16d      	b.n	8001aaa <__aeabi_dadd+0x436>
 80017ce:	0025      	movs	r5, r4
 80017d0:	4305      	orrs	r5, r0
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x162>
 80017d4:	e127      	b.n	8001a26 <__aeabi_dadd+0x3b2>
 80017d6:	1e56      	subs	r6, r2, #1
 80017d8:	2a01      	cmp	r2, #1
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x16a>
 80017dc:	e23b      	b.n	8001c56 <__aeabi_dadd+0x5e2>
 80017de:	4d87      	ldr	r5, [pc, #540]	@ (80019fc <__aeabi_dadd+0x388>)
 80017e0:	42aa      	cmp	r2, r5
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dadd+0x172>
 80017e4:	e26a      	b.n	8001cbc <__aeabi_dadd+0x648>
 80017e6:	2501      	movs	r5, #1
 80017e8:	2e38      	cmp	r6, #56	@ 0x38
 80017ea:	dc12      	bgt.n	8001812 <__aeabi_dadd+0x19e>
 80017ec:	0032      	movs	r2, r6
 80017ee:	2a1f      	cmp	r2, #31
 80017f0:	dd00      	ble.n	80017f4 <__aeabi_dadd+0x180>
 80017f2:	e1f8      	b.n	8001be6 <__aeabi_dadd+0x572>
 80017f4:	2620      	movs	r6, #32
 80017f6:	0025      	movs	r5, r4
 80017f8:	1ab6      	subs	r6, r6, r2
 80017fa:	0007      	movs	r7, r0
 80017fc:	4653      	mov	r3, sl
 80017fe:	40b0      	lsls	r0, r6
 8001800:	40d4      	lsrs	r4, r2
 8001802:	40b5      	lsls	r5, r6
 8001804:	40d7      	lsrs	r7, r2
 8001806:	1e46      	subs	r6, r0, #1
 8001808:	41b0      	sbcs	r0, r6
 800180a:	1b1b      	subs	r3, r3, r4
 800180c:	469a      	mov	sl, r3
 800180e:	433d      	orrs	r5, r7
 8001810:	4305      	orrs	r5, r0
 8001812:	4662      	mov	r2, ip
 8001814:	1b55      	subs	r5, r2, r5
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	000e      	movs	r6, r1
 8001820:	464f      	mov	r7, r9
 8001822:	4688      	mov	r8, r1
 8001824:	1a9c      	subs	r4, r3, r2
 8001826:	e778      	b.n	800171a <__aeabi_dadd+0xa6>
 8001828:	2a00      	cmp	r2, #0
 800182a:	dc00      	bgt.n	800182e <__aeabi_dadd+0x1ba>
 800182c:	e08e      	b.n	800194c <__aeabi_dadd+0x2d8>
 800182e:	4649      	mov	r1, r9
 8001830:	2900      	cmp	r1, #0
 8001832:	d175      	bne.n	8001920 <__aeabi_dadd+0x2ac>
 8001834:	4661      	mov	r1, ip
 8001836:	4653      	mov	r3, sl
 8001838:	4319      	orrs	r1, r3
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x1ca>
 800183c:	e0f6      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 800183e:	1e51      	subs	r1, r2, #1
 8001840:	2a01      	cmp	r2, #1
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x1d2>
 8001844:	e191      	b.n	8001b6a <__aeabi_dadd+0x4f6>
 8001846:	4d6d      	ldr	r5, [pc, #436]	@ (80019fc <__aeabi_dadd+0x388>)
 8001848:	42aa      	cmp	r2, r5
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x1da>
 800184c:	e0dc      	b.n	8001a08 <__aeabi_dadd+0x394>
 800184e:	2501      	movs	r5, #1
 8001850:	2938      	cmp	r1, #56	@ 0x38
 8001852:	dc14      	bgt.n	800187e <__aeabi_dadd+0x20a>
 8001854:	000a      	movs	r2, r1
 8001856:	2a1f      	cmp	r2, #31
 8001858:	dd00      	ble.n	800185c <__aeabi_dadd+0x1e8>
 800185a:	e1a2      	b.n	8001ba2 <__aeabi_dadd+0x52e>
 800185c:	2120      	movs	r1, #32
 800185e:	4653      	mov	r3, sl
 8001860:	1a89      	subs	r1, r1, r2
 8001862:	408b      	lsls	r3, r1
 8001864:	001d      	movs	r5, r3
 8001866:	4663      	mov	r3, ip
 8001868:	40d3      	lsrs	r3, r2
 800186a:	431d      	orrs	r5, r3
 800186c:	4663      	mov	r3, ip
 800186e:	408b      	lsls	r3, r1
 8001870:	0019      	movs	r1, r3
 8001872:	1e4b      	subs	r3, r1, #1
 8001874:	4199      	sbcs	r1, r3
 8001876:	4653      	mov	r3, sl
 8001878:	40d3      	lsrs	r3, r2
 800187a:	430d      	orrs	r5, r1
 800187c:	18e4      	adds	r4, r4, r3
 800187e:	182d      	adds	r5, r5, r0
 8001880:	4285      	cmp	r5, r0
 8001882:	4180      	sbcs	r0, r0
 8001884:	4240      	negs	r0, r0
 8001886:	1824      	adds	r4, r4, r0
 8001888:	0223      	lsls	r3, r4, #8
 800188a:	d559      	bpl.n	8001940 <__aeabi_dadd+0x2cc>
 800188c:	4b5b      	ldr	r3, [pc, #364]	@ (80019fc <__aeabi_dadd+0x388>)
 800188e:	3701      	adds	r7, #1
 8001890:	429f      	cmp	r7, r3
 8001892:	d051      	beq.n	8001938 <__aeabi_dadd+0x2c4>
 8001894:	2101      	movs	r1, #1
 8001896:	4b5a      	ldr	r3, [pc, #360]	@ (8001a00 <__aeabi_dadd+0x38c>)
 8001898:	086a      	lsrs	r2, r5, #1
 800189a:	401c      	ands	r4, r3
 800189c:	4029      	ands	r1, r5
 800189e:	430a      	orrs	r2, r1
 80018a0:	07e5      	lsls	r5, r4, #31
 80018a2:	4315      	orrs	r5, r2
 80018a4:	0864      	lsrs	r4, r4, #1
 80018a6:	e75f      	b.n	8001768 <__aeabi_dadd+0xf4>
 80018a8:	4661      	mov	r1, ip
 80018aa:	4653      	mov	r3, sl
 80018ac:	4319      	orrs	r1, r3
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x23e>
 80018b0:	e0bc      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 80018b2:	1e51      	subs	r1, r2, #1
 80018b4:	2a01      	cmp	r2, #1
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x246>
 80018b8:	e164      	b.n	8001b84 <__aeabi_dadd+0x510>
 80018ba:	4d50      	ldr	r5, [pc, #320]	@ (80019fc <__aeabi_dadd+0x388>)
 80018bc:	42aa      	cmp	r2, r5
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x24e>
 80018c0:	e16a      	b.n	8001b98 <__aeabi_dadd+0x524>
 80018c2:	2501      	movs	r5, #1
 80018c4:	2938      	cmp	r1, #56	@ 0x38
 80018c6:	dd00      	ble.n	80018ca <__aeabi_dadd+0x256>
 80018c8:	e722      	b.n	8001710 <__aeabi_dadd+0x9c>
 80018ca:	000a      	movs	r2, r1
 80018cc:	e70e      	b.n	80016ec <__aeabi_dadd+0x78>
 80018ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001a04 <__aeabi_dadd+0x390>)
 80018d0:	1c7d      	adds	r5, r7, #1
 80018d2:	4215      	tst	r5, r2
 80018d4:	d000      	beq.n	80018d8 <__aeabi_dadd+0x264>
 80018d6:	e0d0      	b.n	8001a7a <__aeabi_dadd+0x406>
 80018d8:	0025      	movs	r5, r4
 80018da:	4662      	mov	r2, ip
 80018dc:	4653      	mov	r3, sl
 80018de:	4305      	orrs	r5, r0
 80018e0:	431a      	orrs	r2, r3
 80018e2:	2f00      	cmp	r7, #0
 80018e4:	d000      	beq.n	80018e8 <__aeabi_dadd+0x274>
 80018e6:	e137      	b.n	8001b58 <__aeabi_dadd+0x4e4>
 80018e8:	2d00      	cmp	r5, #0
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x27a>
 80018ec:	e1a8      	b.n	8001c40 <__aeabi_dadd+0x5cc>
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dadd+0x280>
 80018f2:	e16a      	b.n	8001bca <__aeabi_dadd+0x556>
 80018f4:	4663      	mov	r3, ip
 80018f6:	1ac5      	subs	r5, r0, r3
 80018f8:	4653      	mov	r3, sl
 80018fa:	1ae2      	subs	r2, r4, r3
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	419b      	sbcs	r3, r3
 8001900:	425b      	negs	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	021a      	lsls	r2, r3, #8
 8001906:	d400      	bmi.n	800190a <__aeabi_dadd+0x296>
 8001908:	e203      	b.n	8001d12 <__aeabi_dadd+0x69e>
 800190a:	4663      	mov	r3, ip
 800190c:	1a1d      	subs	r5, r3, r0
 800190e:	45ac      	cmp	ip, r5
 8001910:	4192      	sbcs	r2, r2
 8001912:	4653      	mov	r3, sl
 8001914:	4252      	negs	r2, r2
 8001916:	1b1c      	subs	r4, r3, r4
 8001918:	000e      	movs	r6, r1
 800191a:	4688      	mov	r8, r1
 800191c:	1aa4      	subs	r4, r4, r2
 800191e:	e723      	b.n	8001768 <__aeabi_dadd+0xf4>
 8001920:	4936      	ldr	r1, [pc, #216]	@ (80019fc <__aeabi_dadd+0x388>)
 8001922:	428f      	cmp	r7, r1
 8001924:	d070      	beq.n	8001a08 <__aeabi_dadd+0x394>
 8001926:	2501      	movs	r5, #1
 8001928:	2a38      	cmp	r2, #56	@ 0x38
 800192a:	dca8      	bgt.n	800187e <__aeabi_dadd+0x20a>
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	4653      	mov	r3, sl
 8001930:	0409      	lsls	r1, r1, #16
 8001932:	430b      	orrs	r3, r1
 8001934:	469a      	mov	sl, r3
 8001936:	e78e      	b.n	8001856 <__aeabi_dadd+0x1e2>
 8001938:	003c      	movs	r4, r7
 800193a:	2500      	movs	r5, #0
 800193c:	2200      	movs	r2, #0
 800193e:	e731      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001940:	2307      	movs	r3, #7
 8001942:	402b      	ands	r3, r5
 8001944:	2b00      	cmp	r3, #0
 8001946:	d000      	beq.n	800194a <__aeabi_dadd+0x2d6>
 8001948:	e710      	b.n	800176c <__aeabi_dadd+0xf8>
 800194a:	e093      	b.n	8001a74 <__aeabi_dadd+0x400>
 800194c:	2a00      	cmp	r2, #0
 800194e:	d074      	beq.n	8001a3a <__aeabi_dadd+0x3c6>
 8001950:	464a      	mov	r2, r9
 8001952:	1bd2      	subs	r2, r2, r7
 8001954:	2f00      	cmp	r7, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x2e6>
 8001958:	e0c7      	b.n	8001aea <__aeabi_dadd+0x476>
 800195a:	4928      	ldr	r1, [pc, #160]	@ (80019fc <__aeabi_dadd+0x388>)
 800195c:	4589      	cmp	r9, r1
 800195e:	d100      	bne.n	8001962 <__aeabi_dadd+0x2ee>
 8001960:	e185      	b.n	8001c6e <__aeabi_dadd+0x5fa>
 8001962:	2501      	movs	r5, #1
 8001964:	2a38      	cmp	r2, #56	@ 0x38
 8001966:	dc12      	bgt.n	800198e <__aeabi_dadd+0x31a>
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	0409      	lsls	r1, r1, #16
 800196c:	430c      	orrs	r4, r1
 800196e:	2a1f      	cmp	r2, #31
 8001970:	dd00      	ble.n	8001974 <__aeabi_dadd+0x300>
 8001972:	e1ab      	b.n	8001ccc <__aeabi_dadd+0x658>
 8001974:	2120      	movs	r1, #32
 8001976:	0025      	movs	r5, r4
 8001978:	1a89      	subs	r1, r1, r2
 800197a:	0007      	movs	r7, r0
 800197c:	4088      	lsls	r0, r1
 800197e:	408d      	lsls	r5, r1
 8001980:	40d7      	lsrs	r7, r2
 8001982:	1e41      	subs	r1, r0, #1
 8001984:	4188      	sbcs	r0, r1
 8001986:	40d4      	lsrs	r4, r2
 8001988:	433d      	orrs	r5, r7
 800198a:	4305      	orrs	r5, r0
 800198c:	44a2      	add	sl, r4
 800198e:	4465      	add	r5, ip
 8001990:	4565      	cmp	r5, ip
 8001992:	4192      	sbcs	r2, r2
 8001994:	4252      	negs	r2, r2
 8001996:	4452      	add	r2, sl
 8001998:	0014      	movs	r4, r2
 800199a:	464f      	mov	r7, r9
 800199c:	e774      	b.n	8001888 <__aeabi_dadd+0x214>
 800199e:	0028      	movs	r0, r5
 80019a0:	f7fe fde4 	bl	800056c <__clzsi2>
 80019a4:	0003      	movs	r3, r0
 80019a6:	3318      	adds	r3, #24
 80019a8:	2b1f      	cmp	r3, #31
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_dadd+0x33a>
 80019ac:	e6c2      	b.n	8001734 <__aeabi_dadd+0xc0>
 80019ae:	002a      	movs	r2, r5
 80019b0:	3808      	subs	r0, #8
 80019b2:	4082      	lsls	r2, r0
 80019b4:	429f      	cmp	r7, r3
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dadd+0x346>
 80019b8:	e0a9      	b.n	8001b0e <__aeabi_dadd+0x49a>
 80019ba:	1bdb      	subs	r3, r3, r7
 80019bc:	1c58      	adds	r0, r3, #1
 80019be:	281f      	cmp	r0, #31
 80019c0:	dc00      	bgt.n	80019c4 <__aeabi_dadd+0x350>
 80019c2:	e1ac      	b.n	8001d1e <__aeabi_dadd+0x6aa>
 80019c4:	0015      	movs	r5, r2
 80019c6:	3b1f      	subs	r3, #31
 80019c8:	40dd      	lsrs	r5, r3
 80019ca:	2820      	cmp	r0, #32
 80019cc:	d005      	beq.n	80019da <__aeabi_dadd+0x366>
 80019ce:	2340      	movs	r3, #64	@ 0x40
 80019d0:	1a1b      	subs	r3, r3, r0
 80019d2:	409a      	lsls	r2, r3
 80019d4:	1e53      	subs	r3, r2, #1
 80019d6:	419a      	sbcs	r2, r3
 80019d8:	4315      	orrs	r5, r2
 80019da:	2307      	movs	r3, #7
 80019dc:	2700      	movs	r7, #0
 80019de:	402b      	ands	r3, r5
 80019e0:	e7b0      	b.n	8001944 <__aeabi_dadd+0x2d0>
 80019e2:	08ed      	lsrs	r5, r5, #3
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <__aeabi_dadd+0x388>)
 80019e6:	0762      	lsls	r2, r4, #29
 80019e8:	432a      	orrs	r2, r5
 80019ea:	08e4      	lsrs	r4, r4, #3
 80019ec:	429f      	cmp	r7, r3
 80019ee:	d00f      	beq.n	8001a10 <__aeabi_dadd+0x39c>
 80019f0:	0324      	lsls	r4, r4, #12
 80019f2:	0b25      	lsrs	r5, r4, #12
 80019f4:	057c      	lsls	r4, r7, #21
 80019f6:	0d64      	lsrs	r4, r4, #21
 80019f8:	e6d4      	b.n	80017a4 <__aeabi_dadd+0x130>
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	000007ff 	.word	0x000007ff
 8001a00:	ff7fffff 	.word	0xff7fffff
 8001a04:	000007fe 	.word	0x000007fe
 8001a08:	08c0      	lsrs	r0, r0, #3
 8001a0a:	0762      	lsls	r2, r4, #29
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	08e4      	lsrs	r4, r4, #3
 8001a10:	0013      	movs	r3, r2
 8001a12:	4323      	orrs	r3, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dadd+0x3a4>
 8001a16:	e186      	b.n	8001d26 <__aeabi_dadd+0x6b2>
 8001a18:	2580      	movs	r5, #128	@ 0x80
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	4325      	orrs	r5, r4
 8001a1e:	032d      	lsls	r5, r5, #12
 8001a20:	4cc3      	ldr	r4, [pc, #780]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001a22:	0b2d      	lsrs	r5, r5, #12
 8001a24:	e6be      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001a26:	4660      	mov	r0, ip
 8001a28:	4654      	mov	r4, sl
 8001a2a:	000e      	movs	r6, r1
 8001a2c:	0017      	movs	r7, r2
 8001a2e:	08c5      	lsrs	r5, r0, #3
 8001a30:	e7d8      	b.n	80019e4 <__aeabi_dadd+0x370>
 8001a32:	4cc0      	ldr	r4, [pc, #768]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001a34:	1aff      	subs	r7, r7, r3
 8001a36:	4014      	ands	r4, r2
 8001a38:	e696      	b.n	8001768 <__aeabi_dadd+0xf4>
 8001a3a:	4abf      	ldr	r2, [pc, #764]	@ (8001d38 <__aeabi_dadd+0x6c4>)
 8001a3c:	1c79      	adds	r1, r7, #1
 8001a3e:	4211      	tst	r1, r2
 8001a40:	d16b      	bne.n	8001b1a <__aeabi_dadd+0x4a6>
 8001a42:	0022      	movs	r2, r4
 8001a44:	4302      	orrs	r2, r0
 8001a46:	2f00      	cmp	r7, #0
 8001a48:	d000      	beq.n	8001a4c <__aeabi_dadd+0x3d8>
 8001a4a:	e0db      	b.n	8001c04 <__aeabi_dadd+0x590>
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dadd+0x3de>
 8001a50:	e12d      	b.n	8001cae <__aeabi_dadd+0x63a>
 8001a52:	4662      	mov	r2, ip
 8001a54:	4653      	mov	r3, sl
 8001a56:	431a      	orrs	r2, r3
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dadd+0x3e8>
 8001a5a:	e0b6      	b.n	8001bca <__aeabi_dadd+0x556>
 8001a5c:	4663      	mov	r3, ip
 8001a5e:	18c5      	adds	r5, r0, r3
 8001a60:	4285      	cmp	r5, r0
 8001a62:	4180      	sbcs	r0, r0
 8001a64:	4454      	add	r4, sl
 8001a66:	4240      	negs	r0, r0
 8001a68:	1824      	adds	r4, r4, r0
 8001a6a:	0223      	lsls	r3, r4, #8
 8001a6c:	d502      	bpl.n	8001a74 <__aeabi_dadd+0x400>
 8001a6e:	000f      	movs	r7, r1
 8001a70:	4bb0      	ldr	r3, [pc, #704]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001a72:	401c      	ands	r4, r3
 8001a74:	003a      	movs	r2, r7
 8001a76:	0028      	movs	r0, r5
 8001a78:	e7d8      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 8001a7a:	4662      	mov	r2, ip
 8001a7c:	1a85      	subs	r5, r0, r2
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	4192      	sbcs	r2, r2
 8001a82:	4653      	mov	r3, sl
 8001a84:	4252      	negs	r2, r2
 8001a86:	4691      	mov	r9, r2
 8001a88:	1ae3      	subs	r3, r4, r3
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	464b      	mov	r3, r9
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	4691      	mov	r9, r2
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	d454      	bmi.n	8001b42 <__aeabi_dadd+0x4ce>
 8001a98:	464a      	mov	r2, r9
 8001a9a:	464c      	mov	r4, r9
 8001a9c:	432a      	orrs	r2, r5
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dadd+0x42e>
 8001aa0:	e640      	b.n	8001724 <__aeabi_dadd+0xb0>
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	2400      	movs	r4, #0
 8001aa6:	2500      	movs	r5, #0
 8001aa8:	e67c      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001aaa:	4da1      	ldr	r5, [pc, #644]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001aac:	45a9      	cmp	r9, r5
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x43e>
 8001ab0:	e090      	b.n	8001bd4 <__aeabi_dadd+0x560>
 8001ab2:	2501      	movs	r5, #1
 8001ab4:	2a38      	cmp	r2, #56	@ 0x38
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dadd+0x446>
 8001ab8:	e6ab      	b.n	8001812 <__aeabi_dadd+0x19e>
 8001aba:	2580      	movs	r5, #128	@ 0x80
 8001abc:	042d      	lsls	r5, r5, #16
 8001abe:	432c      	orrs	r4, r5
 8001ac0:	e695      	b.n	80017ee <__aeabi_dadd+0x17a>
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	4655      	mov	r5, sl
 8001ac6:	3920      	subs	r1, #32
 8001ac8:	40cd      	lsrs	r5, r1
 8001aca:	46a9      	mov	r9, r5
 8001acc:	2a20      	cmp	r2, #32
 8001ace:	d006      	beq.n	8001ade <__aeabi_dadd+0x46a>
 8001ad0:	2140      	movs	r1, #64	@ 0x40
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	1a8a      	subs	r2, r1, r2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	4662      	mov	r2, ip
 8001ada:	431a      	orrs	r2, r3
 8001adc:	4694      	mov	ip, r2
 8001ade:	4665      	mov	r5, ip
 8001ae0:	1e6b      	subs	r3, r5, #1
 8001ae2:	419d      	sbcs	r5, r3
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	431d      	orrs	r5, r3
 8001ae8:	e612      	b.n	8001710 <__aeabi_dadd+0x9c>
 8001aea:	0021      	movs	r1, r4
 8001aec:	4301      	orrs	r1, r0
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x47e>
 8001af0:	e0c4      	b.n	8001c7c <__aeabi_dadd+0x608>
 8001af2:	1e51      	subs	r1, r2, #1
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d100      	bne.n	8001afa <__aeabi_dadd+0x486>
 8001af8:	e0fb      	b.n	8001cf2 <__aeabi_dadd+0x67e>
 8001afa:	4d8d      	ldr	r5, [pc, #564]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001afc:	42aa      	cmp	r2, r5
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dadd+0x48e>
 8001b00:	e0b5      	b.n	8001c6e <__aeabi_dadd+0x5fa>
 8001b02:	2501      	movs	r5, #1
 8001b04:	2938      	cmp	r1, #56	@ 0x38
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dadd+0x496>
 8001b08:	e741      	b.n	800198e <__aeabi_dadd+0x31a>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	e72f      	b.n	800196e <__aeabi_dadd+0x2fa>
 8001b0e:	4c89      	ldr	r4, [pc, #548]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001b10:	1aff      	subs	r7, r7, r3
 8001b12:	4014      	ands	r4, r2
 8001b14:	0762      	lsls	r2, r4, #29
 8001b16:	08e4      	lsrs	r4, r4, #3
 8001b18:	e76a      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001b1a:	4a85      	ldr	r2, [pc, #532]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001b1c:	4291      	cmp	r1, r2
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dadd+0x4ae>
 8001b20:	e0e3      	b.n	8001cea <__aeabi_dadd+0x676>
 8001b22:	4663      	mov	r3, ip
 8001b24:	18c2      	adds	r2, r0, r3
 8001b26:	4282      	cmp	r2, r0
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	0023      	movs	r3, r4
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	4453      	add	r3, sl
 8001b30:	181b      	adds	r3, r3, r0
 8001b32:	07dd      	lsls	r5, r3, #31
 8001b34:	085c      	lsrs	r4, r3, #1
 8001b36:	2307      	movs	r3, #7
 8001b38:	0852      	lsrs	r2, r2, #1
 8001b3a:	4315      	orrs	r5, r2
 8001b3c:	000f      	movs	r7, r1
 8001b3e:	402b      	ands	r3, r5
 8001b40:	e700      	b.n	8001944 <__aeabi_dadd+0x2d0>
 8001b42:	4663      	mov	r3, ip
 8001b44:	1a1d      	subs	r5, r3, r0
 8001b46:	45ac      	cmp	ip, r5
 8001b48:	4192      	sbcs	r2, r2
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	4252      	negs	r2, r2
 8001b4e:	1b1c      	subs	r4, r3, r4
 8001b50:	000e      	movs	r6, r1
 8001b52:	4688      	mov	r8, r1
 8001b54:	1aa4      	subs	r4, r4, r2
 8001b56:	e5e5      	b.n	8001724 <__aeabi_dadd+0xb0>
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d000      	beq.n	8001b5e <__aeabi_dadd+0x4ea>
 8001b5c:	e091      	b.n	8001c82 <__aeabi_dadd+0x60e>
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d138      	bne.n	8001bd4 <__aeabi_dadd+0x560>
 8001b62:	2480      	movs	r4, #128	@ 0x80
 8001b64:	2600      	movs	r6, #0
 8001b66:	0324      	lsls	r4, r4, #12
 8001b68:	e756      	b.n	8001a18 <__aeabi_dadd+0x3a4>
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	18c5      	adds	r5, r0, r3
 8001b6e:	4285      	cmp	r5, r0
 8001b70:	4180      	sbcs	r0, r0
 8001b72:	4454      	add	r4, sl
 8001b74:	4240      	negs	r0, r0
 8001b76:	1824      	adds	r4, r4, r0
 8001b78:	2701      	movs	r7, #1
 8001b7a:	0223      	lsls	r3, r4, #8
 8001b7c:	d400      	bmi.n	8001b80 <__aeabi_dadd+0x50c>
 8001b7e:	e6df      	b.n	8001940 <__aeabi_dadd+0x2cc>
 8001b80:	2702      	movs	r7, #2
 8001b82:	e687      	b.n	8001894 <__aeabi_dadd+0x220>
 8001b84:	4663      	mov	r3, ip
 8001b86:	1ac5      	subs	r5, r0, r3
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	4180      	sbcs	r0, r0
 8001b8c:	4653      	mov	r3, sl
 8001b8e:	4240      	negs	r0, r0
 8001b90:	1ae4      	subs	r4, r4, r3
 8001b92:	2701      	movs	r7, #1
 8001b94:	1a24      	subs	r4, r4, r0
 8001b96:	e5c0      	b.n	800171a <__aeabi_dadd+0xa6>
 8001b98:	0762      	lsls	r2, r4, #29
 8001b9a:	08c0      	lsrs	r0, r0, #3
 8001b9c:	4302      	orrs	r2, r0
 8001b9e:	08e4      	lsrs	r4, r4, #3
 8001ba0:	e736      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	4653      	mov	r3, sl
 8001ba6:	3920      	subs	r1, #32
 8001ba8:	40cb      	lsrs	r3, r1
 8001baa:	4699      	mov	r9, r3
 8001bac:	2a20      	cmp	r2, #32
 8001bae:	d006      	beq.n	8001bbe <__aeabi_dadd+0x54a>
 8001bb0:	2140      	movs	r1, #64	@ 0x40
 8001bb2:	4653      	mov	r3, sl
 8001bb4:	1a8a      	subs	r2, r1, r2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	4662      	mov	r2, ip
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	4694      	mov	ip, r2
 8001bbe:	4665      	mov	r5, ip
 8001bc0:	1e6b      	subs	r3, r5, #1
 8001bc2:	419d      	sbcs	r5, r3
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	431d      	orrs	r5, r3
 8001bc8:	e659      	b.n	800187e <__aeabi_dadd+0x20a>
 8001bca:	0762      	lsls	r2, r4, #29
 8001bcc:	08c0      	lsrs	r0, r0, #3
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	08e4      	lsrs	r4, r4, #3
 8001bd2:	e70d      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001bd4:	4653      	mov	r3, sl
 8001bd6:	075a      	lsls	r2, r3, #29
 8001bd8:	4663      	mov	r3, ip
 8001bda:	08d8      	lsrs	r0, r3, #3
 8001bdc:	4653      	mov	r3, sl
 8001bde:	000e      	movs	r6, r1
 8001be0:	4302      	orrs	r2, r0
 8001be2:	08dc      	lsrs	r4, r3, #3
 8001be4:	e714      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001be6:	0015      	movs	r5, r2
 8001be8:	0026      	movs	r6, r4
 8001bea:	3d20      	subs	r5, #32
 8001bec:	40ee      	lsrs	r6, r5
 8001bee:	2a20      	cmp	r2, #32
 8001bf0:	d003      	beq.n	8001bfa <__aeabi_dadd+0x586>
 8001bf2:	2540      	movs	r5, #64	@ 0x40
 8001bf4:	1aaa      	subs	r2, r5, r2
 8001bf6:	4094      	lsls	r4, r2
 8001bf8:	4320      	orrs	r0, r4
 8001bfa:	1e42      	subs	r2, r0, #1
 8001bfc:	4190      	sbcs	r0, r2
 8001bfe:	0005      	movs	r5, r0
 8001c00:	4335      	orrs	r5, r6
 8001c02:	e606      	b.n	8001812 <__aeabi_dadd+0x19e>
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	d07c      	beq.n	8001d02 <__aeabi_dadd+0x68e>
 8001c08:	4662      	mov	r2, ip
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	08c0      	lsrs	r0, r0, #3
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dadd+0x5a0>
 8001c12:	e6fa      	b.n	8001a0a <__aeabi_dadd+0x396>
 8001c14:	0762      	lsls	r2, r4, #29
 8001c16:	4310      	orrs	r0, r2
 8001c18:	2280      	movs	r2, #128	@ 0x80
 8001c1a:	08e4      	lsrs	r4, r4, #3
 8001c1c:	0312      	lsls	r2, r2, #12
 8001c1e:	4214      	tst	r4, r2
 8001c20:	d008      	beq.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c22:	08d9      	lsrs	r1, r3, #3
 8001c24:	4211      	tst	r1, r2
 8001c26:	d105      	bne.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c28:	4663      	mov	r3, ip
 8001c2a:	08d8      	lsrs	r0, r3, #3
 8001c2c:	4653      	mov	r3, sl
 8001c2e:	000c      	movs	r4, r1
 8001c30:	075b      	lsls	r3, r3, #29
 8001c32:	4318      	orrs	r0, r3
 8001c34:	0f42      	lsrs	r2, r0, #29
 8001c36:	00c0      	lsls	r0, r0, #3
 8001c38:	08c0      	lsrs	r0, r0, #3
 8001c3a:	0752      	lsls	r2, r2, #29
 8001c3c:	4302      	orrs	r2, r0
 8001c3e:	e6e7      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x5d2>
 8001c44:	e72d      	b.n	8001aa2 <__aeabi_dadd+0x42e>
 8001c46:	4663      	mov	r3, ip
 8001c48:	08d8      	lsrs	r0, r3, #3
 8001c4a:	4653      	mov	r3, sl
 8001c4c:	075a      	lsls	r2, r3, #29
 8001c4e:	000e      	movs	r6, r1
 8001c50:	4302      	orrs	r2, r0
 8001c52:	08dc      	lsrs	r4, r3, #3
 8001c54:	e6cc      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001c56:	4663      	mov	r3, ip
 8001c58:	1a1d      	subs	r5, r3, r0
 8001c5a:	45ac      	cmp	ip, r5
 8001c5c:	4192      	sbcs	r2, r2
 8001c5e:	4653      	mov	r3, sl
 8001c60:	4252      	negs	r2, r2
 8001c62:	1b1c      	subs	r4, r3, r4
 8001c64:	000e      	movs	r6, r1
 8001c66:	4688      	mov	r8, r1
 8001c68:	1aa4      	subs	r4, r4, r2
 8001c6a:	3701      	adds	r7, #1
 8001c6c:	e555      	b.n	800171a <__aeabi_dadd+0xa6>
 8001c6e:	4663      	mov	r3, ip
 8001c70:	08d9      	lsrs	r1, r3, #3
 8001c72:	4653      	mov	r3, sl
 8001c74:	075a      	lsls	r2, r3, #29
 8001c76:	430a      	orrs	r2, r1
 8001c78:	08dc      	lsrs	r4, r3, #3
 8001c7a:	e6c9      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001c7c:	4660      	mov	r0, ip
 8001c7e:	4654      	mov	r4, sl
 8001c80:	e6d4      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 8001c82:	08c0      	lsrs	r0, r0, #3
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dadd+0x616>
 8001c88:	e6bf      	b.n	8001a0a <__aeabi_dadd+0x396>
 8001c8a:	0762      	lsls	r2, r4, #29
 8001c8c:	4310      	orrs	r0, r2
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	08e4      	lsrs	r4, r4, #3
 8001c92:	0312      	lsls	r2, r2, #12
 8001c94:	4214      	tst	r4, r2
 8001c96:	d0cd      	beq.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c98:	08dd      	lsrs	r5, r3, #3
 8001c9a:	4215      	tst	r5, r2
 8001c9c:	d1ca      	bne.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c9e:	4663      	mov	r3, ip
 8001ca0:	08d8      	lsrs	r0, r3, #3
 8001ca2:	4653      	mov	r3, sl
 8001ca4:	075b      	lsls	r3, r3, #29
 8001ca6:	000e      	movs	r6, r1
 8001ca8:	002c      	movs	r4, r5
 8001caa:	4318      	orrs	r0, r3
 8001cac:	e7c2      	b.n	8001c34 <__aeabi_dadd+0x5c0>
 8001cae:	4663      	mov	r3, ip
 8001cb0:	08d9      	lsrs	r1, r3, #3
 8001cb2:	4653      	mov	r3, sl
 8001cb4:	075a      	lsls	r2, r3, #29
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	08dc      	lsrs	r4, r3, #3
 8001cba:	e699      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	08d8      	lsrs	r0, r3, #3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	075a      	lsls	r2, r3, #29
 8001cc4:	000e      	movs	r6, r1
 8001cc6:	4302      	orrs	r2, r0
 8001cc8:	08dc      	lsrs	r4, r3, #3
 8001cca:	e6a1      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0027      	movs	r7, r4
 8001cd0:	3920      	subs	r1, #32
 8001cd2:	40cf      	lsrs	r7, r1
 8001cd4:	2a20      	cmp	r2, #32
 8001cd6:	d003      	beq.n	8001ce0 <__aeabi_dadd+0x66c>
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	1a8a      	subs	r2, r1, r2
 8001cdc:	4094      	lsls	r4, r2
 8001cde:	4320      	orrs	r0, r4
 8001ce0:	1e42      	subs	r2, r0, #1
 8001ce2:	4190      	sbcs	r0, r2
 8001ce4:	0005      	movs	r5, r0
 8001ce6:	433d      	orrs	r5, r7
 8001ce8:	e651      	b.n	800198e <__aeabi_dadd+0x31a>
 8001cea:	000c      	movs	r4, r1
 8001cec:	2500      	movs	r5, #0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	e558      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001cf2:	4460      	add	r0, ip
 8001cf4:	4560      	cmp	r0, ip
 8001cf6:	4192      	sbcs	r2, r2
 8001cf8:	4454      	add	r4, sl
 8001cfa:	4252      	negs	r2, r2
 8001cfc:	0005      	movs	r5, r0
 8001cfe:	18a4      	adds	r4, r4, r2
 8001d00:	e73a      	b.n	8001b78 <__aeabi_dadd+0x504>
 8001d02:	4653      	mov	r3, sl
 8001d04:	075a      	lsls	r2, r3, #29
 8001d06:	4663      	mov	r3, ip
 8001d08:	08d9      	lsrs	r1, r3, #3
 8001d0a:	4653      	mov	r3, sl
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	08dc      	lsrs	r4, r3, #3
 8001d10:	e67e      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001d12:	001a      	movs	r2, r3
 8001d14:	001c      	movs	r4, r3
 8001d16:	432a      	orrs	r2, r5
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dadd+0x6a8>
 8001d1a:	e6ab      	b.n	8001a74 <__aeabi_dadd+0x400>
 8001d1c:	e6c1      	b.n	8001aa2 <__aeabi_dadd+0x42e>
 8001d1e:	2120      	movs	r1, #32
 8001d20:	2500      	movs	r5, #0
 8001d22:	1a09      	subs	r1, r1, r0
 8001d24:	e519      	b.n	800175a <__aeabi_dadd+0xe6>
 8001d26:	2200      	movs	r2, #0
 8001d28:	2500      	movs	r5, #0
 8001d2a:	4c01      	ldr	r4, [pc, #4]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001d2c:	e53a      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff
 8001d34:	ff7fffff 	.word	0xff7fffff
 8001d38:	000007fe 	.word	0x000007fe

08001d3c <__aeabi_ddiv>:
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	46de      	mov	lr, fp
 8001d40:	4645      	mov	r5, r8
 8001d42:	4657      	mov	r7, sl
 8001d44:	464e      	mov	r6, r9
 8001d46:	b5e0      	push	{r5, r6, r7, lr}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	030b      	lsls	r3, r1, #12
 8001d50:	0b1b      	lsrs	r3, r3, #12
 8001d52:	469b      	mov	fp, r3
 8001d54:	0fca      	lsrs	r2, r1, #31
 8001d56:	004b      	lsls	r3, r1, #1
 8001d58:	0004      	movs	r4, r0
 8001d5a:	4680      	mov	r8, r0
 8001d5c:	0d5b      	lsrs	r3, r3, #21
 8001d5e:	9202      	str	r2, [sp, #8]
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x28>
 8001d62:	e16a      	b.n	800203a <__aeabi_ddiv+0x2fe>
 8001d64:	4ad4      	ldr	r2, [pc, #848]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d100      	bne.n	8001d6c <__aeabi_ddiv+0x30>
 8001d6a:	e18c      	b.n	8002086 <__aeabi_ddiv+0x34a>
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	0f42      	lsrs	r2, r0, #29
 8001d70:	00c9      	lsls	r1, r1, #3
 8001d72:	430a      	orrs	r2, r1
 8001d74:	2180      	movs	r1, #128	@ 0x80
 8001d76:	0409      	lsls	r1, r1, #16
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	00c2      	lsls	r2, r0, #3
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4acf      	ldr	r2, [pc, #828]	@ (80020bc <__aeabi_ddiv+0x380>)
 8001d80:	4689      	mov	r9, r1
 8001d82:	4692      	mov	sl, r2
 8001d84:	449a      	add	sl, r3
 8001d86:	2300      	movs	r3, #0
 8001d88:	2400      	movs	r4, #0
 8001d8a:	9303      	str	r3, [sp, #12]
 8001d8c:	9e00      	ldr	r6, [sp, #0]
 8001d8e:	9f01      	ldr	r7, [sp, #4]
 8001d90:	033b      	lsls	r3, r7, #12
 8001d92:	0b1b      	lsrs	r3, r3, #12
 8001d94:	469b      	mov	fp, r3
 8001d96:	007b      	lsls	r3, r7, #1
 8001d98:	0030      	movs	r0, r6
 8001d9a:	0d5b      	lsrs	r3, r3, #21
 8001d9c:	0ffd      	lsrs	r5, r7, #31
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x68>
 8001da2:	e128      	b.n	8001ff6 <__aeabi_ddiv+0x2ba>
 8001da4:	4ac4      	ldr	r2, [pc, #784]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_ddiv+0x70>
 8001daa:	e177      	b.n	800209c <__aeabi_ddiv+0x360>
 8001dac:	4659      	mov	r1, fp
 8001dae:	0f72      	lsrs	r2, r6, #29
 8001db0:	00c9      	lsls	r1, r1, #3
 8001db2:	430a      	orrs	r2, r1
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0409      	lsls	r1, r1, #16
 8001db8:	4311      	orrs	r1, r2
 8001dba:	468b      	mov	fp, r1
 8001dbc:	49bf      	ldr	r1, [pc, #764]	@ (80020bc <__aeabi_ddiv+0x380>)
 8001dbe:	00f2      	lsls	r2, r6, #3
 8001dc0:	468c      	mov	ip, r1
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	4463      	add	r3, ip
 8001dc6:	1acb      	subs	r3, r1, r3
 8001dc8:	469a      	mov	sl, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9e02      	ldr	r6, [sp, #8]
 8001dce:	406e      	eors	r6, r5
 8001dd0:	2c0f      	cmp	r4, #15
 8001dd2:	d827      	bhi.n	8001e24 <__aeabi_ddiv+0xe8>
 8001dd4:	49ba      	ldr	r1, [pc, #744]	@ (80020c0 <__aeabi_ddiv+0x384>)
 8001dd6:	00a4      	lsls	r4, r4, #2
 8001dd8:	5909      	ldr	r1, [r1, r4]
 8001dda:	468f      	mov	pc, r1
 8001ddc:	46cb      	mov	fp, r9
 8001dde:	4642      	mov	r2, r8
 8001de0:	9e02      	ldr	r6, [sp, #8]
 8001de2:	9b03      	ldr	r3, [sp, #12]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d016      	beq.n	8001e16 <__aeabi_ddiv+0xda>
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0xb2>
 8001dec:	e2a6      	b.n	800233c <__aeabi_ddiv+0x600>
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d000      	beq.n	8001df4 <__aeabi_ddiv+0xb8>
 8001df2:	e0df      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 8001df4:	2200      	movs	r2, #0
 8001df6:	2300      	movs	r3, #0
 8001df8:	2400      	movs	r4, #0
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	4323      	orrs	r3, r4
 8001e00:	07f6      	lsls	r6, r6, #31
 8001e02:	4333      	orrs	r3, r6
 8001e04:	4640      	mov	r0, r8
 8001e06:	0019      	movs	r1, r3
 8001e08:	b007      	add	sp, #28
 8001e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e0c:	46bb      	mov	fp, r7
 8001e0e:	46b2      	mov	sl, r6
 8001e10:	46a9      	mov	r9, r5
 8001e12:	46a0      	mov	r8, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	2200      	movs	r2, #0
 8001e18:	2400      	movs	r4, #0
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	4ba6      	ldr	r3, [pc, #664]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001e1e:	e7ed      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8001e20:	002e      	movs	r6, r5
 8001e22:	e7df      	b.n	8001de4 <__aeabi_ddiv+0xa8>
 8001e24:	45cb      	cmp	fp, r9
 8001e26:	d200      	bcs.n	8001e2a <__aeabi_ddiv+0xee>
 8001e28:	e1d4      	b.n	80021d4 <__aeabi_ddiv+0x498>
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_ddiv+0xf2>
 8001e2c:	e1cf      	b.n	80021ce <__aeabi_ddiv+0x492>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	425b      	negs	r3, r3
 8001e32:	469c      	mov	ip, r3
 8001e34:	4644      	mov	r4, r8
 8001e36:	4648      	mov	r0, r9
 8001e38:	2700      	movs	r7, #0
 8001e3a:	44e2      	add	sl, ip
 8001e3c:	465b      	mov	r3, fp
 8001e3e:	0e15      	lsrs	r5, r2, #24
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	431d      	orrs	r5, r3
 8001e44:	0c19      	lsrs	r1, r3, #16
 8001e46:	042b      	lsls	r3, r5, #16
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	9500      	str	r5, [sp, #0]
 8001e4c:	0c1d      	lsrs	r5, r3, #16
 8001e4e:	4691      	mov	r9, r2
 8001e50:	9102      	str	r1, [sp, #8]
 8001e52:	9503      	str	r5, [sp, #12]
 8001e54:	f7fe fa22 	bl	800029c <__aeabi_uidivmod>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	436a      	muls	r2, r5
 8001e5c:	040b      	lsls	r3, r1, #16
 8001e5e:	0c21      	lsrs	r1, r4, #16
 8001e60:	4680      	mov	r8, r0
 8001e62:	4319      	orrs	r1, r3
 8001e64:	428a      	cmp	r2, r1
 8001e66:	d909      	bls.n	8001e7c <__aeabi_ddiv+0x140>
 8001e68:	9d00      	ldr	r5, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	46ac      	mov	ip, r5
 8001e6e:	425b      	negs	r3, r3
 8001e70:	4461      	add	r1, ip
 8001e72:	469c      	mov	ip, r3
 8001e74:	44e0      	add	r8, ip
 8001e76:	428d      	cmp	r5, r1
 8001e78:	d800      	bhi.n	8001e7c <__aeabi_ddiv+0x140>
 8001e7a:	e1fb      	b.n	8002274 <__aeabi_ddiv+0x538>
 8001e7c:	1a88      	subs	r0, r1, r2
 8001e7e:	9902      	ldr	r1, [sp, #8]
 8001e80:	f7fe fa0c 	bl	800029c <__aeabi_uidivmod>
 8001e84:	9a03      	ldr	r2, [sp, #12]
 8001e86:	0424      	lsls	r4, r4, #16
 8001e88:	4342      	muls	r2, r0
 8001e8a:	0409      	lsls	r1, r1, #16
 8001e8c:	0c24      	lsrs	r4, r4, #16
 8001e8e:	0003      	movs	r3, r0
 8001e90:	430c      	orrs	r4, r1
 8001e92:	42a2      	cmp	r2, r4
 8001e94:	d906      	bls.n	8001ea4 <__aeabi_ddiv+0x168>
 8001e96:	9900      	ldr	r1, [sp, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	468c      	mov	ip, r1
 8001e9c:	4464      	add	r4, ip
 8001e9e:	42a1      	cmp	r1, r4
 8001ea0:	d800      	bhi.n	8001ea4 <__aeabi_ddiv+0x168>
 8001ea2:	e1e1      	b.n	8002268 <__aeabi_ddiv+0x52c>
 8001ea4:	1aa0      	subs	r0, r4, r2
 8001ea6:	4642      	mov	r2, r8
 8001ea8:	0412      	lsls	r2, r2, #16
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	4693      	mov	fp, r2
 8001eae:	464b      	mov	r3, r9
 8001eb0:	4659      	mov	r1, fp
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	001d      	movs	r5, r3
 8001eb6:	9304      	str	r3, [sp, #16]
 8001eb8:	040b      	lsls	r3, r1, #16
 8001eba:	4649      	mov	r1, r9
 8001ebc:	0409      	lsls	r1, r1, #16
 8001ebe:	0c09      	lsrs	r1, r1, #16
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	435c      	muls	r4, r3
 8001ec6:	0c12      	lsrs	r2, r2, #16
 8001ec8:	436b      	muls	r3, r5
 8001eca:	4688      	mov	r8, r1
 8001ecc:	4351      	muls	r1, r2
 8001ece:	436a      	muls	r2, r5
 8001ed0:	0c25      	lsrs	r5, r4, #16
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	185b      	adds	r3, r3, r1
 8001ed6:	4463      	add	r3, ip
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d903      	bls.n	8001ee4 <__aeabi_ddiv+0x1a8>
 8001edc:	2180      	movs	r1, #128	@ 0x80
 8001ede:	0249      	lsls	r1, r1, #9
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	4462      	add	r2, ip
 8001ee4:	0c19      	lsrs	r1, r3, #16
 8001ee6:	0424      	lsls	r4, r4, #16
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	0c24      	lsrs	r4, r4, #16
 8001eec:	188a      	adds	r2, r1, r2
 8001eee:	191c      	adds	r4, r3, r4
 8001ef0:	4290      	cmp	r0, r2
 8001ef2:	d302      	bcc.n	8001efa <__aeabi_ddiv+0x1be>
 8001ef4:	d116      	bne.n	8001f24 <__aeabi_ddiv+0x1e8>
 8001ef6:	42a7      	cmp	r7, r4
 8001ef8:	d214      	bcs.n	8001f24 <__aeabi_ddiv+0x1e8>
 8001efa:	465b      	mov	r3, fp
 8001efc:	9d00      	ldr	r5, [sp, #0]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	444f      	add	r7, r9
 8001f02:	9305      	str	r3, [sp, #20]
 8001f04:	454f      	cmp	r7, r9
 8001f06:	419b      	sbcs	r3, r3
 8001f08:	46ac      	mov	ip, r5
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	4463      	add	r3, ip
 8001f0e:	18c0      	adds	r0, r0, r3
 8001f10:	4285      	cmp	r5, r0
 8001f12:	d300      	bcc.n	8001f16 <__aeabi_ddiv+0x1da>
 8001f14:	e1a1      	b.n	800225a <__aeabi_ddiv+0x51e>
 8001f16:	4282      	cmp	r2, r0
 8001f18:	d900      	bls.n	8001f1c <__aeabi_ddiv+0x1e0>
 8001f1a:	e1f6      	b.n	800230a <__aeabi_ddiv+0x5ce>
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_ddiv+0x1e4>
 8001f1e:	e1f1      	b.n	8002304 <__aeabi_ddiv+0x5c8>
 8001f20:	9b05      	ldr	r3, [sp, #20]
 8001f22:	469b      	mov	fp, r3
 8001f24:	1b3c      	subs	r4, r7, r4
 8001f26:	42a7      	cmp	r7, r4
 8001f28:	41bf      	sbcs	r7, r7
 8001f2a:	9d00      	ldr	r5, [sp, #0]
 8001f2c:	1a80      	subs	r0, r0, r2
 8001f2e:	427f      	negs	r7, r7
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	4285      	cmp	r5, r0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_ddiv+0x1fc>
 8001f36:	e1d0      	b.n	80022da <__aeabi_ddiv+0x59e>
 8001f38:	9902      	ldr	r1, [sp, #8]
 8001f3a:	f7fe f9af 	bl	800029c <__aeabi_uidivmod>
 8001f3e:	9a03      	ldr	r2, [sp, #12]
 8001f40:	040b      	lsls	r3, r1, #16
 8001f42:	4342      	muls	r2, r0
 8001f44:	0c21      	lsrs	r1, r4, #16
 8001f46:	0007      	movs	r7, r0
 8001f48:	4319      	orrs	r1, r3
 8001f4a:	428a      	cmp	r2, r1
 8001f4c:	d900      	bls.n	8001f50 <__aeabi_ddiv+0x214>
 8001f4e:	e178      	b.n	8002242 <__aeabi_ddiv+0x506>
 8001f50:	1a88      	subs	r0, r1, r2
 8001f52:	9902      	ldr	r1, [sp, #8]
 8001f54:	f7fe f9a2 	bl	800029c <__aeabi_uidivmod>
 8001f58:	9a03      	ldr	r2, [sp, #12]
 8001f5a:	0424      	lsls	r4, r4, #16
 8001f5c:	4342      	muls	r2, r0
 8001f5e:	0409      	lsls	r1, r1, #16
 8001f60:	0c24      	lsrs	r4, r4, #16
 8001f62:	0003      	movs	r3, r0
 8001f64:	430c      	orrs	r4, r1
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	d900      	bls.n	8001f6c <__aeabi_ddiv+0x230>
 8001f6a:	e15d      	b.n	8002228 <__aeabi_ddiv+0x4ec>
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	1aa4      	subs	r4, r4, r2
 8001f70:	043a      	lsls	r2, r7, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	9d04      	ldr	r5, [sp, #16]
 8001f76:	0413      	lsls	r3, r2, #16
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	4359      	muls	r1, r3
 8001f7c:	4647      	mov	r7, r8
 8001f7e:	436b      	muls	r3, r5
 8001f80:	469c      	mov	ip, r3
 8001f82:	0c10      	lsrs	r0, r2, #16
 8001f84:	4347      	muls	r7, r0
 8001f86:	0c0b      	lsrs	r3, r1, #16
 8001f88:	44bc      	add	ip, r7
 8001f8a:	4463      	add	r3, ip
 8001f8c:	4368      	muls	r0, r5
 8001f8e:	429f      	cmp	r7, r3
 8001f90:	d903      	bls.n	8001f9a <__aeabi_ddiv+0x25e>
 8001f92:	2580      	movs	r5, #128	@ 0x80
 8001f94:	026d      	lsls	r5, r5, #9
 8001f96:	46ac      	mov	ip, r5
 8001f98:	4460      	add	r0, ip
 8001f9a:	0c1f      	lsrs	r7, r3, #16
 8001f9c:	0409      	lsls	r1, r1, #16
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	0c09      	lsrs	r1, r1, #16
 8001fa2:	183f      	adds	r7, r7, r0
 8001fa4:	185b      	adds	r3, r3, r1
 8001fa6:	42bc      	cmp	r4, r7
 8001fa8:	d200      	bcs.n	8001fac <__aeabi_ddiv+0x270>
 8001faa:	e102      	b.n	80021b2 <__aeabi_ddiv+0x476>
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x274>
 8001fae:	e0fd      	b.n	80021ac <__aeabi_ddiv+0x470>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <__aeabi_ddiv+0x388>)
 8001fb6:	4453      	add	r3, sl
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dc00      	bgt.n	8001fbe <__aeabi_ddiv+0x282>
 8001fbc:	e0ae      	b.n	800211c <__aeabi_ddiv+0x3e0>
 8001fbe:	0751      	lsls	r1, r2, #29
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_ddiv+0x288>
 8001fc2:	e198      	b.n	80022f6 <__aeabi_ddiv+0x5ba>
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	01c9      	lsls	r1, r1, #7
 8001fc8:	d506      	bpl.n	8001fd8 <__aeabi_ddiv+0x29c>
 8001fca:	4659      	mov	r1, fp
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <__aeabi_ddiv+0x38c>)
 8001fce:	4019      	ands	r1, r3
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	468b      	mov	fp, r1
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4453      	add	r3, sl
 8001fd8:	493c      	ldr	r1, [pc, #240]	@ (80020cc <__aeabi_ddiv+0x390>)
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	dd00      	ble.n	8001fe0 <__aeabi_ddiv+0x2a4>
 8001fde:	e71a      	b.n	8001e16 <__aeabi_ddiv+0xda>
 8001fe0:	4659      	mov	r1, fp
 8001fe2:	08d2      	lsrs	r2, r2, #3
 8001fe4:	0749      	lsls	r1, r1, #29
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	465a      	mov	r2, fp
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	0254      	lsls	r4, r2, #9
 8001fee:	4688      	mov	r8, r1
 8001ff0:	0b24      	lsrs	r4, r4, #12
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	e702      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8001ff6:	465a      	mov	r2, fp
 8001ff8:	9b00      	ldr	r3, [sp, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x2c4>
 8001ffe:	e07e      	b.n	80020fe <__aeabi_ddiv+0x3c2>
 8002000:	465b      	mov	r3, fp
 8002002:	2b00      	cmp	r3, #0
 8002004:	d100      	bne.n	8002008 <__aeabi_ddiv+0x2cc>
 8002006:	e100      	b.n	800220a <__aeabi_ddiv+0x4ce>
 8002008:	4658      	mov	r0, fp
 800200a:	f7fe faaf 	bl	800056c <__clzsi2>
 800200e:	0002      	movs	r2, r0
 8002010:	0003      	movs	r3, r0
 8002012:	3a0b      	subs	r2, #11
 8002014:	271d      	movs	r7, #29
 8002016:	9e00      	ldr	r6, [sp, #0]
 8002018:	1aba      	subs	r2, r7, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4658      	mov	r0, fp
 800201e:	40d6      	lsrs	r6, r2
 8002020:	3908      	subs	r1, #8
 8002022:	4088      	lsls	r0, r1
 8002024:	0032      	movs	r2, r6
 8002026:	4302      	orrs	r2, r0
 8002028:	4693      	mov	fp, r2
 800202a:	9a00      	ldr	r2, [sp, #0]
 800202c:	408a      	lsls	r2, r1
 800202e:	4928      	ldr	r1, [pc, #160]	@ (80020d0 <__aeabi_ddiv+0x394>)
 8002030:	4453      	add	r3, sl
 8002032:	468a      	mov	sl, r1
 8002034:	449a      	add	sl, r3
 8002036:	2300      	movs	r3, #0
 8002038:	e6c8      	b.n	8001dcc <__aeabi_ddiv+0x90>
 800203a:	465b      	mov	r3, fp
 800203c:	4303      	orrs	r3, r0
 800203e:	4699      	mov	r9, r3
 8002040:	d056      	beq.n	80020f0 <__aeabi_ddiv+0x3b4>
 8002042:	465b      	mov	r3, fp
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <__aeabi_ddiv+0x30e>
 8002048:	e0cd      	b.n	80021e6 <__aeabi_ddiv+0x4aa>
 800204a:	4658      	mov	r0, fp
 800204c:	f7fe fa8e 	bl	800056c <__clzsi2>
 8002050:	230b      	movs	r3, #11
 8002052:	425b      	negs	r3, r3
 8002054:	469c      	mov	ip, r3
 8002056:	0002      	movs	r2, r0
 8002058:	4484      	add	ip, r0
 800205a:	4666      	mov	r6, ip
 800205c:	231d      	movs	r3, #29
 800205e:	1b9b      	subs	r3, r3, r6
 8002060:	0026      	movs	r6, r4
 8002062:	0011      	movs	r1, r2
 8002064:	4658      	mov	r0, fp
 8002066:	40de      	lsrs	r6, r3
 8002068:	3908      	subs	r1, #8
 800206a:	4088      	lsls	r0, r1
 800206c:	0033      	movs	r3, r6
 800206e:	4303      	orrs	r3, r0
 8002070:	4699      	mov	r9, r3
 8002072:	0023      	movs	r3, r4
 8002074:	408b      	lsls	r3, r1
 8002076:	4698      	mov	r8, r3
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <__aeabi_ddiv+0x398>)
 800207a:	2400      	movs	r4, #0
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	469a      	mov	sl, r3
 8002080:	2300      	movs	r3, #0
 8002082:	9303      	str	r3, [sp, #12]
 8002084:	e682      	b.n	8001d8c <__aeabi_ddiv+0x50>
 8002086:	465a      	mov	r2, fp
 8002088:	4302      	orrs	r2, r0
 800208a:	4691      	mov	r9, r2
 800208c:	d12a      	bne.n	80020e4 <__aeabi_ddiv+0x3a8>
 800208e:	2200      	movs	r2, #0
 8002090:	469a      	mov	sl, r3
 8002092:	2302      	movs	r3, #2
 8002094:	4690      	mov	r8, r2
 8002096:	2408      	movs	r4, #8
 8002098:	9303      	str	r3, [sp, #12]
 800209a:	e677      	b.n	8001d8c <__aeabi_ddiv+0x50>
 800209c:	465a      	mov	r2, fp
 800209e:	9b00      	ldr	r3, [sp, #0]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <__aeabi_ddiv+0x39c>)
 80020a4:	469c      	mov	ip, r3
 80020a6:	44e2      	add	sl, ip
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d117      	bne.n	80020dc <__aeabi_ddiv+0x3a0>
 80020ac:	2302      	movs	r3, #2
 80020ae:	431c      	orrs	r4, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	469b      	mov	fp, r3
 80020b4:	3302      	adds	r3, #2
 80020b6:	e689      	b.n	8001dcc <__aeabi_ddiv+0x90>
 80020b8:	000007ff 	.word	0x000007ff
 80020bc:	fffffc01 	.word	0xfffffc01
 80020c0:	080152ec 	.word	0x080152ec
 80020c4:	000003ff 	.word	0x000003ff
 80020c8:	feffffff 	.word	0xfeffffff
 80020cc:	000007fe 	.word	0x000007fe
 80020d0:	000003f3 	.word	0x000003f3
 80020d4:	fffffc0d 	.word	0xfffffc0d
 80020d8:	fffff801 	.word	0xfffff801
 80020dc:	2303      	movs	r3, #3
 80020de:	0032      	movs	r2, r6
 80020e0:	431c      	orrs	r4, r3
 80020e2:	e673      	b.n	8001dcc <__aeabi_ddiv+0x90>
 80020e4:	469a      	mov	sl, r3
 80020e6:	2303      	movs	r3, #3
 80020e8:	46d9      	mov	r9, fp
 80020ea:	240c      	movs	r4, #12
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	e64d      	b.n	8001d8c <__aeabi_ddiv+0x50>
 80020f0:	2300      	movs	r3, #0
 80020f2:	4698      	mov	r8, r3
 80020f4:	469a      	mov	sl, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	2404      	movs	r4, #4
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e646      	b.n	8001d8c <__aeabi_ddiv+0x50>
 80020fe:	2301      	movs	r3, #1
 8002100:	431c      	orrs	r4, r3
 8002102:	2300      	movs	r3, #0
 8002104:	469b      	mov	fp, r3
 8002106:	3301      	adds	r3, #1
 8002108:	e660      	b.n	8001dcc <__aeabi_ddiv+0x90>
 800210a:	2300      	movs	r3, #0
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	4698      	mov	r8, r3
 8002110:	2600      	movs	r6, #0
 8002112:	4b92      	ldr	r3, [pc, #584]	@ (800235c <__aeabi_ddiv+0x620>)
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	e671      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8002118:	2201      	movs	r2, #1
 800211a:	4252      	negs	r2, r2
 800211c:	2101      	movs	r1, #1
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	2938      	cmp	r1, #56	@ 0x38
 8002122:	dd00      	ble.n	8002126 <__aeabi_ddiv+0x3ea>
 8002124:	e666      	b.n	8001df4 <__aeabi_ddiv+0xb8>
 8002126:	291f      	cmp	r1, #31
 8002128:	dc00      	bgt.n	800212c <__aeabi_ddiv+0x3f0>
 800212a:	e0ab      	b.n	8002284 <__aeabi_ddiv+0x548>
 800212c:	201f      	movs	r0, #31
 800212e:	4240      	negs	r0, r0
 8002130:	1ac3      	subs	r3, r0, r3
 8002132:	4658      	mov	r0, fp
 8002134:	40d8      	lsrs	r0, r3
 8002136:	0003      	movs	r3, r0
 8002138:	2920      	cmp	r1, #32
 800213a:	d004      	beq.n	8002146 <__aeabi_ddiv+0x40a>
 800213c:	4658      	mov	r0, fp
 800213e:	4988      	ldr	r1, [pc, #544]	@ (8002360 <__aeabi_ddiv+0x624>)
 8002140:	4451      	add	r1, sl
 8002142:	4088      	lsls	r0, r1
 8002144:	4302      	orrs	r2, r0
 8002146:	1e51      	subs	r1, r2, #1
 8002148:	418a      	sbcs	r2, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	2307      	movs	r3, #7
 800214e:	0019      	movs	r1, r3
 8002150:	2400      	movs	r4, #0
 8002152:	4011      	ands	r1, r2
 8002154:	4213      	tst	r3, r2
 8002156:	d00c      	beq.n	8002172 <__aeabi_ddiv+0x436>
 8002158:	230f      	movs	r3, #15
 800215a:	4013      	ands	r3, r2
 800215c:	2b04      	cmp	r3, #4
 800215e:	d100      	bne.n	8002162 <__aeabi_ddiv+0x426>
 8002160:	e0f9      	b.n	8002356 <__aeabi_ddiv+0x61a>
 8002162:	1d11      	adds	r1, r2, #4
 8002164:	4291      	cmp	r1, r2
 8002166:	419b      	sbcs	r3, r3
 8002168:	000a      	movs	r2, r1
 800216a:	425b      	negs	r3, r3
 800216c:	0759      	lsls	r1, r3, #29
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	0b1c      	lsrs	r4, r3, #12
 8002172:	08d2      	lsrs	r2, r2, #3
 8002174:	430a      	orrs	r2, r1
 8002176:	4690      	mov	r8, r2
 8002178:	2300      	movs	r3, #0
 800217a:	e63f      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800217c:	2480      	movs	r4, #128	@ 0x80
 800217e:	464b      	mov	r3, r9
 8002180:	0324      	lsls	r4, r4, #12
 8002182:	4223      	tst	r3, r4
 8002184:	d009      	beq.n	800219a <__aeabi_ddiv+0x45e>
 8002186:	465b      	mov	r3, fp
 8002188:	4223      	tst	r3, r4
 800218a:	d106      	bne.n	800219a <__aeabi_ddiv+0x45e>
 800218c:	431c      	orrs	r4, r3
 800218e:	0324      	lsls	r4, r4, #12
 8002190:	002e      	movs	r6, r5
 8002192:	4690      	mov	r8, r2
 8002194:	4b71      	ldr	r3, [pc, #452]	@ (800235c <__aeabi_ddiv+0x620>)
 8002196:	0b24      	lsrs	r4, r4, #12
 8002198:	e630      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800219a:	2480      	movs	r4, #128	@ 0x80
 800219c:	464b      	mov	r3, r9
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	431c      	orrs	r4, r3
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	9e02      	ldr	r6, [sp, #8]
 80021a6:	4b6d      	ldr	r3, [pc, #436]	@ (800235c <__aeabi_ddiv+0x620>)
 80021a8:	0b24      	lsrs	r4, r4, #12
 80021aa:	e627      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d100      	bne.n	80021b2 <__aeabi_ddiv+0x476>
 80021b0:	e700      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 80021b2:	9800      	ldr	r0, [sp, #0]
 80021b4:	1e51      	subs	r1, r2, #1
 80021b6:	4684      	mov	ip, r0
 80021b8:	4464      	add	r4, ip
 80021ba:	4284      	cmp	r4, r0
 80021bc:	d200      	bcs.n	80021c0 <__aeabi_ddiv+0x484>
 80021be:	e084      	b.n	80022ca <__aeabi_ddiv+0x58e>
 80021c0:	42bc      	cmp	r4, r7
 80021c2:	d200      	bcs.n	80021c6 <__aeabi_ddiv+0x48a>
 80021c4:	e0ae      	b.n	8002324 <__aeabi_ddiv+0x5e8>
 80021c6:	d100      	bne.n	80021ca <__aeabi_ddiv+0x48e>
 80021c8:	e0c1      	b.n	800234e <__aeabi_ddiv+0x612>
 80021ca:	000a      	movs	r2, r1
 80021cc:	e6f0      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80021ce:	4542      	cmp	r2, r8
 80021d0:	d900      	bls.n	80021d4 <__aeabi_ddiv+0x498>
 80021d2:	e62c      	b.n	8001e2e <__aeabi_ddiv+0xf2>
 80021d4:	464b      	mov	r3, r9
 80021d6:	07dc      	lsls	r4, r3, #31
 80021d8:	0858      	lsrs	r0, r3, #1
 80021da:	4643      	mov	r3, r8
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	431c      	orrs	r4, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	07df      	lsls	r7, r3, #31
 80021e4:	e62a      	b.n	8001e3c <__aeabi_ddiv+0x100>
 80021e6:	f7fe f9c1 	bl	800056c <__clzsi2>
 80021ea:	2315      	movs	r3, #21
 80021ec:	469c      	mov	ip, r3
 80021ee:	4484      	add	ip, r0
 80021f0:	0002      	movs	r2, r0
 80021f2:	4663      	mov	r3, ip
 80021f4:	3220      	adds	r2, #32
 80021f6:	2b1c      	cmp	r3, #28
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_ddiv+0x4c0>
 80021fa:	e72e      	b.n	800205a <__aeabi_ddiv+0x31e>
 80021fc:	0023      	movs	r3, r4
 80021fe:	3808      	subs	r0, #8
 8002200:	4083      	lsls	r3, r0
 8002202:	4699      	mov	r9, r3
 8002204:	2300      	movs	r3, #0
 8002206:	4698      	mov	r8, r3
 8002208:	e736      	b.n	8002078 <__aeabi_ddiv+0x33c>
 800220a:	f7fe f9af 	bl	800056c <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3215      	adds	r2, #21
 8002214:	3320      	adds	r3, #32
 8002216:	2a1c      	cmp	r2, #28
 8002218:	dc00      	bgt.n	800221c <__aeabi_ddiv+0x4e0>
 800221a:	e6fb      	b.n	8002014 <__aeabi_ddiv+0x2d8>
 800221c:	9900      	ldr	r1, [sp, #0]
 800221e:	3808      	subs	r0, #8
 8002220:	4081      	lsls	r1, r0
 8002222:	2200      	movs	r2, #0
 8002224:	468b      	mov	fp, r1
 8002226:	e702      	b.n	800202e <__aeabi_ddiv+0x2f2>
 8002228:	9900      	ldr	r1, [sp, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	468c      	mov	ip, r1
 800222e:	4464      	add	r4, ip
 8002230:	42a1      	cmp	r1, r4
 8002232:	d900      	bls.n	8002236 <__aeabi_ddiv+0x4fa>
 8002234:	e69a      	b.n	8001f6c <__aeabi_ddiv+0x230>
 8002236:	42a2      	cmp	r2, r4
 8002238:	d800      	bhi.n	800223c <__aeabi_ddiv+0x500>
 800223a:	e697      	b.n	8001f6c <__aeabi_ddiv+0x230>
 800223c:	1e83      	subs	r3, r0, #2
 800223e:	4464      	add	r4, ip
 8002240:	e694      	b.n	8001f6c <__aeabi_ddiv+0x230>
 8002242:	46ac      	mov	ip, r5
 8002244:	4461      	add	r1, ip
 8002246:	3f01      	subs	r7, #1
 8002248:	428d      	cmp	r5, r1
 800224a:	d900      	bls.n	800224e <__aeabi_ddiv+0x512>
 800224c:	e680      	b.n	8001f50 <__aeabi_ddiv+0x214>
 800224e:	428a      	cmp	r2, r1
 8002250:	d800      	bhi.n	8002254 <__aeabi_ddiv+0x518>
 8002252:	e67d      	b.n	8001f50 <__aeabi_ddiv+0x214>
 8002254:	1e87      	subs	r7, r0, #2
 8002256:	4461      	add	r1, ip
 8002258:	e67a      	b.n	8001f50 <__aeabi_ddiv+0x214>
 800225a:	4285      	cmp	r5, r0
 800225c:	d000      	beq.n	8002260 <__aeabi_ddiv+0x524>
 800225e:	e65f      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 8002260:	45b9      	cmp	r9, r7
 8002262:	d900      	bls.n	8002266 <__aeabi_ddiv+0x52a>
 8002264:	e65c      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 8002266:	e656      	b.n	8001f16 <__aeabi_ddiv+0x1da>
 8002268:	42a2      	cmp	r2, r4
 800226a:	d800      	bhi.n	800226e <__aeabi_ddiv+0x532>
 800226c:	e61a      	b.n	8001ea4 <__aeabi_ddiv+0x168>
 800226e:	1e83      	subs	r3, r0, #2
 8002270:	4464      	add	r4, ip
 8002272:	e617      	b.n	8001ea4 <__aeabi_ddiv+0x168>
 8002274:	428a      	cmp	r2, r1
 8002276:	d800      	bhi.n	800227a <__aeabi_ddiv+0x53e>
 8002278:	e600      	b.n	8001e7c <__aeabi_ddiv+0x140>
 800227a:	46ac      	mov	ip, r5
 800227c:	1e83      	subs	r3, r0, #2
 800227e:	4698      	mov	r8, r3
 8002280:	4461      	add	r1, ip
 8002282:	e5fb      	b.n	8001e7c <__aeabi_ddiv+0x140>
 8002284:	4837      	ldr	r0, [pc, #220]	@ (8002364 <__aeabi_ddiv+0x628>)
 8002286:	0014      	movs	r4, r2
 8002288:	4450      	add	r0, sl
 800228a:	4082      	lsls	r2, r0
 800228c:	465b      	mov	r3, fp
 800228e:	0017      	movs	r7, r2
 8002290:	4083      	lsls	r3, r0
 8002292:	40cc      	lsrs	r4, r1
 8002294:	1e7a      	subs	r2, r7, #1
 8002296:	4197      	sbcs	r7, r2
 8002298:	4323      	orrs	r3, r4
 800229a:	433b      	orrs	r3, r7
 800229c:	001a      	movs	r2, r3
 800229e:	465b      	mov	r3, fp
 80022a0:	40cb      	lsrs	r3, r1
 80022a2:	0751      	lsls	r1, r2, #29
 80022a4:	d009      	beq.n	80022ba <__aeabi_ddiv+0x57e>
 80022a6:	210f      	movs	r1, #15
 80022a8:	4011      	ands	r1, r2
 80022aa:	2904      	cmp	r1, #4
 80022ac:	d005      	beq.n	80022ba <__aeabi_ddiv+0x57e>
 80022ae:	1d11      	adds	r1, r2, #4
 80022b0:	4291      	cmp	r1, r2
 80022b2:	4192      	sbcs	r2, r2
 80022b4:	4252      	negs	r2, r2
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	000a      	movs	r2, r1
 80022ba:	0219      	lsls	r1, r3, #8
 80022bc:	d400      	bmi.n	80022c0 <__aeabi_ddiv+0x584>
 80022be:	e755      	b.n	800216c <__aeabi_ddiv+0x430>
 80022c0:	2200      	movs	r2, #0
 80022c2:	2301      	movs	r3, #1
 80022c4:	2400      	movs	r4, #0
 80022c6:	4690      	mov	r8, r2
 80022c8:	e598      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 80022ca:	000a      	movs	r2, r1
 80022cc:	42bc      	cmp	r4, r7
 80022ce:	d000      	beq.n	80022d2 <__aeabi_ddiv+0x596>
 80022d0:	e66e      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80022d2:	454b      	cmp	r3, r9
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x59c>
 80022d6:	e66b      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80022d8:	e66c      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 80022da:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <__aeabi_ddiv+0x62c>)
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <__aeabi_ddiv+0x630>)
 80022de:	4453      	add	r3, sl
 80022e0:	4592      	cmp	sl, r2
 80022e2:	da00      	bge.n	80022e6 <__aeabi_ddiv+0x5aa>
 80022e4:	e718      	b.n	8002118 <__aeabi_ddiv+0x3dc>
 80022e6:	2101      	movs	r1, #1
 80022e8:	4249      	negs	r1, r1
 80022ea:	1d0a      	adds	r2, r1, #4
 80022ec:	428a      	cmp	r2, r1
 80022ee:	4189      	sbcs	r1, r1
 80022f0:	4249      	negs	r1, r1
 80022f2:	448b      	add	fp, r1
 80022f4:	e666      	b.n	8001fc4 <__aeabi_ddiv+0x288>
 80022f6:	210f      	movs	r1, #15
 80022f8:	4011      	ands	r1, r2
 80022fa:	2904      	cmp	r1, #4
 80022fc:	d100      	bne.n	8002300 <__aeabi_ddiv+0x5c4>
 80022fe:	e661      	b.n	8001fc4 <__aeabi_ddiv+0x288>
 8002300:	0011      	movs	r1, r2
 8002302:	e7f2      	b.n	80022ea <__aeabi_ddiv+0x5ae>
 8002304:	42bc      	cmp	r4, r7
 8002306:	d800      	bhi.n	800230a <__aeabi_ddiv+0x5ce>
 8002308:	e60a      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 800230a:	2302      	movs	r3, #2
 800230c:	425b      	negs	r3, r3
 800230e:	469c      	mov	ip, r3
 8002310:	9900      	ldr	r1, [sp, #0]
 8002312:	444f      	add	r7, r9
 8002314:	454f      	cmp	r7, r9
 8002316:	419b      	sbcs	r3, r3
 8002318:	44e3      	add	fp, ip
 800231a:	468c      	mov	ip, r1
 800231c:	425b      	negs	r3, r3
 800231e:	4463      	add	r3, ip
 8002320:	18c0      	adds	r0, r0, r3
 8002322:	e5ff      	b.n	8001f24 <__aeabi_ddiv+0x1e8>
 8002324:	4649      	mov	r1, r9
 8002326:	9d00      	ldr	r5, [sp, #0]
 8002328:	0048      	lsls	r0, r1, #1
 800232a:	4548      	cmp	r0, r9
 800232c:	4189      	sbcs	r1, r1
 800232e:	46ac      	mov	ip, r5
 8002330:	4249      	negs	r1, r1
 8002332:	4461      	add	r1, ip
 8002334:	4681      	mov	r9, r0
 8002336:	3a02      	subs	r2, #2
 8002338:	1864      	adds	r4, r4, r1
 800233a:	e7c7      	b.n	80022cc <__aeabi_ddiv+0x590>
 800233c:	2480      	movs	r4, #128	@ 0x80
 800233e:	465b      	mov	r3, fp
 8002340:	0324      	lsls	r4, r4, #12
 8002342:	431c      	orrs	r4, r3
 8002344:	0324      	lsls	r4, r4, #12
 8002346:	4690      	mov	r8, r2
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__aeabi_ddiv+0x620>)
 800234a:	0b24      	lsrs	r4, r4, #12
 800234c:	e556      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800234e:	4599      	cmp	r9, r3
 8002350:	d3e8      	bcc.n	8002324 <__aeabi_ddiv+0x5e8>
 8002352:	000a      	movs	r2, r1
 8002354:	e7bd      	b.n	80022d2 <__aeabi_ddiv+0x596>
 8002356:	2300      	movs	r3, #0
 8002358:	e708      	b.n	800216c <__aeabi_ddiv+0x430>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	0000043e 	.word	0x0000043e
 8002364:	0000041e 	.word	0x0000041e
 8002368:	000003ff 	.word	0x000003ff
 800236c:	fffffc02 	.word	0xfffffc02

08002370 <__eqdf2>:
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002372:	4657      	mov	r7, sl
 8002374:	46de      	mov	lr, fp
 8002376:	464e      	mov	r6, r9
 8002378:	4645      	mov	r5, r8
 800237a:	b5e0      	push	{r5, r6, r7, lr}
 800237c:	000d      	movs	r5, r1
 800237e:	0004      	movs	r4, r0
 8002380:	0fe8      	lsrs	r0, r5, #31
 8002382:	4683      	mov	fp, r0
 8002384:	0309      	lsls	r1, r1, #12
 8002386:	0fd8      	lsrs	r0, r3, #31
 8002388:	0b09      	lsrs	r1, r1, #12
 800238a:	4682      	mov	sl, r0
 800238c:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <__eqdf2+0x84>)
 800238e:	468c      	mov	ip, r1
 8002390:	031f      	lsls	r7, r3, #12
 8002392:	0069      	lsls	r1, r5, #1
 8002394:	005e      	lsls	r6, r3, #1
 8002396:	0d49      	lsrs	r1, r1, #21
 8002398:	0b3f      	lsrs	r7, r7, #12
 800239a:	0d76      	lsrs	r6, r6, #21
 800239c:	4281      	cmp	r1, r0
 800239e:	d018      	beq.n	80023d2 <__eqdf2+0x62>
 80023a0:	4286      	cmp	r6, r0
 80023a2:	d00f      	beq.n	80023c4 <__eqdf2+0x54>
 80023a4:	2001      	movs	r0, #1
 80023a6:	42b1      	cmp	r1, r6
 80023a8:	d10d      	bne.n	80023c6 <__eqdf2+0x56>
 80023aa:	45bc      	cmp	ip, r7
 80023ac:	d10b      	bne.n	80023c6 <__eqdf2+0x56>
 80023ae:	4294      	cmp	r4, r2
 80023b0:	d109      	bne.n	80023c6 <__eqdf2+0x56>
 80023b2:	45d3      	cmp	fp, sl
 80023b4:	d01c      	beq.n	80023f0 <__eqdf2+0x80>
 80023b6:	2900      	cmp	r1, #0
 80023b8:	d105      	bne.n	80023c6 <__eqdf2+0x56>
 80023ba:	4660      	mov	r0, ip
 80023bc:	4320      	orrs	r0, r4
 80023be:	1e43      	subs	r3, r0, #1
 80023c0:	4198      	sbcs	r0, r3
 80023c2:	e000      	b.n	80023c6 <__eqdf2+0x56>
 80023c4:	2001      	movs	r0, #1
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2001      	movs	r0, #1
 80023d4:	428e      	cmp	r6, r1
 80023d6:	d1f6      	bne.n	80023c6 <__eqdf2+0x56>
 80023d8:	4661      	mov	r1, ip
 80023da:	4339      	orrs	r1, r7
 80023dc:	000f      	movs	r7, r1
 80023de:	4317      	orrs	r7, r2
 80023e0:	4327      	orrs	r7, r4
 80023e2:	d1f0      	bne.n	80023c6 <__eqdf2+0x56>
 80023e4:	465b      	mov	r3, fp
 80023e6:	4652      	mov	r2, sl
 80023e8:	1a98      	subs	r0, r3, r2
 80023ea:	1e43      	subs	r3, r0, #1
 80023ec:	4198      	sbcs	r0, r3
 80023ee:	e7ea      	b.n	80023c6 <__eqdf2+0x56>
 80023f0:	2000      	movs	r0, #0
 80023f2:	e7e8      	b.n	80023c6 <__eqdf2+0x56>
 80023f4:	000007ff 	.word	0x000007ff

080023f8 <__gedf2>:
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	4657      	mov	r7, sl
 80023fc:	464e      	mov	r6, r9
 80023fe:	4645      	mov	r5, r8
 8002400:	46de      	mov	lr, fp
 8002402:	b5e0      	push	{r5, r6, r7, lr}
 8002404:	000d      	movs	r5, r1
 8002406:	030f      	lsls	r7, r1, #12
 8002408:	0b39      	lsrs	r1, r7, #12
 800240a:	b083      	sub	sp, #12
 800240c:	0004      	movs	r4, r0
 800240e:	4680      	mov	r8, r0
 8002410:	9101      	str	r1, [sp, #4]
 8002412:	0058      	lsls	r0, r3, #1
 8002414:	0fe9      	lsrs	r1, r5, #31
 8002416:	4f31      	ldr	r7, [pc, #196]	@ (80024dc <__gedf2+0xe4>)
 8002418:	0d40      	lsrs	r0, r0, #21
 800241a:	468c      	mov	ip, r1
 800241c:	006e      	lsls	r6, r5, #1
 800241e:	0319      	lsls	r1, r3, #12
 8002420:	4682      	mov	sl, r0
 8002422:	4691      	mov	r9, r2
 8002424:	0d76      	lsrs	r6, r6, #21
 8002426:	0b09      	lsrs	r1, r1, #12
 8002428:	0fd8      	lsrs	r0, r3, #31
 800242a:	42be      	cmp	r6, r7
 800242c:	d01f      	beq.n	800246e <__gedf2+0x76>
 800242e:	45ba      	cmp	sl, r7
 8002430:	d00f      	beq.n	8002452 <__gedf2+0x5a>
 8002432:	2e00      	cmp	r6, #0
 8002434:	d12f      	bne.n	8002496 <__gedf2+0x9e>
 8002436:	4655      	mov	r5, sl
 8002438:	9e01      	ldr	r6, [sp, #4]
 800243a:	4334      	orrs	r4, r6
 800243c:	2d00      	cmp	r5, #0
 800243e:	d127      	bne.n	8002490 <__gedf2+0x98>
 8002440:	430a      	orrs	r2, r1
 8002442:	d03a      	beq.n	80024ba <__gedf2+0xc2>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d145      	bne.n	80024d4 <__gedf2+0xdc>
 8002448:	2800      	cmp	r0, #0
 800244a:	d11a      	bne.n	8002482 <__gedf2+0x8a>
 800244c:	2001      	movs	r0, #1
 800244e:	4240      	negs	r0, r0
 8002450:	e017      	b.n	8002482 <__gedf2+0x8a>
 8002452:	4311      	orrs	r1, r2
 8002454:	d13b      	bne.n	80024ce <__gedf2+0xd6>
 8002456:	2e00      	cmp	r6, #0
 8002458:	d102      	bne.n	8002460 <__gedf2+0x68>
 800245a:	9f01      	ldr	r7, [sp, #4]
 800245c:	4327      	orrs	r7, r4
 800245e:	d0f3      	beq.n	8002448 <__gedf2+0x50>
 8002460:	4584      	cmp	ip, r0
 8002462:	d109      	bne.n	8002478 <__gedf2+0x80>
 8002464:	4663      	mov	r3, ip
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <__gedf2+0x54>
 800246a:	4660      	mov	r0, ip
 800246c:	e009      	b.n	8002482 <__gedf2+0x8a>
 800246e:	9f01      	ldr	r7, [sp, #4]
 8002470:	4327      	orrs	r7, r4
 8002472:	d12c      	bne.n	80024ce <__gedf2+0xd6>
 8002474:	45b2      	cmp	sl, r6
 8002476:	d024      	beq.n	80024c2 <__gedf2+0xca>
 8002478:	4663      	mov	r3, ip
 800247a:	2002      	movs	r0, #2
 800247c:	3b01      	subs	r3, #1
 800247e:	4018      	ands	r0, r3
 8002480:	3801      	subs	r0, #1
 8002482:	b003      	add	sp, #12
 8002484:	bcf0      	pop	{r4, r5, r6, r7}
 8002486:	46bb      	mov	fp, r7
 8002488:	46b2      	mov	sl, r6
 800248a:	46a9      	mov	r9, r5
 800248c:	46a0      	mov	r8, r4
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	2c00      	cmp	r4, #0
 8002492:	d0d9      	beq.n	8002448 <__gedf2+0x50>
 8002494:	e7e4      	b.n	8002460 <__gedf2+0x68>
 8002496:	4654      	mov	r4, sl
 8002498:	2c00      	cmp	r4, #0
 800249a:	d0ed      	beq.n	8002478 <__gedf2+0x80>
 800249c:	4584      	cmp	ip, r0
 800249e:	d1eb      	bne.n	8002478 <__gedf2+0x80>
 80024a0:	4556      	cmp	r6, sl
 80024a2:	dce9      	bgt.n	8002478 <__gedf2+0x80>
 80024a4:	dbde      	blt.n	8002464 <__gedf2+0x6c>
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d8e5      	bhi.n	8002478 <__gedf2+0x80>
 80024ac:	d1da      	bne.n	8002464 <__gedf2+0x6c>
 80024ae:	45c8      	cmp	r8, r9
 80024b0:	d8e2      	bhi.n	8002478 <__gedf2+0x80>
 80024b2:	2000      	movs	r0, #0
 80024b4:	45c8      	cmp	r8, r9
 80024b6:	d2e4      	bcs.n	8002482 <__gedf2+0x8a>
 80024b8:	e7d4      	b.n	8002464 <__gedf2+0x6c>
 80024ba:	2000      	movs	r0, #0
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d0e0      	beq.n	8002482 <__gedf2+0x8a>
 80024c0:	e7da      	b.n	8002478 <__gedf2+0x80>
 80024c2:	4311      	orrs	r1, r2
 80024c4:	d103      	bne.n	80024ce <__gedf2+0xd6>
 80024c6:	4584      	cmp	ip, r0
 80024c8:	d1d6      	bne.n	8002478 <__gedf2+0x80>
 80024ca:	2000      	movs	r0, #0
 80024cc:	e7d9      	b.n	8002482 <__gedf2+0x8a>
 80024ce:	2002      	movs	r0, #2
 80024d0:	4240      	negs	r0, r0
 80024d2:	e7d6      	b.n	8002482 <__gedf2+0x8a>
 80024d4:	4584      	cmp	ip, r0
 80024d6:	d0e6      	beq.n	80024a6 <__gedf2+0xae>
 80024d8:	e7ce      	b.n	8002478 <__gedf2+0x80>
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	000007ff 	.word	0x000007ff

080024e0 <__ledf2>:
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	4657      	mov	r7, sl
 80024e4:	464e      	mov	r6, r9
 80024e6:	4645      	mov	r5, r8
 80024e8:	46de      	mov	lr, fp
 80024ea:	b5e0      	push	{r5, r6, r7, lr}
 80024ec:	000d      	movs	r5, r1
 80024ee:	030f      	lsls	r7, r1, #12
 80024f0:	0004      	movs	r4, r0
 80024f2:	4680      	mov	r8, r0
 80024f4:	0fe8      	lsrs	r0, r5, #31
 80024f6:	0b39      	lsrs	r1, r7, #12
 80024f8:	4684      	mov	ip, r0
 80024fa:	b083      	sub	sp, #12
 80024fc:	0058      	lsls	r0, r3, #1
 80024fe:	4f30      	ldr	r7, [pc, #192]	@ (80025c0 <__ledf2+0xe0>)
 8002500:	0d40      	lsrs	r0, r0, #21
 8002502:	9101      	str	r1, [sp, #4]
 8002504:	031e      	lsls	r6, r3, #12
 8002506:	0069      	lsls	r1, r5, #1
 8002508:	4682      	mov	sl, r0
 800250a:	4691      	mov	r9, r2
 800250c:	0d49      	lsrs	r1, r1, #21
 800250e:	0b36      	lsrs	r6, r6, #12
 8002510:	0fd8      	lsrs	r0, r3, #31
 8002512:	42b9      	cmp	r1, r7
 8002514:	d020      	beq.n	8002558 <__ledf2+0x78>
 8002516:	45ba      	cmp	sl, r7
 8002518:	d00f      	beq.n	800253a <__ledf2+0x5a>
 800251a:	2900      	cmp	r1, #0
 800251c:	d12b      	bne.n	8002576 <__ledf2+0x96>
 800251e:	9901      	ldr	r1, [sp, #4]
 8002520:	430c      	orrs	r4, r1
 8002522:	4651      	mov	r1, sl
 8002524:	2900      	cmp	r1, #0
 8002526:	d137      	bne.n	8002598 <__ledf2+0xb8>
 8002528:	4332      	orrs	r2, r6
 800252a:	d038      	beq.n	800259e <__ledf2+0xbe>
 800252c:	2c00      	cmp	r4, #0
 800252e:	d144      	bne.n	80025ba <__ledf2+0xda>
 8002530:	2800      	cmp	r0, #0
 8002532:	d119      	bne.n	8002568 <__ledf2+0x88>
 8002534:	2001      	movs	r0, #1
 8002536:	4240      	negs	r0, r0
 8002538:	e016      	b.n	8002568 <__ledf2+0x88>
 800253a:	4316      	orrs	r6, r2
 800253c:	d113      	bne.n	8002566 <__ledf2+0x86>
 800253e:	2900      	cmp	r1, #0
 8002540:	d102      	bne.n	8002548 <__ledf2+0x68>
 8002542:	9f01      	ldr	r7, [sp, #4]
 8002544:	4327      	orrs	r7, r4
 8002546:	d0f3      	beq.n	8002530 <__ledf2+0x50>
 8002548:	4584      	cmp	ip, r0
 800254a:	d020      	beq.n	800258e <__ledf2+0xae>
 800254c:	4663      	mov	r3, ip
 800254e:	2002      	movs	r0, #2
 8002550:	3b01      	subs	r3, #1
 8002552:	4018      	ands	r0, r3
 8002554:	3801      	subs	r0, #1
 8002556:	e007      	b.n	8002568 <__ledf2+0x88>
 8002558:	9f01      	ldr	r7, [sp, #4]
 800255a:	4327      	orrs	r7, r4
 800255c:	d103      	bne.n	8002566 <__ledf2+0x86>
 800255e:	458a      	cmp	sl, r1
 8002560:	d1f4      	bne.n	800254c <__ledf2+0x6c>
 8002562:	4316      	orrs	r6, r2
 8002564:	d01f      	beq.n	80025a6 <__ledf2+0xc6>
 8002566:	2002      	movs	r0, #2
 8002568:	b003      	add	sp, #12
 800256a:	bcf0      	pop	{r4, r5, r6, r7}
 800256c:	46bb      	mov	fp, r7
 800256e:	46b2      	mov	sl, r6
 8002570:	46a9      	mov	r9, r5
 8002572:	46a0      	mov	r8, r4
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002576:	4654      	mov	r4, sl
 8002578:	2c00      	cmp	r4, #0
 800257a:	d0e7      	beq.n	800254c <__ledf2+0x6c>
 800257c:	4584      	cmp	ip, r0
 800257e:	d1e5      	bne.n	800254c <__ledf2+0x6c>
 8002580:	4551      	cmp	r1, sl
 8002582:	dce3      	bgt.n	800254c <__ledf2+0x6c>
 8002584:	db03      	blt.n	800258e <__ledf2+0xae>
 8002586:	9b01      	ldr	r3, [sp, #4]
 8002588:	42b3      	cmp	r3, r6
 800258a:	d8df      	bhi.n	800254c <__ledf2+0x6c>
 800258c:	d00f      	beq.n	80025ae <__ledf2+0xce>
 800258e:	4663      	mov	r3, ip
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0cf      	beq.n	8002534 <__ledf2+0x54>
 8002594:	4660      	mov	r0, ip
 8002596:	e7e7      	b.n	8002568 <__ledf2+0x88>
 8002598:	2c00      	cmp	r4, #0
 800259a:	d0c9      	beq.n	8002530 <__ledf2+0x50>
 800259c:	e7d4      	b.n	8002548 <__ledf2+0x68>
 800259e:	2000      	movs	r0, #0
 80025a0:	2c00      	cmp	r4, #0
 80025a2:	d0e1      	beq.n	8002568 <__ledf2+0x88>
 80025a4:	e7d2      	b.n	800254c <__ledf2+0x6c>
 80025a6:	4584      	cmp	ip, r0
 80025a8:	d1d0      	bne.n	800254c <__ledf2+0x6c>
 80025aa:	2000      	movs	r0, #0
 80025ac:	e7dc      	b.n	8002568 <__ledf2+0x88>
 80025ae:	45c8      	cmp	r8, r9
 80025b0:	d8cc      	bhi.n	800254c <__ledf2+0x6c>
 80025b2:	2000      	movs	r0, #0
 80025b4:	45c8      	cmp	r8, r9
 80025b6:	d2d7      	bcs.n	8002568 <__ledf2+0x88>
 80025b8:	e7e9      	b.n	800258e <__ledf2+0xae>
 80025ba:	4584      	cmp	ip, r0
 80025bc:	d0e3      	beq.n	8002586 <__ledf2+0xa6>
 80025be:	e7c5      	b.n	800254c <__ledf2+0x6c>
 80025c0:	000007ff 	.word	0x000007ff

080025c4 <__aeabi_dmul>:
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	4657      	mov	r7, sl
 80025c8:	46de      	mov	lr, fp
 80025ca:	464e      	mov	r6, r9
 80025cc:	4645      	mov	r5, r8
 80025ce:	b5e0      	push	{r5, r6, r7, lr}
 80025d0:	001f      	movs	r7, r3
 80025d2:	030b      	lsls	r3, r1, #12
 80025d4:	0b1b      	lsrs	r3, r3, #12
 80025d6:	0016      	movs	r6, r2
 80025d8:	469a      	mov	sl, r3
 80025da:	0fca      	lsrs	r2, r1, #31
 80025dc:	004b      	lsls	r3, r1, #1
 80025de:	0004      	movs	r4, r0
 80025e0:	4693      	mov	fp, r2
 80025e2:	b087      	sub	sp, #28
 80025e4:	0d5b      	lsrs	r3, r3, #21
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x26>
 80025e8:	e0d5      	b.n	8002796 <__aeabi_dmul+0x1d2>
 80025ea:	4abb      	ldr	r2, [pc, #748]	@ (80028d8 <__aeabi_dmul+0x314>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dmul+0x2e>
 80025f0:	e0f8      	b.n	80027e4 <__aeabi_dmul+0x220>
 80025f2:	4651      	mov	r1, sl
 80025f4:	0f42      	lsrs	r2, r0, #29
 80025f6:	00c9      	lsls	r1, r1, #3
 80025f8:	430a      	orrs	r2, r1
 80025fa:	2180      	movs	r1, #128	@ 0x80
 80025fc:	0409      	lsls	r1, r1, #16
 80025fe:	4311      	orrs	r1, r2
 8002600:	00c2      	lsls	r2, r0, #3
 8002602:	4691      	mov	r9, r2
 8002604:	4ab5      	ldr	r2, [pc, #724]	@ (80028dc <__aeabi_dmul+0x318>)
 8002606:	468a      	mov	sl, r1
 8002608:	189d      	adds	r5, r3, r2
 800260a:	2300      	movs	r3, #0
 800260c:	4698      	mov	r8, r3
 800260e:	9302      	str	r3, [sp, #8]
 8002610:	033c      	lsls	r4, r7, #12
 8002612:	007b      	lsls	r3, r7, #1
 8002614:	0ffa      	lsrs	r2, r7, #31
 8002616:	0030      	movs	r0, r6
 8002618:	0b24      	lsrs	r4, r4, #12
 800261a:	0d5b      	lsrs	r3, r3, #21
 800261c:	9200      	str	r2, [sp, #0]
 800261e:	d100      	bne.n	8002622 <__aeabi_dmul+0x5e>
 8002620:	e096      	b.n	8002750 <__aeabi_dmul+0x18c>
 8002622:	4aad      	ldr	r2, [pc, #692]	@ (80028d8 <__aeabi_dmul+0x314>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d031      	beq.n	800268c <__aeabi_dmul+0xc8>
 8002628:	0f72      	lsrs	r2, r6, #29
 800262a:	00e4      	lsls	r4, r4, #3
 800262c:	4322      	orrs	r2, r4
 800262e:	2480      	movs	r4, #128	@ 0x80
 8002630:	0424      	lsls	r4, r4, #16
 8002632:	4314      	orrs	r4, r2
 8002634:	4aa9      	ldr	r2, [pc, #676]	@ (80028dc <__aeabi_dmul+0x318>)
 8002636:	00f0      	lsls	r0, r6, #3
 8002638:	4694      	mov	ip, r2
 800263a:	4463      	add	r3, ip
 800263c:	195b      	adds	r3, r3, r5
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	9201      	str	r2, [sp, #4]
 8002642:	4642      	mov	r2, r8
 8002644:	2600      	movs	r6, #0
 8002646:	2a0a      	cmp	r2, #10
 8002648:	dc42      	bgt.n	80026d0 <__aeabi_dmul+0x10c>
 800264a:	465a      	mov	r2, fp
 800264c:	9900      	ldr	r1, [sp, #0]
 800264e:	404a      	eors	r2, r1
 8002650:	4693      	mov	fp, r2
 8002652:	4642      	mov	r2, r8
 8002654:	2a02      	cmp	r2, #2
 8002656:	dc32      	bgt.n	80026be <__aeabi_dmul+0xfa>
 8002658:	3a01      	subs	r2, #1
 800265a:	2a01      	cmp	r2, #1
 800265c:	d900      	bls.n	8002660 <__aeabi_dmul+0x9c>
 800265e:	e149      	b.n	80028f4 <__aeabi_dmul+0x330>
 8002660:	2e02      	cmp	r6, #2
 8002662:	d100      	bne.n	8002666 <__aeabi_dmul+0xa2>
 8002664:	e0ca      	b.n	80027fc <__aeabi_dmul+0x238>
 8002666:	2e01      	cmp	r6, #1
 8002668:	d13d      	bne.n	80026e6 <__aeabi_dmul+0x122>
 800266a:	2300      	movs	r3, #0
 800266c:	2400      	movs	r4, #0
 800266e:	2200      	movs	r2, #0
 8002670:	0010      	movs	r0, r2
 8002672:	465a      	mov	r2, fp
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	4323      	orrs	r3, r4
 8002678:	07d2      	lsls	r2, r2, #31
 800267a:	4313      	orrs	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	b007      	add	sp, #28
 8002680:	bcf0      	pop	{r4, r5, r6, r7}
 8002682:	46bb      	mov	fp, r7
 8002684:	46b2      	mov	sl, r6
 8002686:	46a9      	mov	r9, r5
 8002688:	46a0      	mov	r8, r4
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	4b92      	ldr	r3, [pc, #584]	@ (80028d8 <__aeabi_dmul+0x314>)
 800268e:	4326      	orrs	r6, r4
 8002690:	18eb      	adds	r3, r5, r3
 8002692:	2e00      	cmp	r6, #0
 8002694:	d100      	bne.n	8002698 <__aeabi_dmul+0xd4>
 8002696:	e0bb      	b.n	8002810 <__aeabi_dmul+0x24c>
 8002698:	2203      	movs	r2, #3
 800269a:	4641      	mov	r1, r8
 800269c:	4311      	orrs	r1, r2
 800269e:	465a      	mov	r2, fp
 80026a0:	4688      	mov	r8, r1
 80026a2:	9900      	ldr	r1, [sp, #0]
 80026a4:	404a      	eors	r2, r1
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0109      	lsls	r1, r1, #4
 80026aa:	468c      	mov	ip, r1
 80026ac:	0029      	movs	r1, r5
 80026ae:	4461      	add	r1, ip
 80026b0:	9101      	str	r1, [sp, #4]
 80026b2:	4641      	mov	r1, r8
 80026b4:	290a      	cmp	r1, #10
 80026b6:	dd00      	ble.n	80026ba <__aeabi_dmul+0xf6>
 80026b8:	e233      	b.n	8002b22 <__aeabi_dmul+0x55e>
 80026ba:	4693      	mov	fp, r2
 80026bc:	2603      	movs	r6, #3
 80026be:	4642      	mov	r2, r8
 80026c0:	2701      	movs	r7, #1
 80026c2:	4097      	lsls	r7, r2
 80026c4:	21a6      	movs	r1, #166	@ 0xa6
 80026c6:	003a      	movs	r2, r7
 80026c8:	00c9      	lsls	r1, r1, #3
 80026ca:	400a      	ands	r2, r1
 80026cc:	420f      	tst	r7, r1
 80026ce:	d031      	beq.n	8002734 <__aeabi_dmul+0x170>
 80026d0:	9e02      	ldr	r6, [sp, #8]
 80026d2:	2e02      	cmp	r6, #2
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dmul+0x114>
 80026d6:	e235      	b.n	8002b44 <__aeabi_dmul+0x580>
 80026d8:	2e03      	cmp	r6, #3
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0x11a>
 80026dc:	e1d2      	b.n	8002a84 <__aeabi_dmul+0x4c0>
 80026de:	4654      	mov	r4, sl
 80026e0:	4648      	mov	r0, r9
 80026e2:	2e01      	cmp	r6, #1
 80026e4:	d0c1      	beq.n	800266a <__aeabi_dmul+0xa6>
 80026e6:	9a01      	ldr	r2, [sp, #4]
 80026e8:	4b7d      	ldr	r3, [pc, #500]	@ (80028e0 <__aeabi_dmul+0x31c>)
 80026ea:	4694      	mov	ip, r2
 80026ec:	4463      	add	r3, ip
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x130>
 80026f2:	e0c0      	b.n	8002876 <__aeabi_dmul+0x2b2>
 80026f4:	0742      	lsls	r2, r0, #29
 80026f6:	d009      	beq.n	800270c <__aeabi_dmul+0x148>
 80026f8:	220f      	movs	r2, #15
 80026fa:	4002      	ands	r2, r0
 80026fc:	2a04      	cmp	r2, #4
 80026fe:	d005      	beq.n	800270c <__aeabi_dmul+0x148>
 8002700:	1d02      	adds	r2, r0, #4
 8002702:	4282      	cmp	r2, r0
 8002704:	4180      	sbcs	r0, r0
 8002706:	4240      	negs	r0, r0
 8002708:	1824      	adds	r4, r4, r0
 800270a:	0010      	movs	r0, r2
 800270c:	01e2      	lsls	r2, r4, #7
 800270e:	d506      	bpl.n	800271e <__aeabi_dmul+0x15a>
 8002710:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <__aeabi_dmul+0x320>)
 8002712:	9a01      	ldr	r2, [sp, #4]
 8002714:	401c      	ands	r4, r3
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	4694      	mov	ip, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4463      	add	r3, ip
 800271e:	4a72      	ldr	r2, [pc, #456]	@ (80028e8 <__aeabi_dmul+0x324>)
 8002720:	4293      	cmp	r3, r2
 8002722:	dc6b      	bgt.n	80027fc <__aeabi_dmul+0x238>
 8002724:	0762      	lsls	r2, r4, #29
 8002726:	08c0      	lsrs	r0, r0, #3
 8002728:	0264      	lsls	r4, r4, #9
 800272a:	055b      	lsls	r3, r3, #21
 800272c:	4302      	orrs	r2, r0
 800272e:	0b24      	lsrs	r4, r4, #12
 8002730:	0d5b      	lsrs	r3, r3, #21
 8002732:	e79d      	b.n	8002670 <__aeabi_dmul+0xac>
 8002734:	2190      	movs	r1, #144	@ 0x90
 8002736:	0089      	lsls	r1, r1, #2
 8002738:	420f      	tst	r7, r1
 800273a:	d163      	bne.n	8002804 <__aeabi_dmul+0x240>
 800273c:	2288      	movs	r2, #136	@ 0x88
 800273e:	423a      	tst	r2, r7
 8002740:	d100      	bne.n	8002744 <__aeabi_dmul+0x180>
 8002742:	e0d7      	b.n	80028f4 <__aeabi_dmul+0x330>
 8002744:	9b00      	ldr	r3, [sp, #0]
 8002746:	46a2      	mov	sl, r4
 8002748:	469b      	mov	fp, r3
 800274a:	4681      	mov	r9, r0
 800274c:	9602      	str	r6, [sp, #8]
 800274e:	e7bf      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002750:	0023      	movs	r3, r4
 8002752:	4333      	orrs	r3, r6
 8002754:	d100      	bne.n	8002758 <__aeabi_dmul+0x194>
 8002756:	e07f      	b.n	8002858 <__aeabi_dmul+0x294>
 8002758:	2c00      	cmp	r4, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dmul+0x19a>
 800275c:	e1ad      	b.n	8002aba <__aeabi_dmul+0x4f6>
 800275e:	0020      	movs	r0, r4
 8002760:	f7fd ff04 	bl	800056c <__clzsi2>
 8002764:	0002      	movs	r2, r0
 8002766:	0003      	movs	r3, r0
 8002768:	3a0b      	subs	r2, #11
 800276a:	201d      	movs	r0, #29
 800276c:	0019      	movs	r1, r3
 800276e:	1a82      	subs	r2, r0, r2
 8002770:	0030      	movs	r0, r6
 8002772:	3908      	subs	r1, #8
 8002774:	40d0      	lsrs	r0, r2
 8002776:	408c      	lsls	r4, r1
 8002778:	4304      	orrs	r4, r0
 800277a:	0030      	movs	r0, r6
 800277c:	4088      	lsls	r0, r1
 800277e:	4a5b      	ldr	r2, [pc, #364]	@ (80028ec <__aeabi_dmul+0x328>)
 8002780:	1aeb      	subs	r3, r5, r3
 8002782:	4694      	mov	ip, r2
 8002784:	4463      	add	r3, ip
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	9201      	str	r2, [sp, #4]
 800278a:	4642      	mov	r2, r8
 800278c:	2600      	movs	r6, #0
 800278e:	2a0a      	cmp	r2, #10
 8002790:	dc00      	bgt.n	8002794 <__aeabi_dmul+0x1d0>
 8002792:	e75a      	b.n	800264a <__aeabi_dmul+0x86>
 8002794:	e79c      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002796:	4653      	mov	r3, sl
 8002798:	4303      	orrs	r3, r0
 800279a:	4699      	mov	r9, r3
 800279c:	d054      	beq.n	8002848 <__aeabi_dmul+0x284>
 800279e:	4653      	mov	r3, sl
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dmul+0x1e2>
 80027a4:	e177      	b.n	8002a96 <__aeabi_dmul+0x4d2>
 80027a6:	4650      	mov	r0, sl
 80027a8:	f7fd fee0 	bl	800056c <__clzsi2>
 80027ac:	230b      	movs	r3, #11
 80027ae:	425b      	negs	r3, r3
 80027b0:	469c      	mov	ip, r3
 80027b2:	0002      	movs	r2, r0
 80027b4:	4484      	add	ip, r0
 80027b6:	0011      	movs	r1, r2
 80027b8:	4650      	mov	r0, sl
 80027ba:	3908      	subs	r1, #8
 80027bc:	4088      	lsls	r0, r1
 80027be:	231d      	movs	r3, #29
 80027c0:	4680      	mov	r8, r0
 80027c2:	4660      	mov	r0, ip
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	0020      	movs	r0, r4
 80027c8:	40d8      	lsrs	r0, r3
 80027ca:	0003      	movs	r3, r0
 80027cc:	4640      	mov	r0, r8
 80027ce:	4303      	orrs	r3, r0
 80027d0:	469a      	mov	sl, r3
 80027d2:	0023      	movs	r3, r4
 80027d4:	408b      	lsls	r3, r1
 80027d6:	4699      	mov	r9, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	4d44      	ldr	r5, [pc, #272]	@ (80028ec <__aeabi_dmul+0x328>)
 80027dc:	4698      	mov	r8, r3
 80027de:	1aad      	subs	r5, r5, r2
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	e715      	b.n	8002610 <__aeabi_dmul+0x4c>
 80027e4:	4652      	mov	r2, sl
 80027e6:	4302      	orrs	r2, r0
 80027e8:	4691      	mov	r9, r2
 80027ea:	d126      	bne.n	800283a <__aeabi_dmul+0x276>
 80027ec:	2200      	movs	r2, #0
 80027ee:	001d      	movs	r5, r3
 80027f0:	2302      	movs	r3, #2
 80027f2:	4692      	mov	sl, r2
 80027f4:	3208      	adds	r2, #8
 80027f6:	4690      	mov	r8, r2
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	e709      	b.n	8002610 <__aeabi_dmul+0x4c>
 80027fc:	2400      	movs	r4, #0
 80027fe:	2200      	movs	r2, #0
 8002800:	4b35      	ldr	r3, [pc, #212]	@ (80028d8 <__aeabi_dmul+0x314>)
 8002802:	e735      	b.n	8002670 <__aeabi_dmul+0xac>
 8002804:	2300      	movs	r3, #0
 8002806:	2480      	movs	r4, #128	@ 0x80
 8002808:	469b      	mov	fp, r3
 800280a:	0324      	lsls	r4, r4, #12
 800280c:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <__aeabi_dmul+0x314>)
 800280e:	e72f      	b.n	8002670 <__aeabi_dmul+0xac>
 8002810:	2202      	movs	r2, #2
 8002812:	4641      	mov	r1, r8
 8002814:	4311      	orrs	r1, r2
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	4694      	mov	ip, r2
 800281c:	002a      	movs	r2, r5
 800281e:	4462      	add	r2, ip
 8002820:	4688      	mov	r8, r1
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	290a      	cmp	r1, #10
 8002826:	dd00      	ble.n	800282a <__aeabi_dmul+0x266>
 8002828:	e752      	b.n	80026d0 <__aeabi_dmul+0x10c>
 800282a:	465a      	mov	r2, fp
 800282c:	2000      	movs	r0, #0
 800282e:	9900      	ldr	r1, [sp, #0]
 8002830:	0004      	movs	r4, r0
 8002832:	404a      	eors	r2, r1
 8002834:	4693      	mov	fp, r2
 8002836:	2602      	movs	r6, #2
 8002838:	e70b      	b.n	8002652 <__aeabi_dmul+0x8e>
 800283a:	220c      	movs	r2, #12
 800283c:	001d      	movs	r5, r3
 800283e:	2303      	movs	r3, #3
 8002840:	4681      	mov	r9, r0
 8002842:	4690      	mov	r8, r2
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	e6e3      	b.n	8002610 <__aeabi_dmul+0x4c>
 8002848:	2300      	movs	r3, #0
 800284a:	469a      	mov	sl, r3
 800284c:	3304      	adds	r3, #4
 800284e:	4698      	mov	r8, r3
 8002850:	3b03      	subs	r3, #3
 8002852:	2500      	movs	r5, #0
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	e6db      	b.n	8002610 <__aeabi_dmul+0x4c>
 8002858:	4642      	mov	r2, r8
 800285a:	3301      	adds	r3, #1
 800285c:	431a      	orrs	r2, r3
 800285e:	002b      	movs	r3, r5
 8002860:	4690      	mov	r8, r2
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	9201      	str	r2, [sp, #4]
 8002866:	4642      	mov	r2, r8
 8002868:	2400      	movs	r4, #0
 800286a:	2000      	movs	r0, #0
 800286c:	2601      	movs	r6, #1
 800286e:	2a0a      	cmp	r2, #10
 8002870:	dc00      	bgt.n	8002874 <__aeabi_dmul+0x2b0>
 8002872:	e6ea      	b.n	800264a <__aeabi_dmul+0x86>
 8002874:	e72c      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002876:	2201      	movs	r2, #1
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	2a38      	cmp	r2, #56	@ 0x38
 800287c:	dd00      	ble.n	8002880 <__aeabi_dmul+0x2bc>
 800287e:	e6f4      	b.n	800266a <__aeabi_dmul+0xa6>
 8002880:	2a1f      	cmp	r2, #31
 8002882:	dc00      	bgt.n	8002886 <__aeabi_dmul+0x2c2>
 8002884:	e12a      	b.n	8002adc <__aeabi_dmul+0x518>
 8002886:	211f      	movs	r1, #31
 8002888:	4249      	negs	r1, r1
 800288a:	1acb      	subs	r3, r1, r3
 800288c:	0021      	movs	r1, r4
 800288e:	40d9      	lsrs	r1, r3
 8002890:	000b      	movs	r3, r1
 8002892:	2a20      	cmp	r2, #32
 8002894:	d005      	beq.n	80028a2 <__aeabi_dmul+0x2de>
 8002896:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <__aeabi_dmul+0x32c>)
 8002898:	9d01      	ldr	r5, [sp, #4]
 800289a:	4694      	mov	ip, r2
 800289c:	4465      	add	r5, ip
 800289e:	40ac      	lsls	r4, r5
 80028a0:	4320      	orrs	r0, r4
 80028a2:	1e42      	subs	r2, r0, #1
 80028a4:	4190      	sbcs	r0, r2
 80028a6:	4318      	orrs	r0, r3
 80028a8:	2307      	movs	r3, #7
 80028aa:	0019      	movs	r1, r3
 80028ac:	2400      	movs	r4, #0
 80028ae:	4001      	ands	r1, r0
 80028b0:	4203      	tst	r3, r0
 80028b2:	d00c      	beq.n	80028ce <__aeabi_dmul+0x30a>
 80028b4:	230f      	movs	r3, #15
 80028b6:	4003      	ands	r3, r0
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d100      	bne.n	80028be <__aeabi_dmul+0x2fa>
 80028bc:	e140      	b.n	8002b40 <__aeabi_dmul+0x57c>
 80028be:	1d03      	adds	r3, r0, #4
 80028c0:	4283      	cmp	r3, r0
 80028c2:	41a4      	sbcs	r4, r4
 80028c4:	0018      	movs	r0, r3
 80028c6:	4264      	negs	r4, r4
 80028c8:	0761      	lsls	r1, r4, #29
 80028ca:	0264      	lsls	r4, r4, #9
 80028cc:	0b24      	lsrs	r4, r4, #12
 80028ce:	08c2      	lsrs	r2, r0, #3
 80028d0:	2300      	movs	r3, #0
 80028d2:	430a      	orrs	r2, r1
 80028d4:	e6cc      	b.n	8002670 <__aeabi_dmul+0xac>
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	000007ff 	.word	0x000007ff
 80028dc:	fffffc01 	.word	0xfffffc01
 80028e0:	000003ff 	.word	0x000003ff
 80028e4:	feffffff 	.word	0xfeffffff
 80028e8:	000007fe 	.word	0x000007fe
 80028ec:	fffffc0d 	.word	0xfffffc0d
 80028f0:	0000043e 	.word	0x0000043e
 80028f4:	4649      	mov	r1, r9
 80028f6:	464a      	mov	r2, r9
 80028f8:	0409      	lsls	r1, r1, #16
 80028fa:	0c09      	lsrs	r1, r1, #16
 80028fc:	000d      	movs	r5, r1
 80028fe:	0c16      	lsrs	r6, r2, #16
 8002900:	0c02      	lsrs	r2, r0, #16
 8002902:	0400      	lsls	r0, r0, #16
 8002904:	0c00      	lsrs	r0, r0, #16
 8002906:	4345      	muls	r5, r0
 8002908:	46ac      	mov	ip, r5
 800290a:	0005      	movs	r5, r0
 800290c:	4375      	muls	r5, r6
 800290e:	46a8      	mov	r8, r5
 8002910:	0015      	movs	r5, r2
 8002912:	000f      	movs	r7, r1
 8002914:	4375      	muls	r5, r6
 8002916:	9200      	str	r2, [sp, #0]
 8002918:	9502      	str	r5, [sp, #8]
 800291a:	002a      	movs	r2, r5
 800291c:	9d00      	ldr	r5, [sp, #0]
 800291e:	436f      	muls	r7, r5
 8002920:	4665      	mov	r5, ip
 8002922:	0c2d      	lsrs	r5, r5, #16
 8002924:	46a9      	mov	r9, r5
 8002926:	4447      	add	r7, r8
 8002928:	444f      	add	r7, r9
 800292a:	45b8      	cmp	r8, r7
 800292c:	d905      	bls.n	800293a <__aeabi_dmul+0x376>
 800292e:	0015      	movs	r5, r2
 8002930:	2280      	movs	r2, #128	@ 0x80
 8002932:	0252      	lsls	r2, r2, #9
 8002934:	4690      	mov	r8, r2
 8002936:	4445      	add	r5, r8
 8002938:	9502      	str	r5, [sp, #8]
 800293a:	0c3d      	lsrs	r5, r7, #16
 800293c:	9503      	str	r5, [sp, #12]
 800293e:	4665      	mov	r5, ip
 8002940:	042d      	lsls	r5, r5, #16
 8002942:	043f      	lsls	r7, r7, #16
 8002944:	0c2d      	lsrs	r5, r5, #16
 8002946:	46ac      	mov	ip, r5
 8002948:	003d      	movs	r5, r7
 800294a:	4465      	add	r5, ip
 800294c:	9504      	str	r5, [sp, #16]
 800294e:	0c25      	lsrs	r5, r4, #16
 8002950:	0424      	lsls	r4, r4, #16
 8002952:	0c24      	lsrs	r4, r4, #16
 8002954:	46ac      	mov	ip, r5
 8002956:	0025      	movs	r5, r4
 8002958:	4375      	muls	r5, r6
 800295a:	46a8      	mov	r8, r5
 800295c:	4665      	mov	r5, ip
 800295e:	000f      	movs	r7, r1
 8002960:	4369      	muls	r1, r5
 8002962:	4441      	add	r1, r8
 8002964:	4689      	mov	r9, r1
 8002966:	4367      	muls	r7, r4
 8002968:	0c39      	lsrs	r1, r7, #16
 800296a:	4449      	add	r1, r9
 800296c:	436e      	muls	r6, r5
 800296e:	4588      	cmp	r8, r1
 8002970:	d903      	bls.n	800297a <__aeabi_dmul+0x3b6>
 8002972:	2280      	movs	r2, #128	@ 0x80
 8002974:	0252      	lsls	r2, r2, #9
 8002976:	4690      	mov	r8, r2
 8002978:	4446      	add	r6, r8
 800297a:	0c0d      	lsrs	r5, r1, #16
 800297c:	46a8      	mov	r8, r5
 800297e:	0035      	movs	r5, r6
 8002980:	4445      	add	r5, r8
 8002982:	9505      	str	r5, [sp, #20]
 8002984:	9d03      	ldr	r5, [sp, #12]
 8002986:	043f      	lsls	r7, r7, #16
 8002988:	46a8      	mov	r8, r5
 800298a:	0c3f      	lsrs	r7, r7, #16
 800298c:	0409      	lsls	r1, r1, #16
 800298e:	19c9      	adds	r1, r1, r7
 8002990:	4488      	add	r8, r1
 8002992:	4645      	mov	r5, r8
 8002994:	9503      	str	r5, [sp, #12]
 8002996:	4655      	mov	r5, sl
 8002998:	042e      	lsls	r6, r5, #16
 800299a:	0c36      	lsrs	r6, r6, #16
 800299c:	0c2f      	lsrs	r7, r5, #16
 800299e:	0035      	movs	r5, r6
 80029a0:	4345      	muls	r5, r0
 80029a2:	4378      	muls	r0, r7
 80029a4:	4681      	mov	r9, r0
 80029a6:	0038      	movs	r0, r7
 80029a8:	46a8      	mov	r8, r5
 80029aa:	0c2d      	lsrs	r5, r5, #16
 80029ac:	46aa      	mov	sl, r5
 80029ae:	9a00      	ldr	r2, [sp, #0]
 80029b0:	4350      	muls	r0, r2
 80029b2:	4372      	muls	r2, r6
 80029b4:	444a      	add	r2, r9
 80029b6:	4452      	add	r2, sl
 80029b8:	4591      	cmp	r9, r2
 80029ba:	d903      	bls.n	80029c4 <__aeabi_dmul+0x400>
 80029bc:	2580      	movs	r5, #128	@ 0x80
 80029be:	026d      	lsls	r5, r5, #9
 80029c0:	46a9      	mov	r9, r5
 80029c2:	4448      	add	r0, r9
 80029c4:	0c15      	lsrs	r5, r2, #16
 80029c6:	46a9      	mov	r9, r5
 80029c8:	4645      	mov	r5, r8
 80029ca:	042d      	lsls	r5, r5, #16
 80029cc:	0c2d      	lsrs	r5, r5, #16
 80029ce:	46a8      	mov	r8, r5
 80029d0:	4665      	mov	r5, ip
 80029d2:	437d      	muls	r5, r7
 80029d4:	0412      	lsls	r2, r2, #16
 80029d6:	4448      	add	r0, r9
 80029d8:	4490      	add	r8, r2
 80029da:	46a9      	mov	r9, r5
 80029dc:	0032      	movs	r2, r6
 80029de:	4665      	mov	r5, ip
 80029e0:	4362      	muls	r2, r4
 80029e2:	436e      	muls	r6, r5
 80029e4:	437c      	muls	r4, r7
 80029e6:	0c17      	lsrs	r7, r2, #16
 80029e8:	1936      	adds	r6, r6, r4
 80029ea:	19bf      	adds	r7, r7, r6
 80029ec:	42bc      	cmp	r4, r7
 80029ee:	d903      	bls.n	80029f8 <__aeabi_dmul+0x434>
 80029f0:	2480      	movs	r4, #128	@ 0x80
 80029f2:	0264      	lsls	r4, r4, #9
 80029f4:	46a4      	mov	ip, r4
 80029f6:	44e1      	add	r9, ip
 80029f8:	9c02      	ldr	r4, [sp, #8]
 80029fa:	9e03      	ldr	r6, [sp, #12]
 80029fc:	46a4      	mov	ip, r4
 80029fe:	9d05      	ldr	r5, [sp, #20]
 8002a00:	4466      	add	r6, ip
 8002a02:	428e      	cmp	r6, r1
 8002a04:	4189      	sbcs	r1, r1
 8002a06:	46ac      	mov	ip, r5
 8002a08:	0412      	lsls	r2, r2, #16
 8002a0a:	043c      	lsls	r4, r7, #16
 8002a0c:	0c12      	lsrs	r2, r2, #16
 8002a0e:	18a2      	adds	r2, r4, r2
 8002a10:	4462      	add	r2, ip
 8002a12:	4249      	negs	r1, r1
 8002a14:	1854      	adds	r4, r2, r1
 8002a16:	4446      	add	r6, r8
 8002a18:	46a4      	mov	ip, r4
 8002a1a:	4546      	cmp	r6, r8
 8002a1c:	41a4      	sbcs	r4, r4
 8002a1e:	4682      	mov	sl, r0
 8002a20:	4264      	negs	r4, r4
 8002a22:	46a0      	mov	r8, r4
 8002a24:	42aa      	cmp	r2, r5
 8002a26:	4192      	sbcs	r2, r2
 8002a28:	458c      	cmp	ip, r1
 8002a2a:	4189      	sbcs	r1, r1
 8002a2c:	44e2      	add	sl, ip
 8002a2e:	44d0      	add	r8, sl
 8002a30:	4249      	negs	r1, r1
 8002a32:	4252      	negs	r2, r2
 8002a34:	430a      	orrs	r2, r1
 8002a36:	45a0      	cmp	r8, r4
 8002a38:	41a4      	sbcs	r4, r4
 8002a3a:	4582      	cmp	sl, r0
 8002a3c:	4189      	sbcs	r1, r1
 8002a3e:	4264      	negs	r4, r4
 8002a40:	4249      	negs	r1, r1
 8002a42:	430c      	orrs	r4, r1
 8002a44:	4641      	mov	r1, r8
 8002a46:	0c3f      	lsrs	r7, r7, #16
 8002a48:	19d2      	adds	r2, r2, r7
 8002a4a:	1912      	adds	r2, r2, r4
 8002a4c:	0dcc      	lsrs	r4, r1, #23
 8002a4e:	9904      	ldr	r1, [sp, #16]
 8002a50:	0270      	lsls	r0, r6, #9
 8002a52:	4308      	orrs	r0, r1
 8002a54:	1e41      	subs	r1, r0, #1
 8002a56:	4188      	sbcs	r0, r1
 8002a58:	4641      	mov	r1, r8
 8002a5a:	444a      	add	r2, r9
 8002a5c:	0df6      	lsrs	r6, r6, #23
 8002a5e:	0252      	lsls	r2, r2, #9
 8002a60:	4330      	orrs	r0, r6
 8002a62:	0249      	lsls	r1, r1, #9
 8002a64:	4314      	orrs	r4, r2
 8002a66:	4308      	orrs	r0, r1
 8002a68:	01d2      	lsls	r2, r2, #7
 8002a6a:	d535      	bpl.n	8002ad8 <__aeabi_dmul+0x514>
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	0843      	lsrs	r3, r0, #1
 8002a70:	4002      	ands	r2, r0
 8002a72:	4313      	orrs	r3, r2
 8002a74:	07e0      	lsls	r0, r4, #31
 8002a76:	4318      	orrs	r0, r3
 8002a78:	0864      	lsrs	r4, r4, #1
 8002a7a:	e634      	b.n	80026e6 <__aeabi_dmul+0x122>
 8002a7c:	9b00      	ldr	r3, [sp, #0]
 8002a7e:	46a2      	mov	sl, r4
 8002a80:	469b      	mov	fp, r3
 8002a82:	4681      	mov	r9, r0
 8002a84:	2480      	movs	r4, #128	@ 0x80
 8002a86:	4653      	mov	r3, sl
 8002a88:	0324      	lsls	r4, r4, #12
 8002a8a:	431c      	orrs	r4, r3
 8002a8c:	0324      	lsls	r4, r4, #12
 8002a8e:	464a      	mov	r2, r9
 8002a90:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002a92:	0b24      	lsrs	r4, r4, #12
 8002a94:	e5ec      	b.n	8002670 <__aeabi_dmul+0xac>
 8002a96:	f7fd fd69 	bl	800056c <__clzsi2>
 8002a9a:	2315      	movs	r3, #21
 8002a9c:	469c      	mov	ip, r3
 8002a9e:	4484      	add	ip, r0
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	3220      	adds	r2, #32
 8002aa6:	2b1c      	cmp	r3, #28
 8002aa8:	dc00      	bgt.n	8002aac <__aeabi_dmul+0x4e8>
 8002aaa:	e684      	b.n	80027b6 <__aeabi_dmul+0x1f2>
 8002aac:	2300      	movs	r3, #0
 8002aae:	4699      	mov	r9, r3
 8002ab0:	0023      	movs	r3, r4
 8002ab2:	3808      	subs	r0, #8
 8002ab4:	4083      	lsls	r3, r0
 8002ab6:	469a      	mov	sl, r3
 8002ab8:	e68e      	b.n	80027d8 <__aeabi_dmul+0x214>
 8002aba:	f7fd fd57 	bl	800056c <__clzsi2>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	3215      	adds	r2, #21
 8002ac4:	3320      	adds	r3, #32
 8002ac6:	2a1c      	cmp	r2, #28
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dmul+0x508>
 8002aca:	e64e      	b.n	800276a <__aeabi_dmul+0x1a6>
 8002acc:	0002      	movs	r2, r0
 8002ace:	0034      	movs	r4, r6
 8002ad0:	3a08      	subs	r2, #8
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	4094      	lsls	r4, r2
 8002ad6:	e652      	b.n	800277e <__aeabi_dmul+0x1ba>
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	e604      	b.n	80026e6 <__aeabi_dmul+0x122>
 8002adc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <__aeabi_dmul+0x58c>)
 8002ade:	0021      	movs	r1, r4
 8002ae0:	469c      	mov	ip, r3
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	9d01      	ldr	r5, [sp, #4]
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4465      	add	r5, ip
 8002aea:	40a9      	lsls	r1, r5
 8002aec:	4319      	orrs	r1, r3
 8002aee:	0003      	movs	r3, r0
 8002af0:	40ab      	lsls	r3, r5
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	4183      	sbcs	r3, r0
 8002af6:	4319      	orrs	r1, r3
 8002af8:	0008      	movs	r0, r1
 8002afa:	40d4      	lsrs	r4, r2
 8002afc:	074b      	lsls	r3, r1, #29
 8002afe:	d009      	beq.n	8002b14 <__aeabi_dmul+0x550>
 8002b00:	230f      	movs	r3, #15
 8002b02:	400b      	ands	r3, r1
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d005      	beq.n	8002b14 <__aeabi_dmul+0x550>
 8002b08:	1d0b      	adds	r3, r1, #4
 8002b0a:	428b      	cmp	r3, r1
 8002b0c:	4180      	sbcs	r0, r0
 8002b0e:	4240      	negs	r0, r0
 8002b10:	1824      	adds	r4, r4, r0
 8002b12:	0018      	movs	r0, r3
 8002b14:	0223      	lsls	r3, r4, #8
 8002b16:	d400      	bmi.n	8002b1a <__aeabi_dmul+0x556>
 8002b18:	e6d6      	b.n	80028c8 <__aeabi_dmul+0x304>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2400      	movs	r4, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	e5a6      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b22:	290f      	cmp	r1, #15
 8002b24:	d1aa      	bne.n	8002a7c <__aeabi_dmul+0x4b8>
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	4652      	mov	r2, sl
 8002b2a:	031b      	lsls	r3, r3, #12
 8002b2c:	421a      	tst	r2, r3
 8002b2e:	d0a9      	beq.n	8002a84 <__aeabi_dmul+0x4c0>
 8002b30:	421c      	tst	r4, r3
 8002b32:	d1a7      	bne.n	8002a84 <__aeabi_dmul+0x4c0>
 8002b34:	431c      	orrs	r4, r3
 8002b36:	9b00      	ldr	r3, [sp, #0]
 8002b38:	0002      	movs	r2, r0
 8002b3a:	469b      	mov	fp, r3
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002b3e:	e597      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b40:	2400      	movs	r4, #0
 8002b42:	e6c1      	b.n	80028c8 <__aeabi_dmul+0x304>
 8002b44:	2400      	movs	r4, #0
 8002b46:	4b01      	ldr	r3, [pc, #4]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002b48:	0022      	movs	r2, r4
 8002b4a:	e591      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b4c:	000007ff 	.word	0x000007ff
 8002b50:	0000041e 	.word	0x0000041e

08002b54 <__aeabi_dsub>:
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	464e      	mov	r6, r9
 8002b58:	4645      	mov	r5, r8
 8002b5a:	46de      	mov	lr, fp
 8002b5c:	4657      	mov	r7, sl
 8002b5e:	b5e0      	push	{r5, r6, r7, lr}
 8002b60:	b085      	sub	sp, #20
 8002b62:	9000      	str	r0, [sp, #0]
 8002b64:	9101      	str	r1, [sp, #4]
 8002b66:	030c      	lsls	r4, r1, #12
 8002b68:	004f      	lsls	r7, r1, #1
 8002b6a:	0fce      	lsrs	r6, r1, #31
 8002b6c:	0a61      	lsrs	r1, r4, #9
 8002b6e:	9c00      	ldr	r4, [sp, #0]
 8002b70:	46b0      	mov	r8, r6
 8002b72:	0f64      	lsrs	r4, r4, #29
 8002b74:	430c      	orrs	r4, r1
 8002b76:	9900      	ldr	r1, [sp, #0]
 8002b78:	0d7f      	lsrs	r7, r7, #21
 8002b7a:	00c8      	lsls	r0, r1, #3
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	001a      	movs	r2, r3
 8002b80:	031b      	lsls	r3, r3, #12
 8002b82:	469c      	mov	ip, r3
 8002b84:	9100      	str	r1, [sp, #0]
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	0051      	lsls	r1, r2, #1
 8002b8a:	0d4b      	lsrs	r3, r1, #21
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	9b01      	ldr	r3, [sp, #4]
 8002b90:	9d00      	ldr	r5, [sp, #0]
 8002b92:	0fd9      	lsrs	r1, r3, #31
 8002b94:	4663      	mov	r3, ip
 8002b96:	0f6a      	lsrs	r2, r5, #29
 8002b98:	0a5b      	lsrs	r3, r3, #9
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	00ea      	lsls	r2, r5, #3
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	4693      	mov	fp, r2
 8002ba2:	4ac1      	ldr	r2, [pc, #772]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002ba4:	9003      	str	r0, [sp, #12]
 8002ba6:	9302      	str	r3, [sp, #8]
 8002ba8:	4591      	cmp	r9, r2
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x5a>
 8002bac:	e0cd      	b.n	8002d4a <__aeabi_dsub+0x1f6>
 8002bae:	2501      	movs	r5, #1
 8002bb0:	4069      	eors	r1, r5
 8002bb2:	464d      	mov	r5, r9
 8002bb4:	1b7d      	subs	r5, r7, r5
 8002bb6:	46aa      	mov	sl, r5
 8002bb8:	428e      	cmp	r6, r1
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x6a>
 8002bbc:	e080      	b.n	8002cc0 <__aeabi_dsub+0x16c>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	dc00      	bgt.n	8002bc4 <__aeabi_dsub+0x70>
 8002bc2:	e335      	b.n	8003230 <__aeabi_dsub+0x6dc>
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	2900      	cmp	r1, #0
 8002bc8:	d100      	bne.n	8002bcc <__aeabi_dsub+0x78>
 8002bca:	e0df      	b.n	8002d8c <__aeabi_dsub+0x238>
 8002bcc:	4297      	cmp	r7, r2
 8002bce:	d100      	bne.n	8002bd2 <__aeabi_dsub+0x7e>
 8002bd0:	e194      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002bd2:	4652      	mov	r2, sl
 8002bd4:	2501      	movs	r5, #1
 8002bd6:	2a38      	cmp	r2, #56	@ 0x38
 8002bd8:	dc19      	bgt.n	8002c0e <__aeabi_dsub+0xba>
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	9b02      	ldr	r3, [sp, #8]
 8002bde:	0412      	lsls	r2, r2, #16
 8002be0:	4313      	orrs	r3, r2
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	4652      	mov	r2, sl
 8002be6:	2a1f      	cmp	r2, #31
 8002be8:	dd00      	ble.n	8002bec <__aeabi_dsub+0x98>
 8002bea:	e1e3      	b.n	8002fb4 <__aeabi_dsub+0x460>
 8002bec:	4653      	mov	r3, sl
 8002bee:	2220      	movs	r2, #32
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	9d02      	ldr	r5, [sp, #8]
 8002bf4:	1ad2      	subs	r2, r2, r3
 8002bf6:	4095      	lsls	r5, r2
 8002bf8:	40d9      	lsrs	r1, r3
 8002bfa:	430d      	orrs	r5, r1
 8002bfc:	4661      	mov	r1, ip
 8002bfe:	4091      	lsls	r1, r2
 8002c00:	000a      	movs	r2, r1
 8002c02:	1e51      	subs	r1, r2, #1
 8002c04:	418a      	sbcs	r2, r1
 8002c06:	4315      	orrs	r5, r2
 8002c08:	9a02      	ldr	r2, [sp, #8]
 8002c0a:	40da      	lsrs	r2, r3
 8002c0c:	1aa4      	subs	r4, r4, r2
 8002c0e:	1b45      	subs	r5, r0, r5
 8002c10:	42a8      	cmp	r0, r5
 8002c12:	4180      	sbcs	r0, r0
 8002c14:	4240      	negs	r0, r0
 8002c16:	1a24      	subs	r4, r4, r0
 8002c18:	0223      	lsls	r3, r4, #8
 8002c1a:	d400      	bmi.n	8002c1e <__aeabi_dsub+0xca>
 8002c1c:	e13d      	b.n	8002e9a <__aeabi_dsub+0x346>
 8002c1e:	0264      	lsls	r4, r4, #9
 8002c20:	0a64      	lsrs	r4, r4, #9
 8002c22:	2c00      	cmp	r4, #0
 8002c24:	d100      	bne.n	8002c28 <__aeabi_dsub+0xd4>
 8002c26:	e147      	b.n	8002eb8 <__aeabi_dsub+0x364>
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f7fd fc9f 	bl	800056c <__clzsi2>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	3b08      	subs	r3, #8
 8002c32:	2120      	movs	r1, #32
 8002c34:	0028      	movs	r0, r5
 8002c36:	1aca      	subs	r2, r1, r3
 8002c38:	40d0      	lsrs	r0, r2
 8002c3a:	409c      	lsls	r4, r3
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	409d      	lsls	r5, r3
 8002c40:	4322      	orrs	r2, r4
 8002c42:	429f      	cmp	r7, r3
 8002c44:	dd00      	ble.n	8002c48 <__aeabi_dsub+0xf4>
 8002c46:	e177      	b.n	8002f38 <__aeabi_dsub+0x3e4>
 8002c48:	1bd8      	subs	r0, r3, r7
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	1a09      	subs	r1, r1, r0
 8002c4e:	002c      	movs	r4, r5
 8002c50:	408d      	lsls	r5, r1
 8002c52:	40c4      	lsrs	r4, r0
 8002c54:	1e6b      	subs	r3, r5, #1
 8002c56:	419d      	sbcs	r5, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	40c2      	lsrs	r2, r0
 8002c5c:	408b      	lsls	r3, r1
 8002c5e:	4325      	orrs	r5, r4
 8002c60:	2700      	movs	r7, #0
 8002c62:	0014      	movs	r4, r2
 8002c64:	431d      	orrs	r5, r3
 8002c66:	076b      	lsls	r3, r5, #29
 8002c68:	d009      	beq.n	8002c7e <__aeabi_dsub+0x12a>
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	402b      	ands	r3, r5
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d005      	beq.n	8002c7e <__aeabi_dsub+0x12a>
 8002c72:	1d2b      	adds	r3, r5, #4
 8002c74:	42ab      	cmp	r3, r5
 8002c76:	41ad      	sbcs	r5, r5
 8002c78:	426d      	negs	r5, r5
 8002c7a:	1964      	adds	r4, r4, r5
 8002c7c:	001d      	movs	r5, r3
 8002c7e:	0223      	lsls	r3, r4, #8
 8002c80:	d400      	bmi.n	8002c84 <__aeabi_dsub+0x130>
 8002c82:	e140      	b.n	8002f06 <__aeabi_dsub+0x3b2>
 8002c84:	4a88      	ldr	r2, [pc, #544]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002c86:	3701      	adds	r7, #1
 8002c88:	4297      	cmp	r7, r2
 8002c8a:	d100      	bne.n	8002c8e <__aeabi_dsub+0x13a>
 8002c8c:	e101      	b.n	8002e92 <__aeabi_dsub+0x33e>
 8002c8e:	2601      	movs	r6, #1
 8002c90:	4643      	mov	r3, r8
 8002c92:	4986      	ldr	r1, [pc, #536]	@ (8002eac <__aeabi_dsub+0x358>)
 8002c94:	08ed      	lsrs	r5, r5, #3
 8002c96:	4021      	ands	r1, r4
 8002c98:	074a      	lsls	r2, r1, #29
 8002c9a:	432a      	orrs	r2, r5
 8002c9c:	057c      	lsls	r4, r7, #21
 8002c9e:	024d      	lsls	r5, r1, #9
 8002ca0:	0b2d      	lsrs	r5, r5, #12
 8002ca2:	0d64      	lsrs	r4, r4, #21
 8002ca4:	401e      	ands	r6, r3
 8002ca6:	0524      	lsls	r4, r4, #20
 8002ca8:	432c      	orrs	r4, r5
 8002caa:	07f6      	lsls	r6, r6, #31
 8002cac:	4334      	orrs	r4, r6
 8002cae:	0010      	movs	r0, r2
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	b005      	add	sp, #20
 8002cb4:	bcf0      	pop	{r4, r5, r6, r7}
 8002cb6:	46bb      	mov	fp, r7
 8002cb8:	46b2      	mov	sl, r6
 8002cba:	46a9      	mov	r9, r5
 8002cbc:	46a0      	mov	r8, r4
 8002cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc0:	2d00      	cmp	r5, #0
 8002cc2:	dc00      	bgt.n	8002cc6 <__aeabi_dsub+0x172>
 8002cc4:	e2d0      	b.n	8003268 <__aeabi_dsub+0x714>
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	2900      	cmp	r1, #0
 8002cca:	d000      	beq.n	8002cce <__aeabi_dsub+0x17a>
 8002ccc:	e0d4      	b.n	8002e78 <__aeabi_dsub+0x324>
 8002cce:	4661      	mov	r1, ip
 8002cd0:	9b02      	ldr	r3, [sp, #8]
 8002cd2:	4319      	orrs	r1, r3
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x184>
 8002cd6:	e12b      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002cd8:	1e69      	subs	r1, r5, #1
 8002cda:	2d01      	cmp	r5, #1
 8002cdc:	d100      	bne.n	8002ce0 <__aeabi_dsub+0x18c>
 8002cde:	e1d9      	b.n	8003094 <__aeabi_dsub+0x540>
 8002ce0:	4295      	cmp	r5, r2
 8002ce2:	d100      	bne.n	8002ce6 <__aeabi_dsub+0x192>
 8002ce4:	e10a      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002ce6:	2501      	movs	r5, #1
 8002ce8:	2938      	cmp	r1, #56	@ 0x38
 8002cea:	dc17      	bgt.n	8002d1c <__aeabi_dsub+0x1c8>
 8002cec:	468a      	mov	sl, r1
 8002cee:	4653      	mov	r3, sl
 8002cf0:	2b1f      	cmp	r3, #31
 8002cf2:	dd00      	ble.n	8002cf6 <__aeabi_dsub+0x1a2>
 8002cf4:	e1e7      	b.n	80030c6 <__aeabi_dsub+0x572>
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	1ad2      	subs	r2, r2, r3
 8002cfa:	9b02      	ldr	r3, [sp, #8]
 8002cfc:	4661      	mov	r1, ip
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	001d      	movs	r5, r3
 8002d02:	4653      	mov	r3, sl
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	4663      	mov	r3, ip
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	430d      	orrs	r5, r1
 8002d0e:	1e51      	subs	r1, r2, #1
 8002d10:	418a      	sbcs	r2, r1
 8002d12:	4653      	mov	r3, sl
 8002d14:	4315      	orrs	r5, r2
 8002d16:	9a02      	ldr	r2, [sp, #8]
 8002d18:	40da      	lsrs	r2, r3
 8002d1a:	18a4      	adds	r4, r4, r2
 8002d1c:	182d      	adds	r5, r5, r0
 8002d1e:	4285      	cmp	r5, r0
 8002d20:	4180      	sbcs	r0, r0
 8002d22:	4240      	negs	r0, r0
 8002d24:	1824      	adds	r4, r4, r0
 8002d26:	0223      	lsls	r3, r4, #8
 8002d28:	d400      	bmi.n	8002d2c <__aeabi_dsub+0x1d8>
 8002d2a:	e0b6      	b.n	8002e9a <__aeabi_dsub+0x346>
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002d2e:	3701      	adds	r7, #1
 8002d30:	429f      	cmp	r7, r3
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x1e2>
 8002d34:	e0ad      	b.n	8002e92 <__aeabi_dsub+0x33e>
 8002d36:	2101      	movs	r1, #1
 8002d38:	4b5c      	ldr	r3, [pc, #368]	@ (8002eac <__aeabi_dsub+0x358>)
 8002d3a:	086a      	lsrs	r2, r5, #1
 8002d3c:	401c      	ands	r4, r3
 8002d3e:	4029      	ands	r1, r5
 8002d40:	430a      	orrs	r2, r1
 8002d42:	07e5      	lsls	r5, r4, #31
 8002d44:	4315      	orrs	r5, r2
 8002d46:	0864      	lsrs	r4, r4, #1
 8002d48:	e78d      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002d4a:	4a59      	ldr	r2, [pc, #356]	@ (8002eb0 <__aeabi_dsub+0x35c>)
 8002d4c:	9b02      	ldr	r3, [sp, #8]
 8002d4e:	4692      	mov	sl, r2
 8002d50:	4662      	mov	r2, ip
 8002d52:	44ba      	add	sl, r7
 8002d54:	431a      	orrs	r2, r3
 8002d56:	d02c      	beq.n	8002db2 <__aeabi_dsub+0x25e>
 8002d58:	428e      	cmp	r6, r1
 8002d5a:	d02e      	beq.n	8002dba <__aeabi_dsub+0x266>
 8002d5c:	4652      	mov	r2, sl
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d060      	beq.n	8002e24 <__aeabi_dsub+0x2d0>
 8002d62:	2f00      	cmp	r7, #0
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x214>
 8002d66:	e0db      	b.n	8002f20 <__aeabi_dsub+0x3cc>
 8002d68:	4663      	mov	r3, ip
 8002d6a:	000e      	movs	r6, r1
 8002d6c:	9c02      	ldr	r4, [sp, #8]
 8002d6e:	08d8      	lsrs	r0, r3, #3
 8002d70:	0762      	lsls	r2, r4, #29
 8002d72:	4302      	orrs	r2, r0
 8002d74:	08e4      	lsrs	r4, r4, #3
 8002d76:	0013      	movs	r3, r2
 8002d78:	4323      	orrs	r3, r4
 8002d7a:	d100      	bne.n	8002d7e <__aeabi_dsub+0x22a>
 8002d7c:	e254      	b.n	8003228 <__aeabi_dsub+0x6d4>
 8002d7e:	2580      	movs	r5, #128	@ 0x80
 8002d80:	032d      	lsls	r5, r5, #12
 8002d82:	4325      	orrs	r5, r4
 8002d84:	032d      	lsls	r5, r5, #12
 8002d86:	4c48      	ldr	r4, [pc, #288]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002d88:	0b2d      	lsrs	r5, r5, #12
 8002d8a:	e78c      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002d8c:	4661      	mov	r1, ip
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4319      	orrs	r1, r3
 8002d92:	d100      	bne.n	8002d96 <__aeabi_dsub+0x242>
 8002d94:	e0cc      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002d96:	0029      	movs	r1, r5
 8002d98:	3901      	subs	r1, #1
 8002d9a:	2d01      	cmp	r5, #1
 8002d9c:	d100      	bne.n	8002da0 <__aeabi_dsub+0x24c>
 8002d9e:	e188      	b.n	80030b2 <__aeabi_dsub+0x55e>
 8002da0:	4295      	cmp	r5, r2
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x252>
 8002da4:	e0aa      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002da6:	2501      	movs	r5, #1
 8002da8:	2938      	cmp	r1, #56	@ 0x38
 8002daa:	dd00      	ble.n	8002dae <__aeabi_dsub+0x25a>
 8002dac:	e72f      	b.n	8002c0e <__aeabi_dsub+0xba>
 8002dae:	468a      	mov	sl, r1
 8002db0:	e718      	b.n	8002be4 <__aeabi_dsub+0x90>
 8002db2:	2201      	movs	r2, #1
 8002db4:	4051      	eors	r1, r2
 8002db6:	428e      	cmp	r6, r1
 8002db8:	d1d0      	bne.n	8002d5c <__aeabi_dsub+0x208>
 8002dba:	4653      	mov	r3, sl
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d100      	bne.n	8002dc2 <__aeabi_dsub+0x26e>
 8002dc0:	e0be      	b.n	8002f40 <__aeabi_dsub+0x3ec>
 8002dc2:	2f00      	cmp	r7, #0
 8002dc4:	d000      	beq.n	8002dc8 <__aeabi_dsub+0x274>
 8002dc6:	e138      	b.n	800303a <__aeabi_dsub+0x4e6>
 8002dc8:	46ca      	mov	sl, r9
 8002dca:	0022      	movs	r2, r4
 8002dcc:	4302      	orrs	r2, r0
 8002dce:	d100      	bne.n	8002dd2 <__aeabi_dsub+0x27e>
 8002dd0:	e1e2      	b.n	8003198 <__aeabi_dsub+0x644>
 8002dd2:	4653      	mov	r3, sl
 8002dd4:	1e59      	subs	r1, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x288>
 8002dda:	e20d      	b.n	80031f8 <__aeabi_dsub+0x6a4>
 8002ddc:	4a32      	ldr	r2, [pc, #200]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002dde:	4592      	cmp	sl, r2
 8002de0:	d100      	bne.n	8002de4 <__aeabi_dsub+0x290>
 8002de2:	e1d2      	b.n	800318a <__aeabi_dsub+0x636>
 8002de4:	2701      	movs	r7, #1
 8002de6:	2938      	cmp	r1, #56	@ 0x38
 8002de8:	dc13      	bgt.n	8002e12 <__aeabi_dsub+0x2be>
 8002dea:	291f      	cmp	r1, #31
 8002dec:	dd00      	ble.n	8002df0 <__aeabi_dsub+0x29c>
 8002dee:	e1ee      	b.n	80031ce <__aeabi_dsub+0x67a>
 8002df0:	2220      	movs	r2, #32
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	1a52      	subs	r2, r2, r1
 8002df6:	0025      	movs	r5, r4
 8002df8:	0007      	movs	r7, r0
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	40cc      	lsrs	r4, r1
 8002dfe:	4090      	lsls	r0, r2
 8002e00:	4095      	lsls	r5, r2
 8002e02:	40cf      	lsrs	r7, r1
 8002e04:	44a2      	add	sl, r4
 8002e06:	1e42      	subs	r2, r0, #1
 8002e08:	4190      	sbcs	r0, r2
 8002e0a:	4653      	mov	r3, sl
 8002e0c:	432f      	orrs	r7, r5
 8002e0e:	4307      	orrs	r7, r0
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	003d      	movs	r5, r7
 8002e14:	4465      	add	r5, ip
 8002e16:	4565      	cmp	r5, ip
 8002e18:	4192      	sbcs	r2, r2
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	4252      	negs	r2, r2
 8002e1e:	464f      	mov	r7, r9
 8002e20:	18d4      	adds	r4, r2, r3
 8002e22:	e780      	b.n	8002d26 <__aeabi_dsub+0x1d2>
 8002e24:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <__aeabi_dsub+0x360>)
 8002e26:	1c7d      	adds	r5, r7, #1
 8002e28:	4215      	tst	r5, r2
 8002e2a:	d000      	beq.n	8002e2e <__aeabi_dsub+0x2da>
 8002e2c:	e0aa      	b.n	8002f84 <__aeabi_dsub+0x430>
 8002e2e:	4662      	mov	r2, ip
 8002e30:	0025      	movs	r5, r4
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	4305      	orrs	r5, r0
 8002e36:	431a      	orrs	r2, r3
 8002e38:	2f00      	cmp	r7, #0
 8002e3a:	d000      	beq.n	8002e3e <__aeabi_dsub+0x2ea>
 8002e3c:	e0f5      	b.n	800302a <__aeabi_dsub+0x4d6>
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	d100      	bne.n	8002e44 <__aeabi_dsub+0x2f0>
 8002e42:	e16b      	b.n	800311c <__aeabi_dsub+0x5c8>
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x2f6>
 8002e48:	e152      	b.n	80030f0 <__aeabi_dsub+0x59c>
 8002e4a:	4663      	mov	r3, ip
 8002e4c:	1ac5      	subs	r5, r0, r3
 8002e4e:	9b02      	ldr	r3, [sp, #8]
 8002e50:	1ae2      	subs	r2, r4, r3
 8002e52:	42a8      	cmp	r0, r5
 8002e54:	419b      	sbcs	r3, r3
 8002e56:	425b      	negs	r3, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	d400      	bmi.n	8002e60 <__aeabi_dsub+0x30c>
 8002e5e:	e1d5      	b.n	800320c <__aeabi_dsub+0x6b8>
 8002e60:	4663      	mov	r3, ip
 8002e62:	1a1d      	subs	r5, r3, r0
 8002e64:	45ac      	cmp	ip, r5
 8002e66:	4192      	sbcs	r2, r2
 8002e68:	2601      	movs	r6, #1
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	4252      	negs	r2, r2
 8002e6e:	1b1c      	subs	r4, r3, r4
 8002e70:	4688      	mov	r8, r1
 8002e72:	1aa4      	subs	r4, r4, r2
 8002e74:	400e      	ands	r6, r1
 8002e76:	e6f6      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002e78:	4297      	cmp	r7, r2
 8002e7a:	d03f      	beq.n	8002efc <__aeabi_dsub+0x3a8>
 8002e7c:	4652      	mov	r2, sl
 8002e7e:	2501      	movs	r5, #1
 8002e80:	2a38      	cmp	r2, #56	@ 0x38
 8002e82:	dd00      	ble.n	8002e86 <__aeabi_dsub+0x332>
 8002e84:	e74a      	b.n	8002d1c <__aeabi_dsub+0x1c8>
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	9b02      	ldr	r3, [sp, #8]
 8002e8a:	0412      	lsls	r2, r2, #16
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	9302      	str	r3, [sp, #8]
 8002e90:	e72d      	b.n	8002cee <__aeabi_dsub+0x19a>
 8002e92:	003c      	movs	r4, r7
 8002e94:	2500      	movs	r5, #0
 8002e96:	2200      	movs	r2, #0
 8002e98:	e705      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	402b      	ands	r3, r5
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d000      	beq.n	8002ea4 <__aeabi_dsub+0x350>
 8002ea2:	e6e2      	b.n	8002c6a <__aeabi_dsub+0x116>
 8002ea4:	e06b      	b.n	8002f7e <__aeabi_dsub+0x42a>
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	000007ff 	.word	0x000007ff
 8002eac:	ff7fffff 	.word	0xff7fffff
 8002eb0:	fffff801 	.word	0xfffff801
 8002eb4:	000007fe 	.word	0x000007fe
 8002eb8:	0028      	movs	r0, r5
 8002eba:	f7fd fb57 	bl	800056c <__clzsi2>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	2b1f      	cmp	r3, #31
 8002ec4:	dc00      	bgt.n	8002ec8 <__aeabi_dsub+0x374>
 8002ec6:	e6b4      	b.n	8002c32 <__aeabi_dsub+0xde>
 8002ec8:	002a      	movs	r2, r5
 8002eca:	3808      	subs	r0, #8
 8002ecc:	4082      	lsls	r2, r0
 8002ece:	429f      	cmp	r7, r3
 8002ed0:	dd00      	ble.n	8002ed4 <__aeabi_dsub+0x380>
 8002ed2:	e0b9      	b.n	8003048 <__aeabi_dsub+0x4f4>
 8002ed4:	1bdb      	subs	r3, r3, r7
 8002ed6:	1c58      	adds	r0, r3, #1
 8002ed8:	281f      	cmp	r0, #31
 8002eda:	dc00      	bgt.n	8002ede <__aeabi_dsub+0x38a>
 8002edc:	e1a0      	b.n	8003220 <__aeabi_dsub+0x6cc>
 8002ede:	0015      	movs	r5, r2
 8002ee0:	3b1f      	subs	r3, #31
 8002ee2:	40dd      	lsrs	r5, r3
 8002ee4:	2820      	cmp	r0, #32
 8002ee6:	d005      	beq.n	8002ef4 <__aeabi_dsub+0x3a0>
 8002ee8:	2340      	movs	r3, #64	@ 0x40
 8002eea:	1a1b      	subs	r3, r3, r0
 8002eec:	409a      	lsls	r2, r3
 8002eee:	1e53      	subs	r3, r2, #1
 8002ef0:	419a      	sbcs	r2, r3
 8002ef2:	4315      	orrs	r5, r2
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	2700      	movs	r7, #0
 8002ef8:	402b      	ands	r3, r5
 8002efa:	e7d0      	b.n	8002e9e <__aeabi_dsub+0x34a>
 8002efc:	08c0      	lsrs	r0, r0, #3
 8002efe:	0762      	lsls	r2, r4, #29
 8002f00:	4302      	orrs	r2, r0
 8002f02:	08e4      	lsrs	r4, r4, #3
 8002f04:	e737      	b.n	8002d76 <__aeabi_dsub+0x222>
 8002f06:	08ea      	lsrs	r2, r5, #3
 8002f08:	0763      	lsls	r3, r4, #29
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	4bd3      	ldr	r3, [pc, #844]	@ (800325c <__aeabi_dsub+0x708>)
 8002f0e:	08e4      	lsrs	r4, r4, #3
 8002f10:	429f      	cmp	r7, r3
 8002f12:	d100      	bne.n	8002f16 <__aeabi_dsub+0x3c2>
 8002f14:	e72f      	b.n	8002d76 <__aeabi_dsub+0x222>
 8002f16:	0324      	lsls	r4, r4, #12
 8002f18:	0b25      	lsrs	r5, r4, #12
 8002f1a:	057c      	lsls	r4, r7, #21
 8002f1c:	0d64      	lsrs	r4, r4, #21
 8002f1e:	e6c2      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002f20:	46ca      	mov	sl, r9
 8002f22:	0022      	movs	r2, r4
 8002f24:	4302      	orrs	r2, r0
 8002f26:	d158      	bne.n	8002fda <__aeabi_dsub+0x486>
 8002f28:	4663      	mov	r3, ip
 8002f2a:	000e      	movs	r6, r1
 8002f2c:	9c02      	ldr	r4, [sp, #8]
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	4657      	mov	r7, sl
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	e7e7      	b.n	8002f08 <__aeabi_dsub+0x3b4>
 8002f38:	4cc9      	ldr	r4, [pc, #804]	@ (8003260 <__aeabi_dsub+0x70c>)
 8002f3a:	1aff      	subs	r7, r7, r3
 8002f3c:	4014      	ands	r4, r2
 8002f3e:	e692      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002f40:	4dc8      	ldr	r5, [pc, #800]	@ (8003264 <__aeabi_dsub+0x710>)
 8002f42:	1c7a      	adds	r2, r7, #1
 8002f44:	422a      	tst	r2, r5
 8002f46:	d000      	beq.n	8002f4a <__aeabi_dsub+0x3f6>
 8002f48:	e084      	b.n	8003054 <__aeabi_dsub+0x500>
 8002f4a:	0022      	movs	r2, r4
 8002f4c:	4302      	orrs	r2, r0
 8002f4e:	2f00      	cmp	r7, #0
 8002f50:	d000      	beq.n	8002f54 <__aeabi_dsub+0x400>
 8002f52:	e0ef      	b.n	8003134 <__aeabi_dsub+0x5e0>
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x406>
 8002f58:	e0e5      	b.n	8003126 <__aeabi_dsub+0x5d2>
 8002f5a:	4662      	mov	r2, ip
 8002f5c:	9902      	ldr	r1, [sp, #8]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x410>
 8002f62:	e0c5      	b.n	80030f0 <__aeabi_dsub+0x59c>
 8002f64:	4663      	mov	r3, ip
 8002f66:	18c5      	adds	r5, r0, r3
 8002f68:	468c      	mov	ip, r1
 8002f6a:	4285      	cmp	r5, r0
 8002f6c:	4180      	sbcs	r0, r0
 8002f6e:	4464      	add	r4, ip
 8002f70:	4240      	negs	r0, r0
 8002f72:	1824      	adds	r4, r4, r0
 8002f74:	0223      	lsls	r3, r4, #8
 8002f76:	d502      	bpl.n	8002f7e <__aeabi_dsub+0x42a>
 8002f78:	4bb9      	ldr	r3, [pc, #740]	@ (8003260 <__aeabi_dsub+0x70c>)
 8002f7a:	3701      	adds	r7, #1
 8002f7c:	401c      	ands	r4, r3
 8002f7e:	46ba      	mov	sl, r7
 8002f80:	9503      	str	r5, [sp, #12]
 8002f82:	e7d5      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002f84:	4662      	mov	r2, ip
 8002f86:	1a85      	subs	r5, r0, r2
 8002f88:	42a8      	cmp	r0, r5
 8002f8a:	4192      	sbcs	r2, r2
 8002f8c:	4252      	negs	r2, r2
 8002f8e:	4691      	mov	r9, r2
 8002f90:	9b02      	ldr	r3, [sp, #8]
 8002f92:	1ae3      	subs	r3, r4, r3
 8002f94:	001a      	movs	r2, r3
 8002f96:	464b      	mov	r3, r9
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	4691      	mov	r9, r2
 8002f9e:	021a      	lsls	r2, r3, #8
 8002fa0:	d46c      	bmi.n	800307c <__aeabi_dsub+0x528>
 8002fa2:	464a      	mov	r2, r9
 8002fa4:	464c      	mov	r4, r9
 8002fa6:	432a      	orrs	r2, r5
 8002fa8:	d000      	beq.n	8002fac <__aeabi_dsub+0x458>
 8002faa:	e63a      	b.n	8002c22 <__aeabi_dsub+0xce>
 8002fac:	2600      	movs	r6, #0
 8002fae:	2400      	movs	r4, #0
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	e678      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002fb4:	9902      	ldr	r1, [sp, #8]
 8002fb6:	4653      	mov	r3, sl
 8002fb8:	000d      	movs	r5, r1
 8002fba:	3a20      	subs	r2, #32
 8002fbc:	40d5      	lsrs	r5, r2
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d006      	beq.n	8002fd0 <__aeabi_dsub+0x47c>
 8002fc2:	2240      	movs	r2, #64	@ 0x40
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	4662      	mov	r2, ip
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	4693      	mov	fp, r2
 8002fd0:	465b      	mov	r3, fp
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	4193      	sbcs	r3, r2
 8002fd6:	431d      	orrs	r5, r3
 8002fd8:	e619      	b.n	8002c0e <__aeabi_dsub+0xba>
 8002fda:	4653      	mov	r3, sl
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x490>
 8002fe2:	e0c6      	b.n	8003172 <__aeabi_dsub+0x61e>
 8002fe4:	4e9d      	ldr	r6, [pc, #628]	@ (800325c <__aeabi_dsub+0x708>)
 8002fe6:	45b2      	cmp	sl, r6
 8002fe8:	d100      	bne.n	8002fec <__aeabi_dsub+0x498>
 8002fea:	e6bd      	b.n	8002d68 <__aeabi_dsub+0x214>
 8002fec:	4688      	mov	r8, r1
 8002fee:	000e      	movs	r6, r1
 8002ff0:	2501      	movs	r5, #1
 8002ff2:	2a38      	cmp	r2, #56	@ 0x38
 8002ff4:	dc10      	bgt.n	8003018 <__aeabi_dsub+0x4c4>
 8002ff6:	2a1f      	cmp	r2, #31
 8002ff8:	dc7f      	bgt.n	80030fa <__aeabi_dsub+0x5a6>
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	0025      	movs	r5, r4
 8002ffe:	1a89      	subs	r1, r1, r2
 8003000:	0007      	movs	r7, r0
 8003002:	4088      	lsls	r0, r1
 8003004:	408d      	lsls	r5, r1
 8003006:	40d7      	lsrs	r7, r2
 8003008:	40d4      	lsrs	r4, r2
 800300a:	1e41      	subs	r1, r0, #1
 800300c:	4188      	sbcs	r0, r1
 800300e:	9b02      	ldr	r3, [sp, #8]
 8003010:	433d      	orrs	r5, r7
 8003012:	1b1b      	subs	r3, r3, r4
 8003014:	4305      	orrs	r5, r0
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	4662      	mov	r2, ip
 800301a:	1b55      	subs	r5, r2, r5
 800301c:	45ac      	cmp	ip, r5
 800301e:	4192      	sbcs	r2, r2
 8003020:	9b02      	ldr	r3, [sp, #8]
 8003022:	4252      	negs	r2, r2
 8003024:	464f      	mov	r7, r9
 8003026:	1a9c      	subs	r4, r3, r2
 8003028:	e5f6      	b.n	8002c18 <__aeabi_dsub+0xc4>
 800302a:	2d00      	cmp	r5, #0
 800302c:	d000      	beq.n	8003030 <__aeabi_dsub+0x4dc>
 800302e:	e0b7      	b.n	80031a0 <__aeabi_dsub+0x64c>
 8003030:	2a00      	cmp	r2, #0
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x4e2>
 8003034:	e0f0      	b.n	8003218 <__aeabi_dsub+0x6c4>
 8003036:	2601      	movs	r6, #1
 8003038:	400e      	ands	r6, r1
 800303a:	4663      	mov	r3, ip
 800303c:	9802      	ldr	r0, [sp, #8]
 800303e:	08d9      	lsrs	r1, r3, #3
 8003040:	0742      	lsls	r2, r0, #29
 8003042:	430a      	orrs	r2, r1
 8003044:	08c4      	lsrs	r4, r0, #3
 8003046:	e696      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003048:	4c85      	ldr	r4, [pc, #532]	@ (8003260 <__aeabi_dsub+0x70c>)
 800304a:	1aff      	subs	r7, r7, r3
 800304c:	4014      	ands	r4, r2
 800304e:	0762      	lsls	r2, r4, #29
 8003050:	08e4      	lsrs	r4, r4, #3
 8003052:	e760      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 8003054:	4981      	ldr	r1, [pc, #516]	@ (800325c <__aeabi_dsub+0x708>)
 8003056:	428a      	cmp	r2, r1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x508>
 800305a:	e0c9      	b.n	80031f0 <__aeabi_dsub+0x69c>
 800305c:	4663      	mov	r3, ip
 800305e:	18c1      	adds	r1, r0, r3
 8003060:	4281      	cmp	r1, r0
 8003062:	4180      	sbcs	r0, r0
 8003064:	9b02      	ldr	r3, [sp, #8]
 8003066:	4240      	negs	r0, r0
 8003068:	18e3      	adds	r3, r4, r3
 800306a:	181b      	adds	r3, r3, r0
 800306c:	07dd      	lsls	r5, r3, #31
 800306e:	085c      	lsrs	r4, r3, #1
 8003070:	2307      	movs	r3, #7
 8003072:	0849      	lsrs	r1, r1, #1
 8003074:	430d      	orrs	r5, r1
 8003076:	0017      	movs	r7, r2
 8003078:	402b      	ands	r3, r5
 800307a:	e710      	b.n	8002e9e <__aeabi_dsub+0x34a>
 800307c:	4663      	mov	r3, ip
 800307e:	1a1d      	subs	r5, r3, r0
 8003080:	45ac      	cmp	ip, r5
 8003082:	4192      	sbcs	r2, r2
 8003084:	2601      	movs	r6, #1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	4252      	negs	r2, r2
 800308a:	1b1c      	subs	r4, r3, r4
 800308c:	4688      	mov	r8, r1
 800308e:	1aa4      	subs	r4, r4, r2
 8003090:	400e      	ands	r6, r1
 8003092:	e5c6      	b.n	8002c22 <__aeabi_dsub+0xce>
 8003094:	4663      	mov	r3, ip
 8003096:	18c5      	adds	r5, r0, r3
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4285      	cmp	r5, r0
 800309c:	4180      	sbcs	r0, r0
 800309e:	469c      	mov	ip, r3
 80030a0:	4240      	negs	r0, r0
 80030a2:	4464      	add	r4, ip
 80030a4:	1824      	adds	r4, r4, r0
 80030a6:	2701      	movs	r7, #1
 80030a8:	0223      	lsls	r3, r4, #8
 80030aa:	d400      	bmi.n	80030ae <__aeabi_dsub+0x55a>
 80030ac:	e6f5      	b.n	8002e9a <__aeabi_dsub+0x346>
 80030ae:	2702      	movs	r7, #2
 80030b0:	e641      	b.n	8002d36 <__aeabi_dsub+0x1e2>
 80030b2:	4663      	mov	r3, ip
 80030b4:	1ac5      	subs	r5, r0, r3
 80030b6:	42a8      	cmp	r0, r5
 80030b8:	4180      	sbcs	r0, r0
 80030ba:	9b02      	ldr	r3, [sp, #8]
 80030bc:	4240      	negs	r0, r0
 80030be:	1ae4      	subs	r4, r4, r3
 80030c0:	2701      	movs	r7, #1
 80030c2:	1a24      	subs	r4, r4, r0
 80030c4:	e5a8      	b.n	8002c18 <__aeabi_dsub+0xc4>
 80030c6:	9d02      	ldr	r5, [sp, #8]
 80030c8:	4652      	mov	r2, sl
 80030ca:	002b      	movs	r3, r5
 80030cc:	3a20      	subs	r2, #32
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	4653      	mov	r3, sl
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d006      	beq.n	80030e6 <__aeabi_dsub+0x592>
 80030d8:	2240      	movs	r2, #64	@ 0x40
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	002b      	movs	r3, r5
 80030de:	4093      	lsls	r3, r2
 80030e0:	4662      	mov	r2, ip
 80030e2:	431a      	orrs	r2, r3
 80030e4:	4693      	mov	fp, r2
 80030e6:	465d      	mov	r5, fp
 80030e8:	1e6b      	subs	r3, r5, #1
 80030ea:	419d      	sbcs	r5, r3
 80030ec:	430d      	orrs	r5, r1
 80030ee:	e615      	b.n	8002d1c <__aeabi_dsub+0x1c8>
 80030f0:	0762      	lsls	r2, r4, #29
 80030f2:	08c0      	lsrs	r0, r0, #3
 80030f4:	4302      	orrs	r2, r0
 80030f6:	08e4      	lsrs	r4, r4, #3
 80030f8:	e70d      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 80030fa:	0011      	movs	r1, r2
 80030fc:	0027      	movs	r7, r4
 80030fe:	3920      	subs	r1, #32
 8003100:	40cf      	lsrs	r7, r1
 8003102:	2a20      	cmp	r2, #32
 8003104:	d005      	beq.n	8003112 <__aeabi_dsub+0x5be>
 8003106:	2140      	movs	r1, #64	@ 0x40
 8003108:	1a8a      	subs	r2, r1, r2
 800310a:	4094      	lsls	r4, r2
 800310c:	0025      	movs	r5, r4
 800310e:	4305      	orrs	r5, r0
 8003110:	9503      	str	r5, [sp, #12]
 8003112:	9d03      	ldr	r5, [sp, #12]
 8003114:	1e6a      	subs	r2, r5, #1
 8003116:	4195      	sbcs	r5, r2
 8003118:	433d      	orrs	r5, r7
 800311a:	e77d      	b.n	8003018 <__aeabi_dsub+0x4c4>
 800311c:	2a00      	cmp	r2, #0
 800311e:	d100      	bne.n	8003122 <__aeabi_dsub+0x5ce>
 8003120:	e744      	b.n	8002fac <__aeabi_dsub+0x458>
 8003122:	2601      	movs	r6, #1
 8003124:	400e      	ands	r6, r1
 8003126:	4663      	mov	r3, ip
 8003128:	08d9      	lsrs	r1, r3, #3
 800312a:	9b02      	ldr	r3, [sp, #8]
 800312c:	075a      	lsls	r2, r3, #29
 800312e:	430a      	orrs	r2, r1
 8003130:	08dc      	lsrs	r4, r3, #3
 8003132:	e6f0      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 8003134:	2a00      	cmp	r2, #0
 8003136:	d028      	beq.n	800318a <__aeabi_dsub+0x636>
 8003138:	4662      	mov	r2, ip
 800313a:	9f02      	ldr	r7, [sp, #8]
 800313c:	08c0      	lsrs	r0, r0, #3
 800313e:	433a      	orrs	r2, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x5f0>
 8003142:	e6dc      	b.n	8002efe <__aeabi_dsub+0x3aa>
 8003144:	0762      	lsls	r2, r4, #29
 8003146:	4310      	orrs	r0, r2
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	08e4      	lsrs	r4, r4, #3
 800314c:	0312      	lsls	r2, r2, #12
 800314e:	4214      	tst	r4, r2
 8003150:	d009      	beq.n	8003166 <__aeabi_dsub+0x612>
 8003152:	08fd      	lsrs	r5, r7, #3
 8003154:	4215      	tst	r5, r2
 8003156:	d106      	bne.n	8003166 <__aeabi_dsub+0x612>
 8003158:	4663      	mov	r3, ip
 800315a:	2601      	movs	r6, #1
 800315c:	002c      	movs	r4, r5
 800315e:	08d8      	lsrs	r0, r3, #3
 8003160:	077b      	lsls	r3, r7, #29
 8003162:	4318      	orrs	r0, r3
 8003164:	400e      	ands	r6, r1
 8003166:	0f42      	lsrs	r2, r0, #29
 8003168:	00c0      	lsls	r0, r0, #3
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	0752      	lsls	r2, r2, #29
 800316e:	4302      	orrs	r2, r0
 8003170:	e601      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003172:	4663      	mov	r3, ip
 8003174:	1a1d      	subs	r5, r3, r0
 8003176:	45ac      	cmp	ip, r5
 8003178:	4192      	sbcs	r2, r2
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	4252      	negs	r2, r2
 800317e:	1b1c      	subs	r4, r3, r4
 8003180:	000e      	movs	r6, r1
 8003182:	4688      	mov	r8, r1
 8003184:	2701      	movs	r7, #1
 8003186:	1aa4      	subs	r4, r4, r2
 8003188:	e546      	b.n	8002c18 <__aeabi_dsub+0xc4>
 800318a:	4663      	mov	r3, ip
 800318c:	08d9      	lsrs	r1, r3, #3
 800318e:	9b02      	ldr	r3, [sp, #8]
 8003190:	075a      	lsls	r2, r3, #29
 8003192:	430a      	orrs	r2, r1
 8003194:	08dc      	lsrs	r4, r3, #3
 8003196:	e5ee      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003198:	4663      	mov	r3, ip
 800319a:	9c02      	ldr	r4, [sp, #8]
 800319c:	9303      	str	r3, [sp, #12]
 800319e:	e6c7      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 80031a0:	08c0      	lsrs	r0, r0, #3
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d100      	bne.n	80031a8 <__aeabi_dsub+0x654>
 80031a6:	e6aa      	b.n	8002efe <__aeabi_dsub+0x3aa>
 80031a8:	0762      	lsls	r2, r4, #29
 80031aa:	4310      	orrs	r0, r2
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	08e4      	lsrs	r4, r4, #3
 80031b0:	0312      	lsls	r2, r2, #12
 80031b2:	4214      	tst	r4, r2
 80031b4:	d0d7      	beq.n	8003166 <__aeabi_dsub+0x612>
 80031b6:	9f02      	ldr	r7, [sp, #8]
 80031b8:	08fd      	lsrs	r5, r7, #3
 80031ba:	4215      	tst	r5, r2
 80031bc:	d1d3      	bne.n	8003166 <__aeabi_dsub+0x612>
 80031be:	4663      	mov	r3, ip
 80031c0:	2601      	movs	r6, #1
 80031c2:	08d8      	lsrs	r0, r3, #3
 80031c4:	077b      	lsls	r3, r7, #29
 80031c6:	002c      	movs	r4, r5
 80031c8:	4318      	orrs	r0, r3
 80031ca:	400e      	ands	r6, r1
 80031cc:	e7cb      	b.n	8003166 <__aeabi_dsub+0x612>
 80031ce:	000a      	movs	r2, r1
 80031d0:	0027      	movs	r7, r4
 80031d2:	3a20      	subs	r2, #32
 80031d4:	40d7      	lsrs	r7, r2
 80031d6:	2920      	cmp	r1, #32
 80031d8:	d005      	beq.n	80031e6 <__aeabi_dsub+0x692>
 80031da:	2240      	movs	r2, #64	@ 0x40
 80031dc:	1a52      	subs	r2, r2, r1
 80031de:	4094      	lsls	r4, r2
 80031e0:	0025      	movs	r5, r4
 80031e2:	4305      	orrs	r5, r0
 80031e4:	9503      	str	r5, [sp, #12]
 80031e6:	9d03      	ldr	r5, [sp, #12]
 80031e8:	1e6a      	subs	r2, r5, #1
 80031ea:	4195      	sbcs	r5, r2
 80031ec:	432f      	orrs	r7, r5
 80031ee:	e610      	b.n	8002e12 <__aeabi_dsub+0x2be>
 80031f0:	0014      	movs	r4, r2
 80031f2:	2500      	movs	r5, #0
 80031f4:	2200      	movs	r2, #0
 80031f6:	e556      	b.n	8002ca6 <__aeabi_dsub+0x152>
 80031f8:	9b02      	ldr	r3, [sp, #8]
 80031fa:	4460      	add	r0, ip
 80031fc:	4699      	mov	r9, r3
 80031fe:	4560      	cmp	r0, ip
 8003200:	4192      	sbcs	r2, r2
 8003202:	444c      	add	r4, r9
 8003204:	4252      	negs	r2, r2
 8003206:	0005      	movs	r5, r0
 8003208:	18a4      	adds	r4, r4, r2
 800320a:	e74c      	b.n	80030a6 <__aeabi_dsub+0x552>
 800320c:	001a      	movs	r2, r3
 800320e:	001c      	movs	r4, r3
 8003210:	432a      	orrs	r2, r5
 8003212:	d000      	beq.n	8003216 <__aeabi_dsub+0x6c2>
 8003214:	e6b3      	b.n	8002f7e <__aeabi_dsub+0x42a>
 8003216:	e6c9      	b.n	8002fac <__aeabi_dsub+0x458>
 8003218:	2480      	movs	r4, #128	@ 0x80
 800321a:	2600      	movs	r6, #0
 800321c:	0324      	lsls	r4, r4, #12
 800321e:	e5ae      	b.n	8002d7e <__aeabi_dsub+0x22a>
 8003220:	2120      	movs	r1, #32
 8003222:	2500      	movs	r5, #0
 8003224:	1a09      	subs	r1, r1, r0
 8003226:	e517      	b.n	8002c58 <__aeabi_dsub+0x104>
 8003228:	2200      	movs	r2, #0
 800322a:	2500      	movs	r5, #0
 800322c:	4c0b      	ldr	r4, [pc, #44]	@ (800325c <__aeabi_dsub+0x708>)
 800322e:	e53a      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8003230:	2d00      	cmp	r5, #0
 8003232:	d100      	bne.n	8003236 <__aeabi_dsub+0x6e2>
 8003234:	e5f6      	b.n	8002e24 <__aeabi_dsub+0x2d0>
 8003236:	464b      	mov	r3, r9
 8003238:	1bda      	subs	r2, r3, r7
 800323a:	4692      	mov	sl, r2
 800323c:	2f00      	cmp	r7, #0
 800323e:	d100      	bne.n	8003242 <__aeabi_dsub+0x6ee>
 8003240:	e66f      	b.n	8002f22 <__aeabi_dsub+0x3ce>
 8003242:	2a38      	cmp	r2, #56	@ 0x38
 8003244:	dc05      	bgt.n	8003252 <__aeabi_dsub+0x6fe>
 8003246:	2680      	movs	r6, #128	@ 0x80
 8003248:	0436      	lsls	r6, r6, #16
 800324a:	4334      	orrs	r4, r6
 800324c:	4688      	mov	r8, r1
 800324e:	000e      	movs	r6, r1
 8003250:	e6d1      	b.n	8002ff6 <__aeabi_dsub+0x4a2>
 8003252:	4688      	mov	r8, r1
 8003254:	000e      	movs	r6, r1
 8003256:	2501      	movs	r5, #1
 8003258:	e6de      	b.n	8003018 <__aeabi_dsub+0x4c4>
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	000007ff 	.word	0x000007ff
 8003260:	ff7fffff 	.word	0xff7fffff
 8003264:	000007fe 	.word	0x000007fe
 8003268:	2d00      	cmp	r5, #0
 800326a:	d100      	bne.n	800326e <__aeabi_dsub+0x71a>
 800326c:	e668      	b.n	8002f40 <__aeabi_dsub+0x3ec>
 800326e:	464b      	mov	r3, r9
 8003270:	1bd9      	subs	r1, r3, r7
 8003272:	2f00      	cmp	r7, #0
 8003274:	d101      	bne.n	800327a <__aeabi_dsub+0x726>
 8003276:	468a      	mov	sl, r1
 8003278:	e5a7      	b.n	8002dca <__aeabi_dsub+0x276>
 800327a:	2701      	movs	r7, #1
 800327c:	2938      	cmp	r1, #56	@ 0x38
 800327e:	dd00      	ble.n	8003282 <__aeabi_dsub+0x72e>
 8003280:	e5c7      	b.n	8002e12 <__aeabi_dsub+0x2be>
 8003282:	2280      	movs	r2, #128	@ 0x80
 8003284:	0412      	lsls	r2, r2, #16
 8003286:	4314      	orrs	r4, r2
 8003288:	e5af      	b.n	8002dea <__aeabi_dsub+0x296>
 800328a:	46c0      	nop			@ (mov r8, r8)

0800328c <__aeabi_dcmpun>:
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	46c6      	mov	lr, r8
 8003290:	031e      	lsls	r6, r3, #12
 8003292:	0b36      	lsrs	r6, r6, #12
 8003294:	46b0      	mov	r8, r6
 8003296:	4e0d      	ldr	r6, [pc, #52]	@ (80032cc <__aeabi_dcmpun+0x40>)
 8003298:	030c      	lsls	r4, r1, #12
 800329a:	004d      	lsls	r5, r1, #1
 800329c:	005f      	lsls	r7, r3, #1
 800329e:	b500      	push	{lr}
 80032a0:	0b24      	lsrs	r4, r4, #12
 80032a2:	0d6d      	lsrs	r5, r5, #21
 80032a4:	0d7f      	lsrs	r7, r7, #21
 80032a6:	42b5      	cmp	r5, r6
 80032a8:	d00b      	beq.n	80032c2 <__aeabi_dcmpun+0x36>
 80032aa:	4908      	ldr	r1, [pc, #32]	@ (80032cc <__aeabi_dcmpun+0x40>)
 80032ac:	2000      	movs	r0, #0
 80032ae:	428f      	cmp	r7, r1
 80032b0:	d104      	bne.n	80032bc <__aeabi_dcmpun+0x30>
 80032b2:	4646      	mov	r6, r8
 80032b4:	4316      	orrs	r6, r2
 80032b6:	0030      	movs	r0, r6
 80032b8:	1e43      	subs	r3, r0, #1
 80032ba:	4198      	sbcs	r0, r3
 80032bc:	bc80      	pop	{r7}
 80032be:	46b8      	mov	r8, r7
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	4304      	orrs	r4, r0
 80032c4:	2001      	movs	r0, #1
 80032c6:	2c00      	cmp	r4, #0
 80032c8:	d1f8      	bne.n	80032bc <__aeabi_dcmpun+0x30>
 80032ca:	e7ee      	b.n	80032aa <__aeabi_dcmpun+0x1e>
 80032cc:	000007ff 	.word	0x000007ff

080032d0 <__aeabi_d2iz>:
 80032d0:	000b      	movs	r3, r1
 80032d2:	0002      	movs	r2, r0
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4d16      	ldr	r5, [pc, #88]	@ (8003330 <__aeabi_d2iz+0x60>)
 80032d8:	030c      	lsls	r4, r1, #12
 80032da:	b082      	sub	sp, #8
 80032dc:	0049      	lsls	r1, r1, #1
 80032de:	2000      	movs	r0, #0
 80032e0:	9200      	str	r2, [sp, #0]
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	0b24      	lsrs	r4, r4, #12
 80032e6:	0d49      	lsrs	r1, r1, #21
 80032e8:	0fde      	lsrs	r6, r3, #31
 80032ea:	42a9      	cmp	r1, r5
 80032ec:	dd04      	ble.n	80032f8 <__aeabi_d2iz+0x28>
 80032ee:	4811      	ldr	r0, [pc, #68]	@ (8003334 <__aeabi_d2iz+0x64>)
 80032f0:	4281      	cmp	r1, r0
 80032f2:	dd03      	ble.n	80032fc <__aeabi_d2iz+0x2c>
 80032f4:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <__aeabi_d2iz+0x68>)
 80032f6:	18f0      	adds	r0, r6, r3
 80032f8:	b002      	add	sp, #8
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	2080      	movs	r0, #128	@ 0x80
 80032fe:	0340      	lsls	r0, r0, #13
 8003300:	4320      	orrs	r0, r4
 8003302:	4c0e      	ldr	r4, [pc, #56]	@ (800333c <__aeabi_d2iz+0x6c>)
 8003304:	1a64      	subs	r4, r4, r1
 8003306:	2c1f      	cmp	r4, #31
 8003308:	dd08      	ble.n	800331c <__aeabi_d2iz+0x4c>
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <__aeabi_d2iz+0x70>)
 800330c:	1a5b      	subs	r3, r3, r1
 800330e:	40d8      	lsrs	r0, r3
 8003310:	0003      	movs	r3, r0
 8003312:	4258      	negs	r0, r3
 8003314:	2e00      	cmp	r6, #0
 8003316:	d1ef      	bne.n	80032f8 <__aeabi_d2iz+0x28>
 8003318:	0018      	movs	r0, r3
 800331a:	e7ed      	b.n	80032f8 <__aeabi_d2iz+0x28>
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <__aeabi_d2iz+0x74>)
 800331e:	9a00      	ldr	r2, [sp, #0]
 8003320:	469c      	mov	ip, r3
 8003322:	0003      	movs	r3, r0
 8003324:	4461      	add	r1, ip
 8003326:	408b      	lsls	r3, r1
 8003328:	40e2      	lsrs	r2, r4
 800332a:	4313      	orrs	r3, r2
 800332c:	e7f1      	b.n	8003312 <__aeabi_d2iz+0x42>
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	000003fe 	.word	0x000003fe
 8003334:	0000041d 	.word	0x0000041d
 8003338:	7fffffff 	.word	0x7fffffff
 800333c:	00000433 	.word	0x00000433
 8003340:	00000413 	.word	0x00000413
 8003344:	fffffbed 	.word	0xfffffbed

08003348 <__aeabi_i2d>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	2800      	cmp	r0, #0
 800334c:	d016      	beq.n	800337c <__aeabi_i2d+0x34>
 800334e:	17c3      	asrs	r3, r0, #31
 8003350:	18c5      	adds	r5, r0, r3
 8003352:	405d      	eors	r5, r3
 8003354:	0fc4      	lsrs	r4, r0, #31
 8003356:	0028      	movs	r0, r5
 8003358:	f7fd f908 	bl	800056c <__clzsi2>
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <__aeabi_i2d+0x58>)
 800335e:	1a1b      	subs	r3, r3, r0
 8003360:	055b      	lsls	r3, r3, #21
 8003362:	0d5b      	lsrs	r3, r3, #21
 8003364:	280a      	cmp	r0, #10
 8003366:	dc14      	bgt.n	8003392 <__aeabi_i2d+0x4a>
 8003368:	0002      	movs	r2, r0
 800336a:	002e      	movs	r6, r5
 800336c:	3215      	adds	r2, #21
 800336e:	4096      	lsls	r6, r2
 8003370:	220b      	movs	r2, #11
 8003372:	1a12      	subs	r2, r2, r0
 8003374:	40d5      	lsrs	r5, r2
 8003376:	032d      	lsls	r5, r5, #12
 8003378:	0b2d      	lsrs	r5, r5, #12
 800337a:	e003      	b.n	8003384 <__aeabi_i2d+0x3c>
 800337c:	2400      	movs	r4, #0
 800337e:	2300      	movs	r3, #0
 8003380:	2500      	movs	r5, #0
 8003382:	2600      	movs	r6, #0
 8003384:	051b      	lsls	r3, r3, #20
 8003386:	432b      	orrs	r3, r5
 8003388:	07e4      	lsls	r4, r4, #31
 800338a:	4323      	orrs	r3, r4
 800338c:	0030      	movs	r0, r6
 800338e:	0019      	movs	r1, r3
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	380b      	subs	r0, #11
 8003394:	4085      	lsls	r5, r0
 8003396:	032d      	lsls	r5, r5, #12
 8003398:	2600      	movs	r6, #0
 800339a:	0b2d      	lsrs	r5, r5, #12
 800339c:	e7f2      	b.n	8003384 <__aeabi_i2d+0x3c>
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	0000041e 	.word	0x0000041e

080033a4 <__aeabi_ui2d>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	1e04      	subs	r4, r0, #0
 80033a8:	d010      	beq.n	80033cc <__aeabi_ui2d+0x28>
 80033aa:	f7fd f8df 	bl	800056c <__clzsi2>
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_ui2d+0x44>)
 80033b0:	1a1b      	subs	r3, r3, r0
 80033b2:	055b      	lsls	r3, r3, #21
 80033b4:	0d5b      	lsrs	r3, r3, #21
 80033b6:	280a      	cmp	r0, #10
 80033b8:	dc0f      	bgt.n	80033da <__aeabi_ui2d+0x36>
 80033ba:	220b      	movs	r2, #11
 80033bc:	0021      	movs	r1, r4
 80033be:	1a12      	subs	r2, r2, r0
 80033c0:	40d1      	lsrs	r1, r2
 80033c2:	3015      	adds	r0, #21
 80033c4:	030a      	lsls	r2, r1, #12
 80033c6:	4084      	lsls	r4, r0
 80033c8:	0b12      	lsrs	r2, r2, #12
 80033ca:	e001      	b.n	80033d0 <__aeabi_ui2d+0x2c>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2200      	movs	r2, #0
 80033d0:	051b      	lsls	r3, r3, #20
 80033d2:	4313      	orrs	r3, r2
 80033d4:	0020      	movs	r0, r4
 80033d6:	0019      	movs	r1, r3
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	0022      	movs	r2, r4
 80033dc:	380b      	subs	r0, #11
 80033de:	4082      	lsls	r2, r0
 80033e0:	0312      	lsls	r2, r2, #12
 80033e2:	2400      	movs	r4, #0
 80033e4:	0b12      	lsrs	r2, r2, #12
 80033e6:	e7f3      	b.n	80033d0 <__aeabi_ui2d+0x2c>
 80033e8:	0000041e 	.word	0x0000041e

080033ec <__aeabi_f2d>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	0242      	lsls	r2, r0, #9
 80033f0:	0043      	lsls	r3, r0, #1
 80033f2:	0fc4      	lsrs	r4, r0, #31
 80033f4:	20fe      	movs	r0, #254	@ 0xfe
 80033f6:	0e1b      	lsrs	r3, r3, #24
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	0a55      	lsrs	r5, r2, #9
 80033fc:	4208      	tst	r0, r1
 80033fe:	d00c      	beq.n	800341a <__aeabi_f2d+0x2e>
 8003400:	21e0      	movs	r1, #224	@ 0xe0
 8003402:	0089      	lsls	r1, r1, #2
 8003404:	468c      	mov	ip, r1
 8003406:	076d      	lsls	r5, r5, #29
 8003408:	0b12      	lsrs	r2, r2, #12
 800340a:	4463      	add	r3, ip
 800340c:	051b      	lsls	r3, r3, #20
 800340e:	4313      	orrs	r3, r2
 8003410:	07e4      	lsls	r4, r4, #31
 8003412:	4323      	orrs	r3, r4
 8003414:	0028      	movs	r0, r5
 8003416:	0019      	movs	r1, r3
 8003418:	bd70      	pop	{r4, r5, r6, pc}
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <__aeabi_f2d+0x5c>
 800341e:	2d00      	cmp	r5, #0
 8003420:	d01b      	beq.n	800345a <__aeabi_f2d+0x6e>
 8003422:	0028      	movs	r0, r5
 8003424:	f7fd f8a2 	bl	800056c <__clzsi2>
 8003428:	280a      	cmp	r0, #10
 800342a:	dc1c      	bgt.n	8003466 <__aeabi_f2d+0x7a>
 800342c:	230b      	movs	r3, #11
 800342e:	002a      	movs	r2, r5
 8003430:	1a1b      	subs	r3, r3, r0
 8003432:	40da      	lsrs	r2, r3
 8003434:	0003      	movs	r3, r0
 8003436:	3315      	adds	r3, #21
 8003438:	409d      	lsls	r5, r3
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <__aeabi_f2d+0x88>)
 800343c:	0312      	lsls	r2, r2, #12
 800343e:	1a1b      	subs	r3, r3, r0
 8003440:	055b      	lsls	r3, r3, #21
 8003442:	0b12      	lsrs	r2, r2, #12
 8003444:	0d5b      	lsrs	r3, r3, #21
 8003446:	e7e1      	b.n	800340c <__aeabi_f2d+0x20>
 8003448:	2d00      	cmp	r5, #0
 800344a:	d009      	beq.n	8003460 <__aeabi_f2d+0x74>
 800344c:	0b13      	lsrs	r3, r2, #12
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	0312      	lsls	r2, r2, #12
 8003452:	431a      	orrs	r2, r3
 8003454:	076d      	lsls	r5, r5, #29
 8003456:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <__aeabi_f2d+0x8c>)
 8003458:	e7d8      	b.n	800340c <__aeabi_f2d+0x20>
 800345a:	2300      	movs	r3, #0
 800345c:	2200      	movs	r2, #0
 800345e:	e7d5      	b.n	800340c <__aeabi_f2d+0x20>
 8003460:	2200      	movs	r2, #0
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <__aeabi_f2d+0x8c>)
 8003464:	e7d2      	b.n	800340c <__aeabi_f2d+0x20>
 8003466:	0003      	movs	r3, r0
 8003468:	002a      	movs	r2, r5
 800346a:	3b0b      	subs	r3, #11
 800346c:	409a      	lsls	r2, r3
 800346e:	2500      	movs	r5, #0
 8003470:	e7e3      	b.n	800343a <__aeabi_f2d+0x4e>
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	00000389 	.word	0x00000389
 8003478:	000007ff 	.word	0x000007ff

0800347c <__aeabi_d2f>:
 800347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347e:	004b      	lsls	r3, r1, #1
 8003480:	030f      	lsls	r7, r1, #12
 8003482:	0d5b      	lsrs	r3, r3, #21
 8003484:	4c3b      	ldr	r4, [pc, #236]	@ (8003574 <__aeabi_d2f+0xf8>)
 8003486:	0f45      	lsrs	r5, r0, #29
 8003488:	b083      	sub	sp, #12
 800348a:	0a7f      	lsrs	r7, r7, #9
 800348c:	1c5e      	adds	r6, r3, #1
 800348e:	432f      	orrs	r7, r5
 8003490:	9000      	str	r0, [sp, #0]
 8003492:	9101      	str	r1, [sp, #4]
 8003494:	0fca      	lsrs	r2, r1, #31
 8003496:	00c5      	lsls	r5, r0, #3
 8003498:	4226      	tst	r6, r4
 800349a:	d00b      	beq.n	80034b4 <__aeabi_d2f+0x38>
 800349c:	4936      	ldr	r1, [pc, #216]	@ (8003578 <__aeabi_d2f+0xfc>)
 800349e:	185c      	adds	r4, r3, r1
 80034a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80034a2:	dd13      	ble.n	80034cc <__aeabi_d2f+0x50>
 80034a4:	20ff      	movs	r0, #255	@ 0xff
 80034a6:	2300      	movs	r3, #0
 80034a8:	05c0      	lsls	r0, r0, #23
 80034aa:	4318      	orrs	r0, r3
 80034ac:	07d2      	lsls	r2, r2, #31
 80034ae:	4310      	orrs	r0, r2
 80034b0:	b003      	add	sp, #12
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <__aeabi_d2f+0x42>
 80034b8:	2000      	movs	r0, #0
 80034ba:	2300      	movs	r3, #0
 80034bc:	e7f4      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034be:	433d      	orrs	r5, r7
 80034c0:	d0f0      	beq.n	80034a4 <__aeabi_d2f+0x28>
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	03db      	lsls	r3, r3, #15
 80034c6:	20ff      	movs	r0, #255	@ 0xff
 80034c8:	433b      	orrs	r3, r7
 80034ca:	e7ed      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	dd14      	ble.n	80034fa <__aeabi_d2f+0x7e>
 80034d0:	9b00      	ldr	r3, [sp, #0]
 80034d2:	00ff      	lsls	r7, r7, #3
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	4183      	sbcs	r3, r0
 80034da:	0f69      	lsrs	r1, r5, #29
 80034dc:	433b      	orrs	r3, r7
 80034de:	430b      	orrs	r3, r1
 80034e0:	0759      	lsls	r1, r3, #29
 80034e2:	d041      	beq.n	8003568 <__aeabi_d2f+0xec>
 80034e4:	210f      	movs	r1, #15
 80034e6:	4019      	ands	r1, r3
 80034e8:	2904      	cmp	r1, #4
 80034ea:	d028      	beq.n	800353e <__aeabi_d2f+0xc2>
 80034ec:	3304      	adds	r3, #4
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	d525      	bpl.n	800353e <__aeabi_d2f+0xc2>
 80034f2:	3401      	adds	r4, #1
 80034f4:	2300      	movs	r3, #0
 80034f6:	b2e0      	uxtb	r0, r4
 80034f8:	e7d6      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034fa:	0021      	movs	r1, r4
 80034fc:	3117      	adds	r1, #23
 80034fe:	dbdb      	blt.n	80034b8 <__aeabi_d2f+0x3c>
 8003500:	2180      	movs	r1, #128	@ 0x80
 8003502:	201e      	movs	r0, #30
 8003504:	0409      	lsls	r1, r1, #16
 8003506:	4339      	orrs	r1, r7
 8003508:	1b00      	subs	r0, r0, r4
 800350a:	281f      	cmp	r0, #31
 800350c:	dd1b      	ble.n	8003546 <__aeabi_d2f+0xca>
 800350e:	2602      	movs	r6, #2
 8003510:	4276      	negs	r6, r6
 8003512:	1b34      	subs	r4, r6, r4
 8003514:	000e      	movs	r6, r1
 8003516:	40e6      	lsrs	r6, r4
 8003518:	0034      	movs	r4, r6
 800351a:	2820      	cmp	r0, #32
 800351c:	d004      	beq.n	8003528 <__aeabi_d2f+0xac>
 800351e:	4817      	ldr	r0, [pc, #92]	@ (800357c <__aeabi_d2f+0x100>)
 8003520:	4684      	mov	ip, r0
 8003522:	4463      	add	r3, ip
 8003524:	4099      	lsls	r1, r3
 8003526:	430d      	orrs	r5, r1
 8003528:	002b      	movs	r3, r5
 800352a:	1e59      	subs	r1, r3, #1
 800352c:	418b      	sbcs	r3, r1
 800352e:	4323      	orrs	r3, r4
 8003530:	0759      	lsls	r1, r3, #29
 8003532:	d015      	beq.n	8003560 <__aeabi_d2f+0xe4>
 8003534:	210f      	movs	r1, #15
 8003536:	2400      	movs	r4, #0
 8003538:	4019      	ands	r1, r3
 800353a:	2904      	cmp	r1, #4
 800353c:	d117      	bne.n	800356e <__aeabi_d2f+0xf2>
 800353e:	019b      	lsls	r3, r3, #6
 8003540:	0a5b      	lsrs	r3, r3, #9
 8003542:	b2e0      	uxtb	r0, r4
 8003544:	e7b0      	b.n	80034a8 <__aeabi_d2f+0x2c>
 8003546:	4c0e      	ldr	r4, [pc, #56]	@ (8003580 <__aeabi_d2f+0x104>)
 8003548:	191c      	adds	r4, r3, r4
 800354a:	002b      	movs	r3, r5
 800354c:	40a5      	lsls	r5, r4
 800354e:	40c3      	lsrs	r3, r0
 8003550:	40a1      	lsls	r1, r4
 8003552:	1e68      	subs	r0, r5, #1
 8003554:	4185      	sbcs	r5, r0
 8003556:	4329      	orrs	r1, r5
 8003558:	430b      	orrs	r3, r1
 800355a:	2400      	movs	r4, #0
 800355c:	0759      	lsls	r1, r3, #29
 800355e:	d1c1      	bne.n	80034e4 <__aeabi_d2f+0x68>
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	2000      	movs	r0, #0
 8003564:	0a5b      	lsrs	r3, r3, #9
 8003566:	e79f      	b.n	80034a8 <__aeabi_d2f+0x2c>
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	b2e0      	uxtb	r0, r4
 800356c:	e79c      	b.n	80034a8 <__aeabi_d2f+0x2c>
 800356e:	3304      	adds	r3, #4
 8003570:	e7e5      	b.n	800353e <__aeabi_d2f+0xc2>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	000007fe 	.word	0x000007fe
 8003578:	fffffc80 	.word	0xfffffc80
 800357c:	fffffca2 	.word	0xfffffca2
 8003580:	fffffc82 	.word	0xfffffc82

08003584 <__clzdi2>:
 8003584:	b510      	push	{r4, lr}
 8003586:	2900      	cmp	r1, #0
 8003588:	d103      	bne.n	8003592 <__clzdi2+0xe>
 800358a:	f7fc ffef 	bl	800056c <__clzsi2>
 800358e:	3020      	adds	r0, #32
 8003590:	e002      	b.n	8003598 <__clzdi2+0x14>
 8003592:	0008      	movs	r0, r1
 8003594:	f7fc ffea 	bl	800056c <__clzsi2>
 8003598:	bd10      	pop	{r4, pc}
 800359a:	46c0      	nop			@ (mov r8, r8)

0800359c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <batteryInit+0x18>)
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	20000338 	.word	0x20000338

080035b8 <checkCharges>:

void checkCharges(){
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 80035bc:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <checkCharges+0x10c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f005 feab 	bl	800931c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035c6:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <checkCharges+0x10c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	0018      	movs	r0, r3
 80035ce:	f005 fef9 	bl	80093c4 <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035d2:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <checkCharges+0x10c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f005 ff90 	bl	80094fc <HAL_ADC_GetValue>
 80035dc:	0003      	movs	r3, r0
 80035de:	0018      	movs	r0, r3
 80035e0:	f7fe f806 	bl	80015f0 <__aeabi_ui2f>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	1c18      	adds	r0, r3, #0
 80035e8:	f7ff ff00 	bl	80033ec <__aeabi_f2d>
 80035ec:	2200      	movs	r2, #0
 80035ee:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <checkCharges+0x110>)
 80035f0:	f7fe fba4 	bl	8001d3c <__aeabi_ddiv>
 80035f4:	0002      	movs	r2, r0
 80035f6:	000b      	movs	r3, r1
 80035f8:	0014      	movs	r4, r2
 80035fa:	001d      	movs	r5, r3
 80035fc:	4b33      	ldr	r3, [pc, #204]	@ (80036cc <checkCharges+0x114>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff fea1 	bl	8003348 <__aeabi_i2d>
 8003606:	0002      	movs	r2, r0
 8003608:	000b      	movs	r3, r1
 800360a:	0020      	movs	r0, r4
 800360c:	0029      	movs	r1, r5
 800360e:	f7fe ffd9 	bl	80025c4 <__aeabi_dmul>
 8003612:	0002      	movs	r2, r0
 8003614:	000b      	movs	r3, r1
 8003616:	0010      	movs	r0, r2
 8003618:	0019      	movs	r1, r3
 800361a:	0002      	movs	r2, r0
 800361c:	000b      	movs	r3, r1
 800361e:	f7fe f829 	bl	8001674 <__aeabi_dadd>
 8003622:	0002      	movs	r2, r0
 8003624:	000b      	movs	r3, r1
 8003626:	0010      	movs	r0, r2
 8003628:	0019      	movs	r1, r3
 800362a:	f7ff ff27 	bl	800347c <__aeabi_d2f>
 800362e:	1c02      	adds	r2, r0, #0
 8003630:	4b27      	ldr	r3, [pc, #156]	@ (80036d0 <checkCharges+0x118>)
 8003632:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 8003634:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <checkCharges+0x10c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f005 fe6f 	bl	800931c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 800363e:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <checkCharges+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	0018      	movs	r0, r3
 8003646:	f005 febd 	bl	80093c4 <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 800364a:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <checkCharges+0x10c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0018      	movs	r0, r3
 8003650:	f005 ff54 	bl	80094fc <HAL_ADC_GetValue>
 8003654:	0003      	movs	r3, r0
 8003656:	0018      	movs	r0, r3
 8003658:	f7fd ffca 	bl	80015f0 <__aeabi_ui2f>
 800365c:	1c03      	adds	r3, r0, #0
 800365e:	1c18      	adds	r0, r3, #0
 8003660:	f7ff fec4 	bl	80033ec <__aeabi_f2d>
 8003664:	2200      	movs	r2, #0
 8003666:	4b18      	ldr	r3, [pc, #96]	@ (80036c8 <checkCharges+0x110>)
 8003668:	f7fe fb68 	bl	8001d3c <__aeabi_ddiv>
 800366c:	0002      	movs	r2, r0
 800366e:	000b      	movs	r3, r1
 8003670:	0014      	movs	r4, r2
 8003672:	001d      	movs	r5, r3
 8003674:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <checkCharges+0x114>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fe65 	bl	8003348 <__aeabi_i2d>
 800367e:	0002      	movs	r2, r0
 8003680:	000b      	movs	r3, r1
 8003682:	0020      	movs	r0, r4
 8003684:	0029      	movs	r1, r5
 8003686:	f7fe ff9d 	bl	80025c4 <__aeabi_dmul>
 800368a:	0002      	movs	r2, r0
 800368c:	000b      	movs	r3, r1
 800368e:	0010      	movs	r0, r2
 8003690:	0019      	movs	r1, r3
 8003692:	0002      	movs	r2, r0
 8003694:	000b      	movs	r3, r1
 8003696:	f7fd ffed 	bl	8001674 <__aeabi_dadd>
 800369a:	0002      	movs	r2, r0
 800369c:	000b      	movs	r3, r1
 800369e:	0010      	movs	r0, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	f7ff feeb 	bl	800347c <__aeabi_d2f>
 80036a6:	1c02      	adds	r2, r0, #0
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <checkCharges+0x11c>)
 80036aa:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <checkCharges+0x118>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <checkCharges+0x11c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c19      	adds	r1, r3, #0
 80036b6:	1c10      	adds	r0, r2, #0
 80036b8:	f000 f80e 	bl	80036d8 <setCharges>
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdb0      	pop	{r4, r5, r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000338 	.word	0x20000338
 80036c8:	40affe00 	.word	0x40affe00
 80036cc:	20000000 	.word	0x20000000
 80036d0:	2000033c 	.word	0x2000033c
 80036d4:	20000340 	.word	0x20000340

080036d8 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 80036e2:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <setCharges+0x20>)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <setCharges+0x24>)
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	20000454 	.word	0x20000454
 80036fc:	20000458 	.word	0x20000458

08003700 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800370e:	4b07      	ldr	r3, [pc, #28]	@ (800372c <setMeasurement+0x2c>)
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <setMeasurement+0x30>)
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <setMeasurement+0x34>)
 800371c:	1dba      	adds	r2, r7, #6
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	801a      	strh	r2, [r3, #0]
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	2000044c 	.word	0x2000044c
 8003730:	20000450 	.word	0x20000450
 8003734:	2000045c 	.word	0x2000045c

08003738 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <ESP_Init+0x1c>)
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003746:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <ESP_Init+0x20>)
 8003748:	2202      	movs	r2, #2
 800374a:	701a      	strb	r2, [r3, #0]
}
 800374c:	46c0      	nop			@ (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000344 	.word	0x20000344
 8003758:	200000f7 	.word	0x200000f7

0800375c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	000a      	movs	r2, r1
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <ESP_Send+0x48>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	250f      	movs	r5, #15
 8003770:	197c      	adds	r4, r7, r5
 8003772:	1cbb      	adds	r3, r7, #2
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0019      	movs	r1, r3
 800377a:	f00a fe5d 	bl	800e438 <HAL_UART_Transmit_DMA>
 800377e:	0003      	movs	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003782:	197b      	adds	r3, r7, r5
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 800378a:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <ESP_Send+0x4c>)
 800378c:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <ESP_Send+0x50>)
 800378e:	0019      	movs	r1, r3
 8003790:	2003      	movs	r0, #3
 8003792:	f005 f829 	bl	80087e8 <CreateLine>
    return false;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <ESP_Send+0x40>
  }
  return true;
 800379a:	2301      	movs	r3, #1
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}
 80037a4:	20000344 	.word	0x20000344
 80037a8:	08014930 	.word	0x08014930
 80037ac:	08014950 	.word	0x08014950

080037b0 <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037b0:	b5b0      	push	{r4, r5, r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	000a      	movs	r2, r1
 80037ba:	1cfb      	adds	r3, r7, #3
 80037bc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037be:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <ESP_Receive+0x58>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <ESP_Receive+0x5c>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	1cfb      	adds	r3, r7, #3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	250f      	movs	r5, #15
 80037d0:	197c      	adds	r4, r7, r5
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0019      	movs	r1, r3
 80037d6:	f00a febf 	bl	800e558 <HAL_UART_Receive_DMA>
 80037da:	0003      	movs	r3, r0
 80037dc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037de:	197b      	adds	r3, r7, r5
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80037e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <ESP_Receive+0x60>)
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <ESP_Receive+0x64>)
 80037ea:	0019      	movs	r1, r3
 80037ec:	2003      	movs	r0, #3
 80037ee:	f004 fffb 	bl	80087e8 <CreateLine>
    RxComplete = true;
 80037f2:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <ESP_Receive+0x58>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
    return false;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <ESP_Receive+0x4e>
  }
  return true;
 80037fc:	2301      	movs	r3, #1
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b004      	add	sp, #16
 8003804:	bdb0      	pop	{r4, r5, r7, pc}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	20000348 	.word	0x20000348
 800380c:	20000344 	.word	0x20000344
 8003810:	08014954 	.word	0x08014954
 8003814:	08014950 	.word	0x08014950

08003818 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_UART_RxCpltCallback+0x2c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d108      	bne.n	800383c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_UART_RxCpltCallback+0x30>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003830:	4a06      	ldr	r2, [pc, #24]	@ (800384c <HAL_UART_RxCpltCallback+0x34>)
 8003832:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <HAL_UART_RxCpltCallback+0x38>)
 8003834:	0019      	movs	r1, r3
 8003836:	2003      	movs	r0, #3
 8003838:	f004 ffd6 	bl	80087e8 <CreateLine>
  }
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000344 	.word	0x20000344
 8003848:	20000348 	.word	0x20000348
 800384c:	08014974 	.word	0x08014974
 8003850:	08014950 	.word	0x08014950

08003854 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_UART_ErrorCallback+0x20>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d102      	bne.n	800386c <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003866:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <HAL_UART_ErrorCallback+0x24>)
 8003868:	2207      	movs	r2, #7
 800386a:	701a      	strb	r2, [r3, #0]
  }
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000344 	.word	0x20000344
 8003878:	200000f7 	.word	0x200000f7

0800387c <CreateMessage>:
uint16_t CreateMessage(){
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b085      	sub	sp, #20
 8003880:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 8003882:	1dbb      	adds	r3, r7, #6
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID1, Temperature);
 8003888:	4b3d      	ldr	r3, [pc, #244]	@ (8003980 <CreateMessage+0x104>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1c18      	adds	r0, r3, #0
 800388e:	f7ff fdad 	bl	80033ec <__aeabi_f2d>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	4c3b      	ldr	r4, [pc, #236]	@ (8003984 <CreateMessage+0x108>)
 8003898:	493b      	ldr	r1, [pc, #236]	@ (8003988 <CreateMessage+0x10c>)
 800389a:	483c      	ldr	r0, [pc, #240]	@ (800398c <CreateMessage+0x110>)
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	0022      	movs	r2, r4
 80038a2:	f00e f9b7 	bl	8011c14 <siprintf>
  messageLength += strlen(messagePart1);
 80038a6:	4b39      	ldr	r3, [pc, #228]	@ (800398c <CreateMessage+0x110>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fc fc55 	bl	8000158 <strlen>
 80038ae:	0003      	movs	r3, r0
 80038b0:	b299      	uxth	r1, r3
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	188a      	adds	r2, r1, r2
 80038ba:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID2, Humidity);
 80038bc:	4b34      	ldr	r3, [pc, #208]	@ (8003990 <CreateMessage+0x114>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1c18      	adds	r0, r3, #0
 80038c2:	f7ff fd93 	bl	80033ec <__aeabi_f2d>
 80038c6:	0002      	movs	r2, r0
 80038c8:	000b      	movs	r3, r1
 80038ca:	4c32      	ldr	r4, [pc, #200]	@ (8003994 <CreateMessage+0x118>)
 80038cc:	4932      	ldr	r1, [pc, #200]	@ (8003998 <CreateMessage+0x11c>)
 80038ce:	4833      	ldr	r0, [pc, #204]	@ (800399c <CreateMessage+0x120>)
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	0022      	movs	r2, r4
 80038d6:	f00e f99d 	bl	8011c14 <siprintf>
  messageLength += strlen(messagePart2);
 80038da:	4b30      	ldr	r3, [pc, #192]	@ (800399c <CreateMessage+0x120>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fc fc3b 	bl	8000158 <strlen>
 80038e2:	0003      	movs	r3, r0
 80038e4:	b299      	uxth	r1, r3
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	1dba      	adds	r2, r7, #6
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	188a      	adds	r2, r1, r2
 80038ee:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":77", sensorID3);
 80038f0:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <CreateMessage+0x124>)
 80038f2:	492c      	ldr	r1, [pc, #176]	@ (80039a4 <CreateMessage+0x128>)
 80038f4:	4b2c      	ldr	r3, [pc, #176]	@ (80039a8 <CreateMessage+0x12c>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f00e f98c 	bl	8011c14 <siprintf>
  messageLength += strlen(messagePart3);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <CreateMessage+0x12c>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f7fc fc2a 	bl	8000158 <strlen>
 8003904:	0003      	movs	r3, r0
 8003906:	b299      	uxth	r1, r3
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	1dba      	adds	r2, r7, #6
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	188a      	adds	r2, r1, r2
 8003910:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d", sensorID4, VOCIndex);
 8003912:	4b26      	ldr	r3, [pc, #152]	@ (80039ac <CreateMessage+0x130>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4a26      	ldr	r2, [pc, #152]	@ (80039b0 <CreateMessage+0x134>)
 8003918:	4926      	ldr	r1, [pc, #152]	@ (80039b4 <CreateMessage+0x138>)
 800391a:	4827      	ldr	r0, [pc, #156]	@ (80039b8 <CreateMessage+0x13c>)
 800391c:	f00e f97a 	bl	8011c14 <siprintf>
  messageLength += strlen(messagePart4);
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <CreateMessage+0x13c>)
 8003922:	0018      	movs	r0, r3
 8003924:	f7fc fc18 	bl	8000158 <strlen>
 8003928:	0003      	movs	r3, r0
 800392a:	b299      	uxth	r1, r3
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	1dba      	adds	r2, r7, #6
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	188a      	adds	r2, r1, r2
 8003934:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID5, batteryCharge);
 8003936:	4b21      	ldr	r3, [pc, #132]	@ (80039bc <CreateMessage+0x140>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1c18      	adds	r0, r3, #0
 800393c:	f7ff fd56 	bl	80033ec <__aeabi_f2d>
 8003940:	0002      	movs	r2, r0
 8003942:	000b      	movs	r3, r1
 8003944:	4c1e      	ldr	r4, [pc, #120]	@ (80039c0 <CreateMessage+0x144>)
 8003946:	491f      	ldr	r1, [pc, #124]	@ (80039c4 <CreateMessage+0x148>)
 8003948:	481f      	ldr	r0, [pc, #124]	@ (80039c8 <CreateMessage+0x14c>)
 800394a:	9200      	str	r2, [sp, #0]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	0022      	movs	r2, r4
 8003950:	f00e f960 	bl	8011c14 <siprintf>
  messageLength += strlen(messagePart5);
 8003954:	4b1c      	ldr	r3, [pc, #112]	@ (80039c8 <CreateMessage+0x14c>)
 8003956:	0018      	movs	r0, r3
 8003958:	f7fc fbfe 	bl	8000158 <strlen>
 800395c:	0003      	movs	r3, r0
 800395e:	b299      	uxth	r1, r3
 8003960:	1dbb      	adds	r3, r7, #6
 8003962:	1dba      	adds	r2, r7, #6
 8003964:	8812      	ldrh	r2, [r2, #0]
 8003966:	188a      	adds	r2, r1, r2
 8003968:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 800396a:	1dbb      	adds	r3, r7, #6
 800396c:	1dba      	adds	r2, r7, #6
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	3214      	adds	r2, #20
 8003972:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003974:	1dbb      	adds	r3, r7, #6
 8003976:	881b      	ldrh	r3, [r3, #0]
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b003      	add	sp, #12
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	2000044c 	.word	0x2000044c
 8003984:	2000006c 	.word	0x2000006c
 8003988:	08014980 	.word	0x08014980
 800398c:	20000460 	.word	0x20000460
 8003990:	20000450 	.word	0x20000450
 8003994:	20000088 	.word	0x20000088
 8003998:	080149c4 	.word	0x080149c4
 800399c:	200004e0 	.word	0x200004e0
 80039a0:	200000a4 	.word	0x200000a4
 80039a4:	08014a08 	.word	0x08014a08
 80039a8:	20000560 	.word	0x20000560
 80039ac:	2000045c 	.word	0x2000045c
 80039b0:	200000c0 	.word	0x200000c0
 80039b4:	08014a4c 	.word	0x08014a4c
 80039b8:	200005e0 	.word	0x200005e0
 80039bc:	20000454 	.word	0x20000454
 80039c0:	200000dc 	.word	0x200000dc
 80039c4:	08014a90 	.word	0x08014a90
 80039c8:	20000660 	.word	0x20000660

080039cc <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <SetCommandBuffer+0x24>)
 80039dc:	0018      	movs	r0, r3
 80039de:	f00e f9c5 	bl	8011d6c <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 80039e2:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <SetCommandBuffer+0x28>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	200006ec 	.word	0x200006ec
 80039f4:	200008ec 	.word	0x200008ec

080039f8 <StartProg>:
void StartProg(){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 80039fc:	23fa      	movs	r3, #250	@ 0xfa
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f005 faf3 	bl	8008fec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a06:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <StartProg+0x64>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f006 fc79 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a12:	2064      	movs	r0, #100	@ 0x64
 8003a14:	f005 faea 	bl	8008fec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a18:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <StartProg+0x64>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f006 fc70 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a24:	23fa      	movs	r3, #250	@ 0xfa
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f005 fadf 	bl	8008fec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <StartProg+0x64>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	2101      	movs	r1, #1
 8003a34:	0018      	movs	r0, r3
 8003a36:	f006 fc65 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a3a:	23fa      	movs	r3, #250	@ 0xfa
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f005 fad4 	bl	8008fec <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <StartProg+0x64>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	2102      	movs	r1, #2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f006 fc5a 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a50:	2028      	movs	r0, #40	@ 0x28
 8003a52:	f005 facb 	bl	8008fec <HAL_Delay>
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	50001c00 	.word	0x50001c00

08003a60 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	46c6      	mov	lr, r8
 8003a64:	b500      	push	{lr}
 8003a66:	b094      	sub	sp, #80	@ 0x50
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	61f8      	str	r0, [r7, #28]
 8003a6c:	0008      	movs	r0, r1
 8003a6e:	0011      	movs	r1, r2
 8003a70:	261a      	movs	r6, #26
 8003a72:	19bb      	adds	r3, r7, r6
 8003a74:	1c02      	adds	r2, r0, #0
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	2319      	movs	r3, #25
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	1c0a      	adds	r2, r1, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	466b      	mov	r3, sp
 8003a82:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003a84:	19bb      	adds	r3, r7, r6
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a8e:	001a      	movs	r2, r3
 8003a90:	60ba      	str	r2, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	60fa      	str	r2, [r7, #12]
 8003a96:	68b8      	ldr	r0, [r7, #8]
 8003a98:	68f9      	ldr	r1, [r7, #12]
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	0f52      	lsrs	r2, r2, #29
 8003a9e:	000e      	movs	r6, r1
 8003aa0:	00f6      	lsls	r6, r6, #3
 8003aa2:	617e      	str	r6, [r7, #20]
 8003aa4:	697e      	ldr	r6, [r7, #20]
 8003aa6:	4316      	orrs	r6, r2
 8003aa8:	617e      	str	r6, [r7, #20]
 8003aaa:	0002      	movs	r2, r0
 8003aac:	00d2      	lsls	r2, r2, #3
 8003aae:	613a      	str	r2, [r7, #16]
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	603a      	str	r2, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	0002      	movs	r2, r0
 8003abe:	0f52      	lsrs	r2, r2, #29
 8003ac0:	000e      	movs	r6, r1
 8003ac2:	00f5      	lsls	r5, r6, #3
 8003ac4:	4315      	orrs	r5, r2
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	00d4      	lsls	r4, r2, #3
 8003aca:	3307      	adds	r3, #7
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	466a      	mov	r2, sp
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	469d      	mov	sp, r3
 8003ad6:	466b      	mov	r3, sp
 8003ad8:	3300      	adds	r3, #0
 8003ada:	643b      	str	r3, [r7, #64]	@ 0x40
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003adc:	2337      	movs	r3, #55	@ 0x37
 8003ade:	2118      	movs	r1, #24
 8003ae0:	185b      	adds	r3, r3, r1
 8003ae2:	19db      	adds	r3, r3, r7
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003ae8:	2334      	movs	r3, #52	@ 0x34
 8003aea:	185b      	adds	r3, r3, r1
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	2200      	movs	r2, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	e013      	b.n	8003b1c <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003af4:	2034      	movs	r0, #52	@ 0x34
 8003af6:	2418      	movs	r4, #24
 8003af8:	1903      	adds	r3, r0, r4
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	18d2      	adds	r2, r2, r3
 8003b02:	1903      	adds	r3, r0, r4
 8003b04:	19db      	adds	r3, r3, r7
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	7811      	ldrb	r1, [r2, #0]
 8003b0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b0c:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b0e:	1903      	adds	r3, r0, r4
 8003b10:	19db      	adds	r3, r3, r7
 8003b12:	881a      	ldrh	r2, [r3, #0]
 8003b14:	1903      	adds	r3, r0, r4
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	3201      	adds	r2, #1
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	2334      	movs	r3, #52	@ 0x34
 8003b1e:	2018      	movs	r0, #24
 8003b20:	181b      	adds	r3, r3, r0
 8003b22:	19da      	adds	r2, r3, r7
 8003b24:	211a      	movs	r1, #26
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	8812      	ldrh	r2, [r2, #0]
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d3e1      	bcc.n	8003af4 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b36:	2100      	movs	r1, #0
 8003b38:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b3a:	2327      	movs	r3, #39	@ 0x27
 8003b3c:	0004      	movs	r4, r0
 8003b3e:	191b      	adds	r3, r3, r4
 8003b40:	19db      	adds	r3, r3, r7
 8003b42:	224e      	movs	r2, #78	@ 0x4e
 8003b44:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  const char OK[] = AT_RESPONSE_OK;
 8003b46:	201c      	movs	r0, #28
 8003b48:	1903      	adds	r3, r0, r4
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c8c <ParseBuffer+0x22c>)
 8003b4e:	8811      	ldrh	r1, [r2, #0]
 8003b50:	8019      	strh	r1, [r3, #0]
 8003b52:	7892      	ldrb	r2, [r2, #2]
 8003b54:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b56:	2314      	movs	r3, #20
 8003b58:	191b      	adds	r3, r3, r4
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003c90 <ParseBuffer+0x230>)
 8003b5e:	6811      	ldr	r1, [r2, #0]
 8003b60:	6019      	str	r1, [r3, #0]
 8003b62:	8892      	ldrh	r2, [r2, #4]
 8003b64:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b66:	230c      	movs	r3, #12
 8003b68:	191b      	adds	r3, r3, r4
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	4a49      	ldr	r2, [pc, #292]	@ (8003c94 <ParseBuffer+0x234>)
 8003b6e:	6811      	ldr	r1, [r2, #0]
 8003b70:	6019      	str	r1, [r3, #0]
 8003b72:	8892      	ldrh	r2, [r2, #4]
 8003b74:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b76:	2308      	movs	r3, #8
 8003b78:	0021      	movs	r1, r4
 8003b7a:	185b      	adds	r3, r3, r1
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	223e      	movs	r2, #62	@ 0x3e
 8003b80:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003b82:	2319      	movs	r3, #25
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <ParseBuffer+0x13e>
    ParsePoint = strstr(tempBuf, OK);
 8003b8c:	1843      	adds	r3, r0, r1
 8003b8e:	19da      	adds	r2, r3, r7
 8003b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b92:	0011      	movs	r1, r2
 8003b94:	0018      	movs	r0, r3
 8003b96:	f00e f8fd 	bl	8011d94 <strstr>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003b9e:	2319      	movs	r3, #25
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10a      	bne.n	8003bbe <ParseBuffer+0x15e>
    ParsePoint = strstr(tempBuf, ready);
 8003ba8:	230c      	movs	r3, #12
 8003baa:	2218      	movs	r2, #24
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	19da      	adds	r2, r3, r7
 8003bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f00e f8ed 	bl	8011d94 <strstr>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003bbe:	2319      	movs	r3, #25
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d10a      	bne.n	8003bde <ParseBuffer+0x17e>
    ParsePoint = strstr(tempBuf, start);
 8003bc8:	2308      	movs	r3, #8
 8003bca:	2218      	movs	r2, #24
 8003bcc:	189b      	adds	r3, r3, r2
 8003bce:	19da      	adds	r2, r3, r7
 8003bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f00e f8dd 	bl	8011d94 <strstr>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003bde:	2314      	movs	r3, #20
 8003be0:	2418      	movs	r4, #24
 8003be2:	191b      	adds	r3, r3, r4
 8003be4:	19da      	adds	r2, r3, r7
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	0011      	movs	r1, r2
 8003bea:	0018      	movs	r0, r3
 8003bec:	f00e f8d2 	bl	8011d94 <strstr>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(len > 1 ){
 8003bf4:	231a      	movs	r3, #26
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d939      	bls.n	8003c72 <ParseBuffer+0x212>
    TestChar = *ParsePoint;
 8003bfe:	2127      	movs	r1, #39	@ 0x27
 8003c00:	190b      	adds	r3, r1, r4
 8003c02:	19db      	adds	r3, r3, r7
 8003c04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c06:	7812      	ldrb	r2, [r2, #0]
 8003c08:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c0a:	190b      	adds	r3, r1, r4
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c12:	d104      	bne.n	8003c1e <ParseBuffer+0x1be>
      status = RECEIVE_STATUS_OK;
 8003c14:	2337      	movs	r3, #55	@ 0x37
 8003c16:	191b      	adds	r3, r3, r4
 8003c18:	19db      	adds	r3, r3, r7
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c1e:	2327      	movs	r3, #39	@ 0x27
 8003c20:	2218      	movs	r2, #24
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	19db      	adds	r3, r3, r7
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b72      	cmp	r3, #114	@ 0x72
 8003c2a:	d104      	bne.n	8003c36 <ParseBuffer+0x1d6>
      status = RECEIVE_STATUS_READY;
 8003c2c:	2337      	movs	r3, #55	@ 0x37
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	2202      	movs	r2, #2
 8003c34:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c36:	2327      	movs	r3, #39	@ 0x27
 8003c38:	2218      	movs	r2, #24
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	19db      	adds	r3, r3, r7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c42:	d104      	bne.n	8003c4e <ParseBuffer+0x1ee>
      status = RECEIVE_STATUS_START;
 8003c44:	2337      	movs	r3, #55	@ 0x37
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	19db      	adds	r3, r3, r7
 8003c4a:	2205      	movs	r2, #5
 8003c4c:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c4e:	2127      	movs	r1, #39	@ 0x27
 8003c50:	2018      	movs	r0, #24
 8003c52:	180b      	adds	r3, r1, r0
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	188b      	adds	r3, r1, r2
 8003c60:	19db      	adds	r3, r3, r7
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b45      	cmp	r3, #69	@ 0x45
 8003c66:	d104      	bne.n	8003c72 <ParseBuffer+0x212>
      status = RECEIVE_STATUS_ERROR;
 8003c68:	2337      	movs	r3, #55	@ 0x37
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	19db      	adds	r3, r3, r7
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003c72:	2337      	movs	r3, #55	@ 0x37
 8003c74:	2218      	movs	r2, #24
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	19db      	adds	r3, r3, r7
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	46c5      	mov	sp, r8
//          if (TempIndex >= ESP_MAX_BUFFER_SIZE) {
//              TempIndex = 0;
//          }
//       }
//    }
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b014      	add	sp, #80	@ 0x50
 8003c84:	bc80      	pop	{r7}
 8003c86:	46b8      	mov	r8, r7
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	08014ad8 	.word	0x08014ad8
 8003c90:	08014adc 	.word	0x08014adc
 8003c94:	08014ae4 	.word	0x08014ae4

08003c98 <PollAwake>:
/* line 228 to 383 contain the AT commands. This could be optimized by loading the commands into
 * an array and having the function handling the sending. This was the simple but verbose
 * implementation.
 */
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <PollAwake+0x3c>)
 8003ca0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7ff fe91 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7fc fa53 	bl	8000158 <strlen>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	0011      	movs	r1, r2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff fd4e 	bl	800375c <ESP_Send>
 8003cc0:	1e03      	subs	r3, r0, #0
 8003cc2:	d001      	beq.n	8003cc8 <PollAwake+0x30>
    return true;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <PollAwake+0x32>
  }
  else{
    return false;
 8003cc8:	2300      	movs	r3, #0
  }
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	08014aec 	.word	0x08014aec

08003cd8 <RFPower>:
bool RFPower(){
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <RFPower+0x3c>)
 8003ce0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7ff fe71 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7fc fa33 	bl	8000158 <strlen>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0011      	movs	r1, r2
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7ff fd2e 	bl	800375c <ESP_Send>
 8003d00:	1e03      	subs	r3, r0, #0
 8003d02:	d001      	beq.n	8003d08 <RFPower+0x30>
    return true;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <RFPower+0x32>
  }
  else{
    return false;
 8003d08:	2300      	movs	r3, #0
  }
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	08014af4 	.word	0x08014af4

08003d18 <CheckRFPower>:
bool CheckRFPower(){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <CheckRFPower+0x3c>)
 8003d20:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff fe51 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc fa13 	bl	8000158 <strlen>
 8003d32:	0003      	movs	r3, r0
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fd0e 	bl	800375c <ESP_Send>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <CheckRFPower+0x30>
    return true;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <CheckRFPower+0x32>
  }
  else{
    return false;
 8003d48:	2300      	movs	r3, #0
  }
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	08014b04 	.word	0x08014b04

08003d58 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <ATRestore+0x3c>)
 8003d60:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff fe31 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7fc f9f3 	bl	8000158 <strlen>
 8003d72:	0003      	movs	r3, r0
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fcee 	bl	800375c <ESP_Send>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d001      	beq.n	8003d88 <ATRestore+0x30>
    return true;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <ATRestore+0x32>
  }
  else{
    return false;
 8003d88:	2300      	movs	r3, #0
  }
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	08014b14 	.word	0x08014b14

08003d98 <CWINIT>:
bool CWINIT(){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <CWINIT+0x3c>)
 8003da0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff fe11 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7fc f9d3 	bl	8000158 <strlen>
 8003db2:	0003      	movs	r3, r0
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff fcce 	bl	800375c <ESP_Send>
 8003dc0:	1e03      	subs	r3, r0, #0
 8003dc2:	d001      	beq.n	8003dc8 <CWINIT+0x30>
    return true;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <CWINIT+0x32>
  }
  else{
    return false;
 8003dc8:	2300      	movs	r3, #0
  }
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	08014b24 	.word	0x08014b24

08003dd8 <CWMODE1>:
bool CWMODE1(){
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003dde:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <CWMODE1+0x3c>)
 8003de0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff fdf1 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7fc f9b3 	bl	8000158 <strlen>
 8003df2:	0003      	movs	r3, r0
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0011      	movs	r1, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff fcae 	bl	800375c <ESP_Send>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d001      	beq.n	8003e08 <CWMODE1+0x30>
    return true;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <CWMODE1+0x32>
  }
  else{
    return false;
 8003e08:	2300      	movs	r3, #0
  }
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	08014b34 	.word	0x08014b34

08003e18 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <CWAUTOCONN+0x3c>)
 8003e20:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7ff fdd1 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc f993 	bl	8000158 <strlen>
 8003e32:	0003      	movs	r3, r0
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7ff fc8e 	bl	800375c <ESP_Send>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <CWAUTOCONN+0x30>
    return true;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003e48:	2300      	movs	r3, #0
  }
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	08014b44 	.word	0x08014b44

08003e58 <CWJAP>:
bool CWJAP(){
 8003e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5a:	46c6      	mov	lr, r8
 8003e5c:	b500      	push	{lr}
 8003e5e:	b0a2      	sub	sp, #136	@ 0x88
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	466b      	mov	r3, sp
 8003e64:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003e66:	2618      	movs	r6, #24
 8003e68:	19bb      	adds	r3, r7, r6
 8003e6a:	2264      	movs	r2, #100	@ 0x64
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f00d ff74 	bl	8011d5c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003e74:	4b35      	ldr	r3, [pc, #212]	@ (8003f4c <CWJAP+0xf4>)
 8003e76:	4a36      	ldr	r2, [pc, #216]	@ (8003f50 <CWJAP+0xf8>)
 8003e78:	4936      	ldr	r1, [pc, #216]	@ (8003f54 <CWJAP+0xfc>)
 8003e7a:	19b8      	adds	r0, r7, r6
 8003e7c:	f00d feca 	bl	8011c14 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003e80:	19bb      	adds	r3, r7, r6
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fc f968 	bl	8000158 <strlen>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	216f      	movs	r1, #111	@ 0x6f
 8003e8c:	0030      	movs	r0, r6
 8003e8e:	180b      	adds	r3, r1, r0
 8003e90:	19db      	adds	r3, r3, r7
 8003e92:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003e94:	180b      	adds	r3, r1, r0
 8003e96:	19db      	adds	r3, r3, r7
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	2180      	movs	r1, #128	@ 0x80
 8003ea0:	1879      	adds	r1, r7, r1
 8003ea2:	600a      	str	r2, [r1, #0]
 8003ea4:	001a      	movs	r2, r3
 8003ea6:	60ba      	str	r2, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	68b8      	ldr	r0, [r7, #8]
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	0f52      	lsrs	r2, r2, #29
 8003eb4:	000e      	movs	r6, r1
 8003eb6:	00f6      	lsls	r6, r6, #3
 8003eb8:	617e      	str	r6, [r7, #20]
 8003eba:	697e      	ldr	r6, [r7, #20]
 8003ebc:	4316      	orrs	r6, r2
 8003ebe:	617e      	str	r6, [r7, #20]
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	00d2      	lsls	r2, r2, #3
 8003ec4:	613a      	str	r2, [r7, #16]
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	603a      	str	r2, [r7, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	0f52      	lsrs	r2, r2, #29
 8003ed6:	000e      	movs	r6, r1
 8003ed8:	00f5      	lsls	r5, r6, #3
 8003eda:	4315      	orrs	r5, r2
 8003edc:	0002      	movs	r2, r0
 8003ede:	00d4      	lsls	r4, r2, #3
 8003ee0:	3307      	adds	r3, #7
 8003ee2:	08db      	lsrs	r3, r3, #3
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	466a      	mov	r2, sp
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	469d      	mov	sp, r3
 8003eec:	466b      	mov	r3, sp
 8003eee:	3300      	adds	r3, #0
 8003ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003ef2:	246f      	movs	r4, #111	@ 0x6f
 8003ef4:	2518      	movs	r5, #24
 8003ef6:	1963      	adds	r3, r4, r5
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	001a      	movs	r2, r3
 8003f00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f02:	2100      	movs	r1, #0
 8003f04:	0018      	movs	r0, r3
 8003f06:	f00d ff29 	bl	8011d5c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003f0a:	1963      	adds	r3, r4, r5
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	1979      	adds	r1, r7, r5
 8003f12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f14:	0018      	movs	r0, r3
 8003f16:	f00d ff29 	bl	8011d6c <strncpy>
  SetCommandBuffer(atCommand);
 8003f1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fd55 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003f22:	1963      	adds	r3, r4, r5
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f2c:	0011      	movs	r1, r2
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7ff fc14 	bl	800375c <ESP_Send>
 8003f34:	1e03      	subs	r3, r0, #0
 8003f36:	d001      	beq.n	8003f3c <CWJAP+0xe4>
    return true;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <CWJAP+0xe6>
  }
  else{
    return false;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	46c5      	mov	sp, r8
  }
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b022      	add	sp, #136	@ 0x88
 8003f46:	bc80      	pop	{r7}
 8003f48:	46b8      	mov	r8, r7
 8003f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4c:	20000010 	.word	0x20000010
 8003f50:	20000004 	.word	0x20000004
 8003f54:	08014b58 	.word	0x08014b58

08003f58 <CWMODE3>:
bool CWMODE3(){
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <CWMODE3+0x3c>)
 8003f60:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff fd31 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fc f8f3 	bl	8000158 <strlen>
 8003f72:	0003      	movs	r3, r0
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0011      	movs	r1, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7ff fbee 	bl	800375c <ESP_Send>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d001      	beq.n	8003f88 <CWMODE3+0x30>
    return true;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <CWMODE3+0x32>
  }
  else{
    return false;
 8003f88:	2300      	movs	r3, #0
  }
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	08014b70 	.word	0x08014b70

08003f98 <CWSAP>:
bool CWSAP(){
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <CWSAP+0x3c>)
 8003fa0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff fd11 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f7fc f8d3 	bl	8000158 <strlen>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0011      	movs	r1, r2
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f7ff fbce 	bl	800375c <ESP_Send>
 8003fc0:	1e03      	subs	r3, r0, #0
 8003fc2:	d001      	beq.n	8003fc8 <CWSAP+0x30>
    return true;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <CWSAP+0x32>
  }
  else{
    return false;
 8003fc8:	2300      	movs	r3, #0
  }
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b002      	add	sp, #8
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	08014b80 	.word	0x08014b80

08003fd8 <CIPMUX>:
bool CIPMUX(){
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <CIPMUX+0x3c>)
 8003fe0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff fcf1 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7fc f8b3 	bl	8000158 <strlen>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0011      	movs	r1, r2
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f7ff fbae 	bl	800375c <ESP_Send>
 8004000:	1e03      	subs	r3, r0, #0
 8004002:	d001      	beq.n	8004008 <CIPMUX+0x30>
    return true;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <CIPMUX+0x32>
  }
  else{
    return false;
 8004008:	2300      	movs	r3, #0
  }
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b002      	add	sp, #8
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	08014ba4 	.word	0x08014ba4

08004018 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <WEBSERVER+0x3c>)
 8004020:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f7ff fcd1 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f7fc f893 	bl	8000158 <strlen>
 8004032:	0003      	movs	r3, r0
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f7ff fb8e 	bl	800375c <ESP_Send>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <WEBSERVER+0x30>
    return true;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004048:	2300      	movs	r3, #0
  }
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	08014bb4 	.word	0x08014bb4

08004058 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405a:	46c6      	mov	lr, r8
 800405c:	b500      	push	{lr}
 800405e:	4c47      	ldr	r4, [pc, #284]	@ (800417c <HTTPCPOST+0x124>)
 8004060:	44a5      	add	sp, r4
 8004062:	af00      	add	r7, sp, #0
 8004064:	466b      	mov	r3, sp
 8004066:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004068:	4b45      	ldr	r3, [pc, #276]	@ (8004180 <HTTPCPOST+0x128>)
 800406a:	2218      	movs	r2, #24
 800406c:	189b      	adds	r3, r3, r2
 800406e:	19dc      	adds	r4, r3, r7
 8004070:	f7ff fc04 	bl	800387c <CreateMessage>
 8004074:	0003      	movs	r3, r0
 8004076:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", API, length);
 8004078:	4b41      	ldr	r3, [pc, #260]	@ (8004180 <HTTPCPOST+0x128>)
 800407a:	2218      	movs	r2, #24
 800407c:	189b      	adds	r3, r3, r2
 800407e:	19db      	adds	r3, r3, r7
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	4a40      	ldr	r2, [pc, #256]	@ (8004184 <HTTPCPOST+0x12c>)
 8004084:	4940      	ldr	r1, [pc, #256]	@ (8004188 <HTTPCPOST+0x130>)
 8004086:	201c      	movs	r0, #28
 8004088:	1838      	adds	r0, r7, r0
 800408a:	f00d fdc3 	bl	8011c14 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800408e:	231c      	movs	r3, #28
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	0018      	movs	r0, r3
 8004094:	f7fc f860 	bl	8000158 <strlen>
 8004098:	0002      	movs	r2, r0
 800409a:	4c3c      	ldr	r4, [pc, #240]	@ (800418c <HTTPCPOST+0x134>)
 800409c:	2318      	movs	r3, #24
 800409e:	18e3      	adds	r3, r4, r3
 80040a0:	19db      	adds	r3, r3, r7
 80040a2:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80040a4:	2318      	movs	r3, #24
 80040a6:	18e3      	adds	r3, r4, r3
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	1e5a      	subs	r2, r3, #1
 80040b0:	2198      	movs	r1, #152	@ 0x98
 80040b2:	0089      	lsls	r1, r1, #2
 80040b4:	2018      	movs	r0, #24
 80040b6:	1809      	adds	r1, r1, r0
 80040b8:	19c9      	adds	r1, r1, r7
 80040ba:	600a      	str	r2, [r1, #0]
 80040bc:	001a      	movs	r2, r3
 80040be:	0015      	movs	r5, r2
 80040c0:	2200      	movs	r2, #0
 80040c2:	0016      	movs	r6, r2
 80040c4:	0028      	movs	r0, r5
 80040c6:	0031      	movs	r1, r6
 80040c8:	0002      	movs	r2, r0
 80040ca:	0f52      	lsrs	r2, r2, #29
 80040cc:	000d      	movs	r5, r1
 80040ce:	00ed      	lsls	r5, r5, #3
 80040d0:	617d      	str	r5, [r7, #20]
 80040d2:	697d      	ldr	r5, [r7, #20]
 80040d4:	4315      	orrs	r5, r2
 80040d6:	617d      	str	r5, [r7, #20]
 80040d8:	0002      	movs	r2, r0
 80040da:	00d2      	lsls	r2, r2, #3
 80040dc:	613a      	str	r2, [r7, #16]
 80040de:	001a      	movs	r2, r3
 80040e0:	603a      	str	r2, [r7, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	0002      	movs	r2, r0
 80040ec:	0f52      	lsrs	r2, r2, #29
 80040ee:	000d      	movs	r5, r1
 80040f0:	00ed      	lsls	r5, r5, #3
 80040f2:	60fd      	str	r5, [r7, #12]
 80040f4:	68fd      	ldr	r5, [r7, #12]
 80040f6:	4315      	orrs	r5, r2
 80040f8:	60fd      	str	r5, [r7, #12]
 80040fa:	0002      	movs	r2, r0
 80040fc:	00d2      	lsls	r2, r2, #3
 80040fe:	60ba      	str	r2, [r7, #8]
 8004100:	3307      	adds	r3, #7
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	466a      	mov	r2, sp
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	469d      	mov	sp, r3
 800410c:	466b      	mov	r3, sp
 800410e:	3300      	adds	r3, #0
 8004110:	2597      	movs	r5, #151	@ 0x97
 8004112:	00ad      	lsls	r5, r5, #2
 8004114:	2218      	movs	r2, #24
 8004116:	18aa      	adds	r2, r5, r2
 8004118:	19d2      	adds	r2, r2, r7
 800411a:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 800411c:	2318      	movs	r3, #24
 800411e:	18e3      	adds	r3, r4, r3
 8004120:	19db      	adds	r3, r3, r7
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	231c      	movs	r3, #28
 8004126:	18f9      	adds	r1, r7, r3
 8004128:	2318      	movs	r3, #24
 800412a:	18eb      	adds	r3, r5, r3
 800412c:	19db      	adds	r3, r3, r7
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0018      	movs	r0, r3
 8004132:	f00d fe1b 	bl	8011d6c <strncpy>
  SetCommandBuffer(atCommand);
 8004136:	2318      	movs	r3, #24
 8004138:	18eb      	adds	r3, r5, r3
 800413a:	19db      	adds	r3, r3, r7
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	0018      	movs	r0, r3
 8004140:	f7ff fc44 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004144:	2318      	movs	r3, #24
 8004146:	18e3      	adds	r3, r4, r3
 8004148:	19db      	adds	r3, r3, r7
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b29a      	uxth	r2, r3
 800414e:	2318      	movs	r3, #24
 8004150:	18eb      	adds	r3, r5, r3
 8004152:	19db      	adds	r3, r3, r7
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0011      	movs	r1, r2
 8004158:	0018      	movs	r0, r3
 800415a:	f7ff faff 	bl	800375c <ESP_Send>
 800415e:	1e03      	subs	r3, r0, #0
 8004160:	d001      	beq.n	8004166 <HTTPCPOST+0x10e>
    return true;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HTTPCPOST+0x110>
  }
  else{
    return false;
 8004166:	2300      	movs	r3, #0
 8004168:	46c5      	mov	sp, r8
  }
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	23a0      	movs	r3, #160	@ 0xa0
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	449d      	add	sp, r3
 8004174:	bc80      	pop	{r7}
 8004176:	46b8      	mov	r8, r7
 8004178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	fffffd80 	.word	0xfffffd80
 8004180:	00000266 	.word	0x00000266
 8004184:	20000028 	.word	0x20000028
 8004188:	08014bcc 	.word	0x08014bcc
 800418c:	00000265 	.word	0x00000265

08004190 <SENDDATA>:
bool SENDDATA(){
 8004190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004192:	46c6      	mov	lr, r8
 8004194:	b500      	push	{lr}
 8004196:	4c4c      	ldr	r4, [pc, #304]	@ (80042c8 <SENDDATA+0x138>)
 8004198:	44a5      	add	sp, r4
 800419a:	af04      	add	r7, sp, #16
 800419c:	466b      	mov	r3, sp
 800419e:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80041a0:	23a4      	movs	r3, #164	@ 0xa4
 80041a2:	009a      	lsls	r2, r3, #2
 80041a4:	261c      	movs	r6, #28
 80041a6:	19bb      	adds	r3, r7, r6
 80041a8:	2100      	movs	r1, #0
 80041aa:	0018      	movs	r0, r3
 80041ac:	f00d fdd6 	bl	8011d5c <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80041b0:	4a46      	ldr	r2, [pc, #280]	@ (80042cc <SENDDATA+0x13c>)
 80041b2:	4947      	ldr	r1, [pc, #284]	@ (80042d0 <SENDDATA+0x140>)
 80041b4:	4847      	ldr	r0, [pc, #284]	@ (80042d4 <SENDDATA+0x144>)
 80041b6:	19be      	adds	r6, r7, r6
 80041b8:	4b47      	ldr	r3, [pc, #284]	@ (80042d8 <SENDDATA+0x148>)
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <SENDDATA+0x14c>)
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	4b47      	ldr	r3, [pc, #284]	@ (80042e0 <SENDDATA+0x150>)
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	0013      	movs	r3, r2
 80041c6:	000a      	movs	r2, r1
 80041c8:	0001      	movs	r1, r0
 80041ca:	0030      	movs	r0, r6
 80041cc:	f00d fd22 	bl	8011c14 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 80041d0:	231c      	movs	r3, #28
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7fb ffbf 	bl	8000158 <strlen>
 80041da:	0002      	movs	r2, r0
 80041dc:	4e41      	ldr	r6, [pc, #260]	@ (80042e4 <SENDDATA+0x154>)
 80041de:	2018      	movs	r0, #24
 80041e0:	1831      	adds	r1, r6, r0
 80041e2:	19cb      	adds	r3, r1, r7
 80041e4:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 80041e6:	1832      	adds	r2, r6, r0
 80041e8:	19d3      	adds	r3, r2, r7
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	1e5a      	subs	r2, r3, #1
 80041f0:	21a6      	movs	r1, #166	@ 0xa6
 80041f2:	0089      	lsls	r1, r1, #2
 80041f4:	1809      	adds	r1, r1, r0
 80041f6:	19c9      	adds	r1, r1, r7
 80041f8:	600a      	str	r2, [r1, #0]
 80041fa:	001a      	movs	r2, r3
 80041fc:	60ba      	str	r2, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	60fa      	str	r2, [r7, #12]
 8004202:	68b8      	ldr	r0, [r7, #8]
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	0002      	movs	r2, r0
 8004208:	0f52      	lsrs	r2, r2, #29
 800420a:	000e      	movs	r6, r1
 800420c:	00f6      	lsls	r6, r6, #3
 800420e:	617e      	str	r6, [r7, #20]
 8004210:	697e      	ldr	r6, [r7, #20]
 8004212:	4316      	orrs	r6, r2
 8004214:	617e      	str	r6, [r7, #20]
 8004216:	0002      	movs	r2, r0
 8004218:	00d2      	lsls	r2, r2, #3
 800421a:	613a      	str	r2, [r7, #16]
 800421c:	001a      	movs	r2, r3
 800421e:	603a      	str	r2, [r7, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	6838      	ldr	r0, [r7, #0]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	0002      	movs	r2, r0
 800422a:	0f52      	lsrs	r2, r2, #29
 800422c:	000e      	movs	r6, r1
 800422e:	00f5      	lsls	r5, r6, #3
 8004230:	4315      	orrs	r5, r2
 8004232:	0002      	movs	r2, r0
 8004234:	00d4      	lsls	r4, r2, #3
 8004236:	3307      	adds	r3, #7
 8004238:	08db      	lsrs	r3, r3, #3
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	466a      	mov	r2, sp
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	469d      	mov	sp, r3
 8004242:	ab04      	add	r3, sp, #16
 8004244:	3300      	adds	r3, #0
 8004246:	21a5      	movs	r1, #165	@ 0xa5
 8004248:	0089      	lsls	r1, r1, #2
 800424a:	2018      	movs	r0, #24
 800424c:	180a      	adds	r2, r1, r0
 800424e:	19d2      	adds	r2, r2, r7
 8004250:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 8004252:	4e24      	ldr	r6, [pc, #144]	@ (80042e4 <SENDDATA+0x154>)
 8004254:	1832      	adds	r2, r6, r0
 8004256:	19d3      	adds	r3, r2, r7
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	001a      	movs	r2, r3
 800425e:	000c      	movs	r4, r1
 8004260:	0005      	movs	r5, r0
 8004262:	1821      	adds	r1, r4, r0
 8004264:	19cb      	adds	r3, r1, r7
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2100      	movs	r1, #0
 800426a:	0018      	movs	r0, r3
 800426c:	f00d fd76 	bl	8011d5c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004270:	0028      	movs	r0, r5
 8004272:	1832      	adds	r2, r6, r0
 8004274:	19d3      	adds	r3, r2, r7
 8004276:	881a      	ldrh	r2, [r3, #0]
 8004278:	231c      	movs	r3, #28
 800427a:	18f9      	adds	r1, r7, r3
 800427c:	0005      	movs	r5, r0
 800427e:	1963      	adds	r3, r4, r5
 8004280:	19db      	adds	r3, r3, r7
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0018      	movs	r0, r3
 8004286:	f00d fd71 	bl	8011d6c <strncpy>
  SetCommandBuffer(atCommand);
 800428a:	1963      	adds	r3, r4, r5
 800428c:	19db      	adds	r3, r3, r7
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff fb9b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004296:	0028      	movs	r0, r5
 8004298:	1833      	adds	r3, r6, r0
 800429a:	19db      	adds	r3, r3, r7
 800429c:	881a      	ldrh	r2, [r3, #0]
 800429e:	1823      	adds	r3, r4, r0
 80042a0:	19db      	adds	r3, r3, r7
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff fa58 	bl	800375c <ESP_Send>
 80042ac:	1e03      	subs	r3, r0, #0
 80042ae:	d001      	beq.n	80042b4 <SENDDATA+0x124>
    return true;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <SENDDATA+0x126>
  }
  else{
    return false;
 80042b4:	2300      	movs	r3, #0
 80042b6:	46c5      	mov	sp, r8
  }
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	23ae      	movs	r3, #174	@ 0xae
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	449d      	add	sp, r3
 80042c2:	bc80      	pop	{r7}
 80042c4:	46b8      	mov	r8, r7
 80042c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c8:	fffffd38 	.word	0xfffffd38
 80042cc:	200004e0 	.word	0x200004e0
 80042d0:	20000460 	.word	0x20000460
 80042d4:	08014c04 	.word	0x08014c04
 80042d8:	20000660 	.word	0x20000660
 80042dc:	200005e0 	.word	0x200005e0
 80042e0:	20000560 	.word	0x20000560
 80042e4:	0000029e 	.word	0x0000029e

080042e8 <SLEEP>:
bool SLEEP(){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <SLEEP+0x3c>)
 80042f0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7ff fb69 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7fb ff2b 	bl	8000158 <strlen>
 8004302:	0003      	movs	r3, r0
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f7ff fa26 	bl	800375c <ESP_Send>
 8004310:	1e03      	subs	r3, r0, #0
 8004312:	d001      	beq.n	8004318 <SLEEP+0x30>
    return true;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <SLEEP+0x32>
  }
  else{
    return false;
 8004318:	2300      	movs	r3, #0
  }
}
 800431a:	0018      	movs	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	b002      	add	sp, #8
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	08014c24 	.word	0x08014c24

08004328 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004328:	b5b0      	push	{r4, r5, r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	0002      	movs	r2, r0
 8004330:	1dfb      	adds	r3, r7, #7
 8004332:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004334:	4b4c      	ldr	r3, [pc, #304]	@ (8004468 <DMA_ProcessBuffer+0x140>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	210e      	movs	r1, #14
 800433e:	187b      	adds	r3, r7, r1
 8004340:	43d2      	mvns	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004344:	200f      	movs	r0, #15
 8004346:	183b      	adds	r3, r7, r0
 8004348:	2203      	movs	r2, #3
 800434a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 800434c:	4b47      	ldr	r3, [pc, #284]	@ (800446c <DMA_ProcessBuffer+0x144>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	187a      	adds	r2, r7, r1
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d129      	bne.n	80043ae <DMA_ProcessBuffer+0x86>
      if(retry >4){
 800435a:	4b45      	ldr	r3, [pc, #276]	@ (8004470 <DMA_ProcessBuffer+0x148>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b04      	cmp	r3, #4
 8004360:	d913      	bls.n	800438a <DMA_ProcessBuffer+0x62>
        retry = 0;
 8004362:	4b43      	ldr	r3, [pc, #268]	@ (8004470 <DMA_ProcessBuffer+0x148>)
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommands == AT_WAKEUP && testRound == true){
 8004368:	4b42      	ldr	r3, [pc, #264]	@ (8004474 <DMA_ProcessBuffer+0x14c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d107      	bne.n	8004380 <DMA_ProcessBuffer+0x58>
 8004370:	4b41      	ldr	r3, [pc, #260]	@ (8004478 <DMA_ProcessBuffer+0x150>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <DMA_ProcessBuffer+0x58>
          status = RECEIVE_STATUS_UNPROGGED;
 8004378:	183b      	adds	r3, r7, r0
 800437a:	2207      	movs	r2, #7
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e016      	b.n	80043ae <DMA_ProcessBuffer+0x86>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004380:	230f      	movs	r3, #15
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2206      	movs	r2, #6
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e011      	b.n	80043ae <DMA_ProcessBuffer+0x86>
        }
      }
     else{
       retry ++;
 800438a:	4b39      	ldr	r3, [pc, #228]	@ (8004470 <DMA_ProcessBuffer+0x148>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b37      	ldr	r3, [pc, #220]	@ (8004470 <DMA_ProcessBuffer+0x148>)
 8004394:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004396:	f004 fe1f 	bl	8008fd8 <HAL_GetTick>
 800439a:	0003      	movs	r3, r0
 800439c:	33f5      	adds	r3, #245	@ 0xf5
 800439e:	33ff      	adds	r3, #255	@ 0xff
 80043a0:	001a      	movs	r2, r3
 80043a2:	4b36      	ldr	r3, [pc, #216]	@ (800447c <DMA_ProcessBuffer+0x154>)
 80043a4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80043a6:	230f      	movs	r3, #15
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	2204      	movs	r2, #4
 80043ac:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80043ae:	4b2f      	ldr	r3, [pc, #188]	@ (800446c <DMA_ProcessBuffer+0x144>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	210e      	movs	r1, #14
 80043b6:	187a      	adds	r2, r7, r1
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d048      	beq.n	8004450 <DMA_ProcessBuffer+0x128>
      retry = 0;
 80043be:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <DMA_ProcessBuffer+0x148>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80043c4:	4b29      	ldr	r3, [pc, #164]	@ (800446c <DMA_ProcessBuffer+0x144>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	187a      	adds	r2, r7, r1
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d917      	bls.n	8004402 <DMA_ProcessBuffer+0xda>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80043d2:	4b26      	ldr	r3, [pc, #152]	@ (800446c <DMA_ProcessBuffer+0x144>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	001a      	movs	r2, r3
 80043da:	4b29      	ldr	r3, [pc, #164]	@ (8004480 <DMA_ProcessBuffer+0x158>)
 80043dc:	18d0      	adds	r0, r2, r3
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4a21      	ldr	r2, [pc, #132]	@ (800446c <DMA_ProcessBuffer+0x144>)
 80043e6:	7812      	ldrb	r2, [r2, #0]
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	b299      	uxth	r1, r3
 80043ee:	230f      	movs	r3, #15
 80043f0:	18fc      	adds	r4, r7, r3
 80043f2:	1dfb      	adds	r3, r7, #7
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	001a      	movs	r2, r3
 80043f8:	f7ff fb32 	bl	8003a60 <ParseBuffer>
 80043fc:	0003      	movs	r3, r0
 80043fe:	7023      	strb	r3, [r4, #0]
 8004400:	e026      	b.n	8004450 <DMA_ProcessBuffer+0x128>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <DMA_ProcessBuffer+0x144>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	001a      	movs	r2, r3
 800440a:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <DMA_ProcessBuffer+0x158>)
 800440c:	18d0      	adds	r0, r2, r3
 800440e:	4b17      	ldr	r3, [pc, #92]	@ (800446c <DMA_ProcessBuffer+0x144>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	001a      	movs	r2, r3
 8004416:	23ff      	movs	r3, #255	@ 0xff
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	b299      	uxth	r1, r3
 800441c:	250f      	movs	r5, #15
 800441e:	197c      	adds	r4, r7, r5
 8004420:	1dfb      	adds	r3, r7, #7
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	001a      	movs	r2, r3
 8004426:	f7ff fb1b 	bl	8003a60 <ParseBuffer>
 800442a:	0003      	movs	r3, r0
 800442c:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 800442e:	220e      	movs	r2, #14
 8004430:	18bb      	adds	r3, r7, r2
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <DMA_ProcessBuffer+0x128>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004438:	18bb      	adds	r3, r7, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b299      	uxth	r1, r3
 800443e:	197c      	adds	r4, r7, r5
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	4b0e      	ldr	r3, [pc, #56]	@ (8004480 <DMA_ProcessBuffer+0x158>)
 8004446:	0018      	movs	r0, r3
 8004448:	f7ff fb0a 	bl	8003a60 <ParseBuffer>
 800444c:	0003      	movs	r3, r0
 800444e:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 8004450:	4b06      	ldr	r3, [pc, #24]	@ (800446c <DMA_ProcessBuffer+0x144>)
 8004452:	220e      	movs	r2, #14
 8004454:	18ba      	adds	r2, r7, r2
 8004456:	7812      	ldrb	r2, [r2, #0]
 8004458:	701a      	strb	r2, [r3, #0]
    return status;
 800445a:	230f      	movs	r3, #15
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	781b      	ldrb	r3, [r3, #0]
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b004      	add	sp, #16
 8004466:	bdb0      	pop	{r4, r5, r7, pc}
 8004468:	20002a78 	.word	0x20002a78
 800446c:	200006e0 	.word	0x200006e0
 8004470:	200006e8 	.word	0x200006e8
 8004474:	200008ef 	.word	0x200008ef
 8004478:	20000002 	.word	0x20000002
 800447c:	200006e4 	.word	0x200006e4
 8004480:	2000034c 	.word	0x2000034c

08004484 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	0002      	movs	r2, r0
 800448c:	1dfb      	adds	r3, r7, #7
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	1dbb      	adds	r3, r7, #6
 8004492:	1c0a      	adds	r2, r1, #0
 8004494:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004496:	210f      	movs	r1, #15
 8004498:	187b      	adds	r3, r7, r1
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800449e:	1dbb      	adds	r3, r7, #6
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d105      	bne.n	80044b2 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80044a6:	187b      	adds	r3, r7, r1
 80044a8:	1dfa      	adds	r2, r7, #7
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	4251      	negs	r1, r2
 80044ae:	414a      	adcs	r2, r1
 80044b0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80044b2:	1dbb      	adds	r3, r7, #6
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80044ba:	230f      	movs	r3, #15
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	1dfa      	adds	r2, r7, #7
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	3a02      	subs	r2, #2
 80044c4:	4251      	negs	r1, r2
 80044c6:	414a      	adcs	r2, r1
 80044c8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80044ca:	1dbb      	adds	r3, r7, #6
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d107      	bne.n	80044e2 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80044d2:	230f      	movs	r3, #15
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	1dfa      	adds	r2, r7, #7
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	3a05      	subs	r2, #5
 80044dc:	4251      	negs	r1, r2
 80044de:	414a      	adcs	r2, r1
 80044e0:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80044e2:	230f      	movs	r3, #15
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	781b      	ldrb	r3, [r3, #0]
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b004      	add	sp, #16
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <AT_Send>:

bool AT_Send(AT_Commands state){
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0002      	movs	r2, r0
 80044f8:	1dfb      	adds	r3, r7, #7
 80044fa:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80044fc:	230f      	movs	r3, #15
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b0e      	cmp	r3, #14
 800450a:	d900      	bls.n	800450e <AT_Send+0x1e>
 800450c:	e136      	b.n	800477c <AT_Send+0x28c>
 800450e:	009a      	lsls	r2, r3, #2
 8004510:	4b9e      	ldr	r3, [pc, #632]	@ (800478c <AT_Send+0x29c>)
 8004512:	18d3      	adds	r3, r2, r3
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004518:	4b9d      	ldr	r3, [pc, #628]	@ (8004790 <AT_Send+0x2a0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	0018      	movs	r0, r3
 800451e:	f004 f90d 	bl	800873c <TimestampIsReached>
 8004522:	1e03      	subs	r3, r0, #0
 8004524:	d100      	bne.n	8004528 <AT_Send+0x38>
 8004526:	e128      	b.n	800477a <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 8004528:	230f      	movs	r3, #15
 800452a:	18fc      	adds	r4, r7, r3
 800452c:	f7ff fbb4 	bl	8003c98 <PollAwake>
 8004530:	0003      	movs	r3, r0
 8004532:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004534:	f004 fd50 	bl	8008fd8 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	3332      	adds	r3, #50	@ 0x32
 800453c:	001a      	movs	r2, r3
 800453e:	4b94      	ldr	r3, [pc, #592]	@ (8004790 <AT_Send+0x2a0>)
 8004540:	601a      	str	r2, [r3, #0]
  }
  break;
 8004542:	e11a      	b.n	800477a <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004544:	4a93      	ldr	r2, [pc, #588]	@ (8004794 <AT_Send+0x2a4>)
 8004546:	4b94      	ldr	r3, [pc, #592]	@ (8004798 <AT_Send+0x2a8>)
 8004548:	0019      	movs	r1, r3
 800454a:	2003      	movs	r0, #3
 800454c:	f004 f94c 	bl	80087e8 <CreateLine>
    ATCommandSend = RFPower();
 8004550:	230f      	movs	r3, #15
 8004552:	18fc      	adds	r4, r7, r3
 8004554:	f7ff fbc0 	bl	8003cd8 <RFPower>
 8004558:	0003      	movs	r3, r0
 800455a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800455c:	f004 fd3c 	bl	8008fd8 <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	330a      	adds	r3, #10
 8004564:	001a      	movs	r2, r3
 8004566:	4b8a      	ldr	r3, [pc, #552]	@ (8004790 <AT_Send+0x2a0>)
 8004568:	601a      	str	r2, [r3, #0]
    break;
 800456a:	e107      	b.n	800477c <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800456c:	4a8b      	ldr	r2, [pc, #556]	@ (800479c <AT_Send+0x2ac>)
 800456e:	4b8a      	ldr	r3, [pc, #552]	@ (8004798 <AT_Send+0x2a8>)
 8004570:	0019      	movs	r1, r3
 8004572:	2003      	movs	r0, #3
 8004574:	f004 f938 	bl	80087e8 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004578:	230f      	movs	r3, #15
 800457a:	18fc      	adds	r4, r7, r3
 800457c:	f7ff fbcc 	bl	8003d18 <CheckRFPower>
 8004580:	0003      	movs	r3, r0
 8004582:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004584:	f004 fd28 	bl	8008fd8 <HAL_GetTick>
 8004588:	0003      	movs	r3, r0
 800458a:	330a      	adds	r3, #10
 800458c:	001a      	movs	r2, r3
 800458e:	4b80      	ldr	r3, [pc, #512]	@ (8004790 <AT_Send+0x2a0>)
 8004590:	601a      	str	r2, [r3, #0]
    break;
 8004592:	e0f3      	b.n	800477c <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004594:	4a82      	ldr	r2, [pc, #520]	@ (80047a0 <AT_Send+0x2b0>)
 8004596:	4b80      	ldr	r3, [pc, #512]	@ (8004798 <AT_Send+0x2a8>)
 8004598:	0019      	movs	r1, r3
 800459a:	2003      	movs	r0, #3
 800459c:	f004 f924 	bl	80087e8 <CreateLine>
    ATCommandSend = ATRestore();
 80045a0:	230f      	movs	r3, #15
 80045a2:	18fc      	adds	r4, r7, r3
 80045a4:	f7ff fbd8 	bl	8003d58 <ATRestore>
 80045a8:	0003      	movs	r3, r0
 80045aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045ac:	f004 fd14 	bl	8008fd8 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	3332      	adds	r3, #50	@ 0x32
 80045b4:	001a      	movs	r2, r3
 80045b6:	4b76      	ldr	r3, [pc, #472]	@ (8004790 <AT_Send+0x2a0>)
 80045b8:	601a      	str	r2, [r3, #0]
    break;
 80045ba:	e0df      	b.n	800477c <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80045bc:	4a79      	ldr	r2, [pc, #484]	@ (80047a4 <AT_Send+0x2b4>)
 80045be:	4b76      	ldr	r3, [pc, #472]	@ (8004798 <AT_Send+0x2a8>)
 80045c0:	0019      	movs	r1, r3
 80045c2:	2003      	movs	r0, #3
 80045c4:	f004 f910 	bl	80087e8 <CreateLine>
    ATCommandSend = CWINIT();
 80045c8:	230f      	movs	r3, #15
 80045ca:	18fc      	adds	r4, r7, r3
 80045cc:	f7ff fbe4 	bl	8003d98 <CWINIT>
 80045d0:	0003      	movs	r3, r0
 80045d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80045d4:	f004 fd00 	bl	8008fd8 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	33f5      	adds	r3, #245	@ 0xf5
 80045dc:	33ff      	adds	r3, #255	@ 0xff
 80045de:	001a      	movs	r2, r3
 80045e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004790 <AT_Send+0x2a0>)
 80045e2:	601a      	str	r2, [r3, #0]
    break;
 80045e4:	e0ca      	b.n	800477c <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80045e6:	4a70      	ldr	r2, [pc, #448]	@ (80047a8 <AT_Send+0x2b8>)
 80045e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004798 <AT_Send+0x2a8>)
 80045ea:	0019      	movs	r1, r3
 80045ec:	2003      	movs	r0, #3
 80045ee:	f004 f8fb 	bl	80087e8 <CreateLine>
    ATCommandSend = CWMODE1();
 80045f2:	230f      	movs	r3, #15
 80045f4:	18fc      	adds	r4, r7, r3
 80045f6:	f7ff fbef 	bl	8003dd8 <CWMODE1>
 80045fa:	0003      	movs	r3, r0
 80045fc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045fe:	f004 fceb 	bl	8008fd8 <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	330a      	adds	r3, #10
 8004606:	001a      	movs	r2, r3
 8004608:	4b61      	ldr	r3, [pc, #388]	@ (8004790 <AT_Send+0x2a0>)
 800460a:	601a      	str	r2, [r3, #0]
    break;
 800460c:	e0b6      	b.n	800477c <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800460e:	4a67      	ldr	r2, [pc, #412]	@ (80047ac <AT_Send+0x2bc>)
 8004610:	4b61      	ldr	r3, [pc, #388]	@ (8004798 <AT_Send+0x2a8>)
 8004612:	0019      	movs	r1, r3
 8004614:	2003      	movs	r0, #3
 8004616:	f004 f8e7 	bl	80087e8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800461a:	230f      	movs	r3, #15
 800461c:	18fc      	adds	r4, r7, r3
 800461e:	f7ff fbfb 	bl	8003e18 <CWAUTOCONN>
 8004622:	0003      	movs	r3, r0
 8004624:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004626:	f004 fcd7 	bl	8008fd8 <HAL_GetTick>
 800462a:	0003      	movs	r3, r0
 800462c:	330a      	adds	r3, #10
 800462e:	001a      	movs	r2, r3
 8004630:	4b57      	ldr	r3, [pc, #348]	@ (8004790 <AT_Send+0x2a0>)
 8004632:	601a      	str	r2, [r3, #0]
    break;
 8004634:	e0a2      	b.n	800477c <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004636:	4a5e      	ldr	r2, [pc, #376]	@ (80047b0 <AT_Send+0x2c0>)
 8004638:	4b57      	ldr	r3, [pc, #348]	@ (8004798 <AT_Send+0x2a8>)
 800463a:	0019      	movs	r1, r3
 800463c:	2003      	movs	r0, #3
 800463e:	f004 f8d3 	bl	80087e8 <CreateLine>
    ATCommandSend = CWJAP();
 8004642:	230f      	movs	r3, #15
 8004644:	18fc      	adds	r4, r7, r3
 8004646:	f7ff fc07 	bl	8003e58 <CWJAP>
 800464a:	0003      	movs	r3, r0
 800464c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800464e:	f004 fcc3 	bl	8008fd8 <HAL_GetTick>
 8004652:	0003      	movs	r3, r0
 8004654:	3332      	adds	r3, #50	@ 0x32
 8004656:	001a      	movs	r2, r3
 8004658:	4b4d      	ldr	r3, [pc, #308]	@ (8004790 <AT_Send+0x2a0>)
 800465a:	601a      	str	r2, [r3, #0]
    break;
 800465c:	e08e      	b.n	800477c <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800465e:	4a55      	ldr	r2, [pc, #340]	@ (80047b4 <AT_Send+0x2c4>)
 8004660:	4b4d      	ldr	r3, [pc, #308]	@ (8004798 <AT_Send+0x2a8>)
 8004662:	0019      	movs	r1, r3
 8004664:	2003      	movs	r0, #3
 8004666:	f004 f8bf 	bl	80087e8 <CreateLine>
    ATCommandSend = CWMODE3();
 800466a:	230f      	movs	r3, #15
 800466c:	18fc      	adds	r4, r7, r3
 800466e:	f7ff fc73 	bl	8003f58 <CWMODE3>
 8004672:	0003      	movs	r3, r0
 8004674:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004676:	f004 fcaf 	bl	8008fd8 <HAL_GetTick>
 800467a:	0003      	movs	r3, r0
 800467c:	330a      	adds	r3, #10
 800467e:	001a      	movs	r2, r3
 8004680:	4b43      	ldr	r3, [pc, #268]	@ (8004790 <AT_Send+0x2a0>)
 8004682:	601a      	str	r2, [r3, #0]
    break;
 8004684:	e07a      	b.n	800477c <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004686:	4a4c      	ldr	r2, [pc, #304]	@ (80047b8 <AT_Send+0x2c8>)
 8004688:	4b43      	ldr	r3, [pc, #268]	@ (8004798 <AT_Send+0x2a8>)
 800468a:	0019      	movs	r1, r3
 800468c:	2003      	movs	r0, #3
 800468e:	f004 f8ab 	bl	80087e8 <CreateLine>
    ATCommandSend = CWSAP();
 8004692:	230f      	movs	r3, #15
 8004694:	18fc      	adds	r4, r7, r3
 8004696:	f7ff fc7f 	bl	8003f98 <CWSAP>
 800469a:	0003      	movs	r3, r0
 800469c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800469e:	f004 fc9b 	bl	8008fd8 <HAL_GetTick>
 80046a2:	0003      	movs	r3, r0
 80046a4:	330a      	adds	r3, #10
 80046a6:	001a      	movs	r2, r3
 80046a8:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <AT_Send+0x2a0>)
 80046aa:	601a      	str	r2, [r3, #0]
    break;
 80046ac:	e066      	b.n	800477c <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET in station/soft-ap mode");
 80046ae:	4a41      	ldr	r2, [pc, #260]	@ (80047b4 <AT_Send+0x2c4>)
 80046b0:	4b39      	ldr	r3, [pc, #228]	@ (8004798 <AT_Send+0x2a8>)
 80046b2:	0019      	movs	r1, r3
 80046b4:	2003      	movs	r0, #3
 80046b6:	f004 f897 	bl	80087e8 <CreateLine>
    ATCommandSend = CIPMUX();
 80046ba:	230f      	movs	r3, #15
 80046bc:	18fc      	adds	r4, r7, r3
 80046be:	f7ff fc8b 	bl	8003fd8 <CIPMUX>
 80046c2:	0003      	movs	r3, r0
 80046c4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046c6:	f004 fc87 	bl	8008fd8 <HAL_GetTick>
 80046ca:	0003      	movs	r3, r0
 80046cc:	330a      	adds	r3, #10
 80046ce:	001a      	movs	r2, r3
 80046d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004790 <AT_Send+0x2a0>)
 80046d2:	601a      	str	r2, [r3, #0]
    break;
 80046d4:	e052      	b.n	800477c <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 80046d6:	4a37      	ldr	r2, [pc, #220]	@ (80047b4 <AT_Send+0x2c4>)
 80046d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004798 <AT_Send+0x2a8>)
 80046da:	0019      	movs	r1, r3
 80046dc:	2003      	movs	r0, #3
 80046de:	f004 f883 	bl	80087e8 <CreateLine>
    ATCommandSend = WEBSERVER();
 80046e2:	230f      	movs	r3, #15
 80046e4:	18fc      	adds	r4, r7, r3
 80046e6:	f7ff fc97 	bl	8004018 <WEBSERVER>
 80046ea:	0003      	movs	r3, r0
 80046ec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ee:	f004 fc73 	bl	8008fd8 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	330a      	adds	r3, #10
 80046f6:	001a      	movs	r2, r3
 80046f8:	4b25      	ldr	r3, [pc, #148]	@ (8004790 <AT_Send+0x2a0>)
 80046fa:	601a      	str	r2, [r3, #0]
    break;
 80046fc:	e03e      	b.n	800477c <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80046fe:	4a2d      	ldr	r2, [pc, #180]	@ (80047b4 <AT_Send+0x2c4>)
 8004700:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <AT_Send+0x2a8>)
 8004702:	0019      	movs	r1, r3
 8004704:	2003      	movs	r0, #3
 8004706:	f004 f86f 	bl	80087e8 <CreateLine>
    ATCommandSend = HTTPCPOST();
 800470a:	230f      	movs	r3, #15
 800470c:	18fc      	adds	r4, r7, r3
 800470e:	f7ff fca3 	bl	8004058 <HTTPCPOST>
 8004712:	0003      	movs	r3, r0
 8004714:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004716:	f004 fc5f 	bl	8008fd8 <HAL_GetTick>
 800471a:	0003      	movs	r3, r0
 800471c:	33f5      	adds	r3, #245	@ 0xf5
 800471e:	33ff      	adds	r3, #255	@ 0xff
 8004720:	001a      	movs	r2, r3
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <AT_Send+0x2a0>)
 8004724:	601a      	str	r2, [r3, #0]
    break;
 8004726:	e029      	b.n	800477c <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 8004728:	4a24      	ldr	r2, [pc, #144]	@ (80047bc <AT_Send+0x2cc>)
 800472a:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <AT_Send+0x2a8>)
 800472c:	0019      	movs	r1, r3
 800472e:	2003      	movs	r0, #3
 8004730:	f004 f85a 	bl	80087e8 <CreateLine>
    ATCommandSend = SENDDATA();
 8004734:	230f      	movs	r3, #15
 8004736:	18fc      	adds	r4, r7, r3
 8004738:	f7ff fd2a 	bl	8004190 <SENDDATA>
 800473c:	0003      	movs	r3, r0
 800473e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004740:	f004 fc4a 	bl	8008fd8 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	33f5      	adds	r3, #245	@ 0xf5
 8004748:	33ff      	adds	r3, #255	@ 0xff
 800474a:	001a      	movs	r2, r3
 800474c:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <AT_Send+0x2a0>)
 800474e:	601a      	str	r2, [r3, #0]
    break;
 8004750:	e014      	b.n	800477c <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004752:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <AT_Send+0x2d0>)
 8004754:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <AT_Send+0x2a8>)
 8004756:	0019      	movs	r1, r3
 8004758:	2003      	movs	r0, #3
 800475a:	f004 f845 	bl	80087e8 <CreateLine>
    ATCommandSend = SLEEP();
 800475e:	230f      	movs	r3, #15
 8004760:	18fc      	adds	r4, r7, r3
 8004762:	f7ff fdc1 	bl	80042e8 <SLEEP>
 8004766:	0003      	movs	r3, r0
 8004768:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800476a:	f004 fc35 	bl	8008fd8 <HAL_GetTick>
 800476e:	0003      	movs	r3, r0
 8004770:	330a      	adds	r3, #10
 8004772:	001a      	movs	r2, r3
 8004774:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <AT_Send+0x2a0>)
 8004776:	601a      	str	r2, [r3, #0]
    break;
 8004778:	e000      	b.n	800477c <AT_Send+0x28c>
  break;
 800477a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800477c:	230f      	movs	r3, #15
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	781b      	ldrb	r3, [r3, #0]
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b005      	add	sp, #20
 8004788:	bd90      	pop	{r4, r7, pc}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	0801532c 	.word	0x0801532c
 8004790:	200006e4 	.word	0x200006e4
 8004794:	08014c34 	.word	0x08014c34
 8004798:	08014950 	.word	0x08014950
 800479c:	08014c48 	.word	0x08014c48
 80047a0:	08014c5c 	.word	0x08014c5c
 80047a4:	08014c6c 	.word	0x08014c6c
 80047a8:	08014c80 	.word	0x08014c80
 80047ac:	08014c98 	.word	0x08014c98
 80047b0:	08014cb0 	.word	0x08014cb0
 80047b4:	08014cc4 	.word	0x08014cc4
 80047b8:	08014ce0 	.word	0x08014ce0
 80047bc:	08014cfc 	.word	0x08014cfc
 80047c0:	08014d0c 	.word	0x08014d0c

080047c4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80047ca:	1dfb      	adds	r3, r7, #7
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80047d0:	4b79      	ldr	r3, [pc, #484]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d900      	bls.n	80047da <ESP_WakeTest+0x16>
 80047d8:	e0e9      	b.n	80049ae <ESP_WakeTest+0x1ea>
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	4b77      	ldr	r3, [pc, #476]	@ (80049bc <ESP_WakeTest+0x1f8>)
 80047de:	18d3      	adds	r3, r2, r3
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80047e4:	4b76      	ldr	r3, [pc, #472]	@ (80049c0 <ESP_WakeTest+0x1fc>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2201      	movs	r2, #1
 80047ea:	4053      	eors	r3, r2
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d03a      	beq.n	8004868 <ESP_WakeTest+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80047f2:	2380      	movs	r3, #128	@ 0x80
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4873      	ldr	r0, [pc, #460]	@ (80049c4 <ESP_WakeTest+0x200>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	0019      	movs	r1, r3
 80047fc:	f005 fd82 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004800:	23fa      	movs	r3, #250	@ 0xfa
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	0018      	movs	r0, r3
 8004806:	f004 fbf1 	bl	8008fec <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	486d      	ldr	r0, [pc, #436]	@ (80049c4 <ESP_WakeTest+0x200>)
 8004810:	2201      	movs	r2, #1
 8004812:	0019      	movs	r1, r3
 8004814:	f005 fd76 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004818:	23fa      	movs	r3, #250	@ 0xfa
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	0018      	movs	r0, r3
 800481e:	f004 fbe5 	bl	8008fec <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004822:	4b69      	ldr	r3, [pc, #420]	@ (80049c8 <ESP_WakeTest+0x204>)
 8004824:	2200      	movs	r2, #0
 8004826:	2101      	movs	r1, #1
 8004828:	0018      	movs	r0, r3
 800482a:	f005 fd6b 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800482e:	2064      	movs	r0, #100	@ 0x64
 8004830:	f004 fbdc 	bl	8008fec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004834:	4b64      	ldr	r3, [pc, #400]	@ (80049c8 <ESP_WakeTest+0x204>)
 8004836:	2201      	movs	r2, #1
 8004838:	2102      	movs	r1, #2
 800483a:	0018      	movs	r0, r3
 800483c:	f005 fd62 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004840:	2064      	movs	r0, #100	@ 0x64
 8004842:	f004 fbd3 	bl	8008fec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004846:	4b60      	ldr	r3, [pc, #384]	@ (80049c8 <ESP_WakeTest+0x204>)
 8004848:	2201      	movs	r2, #1
 800484a:	2101      	movs	r1, #1
 800484c:	0018      	movs	r0, r3
 800484e:	f005 fd59 	bl	800a304 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004852:	f004 fbc1 	bl	8008fd8 <HAL_GetTick>
 8004856:	0003      	movs	r3, r0
 8004858:	22af      	movs	r2, #175	@ 0xaf
 800485a:	0092      	lsls	r2, r2, #2
 800485c:	189a      	adds	r2, r3, r2
 800485e:	4b5b      	ldr	r3, [pc, #364]	@ (80049cc <ESP_WakeTest+0x208>)
 8004860:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004862:	4b57      	ldr	r3, [pc, #348]	@ (80049c0 <ESP_WakeTest+0x1fc>)
 8004864:	2201      	movs	r2, #1
 8004866:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <ESP_WakeTest+0x20c>)
 800486a:	21ff      	movs	r1, #255	@ 0xff
 800486c:	0018      	movs	r0, r3
 800486e:	f7fe ff9f 	bl	80037b0 <ESP_Receive>
 8004872:	1e03      	subs	r3, r0, #0
 8004874:	d100      	bne.n	8004878 <ESP_WakeTest+0xb4>
 8004876:	e095      	b.n	80049a4 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 8004878:	4b4f      	ldr	r3, [pc, #316]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800487e:	e091      	b.n	80049a4 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004880:	4b52      	ldr	r3, [pc, #328]	@ (80049cc <ESP_WakeTest+0x208>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0018      	movs	r0, r3
 8004886:	f003 ff59 	bl	800873c <TimestampIsReached>
 800488a:	1e03      	subs	r3, r0, #0
 800488c:	d100      	bne.n	8004890 <ESP_WakeTest+0xcc>
 800488e:	e08b      	b.n	80049a8 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(nextATCommand);
 8004890:	4b50      	ldr	r3, [pc, #320]	@ (80049d4 <ESP_WakeTest+0x210>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	1dfc      	adds	r4, r7, #7
 8004896:	0018      	movs	r0, r3
 8004898:	f7ff fe2a 	bl	80044f0 <AT_Send>
 800489c:	0003      	movs	r3, r0
 800489e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80048a0:	1dfb      	adds	r3, r7, #7
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d100      	bne.n	80048aa <ESP_WakeTest+0xe6>
 80048a8:	e07e      	b.n	80049a8 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 80048aa:	4b43      	ldr	r3, [pc, #268]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 80048ac:	2202      	movs	r2, #2
 80048ae:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80048b0:	e07a      	b.n	80049a8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80048b2:	4b46      	ldr	r3, [pc, #280]	@ (80049cc <ESP_WakeTest+0x208>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	0018      	movs	r0, r3
 80048b8:	f003 ff40 	bl	800873c <TimestampIsReached>
 80048bc:	1e03      	subs	r3, r0, #0
 80048be:	d100      	bne.n	80048c2 <ESP_WakeTest+0xfe>
 80048c0:	e074      	b.n	80049ac <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80048c2:	4b45      	ldr	r3, [pc, #276]	@ (80049d8 <ESP_WakeTest+0x214>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7ff fd2e 	bl	8004328 <DMA_ProcessBuffer>
 80048cc:	0003      	movs	r3, r0
 80048ce:	001a      	movs	r2, r3
 80048d0:	4b42      	ldr	r3, [pc, #264]	@ (80049dc <ESP_WakeTest+0x218>)
 80048d2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80048d4:	4b41      	ldr	r3, [pc, #260]	@ (80049dc <ESP_WakeTest+0x218>)
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	4b3f      	ldr	r3, [pc, #252]	@ (80049d8 <ESP_WakeTest+0x214>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	1dbc      	adds	r4, r7, #6
 80048de:	0019      	movs	r1, r3
 80048e0:	0010      	movs	r0, r2
 80048e2:	f7ff fdcf 	bl	8004484 <ATCompare>
 80048e6:	0003      	movs	r3, r0
 80048e8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80048ea:	4b3c      	ldr	r3, [pc, #240]	@ (80049dc <ESP_WakeTest+0x218>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d102      	bne.n	80048f8 <ESP_WakeTest+0x134>
          TestState = ESP_TEST_SEND;
 80048f2:	4b31      	ldr	r3, [pc, #196]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80048f8:	4b38      	ldr	r3, [pc, #224]	@ (80049dc <ESP_WakeTest+0x218>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b07      	cmp	r3, #7
 80048fe:	d104      	bne.n	800490a <ESP_WakeTest+0x146>
          StartProg();
 8004900:	f7ff f87a 	bl	80039f8 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004904:	4b2c      	ldr	r3, [pc, #176]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 8004906:	2205      	movs	r2, #5
 8004908:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800490a:	4b34      	ldr	r3, [pc, #208]	@ (80049dc <ESP_WakeTest+0x218>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d109      	bne.n	8004926 <ESP_WakeTest+0x162>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004912:	f004 fb61 	bl	8008fd8 <HAL_GetTick>
 8004916:	0003      	movs	r3, r0
 8004918:	3332      	adds	r3, #50	@ 0x32
 800491a:	001a      	movs	r2, r3
 800491c:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <ESP_WakeTest+0x208>)
 800491e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004920:	4b25      	ldr	r3, [pc, #148]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004926:	1dbb      	adds	r3, r7, #6
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03e      	beq.n	80049ac <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 800492e:	4b22      	ldr	r3, [pc, #136]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 8004930:	2203      	movs	r2, #3
 8004932:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004934:	e03a      	b.n	80049ac <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004936:	4b2a      	ldr	r3, [pc, #168]	@ (80049e0 <ESP_WakeTest+0x21c>)
 8004938:	22fa      	movs	r2, #250	@ 0xfa
 800493a:	0112      	lsls	r2, r2, #4
 800493c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 800493e:	4b28      	ldr	r3, [pc, #160]	@ (80049e0 <ESP_WakeTest+0x21c>)
 8004940:	2200      	movs	r2, #0
 8004942:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004944:	4b26      	ldr	r3, [pc, #152]	@ (80049e0 <ESP_WakeTest+0x21c>)
 8004946:	22fa      	movs	r2, #250	@ 0xfa
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800494c:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <ESP_WakeTest+0x1f4>)
 800494e:	2204      	movs	r2, #4
 8004950:	701a      	strb	r2, [r3, #0]

      break;
 8004952:	e02c      	b.n	80049ae <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004954:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <ESP_WakeTest+0x220>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800495a:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <ESP_WakeTest+0x1fc>)
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004960:	4b19      	ldr	r3, [pc, #100]	@ (80049c8 <ESP_WakeTest+0x204>)
 8004962:	2200      	movs	r2, #0
 8004964:	2101      	movs	r1, #1
 8004966:	0018      	movs	r0, r3
 8004968:	f005 fccc 	bl	800a304 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	4814      	ldr	r0, [pc, #80]	@ (80049c4 <ESP_WakeTest+0x200>)
 8004972:	2200      	movs	r2, #0
 8004974:	0019      	movs	r1, r3
 8004976:	f005 fcc5 	bl	800a304 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800497a:	4b13      	ldr	r3, [pc, #76]	@ (80049c8 <ESP_WakeTest+0x204>)
 800497c:	2200      	movs	r2, #0
 800497e:	2102      	movs	r1, #2
 8004980:	0018      	movs	r0, r3
 8004982:	f005 fcbf 	bl	800a304 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004986:	f001 fb4d 	bl	8006024 <SetESPMeasurementDone>

      break;
 800498a:	e010      	b.n	80049ae <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <ESP_WakeTest+0x21c>)
 800498e:	22fa      	movs	r2, #250	@ 0xfa
 8004990:	0112      	lsls	r2, r2, #4
 8004992:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004994:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <ESP_WakeTest+0x21c>)
 8004996:	22fa      	movs	r2, #250	@ 0xfa
 8004998:	0112      	lsls	r2, r2, #4
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <ESP_WakeTest+0x21c>)
 800499e:	2200      	movs	r2, #0
 80049a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80049a2:	e004      	b.n	80049ae <ESP_WakeTest+0x1ea>
      break;
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	e002      	b.n	80049ae <ESP_WakeTest+0x1ea>
      break;
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	e000      	b.n	80049ae <ESP_WakeTest+0x1ea>
      break;
 80049ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b003      	add	sp, #12
 80049b4:	bd90      	pop	{r4, r7, pc}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	200008f0 	.word	0x200008f0
 80049bc:	08015368 	.word	0x08015368
 80049c0:	2000044b 	.word	0x2000044b
 80049c4:	50000800 	.word	0x50000800
 80049c8:	50001c00 	.word	0x50001c00
 80049cc:	200006e4 	.word	0x200006e4
 80049d0:	2000034c 	.word	0x2000034c
 80049d4:	200008ee 	.word	0x200008ee
 80049d8:	200008ed 	.word	0x200008ed
 80049dc:	200000f8 	.word	0x200000f8
 80049e0:	40000400 	.word	0x40000400
 80049e4:	20000002 	.word	0x20000002

080049e8 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 80049f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004c34 <ESP_Upkeep+0x24c>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b09      	cmp	r3, #9
 80049fa:	d900      	bls.n	80049fe <ESP_Upkeep+0x16>
 80049fc:	e109      	b.n	8004c12 <ESP_Upkeep+0x22a>
 80049fe:	009a      	lsls	r2, r3, #2
 8004a00:	4b8d      	ldr	r3, [pc, #564]	@ (8004c38 <ESP_Upkeep+0x250>)
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004a08:	4b8a      	ldr	r3, [pc, #552]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
      break;
 8004a0e:	e10d      	b.n	8004c2c <ESP_Upkeep+0x244>
//      ATCommands[offset++] = (ATCommands) {};
      // TODO: Add turning on the ESP32 and wait for ready after, so we know for sure that the ESP is on.
      // Initialization state
//      StartUpTime = GetCurrentHalTicks() + ESP_START_UP_TIME;
//      StartUpDone = false;
      if(!EspTurnedOn){
 8004a10:	4b8a      	ldr	r3, [pc, #552]	@ (8004c3c <ESP_Upkeep+0x254>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	4053      	eors	r3, r2
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d03a      	beq.n	8004a94 <ESP_Upkeep+0xac>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a1e:	2380      	movs	r3, #128	@ 0x80
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	4887      	ldr	r0, [pc, #540]	@ (8004c40 <ESP_Upkeep+0x258>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	0019      	movs	r1, r3
 8004a28:	f005 fc6c 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004a2c:	23fa      	movs	r3, #250	@ 0xfa
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	0018      	movs	r0, r3
 8004a32:	f004 fadb 	bl	8008fec <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	4881      	ldr	r0, [pc, #516]	@ (8004c40 <ESP_Upkeep+0x258>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	0019      	movs	r1, r3
 8004a40:	f005 fc60 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004a44:	23fa      	movs	r3, #250	@ 0xfa
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f004 facf 	bl	8008fec <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c44 <ESP_Upkeep+0x25c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	2101      	movs	r1, #1
 8004a54:	0018      	movs	r0, r3
 8004a56:	f005 fc55 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004a5a:	2064      	movs	r0, #100	@ 0x64
 8004a5c:	f004 fac6 	bl	8008fec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004a60:	4b78      	ldr	r3, [pc, #480]	@ (8004c44 <ESP_Upkeep+0x25c>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	2102      	movs	r1, #2
 8004a66:	0018      	movs	r0, r3
 8004a68:	f005 fc4c 	bl	800a304 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004a6c:	2064      	movs	r0, #100	@ 0x64
 8004a6e:	f004 fabd 	bl	8008fec <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004a72:	4b74      	ldr	r3, [pc, #464]	@ (8004c44 <ESP_Upkeep+0x25c>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	2101      	movs	r1, #1
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f005 fc43 	bl	800a304 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004a7e:	f004 faab 	bl	8008fd8 <HAL_GetTick>
 8004a82:	0003      	movs	r3, r0
 8004a84:	22af      	movs	r2, #175	@ 0xaf
 8004a86:	0092      	lsls	r2, r2, #2
 8004a88:	189a      	adds	r2, r3, r2
 8004a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8004c48 <ESP_Upkeep+0x260>)
 8004a8c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8004c3c <ESP_Upkeep+0x254>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004a94:	4b6d      	ldr	r3, [pc, #436]	@ (8004c4c <ESP_Upkeep+0x264>)
 8004a96:	21ff      	movs	r1, #255	@ 0xff
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7fe fe89 	bl	80037b0 <ESP_Receive>
 8004a9e:	1e03      	subs	r3, r0, #0
 8004aa0:	d100      	bne.n	8004aa4 <ESP_Upkeep+0xbc>
 8004aa2:	e0bc      	b.n	8004c1e <ESP_Upkeep+0x236>
        EspState = ESP_STATE_SEND;
 8004aa4:	4b63      	ldr	r3, [pc, #396]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004aaa:	e0b8      	b.n	8004c1e <ESP_Upkeep+0x236>

    case ESP_STATE_SEND:
        ATSend = AT_Send(nextATCommand);
 8004aac:	4b68      	ldr	r3, [pc, #416]	@ (8004c50 <ESP_Upkeep+0x268>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	1dfc      	adds	r4, r7, #7
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f7ff fd1c 	bl	80044f0 <AT_Send>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004abc:	1dfb      	adds	r3, r7, #7
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d100      	bne.n	8004ac6 <ESP_Upkeep+0xde>
 8004ac4:	e0ad      	b.n	8004c22 <ESP_Upkeep+0x23a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004ac8:	2203      	movs	r2, #3
 8004aca:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004acc:	e0a9      	b.n	8004c22 <ESP_Upkeep+0x23a>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004ace:	4b5e      	ldr	r3, [pc, #376]	@ (8004c48 <ESP_Upkeep+0x260>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f003 fe32 	bl	800873c <TimestampIsReached>
 8004ad8:	1e03      	subs	r3, r0, #0
 8004ada:	d100      	bne.n	8004ade <ESP_Upkeep+0xf6>
 8004adc:	e0a3      	b.n	8004c26 <ESP_Upkeep+0x23e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004ade:	4b5d      	ldr	r3, [pc, #372]	@ (8004c54 <ESP_Upkeep+0x26c>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f7ff fc20 	bl	8004328 <DMA_ProcessBuffer>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	001a      	movs	r2, r3
 8004aec:	4b5a      	ldr	r3, [pc, #360]	@ (8004c58 <ESP_Upkeep+0x270>)
 8004aee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004af0:	4b59      	ldr	r3, [pc, #356]	@ (8004c58 <ESP_Upkeep+0x270>)
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	4b57      	ldr	r3, [pc, #348]	@ (8004c54 <ESP_Upkeep+0x26c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	1dbc      	adds	r4, r7, #6
 8004afa:	0019      	movs	r1, r3
 8004afc:	0010      	movs	r0, r2
 8004afe:	f7ff fcc1 	bl	8004484 <ATCompare>
 8004b02:	0003      	movs	r3, r0
 8004b04:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004b06:	4b54      	ldr	r3, [pc, #336]	@ (8004c58 <ESP_Upkeep+0x270>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d102      	bne.n	8004b14 <ESP_Upkeep+0x12c>
          EspState = ESP_STATE_SEND;
 8004b0e:	4b49      	ldr	r3, [pc, #292]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004b10:	2204      	movs	r2, #4
 8004b12:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004b14:	4b50      	ldr	r3, [pc, #320]	@ (8004c58 <ESP_Upkeep+0x270>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d106      	bne.n	8004b2a <ESP_Upkeep+0x142>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004b1c:	f004 fa5c 	bl	8008fd8 <HAL_GetTick>
 8004b20:	0003      	movs	r3, r0
 8004b22:	330a      	adds	r3, #10
 8004b24:	001a      	movs	r2, r3
 8004b26:	4b48      	ldr	r3, [pc, #288]	@ (8004c48 <ESP_Upkeep+0x260>)
 8004b28:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c58 <ESP_Upkeep+0x270>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b06      	cmp	r3, #6
 8004b30:	d113      	bne.n	8004b5a <ESP_Upkeep+0x172>
          if(nextATCommand != AT_SENDDATA){
 8004b32:	4b47      	ldr	r3, [pc, #284]	@ (8004c50 <ESP_Upkeep+0x268>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b0d      	cmp	r3, #13
 8004b38:	d003      	beq.n	8004b42 <ESP_Upkeep+0x15a>
            EspState = ESP_STATE_SEND;
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e00b      	b.n	8004b5a <ESP_Upkeep+0x172>
          }
          else{
            nextATCommand = AT_HTTPCPOST;
 8004b42:	4b43      	ldr	r3, [pc, #268]	@ (8004c50 <ESP_Upkeep+0x268>)
 8004b44:	220c      	movs	r2, #12
 8004b46:	701a      	strb	r2, [r3, #0]
            ATCommands = AT_HTTPCPOST;
 8004b48:	4b44      	ldr	r3, [pc, #272]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004b4a:	220c      	movs	r2, #12
 8004b4c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004b4e:	4b41      	ldr	r3, [pc, #260]	@ (8004c54 <ESP_Upkeep+0x26c>)
 8004b50:	2202      	movs	r2, #2
 8004b52:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004b54:	4b37      	ldr	r3, [pc, #220]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004b56:	2204      	movs	r2, #4
 8004b58:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004b5a:	1dbb      	adds	r3, r7, #6
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d061      	beq.n	8004c26 <ESP_Upkeep+0x23e>
          EspState = ESP_STATE_NEXT_AT;
 8004b62:	4b34      	ldr	r3, [pc, #208]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004b64:	2205      	movs	r2, #5
 8004b66:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004b68:	e05d      	b.n	8004c26 <ESP_Upkeep+0x23e>

    case ESP_STATE_NEXT_AT:
      if(ATCommands < AT_SLEEP){
 8004b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b0d      	cmp	r3, #13
 8004b70:	d826      	bhi.n	8004bc0 <ESP_Upkeep+0x1d8>
        ATCommands = ATCommands+1;
 8004b72:	4b3a      	ldr	r3, [pc, #232]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b38      	ldr	r3, [pc, #224]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004b7c:	701a      	strb	r2, [r3, #0]
        if(ATCommands == AT_RESTORE){
 8004b7e:	4b37      	ldr	r3, [pc, #220]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d102      	bne.n	8004b8c <ESP_Upkeep+0x1a4>
            ATExpectation = RECEIVE_EXPECTATION_READY;
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <ESP_Upkeep+0x26c>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands == AT_HTTPCPOST){
 8004b8c:	4b33      	ldr	r3, [pc, #204]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d102      	bne.n	8004b9a <ESP_Upkeep+0x1b2>
          ATExpectation = RECEIVE_EXPECTATION_START;
 8004b94:	4b2f      	ldr	r3, [pc, #188]	@ (8004c54 <ESP_Upkeep+0x26c>)
 8004b96:	2202      	movs	r2, #2
 8004b98:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands != AT_HTTPCPOST && ATCommands != AT_RESTORE){
 8004b9a:	4b30      	ldr	r3, [pc, #192]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d006      	beq.n	8004bb0 <ESP_Upkeep+0x1c8>
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d002      	beq.n	8004bb0 <ESP_Upkeep+0x1c8>
          ATExpectation = RECEIVE_EXPECTATION_OK;
 8004baa:	4b2a      	ldr	r3, [pc, #168]	@ (8004c54 <ESP_Upkeep+0x26c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
        }
        EspState = ESP_STATE_SEND;
 8004bb0:	4b20      	ldr	r3, [pc, #128]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	701a      	strb	r2, [r3, #0]
        nextATCommand = ATCommands;
 8004bb6:	4b29      	ldr	r3, [pc, #164]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	4b25      	ldr	r3, [pc, #148]	@ (8004c50 <ESP_Upkeep+0x268>)
 8004bbc:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
        break;
      }


    break;
 8004bbe:	e035      	b.n	8004c2c <ESP_Upkeep+0x244>
        ESPTimeStamp = HAL_GetTick() + 300000;
 8004bc0:	f004 fa0a 	bl	8008fd8 <HAL_GetTick>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	4a26      	ldr	r2, [pc, #152]	@ (8004c60 <ESP_Upkeep+0x278>)
 8004bc8:	189a      	adds	r2, r3, r2
 8004bca:	4b1f      	ldr	r3, [pc, #124]	@ (8004c48 <ESP_Upkeep+0x260>)
 8004bcc:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
 8004bce:	4b19      	ldr	r3, [pc, #100]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004bd0:	2209      	movs	r2, #9
 8004bd2:	701a      	strb	r2, [r3, #0]
        break;
 8004bd4:	e02a      	b.n	8004c2c <ESP_Upkeep+0x244>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c48 <ESP_Upkeep+0x260>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f003 fdae 	bl	800873c <TimestampIsReached>
 8004be0:	1e03      	subs	r3, r0, #0
 8004be2:	d022      	beq.n	8004c2a <ESP_Upkeep+0x242>
        nextATCommand = AT_HTTPCPOST;
 8004be4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <ESP_Upkeep+0x268>)
 8004be6:	220c      	movs	r2, #12
 8004be8:	701a      	strb	r2, [r3, #0]
        ATCommands = AT_HTTPCPOST;
 8004bea:	4b1c      	ldr	r3, [pc, #112]	@ (8004c5c <ESP_Upkeep+0x274>)
 8004bec:	220c      	movs	r2, #12
 8004bee:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004bf6:	4b17      	ldr	r3, [pc, #92]	@ (8004c54 <ESP_Upkeep+0x26c>)
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004bfc:	e015      	b.n	8004c2a <ESP_Upkeep+0x242>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004bfe:	4a19      	ldr	r2, [pc, #100]	@ (8004c64 <ESP_Upkeep+0x27c>)
 8004c00:	4b19      	ldr	r3, [pc, #100]	@ (8004c68 <ESP_Upkeep+0x280>)
 8004c02:	0019      	movs	r1, r3
 8004c04:	2003      	movs	r0, #3
 8004c06:	f003 fdef 	bl	80087e8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	701a      	strb	r2, [r3, #0]
      break;
 8004c10:	e00c      	b.n	8004c2c <ESP_Upkeep+0x244>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8004c12:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <ESP_Upkeep+0x24c>)
 8004c14:	2207      	movs	r2, #7
 8004c16:	701a      	strb	r2, [r3, #0]
      break;
 8004c18:	e008      	b.n	8004c2c <ESP_Upkeep+0x244>
      break;
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	e006      	b.n	8004c2c <ESP_Upkeep+0x244>
      break;
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	e004      	b.n	8004c2c <ESP_Upkeep+0x244>
         break;
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	e002      	b.n	8004c2c <ESP_Upkeep+0x244>
      break;
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	e000      	b.n	8004c2c <ESP_Upkeep+0x244>
      break;
 8004c2a:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b003      	add	sp, #12
 8004c32:	bd90      	pop	{r4, r7, pc}
 8004c34:	200000f7 	.word	0x200000f7
 8004c38:	08015380 	.word	0x08015380
 8004c3c:	2000044b 	.word	0x2000044b
 8004c40:	50000800 	.word	0x50000800
 8004c44:	50001c00 	.word	0x50001c00
 8004c48:	200006e4 	.word	0x200006e4
 8004c4c:	2000034c 	.word	0x2000034c
 8004c50:	200008ee 	.word	0x200008ee
 8004c54:	200008ed 	.word	0x200008ed
 8004c58:	200000f9 	.word	0x200000f9
 8004c5c:	200008ef 	.word	0x200008ef
 8004c60:	000493e0 	.word	0x000493e0
 8004c64:	08014d30 	.word	0x08014d30
 8004c68:	08014950 	.word	0x08014950

08004c6c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <I2CSensors_Init+0x30>)
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004c7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <I2CSensors_Init+0x34>)
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <I2CSensors_Init+0x38>)
 8004c7e:	0011      	movs	r1, r2
 8004c80:	0018      	movs	r0, r3
 8004c82:	f000 fae9 	bl	8005258 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004c86:	4a06      	ldr	r2, [pc, #24]	@ (8004ca0 <I2CSensors_Init+0x34>)
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <I2CSensors_Init+0x38>)
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 f96b 	bl	8004f68 <Gas_Init>
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	200008f4 	.word	0x200008f4
 8004ca0:	08004cfd 	.word	0x08004cfd
 8004ca4:	08004ca9 	.word	0x08004ca9

08004ca8 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ca8:	b5b0      	push	{r4, r5, r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6039      	str	r1, [r7, #0]
 8004cb0:	0011      	movs	r1, r2
 8004cb2:	1dfb      	adds	r3, r7, #7
 8004cb4:	1c02      	adds	r2, r0, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	1dbb      	adds	r3, r7, #6
 8004cba:	1c0a      	adds	r2, r1, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <ReadI2C+0x50>)
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	18db      	adds	r3, r3, r3
 8004cca:	b299      	uxth	r1, r3
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	250f      	movs	r5, #15
 8004cd4:	197c      	adds	r4, r7, r5
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	f005 fcce 	bl	800a678 <HAL_I2C_Master_Receive_DMA>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ce0:	197b      	adds	r3, r7, r5
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <ReadI2C+0x44>
        return false;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <ReadI2C+0x46>
    }
    return true;
 8004cec:	2301      	movs	r3, #1
}
 8004cee:	0018      	movs	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b004      	add	sp, #16
 8004cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	200008f4 	.word	0x200008f4

08004cfc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004cfc:	b5b0      	push	{r4, r5, r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6039      	str	r1, [r7, #0]
 8004d04:	0011      	movs	r1, r2
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	1c02      	adds	r2, r0, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	1dbb      	adds	r3, r7, #6
 8004d0e:	1c0a      	adds	r2, r1, #0
 8004d10:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004d12:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <WriteI2C+0x50>)
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	1dfb      	adds	r3, r7, #7
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	18db      	adds	r3, r3, r3
 8004d1e:	b299      	uxth	r1, r3
 8004d20:	1dbb      	adds	r3, r7, #6
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	250f      	movs	r5, #15
 8004d28:	197c      	adds	r4, r7, r5
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	f005 fb9e 	bl	800a46c <HAL_I2C_Master_Transmit_DMA>
 8004d30:	0003      	movs	r3, r0
 8004d32:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004d34:	197b      	adds	r3, r7, r5
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <WriteI2C+0x44>
        return false;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <WriteI2C+0x46>
    }
    return true;
 8004d40:	2301      	movs	r3, #1
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b004      	add	sp, #16
 8004d48:	bdb0      	pop	{r4, r5, r7, pc}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	200008f4 	.word	0x200008f4

08004d50 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004d56:	003b      	movs	r3, r7
 8004d58:	0018      	movs	r0, r3
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f00c fffc 	bl	8011d5c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004d64:	4b30      	ldr	r3, [pc, #192]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d66:	4a31      	ldr	r2, [pc, #196]	@ (8004e2c <MX_ADC_Init+0xdc>)
 8004d68:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004d70:	4b2d      	ldr	r3, [pc, #180]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d72:	22c0      	movs	r2, #192	@ 0xc0
 8004d74:	0612      	lsls	r2, r2, #24
 8004d76:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004d78:	4b2b      	ldr	r3, [pc, #172]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004d84:	4b28      	ldr	r3, [pc, #160]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d8a:	4b27      	ldr	r3, [pc, #156]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004d90:	4b25      	ldr	r3, [pc, #148]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d92:	2220      	movs	r2, #32
 8004d94:	2100      	movs	r1, #0
 8004d96:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004d98:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004d9a:	2221      	movs	r2, #33	@ 0x21
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004da0:	4b21      	ldr	r3, [pc, #132]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004da6:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004da8:	22c2      	movs	r2, #194	@ 0xc2
 8004daa:	32ff      	adds	r2, #255	@ 0xff
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004dae:	4b1e      	ldr	r3, [pc, #120]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004db0:	222c      	movs	r2, #44	@ 0x2c
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004db6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004db8:	2204      	movs	r2, #4
 8004dba:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004dc2:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004dc8:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004dce:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004dd4:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f004 f92c 	bl	8009034 <HAL_ADC_Init>
 8004ddc:	1e03      	subs	r3, r0, #0
 8004dde:	d001      	beq.n	8004de4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004de0:	f000 fde8 	bl	80059b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004de4:	003b      	movs	r3, r7
 8004de6:	4a12      	ldr	r2, [pc, #72]	@ (8004e30 <MX_ADC_Init+0xe0>)
 8004de8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004dea:	003b      	movs	r3, r7
 8004dec:	2280      	movs	r2, #128	@ 0x80
 8004dee:	0152      	lsls	r2, r2, #5
 8004df0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004df2:	003a      	movs	r2, r7
 8004df4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004df6:	0011      	movs	r1, r2
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f004 fb8b 	bl	8009514 <HAL_ADC_ConfigChannel>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d001      	beq.n	8004e06 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004e02:	f000 fdd7 	bl	80059b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004e06:	003b      	movs	r3, r7
 8004e08:	4a0a      	ldr	r2, [pc, #40]	@ (8004e34 <MX_ADC_Init+0xe4>)
 8004e0a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004e0c:	003a      	movs	r2, r7
 8004e0e:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <MX_ADC_Init+0xd8>)
 8004e10:	0011      	movs	r1, r2
 8004e12:	0018      	movs	r0, r3
 8004e14:	f004 fb7e 	bl	8009514 <HAL_ADC_ConfigChannel>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d001      	beq.n	8004e20 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004e1c:	f000 fdca 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004e20:	46c0      	nop			@ (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	200008f8 	.word	0x200008f8
 8004e2c:	40012400 	.word	0x40012400
 8004e30:	38004000 	.word	0x38004000
 8004e34:	3c008000 	.word	0x3c008000

08004e38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b089      	sub	sp, #36	@ 0x24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e40:	240c      	movs	r4, #12
 8004e42:	193b      	adds	r3, r7, r4
 8004e44:	0018      	movs	r0, r3
 8004e46:	2314      	movs	r3, #20
 8004e48:	001a      	movs	r2, r3
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f00c ff86 	bl	8011d5c <memset>
  if(adcHandle->Instance==ADC1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <HAL_ADC_MspInit+0x70>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d121      	bne.n	8004e9e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <HAL_ADC_MspInit+0x74>)
 8004e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e5e:	4b13      	ldr	r3, [pc, #76]	@ (8004eac <HAL_ADC_MspInit+0x74>)
 8004e60:	2180      	movs	r1, #128	@ 0x80
 8004e62:	0089      	lsls	r1, r1, #2
 8004e64:	430a      	orrs	r2, r1
 8004e66:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e68:	4b10      	ldr	r3, [pc, #64]	@ (8004eac <HAL_ADC_MspInit+0x74>)
 8004e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004eac <HAL_ADC_MspInit+0x74>)
 8004e6e:	2104      	movs	r1, #4
 8004e70:	430a      	orrs	r2, r1
 8004e72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e74:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <HAL_ADC_MspInit+0x74>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	2204      	movs	r2, #4
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8004e80:	193b      	adds	r3, r7, r4
 8004e82:	2230      	movs	r2, #48	@ 0x30
 8004e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	2203      	movs	r2, #3
 8004e8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8c:	193b      	adds	r3, r7, r4
 8004e8e:	2200      	movs	r2, #0
 8004e90:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e92:	193b      	adds	r3, r7, r4
 8004e94:	4a06      	ldr	r2, [pc, #24]	@ (8004eb0 <HAL_ADC_MspInit+0x78>)
 8004e96:	0019      	movs	r1, r3
 8004e98:	0010      	movs	r0, r2
 8004e9a:	f004 ffd3 	bl	8009e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b009      	add	sp, #36	@ 0x24
 8004ea4:	bd90      	pop	{r4, r7, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	40012400 	.word	0x40012400
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	50000800 	.word	0x50000800

08004eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004eba:	4b10      	ldr	r3, [pc, #64]	@ (8004efc <MX_DMA_Init+0x48>)
 8004ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8004efc <MX_DMA_Init+0x48>)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8004efc <MX_DMA_Init+0x48>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	200a      	movs	r0, #10
 8004ed8:	f004 fcd6 	bl	8009888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004edc:	200a      	movs	r0, #10
 8004ede:	f004 fce8 	bl	80098b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2103      	movs	r1, #3
 8004ee6:	200b      	movs	r0, #11
 8004ee8:	f004 fcce 	bl	8009888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004eec:	200b      	movs	r0, #11
 8004eee:	f004 fce0 	bl	80098b2 <HAL_NVIC_EnableIRQ>

}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b002      	add	sp, #8
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	40021000 	.word	0x40021000

08004f00 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <Gadget_Init+0x40>)
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 ffe9 	bl	8005ee8 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f000 fdb5 	bl	8005a8c <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7fe fc07 	bl	8003738 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8004f2a:	4a06      	ldr	r2, [pc, #24]	@ (8004f44 <Gadget_Init+0x44>)
 8004f2c:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <Gadget_Init+0x48>)
 8004f2e:	0019      	movs	r1, r3
 8004f30:	2003      	movs	r0, #3
 8004f32:	f003 fc59 	bl	80087e8 <CreateLine>
}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	200000fc 	.word	0x200000fc
 8004f44:	08014d44 	.word	0x08014d44
 8004f48:	08014d58 	.word	0x08014d58

08004f4c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  Meas_Test();
 8004f50:	f001 f820 	bl	8005f94 <Meas_Test>
}
 8004f54:	46c0      	nop			@ (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <UpkeepGadget>:

void UpkeepGadget() {
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8004f5e:	f000 ff4f 	bl	8005e00 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	0011      	movs	r1, r2
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f002 fb0d 	bl	8007598 <SGP_Init>
}
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8004f86:	b580      	push	{r7, lr}
 8004f88:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8004f8a:	f002 fb1f 	bl	80075cc <SGP_StartMeasurement>
}
 8004f8e:	46c0      	nop			@ (mov r8, r8)
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f002 fb84 	bl	80076ac <SGP_GetMeasurementValues>
 8004fa4:	0003      	movs	r3, r0
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b002      	add	sp, #8
 8004fac:	bd80      	pop	{r7, pc}

08004fae <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8004fb2:	f002 fd9d 	bl	8007af0 <SGP_DeviceConnected>
 8004fb6:	0003      	movs	r3, r0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b08b      	sub	sp, #44	@ 0x2c
 8004fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc6:	2414      	movs	r4, #20
 8004fc8:	193b      	adds	r3, r7, r4
 8004fca:	0018      	movs	r0, r3
 8004fcc:	2314      	movs	r3, #20
 8004fce:	001a      	movs	r2, r3
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	f00c fec3 	bl	8011d5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd6:	4b70      	ldr	r3, [pc, #448]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8004fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fda:	4b6f      	ldr	r3, [pc, #444]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8004fdc:	2104      	movs	r1, #4
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fee:	4b6a      	ldr	r3, [pc, #424]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	4b69      	ldr	r3, [pc, #420]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8004ff4:	2180      	movs	r1, #128	@ 0x80
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ffa:	4b67      	ldr	r3, [pc, #412]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	2280      	movs	r2, #128	@ 0x80
 8005000:	4013      	ands	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005006:	4b64      	ldr	r3, [pc, #400]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8005008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500a:	4b63      	ldr	r3, [pc, #396]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 800500c:	2101      	movs	r1, #1
 800500e:	430a      	orrs	r2, r1
 8005010:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005012:	4b61      	ldr	r3, [pc, #388]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8005014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005016:	2201      	movs	r2, #1
 8005018:	4013      	ands	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800501e:	4b5e      	ldr	r3, [pc, #376]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8005020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005022:	4b5d      	ldr	r3, [pc, #372]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8005024:	2102      	movs	r1, #2
 8005026:	430a      	orrs	r2, r1
 8005028:	62da      	str	r2, [r3, #44]	@ 0x2c
 800502a:	4b5b      	ldr	r3, [pc, #364]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	2202      	movs	r2, #2
 8005030:	4013      	ands	r3, r2
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005036:	4b58      	ldr	r3, [pc, #352]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8005038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503a:	4b57      	ldr	r3, [pc, #348]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 800503c:	2108      	movs	r1, #8
 800503e:	430a      	orrs	r2, r1
 8005040:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005042:	4b55      	ldr	r3, [pc, #340]	@ (8005198 <MX_GPIO_Init+0x1d8>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	2208      	movs	r2, #8
 8005048:	4013      	ands	r3, r2
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800504e:	4b53      	ldr	r3, [pc, #332]	@ (800519c <MX_GPIO_Init+0x1dc>)
 8005050:	2201      	movs	r2, #1
 8005052:	2101      	movs	r1, #1
 8005054:	0018      	movs	r0, r3
 8005056:	f005 f955 	bl	800a304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800505a:	4b50      	ldr	r3, [pc, #320]	@ (800519c <MX_GPIO_Init+0x1dc>)
 800505c:	2200      	movs	r2, #0
 800505e:	2102      	movs	r1, #2
 8005060:	0018      	movs	r0, r3
 8005062:	f005 f94f 	bl	800a304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005066:	494e      	ldr	r1, [pc, #312]	@ (80051a0 <MX_GPIO_Init+0x1e0>)
 8005068:	4b4e      	ldr	r3, [pc, #312]	@ (80051a4 <MX_GPIO_Init+0x1e4>)
 800506a:	2201      	movs	r2, #1
 800506c:	0018      	movs	r0, r3
 800506e:	f005 f949 	bl	800a304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	484c      	ldr	r0, [pc, #304]	@ (80051a8 <MX_GPIO_Init+0x1e8>)
 8005078:	2201      	movs	r2, #1
 800507a:	0019      	movs	r1, r3
 800507c:	f005 f942 	bl	800a304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8005080:	193b      	adds	r3, r7, r4
 8005082:	4a4a      	ldr	r2, [pc, #296]	@ (80051ac <MX_GPIO_Init+0x1ec>)
 8005084:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005086:	193b      	adds	r3, r7, r4
 8005088:	2203      	movs	r2, #3
 800508a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	193b      	adds	r3, r7, r4
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005092:	193b      	adds	r3, r7, r4
 8005094:	4a44      	ldr	r2, [pc, #272]	@ (80051a8 <MX_GPIO_Init+0x1e8>)
 8005096:	0019      	movs	r1, r3
 8005098:	0010      	movs	r0, r2
 800509a:	f004 fed3 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800509e:	193b      	adds	r3, r7, r4
 80050a0:	2203      	movs	r2, #3
 80050a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	2201      	movs	r2, #1
 80050a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	2200      	movs	r2, #0
 80050b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	4a38      	ldr	r2, [pc, #224]	@ (800519c <MX_GPIO_Init+0x1dc>)
 80050ba:	0019      	movs	r1, r3
 80050bc:	0010      	movs	r0, r2
 80050be:	f004 fec1 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80050c2:	193b      	adds	r3, r7, r4
 80050c4:	4a3a      	ldr	r2, [pc, #232]	@ (80051b0 <MX_GPIO_Init+0x1f0>)
 80050c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050c8:	193b      	adds	r3, r7, r4
 80050ca:	2203      	movs	r2, #3
 80050cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	193b      	adds	r3, r7, r4
 80050d0:	2200      	movs	r2, #0
 80050d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d4:	193a      	adds	r2, r7, r4
 80050d6:	23a0      	movs	r3, #160	@ 0xa0
 80050d8:	05db      	lsls	r3, r3, #23
 80050da:	0011      	movs	r1, r2
 80050dc:	0018      	movs	r0, r3
 80050de:	f004 feb1 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80050e2:	193b      	adds	r3, r7, r4
 80050e4:	22c0      	movs	r2, #192	@ 0xc0
 80050e6:	0052      	lsls	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ea:	193b      	adds	r3, r7, r4
 80050ec:	2200      	movs	r2, #0
 80050ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f0:	193b      	adds	r3, r7, r4
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f6:	193a      	adds	r2, r7, r4
 80050f8:	23a0      	movs	r3, #160	@ 0xa0
 80050fa:	05db      	lsls	r3, r3, #23
 80050fc:	0011      	movs	r1, r2
 80050fe:	0018      	movs	r0, r3
 8005100:	f004 fea0 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005104:	193b      	adds	r3, r7, r4
 8005106:	4a26      	ldr	r2, [pc, #152]	@ (80051a0 <MX_GPIO_Init+0x1e0>)
 8005108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800510a:	193b      	adds	r3, r7, r4
 800510c:	2201      	movs	r2, #1
 800510e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005110:	193b      	adds	r3, r7, r4
 8005112:	2200      	movs	r2, #0
 8005114:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005116:	193b      	adds	r3, r7, r4
 8005118:	2200      	movs	r2, #0
 800511a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800511c:	193b      	adds	r3, r7, r4
 800511e:	4a21      	ldr	r2, [pc, #132]	@ (80051a4 <MX_GPIO_Init+0x1e4>)
 8005120:	0019      	movs	r1, r3
 8005122:	0010      	movs	r0, r2
 8005124:	f004 fe8e 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005128:	193b      	adds	r3, r7, r4
 800512a:	4a22      	ldr	r2, [pc, #136]	@ (80051b4 <MX_GPIO_Init+0x1f4>)
 800512c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800512e:	193b      	adds	r3, r7, r4
 8005130:	2203      	movs	r2, #3
 8005132:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005134:	193b      	adds	r3, r7, r4
 8005136:	2200      	movs	r2, #0
 8005138:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513a:	193b      	adds	r3, r7, r4
 800513c:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <MX_GPIO_Init+0x1e4>)
 800513e:	0019      	movs	r1, r3
 8005140:	0010      	movs	r0, r2
 8005142:	f004 fe7f 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8005146:	0021      	movs	r1, r4
 8005148:	187b      	adds	r3, r7, r1
 800514a:	2280      	movs	r2, #128	@ 0x80
 800514c:	0112      	lsls	r2, r2, #4
 800514e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005150:	000c      	movs	r4, r1
 8005152:	193b      	adds	r3, r7, r4
 8005154:	2201      	movs	r2, #1
 8005156:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005158:	193b      	adds	r3, r7, r4
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800515e:	193b      	adds	r3, r7, r4
 8005160:	2200      	movs	r2, #0
 8005162:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8005164:	193b      	adds	r3, r7, r4
 8005166:	4a10      	ldr	r2, [pc, #64]	@ (80051a8 <MX_GPIO_Init+0x1e8>)
 8005168:	0019      	movs	r1, r3
 800516a:	0010      	movs	r0, r2
 800516c:	f004 fe6a 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005170:	0021      	movs	r1, r4
 8005172:	187b      	adds	r3, r7, r1
 8005174:	2204      	movs	r2, #4
 8005176:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005178:	187b      	adds	r3, r7, r1
 800517a:	2200      	movs	r2, #0
 800517c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517e:	187b      	adds	r3, r7, r1
 8005180:	2200      	movs	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005184:	187b      	adds	r3, r7, r1
 8005186:	4a0c      	ldr	r2, [pc, #48]	@ (80051b8 <MX_GPIO_Init+0x1f8>)
 8005188:	0019      	movs	r1, r3
 800518a:	0010      	movs	r0, r2
 800518c:	f004 fe5a 	bl	8009e44 <HAL_GPIO_Init>

}
 8005190:	46c0      	nop			@ (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	b00b      	add	sp, #44	@ 0x2c
 8005196:	bd90      	pop	{r4, r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	50001c00 	.word	0x50001c00
 80051a0:	00000301 	.word	0x00000301
 80051a4:	50000400 	.word	0x50000400
 80051a8:	50000800 	.word	0x50000800
 80051ac:	0000320f 	.word	0x0000320f
 80051b0:	00008070 	.word	0x00008070
 80051b4:	0000403e 	.word	0x0000403e
 80051b8:	50000c00 	.word	0x50000c00

080051bc <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2100      	movs	r1, #0
 80051ca:	0018      	movs	r0, r3
 80051cc:	f008 fcd4 	bl	800db78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2108      	movs	r1, #8
 80051d4:	0018      	movs	r0, r3
 80051d6:	f008 fccf 	bl	800db78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	210c      	movs	r1, #12
 80051de:	0018      	movs	r0, r3
 80051e0:	f008 fcca 	bl	800db78 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80051e4:	2380      	movs	r3, #128	@ 0x80
 80051e6:	05db      	lsls	r3, r3, #23
 80051e8:	22fa      	movs	r2, #250	@ 0xfa
 80051ea:	0112      	lsls	r2, r2, #4
 80051ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80051ee:	2380      	movs	r3, #128	@ 0x80
 80051f0:	05db      	lsls	r3, r3, #23
 80051f2:	22fa      	movs	r2, #250	@ 0xfa
 80051f4:	0112      	lsls	r2, r2, #4
 80051f6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	05db      	lsls	r3, r3, #23
 80051fc:	22fa      	movs	r2, #250	@ 0xfa
 80051fe:	0112      	lsls	r2, r2, #4
 8005200:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	05db      	lsls	r3, r3, #23
 8005206:	22fa      	movs	r2, #250	@ 0xfa
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2100      	movs	r1, #0
 8005210:	0018      	movs	r0, r3
 8005212:	f008 fcb1 	bl	800db78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2104      	movs	r1, #4
 800521a:	0018      	movs	r0, r3
 800521c:	f008 fcac 	bl	800db78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2108      	movs	r1, #8
 8005224:	0018      	movs	r0, r3
 8005226:	f008 fca7 	bl	800db78 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800522a:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <GPIO_InitPWMLEDs+0x98>)
 800522c:	22fa      	movs	r2, #250	@ 0xfa
 800522e:	0112      	lsls	r2, r2, #4
 8005230:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005232:	4b08      	ldr	r3, [pc, #32]	@ (8005254 <GPIO_InitPWMLEDs+0x98>)
 8005234:	22fa      	movs	r2, #250	@ 0xfa
 8005236:	0112      	lsls	r2, r2, #4
 8005238:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <GPIO_InitPWMLEDs+0x98>)
 800523c:	22fa      	movs	r2, #250	@ 0xfa
 800523e:	0112      	lsls	r2, r2, #4
 8005240:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005242:	4b04      	ldr	r3, [pc, #16]	@ (8005254 <GPIO_InitPWMLEDs+0x98>)
 8005244:	22fa      	movs	r2, #250	@ 0xfa
 8005246:	0112      	lsls	r2, r2, #4
 8005248:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800524a:	46c0      	nop			@ (mov r8, r8)
 800524c:	46bd      	mov	sp, r7
 800524e:	b002      	add	sp, #8
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	40000400 	.word	0x40000400

08005258 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	0011      	movs	r1, r2
 8005268:	0018      	movs	r0, r3
 800526a:	f003 fc15 	bl	8008a98 <HIDS_Init>
}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	46bd      	mov	sp, r7
 8005272:	b002      	add	sp, #8
 8005274:	bd80      	pop	{r7, pc}

08005276 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005276:	b580      	push	{r7, lr}
 8005278:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800527a:	f003 fc2f 	bl	8008adc <HIDS_StartMeasurement>
}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	0011      	movs	r1, r2
 8005294:	0018      	movs	r0, r3
 8005296:	f003 fcfd 	bl	8008c94 <HIDS_GetMeasurementValues>
 800529a:	0003      	movs	r3, r0
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 80052a8:	f003 fc98 	bl	8008bdc <HIDS_DeviceConnected>
 80052ac:	0003      	movs	r3, r0
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052ba:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <MX_I2C1_Init+0x78>)
 80052bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80052be:	4b1a      	ldr	r3, [pc, #104]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005330 <MX_I2C1_Init+0x7c>)
 80052c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80052c4:	4b18      	ldr	r3, [pc, #96]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052ca:	4b17      	ldr	r3, [pc, #92]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052d0:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80052d6:	4b14      	ldr	r3, [pc, #80]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052d8:	2200      	movs	r2, #0
 80052da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052dc:	4b12      	ldr	r3, [pc, #72]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052de:	2200      	movs	r2, #0
 80052e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052e2:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005328 <MX_I2C1_Init+0x74>)
 80052f0:	0018      	movs	r0, r3
 80052f2:	f005 f825 	bl	800a340 <HAL_I2C_Init>
 80052f6:	1e03      	subs	r3, r0, #0
 80052f8:	d001      	beq.n	80052fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80052fa:	f000 fb5b 	bl	80059b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <MX_I2C1_Init+0x74>)
 8005300:	2100      	movs	r1, #0
 8005302:	0018      	movs	r0, r3
 8005304:	f006 ff94 	bl	800c230 <HAL_I2CEx_ConfigAnalogFilter>
 8005308:	1e03      	subs	r3, r0, #0
 800530a:	d001      	beq.n	8005310 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800530c:	f000 fb52 	bl	80059b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <MX_I2C1_Init+0x74>)
 8005312:	2100      	movs	r1, #0
 8005314:	0018      	movs	r0, r3
 8005316:	f006 ffd7 	bl	800c2c8 <HAL_I2CEx_ConfigDigitalFilter>
 800531a:	1e03      	subs	r3, r0, #0
 800531c:	d001      	beq.n	8005322 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800531e:	f000 fb49 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000954 	.word	0x20000954
 800532c:	40005400 	.word	0x40005400
 8005330:	00503d58 	.word	0x00503d58

08005334 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005338:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <MX_I2C2_Init+0x74>)
 800533a:	4a1c      	ldr	r2, [pc, #112]	@ (80053ac <MX_I2C2_Init+0x78>)
 800533c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800533e:	4b1a      	ldr	r3, [pc, #104]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005340:	4a1b      	ldr	r2, [pc, #108]	@ (80053b0 <MX_I2C2_Init+0x7c>)
 8005342:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005344:	4b18      	ldr	r3, [pc, #96]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800534a:	4b17      	ldr	r3, [pc, #92]	@ (80053a8 <MX_I2C2_Init+0x74>)
 800534c:	2201      	movs	r2, #1
 800534e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005350:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005352:	2200      	movs	r2, #0
 8005354:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005356:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005358:	2200      	movs	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800535c:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <MX_I2C2_Init+0x74>)
 800535e:	2200      	movs	r2, #0
 8005360:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005362:	4b11      	ldr	r3, [pc, #68]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005364:	2200      	movs	r2, #0
 8005366:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005368:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <MX_I2C2_Init+0x74>)
 800536a:	2200      	movs	r2, #0
 800536c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800536e:	4b0e      	ldr	r3, [pc, #56]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005370:	0018      	movs	r0, r3
 8005372:	f004 ffe5 	bl	800a340 <HAL_I2C_Init>
 8005376:	1e03      	subs	r3, r0, #0
 8005378:	d001      	beq.n	800537e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800537a:	f000 fb1b 	bl	80059b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800537e:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005380:	2100      	movs	r1, #0
 8005382:	0018      	movs	r0, r3
 8005384:	f006 ff54 	bl	800c230 <HAL_I2CEx_ConfigAnalogFilter>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d001      	beq.n	8005390 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800538c:	f000 fb12 	bl	80059b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005390:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <MX_I2C2_Init+0x74>)
 8005392:	2100      	movs	r1, #0
 8005394:	0018      	movs	r0, r3
 8005396:	f006 ff97 	bl	800c2c8 <HAL_I2CEx_ConfigDigitalFilter>
 800539a:	1e03      	subs	r3, r0, #0
 800539c:	d001      	beq.n	80053a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800539e:	f000 fb09 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	200009a8 	.word	0x200009a8
 80053ac:	40005800 	.word	0x40005800
 80053b0:	00503d58 	.word	0x00503d58

080053b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b08b      	sub	sp, #44	@ 0x2c
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053bc:	2414      	movs	r4, #20
 80053be:	193b      	adds	r3, r7, r4
 80053c0:	0018      	movs	r0, r3
 80053c2:	2314      	movs	r3, #20
 80053c4:	001a      	movs	r2, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	f00c fcc8 	bl	8011d5c <memset>
  if(i2cHandle->Instance==I2C1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005548 <HAL_I2C_MspInit+0x194>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d000      	beq.n	80053d8 <HAL_I2C_MspInit+0x24>
 80053d6:	e083      	b.n	80054e0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053d8:	4b5c      	ldr	r3, [pc, #368]	@ (800554c <HAL_I2C_MspInit+0x198>)
 80053da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053dc:	4b5b      	ldr	r3, [pc, #364]	@ (800554c <HAL_I2C_MspInit+0x198>)
 80053de:	2102      	movs	r1, #2
 80053e0:	430a      	orrs	r2, r1
 80053e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80053e4:	4b59      	ldr	r3, [pc, #356]	@ (800554c <HAL_I2C_MspInit+0x198>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	2202      	movs	r2, #2
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053f0:	0021      	movs	r1, r4
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	22c0      	movs	r2, #192	@ 0xc0
 80053f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053f8:	187b      	adds	r3, r7, r1
 80053fa:	2212      	movs	r2, #18
 80053fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	2200      	movs	r2, #0
 8005402:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005404:	187b      	adds	r3, r7, r1
 8005406:	2203      	movs	r2, #3
 8005408:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800540a:	187b      	adds	r3, r7, r1
 800540c:	2201      	movs	r2, #1
 800540e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005410:	187b      	adds	r3, r7, r1
 8005412:	4a4f      	ldr	r2, [pc, #316]	@ (8005550 <HAL_I2C_MspInit+0x19c>)
 8005414:	0019      	movs	r1, r3
 8005416:	0010      	movs	r0, r2
 8005418:	f004 fd14 	bl	8009e44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800541c:	4b4b      	ldr	r3, [pc, #300]	@ (800554c <HAL_I2C_MspInit+0x198>)
 800541e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005420:	4b4a      	ldr	r3, [pc, #296]	@ (800554c <HAL_I2C_MspInit+0x198>)
 8005422:	2180      	movs	r1, #128	@ 0x80
 8005424:	0389      	lsls	r1, r1, #14
 8005426:	430a      	orrs	r2, r1
 8005428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800542a:	4b4a      	ldr	r3, [pc, #296]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 800542c:	4a4a      	ldr	r2, [pc, #296]	@ (8005558 <HAL_I2C_MspInit+0x1a4>)
 800542e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005430:	4b48      	ldr	r3, [pc, #288]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005432:	2206      	movs	r2, #6
 8005434:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005436:	4b47      	ldr	r3, [pc, #284]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005438:	2200      	movs	r2, #0
 800543a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800543c:	4b45      	ldr	r3, [pc, #276]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 800543e:	2200      	movs	r2, #0
 8005440:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005442:	4b44      	ldr	r3, [pc, #272]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005444:	2280      	movs	r2, #128	@ 0x80
 8005446:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005448:	4b42      	ldr	r3, [pc, #264]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 800544a:	2200      	movs	r2, #0
 800544c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800544e:	4b41      	ldr	r3, [pc, #260]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005450:	2200      	movs	r2, #0
 8005452:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005454:	4b3f      	ldr	r3, [pc, #252]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800545a:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 800545c:	2200      	movs	r2, #0
 800545e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005460:	4b3c      	ldr	r3, [pc, #240]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005462:	0018      	movs	r0, r3
 8005464:	f004 fa42 	bl	80098ec <HAL_DMA_Init>
 8005468:	1e03      	subs	r3, r0, #0
 800546a:	d001      	beq.n	8005470 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800546c:	f000 faa2 	bl	80059b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a38      	ldr	r2, [pc, #224]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005474:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005476:	4b37      	ldr	r3, [pc, #220]	@ (8005554 <HAL_I2C_MspInit+0x1a0>)
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800547c:	4b37      	ldr	r3, [pc, #220]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 800547e:	4a38      	ldr	r2, [pc, #224]	@ (8005560 <HAL_I2C_MspInit+0x1ac>)
 8005480:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005482:	4b36      	ldr	r3, [pc, #216]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 8005484:	2206      	movs	r2, #6
 8005486:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005488:	4b34      	ldr	r3, [pc, #208]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 800548a:	2210      	movs	r2, #16
 800548c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800548e:	4b33      	ldr	r3, [pc, #204]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 8005490:	2200      	movs	r2, #0
 8005492:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005494:	4b31      	ldr	r3, [pc, #196]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 8005496:	2280      	movs	r2, #128	@ 0x80
 8005498:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800549a:	4b30      	ldr	r3, [pc, #192]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054a0:	4b2e      	ldr	r3, [pc, #184]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80054a6:	4b2d      	ldr	r3, [pc, #180]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054ac:	4b2b      	ldr	r3, [pc, #172]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80054b2:	4b2a      	ldr	r3, [pc, #168]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 80054b4:	0018      	movs	r0, r3
 80054b6:	f004 fa19 	bl	80098ec <HAL_DMA_Init>
 80054ba:	1e03      	subs	r3, r0, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80054be:	f000 fa79 	bl	80059b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a25      	ldr	r2, [pc, #148]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 80054c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80054c8:	4b24      	ldr	r3, [pc, #144]	@ (800555c <HAL_I2C_MspInit+0x1a8>)
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	2017      	movs	r0, #23
 80054d4:	f004 f9d8 	bl	8009888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80054d8:	2017      	movs	r0, #23
 80054da:	f004 f9ea 	bl	80098b2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80054de:	e02e      	b.n	800553e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005564 <HAL_I2C_MspInit+0x1b0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d129      	bne.n	800553e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ea:	4b18      	ldr	r3, [pc, #96]	@ (800554c <HAL_I2C_MspInit+0x198>)
 80054ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ee:	4b17      	ldr	r3, [pc, #92]	@ (800554c <HAL_I2C_MspInit+0x198>)
 80054f0:	2102      	movs	r1, #2
 80054f2:	430a      	orrs	r2, r1
 80054f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80054f6:	4b15      	ldr	r3, [pc, #84]	@ (800554c <HAL_I2C_MspInit+0x198>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	2202      	movs	r2, #2
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005502:	2114      	movs	r1, #20
 8005504:	187b      	adds	r3, r7, r1
 8005506:	22c0      	movs	r2, #192	@ 0xc0
 8005508:	0112      	lsls	r2, r2, #4
 800550a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800550c:	187b      	adds	r3, r7, r1
 800550e:	2212      	movs	r2, #18
 8005510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	187b      	adds	r3, r7, r1
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005518:	187b      	adds	r3, r7, r1
 800551a:	2203      	movs	r2, #3
 800551c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800551e:	187b      	adds	r3, r7, r1
 8005520:	2206      	movs	r2, #6
 8005522:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	187b      	adds	r3, r7, r1
 8005526:	4a0a      	ldr	r2, [pc, #40]	@ (8005550 <HAL_I2C_MspInit+0x19c>)
 8005528:	0019      	movs	r1, r3
 800552a:	0010      	movs	r0, r2
 800552c:	f004 fc8a 	bl	8009e44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005530:	4b06      	ldr	r3, [pc, #24]	@ (800554c <HAL_I2C_MspInit+0x198>)
 8005532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <HAL_I2C_MspInit+0x198>)
 8005536:	2180      	movs	r1, #128	@ 0x80
 8005538:	03c9      	lsls	r1, r1, #15
 800553a:	430a      	orrs	r2, r1
 800553c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800553e:	46c0      	nop			@ (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b00b      	add	sp, #44	@ 0x2c
 8005544:	bd90      	pop	{r4, r7, pc}
 8005546:	46c0      	nop			@ (mov r8, r8)
 8005548:	40005400 	.word	0x40005400
 800554c:	40021000 	.word	0x40021000
 8005550:	50000400 	.word	0x50000400
 8005554:	200009fc 	.word	0x200009fc
 8005558:	40020030 	.word	0x40020030
 800555c:	20000a44 	.word	0x20000a44
 8005560:	4002001c 	.word	0x4002001c
 8005564:	40005800 	.word	0x40005800

08005568 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800556c:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 800556e:	4a12      	ldr	r2, [pc, #72]	@ (80055b8 <MX_I2S2_Init+0x50>)
 8005570:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 8005574:	22c0      	movs	r2, #192	@ 0xc0
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800557a:	4b0e      	ldr	r3, [pc, #56]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 800557c:	2210      	movs	r2, #16
 800557e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005580:	4b0c      	ldr	r3, [pc, #48]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 8005582:	2205      	movs	r2, #5
 8005584:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 8005588:	2280      	movs	r2, #128	@ 0x80
 800558a:	0092      	lsls	r2, r2, #2
 800558c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 8005590:	22fa      	movs	r2, #250	@ 0xfa
 8005592:	0152      	lsls	r2, r2, #5
 8005594:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005596:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 8005598:	2208      	movs	r2, #8
 800559a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800559c:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <MX_I2S2_Init+0x4c>)
 800559e:	0018      	movs	r0, r3
 80055a0:	f006 fede 	bl	800c360 <HAL_I2S_Init>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d001      	beq.n	80055ac <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 80055a8:	f000 fa04 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	20000a8c 	.word	0x20000a8c
 80055b8:	40003800 	.word	0x40003800

080055bc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b08b      	sub	sp, #44	@ 0x2c
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c4:	2414      	movs	r4, #20
 80055c6:	193b      	adds	r3, r7, r4
 80055c8:	0018      	movs	r0, r3
 80055ca:	2314      	movs	r3, #20
 80055cc:	001a      	movs	r2, r3
 80055ce:	2100      	movs	r1, #0
 80055d0:	f00c fbc4 	bl	8011d5c <memset>
  if(i2sHandle->Instance==SPI2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a3e      	ldr	r2, [pc, #248]	@ (80056d4 <HAL_I2S_MspInit+0x118>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d175      	bne.n	80056ca <HAL_I2S_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055de:	4b3e      	ldr	r3, [pc, #248]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 80055e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055e2:	4b3d      	ldr	r3, [pc, #244]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 80055e4:	2180      	movs	r1, #128	@ 0x80
 80055e6:	01c9      	lsls	r1, r1, #7
 80055e8:	430a      	orrs	r2, r1
 80055ea:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ec:	4b3a      	ldr	r3, [pc, #232]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 80055ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f0:	4b39      	ldr	r3, [pc, #228]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 80055f2:	2104      	movs	r1, #4
 80055f4:	430a      	orrs	r2, r1
 80055f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055f8:	4b37      	ldr	r3, [pc, #220]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	2204      	movs	r2, #4
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005604:	4b34      	ldr	r3, [pc, #208]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 8005606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005608:	4b33      	ldr	r3, [pc, #204]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 800560a:	2102      	movs	r1, #2
 800560c:	430a      	orrs	r2, r1
 800560e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005610:	4b31      	ldr	r3, [pc, #196]	@ (80056d8 <HAL_I2S_MspInit+0x11c>)
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	2202      	movs	r2, #2
 8005616:	4013      	ands	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> I2S2_MCK
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800561c:	193b      	adds	r3, r7, r4
 800561e:	2204      	movs	r2, #4
 8005620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005622:	193b      	adds	r3, r7, r4
 8005624:	2202      	movs	r2, #2
 8005626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	193b      	adds	r3, r7, r4
 800562a:	2200      	movs	r2, #0
 800562c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562e:	193b      	adds	r3, r7, r4
 8005630:	2200      	movs	r2, #0
 8005632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI2;
 8005634:	193b      	adds	r3, r7, r4
 8005636:	2202      	movs	r2, #2
 8005638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800563a:	193b      	adds	r3, r7, r4
 800563c:	4a27      	ldr	r2, [pc, #156]	@ (80056dc <HAL_I2S_MspInit+0x120>)
 800563e:	0019      	movs	r1, r3
 8005640:	0010      	movs	r0, r2
 8005642:	f004 fbff 	bl	8009e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005646:	0021      	movs	r1, r4
 8005648:	187b      	adds	r3, r7, r1
 800564a:	22b0      	movs	r2, #176	@ 0xb0
 800564c:	0212      	lsls	r2, r2, #8
 800564e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005650:	187b      	adds	r3, r7, r1
 8005652:	2202      	movs	r2, #2
 8005654:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005656:	187b      	adds	r3, r7, r1
 8005658:	2200      	movs	r2, #0
 800565a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565c:	187b      	adds	r3, r7, r1
 800565e:	2200      	movs	r2, #0
 8005660:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005662:	187b      	adds	r3, r7, r1
 8005664:	2200      	movs	r2, #0
 8005666:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005668:	187b      	adds	r3, r7, r1
 800566a:	4a1d      	ldr	r2, [pc, #116]	@ (80056e0 <HAL_I2S_MspInit+0x124>)
 800566c:	0019      	movs	r1, r3
 800566e:	0010      	movs	r0, r2
 8005670:	f004 fbe8 	bl	8009e44 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005674:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 8005676:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <HAL_I2S_MspInit+0x12c>)
 8005678:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800567a:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 800567c:	2202      	movs	r2, #2
 800567e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005680:	4b18      	ldr	r3, [pc, #96]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005686:	4b17      	ldr	r3, [pc, #92]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 8005688:	2200      	movs	r2, #0
 800568a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800568c:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 800568e:	2280      	movs	r2, #128	@ 0x80
 8005690:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 8005694:	2280      	movs	r2, #128	@ 0x80
 8005696:	0052      	lsls	r2, r2, #1
 8005698:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 800569c:	2280      	movs	r2, #128	@ 0x80
 800569e:	00d2      	lsls	r2, r2, #3
 80056a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80056a2:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 80056a4:	2220      	movs	r2, #32
 80056a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056a8:	4b0e      	ldr	r3, [pc, #56]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 80056b0:	0018      	movs	r0, r3
 80056b2:	f004 f91b 	bl	80098ec <HAL_DMA_Init>
 80056b6:	1e03      	subs	r3, r0, #0
 80056b8:	d001      	beq.n	80056be <HAL_I2S_MspInit+0x102>
    {
      Error_Handler();
 80056ba:	f000 f97b 	bl	80059b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a08      	ldr	r2, [pc, #32]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80056c4:	4b07      	ldr	r3, [pc, #28]	@ (80056e4 <HAL_I2S_MspInit+0x128>)
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b00b      	add	sp, #44	@ 0x2c
 80056d0:	bd90      	pop	{r4, r7, pc}
 80056d2:	46c0      	nop			@ (mov r8, r8)
 80056d4:	40003800 	.word	0x40003800
 80056d8:	40021000 	.word	0x40021000
 80056dc:	50000800 	.word	0x50000800
 80056e0:	50000400 	.word	0x50000400
 80056e4:	20000ac8 	.word	0x20000ac8
 80056e8:	40020044 	.word	0x40020044

080056ec <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005734 <HAL_I2S_MspDeInit+0x48>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d116      	bne.n	800572c <HAL_I2S_MspDeInit+0x40>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80056fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005738 <HAL_I2S_MspDeInit+0x4c>)
 8005700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <HAL_I2S_MspDeInit+0x4c>)
 8005704:	490d      	ldr	r1, [pc, #52]	@ (800573c <HAL_I2S_MspDeInit+0x50>)
 8005706:	400a      	ands	r2, r1
 8005708:	639a      	str	r2, [r3, #56]	@ 0x38
    PC2     ------> I2S2_MCK
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 800570a:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <HAL_I2S_MspDeInit+0x54>)
 800570c:	2104      	movs	r1, #4
 800570e:	0018      	movs	r0, r3
 8005710:	f004 fd16 	bl	800a140 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8005714:	23b0      	movs	r3, #176	@ 0xb0
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <HAL_I2S_MspDeInit+0x58>)
 800571a:	0019      	movs	r1, r3
 800571c:	0010      	movs	r0, r2
 800571e:	f004 fd0f 	bl	800a140 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	0018      	movs	r0, r3
 8005728:	f004 f958 	bl	80099dc <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800572c:	46c0      	nop			@ (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b002      	add	sp, #8
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40003800 	.word	0x40003800
 8005738:	40021000 	.word	0x40021000
 800573c:	ffffbfff 	.word	0xffffbfff
 8005740:	50000800 	.word	0x50000800
 8005744:	50000400 	.word	0x50000400

08005748 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  testDone = true;
 800574c:	4b35      	ldr	r3, [pc, #212]	@ (8005824 <SetTestDone+0xdc>)
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8005752:	23fa      	movs	r3, #250	@ 0xfa
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	0018      	movs	r0, r3
 8005758:	f003 fc48 	bl	8008fec <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800575c:	4b32      	ldr	r3, [pc, #200]	@ (8005828 <SetTestDone+0xe0>)
 800575e:	2201      	movs	r2, #1
 8005760:	2101      	movs	r1, #1
 8005762:	0018      	movs	r0, r3
 8005764:	f004 fdce 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	482e      	ldr	r0, [pc, #184]	@ (8005828 <SetTestDone+0xe0>)
 800576e:	2201      	movs	r2, #1
 8005770:	0019      	movs	r1, r3
 8005772:	f004 fdc7 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8005776:	2380      	movs	r3, #128	@ 0x80
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	482b      	ldr	r0, [pc, #172]	@ (8005828 <SetTestDone+0xe0>)
 800577c:	2200      	movs	r2, #0
 800577e:	0019      	movs	r1, r3
 8005780:	f004 fdc0 	bl	800a304 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	05db      	lsls	r3, r3, #23
 8005788:	22fa      	movs	r2, #250	@ 0xfa
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800578e:	2380      	movs	r3, #128	@ 0x80
 8005790:	05db      	lsls	r3, r3, #23
 8005792:	22fa      	movs	r2, #250	@ 0xfa
 8005794:	0112      	lsls	r2, r2, #4
 8005796:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	05db      	lsls	r3, r3, #23
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 80057a0:	4b22      	ldr	r3, [pc, #136]	@ (800582c <SetTestDone+0xe4>)
 80057a2:	22fa      	movs	r2, #250	@ 0xfa
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80057a8:	4b20      	ldr	r3, [pc, #128]	@ (800582c <SetTestDone+0xe4>)
 80057aa:	22fa      	movs	r2, #250	@ 0xfa
 80057ac:	0112      	lsls	r2, r2, #4
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 80057b0:	4b1e      	ldr	r3, [pc, #120]	@ (800582c <SetTestDone+0xe4>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 80057b6:	23fa      	movs	r3, #250	@ 0xfa
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f003 fc16 	bl	8008fec <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80057c0:	4b19      	ldr	r3, [pc, #100]	@ (8005828 <SetTestDone+0xe0>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	2101      	movs	r1, #1
 80057c6:	0018      	movs	r0, r3
 80057c8:	f004 fd9c 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80057cc:	2380      	movs	r3, #128	@ 0x80
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4815      	ldr	r0, [pc, #84]	@ (8005828 <SetTestDone+0xe0>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	0019      	movs	r1, r3
 80057d6:	f004 fd95 	bl	800a304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4812      	ldr	r0, [pc, #72]	@ (8005828 <SetTestDone+0xe0>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	0019      	movs	r1, r3
 80057e4:	f004 fd8e 	bl	800a304 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 80057e8:	2380      	movs	r3, #128	@ 0x80
 80057ea:	05db      	lsls	r3, r3, #23
 80057ec:	22fa      	movs	r2, #250	@ 0xfa
 80057ee:	0112      	lsls	r2, r2, #4
 80057f0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80057f2:	2380      	movs	r3, #128	@ 0x80
 80057f4:	05db      	lsls	r3, r3, #23
 80057f6:	22fa      	movs	r2, #250	@ 0xfa
 80057f8:	0112      	lsls	r2, r2, #4
 80057fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80057fc:	2380      	movs	r3, #128	@ 0x80
 80057fe:	05db      	lsls	r3, r3, #23
 8005800:	22fa      	movs	r2, #250	@ 0xfa
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8005806:	4b09      	ldr	r3, [pc, #36]	@ (800582c <SetTestDone+0xe4>)
 8005808:	22fa      	movs	r2, #250	@ 0xfa
 800580a:	0112      	lsls	r2, r2, #4
 800580c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800580e:	4b07      	ldr	r3, [pc, #28]	@ (800582c <SetTestDone+0xe4>)
 8005810:	22fa      	movs	r2, #250	@ 0xfa
 8005812:	0112      	lsls	r2, r2, #4
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005816:	4b05      	ldr	r3, [pc, #20]	@ (800582c <SetTestDone+0xe4>)
 8005818:	22fa      	movs	r2, #250	@ 0xfa
 800581a:	0112      	lsls	r2, r2, #4
 800581c:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 800581e:	46c0      	nop			@ (mov r8, r8)
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000b10 	.word	0x20000b10
 8005828:	50000400 	.word	0x50000400
 800582c:	40000400 	.word	0x40000400

08005830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005836:	f003 fb69 	bl	8008f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800583a:	f000 f849 	bl	80058d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800583e:	f7ff fbbf 	bl	8004fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005842:	f7ff fb37 	bl	8004eb4 <MX_DMA_Init>
  MX_I2C1_Init();
 8005846:	f7ff fd35 	bl	80052b4 <MX_I2C1_Init>
  MX_I2S2_Init();
 800584a:	f7ff fe8d 	bl	8005568 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800584e:	f002 fdd5 	bl	80083fc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8005852:	f7ff fd6f 	bl	8005334 <MX_I2C2_Init>
  MX_USB_PCD_Init();
 8005856:	f002 ff33 	bl	80086c0 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800585a:	f002 fc51 	bl	8008100 <MX_TIM2_Init>
  MX_TIM3_Init();
 800585e:	f002 fcc3 	bl	80081e8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8005862:	f002 fdff 	bl	8008464 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8005866:	f7ff fa73 	bl	8004d50 <MX_ADC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800586a:	4a12      	ldr	r2, [pc, #72]	@ (80058b4 <main+0x84>)
 800586c:	4b12      	ldr	r3, [pc, #72]	@ (80058b8 <main+0x88>)
 800586e:	0011      	movs	r1, r2
 8005870:	0018      	movs	r0, r3
 8005872:	f7ff fca3 	bl	80051bc <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8005876:	f003 fbaf 	bl	8008fd8 <HAL_GetTick>
 800587a:	0003      	movs	r3, r0
 800587c:	22fa      	movs	r2, #250	@ 0xfa
 800587e:	0092      	lsls	r2, r2, #2
 8005880:	4694      	mov	ip, r2
 8005882:	4463      	add	r3, ip
 8005884:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8005886:	2003      	movs	r0, #3
 8005888:	f003 f82a 	bl	80088e0 <SetVerboseLevel>
  BinaryReleaseInfo();
 800588c:	f003 f840 	bl	8008910 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8005890:	4b0a      	ldr	r3, [pc, #40]	@ (80058bc <main+0x8c>)
 8005892:	4a0b      	ldr	r2, [pc, #44]	@ (80058c0 <main+0x90>)
 8005894:	490b      	ldr	r1, [pc, #44]	@ (80058c4 <main+0x94>)
 8005896:	480c      	ldr	r0, [pc, #48]	@ (80058c8 <main+0x98>)
 8005898:	f7ff fb32 	bl	8004f00 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone){
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <main+0x9c>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <main+0x7e>
      UpkeepGadget();
 80058a4:	f7ff fb59 	bl	8004f5a <UpkeepGadget>
      ESP_Upkeep();
 80058a8:	f7ff f89e 	bl	80049e8 <ESP_Upkeep>
 80058ac:	e7f6      	b.n	800589c <main+0x6c>
    }
    else{
      Gadget_Test();
 80058ae:	f7ff fb4d 	bl	8004f4c <Gadget_Test>
    if(testDone){
 80058b2:	e7f3      	b.n	800589c <main+0x6c>
 80058b4:	200028c8 	.word	0x200028c8
 80058b8:	20002888 	.word	0x20002888
 80058bc:	200008f8 	.word	0x200008f8
 80058c0:	200029c0 	.word	0x200029c0
 80058c4:	20000a8c 	.word	0x20000a8c
 80058c8:	20000954 	.word	0x20000954
 80058cc:	20000b10 	.word	0x20000b10

080058d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058d0:	b590      	push	{r4, r7, lr}
 80058d2:	b09d      	sub	sp, #116	@ 0x74
 80058d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058d6:	2438      	movs	r4, #56	@ 0x38
 80058d8:	193b      	adds	r3, r7, r4
 80058da:	0018      	movs	r0, r3
 80058dc:	2338      	movs	r3, #56	@ 0x38
 80058de:	001a      	movs	r2, r3
 80058e0:	2100      	movs	r1, #0
 80058e2:	f00c fa3b 	bl	8011d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058e6:	2324      	movs	r3, #36	@ 0x24
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	0018      	movs	r0, r3
 80058ec:	2314      	movs	r3, #20
 80058ee:	001a      	movs	r2, r3
 80058f0:	2100      	movs	r1, #0
 80058f2:	f00c fa33 	bl	8011d5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80058f6:	003b      	movs	r3, r7
 80058f8:	0018      	movs	r0, r3
 80058fa:	2324      	movs	r3, #36	@ 0x24
 80058fc:	001a      	movs	r2, r3
 80058fe:	2100      	movs	r1, #0
 8005900:	f00c fa2c 	bl	8011d5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005904:	4b29      	ldr	r3, [pc, #164]	@ (80059ac <SystemClock_Config+0xdc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a29      	ldr	r2, [pc, #164]	@ (80059b0 <SystemClock_Config+0xe0>)
 800590a:	401a      	ands	r2, r3
 800590c:	4b27      	ldr	r3, [pc, #156]	@ (80059ac <SystemClock_Config+0xdc>)
 800590e:	2180      	movs	r1, #128	@ 0x80
 8005910:	0109      	lsls	r1, r1, #4
 8005912:	430a      	orrs	r2, r1
 8005914:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005916:	0021      	movs	r1, r4
 8005918:	187b      	adds	r3, r7, r1
 800591a:	2222      	movs	r2, #34	@ 0x22
 800591c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800591e:	187b      	adds	r3, r7, r1
 8005920:	2201      	movs	r2, #1
 8005922:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005924:	187b      	adds	r3, r7, r1
 8005926:	2210      	movs	r2, #16
 8005928:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800592a:	187b      	adds	r3, r7, r1
 800592c:	2201      	movs	r2, #1
 800592e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005930:	187b      	adds	r3, r7, r1
 8005932:	2200      	movs	r2, #0
 8005934:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005936:	187b      	adds	r3, r7, r1
 8005938:	0018      	movs	r0, r3
 800593a:	f007 f989 	bl	800cc50 <HAL_RCC_OscConfig>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d001      	beq.n	8005946 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005942:	f000 f837 	bl	80059b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005946:	2124      	movs	r1, #36	@ 0x24
 8005948:	187b      	adds	r3, r7, r1
 800594a:	220f      	movs	r2, #15
 800594c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800594e:	187b      	adds	r3, r7, r1
 8005950:	2201      	movs	r2, #1
 8005952:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005954:	187b      	adds	r3, r7, r1
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800595a:	187b      	adds	r3, r7, r1
 800595c:	2200      	movs	r2, #0
 800595e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005960:	187b      	adds	r3, r7, r1
 8005962:	2200      	movs	r2, #0
 8005964:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005966:	187b      	adds	r3, r7, r1
 8005968:	2100      	movs	r1, #0
 800596a:	0018      	movs	r0, r3
 800596c:	f007 fd44 	bl	800d3f8 <HAL_RCC_ClockConfig>
 8005970:	1e03      	subs	r3, r0, #0
 8005972:	d001      	beq.n	8005978 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005974:	f000 f81e 	bl	80059b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005978:	003b      	movs	r3, r7
 800597a:	2249      	movs	r2, #73	@ 0x49
 800597c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800597e:	003b      	movs	r3, r7
 8005980:	2200      	movs	r2, #0
 8005982:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005984:	003b      	movs	r3, r7
 8005986:	2200      	movs	r2, #0
 8005988:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800598a:	003b      	movs	r3, r7
 800598c:	2280      	movs	r2, #128	@ 0x80
 800598e:	04d2      	lsls	r2, r2, #19
 8005990:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005992:	003b      	movs	r3, r7
 8005994:	0018      	movs	r0, r3
 8005996:	f007 ff53 	bl	800d840 <HAL_RCCEx_PeriphCLKConfig>
 800599a:	1e03      	subs	r3, r0, #0
 800599c:	d001      	beq.n	80059a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800599e:	f000 f809 	bl	80059b4 <Error_Handler>
  }
}
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b01d      	add	sp, #116	@ 0x74
 80059a8:	bd90      	pop	{r4, r7, pc}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	40007000 	.word	0x40007000
 80059b0:	ffffe7ff 	.word	0xffffe7ff

080059b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059b8:	b672      	cpsid	i
}
 80059ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059bc:	46c0      	nop			@ (mov r8, r8)
 80059be:	e7fd      	b.n	80059bc <Error_Handler+0x8>

080059c0 <HT_StartMeasurementWrapper>:
static EnabledMeasurements MeasEnabled;
static MeasurementTested MeasTest;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80059c4:	f7ff fc57 	bl	8005276 <HT_StartMeasurement>
}
 80059c8:	46c0      	nop			@ (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80059d4:	4a04      	ldr	r2, [pc, #16]	@ (80059e8 <HT_IsMeasurementDoneWrapper+0x18>)
 80059d6:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <HT_IsMeasurementDoneWrapper+0x1c>)
 80059d8:	0011      	movs	r1, r2
 80059da:	0018      	movs	r0, r3
 80059dc:	f7ff fc52 	bl	8005284 <HT_GetMeasurementValues>
 80059e0:	0003      	movs	r3, r0
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000b18 	.word	0x20000b18
 80059ec:	20000b14 	.word	0x20000b14

080059f0 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 80059f4:	f7ff fac7 	bl	8004f86 <Gas_StartMeasurement>
}
 80059f8:	46c0      	nop			@ (mov r8, r8)
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005a04:	4b03      	ldr	r3, [pc, #12]	@ (8005a14 <VOC_IsMeasurementDoneWrapper+0x14>)
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7ff fac4 	bl	8004f94 <Gas_GetMeasurementValues>
 8005a0c:	0003      	movs	r3, r0
}
 8005a0e:	0018      	movs	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000b1c 	.word	0x20000b1c

08005a18 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
}
 8005a1c:	46c0      	nop			@ (mov r8, r8)
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005a22:	b580      	push	{r7, lr}
 8005a24:	af00      	add	r7, sp, #0
  return true;
 8005a26:	2301      	movs	r3, #1
}
 8005a28:	0018      	movs	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128); // Dont init like this.
 8005a32:	23fa      	movs	r3, #250	@ 0xfa
 8005a34:	015b      	lsls	r3, r3, #5
 8005a36:	2180      	movs	r1, #128	@ 0x80
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fc8f 	bl	800635c <MIC_Start>
}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005a48:	f000 fe1c 	bl	8006684 <MIC_MeasurementDone>
 8005a4c:	0003      	movs	r3, r0
}
 8005a4e:	0018      	movs	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <MIC_IsTestMeasurementDoneWrapper>:

static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8005a58:	f000 fe32 	bl	80066c0 <MIC_TestMeasurementDone>
 8005a5c:	0003      	movs	r3, r0
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <testInit>:
void testInit(){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8005a68:	4b07      	ldr	r3, [pc, #28]	@ (8005a88 <testInit+0x24>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8005a6e:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <testInit+0x24>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8005a74:	4b04      	ldr	r3, [pc, #16]	@ (8005a88 <testInit+0x24>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8005a7a:	4b03      	ldr	r3, [pc, #12]	@ (8005a88 <testInit+0x24>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	705a      	strb	r2, [r3, #1]
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	20000b68 	.word	0x20000b68

08005a8c <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b096      	sub	sp, #88	@ 0x58
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005a98:	4b84      	ldr	r3, [pc, #528]	@ (8005cac <Meas_Init+0x220>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
  testInit();
 8005a9e:	f7ff ffe1 	bl	8005a64 <testInit>
  batteryInit(ADC_HANDLER);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f7fd fd79 	bl	800359c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005aaa:	4b81      	ldr	r3, [pc, #516]	@ (8005cb0 <Meas_Init+0x224>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <Meas_Init+0x2e>
 8005ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb0 <Meas_Init+0x224>)
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d072      	beq.n	8005ba0 <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7ff f8d5 	bl	8004c6c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005ac2:	f7ff fbef 	bl	80052a4 <HT_DeviceConnected>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	001a      	movs	r2, r3
 8005aca:	2301      	movs	r3, #1
 8005acc:	4053      	eors	r3, r2
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <Meas_Init+0x62>
       Error("Humidity / Temperature sensor NOT connected!");
 8005ad4:	4a77      	ldr	r2, [pc, #476]	@ (8005cb4 <Meas_Init+0x228>)
 8005ad6:	4b78      	ldr	r3, [pc, #480]	@ (8005cb8 <Meas_Init+0x22c>)
 8005ad8:	0019      	movs	r1, r3
 8005ada:	2001      	movs	r0, #1
 8005adc:	f002 fe84 	bl	80087e8 <CreateLine>
       MeasTest.HT_Tested = false;
 8005ae0:	4b76      	ldr	r3, [pc, #472]	@ (8005cbc <Meas_Init+0x230>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8005ae6:	4b72      	ldr	r3, [pc, #456]	@ (8005cb0 <Meas_Init+0x224>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e008      	b.n	8005b00 <Meas_Init+0x74>
//       TIM2 -> CCR3 = 4000;
//       TIM2 -> CCR4 = 4000;
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8005aee:	4b73      	ldr	r3, [pc, #460]	@ (8005cbc <Meas_Init+0x230>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8005af4:	4a72      	ldr	r2, [pc, #456]	@ (8005cc0 <Meas_Init+0x234>)
 8005af6:	4b73      	ldr	r3, [pc, #460]	@ (8005cc4 <Meas_Init+0x238>)
 8005af8:	0019      	movs	r1, r3
 8005afa:	2003      	movs	r0, #3
 8005afc:	f002 fe74 	bl	80087e8 <CreateLine>
//      TIM2 -> CCR1 = 4000;
//      TIM2 -> CCR3 = 0;
//      TIM2 -> CCR4 = 4000;
    }
    if(!Gas_DeviceConnected()) {
 8005b00:	f7ff fa55 	bl	8004fae <Gas_DeviceConnected>
 8005b04:	0003      	movs	r3, r0
 8005b06:	001a      	movs	r2, r3
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4053      	eors	r3, r2
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <Meas_Init+0xa0>
      MeasTest.VOC_Tested = false;
 8005b12:	4b6a      	ldr	r3, [pc, #424]	@ (8005cbc <Meas_Init+0x230>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8005b18:	4a6b      	ldr	r2, [pc, #428]	@ (8005cc8 <Meas_Init+0x23c>)
 8005b1a:	4b67      	ldr	r3, [pc, #412]	@ (8005cb8 <Meas_Init+0x22c>)
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f002 fe62 	bl	80087e8 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
//       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
//       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
       MeasEnabled.VOC_measurementEnabled = false;
 8005b24:	4b62      	ldr	r3, [pc, #392]	@ (8005cb0 <Meas_Init+0x224>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	705a      	strb	r2, [r3, #1]
 8005b2a:	e008      	b.n	8005b3e <Meas_Init+0xb2>
    }else{
      MeasTest.VOC_Tested = true;
 8005b2c:	4b63      	ldr	r3, [pc, #396]	@ (8005cbc <Meas_Init+0x230>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8005b32:	4a66      	ldr	r2, [pc, #408]	@ (8005ccc <Meas_Init+0x240>)
 8005b34:	4b63      	ldr	r3, [pc, #396]	@ (8005cc4 <Meas_Init+0x238>)
 8005b36:	0019      	movs	r1, r3
 8005b38:	2003      	movs	r0, #3
 8005b3a:	f002 fe55 	bl	80087e8 <CreateLine>
      // HT Device is connected, turning led on GREEN.
//      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8005b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cbc <Meas_Init+0x230>)
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d018      	beq.n	8005b78 <Meas_Init+0xec>
 8005b46:	4b5d      	ldr	r3, [pc, #372]	@ (8005cbc <Meas_Init+0x230>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d014      	beq.n	8005b78 <Meas_Init+0xec>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005b4e:	4b60      	ldr	r3, [pc, #384]	@ (8005cd0 <Meas_Init+0x244>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	2101      	movs	r1, #1
 8005b54:	0018      	movs	r0, r3
 8005b56:	f004 fbd5 	bl	800a304 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005b5a:	2380      	movs	r3, #128	@ 0x80
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	485c      	ldr	r0, [pc, #368]	@ (8005cd0 <Meas_Init+0x244>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	0019      	movs	r1, r3
 8005b64:	f004 fbce 	bl	800a304 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4858      	ldr	r0, [pc, #352]	@ (8005cd0 <Meas_Init+0x244>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	0019      	movs	r1, r3
 8005b72:	f004 fbc7 	bl	800a304 <HAL_GPIO_WritePin>
 8005b76:	e013      	b.n	8005ba0 <Meas_Init+0x114>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005b78:	4b55      	ldr	r3, [pc, #340]	@ (8005cd0 <Meas_Init+0x244>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f004 fbc0 	bl	800a304 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005b84:	2380      	movs	r3, #128	@ 0x80
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4851      	ldr	r0, [pc, #324]	@ (8005cd0 <Meas_Init+0x244>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	f004 fbb9 	bl	800a304 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005b92:	2380      	movs	r3, #128	@ 0x80
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	484e      	ldr	r0, [pc, #312]	@ (8005cd0 <Meas_Init+0x244>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	f004 fbb2 	bl	800a304 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005ba0:	4b43      	ldr	r3, [pc, #268]	@ (8005cb0 <Meas_Init+0x224>)
 8005ba2:	78db      	ldrb	r3, [r3, #3]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <Meas_Init+0x128>
    MIC_Init(micI2s);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 fa44 	bl	8006038 <MIC_Init>
    Meas_TestStart();
 8005bb0:	f000 f9e8 	bl	8005f84 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8005bb4:	2557      	movs	r5, #87	@ 0x57
 8005bb6:	197b      	adds	r3, r7, r5
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005bbc:	197b      	adds	r3, r7, r5
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	197a      	adds	r2, r7, r5
 8005bc2:	1c59      	adds	r1, r3, #1
 8005bc4:	7011      	strb	r1, [r2, #0]
 8005bc6:	4a3a      	ldr	r2, [pc, #232]	@ (8005cb0 <Meas_Init+0x224>)
 8005bc8:	7814      	ldrb	r4, [r2, #0]
 8005bca:	4a42      	ldr	r2, [pc, #264]	@ (8005cd4 <Meas_Init+0x248>)
 8005bcc:	0119      	lsls	r1, r3, #4
 8005bce:	4842      	ldr	r0, [pc, #264]	@ (8005cd8 <Meas_Init+0x24c>)
 8005bd0:	5088      	str	r0, [r1, r2]
 8005bd2:	4940      	ldr	r1, [pc, #256]	@ (8005cd4 <Meas_Init+0x248>)
 8005bd4:	011a      	lsls	r2, r3, #4
 8005bd6:	188a      	adds	r2, r1, r2
 8005bd8:	3204      	adds	r2, #4
 8005bda:	4940      	ldr	r1, [pc, #256]	@ (8005cdc <Meas_Init+0x250>)
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	493d      	ldr	r1, [pc, #244]	@ (8005cd4 <Meas_Init+0x248>)
 8005be0:	011a      	lsls	r2, r3, #4
 8005be2:	188a      	adds	r2, r1, r2
 8005be4:	3208      	adds	r2, #8
 8005be6:	493e      	ldr	r1, [pc, #248]	@ (8005ce0 <Meas_Init+0x254>)
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	4a3a      	ldr	r2, [pc, #232]	@ (8005cd4 <Meas_Init+0x248>)
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	1c22      	adds	r2, r4, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005bf6:	197b      	adds	r3, r7, r5
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	197a      	adds	r2, r7, r5
 8005bfc:	1c59      	adds	r1, r3, #1
 8005bfe:	7011      	strb	r1, [r2, #0]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	@ (8005cb0 <Meas_Init+0x224>)
 8005c02:	7854      	ldrb	r4, [r2, #1]
 8005c04:	4a33      	ldr	r2, [pc, #204]	@ (8005cd4 <Meas_Init+0x248>)
 8005c06:	0119      	lsls	r1, r3, #4
 8005c08:	4836      	ldr	r0, [pc, #216]	@ (8005ce4 <Meas_Init+0x258>)
 8005c0a:	5088      	str	r0, [r1, r2]
 8005c0c:	4931      	ldr	r1, [pc, #196]	@ (8005cd4 <Meas_Init+0x248>)
 8005c0e:	011a      	lsls	r2, r3, #4
 8005c10:	188a      	adds	r2, r1, r2
 8005c12:	3204      	adds	r2, #4
 8005c14:	4934      	ldr	r1, [pc, #208]	@ (8005ce8 <Meas_Init+0x25c>)
 8005c16:	6011      	str	r1, [r2, #0]
 8005c18:	492e      	ldr	r1, [pc, #184]	@ (8005cd4 <Meas_Init+0x248>)
 8005c1a:	011a      	lsls	r2, r3, #4
 8005c1c:	188a      	adds	r2, r1, r2
 8005c1e:	3208      	adds	r2, #8
 8005c20:	4932      	ldr	r1, [pc, #200]	@ (8005cec <Meas_Init+0x260>)
 8005c22:	6011      	str	r1, [r2, #0]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd4 <Meas_Init+0x248>)
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	18d3      	adds	r3, r2, r3
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	1c22      	adds	r2, r4, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005c30:	197b      	adds	r3, r7, r5
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	197a      	adds	r2, r7, r5
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	7011      	strb	r1, [r2, #0]
 8005c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb0 <Meas_Init+0x224>)
 8005c3c:	7894      	ldrb	r4, [r2, #2]
 8005c3e:	4a25      	ldr	r2, [pc, #148]	@ (8005cd4 <Meas_Init+0x248>)
 8005c40:	0119      	lsls	r1, r3, #4
 8005c42:	482b      	ldr	r0, [pc, #172]	@ (8005cf0 <Meas_Init+0x264>)
 8005c44:	5088      	str	r0, [r1, r2]
 8005c46:	4923      	ldr	r1, [pc, #140]	@ (8005cd4 <Meas_Init+0x248>)
 8005c48:	011a      	lsls	r2, r3, #4
 8005c4a:	188a      	adds	r2, r1, r2
 8005c4c:	3204      	adds	r2, #4
 8005c4e:	4929      	ldr	r1, [pc, #164]	@ (8005cf4 <Meas_Init+0x268>)
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	4920      	ldr	r1, [pc, #128]	@ (8005cd4 <Meas_Init+0x248>)
 8005c54:	011a      	lsls	r2, r3, #4
 8005c56:	188a      	adds	r2, r1, r2
 8005c58:	3208      	adds	r2, #8
 8005c5a:	4927      	ldr	r1, [pc, #156]	@ (8005cf8 <Meas_Init+0x26c>)
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd4 <Meas_Init+0x248>)
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	18d3      	adds	r3, r2, r3
 8005c64:	330c      	adds	r3, #12
 8005c66:	1c22      	adds	r2, r4, #0
 8005c68:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8005c6a:	197b      	adds	r3, r7, r5
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	197a      	adds	r2, r7, r5
 8005c70:	1c59      	adds	r1, r3, #1
 8005c72:	7011      	strb	r1, [r2, #0]
 8005c74:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb0 <Meas_Init+0x224>)
 8005c76:	78d4      	ldrb	r4, [r2, #3]
 8005c78:	4a16      	ldr	r2, [pc, #88]	@ (8005cd4 <Meas_Init+0x248>)
 8005c7a:	0119      	lsls	r1, r3, #4
 8005c7c:	481f      	ldr	r0, [pc, #124]	@ (8005cfc <Meas_Init+0x270>)
 8005c7e:	5088      	str	r0, [r1, r2]
 8005c80:	4914      	ldr	r1, [pc, #80]	@ (8005cd4 <Meas_Init+0x248>)
 8005c82:	011a      	lsls	r2, r3, #4
 8005c84:	188a      	adds	r2, r1, r2
 8005c86:	3204      	adds	r2, #4
 8005c88:	491d      	ldr	r1, [pc, #116]	@ (8005d00 <Meas_Init+0x274>)
 8005c8a:	6011      	str	r1, [r2, #0]
 8005c8c:	4911      	ldr	r1, [pc, #68]	@ (8005cd4 <Meas_Init+0x248>)
 8005c8e:	011a      	lsls	r2, r3, #4
 8005c90:	188a      	adds	r2, r1, r2
 8005c92:	3208      	adds	r2, #8
 8005c94:	491b      	ldr	r1, [pc, #108]	@ (8005d04 <Meas_Init+0x278>)
 8005c96:	6011      	str	r1, [r2, #0]
 8005c98:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd4 <Meas_Init+0x248>)
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	18d3      	adds	r3, r2, r3
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	1c22      	adds	r2, r4, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
}
 8005ca4:	46c0      	nop			@ (mov r8, r8)
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b016      	add	sp, #88	@ 0x58
 8005caa:	bdb0      	pop	{r4, r5, r7, pc}
 8005cac:	20000b6c 	.word	0x20000b6c
 8005cb0:	20000b64 	.word	0x20000b64
 8005cb4:	08014d5c 	.word	0x08014d5c
 8005cb8:	08014d8c 	.word	0x08014d8c
 8005cbc:	20000b68 	.word	0x20000b68
 8005cc0:	08014d90 	.word	0x08014d90
 8005cc4:	08014dbc 	.word	0x08014dbc
 8005cc8:	08014dc0 	.word	0x08014dc0
 8005ccc:	08014ddc 	.word	0x08014ddc
 8005cd0:	50000400 	.word	0x50000400
 8005cd4:	20000b24 	.word	0x20000b24
 8005cd8:	080059c1 	.word	0x080059c1
 8005cdc:	080059d1 	.word	0x080059d1
 8005ce0:	20000b20 	.word	0x20000b20
 8005ce4:	080059f1 	.word	0x080059f1
 8005ce8:	08005a01 	.word	0x08005a01
 8005cec:	20000b21 	.word	0x20000b21
 8005cf0:	08005a19 	.word	0x08005a19
 8005cf4:	08005a23 	.word	0x08005a23
 8005cf8:	20000b22 	.word	0x20000b22
 8005cfc:	08005a2f 	.word	0x08005a2f
 8005d00:	08005a45 	.word	0x08005a45
 8005d04:	20000b23 	.word	0x20000b23

08005d08 <StartMeasurements>:

void StartMeasurements(void) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005d0c:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <StartMeasurements+0x48>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	e015      	b.n	8005d40 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <StartMeasurements+0x48>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	4a0e      	ldr	r2, [pc, #56]	@ (8005d54 <StartMeasurements+0x4c>)
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	18d3      	adds	r3, r2, r3
 8005d1e:	330c      	adds	r3, #12
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8005d26:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <StartMeasurements+0x48>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <StartMeasurements+0x4c>)
 8005d2e:	0112      	lsls	r2, r2, #4
 8005d30:	58d3      	ldr	r3, [r2, r3]
 8005d32:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <StartMeasurements+0x48>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <StartMeasurements+0x48>)
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	4b03      	ldr	r3, [pc, #12]	@ (8005d50 <StartMeasurements+0x48>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d9e5      	bls.n	8005d14 <StartMeasurements+0xc>
    }
  }
}
 8005d48:	46c0      	nop			@ (mov r8, r8)
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000b6d 	.word	0x20000b6d
 8005d54:	20000b24 	.word	0x20000b24

08005d58 <ResetMeasurements>:

void ResetMeasurements(void) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <ResetMeasurements+0x34>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005d62:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <ResetMeasurements+0x34>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005d68:	4b08      	ldr	r3, [pc, #32]	@ (8005d8c <ResetMeasurements+0x34>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005d6e:	4b07      	ldr	r3, [pc, #28]	@ (8005d8c <ResetMeasurements+0x34>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005d74:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <ResetMeasurements+0x34>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005d7a:	4b04      	ldr	r3, [pc, #16]	@ (8005d8c <ResetMeasurements+0x34>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005d80:	4b02      	ldr	r3, [pc, #8]	@ (8005d8c <ResetMeasurements+0x34>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	73da      	strb	r2, [r3, #15]
}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20000b14 	.word	0x20000b14

08005d90 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005d94:	4b18      	ldr	r3, [pc, #96]	@ (8005df8 <MeasurementsCompleted+0x68>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e024      	b.n	8005de6 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005d9c:	4b16      	ldr	r3, [pc, #88]	@ (8005df8 <MeasurementsCompleted+0x68>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	4a16      	ldr	r2, [pc, #88]	@ (8005dfc <MeasurementsCompleted+0x6c>)
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	18d3      	adds	r3, r2, r3
 8005da6:	330c      	adds	r3, #12
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d015      	beq.n	8005dda <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005dae:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <MeasurementsCompleted+0x68>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4a12      	ldr	r2, [pc, #72]	@ (8005dfc <MeasurementsCompleted+0x6c>)
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	18d3      	adds	r3, r2, r3
 8005db8:	3304      	adds	r3, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4798      	blx	r3
 8005dbe:	1e03      	subs	r3, r0, #0
 8005dc0:	d009      	beq.n	8005dd6 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <MeasurementsCompleted+0x68>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8005dfc <MeasurementsCompleted+0x6c>)
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	18d3      	adds	r3, r2, r3
 8005dcc:	3308      	adds	r3, #8
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e001      	b.n	8005dda <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e00a      	b.n	8005df0 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005dda:	4b07      	ldr	r3, [pc, #28]	@ (8005df8 <MeasurementsCompleted+0x68>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	3301      	adds	r3, #1
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <MeasurementsCompleted+0x68>)
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <MeasurementsCompleted+0x68>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d9d6      	bls.n	8005d9c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005dee:	2301      	movs	r3, #1
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			@ (mov r8, r8)
 8005df8:	20000b6d 	.word	0x20000b6d
 8005dfc:	20000b24 	.word	0x20000b24

08005e00 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8005e00:	b5b0      	push	{r4, r5, r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8005e06:	4b30      	ldr	r3, [pc, #192]	@ (8005ec8 <Meas_Upkeep+0xc8>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d854      	bhi.n	8005eb8 <Meas_Upkeep+0xb8>
 8005e0e:	009a      	lsls	r2, r3, #2
 8005e10:	4b2e      	ldr	r3, [pc, #184]	@ (8005ecc <Meas_Upkeep+0xcc>)
 8005e12:	18d3      	adds	r3, r2, r3
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8005e18:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed0 <Meas_Upkeep+0xd0>)
 8005e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed4 <Meas_Upkeep+0xd4>)
 8005e1c:	0019      	movs	r1, r3
 8005e1e:	2003      	movs	r0, #3
 8005e20:	f002 fce2 	bl	80087e8 <CreateLine>
    break;
 8005e24:	e04d      	b.n	8005ec2 <Meas_Upkeep+0xc2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8005e26:	f7ff ff97 	bl	8005d58 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8005e2a:	4b27      	ldr	r3, [pc, #156]	@ (8005ec8 <Meas_Upkeep+0xc8>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
    break;
 8005e30:	e047      	b.n	8005ec2 <Meas_Upkeep+0xc2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005e32:	f7ff ff69 	bl	8005d08 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005e36:	4b24      	ldr	r3, [pc, #144]	@ (8005ec8 <Meas_Upkeep+0xc8>)
 8005e38:	2202      	movs	r2, #2
 8005e3a:	701a      	strb	r2, [r3, #0]
   break;
 8005e3c:	e041      	b.n	8005ec2 <Meas_Upkeep+0xc2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005e3e:	f7ff ffa7 	bl	8005d90 <MeasurementsCompleted>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d03c      	beq.n	8005ec0 <Meas_Upkeep+0xc0>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005e46:	4b20      	ldr	r3, [pc, #128]	@ (8005ec8 <Meas_Upkeep+0xc8>)
 8005e48:	2203      	movs	r2, #3
 8005e4a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005e4c:	e038      	b.n	8005ec0 <Meas_Upkeep+0xc0>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8005e4e:	4a22      	ldr	r2, [pc, #136]	@ (8005ed8 <Meas_Upkeep+0xd8>)
 8005e50:	4b20      	ldr	r3, [pc, #128]	@ (8005ed4 <Meas_Upkeep+0xd4>)
 8005e52:	0019      	movs	r1, r3
 8005e54:	2003      	movs	r0, #3
 8005e56:	f002 fcc7 	bl	80087e8 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8005e5a:	4b20      	ldr	r3, [pc, #128]	@ (8005edc <Meas_Upkeep+0xdc>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ee0 <Meas_Upkeep+0xe0>)
 8005e60:	491c      	ldr	r1, [pc, #112]	@ (8005ed4 <Meas_Upkeep+0xd4>)
 8005e62:	2003      	movs	r0, #3
 8005e64:	f002 fcc0 	bl	80087e8 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8005e68:	4b1c      	ldr	r3, [pc, #112]	@ (8005edc <Meas_Upkeep+0xdc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	1c18      	adds	r0, r3, #0
 8005e6e:	f7fd fabd 	bl	80033ec <__aeabi_f2d>
 8005e72:	0004      	movs	r4, r0
 8005e74:	000d      	movs	r5, r1
 8005e76:	4b19      	ldr	r3, [pc, #100]	@ (8005edc <Meas_Upkeep+0xdc>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	1c18      	adds	r0, r3, #0
 8005e7c:	f7fd fab6 	bl	80033ec <__aeabi_f2d>
 8005e80:	0002      	movs	r2, r0
 8005e82:	000b      	movs	r3, r1
 8005e84:	4817      	ldr	r0, [pc, #92]	@ (8005ee4 <Meas_Upkeep+0xe4>)
 8005e86:	4913      	ldr	r1, [pc, #76]	@ (8005ed4 <Meas_Upkeep+0xd4>)
 8005e88:	9202      	str	r2, [sp, #8]
 8005e8a:	9303      	str	r3, [sp, #12]
 8005e8c:	9400      	str	r4, [sp, #0]
 8005e8e:	9501      	str	r5, [sp, #4]
 8005e90:	0002      	movs	r2, r0
 8005e92:	2003      	movs	r0, #3
 8005e94:	f002 fca8 	bl	80087e8 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8005e98:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <Meas_Upkeep+0xdc>)
 8005e9a:	6858      	ldr	r0, [r3, #4]
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <Meas_Upkeep+0xdc>)
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8005edc <Meas_Upkeep+0xdc>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	f7fd fc2a 	bl	8003700 <setMeasurement>
    checkCharges();
 8005eac:	f7fd fb84 	bl	80035b8 <checkCharges>
    MeasState = MEAS_STATE_INIT;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <Meas_Upkeep+0xc8>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
    break;
 8005eb6:	e004      	b.n	8005ec2 <Meas_Upkeep+0xc2>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8005eb8:	4b03      	ldr	r3, [pc, #12]	@ (8005ec8 <Meas_Upkeep+0xc8>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
    break;
 8005ebe:	e000      	b.n	8005ec2 <Meas_Upkeep+0xc2>
    break;
 8005ec0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec8:	20000b6c 	.word	0x20000b6c
 8005ecc:	080153a8 	.word	0x080153a8
 8005ed0:	08014df4 	.word	0x08014df4
 8005ed4:	08014dbc 	.word	0x08014dbc
 8005ed8:	08014e14 	.word	0x08014e14
 8005edc:	20000b14 	.word	0x20000b14
 8005ee0:	08014e28 	.word	0x08014e28
 8005ee4:	08014e40 	.word	0x08014e40

08005ee8 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8005ee8:	b590      	push	{r4, r7, lr}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	1d3b      	adds	r3, r7, #4
 8005ef0:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8005ef2:	240f      	movs	r4, #15
 8005ef4:	193b      	adds	r3, r7, r4
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8005efa:	4b20      	ldr	r3, [pc, #128]	@ (8005f7c <Meas_SetEnabledSensors+0x94>)
 8005efc:	1d3a      	adds	r2, r7, #4
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8005f02:	193b      	adds	r3, r7, r4
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	193a      	adds	r2, r7, r4
 8005f08:	1c59      	adds	r1, r3, #1
 8005f0a:	7011      	strb	r1, [r2, #0]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	7819      	ldrb	r1, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <Meas_SetEnabledSensors+0x98>)
 8005f14:	0103      	lsls	r3, r0, #4
 8005f16:	18d3      	adds	r3, r2, r3
 8005f18:	330c      	adds	r3, #12
 8005f1a:	1c0a      	adds	r2, r1, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8005f1e:	193b      	adds	r3, r7, r4
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	193a      	adds	r2, r7, r4
 8005f24:	1c59      	adds	r1, r3, #1
 8005f26:	7011      	strb	r1, [r2, #0]
 8005f28:	0018      	movs	r0, r3
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	7859      	ldrb	r1, [r3, #1]
 8005f2e:	4a14      	ldr	r2, [pc, #80]	@ (8005f80 <Meas_SetEnabledSensors+0x98>)
 8005f30:	0103      	lsls	r3, r0, #4
 8005f32:	18d3      	adds	r3, r2, r3
 8005f34:	330c      	adds	r3, #12
 8005f36:	1c0a      	adds	r2, r1, #0
 8005f38:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8005f3a:	193b      	adds	r3, r7, r4
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	193a      	adds	r2, r7, r4
 8005f40:	1c59      	adds	r1, r3, #1
 8005f42:	7011      	strb	r1, [r2, #0]
 8005f44:	0018      	movs	r0, r3
 8005f46:	1d3b      	adds	r3, r7, #4
 8005f48:	7899      	ldrb	r1, [r3, #2]
 8005f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f80 <Meas_SetEnabledSensors+0x98>)
 8005f4c:	0103      	lsls	r3, r0, #4
 8005f4e:	18d3      	adds	r3, r2, r3
 8005f50:	330c      	adds	r3, #12
 8005f52:	1c0a      	adds	r2, r1, #0
 8005f54:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8005f56:	193b      	adds	r3, r7, r4
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	193a      	adds	r2, r7, r4
 8005f5c:	1c59      	adds	r1, r3, #1
 8005f5e:	7011      	strb	r1, [r2, #0]
 8005f60:	0018      	movs	r0, r3
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	78d9      	ldrb	r1, [r3, #3]
 8005f66:	4a06      	ldr	r2, [pc, #24]	@ (8005f80 <Meas_SetEnabledSensors+0x98>)
 8005f68:	0103      	lsls	r3, r0, #4
 8005f6a:	18d3      	adds	r3, r2, r3
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	1c0a      	adds	r2, r1, #0
 8005f70:	701a      	strb	r2, [r3, #0]
}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b005      	add	sp, #20
 8005f78:	bd90      	pop	{r4, r7, pc}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	20000b64 	.word	0x20000b64
 8005f80:	20000b24 	.word	0x20000b24

08005f84 <Meas_TestStart>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}
void Meas_TestStart(){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8005f88:	f7ff fd51 	bl	8005a2e <MIC_StartMeasurementWrapper>
}
 8005f8c:	46c0      	nop			@ (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <Meas_Test>:

void Meas_Test(){
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8005f98:	4b1f      	ldr	r3, [pc, #124]	@ (8006018 <Meas_Test+0x84>)
 8005f9a:	78db      	ldrb	r3, [r3, #3]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	4053      	eors	r3, r2
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <Meas_Test+0x16>
    ESP_WakeTest();
 8005fa6:	f7fe fc0d 	bl	80047c4 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 8005faa:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <Meas_Test+0x84>)
 8005fac:	789b      	ldrb	r3, [r3, #2]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4053      	eors	r3, r2
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d014      	beq.n	8005fe2 <Meas_Test+0x4e>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8005fb8:	f7ff fd4c 	bl	8005a54 <MIC_IsTestMeasurementDoneWrapper>
 8005fbc:	1e03      	subs	r3, r0, #0
 8005fbe:	d010      	beq.n	8005fe2 <Meas_Test+0x4e>
      MeasTest.MIC_Tested = true;
 8005fc0:	4b15      	ldr	r3, [pc, #84]	@ (8006018 <Meas_Test+0x84>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 4000;
 8005fc6:	2380      	movs	r3, #128	@ 0x80
 8005fc8:	05db      	lsls	r3, r3, #23
 8005fca:	22fa      	movs	r2, #250	@ 0xfa
 8005fcc:	0112      	lsls	r2, r2, #4
 8005fce:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8005fd0:	2380      	movs	r3, #128	@ 0x80
 8005fd2:	05db      	lsls	r3, r3, #23
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	05db      	lsls	r3, r3, #23
 8005fdc:	22fa      	movs	r2, #250	@ 0xfa
 8005fde:	0112      	lsls	r2, r2, #4
 8005fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <Meas_Test+0x84>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d013      	beq.n	8006012 <Meas_Test+0x7e>
 8005fea:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <Meas_Test+0x84>)
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00f      	beq.n	8006012 <Meas_Test+0x7e>
 8005ff2:	4b09      	ldr	r3, [pc, #36]	@ (8006018 <Meas_Test+0x84>)
 8005ff4:	78db      	ldrb	r3, [r3, #3]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <Meas_Test+0x7e>
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <Meas_Test+0x84>)
 8005ffc:	789b      	ldrb	r3, [r3, #2]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <Meas_Test+0x7e>
    Debug("Test completed");
 8006002:	4a06      	ldr	r2, [pc, #24]	@ (800601c <Meas_Test+0x88>)
 8006004:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <Meas_Test+0x8c>)
 8006006:	0019      	movs	r1, r3
 8006008:	2003      	movs	r0, #3
 800600a:	f002 fbed 	bl	80087e8 <CreateLine>
    SetTestDone();
 800600e:	f7ff fb9b 	bl	8005748 <SetTestDone>
  }
}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000b68 	.word	0x20000b68
 800601c:	08014e74 	.word	0x08014e74
 8006020:	08014dbc 	.word	0x08014dbc

08006024 <SetESPMeasurementDone>:

void SetESPMeasurementDone(){
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006028:	4b02      	ldr	r3, [pc, #8]	@ (8006034 <SetESPMeasurementDone+0x10>)
 800602a:	2201      	movs	r2, #1
 800602c:	70da      	strb	r2, [r3, #3]
}
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000b68 	.word	0x20000b68

08006038 <MIC_Init>:
q15_t sample[NR_SAMPLES_512];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	4b03      	ldr	r3, [pc, #12]	@ (8006050 <MIC_Init+0x18>)
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	46bd      	mov	sp, r7
 800604a:	b002      	add	sp, #8
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	20000b70 	.word	0x20000b70

08006054 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 800605c:	4b0c      	ldr	r3, [pc, #48]	@ (8006090 <UpdateSampleRate+0x3c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d00e      	beq.n	8006086 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006068:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <UpdateSampleRate+0x3c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	0018      	movs	r0, r3
 800606e:	f006 fa69 	bl	800c544 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006072:	4b07      	ldr	r3, [pc, #28]	@ (8006090 <UpdateSampleRate+0x3c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 800607a:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <UpdateSampleRate+0x3c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	0018      	movs	r0, r3
 8006080:	f006 f96e 	bl	800c360 <HAL_I2S_Init>
 8006084:	e000      	b.n	8006088 <UpdateSampleRate+0x34>
    return;
 8006086:	46c0      	nop			@ (mov r8, r8)
}
 8006088:	46bd      	mov	sp, r7
 800608a:	b002      	add	sp, #8
 800608c:	bd80      	pop	{r7, pc}
 800608e:	46c0      	nop			@ (mov r8, r8)
 8006090:	20000b70 	.word	0x20000b70

08006094 <ConvertAudio>:

static q15_t ConvertAudio(uint16_t* data) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  bool Sign = 0;
 800609c:	2317      	movs	r3, #23
 800609e:	18fb      	adds	r3, r7, r3
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]
  //float dB = 0;
  float Division = 2147483647.0; //Reference?
 80060a4:	239e      	movs	r3, #158	@ 0x9e
 80060a6:	05db      	lsls	r3, r3, #23
 80060a8:	613b      	str	r3, [r7, #16]
  int32_t audioValue = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  //Sign = data[0] >> 14;
  audioValue = (data[0]<<17)|(data[1]<<1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	045a      	lsls	r2, r3, #17
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3302      	adds	r3, #2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  audioValue = (audioValue/Division)*0x7FFF;
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7fb fa49 	bl	8001558 <__aeabi_i2f>
 80060c6:	1c03      	adds	r3, r0, #0
 80060c8:	6939      	ldr	r1, [r7, #16]
 80060ca:	1c18      	adds	r0, r3, #0
 80060cc:	f7fa fd46 	bl	8000b5c <__aeabi_fdiv>
 80060d0:	1c03      	adds	r3, r0, #0
 80060d2:	4908      	ldr	r1, [pc, #32]	@ (80060f4 <ConvertAudio+0x60>)
 80060d4:	1c18      	adds	r0, r3, #0
 80060d6:	f7fa ff27 	bl	8000f28 <__aeabi_fmul>
 80060da:	1c03      	adds	r3, r0, #0
 80060dc:	1c18      	adds	r0, r3, #0
 80060de:	f7fb fa1b 	bl	8001518 <__aeabi_f2iz>
 80060e2:	0003      	movs	r3, r0
 80060e4:	60fb      	str	r3, [r7, #12]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return audioValue;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	b21b      	sxth	r3, r3
}
 80060ea:	0018      	movs	r0, r3
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b006      	add	sp, #24
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	46fffe00 	.word	0x46fffe00

080060f8 <X2>:

q15_t X2(q15_t num){
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	0002      	movs	r2, r0
 8006100:	1dbb      	adds	r3, r7, #6
 8006102:	801a      	strh	r2, [r3, #0]
  q15_t result = num*num;
 8006104:	1dbb      	adds	r3, r7, #6
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	1dba      	adds	r2, r7, #6
 800610a:	8812      	ldrh	r2, [r2, #0]
 800610c:	4353      	muls	r3, r2
 800610e:	b29a      	uxth	r2, r3
 8006110:	210e      	movs	r1, #14
 8006112:	187b      	adds	r3, r7, r1
 8006114:	801a      	strh	r2, [r3, #0]
  return(result);
 8006116:	187b      	adds	r3, r7, r1
 8006118:	2200      	movs	r2, #0
 800611a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b004      	add	sp, #16
 8006122:	bd80      	pop	{r7, pc}

08006124 <GetOctave>:

q15_t GetOctave(uint16_t width, uint16_t minFreq){
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	0002      	movs	r2, r0
 800612c:	1dbb      	adds	r3, r7, #6
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	1c0a      	adds	r2, r1, #0
 8006134:	801a      	strh	r2, [r3, #0]
  q15_t retVal = 0;
 8006136:	230a      	movs	r3, #10
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	2200      	movs	r2, #0
 800613c:	801a      	strh	r2, [r3, #0]
  q15_t buffer = 0;
 800613e:	2316      	movs	r3, #22
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2200      	movs	r2, #0
 8006144:	801a      	strh	r2, [r3, #0]
  float dB;
  float Division = (32768.0)-1; //Reference?
 8006146:	4b2e      	ldr	r3, [pc, #184]	@ (8006200 <GetOctave+0xdc>)
 8006148:	613b      	str	r3, [r7, #16]
  for(uint16_t i = minFreq; i < minFreq+width; i++){
 800614a:	2314      	movs	r3, #20
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	1d3a      	adds	r2, r7, #4
 8006150:	8812      	ldrh	r2, [r2, #0]
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e016      	b.n	8006184 <GetOctave+0x60>
    buffer += X2(output[i]);
 8006156:	2414      	movs	r4, #20
 8006158:	193b      	adds	r3, r7, r4
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	4b29      	ldr	r3, [pc, #164]	@ (8006204 <GetOctave+0xe0>)
 800615e:	0052      	lsls	r2, r2, #1
 8006160:	5ed3      	ldrsh	r3, [r2, r3]
 8006162:	0018      	movs	r0, r3
 8006164:	f7ff ffc8 	bl	80060f8 <X2>
 8006168:	0003      	movs	r3, r0
 800616a:	b29a      	uxth	r2, r3
 800616c:	2116      	movs	r1, #22
 800616e:	187b      	adds	r3, r7, r1
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	18d3      	adds	r3, r2, r3
 8006174:	b29a      	uxth	r2, r3
 8006176:	187b      	adds	r3, r7, r1
 8006178:	801a      	strh	r2, [r3, #0]
  for(uint16_t i = minFreq; i < minFreq+width; i++){
 800617a:	193b      	adds	r3, r7, r4
 800617c:	881a      	ldrh	r2, [r3, #0]
 800617e:	193b      	adds	r3, r7, r4
 8006180:	3201      	adds	r2, #1
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	2314      	movs	r3, #20
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	8819      	ldrh	r1, [r3, #0]
 800618e:	1dbb      	adds	r3, r7, #6
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	18cb      	adds	r3, r1, r3
 8006194:	429a      	cmp	r2, r3
 8006196:	dbde      	blt.n	8006156 <GetOctave+0x32>
  }
  arm_sqrt_q15(buffer, &retVal);
 8006198:	240a      	movs	r4, #10
 800619a:	193a      	adds	r2, r7, r4
 800619c:	2316      	movs	r3, #22
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	2100      	movs	r1, #0
 80061a2:	5e5b      	ldrsh	r3, [r3, r1]
 80061a4:	0011      	movs	r1, r2
 80061a6:	0018      	movs	r0, r3
 80061a8:	f009 fecc 	bl	800ff44 <arm_sqrt_q15>
  dB = 10*log10(retVal/Division);
 80061ac:	193b      	adds	r3, r7, r4
 80061ae:	2200      	movs	r2, #0
 80061b0:	5e9b      	ldrsh	r3, [r3, r2]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7fb f9d0 	bl	8001558 <__aeabi_i2f>
 80061b8:	1c03      	adds	r3, r0, #0
 80061ba:	6939      	ldr	r1, [r7, #16]
 80061bc:	1c18      	adds	r0, r3, #0
 80061be:	f7fa fccd 	bl	8000b5c <__aeabi_fdiv>
 80061c2:	1c03      	adds	r3, r0, #0
 80061c4:	1c18      	adds	r0, r3, #0
 80061c6:	f7fd f911 	bl	80033ec <__aeabi_f2d>
 80061ca:	0002      	movs	r2, r0
 80061cc:	000b      	movs	r3, r1
 80061ce:	0010      	movs	r0, r2
 80061d0:	0019      	movs	r1, r3
 80061d2:	f00d ff61 	bl	8014098 <log10>
 80061d6:	2200      	movs	r2, #0
 80061d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006208 <GetOctave+0xe4>)
 80061da:	f7fc f9f3 	bl	80025c4 <__aeabi_dmul>
 80061de:	0002      	movs	r2, r0
 80061e0:	000b      	movs	r3, r1
 80061e2:	0010      	movs	r0, r2
 80061e4:	0019      	movs	r1, r3
 80061e6:	f7fd f949 	bl	800347c <__aeabi_d2f>
 80061ea:	1c03      	adds	r3, r0, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  return(dB);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7fb f992 	bl	8001518 <__aeabi_f2iz>
 80061f4:	0003      	movs	r3, r0
 80061f6:	b21b      	sxth	r3, r3
}
 80061f8:	0018      	movs	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b007      	add	sp, #28
 80061fe:	bd90      	pop	{r4, r7, pc}
 8006200:	46fffe00 	.word	0x46fffe00
 8006204:	20001b74 	.word	0x20001b74
 8006208:	40240000 	.word	0x40240000

0800620c <GetAllOctaves>:

void GetAllOctaves(){
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  OCT[0] = GetOctave(2, 3); // 31.5 centre should be at 4
 8006210:	2103      	movs	r1, #3
 8006212:	2002      	movs	r0, #2
 8006214:	f7ff ff86 	bl	8006124 <GetOctave>
 8006218:	0003      	movs	r3, r0
 800621a:	0018      	movs	r0, r3
 800621c:	f7fb f99c 	bl	8001558 <__aeabi_i2f>
 8006220:	1c02      	adds	r2, r0, #0
 8006222:	4b1e      	ldr	r3, [pc, #120]	@ (800629c <GetAllOctaves+0x90>)
 8006224:	601a      	str	r2, [r3, #0]
  OCT[1] = GetOctave(4, 6); // 63 centre should be at 8
 8006226:	2106      	movs	r1, #6
 8006228:	2004      	movs	r0, #4
 800622a:	f7ff ff7b 	bl	8006124 <GetOctave>
 800622e:	0003      	movs	r3, r0
 8006230:	0018      	movs	r0, r3
 8006232:	f7fb f991 	bl	8001558 <__aeabi_i2f>
 8006236:	1c02      	adds	r2, r0, #0
 8006238:	4b18      	ldr	r3, [pc, #96]	@ (800629c <GetAllOctaves+0x90>)
 800623a:	605a      	str	r2, [r3, #4]
  OCT[2] = GetOctave(6, 13); // 125 centre should be at 16
 800623c:	210d      	movs	r1, #13
 800623e:	2006      	movs	r0, #6
 8006240:	f7ff ff70 	bl	8006124 <GetOctave>
 8006244:	0003      	movs	r3, r0
 8006246:	0018      	movs	r0, r3
 8006248:	f7fb f986 	bl	8001558 <__aeabi_i2f>
 800624c:	1c02      	adds	r2, r0, #0
 800624e:	4b13      	ldr	r3, [pc, #76]	@ (800629c <GetAllOctaves+0x90>)
 8006250:	609a      	str	r2, [r3, #8]
  OCT[3] = GetOctave(13, 27); // 250 centre should be at 33
 8006252:	211b      	movs	r1, #27
 8006254:	200d      	movs	r0, #13
 8006256:	f7ff ff65 	bl	8006124 <GetOctave>
 800625a:	0003      	movs	r3, r0
 800625c:	0018      	movs	r0, r3
 800625e:	f7fb f97b 	bl	8001558 <__aeabi_i2f>
 8006262:	1c02      	adds	r2, r0, #0
 8006264:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <GetAllOctaves+0x90>)
 8006266:	60da      	str	r2, [r3, #12]
  OCT[4] = GetOctave(22 ,55); // 500 centre should be at 66
 8006268:	2137      	movs	r1, #55	@ 0x37
 800626a:	2016      	movs	r0, #22
 800626c:	f7ff ff5a 	bl	8006124 <GetOctave>
 8006270:	0003      	movs	r3, r0
 8006272:	0018      	movs	r0, r3
 8006274:	f7fb f970 	bl	8001558 <__aeabi_i2f>
 8006278:	1c02      	adds	r2, r0, #0
 800627a:	4b08      	ldr	r3, [pc, #32]	@ (800629c <GetAllOctaves+0x90>)
 800627c:	611a      	str	r2, [r3, #16]
  OCT[5] = GetOctave(46 , 109); // 1000 centre should be at 132
 800627e:	216d      	movs	r1, #109	@ 0x6d
 8006280:	202e      	movs	r0, #46	@ 0x2e
 8006282:	f7ff ff4f 	bl	8006124 <GetOctave>
 8006286:	0003      	movs	r3, r0
 8006288:	0018      	movs	r0, r3
 800628a:	f7fb f965 	bl	8001558 <__aeabi_i2f>
 800628e:	1c02      	adds	r2, r0, #0
 8006290:	4b02      	ldr	r3, [pc, #8]	@ (800629c <GetAllOctaves+0x90>)
 8006292:	615a      	str	r2, [r3, #20]
  //OCT[6] = output[64]*0; //2000

}
 8006294:	46c0      	nop			@ (mov r8, r8)
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	20002380 	.word	0x20002380

080062a0 <Downscale>:
void Downscale(uint16_t downscaleFactor){
 80062a0:	b590      	push	{r4, r7, lr}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	0002      	movs	r2, r0
 80062a8:	1dbb      	adds	r3, r7, #6
 80062aa:	801a      	strh	r2, [r3, #0]
  for(uint16_t i = 0; i <512; i++){
 80062ac:	230e      	movs	r3, #14
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	2200      	movs	r2, #0
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e019      	b.n	80062ea <Downscale+0x4a>
    output[i] = output[i] / downscaleFactor;
 80062b6:	240e      	movs	r4, #14
 80062b8:	193b      	adds	r3, r7, r4
 80062ba:	881a      	ldrh	r2, [r3, #0]
 80062bc:	4b11      	ldr	r3, [pc, #68]	@ (8006304 <Downscale+0x64>)
 80062be:	0052      	lsls	r2, r2, #1
 80062c0:	5ed3      	ldrsh	r3, [r2, r3]
 80062c2:	001a      	movs	r2, r3
 80062c4:	1dbb      	adds	r3, r7, #6
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	0019      	movs	r1, r3
 80062ca:	0010      	movs	r0, r2
 80062cc:	f7f9 ffea 	bl	80002a4 <__divsi3>
 80062d0:	0003      	movs	r3, r0
 80062d2:	0019      	movs	r1, r3
 80062d4:	193b      	adds	r3, r7, r4
 80062d6:	881a      	ldrh	r2, [r3, #0]
 80062d8:	b209      	sxth	r1, r1
 80062da:	4b0a      	ldr	r3, [pc, #40]	@ (8006304 <Downscale+0x64>)
 80062dc:	0052      	lsls	r2, r2, #1
 80062de:	52d1      	strh	r1, [r2, r3]
  for(uint16_t i = 0; i <512; i++){
 80062e0:	193b      	adds	r3, r7, r4
 80062e2:	881a      	ldrh	r2, [r3, #0]
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	3201      	adds	r2, #1
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	230e      	movs	r3, #14
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	881a      	ldrh	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	@ 0x80
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d3de      	bcc.n	80062b6 <Downscale+0x16>
  }
}
 80062f8:	46c0      	nop			@ (mov r8, r8)
 80062fa:	46c0      	nop			@ (mov r8, r8)
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b005      	add	sp, #20
 8006300:	bd90      	pop	{r4, r7, pc}
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	20001b74 	.word	0x20001b74

08006308 <FFT>:

void FFT(){
 8006308:	b590      	push	{r4, r7, lr}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
  static arm_rfft_instance_q15 fft_instance;
  arm_status status;
  status = arm_rfft_init_q15(&fft_instance, 512, 1, 1);
 800630e:	1dfc      	adds	r4, r7, #7
 8006310:	2380      	movs	r3, #128	@ 0x80
 8006312:	0099      	lsls	r1, r3, #2
 8006314:	480e      	ldr	r0, [pc, #56]	@ (8006350 <FFT+0x48>)
 8006316:	2301      	movs	r3, #1
 8006318:	2201      	movs	r2, #1
 800631a:	f009 fd97 	bl	800fe4c <arm_rfft_init_q15>
 800631e:	0003      	movs	r3, r0
 8006320:	7023      	strb	r3, [r4, #0]
  arm_rfft_q15(&fft_instance, sample, output);
 8006322:	4a0c      	ldr	r2, [pc, #48]	@ (8006354 <FFT+0x4c>)
 8006324:	490c      	ldr	r1, [pc, #48]	@ (8006358 <FFT+0x50>)
 8006326:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <FFT+0x48>)
 8006328:	0018      	movs	r0, r3
 800632a:	f009 fcfb 	bl	800fd24 <arm_rfft_q15>
  arm_abs_q15(output, output, 512);
 800632e:	2380      	movs	r3, #128	@ 0x80
 8006330:	009a      	lsls	r2, r3, #2
 8006332:	4908      	ldr	r1, [pc, #32]	@ (8006354 <FFT+0x4c>)
 8006334:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <FFT+0x4c>)
 8006336:	0018      	movs	r0, r3
 8006338:	f009 fe68 	bl	801000c <arm_abs_q15>
  Downscale(4);
 800633c:	2004      	movs	r0, #4
 800633e:	f7ff ffaf 	bl	80062a0 <Downscale>
  GetAllOctaves();
 8006342:	f7ff ff63 	bl	800620c <GetAllOctaves>
}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	46bd      	mov	sp, r7
 800634a:	b003      	add	sp, #12
 800634c:	bd90      	pop	{r4, r7, pc}
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	200027a8 	.word	0x200027a8
 8006354:	20001b74 	.word	0x20001b74
 8006358:	200023a8 	.word	0x200023a8

0800635c <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 800635c:	b5b0      	push	{r4, r5, r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	000a      	movs	r2, r1
 8006366:	1cbb      	adds	r3, r7, #2
 8006368:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 800636a:	4b20      	ldr	r3, [pc, #128]	@ (80063ec <MIC_Start+0x90>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006372:	4a1f      	ldr	r2, [pc, #124]	@ (80063f0 <MIC_Start+0x94>)
 8006374:	4b1f      	ldr	r3, [pc, #124]	@ (80063f4 <MIC_Start+0x98>)
 8006376:	0019      	movs	r1, r3
 8006378:	2001      	movs	r0, #1
 800637a:	f002 fa35 	bl	80087e8 <CreateLine>
    return;
 800637e:	e031      	b.n	80063e4 <MIC_Start+0x88>
  }
  Debug("In mic start");
 8006380:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <MIC_Start+0x9c>)
 8006382:	4b1e      	ldr	r3, [pc, #120]	@ (80063fc <MIC_Start+0xa0>)
 8006384:	0019      	movs	r1, r3
 8006386:	2003      	movs	r0, #3
 8006388:	f002 fa2e 	bl	80087e8 <CreateLine>
  UpdateSampleRate(sampleRate);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	0018      	movs	r0, r3
 8006390:	f7ff fe60 	bl	8006054 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006394:	4b1a      	ldr	r3, [pc, #104]	@ (8006400 <MIC_Start+0xa4>)
 8006396:	1cba      	adds	r2, r7, #2
 8006398:	8812      	ldrh	r2, [r2, #0]
 800639a:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 800639c:	f002 fab0 	bl	8008900 <GetCurrentHalTicks>
 80063a0:	0002      	movs	r2, r0
 80063a2:	4b18      	ldr	r3, [pc, #96]	@ (8006404 <MIC_Start+0xa8>)
 80063a4:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 80063a6:	4b17      	ldr	r3, [pc, #92]	@ (8006404 <MIC_Start+0xa8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	001a      	movs	r2, r3
 80063ae:	4b16      	ldr	r3, [pc, #88]	@ (8006408 <MIC_Start+0xac>)
 80063b0:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 80063b2:	4b16      	ldr	r3, [pc, #88]	@ (800640c <MIC_Start+0xb0>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 80063b8:	4b15      	ldr	r3, [pc, #84]	@ (8006410 <MIC_Start+0xb4>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NR_SAMPLES_512*2);
 80063be:	4b0b      	ldr	r3, [pc, #44]	@ (80063ec <MIC_Start+0x90>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	250f      	movs	r5, #15
 80063c4:	197c      	adds	r4, r7, r5
 80063c6:	2280      	movs	r2, #128	@ 0x80
 80063c8:	00d2      	lsls	r2, r2, #3
 80063ca:	4912      	ldr	r1, [pc, #72]	@ (8006414 <MIC_Start+0xb8>)
 80063cc:	0018      	movs	r0, r3
 80063ce:	f006 f8e5 	bl	800c59c <HAL_I2S_Receive_DMA>
 80063d2:	0003      	movs	r3, r0
 80063d4:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 80063d6:	197b      	adds	r3, r7, r5
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	4a0f      	ldr	r2, [pc, #60]	@ (8006418 <MIC_Start+0xbc>)
 80063dc:	490f      	ldr	r1, [pc, #60]	@ (800641c <MIC_Start+0xc0>)
 80063de:	2002      	movs	r0, #2
 80063e0:	f002 fa02 	bl	80087e8 <CreateLine>
}
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b004      	add	sp, #16
 80063e8:	bdb0      	pop	{r4, r5, r7, pc}
 80063ea:	46c0      	nop			@ (mov r8, r8)
 80063ec:	20000b70 	.word	0x20000b70
 80063f0:	08014e84 	.word	0x08014e84
 80063f4:	08014ea4 	.word	0x08014ea4
 80063f8:	08014ea8 	.word	0x08014ea8
 80063fc:	08014eb8 	.word	0x08014eb8
 8006400:	20000100 	.word	0x20000100
 8006404:	20002374 	.word	0x20002374
 8006408:	20002378 	.word	0x20002378
 800640c:	2000237c 	.word	0x2000237c
 8006410:	2000237d 	.word	0x2000237d
 8006414:	20000b74 	.word	0x20000b74
 8006418:	08014ebc 	.word	0x08014ebc
 800641c:	08014ec8 	.word	0x08014ec8

08006420 <MinimalValue>:

//static void MIC_ProcessFFT() {
//  CalculateFFT();
//}
int16_t MinimalValue(uint16_t length){
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	0002      	movs	r2, r0
 8006428:	1dbb      	adds	r3, r7, #6
 800642a:	801a      	strh	r2, [r3, #0]
  int16_t MinVal = 32767;
 800642c:	230e      	movs	r3, #14
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	4a1a      	ldr	r2, [pc, #104]	@ (800649c <MinimalValue+0x7c>)
 8006432:	801a      	strh	r2, [r3, #0]
  int16_t i;
  for(i =0; i<length;i++){
 8006434:	230c      	movs	r3, #12
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	2200      	movs	r2, #0
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	e01d      	b.n	800647a <MinimalValue+0x5a>
    if(sample[i] < MinVal){
 800643e:	210c      	movs	r1, #12
 8006440:	187b      	adds	r3, r7, r1
 8006442:	2200      	movs	r2, #0
 8006444:	5e9a      	ldrsh	r2, [r3, r2]
 8006446:	4b16      	ldr	r3, [pc, #88]	@ (80064a0 <MinimalValue+0x80>)
 8006448:	0052      	lsls	r2, r2, #1
 800644a:	5ed3      	ldrsh	r3, [r2, r3]
 800644c:	200e      	movs	r0, #14
 800644e:	183a      	adds	r2, r7, r0
 8006450:	2400      	movs	r4, #0
 8006452:	5f12      	ldrsh	r2, [r2, r4]
 8006454:	429a      	cmp	r2, r3
 8006456:	dd07      	ble.n	8006468 <MinimalValue+0x48>
      MinVal = sample[i];
 8006458:	187b      	adds	r3, r7, r1
 800645a:	2100      	movs	r1, #0
 800645c:	5e59      	ldrsh	r1, [r3, r1]
 800645e:	183b      	adds	r3, r7, r0
 8006460:	4a0f      	ldr	r2, [pc, #60]	@ (80064a0 <MinimalValue+0x80>)
 8006462:	0049      	lsls	r1, r1, #1
 8006464:	5a8a      	ldrh	r2, [r1, r2]
 8006466:	801a      	strh	r2, [r3, #0]
  for(i =0; i<length;i++){
 8006468:	210c      	movs	r1, #12
 800646a:	187b      	adds	r3, r7, r1
 800646c:	2200      	movs	r2, #0
 800646e:	5e9b      	ldrsh	r3, [r3, r2]
 8006470:	b29b      	uxth	r3, r3
 8006472:	3301      	adds	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	187b      	adds	r3, r7, r1
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	230c      	movs	r3, #12
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2200      	movs	r2, #0
 8006480:	5e9a      	ldrsh	r2, [r3, r2]
 8006482:	1dbb      	adds	r3, r7, #6
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	dbd9      	blt.n	800643e <MinimalValue+0x1e>
    }
  }
  return(MinVal);
 800648a:	230e      	movs	r3, #14
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	2200      	movs	r2, #0
 8006490:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006492:	0018      	movs	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	b005      	add	sp, #20
 8006498:	bd90      	pop	{r4, r7, pc}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	00007fff 	.word	0x00007fff
 80064a0:	200023a8 	.word	0x200023a8

080064a4 <MaximalValue>:

int16_t MaximalValue(uint16_t length){
 80064a4:	b590      	push	{r4, r7, lr}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	0002      	movs	r2, r0
 80064ac:	1dbb      	adds	r3, r7, #6
 80064ae:	801a      	strh	r2, [r3, #0]
  int16_t MaxVal = -32768;
 80064b0:	230e      	movs	r3, #14
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006520 <MaximalValue+0x7c>)
 80064b6:	801a      	strh	r2, [r3, #0]
  int16_t i;
  for(i =0; i<length;i++){
 80064b8:	230c      	movs	r3, #12
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	2200      	movs	r2, #0
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e01d      	b.n	80064fe <MaximalValue+0x5a>
    if(sample[i] > MaxVal){
 80064c2:	210c      	movs	r1, #12
 80064c4:	187b      	adds	r3, r7, r1
 80064c6:	2200      	movs	r2, #0
 80064c8:	5e9a      	ldrsh	r2, [r3, r2]
 80064ca:	4b16      	ldr	r3, [pc, #88]	@ (8006524 <MaximalValue+0x80>)
 80064cc:	0052      	lsls	r2, r2, #1
 80064ce:	5ed3      	ldrsh	r3, [r2, r3]
 80064d0:	200e      	movs	r0, #14
 80064d2:	183a      	adds	r2, r7, r0
 80064d4:	2400      	movs	r4, #0
 80064d6:	5f12      	ldrsh	r2, [r2, r4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	da07      	bge.n	80064ec <MaximalValue+0x48>
      MaxVal = sample[i];
 80064dc:	187b      	adds	r3, r7, r1
 80064de:	2100      	movs	r1, #0
 80064e0:	5e59      	ldrsh	r1, [r3, r1]
 80064e2:	183b      	adds	r3, r7, r0
 80064e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006524 <MaximalValue+0x80>)
 80064e6:	0049      	lsls	r1, r1, #1
 80064e8:	5a8a      	ldrh	r2, [r1, r2]
 80064ea:	801a      	strh	r2, [r3, #0]
  for(i =0; i<length;i++){
 80064ec:	210c      	movs	r1, #12
 80064ee:	187b      	adds	r3, r7, r1
 80064f0:	2200      	movs	r2, #0
 80064f2:	5e9b      	ldrsh	r3, [r3, r2]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3301      	adds	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	187b      	adds	r3, r7, r1
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	230c      	movs	r3, #12
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	2200      	movs	r2, #0
 8006504:	5e9a      	ldrsh	r2, [r3, r2]
 8006506:	1dbb      	adds	r3, r7, #6
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	dbd9      	blt.n	80064c2 <MaximalValue+0x1e>
    }
  }
  return(MaxVal);
 800650e:	230e      	movs	r3, #14
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	2200      	movs	r2, #0
 8006514:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006516:	0018      	movs	r0, r3
 8006518:	46bd      	mov	sp, r7
 800651a:	b005      	add	sp, #20
 800651c:	bd90      	pop	{r4, r7, pc}
 800651e:	46c0      	nop			@ (mov r8, r8)
 8006520:	ffff8000 	.word	0xffff8000
 8006524:	200023a8 	.word	0x200023a8

08006528 <MIC_Check>:
bool MIC_Check(void) {
 8006528:	b5b0      	push	{r4, r5, r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 800652e:	4a29      	ldr	r2, [pc, #164]	@ (80065d4 <MIC_Check+0xac>)
 8006530:	4b29      	ldr	r3, [pc, #164]	@ (80065d8 <MIC_Check+0xb0>)
 8006532:	0019      	movs	r1, r3
 8006534:	2002      	movs	r0, #2
 8006536:	f002 f957 	bl	80087e8 <CreateLine>
  for (uint16_t i = 0; i < 512; i += 1) {
 800653a:	230e      	movs	r3, #14
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	2200      	movs	r2, #0
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	e016      	b.n	8006572 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006544:	250e      	movs	r5, #14
 8006546:	197b      	adds	r3, r7, r5
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	3302      	adds	r3, #2
 800654e:	005a      	lsls	r2, r3, #1
 8006550:	4b22      	ldr	r3, [pc, #136]	@ (80065dc <MIC_Check+0xb4>)
 8006552:	18d2      	adds	r2, r2, r3
 8006554:	197b      	adds	r3, r7, r5
 8006556:	881c      	ldrh	r4, [r3, #0]
 8006558:	0010      	movs	r0, r2
 800655a:	f7ff fd9b 	bl	8006094 <ConvertAudio>
 800655e:	0003      	movs	r3, r0
 8006560:	0019      	movs	r1, r3
 8006562:	4b1f      	ldr	r3, [pc, #124]	@ (80065e0 <MIC_Check+0xb8>)
 8006564:	0062      	lsls	r2, r4, #1
 8006566:	52d1      	strh	r1, [r2, r3]
  for (uint16_t i = 0; i < 512; i += 1) {
 8006568:	197b      	adds	r3, r7, r5
 800656a:	197a      	adds	r2, r7, r5
 800656c:	8812      	ldrh	r2, [r2, #0]
 800656e:	3201      	adds	r2, #1
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	230e      	movs	r3, #14
 8006574:	18fb      	adds	r3, r7, r3
 8006576:	881a      	ldrh	r2, [r3, #0]
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	429a      	cmp	r2, r3
 800657e:	d3e1      	bcc.n	8006544 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Min = MinimalValue(512);
 8006580:	2380      	movs	r3, #128	@ 0x80
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	0018      	movs	r0, r3
 8006586:	f7ff ff4b 	bl	8006420 <MinimalValue>
 800658a:	0003      	movs	r3, r0
 800658c:	0018      	movs	r0, r3
 800658e:	f7fa ffe3 	bl	8001558 <__aeabi_i2f>
 8006592:	1c03      	adds	r3, r0, #0
 8006594:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(512);
 8006596:	2380      	movs	r3, #128	@ 0x80
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	0018      	movs	r0, r3
 800659c:	f7ff ff82 	bl	80064a4 <MaximalValue>
 80065a0:	0003      	movs	r3, r0
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7fa ffd8 	bl	8001558 <__aeabi_i2f>
 80065a8:	1c03      	adds	r3, r0, #0
 80065aa:	607b      	str	r3, [r7, #4]
  if(Max > 0 || Min < 0){
 80065ac:	2100      	movs	r1, #0
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7f9 ffc8 	bl	8000544 <__aeabi_fcmpgt>
 80065b4:	1e03      	subs	r3, r0, #0
 80065b6:	d105      	bne.n	80065c4 <MIC_Check+0x9c>
 80065b8:	2100      	movs	r1, #0
 80065ba:	68b8      	ldr	r0, [r7, #8]
 80065bc:	f7f9 ffae 	bl	800051c <__aeabi_fcmplt>
 80065c0:	1e03      	subs	r3, r0, #0
 80065c2:	d001      	beq.n	80065c8 <MIC_Check+0xa0>
    return(true);
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <MIC_Check+0xa2>
  }
  return(false);
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	0018      	movs	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	b004      	add	sp, #16
 80065d0:	bdb0      	pop	{r4, r5, r7, pc}
 80065d2:	46c0      	nop			@ (mov r8, r8)
 80065d4:	08014ecc 	.word	0x08014ecc
 80065d8:	08014ec8 	.word	0x08014ec8
 80065dc:	20000b74 	.word	0x20000b74
 80065e0:	200023a8 	.word	0x200023a8

080065e4 <MIC_Print>:
void MIC_Print(void) {
 80065e4:	b5b0      	push	{r4, r5, r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 80065ea:	4a22      	ldr	r2, [pc, #136]	@ (8006674 <MIC_Print+0x90>)
 80065ec:	4b22      	ldr	r3, [pc, #136]	@ (8006678 <MIC_Print+0x94>)
 80065ee:	0019      	movs	r1, r3
 80065f0:	2002      	movs	r0, #2
 80065f2:	f002 f8f9 	bl	80087e8 <CreateLine>
  for (uint16_t i = 0; i < 512; i += 1) {
 80065f6:	230e      	movs	r3, #14
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	2200      	movs	r2, #0
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	e016      	b.n	800662e <MIC_Print+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006600:	250e      	movs	r5, #14
 8006602:	197b      	adds	r3, r7, r5
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	3302      	adds	r3, #2
 800660a:	005a      	lsls	r2, r3, #1
 800660c:	4b1b      	ldr	r3, [pc, #108]	@ (800667c <MIC_Print+0x98>)
 800660e:	18d2      	adds	r2, r2, r3
 8006610:	197b      	adds	r3, r7, r5
 8006612:	881c      	ldrh	r4, [r3, #0]
 8006614:	0010      	movs	r0, r2
 8006616:	f7ff fd3d 	bl	8006094 <ConvertAudio>
 800661a:	0003      	movs	r3, r0
 800661c:	0019      	movs	r1, r3
 800661e:	4b18      	ldr	r3, [pc, #96]	@ (8006680 <MIC_Print+0x9c>)
 8006620:	0062      	lsls	r2, r4, #1
 8006622:	52d1      	strh	r1, [r2, r3]
  for (uint16_t i = 0; i < 512; i += 1) {
 8006624:	197b      	adds	r3, r7, r5
 8006626:	197a      	adds	r2, r7, r5
 8006628:	8812      	ldrh	r2, [r2, #0]
 800662a:	3201      	adds	r2, #1
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	230e      	movs	r3, #14
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	429a      	cmp	r2, r3
 800663a:	d3e1      	bcc.n	8006600 <MIC_Print+0x1c>
    //Info("0x%08x", sample);
  }
  //filter();
  Min = MinimalValue(512);
 800663c:	2380      	movs	r3, #128	@ 0x80
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	0018      	movs	r0, r3
 8006642:	f7ff feed 	bl	8006420 <MinimalValue>
 8006646:	0003      	movs	r3, r0
 8006648:	0018      	movs	r0, r3
 800664a:	f7fa ff85 	bl	8001558 <__aeabi_i2f>
 800664e:	1c03      	adds	r3, r0, #0
 8006650:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(512);
 8006652:	2380      	movs	r3, #128	@ 0x80
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	0018      	movs	r0, r3
 8006658:	f7ff ff24 	bl	80064a4 <MaximalValue>
 800665c:	0003      	movs	r3, r0
 800665e:	0018      	movs	r0, r3
 8006660:	f7fa ff7a 	bl	8001558 <__aeabi_i2f>
 8006664:	1c03      	adds	r3, r0, #0
 8006666:	607b      	str	r3, [r7, #4]
//    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
//  }

  FFT();
 8006668:	f7ff fe4e 	bl	8006308 <FFT>
}
 800666c:	46c0      	nop			@ (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b004      	add	sp, #16
 8006672:	bdb0      	pop	{r4, r5, r7, pc}
 8006674:	08014ecc 	.word	0x08014ecc
 8006678:	08014ec8 	.word	0x08014ec8
 800667c:	20000b74 	.word	0x20000b74
 8006680:	200023a8 	.word	0x200023a8

08006684 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  if(DataReady) {
 8006688:	4b09      	ldr	r3, [pc, #36]	@ (80066b0 <MIC_MeasurementDone+0x2c>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <MIC_MeasurementDone+0x24>
    MIC_Print();
 8006692:	f7ff ffa7 	bl	80065e4 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8006696:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <MIC_MeasurementDone+0x30>)
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	4a07      	ldr	r2, [pc, #28]	@ (80066b8 <MIC_MeasurementDone+0x34>)
 800669c:	4907      	ldr	r1, [pc, #28]	@ (80066bc <MIC_MeasurementDone+0x38>)
 800669e:	2003      	movs	r0, #3
 80066a0:	f002 f8a2 	bl	80087e8 <CreateLine>
    return true;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <MIC_MeasurementDone+0x26>
  }
  return false;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	0018      	movs	r0, r3
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	2000237d 	.word	0x2000237d
 80066b4:	20000100 	.word	0x20000100
 80066b8:	08014ed8 	.word	0x08014ed8
 80066bc:	08014eb8 	.word	0x08014eb8

080066c0 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 80066c6:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <MIC_TestMeasurementDone+0x2c>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <MIC_TestMeasurementDone+0x20>
    Check = MIC_Check();
 80066d0:	1dfc      	adds	r4, r7, #7
 80066d2:	f7ff ff29 	bl	8006528 <MIC_Check>
 80066d6:	0003      	movs	r3, r0
 80066d8:	7023      	strb	r3, [r4, #0]
    return Check;
 80066da:	1dfb      	adds	r3, r7, #7
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	e000      	b.n	80066e2 <MIC_TestMeasurementDone+0x22>
  }
  return false;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	0018      	movs	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b003      	add	sp, #12
 80066e8:	bd90      	pop	{r4, r7, pc}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	2000237d 	.word	0x2000237d

080066f0 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80066f8:	4b10      	ldr	r3, [pc, #64]	@ (800673c <HAL_I2S_RxCpltCallback+0x4c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d118      	bne.n	8006734 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8006702:	4b0f      	ldr	r3, [pc, #60]	@ (8006740 <HAL_I2S_RxCpltCallback+0x50>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 800670c:	4b0b      	ldr	r3, [pc, #44]	@ (800673c <HAL_I2S_RxCpltCallback+0x4c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	0018      	movs	r0, r3
 8006712:	f006 f805 	bl	800c720 <HAL_I2S_DMAStop>
    DataReady = true;
 8006716:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <HAL_I2S_RxCpltCallback+0x54>)
 8006718:	2201      	movs	r2, #1
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e00b      	b.n	8006736 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800671e:	4b0a      	ldr	r3, [pc, #40]	@ (8006748 <HAL_I2S_RxCpltCallback+0x58>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	0018      	movs	r0, r3
 8006724:	f002 f80a 	bl	800873c <TimestampIsReached>
 8006728:	1e03      	subs	r3, r0, #0
 800672a:	d004      	beq.n	8006736 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 800672c:	4b04      	ldr	r3, [pc, #16]	@ (8006740 <HAL_I2S_RxCpltCallback+0x50>)
 800672e:	2201      	movs	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	e000      	b.n	8006736 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8006734:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000b70 	.word	0x20000b70
 8006740:	2000237c 	.word	0x2000237c
 8006744:	2000237d 	.word	0x2000237d
 8006748:	20002378 	.word	0x20002378

0800674c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d113      	bne.n	8006792 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	22fe      	movs	r2, #254	@ 0xfe
 800676e:	0592      	lsls	r2, r2, #22
 8006770:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4a1a      	ldr	r2, [pc, #104]	@ (80067e0 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006776:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a1a      	ldr	r2, [pc, #104]	@ (80067e4 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800677c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a19      	ldr	r2, [pc, #100]	@ (80067e8 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8006782:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a19      	ldr	r2, [pc, #100]	@ (80067ec <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006788:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800678e:	61da      	str	r2, [r3, #28]
 8006790:	e011      	b.n	80067b6 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a17      	ldr	r2, [pc, #92]	@ (80067f4 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006796:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4a17      	ldr	r2, [pc, #92]	@ (80067f8 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800679c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a16      	ldr	r2, [pc, #88]	@ (80067fc <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80067a2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a16      	ldr	r2, [pc, #88]	@ (8006800 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80067a8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80067ae:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4a15      	ldr	r2, [pc, #84]	@ (8006808 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80067b4:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a14      	ldr	r2, [pc, #80]	@ (800680c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80067ba:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a14      	ldr	r2, [pc, #80]	@ (8006810 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80067c0:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a12      	ldr	r2, [pc, #72]	@ (8006810 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80067c6:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a12      	ldr	r2, [pc, #72]	@ (8006814 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80067cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 f831 	bl	8006838 <GasIndexAlgorithm_reset>
}
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	46bd      	mov	sp, r7
 80067da:	b004      	add	sp, #16
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	46c0      	nop			@ (mov r8, r8)
 80067e0:	00002710 	.word	0x00002710
 80067e4:	44340000 	.word	0x44340000
 80067e8:	46859800 	.word	0x46859800
 80067ec:	46a05000 	.word	0x46a05000
 80067f0:	41f00000 	.word	0x41f00000
 80067f4:	42c80000 	.word	0x42c80000
 80067f8:	00004e20 	.word	0x00004e20
 80067fc:	43340000 	.word	0x43340000
 8006800:	4528c000 	.word	0x4528c000
 8006804:	45a32000 	.word	0x45a32000
 8006808:	43aa0000 	.word	0x43aa0000
 800680c:	43660000 	.word	0x43660000
 8006810:	41400000 	.word	0x41400000
 8006814:	42480000 	.word	0x42480000

08006818 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8006822:	22fe      	movs	r2, #254	@ 0xfe
 8006824:	0592      	lsls	r2, r2, #22
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	0018      	movs	r0, r3
 800682c:	f7ff ff8e 	bl	800674c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8006830:	46c0      	nop			@ (mov r8, r8)
 8006832:	46bd      	mov	sp, r7
 8006834:	b002      	add	sp, #8
 8006836:	bd80      	pop	{r7, pc}

08006838 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f000 f805 	bl	8006864 <GasIndexAlgorithm__init_instances>
}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	0018      	movs	r0, r3
 8006870:	f000 f8e8 	bl	8006a44 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	0018      	movs	r0, r3
 8006878:	f000 f9a6 	bl	8006bc8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800687c:	1c04      	adds	r4, r0, #0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0018      	movs	r0, r3
 8006882:	f000 f9ab 	bl	8006bdc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006886:	1c02      	adds	r2, r0, #0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	1c21      	adds	r1, r4, #0
 800688c:	0018      	movs	r0, r3
 800688e:	f000 fc3b 	bl	8007108 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d107      	bne.n	80068aa <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800689a:	23fe      	movs	r3, #254	@ 0xfe
 800689c:	059b      	lsls	r3, r3, #22
 800689e:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <GasIndexAlgorithm__init_instances+0x64>)
 80068a0:	490a      	ldr	r1, [pc, #40]	@ (80068cc <GasIndexAlgorithm__init_instances+0x68>)
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fc86 	bl	80071b4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80068a8:	e005      	b.n	80068b6 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80068aa:	4b09      	ldr	r3, [pc, #36]	@ (80068d0 <GasIndexAlgorithm__init_instances+0x6c>)
 80068ac:	4a09      	ldr	r2, [pc, #36]	@ (80068d4 <GasIndexAlgorithm__init_instances+0x70>)
 80068ae:	490a      	ldr	r1, [pc, #40]	@ (80068d8 <GasIndexAlgorithm__init_instances+0x74>)
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc7f 	bl	80071b4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f000 fd35 	bl	8007328 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80068be:	46c0      	nop			@ (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b003      	add	sp, #12
 80068c4:	bd90      	pop	{r4, r7, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	bc257a78 	.word	0xbc257a78
 80068cc:	44198000 	.word	0x44198000
 80068d0:	42c80000 	.word	0x42c80000
 80068d4:	bbd4fdf4 	.word	0xbbd4fdf4
 80068d8:	43550000 	.word	0x43550000

080068dc <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	4952      	ldr	r1, [pc, #328]	@ (8006a38 <GasIndexAlgorithm_process+0x15c>)
 80068ee:	1c18      	adds	r0, r3, #0
 80068f0:	f7f9 fe1e 	bl	8000530 <__aeabi_fcmple>
 80068f4:	1e03      	subs	r3, r0, #0
 80068f6:	d00c      	beq.n	8006912 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	1c19      	adds	r1, r3, #0
 8006902:	1c10      	adds	r0, r2, #0
 8006904:	f7f9 ffa0 	bl	8000848 <__aeabi_fadd>
 8006908:	1c03      	adds	r3, r0, #0
 800690a:	1c1a      	adds	r2, r3, #0
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006910:	e080      	b.n	8006a14 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	dd25      	ble.n	8006964 <GasIndexAlgorithm_process+0x88>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4a48      	ldr	r2, [pc, #288]	@ (8006a3c <GasIndexAlgorithm_process+0x160>)
 800691c:	4293      	cmp	r3, r2
 800691e:	dc21      	bgt.n	8006964 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	dc04      	bgt.n	8006934 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	e00d      	b.n	8006950 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4a41      	ldr	r2, [pc, #260]	@ (8006a40 <GasIndexAlgorithm_process+0x164>)
 800693a:	4694      	mov	ip, r2
 800693c:	4463      	add	r3, ip
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	dd05      	ble.n	8006950 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4a3d      	ldr	r2, [pc, #244]	@ (8006a40 <GasIndexAlgorithm_process+0x164>)
 800694a:	4694      	mov	ip, r2
 800694c:	4463      	add	r3, ip
 800694e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	0018      	movs	r0, r3
 800695a:	f7fa fdfd 	bl	8001558 <__aeabi_i2f>
 800695e:	1c02      	adds	r2, r0, #0
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	0018      	movs	r0, r3
 8006970:	f000 f945 	bl	8006bfe <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006974:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006976:	d014      	beq.n	80069a2 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	1c11      	adds	r1, r2, #0
 8006980:	0018      	movs	r0, r3
 8006982:	f000 fbd1 	bl	8007128 <GasIndexAlgorithm__mox_model__process>
 8006986:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1c11      	adds	r1, r2, #0
 8006994:	0018      	movs	r0, r3
 8006996:	f000 fc25 	bl	80071e4 <GasIndexAlgorithm__sigmoid_scaled__process>
 800699a:	1c02      	adds	r2, r0, #0
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	639a      	str	r2, [r3, #56]	@ 0x38
 80069a0:	e003      	b.n	80069aa <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1c11      	adds	r1, r2, #0
 80069b2:	0018      	movs	r0, r3
 80069b4:	f000 fcec 	bl	8007390 <GasIndexAlgorithm__adaptive_lowpass__process>
 80069b8:	1c02      	adds	r2, r0, #0
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c2:	21fc      	movs	r1, #252	@ 0xfc
 80069c4:	0589      	lsls	r1, r1, #22
 80069c6:	1c18      	adds	r0, r3, #0
 80069c8:	f7f9 fda8 	bl	800051c <__aeabi_fcmplt>
 80069cc:	1e03      	subs	r3, r0, #0
 80069ce:	d003      	beq.n	80069d8 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	22fc      	movs	r2, #252	@ 0xfc
 80069d4:	0592      	lsls	r2, r2, #22
 80069d6:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069dc:	2100      	movs	r1, #0
 80069de:	1c18      	adds	r0, r3, #0
 80069e0:	f7f9 fdb0 	bl	8000544 <__aeabi_fcmpgt>
 80069e4:	1e03      	subs	r3, r0, #0
 80069e6:	d015      	beq.n	8006a14 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	1c11      	adds	r1, r2, #0
 80069f0:	0018      	movs	r0, r3
 80069f2:	f000 fa4f 	bl	8006e94 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	0018      	movs	r0, r3
 80069fa:	f000 f8e5 	bl	8006bc8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80069fe:	1c04      	adds	r4, r0, #0
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	0018      	movs	r0, r3
 8006a04:	f000 f8ea 	bl	8006bdc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006a08:	1c02      	adds	r2, r0, #0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1c21      	adds	r1, r4, #0
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f000 fb7a 	bl	8007108 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a18:	21fc      	movs	r1, #252	@ 0xfc
 8006a1a:	0589      	lsls	r1, r1, #22
 8006a1c:	1c18      	adds	r0, r3, #0
 8006a1e:	f7f9 ff13 	bl	8000848 <__aeabi_fadd>
 8006a22:	1c03      	adds	r3, r0, #0
 8006a24:	1c18      	adds	r0, r3, #0
 8006a26:	f7fa fd77 	bl	8001518 <__aeabi_f2iz>
 8006a2a:	0002      	movs	r2, r0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	601a      	str	r2, [r3, #0]
    return;
 8006a30:	46c0      	nop			@ (mov r8, r8)
}
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b005      	add	sp, #20
 8006a36:	bd90      	pop	{r4, r7, pc}
 8006a38:	42340000 	.word	0x42340000
 8006a3c:	0000fde7 	.word	0x0000fde7
 8006a40:	00007fff 	.word	0x00007fff

08006a44 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006a44:	b5b0      	push	{r4, r5, r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	223c      	movs	r2, #60	@ 0x3c
 8006a50:	2100      	movs	r1, #0
 8006a52:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4952      	ldr	r1, [pc, #328]	@ (8006bb8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006a6e:	1c18      	adds	r0, r3, #0
 8006a70:	f7fa f874 	bl	8000b5c <__aeabi_fdiv>
 8006a74:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006a76:	2188      	movs	r1, #136	@ 0x88
 8006a78:	05c9      	lsls	r1, r1, #23
 8006a7a:	1c18      	adds	r0, r3, #0
 8006a7c:	f7fa fa54 	bl	8000f28 <__aeabi_fmul>
 8006a80:	1c03      	adds	r3, r0, #0
 8006a82:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	494a      	ldr	r1, [pc, #296]	@ (8006bb8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006a8e:	1c18      	adds	r0, r3, #0
 8006a90:	f7fa f864 	bl	8000b5c <__aeabi_fdiv>
 8006a94:	1c03      	adds	r3, r0, #0
 8006a96:	1c19      	adds	r1, r3, #0
 8006a98:	1c20      	adds	r0, r4, #0
 8006a9a:	f7f9 fed5 	bl	8000848 <__aeabi_fadd>
 8006a9e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006aa0:	1c19      	adds	r1, r3, #0
 8006aa2:	1c28      	adds	r0, r5, #0
 8006aa4:	f7fa f85a 	bl	8000b5c <__aeabi_fdiv>
 8006aa8:	1c03      	adds	r3, r0, #0
 8006aaa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	4940      	ldr	r1, [pc, #256]	@ (8006bb8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006ab6:	1c18      	adds	r0, r3, #0
 8006ab8:	f7fa f850 	bl	8000b5c <__aeabi_fdiv>
 8006abc:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006abe:	2185      	movs	r1, #133	@ 0x85
 8006ac0:	05c9      	lsls	r1, r1, #23
 8006ac2:	1c18      	adds	r0, r3, #0
 8006ac4:	f7fa fa30 	bl	8000f28 <__aeabi_fmul>
 8006ac8:	1c03      	adds	r3, r0, #0
 8006aca:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4938      	ldr	r1, [pc, #224]	@ (8006bb8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006ad6:	1c18      	adds	r0, r3, #0
 8006ad8:	f7fa f840 	bl	8000b5c <__aeabi_fdiv>
 8006adc:	1c03      	adds	r3, r0, #0
 8006ade:	1c19      	adds	r1, r3, #0
 8006ae0:	1c20      	adds	r0, r4, #0
 8006ae2:	f7f9 feb1 	bl	8000848 <__aeabi_fadd>
 8006ae6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006ae8:	1c19      	adds	r1, r3, #0
 8006aea:	1c28      	adds	r0, r5, #0
 8006aec:	f7fa f836 	bl	8000b5c <__aeabi_fdiv>
 8006af0:	1c03      	adds	r3, r0, #0
 8006af2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d118      	bne.n	8006b32 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006b04:	2188      	movs	r1, #136	@ 0x88
 8006b06:	05c9      	lsls	r1, r1, #23
 8006b08:	1c18      	adds	r0, r3, #0
 8006b0a:	f7fa fa0d 	bl	8000f28 <__aeabi_fmul>
 8006b0e:	1c03      	adds	r3, r0, #0
 8006b10:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006b16:	4929      	ldr	r1, [pc, #164]	@ (8006bbc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006b18:	1c18      	adds	r0, r3, #0
 8006b1a:	f7f9 fe95 	bl	8000848 <__aeabi_fadd>
 8006b1e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006b20:	1c19      	adds	r1, r3, #0
 8006b22:	1c20      	adds	r0, r4, #0
 8006b24:	f7fa f81a 	bl	8000b5c <__aeabi_fdiv>
 8006b28:	1c03      	adds	r3, r0, #0
 8006b2a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b30:	e017      	b.n	8006b62 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006b36:	2188      	movs	r1, #136	@ 0x88
 8006b38:	05c9      	lsls	r1, r1, #23
 8006b3a:	1c18      	adds	r0, r3, #0
 8006b3c:	f7fa f9f4 	bl	8000f28 <__aeabi_fmul>
 8006b40:	1c03      	adds	r3, r0, #0
 8006b42:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006b48:	491d      	ldr	r1, [pc, #116]	@ (8006bc0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006b4a:	1c18      	adds	r0, r3, #0
 8006b4c:	f7f9 fe7c 	bl	8000848 <__aeabi_fadd>
 8006b50:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006b52:	1c19      	adds	r1, r3, #0
 8006b54:	1c20      	adds	r0, r4, #0
 8006b56:	f7fa f801 	bl	8000b5c <__aeabi_fdiv>
 8006b5a:	1c03      	adds	r3, r0, #0
 8006b5c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006b66:	2185      	movs	r1, #133	@ 0x85
 8006b68:	05c9      	lsls	r1, r1, #23
 8006b6a:	1c18      	adds	r0, r3, #0
 8006b6c:	f7fa f9dc 	bl	8000f28 <__aeabi_fmul>
 8006b70:	1c03      	adds	r3, r0, #0
 8006b72:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	4912      	ldr	r1, [pc, #72]	@ (8006bc4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006b7a:	1c18      	adds	r0, r3, #0
 8006b7c:	f7f9 fe64 	bl	8000848 <__aeabi_fadd>
 8006b80:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006b82:	1c19      	adds	r1, r3, #0
 8006b84:	1c20      	adds	r0, r4, #0
 8006b86:	f7f9 ffe9 	bl	8000b5c <__aeabi_fdiv>
 8006b8a:	1c03      	adds	r3, r0, #0
 8006b8c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006bb0:	46c0      	nop			@ (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b002      	add	sp, #8
 8006bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb8:	45610000 	.word	0x45610000
 8006bbc:	44960000 	.word	0x44960000
 8006bc0:	41a00000 	.word	0x41a00000
 8006bc4:	451c4000 	.word	0x451c4000

08006bc8 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006bd4:	1c18      	adds	r0, r3, #0
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006bec:	1c19      	adds	r1, r3, #0
 8006bee:	1c10      	adds	r0, r2, #0
 8006bf0:	f7f9 fe2a 	bl	8000848 <__aeabi_fadd>
 8006bf4:	1c03      	adds	r3, r0, #0
}
 8006bf6:	1c18      	adds	r0, r3, #0
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	b002      	add	sp, #8
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	223c      	movs	r2, #60	@ 0x3c
 8006c0a:	5c9b      	ldrb	r3, [r3, r2]
}
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b002      	add	sp, #8
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006c14:	b5b0      	push	{r4, r5, r7, lr}
 8006c16:	b08c      	sub	sp, #48	@ 0x30
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006c20:	1c19      	adds	r1, r3, #0
 8006c22:	4895      	ldr	r0, [pc, #596]	@ (8006e78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006c24:	f7fa fabe 	bl	80011a4 <__aeabi_fsub>
 8006c28:	1c03      	adds	r3, r0, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c30:	1c19      	adds	r1, r3, #0
 8006c32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c34:	f7f9 fc86 	bl	8000544 <__aeabi_fcmpgt>
 8006c38:	1e03      	subs	r3, r0, #0
 8006c3a:	d00b      	beq.n	8006c54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006c44:	1c19      	adds	r1, r3, #0
 8006c46:	1c10      	adds	r0, r2, #0
 8006c48:	f7f9 fdfe 	bl	8000848 <__aeabi_fadd>
 8006c4c:	1c03      	adds	r3, r0, #0
 8006c4e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c58:	1c19      	adds	r1, r3, #0
 8006c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c5c:	f7f9 fc72 	bl	8000544 <__aeabi_fcmpgt>
 8006c60:	1e03      	subs	r3, r0, #0
 8006c62:	d00b      	beq.n	8006c7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006c6c:	1c19      	adds	r1, r3, #0
 8006c6e:	1c10      	adds	r0, r2, #0
 8006c70:	f7f9 fdea 	bl	8000848 <__aeabi_fadd>
 8006c74:	1c03      	adds	r3, r0, #0
 8006c76:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6959      	ldr	r1, [r3, #20]
 8006c80:	4a7e      	ldr	r2, [pc, #504]	@ (8006e7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	0018      	movs	r0, r3
 8006c86:	f000 f9f1 	bl	800706c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	1c11      	adds	r1, r2, #0
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 f9fa 	bl	800708c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006c98:	1c03      	adds	r3, r0, #0
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006ca8:	1c19      	adds	r1, r3, #0
 8006caa:	1c10      	adds	r0, r2, #0
 8006cac:	f7fa fa7a 	bl	80011a4 <__aeabi_fsub>
 8006cb0:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb4:	1c18      	adds	r0, r3, #0
 8006cb6:	f7fa f937 	bl	8000f28 <__aeabi_fmul>
 8006cba:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006cbc:	1c19      	adds	r1, r3, #0
 8006cbe:	1c20      	adds	r0, r4, #0
 8006cc0:	f7f9 fdc2 	bl	8000848 <__aeabi_fadd>
 8006cc4:	1c03      	adds	r3, r0, #0
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006cd0:	1c19      	adds	r1, r3, #0
 8006cd2:	486b      	ldr	r0, [pc, #428]	@ (8006e80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006cd4:	f7fa fa66 	bl	80011a4 <__aeabi_fsub>
 8006cd8:	1c03      	adds	r3, r0, #0
 8006cda:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	1c11      	adds	r1, r2, #0
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 f9d1 	bl	800708c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006cea:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006cec:	1c19      	adds	r1, r3, #0
 8006cee:	1c28      	adds	r0, r5, #0
 8006cf0:	f7fa f91a 	bl	8000f28 <__aeabi_fmul>
 8006cf4:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8006cf6:	1c19      	adds	r1, r3, #0
 8006cf8:	1c20      	adds	r0, r4, #0
 8006cfa:	f7f9 fda5 	bl	8000848 <__aeabi_fadd>
 8006cfe:	1c03      	adds	r3, r0, #0
 8006d00:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006d02:	4a60      	ldr	r2, [pc, #384]	@ (8006e84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006d04:	6a39      	ldr	r1, [r7, #32]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f000 f9af 	bl	800706c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	1c11      	adds	r1, r2, #0
 8006d16:	0018      	movs	r0, r3
 8006d18:	f000 f9b8 	bl	800708c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006d1c:	1c03      	adds	r3, r0, #0
 8006d1e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8006d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d22:	69f8      	ldr	r0, [r7, #28]
 8006d24:	f7fa f900 	bl	8000f28 <__aeabi_fmul>
 8006d28:	1c03      	adds	r3, r0, #0
 8006d2a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6999      	ldr	r1, [r3, #24]
 8006d34:	4a51      	ldr	r2, [pc, #324]	@ (8006e7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f000 f997 	bl	800706c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	1c11      	adds	r1, r2, #0
 8006d46:	0018      	movs	r0, r3
 8006d48:	f000 f9a0 	bl	800708c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006d4c:	1c03      	adds	r3, r0, #0
 8006d4e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006d5c:	1c19      	adds	r1, r3, #0
 8006d5e:	1c10      	adds	r0, r2, #0
 8006d60:	f7fa fa20 	bl	80011a4 <__aeabi_fsub>
 8006d64:	1c03      	adds	r3, r0, #0
 8006d66:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8006d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d6a:	69b8      	ldr	r0, [r7, #24]
 8006d6c:	f7fa fa1a 	bl	80011a4 <__aeabi_fsub>
 8006d70:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8006d72:	1c19      	adds	r1, r3, #0
 8006d74:	1c28      	adds	r0, r5, #0
 8006d76:	f7fa f8d7 	bl	8000f28 <__aeabi_fmul>
 8006d7a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8006d7c:	1c19      	adds	r1, r3, #0
 8006d7e:	1c20      	adds	r0, r4, #0
 8006d80:	f7f9 fd62 	bl	8000848 <__aeabi_fadd>
 8006d84:	1c03      	adds	r3, r0, #0
 8006d86:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006d90:	1c19      	adds	r1, r3, #0
 8006d92:	483b      	ldr	r0, [pc, #236]	@ (8006e80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006d94:	f7fa fa06 	bl	80011a4 <__aeabi_fsub>
 8006d98:	1c03      	adds	r3, r0, #0
 8006d9a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	1c11      	adds	r1, r2, #0
 8006da4:	0018      	movs	r0, r3
 8006da6:	f000 f971 	bl	800708c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006daa:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006dac:	1c19      	adds	r1, r3, #0
 8006dae:	1c28      	adds	r0, r5, #0
 8006db0:	f7fa f8ba 	bl	8000f28 <__aeabi_fmul>
 8006db4:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8006db6:	1c19      	adds	r1, r3, #0
 8006db8:	1c20      	adds	r0, r4, #0
 8006dba:	f7f9 fd45 	bl	8000848 <__aeabi_fadd>
 8006dbe:	1c03      	adds	r3, r0, #0
 8006dc0:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006dc2:	4a30      	ldr	r2, [pc, #192]	@ (8006e84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006dc4:	6939      	ldr	r1, [r7, #16]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f000 f94f 	bl	800706c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	1c11      	adds	r1, r2, #0
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	f000 f958 	bl	800708c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006ddc:	1c03      	adds	r3, r0, #0
 8006dde:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8006de0:	6979      	ldr	r1, [r7, #20]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7fa f8a0 	bl	8000f28 <__aeabi_fmul>
 8006de8:	1c03      	adds	r3, r0, #0
 8006dea:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4923      	ldr	r1, [pc, #140]	@ (8006e88 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8006dfa:	1c18      	adds	r0, r3, #0
 8006dfc:	f7f9 feae 	bl	8000b5c <__aeabi_fdiv>
 8006e00:	1c03      	adds	r3, r0, #0
 8006e02:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	20fe      	movs	r0, #254	@ 0xfe
 8006e08:	0580      	lsls	r0, r0, #22
 8006e0a:	f7fa f9cb 	bl	80011a4 <__aeabi_fsub>
 8006e0e:	1c03      	adds	r3, r0, #0
 8006e10:	491e      	ldr	r1, [pc, #120]	@ (8006e8c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8006e12:	1c18      	adds	r0, r3, #0
 8006e14:	f7fa f888 	bl	8000f28 <__aeabi_fmul>
 8006e18:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8006e1a:	491d      	ldr	r1, [pc, #116]	@ (8006e90 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8006e1c:	1c18      	adds	r0, r3, #0
 8006e1e:	f7fa f9c1 	bl	80011a4 <__aeabi_fsub>
 8006e22:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8006e24:	1c19      	adds	r1, r3, #0
 8006e26:	1c28      	adds	r0, r5, #0
 8006e28:	f7fa f87e 	bl	8000f28 <__aeabi_fmul>
 8006e2c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8006e2e:	1c19      	adds	r1, r3, #0
 8006e30:	1c20      	adds	r0, r4, #0
 8006e32:	f7f9 fd09 	bl	8000848 <__aeabi_fadd>
 8006e36:	1c03      	adds	r3, r0, #0
 8006e38:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e42:	2100      	movs	r1, #0
 8006e44:	1c18      	adds	r0, r3, #0
 8006e46:	f7f9 fb69 	bl	800051c <__aeabi_fcmplt>
 8006e4a:	1e03      	subs	r3, r0, #0
 8006e4c:	d002      	beq.n	8006e54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8006e5c:	1c19      	adds	r1, r3, #0
 8006e5e:	1c10      	adds	r0, r2, #0
 8006e60:	f7f9 fb70 	bl	8000544 <__aeabi_fcmpgt>
 8006e64:	1e03      	subs	r3, r0, #0
 8006e66:	d100      	bne.n	8006e6a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8006e68:	e002      	b.n	8006e70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e70:	46c0      	nop			@ (mov r8, r8)
 8006e72:	46bd      	mov	sp, r7
 8006e74:	b00c      	add	sp, #48	@ 0x30
 8006e76:	bdb0      	pop	{r4, r5, r7, pc}
 8006e78:	46fffe00 	.word	0x46fffe00
 8006e7c:	3c23d70a 	.word	0x3c23d70a
 8006e80:	43ff0000 	.word	0x43ff0000
 8006e84:	3db851ec 	.word	0x3db851ec
 8006e88:	42700000 	.word	0x42700000
 8006e8c:	3fa66666 	.word	0x3fa66666
 8006e90:	3e99999a 	.word	0x3e99999a

08006e94 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	223c      	movs	r2, #60	@ 0x3c
 8006ea2:	5c9b      	ldrb	r3, [r3, r2]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	4053      	eors	r3, r2
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	223c      	movs	r2, #60	@ 0x3c
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8006ec2:	e0c8      	b.n	8007056 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	4965      	ldr	r1, [pc, #404]	@ (8007060 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8006eca:	1c18      	adds	r0, r3, #0
 8006ecc:	f7f9 fb44 	bl	8000558 <__aeabi_fcmpge>
 8006ed0:	1e03      	subs	r3, r0, #0
 8006ed2:	d107      	bne.n	8006ee4 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006ed8:	4962      	ldr	r1, [pc, #392]	@ (8007064 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8006eda:	1c18      	adds	r0, r3, #0
 8006edc:	f7f9 fb28 	bl	8000530 <__aeabi_fcmple>
 8006ee0:	1e03      	subs	r3, r0, #0
 8006ee2:	d00e      	beq.n	8006f02 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006eec:	1c19      	adds	r1, r3, #0
 8006eee:	1c10      	adds	r0, r2, #0
 8006ef0:	f7f9 fcaa 	bl	8000848 <__aeabi_fadd>
 8006ef4:	1c03      	adds	r3, r0, #0
 8006ef6:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f06:	1c19      	adds	r1, r3, #0
 8006f08:	6838      	ldr	r0, [r7, #0]
 8006f0a:	f7fa f94b 	bl	80011a4 <__aeabi_fsub>
 8006f0e:	1c03      	adds	r3, r0, #0
 8006f10:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7ff fe7d 	bl	8006c14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1e:	1c19      	adds	r1, r3, #0
 8006f20:	6838      	ldr	r0, [r7, #0]
 8006f22:	f7fa f93f 	bl	80011a4 <__aeabi_fsub>
 8006f26:	1c03      	adds	r3, r0, #0
 8006f28:	2185      	movs	r1, #133	@ 0x85
 8006f2a:	05c9      	lsls	r1, r1, #23
 8006f2c:	1c18      	adds	r0, r3, #0
 8006f2e:	f7f9 fe15 	bl	8000b5c <__aeabi_fdiv>
 8006f32:	1c03      	adds	r3, r0, #0
 8006f34:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8006f36:	2100      	movs	r1, #0
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7f9 faef 	bl	800051c <__aeabi_fcmplt>
 8006f3e:	1e03      	subs	r3, r0, #0
 8006f40:	d008      	beq.n	8006f54 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	1c18      	adds	r0, r3, #0
 8006f4a:	f7fa f92b 	bl	80011a4 <__aeabi_fsub>
 8006f4e:	1c03      	adds	r3, r0, #0
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	e007      	b.n	8006f64 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f58:	1c19      	adds	r1, r3, #0
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7f9 fc74 	bl	8000848 <__aeabi_fadd>
 8006f60:	1c03      	adds	r3, r0, #0
 8006f62:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8006f64:	23fe      	movs	r3, #254	@ 0xfe
 8006f66:	059b      	lsls	r3, r3, #22
 8006f68:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8006f6a:	493f      	ldr	r1, [pc, #252]	@ (8007068 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8006f6c:	6978      	ldr	r0, [r7, #20]
 8006f6e:	f7f9 fae9 	bl	8000544 <__aeabi_fcmpgt>
 8006f72:	1e03      	subs	r3, r0, #0
 8006f74:	d010      	beq.n	8006f98 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8006f76:	493c      	ldr	r1, [pc, #240]	@ (8007068 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8006f78:	6978      	ldr	r0, [r7, #20]
 8006f7a:	f7f9 fdef 	bl	8000b5c <__aeabi_fdiv>
 8006f7e:	1c03      	adds	r3, r0, #0
 8006f80:	1c1c      	adds	r4, r3, #0
 8006f82:	4939      	ldr	r1, [pc, #228]	@ (8007068 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8006f84:	6978      	ldr	r0, [r7, #20]
 8006f86:	f7f9 fde9 	bl	8000b5c <__aeabi_fdiv>
 8006f8a:	1c03      	adds	r3, r0, #0
 8006f8c:	1c19      	adds	r1, r3, #0
 8006f8e:	1c20      	adds	r0, r4, #0
 8006f90:	f7f9 ffca 	bl	8000f28 <__aeabi_fmul>
 8006f94:	1c03      	adds	r3, r0, #0
 8006f96:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8006f9c:	1c19      	adds	r1, r3, #0
 8006f9e:	2085      	movs	r0, #133	@ 0x85
 8006fa0:	05c0      	lsls	r0, r0, #23
 8006fa2:	f7fa f8ff 	bl	80011a4 <__aeabi_fsub>
 8006fa6:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8006fa8:	6939      	ldr	r1, [r7, #16]
 8006faa:	1c18      	adds	r0, r3, #0
 8006fac:	f7f9 ffbc 	bl	8000f28 <__aeabi_fmul>
 8006fb0:	1c03      	adds	r3, r0, #0
 8006fb2:	1c18      	adds	r0, r3, #0
 8006fb4:	f00d f8ce 	bl	8014154 <sqrtf>
 8006fb8:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006fc2:	2185      	movs	r1, #133	@ 0x85
 8006fc4:	05c9      	lsls	r1, r1, #23
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f7f9 ffae 	bl	8000f28 <__aeabi_fmul>
 8006fcc:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8006fce:	1c19      	adds	r1, r3, #0
 8006fd0:	1c28      	adds	r0, r5, #0
 8006fd2:	f7f9 fdc3 	bl	8000b5c <__aeabi_fdiv>
 8006fd6:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8006fd8:	1c19      	adds	r1, r3, #0
 8006fda:	1c20      	adds	r0, r4, #0
 8006fdc:	f7f9 ffa4 	bl	8000f28 <__aeabi_fmul>
 8006fe0:	1c03      	adds	r3, r0, #0
 8006fe2:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe8:	68f9      	ldr	r1, [r7, #12]
 8006fea:	1c18      	adds	r0, r3, #0
 8006fec:	f7f9 ff9c 	bl	8000f28 <__aeabi_fmul>
 8006ff0:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8006ff2:	6939      	ldr	r1, [r7, #16]
 8006ff4:	1c18      	adds	r0, r3, #0
 8006ff6:	f7f9 fdb1 	bl	8000b5c <__aeabi_fdiv>
 8006ffa:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8006ffc:	68f9      	ldr	r1, [r7, #12]
 8006ffe:	1c18      	adds	r0, r3, #0
 8007000:	f7f9 ff92 	bl	8000f28 <__aeabi_fmul>
 8007004:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007006:	1c19      	adds	r1, r3, #0
 8007008:	1c20      	adds	r0, r4, #0
 800700a:	f7f9 fc1d 	bl	8000848 <__aeabi_fadd>
 800700e:	1c03      	adds	r3, r0, #0
 8007010:	1c18      	adds	r0, r3, #0
 8007012:	f00d f89f 	bl	8014154 <sqrtf>
 8007016:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007018:	1c19      	adds	r1, r3, #0
 800701a:	1c30      	adds	r0, r6, #0
 800701c:	f7f9 ff84 	bl	8000f28 <__aeabi_fmul>
 8007020:	1c03      	adds	r3, r0, #0
 8007022:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007030:	68f9      	ldr	r1, [r7, #12]
 8007032:	1c18      	adds	r0, r3, #0
 8007034:	f7f9 ff78 	bl	8000f28 <__aeabi_fmul>
 8007038:	1c03      	adds	r3, r0, #0
 800703a:	2182      	movs	r1, #130	@ 0x82
 800703c:	05c9      	lsls	r1, r1, #23
 800703e:	1c18      	adds	r0, r3, #0
 8007040:	f7f9 fd8c 	bl	8000b5c <__aeabi_fdiv>
 8007044:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007046:	1c19      	adds	r1, r3, #0
 8007048:	1c20      	adds	r0, r4, #0
 800704a:	f7f9 fbfd 	bl	8000848 <__aeabi_fadd>
 800704e:	1c03      	adds	r3, r0, #0
 8007050:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	46bd      	mov	sp, r7
 800705a:	b007      	add	sp, #28
 800705c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705e:	46c0      	nop			@ (mov r8, r8)
 8007060:	42c80000 	.word	0x42c80000
 8007064:	c2c80000 	.word	0xc2c80000
 8007068:	44b40000 	.word	0x44b40000

0800706c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007084:	46c0      	nop			@ (mov r8, r8)
 8007086:	46bd      	mov	sp, r7
 8007088:	b004      	add	sp, #16
 800708a:	bd80      	pop	{r7, pc}

0800708c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800709e:	1c19      	adds	r1, r3, #0
 80070a0:	6838      	ldr	r0, [r7, #0]
 80070a2:	f7fa f87f 	bl	80011a4 <__aeabi_fsub>
 80070a6:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80070a8:	1c19      	adds	r1, r3, #0
 80070aa:	1c20      	adds	r0, r4, #0
 80070ac:	f7f9 ff3c 	bl	8000f28 <__aeabi_fmul>
 80070b0:	1c03      	adds	r3, r0, #0
 80070b2:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80070b4:	4912      	ldr	r1, [pc, #72]	@ (8007100 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7f9 fa30 	bl	800051c <__aeabi_fcmplt>
 80070bc:	1e03      	subs	r3, r0, #0
 80070be:	d002      	beq.n	80070c6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 80070c0:	23fe      	movs	r3, #254	@ 0xfe
 80070c2:	059b      	lsls	r3, r3, #22
 80070c4:	e018      	b.n	80070f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 80070c6:	490f      	ldr	r1, [pc, #60]	@ (8007104 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7f9 fa3b 	bl	8000544 <__aeabi_fcmpgt>
 80070ce:	1e03      	subs	r3, r0, #0
 80070d0:	d001      	beq.n	80070d6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e010      	b.n	80070f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1c18      	adds	r0, r3, #0
 80070da:	f00d f813 	bl	8014104 <expf>
 80070de:	1c03      	adds	r3, r0, #0
 80070e0:	21fe      	movs	r1, #254	@ 0xfe
 80070e2:	0589      	lsls	r1, r1, #22
 80070e4:	1c18      	adds	r0, r3, #0
 80070e6:	f7f9 fbaf 	bl	8000848 <__aeabi_fadd>
 80070ea:	1c03      	adds	r3, r0, #0
 80070ec:	1c19      	adds	r1, r3, #0
 80070ee:	20fe      	movs	r0, #254	@ 0xfe
 80070f0:	0580      	lsls	r0, r0, #22
 80070f2:	f7f9 fd33 	bl	8000b5c <__aeabi_fdiv>
 80070f6:	1c03      	adds	r3, r0, #0
    }
}
 80070f8:	1c18      	adds	r0, r3, #0
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b005      	add	sp, #20
 80070fe:	bd90      	pop	{r4, r7, pc}
 8007100:	c2480000 	.word	0xc2480000
 8007104:	42480000 	.word	0x42480000

08007108 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007120:	46c0      	nop			@ (mov r8, r8)
 8007122:	46bd      	mov	sp, r7
 8007124:	b004      	add	sp, #16
 8007126:	bd80      	pop	{r7, pc}

08007128 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d114      	bne.n	8007164 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800713e:	1c19      	adds	r1, r3, #0
 8007140:	6838      	ldr	r0, [r7, #0]
 8007142:	f7fa f82f 	bl	80011a4 <__aeabi_fsub>
 8007146:	1c03      	adds	r3, r0, #0
 8007148:	4918      	ldr	r1, [pc, #96]	@ (80071ac <GasIndexAlgorithm__mox_model__process+0x84>)
 800714a:	1c18      	adds	r0, r3, #0
 800714c:	f7f9 fd06 	bl	8000b5c <__aeabi_fdiv>
 8007150:	1c03      	adds	r3, r0, #0
 8007152:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007158:	1c19      	adds	r1, r3, #0
 800715a:	1c10      	adds	r0, r2, #0
 800715c:	f7f9 fee4 	bl	8000f28 <__aeabi_fmul>
 8007160:	1c03      	adds	r3, r0, #0
 8007162:	e01f      	b.n	80071a4 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007168:	1c19      	adds	r1, r3, #0
 800716a:	6838      	ldr	r0, [r7, #0]
 800716c:	f7fa f81a 	bl	80011a4 <__aeabi_fsub>
 8007170:	1c03      	adds	r3, r0, #0
 8007172:	1c1a      	adds	r2, r3, #0
 8007174:	2380      	movs	r3, #128	@ 0x80
 8007176:	061b      	lsls	r3, r3, #24
 8007178:	4053      	eors	r3, r2
 800717a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007180:	490b      	ldr	r1, [pc, #44]	@ (80071b0 <GasIndexAlgorithm__mox_model__process+0x88>)
 8007182:	1c18      	adds	r0, r3, #0
 8007184:	f7f9 fb60 	bl	8000848 <__aeabi_fadd>
 8007188:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800718a:	1c19      	adds	r1, r3, #0
 800718c:	1c20      	adds	r0, r4, #0
 800718e:	f7f9 fce5 	bl	8000b5c <__aeabi_fdiv>
 8007192:	1c03      	adds	r3, r0, #0
 8007194:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800719a:	1c19      	adds	r1, r3, #0
 800719c:	1c10      	adds	r0, r2, #0
 800719e:	f7f9 fec3 	bl	8000f28 <__aeabi_fmul>
 80071a2:	1c03      	adds	r3, r0, #0
    }
}
 80071a4:	1c18      	adds	r0, r3, #0
 80071a6:	46bd      	mov	sp, r7
 80071a8:	b003      	add	sp, #12
 80071aa:	bd90      	pop	{r4, r7, pc}
 80071ac:	44fa0000 	.word	0x44fa0000
 80071b0:	435c0000 	.word	0x435c0000

080071b4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2180      	movs	r1, #128	@ 0x80
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2184      	movs	r1, #132	@ 0x84
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2188      	movs	r1, #136	@ 0x88
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	505a      	str	r2, [r3, r1]
}
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	46bd      	mov	sp, r7
 80071de:	b004      	add	sp, #16
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2280      	movs	r2, #128	@ 0x80
 80071f2:	589c      	ldr	r4, [r3, r2]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2284      	movs	r2, #132	@ 0x84
 80071f8:	589b      	ldr	r3, [r3, r2]
 80071fa:	1c19      	adds	r1, r3, #0
 80071fc:	6838      	ldr	r0, [r7, #0]
 80071fe:	f7f9 ffd1 	bl	80011a4 <__aeabi_fsub>
 8007202:	1c03      	adds	r3, r0, #0
 8007204:	1c19      	adds	r1, r3, #0
 8007206:	1c20      	adds	r0, r4, #0
 8007208:	f7f9 fe8e 	bl	8000f28 <__aeabi_fmul>
 800720c:	1c03      	adds	r3, r0, #0
 800720e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007210:	4940      	ldr	r1, [pc, #256]	@ (8007314 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007212:	68b8      	ldr	r0, [r7, #8]
 8007214:	f7f9 f982 	bl	800051c <__aeabi_fcmplt>
 8007218:	1e03      	subs	r3, r0, #0
 800721a:	d001      	beq.n	8007220 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800721c:	4b3e      	ldr	r3, [pc, #248]	@ (8007318 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800721e:	e075      	b.n	800730c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007220:	493e      	ldr	r1, [pc, #248]	@ (800731c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007222:	68b8      	ldr	r0, [r7, #8]
 8007224:	f7f9 f98e 	bl	8000544 <__aeabi_fcmpgt>
 8007228:	1e03      	subs	r3, r0, #0
 800722a:	d001      	beq.n	8007230 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800722c:	2300      	movs	r3, #0
 800722e:	e06d      	b.n	800730c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007230:	2100      	movs	r1, #0
 8007232:	6838      	ldr	r0, [r7, #0]
 8007234:	f7f9 f990 	bl	8000558 <__aeabi_fcmpge>
 8007238:	1e03      	subs	r3, r0, #0
 800723a:	d047      	beq.n	80072cc <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2288      	movs	r2, #136	@ 0x88
 8007240:	589b      	ldr	r3, [r3, r2]
 8007242:	21fe      	movs	r1, #254	@ 0xfe
 8007244:	0589      	lsls	r1, r1, #22
 8007246:	1c18      	adds	r0, r3, #0
 8007248:	f7f9 f962 	bl	8000510 <__aeabi_fcmpeq>
 800724c:	1e03      	subs	r3, r0, #0
 800724e:	d00e      	beq.n	800726e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	1c19      	adds	r1, r3, #0
 8007256:	20fe      	movs	r0, #254	@ 0xfe
 8007258:	0580      	lsls	r0, r0, #22
 800725a:	f7f9 ffa3 	bl	80011a4 <__aeabi_fsub>
 800725e:	1c03      	adds	r3, r0, #0
 8007260:	492f      	ldr	r1, [pc, #188]	@ (8007320 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007262:	1c18      	adds	r0, r3, #0
 8007264:	f7f9 fe60 	bl	8000f28 <__aeabi_fmul>
 8007268:	1c03      	adds	r3, r0, #0
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e012      	b.n	8007294 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	492c      	ldr	r1, [pc, #176]	@ (8007324 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007274:	1c18      	adds	r0, r3, #0
 8007276:	f7f9 fe57 	bl	8000f28 <__aeabi_fmul>
 800727a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800727c:	1c19      	adds	r1, r3, #0
 800727e:	4826      	ldr	r0, [pc, #152]	@ (8007318 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007280:	f7f9 ff90 	bl	80011a4 <__aeabi_fsub>
 8007284:	1c03      	adds	r3, r0, #0
 8007286:	2181      	movs	r1, #129	@ 0x81
 8007288:	05c9      	lsls	r1, r1, #23
 800728a:	1c18      	adds	r0, r3, #0
 800728c:	f7f9 fc66 	bl	8000b5c <__aeabi_fdiv>
 8007290:	1c03      	adds	r3, r0, #0
 8007292:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007294:	4920      	ldr	r1, [pc, #128]	@ (8007318 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7f9 fad6 	bl	8000848 <__aeabi_fadd>
 800729c:	1c03      	adds	r3, r0, #0
 800729e:	1c1c      	adds	r4, r3, #0
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	1c18      	adds	r0, r3, #0
 80072a4:	f00c ff2e 	bl	8014104 <expf>
 80072a8:	1c03      	adds	r3, r0, #0
 80072aa:	21fe      	movs	r1, #254	@ 0xfe
 80072ac:	0589      	lsls	r1, r1, #22
 80072ae:	1c18      	adds	r0, r3, #0
 80072b0:	f7f9 faca 	bl	8000848 <__aeabi_fadd>
 80072b4:	1c03      	adds	r3, r0, #0
 80072b6:	1c19      	adds	r1, r3, #0
 80072b8:	1c20      	adds	r0, r4, #0
 80072ba:	f7f9 fc4f 	bl	8000b5c <__aeabi_fdiv>
 80072be:	1c03      	adds	r3, r0, #0
 80072c0:	68f9      	ldr	r1, [r7, #12]
 80072c2:	1c18      	adds	r0, r3, #0
 80072c4:	f7f9 ff6e 	bl	80011a4 <__aeabi_fsub>
 80072c8:	1c03      	adds	r3, r0, #0
 80072ca:	e01f      	b.n	800730c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2188      	movs	r1, #136	@ 0x88
 80072d4:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 80072d6:	1c19      	adds	r1, r3, #0
 80072d8:	1c10      	adds	r0, r2, #0
 80072da:	f7f9 fc3f 	bl	8000b5c <__aeabi_fdiv>
 80072de:	1c03      	adds	r3, r0, #0
 80072e0:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	1c18      	adds	r0, r3, #0
 80072e6:	f00c ff0d 	bl	8014104 <expf>
 80072ea:	1c03      	adds	r3, r0, #0
 80072ec:	21fe      	movs	r1, #254	@ 0xfe
 80072ee:	0589      	lsls	r1, r1, #22
 80072f0:	1c18      	adds	r0, r3, #0
 80072f2:	f7f9 faa9 	bl	8000848 <__aeabi_fadd>
 80072f6:	1c03      	adds	r3, r0, #0
 80072f8:	1c19      	adds	r1, r3, #0
 80072fa:	4807      	ldr	r0, [pc, #28]	@ (8007318 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80072fc:	f7f9 fc2e 	bl	8000b5c <__aeabi_fdiv>
 8007300:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007302:	1c19      	adds	r1, r3, #0
 8007304:	1c20      	adds	r0, r4, #0
 8007306:	f7f9 fe0f 	bl	8000f28 <__aeabi_fmul>
 800730a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800730c:	1c18      	adds	r0, r3, #0
 800730e:	46bd      	mov	sp, r7
 8007310:	b005      	add	sp, #20
 8007312:	bd90      	pop	{r4, r7, pc}
 8007314:	c2480000 	.word	0xc2480000
 8007318:	43fa0000 	.word	0x43fa0000
 800731c:	42480000 	.word	0x42480000
 8007320:	3f8041ab 	.word	0x3f8041ab
 8007324:	40a00000 	.word	0x40a00000

08007328 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007328:	b590      	push	{r4, r7, lr}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4913      	ldr	r1, [pc, #76]	@ (8007388 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800733a:	1c18      	adds	r0, r3, #0
 800733c:	f7f9 fa84 	bl	8000848 <__aeabi_fadd>
 8007340:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007342:	1c19      	adds	r1, r3, #0
 8007344:	1c20      	adds	r0, r4, #0
 8007346:	f7f9 fc09 	bl	8000b5c <__aeabi_fdiv>
 800734a:	1c03      	adds	r3, r0, #0
 800734c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	228c      	movs	r2, #140	@ 0x8c
 8007352:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	490b      	ldr	r1, [pc, #44]	@ (800738c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800735e:	1c18      	adds	r0, r3, #0
 8007360:	f7f9 fa72 	bl	8000848 <__aeabi_fadd>
 8007364:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007366:	1c19      	adds	r1, r3, #0
 8007368:	1c20      	adds	r0, r4, #0
 800736a:	f7f9 fbf7 	bl	8000b5c <__aeabi_fdiv>
 800736e:	1c03      	adds	r3, r0, #0
 8007370:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2290      	movs	r2, #144	@ 0x90
 8007376:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2294      	movs	r2, #148	@ 0x94
 800737c:	2100      	movs	r1, #0
 800737e:	5499      	strb	r1, [r3, r2]
}
 8007380:	46c0      	nop			@ (mov r8, r8)
 8007382:	46bd      	mov	sp, r7
 8007384:	b003      	add	sp, #12
 8007386:	bd90      	pop	{r4, r7, pc}
 8007388:	41a00000 	.word	0x41a00000
 800738c:	43fa0000 	.word	0x43fa0000

08007390 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2294      	movs	r2, #148	@ 0x94
 800739e:	5c9b      	ldrb	r3, [r3, r2]
 80073a0:	2201      	movs	r2, #1
 80073a2:	4053      	eors	r3, r2
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2198      	movs	r1, #152	@ 0x98
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	219c      	movs	r1, #156	@ 0x9c
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	21a0      	movs	r1, #160	@ 0xa0
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2294      	movs	r2, #148	@ 0x94
 80073c6:	2101      	movs	r1, #1
 80073c8:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	228c      	movs	r2, #140	@ 0x8c
 80073ce:	589b      	ldr	r3, [r3, r2]
 80073d0:	1c19      	adds	r1, r3, #0
 80073d2:	20fe      	movs	r0, #254	@ 0xfe
 80073d4:	0580      	lsls	r0, r0, #22
 80073d6:	f7f9 fee5 	bl	80011a4 <__aeabi_fsub>
 80073da:	1c03      	adds	r3, r0, #0
 80073dc:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2298      	movs	r2, #152	@ 0x98
 80073e2:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80073e4:	1c19      	adds	r1, r3, #0
 80073e6:	f7f9 fd9f 	bl	8000f28 <__aeabi_fmul>
 80073ea:	1c03      	adds	r3, r0, #0
 80073ec:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	228c      	movs	r2, #140	@ 0x8c
 80073f2:	589b      	ldr	r3, [r3, r2]
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	1c18      	adds	r0, r3, #0
 80073f8:	f7f9 fd96 	bl	8000f28 <__aeabi_fmul>
 80073fc:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 80073fe:	1c19      	adds	r1, r3, #0
 8007400:	1c20      	adds	r0, r4, #0
 8007402:	f7f9 fa21 	bl	8000848 <__aeabi_fadd>
 8007406:	1c03      	adds	r3, r0, #0
 8007408:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2298      	movs	r2, #152	@ 0x98
 800740e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2290      	movs	r2, #144	@ 0x90
 8007414:	589b      	ldr	r3, [r3, r2]
 8007416:	1c19      	adds	r1, r3, #0
 8007418:	20fe      	movs	r0, #254	@ 0xfe
 800741a:	0580      	lsls	r0, r0, #22
 800741c:	f7f9 fec2 	bl	80011a4 <__aeabi_fsub>
 8007420:	1c03      	adds	r3, r0, #0
 8007422:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	229c      	movs	r2, #156	@ 0x9c
 8007428:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800742a:	1c19      	adds	r1, r3, #0
 800742c:	f7f9 fd7c 	bl	8000f28 <__aeabi_fmul>
 8007430:	1c03      	adds	r3, r0, #0
 8007432:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2290      	movs	r2, #144	@ 0x90
 8007438:	589b      	ldr	r3, [r3, r2]
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	1c18      	adds	r0, r3, #0
 800743e:	f7f9 fd73 	bl	8000f28 <__aeabi_fmul>
 8007442:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007444:	1c19      	adds	r1, r3, #0
 8007446:	1c20      	adds	r0, r4, #0
 8007448:	f7f9 f9fe 	bl	8000848 <__aeabi_fadd>
 800744c:	1c03      	adds	r3, r0, #0
 800744e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	229c      	movs	r2, #156	@ 0x9c
 8007454:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2298      	movs	r2, #152	@ 0x98
 800745a:	589a      	ldr	r2, [r3, r2]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	219c      	movs	r1, #156	@ 0x9c
 8007460:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8007462:	1c19      	adds	r1, r3, #0
 8007464:	1c10      	adds	r0, r2, #0
 8007466:	f7f9 fe9d 	bl	80011a4 <__aeabi_fsub>
 800746a:	1c03      	adds	r3, r0, #0
 800746c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800746e:	2100      	movs	r1, #0
 8007470:	6978      	ldr	r0, [r7, #20]
 8007472:	f7f9 f853 	bl	800051c <__aeabi_fcmplt>
 8007476:	1e03      	subs	r3, r0, #0
 8007478:	d004      	beq.n	8007484 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2280      	movs	r2, #128	@ 0x80
 800747e:	0612      	lsls	r2, r2, #24
 8007480:	4053      	eors	r3, r2
 8007482:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8007484:	4923      	ldr	r1, [pc, #140]	@ (8007514 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8007486:	6978      	ldr	r0, [r7, #20]
 8007488:	f7f9 fd4e 	bl	8000f28 <__aeabi_fmul>
 800748c:	1c03      	adds	r3, r0, #0
 800748e:	1c18      	adds	r0, r3, #0
 8007490:	f00c fe38 	bl	8014104 <expf>
 8007494:	1c03      	adds	r3, r0, #0
 8007496:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8007498:	491f      	ldr	r1, [pc, #124]	@ (8007518 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800749a:	6938      	ldr	r0, [r7, #16]
 800749c:	f7f9 fd44 	bl	8000f28 <__aeabi_fmul>
 80074a0:	1c03      	adds	r3, r0, #0
 80074a2:	491e      	ldr	r1, [pc, #120]	@ (800751c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80074a4:	1c18      	adds	r0, r3, #0
 80074a6:	f7f9 f9cf 	bl	8000848 <__aeabi_fadd>
 80074aa:	1c03      	adds	r3, r0, #0
 80074ac:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685c      	ldr	r4, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	1c18      	adds	r0, r3, #0
 80074ba:	f7f9 f9c5 	bl	8000848 <__aeabi_fadd>
 80074be:	1c03      	adds	r3, r0, #0
 80074c0:	1c19      	adds	r1, r3, #0
 80074c2:	1c20      	adds	r0, r4, #0
 80074c4:	f7f9 fb4a 	bl	8000b5c <__aeabi_fdiv>
 80074c8:	1c03      	adds	r3, r0, #0
 80074ca:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	20fe      	movs	r0, #254	@ 0xfe
 80074d0:	0580      	lsls	r0, r0, #22
 80074d2:	f7f9 fe67 	bl	80011a4 <__aeabi_fsub>
 80074d6:	1c03      	adds	r3, r0, #0
 80074d8:	1c18      	adds	r0, r3, #0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	22a0      	movs	r2, #160	@ 0xa0
 80074de:	589b      	ldr	r3, [r3, r2]
 80074e0:	1c19      	adds	r1, r3, #0
 80074e2:	f7f9 fd21 	bl	8000f28 <__aeabi_fmul>
 80074e6:	1c03      	adds	r3, r0, #0
 80074e8:	1c1c      	adds	r4, r3, #0
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	68b8      	ldr	r0, [r7, #8]
 80074ee:	f7f9 fd1b 	bl	8000f28 <__aeabi_fmul>
 80074f2:	1c03      	adds	r3, r0, #0
 80074f4:	1c19      	adds	r1, r3, #0
 80074f6:	1c20      	adds	r0, r4, #0
 80074f8:	f7f9 f9a6 	bl	8000848 <__aeabi_fadd>
 80074fc:	1c03      	adds	r3, r0, #0
 80074fe:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	22a0      	movs	r2, #160	@ 0xa0
 8007504:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	22a0      	movs	r2, #160	@ 0xa0
 800750a:	589b      	ldr	r3, [r3, r2]
}
 800750c:	1c18      	adds	r0, r3, #0
 800750e:	46bd      	mov	sp, r7
 8007510:	b007      	add	sp, #28
 8007512:	bd90      	pop	{r4, r7, pc}
 8007514:	be4ccccd 	.word	0xbe4ccccd
 8007518:	43f00000 	.word	0x43f00000
 800751c:	41a00000 	.word	0x41a00000

08007520 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007520:	b590      	push	{r4, r7, lr}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6039      	str	r1, [r7, #0]
 8007528:	0011      	movs	r1, r2
 800752a:	1dfb      	adds	r3, r7, #7
 800752c:	1c02      	adds	r2, r0, #0
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	1dbb      	adds	r3, r7, #6
 8007532:	1c0a      	adds	r2, r1, #0
 8007534:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007536:	4b08      	ldr	r3, [pc, #32]	@ (8007558 <ReadRegister+0x38>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800753e:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <ReadRegister+0x38>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	1dba      	adds	r2, r7, #6
 8007544:	7814      	ldrb	r4, [r2, #0]
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	1dfa      	adds	r2, r7, #7
 800754a:	7810      	ldrb	r0, [r2, #0]
 800754c:	0022      	movs	r2, r4
 800754e:	4798      	blx	r3
  }
}
 8007550:	46c0      	nop			@ (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b003      	add	sp, #12
 8007556:	bd90      	pop	{r4, r7, pc}
 8007558:	200027c0 	.word	0x200027c0

0800755c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6039      	str	r1, [r7, #0]
 8007564:	0011      	movs	r1, r2
 8007566:	1dfb      	adds	r3, r7, #7
 8007568:	1c02      	adds	r2, r0, #0
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	1dbb      	adds	r3, r7, #6
 800756e:	1c0a      	adds	r2, r1, #0
 8007570:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007572:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <WriteRegister+0x38>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d008      	beq.n	800758c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800757a:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <WriteRegister+0x38>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	1dba      	adds	r2, r7, #6
 8007580:	7814      	ldrb	r4, [r2, #0]
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	1dfa      	adds	r2, r7, #7
 8007586:	7810      	ldrb	r0, [r2, #0]
 8007588:	0022      	movs	r2, r4
 800758a:	4798      	blx	r3
  }
}
 800758c:	46c0      	nop			@ (mov r8, r8)
 800758e:	46bd      	mov	sp, r7
 8007590:	b003      	add	sp, #12
 8007592:	bd90      	pop	{r4, r7, pc}
 8007594:	200027c4 	.word	0x200027c4

08007598 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80075a2:	4b07      	ldr	r3, [pc, #28]	@ (80075c0 <SGP_Init+0x28>)
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80075a8:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <SGP_Init+0x2c>)
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80075ae:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <SGP_Init+0x30>)
 80075b0:	2100      	movs	r1, #0
 80075b2:	0018      	movs	r0, r3
 80075b4:	f7ff f930 	bl	8006818 <GasIndexAlgorithm_init>
}
 80075b8:	46c0      	nop			@ (mov r8, r8)
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b002      	add	sp, #8
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200027c0 	.word	0x200027c0
 80075c4:	200027c4 	.word	0x200027c4
 80075c8:	200027d4 	.word	0x200027d4

080075cc <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80075d0:	4b13      	ldr	r3, [pc, #76]	@ (8007620 <SGP_StartMeasurement+0x54>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00d      	beq.n	80075f4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80075d8:	4b12      	ldr	r3, [pc, #72]	@ (8007624 <SGP_StartMeasurement+0x58>)
 80075da:	2208      	movs	r2, #8
 80075dc:	0019      	movs	r1, r3
 80075de:	2059      	movs	r0, #89	@ 0x59
 80075e0:	f7ff ffbc 	bl	800755c <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80075e4:	f001 f98c 	bl	8008900 <GetCurrentHalTicks>
 80075e8:	0003      	movs	r3, r0
 80075ea:	331e      	adds	r3, #30
 80075ec:	001a      	movs	r2, r3
 80075ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007628 <SGP_StartMeasurement+0x5c>)
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e00c      	b.n	800760e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80075f4:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <SGP_StartMeasurement+0x60>)
 80075f6:	2208      	movs	r2, #8
 80075f8:	0019      	movs	r1, r3
 80075fa:	2059      	movs	r0, #89	@ 0x59
 80075fc:	f7ff ffae 	bl	800755c <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8007600:	f001 f97e 	bl	8008900 <GetCurrentHalTicks>
 8007604:	0003      	movs	r3, r0
 8007606:	33aa      	adds	r3, #170	@ 0xaa
 8007608:	001a      	movs	r2, r3
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <SGP_StartMeasurement+0x64>)
 800760c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800760e:	4b09      	ldr	r3, [pc, #36]	@ (8007634 <SGP_StartMeasurement+0x68>)
 8007610:	2200      	movs	r2, #0
 8007612:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8007614:	4b08      	ldr	r3, [pc, #32]	@ (8007638 <SGP_StartMeasurement+0x6c>)
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
}
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	2000287c 	.word	0x2000287c
 8007624:	20000114 	.word	0x20000114
 8007628:	20000128 	.word	0x20000128
 800762c:	2000010c 	.word	0x2000010c
 8007630:	20000120 	.word	0x20000120
 8007634:	200027d2 	.word	0x200027d2
 8007638:	200027d3 	.word	0x200027d3

0800763c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
 8007640:	4b04      	ldr	r3, [pc, #16]	@ (8007654 <SGP_HeatedUp+0x18>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	0018      	movs	r0, r3
 8007646:	f001 f879 	bl	800873c <TimestampIsReached>
 800764a:	0003      	movs	r3, r0
 800764c:	0018      	movs	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	46c0      	nop			@ (mov r8, r8)
 8007654:	20000120 	.word	0x20000120

08007658 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800765c:	4b04      	ldr	r3, [pc, #16]	@ (8007670 <SGP_MeasurementReady+0x18>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	0018      	movs	r0, r3
 8007662:	f001 f86b 	bl	800873c <TimestampIsReached>
 8007666:	0003      	movs	r3, r0
}
 8007668:	0018      	movs	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	20000128 	.word	0x20000128

08007674 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8007678:	4b04      	ldr	r3, [pc, #16]	@ (800768c <SGP_MeasurementDone+0x18>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	0018      	movs	r0, r3
 800767e:	f001 f85d 	bl	800873c <TimestampIsReached>
 8007682:	0003      	movs	r3, r0
}
 8007684:	0018      	movs	r0, r3
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	20000124 	.word	0x20000124

08007690 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007694:	4b04      	ldr	r3, [pc, #16]	@ (80076a8 <SGP_TurnHeaterOff+0x18>)
 8007696:	2202      	movs	r2, #2
 8007698:	0019      	movs	r1, r3
 800769a:	2059      	movs	r0, #89	@ 0x59
 800769c:	f7ff ff5e 	bl	800755c <WriteRegister>
}
 80076a0:	46c0      	nop			@ (mov r8, r8)
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	20000104 	.word	0x20000104

080076ac <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80076ac:	b5b0      	push	{r4, r5, r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80076b4:	f7ff ffc2 	bl	800763c <SGP_HeatedUp>
 80076b8:	1e03      	subs	r3, r0, #0
 80076ba:	d038      	beq.n	800772e <SGP_GetMeasurementValues+0x82>
 80076bc:	4bdb      	ldr	r3, [pc, #876]	@ (8007a2c <SGP_GetMeasurementValues+0x380>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2201      	movs	r2, #1
 80076c2:	4053      	eors	r3, r2
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d031      	beq.n	800772e <SGP_GetMeasurementValues+0x82>
 80076ca:	4bd9      	ldr	r3, [pc, #868]	@ (8007a30 <SGP_GetMeasurementValues+0x384>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2201      	movs	r2, #1
 80076d0:	4053      	eors	r3, r2
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d02a      	beq.n	800772e <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80076d8:	4ad6      	ldr	r2, [pc, #856]	@ (8007a34 <SGP_GetMeasurementValues+0x388>)
 80076da:	4bd7      	ldr	r3, [pc, #860]	@ (8007a38 <SGP_GetMeasurementValues+0x38c>)
 80076dc:	0019      	movs	r1, r3
 80076de:	2003      	movs	r0, #3
 80076e0:	f001 f882 	bl	80087e8 <CreateLine>
    HeatUpIsDone = true;
 80076e4:	4bd1      	ldr	r3, [pc, #836]	@ (8007a2c <SGP_GetMeasurementValues+0x380>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80076ea:	4bd4      	ldr	r3, [pc, #848]	@ (8007a3c <SGP_GetMeasurementValues+0x390>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00d      	beq.n	800770e <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80076f2:	4bd3      	ldr	r3, [pc, #844]	@ (8007a40 <SGP_GetMeasurementValues+0x394>)
 80076f4:	2208      	movs	r2, #8
 80076f6:	0019      	movs	r1, r3
 80076f8:	2059      	movs	r0, #89	@ 0x59
 80076fa:	f7ff ff2f 	bl	800755c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80076fe:	f001 f8ff 	bl	8008900 <GetCurrentHalTicks>
 8007702:	0003      	movs	r3, r0
 8007704:	331e      	adds	r3, #30
 8007706:	001a      	movs	r2, r3
 8007708:	4bce      	ldr	r3, [pc, #824]	@ (8007a44 <SGP_GetMeasurementValues+0x398>)
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	e00c      	b.n	8007728 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800770e:	4bce      	ldr	r3, [pc, #824]	@ (8007a48 <SGP_GetMeasurementValues+0x39c>)
 8007710:	2208      	movs	r2, #8
 8007712:	0019      	movs	r1, r3
 8007714:	2059      	movs	r0, #89	@ 0x59
 8007716:	f7ff ff21 	bl	800755c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800771a:	f001 f8f1 	bl	8008900 <GetCurrentHalTicks>
 800771e:	0003      	movs	r3, r0
 8007720:	331e      	adds	r3, #30
 8007722:	001a      	movs	r2, r3
 8007724:	4bc7      	ldr	r3, [pc, #796]	@ (8007a44 <SGP_GetMeasurementValues+0x398>)
 8007726:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007728:	4bc1      	ldr	r3, [pc, #772]	@ (8007a30 <SGP_GetMeasurementValues+0x384>)
 800772a:	2201      	movs	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800772e:	4bbf      	ldr	r3, [pc, #764]	@ (8007a2c <SGP_GetMeasurementValues+0x380>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d100      	bne.n	8007738 <SGP_GetMeasurementValues+0x8c>
 8007736:	e1b5      	b.n	8007aa4 <SGP_GetMeasurementValues+0x3f8>
 8007738:	f7ff ff8e 	bl	8007658 <SGP_MeasurementReady>
 800773c:	1e03      	subs	r3, r0, #0
 800773e:	d100      	bne.n	8007742 <SGP_GetMeasurementValues+0x96>
 8007740:	e1b0      	b.n	8007aa4 <SGP_GetMeasurementValues+0x3f8>
 8007742:	4bc2      	ldr	r3, [pc, #776]	@ (8007a4c <SGP_GetMeasurementValues+0x3a0>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2201      	movs	r2, #1
 8007748:	4053      	eors	r3, r2
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d100      	bne.n	8007752 <SGP_GetMeasurementValues+0xa6>
 8007750:	e1a8      	b.n	8007aa4 <SGP_GetMeasurementValues+0x3f8>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8007752:	4bbf      	ldr	r3, [pc, #764]	@ (8007a50 <SGP_GetMeasurementValues+0x3a4>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	3301      	adds	r3, #1
 8007758:	4abe      	ldr	r2, [pc, #760]	@ (8007a54 <SGP_GetMeasurementValues+0x3a8>)
 800775a:	49b7      	ldr	r1, [pc, #732]	@ (8007a38 <SGP_GetMeasurementValues+0x38c>)
 800775c:	2003      	movs	r0, #3
 800775e:	f001 f843 	bl	80087e8 <CreateLine>
    MeasurementIsReady = true;
 8007762:	4bba      	ldr	r3, [pc, #744]	@ (8007a4c <SGP_GetMeasurementValues+0x3a0>)
 8007764:	2201      	movs	r2, #1
 8007766:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007768:	4bbb      	ldr	r3, [pc, #748]	@ (8007a58 <SGP_GetMeasurementValues+0x3ac>)
 800776a:	2203      	movs	r2, #3
 800776c:	0019      	movs	r1, r3
 800776e:	2059      	movs	r0, #89	@ 0x59
 8007770:	f7ff fed6 	bl	8007520 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007774:	4bb8      	ldr	r3, [pc, #736]	@ (8007a58 <SGP_GetMeasurementValues+0x3ac>)
 8007776:	2203      	movs	r2, #3
 8007778:	2103      	movs	r1, #3
 800777a:	0018      	movs	r0, r3
 800777c:	f000 f9f8 	bl	8007b70 <CheckCRC>
 8007780:	0003      	movs	r3, r0
 8007782:	001a      	movs	r2, r3
 8007784:	2301      	movs	r3, #1
 8007786:	4053      	eors	r3, r2
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d02a      	beq.n	80077e4 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800778e:	4ab3      	ldr	r2, [pc, #716]	@ (8007a5c <SGP_GetMeasurementValues+0x3b0>)
 8007790:	4bb3      	ldr	r3, [pc, #716]	@ (8007a60 <SGP_GetMeasurementValues+0x3b4>)
 8007792:	0019      	movs	r1, r3
 8007794:	2001      	movs	r0, #1
 8007796:	f001 f827 	bl	80087e8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800779a:	4ab2      	ldr	r2, [pc, #712]	@ (8007a64 <SGP_GetMeasurementValues+0x3b8>)
 800779c:	4bb2      	ldr	r3, [pc, #712]	@ (8007a68 <SGP_GetMeasurementValues+0x3bc>)
 800779e:	0019      	movs	r1, r3
 80077a0:	2002      	movs	r0, #2
 80077a2:	f001 f821 	bl	80087e8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80077a6:	230f      	movs	r3, #15
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e012      	b.n	80077d6 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80077b0:	240f      	movs	r4, #15
 80077b2:	193b      	adds	r3, r7, r4
 80077b4:	7818      	ldrb	r0, [r3, #0]
 80077b6:	193b      	adds	r3, r7, r4
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	4aa7      	ldr	r2, [pc, #668]	@ (8007a58 <SGP_GetMeasurementValues+0x3ac>)
 80077bc:	5cd3      	ldrb	r3, [r2, r3]
 80077be:	4aab      	ldr	r2, [pc, #684]	@ (8007a6c <SGP_GetMeasurementValues+0x3c0>)
 80077c0:	499d      	ldr	r1, [pc, #628]	@ (8007a38 <SGP_GetMeasurementValues+0x38c>)
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	0003      	movs	r3, r0
 80077c6:	2003      	movs	r0, #3
 80077c8:	f001 f80e 	bl	80087e8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80077cc:	193b      	adds	r3, r7, r4
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	193b      	adds	r3, r7, r4
 80077d2:	3201      	adds	r2, #1
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	230f      	movs	r3, #15
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d9e7      	bls.n	80077b0 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e177      	b.n	8007ad4 <SGP_GetMeasurementValues+0x428>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80077e4:	f001 f88c 	bl	8008900 <GetCurrentHalTicks>
 80077e8:	0003      	movs	r3, r0
 80077ea:	22fa      	movs	r2, #250	@ 0xfa
 80077ec:	0092      	lsls	r2, r2, #2
 80077ee:	189a      	adds	r2, r3, r2
 80077f0:	4b9f      	ldr	r3, [pc, #636]	@ (8007a70 <SGP_GetMeasurementValues+0x3c4>)
 80077f2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80077f4:	f7ff ff4c 	bl	8007690 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80077f8:	4b95      	ldr	r3, [pc, #596]	@ (8007a50 <SGP_GetMeasurementValues+0x3a4>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	3301      	adds	r3, #1
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	4b93      	ldr	r3, [pc, #588]	@ (8007a50 <SGP_GetMeasurementValues+0x3a4>)
 8007802:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8007804:	4b92      	ldr	r3, [pc, #584]	@ (8007a50 <SGP_GetMeasurementValues+0x3a4>)
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	4b9a      	ldr	r3, [pc, #616]	@ (8007a74 <SGP_GetMeasurementValues+0x3c8>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d200      	bcs.n	8007812 <SGP_GetMeasurementValues+0x166>
 8007810:	e148      	b.n	8007aa4 <SGP_GetMeasurementValues+0x3f8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8007812:	4b91      	ldr	r3, [pc, #580]	@ (8007a58 <SGP_GetMeasurementValues+0x3ac>)
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	b21a      	sxth	r2, r3
 800781a:	4b8f      	ldr	r3, [pc, #572]	@ (8007a58 <SGP_GetMeasurementValues+0x3ac>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b21b      	sxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	b21a      	sxth	r2, r3
 8007824:	240c      	movs	r4, #12
 8007826:	193b      	adds	r3, r7, r4
 8007828:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800782a:	193b      	adds	r3, r7, r4
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	4a92      	ldr	r2, [pc, #584]	@ (8007a78 <SGP_GetMeasurementValues+0x3cc>)
 8007830:	4981      	ldr	r1, [pc, #516]	@ (8007a38 <SGP_GetMeasurementValues+0x38c>)
 8007832:	2003      	movs	r0, #3
 8007834:	f000 ffd8 	bl	80087e8 <CreateLine>
      int32_t tempVocIndex = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800783c:	193b      	adds	r3, r7, r4
 800783e:	8819      	ldrh	r1, [r3, #0]
 8007840:	2308      	movs	r3, #8
 8007842:	18fa      	adds	r2, r7, r3
 8007844:	4b8d      	ldr	r3, [pc, #564]	@ (8007a7c <SGP_GetMeasurementValues+0x3d0>)
 8007846:	0018      	movs	r0, r3
 8007848:	f7ff f848 	bl	80068dc <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4a8c      	ldr	r2, [pc, #560]	@ (8007a80 <SGP_GetMeasurementValues+0x3d4>)
 8007850:	4979      	ldr	r1, [pc, #484]	@ (8007a38 <SGP_GetMeasurementValues+0x38c>)
 8007852:	2003      	movs	r0, #3
 8007854:	f000 ffc8 	bl	80087e8 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	dd60      	ble.n	8007928 <SGP_GetMeasurementValues+0x27c>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b64      	cmp	r3, #100	@ 0x64
 800786c:	dc5c      	bgt.n	8007928 <SGP_GetMeasurementValues+0x27c>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	0018      	movs	r0, r3
 8007874:	f7fb fd68 	bl	8003348 <__aeabi_i2d>
 8007878:	2200      	movs	r2, #0
 800787a:	4b82      	ldr	r3, [pc, #520]	@ (8007a84 <SGP_GetMeasurementValues+0x3d8>)
 800787c:	f7fa fa5e 	bl	8001d3c <__aeabi_ddiv>
 8007880:	0002      	movs	r2, r0
 8007882:	000b      	movs	r3, r1
 8007884:	2000      	movs	r0, #0
 8007886:	4980      	ldr	r1, [pc, #512]	@ (8007a88 <SGP_GetMeasurementValues+0x3dc>)
 8007888:	f7fb f964 	bl	8002b54 <__aeabi_dsub>
 800788c:	0002      	movs	r2, r0
 800788e:	000b      	movs	r3, r1
 8007890:	0014      	movs	r4, r2
 8007892:	001d      	movs	r5, r3
 8007894:	4b7d      	ldr	r3, [pc, #500]	@ (8007a8c <SGP_GetMeasurementValues+0x3e0>)
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	0018      	movs	r0, r3
 800789a:	f7fb fd55 	bl	8003348 <__aeabi_i2d>
 800789e:	0002      	movs	r2, r0
 80078a0:	000b      	movs	r3, r1
 80078a2:	0020      	movs	r0, r4
 80078a4:	0029      	movs	r1, r5
 80078a6:	f7fa fe8d 	bl	80025c4 <__aeabi_dmul>
 80078aa:	0002      	movs	r2, r0
 80078ac:	000b      	movs	r3, r1
 80078ae:	0010      	movs	r0, r2
 80078b0:	0019      	movs	r1, r3
 80078b2:	f7f8 fedf 	bl	8000674 <__aeabi_d2uiz>
 80078b6:	0003      	movs	r3, r0
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	4b75      	ldr	r3, [pc, #468]	@ (8007a90 <SGP_GetMeasurementValues+0x3e4>)
 80078bc:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	0018      	movs	r0, r3
 80078c4:	f7fb fd40 	bl	8003348 <__aeabi_i2d>
 80078c8:	2200      	movs	r2, #0
 80078ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007a84 <SGP_GetMeasurementValues+0x3d8>)
 80078cc:	f7fa fa36 	bl	8001d3c <__aeabi_ddiv>
 80078d0:	0002      	movs	r2, r0
 80078d2:	000b      	movs	r3, r1
 80078d4:	0014      	movs	r4, r2
 80078d6:	001d      	movs	r5, r3
 80078d8:	4b6c      	ldr	r3, [pc, #432]	@ (8007a8c <SGP_GetMeasurementValues+0x3e0>)
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	0018      	movs	r0, r3
 80078de:	f7fb fd33 	bl	8003348 <__aeabi_i2d>
 80078e2:	0002      	movs	r2, r0
 80078e4:	000b      	movs	r3, r1
 80078e6:	0020      	movs	r0, r4
 80078e8:	0029      	movs	r1, r5
 80078ea:	f7fa fe6b 	bl	80025c4 <__aeabi_dmul>
 80078ee:	0002      	movs	r2, r0
 80078f0:	000b      	movs	r3, r1
 80078f2:	0010      	movs	r0, r2
 80078f4:	0019      	movs	r1, r3
 80078f6:	f7f8 febd 	bl	8000674 <__aeabi_d2uiz>
 80078fa:	0003      	movs	r3, r0
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	4b65      	ldr	r3, [pc, #404]	@ (8007a94 <SGP_GetMeasurementValues+0x3e8>)
 8007900:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8007902:	4b62      	ldr	r3, [pc, #392]	@ (8007a8c <SGP_GetMeasurementValues+0x3e0>)
 8007904:	881a      	ldrh	r2, [r3, #0]
 8007906:	4b64      	ldr	r3, [pc, #400]	@ (8007a98 <SGP_GetMeasurementValues+0x3ec>)
 8007908:	801a      	strh	r2, [r3, #0]
      TIM2->CCR1 = Red;
 800790a:	4b63      	ldr	r3, [pc, #396]	@ (8007a98 <SGP_GetMeasurementValues+0x3ec>)
 800790c:	881a      	ldrh	r2, [r3, #0]
 800790e:	2380      	movs	r3, #128	@ 0x80
 8007910:	05db      	lsls	r3, r3, #23
 8007912:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2->CCR3 = Green;
 8007914:	4b5e      	ldr	r3, [pc, #376]	@ (8007a90 <SGP_GetMeasurementValues+0x3e4>)
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	05db      	lsls	r3, r3, #23
 800791c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = Blue;
 800791e:	4b5d      	ldr	r3, [pc, #372]	@ (8007a94 <SGP_GetMeasurementValues+0x3e8>)
 8007920:	881a      	ldrh	r2, [r3, #0]
 8007922:	2380      	movs	r3, #128	@ 0x80
 8007924:	05db      	lsls	r3, r3, #23
 8007926:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      if(*vocIndex > 100){
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b64      	cmp	r3, #100	@ 0x64
 800792e:	dd6c      	ble.n	8007a0a <SGP_GetMeasurementValues+0x35e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	0018      	movs	r0, r3
 8007936:	f7fb fd07 	bl	8003348 <__aeabi_i2d>
 800793a:	2200      	movs	r2, #0
 800793c:	4b51      	ldr	r3, [pc, #324]	@ (8007a84 <SGP_GetMeasurementValues+0x3d8>)
 800793e:	f7fb f909 	bl	8002b54 <__aeabi_dsub>
 8007942:	0002      	movs	r2, r0
 8007944:	000b      	movs	r3, r1
 8007946:	0010      	movs	r0, r2
 8007948:	0019      	movs	r1, r3
 800794a:	2200      	movs	r2, #0
 800794c:	4b53      	ldr	r3, [pc, #332]	@ (8007a9c <SGP_GetMeasurementValues+0x3f0>)
 800794e:	f7fa f9f5 	bl	8001d3c <__aeabi_ddiv>
 8007952:	0002      	movs	r2, r0
 8007954:	000b      	movs	r3, r1
 8007956:	0014      	movs	r4, r2
 8007958:	001d      	movs	r5, r3
 800795a:	4b4c      	ldr	r3, [pc, #304]	@ (8007a8c <SGP_GetMeasurementValues+0x3e0>)
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	0018      	movs	r0, r3
 8007960:	f7fb fcf2 	bl	8003348 <__aeabi_i2d>
 8007964:	0002      	movs	r2, r0
 8007966:	000b      	movs	r3, r1
 8007968:	0020      	movs	r0, r4
 800796a:	0029      	movs	r1, r5
 800796c:	f7fa fe2a 	bl	80025c4 <__aeabi_dmul>
 8007970:	0002      	movs	r2, r0
 8007972:	000b      	movs	r3, r1
 8007974:	0010      	movs	r0, r2
 8007976:	0019      	movs	r1, r3
 8007978:	f7f8 fe7c 	bl	8000674 <__aeabi_d2uiz>
 800797c:	0003      	movs	r3, r0
 800797e:	b29a      	uxth	r2, r3
 8007980:	4b43      	ldr	r3, [pc, #268]	@ (8007a90 <SGP_GetMeasurementValues+0x3e4>)
 8007982:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	0018      	movs	r0, r3
 800798a:	f7fb fcdd 	bl	8003348 <__aeabi_i2d>
 800798e:	2200      	movs	r2, #0
 8007990:	4b3c      	ldr	r3, [pc, #240]	@ (8007a84 <SGP_GetMeasurementValues+0x3d8>)
 8007992:	f7fb f8df 	bl	8002b54 <__aeabi_dsub>
 8007996:	0002      	movs	r2, r0
 8007998:	000b      	movs	r3, r1
 800799a:	0010      	movs	r0, r2
 800799c:	0019      	movs	r1, r3
 800799e:	2200      	movs	r2, #0
 80079a0:	4b3e      	ldr	r3, [pc, #248]	@ (8007a9c <SGP_GetMeasurementValues+0x3f0>)
 80079a2:	f7fa f9cb 	bl	8001d3c <__aeabi_ddiv>
 80079a6:	0002      	movs	r2, r0
 80079a8:	000b      	movs	r3, r1
 80079aa:	2000      	movs	r0, #0
 80079ac:	4936      	ldr	r1, [pc, #216]	@ (8007a88 <SGP_GetMeasurementValues+0x3dc>)
 80079ae:	f7fb f8d1 	bl	8002b54 <__aeabi_dsub>
 80079b2:	0002      	movs	r2, r0
 80079b4:	000b      	movs	r3, r1
 80079b6:	0014      	movs	r4, r2
 80079b8:	001d      	movs	r5, r3
 80079ba:	4b34      	ldr	r3, [pc, #208]	@ (8007a8c <SGP_GetMeasurementValues+0x3e0>)
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	0018      	movs	r0, r3
 80079c0:	f7fb fcc2 	bl	8003348 <__aeabi_i2d>
 80079c4:	0002      	movs	r2, r0
 80079c6:	000b      	movs	r3, r1
 80079c8:	0020      	movs	r0, r4
 80079ca:	0029      	movs	r1, r5
 80079cc:	f7fa fdfa 	bl	80025c4 <__aeabi_dmul>
 80079d0:	0002      	movs	r2, r0
 80079d2:	000b      	movs	r3, r1
 80079d4:	0010      	movs	r0, r2
 80079d6:	0019      	movs	r1, r3
 80079d8:	f7f8 fe4c 	bl	8000674 <__aeabi_d2uiz>
 80079dc:	0003      	movs	r3, r0
 80079de:	b29a      	uxth	r2, r3
 80079e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007a98 <SGP_GetMeasurementValues+0x3ec>)
 80079e2:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80079e4:	4b29      	ldr	r3, [pc, #164]	@ (8007a8c <SGP_GetMeasurementValues+0x3e0>)
 80079e6:	881a      	ldrh	r2, [r3, #0]
 80079e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a94 <SGP_GetMeasurementValues+0x3e8>)
 80079ea:	801a      	strh	r2, [r3, #0]
        TIM2->CCR1 = Red;
 80079ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007a98 <SGP_GetMeasurementValues+0x3ec>)
 80079ee:	881a      	ldrh	r2, [r3, #0]
 80079f0:	2380      	movs	r3, #128	@ 0x80
 80079f2:	05db      	lsls	r3, r3, #23
 80079f4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR3 = Green;
 80079f6:	4b26      	ldr	r3, [pc, #152]	@ (8007a90 <SGP_GetMeasurementValues+0x3e4>)
 80079f8:	881a      	ldrh	r2, [r3, #0]
 80079fa:	2380      	movs	r3, #128	@ 0x80
 80079fc:	05db      	lsls	r3, r3, #23
 80079fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2->CCR4 = Blue;
 8007a00:	4b24      	ldr	r3, [pc, #144]	@ (8007a94 <SGP_GetMeasurementValues+0x3e8>)
 8007a02:	881a      	ldrh	r2, [r3, #0]
 8007a04:	2380      	movs	r3, #128	@ 0x80
 8007a06:	05db      	lsls	r3, r3, #23
 8007a08:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      SGP_AmountOfSamplesDone = 0;
 8007a0a:	4b11      	ldr	r3, [pc, #68]	@ (8007a50 <SGP_GetMeasurementValues+0x3a4>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007a10:	4a23      	ldr	r2, [pc, #140]	@ (8007aa0 <SGP_GetMeasurementValues+0x3f4>)
 8007a12:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <SGP_GetMeasurementValues+0x38c>)
 8007a14:	0019      	movs	r1, r3
 8007a16:	2003      	movs	r0, #3
 8007a18:	f000 fee6 	bl	80087e8 <CreateLine>
      HT_MeasurementReceived = false;
 8007a1c:	4b07      	ldr	r3, [pc, #28]	@ (8007a3c <SGP_GetMeasurementValues+0x390>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007a22:	4b03      	ldr	r3, [pc, #12]	@ (8007a30 <SGP_GetMeasurementValues+0x384>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e053      	b.n	8007ad4 <SGP_GetMeasurementValues+0x428>
 8007a2c:	200027d2 	.word	0x200027d2
 8007a30:	2000287d 	.word	0x2000287d
 8007a34:	08014f04 	.word	0x08014f04
 8007a38:	08014f30 	.word	0x08014f30
 8007a3c:	2000287c 	.word	0x2000287c
 8007a40:	20000114 	.word	0x20000114
 8007a44:	20000128 	.word	0x20000128
 8007a48:	2000010c 	.word	0x2000010c
 8007a4c:	200027d3 	.word	0x200027d3
 8007a50:	200027d1 	.word	0x200027d1
 8007a54:	08014f34 	.word	0x08014f34
 8007a58:	200027c8 	.word	0x200027c8
 8007a5c:	08014f64 	.word	0x08014f64
 8007a60:	08014f88 	.word	0x08014f88
 8007a64:	08014f8c 	.word	0x08014f8c
 8007a68:	08014fac 	.word	0x08014fac
 8007a6c:	08014fb0 	.word	0x08014fb0
 8007a70:	20000124 	.word	0x20000124
 8007a74:	2000011c 	.word	0x2000011c
 8007a78:	08014fd0 	.word	0x08014fd0
 8007a7c:	200027d4 	.word	0x200027d4
 8007a80:	08014fe4 	.word	0x08014fe4
 8007a84:	40590000 	.word	0x40590000
 8007a88:	3ff00000 	.word	0x3ff00000
 8007a8c:	2000012c 	.word	0x2000012c
 8007a90:	20002882 	.word	0x20002882
 8007a94:	20002880 	.word	0x20002880
 8007a98:	2000287e 	.word	0x2000287e
 8007a9c:	40790000 	.word	0x40790000
 8007aa0:	08014ff8 	.word	0x08014ff8
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007aa4:	f7ff fde6 	bl	8007674 <SGP_MeasurementDone>
 8007aa8:	1e03      	subs	r3, r0, #0
 8007aaa:	d012      	beq.n	8007ad2 <SGP_GetMeasurementValues+0x426>
 8007aac:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <SGP_GetMeasurementValues+0x430>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <SGP_GetMeasurementValues+0x426>
 8007ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <SGP_GetMeasurementValues+0x434>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <SGP_GetMeasurementValues+0x426>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007abc:	4a09      	ldr	r2, [pc, #36]	@ (8007ae4 <SGP_GetMeasurementValues+0x438>)
 8007abe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <SGP_GetMeasurementValues+0x43c>)
 8007ac0:	0019      	movs	r1, r3
 8007ac2:	2003      	movs	r0, #3
 8007ac4:	f000 fe90 	bl	80087e8 <CreateLine>
    SGP_StartMeasurement();
 8007ac8:	f7ff fd80 	bl	80075cc <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <SGP_GetMeasurementValues+0x440>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b004      	add	sp, #16
 8007ada:	bdb0      	pop	{r4, r5, r7, pc}
 8007adc:	200027d2 	.word	0x200027d2
 8007ae0:	200027d3 	.word	0x200027d3
 8007ae4:	0801501c 	.word	0x0801501c
 8007ae8:	08014f30 	.word	0x08014f30
 8007aec:	2000287d 	.word	0x2000287d

08007af0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007af6:	4b1a      	ldr	r3, [pc, #104]	@ (8007b60 <SGP_DeviceConnected+0x70>)
 8007af8:	2202      	movs	r2, #2
 8007afa:	0019      	movs	r1, r3
 8007afc:	2059      	movs	r0, #89	@ 0x59
 8007afe:	f7ff fd2d 	bl	800755c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007b02:	2001      	movs	r0, #1
 8007b04:	f001 fa72 	bl	8008fec <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007b08:	4b16      	ldr	r3, [pc, #88]	@ (8007b64 <SGP_DeviceConnected+0x74>)
 8007b0a:	2209      	movs	r2, #9
 8007b0c:	0019      	movs	r1, r3
 8007b0e:	2059      	movs	r0, #89	@ 0x59
 8007b10:	f7ff fd06 	bl	8007520 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e011      	b.n	8007b40 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007b1c:	1dfb      	adds	r3, r7, #7
 8007b1e:	7818      	ldrb	r0, [r3, #0]
 8007b20:	1dfb      	adds	r3, r7, #7
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	4a0f      	ldr	r2, [pc, #60]	@ (8007b64 <SGP_DeviceConnected+0x74>)
 8007b26:	5cd3      	ldrb	r3, [r2, r3]
 8007b28:	4a0f      	ldr	r2, [pc, #60]	@ (8007b68 <SGP_DeviceConnected+0x78>)
 8007b2a:	4910      	ldr	r1, [pc, #64]	@ (8007b6c <SGP_DeviceConnected+0x7c>)
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	0003      	movs	r3, r0
 8007b30:	2002      	movs	r0, #2
 8007b32:	f000 fe59 	bl	80087e8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007b36:	1dfb      	adds	r3, r7, #7
 8007b38:	781a      	ldrb	r2, [r3, #0]
 8007b3a:	1dfb      	adds	r3, r7, #7
 8007b3c:	3201      	adds	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	1dfb      	adds	r3, r7, #7
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d9e9      	bls.n	8007b1c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007b48:	4b06      	ldr	r3, [pc, #24]	@ (8007b64 <SGP_DeviceConnected+0x74>)
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	2109      	movs	r1, #9
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f000 f80e 	bl	8007b70 <CheckCRC>
 8007b54:	0003      	movs	r3, r0
}
 8007b56:	0018      	movs	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b002      	add	sp, #8
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	46c0      	nop			@ (mov r8, r8)
 8007b60:	20000108 	.word	0x20000108
 8007b64:	200027c8 	.word	0x200027c8
 8007b68:	0801503c 	.word	0x0801503c
 8007b6c:	08014fac 	.word	0x08014fac

08007b70 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8007b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b72:	b08f      	sub	sp, #60	@ 0x3c
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b78:	0008      	movs	r0, r1
 8007b7a:	0011      	movs	r1, r2
 8007b7c:	2323      	movs	r3, #35	@ 0x23
 8007b7e:	18fb      	adds	r3, r7, r3
 8007b80:	1c02      	adds	r2, r0, #0
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	2322      	movs	r3, #34	@ 0x22
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	1c0a      	adds	r2, r1, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007b8c:	2317      	movs	r3, #23
 8007b8e:	2220      	movs	r2, #32
 8007b90:	189b      	adds	r3, r3, r2
 8007b92:	19db      	adds	r3, r3, r7
 8007b94:	2200      	movs	r2, #0
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e09f      	b.n	8007cda <CheckCRC+0x16a>
 8007b9a:	466b      	mov	r3, sp
 8007b9c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007b9e:	2322      	movs	r3, #34	@ 0x22
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	001a      	movs	r2, r3
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	633a      	str	r2, [r7, #48]	@ 0x30
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	60fa      	str	r2, [r7, #12]
 8007bb0:	68b8      	ldr	r0, [r7, #8]
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	0002      	movs	r2, r0
 8007bb6:	0f52      	lsrs	r2, r2, #29
 8007bb8:	000c      	movs	r4, r1
 8007bba:	00e4      	lsls	r4, r4, #3
 8007bbc:	61fc      	str	r4, [r7, #28]
 8007bbe:	69fc      	ldr	r4, [r7, #28]
 8007bc0:	4314      	orrs	r4, r2
 8007bc2:	61fc      	str	r4, [r7, #28]
 8007bc4:	0002      	movs	r2, r0
 8007bc6:	00d2      	lsls	r2, r2, #3
 8007bc8:	61ba      	str	r2, [r7, #24]
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	6838      	ldr	r0, [r7, #0]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	0002      	movs	r2, r0
 8007bd6:	0f52      	lsrs	r2, r2, #29
 8007bd8:	000c      	movs	r4, r1
 8007bda:	00e4      	lsls	r4, r4, #3
 8007bdc:	617c      	str	r4, [r7, #20]
 8007bde:	697c      	ldr	r4, [r7, #20]
 8007be0:	4314      	orrs	r4, r2
 8007be2:	617c      	str	r4, [r7, #20]
 8007be4:	0002      	movs	r2, r0
 8007be6:	00d2      	lsls	r2, r2, #3
 8007be8:	613a      	str	r2, [r7, #16]
 8007bea:	3307      	adds	r3, #7
 8007bec:	08db      	lsrs	r3, r3, #3
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	466a      	mov	r2, sp
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	469d      	mov	sp, r3
 8007bf6:	466b      	mov	r3, sp
 8007bf8:	3300      	adds	r3, #0
 8007bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007bfc:	2316      	movs	r3, #22
 8007bfe:	2220      	movs	r2, #32
 8007c00:	189b      	adds	r3, r3, r2
 8007c02:	19db      	adds	r3, r3, r7
 8007c04:	2200      	movs	r2, #0
 8007c06:	701a      	strb	r2, [r3, #0]
 8007c08:	e01e      	b.n	8007c48 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8007c0a:	2317      	movs	r3, #23
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	189b      	adds	r3, r3, r2
 8007c10:	19db      	adds	r3, r3, r7
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	2116      	movs	r1, #22
 8007c16:	2320      	movs	r3, #32
 8007c18:	18cb      	adds	r3, r1, r3
 8007c1a:	19db      	adds	r3, r3, r7
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	18d3      	adds	r3, r2, r3
 8007c20:	001a      	movs	r2, r3
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	189a      	adds	r2, r3, r2
 8007c26:	0008      	movs	r0, r1
 8007c28:	2320      	movs	r3, #32
 8007c2a:	18cb      	adds	r3, r1, r3
 8007c2c:	19db      	adds	r3, r3, r7
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	7811      	ldrb	r1, [r2, #0]
 8007c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c34:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007c36:	2320      	movs	r3, #32
 8007c38:	18c3      	adds	r3, r0, r3
 8007c3a:	19db      	adds	r3, r3, r7
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	2320      	movs	r3, #32
 8007c40:	18c3      	adds	r3, r0, r3
 8007c42:	19db      	adds	r3, r3, r7
 8007c44:	3201      	adds	r2, #1
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	2316      	movs	r3, #22
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	189b      	adds	r3, r3, r2
 8007c4e:	19da      	adds	r2, r3, r7
 8007c50:	2322      	movs	r3, #34	@ 0x22
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	7812      	ldrb	r2, [r2, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d3d6      	bcc.n	8007c0a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007c5c:	2417      	movs	r4, #23
 8007c5e:	2320      	movs	r3, #32
 8007c60:	18e3      	adds	r3, r4, r3
 8007c62:	19db      	adds	r3, r3, r7
 8007c64:	781a      	ldrb	r2, [r3, #0]
 8007c66:	2322      	movs	r3, #34	@ 0x22
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	18d3      	adds	r3, r2, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c72:	18d2      	adds	r2, r2, r3
 8007c74:	250b      	movs	r5, #11
 8007c76:	2320      	movs	r3, #32
 8007c78:	18eb      	adds	r3, r5, r3
 8007c7a:	19db      	adds	r3, r3, r7
 8007c7c:	7812      	ldrb	r2, [r2, #0]
 8007c7e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007c80:	2322      	movs	r3, #34	@ 0x22
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	0011      	movs	r1, r2
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 f838 	bl	8007d04 <CalculateCRC>
 8007c94:	0003      	movs	r3, r0
 8007c96:	001a      	movs	r2, r3
 8007c98:	2320      	movs	r3, #32
 8007c9a:	18eb      	adds	r3, r5, r3
 8007c9c:	19db      	adds	r3, r3, r7
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00c      	beq.n	8007cbe <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007ca4:	2320      	movs	r3, #32
 8007ca6:	18e3      	adds	r3, r4, r3
 8007ca8:	19db      	adds	r3, r3, r7
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	4a13      	ldr	r2, [pc, #76]	@ (8007cfc <CheckCRC+0x18c>)
 8007cb0:	4913      	ldr	r1, [pc, #76]	@ (8007d00 <CheckCRC+0x190>)
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	f000 fd98 	bl	80087e8 <CreateLine>
      return false;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	46b5      	mov	sp, r6
 8007cbc:	e019      	b.n	8007cf2 <CheckCRC+0x182>
 8007cbe:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007cc0:	2217      	movs	r2, #23
 8007cc2:	2320      	movs	r3, #32
 8007cc4:	18d3      	adds	r3, r2, r3
 8007cc6:	19db      	adds	r3, r3, r7
 8007cc8:	2120      	movs	r1, #32
 8007cca:	1852      	adds	r2, r2, r1
 8007ccc:	19d1      	adds	r1, r2, r7
 8007cce:	2222      	movs	r2, #34	@ 0x22
 8007cd0:	18ba      	adds	r2, r7, r2
 8007cd2:	7809      	ldrb	r1, [r1, #0]
 8007cd4:	7812      	ldrb	r2, [r2, #0]
 8007cd6:	188a      	adds	r2, r1, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	2317      	movs	r3, #23
 8007cdc:	2220      	movs	r2, #32
 8007cde:	189b      	adds	r3, r3, r2
 8007ce0:	19da      	adds	r2, r3, r7
 8007ce2:	2323      	movs	r3, #35	@ 0x23
 8007ce4:	18fb      	adds	r3, r7, r3
 8007ce6:	7812      	ldrb	r2, [r2, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d200      	bcs.n	8007cf0 <CheckCRC+0x180>
 8007cee:	e754      	b.n	8007b9a <CheckCRC+0x2a>
    }
  }
  return true;
 8007cf0:	2301      	movs	r3, #1
}
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	b00f      	add	sp, #60	@ 0x3c
 8007cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfa:	46c0      	nop			@ (mov r8, r8)
 8007cfc:	0801505c 	.word	0x0801505c
 8007d00:	08014f88 	.word	0x08014f88

08007d04 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	000a      	movs	r2, r1
 8007d0e:	1cfb      	adds	r3, r7, #3
 8007d10:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8007d12:	230f      	movs	r3, #15
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	22ff      	movs	r2, #255	@ 0xff
 8007d18:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007d1a:	230e      	movs	r3, #14
 8007d1c:	18fb      	adds	r3, r7, r3
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e037      	b.n	8007d94 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007d24:	230e      	movs	r3, #14
 8007d26:	18fb      	adds	r3, r7, r3
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	18d3      	adds	r3, r2, r3
 8007d2e:	7819      	ldrb	r1, [r3, #0]
 8007d30:	220f      	movs	r2, #15
 8007d32:	18bb      	adds	r3, r7, r2
 8007d34:	18ba      	adds	r2, r7, r2
 8007d36:	7812      	ldrb	r2, [r2, #0]
 8007d38:	404a      	eors	r2, r1
 8007d3a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007d3c:	230d      	movs	r3, #13
 8007d3e:	18fb      	adds	r3, r7, r3
 8007d40:	2200      	movs	r2, #0
 8007d42:	701a      	strb	r2, [r3, #0]
 8007d44:	e01b      	b.n	8007d7e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8007d46:	210f      	movs	r1, #15
 8007d48:	187b      	adds	r3, r7, r1
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b25b      	sxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	da09      	bge.n	8007d66 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	b25b      	sxtb	r3, r3
 8007d5a:	2231      	movs	r2, #49	@ 0x31
 8007d5c:	4053      	eors	r3, r2
 8007d5e:	b25a      	sxtb	r2, r3
 8007d60:	187b      	adds	r3, r7, r1
 8007d62:	701a      	strb	r2, [r3, #0]
 8007d64:	e005      	b.n	8007d72 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8007d66:	230f      	movs	r3, #15
 8007d68:	18fa      	adds	r2, r7, r3
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	18db      	adds	r3, r3, r3
 8007d70:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007d72:	210d      	movs	r1, #13
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	781a      	ldrb	r2, [r3, #0]
 8007d78:	187b      	adds	r3, r7, r1
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	230d      	movs	r3, #13
 8007d80:	18fb      	adds	r3, r7, r3
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	d9de      	bls.n	8007d46 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007d88:	210e      	movs	r1, #14
 8007d8a:	187b      	adds	r3, r7, r1
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	187b      	adds	r3, r7, r1
 8007d90:	3201      	adds	r2, #1
 8007d92:	701a      	strb	r2, [r3, #0]
 8007d94:	230e      	movs	r3, #14
 8007d96:	18fa      	adds	r2, r7, r3
 8007d98:	1cfb      	adds	r3, r7, #3
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d3c0      	bcc.n	8007d24 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8007da2:	230f      	movs	r3, #15
 8007da4:	18fb      	adds	r3, r7, r3
 8007da6:	781b      	ldrb	r3, [r3, #0]
}
 8007da8:	0018      	movs	r0, r3
 8007daa:	46bd      	mov	sp, r7
 8007dac:	b004      	add	sp, #16
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4936      	ldr	r1, [pc, #216]	@ (8007e98 <SGP_GetHT+0xe8>)
 8007dc0:	1c18      	adds	r0, r3, #0
 8007dc2:	f7f8 fd41 	bl	8000848 <__aeabi_fadd>
 8007dc6:	1c03      	adds	r3, r0, #0
 8007dc8:	4934      	ldr	r1, [pc, #208]	@ (8007e9c <SGP_GetHT+0xec>)
 8007dca:	1c18      	adds	r0, r3, #0
 8007dcc:	f7f8 fec6 	bl	8000b5c <__aeabi_fdiv>
 8007dd0:	1c03      	adds	r3, r0, #0
 8007dd2:	4933      	ldr	r1, [pc, #204]	@ (8007ea0 <SGP_GetHT+0xf0>)
 8007dd4:	1c18      	adds	r0, r3, #0
 8007dd6:	f7f9 f8a7 	bl	8000f28 <__aeabi_fmul>
 8007dda:	1c03      	adds	r3, r0, #0
 8007ddc:	1c18      	adds	r0, r3, #0
 8007dde:	f7f8 fc31 	bl	8000644 <__aeabi_f2uiz>
 8007de2:	0003      	movs	r3, r0
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea4 <SGP_GetHT+0xf4>)
 8007de8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	492e      	ldr	r1, [pc, #184]	@ (8007ea8 <SGP_GetHT+0xf8>)
 8007df0:	1c18      	adds	r0, r3, #0
 8007df2:	f7f8 feb3 	bl	8000b5c <__aeabi_fdiv>
 8007df6:	1c03      	adds	r3, r0, #0
 8007df8:	4929      	ldr	r1, [pc, #164]	@ (8007ea0 <SGP_GetHT+0xf0>)
 8007dfa:	1c18      	adds	r0, r3, #0
 8007dfc:	f7f9 f894 	bl	8000f28 <__aeabi_fmul>
 8007e00:	1c03      	adds	r3, r0, #0
 8007e02:	1c18      	adds	r0, r3, #0
 8007e04:	f7f8 fc1e 	bl	8000644 <__aeabi_f2uiz>
 8007e08:	0003      	movs	r3, r0
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	4b27      	ldr	r3, [pc, #156]	@ (8007eac <SGP_GetHT+0xfc>)
 8007e0e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8007e10:	4b26      	ldr	r3, [pc, #152]	@ (8007eac <SGP_GetHT+0xfc>)
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	4b25      	ldr	r3, [pc, #148]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e1c:	709a      	strb	r2, [r3, #2]
 8007e1e:	4b24      	ldr	r3, [pc, #144]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e20:	789a      	ldrb	r2, [r3, #2]
 8007e22:	210c      	movs	r1, #12
 8007e24:	187b      	adds	r3, r7, r1
 8007e26:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8007e28:	4b20      	ldr	r3, [pc, #128]	@ (8007eac <SGP_GetHT+0xfc>)
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	4b20      	ldr	r3, [pc, #128]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e30:	70da      	strb	r2, [r3, #3]
 8007e32:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e34:	78da      	ldrb	r2, [r3, #3]
 8007e36:	187b      	adds	r3, r7, r1
 8007e38:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8007e3a:	187b      	adds	r3, r7, r1
 8007e3c:	2102      	movs	r1, #2
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f7ff ff60 	bl	8007d04 <CalculateCRC>
 8007e44:	0003      	movs	r3, r0
 8007e46:	001a      	movs	r2, r3
 8007e48:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e4a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8007e4c:	4b15      	ldr	r3, [pc, #84]	@ (8007ea4 <SGP_GetHT+0xf4>)
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	0a1b      	lsrs	r3, r3, #8
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	4b16      	ldr	r3, [pc, #88]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e58:	715a      	strb	r2, [r3, #5]
 8007e5a:	4b15      	ldr	r3, [pc, #84]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e5c:	795a      	ldrb	r2, [r3, #5]
 8007e5e:	2108      	movs	r1, #8
 8007e60:	187b      	adds	r3, r7, r1
 8007e62:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8007e64:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea4 <SGP_GetHT+0xf4>)
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4b11      	ldr	r3, [pc, #68]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e6c:	719a      	strb	r2, [r3, #6]
 8007e6e:	4b10      	ldr	r3, [pc, #64]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e70:	799a      	ldrb	r2, [r3, #6]
 8007e72:	187b      	adds	r3, r7, r1
 8007e74:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8007e76:	187b      	adds	r3, r7, r1
 8007e78:	2102      	movs	r1, #2
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f7ff ff42 	bl	8007d04 <CalculateCRC>
 8007e80:	0003      	movs	r3, r0
 8007e82:	001a      	movs	r2, r3
 8007e84:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <SGP_GetHT+0x100>)
 8007e86:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8007e88:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb4 <SGP_GetHT+0x104>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	701a      	strb	r2, [r3, #0]
}
 8007e8e:	46c0      	nop			@ (mov r8, r8)
 8007e90:	46bd      	mov	sp, r7
 8007e92:	b004      	add	sp, #16
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	46c0      	nop			@ (mov r8, r8)
 8007e98:	42340000 	.word	0x42340000
 8007e9c:	432f0000 	.word	0x432f0000
 8007ea0:	477fff00 	.word	0x477fff00
 8007ea4:	2000287a 	.word	0x2000287a
 8007ea8:	42c80000 	.word	0x42c80000
 8007eac:	20002878 	.word	0x20002878
 8007eb0:	20000114 	.word	0x20000114
 8007eb4:	2000287c 	.word	0x2000287c

08007eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ebc:	4b07      	ldr	r3, [pc, #28]	@ (8007edc <HAL_MspInit+0x24>)
 8007ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ec0:	4b06      	ldr	r3, [pc, #24]	@ (8007edc <HAL_MspInit+0x24>)
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ec8:	4b04      	ldr	r3, [pc, #16]	@ (8007edc <HAL_MspInit+0x24>)
 8007eca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ecc:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <HAL_MspInit+0x24>)
 8007ece:	2180      	movs	r1, #128	@ 0x80
 8007ed0:	0549      	lsls	r1, r1, #21
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ed6:	46c0      	nop			@ (mov r8, r8)
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40021000 	.word	0x40021000

08007ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007ee4:	46c0      	nop			@ (mov r8, r8)
 8007ee6:	e7fd      	b.n	8007ee4 <NMI_Handler+0x4>

08007ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007eec:	46c0      	nop			@ (mov r8, r8)
 8007eee:	e7fd      	b.n	8007eec <HardFault_Handler+0x4>

08007ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007ef4:	46c0      	nop			@ (mov r8, r8)
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007efe:	46c0      	nop			@ (mov r8, r8)
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007f08:	f001 f854 	bl	8008fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f0c:	46c0      	nop			@ (mov r8, r8)
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007f18:	4b05      	ldr	r3, [pc, #20]	@ (8007f30 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f001 fea9 	bl	8009c72 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007f20:	4b04      	ldr	r3, [pc, #16]	@ (8007f34 <DMA1_Channel2_3_IRQHandler+0x20>)
 8007f22:	0018      	movs	r0, r3
 8007f24:	f001 fea5 	bl	8009c72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007f28:	46c0      	nop			@ (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	46c0      	nop			@ (mov r8, r8)
 8007f30:	20000a44 	.word	0x20000a44
 8007f34:	200009fc 	.word	0x200009fc

08007f38 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007f3c:	4b07      	ldr	r3, [pc, #28]	@ (8007f5c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f001 fe97 	bl	8009c72 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8007f46:	0018      	movs	r0, r3
 8007f48:	f001 fe93 	bl	8009c72 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f001 fe8f 	bl	8009c72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8007f54:	46c0      	nop			@ (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	46c0      	nop			@ (mov r8, r8)
 8007f5c:	20000ac8 	.word	0x20000ac8
 8007f60:	20002a78 	.word	0x20002a78
 8007f64:	20002ac0 	.word	0x20002ac0

08007f68 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007f6c:	4b03      	ldr	r3, [pc, #12]	@ (8007f7c <USART4_5_IRQHandler+0x14>)
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f006 fb50 	bl	800e614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8007f74:	46c0      	nop			@ (mov r8, r8)
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	200029c0 	.word	0x200029c0

08007f80 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8007f84:	4b09      	ldr	r3, [pc, #36]	@ (8007fac <I2C1_IRQHandler+0x2c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	23e0      	movs	r3, #224	@ 0xe0
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	4013      	ands	r3, r2
 8007f90:	d004      	beq.n	8007f9c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8007f92:	4b06      	ldr	r3, [pc, #24]	@ (8007fac <I2C1_IRQHandler+0x2c>)
 8007f94:	0018      	movs	r0, r3
 8007f96:	f002 fc8f 	bl	800a8b8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8007f9a:	e003      	b.n	8007fa4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8007f9c:	4b03      	ldr	r3, [pc, #12]	@ (8007fac <I2C1_IRQHandler+0x2c>)
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f002 fc70 	bl	800a884 <HAL_I2C_EV_IRQHandler>
}
 8007fa4:	46c0      	nop			@ (mov r8, r8)
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	46c0      	nop			@ (mov r8, r8)
 8007fac:	20000954 	.word	0x20000954

08007fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	af00      	add	r7, sp, #0
  return 1;
 8007fb4:	2301      	movs	r3, #1
}
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <_kill>:

int _kill(int pid, int sig)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007fc6:	f009 ff4d 	bl	8011e64 <__errno>
 8007fca:	0003      	movs	r3, r0
 8007fcc:	2216      	movs	r2, #22
 8007fce:	601a      	str	r2, [r3, #0]
  return -1;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	425b      	negs	r3, r3
}
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b002      	add	sp, #8
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <_exit>:

void _exit (int status)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	425a      	negs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	0011      	movs	r1, r2
 8007fec:	0018      	movs	r0, r3
 8007fee:	f7ff ffe5 	bl	8007fbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	e7fd      	b.n	8007ff2 <_exit+0x16>

08007ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	e00a      	b.n	800801e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008008:	e000      	b.n	800800c <_read+0x16>
 800800a:	bf00      	nop
 800800c:	0001      	movs	r1, r0
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	60ba      	str	r2, [r7, #8]
 8008014:	b2ca      	uxtb	r2, r1
 8008016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	3301      	adds	r3, #1
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	dbf0      	blt.n	8008008 <_read+0x12>
  }

  return len;
 8008026:	687b      	ldr	r3, [r7, #4]
}
 8008028:	0018      	movs	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	b006      	add	sp, #24
 800802e:	bd80      	pop	{r7, pc}

08008030 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008038:	2301      	movs	r3, #1
 800803a:	425b      	negs	r3, r3
}
 800803c:	0018      	movs	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	b002      	add	sp, #8
 8008042:	bd80      	pop	{r7, pc}

08008044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2280      	movs	r2, #128	@ 0x80
 8008052:	0192      	lsls	r2, r2, #6
 8008054:	605a      	str	r2, [r3, #4]
  return 0;
 8008056:	2300      	movs	r3, #0
}
 8008058:	0018      	movs	r0, r3
 800805a:	46bd      	mov	sp, r7
 800805c:	b002      	add	sp, #8
 800805e:	bd80      	pop	{r7, pc}

08008060 <_isatty>:

int _isatty(int file)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008068:	2301      	movs	r3, #1
}
 800806a:	0018      	movs	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	b002      	add	sp, #8
 8008070:	bd80      	pop	{r7, pc}

08008072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800807e:	2300      	movs	r3, #0
}
 8008080:	0018      	movs	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	b004      	add	sp, #16
 8008086:	bd80      	pop	{r7, pc}

08008088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008090:	4a14      	ldr	r2, [pc, #80]	@ (80080e4 <_sbrk+0x5c>)
 8008092:	4b15      	ldr	r3, [pc, #84]	@ (80080e8 <_sbrk+0x60>)
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800809c:	4b13      	ldr	r3, [pc, #76]	@ (80080ec <_sbrk+0x64>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80080a4:	4b11      	ldr	r3, [pc, #68]	@ (80080ec <_sbrk+0x64>)
 80080a6:	4a12      	ldr	r2, [pc, #72]	@ (80080f0 <_sbrk+0x68>)
 80080a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80080aa:	4b10      	ldr	r3, [pc, #64]	@ (80080ec <_sbrk+0x64>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	18d3      	adds	r3, r2, r3
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d207      	bcs.n	80080c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80080b8:	f009 fed4 	bl	8011e64 <__errno>
 80080bc:	0003      	movs	r3, r0
 80080be:	220c      	movs	r2, #12
 80080c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80080c2:	2301      	movs	r3, #1
 80080c4:	425b      	negs	r3, r3
 80080c6:	e009      	b.n	80080dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80080c8:	4b08      	ldr	r3, [pc, #32]	@ (80080ec <_sbrk+0x64>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80080ce:	4b07      	ldr	r3, [pc, #28]	@ (80080ec <_sbrk+0x64>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	18d2      	adds	r2, r2, r3
 80080d6:	4b05      	ldr	r3, [pc, #20]	@ (80080ec <_sbrk+0x64>)
 80080d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80080da:	68fb      	ldr	r3, [r7, #12]
}
 80080dc:	0018      	movs	r0, r3
 80080de:	46bd      	mov	sp, r7
 80080e0:	b006      	add	sp, #24
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20005000 	.word	0x20005000
 80080e8:	00000400 	.word	0x00000400
 80080ec:	20002884 	.word	0x20002884
 80080f0:	20003768 	.word	0x20003768

080080f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80080f8:	46c0      	nop			@ (mov r8, r8)
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008106:	2310      	movs	r3, #16
 8008108:	18fb      	adds	r3, r7, r3
 800810a:	0018      	movs	r0, r3
 800810c:	2308      	movs	r3, #8
 800810e:	001a      	movs	r2, r3
 8008110:	2100      	movs	r1, #0
 8008112:	f009 fe23 	bl	8011d5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008116:	003b      	movs	r3, r7
 8008118:	0018      	movs	r0, r3
 800811a:	2310      	movs	r3, #16
 800811c:	001a      	movs	r2, r3
 800811e:	2100      	movs	r1, #0
 8008120:	f009 fe1c 	bl	8011d5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008124:	4b2e      	ldr	r3, [pc, #184]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 8008126:	2280      	movs	r2, #128	@ 0x80
 8008128:	05d2      	lsls	r2, r2, #23
 800812a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800812c:	4b2c      	ldr	r3, [pc, #176]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 800812e:	2200      	movs	r2, #0
 8008130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008132:	4b2b      	ldr	r3, [pc, #172]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 8008134:	2200      	movs	r2, #0
 8008136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008138:	4b29      	ldr	r3, [pc, #164]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 800813a:	4a2a      	ldr	r2, [pc, #168]	@ (80081e4 <MX_TIM2_Init+0xe4>)
 800813c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800813e:	4b28      	ldr	r3, [pc, #160]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 8008140:	2200      	movs	r2, #0
 8008142:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008144:	4b26      	ldr	r3, [pc, #152]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 8008146:	2200      	movs	r2, #0
 8008148:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800814a:	4b25      	ldr	r3, [pc, #148]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 800814c:	0018      	movs	r0, r3
 800814e:	f005 fcd3 	bl	800daf8 <HAL_TIM_PWM_Init>
 8008152:	1e03      	subs	r3, r0, #0
 8008154:	d001      	beq.n	800815a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008156:	f7fd fc2d 	bl	80059b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800815a:	2110      	movs	r1, #16
 800815c:	187b      	adds	r3, r7, r1
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008162:	187b      	adds	r3, r7, r1
 8008164:	2200      	movs	r2, #0
 8008166:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008168:	187a      	adds	r2, r7, r1
 800816a:	4b1d      	ldr	r3, [pc, #116]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 800816c:	0011      	movs	r1, r2
 800816e:	0018      	movs	r0, r3
 8008170:	f005 ffe0 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 8008174:	1e03      	subs	r3, r0, #0
 8008176:	d001      	beq.n	800817c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8008178:	f7fd fc1c 	bl	80059b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800817c:	003b      	movs	r3, r7
 800817e:	2260      	movs	r2, #96	@ 0x60
 8008180:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008182:	003b      	movs	r3, r7
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008188:	003b      	movs	r3, r7
 800818a:	2200      	movs	r2, #0
 800818c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800818e:	003b      	movs	r3, r7
 8008190:	2200      	movs	r2, #0
 8008192:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008194:	0039      	movs	r1, r7
 8008196:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 8008198:	2200      	movs	r2, #0
 800819a:	0018      	movs	r0, r3
 800819c:	f005 fd7e 	bl	800dc9c <HAL_TIM_PWM_ConfigChannel>
 80081a0:	1e03      	subs	r3, r0, #0
 80081a2:	d001      	beq.n	80081a8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80081a4:	f7fd fc06 	bl	80059b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80081a8:	0039      	movs	r1, r7
 80081aa:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 80081ac:	2208      	movs	r2, #8
 80081ae:	0018      	movs	r0, r3
 80081b0:	f005 fd74 	bl	800dc9c <HAL_TIM_PWM_ConfigChannel>
 80081b4:	1e03      	subs	r3, r0, #0
 80081b6:	d001      	beq.n	80081bc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80081b8:	f7fd fbfc 	bl	80059b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80081bc:	0039      	movs	r1, r7
 80081be:	4b08      	ldr	r3, [pc, #32]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 80081c0:	220c      	movs	r2, #12
 80081c2:	0018      	movs	r0, r3
 80081c4:	f005 fd6a 	bl	800dc9c <HAL_TIM_PWM_ConfigChannel>
 80081c8:	1e03      	subs	r3, r0, #0
 80081ca:	d001      	beq.n	80081d0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80081cc:	f7fd fbf2 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80081d0:	4b03      	ldr	r3, [pc, #12]	@ (80081e0 <MX_TIM2_Init+0xe0>)
 80081d2:	0018      	movs	r0, r3
 80081d4:	f000 f8aa 	bl	800832c <HAL_TIM_MspPostInit>

}
 80081d8:	46c0      	nop			@ (mov r8, r8)
 80081da:	46bd      	mov	sp, r7
 80081dc:	b006      	add	sp, #24
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20002888 	.word	0x20002888
 80081e4:	0000ffff 	.word	0x0000ffff

080081e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081ee:	2310      	movs	r3, #16
 80081f0:	18fb      	adds	r3, r7, r3
 80081f2:	0018      	movs	r0, r3
 80081f4:	2308      	movs	r3, #8
 80081f6:	001a      	movs	r2, r3
 80081f8:	2100      	movs	r1, #0
 80081fa:	f009 fdaf 	bl	8011d5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80081fe:	003b      	movs	r3, r7
 8008200:	0018      	movs	r0, r3
 8008202:	2310      	movs	r3, #16
 8008204:	001a      	movs	r2, r3
 8008206:	2100      	movs	r1, #0
 8008208:	f009 fda8 	bl	8011d5c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800820c:	4b32      	ldr	r3, [pc, #200]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 800820e:	4a33      	ldr	r2, [pc, #204]	@ (80082dc <MX_TIM3_Init+0xf4>)
 8008210:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008212:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008218:	4b2f      	ldr	r3, [pc, #188]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 800821a:	2200      	movs	r2, #0
 800821c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800821e:	4b2e      	ldr	r3, [pc, #184]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 8008220:	4a2f      	ldr	r2, [pc, #188]	@ (80082e0 <MX_TIM3_Init+0xf8>)
 8008222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008224:	4b2c      	ldr	r3, [pc, #176]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 8008226:	2200      	movs	r2, #0
 8008228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800822a:	4b2b      	ldr	r3, [pc, #172]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 800822c:	2200      	movs	r2, #0
 800822e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008230:	4b29      	ldr	r3, [pc, #164]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 8008232:	0018      	movs	r0, r3
 8008234:	f005 fc60 	bl	800daf8 <HAL_TIM_PWM_Init>
 8008238:	1e03      	subs	r3, r0, #0
 800823a:	d001      	beq.n	8008240 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800823c:	f7fd fbba 	bl	80059b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008240:	2110      	movs	r1, #16
 8008242:	187b      	adds	r3, r7, r1
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008248:	187b      	adds	r3, r7, r1
 800824a:	2200      	movs	r2, #0
 800824c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800824e:	187a      	adds	r2, r7, r1
 8008250:	4b21      	ldr	r3, [pc, #132]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 8008252:	0011      	movs	r1, r2
 8008254:	0018      	movs	r0, r3
 8008256:	f005 ff6d 	bl	800e134 <HAL_TIMEx_MasterConfigSynchronization>
 800825a:	1e03      	subs	r3, r0, #0
 800825c:	d001      	beq.n	8008262 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800825e:	f7fd fba9 	bl	80059b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008262:	003b      	movs	r3, r7
 8008264:	2260      	movs	r2, #96	@ 0x60
 8008266:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008268:	003b      	movs	r3, r7
 800826a:	2200      	movs	r2, #0
 800826c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800826e:	003b      	movs	r3, r7
 8008270:	2200      	movs	r2, #0
 8008272:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008274:	003b      	movs	r3, r7
 8008276:	2200      	movs	r2, #0
 8008278:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800827a:	0039      	movs	r1, r7
 800827c:	4b16      	ldr	r3, [pc, #88]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 800827e:	2200      	movs	r2, #0
 8008280:	0018      	movs	r0, r3
 8008282:	f005 fd0b 	bl	800dc9c <HAL_TIM_PWM_ConfigChannel>
 8008286:	1e03      	subs	r3, r0, #0
 8008288:	d001      	beq.n	800828e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800828a:	f7fd fb93 	bl	80059b4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800828e:	4b12      	ldr	r3, [pc, #72]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 8008290:	2104      	movs	r1, #4
 8008292:	0018      	movs	r0, r3
 8008294:	f005 ffac 	bl	800e1f0 <HAL_TIMEx_RemapConfig>
 8008298:	1e03      	subs	r3, r0, #0
 800829a:	d001      	beq.n	80082a0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800829c:	f7fd fb8a 	bl	80059b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80082a0:	0039      	movs	r1, r7
 80082a2:	4b0d      	ldr	r3, [pc, #52]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 80082a4:	2204      	movs	r2, #4
 80082a6:	0018      	movs	r0, r3
 80082a8:	f005 fcf8 	bl	800dc9c <HAL_TIM_PWM_ConfigChannel>
 80082ac:	1e03      	subs	r3, r0, #0
 80082ae:	d001      	beq.n	80082b4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80082b0:	f7fd fb80 	bl	80059b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80082b4:	0039      	movs	r1, r7
 80082b6:	4b08      	ldr	r3, [pc, #32]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 80082b8:	2208      	movs	r2, #8
 80082ba:	0018      	movs	r0, r3
 80082bc:	f005 fcee 	bl	800dc9c <HAL_TIM_PWM_ConfigChannel>
 80082c0:	1e03      	subs	r3, r0, #0
 80082c2:	d001      	beq.n	80082c8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80082c4:	f7fd fb76 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80082c8:	4b03      	ldr	r3, [pc, #12]	@ (80082d8 <MX_TIM3_Init+0xf0>)
 80082ca:	0018      	movs	r0, r3
 80082cc:	f000 f82e 	bl	800832c <HAL_TIM_MspPostInit>

}
 80082d0:	46c0      	nop			@ (mov r8, r8)
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b006      	add	sp, #24
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	200028c8 	.word	0x200028c8
 80082dc:	40000400 	.word	0x40000400
 80082e0:	0000ffff 	.word	0x0000ffff

080082e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	2380      	movs	r3, #128	@ 0x80
 80082f2:	05db      	lsls	r3, r3, #23
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d106      	bne.n	8008306 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80082f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008324 <HAL_TIM_PWM_MspInit+0x40>)
 80082fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082fc:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <HAL_TIM_PWM_MspInit+0x40>)
 80082fe:	2101      	movs	r1, #1
 8008300:	430a      	orrs	r2, r1
 8008302:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008304:	e00a      	b.n	800831c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a07      	ldr	r2, [pc, #28]	@ (8008328 <HAL_TIM_PWM_MspInit+0x44>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d105      	bne.n	800831c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008310:	4b04      	ldr	r3, [pc, #16]	@ (8008324 <HAL_TIM_PWM_MspInit+0x40>)
 8008312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008314:	4b03      	ldr	r3, [pc, #12]	@ (8008324 <HAL_TIM_PWM_MspInit+0x40>)
 8008316:	2102      	movs	r1, #2
 8008318:	430a      	orrs	r2, r1
 800831a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800831c:	46c0      	nop			@ (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b002      	add	sp, #8
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40021000 	.word	0x40021000
 8008328:	40000400 	.word	0x40000400

0800832c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b08b      	sub	sp, #44	@ 0x2c
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008334:	2414      	movs	r4, #20
 8008336:	193b      	adds	r3, r7, r4
 8008338:	0018      	movs	r0, r3
 800833a:	2314      	movs	r3, #20
 800833c:	001a      	movs	r2, r3
 800833e:	2100      	movs	r1, #0
 8008340:	f009 fd0c 	bl	8011d5c <memset>
  if(timHandle->Instance==TIM2)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	2380      	movs	r3, #128	@ 0x80
 800834a:	05db      	lsls	r3, r3, #23
 800834c:	429a      	cmp	r2, r3
 800834e:	d123      	bne.n	8008398 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008350:	4b27      	ldr	r3, [pc, #156]	@ (80083f0 <HAL_TIM_MspPostInit+0xc4>)
 8008352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008354:	4b26      	ldr	r3, [pc, #152]	@ (80083f0 <HAL_TIM_MspPostInit+0xc4>)
 8008356:	2101      	movs	r1, #1
 8008358:	430a      	orrs	r2, r1
 800835a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800835c:	4b24      	ldr	r3, [pc, #144]	@ (80083f0 <HAL_TIM_MspPostInit+0xc4>)
 800835e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008360:	2201      	movs	r2, #1
 8008362:	4013      	ands	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8008368:	0021      	movs	r1, r4
 800836a:	187b      	adds	r3, r7, r1
 800836c:	220d      	movs	r2, #13
 800836e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008370:	187b      	adds	r3, r7, r1
 8008372:	2202      	movs	r2, #2
 8008374:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008376:	187b      	adds	r3, r7, r1
 8008378:	2200      	movs	r2, #0
 800837a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800837c:	187b      	adds	r3, r7, r1
 800837e:	2200      	movs	r2, #0
 8008380:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8008382:	187b      	adds	r3, r7, r1
 8008384:	2202      	movs	r2, #2
 8008386:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008388:	187a      	adds	r2, r7, r1
 800838a:	23a0      	movs	r3, #160	@ 0xa0
 800838c:	05db      	lsls	r3, r3, #23
 800838e:	0011      	movs	r1, r2
 8008390:	0018      	movs	r0, r3
 8008392:	f001 fd57 	bl	8009e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008396:	e027      	b.n	80083e8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a15      	ldr	r2, [pc, #84]	@ (80083f4 <HAL_TIM_MspPostInit+0xc8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d122      	bne.n	80083e8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083a2:	4b13      	ldr	r3, [pc, #76]	@ (80083f0 <HAL_TIM_MspPostInit+0xc4>)
 80083a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a6:	4b12      	ldr	r3, [pc, #72]	@ (80083f0 <HAL_TIM_MspPostInit+0xc4>)
 80083a8:	2104      	movs	r1, #4
 80083aa:	430a      	orrs	r2, r1
 80083ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80083ae:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <HAL_TIM_MspPostInit+0xc4>)
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	2204      	movs	r2, #4
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80083ba:	2114      	movs	r1, #20
 80083bc:	187b      	adds	r3, r7, r1
 80083be:	22e0      	movs	r2, #224	@ 0xe0
 80083c0:	0052      	lsls	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c4:	187b      	adds	r3, r7, r1
 80083c6:	2202      	movs	r2, #2
 80083c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ca:	187b      	adds	r3, r7, r1
 80083cc:	2200      	movs	r2, #0
 80083ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	2200      	movs	r2, #0
 80083d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80083d6:	187b      	adds	r3, r7, r1
 80083d8:	2202      	movs	r2, #2
 80083da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083dc:	187b      	adds	r3, r7, r1
 80083de:	4a06      	ldr	r2, [pc, #24]	@ (80083f8 <HAL_TIM_MspPostInit+0xcc>)
 80083e0:	0019      	movs	r1, r3
 80083e2:	0010      	movs	r0, r2
 80083e4:	f001 fd2e 	bl	8009e44 <HAL_GPIO_Init>
}
 80083e8:	46c0      	nop			@ (mov r8, r8)
 80083ea:	46bd      	mov	sp, r7
 80083ec:	b00b      	add	sp, #44	@ 0x2c
 80083ee:	bd90      	pop	{r4, r7, pc}
 80083f0:	40021000 	.word	0x40021000
 80083f4:	40000400 	.word	0x40000400
 80083f8:	50000800 	.word	0x50000800

080083fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008400:	4b16      	ldr	r3, [pc, #88]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008402:	4a17      	ldr	r2, [pc, #92]	@ (8008460 <MX_USART1_UART_Init+0x64>)
 8008404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008406:	4b15      	ldr	r3, [pc, #84]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008408:	22e1      	movs	r2, #225	@ 0xe1
 800840a:	0252      	lsls	r2, r2, #9
 800840c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800840e:	4b13      	ldr	r3, [pc, #76]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008410:	2200      	movs	r2, #0
 8008412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008414:	4b11      	ldr	r3, [pc, #68]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008416:	2200      	movs	r2, #0
 8008418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800841a:	4b10      	ldr	r3, [pc, #64]	@ (800845c <MX_USART1_UART_Init+0x60>)
 800841c:	2200      	movs	r2, #0
 800841e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008420:	4b0e      	ldr	r3, [pc, #56]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008422:	220c      	movs	r2, #12
 8008424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008426:	4b0d      	ldr	r3, [pc, #52]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008428:	2200      	movs	r2, #0
 800842a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800842c:	4b0b      	ldr	r3, [pc, #44]	@ (800845c <MX_USART1_UART_Init+0x60>)
 800842e:	2200      	movs	r2, #0
 8008430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008432:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008434:	2200      	movs	r2, #0
 8008436:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8008438:	4b08      	ldr	r3, [pc, #32]	@ (800845c <MX_USART1_UART_Init+0x60>)
 800843a:	2208      	movs	r2, #8
 800843c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800843e:	4b07      	ldr	r3, [pc, #28]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008440:	2280      	movs	r2, #128	@ 0x80
 8008442:	0212      	lsls	r2, r2, #8
 8008444:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008446:	4b05      	ldr	r3, [pc, #20]	@ (800845c <MX_USART1_UART_Init+0x60>)
 8008448:	0018      	movs	r0, r3
 800844a:	f005 feef 	bl	800e22c <HAL_UART_Init>
 800844e:	1e03      	subs	r3, r0, #0
 8008450:	d001      	beq.n	8008456 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8008452:	f7fd faaf 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008456:	46c0      	nop			@ (mov r8, r8)
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20002908 	.word	0x20002908
 8008460:	40013800 	.word	0x40013800

08008464 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8008468:	4b14      	ldr	r3, [pc, #80]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 800846a:	4a15      	ldr	r2, [pc, #84]	@ (80084c0 <MX_USART4_UART_Init+0x5c>)
 800846c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800846e:	4b13      	ldr	r3, [pc, #76]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 8008470:	22e1      	movs	r2, #225	@ 0xe1
 8008472:	0252      	lsls	r2, r2, #9
 8008474:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008476:	4b11      	ldr	r3, [pc, #68]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 8008478:	2200      	movs	r2, #0
 800847a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800847c:	4b0f      	ldr	r3, [pc, #60]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 800847e:	2200      	movs	r2, #0
 8008480:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008482:	4b0e      	ldr	r3, [pc, #56]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 8008484:	2200      	movs	r2, #0
 8008486:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008488:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 800848a:	220c      	movs	r2, #12
 800848c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800848e:	4b0b      	ldr	r3, [pc, #44]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 8008490:	2200      	movs	r2, #0
 8008492:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008494:	4b09      	ldr	r3, [pc, #36]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 8008496:	2200      	movs	r2, #0
 8008498:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800849a:	4b08      	ldr	r3, [pc, #32]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 800849c:	2200      	movs	r2, #0
 800849e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80084a0:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80084a6:	4b05      	ldr	r3, [pc, #20]	@ (80084bc <MX_USART4_UART_Init+0x58>)
 80084a8:	0018      	movs	r0, r3
 80084aa:	f005 febf 	bl	800e22c <HAL_UART_Init>
 80084ae:	1e03      	subs	r3, r0, #0
 80084b0:	d001      	beq.n	80084b6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80084b2:	f7fd fa7f 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80084b6:	46c0      	nop			@ (mov r8, r8)
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200029c0 	.word	0x200029c0
 80084c0:	40004c00 	.word	0x40004c00

080084c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b08b      	sub	sp, #44	@ 0x2c
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084cc:	2414      	movs	r4, #20
 80084ce:	193b      	adds	r3, r7, r4
 80084d0:	0018      	movs	r0, r3
 80084d2:	2314      	movs	r3, #20
 80084d4:	001a      	movs	r2, r3
 80084d6:	2100      	movs	r1, #0
 80084d8:	f009 fc40 	bl	8011d5c <memset>
  if(uartHandle->Instance==USART1)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6f      	ldr	r2, [pc, #444]	@ (80086a0 <HAL_UART_MspInit+0x1dc>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d12b      	bne.n	800853e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80084e6:	4b6f      	ldr	r3, [pc, #444]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 80084e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ea:	4b6e      	ldr	r3, [pc, #440]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 80084ec:	2180      	movs	r1, #128	@ 0x80
 80084ee:	01c9      	lsls	r1, r1, #7
 80084f0:	430a      	orrs	r2, r1
 80084f2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084f4:	4b6b      	ldr	r3, [pc, #428]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 80084f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f8:	4b6a      	ldr	r3, [pc, #424]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 80084fa:	2101      	movs	r1, #1
 80084fc:	430a      	orrs	r2, r1
 80084fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008500:	4b68      	ldr	r3, [pc, #416]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 8008502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008504:	2201      	movs	r2, #1
 8008506:	4013      	ands	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
 800850a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800850c:	193b      	adds	r3, r7, r4
 800850e:	22c0      	movs	r2, #192	@ 0xc0
 8008510:	00d2      	lsls	r2, r2, #3
 8008512:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008514:	0021      	movs	r1, r4
 8008516:	187b      	adds	r3, r7, r1
 8008518:	2202      	movs	r2, #2
 800851a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851c:	187b      	adds	r3, r7, r1
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008522:	187b      	adds	r3, r7, r1
 8008524:	2203      	movs	r2, #3
 8008526:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008528:	187b      	adds	r3, r7, r1
 800852a:	2204      	movs	r2, #4
 800852c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800852e:	187a      	adds	r2, r7, r1
 8008530:	23a0      	movs	r3, #160	@ 0xa0
 8008532:	05db      	lsls	r3, r3, #23
 8008534:	0011      	movs	r1, r2
 8008536:	0018      	movs	r0, r3
 8008538:	f001 fc84 	bl	8009e44 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800853c:	e0ac      	b.n	8008698 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a59      	ldr	r2, [pc, #356]	@ (80086a8 <HAL_UART_MspInit+0x1e4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d000      	beq.n	800854a <HAL_UART_MspInit+0x86>
 8008548:	e0a6      	b.n	8008698 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 800854a:	4b56      	ldr	r3, [pc, #344]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 800854c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800854e:	4b55      	ldr	r3, [pc, #340]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 8008550:	2180      	movs	r1, #128	@ 0x80
 8008552:	0309      	lsls	r1, r1, #12
 8008554:	430a      	orrs	r2, r1
 8008556:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008558:	4b52      	ldr	r3, [pc, #328]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 800855a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800855c:	4b51      	ldr	r3, [pc, #324]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 800855e:	2101      	movs	r1, #1
 8008560:	430a      	orrs	r2, r1
 8008562:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008564:	4b4f      	ldr	r3, [pc, #316]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 8008566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008568:	2201      	movs	r2, #1
 800856a:	4013      	ands	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008570:	4b4c      	ldr	r3, [pc, #304]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 8008572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008574:	4b4b      	ldr	r3, [pc, #300]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 8008576:	2104      	movs	r1, #4
 8008578:	430a      	orrs	r2, r1
 800857a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800857c:	4b49      	ldr	r3, [pc, #292]	@ (80086a4 <HAL_UART_MspInit+0x1e0>)
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	2204      	movs	r2, #4
 8008582:	4013      	ands	r3, r2
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008588:	2414      	movs	r4, #20
 800858a:	193b      	adds	r3, r7, r4
 800858c:	2202      	movs	r2, #2
 800858e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008590:	193b      	adds	r3, r7, r4
 8008592:	2202      	movs	r2, #2
 8008594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008596:	193b      	adds	r3, r7, r4
 8008598:	2200      	movs	r2, #0
 800859a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800859c:	193b      	adds	r3, r7, r4
 800859e:	2203      	movs	r2, #3
 80085a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80085a2:	193b      	adds	r3, r7, r4
 80085a4:	2206      	movs	r2, #6
 80085a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a8:	193a      	adds	r2, r7, r4
 80085aa:	23a0      	movs	r3, #160	@ 0xa0
 80085ac:	05db      	lsls	r3, r3, #23
 80085ae:	0011      	movs	r1, r2
 80085b0:	0018      	movs	r0, r3
 80085b2:	f001 fc47 	bl	8009e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085b6:	0021      	movs	r1, r4
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	2280      	movs	r2, #128	@ 0x80
 80085bc:	00d2      	lsls	r2, r2, #3
 80085be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	2202      	movs	r2, #2
 80085c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	2200      	movs	r2, #0
 80085ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	2203      	movs	r2, #3
 80085d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80085d2:	187b      	adds	r3, r7, r1
 80085d4:	2206      	movs	r2, #6
 80085d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085d8:	187b      	adds	r3, r7, r1
 80085da:	4a34      	ldr	r2, [pc, #208]	@ (80086ac <HAL_UART_MspInit+0x1e8>)
 80085dc:	0019      	movs	r1, r3
 80085de:	0010      	movs	r0, r2
 80085e0:	f001 fc30 	bl	8009e44 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80085e4:	4b32      	ldr	r3, [pc, #200]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 80085e6:	4a33      	ldr	r2, [pc, #204]	@ (80086b4 <HAL_UART_MspInit+0x1f0>)
 80085e8:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80085ea:	4b31      	ldr	r3, [pc, #196]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 80085ec:	220c      	movs	r2, #12
 80085ee:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80085f0:	4b2f      	ldr	r3, [pc, #188]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80085f6:	4b2e      	ldr	r3, [pc, #184]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80085fc:	4b2c      	ldr	r3, [pc, #176]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 80085fe:	2280      	movs	r2, #128	@ 0x80
 8008600:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008602:	4b2b      	ldr	r3, [pc, #172]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 8008604:	2200      	movs	r2, #0
 8008606:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008608:	4b29      	ldr	r3, [pc, #164]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 800860a:	2200      	movs	r2, #0
 800860c:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800860e:	4b28      	ldr	r3, [pc, #160]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 8008610:	2220      	movs	r2, #32
 8008612:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008614:	4b26      	ldr	r3, [pc, #152]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 8008616:	2200      	movs	r2, #0
 8008618:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800861a:	4b25      	ldr	r3, [pc, #148]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 800861c:	0018      	movs	r0, r3
 800861e:	f001 f965 	bl	80098ec <HAL_DMA_Init>
 8008622:	1e03      	subs	r3, r0, #0
 8008624:	d001      	beq.n	800862a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8008626:	f7fd f9c5 	bl	80059b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a20      	ldr	r2, [pc, #128]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 800862e:	675a      	str	r2, [r3, #116]	@ 0x74
 8008630:	4b1f      	ldr	r3, [pc, #124]	@ (80086b0 <HAL_UART_MspInit+0x1ec>)
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8008636:	4b20      	ldr	r3, [pc, #128]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008638:	4a20      	ldr	r2, [pc, #128]	@ (80086bc <HAL_UART_MspInit+0x1f8>)
 800863a:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800863c:	4b1e      	ldr	r3, [pc, #120]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 800863e:	220c      	movs	r2, #12
 8008640:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008642:	4b1d      	ldr	r3, [pc, #116]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008644:	2210      	movs	r2, #16
 8008646:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008648:	4b1b      	ldr	r3, [pc, #108]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 800864a:	2200      	movs	r2, #0
 800864c:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800864e:	4b1a      	ldr	r3, [pc, #104]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008650:	2280      	movs	r2, #128	@ 0x80
 8008652:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008654:	4b18      	ldr	r3, [pc, #96]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008656:	2200      	movs	r2, #0
 8008658:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800865a:	4b17      	ldr	r3, [pc, #92]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 800865c:	2200      	movs	r2, #0
 800865e:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8008660:	4b15      	ldr	r3, [pc, #84]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008662:	2200      	movs	r2, #0
 8008664:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008666:	4b14      	ldr	r3, [pc, #80]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008668:	2200      	movs	r2, #0
 800866a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800866c:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 800866e:	0018      	movs	r0, r3
 8008670:	f001 f93c 	bl	80098ec <HAL_DMA_Init>
 8008674:	1e03      	subs	r3, r0, #0
 8008676:	d001      	beq.n	800867c <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8008678:	f7fd f99c 	bl	80059b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a0e      	ldr	r2, [pc, #56]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008680:	671a      	str	r2, [r3, #112]	@ 0x70
 8008682:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <HAL_UART_MspInit+0x1f4>)
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8008688:	2200      	movs	r2, #0
 800868a:	2100      	movs	r1, #0
 800868c:	200e      	movs	r0, #14
 800868e:	f001 f8fb 	bl	8009888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8008692:	200e      	movs	r0, #14
 8008694:	f001 f90d 	bl	80098b2 <HAL_NVIC_EnableIRQ>
}
 8008698:	46c0      	nop			@ (mov r8, r8)
 800869a:	46bd      	mov	sp, r7
 800869c:	b00b      	add	sp, #44	@ 0x2c
 800869e:	bd90      	pop	{r4, r7, pc}
 80086a0:	40013800 	.word	0x40013800
 80086a4:	40021000 	.word	0x40021000
 80086a8:	40004c00 	.word	0x40004c00
 80086ac:	50000800 	.word	0x50000800
 80086b0:	20002a78 	.word	0x20002a78
 80086b4:	4002006c 	.word	0x4002006c
 80086b8:	20002ac0 	.word	0x20002ac0
 80086bc:	40020080 	.word	0x40020080

080086c0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80086c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086c6:	4a10      	ldr	r2, [pc, #64]	@ (8008708 <MX_USB_PCD_Init+0x48>)
 80086c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80086ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086cc:	2208      	movs	r2, #8
 80086ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80086d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086d2:	2202      	movs	r2, #2
 80086d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086d8:	2202      	movs	r2, #2
 80086da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086dc:	4b09      	ldr	r3, [pc, #36]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086de:	2200      	movs	r2, #0
 80086e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80086e2:	4b08      	ldr	r3, [pc, #32]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80086e8:	4b06      	ldr	r3, [pc, #24]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80086ee:	4b05      	ldr	r3, [pc, #20]	@ (8008704 <MX_USB_PCD_Init+0x44>)
 80086f0:	0018      	movs	r0, r3
 80086f2:	f004 f983 	bl	800c9fc <HAL_PCD_Init>
 80086f6:	1e03      	subs	r3, r0, #0
 80086f8:	d001      	beq.n	80086fe <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80086fa:	f7fd f95b 	bl	80059b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20002b08 	.word	0x20002b08
 8008708:	40005c00 	.word	0x40005c00

0800870c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a06      	ldr	r2, [pc, #24]	@ (8008734 <HAL_PCD_MspInit+0x28>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d106      	bne.n	800872c <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800871e:	4b06      	ldr	r3, [pc, #24]	@ (8008738 <HAL_PCD_MspInit+0x2c>)
 8008720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008722:	4b05      	ldr	r3, [pc, #20]	@ (8008738 <HAL_PCD_MspInit+0x2c>)
 8008724:	2180      	movs	r1, #128	@ 0x80
 8008726:	0409      	lsls	r1, r1, #16
 8008728:	430a      	orrs	r2, r1
 800872a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800872c:	46c0      	nop			@ (mov r8, r8)
 800872e:	46bd      	mov	sp, r7
 8008730:	b002      	add	sp, #8
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40005c00 	.word	0x40005c00
 8008738:	40021000 	.word	0x40021000

0800873c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8008744:	f000 fc48 	bl	8008fd8 <HAL_GetTick>
 8008748:	0003      	movs	r3, r0
 800874a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800874c:	4b1c      	ldr	r3, [pc, #112]	@ (80087c0 <TimestampIsReached+0x84>)
 800874e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d307      	bcc.n	8008768 <TimestampIsReached+0x2c>
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	429a      	cmp	r2, r3
 8008762:	d901      	bls.n	8008768 <TimestampIsReached+0x2c>
 8008764:	2201      	movs	r2, #1
 8008766:	e000      	b.n	800876a <TimestampIsReached+0x2e>
 8008768:	2200      	movs	r2, #0
 800876a:	230f      	movs	r3, #15
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	701a      	strb	r2, [r3, #0]
 8008770:	781a      	ldrb	r2, [r3, #0]
 8008772:	2101      	movs	r1, #1
 8008774:	400a      	ands	r2, r1
 8008776:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d207      	bcs.n	8008790 <TimestampIsReached+0x54>
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	429a      	cmp	r2, r3
 800878a:	d201      	bcs.n	8008790 <TimestampIsReached+0x54>
 800878c:	2201      	movs	r2, #1
 800878e:	e000      	b.n	8008792 <TimestampIsReached+0x56>
 8008790:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8008792:	200e      	movs	r0, #14
 8008794:	183b      	adds	r3, r7, r0
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	2101      	movs	r1, #1
 800879c:	400a      	ands	r2, r1
 800879e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80087a0:	230f      	movs	r3, #15
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d103      	bne.n	80087b2 <TimestampIsReached+0x76>
 80087aa:	183b      	adds	r3, r7, r0
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	0018      	movs	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	b006      	add	sp, #24
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	7fffffff 	.word	0x7fffffff

080087c4 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80087cc:	f000 fc04 	bl	8008fd8 <HAL_GetTick>
 80087d0:	0002      	movs	r2, r0
 80087d2:	4904      	ldr	r1, [pc, #16]	@ (80087e4 <AddTimestamp+0x20>)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	0018      	movs	r0, r3
 80087d8:	f009 fa1c 	bl	8011c14 <siprintf>
}
 80087dc:	46c0      	nop			@ (mov r8, r8)
 80087de:	46bd      	mov	sp, r7
 80087e0:	b002      	add	sp, #8
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	08015104 	.word	0x08015104

080087e8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80087e8:	b40c      	push	{r2, r3}
 80087ea:	b5b0      	push	{r4, r5, r7, lr}
 80087ec:	4c2b      	ldr	r4, [pc, #172]	@ (800889c <CreateLine+0xb4>)
 80087ee:	44a5      	add	sp, r4
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	0002      	movs	r2, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	4b2a      	ldr	r3, [pc, #168]	@ (80088a0 <CreateLine+0xb8>)
 80087f8:	2182      	movs	r1, #130	@ 0x82
 80087fa:	00c9      	lsls	r1, r1, #3
 80087fc:	185b      	adds	r3, r3, r1
 80087fe:	19db      	adds	r3, r3, r7
 8008800:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8008802:	4b28      	ldr	r3, [pc, #160]	@ (80088a4 <CreateLine+0xbc>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	4a26      	ldr	r2, [pc, #152]	@ (80088a0 <CreateLine+0xb8>)
 8008808:	1852      	adds	r2, r2, r1
 800880a:	19d2      	adds	r2, r2, r7
 800880c:	7812      	ldrb	r2, [r2, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d83b      	bhi.n	800888a <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4924      	ldr	r1, [pc, #144]	@ (80088a8 <CreateLine+0xc0>)
 8008816:	240c      	movs	r4, #12
 8008818:	193b      	adds	r3, r7, r4
 800881a:	0018      	movs	r0, r3
 800881c:	f009 f9fa 	bl	8011c14 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8008820:	4b20      	ldr	r3, [pc, #128]	@ (80088a4 <CreateLine+0xbc>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d909      	bls.n	800883c <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8008828:	193b      	adds	r3, r7, r4
 800882a:	0018      	movs	r0, r3
 800882c:	f7f7 fc94 	bl	8000158 <strlen>
 8008830:	0002      	movs	r2, r0
 8008832:	193b      	adds	r3, r7, r4
 8008834:	189b      	adds	r3, r3, r2
 8008836:	0018      	movs	r0, r3
 8008838:	f7ff ffc4 	bl	80087c4 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800883c:	240c      	movs	r4, #12
 800883e:	193b      	adds	r3, r7, r4
 8008840:	0018      	movs	r0, r3
 8008842:	f7f7 fc89 	bl	8000158 <strlen>
 8008846:	0003      	movs	r3, r0
 8008848:	4918      	ldr	r1, [pc, #96]	@ (80088ac <CreateLine+0xc4>)
 800884a:	187a      	adds	r2, r7, r1
 800884c:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800884e:	4b18      	ldr	r3, [pc, #96]	@ (80088b0 <CreateLine+0xc8>)
 8008850:	2508      	movs	r5, #8
 8008852:	195b      	adds	r3, r3, r5
 8008854:	19db      	adds	r3, r3, r7
 8008856:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8008858:	193a      	adds	r2, r7, r4
 800885a:	187b      	adds	r3, r7, r1
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	18d0      	adds	r0, r2, r3
 8008860:	187b      	adds	r3, r7, r1
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2280      	movs	r2, #128	@ 0x80
 8008866:	00d2      	lsls	r2, r2, #3
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	0019      	movs	r1, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2283      	movs	r2, #131	@ 0x83
 8008870:	00d2      	lsls	r2, r2, #3
 8008872:	1952      	adds	r2, r2, r5
 8008874:	19d2      	adds	r2, r2, r7
 8008876:	6812      	ldr	r2, [r2, #0]
 8008878:	f009 fa64 	bl	8011d44 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800887c:	193a      	adds	r2, r7, r4
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <CreateLine+0xcc>)
 8008880:	0011      	movs	r1, r2
 8008882:	0018      	movs	r0, r3
 8008884:	f009 f9b6 	bl	8011bf4 <iprintf>
 8008888:	e000      	b.n	800888c <CreateLine+0xa4>
    return;
 800888a:	46c0      	nop			@ (mov r8, r8)
}
 800888c:	46bd      	mov	sp, r7
 800888e:	2382      	movs	r3, #130	@ 0x82
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	449d      	add	sp, r3
 8008894:	bcb0      	pop	{r4, r5, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	b002      	add	sp, #8
 800889a:	4718      	bx	r3
 800889c:	fffffbf0 	.word	0xfffffbf0
 80088a0:	fffffbf7 	.word	0xfffffbf7
 80088a4:	20000134 	.word	0x20000134
 80088a8:	08015110 	.word	0x08015110
 80088ac:	0000040c 	.word	0x0000040c
 80088b0:	0000041c 	.word	0x0000041c
 80088b4:	08015114 	.word	0x08015114

080088b8 <_write>:

int _write(int fd, const void *buf, size_t count) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68b9      	ldr	r1, [r7, #8]
 80088ca:	4804      	ldr	r0, [pc, #16]	@ (80088dc <_write+0x24>)
 80088cc:	2364      	movs	r3, #100	@ 0x64
 80088ce:	f005 fd13 	bl	800e2f8 <HAL_UART_Transmit>
  return count;
 80088d2:	687b      	ldr	r3, [r7, #4]
}
 80088d4:	0018      	movs	r0, r3
 80088d6:	46bd      	mov	sp, r7
 80088d8:	b004      	add	sp, #16
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	20002908 	.word	0x20002908

080088e0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	0002      	movs	r2, r0
 80088e8:	1dfb      	adds	r3, r7, #7
 80088ea:	701a      	strb	r2, [r3, #0]
 80088ec:	4b03      	ldr	r3, [pc, #12]	@ (80088fc <SetVerboseLevel+0x1c>)
 80088ee:	1dfa      	adds	r2, r7, #7
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	46c0      	nop			@ (mov r8, r8)
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b002      	add	sp, #8
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000134 	.word	0x20000134

08008900 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008904:	f000 fb68 	bl	8008fd8 <HAL_GetTick>
 8008908:	0003      	movs	r3, r0
}
 800890a:	0018      	movs	r0, r3
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8008916:	4a0f      	ldr	r2, [pc, #60]	@ (8008954 <BinaryReleaseInfo+0x44>)
 8008918:	4b0f      	ldr	r3, [pc, #60]	@ (8008958 <BinaryReleaseInfo+0x48>)
 800891a:	0019      	movs	r1, r3
 800891c:	2002      	movs	r0, #2
 800891e:	f7ff ff63 	bl	80087e8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8008922:	480e      	ldr	r0, [pc, #56]	@ (800895c <BinaryReleaseInfo+0x4c>)
 8008924:	4a0e      	ldr	r2, [pc, #56]	@ (8008960 <BinaryReleaseInfo+0x50>)
 8008926:	490c      	ldr	r1, [pc, #48]	@ (8008958 <BinaryReleaseInfo+0x48>)
 8008928:	4b0e      	ldr	r3, [pc, #56]	@ (8008964 <BinaryReleaseInfo+0x54>)
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	0003      	movs	r3, r0
 800892e:	2002      	movs	r0, #2
 8008930:	f7ff ff5a 	bl	80087e8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8008934:	4a0c      	ldr	r2, [pc, #48]	@ (8008968 <BinaryReleaseInfo+0x58>)
 8008936:	4b08      	ldr	r3, [pc, #32]	@ (8008958 <BinaryReleaseInfo+0x48>)
 8008938:	0019      	movs	r1, r3
 800893a:	2002      	movs	r0, #2
 800893c:	f7ff ff54 	bl	80087e8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8008940:	4b0a      	ldr	r3, [pc, #40]	@ (800896c <BinaryReleaseInfo+0x5c>)
 8008942:	4a0b      	ldr	r2, [pc, #44]	@ (8008970 <BinaryReleaseInfo+0x60>)
 8008944:	4904      	ldr	r1, [pc, #16]	@ (8008958 <BinaryReleaseInfo+0x48>)
 8008946:	2002      	movs	r0, #2
 8008948:	f7ff ff4e 	bl	80087e8 <CreateLine>
}
 800894c:	46c0      	nop			@ (mov r8, r8)
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	46c0      	nop			@ (mov r8, r8)
 8008954:	0801511c 	.word	0x0801511c
 8008958:	08015148 	.word	0x08015148
 800895c:	0801514c 	.word	0x0801514c
 8008960:	08015158 	.word	0x08015158
 8008964:	0801516c 	.word	0x0801516c
 8008968:	08015178 	.word	0x08015178
 800896c:	08015184 	.word	0x08015184
 8008970:	0801518c 	.word	0x0801518c

08008974 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008974:	b590      	push	{r4, r7, lr}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6039      	str	r1, [r7, #0]
 800897c:	0011      	movs	r1, r2
 800897e:	1dfb      	adds	r3, r7, #7
 8008980:	1c02      	adds	r2, r0, #0
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	1dbb      	adds	r3, r7, #6
 8008986:	1c0a      	adds	r2, r1, #0
 8008988:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800898a:	4b08      	ldr	r3, [pc, #32]	@ (80089ac <ReadRegister+0x38>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d008      	beq.n	80089a4 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008992:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <ReadRegister+0x38>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	1dba      	adds	r2, r7, #6
 8008998:	7814      	ldrb	r4, [r2, #0]
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	1dfa      	adds	r2, r7, #7
 800899e:	7810      	ldrb	r0, [r2, #0]
 80089a0:	0022      	movs	r2, r4
 80089a2:	4798      	blx	r3
	}
}
 80089a4:	46c0      	nop			@ (mov r8, r8)
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b003      	add	sp, #12
 80089aa:	bd90      	pop	{r4, r7, pc}
 80089ac:	20002dfc 	.word	0x20002dfc

080089b0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6039      	str	r1, [r7, #0]
 80089b8:	0011      	movs	r1, r2
 80089ba:	1dfb      	adds	r3, r7, #7
 80089bc:	1c02      	adds	r2, r0, #0
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	1dbb      	adds	r3, r7, #6
 80089c2:	1c0a      	adds	r2, r1, #0
 80089c4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80089c6:	4b08      	ldr	r3, [pc, #32]	@ (80089e8 <WriteRegister+0x38>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d008      	beq.n	80089e0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80089ce:	4b06      	ldr	r3, [pc, #24]	@ (80089e8 <WriteRegister+0x38>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	1dba      	adds	r2, r7, #6
 80089d4:	7814      	ldrb	r4, [r2, #0]
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	1dfa      	adds	r2, r7, #7
 80089da:	7810      	ldrb	r0, [r2, #0]
 80089dc:	0022      	movs	r2, r4
 80089de:	4798      	blx	r3
  }
}
 80089e0:	46c0      	nop			@ (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b003      	add	sp, #12
 80089e6:	bd90      	pop	{r4, r7, pc}
 80089e8:	20002e00 	.word	0x20002e00

080089ec <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	000a      	movs	r2, r1
 80089f6:	1cfb      	adds	r3, r7, #3
 80089f8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80089fa:	230f      	movs	r3, #15
 80089fc:	18fb      	adds	r3, r7, r3
 80089fe:	22ff      	movs	r2, #255	@ 0xff
 8008a00:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008a02:	230e      	movs	r3, #14
 8008a04:	18fb      	adds	r3, r7, r3
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e037      	b.n	8008a7c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008a0c:	230e      	movs	r3, #14
 8008a0e:	18fb      	adds	r3, r7, r3
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	18d3      	adds	r3, r2, r3
 8008a16:	7819      	ldrb	r1, [r3, #0]
 8008a18:	220f      	movs	r2, #15
 8008a1a:	18bb      	adds	r3, r7, r2
 8008a1c:	18ba      	adds	r2, r7, r2
 8008a1e:	7812      	ldrb	r2, [r2, #0]
 8008a20:	404a      	eors	r2, r1
 8008a22:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008a24:	230d      	movs	r3, #13
 8008a26:	18fb      	adds	r3, r7, r3
 8008a28:	2200      	movs	r2, #0
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	e01b      	b.n	8008a66 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8008a2e:	210f      	movs	r1, #15
 8008a30:	187b      	adds	r3, r7, r1
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b25b      	sxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da09      	bge.n	8008a4e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008a3a:	187b      	adds	r3, r7, r1
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	b25b      	sxtb	r3, r3
 8008a42:	2231      	movs	r2, #49	@ 0x31
 8008a44:	4053      	eors	r3, r2
 8008a46:	b25a      	sxtb	r2, r3
 8008a48:	187b      	adds	r3, r7, r1
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	e005      	b.n	8008a5a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008a4e:	230f      	movs	r3, #15
 8008a50:	18fa      	adds	r2, r7, r3
 8008a52:	18fb      	adds	r3, r7, r3
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	18db      	adds	r3, r3, r3
 8008a58:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008a5a:	210d      	movs	r1, #13
 8008a5c:	187b      	adds	r3, r7, r1
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	187b      	adds	r3, r7, r1
 8008a62:	3201      	adds	r2, #1
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	230d      	movs	r3, #13
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b07      	cmp	r3, #7
 8008a6e:	d9de      	bls.n	8008a2e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008a70:	210e      	movs	r1, #14
 8008a72:	187b      	adds	r3, r7, r1
 8008a74:	781a      	ldrb	r2, [r3, #0]
 8008a76:	187b      	adds	r3, r7, r1
 8008a78:	3201      	adds	r2, #1
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	230e      	movs	r3, #14
 8008a7e:	18fa      	adds	r2, r7, r3
 8008a80:	1cfb      	adds	r3, r7, #3
 8008a82:	7812      	ldrb	r2, [r2, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d3c0      	bcc.n	8008a0c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008a8a:	230f      	movs	r3, #15
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	781b      	ldrb	r3, [r3, #0]
}
 8008a90:	0018      	movs	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	b004      	add	sp, #16
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008acc <HIDS_Init+0x34>)
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008aa8:	4b09      	ldr	r3, [pc, #36]	@ (8008ad0 <HIDS_Init+0x38>)
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008aae:	4b09      	ldr	r3, [pc, #36]	@ (8008ad4 <HIDS_Init+0x3c>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 f8d0 	bl	8008c58 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008ab8:	4b07      	ldr	r3, [pc, #28]	@ (8008ad8 <HIDS_Init+0x40>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	0018      	movs	r0, r3
 8008abe:	f000 f82b 	bl	8008b18 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008ac2:	46c0      	nop			@ (mov r8, r8)
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b002      	add	sp, #8
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	46c0      	nop			@ (mov r8, r8)
 8008acc:	20002dfc 	.word	0x20002dfc
 8008ad0:	20002e00 	.word	0x20002e00
 8008ad4:	20000136 	.word	0x20000136
 8008ad8:	20000135 	.word	0x20000135

08008adc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008ae0:	f7ff ff0e 	bl	8008900 <GetCurrentHalTicks>
 8008ae4:	0002      	movs	r2, r0
 8008ae6:	4b08      	ldr	r3, [pc, #32]	@ (8008b08 <HIDS_StartMeasurement+0x2c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	18d2      	adds	r2, r2, r3
 8008aec:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <HIDS_StartMeasurement+0x30>)
 8008aee:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008af0:	4b07      	ldr	r3, [pc, #28]	@ (8008b10 <HIDS_StartMeasurement+0x34>)
 8008af2:	2201      	movs	r2, #1
 8008af4:	0019      	movs	r1, r3
 8008af6:	2044      	movs	r0, #68	@ 0x44
 8008af8:	f7ff ff5a 	bl	80089b0 <WriteRegister>
  MeasurementDone = false;
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <HIDS_StartMeasurement+0x38>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	701a      	strb	r2, [r3, #0]
}
 8008b02:	46c0      	nop			@ (mov r8, r8)
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	2000013c 	.word	0x2000013c
 8008b0c:	20000138 	.word	0x20000138
 8008b10:	20000136 	.word	0x20000136
 8008b14:	20002e12 	.word	0x20002e12

08008b18 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	0002      	movs	r2, r0
 8008b20:	1dfb      	adds	r3, r7, #7
 8008b22:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008b24:	4b03      	ldr	r3, [pc, #12]	@ (8008b34 <HIDS_SetHeaterMode+0x1c>)
 8008b26:	1dfa      	adds	r2, r7, #7
 8008b28:	7812      	ldrb	r2, [r2, #0]
 8008b2a:	701a      	strb	r2, [r3, #0]
}
 8008b2c:	46c0      	nop			@ (mov r8, r8)
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b002      	add	sp, #8
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000135 	.word	0x20000135

08008b38 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	210c      	movs	r1, #12
 8008b46:	187b      	adds	r3, r7, r1
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	785a      	ldrb	r2, [r3, #1]
 8008b4e:	187b      	adds	r3, r7, r1
 8008b50:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8008b52:	240f      	movs	r4, #15
 8008b54:	193b      	adds	r3, r7, r4
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	7892      	ldrb	r2, [r2, #2]
 8008b5a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008b5c:	187b      	adds	r3, r7, r1
 8008b5e:	2102      	movs	r1, #2
 8008b60:	0018      	movs	r0, r3
 8008b62:	f7ff ff43 	bl	80089ec <CalculateCRC>
 8008b66:	0003      	movs	r3, r0
 8008b68:	001a      	movs	r2, r3
 8008b6a:	193b      	adds	r3, r7, r4
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d007      	beq.n	8008b82 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8008b72:	4a17      	ldr	r2, [pc, #92]	@ (8008bd0 <CheckCRC+0x98>)
 8008b74:	4b17      	ldr	r3, [pc, #92]	@ (8008bd4 <CheckCRC+0x9c>)
 8008b76:	0019      	movs	r1, r3
 8008b78:	2001      	movs	r0, #1
 8008b7a:	f7ff fe35 	bl	80087e8 <CreateLine>
		return false;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e021      	b.n	8008bc6 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	78da      	ldrb	r2, [r3, #3]
 8008b86:	2108      	movs	r1, #8
 8008b88:	187b      	adds	r3, r7, r1
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	791a      	ldrb	r2, [r3, #4]
 8008b90:	187b      	adds	r3, r7, r1
 8008b92:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008b94:	240e      	movs	r4, #14
 8008b96:	193b      	adds	r3, r7, r4
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7952      	ldrb	r2, [r2, #5]
 8008b9c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008b9e:	187b      	adds	r3, r7, r1
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7ff ff22 	bl	80089ec <CalculateCRC>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	001a      	movs	r2, r3
 8008bac:	193b      	adds	r3, r7, r4
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d007      	beq.n	8008bc4 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008bb4:	4a08      	ldr	r2, [pc, #32]	@ (8008bd8 <CheckCRC+0xa0>)
 8008bb6:	4b07      	ldr	r3, [pc, #28]	@ (8008bd4 <CheckCRC+0x9c>)
 8008bb8:	0019      	movs	r1, r3
 8008bba:	2001      	movs	r0, #1
 8008bbc:	f7ff fe14 	bl	80087e8 <CreateLine>
		return false;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e000      	b.n	8008bc6 <CheckCRC+0x8e>
	}
	return true;
 8008bc4:	2301      	movs	r3, #1
}
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	b005      	add	sp, #20
 8008bcc:	bd90      	pop	{r4, r7, pc}
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	080151c8 	.word	0x080151c8
 8008bd4:	080151f0 	.word	0x080151f0
 8008bd8:	080151f4 	.word	0x080151f4

08008bdc <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008be2:	1dbb      	adds	r3, r7, #6
 8008be4:	2289      	movs	r2, #137	@ 0x89
 8008be6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008be8:	1dbb      	adds	r3, r7, #6
 8008bea:	2201      	movs	r2, #1
 8008bec:	0019      	movs	r1, r3
 8008bee:	2044      	movs	r0, #68	@ 0x44
 8008bf0:	f7ff fede 	bl	80089b0 <WriteRegister>
	HAL_Delay(30);
 8008bf4:	201e      	movs	r0, #30
 8008bf6:	f000 f9f9 	bl	8008fec <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8008bfa:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <HIDS_DeviceConnected+0x70>)
 8008bfc:	2206      	movs	r2, #6
 8008bfe:	0019      	movs	r1, r3
 8008c00:	2044      	movs	r0, #68	@ 0x44
 8008c02:	f7ff feb7 	bl	8008974 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008c06:	1dfb      	adds	r3, r7, #7
 8008c08:	2200      	movs	r2, #0
 8008c0a:	701a      	strb	r2, [r3, #0]
 8008c0c:	e011      	b.n	8008c32 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008c0e:	1dfb      	adds	r3, r7, #7
 8008c10:	7818      	ldrb	r0, [r3, #0]
 8008c12:	1dfb      	adds	r3, r7, #7
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	4a0d      	ldr	r2, [pc, #52]	@ (8008c4c <HIDS_DeviceConnected+0x70>)
 8008c18:	5cd3      	ldrb	r3, [r2, r3]
 8008c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008c50 <HIDS_DeviceConnected+0x74>)
 8008c1c:	490d      	ldr	r1, [pc, #52]	@ (8008c54 <HIDS_DeviceConnected+0x78>)
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	0003      	movs	r3, r0
 8008c22:	2002      	movs	r0, #2
 8008c24:	f7ff fde0 	bl	80087e8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008c28:	1dfb      	adds	r3, r7, #7
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	1dfb      	adds	r3, r7, #7
 8008c2e:	3201      	adds	r2, #1
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	1dfb      	adds	r3, r7, #7
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d9e9      	bls.n	8008c0e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008c3a:	4b04      	ldr	r3, [pc, #16]	@ (8008c4c <HIDS_DeviceConnected+0x70>)
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f7ff ff7b 	bl	8008b38 <CheckCRC>
 8008c42:	0003      	movs	r3, r0
}
 8008c44:	0018      	movs	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b002      	add	sp, #8
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20002e04 	.word	0x20002e04
 8008c50:	08015220 	.word	0x08015220
 8008c54:	080151c4 	.word	0x080151c4

08008c58 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	0002      	movs	r2, r0
 8008c60:	1dfb      	adds	r3, r7, #7
 8008c62:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008c64:	4b03      	ldr	r3, [pc, #12]	@ (8008c74 <HIDS_SetMeasurementMode+0x1c>)
 8008c66:	1dfa      	adds	r2, r7, #7
 8008c68:	7812      	ldrb	r2, [r2, #0]
 8008c6a:	701a      	strb	r2, [r3, #0]
}
 8008c6c:	46c0      	nop			@ (mov r8, r8)
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	b002      	add	sp, #8
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20000136 	.word	0x20000136

08008c78 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008c7c:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <HIDS_MeasurementReady+0x18>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	0018      	movs	r0, r3
 8008c82:	f7ff fd5b 	bl	800873c <TimestampIsReached>
 8008c86:	0003      	movs	r3, r0
}
 8008c88:	0018      	movs	r0, r3
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	46c0      	nop			@ (mov r8, r8)
 8008c90:	20000138 	.word	0x20000138

08008c94 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08c      	sub	sp, #48	@ 0x30
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008c9e:	4b7a      	ldr	r3, [pc, #488]	@ (8008e88 <HIDS_GetMeasurementValues+0x1f4>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <HIDS_GetMeasurementValues+0x16>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e0ea      	b.n	8008e80 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008caa:	f7ff ffe5 	bl	8008c78 <HIDS_MeasurementReady>
 8008cae:	0003      	movs	r3, r0
 8008cb0:	001a      	movs	r2, r3
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4053      	eors	r3, r2
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HIDS_GetMeasurementValues+0x2c>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e0df      	b.n	8008e80 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008cc0:	4b72      	ldr	r3, [pc, #456]	@ (8008e8c <HIDS_GetMeasurementValues+0x1f8>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	4b72      	ldr	r3, [pc, #456]	@ (8008e90 <HIDS_GetMeasurementValues+0x1fc>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	0019      	movs	r1, r3
 8008cca:	0010      	movs	r0, r2
 8008ccc:	f7f7 fa60 	bl	8000190 <__udivsi3>
 8008cd0:	0003      	movs	r3, r0
 8008cd2:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008cd4:	4b6f      	ldr	r3, [pc, #444]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	1c58      	adds	r0, r3, #1
 8008cda:	4a6f      	ldr	r2, [pc, #444]	@ (8008e98 <HIDS_GetMeasurementValues+0x204>)
 8008cdc:	496f      	ldr	r1, [pc, #444]	@ (8008e9c <HIDS_GetMeasurementValues+0x208>)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	0003      	movs	r3, r0
 8008ce4:	2003      	movs	r0, #3
 8008ce6:	f7ff fd7f 	bl	80087e8 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008cea:	4b6d      	ldr	r3, [pc, #436]	@ (8008ea0 <HIDS_GetMeasurementValues+0x20c>)
 8008cec:	2206      	movs	r2, #6
 8008cee:	0019      	movs	r1, r3
 8008cf0:	2044      	movs	r0, #68	@ 0x44
 8008cf2:	f7ff fe3f 	bl	8008974 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8008ea0 <HIDS_GetMeasurementValues+0x20c>)
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff ff1d 	bl	8008b38 <CheckCRC>
 8008cfe:	0003      	movs	r3, r0
 8008d00:	001a      	movs	r2, r3
 8008d02:	2301      	movs	r3, #1
 8008d04:	4053      	eors	r3, r2
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d011      	beq.n	8008d30 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8008d0c:	2327      	movs	r3, #39	@ 0x27
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	2200      	movs	r2, #0
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e005      	b.n	8008d22 <HIDS_GetMeasurementValues+0x8e>
 8008d16:	2127      	movs	r1, #39	@ 0x27
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	781a      	ldrb	r2, [r3, #0]
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	3201      	adds	r2, #1
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	2327      	movs	r3, #39	@ 0x27
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b05      	cmp	r3, #5
 8008d2a:	d9f4      	bls.n	8008d16 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e0a7      	b.n	8008e80 <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8008d30:	4b5b      	ldr	r3, [pc, #364]	@ (8008ea0 <HIDS_GetMeasurementValues+0x20c>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	021b      	lsls	r3, r3, #8
 8008d36:	22af      	movs	r2, #175	@ 0xaf
 8008d38:	4353      	muls	r3, r2
 8008d3a:	4a59      	ldr	r2, [pc, #356]	@ (8008ea0 <HIDS_GetMeasurementValues+0x20c>)
 8008d3c:	7852      	ldrb	r2, [r2, #1]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	0018      	movs	r0, r3
 8008d42:	f7fa fb01 	bl	8003348 <__aeabi_i2d>
 8008d46:	2200      	movs	r2, #0
 8008d48:	4b56      	ldr	r3, [pc, #344]	@ (8008ea4 <HIDS_GetMeasurementValues+0x210>)
 8008d4a:	f7f8 fff7 	bl	8001d3c <__aeabi_ddiv>
 8008d4e:	0002      	movs	r2, r0
 8008d50:	000b      	movs	r3, r1
 8008d52:	0010      	movs	r0, r2
 8008d54:	0019      	movs	r1, r3
 8008d56:	f7fa fb91 	bl	800347c <__aeabi_d2f>
 8008d5a:	1c03      	adds	r3, r0, #0
 8008d5c:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8008d5e:	4952      	ldr	r1, [pc, #328]	@ (8008ea8 <HIDS_GetMeasurementValues+0x214>)
 8008d60:	6938      	ldr	r0, [r7, #16]
 8008d62:	f7f8 fa1f 	bl	80011a4 <__aeabi_fsub>
 8008d66:	1c03      	adds	r3, r0, #0
 8008d68:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8008d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8008ea0 <HIDS_GetMeasurementValues+0x20c>)
 8008d6c:	78db      	ldrb	r3, [r3, #3]
 8008d6e:	021b      	lsls	r3, r3, #8
 8008d70:	4a4b      	ldr	r2, [pc, #300]	@ (8008ea0 <HIDS_GetMeasurementValues+0x20c>)
 8008d72:	7912      	ldrb	r2, [r2, #4]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	0013      	movs	r3, r2
 8008d78:	015b      	lsls	r3, r3, #5
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	189b      	adds	r3, r3, r2
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7fa fae1 	bl	8003348 <__aeabi_i2d>
 8008d86:	2200      	movs	r2, #0
 8008d88:	4b46      	ldr	r3, [pc, #280]	@ (8008ea4 <HIDS_GetMeasurementValues+0x210>)
 8008d8a:	f7f8 ffd7 	bl	8001d3c <__aeabi_ddiv>
 8008d8e:	0002      	movs	r2, r0
 8008d90:	000b      	movs	r3, r1
 8008d92:	0010      	movs	r0, r2
 8008d94:	0019      	movs	r1, r3
 8008d96:	f7fa fb71 	bl	800347c <__aeabi_d2f>
 8008d9a:	1c03      	adds	r3, r0, #0
 8008d9c:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8008d9e:	4943      	ldr	r1, [pc, #268]	@ (8008eac <HIDS_GetMeasurementValues+0x218>)
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7f8 f9ff 	bl	80011a4 <__aeabi_fsub>
 8008da6:	1c03      	adds	r3, r0, #0
 8008da8:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8008daa:	4b3a      	ldr	r3, [pc, #232]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d910      	bls.n	8008dd6 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8008db4:	4b37      	ldr	r3, [pc, #220]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b3d      	ldr	r3, [pc, #244]	@ (8008eb0 <HIDS_GetMeasurementValues+0x21c>)
 8008dba:	0092      	lsls	r2, r2, #2
 8008dbc:	6939      	ldr	r1, [r7, #16]
 8008dbe:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8008dc0:	4b34      	ldr	r3, [pc, #208]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8008eb4 <HIDS_GetMeasurementValues+0x220>)
 8008dc6:	0092      	lsls	r2, r2, #2
 8008dc8:	68f9      	ldr	r1, [r7, #12]
 8008dca:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8008dcc:	4b31      	ldr	r3, [pc, #196]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	4b30      	ldr	r3, [pc, #192]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008dd4:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8008dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d84c      	bhi.n	8008e7a <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
 8008dec:	e016      	b.n	8008e1c <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 8008dee:	4b30      	ldr	r3, [pc, #192]	@ (8008eb0 <HIDS_GetMeasurementValues+0x21c>)
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	58d3      	ldr	r3, [r2, r3]
 8008df6:	1c19      	adds	r1, r3, #0
 8008df8:	6a38      	ldr	r0, [r7, #32]
 8008dfa:	f7f7 fd25 	bl	8000848 <__aeabi_fadd>
 8008dfe:	1c03      	adds	r3, r0, #0
 8008e00:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8008e02:	4b2c      	ldr	r3, [pc, #176]	@ (8008eb4 <HIDS_GetMeasurementValues+0x220>)
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	0092      	lsls	r2, r2, #2
 8008e08:	58d3      	ldr	r3, [r2, r3]
 8008e0a:	1c19      	adds	r1, r3, #0
 8008e0c:	69f8      	ldr	r0, [r7, #28]
 8008e0e:	f7f7 fd1b 	bl	8000848 <__aeabi_fadd>
 8008e12:	1c03      	adds	r3, r0, #0
 8008e14:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	61bb      	str	r3, [r7, #24]
 8008e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d3e3      	bcc.n	8008dee <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8008e26:	4b1b      	ldr	r3, [pc, #108]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7f8 fbe0 	bl	80015f0 <__aeabi_ui2f>
 8008e30:	1c03      	adds	r3, r0, #0
 8008e32:	1c19      	adds	r1, r3, #0
 8008e34:	6a38      	ldr	r0, [r7, #32]
 8008e36:	f7f7 fe91 	bl	8000b5c <__aeabi_fdiv>
 8008e3a:	1c03      	adds	r3, r0, #0
 8008e3c:	1c1a      	adds	r2, r3, #0
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8008e42:	4b14      	ldr	r3, [pc, #80]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	0018      	movs	r0, r3
 8008e48:	f7f8 fbd2 	bl	80015f0 <__aeabi_ui2f>
 8008e4c:	1c03      	adds	r3, r0, #0
 8008e4e:	1c19      	adds	r1, r3, #0
 8008e50:	69f8      	ldr	r0, [r7, #28]
 8008e52:	f7f7 fe83 	bl	8000b5c <__aeabi_fdiv>
 8008e56:	1c03      	adds	r3, r0, #0
 8008e58:	1c1a      	adds	r2, r3, #0
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	0011      	movs	r1, r2
 8008e64:	0018      	movs	r0, r3
 8008e66:	f7fe ffa3 	bl	8007db0 <SGP_GetHT>

    measurements = 0;
 8008e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e94 <HIDS_GetMeasurementValues+0x200>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8008e70:	4b05      	ldr	r3, [pc, #20]	@ (8008e88 <HIDS_GetMeasurementValues+0x1f4>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e002      	b.n	8008e80 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8008e7a:	f7ff fe2f 	bl	8008adc <HIDS_StartMeasurement>
	return false;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	0018      	movs	r0, r3
 8008e82:	46bd      	mov	sp, r7
 8008e84:	b00a      	add	sp, #40	@ 0x28
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20002e12 	.word	0x20002e12
 8008e8c:	20000140 	.word	0x20000140
 8008e90:	2000013c 	.word	0x2000013c
 8008e94:	20002e14 	.word	0x20002e14
 8008e98:	08015240 	.word	0x08015240
 8008e9c:	0801526c 	.word	0x0801526c
 8008ea0:	20002e0c 	.word	0x20002e0c
 8008ea4:	40efffe0 	.word	0x40efffe0
 8008ea8:	42340000 	.word	0x42340000
 8008eac:	40c00000 	.word	0x40c00000
 8008eb0:	20002e18 	.word	0x20002e18
 8008eb4:	20003218 	.word	0x20003218

08008eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008eb8:	480d      	ldr	r0, [pc, #52]	@ (8008ef0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008eba:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008ebc:	f7ff f91a 	bl	80080f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ec0:	480c      	ldr	r0, [pc, #48]	@ (8008ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8008ec2:	490d      	ldr	r1, [pc, #52]	@ (8008ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8008efc <LoopForever+0xe>)
  movs r3, #0
 8008ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ec8:	e002      	b.n	8008ed0 <LoopCopyDataInit>

08008eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ece:	3304      	adds	r3, #4

08008ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ed4:	d3f9      	bcc.n	8008eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8008f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8008f04 <LoopForever+0x16>)
  movs r3, #0
 8008eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008edc:	e001      	b.n	8008ee2 <LoopFillZerobss>

08008ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ee0:	3204      	adds	r2, #4

08008ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ee4:	d3fb      	bcc.n	8008ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008ee6:	f008 ffc3 	bl	8011e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008eea:	f7fc fca1 	bl	8005830 <main>

08008eee <LoopForever>:

LoopForever:
    b LoopForever
 8008eee:	e7fe      	b.n	8008eee <LoopForever>
   ldr   r0, =_estack
 8008ef0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8008ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ef8:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8008efc:	08027620 	.word	0x08027620
  ldr r2, =_sbss
 8008f00:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8008f04:	20003768 	.word	0x20003768

08008f08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f08:	e7fe      	b.n	8008f08 <ADC1_COMP_IRQHandler>
	...

08008f0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008f12:	1dfb      	adds	r3, r7, #7
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8008f18:	4b0b      	ldr	r3, [pc, #44]	@ (8008f48 <HAL_Init+0x3c>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f48 <HAL_Init+0x3c>)
 8008f1e:	2140      	movs	r1, #64	@ 0x40
 8008f20:	430a      	orrs	r2, r1
 8008f22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f24:	2003      	movs	r0, #3
 8008f26:	f000 f811 	bl	8008f4c <HAL_InitTick>
 8008f2a:	1e03      	subs	r3, r0, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8008f2e:	1dfb      	adds	r3, r7, #7
 8008f30:	2201      	movs	r2, #1
 8008f32:	701a      	strb	r2, [r3, #0]
 8008f34:	e001      	b.n	8008f3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008f36:	f7fe ffbf 	bl	8007eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008f3a:	1dfb      	adds	r3, r7, #7
 8008f3c:	781b      	ldrb	r3, [r3, #0]
}
 8008f3e:	0018      	movs	r0, r3
 8008f40:	46bd      	mov	sp, r7
 8008f42:	b002      	add	sp, #8
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	46c0      	nop			@ (mov r8, r8)
 8008f48:	40022000 	.word	0x40022000

08008f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008f54:	4b14      	ldr	r3, [pc, #80]	@ (8008fa8 <HAL_InitTick+0x5c>)
 8008f56:	681c      	ldr	r4, [r3, #0]
 8008f58:	4b14      	ldr	r3, [pc, #80]	@ (8008fac <HAL_InitTick+0x60>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	23fa      	movs	r3, #250	@ 0xfa
 8008f60:	0098      	lsls	r0, r3, #2
 8008f62:	f7f7 f915 	bl	8000190 <__udivsi3>
 8008f66:	0003      	movs	r3, r0
 8008f68:	0019      	movs	r1, r3
 8008f6a:	0020      	movs	r0, r4
 8008f6c:	f7f7 f910 	bl	8000190 <__udivsi3>
 8008f70:	0003      	movs	r3, r0
 8008f72:	0018      	movs	r0, r3
 8008f74:	f000 fcad 	bl	80098d2 <HAL_SYSTICK_Config>
 8008f78:	1e03      	subs	r3, r0, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e00f      	b.n	8008fa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d80b      	bhi.n	8008f9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	2301      	movs	r3, #1
 8008f8a:	425b      	negs	r3, r3
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	0018      	movs	r0, r3
 8008f90:	f000 fc7a 	bl	8009888 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <HAL_InitTick+0x64>)
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e000      	b.n	8008fa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
}
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	b003      	add	sp, #12
 8008fa6:	bd90      	pop	{r4, r7, pc}
 8008fa8:	20000130 	.word	0x20000130
 8008fac:	20000148 	.word	0x20000148
 8008fb0:	20000144 	.word	0x20000144

08008fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008fb8:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <HAL_IncTick+0x1c>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	001a      	movs	r2, r3
 8008fbe:	4b05      	ldr	r3, [pc, #20]	@ (8008fd4 <HAL_IncTick+0x20>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	18d2      	adds	r2, r2, r3
 8008fc4:	4b03      	ldr	r3, [pc, #12]	@ (8008fd4 <HAL_IncTick+0x20>)
 8008fc6:	601a      	str	r2, [r3, #0]
}
 8008fc8:	46c0      	nop			@ (mov r8, r8)
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	46c0      	nop			@ (mov r8, r8)
 8008fd0:	20000148 	.word	0x20000148
 8008fd4:	20003618 	.word	0x20003618

08008fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  return uwTick;
 8008fdc:	4b02      	ldr	r3, [pc, #8]	@ (8008fe8 <HAL_GetTick+0x10>)
 8008fde:	681b      	ldr	r3, [r3, #0]
}
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	46c0      	nop			@ (mov r8, r8)
 8008fe8:	20003618 	.word	0x20003618

08008fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ff4:	f7ff fff0 	bl	8008fd8 <HAL_GetTick>
 8008ff8:	0003      	movs	r3, r0
 8008ffa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3301      	adds	r3, #1
 8009004:	d005      	beq.n	8009012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009006:	4b0a      	ldr	r3, [pc, #40]	@ (8009030 <HAL_Delay+0x44>)
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	001a      	movs	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	189b      	adds	r3, r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009012:	46c0      	nop			@ (mov r8, r8)
 8009014:	f7ff ffe0 	bl	8008fd8 <HAL_GetTick>
 8009018:	0002      	movs	r2, r0
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	429a      	cmp	r2, r3
 8009022:	d8f7      	bhi.n	8009014 <HAL_Delay+0x28>
  {
  }
}
 8009024:	46c0      	nop			@ (mov r8, r8)
 8009026:	46c0      	nop			@ (mov r8, r8)
 8009028:	46bd      	mov	sp, r7
 800902a:	b004      	add	sp, #16
 800902c:	bd80      	pop	{r7, pc}
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	20000148 	.word	0x20000148

08009034 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e159      	b.n	80092fa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10a      	bne.n	8009064 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2250      	movs	r2, #80	@ 0x50
 8009058:	2100      	movs	r1, #0
 800905a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	0018      	movs	r0, r3
 8009060:	f7fb feea 	bl	8004e38 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009068:	2210      	movs	r2, #16
 800906a:	4013      	ands	r3, r2
 800906c:	2b10      	cmp	r3, #16
 800906e:	d005      	beq.n	800907c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2204      	movs	r2, #4
 8009078:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800907a:	d00b      	beq.n	8009094 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009080:	2210      	movs	r2, #16
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2250      	movs	r2, #80	@ 0x50
 800908c:	2100      	movs	r1, #0
 800908e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e132      	b.n	80092fa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009098:	4a9a      	ldr	r2, [pc, #616]	@ (8009304 <HAL_ADC_Init+0x2d0>)
 800909a:	4013      	ands	r3, r2
 800909c:	2202      	movs	r2, #2
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2203      	movs	r2, #3
 80090ac:	4013      	ands	r3, r2
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d108      	bne.n	80090c4 <HAL_ADC_Init+0x90>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2201      	movs	r2, #1
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_ADC_Init+0x90>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <HAL_ADC_Init+0x92>
 80090c4:	2300      	movs	r3, #0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d149      	bne.n	800915e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	23c0      	movs	r3, #192	@ 0xc0
 80090d0:	061b      	lsls	r3, r3, #24
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d00b      	beq.n	80090ee <HAL_ADC_Init+0xba>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	2380      	movs	r3, #128	@ 0x80
 80090dc:	05db      	lsls	r3, r3, #23
 80090de:	429a      	cmp	r2, r3
 80090e0:	d005      	beq.n	80090ee <HAL_ADC_Init+0xba>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	2380      	movs	r3, #128	@ 0x80
 80090e8:	061b      	lsls	r3, r3, #24
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d111      	bne.n	8009112 <HAL_ADC_Init+0xde>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	0092      	lsls	r2, r2, #2
 80090fa:	0892      	lsrs	r2, r2, #2
 80090fc:	611a      	str	r2, [r3, #16]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6919      	ldr	r1, [r3, #16]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	611a      	str	r2, [r3, #16]
 8009110:	e014      	b.n	800913c <HAL_ADC_Init+0x108>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	0092      	lsls	r2, r2, #2
 800911e:	0892      	lsrs	r2, r2, #2
 8009120:	611a      	str	r2, [r3, #16]
 8009122:	4b79      	ldr	r3, [pc, #484]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	4b78      	ldr	r3, [pc, #480]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 8009128:	4978      	ldr	r1, [pc, #480]	@ (800930c <HAL_ADC_Init+0x2d8>)
 800912a:	400a      	ands	r2, r1
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	4b76      	ldr	r3, [pc, #472]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b74      	ldr	r3, [pc, #464]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 8009138:	430a      	orrs	r2, r1
 800913a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2118      	movs	r1, #24
 8009148:	438a      	bics	r2, r1
 800914a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68d9      	ldr	r1, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800915e:	4b6a      	ldr	r3, [pc, #424]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	4b69      	ldr	r3, [pc, #420]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 8009164:	496a      	ldr	r1, [pc, #424]	@ (8009310 <HAL_ADC_Init+0x2dc>)
 8009166:	400a      	ands	r2, r1
 8009168:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800916a:	4b67      	ldr	r3, [pc, #412]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 800916c:	6819      	ldr	r1, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009172:	065a      	lsls	r2, r3, #25
 8009174:	4b64      	ldr	r3, [pc, #400]	@ (8009308 <HAL_ADC_Init+0x2d4>)
 8009176:	430a      	orrs	r2, r1
 8009178:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	2380      	movs	r3, #128	@ 0x80
 8009182:	055b      	lsls	r3, r3, #21
 8009184:	4013      	ands	r3, r2
 8009186:	d108      	bne.n	800919a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2180      	movs	r1, #128	@ 0x80
 8009194:	0549      	lsls	r1, r1, #21
 8009196:	430a      	orrs	r2, r1
 8009198:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	495b      	ldr	r1, [pc, #364]	@ (8009314 <HAL_ADC_Init+0x2e0>)
 80091a6:	400a      	ands	r2, r1
 80091a8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68d9      	ldr	r1, [r3, #12]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d101      	bne.n	80091c0 <HAL_ADC_Init+0x18c>
 80091bc:	2304      	movs	r3, #4
 80091be:	e000      	b.n	80091c2 <HAL_ADC_Init+0x18e>
 80091c0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80091c2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2020      	movs	r0, #32
 80091c8:	5c1b      	ldrb	r3, [r3, r0]
 80091ca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80091cc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	202c      	movs	r0, #44	@ 0x2c
 80091d2:	5c1b      	ldrb	r3, [r3, r0]
 80091d4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80091d6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80091dc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80091e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80091ec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091fa:	23c2      	movs	r3, #194	@ 0xc2
 80091fc:	33ff      	adds	r3, #255	@ 0xff
 80091fe:	429a      	cmp	r2, r3
 8009200:	d00b      	beq.n	800921a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68d9      	ldr	r1, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2221      	movs	r2, #33	@ 0x21
 800921e:	5c9b      	ldrb	r3, [r3, r2]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d11a      	bne.n	800925a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	5c9b      	ldrb	r3, [r3, r2]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d109      	bne.n	8009242 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2180      	movs	r1, #128	@ 0x80
 800923a:	0249      	lsls	r1, r1, #9
 800923c:	430a      	orrs	r2, r1
 800923e:	60da      	str	r2, [r3, #12]
 8009240:	e00b      	b.n	800925a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009246:	2220      	movs	r2, #32
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009252:	2201      	movs	r2, #1
 8009254:	431a      	orrs	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d11f      	bne.n	80092a2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691a      	ldr	r2, [r3, #16]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	492a      	ldr	r1, [pc, #168]	@ (8009318 <HAL_ADC_Init+0x2e4>)
 800926e:	400a      	ands	r2, r1
 8009270:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6919      	ldr	r1, [r3, #16]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009280:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8009286:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2101      	movs	r1, #1
 800929c:	430a      	orrs	r2, r1
 800929e:	611a      	str	r2, [r3, #16]
 80092a0:	e00e      	b.n	80092c0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	2201      	movs	r2, #1
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d107      	bne.n	80092c0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2101      	movs	r1, #1
 80092bc:	438a      	bics	r2, r1
 80092be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	695a      	ldr	r2, [r3, #20]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2107      	movs	r1, #7
 80092cc:	438a      	bics	r2, r1
 80092ce:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6959      	ldr	r1, [r3, #20]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ec:	2203      	movs	r2, #3
 80092ee:	4393      	bics	r3, r2
 80092f0:	2201      	movs	r2, #1
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	0018      	movs	r0, r3
 80092fc:	46bd      	mov	sp, r7
 80092fe:	b002      	add	sp, #8
 8009300:	bd80      	pop	{r7, pc}
 8009302:	46c0      	nop			@ (mov r8, r8)
 8009304:	fffffefd 	.word	0xfffffefd
 8009308:	40012708 	.word	0x40012708
 800930c:	ffc3ffff 	.word	0xffc3ffff
 8009310:	fdffffff 	.word	0xfdffffff
 8009314:	fffe0219 	.word	0xfffe0219
 8009318:	fffffc03 	.word	0xfffffc03

0800931c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800931c:	b590      	push	{r4, r7, lr}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009324:	230f      	movs	r3, #15
 8009326:	18fb      	adds	r3, r7, r3
 8009328:	2200      	movs	r2, #0
 800932a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	2204      	movs	r2, #4
 8009334:	4013      	ands	r3, r2
 8009336:	d138      	bne.n	80093aa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2250      	movs	r2, #80	@ 0x50
 800933c:	5c9b      	ldrb	r3, [r3, r2]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_ADC_Start+0x2a>
 8009342:	2302      	movs	r3, #2
 8009344:	e038      	b.n	80093b8 <HAL_ADC_Start+0x9c>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2250      	movs	r2, #80	@ 0x50
 800934a:	2101      	movs	r1, #1
 800934c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d007      	beq.n	8009366 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8009356:	230f      	movs	r3, #15
 8009358:	18fc      	adds	r4, r7, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	0018      	movs	r0, r3
 800935e:	f000 f95f 	bl	8009620 <ADC_Enable>
 8009362:	0003      	movs	r3, r0
 8009364:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009366:	230f      	movs	r3, #15
 8009368:	18fb      	adds	r3, r7, r3
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d120      	bne.n	80093b2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009374:	4a12      	ldr	r2, [pc, #72]	@ (80093c0 <HAL_ADC_Start+0xa4>)
 8009376:	4013      	ands	r3, r2
 8009378:	2280      	movs	r2, #128	@ 0x80
 800937a:	0052      	lsls	r2, r2, #1
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2250      	movs	r2, #80	@ 0x50
 800938c:	2100      	movs	r1, #0
 800938e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	221c      	movs	r2, #28
 8009396:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689a      	ldr	r2, [r3, #8]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2104      	movs	r1, #4
 80093a4:	430a      	orrs	r2, r1
 80093a6:	609a      	str	r2, [r3, #8]
 80093a8:	e003      	b.n	80093b2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80093aa:	230f      	movs	r3, #15
 80093ac:	18fb      	adds	r3, r7, r3
 80093ae:	2202      	movs	r2, #2
 80093b0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80093b2:	230f      	movs	r3, #15
 80093b4:	18fb      	adds	r3, r7, r3
 80093b6:	781b      	ldrb	r3, [r3, #0]
}
 80093b8:	0018      	movs	r0, r3
 80093ba:	46bd      	mov	sp, r7
 80093bc:	b005      	add	sp, #20
 80093be:	bd90      	pop	{r4, r7, pc}
 80093c0:	fffff0fe 	.word	0xfffff0fe

080093c4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	2b08      	cmp	r3, #8
 80093dc:	d102      	bne.n	80093e4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80093de:	2308      	movs	r3, #8
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	e014      	b.n	800940e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	4013      	ands	r3, r2
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d10b      	bne.n	800940a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f6:	2220      	movs	r2, #32
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2250      	movs	r2, #80	@ 0x50
 8009402:	2100      	movs	r1, #0
 8009404:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e072      	b.n	80094f0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800940a:	230c      	movs	r3, #12
 800940c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800940e:	f7ff fde3 	bl	8008fd8 <HAL_GetTick>
 8009412:	0003      	movs	r3, r0
 8009414:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009416:	e01f      	b.n	8009458 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	d01c      	beq.n	8009458 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <HAL_ADC_PollForConversion+0x70>
 8009424:	f7ff fdd8 	bl	8008fd8 <HAL_GetTick>
 8009428:	0002      	movs	r2, r0
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	429a      	cmp	r2, r3
 8009432:	d211      	bcs.n	8009458 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4013      	ands	r3, r2
 800943e:	d10b      	bne.n	8009458 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009444:	2204      	movs	r2, #4
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2250      	movs	r2, #80	@ 0x50
 8009450:	2100      	movs	r1, #0
 8009452:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e04b      	b.n	80094f0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	4013      	ands	r3, r2
 8009462:	d0d9      	beq.n	8009418 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009468:	2280      	movs	r2, #128	@ 0x80
 800946a:	0092      	lsls	r2, r2, #2
 800946c:	431a      	orrs	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	23c0      	movs	r3, #192	@ 0xc0
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	4013      	ands	r3, r2
 800947e:	d12e      	bne.n	80094de <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2220      	movs	r2, #32
 8009484:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8009486:	2b00      	cmp	r3, #0
 8009488:	d129      	bne.n	80094de <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2208      	movs	r2, #8
 8009492:	4013      	ands	r3, r2
 8009494:	2b08      	cmp	r3, #8
 8009496:	d122      	bne.n	80094de <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	2204      	movs	r2, #4
 80094a0:	4013      	ands	r3, r2
 80094a2:	d110      	bne.n	80094c6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	210c      	movs	r1, #12
 80094b0:	438a      	bics	r2, r1
 80094b2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b8:	4a0f      	ldr	r2, [pc, #60]	@ (80094f8 <HAL_ADC_PollForConversion+0x134>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	2201      	movs	r2, #1
 80094be:	431a      	orrs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80094c4:	e00b      	b.n	80094de <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ca:	2220      	movs	r2, #32
 80094cc:	431a      	orrs	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d6:	2201      	movs	r2, #1
 80094d8:	431a      	orrs	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d103      	bne.n	80094ee <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	220c      	movs	r2, #12
 80094ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	0018      	movs	r0, r3
 80094f2:	46bd      	mov	sp, r7
 80094f4:	b004      	add	sp, #16
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	fffffefe 	.word	0xfffffefe

080094fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800950a:	0018      	movs	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	b002      	add	sp, #8
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2250      	movs	r2, #80	@ 0x50
 8009522:	5c9b      	ldrb	r3, [r3, r2]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_ADC_ConfigChannel+0x18>
 8009528:	2302      	movs	r3, #2
 800952a:	e06c      	b.n	8009606 <HAL_ADC_ConfigChannel+0xf2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2250      	movs	r2, #80	@ 0x50
 8009530:	2101      	movs	r1, #1
 8009532:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	2204      	movs	r2, #4
 800953c:	4013      	ands	r3, r2
 800953e:	d00b      	beq.n	8009558 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009544:	2220      	movs	r2, #32
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2250      	movs	r2, #80	@ 0x50
 8009550:	2100      	movs	r1, #0
 8009552:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e056      	b.n	8009606 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	4a2c      	ldr	r2, [pc, #176]	@ (8009610 <HAL_ADC_ConfigChannel+0xfc>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d028      	beq.n	80095b4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	035b      	lsls	r3, r3, #13
 800956e:	0b5a      	lsrs	r2, r3, #13
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	2380      	movs	r3, #128	@ 0x80
 800957e:	02db      	lsls	r3, r3, #11
 8009580:	4013      	ands	r3, r2
 8009582:	d009      	beq.n	8009598 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8009584:	4b23      	ldr	r3, [pc, #140]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	4b22      	ldr	r3, [pc, #136]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 800958a:	2180      	movs	r1, #128	@ 0x80
 800958c:	0409      	lsls	r1, r1, #16
 800958e:	430a      	orrs	r2, r1
 8009590:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8009592:	200a      	movs	r0, #10
 8009594:	f000 f8ac 	bl	80096f0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	2380      	movs	r3, #128	@ 0x80
 800959e:	029b      	lsls	r3, r3, #10
 80095a0:	4013      	ands	r3, r2
 80095a2:	d02b      	beq.n	80095fc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80095a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 80095aa:	2180      	movs	r1, #128	@ 0x80
 80095ac:	03c9      	lsls	r1, r1, #15
 80095ae:	430a      	orrs	r2, r1
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e023      	b.n	80095fc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	035b      	lsls	r3, r3, #13
 80095c0:	0b5b      	lsrs	r3, r3, #13
 80095c2:	43d9      	mvns	r1, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	400a      	ands	r2, r1
 80095ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	2380      	movs	r3, #128	@ 0x80
 80095d2:	02db      	lsls	r3, r3, #11
 80095d4:	4013      	ands	r3, r2
 80095d6:	d005      	beq.n	80095e4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80095d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 80095de:	490e      	ldr	r1, [pc, #56]	@ (8009618 <HAL_ADC_ConfigChannel+0x104>)
 80095e0:	400a      	ands	r2, r1
 80095e2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	2380      	movs	r3, #128	@ 0x80
 80095ea:	029b      	lsls	r3, r3, #10
 80095ec:	4013      	ands	r3, r2
 80095ee:	d005      	beq.n	80095fc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80095f0:	4b08      	ldr	r3, [pc, #32]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4b07      	ldr	r3, [pc, #28]	@ (8009614 <HAL_ADC_ConfigChannel+0x100>)
 80095f6:	4909      	ldr	r1, [pc, #36]	@ (800961c <HAL_ADC_ConfigChannel+0x108>)
 80095f8:	400a      	ands	r2, r1
 80095fa:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2250      	movs	r2, #80	@ 0x50
 8009600:	2100      	movs	r1, #0
 8009602:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	0018      	movs	r0, r3
 8009608:	46bd      	mov	sp, r7
 800960a:	b002      	add	sp, #8
 800960c:	bd80      	pop	{r7, pc}
 800960e:	46c0      	nop			@ (mov r8, r8)
 8009610:	00001001 	.word	0x00001001
 8009614:	40012708 	.word	0x40012708
 8009618:	ff7fffff 	.word	0xff7fffff
 800961c:	ffbfffff 	.word	0xffbfffff

08009620 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	2203      	movs	r2, #3
 8009634:	4013      	ands	r3, r2
 8009636:	2b01      	cmp	r3, #1
 8009638:	d108      	bne.n	800964c <ADC_Enable+0x2c>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2201      	movs	r2, #1
 8009642:	4013      	ands	r3, r2
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <ADC_Enable+0x2c>
 8009648:	2301      	movs	r3, #1
 800964a:	e000      	b.n	800964e <ADC_Enable+0x2e>
 800964c:	2300      	movs	r3, #0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d146      	bne.n	80096e0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	4a24      	ldr	r2, [pc, #144]	@ (80096ec <ADC_Enable+0xcc>)
 800965a:	4013      	ands	r3, r2
 800965c:	d00d      	beq.n	800967a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009662:	2210      	movs	r2, #16
 8009664:	431a      	orrs	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966e:	2201      	movs	r2, #1
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e033      	b.n	80096e2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2101      	movs	r1, #1
 8009686:	430a      	orrs	r2, r1
 8009688:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800968a:	2001      	movs	r0, #1
 800968c:	f000 f830 	bl	80096f0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8009690:	f7ff fca2 	bl	8008fd8 <HAL_GetTick>
 8009694:	0003      	movs	r3, r0
 8009696:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009698:	e01b      	b.n	80096d2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800969a:	f7ff fc9d 	bl	8008fd8 <HAL_GetTick>
 800969e:	0002      	movs	r2, r0
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	2b0a      	cmp	r3, #10
 80096a6:	d914      	bls.n	80096d2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2201      	movs	r2, #1
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d00d      	beq.n	80096d2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ba:	2210      	movs	r2, #16
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c6:	2201      	movs	r2, #1
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e007      	b.n	80096e2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2201      	movs	r2, #1
 80096da:	4013      	ands	r3, r2
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d1dc      	bne.n	800969a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	0018      	movs	r0, r3
 80096e4:	46bd      	mov	sp, r7
 80096e6:	b004      	add	sp, #16
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	46c0      	nop			@ (mov r8, r8)
 80096ec:	80000017 	.word	0x80000017

080096f0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80096f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009728 <ADC_DelayMicroSecond+0x38>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	490b      	ldr	r1, [pc, #44]	@ (800972c <ADC_DelayMicroSecond+0x3c>)
 80096fe:	0018      	movs	r0, r3
 8009700:	f7f6 fd46 	bl	8000190 <__udivsi3>
 8009704:	0003      	movs	r3, r0
 8009706:	001a      	movs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4353      	muls	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800970e:	e002      	b.n	8009716 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3b01      	subs	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1f9      	bne.n	8009710 <ADC_DelayMicroSecond+0x20>
  }
}
 800971c:	46c0      	nop			@ (mov r8, r8)
 800971e:	46c0      	nop			@ (mov r8, r8)
 8009720:	46bd      	mov	sp, r7
 8009722:	b004      	add	sp, #16
 8009724:	bd80      	pop	{r7, pc}
 8009726:	46c0      	nop			@ (mov r8, r8)
 8009728:	20000130 	.word	0x20000130
 800972c:	000f4240 	.word	0x000f4240

08009730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	0002      	movs	r2, r0
 8009738:	1dfb      	adds	r3, r7, #7
 800973a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800973c:	1dfb      	adds	r3, r7, #7
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b7f      	cmp	r3, #127	@ 0x7f
 8009742:	d809      	bhi.n	8009758 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009744:	1dfb      	adds	r3, r7, #7
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	001a      	movs	r2, r3
 800974a:	231f      	movs	r3, #31
 800974c:	401a      	ands	r2, r3
 800974e:	4b04      	ldr	r3, [pc, #16]	@ (8009760 <__NVIC_EnableIRQ+0x30>)
 8009750:	2101      	movs	r1, #1
 8009752:	4091      	lsls	r1, r2
 8009754:	000a      	movs	r2, r1
 8009756:	601a      	str	r2, [r3, #0]
  }
}
 8009758:	46c0      	nop			@ (mov r8, r8)
 800975a:	46bd      	mov	sp, r7
 800975c:	b002      	add	sp, #8
 800975e:	bd80      	pop	{r7, pc}
 8009760:	e000e100 	.word	0xe000e100

08009764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009764:	b590      	push	{r4, r7, lr}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	0002      	movs	r2, r0
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	1dfb      	adds	r3, r7, #7
 8009770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009772:	1dfb      	adds	r3, r7, #7
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b7f      	cmp	r3, #127	@ 0x7f
 8009778:	d828      	bhi.n	80097cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800977a:	4a2f      	ldr	r2, [pc, #188]	@ (8009838 <__NVIC_SetPriority+0xd4>)
 800977c:	1dfb      	adds	r3, r7, #7
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	b25b      	sxtb	r3, r3
 8009782:	089b      	lsrs	r3, r3, #2
 8009784:	33c0      	adds	r3, #192	@ 0xc0
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	589b      	ldr	r3, [r3, r2]
 800978a:	1dfa      	adds	r2, r7, #7
 800978c:	7812      	ldrb	r2, [r2, #0]
 800978e:	0011      	movs	r1, r2
 8009790:	2203      	movs	r2, #3
 8009792:	400a      	ands	r2, r1
 8009794:	00d2      	lsls	r2, r2, #3
 8009796:	21ff      	movs	r1, #255	@ 0xff
 8009798:	4091      	lsls	r1, r2
 800979a:	000a      	movs	r2, r1
 800979c:	43d2      	mvns	r2, r2
 800979e:	401a      	ands	r2, r3
 80097a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	019b      	lsls	r3, r3, #6
 80097a6:	22ff      	movs	r2, #255	@ 0xff
 80097a8:	401a      	ands	r2, r3
 80097aa:	1dfb      	adds	r3, r7, #7
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	0018      	movs	r0, r3
 80097b0:	2303      	movs	r3, #3
 80097b2:	4003      	ands	r3, r0
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097b8:	481f      	ldr	r0, [pc, #124]	@ (8009838 <__NVIC_SetPriority+0xd4>)
 80097ba:	1dfb      	adds	r3, r7, #7
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	089b      	lsrs	r3, r3, #2
 80097c2:	430a      	orrs	r2, r1
 80097c4:	33c0      	adds	r3, #192	@ 0xc0
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80097ca:	e031      	b.n	8009830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097cc:	4a1b      	ldr	r2, [pc, #108]	@ (800983c <__NVIC_SetPriority+0xd8>)
 80097ce:	1dfb      	adds	r3, r7, #7
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	0019      	movs	r1, r3
 80097d4:	230f      	movs	r3, #15
 80097d6:	400b      	ands	r3, r1
 80097d8:	3b08      	subs	r3, #8
 80097da:	089b      	lsrs	r3, r3, #2
 80097dc:	3306      	adds	r3, #6
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	18d3      	adds	r3, r2, r3
 80097e2:	3304      	adds	r3, #4
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	1dfa      	adds	r2, r7, #7
 80097e8:	7812      	ldrb	r2, [r2, #0]
 80097ea:	0011      	movs	r1, r2
 80097ec:	2203      	movs	r2, #3
 80097ee:	400a      	ands	r2, r1
 80097f0:	00d2      	lsls	r2, r2, #3
 80097f2:	21ff      	movs	r1, #255	@ 0xff
 80097f4:	4091      	lsls	r1, r2
 80097f6:	000a      	movs	r2, r1
 80097f8:	43d2      	mvns	r2, r2
 80097fa:	401a      	ands	r2, r3
 80097fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	019b      	lsls	r3, r3, #6
 8009802:	22ff      	movs	r2, #255	@ 0xff
 8009804:	401a      	ands	r2, r3
 8009806:	1dfb      	adds	r3, r7, #7
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	0018      	movs	r0, r3
 800980c:	2303      	movs	r3, #3
 800980e:	4003      	ands	r3, r0
 8009810:	00db      	lsls	r3, r3, #3
 8009812:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009814:	4809      	ldr	r0, [pc, #36]	@ (800983c <__NVIC_SetPriority+0xd8>)
 8009816:	1dfb      	adds	r3, r7, #7
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	001c      	movs	r4, r3
 800981c:	230f      	movs	r3, #15
 800981e:	4023      	ands	r3, r4
 8009820:	3b08      	subs	r3, #8
 8009822:	089b      	lsrs	r3, r3, #2
 8009824:	430a      	orrs	r2, r1
 8009826:	3306      	adds	r3, #6
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	18c3      	adds	r3, r0, r3
 800982c:	3304      	adds	r3, #4
 800982e:	601a      	str	r2, [r3, #0]
}
 8009830:	46c0      	nop			@ (mov r8, r8)
 8009832:	46bd      	mov	sp, r7
 8009834:	b003      	add	sp, #12
 8009836:	bd90      	pop	{r4, r7, pc}
 8009838:	e000e100 	.word	0xe000e100
 800983c:	e000ed00 	.word	0xe000ed00

08009840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	1e5a      	subs	r2, r3, #1
 800984c:	2380      	movs	r3, #128	@ 0x80
 800984e:	045b      	lsls	r3, r3, #17
 8009850:	429a      	cmp	r2, r3
 8009852:	d301      	bcc.n	8009858 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009854:	2301      	movs	r3, #1
 8009856:	e010      	b.n	800987a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009858:	4b0a      	ldr	r3, [pc, #40]	@ (8009884 <SysTick_Config+0x44>)
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	3a01      	subs	r2, #1
 800985e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009860:	2301      	movs	r3, #1
 8009862:	425b      	negs	r3, r3
 8009864:	2103      	movs	r1, #3
 8009866:	0018      	movs	r0, r3
 8009868:	f7ff ff7c 	bl	8009764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800986c:	4b05      	ldr	r3, [pc, #20]	@ (8009884 <SysTick_Config+0x44>)
 800986e:	2200      	movs	r2, #0
 8009870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009872:	4b04      	ldr	r3, [pc, #16]	@ (8009884 <SysTick_Config+0x44>)
 8009874:	2207      	movs	r2, #7
 8009876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009878:	2300      	movs	r3, #0
}
 800987a:	0018      	movs	r0, r3
 800987c:	46bd      	mov	sp, r7
 800987e:	b002      	add	sp, #8
 8009880:	bd80      	pop	{r7, pc}
 8009882:	46c0      	nop			@ (mov r8, r8)
 8009884:	e000e010 	.word	0xe000e010

08009888 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	210f      	movs	r1, #15
 8009894:	187b      	adds	r3, r7, r1
 8009896:	1c02      	adds	r2, r0, #0
 8009898:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	187b      	adds	r3, r7, r1
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	b25b      	sxtb	r3, r3
 80098a2:	0011      	movs	r1, r2
 80098a4:	0018      	movs	r0, r3
 80098a6:	f7ff ff5d 	bl	8009764 <__NVIC_SetPriority>
}
 80098aa:	46c0      	nop			@ (mov r8, r8)
 80098ac:	46bd      	mov	sp, r7
 80098ae:	b004      	add	sp, #16
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	0002      	movs	r2, r0
 80098ba:	1dfb      	adds	r3, r7, #7
 80098bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098be:	1dfb      	adds	r3, r7, #7
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b25b      	sxtb	r3, r3
 80098c4:	0018      	movs	r0, r3
 80098c6:	f7ff ff33 	bl	8009730 <__NVIC_EnableIRQ>
}
 80098ca:	46c0      	nop			@ (mov r8, r8)
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b002      	add	sp, #8
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	0018      	movs	r0, r3
 80098de:	f7ff ffaf 	bl	8009840 <SysTick_Config>
 80098e2:	0003      	movs	r3, r0
}
 80098e4:	0018      	movs	r0, r3
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b002      	add	sp, #8
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e061      	b.n	80099c2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a32      	ldr	r2, [pc, #200]	@ (80099cc <HAL_DMA_Init+0xe0>)
 8009904:	4694      	mov	ip, r2
 8009906:	4463      	add	r3, ip
 8009908:	2114      	movs	r1, #20
 800990a:	0018      	movs	r0, r3
 800990c:	f7f6 fc40 	bl	8000190 <__udivsi3>
 8009910:	0003      	movs	r3, r0
 8009912:	009a      	lsls	r2, r3, #2
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a2d      	ldr	r2, [pc, #180]	@ (80099d0 <HAL_DMA_Init+0xe4>)
 800991c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2225      	movs	r2, #37	@ 0x25
 8009922:	2102      	movs	r1, #2
 8009924:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4a28      	ldr	r2, [pc, #160]	@ (80099d4 <HAL_DMA_Init+0xe8>)
 8009932:	4013      	ands	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800993e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800994a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a1b      	ldr	r3, [r3, #32]
 800995c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	2380      	movs	r3, #128	@ 0x80
 8009972:	01db      	lsls	r3, r3, #7
 8009974:	429a      	cmp	r2, r3
 8009976:	d018      	beq.n	80099aa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009978:	4b17      	ldr	r3, [pc, #92]	@ (80099d8 <HAL_DMA_Init+0xec>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009980:	211c      	movs	r1, #28
 8009982:	400b      	ands	r3, r1
 8009984:	210f      	movs	r1, #15
 8009986:	4099      	lsls	r1, r3
 8009988:	000b      	movs	r3, r1
 800998a:	43d9      	mvns	r1, r3
 800998c:	4b12      	ldr	r3, [pc, #72]	@ (80099d8 <HAL_DMA_Init+0xec>)
 800998e:	400a      	ands	r2, r1
 8009990:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009992:	4b11      	ldr	r3, [pc, #68]	@ (80099d8 <HAL_DMA_Init+0xec>)
 8009994:	6819      	ldr	r1, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800999e:	201c      	movs	r0, #28
 80099a0:	4003      	ands	r3, r0
 80099a2:	409a      	lsls	r2, r3
 80099a4:	4b0c      	ldr	r3, [pc, #48]	@ (80099d8 <HAL_DMA_Init+0xec>)
 80099a6:	430a      	orrs	r2, r1
 80099a8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2225      	movs	r2, #37	@ 0x25
 80099b4:	2101      	movs	r1, #1
 80099b6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2224      	movs	r2, #36	@ 0x24
 80099bc:	2100      	movs	r1, #0
 80099be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	0018      	movs	r0, r3
 80099c4:	46bd      	mov	sp, r7
 80099c6:	b004      	add	sp, #16
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	46c0      	nop			@ (mov r8, r8)
 80099cc:	bffdfff8 	.word	0xbffdfff8
 80099d0:	40020000 	.word	0x40020000
 80099d4:	ffff800f 	.word	0xffff800f
 80099d8:	400200a8 	.word	0x400200a8

080099dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e04a      	b.n	8009a84 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2101      	movs	r1, #1
 80099fa:	438a      	bics	r2, r1
 80099fc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a22      	ldr	r2, [pc, #136]	@ (8009a8c <HAL_DMA_DeInit+0xb0>)
 8009a04:	4694      	mov	ip, r2
 8009a06:	4463      	add	r3, ip
 8009a08:	2114      	movs	r1, #20
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	f7f6 fbc0 	bl	8000190 <__udivsi3>
 8009a10:	0003      	movs	r3, r0
 8009a12:	009a      	lsls	r2, r3, #2
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009a90 <HAL_DMA_DeInit+0xb4>)
 8009a1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2a:	221c      	movs	r2, #28
 8009a2c:	401a      	ands	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a32:	2101      	movs	r1, #1
 8009a34:	4091      	lsls	r1, r2
 8009a36:	000a      	movs	r2, r1
 8009a38:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a3a:	4b16      	ldr	r3, [pc, #88]	@ (8009a94 <HAL_DMA_DeInit+0xb8>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a42:	211c      	movs	r1, #28
 8009a44:	400b      	ands	r3, r1
 8009a46:	210f      	movs	r1, #15
 8009a48:	4099      	lsls	r1, r3
 8009a4a:	000b      	movs	r3, r1
 8009a4c:	43d9      	mvns	r1, r3
 8009a4e:	4b11      	ldr	r3, [pc, #68]	@ (8009a94 <HAL_DMA_DeInit+0xb8>)
 8009a50:	400a      	ands	r2, r1
 8009a52:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2225      	movs	r2, #37	@ 0x25
 8009a76:	2100      	movs	r1, #0
 8009a78:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2224      	movs	r2, #36	@ 0x24
 8009a7e:	2100      	movs	r1, #0
 8009a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b002      	add	sp, #8
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	bffdfff8 	.word	0xbffdfff8
 8009a90:	40020000 	.word	0x40020000
 8009a94:	400200a8 	.word	0x400200a8

08009a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa6:	2317      	movs	r3, #23
 8009aa8:	18fb      	adds	r3, r7, r3
 8009aaa:	2200      	movs	r2, #0
 8009aac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2224      	movs	r2, #36	@ 0x24
 8009ab2:	5c9b      	ldrb	r3, [r3, r2]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d101      	bne.n	8009abc <HAL_DMA_Start_IT+0x24>
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e04f      	b.n	8009b5c <HAL_DMA_Start_IT+0xc4>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2224      	movs	r2, #36	@ 0x24
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2225      	movs	r2, #37	@ 0x25
 8009ac8:	5c9b      	ldrb	r3, [r3, r2]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d13a      	bne.n	8009b46 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2225      	movs	r2, #37	@ 0x25
 8009ad4:	2102      	movs	r1, #2
 8009ad6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2101      	movs	r1, #1
 8009aea:	438a      	bics	r2, r1
 8009aec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	68b9      	ldr	r1, [r7, #8]
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f976 	bl	8009de6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d008      	beq.n	8009b14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	210e      	movs	r1, #14
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	e00f      	b.n	8009b34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2104      	movs	r1, #4
 8009b20:	438a      	bics	r2, r1
 8009b22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	210a      	movs	r1, #10
 8009b30:	430a      	orrs	r2, r1
 8009b32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2101      	movs	r1, #1
 8009b40:	430a      	orrs	r2, r1
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	e007      	b.n	8009b56 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2224      	movs	r2, #36	@ 0x24
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009b4e:	2317      	movs	r3, #23
 8009b50:	18fb      	adds	r3, r7, r3
 8009b52:	2202      	movs	r2, #2
 8009b54:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009b56:	2317      	movs	r3, #23
 8009b58:	18fb      	adds	r3, r7, r3
 8009b5a:	781b      	ldrb	r3, [r3, #0]
}
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b006      	add	sp, #24
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b6c:	230f      	movs	r3, #15
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2225      	movs	r2, #37	@ 0x25
 8009b78:	5c9b      	ldrb	r3, [r3, r2]
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d008      	beq.n	8009b92 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2204      	movs	r2, #4
 8009b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2224      	movs	r2, #36	@ 0x24
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e024      	b.n	8009bdc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	210e      	movs	r1, #14
 8009b9e:	438a      	bics	r2, r1
 8009ba0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2101      	movs	r1, #1
 8009bae:	438a      	bics	r2, r1
 8009bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bb6:	221c      	movs	r2, #28
 8009bb8:	401a      	ands	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	4091      	lsls	r1, r2
 8009bc2:	000a      	movs	r2, r1
 8009bc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2225      	movs	r2, #37	@ 0x25
 8009bca:	2101      	movs	r1, #1
 8009bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2224      	movs	r2, #36	@ 0x24
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	5499      	strb	r1, [r3, r2]

    return status;
 8009bd6:	230f      	movs	r3, #15
 8009bd8:	18fb      	adds	r3, r7, r3
 8009bda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009bdc:	0018      	movs	r0, r3
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b004      	add	sp, #16
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bec:	210f      	movs	r1, #15
 8009bee:	187b      	adds	r3, r7, r1
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2225      	movs	r2, #37	@ 0x25
 8009bf8:	5c9b      	ldrb	r3, [r3, r2]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d006      	beq.n	8009c0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2204      	movs	r2, #4
 8009c04:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009c06:	187b      	adds	r3, r7, r1
 8009c08:	2201      	movs	r2, #1
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	e02a      	b.n	8009c64 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	210e      	movs	r1, #14
 8009c1a:	438a      	bics	r2, r1
 8009c1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2101      	movs	r1, #1
 8009c2a:	438a      	bics	r2, r1
 8009c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c32:	221c      	movs	r2, #28
 8009c34:	401a      	ands	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	4091      	lsls	r1, r2
 8009c3e:	000a      	movs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2225      	movs	r2, #37	@ 0x25
 8009c46:	2101      	movs	r1, #1
 8009c48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2224      	movs	r2, #36	@ 0x24
 8009c4e:	2100      	movs	r1, #0
 8009c50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	0010      	movs	r0, r2
 8009c62:	4798      	blx	r3
    }
  }
  return status;
 8009c64:	230f      	movs	r3, #15
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	781b      	ldrb	r3, [r3, #0]
}
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	b004      	add	sp, #16
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c8e:	221c      	movs	r2, #28
 8009c90:	4013      	ands	r3, r2
 8009c92:	2204      	movs	r2, #4
 8009c94:	409a      	lsls	r2, r3
 8009c96:	0013      	movs	r3, r2
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	d026      	beq.n	8009cec <HAL_DMA_IRQHandler+0x7a>
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	d022      	beq.n	8009cec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2220      	movs	r2, #32
 8009cae:	4013      	ands	r3, r2
 8009cb0:	d107      	bne.n	8009cc2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2104      	movs	r1, #4
 8009cbe:	438a      	bics	r2, r1
 8009cc0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc6:	221c      	movs	r2, #28
 8009cc8:	401a      	ands	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cce:	2104      	movs	r1, #4
 8009cd0:	4091      	lsls	r1, r2
 8009cd2:	000a      	movs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d100      	bne.n	8009ce0 <HAL_DMA_IRQHandler+0x6e>
 8009cde:	e071      	b.n	8009dc4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	0010      	movs	r0, r2
 8009ce8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8009cea:	e06b      	b.n	8009dc4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cf0:	221c      	movs	r2, #28
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	409a      	lsls	r2, r3
 8009cf8:	0013      	movs	r3, r2
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	d02d      	beq.n	8009d5c <HAL_DMA_IRQHandler+0xea>
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2202      	movs	r2, #2
 8009d04:	4013      	ands	r3, r2
 8009d06:	d029      	beq.n	8009d5c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	4013      	ands	r3, r2
 8009d12:	d10b      	bne.n	8009d2c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	210a      	movs	r1, #10
 8009d20:	438a      	bics	r2, r1
 8009d22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2225      	movs	r2, #37	@ 0x25
 8009d28:	2101      	movs	r1, #1
 8009d2a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d30:	221c      	movs	r2, #28
 8009d32:	401a      	ands	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d38:	2102      	movs	r1, #2
 8009d3a:	4091      	lsls	r1, r2
 8009d3c:	000a      	movs	r2, r1
 8009d3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2224      	movs	r2, #36	@ 0x24
 8009d44:	2100      	movs	r1, #0
 8009d46:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d039      	beq.n	8009dc4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	0010      	movs	r0, r2
 8009d58:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009d5a:	e033      	b.n	8009dc4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d60:	221c      	movs	r2, #28
 8009d62:	4013      	ands	r3, r2
 8009d64:	2208      	movs	r2, #8
 8009d66:	409a      	lsls	r2, r3
 8009d68:	0013      	movs	r3, r2
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	d02a      	beq.n	8009dc6 <HAL_DMA_IRQHandler+0x154>
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2208      	movs	r2, #8
 8009d74:	4013      	ands	r3, r2
 8009d76:	d026      	beq.n	8009dc6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	210e      	movs	r1, #14
 8009d84:	438a      	bics	r2, r1
 8009d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d8c:	221c      	movs	r2, #28
 8009d8e:	401a      	ands	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d94:	2101      	movs	r1, #1
 8009d96:	4091      	lsls	r1, r2
 8009d98:	000a      	movs	r2, r1
 8009d9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2225      	movs	r2, #37	@ 0x25
 8009da6:	2101      	movs	r1, #1
 8009da8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2224      	movs	r2, #36	@ 0x24
 8009dae:	2100      	movs	r1, #0
 8009db0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	0010      	movs	r0, r2
 8009dc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009dc4:	46c0      	nop			@ (mov r8, r8)
 8009dc6:	46c0      	nop			@ (mov r8, r8)
}
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	b004      	add	sp, #16
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2225      	movs	r2, #37	@ 0x25
 8009dda:	5c9b      	ldrb	r3, [r3, r2]
 8009ddc:	b2db      	uxtb	r3, r3
}
 8009dde:	0018      	movs	r0, r3
 8009de0:	46bd      	mov	sp, r7
 8009de2:	b002      	add	sp, #8
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	607a      	str	r2, [r7, #4]
 8009df2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df8:	221c      	movs	r2, #28
 8009dfa:	401a      	ands	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e00:	2101      	movs	r1, #1
 8009e02:	4091      	lsls	r1, r2
 8009e04:	000a      	movs	r2, r1
 8009e06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2b10      	cmp	r3, #16
 8009e16:	d108      	bne.n	8009e2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e28:	e007      	b.n	8009e3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	60da      	str	r2, [r3, #12]
}
 8009e3a:	46c0      	nop			@ (mov r8, r8)
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	b004      	add	sp, #16
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009e5a:	e155      	b.n	800a108 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2101      	movs	r1, #1
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	4091      	lsls	r1, r2
 8009e66:	000a      	movs	r2, r1
 8009e68:	4013      	ands	r3, r2
 8009e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d100      	bne.n	8009e74 <HAL_GPIO_Init+0x30>
 8009e72:	e146      	b.n	800a102 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	2203      	movs	r2, #3
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d005      	beq.n	8009e8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	2203      	movs	r2, #3
 8009e86:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d130      	bne.n	8009eee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	2203      	movs	r2, #3
 8009e98:	409a      	lsls	r2, r3
 8009e9a:	0013      	movs	r3, r2
 8009e9c:	43da      	mvns	r2, r3
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	409a      	lsls	r2, r3
 8009eae:	0013      	movs	r3, r2
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	409a      	lsls	r2, r3
 8009ec8:	0013      	movs	r3, r2
 8009eca:	43da      	mvns	r2, r3
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	091b      	lsrs	r3, r3, #4
 8009ed8:	2201      	movs	r2, #1
 8009eda:	401a      	ands	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	409a      	lsls	r2, r3
 8009ee0:	0013      	movs	r3, r2
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2203      	movs	r2, #3
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d017      	beq.n	8009f2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	2203      	movs	r2, #3
 8009f06:	409a      	lsls	r2, r3
 8009f08:	0013      	movs	r3, r2
 8009f0a:	43da      	mvns	r2, r3
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	409a      	lsls	r2, r3
 8009f1c:	0013      	movs	r3, r2
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2203      	movs	r2, #3
 8009f30:	4013      	ands	r3, r2
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d123      	bne.n	8009f7e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	08da      	lsrs	r2, r3, #3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3208      	adds	r2, #8
 8009f3e:	0092      	lsls	r2, r2, #2
 8009f40:	58d3      	ldr	r3, [r2, r3]
 8009f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2207      	movs	r2, #7
 8009f48:	4013      	ands	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	220f      	movs	r2, #15
 8009f4e:	409a      	lsls	r2, r3
 8009f50:	0013      	movs	r3, r2
 8009f52:	43da      	mvns	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	4013      	ands	r3, r2
 8009f58:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	691a      	ldr	r2, [r3, #16]
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2107      	movs	r1, #7
 8009f62:	400b      	ands	r3, r1
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	409a      	lsls	r2, r3
 8009f68:	0013      	movs	r3, r2
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	08da      	lsrs	r2, r3, #3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3208      	adds	r2, #8
 8009f78:	0092      	lsls	r2, r2, #2
 8009f7a:	6939      	ldr	r1, [r7, #16]
 8009f7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	2203      	movs	r2, #3
 8009f8a:	409a      	lsls	r2, r3
 8009f8c:	0013      	movs	r3, r2
 8009f8e:	43da      	mvns	r2, r3
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	4013      	ands	r3, r2
 8009f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	401a      	ands	r2, r3
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	409a      	lsls	r2, r3
 8009fa4:	0013      	movs	r3, r2
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	23c0      	movs	r3, #192	@ 0xc0
 8009fb8:	029b      	lsls	r3, r3, #10
 8009fba:	4013      	ands	r3, r2
 8009fbc:	d100      	bne.n	8009fc0 <HAL_GPIO_Init+0x17c>
 8009fbe:	e0a0      	b.n	800a102 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fc0:	4b57      	ldr	r3, [pc, #348]	@ (800a120 <HAL_GPIO_Init+0x2dc>)
 8009fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fc4:	4b56      	ldr	r3, [pc, #344]	@ (800a120 <HAL_GPIO_Init+0x2dc>)
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8009fcc:	4a55      	ldr	r2, [pc, #340]	@ (800a124 <HAL_GPIO_Init+0x2e0>)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	089b      	lsrs	r3, r3, #2
 8009fd2:	3302      	adds	r3, #2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	589b      	ldr	r3, [r3, r2]
 8009fd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2203      	movs	r2, #3
 8009fde:	4013      	ands	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	220f      	movs	r2, #15
 8009fe4:	409a      	lsls	r2, r3
 8009fe6:	0013      	movs	r3, r2
 8009fe8:	43da      	mvns	r2, r3
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4013      	ands	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	23a0      	movs	r3, #160	@ 0xa0
 8009ff4:	05db      	lsls	r3, r3, #23
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d01f      	beq.n	800a03a <HAL_GPIO_Init+0x1f6>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a4a      	ldr	r2, [pc, #296]	@ (800a128 <HAL_GPIO_Init+0x2e4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d019      	beq.n	800a036 <HAL_GPIO_Init+0x1f2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a49      	ldr	r2, [pc, #292]	@ (800a12c <HAL_GPIO_Init+0x2e8>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d013      	beq.n	800a032 <HAL_GPIO_Init+0x1ee>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a48      	ldr	r2, [pc, #288]	@ (800a130 <HAL_GPIO_Init+0x2ec>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d00d      	beq.n	800a02e <HAL_GPIO_Init+0x1ea>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a47      	ldr	r2, [pc, #284]	@ (800a134 <HAL_GPIO_Init+0x2f0>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d007      	beq.n	800a02a <HAL_GPIO_Init+0x1e6>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a46      	ldr	r2, [pc, #280]	@ (800a138 <HAL_GPIO_Init+0x2f4>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d101      	bne.n	800a026 <HAL_GPIO_Init+0x1e2>
 800a022:	2305      	movs	r3, #5
 800a024:	e00a      	b.n	800a03c <HAL_GPIO_Init+0x1f8>
 800a026:	2306      	movs	r3, #6
 800a028:	e008      	b.n	800a03c <HAL_GPIO_Init+0x1f8>
 800a02a:	2304      	movs	r3, #4
 800a02c:	e006      	b.n	800a03c <HAL_GPIO_Init+0x1f8>
 800a02e:	2303      	movs	r3, #3
 800a030:	e004      	b.n	800a03c <HAL_GPIO_Init+0x1f8>
 800a032:	2302      	movs	r3, #2
 800a034:	e002      	b.n	800a03c <HAL_GPIO_Init+0x1f8>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <HAL_GPIO_Init+0x1f8>
 800a03a:	2300      	movs	r3, #0
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	2103      	movs	r1, #3
 800a040:	400a      	ands	r2, r1
 800a042:	0092      	lsls	r2, r2, #2
 800a044:	4093      	lsls	r3, r2
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a04c:	4935      	ldr	r1, [pc, #212]	@ (800a124 <HAL_GPIO_Init+0x2e0>)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	089b      	lsrs	r3, r3, #2
 800a052:	3302      	adds	r3, #2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a05a:	4b38      	ldr	r3, [pc, #224]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	43da      	mvns	r2, r3
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	4013      	ands	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	2380      	movs	r3, #128	@ 0x80
 800a070:	035b      	lsls	r3, r3, #13
 800a072:	4013      	ands	r3, r2
 800a074:	d003      	beq.n	800a07e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a07e:	4b2f      	ldr	r3, [pc, #188]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a084:	4b2d      	ldr	r3, [pc, #180]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	43da      	mvns	r2, r3
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	4013      	ands	r3, r2
 800a092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	2380      	movs	r3, #128	@ 0x80
 800a09a:	039b      	lsls	r3, r3, #14
 800a09c:	4013      	ands	r3, r2
 800a09e:	d003      	beq.n	800a0a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a0a8:	4b24      	ldr	r3, [pc, #144]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800a0ae:	4b23      	ldr	r3, [pc, #140]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	43da      	mvns	r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	2380      	movs	r3, #128	@ 0x80
 800a0c4:	029b      	lsls	r3, r3, #10
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	d003      	beq.n	800a0d2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a0d2:	4b1a      	ldr	r3, [pc, #104]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a0d8:	4b18      	ldr	r3, [pc, #96]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	43da      	mvns	r2, r3
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	2380      	movs	r3, #128	@ 0x80
 800a0ee:	025b      	lsls	r3, r3, #9
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	d003      	beq.n	800a0fc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a0fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a13c <HAL_GPIO_Init+0x2f8>)
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	3301      	adds	r3, #1
 800a106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	40da      	lsrs	r2, r3
 800a110:	1e13      	subs	r3, r2, #0
 800a112:	d000      	beq.n	800a116 <HAL_GPIO_Init+0x2d2>
 800a114:	e6a2      	b.n	8009e5c <HAL_GPIO_Init+0x18>
  }
}
 800a116:	46c0      	nop			@ (mov r8, r8)
 800a118:	46c0      	nop			@ (mov r8, r8)
 800a11a:	46bd      	mov	sp, r7
 800a11c:	b006      	add	sp, #24
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	40021000 	.word	0x40021000
 800a124:	40010000 	.word	0x40010000
 800a128:	50000400 	.word	0x50000400
 800a12c:	50000800 	.word	0x50000800
 800a130:	50000c00 	.word	0x50000c00
 800a134:	50001000 	.word	0x50001000
 800a138:	50001c00 	.word	0x50001c00
 800a13c:	40010400 	.word	0x40010400

0800a140 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a14e:	2300      	movs	r3, #0
 800a150:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a156:	e0bc      	b.n	800a2d2 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a158:	2201      	movs	r2, #1
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	409a      	lsls	r2, r3
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	4013      	ands	r3, r2
 800a162:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d100      	bne.n	800a16c <HAL_GPIO_DeInit+0x2c>
 800a16a:	e0af      	b.n	800a2cc <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a16c:	4a5e      	ldr	r2, [pc, #376]	@ (800a2e8 <HAL_GPIO_DeInit+0x1a8>)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	089b      	lsrs	r3, r3, #2
 800a172:	3302      	adds	r3, #2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	589b      	ldr	r3, [r3, r2]
 800a178:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2203      	movs	r2, #3
 800a17e:	4013      	ands	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	220f      	movs	r2, #15
 800a184:	409a      	lsls	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	23a0      	movs	r3, #160	@ 0xa0
 800a190:	05db      	lsls	r3, r3, #23
 800a192:	429a      	cmp	r2, r3
 800a194:	d01f      	beq.n	800a1d6 <HAL_GPIO_DeInit+0x96>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a54      	ldr	r2, [pc, #336]	@ (800a2ec <HAL_GPIO_DeInit+0x1ac>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d019      	beq.n	800a1d2 <HAL_GPIO_DeInit+0x92>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a53      	ldr	r2, [pc, #332]	@ (800a2f0 <HAL_GPIO_DeInit+0x1b0>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d013      	beq.n	800a1ce <HAL_GPIO_DeInit+0x8e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a52      	ldr	r2, [pc, #328]	@ (800a2f4 <HAL_GPIO_DeInit+0x1b4>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00d      	beq.n	800a1ca <HAL_GPIO_DeInit+0x8a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a51      	ldr	r2, [pc, #324]	@ (800a2f8 <HAL_GPIO_DeInit+0x1b8>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d007      	beq.n	800a1c6 <HAL_GPIO_DeInit+0x86>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a50      	ldr	r2, [pc, #320]	@ (800a2fc <HAL_GPIO_DeInit+0x1bc>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d101      	bne.n	800a1c2 <HAL_GPIO_DeInit+0x82>
 800a1be:	2305      	movs	r3, #5
 800a1c0:	e00a      	b.n	800a1d8 <HAL_GPIO_DeInit+0x98>
 800a1c2:	2306      	movs	r3, #6
 800a1c4:	e008      	b.n	800a1d8 <HAL_GPIO_DeInit+0x98>
 800a1c6:	2304      	movs	r3, #4
 800a1c8:	e006      	b.n	800a1d8 <HAL_GPIO_DeInit+0x98>
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e004      	b.n	800a1d8 <HAL_GPIO_DeInit+0x98>
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e002      	b.n	800a1d8 <HAL_GPIO_DeInit+0x98>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <HAL_GPIO_DeInit+0x98>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	2103      	movs	r1, #3
 800a1dc:	400a      	ands	r2, r1
 800a1de:	0092      	lsls	r2, r2, #2
 800a1e0:	4093      	lsls	r3, r2
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d132      	bne.n	800a24e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a1e8:	4b45      	ldr	r3, [pc, #276]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	43d9      	mvns	r1, r3
 800a1f0:	4b43      	ldr	r3, [pc, #268]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a1f2:	400a      	ands	r2, r1
 800a1f4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a1f6:	4b42      	ldr	r3, [pc, #264]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	43d9      	mvns	r1, r3
 800a1fe:	4b40      	ldr	r3, [pc, #256]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a200:	400a      	ands	r2, r1
 800a202:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a204:	4b3e      	ldr	r3, [pc, #248]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a206:	68da      	ldr	r2, [r3, #12]
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	43d9      	mvns	r1, r3
 800a20c:	4b3c      	ldr	r3, [pc, #240]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a20e:	400a      	ands	r2, r1
 800a210:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a212:	4b3b      	ldr	r3, [pc, #236]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	43d9      	mvns	r1, r3
 800a21a:	4b39      	ldr	r3, [pc, #228]	@ (800a300 <HAL_GPIO_DeInit+0x1c0>)
 800a21c:	400a      	ands	r2, r1
 800a21e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2203      	movs	r2, #3
 800a224:	4013      	ands	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	220f      	movs	r2, #15
 800a22a:	409a      	lsls	r2, r3
 800a22c:	0013      	movs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a230:	4a2d      	ldr	r2, [pc, #180]	@ (800a2e8 <HAL_GPIO_DeInit+0x1a8>)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	089b      	lsrs	r3, r3, #2
 800a236:	3302      	adds	r3, #2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	589a      	ldr	r2, [r3, r2]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	43d9      	mvns	r1, r3
 800a240:	4829      	ldr	r0, [pc, #164]	@ (800a2e8 <HAL_GPIO_DeInit+0x1a8>)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	089b      	lsrs	r3, r3, #2
 800a246:	400a      	ands	r2, r1
 800a248:	3302      	adds	r3, #2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	2103      	movs	r1, #3
 800a258:	4099      	lsls	r1, r3
 800a25a:	000b      	movs	r3, r1
 800a25c:	431a      	orrs	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	08da      	lsrs	r2, r3, #3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3208      	adds	r2, #8
 800a26a:	0092      	lsls	r2, r2, #2
 800a26c:	58d3      	ldr	r3, [r2, r3]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	2107      	movs	r1, #7
 800a272:	400a      	ands	r2, r1
 800a274:	0092      	lsls	r2, r2, #2
 800a276:	210f      	movs	r1, #15
 800a278:	4091      	lsls	r1, r2
 800a27a:	000a      	movs	r2, r1
 800a27c:	43d1      	mvns	r1, r2
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	08d2      	lsrs	r2, r2, #3
 800a282:	4019      	ands	r1, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3208      	adds	r2, #8
 800a288:	0092      	lsls	r2, r2, #2
 800a28a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	0052      	lsls	r2, r2, #1
 800a294:	2103      	movs	r1, #3
 800a296:	4091      	lsls	r1, r2
 800a298:	000a      	movs	r2, r1
 800a29a:	43d2      	mvns	r2, r2
 800a29c:	401a      	ands	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	4091      	lsls	r1, r2
 800a2ac:	000a      	movs	r2, r1
 800a2ae:	43d2      	mvns	r2, r2
 800a2b0:	401a      	ands	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	0052      	lsls	r2, r2, #1
 800a2be:	2103      	movs	r1, #3
 800a2c0:	4091      	lsls	r1, r2
 800a2c2:	000a      	movs	r2, r1
 800a2c4:	43d2      	mvns	r2, r2
 800a2c6:	401a      	ands	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	40da      	lsrs	r2, r3
 800a2d8:	1e13      	subs	r3, r2, #0
 800a2da:	d000      	beq.n	800a2de <HAL_GPIO_DeInit+0x19e>
 800a2dc:	e73c      	b.n	800a158 <HAL_GPIO_DeInit+0x18>
  }
}
 800a2de:	46c0      	nop			@ (mov r8, r8)
 800a2e0:	46c0      	nop			@ (mov r8, r8)
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	b006      	add	sp, #24
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40010000 	.word	0x40010000
 800a2ec:	50000400 	.word	0x50000400
 800a2f0:	50000800 	.word	0x50000800
 800a2f4:	50000c00 	.word	0x50000c00
 800a2f8:	50001000 	.word	0x50001000
 800a2fc:	50001c00 	.word	0x50001c00
 800a300:	40010400 	.word	0x40010400

0800a304 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	0008      	movs	r0, r1
 800a30e:	0011      	movs	r1, r2
 800a310:	1cbb      	adds	r3, r7, #2
 800a312:	1c02      	adds	r2, r0, #0
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	1c7b      	adds	r3, r7, #1
 800a318:	1c0a      	adds	r2, r1, #0
 800a31a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a31c:	1c7b      	adds	r3, r7, #1
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a324:	1cbb      	adds	r3, r7, #2
 800a326:	881a      	ldrh	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a32c:	e003      	b.n	800a336 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a32e:	1cbb      	adds	r3, r7, #2
 800a330:	881a      	ldrh	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a336:	46c0      	nop			@ (mov r8, r8)
 800a338:	46bd      	mov	sp, r7
 800a33a:	b002      	add	sp, #8
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e082      	b.n	800a458 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2241      	movs	r2, #65	@ 0x41
 800a356:	5c9b      	ldrb	r3, [r3, r2]
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d107      	bne.n	800a36e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2240      	movs	r2, #64	@ 0x40
 800a362:	2100      	movs	r1, #0
 800a364:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	0018      	movs	r0, r3
 800a36a:	f7fb f823 	bl	80053b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2241      	movs	r2, #65	@ 0x41
 800a372:	2124      	movs	r1, #36	@ 0x24
 800a374:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2101      	movs	r1, #1
 800a382:	438a      	bics	r2, r1
 800a384:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4934      	ldr	r1, [pc, #208]	@ (800a460 <HAL_I2C_Init+0x120>)
 800a390:	400a      	ands	r2, r1
 800a392:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4931      	ldr	r1, [pc, #196]	@ (800a464 <HAL_I2C_Init+0x124>)
 800a3a0:	400a      	ands	r2, r1
 800a3a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d108      	bne.n	800a3be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2180      	movs	r1, #128	@ 0x80
 800a3b6:	0209      	lsls	r1, r1, #8
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	609a      	str	r2, [r3, #8]
 800a3bc:	e007      	b.n	800a3ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2184      	movs	r1, #132	@ 0x84
 800a3c8:	0209      	lsls	r1, r1, #8
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d104      	bne.n	800a3e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2280      	movs	r2, #128	@ 0x80
 800a3dc:	0112      	lsls	r2, r2, #4
 800a3de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	491f      	ldr	r1, [pc, #124]	@ (800a468 <HAL_I2C_Init+0x128>)
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	491a      	ldr	r1, [pc, #104]	@ (800a464 <HAL_I2C_Init+0x124>)
 800a3fc:	400a      	ands	r2, r1
 800a3fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	431a      	orrs	r2, r3
 800a40a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	69d9      	ldr	r1, [r3, #28]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a1a      	ldr	r2, [r3, #32]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2101      	movs	r1, #1
 800a436:	430a      	orrs	r2, r1
 800a438:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2241      	movs	r2, #65	@ 0x41
 800a444:	2120      	movs	r1, #32
 800a446:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2242      	movs	r2, #66	@ 0x42
 800a452:	2100      	movs	r1, #0
 800a454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	0018      	movs	r0, r3
 800a45a:	46bd      	mov	sp, r7
 800a45c:	b002      	add	sp, #8
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	f0ffffff 	.word	0xf0ffffff
 800a464:	ffff7fff 	.word	0xffff7fff
 800a468:	02008000 	.word	0x02008000

0800a46c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a46c:	b5b0      	push	{r4, r5, r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af02      	add	r7, sp, #8
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	0008      	movs	r0, r1
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	0019      	movs	r1, r3
 800a47a:	230a      	movs	r3, #10
 800a47c:	18fb      	adds	r3, r7, r3
 800a47e:	1c02      	adds	r2, r0, #0
 800a480:	801a      	strh	r2, [r3, #0]
 800a482:	2308      	movs	r3, #8
 800a484:	18fb      	adds	r3, r7, r3
 800a486:	1c0a      	adds	r2, r1, #0
 800a488:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2241      	movs	r2, #65	@ 0x41
 800a48e:	5c9b      	ldrb	r3, [r3, r2]
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b20      	cmp	r3, #32
 800a494:	d000      	beq.n	800a498 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800a496:	e0dd      	b.n	800a654 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	2380      	movs	r3, #128	@ 0x80
 800a4a0:	021b      	lsls	r3, r3, #8
 800a4a2:	401a      	ands	r2, r3
 800a4a4:	2380      	movs	r3, #128	@ 0x80
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d101      	bne.n	800a4b0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	e0d2      	b.n	800a656 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2240      	movs	r2, #64	@ 0x40
 800a4b4:	5c9b      	ldrb	r3, [r3, r2]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <HAL_I2C_Master_Transmit_DMA+0x52>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	e0cb      	b.n	800a656 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2240      	movs	r2, #64	@ 0x40
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2241      	movs	r2, #65	@ 0x41
 800a4ca:	2121      	movs	r1, #33	@ 0x21
 800a4cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2242      	movs	r2, #66	@ 0x42
 800a4d2:	2110      	movs	r1, #16
 800a4d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	18ba      	adds	r2, r7, r2
 800a4e8:	8812      	ldrh	r2, [r2, #0]
 800a4ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a5c      	ldr	r2, [pc, #368]	@ (800a660 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a4f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4a5b      	ldr	r2, [pc, #364]	@ (800a664 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a4f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2bff      	cmp	r3, #255	@ 0xff
 800a500:	d906      	bls.n	800a510 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	22ff      	movs	r2, #255	@ 0xff
 800a506:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a508:	2380      	movs	r3, #128	@ 0x80
 800a50a:	045b      	lsls	r3, r3, #17
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	e007      	b.n	800a520 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a514:	b29a      	uxth	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a51a:	2380      	movs	r3, #128	@ 0x80
 800a51c:	049b      	lsls	r3, r3, #18
 800a51e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a524:	2b00      	cmp	r3, #0
 800a526:	d100      	bne.n	800a52a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a528:	e078      	b.n	800a61c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d023      	beq.n	800a57a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a536:	4a4c      	ldr	r2, [pc, #304]	@ (800a668 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a538:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53e:	4a4b      	ldr	r2, [pc, #300]	@ (800a66c <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a540:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a546:	2200      	movs	r2, #0
 800a548:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54e:	2200      	movs	r2, #0
 800a550:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3328      	adds	r3, #40	@ 0x28
 800a55e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a564:	2513      	movs	r5, #19
 800a566:	197c      	adds	r4, r7, r5
 800a568:	f7ff fa96 	bl	8009a98 <HAL_DMA_Start_IT>
 800a56c:	0003      	movs	r3, r0
 800a56e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a570:	197b      	adds	r3, r7, r5
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d13d      	bne.n	800a5f4 <HAL_I2C_Master_Transmit_DMA+0x188>
 800a578:	e013      	b.n	800a5a2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2241      	movs	r2, #65	@ 0x41
 800a57e:	2120      	movs	r1, #32
 800a580:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2242      	movs	r2, #66	@ 0x42
 800a586:	2100      	movs	r1, #0
 800a588:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a58e:	2280      	movs	r2, #128	@ 0x80
 800a590:	431a      	orrs	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2240      	movs	r2, #64	@ 0x40
 800a59a:	2100      	movs	r1, #0
 800a59c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e059      	b.n	800a656 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	697c      	ldr	r4, [r7, #20]
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	18fb      	adds	r3, r7, r3
 800a5ae:	8819      	ldrh	r1, [r3, #0]
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	4b2f      	ldr	r3, [pc, #188]	@ (800a670 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	0023      	movs	r3, r4
 800a5b8:	f001 fd0e 	bl	800bfd8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2240      	movs	r2, #64	@ 0x40
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2110      	movs	r1, #16
 800a5da:	0018      	movs	r0, r3
 800a5dc:	f001 fd36 	bl	800c04c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2180      	movs	r1, #128	@ 0x80
 800a5ec:	01c9      	lsls	r1, r1, #7
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	e02d      	b.n	800a650 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2241      	movs	r2, #65	@ 0x41
 800a5f8:	2120      	movs	r1, #32
 800a5fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2242      	movs	r2, #66	@ 0x42
 800a600:	2100      	movs	r1, #0
 800a602:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a608:	2210      	movs	r2, #16
 800a60a:	431a      	orrs	r2, r3
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2240      	movs	r2, #64	@ 0x40
 800a614:	2100      	movs	r1, #0
 800a616:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e01c      	b.n	800a656 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4a15      	ldr	r2, [pc, #84]	@ (800a674 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a620:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a626:	b2da      	uxtb	r2, r3
 800a628:	2380      	movs	r3, #128	@ 0x80
 800a62a:	049c      	lsls	r4, r3, #18
 800a62c:	230a      	movs	r3, #10
 800a62e:	18fb      	adds	r3, r7, r3
 800a630:	8819      	ldrh	r1, [r3, #0]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	4b0e      	ldr	r3, [pc, #56]	@ (800a670 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	0023      	movs	r3, r4
 800a63a:	f001 fccd 	bl	800bfd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2240      	movs	r2, #64	@ 0x40
 800a642:	2100      	movs	r1, #0
 800a644:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2101      	movs	r1, #1
 800a64a:	0018      	movs	r0, r3
 800a64c:	f001 fcfe 	bl	800c04c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	e000      	b.n	800a656 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a654:	2302      	movs	r3, #2
  }
}
 800a656:	0018      	movs	r0, r3
 800a658:	46bd      	mov	sp, r7
 800a65a:	b006      	add	sp, #24
 800a65c:	bdb0      	pop	{r4, r5, r7, pc}
 800a65e:	46c0      	nop			@ (mov r8, r8)
 800a660:	ffff0000 	.word	0xffff0000
 800a664:	0800ae71 	.word	0x0800ae71
 800a668:	0800be29 	.word	0x0800be29
 800a66c:	0800bf69 	.word	0x0800bf69
 800a670:	80002000 	.word	0x80002000
 800a674:	0800aa1d 	.word	0x0800aa1d

0800a678 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a678:	b5b0      	push	{r4, r5, r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	0008      	movs	r0, r1
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	0019      	movs	r1, r3
 800a686:	230a      	movs	r3, #10
 800a688:	18fb      	adds	r3, r7, r3
 800a68a:	1c02      	adds	r2, r0, #0
 800a68c:	801a      	strh	r2, [r3, #0]
 800a68e:	2308      	movs	r3, #8
 800a690:	18fb      	adds	r3, r7, r3
 800a692:	1c0a      	adds	r2, r1, #0
 800a694:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2241      	movs	r2, #65	@ 0x41
 800a69a:	5c9b      	ldrb	r3, [r3, r2]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	d000      	beq.n	800a6a4 <HAL_I2C_Master_Receive_DMA+0x2c>
 800a6a2:	e0dd      	b.n	800a860 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699a      	ldr	r2, [r3, #24]
 800a6aa:	2380      	movs	r3, #128	@ 0x80
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	401a      	ands	r2, r3
 800a6b0:	2380      	movs	r3, #128	@ 0x80
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d101      	bne.n	800a6bc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e0d2      	b.n	800a862 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2240      	movs	r2, #64	@ 0x40
 800a6c0:	5c9b      	ldrb	r3, [r3, r2]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d101      	bne.n	800a6ca <HAL_I2C_Master_Receive_DMA+0x52>
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	e0cb      	b.n	800a862 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2240      	movs	r2, #64	@ 0x40
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2241      	movs	r2, #65	@ 0x41
 800a6d6:	2122      	movs	r1, #34	@ 0x22
 800a6d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2242      	movs	r2, #66	@ 0x42
 800a6de:	2110      	movs	r1, #16
 800a6e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	18ba      	adds	r2, r7, r2
 800a6f4:	8812      	ldrh	r2, [r2, #0]
 800a6f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4a5c      	ldr	r2, [pc, #368]	@ (800a86c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800a6fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4a5b      	ldr	r2, [pc, #364]	@ (800a870 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800a702:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a708:	b29b      	uxth	r3, r3
 800a70a:	2bff      	cmp	r3, #255	@ 0xff
 800a70c:	d906      	bls.n	800a71c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	22ff      	movs	r2, #255	@ 0xff
 800a712:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a714:	2380      	movs	r3, #128	@ 0x80
 800a716:	045b      	lsls	r3, r3, #17
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e007      	b.n	800a72c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a720:	b29a      	uxth	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a726:	2380      	movs	r3, #128	@ 0x80
 800a728:	049b      	lsls	r3, r3, #18
 800a72a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a730:	2b00      	cmp	r3, #0
 800a732:	d100      	bne.n	800a736 <HAL_I2C_Master_Receive_DMA+0xbe>
 800a734:	e078      	b.n	800a828 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d023      	beq.n	800a786 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a742:	4a4c      	ldr	r2, [pc, #304]	@ (800a874 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800a744:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a74a:	4a4b      	ldr	r2, [pc, #300]	@ (800a878 <HAL_I2C_Master_Receive_DMA+0x200>)
 800a74c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a752:	2200      	movs	r2, #0
 800a754:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a75a:	2200      	movs	r2, #0
 800a75c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3324      	adds	r3, #36	@ 0x24
 800a768:	0019      	movs	r1, r3
 800a76a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a770:	2513      	movs	r5, #19
 800a772:	197c      	adds	r4, r7, r5
 800a774:	f7ff f990 	bl	8009a98 <HAL_DMA_Start_IT>
 800a778:	0003      	movs	r3, r0
 800a77a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a77c:	197b      	adds	r3, r7, r5
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d13d      	bne.n	800a800 <HAL_I2C_Master_Receive_DMA+0x188>
 800a784:	e013      	b.n	800a7ae <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2241      	movs	r2, #65	@ 0x41
 800a78a:	2120      	movs	r1, #32
 800a78c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2242      	movs	r2, #66	@ 0x42
 800a792:	2100      	movs	r1, #0
 800a794:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a79a:	2280      	movs	r2, #128	@ 0x80
 800a79c:	431a      	orrs	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2240      	movs	r2, #64	@ 0x40
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e059      	b.n	800a862 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	697c      	ldr	r4, [r7, #20]
 800a7b6:	230a      	movs	r3, #10
 800a7b8:	18fb      	adds	r3, r7, r3
 800a7ba:	8819      	ldrh	r1, [r3, #0]
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	4b2f      	ldr	r3, [pc, #188]	@ (800a87c <HAL_I2C_Master_Receive_DMA+0x204>)
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	0023      	movs	r3, r4
 800a7c4:	f001 fc08 	bl	800bfd8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2240      	movs	r2, #64	@ 0x40
 800a7de:	2100      	movs	r1, #0
 800a7e0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2110      	movs	r1, #16
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	f001 fc30 	bl	800c04c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2180      	movs	r1, #128	@ 0x80
 800a7f8:	0209      	lsls	r1, r1, #8
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	e02d      	b.n	800a85c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2241      	movs	r2, #65	@ 0x41
 800a804:	2120      	movs	r1, #32
 800a806:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2242      	movs	r2, #66	@ 0x42
 800a80c:	2100      	movs	r1, #0
 800a80e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a814:	2210      	movs	r2, #16
 800a816:	431a      	orrs	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2240      	movs	r2, #64	@ 0x40
 800a820:	2100      	movs	r1, #0
 800a822:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e01c      	b.n	800a862 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4a15      	ldr	r2, [pc, #84]	@ (800a880 <HAL_I2C_Master_Receive_DMA+0x208>)
 800a82c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a832:	b2da      	uxtb	r2, r3
 800a834:	2380      	movs	r3, #128	@ 0x80
 800a836:	049c      	lsls	r4, r3, #18
 800a838:	230a      	movs	r3, #10
 800a83a:	18fb      	adds	r3, r7, r3
 800a83c:	8819      	ldrh	r1, [r3, #0]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	4b0e      	ldr	r3, [pc, #56]	@ (800a87c <HAL_I2C_Master_Receive_DMA+0x204>)
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	0023      	movs	r3, r4
 800a846:	f001 fbc7 	bl	800bfd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2240      	movs	r2, #64	@ 0x40
 800a84e:	2100      	movs	r1, #0
 800a850:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2101      	movs	r1, #1
 800a856:	0018      	movs	r0, r3
 800a858:	f001 fbf8 	bl	800c04c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	e000      	b.n	800a862 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a860:	2302      	movs	r3, #2
  }
}
 800a862:	0018      	movs	r0, r3
 800a864:	46bd      	mov	sp, r7
 800a866:	b006      	add	sp, #24
 800a868:	bdb0      	pop	{r4, r5, r7, pc}
 800a86a:	46c0      	nop			@ (mov r8, r8)
 800a86c:	ffff0000 	.word	0xffff0000
 800a870:	0800ae71 	.word	0x0800ae71
 800a874:	0800bec9 	.word	0x0800bec9
 800a878:	0800bf69 	.word	0x0800bf69
 800a87c:	80002400 	.word	0x80002400
 800a880:	0800aa1d 	.word	0x0800aa1d

0800a884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d005      	beq.n	800a8b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	68f9      	ldr	r1, [r7, #12]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
  }
}
 800a8b0:	46c0      	nop			@ (mov r8, r8)
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	b004      	add	sp, #16
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	2380      	movs	r3, #128	@ 0x80
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2280      	movs	r2, #128	@ 0x80
 800a8de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a8e0:	d00a      	beq.n	800a8f8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2280      	movs	r2, #128	@ 0x80
 800a8f4:	0052      	lsls	r2, r2, #1
 800a8f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	2380      	movs	r3, #128	@ 0x80
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	4013      	ands	r3, r2
 800a900:	d00e      	beq.n	800a920 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2280      	movs	r2, #128	@ 0x80
 800a906:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a908:	d00a      	beq.n	800a920 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a90e:	2208      	movs	r2, #8
 800a910:	431a      	orrs	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2280      	movs	r2, #128	@ 0x80
 800a91c:	00d2      	lsls	r2, r2, #3
 800a91e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	2380      	movs	r3, #128	@ 0x80
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4013      	ands	r3, r2
 800a928:	d00e      	beq.n	800a948 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2280      	movs	r2, #128	@ 0x80
 800a92e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a930:	d00a      	beq.n	800a948 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a936:	2202      	movs	r2, #2
 800a938:	431a      	orrs	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2280      	movs	r2, #128	@ 0x80
 800a944:	0092      	lsls	r2, r2, #2
 800a946:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a94c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	220b      	movs	r2, #11
 800a952:	4013      	ands	r3, r2
 800a954:	d005      	beq.n	800a962 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	0011      	movs	r1, r2
 800a95c:	0018      	movs	r0, r3
 800a95e:	f001 f915 	bl	800bb8c <I2C_ITError>
  }
}
 800a962:	46c0      	nop			@ (mov r8, r8)
 800a964:	46bd      	mov	sp, r7
 800a966:	b006      	add	sp, #24
 800a968:	bd80      	pop	{r7, pc}

0800a96a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	46bd      	mov	sp, r7
 800a976:	b002      	add	sp, #8
 800a978:	bd80      	pop	{r7, pc}

0800a97a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a982:	46c0      	nop			@ (mov r8, r8)
 800a984:	46bd      	mov	sp, r7
 800a986:	b002      	add	sp, #8
 800a988:	bd80      	pop	{r7, pc}

0800a98a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b082      	sub	sp, #8
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a992:	46c0      	nop			@ (mov r8, r8)
 800a994:	46bd      	mov	sp, r7
 800a996:	b002      	add	sp, #8
 800a998:	bd80      	pop	{r7, pc}

0800a99a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b082      	sub	sp, #8
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	b002      	add	sp, #8
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	0008      	movs	r0, r1
 800a9b4:	0011      	movs	r1, r2
 800a9b6:	1cfb      	adds	r3, r7, #3
 800a9b8:	1c02      	adds	r2, r0, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
 800a9bc:	003b      	movs	r3, r7
 800a9be:	1c0a      	adds	r2, r1, #0
 800a9c0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a9c2:	46c0      	nop			@ (mov r8, r8)
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	b002      	add	sp, #8
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a9d2:	46c0      	nop			@ (mov r8, r8)
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	b002      	add	sp, #8
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a9e2:	46c0      	nop			@ (mov r8, r8)
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	b002      	add	sp, #8
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	b002      	add	sp, #8
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800aa02:	46c0      	nop			@ (mov r8, r8)
 800aa04:	46bd      	mov	sp, r7
 800aa06:	b002      	add	sp, #8
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800aa12:	46c0      	nop			@ (mov r8, r8)
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b002      	add	sp, #8
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800aa1c:	b590      	push	{r4, r7, lr}
 800aa1e:	b089      	sub	sp, #36	@ 0x24
 800aa20:	af02      	add	r7, sp, #8
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2240      	movs	r2, #64	@ 0x40
 800aa30:	5c9b      	ldrb	r3, [r3, r2]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <I2C_Master_ISR_IT+0x1e>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e113      	b.n	800ac62 <I2C_Master_ISR_IT+0x246>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2240      	movs	r2, #64	@ 0x40
 800aa3e:	2101      	movs	r1, #1
 800aa40:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2210      	movs	r2, #16
 800aa46:	4013      	ands	r3, r2
 800aa48:	d012      	beq.n	800aa70 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2210      	movs	r2, #16
 800aa4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aa50:	d00e      	beq.n	800aa70 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2210      	movs	r2, #16
 800aa58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa5e:	2204      	movs	r2, #4
 800aa60:	431a      	orrs	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f001 f9ba 	bl	800bde2 <I2C_Flush_TXDR>
 800aa6e:	e0e5      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2204      	movs	r2, #4
 800aa74:	4013      	ands	r3, r2
 800aa76:	d021      	beq.n	800aabc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aa7e:	d01d      	beq.n	800aabc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2204      	movs	r2, #4
 800aa84:	4393      	bics	r3, r2
 800aa86:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aaba:	e0bf      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	2202      	movs	r2, #2
 800aac0:	4013      	ands	r3, r2
 800aac2:	d01c      	beq.n	800aafe <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aaca:	d018      	beq.n	800aafe <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aafc:	e09e      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2280      	movs	r2, #128	@ 0x80
 800ab02:	4013      	ands	r3, r2
 800ab04:	d100      	bne.n	800ab08 <I2C_Master_ISR_IT+0xec>
 800ab06:	e069      	b.n	800abdc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2240      	movs	r2, #64	@ 0x40
 800ab0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ab0e:	d065      	beq.n	800abdc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d04a      	beq.n	800abb0 <I2C_Master_ISR_IT+0x194>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d146      	bne.n	800abb0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	2112      	movs	r1, #18
 800ab2c:	187b      	adds	r3, r7, r1
 800ab2e:	0592      	lsls	r2, r2, #22
 800ab30:	0d92      	lsrs	r2, r2, #22
 800ab32:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	2bff      	cmp	r3, #255	@ 0xff
 800ab3c:	d910      	bls.n	800ab60 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	22ff      	movs	r2, #255	@ 0xff
 800ab42:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	2380      	movs	r3, #128	@ 0x80
 800ab4c:	045c      	lsls	r4, r3, #17
 800ab4e:	187b      	adds	r3, r7, r1
 800ab50:	8819      	ldrh	r1, [r3, #0]
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	2300      	movs	r3, #0
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	0023      	movs	r3, r4
 800ab5a:	f001 fa3d 	bl	800bfd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab5e:	e03c      	b.n	800abda <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6e:	4a3f      	ldr	r2, [pc, #252]	@ (800ac6c <I2C_Master_ISR_IT+0x250>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d00e      	beq.n	800ab92 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab78:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ab7e:	2312      	movs	r3, #18
 800ab80:	18fb      	adds	r3, r7, r3
 800ab82:	8819      	ldrh	r1, [r3, #0]
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	2300      	movs	r3, #0
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	0023      	movs	r3, r4
 800ab8c:	f001 fa24 	bl	800bfd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab90:	e023      	b.n	800abda <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	2380      	movs	r3, #128	@ 0x80
 800ab9a:	049c      	lsls	r4, r3, #18
 800ab9c:	2312      	movs	r3, #18
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	8819      	ldrh	r1, [r3, #0]
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	2300      	movs	r3, #0
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	0023      	movs	r3, r4
 800abaa:	f001 fa15 	bl	800bfd8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abae:	e014      	b.n	800abda <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	2380      	movs	r3, #128	@ 0x80
 800abb8:	049b      	lsls	r3, r3, #18
 800abba:	401a      	ands	r2, r3
 800abbc:	2380      	movs	r3, #128	@ 0x80
 800abbe:	049b      	lsls	r3, r3, #18
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d004      	beq.n	800abce <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	0018      	movs	r0, r3
 800abc8:	f000 fcf4 	bl	800b5b4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abcc:	e036      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2140      	movs	r1, #64	@ 0x40
 800abd2:	0018      	movs	r0, r3
 800abd4:	f000 ffda 	bl	800bb8c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abd8:	e030      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
 800abda:	e02f      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	2240      	movs	r2, #64	@ 0x40
 800abe0:	4013      	ands	r3, r2
 800abe2:	d02b      	beq.n	800ac3c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2240      	movs	r2, #64	@ 0x40
 800abe8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800abea:	d027      	beq.n	800ac3c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d11d      	bne.n	800ac32 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	2380      	movs	r3, #128	@ 0x80
 800abfe:	049b      	lsls	r3, r3, #18
 800ac00:	401a      	ands	r2, r3
 800ac02:	2380      	movs	r3, #128	@ 0x80
 800ac04:	049b      	lsls	r3, r3, #18
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d018      	beq.n	800ac3c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0e:	4a17      	ldr	r2, [pc, #92]	@ (800ac6c <I2C_Master_ISR_IT+0x250>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d109      	bne.n	800ac28 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2180      	movs	r1, #128	@ 0x80
 800ac20:	01c9      	lsls	r1, r1, #7
 800ac22:	430a      	orrs	r2, r1
 800ac24:	605a      	str	r2, [r3, #4]
 800ac26:	e009      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	f000 fcc2 	bl	800b5b4 <I2C_ITMasterSeqCplt>
 800ac30:	e004      	b.n	800ac3c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2140      	movs	r1, #64	@ 0x40
 800ac36:	0018      	movs	r0, r3
 800ac38:	f000 ffa8 	bl	800bb8c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	4013      	ands	r3, r2
 800ac42:	d009      	beq.n	800ac58 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2220      	movs	r2, #32
 800ac48:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac4a:	d005      	beq.n	800ac58 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	0011      	movs	r1, r2
 800ac52:	0018      	movs	r0, r3
 800ac54:	f000 fd54 	bl	800b700 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2240      	movs	r2, #64	@ 0x40
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	0018      	movs	r0, r3
 800ac64:	46bd      	mov	sp, r7
 800ac66:	b007      	add	sp, #28
 800ac68:	bd90      	pop	{r4, r7, pc}
 800ac6a:	46c0      	nop			@ (mov r8, r8)
 800ac6c:	ffff0000 	.word	0xffff0000

0800ac70 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac80:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2240      	movs	r2, #64	@ 0x40
 800ac8a:	5c9b      	ldrb	r3, [r3, r2]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d101      	bne.n	800ac94 <I2C_Slave_ISR_IT+0x24>
 800ac90:	2302      	movs	r3, #2
 800ac92:	e0e6      	b.n	800ae62 <I2C_Slave_ISR_IT+0x1f2>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2240      	movs	r2, #64	@ 0x40
 800ac98:	2101      	movs	r1, #1
 800ac9a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	4013      	ands	r3, r2
 800aca2:	d009      	beq.n	800acb8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2220      	movs	r2, #32
 800aca8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800acaa:	d005      	beq.n	800acb8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	0011      	movs	r1, r2
 800acb2:	0018      	movs	r0, r3
 800acb4:	f000 fdf2 	bl	800b89c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2210      	movs	r2, #16
 800acbc:	4013      	ands	r3, r2
 800acbe:	d052      	beq.n	800ad66 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2210      	movs	r2, #16
 800acc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800acc6:	d04e      	beq.n	800ad66 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800accc:	b29b      	uxth	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d12d      	bne.n	800ad2e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2241      	movs	r2, #65	@ 0x41
 800acd6:	5c9b      	ldrb	r3, [r3, r2]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b28      	cmp	r3, #40	@ 0x28
 800acdc:	d10b      	bne.n	800acf6 <I2C_Slave_ISR_IT+0x86>
 800acde:	697a      	ldr	r2, [r7, #20]
 800ace0:	2380      	movs	r3, #128	@ 0x80
 800ace2:	049b      	lsls	r3, r3, #18
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d106      	bne.n	800acf6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	0011      	movs	r1, r2
 800acee:	0018      	movs	r0, r3
 800acf0:	f000 fef4 	bl	800badc <I2C_ITListenCplt>
 800acf4:	e036      	b.n	800ad64 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2241      	movs	r2, #65	@ 0x41
 800acfa:	5c9b      	ldrb	r3, [r3, r2]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b29      	cmp	r3, #41	@ 0x29
 800ad00:	d110      	bne.n	800ad24 <I2C_Slave_ISR_IT+0xb4>
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	4a59      	ldr	r2, [pc, #356]	@ (800ae6c <I2C_Slave_ISR_IT+0x1fc>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00c      	beq.n	800ad24 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2210      	movs	r2, #16
 800ad10:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	0018      	movs	r0, r3
 800ad16:	f001 f864 	bl	800bde2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	f000 fc8b 	bl	800b638 <I2C_ITSlaveSeqCplt>
 800ad22:	e01f      	b.n	800ad64 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2210      	movs	r2, #16
 800ad2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ad2c:	e091      	b.n	800ae52 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2210      	movs	r2, #16
 800ad34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3a:	2204      	movs	r2, #4
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d005      	beq.n	800ad54 <I2C_Slave_ISR_IT+0xe4>
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	2380      	movs	r3, #128	@ 0x80
 800ad4c:	045b      	lsls	r3, r3, #17
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d000      	beq.n	800ad54 <I2C_Slave_ISR_IT+0xe4>
 800ad52:	e07e      	b.n	800ae52 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	0011      	movs	r1, r2
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f000 ff15 	bl	800bb8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ad62:	e076      	b.n	800ae52 <I2C_Slave_ISR_IT+0x1e2>
 800ad64:	e075      	b.n	800ae52 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2204      	movs	r2, #4
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	d02f      	beq.n	800adce <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2204      	movs	r2, #4
 800ad72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ad74:	d02b      	beq.n	800adce <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d018      	beq.n	800adb2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8a:	b2d2      	uxtb	r2, r2
 800ad8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	3b01      	subs	r3, #1
 800adac:	b29a      	uxth	r2, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d14c      	bne.n	800ae56 <I2C_Slave_ISR_IT+0x1e6>
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	4a2b      	ldr	r2, [pc, #172]	@ (800ae6c <I2C_Slave_ISR_IT+0x1fc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d048      	beq.n	800ae56 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	0018      	movs	r0, r3
 800adc8:	f000 fc36 	bl	800b638 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800adcc:	e043      	b.n	800ae56 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2208      	movs	r2, #8
 800add2:	4013      	ands	r3, r2
 800add4:	d00a      	beq.n	800adec <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2208      	movs	r2, #8
 800adda:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800addc:	d006      	beq.n	800adec <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	0011      	movs	r1, r2
 800ade4:	0018      	movs	r0, r3
 800ade6:	f000 fb41 	bl	800b46c <I2C_ITAddrCplt>
 800adea:	e035      	b.n	800ae58 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2202      	movs	r2, #2
 800adf0:	4013      	ands	r3, r2
 800adf2:	d031      	beq.n	800ae58 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800adfa:	d02d      	beq.n	800ae58 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d018      	beq.n	800ae38 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	3b01      	subs	r3, #1
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ae36:	e00f      	b.n	800ae58 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	2380      	movs	r3, #128	@ 0x80
 800ae3c:	045b      	lsls	r3, r3, #17
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d002      	beq.n	800ae48 <I2C_Slave_ISR_IT+0x1d8>
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d107      	bne.n	800ae58 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	0018      	movs	r0, r3
 800ae4c:	f000 fbf4 	bl	800b638 <I2C_ITSlaveSeqCplt>
 800ae50:	e002      	b.n	800ae58 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800ae52:	46c0      	nop			@ (mov r8, r8)
 800ae54:	e000      	b.n	800ae58 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800ae56:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2240      	movs	r2, #64	@ 0x40
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	0018      	movs	r0, r3
 800ae64:	46bd      	mov	sp, r7
 800ae66:	b006      	add	sp, #24
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	46c0      	nop			@ (mov r8, r8)
 800ae6c:	ffff0000 	.word	0xffff0000

0800ae70 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800ae70:	b590      	push	{r4, r7, lr}
 800ae72:	b089      	sub	sp, #36	@ 0x24
 800ae74:	af02      	add	r7, sp, #8
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2240      	movs	r2, #64	@ 0x40
 800ae80:	5c9b      	ldrb	r3, [r3, r2]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d101      	bne.n	800ae8a <I2C_Master_ISR_DMA+0x1a>
 800ae86:	2302      	movs	r3, #2
 800ae88:	e0e7      	b.n	800b05a <I2C_Master_ISR_DMA+0x1ea>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2240      	movs	r2, #64	@ 0x40
 800ae8e:	2101      	movs	r1, #1
 800ae90:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2210      	movs	r2, #16
 800ae96:	4013      	ands	r3, r2
 800ae98:	d017      	beq.n	800aeca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2210      	movs	r2, #16
 800ae9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aea0:	d013      	beq.n	800aeca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2210      	movs	r2, #16
 800aea8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeae:	2204      	movs	r2, #4
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2120      	movs	r1, #32
 800aeba:	0018      	movs	r0, r3
 800aebc:	f001 f8c6 	bl	800c04c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	0018      	movs	r0, r3
 800aec4:	f000 ff8d 	bl	800bde2 <I2C_Flush_TXDR>
 800aec8:	e0c2      	b.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2280      	movs	r2, #128	@ 0x80
 800aece:	4013      	ands	r3, r2
 800aed0:	d100      	bne.n	800aed4 <I2C_Master_ISR_DMA+0x64>
 800aed2:	e07c      	b.n	800afce <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2240      	movs	r2, #64	@ 0x40
 800aed8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800aeda:	d100      	bne.n	800aede <I2C_Master_ISR_DMA+0x6e>
 800aedc:	e077      	b.n	800afce <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2140      	movs	r1, #64	@ 0x40
 800aeea:	438a      	bics	r2, r1
 800aeec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d055      	beq.n	800afa4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	b29a      	uxth	r2, r3
 800af00:	2312      	movs	r3, #18
 800af02:	18fb      	adds	r3, r7, r3
 800af04:	0592      	lsls	r2, r2, #22
 800af06:	0d92      	lsrs	r2, r2, #22
 800af08:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af0e:	b29b      	uxth	r3, r3
 800af10:	2bff      	cmp	r3, #255	@ 0xff
 800af12:	d906      	bls.n	800af22 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	22ff      	movs	r2, #255	@ 0xff
 800af18:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800af1a:	2380      	movs	r3, #128	@ 0x80
 800af1c:	045b      	lsls	r3, r3, #17
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e010      	b.n	800af44 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af26:	b29a      	uxth	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af30:	4a4c      	ldr	r2, [pc, #304]	@ (800b064 <I2C_Master_ISR_DMA+0x1f4>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d003      	beq.n	800af3e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	e002      	b.n	800af44 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800af3e:	2380      	movs	r3, #128	@ 0x80
 800af40:	049b      	lsls	r3, r3, #18
 800af42:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	697c      	ldr	r4, [r7, #20]
 800af4c:	2312      	movs	r3, #18
 800af4e:	18fb      	adds	r3, r7, r3
 800af50:	8819      	ldrh	r1, [r3, #0]
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	2300      	movs	r3, #0
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	0023      	movs	r3, r4
 800af5a:	f001 f83d 	bl	800bfd8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af62:	b29a      	uxth	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2241      	movs	r2, #65	@ 0x41
 800af74:	5c9b      	ldrb	r3, [r3, r2]
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b22      	cmp	r3, #34	@ 0x22
 800af7a:	d109      	bne.n	800af90 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2180      	movs	r1, #128	@ 0x80
 800af88:	0209      	lsls	r1, r1, #8
 800af8a:	430a      	orrs	r2, r1
 800af8c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800af8e:	e05f      	b.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2180      	movs	r1, #128	@ 0x80
 800af9c:	01c9      	lsls	r1, r1, #7
 800af9e:	430a      	orrs	r2, r1
 800afa0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800afa2:	e055      	b.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	2380      	movs	r3, #128	@ 0x80
 800afac:	049b      	lsls	r3, r3, #18
 800afae:	401a      	ands	r2, r3
 800afb0:	2380      	movs	r3, #128	@ 0x80
 800afb2:	049b      	lsls	r3, r3, #18
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d004      	beq.n	800afc2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	0018      	movs	r0, r3
 800afbc:	f000 fafa 	bl	800b5b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800afc0:	e046      	b.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2140      	movs	r1, #64	@ 0x40
 800afc6:	0018      	movs	r0, r3
 800afc8:	f000 fde0 	bl	800bb8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800afcc:	e040      	b.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2240      	movs	r2, #64	@ 0x40
 800afd2:	4013      	ands	r3, r2
 800afd4:	d02c      	beq.n	800b030 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2240      	movs	r2, #64	@ 0x40
 800afda:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800afdc:	d028      	beq.n	800b030 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11d      	bne.n	800b024 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	2380      	movs	r3, #128	@ 0x80
 800aff0:	049b      	lsls	r3, r3, #18
 800aff2:	401a      	ands	r2, r3
 800aff4:	2380      	movs	r3, #128	@ 0x80
 800aff6:	049b      	lsls	r3, r3, #18
 800aff8:	429a      	cmp	r2, r3
 800affa:	d028      	beq.n	800b04e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b000:	4a18      	ldr	r2, [pc, #96]	@ (800b064 <I2C_Master_ISR_DMA+0x1f4>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d109      	bne.n	800b01a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	685a      	ldr	r2, [r3, #4]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2180      	movs	r1, #128	@ 0x80
 800b012:	01c9      	lsls	r1, r1, #7
 800b014:	430a      	orrs	r2, r1
 800b016:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b018:	e019      	b.n	800b04e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	0018      	movs	r0, r3
 800b01e:	f000 fac9 	bl	800b5b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b022:	e014      	b.n	800b04e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2140      	movs	r1, #64	@ 0x40
 800b028:	0018      	movs	r0, r3
 800b02a:	f000 fdaf 	bl	800bb8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b02e:	e00e      	b.n	800b04e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2220      	movs	r2, #32
 800b034:	4013      	ands	r3, r2
 800b036:	d00b      	beq.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2220      	movs	r2, #32
 800b03c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b03e:	d007      	beq.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	0011      	movs	r1, r2
 800b046:	0018      	movs	r0, r3
 800b048:	f000 fb5a 	bl	800b700 <I2C_ITMasterCplt>
 800b04c:	e000      	b.n	800b050 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800b04e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2240      	movs	r2, #64	@ 0x40
 800b054:	2100      	movs	r1, #0
 800b056:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	0018      	movs	r0, r3
 800b05c:	46bd      	mov	sp, r7
 800b05e:	b007      	add	sp, #28
 800b060:	bd90      	pop	{r4, r7, pc}
 800b062:	46c0      	nop			@ (mov r8, r8)
 800b064:	ffff0000 	.word	0xffff0000

0800b068 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b068:	b590      	push	{r4, r7, lr}
 800b06a:	b089      	sub	sp, #36	@ 0x24
 800b06c:	af02      	add	r7, sp, #8
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b074:	4b88      	ldr	r3, [pc, #544]	@ (800b298 <I2C_Mem_ISR_DMA+0x230>)
 800b076:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2240      	movs	r2, #64	@ 0x40
 800b07c:	5c9b      	ldrb	r3, [r3, r2]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d101      	bne.n	800b086 <I2C_Mem_ISR_DMA+0x1e>
 800b082:	2302      	movs	r3, #2
 800b084:	e104      	b.n	800b290 <I2C_Mem_ISR_DMA+0x228>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2240      	movs	r2, #64	@ 0x40
 800b08a:	2101      	movs	r1, #1
 800b08c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2210      	movs	r2, #16
 800b092:	4013      	ands	r3, r2
 800b094:	d017      	beq.n	800b0c6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2210      	movs	r2, #16
 800b09a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b09c:	d013      	beq.n	800b0c6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2210      	movs	r2, #16
 800b0a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2120      	movs	r1, #32
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f000 ffc8 	bl	800c04c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	0018      	movs	r0, r3
 800b0c0:	f000 fe8f 	bl	800bde2 <I2C_Flush_TXDR>
 800b0c4:	e0df      	b.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	d00d      	beq.n	800b0ea <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b0d4:	d009      	beq.n	800b0ea <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b0de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	4252      	negs	r2, r2
 800b0e6:	651a      	str	r2, [r3, #80]	@ 0x50
 800b0e8:	e0cd      	b.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2280      	movs	r2, #128	@ 0x80
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	d05e      	beq.n	800b1b0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2240      	movs	r2, #64	@ 0x40
 800b0f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b0f8:	d05a      	beq.n	800b1b0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2110      	movs	r1, #16
 800b0fe:	0018      	movs	r0, r3
 800b100:	f000 ffa4 	bl	800c04c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d04a      	beq.n	800b1a4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b112:	b29b      	uxth	r3, r3
 800b114:	2bff      	cmp	r3, #255	@ 0xff
 800b116:	d910      	bls.n	800b13a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	22ff      	movs	r2, #255	@ 0xff
 800b11c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b122:	b299      	uxth	r1, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	2380      	movs	r3, #128	@ 0x80
 800b12c:	045b      	lsls	r3, r3, #17
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	2400      	movs	r4, #0
 800b132:	9400      	str	r4, [sp, #0]
 800b134:	f000 ff50 	bl	800bfd8 <I2C_TransferConfig>
 800b138:	e011      	b.n	800b15e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b13e:	b29a      	uxth	r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b148:	b299      	uxth	r1, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b14e:	b2da      	uxtb	r2, r3
 800b150:	2380      	movs	r3, #128	@ 0x80
 800b152:	049b      	lsls	r3, r3, #18
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	2400      	movs	r4, #0
 800b158:	9400      	str	r4, [sp, #0]
 800b15a:	f000 ff3d 	bl	800bfd8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b162:	b29a      	uxth	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2241      	movs	r2, #65	@ 0x41
 800b174:	5c9b      	ldrb	r3, [r3, r2]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b22      	cmp	r3, #34	@ 0x22
 800b17a:	d109      	bne.n	800b190 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2180      	movs	r1, #128	@ 0x80
 800b188:	0209      	lsls	r1, r1, #8
 800b18a:	430a      	orrs	r2, r1
 800b18c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b18e:	e07a      	b.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2180      	movs	r1, #128	@ 0x80
 800b19c:	01c9      	lsls	r1, r1, #7
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b1a2:	e070      	b.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2140      	movs	r1, #64	@ 0x40
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f000 fcef 	bl	800bb8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b1ae:	e06a      	b.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2240      	movs	r2, #64	@ 0x40
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d058      	beq.n	800b26a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2240      	movs	r2, #64	@ 0x40
 800b1bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b1be:	d054      	beq.n	800b26a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2241      	movs	r2, #65	@ 0x41
 800b1c4:	5c9b      	ldrb	r3, [r3, r2]
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b22      	cmp	r3, #34	@ 0x22
 800b1ca:	d101      	bne.n	800b1d0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800b1cc:	4b33      	ldr	r3, [pc, #204]	@ (800b29c <I2C_Mem_ISR_DMA+0x234>)
 800b1ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	2bff      	cmp	r3, #255	@ 0xff
 800b1d8:	d911      	bls.n	800b1fe <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	22ff      	movs	r2, #255	@ 0xff
 800b1de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1e4:	b299      	uxth	r1, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	2380      	movs	r3, #128	@ 0x80
 800b1ee:	045c      	lsls	r4, r3, #17
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	0023      	movs	r3, r4
 800b1f8:	f000 feee 	bl	800bfd8 <I2C_TransferConfig>
 800b1fc:	e012      	b.n	800b224 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b20c:	b299      	uxth	r1, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b212:	b2da      	uxtb	r2, r3
 800b214:	2380      	movs	r3, #128	@ 0x80
 800b216:	049c      	lsls	r4, r3, #18
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	0023      	movs	r3, r4
 800b220:	f000 feda 	bl	800bfd8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b228:	b29a      	uxth	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2241      	movs	r2, #65	@ 0x41
 800b23a:	5c9b      	ldrb	r3, [r3, r2]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b22      	cmp	r3, #34	@ 0x22
 800b240:	d109      	bne.n	800b256 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2180      	movs	r1, #128	@ 0x80
 800b24e:	0209      	lsls	r1, r1, #8
 800b250:	430a      	orrs	r2, r1
 800b252:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b254:	e017      	b.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2180      	movs	r1, #128	@ 0x80
 800b262:	01c9      	lsls	r1, r1, #7
 800b264:	430a      	orrs	r2, r1
 800b266:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b268:	e00d      	b.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2220      	movs	r2, #32
 800b26e:	4013      	ands	r3, r2
 800b270:	d009      	beq.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2220      	movs	r2, #32
 800b276:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b278:	d005      	beq.n	800b286 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	0011      	movs	r1, r2
 800b280:	0018      	movs	r0, r3
 800b282:	f000 fa3d 	bl	800b700 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2240      	movs	r2, #64	@ 0x40
 800b28a:	2100      	movs	r1, #0
 800b28c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	0018      	movs	r0, r3
 800b292:	46bd      	mov	sp, r7
 800b294:	b007      	add	sp, #28
 800b296:	bd90      	pop	{r4, r7, pc}
 800b298:	80002000 	.word	0x80002000
 800b29c:	80002400 	.word	0x80002400

0800b2a0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2240      	movs	r2, #64	@ 0x40
 800b2ba:	5c9b      	ldrb	r3, [r3, r2]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d101      	bne.n	800b2c4 <I2C_Slave_ISR_DMA+0x24>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e0cd      	b.n	800b460 <I2C_Slave_ISR_DMA+0x1c0>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2240      	movs	r2, #64	@ 0x40
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	d009      	beq.n	800b2e8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b2da:	d005      	beq.n	800b2e8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	0011      	movs	r1, r2
 800b2e2:	0018      	movs	r0, r3
 800b2e4:	f000 fada 	bl	800b89c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2210      	movs	r2, #16
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	d100      	bne.n	800b2f2 <I2C_Slave_ISR_DMA+0x52>
 800b2f0:	e0a3      	b.n	800b43a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2210      	movs	r2, #16
 800b2f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b2f8:	d100      	bne.n	800b2fc <I2C_Slave_ISR_DMA+0x5c>
 800b2fa:	e09e      	b.n	800b43a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	2380      	movs	r3, #128	@ 0x80
 800b300:	01db      	lsls	r3, r3, #7
 800b302:	4013      	ands	r3, r2
 800b304:	d105      	bne.n	800b312 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	2380      	movs	r3, #128	@ 0x80
 800b30a:	021b      	lsls	r3, r3, #8
 800b30c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b30e:	d100      	bne.n	800b312 <I2C_Slave_ISR_DMA+0x72>
 800b310:	e08c      	b.n	800b42c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00c      	beq.n	800b334 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	2380      	movs	r3, #128	@ 0x80
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	4013      	ands	r3, r2
 800b322:	d007      	beq.n	800b334 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800b330:	2301      	movs	r3, #1
 800b332:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00c      	beq.n	800b356 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	2380      	movs	r3, #128	@ 0x80
 800b340:	01db      	lsls	r3, r3, #7
 800b342:	4013      	ands	r3, r2
 800b344:	d007      	beq.n	800b356 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800b352:	2301      	movs	r3, #1
 800b354:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d12d      	bne.n	800b3b8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2241      	movs	r2, #65	@ 0x41
 800b360:	5c9b      	ldrb	r3, [r3, r2]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b28      	cmp	r3, #40	@ 0x28
 800b366:	d10b      	bne.n	800b380 <I2C_Slave_ISR_DMA+0xe0>
 800b368:	69ba      	ldr	r2, [r7, #24]
 800b36a:	2380      	movs	r3, #128	@ 0x80
 800b36c:	049b      	lsls	r3, r3, #18
 800b36e:	429a      	cmp	r2, r3
 800b370:	d106      	bne.n	800b380 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	0011      	movs	r1, r2
 800b378:	0018      	movs	r0, r3
 800b37a:	f000 fbaf 	bl	800badc <I2C_ITListenCplt>
 800b37e:	e054      	b.n	800b42a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2241      	movs	r2, #65	@ 0x41
 800b384:	5c9b      	ldrb	r3, [r3, r2]
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b29      	cmp	r3, #41	@ 0x29
 800b38a:	d110      	bne.n	800b3ae <I2C_Slave_ISR_DMA+0x10e>
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	4a36      	ldr	r2, [pc, #216]	@ (800b468 <I2C_Slave_ISR_DMA+0x1c8>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d00c      	beq.n	800b3ae <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2210      	movs	r2, #16
 800b39a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	0018      	movs	r0, r3
 800b3a0:	f000 fd1f 	bl	800bde2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	f000 f946 	bl	800b638 <I2C_ITSlaveSeqCplt>
 800b3ac:	e03d      	b.n	800b42a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2210      	movs	r2, #16
 800b3b4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b3b6:	e03e      	b.n	800b436 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2210      	movs	r2, #16
 800b3be:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3c4:	2204      	movs	r2, #4
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b3cc:	2317      	movs	r3, #23
 800b3ce:	18fb      	adds	r3, r7, r3
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	2141      	movs	r1, #65	@ 0x41
 800b3d4:	5c52      	ldrb	r2, [r2, r1]
 800b3d6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <I2C_Slave_ISR_DMA+0x148>
 800b3de:	69ba      	ldr	r2, [r7, #24]
 800b3e0:	2380      	movs	r3, #128	@ 0x80
 800b3e2:	045b      	lsls	r3, r3, #17
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d126      	bne.n	800b436 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b3e8:	2217      	movs	r2, #23
 800b3ea:	18bb      	adds	r3, r7, r2
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b21      	cmp	r3, #33	@ 0x21
 800b3f0:	d003      	beq.n	800b3fa <I2C_Slave_ISR_DMA+0x15a>
 800b3f2:	18bb      	adds	r3, r7, r2
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b29      	cmp	r3, #41	@ 0x29
 800b3f8:	d103      	bne.n	800b402 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2221      	movs	r2, #33	@ 0x21
 800b3fe:	631a      	str	r2, [r3, #48]	@ 0x30
 800b400:	e00b      	b.n	800b41a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b402:	2217      	movs	r2, #23
 800b404:	18bb      	adds	r3, r7, r2
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b22      	cmp	r3, #34	@ 0x22
 800b40a:	d003      	beq.n	800b414 <I2C_Slave_ISR_DMA+0x174>
 800b40c:	18bb      	adds	r3, r7, r2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b2a      	cmp	r3, #42	@ 0x2a
 800b412:	d102      	bne.n	800b41a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2222      	movs	r2, #34	@ 0x22
 800b418:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	0011      	movs	r1, r2
 800b422:	0018      	movs	r0, r3
 800b424:	f000 fbb2 	bl	800bb8c <I2C_ITError>
      if (treatdmanack == 1U)
 800b428:	e005      	b.n	800b436 <I2C_Slave_ISR_DMA+0x196>
 800b42a:	e004      	b.n	800b436 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2210      	movs	r2, #16
 800b432:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b434:	e00f      	b.n	800b456 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800b436:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b438:	e00d      	b.n	800b456 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2208      	movs	r2, #8
 800b43e:	4013      	ands	r3, r2
 800b440:	d009      	beq.n	800b456 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2208      	movs	r2, #8
 800b446:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b448:	d005      	beq.n	800b456 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	0011      	movs	r1, r2
 800b450:	0018      	movs	r0, r3
 800b452:	f000 f80b 	bl	800b46c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2240      	movs	r2, #64	@ 0x40
 800b45a:	2100      	movs	r1, #0
 800b45c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	0018      	movs	r0, r3
 800b462:	46bd      	mov	sp, r7
 800b464:	b008      	add	sp, #32
 800b466:	bd80      	pop	{r7, pc}
 800b468:	ffff0000 	.word	0xffff0000

0800b46c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b46c:	b5b0      	push	{r4, r5, r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2241      	movs	r2, #65	@ 0x41
 800b47a:	5c9b      	ldrb	r3, [r3, r2]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	001a      	movs	r2, r3
 800b480:	2328      	movs	r3, #40	@ 0x28
 800b482:	4013      	ands	r3, r2
 800b484:	2b28      	cmp	r3, #40	@ 0x28
 800b486:	d000      	beq.n	800b48a <I2C_ITAddrCplt+0x1e>
 800b488:	e088      	b.n	800b59c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	0c1b      	lsrs	r3, r3, #16
 800b492:	b2da      	uxtb	r2, r3
 800b494:	250f      	movs	r5, #15
 800b496:	197b      	adds	r3, r7, r5
 800b498:	2101      	movs	r1, #1
 800b49a:	400a      	ands	r2, r1
 800b49c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	0c1b      	lsrs	r3, r3, #16
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	200c      	movs	r0, #12
 800b4aa:	183b      	adds	r3, r7, r0
 800b4ac:	21fe      	movs	r1, #254	@ 0xfe
 800b4ae:	400a      	ands	r2, r1
 800b4b0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	240a      	movs	r4, #10
 800b4bc:	193b      	adds	r3, r7, r4
 800b4be:	0592      	lsls	r2, r2, #22
 800b4c0:	0d92      	lsrs	r2, r2, #22
 800b4c2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	18fb      	adds	r3, r7, r3
 800b4d0:	21fe      	movs	r1, #254	@ 0xfe
 800b4d2:	400a      	ands	r2, r1
 800b4d4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d148      	bne.n	800b570 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b4de:	0021      	movs	r1, r4
 800b4e0:	187b      	adds	r3, r7, r1
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	09db      	lsrs	r3, r3, #7
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	183b      	adds	r3, r7, r0
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	4053      	eors	r3, r2
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	001a      	movs	r2, r3
 800b4f2:	2306      	movs	r3, #6
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	d120      	bne.n	800b53a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b4f8:	183b      	adds	r3, r7, r0
 800b4fa:	187a      	adds	r2, r7, r1
 800b4fc:	8812      	ldrh	r2, [r2, #0]
 800b4fe:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d14c      	bne.n	800b5ac <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2208      	movs	r2, #8
 800b51e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2240      	movs	r2, #64	@ 0x40
 800b524:	2100      	movs	r1, #0
 800b526:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b528:	183b      	adds	r3, r7, r0
 800b52a:	881a      	ldrh	r2, [r3, #0]
 800b52c:	197b      	adds	r3, r7, r5
 800b52e:	7819      	ldrb	r1, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	0018      	movs	r0, r3
 800b534:	f7ff fa39 	bl	800a9aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b538:	e038      	b.n	800b5ac <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b53a:	240c      	movs	r4, #12
 800b53c:	193b      	adds	r3, r7, r4
 800b53e:	2208      	movs	r2, #8
 800b540:	18ba      	adds	r2, r7, r2
 800b542:	8812      	ldrh	r2, [r2, #0]
 800b544:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b546:	2380      	movs	r3, #128	@ 0x80
 800b548:	021a      	lsls	r2, r3, #8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	0011      	movs	r1, r2
 800b54e:	0018      	movs	r0, r3
 800b550:	f000 fe0a 	bl	800c168 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2240      	movs	r2, #64	@ 0x40
 800b558:	2100      	movs	r1, #0
 800b55a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b55c:	193b      	adds	r3, r7, r4
 800b55e:	881a      	ldrh	r2, [r3, #0]
 800b560:	230f      	movs	r3, #15
 800b562:	18fb      	adds	r3, r7, r3
 800b564:	7819      	ldrb	r1, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	0018      	movs	r0, r3
 800b56a:	f7ff fa1e 	bl	800a9aa <HAL_I2C_AddrCallback>
}
 800b56e:	e01d      	b.n	800b5ac <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b570:	2380      	movs	r3, #128	@ 0x80
 800b572:	021a      	lsls	r2, r3, #8
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	0011      	movs	r1, r2
 800b578:	0018      	movs	r0, r3
 800b57a:	f000 fdf5 	bl	800c168 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2240      	movs	r2, #64	@ 0x40
 800b582:	2100      	movs	r1, #0
 800b584:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b586:	230c      	movs	r3, #12
 800b588:	18fb      	adds	r3, r7, r3
 800b58a:	881a      	ldrh	r2, [r3, #0]
 800b58c:	230f      	movs	r3, #15
 800b58e:	18fb      	adds	r3, r7, r3
 800b590:	7819      	ldrb	r1, [r3, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	0018      	movs	r0, r3
 800b596:	f7ff fa08 	bl	800a9aa <HAL_I2C_AddrCallback>
}
 800b59a:	e007      	b.n	800b5ac <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2208      	movs	r2, #8
 800b5a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2240      	movs	r2, #64	@ 0x40
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	5499      	strb	r1, [r3, r2]
}
 800b5ac:	46c0      	nop			@ (mov r8, r8)
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	b004      	add	sp, #16
 800b5b2:	bdb0      	pop	{r4, r5, r7, pc}

0800b5b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2242      	movs	r2, #66	@ 0x42
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2241      	movs	r2, #65	@ 0x41
 800b5c8:	5c9b      	ldrb	r3, [r3, r2]
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b21      	cmp	r3, #33	@ 0x21
 800b5ce:	d117      	bne.n	800b600 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2241      	movs	r2, #65	@ 0x41
 800b5d4:	2120      	movs	r1, #32
 800b5d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2211      	movs	r2, #17
 800b5dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	f000 fdbd 	bl	800c168 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2240      	movs	r2, #64	@ 0x40
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f7ff f9b6 	bl	800a96a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b5fe:	e016      	b.n	800b62e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2241      	movs	r2, #65	@ 0x41
 800b604:	2120      	movs	r1, #32
 800b606:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2212      	movs	r2, #18
 800b60c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2102      	movs	r1, #2
 800b618:	0018      	movs	r0, r3
 800b61a:	f000 fda5 	bl	800c168 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2240      	movs	r2, #64	@ 0x40
 800b622:	2100      	movs	r1, #0
 800b624:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	0018      	movs	r0, r3
 800b62a:	f7ff f9a6 	bl	800a97a <HAL_I2C_MasterRxCpltCallback>
}
 800b62e:	46c0      	nop			@ (mov r8, r8)
 800b630:	46bd      	mov	sp, r7
 800b632:	b002      	add	sp, #8
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2242      	movs	r2, #66	@ 0x42
 800b64c:	2100      	movs	r1, #0
 800b64e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	2380      	movs	r3, #128	@ 0x80
 800b654:	01db      	lsls	r3, r3, #7
 800b656:	4013      	ands	r3, r2
 800b658:	d008      	beq.n	800b66c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4924      	ldr	r1, [pc, #144]	@ (800b6f8 <I2C_ITSlaveSeqCplt+0xc0>)
 800b666:	400a      	ands	r2, r1
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	e00c      	b.n	800b686 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	2380      	movs	r3, #128	@ 0x80
 800b670:	021b      	lsls	r3, r3, #8
 800b672:	4013      	ands	r3, r2
 800b674:	d007      	beq.n	800b686 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	491e      	ldr	r1, [pc, #120]	@ (800b6fc <I2C_ITSlaveSeqCplt+0xc4>)
 800b682:	400a      	ands	r2, r1
 800b684:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2241      	movs	r2, #65	@ 0x41
 800b68a:	5c9b      	ldrb	r3, [r3, r2]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b29      	cmp	r3, #41	@ 0x29
 800b690:	d114      	bne.n	800b6bc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2241      	movs	r2, #65	@ 0x41
 800b696:	2128      	movs	r1, #40	@ 0x28
 800b698:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2221      	movs	r2, #33	@ 0x21
 800b69e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2101      	movs	r1, #1
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	f000 fd5f 	bl	800c168 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2240      	movs	r2, #64	@ 0x40
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	f7ff f968 	bl	800a98a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b6ba:	e019      	b.n	800b6f0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2241      	movs	r2, #65	@ 0x41
 800b6c0:	5c9b      	ldrb	r3, [r3, r2]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6c6:	d113      	bne.n	800b6f0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2241      	movs	r2, #65	@ 0x41
 800b6cc:	2128      	movs	r1, #40	@ 0x28
 800b6ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2222      	movs	r2, #34	@ 0x22
 800b6d4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2102      	movs	r1, #2
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f000 fd44 	bl	800c168 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2240      	movs	r2, #64	@ 0x40
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f7ff f955 	bl	800a99a <HAL_I2C_SlaveRxCpltCallback>
}
 800b6f0:	46c0      	nop			@ (mov r8, r8)
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	b004      	add	sp, #16
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	ffffbfff 	.word	0xffffbfff
 800b6fc:	ffff7fff 	.word	0xffff7fff

0800b700 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2220      	movs	r2, #32
 800b714:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2241      	movs	r2, #65	@ 0x41
 800b71a:	5c9b      	ldrb	r3, [r3, r2]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b21      	cmp	r3, #33	@ 0x21
 800b720:	d108      	bne.n	800b734 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2101      	movs	r1, #1
 800b726:	0018      	movs	r0, r3
 800b728:	f000 fd1e 	bl	800c168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2211      	movs	r2, #17
 800b730:	631a      	str	r2, [r3, #48]	@ 0x30
 800b732:	e00d      	b.n	800b750 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2241      	movs	r2, #65	@ 0x41
 800b738:	5c9b      	ldrb	r3, [r3, r2]
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b22      	cmp	r3, #34	@ 0x22
 800b73e:	d107      	bne.n	800b750 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2102      	movs	r1, #2
 800b744:	0018      	movs	r0, r3
 800b746:	f000 fd0f 	bl	800c168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2212      	movs	r2, #18
 800b74e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	494e      	ldr	r1, [pc, #312]	@ (800b894 <I2C_ITMasterCplt+0x194>)
 800b75c:	400a      	ands	r2, r1
 800b75e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a4b      	ldr	r2, [pc, #300]	@ (800b898 <I2C_ITMasterCplt+0x198>)
 800b76a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2210      	movs	r2, #16
 800b770:	4013      	ands	r3, r2
 800b772:	d009      	beq.n	800b788 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2210      	movs	r2, #16
 800b77a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b780:	2204      	movs	r2, #4
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2241      	movs	r2, #65	@ 0x41
 800b78c:	5c9b      	ldrb	r3, [r3, r2]
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b60      	cmp	r3, #96	@ 0x60
 800b792:	d109      	bne.n	800b7a8 <I2C_ITMasterCplt+0xa8>
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2204      	movs	r2, #4
 800b798:	4013      	ands	r3, r2
 800b79a:	d005      	beq.n	800b7a8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	f000 fb19 	bl	800bde2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2241      	movs	r2, #65	@ 0x41
 800b7ba:	5c9b      	ldrb	r3, [r3, r2]
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b60      	cmp	r3, #96	@ 0x60
 800b7c0:	d002      	beq.n	800b7c8 <I2C_ITMasterCplt+0xc8>
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d007      	beq.n	800b7d8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	0011      	movs	r1, r2
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f000 f9db 	bl	800bb8c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b7d6:	e058      	b.n	800b88a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2241      	movs	r2, #65	@ 0x41
 800b7dc:	5c9b      	ldrb	r3, [r3, r2]
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b21      	cmp	r3, #33	@ 0x21
 800b7e2:	d126      	bne.n	800b832 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2241      	movs	r2, #65	@ 0x41
 800b7e8:	2120      	movs	r1, #32
 800b7ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2242      	movs	r2, #66	@ 0x42
 800b7f6:	5c9b      	ldrb	r3, [r3, r2]
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b40      	cmp	r3, #64	@ 0x40
 800b7fc:	d10c      	bne.n	800b818 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2242      	movs	r2, #66	@ 0x42
 800b802:	2100      	movs	r1, #0
 800b804:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2240      	movs	r2, #64	@ 0x40
 800b80a:	2100      	movs	r1, #0
 800b80c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	0018      	movs	r0, r3
 800b812:	f7ff f8e2 	bl	800a9da <HAL_I2C_MemTxCpltCallback>
}
 800b816:	e038      	b.n	800b88a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2242      	movs	r2, #66	@ 0x42
 800b81c:	2100      	movs	r1, #0
 800b81e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2240      	movs	r2, #64	@ 0x40
 800b824:	2100      	movs	r1, #0
 800b826:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	0018      	movs	r0, r3
 800b82c:	f7ff f89d 	bl	800a96a <HAL_I2C_MasterTxCpltCallback>
}
 800b830:	e02b      	b.n	800b88a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2241      	movs	r2, #65	@ 0x41
 800b836:	5c9b      	ldrb	r3, [r3, r2]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b22      	cmp	r3, #34	@ 0x22
 800b83c:	d125      	bne.n	800b88a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2241      	movs	r2, #65	@ 0x41
 800b842:	2120      	movs	r1, #32
 800b844:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2242      	movs	r2, #66	@ 0x42
 800b850:	5c9b      	ldrb	r3, [r3, r2]
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b40      	cmp	r3, #64	@ 0x40
 800b856:	d10c      	bne.n	800b872 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2242      	movs	r2, #66	@ 0x42
 800b85c:	2100      	movs	r1, #0
 800b85e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2240      	movs	r2, #64	@ 0x40
 800b864:	2100      	movs	r1, #0
 800b866:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	0018      	movs	r0, r3
 800b86c:	f7ff f8bd 	bl	800a9ea <HAL_I2C_MemRxCpltCallback>
}
 800b870:	e00b      	b.n	800b88a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2242      	movs	r2, #66	@ 0x42
 800b876:	2100      	movs	r1, #0
 800b878:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2240      	movs	r2, #64	@ 0x40
 800b87e:	2100      	movs	r1, #0
 800b880:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	0018      	movs	r0, r3
 800b886:	f7ff f878 	bl	800a97a <HAL_I2C_MasterRxCpltCallback>
}
 800b88a:	46c0      	nop			@ (mov r8, r8)
 800b88c:	46bd      	mov	sp, r7
 800b88e:	b006      	add	sp, #24
 800b890:	bd80      	pop	{r7, pc}
 800b892:	46c0      	nop			@ (mov r8, r8)
 800b894:	fe00e800 	.word	0xfe00e800
 800b898:	ffff0000 	.word	0xffff0000

0800b89c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b8b2:	200f      	movs	r0, #15
 800b8b4:	183b      	adds	r3, r7, r0
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	2141      	movs	r1, #65	@ 0x41
 800b8ba:	5c52      	ldrb	r2, [r2, r1]
 800b8bc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b8c6:	183b      	adds	r3, r7, r0
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b21      	cmp	r3, #33	@ 0x21
 800b8cc:	d003      	beq.n	800b8d6 <I2C_ITSlaveCplt+0x3a>
 800b8ce:	183b      	adds	r3, r7, r0
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b29      	cmp	r3, #41	@ 0x29
 800b8d4:	d109      	bne.n	800b8ea <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b8d6:	4a7b      	ldr	r2, [pc, #492]	@ (800bac4 <I2C_ITSlaveCplt+0x228>)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	0011      	movs	r1, r2
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f000 fc43 	bl	800c168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2221      	movs	r2, #33	@ 0x21
 800b8e6:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8e8:	e011      	b.n	800b90e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b8ea:	220f      	movs	r2, #15
 800b8ec:	18bb      	adds	r3, r7, r2
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2b22      	cmp	r3, #34	@ 0x22
 800b8f2:	d003      	beq.n	800b8fc <I2C_ITSlaveCplt+0x60>
 800b8f4:	18bb      	adds	r3, r7, r2
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8fa:	d108      	bne.n	800b90e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b8fc:	4a72      	ldr	r2, [pc, #456]	@ (800bac8 <I2C_ITSlaveCplt+0x22c>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	0011      	movs	r1, r2
 800b902:	0018      	movs	r0, r3
 800b904:	f000 fc30 	bl	800c168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2222      	movs	r2, #34	@ 0x22
 800b90c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2180      	movs	r1, #128	@ 0x80
 800b91a:	0209      	lsls	r1, r1, #8
 800b91c:	430a      	orrs	r2, r1
 800b91e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4968      	ldr	r1, [pc, #416]	@ (800bacc <I2C_ITSlaveCplt+0x230>)
 800b92c:	400a      	ands	r2, r1
 800b92e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	0018      	movs	r0, r3
 800b934:	f000 fa55 	bl	800bde2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	2380      	movs	r3, #128	@ 0x80
 800b93c:	01db      	lsls	r3, r3, #7
 800b93e:	4013      	ands	r3, r2
 800b940:	d013      	beq.n	800b96a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4960      	ldr	r1, [pc, #384]	@ (800bad0 <I2C_ITSlaveCplt+0x234>)
 800b94e:	400a      	ands	r2, r1
 800b950:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01f      	beq.n	800b99a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	b29a      	uxth	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b968:	e017      	b.n	800b99a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	2380      	movs	r3, #128	@ 0x80
 800b96e:	021b      	lsls	r3, r3, #8
 800b970:	4013      	ands	r3, r2
 800b972:	d012      	beq.n	800b99a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4955      	ldr	r1, [pc, #340]	@ (800bad4 <I2C_ITSlaveCplt+0x238>)
 800b980:	400a      	ands	r2, r1
 800b982:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d006      	beq.n	800b99a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	b29a      	uxth	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2204      	movs	r2, #4
 800b99e:	4013      	ands	r3, r2
 800b9a0:	d020      	beq.n	800b9e4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2204      	movs	r2, #4
 800b9a6:	4393      	bics	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b4:	b2d2      	uxtb	r2, r2
 800b9b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00c      	beq.n	800b9e4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9f2:	2204      	movs	r2, #4
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2242      	movs	r2, #66	@ 0x42
 800b9fe:	2100      	movs	r1, #0
 800ba00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d013      	beq.n	800ba38 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	0011      	movs	r1, r2
 800ba18:	0018      	movs	r0, r3
 800ba1a:	f000 f8b7 	bl	800bb8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2241      	movs	r2, #65	@ 0x41
 800ba22:	5c9b      	ldrb	r3, [r3, r2]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b28      	cmp	r3, #40	@ 0x28
 800ba28:	d147      	bne.n	800baba <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	0011      	movs	r1, r2
 800ba30:	0018      	movs	r0, r3
 800ba32:	f000 f853 	bl	800badc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ba36:	e040      	b.n	800baba <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	4a26      	ldr	r2, [pc, #152]	@ (800bad8 <I2C_ITSlaveCplt+0x23c>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d016      	beq.n	800ba70 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	0018      	movs	r0, r3
 800ba46:	f7ff fdf7 	bl	800b638 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a22      	ldr	r2, [pc, #136]	@ (800bad8 <I2C_ITSlaveCplt+0x23c>)
 800ba4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2241      	movs	r2, #65	@ 0x41
 800ba54:	2120      	movs	r1, #32
 800ba56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2240      	movs	r2, #64	@ 0x40
 800ba62:	2100      	movs	r1, #0
 800ba64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	0018      	movs	r0, r3
 800ba6a:	f7fe ffae 	bl	800a9ca <HAL_I2C_ListenCpltCallback>
}
 800ba6e:	e024      	b.n	800baba <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2241      	movs	r2, #65	@ 0x41
 800ba74:	5c9b      	ldrb	r3, [r3, r2]
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b22      	cmp	r3, #34	@ 0x22
 800ba7a:	d10f      	bne.n	800ba9c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2241      	movs	r2, #65	@ 0x41
 800ba80:	2120      	movs	r1, #32
 800ba82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2240      	movs	r2, #64	@ 0x40
 800ba8e:	2100      	movs	r1, #0
 800ba90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	0018      	movs	r0, r3
 800ba96:	f7fe ff80 	bl	800a99a <HAL_I2C_SlaveRxCpltCallback>
}
 800ba9a:	e00e      	b.n	800baba <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2241      	movs	r2, #65	@ 0x41
 800baa0:	2120      	movs	r1, #32
 800baa2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2240      	movs	r2, #64	@ 0x40
 800baae:	2100      	movs	r1, #0
 800bab0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	0018      	movs	r0, r3
 800bab6:	f7fe ff68 	bl	800a98a <HAL_I2C_SlaveTxCpltCallback>
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b006      	add	sp, #24
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	00008001 	.word	0x00008001
 800bac8:	00008002 	.word	0x00008002
 800bacc:	fe00e800 	.word	0xfe00e800
 800bad0:	ffffbfff 	.word	0xffffbfff
 800bad4:	ffff7fff 	.word	0xffff7fff
 800bad8:	ffff0000 	.word	0xffff0000

0800badc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a26      	ldr	r2, [pc, #152]	@ (800bb84 <I2C_ITListenCplt+0xa8>)
 800baea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2241      	movs	r2, #65	@ 0x41
 800baf6:	2120      	movs	r1, #32
 800baf8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2242      	movs	r2, #66	@ 0x42
 800bafe:	2100      	movs	r1, #0
 800bb00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	2204      	movs	r2, #4
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	d022      	beq.n	800bb56 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb1a:	b2d2      	uxtb	r2, r2
 800bb1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d012      	beq.n	800bb56 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb34:	3b01      	subs	r3, #1
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	3b01      	subs	r3, #1
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb4e:	2204      	movs	r2, #4
 800bb50:	431a      	orrs	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bb56:	4a0c      	ldr	r2, [pc, #48]	@ (800bb88 <I2C_ITListenCplt+0xac>)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	0011      	movs	r1, r2
 800bb5c:	0018      	movs	r0, r3
 800bb5e:	f000 fb03 	bl	800c168 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2210      	movs	r2, #16
 800bb68:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2240      	movs	r2, #64	@ 0x40
 800bb6e:	2100      	movs	r1, #0
 800bb70:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	0018      	movs	r0, r3
 800bb76:	f7fe ff28 	bl	800a9ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bb7a:	46c0      	nop			@ (mov r8, r8)
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	b002      	add	sp, #8
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	46c0      	nop			@ (mov r8, r8)
 800bb84:	ffff0000 	.word	0xffff0000
 800bb88:	00008003 	.word	0x00008003

0800bb8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bb96:	200f      	movs	r0, #15
 800bb98:	183b      	adds	r3, r7, r0
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	2141      	movs	r1, #65	@ 0x41
 800bb9e:	5c52      	ldrb	r2, [r2, r1]
 800bba0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2242      	movs	r2, #66	@ 0x42
 800bba6:	2100      	movs	r1, #0
 800bba8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a72      	ldr	r2, [pc, #456]	@ (800bd78 <I2C_ITError+0x1ec>)
 800bbae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	431a      	orrs	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bbc2:	183b      	adds	r3, r7, r0
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b28      	cmp	r3, #40	@ 0x28
 800bbc8:	d007      	beq.n	800bbda <I2C_ITError+0x4e>
 800bbca:	183b      	adds	r3, r7, r0
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b29      	cmp	r3, #41	@ 0x29
 800bbd0:	d003      	beq.n	800bbda <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bbd2:	183b      	adds	r3, r7, r0
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd8:	d10c      	bne.n	800bbf4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2103      	movs	r1, #3
 800bbde:	0018      	movs	r0, r3
 800bbe0:	f000 fac2 	bl	800c168 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2241      	movs	r2, #65	@ 0x41
 800bbe8:	2128      	movs	r1, #40	@ 0x28
 800bbea:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a63      	ldr	r2, [pc, #396]	@ (800bd7c <I2C_ITError+0x1f0>)
 800bbf0:	635a      	str	r2, [r3, #52]	@ 0x34
 800bbf2:	e032      	b.n	800bc5a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bbf4:	4a62      	ldr	r2, [pc, #392]	@ (800bd80 <I2C_ITError+0x1f4>)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	0011      	movs	r1, r2
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f000 fab4 	bl	800c168 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	0018      	movs	r0, r3
 800bc04:	f000 f8ed 	bl	800bde2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2241      	movs	r2, #65	@ 0x41
 800bc0c:	5c9b      	ldrb	r3, [r3, r2]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b60      	cmp	r3, #96	@ 0x60
 800bc12:	d01f      	beq.n	800bc54 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2241      	movs	r2, #65	@ 0x41
 800bc18:	2120      	movs	r1, #32
 800bc1a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	2220      	movs	r2, #32
 800bc24:	4013      	ands	r3, r2
 800bc26:	2b20      	cmp	r3, #32
 800bc28:	d114      	bne.n	800bc54 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	2210      	movs	r2, #16
 800bc32:	4013      	ands	r3, r2
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d109      	bne.n	800bc4c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2210      	movs	r2, #16
 800bc3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc44:	2204      	movs	r2, #4
 800bc46:	431a      	orrs	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2220      	movs	r2, #32
 800bc52:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d03b      	beq.n	800bce0 <I2C_ITError+0x154>
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2b11      	cmp	r3, #17
 800bc6c:	d002      	beq.n	800bc74 <I2C_ITError+0xe8>
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2b21      	cmp	r3, #33	@ 0x21
 800bc72:	d135      	bne.n	800bce0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	2380      	movs	r3, #128	@ 0x80
 800bc7c:	01db      	lsls	r3, r3, #7
 800bc7e:	401a      	ands	r2, r3
 800bc80:	2380      	movs	r3, #128	@ 0x80
 800bc82:	01db      	lsls	r3, r3, #7
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d107      	bne.n	800bc98 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	493c      	ldr	r1, [pc, #240]	@ (800bd84 <I2C_ITError+0x1f8>)
 800bc94:	400a      	ands	r2, r1
 800bc96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	f7fe f896 	bl	8009dce <HAL_DMA_GetState>
 800bca2:	0003      	movs	r3, r0
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d016      	beq.n	800bcd6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcac:	4a36      	ldr	r2, [pc, #216]	@ (800bd88 <I2C_ITError+0x1fc>)
 800bcae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2240      	movs	r2, #64	@ 0x40
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	f7fd ff91 	bl	8009be4 <HAL_DMA_Abort_IT>
 800bcc2:	1e03      	subs	r3, r0, #0
 800bcc4:	d051      	beq.n	800bd6a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bcd4:	e049      	b.n	800bd6a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	0018      	movs	r0, r3
 800bcda:	f000 f859 	bl	800bd90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bcde:	e044      	b.n	800bd6a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d03b      	beq.n	800bd60 <I2C_ITError+0x1d4>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b12      	cmp	r3, #18
 800bcec:	d002      	beq.n	800bcf4 <I2C_ITError+0x168>
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2b22      	cmp	r3, #34	@ 0x22
 800bcf2:	d135      	bne.n	800bd60 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	2380      	movs	r3, #128	@ 0x80
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	401a      	ands	r2, r3
 800bd00:	2380      	movs	r3, #128	@ 0x80
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d107      	bne.n	800bd18 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	491e      	ldr	r1, [pc, #120]	@ (800bd8c <I2C_ITError+0x200>)
 800bd14:	400a      	ands	r2, r1
 800bd16:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	f7fe f856 	bl	8009dce <HAL_DMA_GetState>
 800bd22:	0003      	movs	r3, r0
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d016      	beq.n	800bd56 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd2c:	4a16      	ldr	r2, [pc, #88]	@ (800bd88 <I2C_ITError+0x1fc>)
 800bd2e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2240      	movs	r2, #64	@ 0x40
 800bd34:	2100      	movs	r1, #0
 800bd36:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd3c:	0018      	movs	r0, r3
 800bd3e:	f7fd ff51 	bl	8009be4 <HAL_DMA_Abort_IT>
 800bd42:	1e03      	subs	r3, r0, #0
 800bd44:	d013      	beq.n	800bd6e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd50:	0018      	movs	r0, r3
 800bd52:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd54:	e00b      	b.n	800bd6e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	0018      	movs	r0, r3
 800bd5a:	f000 f819 	bl	800bd90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd5e:	e006      	b.n	800bd6e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	0018      	movs	r0, r3
 800bd64:	f000 f814 	bl	800bd90 <I2C_TreatErrorCallback>
  }
}
 800bd68:	e002      	b.n	800bd70 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bd6a:	46c0      	nop			@ (mov r8, r8)
 800bd6c:	e000      	b.n	800bd70 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd6e:	46c0      	nop			@ (mov r8, r8)
}
 800bd70:	46c0      	nop			@ (mov r8, r8)
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b004      	add	sp, #16
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	ffff0000 	.word	0xffff0000
 800bd7c:	0800ac71 	.word	0x0800ac71
 800bd80:	00008003 	.word	0x00008003
 800bd84:	ffffbfff 	.word	0xffffbfff
 800bd88:	0800bf9b 	.word	0x0800bf9b
 800bd8c:	ffff7fff 	.word	0xffff7fff

0800bd90 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2241      	movs	r2, #65	@ 0x41
 800bd9c:	5c9b      	ldrb	r3, [r3, r2]
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b60      	cmp	r3, #96	@ 0x60
 800bda2:	d10f      	bne.n	800bdc4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2241      	movs	r2, #65	@ 0x41
 800bda8:	2120      	movs	r1, #32
 800bdaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2240      	movs	r2, #64	@ 0x40
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	f7fe fe24 	bl	800aa0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bdc2:	e00a      	b.n	800bdda <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2240      	movs	r2, #64	@ 0x40
 800bdce:	2100      	movs	r1, #0
 800bdd0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f7fe fe10 	bl	800a9fa <HAL_I2C_ErrorCallback>
}
 800bdda:	46c0      	nop			@ (mov r8, r8)
 800bddc:	46bd      	mov	sp, r7
 800bdde:	b002      	add	sp, #8
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b082      	sub	sp, #8
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d103      	bne.n	800be00 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	2201      	movs	r2, #1
 800be08:	4013      	ands	r3, r2
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d007      	beq.n	800be1e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	699a      	ldr	r2, [r3, #24]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2101      	movs	r1, #1
 800be1a:	430a      	orrs	r2, r1
 800be1c:	619a      	str	r2, [r3, #24]
  }
}
 800be1e:	46c0      	nop			@ (mov r8, r8)
 800be20:	46bd      	mov	sp, r7
 800be22:	b002      	add	sp, #8
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be34:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4920      	ldr	r1, [pc, #128]	@ (800bec4 <I2C_DMAMasterTransmitCplt+0x9c>)
 800be42:	400a      	ands	r2, r1
 800be44:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d105      	bne.n	800be5c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2120      	movs	r1, #32
 800be54:	0018      	movs	r0, r3
 800be56:	f000 f8f9 	bl	800c04c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800be5a:	e02e      	b.n	800beba <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800be64:	189a      	adds	r2, r3, r2
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be6e:	b29b      	uxth	r3, r3
 800be70:	2bff      	cmp	r3, #255	@ 0xff
 800be72:	d903      	bls.n	800be7c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	22ff      	movs	r2, #255	@ 0xff
 800be78:	851a      	strh	r2, [r3, #40]	@ 0x28
 800be7a:	e004      	b.n	800be86 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be80:	b29a      	uxth	r2, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be8e:	0019      	movs	r1, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3328      	adds	r3, #40	@ 0x28
 800be96:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800be9c:	f7fd fdfc 	bl	8009a98 <HAL_DMA_Start_IT>
 800bea0:	1e03      	subs	r3, r0, #0
 800bea2:	d005      	beq.n	800beb0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2110      	movs	r1, #16
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7ff fe6f 	bl	800bb8c <I2C_ITError>
}
 800beae:	e004      	b.n	800beba <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2140      	movs	r1, #64	@ 0x40
 800beb4:	0018      	movs	r0, r3
 800beb6:	f000 f8c9 	bl	800c04c <I2C_Enable_IRQ>
}
 800beba:	46c0      	nop			@ (mov r8, r8)
 800bebc:	46bd      	mov	sp, r7
 800bebe:	b004      	add	sp, #16
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	46c0      	nop			@ (mov r8, r8)
 800bec4:	ffffbfff 	.word	0xffffbfff

0800bec8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4920      	ldr	r1, [pc, #128]	@ (800bf64 <I2C_DMAMasterReceiveCplt+0x9c>)
 800bee2:	400a      	ands	r2, r1
 800bee4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800beea:	b29b      	uxth	r3, r3
 800beec:	2b00      	cmp	r3, #0
 800beee:	d105      	bne.n	800befc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2120      	movs	r1, #32
 800bef4:	0018      	movs	r0, r3
 800bef6:	f000 f8a9 	bl	800c04c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800befa:	e02e      	b.n	800bf5a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800bf04:	189a      	adds	r2, r3, r2
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	2bff      	cmp	r3, #255	@ 0xff
 800bf12:	d903      	bls.n	800bf1c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	22ff      	movs	r2, #255	@ 0xff
 800bf18:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bf1a:	e004      	b.n	800bf26 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3324      	adds	r3, #36	@ 0x24
 800bf30:	0019      	movs	r1, r3
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf36:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800bf3c:	f7fd fdac 	bl	8009a98 <HAL_DMA_Start_IT>
 800bf40:	1e03      	subs	r3, r0, #0
 800bf42:	d005      	beq.n	800bf50 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2110      	movs	r1, #16
 800bf48:	0018      	movs	r0, r3
 800bf4a:	f7ff fe1f 	bl	800bb8c <I2C_ITError>
}
 800bf4e:	e004      	b.n	800bf5a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2140      	movs	r1, #64	@ 0x40
 800bf54:	0018      	movs	r0, r3
 800bf56:	f000 f879 	bl	800c04c <I2C_Enable_IRQ>
}
 800bf5a:	46c0      	nop			@ (mov r8, r8)
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	b004      	add	sp, #16
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	46c0      	nop			@ (mov r8, r8)
 800bf64:	ffff7fff 	.word	0xffff7fff

0800bf68 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf74:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2180      	movs	r1, #128	@ 0x80
 800bf82:	0209      	lsls	r1, r1, #8
 800bf84:	430a      	orrs	r2, r1
 800bf86:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2110      	movs	r1, #16
 800bf8c:	0018      	movs	r0, r3
 800bf8e:	f7ff fdfd 	bl	800bb8c <I2C_ITError>
}
 800bf92:	46c0      	nop			@ (mov r8, r8)
 800bf94:	46bd      	mov	sp, r7
 800bf96:	b004      	add	sp, #16
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f7ff fee0 	bl	800bd90 <I2C_TreatErrorCallback>
}
 800bfd0:	46c0      	nop			@ (mov r8, r8)
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	b004      	add	sp, #16
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bfd8:	b590      	push	{r4, r7, lr}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	0008      	movs	r0, r1
 800bfe2:	0011      	movs	r1, r2
 800bfe4:	607b      	str	r3, [r7, #4]
 800bfe6:	240a      	movs	r4, #10
 800bfe8:	193b      	adds	r3, r7, r4
 800bfea:	1c02      	adds	r2, r0, #0
 800bfec:	801a      	strh	r2, [r3, #0]
 800bfee:	2009      	movs	r0, #9
 800bff0:	183b      	adds	r3, r7, r0
 800bff2:	1c0a      	adds	r2, r1, #0
 800bff4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bff6:	193b      	adds	r3, r7, r4
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	059b      	lsls	r3, r3, #22
 800bffc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bffe:	183b      	adds	r3, r7, r0
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	0419      	lsls	r1, r3, #16
 800c004:	23ff      	movs	r3, #255	@ 0xff
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c00a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c012:	4313      	orrs	r3, r2
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	085b      	lsrs	r3, r3, #1
 800c018:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c022:	0d51      	lsrs	r1, r2, #21
 800c024:	2280      	movs	r2, #128	@ 0x80
 800c026:	00d2      	lsls	r2, r2, #3
 800c028:	400a      	ands	r2, r1
 800c02a:	4907      	ldr	r1, [pc, #28]	@ (800c048 <I2C_TransferConfig+0x70>)
 800c02c:	430a      	orrs	r2, r1
 800c02e:	43d2      	mvns	r2, r2
 800c030:	401a      	ands	r2, r3
 800c032:	0011      	movs	r1, r2
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	430a      	orrs	r2, r1
 800c03c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c03e:	46c0      	nop			@ (mov r8, r8)
 800c040:	46bd      	mov	sp, r7
 800c042:	b007      	add	sp, #28
 800c044:	bd90      	pop	{r4, r7, pc}
 800c046:	46c0      	nop			@ (mov r8, r8)
 800c048:	03ff63ff 	.word	0x03ff63ff

0800c04c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	000a      	movs	r2, r1
 800c056:	1cbb      	adds	r3, r7, #2
 800c058:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c062:	4b3e      	ldr	r3, [pc, #248]	@ (800c15c <I2C_Enable_IRQ+0x110>)
 800c064:	429a      	cmp	r2, r3
 800c066:	d035      	beq.n	800c0d4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c06c:	4b3c      	ldr	r3, [pc, #240]	@ (800c160 <I2C_Enable_IRQ+0x114>)
 800c06e:	429a      	cmp	r2, r3
 800c070:	d030      	beq.n	800c0d4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c076:	4b3b      	ldr	r3, [pc, #236]	@ (800c164 <I2C_Enable_IRQ+0x118>)
 800c078:	429a      	cmp	r2, r3
 800c07a:	d02b      	beq.n	800c0d4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c07c:	1cbb      	adds	r3, r7, #2
 800c07e:	2200      	movs	r2, #0
 800c080:	5e9b      	ldrsh	r3, [r3, r2]
 800c082:	2b00      	cmp	r3, #0
 800c084:	da03      	bge.n	800c08e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	22b8      	movs	r2, #184	@ 0xb8
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c08e:	1cbb      	adds	r3, r7, #2
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	2201      	movs	r2, #1
 800c094:	4013      	ands	r3, r2
 800c096:	d003      	beq.n	800c0a0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	22f2      	movs	r2, #242	@ 0xf2
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c0a0:	1cbb      	adds	r3, r7, #2
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	d003      	beq.n	800c0b2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	22f4      	movs	r2, #244	@ 0xf4
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c0b2:	1cbb      	adds	r3, r7, #2
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	2b10      	cmp	r3, #16
 800c0b8:	d103      	bne.n	800c0c2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2290      	movs	r2, #144	@ 0x90
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c0c2:	1cbb      	adds	r3, r7, #2
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	2b20      	cmp	r3, #32
 800c0c8:	d13c      	bne.n	800c144 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2220      	movs	r2, #32
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c0d2:	e037      	b.n	800c144 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c0d4:	1cbb      	adds	r3, r7, #2
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	5e9b      	ldrsh	r3, [r3, r2]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	da03      	bge.n	800c0e6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	22b8      	movs	r2, #184	@ 0xb8
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c0e6:	1cbb      	adds	r3, r7, #2
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	d003      	beq.n	800c0f8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	22f2      	movs	r2, #242	@ 0xf2
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c0f8:	1cbb      	adds	r3, r7, #2
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	4013      	ands	r3, r2
 800c100:	d003      	beq.n	800c10a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	22f4      	movs	r2, #244	@ 0xf4
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c10a:	1cbb      	adds	r3, r7, #2
 800c10c:	881b      	ldrh	r3, [r3, #0]
 800c10e:	2b10      	cmp	r3, #16
 800c110:	d103      	bne.n	800c11a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2290      	movs	r2, #144	@ 0x90
 800c116:	4313      	orrs	r3, r2
 800c118:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c11a:	1cbb      	adds	r3, r7, #2
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	2b20      	cmp	r3, #32
 800c120:	d103      	bne.n	800c12a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2260      	movs	r2, #96	@ 0x60
 800c126:	4313      	orrs	r3, r2
 800c128:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c12e:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <I2C_Enable_IRQ+0x118>)
 800c130:	429a      	cmp	r2, r3
 800c132:	d007      	beq.n	800c144 <I2C_Enable_IRQ+0xf8>
 800c134:	1cbb      	adds	r3, r7, #2
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	2b40      	cmp	r3, #64	@ 0x40
 800c13a:	d103      	bne.n	800c144 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2240      	movs	r2, #64	@ 0x40
 800c140:	4313      	orrs	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6819      	ldr	r1, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	430a      	orrs	r2, r1
 800c152:	601a      	str	r2, [r3, #0]
}
 800c154:	46c0      	nop			@ (mov r8, r8)
 800c156:	46bd      	mov	sp, r7
 800c158:	b004      	add	sp, #16
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	0800ae71 	.word	0x0800ae71
 800c160:	0800b2a1 	.word	0x0800b2a1
 800c164:	0800b069 	.word	0x0800b069

0800c168 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	000a      	movs	r2, r1
 800c172:	1cbb      	adds	r3, r7, #2
 800c174:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c17a:	1cbb      	adds	r3, r7, #2
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	2201      	movs	r2, #1
 800c180:	4013      	ands	r3, r2
 800c182:	d010      	beq.n	800c1a6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2242      	movs	r2, #66	@ 0x42
 800c188:	4313      	orrs	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2241      	movs	r2, #65	@ 0x41
 800c190:	5c9b      	ldrb	r3, [r3, r2]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	001a      	movs	r2, r3
 800c196:	2328      	movs	r3, #40	@ 0x28
 800c198:	4013      	ands	r3, r2
 800c19a:	2b28      	cmp	r3, #40	@ 0x28
 800c19c:	d003      	beq.n	800c1a6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	22b0      	movs	r2, #176	@ 0xb0
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c1a6:	1cbb      	adds	r3, r7, #2
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	d010      	beq.n	800c1d2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2244      	movs	r2, #68	@ 0x44
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2241      	movs	r2, #65	@ 0x41
 800c1bc:	5c9b      	ldrb	r3, [r3, r2]
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	001a      	movs	r2, r3
 800c1c2:	2328      	movs	r3, #40	@ 0x28
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	2b28      	cmp	r3, #40	@ 0x28
 800c1c8:	d003      	beq.n	800c1d2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	22b0      	movs	r2, #176	@ 0xb0
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c1d2:	1cbb      	adds	r3, r7, #2
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	5e9b      	ldrsh	r3, [r3, r2]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	da03      	bge.n	800c1e4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	22b8      	movs	r2, #184	@ 0xb8
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c1e4:	1cbb      	adds	r3, r7, #2
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	2b10      	cmp	r3, #16
 800c1ea:	d103      	bne.n	800c1f4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2290      	movs	r2, #144	@ 0x90
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c1f4:	1cbb      	adds	r3, r7, #2
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	2b20      	cmp	r3, #32
 800c1fa:	d103      	bne.n	800c204 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2220      	movs	r2, #32
 800c200:	4313      	orrs	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c204:	1cbb      	adds	r3, r7, #2
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	2b40      	cmp	r3, #64	@ 0x40
 800c20a:	d103      	bne.n	800c214 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2240      	movs	r2, #64	@ 0x40
 800c210:	4313      	orrs	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	43d9      	mvns	r1, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	400a      	ands	r2, r1
 800c224:	601a      	str	r2, [r3, #0]
}
 800c226:	46c0      	nop			@ (mov r8, r8)
 800c228:	46bd      	mov	sp, r7
 800c22a:	b004      	add	sp, #16
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2241      	movs	r2, #65	@ 0x41
 800c23e:	5c9b      	ldrb	r3, [r3, r2]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b20      	cmp	r3, #32
 800c244:	d138      	bne.n	800c2b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2240      	movs	r2, #64	@ 0x40
 800c24a:	5c9b      	ldrb	r3, [r3, r2]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d101      	bne.n	800c254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c250:	2302      	movs	r3, #2
 800c252:	e032      	b.n	800c2ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2240      	movs	r2, #64	@ 0x40
 800c258:	2101      	movs	r1, #1
 800c25a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2241      	movs	r2, #65	@ 0x41
 800c260:	2124      	movs	r1, #36	@ 0x24
 800c262:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2101      	movs	r1, #1
 800c270:	438a      	bics	r2, r1
 800c272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	681a      	ldr	r2, [r3, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4911      	ldr	r1, [pc, #68]	@ (800c2c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c280:	400a      	ands	r2, r1
 800c282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6819      	ldr	r1, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2101      	movs	r1, #1
 800c2a0:	430a      	orrs	r2, r1
 800c2a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2241      	movs	r2, #65	@ 0x41
 800c2a8:	2120      	movs	r1, #32
 800c2aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2240      	movs	r2, #64	@ 0x40
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	e000      	b.n	800c2ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c2b8:	2302      	movs	r3, #2
  }
}
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	b002      	add	sp, #8
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	46c0      	nop			@ (mov r8, r8)
 800c2c4:	ffffefff 	.word	0xffffefff

0800c2c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2241      	movs	r2, #65	@ 0x41
 800c2d6:	5c9b      	ldrb	r3, [r3, r2]
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	2b20      	cmp	r3, #32
 800c2dc:	d139      	bne.n	800c352 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2240      	movs	r2, #64	@ 0x40
 800c2e2:	5c9b      	ldrb	r3, [r3, r2]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e033      	b.n	800c354 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2240      	movs	r2, #64	@ 0x40
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2241      	movs	r2, #65	@ 0x41
 800c2f8:	2124      	movs	r1, #36	@ 0x24
 800c2fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2101      	movs	r1, #1
 800c308:	438a      	bics	r2, r1
 800c30a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	4a11      	ldr	r2, [pc, #68]	@ (800c35c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c318:	4013      	ands	r3, r2
 800c31a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	021b      	lsls	r3, r3, #8
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2101      	movs	r1, #1
 800c33a:	430a      	orrs	r2, r1
 800c33c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2241      	movs	r2, #65	@ 0x41
 800c342:	2120      	movs	r1, #32
 800c344:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2240      	movs	r2, #64	@ 0x40
 800c34a:	2100      	movs	r1, #0
 800c34c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	e000      	b.n	800c354 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c352:	2302      	movs	r3, #2
  }
}
 800c354:	0018      	movs	r0, r3
 800c356:	46bd      	mov	sp, r7
 800c358:	b004      	add	sp, #16
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	fffff0ff 	.word	0xfffff0ff

0800c360 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e0e1      	b.n	800c536 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2235      	movs	r2, #53	@ 0x35
 800c376:	5c9b      	ldrb	r3, [r3, r2]
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d107      	bne.n	800c38e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2234      	movs	r2, #52	@ 0x34
 800c382:	2100      	movs	r1, #0
 800c384:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	0018      	movs	r0, r3
 800c38a:	f7f9 f917 	bl	80055bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2235      	movs	r2, #53	@ 0x35
 800c392:	2102      	movs	r1, #2
 800c394:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	69da      	ldr	r2, [r3, #28]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4967      	ldr	r1, [pc, #412]	@ (800c540 <HAL_I2S_Init+0x1e0>)
 800c3a2:	400a      	ands	r2, r1
 800c3a4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d073      	beq.n	800c49e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d102      	bne.n	800c3c4 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800c3be:	2310      	movs	r3, #16
 800c3c0:	617b      	str	r3, [r7, #20]
 800c3c2:	e001      	b.n	800c3c8 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800c3c4:	2320      	movs	r3, #32
 800c3c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	2b20      	cmp	r3, #32
 800c3ce:	d802      	bhi.n	800c3d6 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800c3d6:	f001 f957 	bl	800d688 <HAL_RCC_GetSysClockFreq>
 800c3da:	0003      	movs	r3, r0
 800c3dc:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	691a      	ldr	r2, [r3, #16]
 800c3e2:	2380      	movs	r3, #128	@ 0x80
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d131      	bne.n	800c44e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d016      	beq.n	800c420 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	0019      	movs	r1, r3
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f7f3 fec9 	bl	8000190 <__udivsi3>
 800c3fe:	0003      	movs	r3, r0
 800c400:	001a      	movs	r2, r3
 800c402:	0013      	movs	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	189b      	adds	r3, r3, r2
 800c408:	005b      	lsls	r3, r3, #1
 800c40a:	001a      	movs	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	695b      	ldr	r3, [r3, #20]
 800c410:	0019      	movs	r1, r3
 800c412:	0010      	movs	r0, r2
 800c414:	f7f3 febc 	bl	8000190 <__udivsi3>
 800c418:	0003      	movs	r3, r0
 800c41a:	3305      	adds	r3, #5
 800c41c:	613b      	str	r3, [r7, #16]
 800c41e:	e02a      	b.n	800c476 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	00db      	lsls	r3, r3, #3
 800c424:	0019      	movs	r1, r3
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f7f3 feb2 	bl	8000190 <__udivsi3>
 800c42c:	0003      	movs	r3, r0
 800c42e:	001a      	movs	r2, r3
 800c430:	0013      	movs	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	189b      	adds	r3, r3, r2
 800c436:	005b      	lsls	r3, r3, #1
 800c438:	001a      	movs	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	0019      	movs	r1, r3
 800c440:	0010      	movs	r0, r2
 800c442:	f7f3 fea5 	bl	8000190 <__udivsi3>
 800c446:	0003      	movs	r3, r0
 800c448:	3305      	adds	r3, #5
 800c44a:	613b      	str	r3, [r7, #16]
 800c44c:	e013      	b.n	800c476 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c44e:	6979      	ldr	r1, [r7, #20]
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7f3 fe9d 	bl	8000190 <__udivsi3>
 800c456:	0003      	movs	r3, r0
 800c458:	001a      	movs	r2, r3
 800c45a:	0013      	movs	r3, r2
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	189b      	adds	r3, r3, r2
 800c460:	005b      	lsls	r3, r3, #1
 800c462:	001a      	movs	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	0019      	movs	r1, r3
 800c46a:	0010      	movs	r0, r2
 800c46c:	f7f3 fe90 	bl	8000190 <__udivsi3>
 800c470:	0003      	movs	r3, r0
 800c472:	3305      	adds	r3, #5
 800c474:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	210a      	movs	r1, #10
 800c47a:	0018      	movs	r0, r3
 800c47c:	f7f3 fe88 	bl	8000190 <__udivsi3>
 800c480:	0003      	movs	r3, r0
 800c482:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2201      	movs	r2, #1
 800c488:	4013      	ands	r3, r2
 800c48a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	085b      	lsrs	r3, r3, #1
 800c494:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	021b      	lsls	r3, r3, #8
 800c49a:	61bb      	str	r3, [r7, #24]
 800c49c:	e003      	b.n	800c4a6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800c49e:	2302      	movs	r3, #2
 800c4a0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d902      	bls.n	800c4b2 <HAL_I2S_Init+0x152>
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2bff      	cmp	r3, #255	@ 0xff
 800c4b0:	d907      	bls.n	800c4c2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b6:	2210      	movs	r2, #16
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e039      	b.n	800c536 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	691a      	ldr	r2, [r3, #16]
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	431a      	orrs	r2, r3
 800c4ca:	0011      	movs	r1, r2
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69db      	ldr	r3, [r3, #28]
 800c4dc:	4a18      	ldr	r2, [pc, #96]	@ (800c540 <HAL_I2S_Init+0x1e0>)
 800c4de:	401a      	ands	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6859      	ldr	r1, [r3, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	4319      	orrs	r1, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	4319      	orrs	r1, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	431a      	orrs	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2180      	movs	r1, #128	@ 0x80
 800c4fe:	0109      	lsls	r1, r1, #4
 800c500:	430a      	orrs	r2, r1
 800c502:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	2b30      	cmp	r3, #48	@ 0x30
 800c50a:	d003      	beq.n	800c514 <HAL_I2S_Init+0x1b4>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	2bb0      	cmp	r3, #176	@ 0xb0
 800c512:	d108      	bne.n	800c526 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69da      	ldr	r2, [r3, #28]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2180      	movs	r1, #128	@ 0x80
 800c520:	0149      	lsls	r1, r1, #5
 800c522:	430a      	orrs	r2, r1
 800c524:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2235      	movs	r2, #53	@ 0x35
 800c530:	2101      	movs	r1, #1
 800c532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	0018      	movs	r0, r3
 800c538:	46bd      	mov	sp, r7
 800c53a:	b008      	add	sp, #32
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	46c0      	nop			@ (mov r8, r8)
 800c540:	fffff040 	.word	0xfffff040

0800c544 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e01b      	b.n	800c58e <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2235      	movs	r2, #53	@ 0x35
 800c55a:	2102      	movs	r1, #2
 800c55c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	69da      	ldr	r2, [r3, #28]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	490b      	ldr	r1, [pc, #44]	@ (800c598 <HAL_I2S_DeInit+0x54>)
 800c56a:	400a      	ands	r2, r1
 800c56c:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	0018      	movs	r0, r3
 800c572:	f7f9 f8bb 	bl	80056ec <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2235      	movs	r2, #53	@ 0x35
 800c580:	2100      	movs	r1, #0
 800c582:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2234      	movs	r2, #52	@ 0x34
 800c588:	2100      	movs	r1, #0
 800c58a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	0018      	movs	r0, r3
 800c590:	46bd      	mov	sp, r7
 800c592:	b002      	add	sp, #8
 800c594:	bd80      	pop	{r7, pc}
 800c596:	46c0      	nop			@ (mov r8, r8)
 800c598:	fffffbff 	.word	0xfffffbff

0800c59c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	1dbb      	adds	r3, r7, #6
 800c5a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <HAL_I2S_Receive_DMA+0x1c>
 800c5b0:	1dbb      	adds	r3, r7, #6
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e0a6      	b.n	800c70a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2234      	movs	r2, #52	@ 0x34
 800c5c0:	5c9b      	ldrb	r3, [r3, r2]
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d101      	bne.n	800c5cc <HAL_I2S_Receive_DMA+0x30>
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	e09e      	b.n	800c70a <HAL_I2S_Receive_DMA+0x16e>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2234      	movs	r2, #52	@ 0x34
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2235      	movs	r2, #53	@ 0x35
 800c5d8:	5c9b      	ldrb	r3, [r3, r2]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d005      	beq.n	800c5ec <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2234      	movs	r2, #52	@ 0x34
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	e08e      	b.n	800c70a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2235      	movs	r2, #53	@ 0x35
 800c5f0:	2104      	movs	r1, #4
 800c5f2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	2207      	movs	r2, #7
 800c608:	4013      	ands	r3, r2
 800c60a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b03      	cmp	r3, #3
 800c610:	d002      	beq.n	800c618 <HAL_I2S_Receive_DMA+0x7c>
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	2b05      	cmp	r3, #5
 800c616:	d10c      	bne.n	800c632 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c618:	1dbb      	adds	r3, r7, #6
 800c61a:	881b      	ldrh	r3, [r3, #0]
 800c61c:	18db      	adds	r3, r3, r3
 800c61e:	b29a      	uxth	r2, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c624:	1dbb      	adds	r3, r7, #6
 800c626:	881b      	ldrh	r3, [r3, #0]
 800c628:	18db      	adds	r3, r3, r3
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c630:	e007      	b.n	800c642 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	1dba      	adds	r2, r7, #6
 800c636:	8812      	ldrh	r2, [r2, #0]
 800c638:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	1dba      	adds	r2, r7, #6
 800c63e:	8812      	ldrh	r2, [r2, #0]
 800c640:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c646:	4a33      	ldr	r2, [pc, #204]	@ (800c714 <HAL_I2S_Receive_DMA+0x178>)
 800c648:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c64e:	4a32      	ldr	r2, [pc, #200]	@ (800c718 <HAL_I2S_Receive_DMA+0x17c>)
 800c650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c656:	4a31      	ldr	r2, [pc, #196]	@ (800c71c <HAL_I2S_Receive_DMA+0x180>)
 800c658:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	69da      	ldr	r2, [r3, #28]
 800c660:	23c0      	movs	r3, #192	@ 0xc0
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	401a      	ands	r2, r3
 800c666:	23c0      	movs	r3, #192	@ 0xc0
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d10a      	bne.n	800c684 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c66e:	2300      	movs	r3, #0
 800c670:	613b      	str	r3, [r7, #16]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	613b      	str	r3, [r7, #16]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	613b      	str	r3, [r7, #16]
 800c682:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	330c      	adds	r3, #12
 800c68e:	0019      	movs	r1, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c694:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c69a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c69c:	f7fd f9fc 	bl	8009a98 <HAL_DMA_Start_IT>
 800c6a0:	1e03      	subs	r3, r0, #0
 800c6a2:	d00f      	beq.n	800c6c4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a8:	2208      	movs	r2, #8
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2235      	movs	r2, #53	@ 0x35
 800c6b4:	2101      	movs	r1, #1
 800c6b6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2234      	movs	r2, #52	@ 0x34
 800c6bc:	2100      	movs	r1, #0
 800c6be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e022      	b.n	800c70a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	69da      	ldr	r2, [r3, #28]
 800c6ca:	2380      	movs	r3, #128	@ 0x80
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	d108      	bne.n	800c6e4 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69da      	ldr	r2, [r3, #28]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2180      	movs	r1, #128	@ 0x80
 800c6de:	00c9      	lsls	r1, r1, #3
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	d107      	bne.n	800c700 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	430a      	orrs	r2, r1
 800c6fe:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2234      	movs	r2, #52	@ 0x34
 800c704:	2100      	movs	r1, #0
 800c706:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	0018      	movs	r0, r3
 800c70c:	46bd      	mov	sp, r7
 800c70e:	b006      	add	sp, #24
 800c710:	bd80      	pop	{r7, pc}
 800c712:	46c0      	nop			@ (mov r8, r8)
 800c714:	0800c91d 	.word	0x0800c91d
 800c718:	0800c8d9 	.word	0x0800c8d9
 800c71c:	0800c93b 	.word	0x0800c93b

0800c720 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c728:	2317      	movs	r3, #23
 800c72a:	18fb      	adds	r3, r7, r3
 800c72c:	2200      	movs	r2, #0
 800c72e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	2380      	movs	r3, #128	@ 0x80
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	429a      	cmp	r2, r3
 800c73a:	d003      	beq.n	800c744 <HAL_I2S_DMAStop+0x24>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d158      	bne.n	800c7f6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d010      	beq.n	800c76e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c750:	0018      	movs	r0, r3
 800c752:	f7fd fa07 	bl	8009b64 <HAL_DMA_Abort>
 800c756:	1e03      	subs	r3, r0, #0
 800c758:	d009      	beq.n	800c76e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c75e:	2208      	movs	r2, #8
 800c760:	431a      	orrs	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c766:	2317      	movs	r3, #23
 800c768:	18fb      	adds	r3, r7, r3
 800c76a:	2201      	movs	r2, #1
 800c76c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	2364      	movs	r3, #100	@ 0x64
 800c772:	2201      	movs	r2, #1
 800c774:	2102      	movs	r1, #2
 800c776:	f000 f907 	bl	800c988 <I2S_WaitFlagStateUntilTimeout>
 800c77a:	1e03      	subs	r3, r0, #0
 800c77c:	d00d      	beq.n	800c79a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c782:	2201      	movs	r2, #1
 800c784:	431a      	orrs	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2235      	movs	r2, #53	@ 0x35
 800c78e:	2101      	movs	r1, #1
 800c790:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c792:	2317      	movs	r3, #23
 800c794:	18fb      	adds	r3, r7, r3
 800c796:	2201      	movs	r2, #1
 800c798:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	2364      	movs	r3, #100	@ 0x64
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2180      	movs	r1, #128	@ 0x80
 800c7a2:	f000 f8f1 	bl	800c988 <I2S_WaitFlagStateUntilTimeout>
 800c7a6:	1e03      	subs	r3, r0, #0
 800c7a8:	d00d      	beq.n	800c7c6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2235      	movs	r2, #53	@ 0x35
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c7be:	2317      	movs	r3, #23
 800c7c0:	18fb      	adds	r3, r7, r3
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69da      	ldr	r2, [r3, #28]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4938      	ldr	r1, [pc, #224]	@ (800c8b4 <HAL_I2S_DMAStop+0x194>)
 800c7d2:	400a      	ands	r2, r1
 800c7d4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	613b      	str	r3, [r7, #16]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	685a      	ldr	r2, [r3, #4]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2102      	movs	r1, #2
 800c7f0:	438a      	bics	r2, r1
 800c7f2:	605a      	str	r2, [r3, #4]
 800c7f4:	e053      	b.n	800c89e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685a      	ldr	r2, [r3, #4]
 800c7fa:	23c0      	movs	r3, #192	@ 0xc0
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d005      	beq.n	800c80e <HAL_I2S_DMAStop+0xee>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	2380      	movs	r3, #128	@ 0x80
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d147      	bne.n	800c89e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c812:	2b00      	cmp	r3, #0
 800c814:	d010      	beq.n	800c838 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c81a:	0018      	movs	r0, r3
 800c81c:	f7fd f9a2 	bl	8009b64 <HAL_DMA_Abort>
 800c820:	1e03      	subs	r3, r0, #0
 800c822:	d009      	beq.n	800c838 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c828:	2208      	movs	r2, #8
 800c82a:	431a      	orrs	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c830:	2317      	movs	r3, #23
 800c832:	18fb      	adds	r3, r7, r3
 800c834:	2201      	movs	r2, #1
 800c836:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	69da      	ldr	r2, [r3, #28]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	491c      	ldr	r1, [pc, #112]	@ (800c8b4 <HAL_I2S_DMAStop+0x194>)
 800c844:	400a      	ands	r2, r1
 800c846:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2101      	movs	r1, #1
 800c86a:	438a      	bics	r2, r1
 800c86c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	2380      	movs	r3, #128	@ 0x80
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	429a      	cmp	r2, r3
 800c878:	d10e      	bne.n	800c898 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c87e:	2240      	movs	r2, #64	@ 0x40
 800c880:	431a      	orrs	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2235      	movs	r2, #53	@ 0x35
 800c88a:	2101      	movs	r1, #1
 800c88c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800c88e:	2317      	movs	r3, #23
 800c890:	18fb      	adds	r3, r7, r3
 800c892:	2201      	movs	r2, #1
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	e002      	b.n	800c89e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2235      	movs	r2, #53	@ 0x35
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800c8a6:	2317      	movs	r3, #23
 800c8a8:	18fb      	adds	r3, r7, r3
 800c8aa:	781b      	ldrb	r3, [r3, #0]
}
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	b006      	add	sp, #24
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	fffffbff 	.word	0xfffffbff

0800c8b8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c8c0:	46c0      	nop			@ (mov r8, r8)
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	b002      	add	sp, #8
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800c8d0:	46c0      	nop			@ (mov r8, r8)
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	b002      	add	sp, #8
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8e4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10e      	bne.n	800c90c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	438a      	bics	r2, r1
 800c8fc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2235      	movs	r2, #53	@ 0x35
 800c908:	2101      	movs	r1, #1
 800c90a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	0018      	movs	r0, r3
 800c910:	f7f9 feee 	bl	80066f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c914:	46c0      	nop			@ (mov r8, r8)
 800c916:	46bd      	mov	sp, r7
 800c918:	b004      	add	sp, #16
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c928:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	0018      	movs	r0, r3
 800c92e:	f7ff ffc3 	bl	800c8b8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c932:	46c0      	nop			@ (mov r8, r8)
 800c934:	46bd      	mov	sp, r7
 800c936:	b004      	add	sp, #16
 800c938:	bd80      	pop	{r7, pc}

0800c93a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c946:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2103      	movs	r1, #3
 800c954:	438a      	bics	r2, r1
 800c956:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2235      	movs	r2, #53	@ 0x35
 800c968:	2101      	movs	r1, #1
 800c96a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c970:	2208      	movs	r2, #8
 800c972:	431a      	orrs	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	0018      	movs	r0, r3
 800c97c:	f7ff ffa4 	bl	800c8c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c980:	46c0      	nop			@ (mov r8, r8)
 800c982:	46bd      	mov	sp, r7
 800c984:	b004      	add	sp, #16
 800c986:	bd80      	pop	{r7, pc}

0800c988 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	1dfb      	adds	r3, r7, #7
 800c996:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800c998:	f7fc fb1e 	bl	8008fd8 <HAL_GetTick>
 800c99c:	0003      	movs	r3, r0
 800c99e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c9a0:	e017      	b.n	800c9d2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	d014      	beq.n	800c9d2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800c9a8:	f7fc fb16 	bl	8008fd8 <HAL_GetTick>
 800c9ac:	0002      	movs	r2, r0
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d902      	bls.n	800c9be <I2S_WaitFlagStateUntilTimeout+0x36>
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d109      	bne.n	800c9d2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2235      	movs	r2, #53	@ 0x35
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2234      	movs	r2, #52	@ 0x34
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e00f      	b.n	800c9f2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	4013      	ands	r3, r2
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	1ad3      	subs	r3, r2, r3
 800c9e0:	425a      	negs	r2, r3
 800c9e2:	4153      	adcs	r3, r2
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	001a      	movs	r2, r3
 800c9e8:	1dfb      	adds	r3, r7, #7
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d1d8      	bne.n	800c9a2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	0018      	movs	r0, r3
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	b006      	add	sp, #24
 800c9f8:	bd80      	pop	{r7, pc}
	...

0800c9fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9fe:	b08b      	sub	sp, #44	@ 0x2c
 800ca00:	af06      	add	r7, sp, #24
 800ca02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e0f0      	b.n	800cbf0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a79      	ldr	r2, [pc, #484]	@ (800cbf8 <HAL_PCD_Init+0x1fc>)
 800ca12:	5c9b      	ldrb	r3, [r3, r2]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d108      	bne.n	800ca2c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	23aa      	movs	r3, #170	@ 0xaa
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	2100      	movs	r1, #0
 800ca22:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	0018      	movs	r0, r3
 800ca28:	f7fb fe70 	bl	800870c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a72      	ldr	r2, [pc, #456]	@ (800cbf8 <HAL_PCD_Init+0x1fc>)
 800ca30:	2103      	movs	r1, #3
 800ca32:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	0018      	movs	r0, r3
 800ca3a:	f003 f893 	bl	800fb64 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca3e:	230f      	movs	r3, #15
 800ca40:	18fb      	adds	r3, r7, r3
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
 800ca46:	e049      	b.n	800cadc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ca48:	200f      	movs	r0, #15
 800ca4a:	183b      	adds	r3, r7, r0
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	1c5a      	adds	r2, r3, #1
 800ca52:	0013      	movs	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	189b      	adds	r3, r3, r2
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	18cb      	adds	r3, r1, r3
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	2201      	movs	r2, #1
 800ca60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ca62:	183b      	adds	r3, r7, r0
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	6879      	ldr	r1, [r7, #4]
 800ca68:	1c5a      	adds	r2, r3, #1
 800ca6a:	0013      	movs	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	189b      	adds	r3, r3, r2
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	183a      	adds	r2, r7, r0
 800ca74:	7812      	ldrb	r2, [r2, #0]
 800ca76:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ca78:	183b      	adds	r3, r7, r0
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	0013      	movs	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	189b      	adds	r3, r3, r2
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	18cb      	adds	r3, r1, r3
 800ca8a:	3303      	adds	r3, #3
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ca90:	183b      	adds	r3, r7, r0
 800ca92:	781a      	ldrb	r2, [r3, #0]
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	0013      	movs	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	189b      	adds	r3, r3, r2
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	18cb      	adds	r3, r1, r3
 800caa0:	3338      	adds	r3, #56	@ 0x38
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800caa6:	183b      	adds	r3, r7, r0
 800caa8:	781a      	ldrb	r2, [r3, #0]
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	0013      	movs	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	189b      	adds	r3, r3, r2
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	18cb      	adds	r3, r1, r3
 800cab6:	333c      	adds	r3, #60	@ 0x3c
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cabc:	183b      	adds	r3, r7, r0
 800cabe:	781a      	ldrb	r2, [r3, #0]
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	0013      	movs	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	189b      	adds	r3, r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	18cb      	adds	r3, r1, r3
 800cacc:	3340      	adds	r3, #64	@ 0x40
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cad2:	183b      	adds	r3, r7, r0
 800cad4:	781a      	ldrb	r2, [r3, #0]
 800cad6:	183b      	adds	r3, r7, r0
 800cad8:	3201      	adds	r2, #1
 800cada:	701a      	strb	r2, [r3, #0]
 800cadc:	210f      	movs	r1, #15
 800cade:	187b      	adds	r3, r7, r1
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d3ae      	bcc.n	800ca48 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caea:	187b      	adds	r3, r7, r1
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	e056      	b.n	800cba0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800caf2:	240f      	movs	r4, #15
 800caf4:	193b      	adds	r3, r7, r4
 800caf6:	781a      	ldrb	r2, [r3, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	236a      	movs	r3, #106	@ 0x6a
 800cafc:	33ff      	adds	r3, #255	@ 0xff
 800cafe:	0019      	movs	r1, r3
 800cb00:	0013      	movs	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	189b      	adds	r3, r3, r2
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	18c3      	adds	r3, r0, r3
 800cb0a:	185b      	adds	r3, r3, r1
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cb10:	193b      	adds	r3, r7, r4
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	23b4      	movs	r3, #180	@ 0xb4
 800cb18:	0059      	lsls	r1, r3, #1
 800cb1a:	0013      	movs	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	189b      	adds	r3, r3, r2
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	18c3      	adds	r3, r0, r3
 800cb24:	185b      	adds	r3, r3, r1
 800cb26:	193a      	adds	r2, r7, r4
 800cb28:	7812      	ldrb	r2, [r2, #0]
 800cb2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cb2c:	193b      	adds	r3, r7, r4
 800cb2e:	781a      	ldrb	r2, [r3, #0]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	236c      	movs	r3, #108	@ 0x6c
 800cb34:	33ff      	adds	r3, #255	@ 0xff
 800cb36:	0019      	movs	r1, r3
 800cb38:	0013      	movs	r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	189b      	adds	r3, r3, r2
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	18c3      	adds	r3, r0, r3
 800cb42:	185b      	adds	r3, r3, r1
 800cb44:	2200      	movs	r2, #0
 800cb46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cb48:	193b      	adds	r3, r7, r4
 800cb4a:	781a      	ldrb	r2, [r3, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	23bc      	movs	r3, #188	@ 0xbc
 800cb50:	0059      	lsls	r1, r3, #1
 800cb52:	0013      	movs	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	189b      	adds	r3, r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	18c3      	adds	r3, r0, r3
 800cb5c:	185b      	adds	r3, r3, r1
 800cb5e:	2200      	movs	r2, #0
 800cb60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cb62:	193b      	adds	r3, r7, r4
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	23be      	movs	r3, #190	@ 0xbe
 800cb6a:	0059      	lsls	r1, r3, #1
 800cb6c:	0013      	movs	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	189b      	adds	r3, r3, r2
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	18c3      	adds	r3, r0, r3
 800cb76:	185b      	adds	r3, r3, r1
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cb7c:	193b      	adds	r3, r7, r4
 800cb7e:	781a      	ldrb	r2, [r3, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	23c0      	movs	r3, #192	@ 0xc0
 800cb84:	0059      	lsls	r1, r3, #1
 800cb86:	0013      	movs	r3, r2
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	189b      	adds	r3, r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	18c3      	adds	r3, r0, r3
 800cb90:	185b      	adds	r3, r3, r1
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb96:	193b      	adds	r3, r7, r4
 800cb98:	781a      	ldrb	r2, [r3, #0]
 800cb9a:	193b      	adds	r3, r7, r4
 800cb9c:	3201      	adds	r2, #1
 800cb9e:	701a      	strb	r2, [r3, #0]
 800cba0:	230f      	movs	r3, #15
 800cba2:	18fb      	adds	r3, r7, r3
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d3a1      	bcc.n	800caf2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	466a      	mov	r2, sp
 800cbb6:	0011      	movs	r1, r2
 800cbb8:	001a      	movs	r2, r3
 800cbba:	3210      	adds	r2, #16
 800cbbc:	ca70      	ldmia	r2!, {r4, r5, r6}
 800cbbe:	c170      	stmia	r1!, {r4, r5, r6}
 800cbc0:	ca30      	ldmia	r2!, {r4, r5}
 800cbc2:	c130      	stmia	r1!, {r4, r5}
 800cbc4:	6859      	ldr	r1, [r3, #4]
 800cbc6:	689a      	ldr	r2, [r3, #8]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	f002 ffe5 	bl	800fb98 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2224      	movs	r2, #36	@ 0x24
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a07      	ldr	r2, [pc, #28]	@ (800cbf8 <HAL_PCD_Init+0x1fc>)
 800cbda:	2101      	movs	r1, #1
 800cbdc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	69db      	ldr	r3, [r3, #28]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d103      	bne.n	800cbee <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	0018      	movs	r0, r3
 800cbea:	f000 f807 	bl	800cbfc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	0018      	movs	r0, r3
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	b005      	add	sp, #20
 800cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbf8:	000002a9 	.word	0x000002a9

0800cbfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	23ba      	movs	r3, #186	@ 0xba
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	2101      	movs	r1, #1
 800cc12:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	23b8      	movs	r3, #184	@ 0xb8
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2254      	movs	r2, #84	@ 0x54
 800cc22:	5a9b      	ldrh	r3, [r3, r2]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	2201      	movs	r2, #1
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	b299      	uxth	r1, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2254      	movs	r2, #84	@ 0x54
 800cc30:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2254      	movs	r2, #84	@ 0x54
 800cc36:	5a9b      	ldrh	r3, [r3, r2]
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	b299      	uxth	r1, r3
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2254      	movs	r2, #84	@ 0x54
 800cc44:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	0018      	movs	r0, r3
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	b004      	add	sp, #16
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc50:	b5b0      	push	{r4, r5, r7, lr}
 800cc52:	b08a      	sub	sp, #40	@ 0x28
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d102      	bne.n	800cc64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	f000 fbbf 	bl	800d3e2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc64:	4bc9      	ldr	r3, [pc, #804]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	220c      	movs	r2, #12
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cc6e:	4bc7      	ldr	r3, [pc, #796]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cc70:	68da      	ldr	r2, [r3, #12]
 800cc72:	2380      	movs	r3, #128	@ 0x80
 800cc74:	025b      	lsls	r3, r3, #9
 800cc76:	4013      	ands	r3, r2
 800cc78:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	4013      	ands	r3, r2
 800cc82:	d100      	bne.n	800cc86 <HAL_RCC_OscConfig+0x36>
 800cc84:	e07e      	b.n	800cd84 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	2b08      	cmp	r3, #8
 800cc8a:	d007      	beq.n	800cc9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	2b0c      	cmp	r3, #12
 800cc90:	d112      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x68>
 800cc92:	69ba      	ldr	r2, [r7, #24]
 800cc94:	2380      	movs	r3, #128	@ 0x80
 800cc96:	025b      	lsls	r3, r3, #9
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d10d      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc9c:	4bbb      	ldr	r3, [pc, #748]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	2380      	movs	r3, #128	@ 0x80
 800cca2:	029b      	lsls	r3, r3, #10
 800cca4:	4013      	ands	r3, r2
 800cca6:	d100      	bne.n	800ccaa <HAL_RCC_OscConfig+0x5a>
 800cca8:	e06b      	b.n	800cd82 <HAL_RCC_OscConfig+0x132>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d167      	bne.n	800cd82 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	f000 fb95 	bl	800d3e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	2380      	movs	r3, #128	@ 0x80
 800ccbe:	025b      	lsls	r3, r3, #9
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d107      	bne.n	800ccd4 <HAL_RCC_OscConfig+0x84>
 800ccc4:	4bb1      	ldr	r3, [pc, #708]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	4bb0      	ldr	r3, [pc, #704]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ccca:	2180      	movs	r1, #128	@ 0x80
 800cccc:	0249      	lsls	r1, r1, #9
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	e027      	b.n	800cd24 <HAL_RCC_OscConfig+0xd4>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	23a0      	movs	r3, #160	@ 0xa0
 800ccda:	02db      	lsls	r3, r3, #11
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d10e      	bne.n	800ccfe <HAL_RCC_OscConfig+0xae>
 800cce0:	4baa      	ldr	r3, [pc, #680]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	4ba9      	ldr	r3, [pc, #676]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cce6:	2180      	movs	r1, #128	@ 0x80
 800cce8:	02c9      	lsls	r1, r1, #11
 800ccea:	430a      	orrs	r2, r1
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	4ba7      	ldr	r3, [pc, #668]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	4ba6      	ldr	r3, [pc, #664]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ccf4:	2180      	movs	r1, #128	@ 0x80
 800ccf6:	0249      	lsls	r1, r1, #9
 800ccf8:	430a      	orrs	r2, r1
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	e012      	b.n	800cd24 <HAL_RCC_OscConfig+0xd4>
 800ccfe:	4ba3      	ldr	r3, [pc, #652]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4ba2      	ldr	r3, [pc, #648]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cd04:	49a2      	ldr	r1, [pc, #648]	@ (800cf90 <HAL_RCC_OscConfig+0x340>)
 800cd06:	400a      	ands	r2, r1
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	4ba0      	ldr	r3, [pc, #640]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	2380      	movs	r3, #128	@ 0x80
 800cd10:	025b      	lsls	r3, r3, #9
 800cd12:	4013      	ands	r3, r2
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	4b9c      	ldr	r3, [pc, #624]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	4b9b      	ldr	r3, [pc, #620]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cd1e:	499d      	ldr	r1, [pc, #628]	@ (800cf94 <HAL_RCC_OscConfig+0x344>)
 800cd20:	400a      	ands	r2, r1
 800cd22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d015      	beq.n	800cd58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd2c:	f7fc f954 	bl	8008fd8 <HAL_GetTick>
 800cd30:	0003      	movs	r3, r0
 800cd32:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cd34:	e009      	b.n	800cd4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd36:	f7fc f94f 	bl	8008fd8 <HAL_GetTick>
 800cd3a:	0002      	movs	r2, r0
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	2b64      	cmp	r3, #100	@ 0x64
 800cd42:	d902      	bls.n	800cd4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cd44:	2303      	movs	r3, #3
 800cd46:	f000 fb4c 	bl	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cd4a:	4b90      	ldr	r3, [pc, #576]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	2380      	movs	r3, #128	@ 0x80
 800cd50:	029b      	lsls	r3, r3, #10
 800cd52:	4013      	ands	r3, r2
 800cd54:	d0ef      	beq.n	800cd36 <HAL_RCC_OscConfig+0xe6>
 800cd56:	e015      	b.n	800cd84 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd58:	f7fc f93e 	bl	8008fd8 <HAL_GetTick>
 800cd5c:	0003      	movs	r3, r0
 800cd5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cd60:	e008      	b.n	800cd74 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd62:	f7fc f939 	bl	8008fd8 <HAL_GetTick>
 800cd66:	0002      	movs	r2, r0
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	2b64      	cmp	r3, #100	@ 0x64
 800cd6e:	d901      	bls.n	800cd74 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e336      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cd74:	4b85      	ldr	r3, [pc, #532]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	2380      	movs	r3, #128	@ 0x80
 800cd7a:	029b      	lsls	r3, r3, #10
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	d1f0      	bne.n	800cd62 <HAL_RCC_OscConfig+0x112>
 800cd80:	e000      	b.n	800cd84 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2202      	movs	r2, #2
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	d100      	bne.n	800cd90 <HAL_RCC_OscConfig+0x140>
 800cd8e:	e099      	b.n	800cec4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800cd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd98:	2220      	movs	r2, #32
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	d009      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800cd9e:	4b7b      	ldr	r3, [pc, #492]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	4b7a      	ldr	r3, [pc, #488]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cda4:	2120      	movs	r1, #32
 800cda6:	430a      	orrs	r2, r1
 800cda8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdac:	2220      	movs	r2, #32
 800cdae:	4393      	bics	r3, r2
 800cdb0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	2b04      	cmp	r3, #4
 800cdb6:	d005      	beq.n	800cdc4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	2b0c      	cmp	r3, #12
 800cdbc:	d13e      	bne.n	800ce3c <HAL_RCC_OscConfig+0x1ec>
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d13b      	bne.n	800ce3c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800cdc4:	4b71      	ldr	r3, [pc, #452]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2204      	movs	r2, #4
 800cdca:	4013      	ands	r3, r2
 800cdcc:	d004      	beq.n	800cdd8 <HAL_RCC_OscConfig+0x188>
 800cdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d101      	bne.n	800cdd8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e304      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdd8:	4b6c      	ldr	r3, [pc, #432]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	4a6e      	ldr	r2, [pc, #440]	@ (800cf98 <HAL_RCC_OscConfig+0x348>)
 800cdde:	4013      	ands	r3, r2
 800cde0:	0019      	movs	r1, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	021a      	lsls	r2, r3, #8
 800cde8:	4b68      	ldr	r3, [pc, #416]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cdea:	430a      	orrs	r2, r1
 800cdec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800cdee:	4b67      	ldr	r3, [pc, #412]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2209      	movs	r2, #9
 800cdf4:	4393      	bics	r3, r2
 800cdf6:	0019      	movs	r1, r3
 800cdf8:	4b64      	ldr	r3, [pc, #400]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cdfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdfc:	430a      	orrs	r2, r1
 800cdfe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ce00:	f000 fc42 	bl	800d688 <HAL_RCC_GetSysClockFreq>
 800ce04:	0001      	movs	r1, r0
 800ce06:	4b61      	ldr	r3, [pc, #388]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	091b      	lsrs	r3, r3, #4
 800ce0c:	220f      	movs	r2, #15
 800ce0e:	4013      	ands	r3, r2
 800ce10:	4a62      	ldr	r2, [pc, #392]	@ (800cf9c <HAL_RCC_OscConfig+0x34c>)
 800ce12:	5cd3      	ldrb	r3, [r2, r3]
 800ce14:	000a      	movs	r2, r1
 800ce16:	40da      	lsrs	r2, r3
 800ce18:	4b61      	ldr	r3, [pc, #388]	@ (800cfa0 <HAL_RCC_OscConfig+0x350>)
 800ce1a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800ce1c:	4b61      	ldr	r3, [pc, #388]	@ (800cfa4 <HAL_RCC_OscConfig+0x354>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2513      	movs	r5, #19
 800ce22:	197c      	adds	r4, r7, r5
 800ce24:	0018      	movs	r0, r3
 800ce26:	f7fc f891 	bl	8008f4c <HAL_InitTick>
 800ce2a:	0003      	movs	r3, r0
 800ce2c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ce2e:	197b      	adds	r3, r7, r5
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d046      	beq.n	800cec4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ce36:	197b      	adds	r3, r7, r5
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	e2d2      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d027      	beq.n	800ce92 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ce42:	4b52      	ldr	r3, [pc, #328]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2209      	movs	r2, #9
 800ce48:	4393      	bics	r3, r2
 800ce4a:	0019      	movs	r1, r3
 800ce4c:	4b4f      	ldr	r3, [pc, #316]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce50:	430a      	orrs	r2, r1
 800ce52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce54:	f7fc f8c0 	bl	8008fd8 <HAL_GetTick>
 800ce58:	0003      	movs	r3, r0
 800ce5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce5c:	e008      	b.n	800ce70 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce5e:	f7fc f8bb 	bl	8008fd8 <HAL_GetTick>
 800ce62:	0002      	movs	r2, r0
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d901      	bls.n	800ce70 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	e2b8      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ce70:	4b46      	ldr	r3, [pc, #280]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2204      	movs	r2, #4
 800ce76:	4013      	ands	r3, r2
 800ce78:	d0f1      	beq.n	800ce5e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce7a:	4b44      	ldr	r3, [pc, #272]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	4a46      	ldr	r2, [pc, #280]	@ (800cf98 <HAL_RCC_OscConfig+0x348>)
 800ce80:	4013      	ands	r3, r2
 800ce82:	0019      	movs	r1, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	021a      	lsls	r2, r3, #8
 800ce8a:	4b40      	ldr	r3, [pc, #256]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	605a      	str	r2, [r3, #4]
 800ce90:	e018      	b.n	800cec4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce92:	4b3e      	ldr	r3, [pc, #248]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	4b3d      	ldr	r3, [pc, #244]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ce98:	2101      	movs	r1, #1
 800ce9a:	438a      	bics	r2, r1
 800ce9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce9e:	f7fc f89b 	bl	8008fd8 <HAL_GetTick>
 800cea2:	0003      	movs	r3, r0
 800cea4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cea6:	e008      	b.n	800ceba <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cea8:	f7fc f896 	bl	8008fd8 <HAL_GetTick>
 800ceac:	0002      	movs	r2, r0
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d901      	bls.n	800ceba <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	e293      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ceba:	4b34      	ldr	r3, [pc, #208]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2204      	movs	r2, #4
 800cec0:	4013      	ands	r3, r2
 800cec2:	d1f1      	bne.n	800cea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2210      	movs	r2, #16
 800ceca:	4013      	ands	r3, r2
 800cecc:	d100      	bne.n	800ced0 <HAL_RCC_OscConfig+0x280>
 800cece:	e0a2      	b.n	800d016 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d140      	bne.n	800cf58 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ced6:	4b2d      	ldr	r3, [pc, #180]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	2380      	movs	r3, #128	@ 0x80
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4013      	ands	r3, r2
 800cee0:	d005      	beq.n	800ceee <HAL_RCC_OscConfig+0x29e>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	69db      	ldr	r3, [r3, #28]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d101      	bne.n	800ceee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e279      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ceee:	4b27      	ldr	r3, [pc, #156]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	4a2d      	ldr	r2, [pc, #180]	@ (800cfa8 <HAL_RCC_OscConfig+0x358>)
 800cef4:	4013      	ands	r3, r2
 800cef6:	0019      	movs	r1, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cefc:	4b23      	ldr	r3, [pc, #140]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cefe:	430a      	orrs	r2, r1
 800cf00:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cf02:	4b22      	ldr	r3, [pc, #136]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	021b      	lsls	r3, r3, #8
 800cf08:	0a19      	lsrs	r1, r3, #8
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	061a      	lsls	r2, r3, #24
 800cf10:	4b1e      	ldr	r3, [pc, #120]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cf12:	430a      	orrs	r2, r1
 800cf14:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf1a:	0b5b      	lsrs	r3, r3, #13
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	2280      	movs	r2, #128	@ 0x80
 800cf20:	0212      	lsls	r2, r2, #8
 800cf22:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800cf24:	4b19      	ldr	r3, [pc, #100]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	091b      	lsrs	r3, r3, #4
 800cf2a:	210f      	movs	r1, #15
 800cf2c:	400b      	ands	r3, r1
 800cf2e:	491b      	ldr	r1, [pc, #108]	@ (800cf9c <HAL_RCC_OscConfig+0x34c>)
 800cf30:	5ccb      	ldrb	r3, [r1, r3]
 800cf32:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800cf34:	4b1a      	ldr	r3, [pc, #104]	@ (800cfa0 <HAL_RCC_OscConfig+0x350>)
 800cf36:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800cf38:	4b1a      	ldr	r3, [pc, #104]	@ (800cfa4 <HAL_RCC_OscConfig+0x354>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2513      	movs	r5, #19
 800cf3e:	197c      	adds	r4, r7, r5
 800cf40:	0018      	movs	r0, r3
 800cf42:	f7fc f803 	bl	8008f4c <HAL_InitTick>
 800cf46:	0003      	movs	r3, r0
 800cf48:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800cf4a:	197b      	adds	r3, r7, r5
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d061      	beq.n	800d016 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800cf52:	197b      	adds	r3, r7, r5
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	e244      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	69db      	ldr	r3, [r3, #28]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d040      	beq.n	800cfe2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cf60:	4b0a      	ldr	r3, [pc, #40]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	4b09      	ldr	r3, [pc, #36]	@ (800cf8c <HAL_RCC_OscConfig+0x33c>)
 800cf66:	2180      	movs	r1, #128	@ 0x80
 800cf68:	0049      	lsls	r1, r1, #1
 800cf6a:	430a      	orrs	r2, r1
 800cf6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf6e:	f7fc f833 	bl	8008fd8 <HAL_GetTick>
 800cf72:	0003      	movs	r3, r0
 800cf74:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cf76:	e019      	b.n	800cfac <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cf78:	f7fc f82e 	bl	8008fd8 <HAL_GetTick>
 800cf7c:	0002      	movs	r2, r0
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d912      	bls.n	800cfac <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800cf86:	2303      	movs	r3, #3
 800cf88:	e22b      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
 800cf8a:	46c0      	nop			@ (mov r8, r8)
 800cf8c:	40021000 	.word	0x40021000
 800cf90:	fffeffff 	.word	0xfffeffff
 800cf94:	fffbffff 	.word	0xfffbffff
 800cf98:	ffffe0ff 	.word	0xffffe0ff
 800cf9c:	080153c0 	.word	0x080153c0
 800cfa0:	20000130 	.word	0x20000130
 800cfa4:	20000144 	.word	0x20000144
 800cfa8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cfac:	4bca      	ldr	r3, [pc, #808]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	2380      	movs	r3, #128	@ 0x80
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	d0df      	beq.n	800cf78 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cfb8:	4bc7      	ldr	r3, [pc, #796]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	4ac7      	ldr	r2, [pc, #796]	@ (800d2dc <HAL_RCC_OscConfig+0x68c>)
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	0019      	movs	r1, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cfc6:	4bc4      	ldr	r3, [pc, #784]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800cfc8:	430a      	orrs	r2, r1
 800cfca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cfcc:	4bc2      	ldr	r3, [pc, #776]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	021b      	lsls	r3, r3, #8
 800cfd2:	0a19      	lsrs	r1, r3, #8
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a1b      	ldr	r3, [r3, #32]
 800cfd8:	061a      	lsls	r2, r3, #24
 800cfda:	4bbf      	ldr	r3, [pc, #764]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	605a      	str	r2, [r3, #4]
 800cfe0:	e019      	b.n	800d016 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800cfe2:	4bbd      	ldr	r3, [pc, #756]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	4bbc      	ldr	r3, [pc, #752]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800cfe8:	49bd      	ldr	r1, [pc, #756]	@ (800d2e0 <HAL_RCC_OscConfig+0x690>)
 800cfea:	400a      	ands	r2, r1
 800cfec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfee:	f7fb fff3 	bl	8008fd8 <HAL_GetTick>
 800cff2:	0003      	movs	r3, r0
 800cff4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800cff6:	e008      	b.n	800d00a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cff8:	f7fb ffee 	bl	8008fd8 <HAL_GetTick>
 800cffc:	0002      	movs	r2, r0
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	2b02      	cmp	r3, #2
 800d004:	d901      	bls.n	800d00a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800d006:	2303      	movs	r3, #3
 800d008:	e1eb      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800d00a:	4bb3      	ldr	r3, [pc, #716]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	2380      	movs	r3, #128	@ 0x80
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4013      	ands	r3, r2
 800d014:	d1f0      	bne.n	800cff8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2208      	movs	r2, #8
 800d01c:	4013      	ands	r3, r2
 800d01e:	d036      	beq.n	800d08e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	695b      	ldr	r3, [r3, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d019      	beq.n	800d05c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d028:	4bab      	ldr	r3, [pc, #684]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d02a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d02c:	4baa      	ldr	r3, [pc, #680]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d02e:	2101      	movs	r1, #1
 800d030:	430a      	orrs	r2, r1
 800d032:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d034:	f7fb ffd0 	bl	8008fd8 <HAL_GetTick>
 800d038:	0003      	movs	r3, r0
 800d03a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d03c:	e008      	b.n	800d050 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d03e:	f7fb ffcb 	bl	8008fd8 <HAL_GetTick>
 800d042:	0002      	movs	r2, r0
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d901      	bls.n	800d050 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e1c8      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d050:	4ba1      	ldr	r3, [pc, #644]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d054:	2202      	movs	r2, #2
 800d056:	4013      	ands	r3, r2
 800d058:	d0f1      	beq.n	800d03e <HAL_RCC_OscConfig+0x3ee>
 800d05a:	e018      	b.n	800d08e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d05c:	4b9e      	ldr	r3, [pc, #632]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d05e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d060:	4b9d      	ldr	r3, [pc, #628]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d062:	2101      	movs	r1, #1
 800d064:	438a      	bics	r2, r1
 800d066:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d068:	f7fb ffb6 	bl	8008fd8 <HAL_GetTick>
 800d06c:	0003      	movs	r3, r0
 800d06e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d070:	e008      	b.n	800d084 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d072:	f7fb ffb1 	bl	8008fd8 <HAL_GetTick>
 800d076:	0002      	movs	r2, r0
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d901      	bls.n	800d084 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800d080:	2303      	movs	r3, #3
 800d082:	e1ae      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d084:	4b94      	ldr	r3, [pc, #592]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d088:	2202      	movs	r2, #2
 800d08a:	4013      	ands	r3, r2
 800d08c:	d1f1      	bne.n	800d072 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2204      	movs	r2, #4
 800d094:	4013      	ands	r3, r2
 800d096:	d100      	bne.n	800d09a <HAL_RCC_OscConfig+0x44a>
 800d098:	e0ae      	b.n	800d1f8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d09a:	2023      	movs	r0, #35	@ 0x23
 800d09c:	183b      	adds	r3, r7, r0
 800d09e:	2200      	movs	r2, #0
 800d0a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d0a2:	4b8d      	ldr	r3, [pc, #564]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d0a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0a6:	2380      	movs	r3, #128	@ 0x80
 800d0a8:	055b      	lsls	r3, r3, #21
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	d109      	bne.n	800d0c2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0ae:	4b8a      	ldr	r3, [pc, #552]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d0b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0b2:	4b89      	ldr	r3, [pc, #548]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d0b4:	2180      	movs	r1, #128	@ 0x80
 800d0b6:	0549      	lsls	r1, r1, #21
 800d0b8:	430a      	orrs	r2, r1
 800d0ba:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800d0bc:	183b      	adds	r3, r7, r0
 800d0be:	2201      	movs	r2, #1
 800d0c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d0c2:	4b88      	ldr	r3, [pc, #544]	@ (800d2e4 <HAL_RCC_OscConfig+0x694>)
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	2380      	movs	r3, #128	@ 0x80
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	d11a      	bne.n	800d104 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d0ce:	4b85      	ldr	r3, [pc, #532]	@ (800d2e4 <HAL_RCC_OscConfig+0x694>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	4b84      	ldr	r3, [pc, #528]	@ (800d2e4 <HAL_RCC_OscConfig+0x694>)
 800d0d4:	2180      	movs	r1, #128	@ 0x80
 800d0d6:	0049      	lsls	r1, r1, #1
 800d0d8:	430a      	orrs	r2, r1
 800d0da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d0dc:	f7fb ff7c 	bl	8008fd8 <HAL_GetTick>
 800d0e0:	0003      	movs	r3, r0
 800d0e2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d0e4:	e008      	b.n	800d0f8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0e6:	f7fb ff77 	bl	8008fd8 <HAL_GetTick>
 800d0ea:	0002      	movs	r2, r0
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	2b64      	cmp	r3, #100	@ 0x64
 800d0f2:	d901      	bls.n	800d0f8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e174      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d0f8:	4b7a      	ldr	r3, [pc, #488]	@ (800d2e4 <HAL_RCC_OscConfig+0x694>)
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	2380      	movs	r3, #128	@ 0x80
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	4013      	ands	r3, r2
 800d102:	d0f0      	beq.n	800d0e6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	2380      	movs	r3, #128	@ 0x80
 800d10a:	005b      	lsls	r3, r3, #1
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d107      	bne.n	800d120 <HAL_RCC_OscConfig+0x4d0>
 800d110:	4b71      	ldr	r3, [pc, #452]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d112:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d114:	4b70      	ldr	r3, [pc, #448]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d116:	2180      	movs	r1, #128	@ 0x80
 800d118:	0049      	lsls	r1, r1, #1
 800d11a:	430a      	orrs	r2, r1
 800d11c:	651a      	str	r2, [r3, #80]	@ 0x50
 800d11e:	e031      	b.n	800d184 <HAL_RCC_OscConfig+0x534>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10c      	bne.n	800d142 <HAL_RCC_OscConfig+0x4f2>
 800d128:	4b6b      	ldr	r3, [pc, #428]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d12a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d12c:	4b6a      	ldr	r3, [pc, #424]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d12e:	496c      	ldr	r1, [pc, #432]	@ (800d2e0 <HAL_RCC_OscConfig+0x690>)
 800d130:	400a      	ands	r2, r1
 800d132:	651a      	str	r2, [r3, #80]	@ 0x50
 800d134:	4b68      	ldr	r3, [pc, #416]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d136:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d138:	4b67      	ldr	r3, [pc, #412]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d13a:	496b      	ldr	r1, [pc, #428]	@ (800d2e8 <HAL_RCC_OscConfig+0x698>)
 800d13c:	400a      	ands	r2, r1
 800d13e:	651a      	str	r2, [r3, #80]	@ 0x50
 800d140:	e020      	b.n	800d184 <HAL_RCC_OscConfig+0x534>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689a      	ldr	r2, [r3, #8]
 800d146:	23a0      	movs	r3, #160	@ 0xa0
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d10e      	bne.n	800d16c <HAL_RCC_OscConfig+0x51c>
 800d14e:	4b62      	ldr	r3, [pc, #392]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d150:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d152:	4b61      	ldr	r3, [pc, #388]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d154:	2180      	movs	r1, #128	@ 0x80
 800d156:	00c9      	lsls	r1, r1, #3
 800d158:	430a      	orrs	r2, r1
 800d15a:	651a      	str	r2, [r3, #80]	@ 0x50
 800d15c:	4b5e      	ldr	r3, [pc, #376]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d15e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d160:	4b5d      	ldr	r3, [pc, #372]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d162:	2180      	movs	r1, #128	@ 0x80
 800d164:	0049      	lsls	r1, r1, #1
 800d166:	430a      	orrs	r2, r1
 800d168:	651a      	str	r2, [r3, #80]	@ 0x50
 800d16a:	e00b      	b.n	800d184 <HAL_RCC_OscConfig+0x534>
 800d16c:	4b5a      	ldr	r3, [pc, #360]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d16e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d170:	4b59      	ldr	r3, [pc, #356]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d172:	495b      	ldr	r1, [pc, #364]	@ (800d2e0 <HAL_RCC_OscConfig+0x690>)
 800d174:	400a      	ands	r2, r1
 800d176:	651a      	str	r2, [r3, #80]	@ 0x50
 800d178:	4b57      	ldr	r3, [pc, #348]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d17a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d17c:	4b56      	ldr	r3, [pc, #344]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d17e:	495a      	ldr	r1, [pc, #360]	@ (800d2e8 <HAL_RCC_OscConfig+0x698>)
 800d180:	400a      	ands	r2, r1
 800d182:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d015      	beq.n	800d1b8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d18c:	f7fb ff24 	bl	8008fd8 <HAL_GetTick>
 800d190:	0003      	movs	r3, r0
 800d192:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d194:	e009      	b.n	800d1aa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d196:	f7fb ff1f 	bl	8008fd8 <HAL_GetTick>
 800d19a:	0002      	movs	r2, r0
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	4a52      	ldr	r2, [pc, #328]	@ (800d2ec <HAL_RCC_OscConfig+0x69c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d901      	bls.n	800d1aa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e11b      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d1aa:	4b4b      	ldr	r3, [pc, #300]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d1ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1ae:	2380      	movs	r3, #128	@ 0x80
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	d0ef      	beq.n	800d196 <HAL_RCC_OscConfig+0x546>
 800d1b6:	e014      	b.n	800d1e2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d1b8:	f7fb ff0e 	bl	8008fd8 <HAL_GetTick>
 800d1bc:	0003      	movs	r3, r0
 800d1be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d1c0:	e009      	b.n	800d1d6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d1c2:	f7fb ff09 	bl	8008fd8 <HAL_GetTick>
 800d1c6:	0002      	movs	r2, r0
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	1ad3      	subs	r3, r2, r3
 800d1cc:	4a47      	ldr	r2, [pc, #284]	@ (800d2ec <HAL_RCC_OscConfig+0x69c>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d901      	bls.n	800d1d6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e105      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d1d6:	4b40      	ldr	r3, [pc, #256]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d1d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d1da:	2380      	movs	r3, #128	@ 0x80
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4013      	ands	r3, r2
 800d1e0:	d1ef      	bne.n	800d1c2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d1e2:	2323      	movs	r3, #35	@ 0x23
 800d1e4:	18fb      	adds	r3, r7, r3
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d105      	bne.n	800d1f8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d1ec:	4b3a      	ldr	r3, [pc, #232]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d1ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1f0:	4b39      	ldr	r3, [pc, #228]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d1f2:	493f      	ldr	r1, [pc, #252]	@ (800d2f0 <HAL_RCC_OscConfig+0x6a0>)
 800d1f4:	400a      	ands	r2, r1
 800d1f6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2220      	movs	r2, #32
 800d1fe:	4013      	ands	r3, r2
 800d200:	d049      	beq.n	800d296 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d026      	beq.n	800d258 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800d20a:	4b33      	ldr	r3, [pc, #204]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d20c:	689a      	ldr	r2, [r3, #8]
 800d20e:	4b32      	ldr	r3, [pc, #200]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d210:	2101      	movs	r1, #1
 800d212:	430a      	orrs	r2, r1
 800d214:	609a      	str	r2, [r3, #8]
 800d216:	4b30      	ldr	r3, [pc, #192]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d21a:	4b2f      	ldr	r3, [pc, #188]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d21c:	2101      	movs	r1, #1
 800d21e:	430a      	orrs	r2, r1
 800d220:	635a      	str	r2, [r3, #52]	@ 0x34
 800d222:	4b34      	ldr	r3, [pc, #208]	@ (800d2f4 <HAL_RCC_OscConfig+0x6a4>)
 800d224:	6a1a      	ldr	r2, [r3, #32]
 800d226:	4b33      	ldr	r3, [pc, #204]	@ (800d2f4 <HAL_RCC_OscConfig+0x6a4>)
 800d228:	2180      	movs	r1, #128	@ 0x80
 800d22a:	0189      	lsls	r1, r1, #6
 800d22c:	430a      	orrs	r2, r1
 800d22e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d230:	f7fb fed2 	bl	8008fd8 <HAL_GetTick>
 800d234:	0003      	movs	r3, r0
 800d236:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d238:	e008      	b.n	800d24c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d23a:	f7fb fecd 	bl	8008fd8 <HAL_GetTick>
 800d23e:	0002      	movs	r2, r0
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	2b02      	cmp	r3, #2
 800d246:	d901      	bls.n	800d24c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800d248:	2303      	movs	r3, #3
 800d24a:	e0ca      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d24c:	4b22      	ldr	r3, [pc, #136]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	2202      	movs	r2, #2
 800d252:	4013      	ands	r3, r2
 800d254:	d0f1      	beq.n	800d23a <HAL_RCC_OscConfig+0x5ea>
 800d256:	e01e      	b.n	800d296 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800d258:	4b1f      	ldr	r3, [pc, #124]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d25a:	689a      	ldr	r2, [r3, #8]
 800d25c:	4b1e      	ldr	r3, [pc, #120]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d25e:	2101      	movs	r1, #1
 800d260:	438a      	bics	r2, r1
 800d262:	609a      	str	r2, [r3, #8]
 800d264:	4b23      	ldr	r3, [pc, #140]	@ (800d2f4 <HAL_RCC_OscConfig+0x6a4>)
 800d266:	6a1a      	ldr	r2, [r3, #32]
 800d268:	4b22      	ldr	r3, [pc, #136]	@ (800d2f4 <HAL_RCC_OscConfig+0x6a4>)
 800d26a:	4923      	ldr	r1, [pc, #140]	@ (800d2f8 <HAL_RCC_OscConfig+0x6a8>)
 800d26c:	400a      	ands	r2, r1
 800d26e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d270:	f7fb feb2 	bl	8008fd8 <HAL_GetTick>
 800d274:	0003      	movs	r3, r0
 800d276:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d278:	e008      	b.n	800d28c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d27a:	f7fb fead 	bl	8008fd8 <HAL_GetTick>
 800d27e:	0002      	movs	r2, r0
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	2b02      	cmp	r3, #2
 800d286:	d901      	bls.n	800d28c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800d288:	2303      	movs	r3, #3
 800d28a:	e0aa      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d28c:	4b12      	ldr	r3, [pc, #72]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	2202      	movs	r2, #2
 800d292:	4013      	ands	r3, r2
 800d294:	d1f1      	bne.n	800d27a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d100      	bne.n	800d2a0 <HAL_RCC_OscConfig+0x650>
 800d29e:	e09f      	b.n	800d3e0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	2b0c      	cmp	r3, #12
 800d2a4:	d100      	bne.n	800d2a8 <HAL_RCC_OscConfig+0x658>
 800d2a6:	e078      	b.n	800d39a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d159      	bne.n	800d364 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2b0:	4b09      	ldr	r3, [pc, #36]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	4b08      	ldr	r3, [pc, #32]	@ (800d2d8 <HAL_RCC_OscConfig+0x688>)
 800d2b6:	4911      	ldr	r1, [pc, #68]	@ (800d2fc <HAL_RCC_OscConfig+0x6ac>)
 800d2b8:	400a      	ands	r2, r1
 800d2ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d2bc:	f7fb fe8c 	bl	8008fd8 <HAL_GetTick>
 800d2c0:	0003      	movs	r3, r0
 800d2c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d2c4:	e01c      	b.n	800d300 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d2c6:	f7fb fe87 	bl	8008fd8 <HAL_GetTick>
 800d2ca:	0002      	movs	r2, r0
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d915      	bls.n	800d300 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e084      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
 800d2d8:	40021000 	.word	0x40021000
 800d2dc:	ffff1fff 	.word	0xffff1fff
 800d2e0:	fffffeff 	.word	0xfffffeff
 800d2e4:	40007000 	.word	0x40007000
 800d2e8:	fffffbff 	.word	0xfffffbff
 800d2ec:	00001388 	.word	0x00001388
 800d2f0:	efffffff 	.word	0xefffffff
 800d2f4:	40010000 	.word	0x40010000
 800d2f8:	ffffdfff 	.word	0xffffdfff
 800d2fc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d300:	4b3a      	ldr	r3, [pc, #232]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	2380      	movs	r3, #128	@ 0x80
 800d306:	049b      	lsls	r3, r3, #18
 800d308:	4013      	ands	r3, r2
 800d30a:	d1dc      	bne.n	800d2c6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d30c:	4b37      	ldr	r3, [pc, #220]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	4a37      	ldr	r2, [pc, #220]	@ (800d3f0 <HAL_RCC_OscConfig+0x7a0>)
 800d312:	4013      	ands	r3, r2
 800d314:	0019      	movs	r1, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d31e:	431a      	orrs	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d324:	431a      	orrs	r2, r3
 800d326:	4b31      	ldr	r3, [pc, #196]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d328:	430a      	orrs	r2, r1
 800d32a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d32c:	4b2f      	ldr	r3, [pc, #188]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	4b2e      	ldr	r3, [pc, #184]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d332:	2180      	movs	r1, #128	@ 0x80
 800d334:	0449      	lsls	r1, r1, #17
 800d336:	430a      	orrs	r2, r1
 800d338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d33a:	f7fb fe4d 	bl	8008fd8 <HAL_GetTick>
 800d33e:	0003      	movs	r3, r0
 800d340:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800d342:	e008      	b.n	800d356 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d344:	f7fb fe48 	bl	8008fd8 <HAL_GetTick>
 800d348:	0002      	movs	r2, r0
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d901      	bls.n	800d356 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800d352:	2303      	movs	r3, #3
 800d354:	e045      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800d356:	4b25      	ldr	r3, [pc, #148]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	2380      	movs	r3, #128	@ 0x80
 800d35c:	049b      	lsls	r3, r3, #18
 800d35e:	4013      	ands	r3, r2
 800d360:	d0f0      	beq.n	800d344 <HAL_RCC_OscConfig+0x6f4>
 800d362:	e03d      	b.n	800d3e0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d364:	4b21      	ldr	r3, [pc, #132]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	4b20      	ldr	r3, [pc, #128]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d36a:	4922      	ldr	r1, [pc, #136]	@ (800d3f4 <HAL_RCC_OscConfig+0x7a4>)
 800d36c:	400a      	ands	r2, r1
 800d36e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d370:	f7fb fe32 	bl	8008fd8 <HAL_GetTick>
 800d374:	0003      	movs	r3, r0
 800d376:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d378:	e008      	b.n	800d38c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d37a:	f7fb fe2d 	bl	8008fd8 <HAL_GetTick>
 800d37e:	0002      	movs	r2, r0
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	2b02      	cmp	r3, #2
 800d386:	d901      	bls.n	800d38c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800d388:	2303      	movs	r3, #3
 800d38a:	e02a      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800d38c:	4b17      	ldr	r3, [pc, #92]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	2380      	movs	r3, #128	@ 0x80
 800d392:	049b      	lsls	r3, r3, #18
 800d394:	4013      	ands	r3, r2
 800d396:	d1f0      	bne.n	800d37a <HAL_RCC_OscConfig+0x72a>
 800d398:	e022      	b.n	800d3e0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d101      	bne.n	800d3a6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e01d      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d3a6:	4b11      	ldr	r3, [pc, #68]	@ (800d3ec <HAL_RCC_OscConfig+0x79c>)
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d3ac:	69ba      	ldr	r2, [r7, #24]
 800d3ae:	2380      	movs	r3, #128	@ 0x80
 800d3b0:	025b      	lsls	r3, r3, #9
 800d3b2:	401a      	ands	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d10f      	bne.n	800d3dc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800d3bc:	69ba      	ldr	r2, [r7, #24]
 800d3be:	23f0      	movs	r3, #240	@ 0xf0
 800d3c0:	039b      	lsls	r3, r3, #14
 800d3c2:	401a      	ands	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d107      	bne.n	800d3dc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800d3cc:	69ba      	ldr	r2, [r7, #24]
 800d3ce:	23c0      	movs	r3, #192	@ 0xc0
 800d3d0:	041b      	lsls	r3, r3, #16
 800d3d2:	401a      	ands	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d001      	beq.n	800d3e0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e000      	b.n	800d3e2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	0018      	movs	r0, r3
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	b00a      	add	sp, #40	@ 0x28
 800d3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800d3ea:	46c0      	nop			@ (mov r8, r8)
 800d3ec:	40021000 	.word	0x40021000
 800d3f0:	ff02ffff 	.word	0xff02ffff
 800d3f4:	feffffff 	.word	0xfeffffff

0800d3f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d3f8:	b5b0      	push	{r4, r5, r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d408:	2301      	movs	r3, #1
 800d40a:	e128      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d40c:	4b96      	ldr	r3, [pc, #600]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2201      	movs	r2, #1
 800d412:	4013      	ands	r3, r2
 800d414:	683a      	ldr	r2, [r7, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d91e      	bls.n	800d458 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d41a:	4b93      	ldr	r3, [pc, #588]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2201      	movs	r2, #1
 800d420:	4393      	bics	r3, r2
 800d422:	0019      	movs	r1, r3
 800d424:	4b90      	ldr	r3, [pc, #576]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	430a      	orrs	r2, r1
 800d42a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d42c:	f7fb fdd4 	bl	8008fd8 <HAL_GetTick>
 800d430:	0003      	movs	r3, r0
 800d432:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d434:	e009      	b.n	800d44a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d436:	f7fb fdcf 	bl	8008fd8 <HAL_GetTick>
 800d43a:	0002      	movs	r2, r0
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	4a8a      	ldr	r2, [pc, #552]	@ (800d66c <HAL_RCC_ClockConfig+0x274>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d901      	bls.n	800d44a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800d446:	2303      	movs	r3, #3
 800d448:	e109      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d44a:	4b87      	ldr	r3, [pc, #540]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2201      	movs	r2, #1
 800d450:	4013      	ands	r3, r2
 800d452:	683a      	ldr	r2, [r7, #0]
 800d454:	429a      	cmp	r2, r3
 800d456:	d1ee      	bne.n	800d436 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2202      	movs	r2, #2
 800d45e:	4013      	ands	r3, r2
 800d460:	d009      	beq.n	800d476 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d462:	4b83      	ldr	r3, [pc, #524]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	22f0      	movs	r2, #240	@ 0xf0
 800d468:	4393      	bics	r3, r2
 800d46a:	0019      	movs	r1, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689a      	ldr	r2, [r3, #8]
 800d470:	4b7f      	ldr	r3, [pc, #508]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d472:	430a      	orrs	r2, r1
 800d474:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2201      	movs	r2, #1
 800d47c:	4013      	ands	r3, r2
 800d47e:	d100      	bne.n	800d482 <HAL_RCC_ClockConfig+0x8a>
 800d480:	e089      	b.n	800d596 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	2b02      	cmp	r3, #2
 800d488:	d107      	bne.n	800d49a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d48a:	4b79      	ldr	r3, [pc, #484]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	2380      	movs	r3, #128	@ 0x80
 800d490:	029b      	lsls	r3, r3, #10
 800d492:	4013      	ands	r3, r2
 800d494:	d120      	bne.n	800d4d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e0e1      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	d107      	bne.n	800d4b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d4a2:	4b73      	ldr	r3, [pc, #460]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	2380      	movs	r3, #128	@ 0x80
 800d4a8:	049b      	lsls	r3, r3, #18
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	d114      	bne.n	800d4d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e0d5      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d106      	bne.n	800d4c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d4ba:	4b6d      	ldr	r3, [pc, #436]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2204      	movs	r2, #4
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	d109      	bne.n	800d4d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e0ca      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800d4c8:	4b69      	ldr	r3, [pc, #420]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	2380      	movs	r3, #128	@ 0x80
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	d101      	bne.n	800d4d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e0c2      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d4d8:	4b65      	ldr	r3, [pc, #404]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	2203      	movs	r2, #3
 800d4de:	4393      	bics	r3, r2
 800d4e0:	0019      	movs	r1, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685a      	ldr	r2, [r3, #4]
 800d4e6:	4b62      	ldr	r3, [pc, #392]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d4ec:	f7fb fd74 	bl	8008fd8 <HAL_GetTick>
 800d4f0:	0003      	movs	r3, r0
 800d4f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d111      	bne.n	800d520 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d4fc:	e009      	b.n	800d512 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d4fe:	f7fb fd6b 	bl	8008fd8 <HAL_GetTick>
 800d502:	0002      	movs	r2, r0
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	4a58      	ldr	r2, [pc, #352]	@ (800d66c <HAL_RCC_ClockConfig+0x274>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d901      	bls.n	800d512 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800d50e:	2303      	movs	r3, #3
 800d510:	e0a5      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d512:	4b57      	ldr	r3, [pc, #348]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	220c      	movs	r2, #12
 800d518:	4013      	ands	r3, r2
 800d51a:	2b08      	cmp	r3, #8
 800d51c:	d1ef      	bne.n	800d4fe <HAL_RCC_ClockConfig+0x106>
 800d51e:	e03a      	b.n	800d596 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	2b03      	cmp	r3, #3
 800d526:	d111      	bne.n	800d54c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d528:	e009      	b.n	800d53e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d52a:	f7fb fd55 	bl	8008fd8 <HAL_GetTick>
 800d52e:	0002      	movs	r2, r0
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	4a4d      	ldr	r2, [pc, #308]	@ (800d66c <HAL_RCC_ClockConfig+0x274>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d901      	bls.n	800d53e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800d53a:	2303      	movs	r3, #3
 800d53c:	e08f      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d53e:	4b4c      	ldr	r3, [pc, #304]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	220c      	movs	r2, #12
 800d544:	4013      	ands	r3, r2
 800d546:	2b0c      	cmp	r3, #12
 800d548:	d1ef      	bne.n	800d52a <HAL_RCC_ClockConfig+0x132>
 800d54a:	e024      	b.n	800d596 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d11b      	bne.n	800d58c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d554:	e009      	b.n	800d56a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d556:	f7fb fd3f 	bl	8008fd8 <HAL_GetTick>
 800d55a:	0002      	movs	r2, r0
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	4a42      	ldr	r2, [pc, #264]	@ (800d66c <HAL_RCC_ClockConfig+0x274>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d901      	bls.n	800d56a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800d566:	2303      	movs	r3, #3
 800d568:	e079      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d56a:	4b41      	ldr	r3, [pc, #260]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	220c      	movs	r2, #12
 800d570:	4013      	ands	r3, r2
 800d572:	2b04      	cmp	r3, #4
 800d574:	d1ef      	bne.n	800d556 <HAL_RCC_ClockConfig+0x15e>
 800d576:	e00e      	b.n	800d596 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d578:	f7fb fd2e 	bl	8008fd8 <HAL_GetTick>
 800d57c:	0002      	movs	r2, r0
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	4a3a      	ldr	r2, [pc, #232]	@ (800d66c <HAL_RCC_ClockConfig+0x274>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d901      	bls.n	800d58c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800d588:	2303      	movs	r3, #3
 800d58a:	e068      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d58c:	4b38      	ldr	r3, [pc, #224]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	220c      	movs	r2, #12
 800d592:	4013      	ands	r3, r2
 800d594:	d1f0      	bne.n	800d578 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d596:	4b34      	ldr	r3, [pc, #208]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2201      	movs	r2, #1
 800d59c:	4013      	ands	r3, r2
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d21e      	bcs.n	800d5e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5a4:	4b30      	ldr	r3, [pc, #192]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	4393      	bics	r3, r2
 800d5ac:	0019      	movs	r1, r3
 800d5ae:	4b2e      	ldr	r3, [pc, #184]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d5b6:	f7fb fd0f 	bl	8008fd8 <HAL_GetTick>
 800d5ba:	0003      	movs	r3, r0
 800d5bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5be:	e009      	b.n	800d5d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5c0:	f7fb fd0a 	bl	8008fd8 <HAL_GetTick>
 800d5c4:	0002      	movs	r2, r0
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	4a28      	ldr	r2, [pc, #160]	@ (800d66c <HAL_RCC_ClockConfig+0x274>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d901      	bls.n	800d5d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	e044      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5d4:	4b24      	ldr	r3, [pc, #144]	@ (800d668 <HAL_RCC_ClockConfig+0x270>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	4013      	ands	r3, r2
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d1ee      	bne.n	800d5c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2204      	movs	r2, #4
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	d009      	beq.n	800d600 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d5ec:	4b20      	ldr	r3, [pc, #128]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	4a20      	ldr	r2, [pc, #128]	@ (800d674 <HAL_RCC_ClockConfig+0x27c>)
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	0019      	movs	r1, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68da      	ldr	r2, [r3, #12]
 800d5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d5fc:	430a      	orrs	r2, r1
 800d5fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2208      	movs	r2, #8
 800d606:	4013      	ands	r3, r2
 800d608:	d00a      	beq.n	800d620 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d60a:	4b19      	ldr	r3, [pc, #100]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	4a1a      	ldr	r2, [pc, #104]	@ (800d678 <HAL_RCC_ClockConfig+0x280>)
 800d610:	4013      	ands	r3, r2
 800d612:	0019      	movs	r1, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	00da      	lsls	r2, r3, #3
 800d61a:	4b15      	ldr	r3, [pc, #84]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d61c:	430a      	orrs	r2, r1
 800d61e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d620:	f000 f832 	bl	800d688 <HAL_RCC_GetSysClockFreq>
 800d624:	0001      	movs	r1, r0
 800d626:	4b12      	ldr	r3, [pc, #72]	@ (800d670 <HAL_RCC_ClockConfig+0x278>)
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	091b      	lsrs	r3, r3, #4
 800d62c:	220f      	movs	r2, #15
 800d62e:	4013      	ands	r3, r2
 800d630:	4a12      	ldr	r2, [pc, #72]	@ (800d67c <HAL_RCC_ClockConfig+0x284>)
 800d632:	5cd3      	ldrb	r3, [r2, r3]
 800d634:	000a      	movs	r2, r1
 800d636:	40da      	lsrs	r2, r3
 800d638:	4b11      	ldr	r3, [pc, #68]	@ (800d680 <HAL_RCC_ClockConfig+0x288>)
 800d63a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d63c:	4b11      	ldr	r3, [pc, #68]	@ (800d684 <HAL_RCC_ClockConfig+0x28c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	250b      	movs	r5, #11
 800d642:	197c      	adds	r4, r7, r5
 800d644:	0018      	movs	r0, r3
 800d646:	f7fb fc81 	bl	8008f4c <HAL_InitTick>
 800d64a:	0003      	movs	r3, r0
 800d64c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800d64e:	197b      	adds	r3, r7, r5
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800d656:	197b      	adds	r3, r7, r5
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	e000      	b.n	800d65e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	0018      	movs	r0, r3
 800d660:	46bd      	mov	sp, r7
 800d662:	b004      	add	sp, #16
 800d664:	bdb0      	pop	{r4, r5, r7, pc}
 800d666:	46c0      	nop			@ (mov r8, r8)
 800d668:	40022000 	.word	0x40022000
 800d66c:	00001388 	.word	0x00001388
 800d670:	40021000 	.word	0x40021000
 800d674:	fffff8ff 	.word	0xfffff8ff
 800d678:	ffffc7ff 	.word	0xffffc7ff
 800d67c:	080153c0 	.word	0x080153c0
 800d680:	20000130 	.word	0x20000130
 800d684:	20000144 	.word	0x20000144

0800d688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d688:	b5b0      	push	{r4, r5, r7, lr}
 800d68a:	b08e      	sub	sp, #56	@ 0x38
 800d68c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800d68e:	4b4c      	ldr	r3, [pc, #304]	@ (800d7c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d696:	230c      	movs	r3, #12
 800d698:	4013      	ands	r3, r2
 800d69a:	2b0c      	cmp	r3, #12
 800d69c:	d014      	beq.n	800d6c8 <HAL_RCC_GetSysClockFreq+0x40>
 800d69e:	d900      	bls.n	800d6a2 <HAL_RCC_GetSysClockFreq+0x1a>
 800d6a0:	e07b      	b.n	800d79a <HAL_RCC_GetSysClockFreq+0x112>
 800d6a2:	2b04      	cmp	r3, #4
 800d6a4:	d002      	beq.n	800d6ac <HAL_RCC_GetSysClockFreq+0x24>
 800d6a6:	2b08      	cmp	r3, #8
 800d6a8:	d00b      	beq.n	800d6c2 <HAL_RCC_GetSysClockFreq+0x3a>
 800d6aa:	e076      	b.n	800d79a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800d6ac:	4b44      	ldr	r3, [pc, #272]	@ (800d7c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2210      	movs	r2, #16
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	d002      	beq.n	800d6bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800d6b6:	4b43      	ldr	r3, [pc, #268]	@ (800d7c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800d6b8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800d6ba:	e07c      	b.n	800d7b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800d6bc:	4b42      	ldr	r3, [pc, #264]	@ (800d7c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800d6be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d6c0:	e079      	b.n	800d7b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d6c2:	4b42      	ldr	r3, [pc, #264]	@ (800d7cc <HAL_RCC_GetSysClockFreq+0x144>)
 800d6c4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d6c6:	e076      	b.n	800d7b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800d6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ca:	0c9a      	lsrs	r2, r3, #18
 800d6cc:	230f      	movs	r3, #15
 800d6ce:	401a      	ands	r2, r3
 800d6d0:	4b3f      	ldr	r3, [pc, #252]	@ (800d7d0 <HAL_RCC_GetSysClockFreq+0x148>)
 800d6d2:	5c9b      	ldrb	r3, [r3, r2]
 800d6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800d6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d8:	0d9a      	lsrs	r2, r3, #22
 800d6da:	2303      	movs	r3, #3
 800d6dc:	4013      	ands	r3, r2
 800d6de:	3301      	adds	r3, #1
 800d6e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d6e2:	4b37      	ldr	r3, [pc, #220]	@ (800d7c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d6e4:	68da      	ldr	r2, [r3, #12]
 800d6e6:	2380      	movs	r3, #128	@ 0x80
 800d6e8:	025b      	lsls	r3, r3, #9
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	d01a      	beq.n	800d724 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800d6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f0:	61bb      	str	r3, [r7, #24]
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	61fb      	str	r3, [r7, #28]
 800d6f6:	4a35      	ldr	r2, [pc, #212]	@ (800d7cc <HAL_RCC_GetSysClockFreq+0x144>)
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	69b8      	ldr	r0, [r7, #24]
 800d6fc:	69f9      	ldr	r1, [r7, #28]
 800d6fe:	f7f2 ff73 	bl	80005e8 <__aeabi_lmul>
 800d702:	0002      	movs	r2, r0
 800d704:	000b      	movs	r3, r1
 800d706:	0010      	movs	r0, r2
 800d708:	0019      	movs	r1, r3
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	613b      	str	r3, [r7, #16]
 800d70e:	2300      	movs	r3, #0
 800d710:	617b      	str	r3, [r7, #20]
 800d712:	693a      	ldr	r2, [r7, #16]
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	f7f2 ff47 	bl	80005a8 <__aeabi_uldivmod>
 800d71a:	0002      	movs	r2, r0
 800d71c:	000b      	movs	r3, r1
 800d71e:	0013      	movs	r3, r2
 800d720:	637b      	str	r3, [r7, #52]	@ 0x34
 800d722:	e037      	b.n	800d794 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800d724:	4b26      	ldr	r3, [pc, #152]	@ (800d7c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2210      	movs	r2, #16
 800d72a:	4013      	ands	r3, r2
 800d72c:	d01a      	beq.n	800d764 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800d72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d730:	60bb      	str	r3, [r7, #8]
 800d732:	2300      	movs	r3, #0
 800d734:	60fb      	str	r3, [r7, #12]
 800d736:	4a23      	ldr	r2, [pc, #140]	@ (800d7c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800d738:	2300      	movs	r3, #0
 800d73a:	68b8      	ldr	r0, [r7, #8]
 800d73c:	68f9      	ldr	r1, [r7, #12]
 800d73e:	f7f2 ff53 	bl	80005e8 <__aeabi_lmul>
 800d742:	0002      	movs	r2, r0
 800d744:	000b      	movs	r3, r1
 800d746:	0010      	movs	r0, r2
 800d748:	0019      	movs	r1, r3
 800d74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74c:	603b      	str	r3, [r7, #0]
 800d74e:	2300      	movs	r3, #0
 800d750:	607b      	str	r3, [r7, #4]
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f7f2 ff27 	bl	80005a8 <__aeabi_uldivmod>
 800d75a:	0002      	movs	r2, r0
 800d75c:	000b      	movs	r3, r1
 800d75e:	0013      	movs	r3, r2
 800d760:	637b      	str	r3, [r7, #52]	@ 0x34
 800d762:	e017      	b.n	800d794 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800d764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d766:	0018      	movs	r0, r3
 800d768:	2300      	movs	r3, #0
 800d76a:	0019      	movs	r1, r3
 800d76c:	4a16      	ldr	r2, [pc, #88]	@ (800d7c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800d76e:	2300      	movs	r3, #0
 800d770:	f7f2 ff3a 	bl	80005e8 <__aeabi_lmul>
 800d774:	0002      	movs	r2, r0
 800d776:	000b      	movs	r3, r1
 800d778:	0010      	movs	r0, r2
 800d77a:	0019      	movs	r1, r3
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	001c      	movs	r4, r3
 800d780:	2300      	movs	r3, #0
 800d782:	001d      	movs	r5, r3
 800d784:	0022      	movs	r2, r4
 800d786:	002b      	movs	r3, r5
 800d788:	f7f2 ff0e 	bl	80005a8 <__aeabi_uldivmod>
 800d78c:	0002      	movs	r2, r0
 800d78e:	000b      	movs	r3, r1
 800d790:	0013      	movs	r3, r2
 800d792:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800d794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d796:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d798:	e00d      	b.n	800d7b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800d79a:	4b09      	ldr	r3, [pc, #36]	@ (800d7c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	0b5b      	lsrs	r3, r3, #13
 800d7a0:	2207      	movs	r2, #7
 800d7a2:	4013      	ands	r3, r2
 800d7a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	2280      	movs	r2, #128	@ 0x80
 800d7ac:	0212      	lsls	r2, r2, #8
 800d7ae:	409a      	lsls	r2, r3
 800d7b0:	0013      	movs	r3, r2
 800d7b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d7b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800d7b8:	0018      	movs	r0, r3
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	b00e      	add	sp, #56	@ 0x38
 800d7be:	bdb0      	pop	{r4, r5, r7, pc}
 800d7c0:	40021000 	.word	0x40021000
 800d7c4:	003d0900 	.word	0x003d0900
 800d7c8:	00f42400 	.word	0x00f42400
 800d7cc:	007a1200 	.word	0x007a1200
 800d7d0:	080153d8 	.word	0x080153d8

0800d7d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d7d8:	4b02      	ldr	r3, [pc, #8]	@ (800d7e4 <HAL_RCC_GetHCLKFreq+0x10>)
 800d7da:	681b      	ldr	r3, [r3, #0]
}
 800d7dc:	0018      	movs	r0, r3
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	46c0      	nop			@ (mov r8, r8)
 800d7e4:	20000130 	.word	0x20000130

0800d7e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d7ec:	f7ff fff2 	bl	800d7d4 <HAL_RCC_GetHCLKFreq>
 800d7f0:	0001      	movs	r1, r0
 800d7f2:	4b06      	ldr	r3, [pc, #24]	@ (800d80c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	0a1b      	lsrs	r3, r3, #8
 800d7f8:	2207      	movs	r2, #7
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	4a04      	ldr	r2, [pc, #16]	@ (800d810 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d7fe:	5cd3      	ldrb	r3, [r2, r3]
 800d800:	40d9      	lsrs	r1, r3
 800d802:	000b      	movs	r3, r1
}
 800d804:	0018      	movs	r0, r3
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	46c0      	nop			@ (mov r8, r8)
 800d80c:	40021000 	.word	0x40021000
 800d810:	080153d0 	.word	0x080153d0

0800d814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d818:	f7ff ffdc 	bl	800d7d4 <HAL_RCC_GetHCLKFreq>
 800d81c:	0001      	movs	r1, r0
 800d81e:	4b06      	ldr	r3, [pc, #24]	@ (800d838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	0adb      	lsrs	r3, r3, #11
 800d824:	2207      	movs	r2, #7
 800d826:	4013      	ands	r3, r2
 800d828:	4a04      	ldr	r2, [pc, #16]	@ (800d83c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d82a:	5cd3      	ldrb	r3, [r2, r3]
 800d82c:	40d9      	lsrs	r1, r3
 800d82e:	000b      	movs	r3, r1
}
 800d830:	0018      	movs	r0, r3
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	46c0      	nop			@ (mov r8, r8)
 800d838:	40021000 	.word	0x40021000
 800d83c:	080153d0 	.word	0x080153d0

0800d840 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800d848:	2017      	movs	r0, #23
 800d84a:	183b      	adds	r3, r7, r0
 800d84c:	2200      	movs	r2, #0
 800d84e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2220      	movs	r2, #32
 800d856:	4013      	ands	r3, r2
 800d858:	d100      	bne.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800d85a:	e0c7      	b.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d85c:	4b9b      	ldr	r3, [pc, #620]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d85e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d860:	2380      	movs	r3, #128	@ 0x80
 800d862:	055b      	lsls	r3, r3, #21
 800d864:	4013      	ands	r3, r2
 800d866:	d109      	bne.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d868:	4b98      	ldr	r3, [pc, #608]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d86a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d86c:	4b97      	ldr	r3, [pc, #604]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d86e:	2180      	movs	r1, #128	@ 0x80
 800d870:	0549      	lsls	r1, r1, #21
 800d872:	430a      	orrs	r2, r1
 800d874:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800d876:	183b      	adds	r3, r7, r0
 800d878:	2201      	movs	r2, #1
 800d87a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d87c:	4b94      	ldr	r3, [pc, #592]	@ (800dad0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	2380      	movs	r3, #128	@ 0x80
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	4013      	ands	r3, r2
 800d886:	d11a      	bne.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d888:	4b91      	ldr	r3, [pc, #580]	@ (800dad0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	4b90      	ldr	r3, [pc, #576]	@ (800dad0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d88e:	2180      	movs	r1, #128	@ 0x80
 800d890:	0049      	lsls	r1, r1, #1
 800d892:	430a      	orrs	r2, r1
 800d894:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d896:	f7fb fb9f 	bl	8008fd8 <HAL_GetTick>
 800d89a:	0003      	movs	r3, r0
 800d89c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d89e:	e008      	b.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8a0:	f7fb fb9a 	bl	8008fd8 <HAL_GetTick>
 800d8a4:	0002      	movs	r2, r0
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	2b64      	cmp	r3, #100	@ 0x64
 800d8ac:	d901      	bls.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	e107      	b.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d8b2:	4b87      	ldr	r3, [pc, #540]	@ (800dad0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	2380      	movs	r3, #128	@ 0x80
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	d0f0      	beq.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800d8be:	4b83      	ldr	r3, [pc, #524]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	23c0      	movs	r3, #192	@ 0xc0
 800d8c4:	039b      	lsls	r3, r3, #14
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	23c0      	movs	r3, #192	@ 0xc0
 800d8d0:	039b      	lsls	r3, r3, #14
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d013      	beq.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685a      	ldr	r2, [r3, #4]
 800d8de:	23c0      	movs	r3, #192	@ 0xc0
 800d8e0:	029b      	lsls	r3, r3, #10
 800d8e2:	401a      	ands	r2, r3
 800d8e4:	23c0      	movs	r3, #192	@ 0xc0
 800d8e6:	029b      	lsls	r3, r3, #10
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d10a      	bne.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d8ec:	4b77      	ldr	r3, [pc, #476]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	2380      	movs	r3, #128	@ 0x80
 800d8f2:	029b      	lsls	r3, r3, #10
 800d8f4:	401a      	ands	r2, r3
 800d8f6:	2380      	movs	r3, #128	@ 0x80
 800d8f8:	029b      	lsls	r3, r3, #10
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d101      	bne.n	800d902 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800d8fe:	2301      	movs	r3, #1
 800d900:	e0df      	b.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800d902:	4b72      	ldr	r3, [pc, #456]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d904:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d906:	23c0      	movs	r3, #192	@ 0xc0
 800d908:	029b      	lsls	r3, r3, #10
 800d90a:	4013      	ands	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d03b      	beq.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685a      	ldr	r2, [r3, #4]
 800d918:	23c0      	movs	r3, #192	@ 0xc0
 800d91a:	029b      	lsls	r3, r3, #10
 800d91c:	4013      	ands	r3, r2
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	429a      	cmp	r2, r3
 800d922:	d033      	beq.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2220      	movs	r2, #32
 800d92a:	4013      	ands	r3, r2
 800d92c:	d02e      	beq.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d92e:	4b67      	ldr	r3, [pc, #412]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d932:	4a68      	ldr	r2, [pc, #416]	@ (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800d934:	4013      	ands	r3, r2
 800d936:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d938:	4b64      	ldr	r3, [pc, #400]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d93a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d93c:	4b63      	ldr	r3, [pc, #396]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d93e:	2180      	movs	r1, #128	@ 0x80
 800d940:	0309      	lsls	r1, r1, #12
 800d942:	430a      	orrs	r2, r1
 800d944:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d946:	4b61      	ldr	r3, [pc, #388]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d94a:	4b60      	ldr	r3, [pc, #384]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d94c:	4962      	ldr	r1, [pc, #392]	@ (800dad8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800d94e:	400a      	ands	r2, r1
 800d950:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800d952:	4b5e      	ldr	r3, [pc, #376]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	2380      	movs	r3, #128	@ 0x80
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	4013      	ands	r3, r2
 800d960:	d014      	beq.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d962:	f7fb fb39 	bl	8008fd8 <HAL_GetTick>
 800d966:	0003      	movs	r3, r0
 800d968:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d96a:	e009      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d96c:	f7fb fb34 	bl	8008fd8 <HAL_GetTick>
 800d970:	0002      	movs	r2, r0
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	4a59      	ldr	r2, [pc, #356]	@ (800dadc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d901      	bls.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	e0a0      	b.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d980:	4b52      	ldr	r3, [pc, #328]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d982:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d984:	2380      	movs	r3, #128	@ 0x80
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4013      	ands	r3, r2
 800d98a:	d0ef      	beq.n	800d96c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2220      	movs	r2, #32
 800d992:	4013      	ands	r3, r2
 800d994:	d01f      	beq.n	800d9d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	23c0      	movs	r3, #192	@ 0xc0
 800d99c:	029b      	lsls	r3, r3, #10
 800d99e:	401a      	ands	r2, r3
 800d9a0:	23c0      	movs	r3, #192	@ 0xc0
 800d9a2:	029b      	lsls	r3, r3, #10
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d10c      	bne.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800d9a8:	4b48      	ldr	r3, [pc, #288]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a4c      	ldr	r2, [pc, #304]	@ (800dae0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	0019      	movs	r1, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	685a      	ldr	r2, [r3, #4]
 800d9b6:	23c0      	movs	r3, #192	@ 0xc0
 800d9b8:	039b      	lsls	r3, r3, #14
 800d9ba:	401a      	ands	r2, r3
 800d9bc:	4b43      	ldr	r3, [pc, #268]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	4b42      	ldr	r3, [pc, #264]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d9c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	23c0      	movs	r3, #192	@ 0xc0
 800d9cc:	029b      	lsls	r3, r3, #10
 800d9ce:	401a      	ands	r2, r3
 800d9d0:	4b3e      	ldr	r3, [pc, #248]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d9d2:	430a      	orrs	r2, r1
 800d9d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d9d6:	2317      	movs	r3, #23
 800d9d8:	18fb      	adds	r3, r7, r3
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d105      	bne.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d9e0:	4b3a      	ldr	r3, [pc, #232]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d9e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9e4:	4b39      	ldr	r3, [pc, #228]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d9e6:	493f      	ldr	r1, [pc, #252]	@ (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d9e8:	400a      	ands	r2, r1
 800d9ea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	d009      	beq.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d9f6:	4b35      	ldr	r3, [pc, #212]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d9f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9fa:	2203      	movs	r2, #3
 800d9fc:	4393      	bics	r3, r2
 800d9fe:	0019      	movs	r1, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	689a      	ldr	r2, [r3, #8]
 800da04:	4b31      	ldr	r3, [pc, #196]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da06:	430a      	orrs	r2, r1
 800da08:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2202      	movs	r2, #2
 800da10:	4013      	ands	r3, r2
 800da12:	d009      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800da14:	4b2d      	ldr	r3, [pc, #180]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da18:	220c      	movs	r2, #12
 800da1a:	4393      	bics	r3, r2
 800da1c:	0019      	movs	r1, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	68da      	ldr	r2, [r3, #12]
 800da22:	4b2a      	ldr	r3, [pc, #168]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da24:	430a      	orrs	r2, r1
 800da26:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2204      	movs	r2, #4
 800da2e:	4013      	ands	r3, r2
 800da30:	d009      	beq.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800da32:	4b26      	ldr	r3, [pc, #152]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da36:	4a2c      	ldr	r2, [pc, #176]	@ (800dae8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800da38:	4013      	ands	r3, r2
 800da3a:	0019      	movs	r1, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	691a      	ldr	r2, [r3, #16]
 800da40:	4b22      	ldr	r3, [pc, #136]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da42:	430a      	orrs	r2, r1
 800da44:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2208      	movs	r2, #8
 800da4c:	4013      	ands	r3, r2
 800da4e:	d009      	beq.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800da50:	4b1e      	ldr	r3, [pc, #120]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da54:	4a25      	ldr	r2, [pc, #148]	@ (800daec <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800da56:	4013      	ands	r3, r2
 800da58:	0019      	movs	r1, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	695a      	ldr	r2, [r3, #20]
 800da5e:	4b1b      	ldr	r3, [pc, #108]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da60:	430a      	orrs	r2, r1
 800da62:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	2380      	movs	r3, #128	@ 0x80
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	4013      	ands	r3, r2
 800da6e:	d009      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800da70:	4b16      	ldr	r3, [pc, #88]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da74:	4a17      	ldr	r2, [pc, #92]	@ (800dad4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800da76:	4013      	ands	r3, r2
 800da78:	0019      	movs	r1, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	699a      	ldr	r2, [r3, #24]
 800da7e:	4b13      	ldr	r3, [pc, #76]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da80:	430a      	orrs	r2, r1
 800da82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2240      	movs	r2, #64	@ 0x40
 800da8a:	4013      	ands	r3, r2
 800da8c:	d009      	beq.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800da8e:	4b0f      	ldr	r3, [pc, #60]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da92:	4a17      	ldr	r2, [pc, #92]	@ (800daf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800da94:	4013      	ands	r3, r2
 800da96:	0019      	movs	r1, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6a1a      	ldr	r2, [r3, #32]
 800da9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800da9e:	430a      	orrs	r2, r1
 800daa0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2280      	movs	r2, #128	@ 0x80
 800daa8:	4013      	ands	r3, r2
 800daaa:	d009      	beq.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800daac:	4b07      	ldr	r3, [pc, #28]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800daae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dab0:	4a10      	ldr	r2, [pc, #64]	@ (800daf4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800dab2:	4013      	ands	r3, r2
 800dab4:	0019      	movs	r1, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69da      	ldr	r2, [r3, #28]
 800daba:	4b04      	ldr	r3, [pc, #16]	@ (800dacc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800dabc:	430a      	orrs	r2, r1
 800dabe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	0018      	movs	r0, r3
 800dac4:	46bd      	mov	sp, r7
 800dac6:	b006      	add	sp, #24
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	46c0      	nop			@ (mov r8, r8)
 800dacc:	40021000 	.word	0x40021000
 800dad0:	40007000 	.word	0x40007000
 800dad4:	fffcffff 	.word	0xfffcffff
 800dad8:	fff7ffff 	.word	0xfff7ffff
 800dadc:	00001388 	.word	0x00001388
 800dae0:	ffcfffff 	.word	0xffcfffff
 800dae4:	efffffff 	.word	0xefffffff
 800dae8:	fffff3ff 	.word	0xfffff3ff
 800daec:	ffffcfff 	.word	0xffffcfff
 800daf0:	fbffffff 	.word	0xfbffffff
 800daf4:	fff3ffff 	.word	0xfff3ffff

0800daf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d101      	bne.n	800db0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db06:	2301      	movs	r3, #1
 800db08:	e032      	b.n	800db70 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2239      	movs	r2, #57	@ 0x39
 800db0e:	5c9b      	ldrb	r3, [r3, r2]
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	d107      	bne.n	800db26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2238      	movs	r2, #56	@ 0x38
 800db1a:	2100      	movs	r1, #0
 800db1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	0018      	movs	r0, r3
 800db22:	f7fa fbdf 	bl	80082e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2239      	movs	r2, #57	@ 0x39
 800db2a:	2102      	movs	r1, #2
 800db2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	3304      	adds	r3, #4
 800db36:	0019      	movs	r1, r3
 800db38:	0010      	movs	r0, r2
 800db3a:	f000 f975 	bl	800de28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	223e      	movs	r2, #62	@ 0x3e
 800db42:	2101      	movs	r1, #1
 800db44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	223a      	movs	r2, #58	@ 0x3a
 800db4a:	2101      	movs	r1, #1
 800db4c:	5499      	strb	r1, [r3, r2]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	223b      	movs	r2, #59	@ 0x3b
 800db52:	2101      	movs	r1, #1
 800db54:	5499      	strb	r1, [r3, r2]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	223c      	movs	r2, #60	@ 0x3c
 800db5a:	2101      	movs	r1, #1
 800db5c:	5499      	strb	r1, [r3, r2]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	223d      	movs	r2, #61	@ 0x3d
 800db62:	2101      	movs	r1, #1
 800db64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2239      	movs	r2, #57	@ 0x39
 800db6a:	2101      	movs	r1, #1
 800db6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	0018      	movs	r0, r3
 800db72:	46bd      	mov	sp, r7
 800db74:	b002      	add	sp, #8
 800db76:	bd80      	pop	{r7, pc}

0800db78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d108      	bne.n	800db9a <HAL_TIM_PWM_Start+0x22>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	223a      	movs	r2, #58	@ 0x3a
 800db8c:	5c9b      	ldrb	r3, [r3, r2]
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	3b01      	subs	r3, #1
 800db92:	1e5a      	subs	r2, r3, #1
 800db94:	4193      	sbcs	r3, r2
 800db96:	b2db      	uxtb	r3, r3
 800db98:	e01f      	b.n	800dbda <HAL_TIM_PWM_Start+0x62>
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b04      	cmp	r3, #4
 800db9e:	d108      	bne.n	800dbb2 <HAL_TIM_PWM_Start+0x3a>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	223b      	movs	r2, #59	@ 0x3b
 800dba4:	5c9b      	ldrb	r3, [r3, r2]
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	1e5a      	subs	r2, r3, #1
 800dbac:	4193      	sbcs	r3, r2
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	e013      	b.n	800dbda <HAL_TIM_PWM_Start+0x62>
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	2b08      	cmp	r3, #8
 800dbb6:	d108      	bne.n	800dbca <HAL_TIM_PWM_Start+0x52>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	223c      	movs	r2, #60	@ 0x3c
 800dbbc:	5c9b      	ldrb	r3, [r3, r2]
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	1e5a      	subs	r2, r3, #1
 800dbc4:	4193      	sbcs	r3, r2
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	e007      	b.n	800dbda <HAL_TIM_PWM_Start+0x62>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	223d      	movs	r2, #61	@ 0x3d
 800dbce:	5c9b      	ldrb	r3, [r3, r2]
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	1e5a      	subs	r2, r3, #1
 800dbd6:	4193      	sbcs	r3, r2
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e052      	b.n	800dc88 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d104      	bne.n	800dbf2 <HAL_TIM_PWM_Start+0x7a>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	223a      	movs	r2, #58	@ 0x3a
 800dbec:	2102      	movs	r1, #2
 800dbee:	5499      	strb	r1, [r3, r2]
 800dbf0:	e013      	b.n	800dc1a <HAL_TIM_PWM_Start+0xa2>
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d104      	bne.n	800dc02 <HAL_TIM_PWM_Start+0x8a>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	223b      	movs	r2, #59	@ 0x3b
 800dbfc:	2102      	movs	r1, #2
 800dbfe:	5499      	strb	r1, [r3, r2]
 800dc00:	e00b      	b.n	800dc1a <HAL_TIM_PWM_Start+0xa2>
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	d104      	bne.n	800dc12 <HAL_TIM_PWM_Start+0x9a>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	223c      	movs	r2, #60	@ 0x3c
 800dc0c:	2102      	movs	r1, #2
 800dc0e:	5499      	strb	r1, [r3, r2]
 800dc10:	e003      	b.n	800dc1a <HAL_TIM_PWM_Start+0xa2>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	223d      	movs	r2, #61	@ 0x3d
 800dc16:	2102      	movs	r1, #2
 800dc18:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	2201      	movs	r2, #1
 800dc22:	0018      	movs	r0, r3
 800dc24:	f000 fa62 	bl	800e0ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	2380      	movs	r3, #128	@ 0x80
 800dc2e:	05db      	lsls	r3, r3, #23
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d00e      	beq.n	800dc52 <HAL_TIM_PWM_Start+0xda>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a15      	ldr	r2, [pc, #84]	@ (800dc90 <HAL_TIM_PWM_Start+0x118>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d009      	beq.n	800dc52 <HAL_TIM_PWM_Start+0xda>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a14      	ldr	r2, [pc, #80]	@ (800dc94 <HAL_TIM_PWM_Start+0x11c>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d004      	beq.n	800dc52 <HAL_TIM_PWM_Start+0xda>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a12      	ldr	r2, [pc, #72]	@ (800dc98 <HAL_TIM_PWM_Start+0x120>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d111      	bne.n	800dc76 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	2207      	movs	r2, #7
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b06      	cmp	r3, #6
 800dc62:	d010      	beq.n	800dc86 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2101      	movs	r1, #1
 800dc70:	430a      	orrs	r2, r1
 800dc72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc74:	e007      	b.n	800dc86 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2101      	movs	r1, #1
 800dc82:	430a      	orrs	r2, r1
 800dc84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	0018      	movs	r0, r3
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	b004      	add	sp, #16
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	40000400 	.word	0x40000400
 800dc94:	40010800 	.word	0x40010800
 800dc98:	40011400 	.word	0x40011400

0800dc9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dca8:	2317      	movs	r3, #23
 800dcaa:	18fb      	adds	r3, r7, r3
 800dcac:	2200      	movs	r2, #0
 800dcae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2238      	movs	r2, #56	@ 0x38
 800dcb4:	5c9b      	ldrb	r3, [r3, r2]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d101      	bne.n	800dcbe <HAL_TIM_PWM_ConfigChannel+0x22>
 800dcba:	2302      	movs	r3, #2
 800dcbc:	e0ad      	b.n	800de1a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2238      	movs	r2, #56	@ 0x38
 800dcc2:	2101      	movs	r1, #1
 800dcc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2b0c      	cmp	r3, #12
 800dcca:	d100      	bne.n	800dcce <HAL_TIM_PWM_ConfigChannel+0x32>
 800dccc:	e076      	b.n	800ddbc <HAL_TIM_PWM_ConfigChannel+0x120>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2b0c      	cmp	r3, #12
 800dcd2:	d900      	bls.n	800dcd6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800dcd4:	e095      	b.n	800de02 <HAL_TIM_PWM_ConfigChannel+0x166>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b08      	cmp	r3, #8
 800dcda:	d04e      	beq.n	800dd7a <HAL_TIM_PWM_ConfigChannel+0xde>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b08      	cmp	r3, #8
 800dce0:	d900      	bls.n	800dce4 <HAL_TIM_PWM_ConfigChannel+0x48>
 800dce2:	e08e      	b.n	800de02 <HAL_TIM_PWM_ConfigChannel+0x166>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d003      	beq.n	800dcf2 <HAL_TIM_PWM_ConfigChannel+0x56>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	d021      	beq.n	800dd34 <HAL_TIM_PWM_ConfigChannel+0x98>
 800dcf0:	e087      	b.n	800de02 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	0011      	movs	r1, r2
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f000 f8f2 	bl	800dee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	699a      	ldr	r2, [r3, #24]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2108      	movs	r1, #8
 800dd0c:	430a      	orrs	r2, r1
 800dd0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	699a      	ldr	r2, [r3, #24]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2104      	movs	r1, #4
 800dd1c:	438a      	bics	r2, r1
 800dd1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	6999      	ldr	r1, [r3, #24]
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	68da      	ldr	r2, [r3, #12]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	430a      	orrs	r2, r1
 800dd30:	619a      	str	r2, [r3, #24]
      break;
 800dd32:	e06b      	b.n	800de0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	0011      	movs	r1, r2
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	f000 f90d 	bl	800df5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	699a      	ldr	r2, [r3, #24]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2180      	movs	r1, #128	@ 0x80
 800dd4e:	0109      	lsls	r1, r1, #4
 800dd50:	430a      	orrs	r2, r1
 800dd52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	699a      	ldr	r2, [r3, #24]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4931      	ldr	r1, [pc, #196]	@ (800de24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800dd60:	400a      	ands	r2, r1
 800dd62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6999      	ldr	r1, [r3, #24]
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	021a      	lsls	r2, r3, #8
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	430a      	orrs	r2, r1
 800dd76:	619a      	str	r2, [r3, #24]
      break;
 800dd78:	e048      	b.n	800de0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	0011      	movs	r1, r2
 800dd82:	0018      	movs	r0, r3
 800dd84:	f000 f92c 	bl	800dfe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	69da      	ldr	r2, [r3, #28]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2108      	movs	r1, #8
 800dd94:	430a      	orrs	r2, r1
 800dd96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	69da      	ldr	r2, [r3, #28]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2104      	movs	r1, #4
 800dda4:	438a      	bics	r2, r1
 800dda6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	69d9      	ldr	r1, [r3, #28]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	61da      	str	r2, [r3, #28]
      break;
 800ddba:	e027      	b.n	800de0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	0011      	movs	r1, r2
 800ddc4:	0018      	movs	r0, r3
 800ddc6:	f000 f94b 	bl	800e060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	69da      	ldr	r2, [r3, #28]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2180      	movs	r1, #128	@ 0x80
 800ddd6:	0109      	lsls	r1, r1, #4
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	69da      	ldr	r2, [r3, #28]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	490f      	ldr	r1, [pc, #60]	@ (800de24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800dde8:	400a      	ands	r2, r1
 800ddea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	69d9      	ldr	r1, [r3, #28]
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	021a      	lsls	r2, r3, #8
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	430a      	orrs	r2, r1
 800ddfe:	61da      	str	r2, [r3, #28]
      break;
 800de00:	e004      	b.n	800de0c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800de02:	2317      	movs	r3, #23
 800de04:	18fb      	adds	r3, r7, r3
 800de06:	2201      	movs	r2, #1
 800de08:	701a      	strb	r2, [r3, #0]
      break;
 800de0a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2238      	movs	r2, #56	@ 0x38
 800de10:	2100      	movs	r1, #0
 800de12:	5499      	strb	r1, [r3, r2]

  return status;
 800de14:	2317      	movs	r3, #23
 800de16:	18fb      	adds	r3, r7, r3
 800de18:	781b      	ldrb	r3, [r3, #0]
}
 800de1a:	0018      	movs	r0, r3
 800de1c:	46bd      	mov	sp, r7
 800de1e:	b006      	add	sp, #24
 800de20:	bd80      	pop	{r7, pc}
 800de22:	46c0      	nop			@ (mov r8, r8)
 800de24:	fffffbff 	.word	0xfffffbff

0800de28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	2380      	movs	r3, #128	@ 0x80
 800de3c:	05db      	lsls	r3, r3, #23
 800de3e:	429a      	cmp	r2, r3
 800de40:	d00b      	beq.n	800de5a <TIM_Base_SetConfig+0x32>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a23      	ldr	r2, [pc, #140]	@ (800ded4 <TIM_Base_SetConfig+0xac>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d007      	beq.n	800de5a <TIM_Base_SetConfig+0x32>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a22      	ldr	r2, [pc, #136]	@ (800ded8 <TIM_Base_SetConfig+0xb0>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d003      	beq.n	800de5a <TIM_Base_SetConfig+0x32>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4a21      	ldr	r2, [pc, #132]	@ (800dedc <TIM_Base_SetConfig+0xb4>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d108      	bne.n	800de6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2270      	movs	r2, #112	@ 0x70
 800de5e:	4393      	bics	r3, r2
 800de60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	4313      	orrs	r3, r2
 800de6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	2380      	movs	r3, #128	@ 0x80
 800de70:	05db      	lsls	r3, r3, #23
 800de72:	429a      	cmp	r2, r3
 800de74:	d00b      	beq.n	800de8e <TIM_Base_SetConfig+0x66>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a16      	ldr	r2, [pc, #88]	@ (800ded4 <TIM_Base_SetConfig+0xac>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d007      	beq.n	800de8e <TIM_Base_SetConfig+0x66>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a15      	ldr	r2, [pc, #84]	@ (800ded8 <TIM_Base_SetConfig+0xb0>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d003      	beq.n	800de8e <TIM_Base_SetConfig+0x66>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a14      	ldr	r2, [pc, #80]	@ (800dedc <TIM_Base_SetConfig+0xb4>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d108      	bne.n	800dea0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	4a13      	ldr	r2, [pc, #76]	@ (800dee0 <TIM_Base_SetConfig+0xb8>)
 800de92:	4013      	ands	r3, r2
 800de94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2280      	movs	r2, #128	@ 0x80
 800dea4:	4393      	bics	r3, r2
 800dea6:	001a      	movs	r2, r3
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	691b      	ldr	r3, [r3, #16]
 800deac:	4313      	orrs	r3, r2
 800deae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	689a      	ldr	r2, [r3, #8]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2201      	movs	r2, #1
 800deca:	615a      	str	r2, [r3, #20]
}
 800decc:	46c0      	nop			@ (mov r8, r8)
 800dece:	46bd      	mov	sp, r7
 800ded0:	b004      	add	sp, #16
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	40000400 	.word	0x40000400
 800ded8:	40010800 	.word	0x40010800
 800dedc:	40011400 	.word	0x40011400
 800dee0:	fffffcff 	.word	0xfffffcff

0800dee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a1b      	ldr	r3, [r3, #32]
 800def2:	2201      	movs	r2, #1
 800def4:	4393      	bics	r3, r2
 800def6:	001a      	movs	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6a1b      	ldr	r3, [r3, #32]
 800df00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	699b      	ldr	r3, [r3, #24]
 800df0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2270      	movs	r2, #112	@ 0x70
 800df12:	4393      	bics	r3, r2
 800df14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2203      	movs	r2, #3
 800df1a:	4393      	bics	r3, r2
 800df1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	2202      	movs	r2, #2
 800df2c:	4393      	bics	r3, r2
 800df2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	697a      	ldr	r2, [r7, #20]
 800df36:	4313      	orrs	r3, r2
 800df38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	621a      	str	r2, [r3, #32]
}
 800df54:	46c0      	nop			@ (mov r8, r8)
 800df56:	46bd      	mov	sp, r7
 800df58:	b006      	add	sp, #24
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a1b      	ldr	r3, [r3, #32]
 800df6a:	2210      	movs	r2, #16
 800df6c:	4393      	bics	r3, r2
 800df6e:	001a      	movs	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a1b      	ldr	r3, [r3, #32]
 800df78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	4a13      	ldr	r2, [pc, #76]	@ (800dfd8 <TIM_OC2_SetConfig+0x7c>)
 800df8a:	4013      	ands	r3, r2
 800df8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	4a12      	ldr	r2, [pc, #72]	@ (800dfdc <TIM_OC2_SetConfig+0x80>)
 800df92:	4013      	ands	r3, r2
 800df94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	021b      	lsls	r3, r3, #8
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	2220      	movs	r2, #32
 800dfa6:	4393      	bics	r3, r2
 800dfa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	011b      	lsls	r3, r3, #4
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	693a      	ldr	r2, [r7, #16]
 800dfba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	685a      	ldr	r2, [r3, #4]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	621a      	str	r2, [r3, #32]
}
 800dfd0:	46c0      	nop			@ (mov r8, r8)
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	b006      	add	sp, #24
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	ffff8fff 	.word	0xffff8fff
 800dfdc:	fffffcff 	.word	0xfffffcff

0800dfe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	4a1a      	ldr	r2, [pc, #104]	@ (800e058 <TIM_OC3_SetConfig+0x78>)
 800dff0:	401a      	ands	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a1b      	ldr	r3, [r3, #32]
 800dffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2270      	movs	r2, #112	@ 0x70
 800e00c:	4393      	bics	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2203      	movs	r2, #3
 800e014:	4393      	bics	r3, r2
 800e016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	4313      	orrs	r3, r2
 800e020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	4a0d      	ldr	r2, [pc, #52]	@ (800e05c <TIM_OC3_SetConfig+0x7c>)
 800e026:	4013      	ands	r3, r2
 800e028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	021b      	lsls	r3, r3, #8
 800e030:	697a      	ldr	r2, [r7, #20]
 800e032:	4313      	orrs	r3, r2
 800e034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	693a      	ldr	r2, [r7, #16]
 800e03a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	697a      	ldr	r2, [r7, #20]
 800e04e:	621a      	str	r2, [r3, #32]
}
 800e050:	46c0      	nop			@ (mov r8, r8)
 800e052:	46bd      	mov	sp, r7
 800e054:	b006      	add	sp, #24
 800e056:	bd80      	pop	{r7, pc}
 800e058:	fffffeff 	.word	0xfffffeff
 800e05c:	fffffdff 	.word	0xfffffdff

0800e060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	4a1b      	ldr	r2, [pc, #108]	@ (800e0dc <TIM_OC4_SetConfig+0x7c>)
 800e070:	401a      	ands	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	69db      	ldr	r3, [r3, #28]
 800e086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	4a15      	ldr	r2, [pc, #84]	@ (800e0e0 <TIM_OC4_SetConfig+0x80>)
 800e08c:	4013      	ands	r3, r2
 800e08e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	4a14      	ldr	r2, [pc, #80]	@ (800e0e4 <TIM_OC4_SetConfig+0x84>)
 800e094:	4013      	ands	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	4a10      	ldr	r2, [pc, #64]	@ (800e0e8 <TIM_OC4_SetConfig+0x88>)
 800e0a8:	4013      	ands	r3, r2
 800e0aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	031b      	lsls	r3, r3, #12
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	621a      	str	r2, [r3, #32]
}
 800e0d2:	46c0      	nop			@ (mov r8, r8)
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	b006      	add	sp, #24
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	46c0      	nop			@ (mov r8, r8)
 800e0dc:	ffffefff 	.word	0xffffefff
 800e0e0:	ffff8fff 	.word	0xffff8fff
 800e0e4:	fffffcff 	.word	0xfffffcff
 800e0e8:	ffffdfff 	.word	0xffffdfff

0800e0ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	221f      	movs	r2, #31
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	2201      	movs	r2, #1
 800e100:	409a      	lsls	r2, r3
 800e102:	0013      	movs	r3, r2
 800e104:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	43d2      	mvns	r2, r2
 800e10e:	401a      	ands	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6a1a      	ldr	r2, [r3, #32]
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	211f      	movs	r1, #31
 800e11c:	400b      	ands	r3, r1
 800e11e:	6879      	ldr	r1, [r7, #4]
 800e120:	4099      	lsls	r1, r3
 800e122:	000b      	movs	r3, r1
 800e124:	431a      	orrs	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	621a      	str	r2, [r3, #32]
}
 800e12a:	46c0      	nop			@ (mov r8, r8)
 800e12c:	46bd      	mov	sp, r7
 800e12e:	b006      	add	sp, #24
 800e130:	bd80      	pop	{r7, pc}
	...

0800e134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2238      	movs	r2, #56	@ 0x38
 800e142:	5c9b      	ldrb	r3, [r3, r2]
 800e144:	2b01      	cmp	r3, #1
 800e146:	d101      	bne.n	800e14c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e148:	2302      	movs	r3, #2
 800e14a:	e047      	b.n	800e1dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2238      	movs	r2, #56	@ 0x38
 800e150:	2101      	movs	r1, #1
 800e152:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2239      	movs	r2, #57	@ 0x39
 800e158:	2102      	movs	r1, #2
 800e15a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2270      	movs	r2, #112	@ 0x70
 800e170:	4393      	bics	r3, r2
 800e172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	68fa      	ldr	r2, [r7, #12]
 800e184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	2380      	movs	r3, #128	@ 0x80
 800e18c:	05db      	lsls	r3, r3, #23
 800e18e:	429a      	cmp	r2, r3
 800e190:	d00e      	beq.n	800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a13      	ldr	r2, [pc, #76]	@ (800e1e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d009      	beq.n	800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a11      	ldr	r2, [pc, #68]	@ (800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d004      	beq.n	800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a10      	ldr	r2, [pc, #64]	@ (800e1ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d10c      	bne.n	800e1ca <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2280      	movs	r2, #128	@ 0x80
 800e1b4:	4393      	bics	r3, r2
 800e1b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	68ba      	ldr	r2, [r7, #8]
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2239      	movs	r2, #57	@ 0x39
 800e1ce:	2101      	movs	r1, #1
 800e1d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2238      	movs	r2, #56	@ 0x38
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e1da:	2300      	movs	r3, #0
}
 800e1dc:	0018      	movs	r0, r3
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	b004      	add	sp, #16
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	40000400 	.word	0x40000400
 800e1e8:	40010800 	.word	0x40010800
 800e1ec:	40011400 	.word	0x40011400

0800e1f0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2238      	movs	r2, #56	@ 0x38
 800e1fe:	5c9b      	ldrb	r3, [r3, r2]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d101      	bne.n	800e208 <HAL_TIMEx_RemapConfig+0x18>
 800e204:	2302      	movs	r3, #2
 800e206:	e00c      	b.n	800e222 <HAL_TIMEx_RemapConfig+0x32>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2238      	movs	r2, #56	@ 0x38
 800e20c:	2101      	movs	r1, #1
 800e20e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2238      	movs	r2, #56	@ 0x38
 800e21c:	2100      	movs	r1, #0
 800e21e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e220:	2300      	movs	r3, #0
}
 800e222:	0018      	movs	r0, r3
 800e224:	46bd      	mov	sp, r7
 800e226:	b002      	add	sp, #8
 800e228:	bd80      	pop	{r7, pc}
	...

0800e22c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d101      	bne.n	800e23e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	e053      	b.n	800e2e6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e242:	2b00      	cmp	r3, #0
 800e244:	d116      	bne.n	800e274 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2278      	movs	r2, #120	@ 0x78
 800e24a:	2100      	movs	r1, #0
 800e24c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	0018      	movs	r0, r3
 800e252:	f000 fd07 	bl	800ec64 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	22b0      	movs	r2, #176	@ 0xb0
 800e25a:	589b      	ldr	r3, [r3, r2]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d103      	bne.n	800e268 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	21b0      	movs	r1, #176	@ 0xb0
 800e264:	4a22      	ldr	r2, [pc, #136]	@ (800e2f0 <HAL_UART_Init+0xc4>)
 800e266:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	22b0      	movs	r2, #176	@ 0xb0
 800e26c:	589b      	ldr	r3, [r3, r2]
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	0010      	movs	r0, r2
 800e272:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2224      	movs	r2, #36	@ 0x24
 800e278:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2101      	movs	r1, #1
 800e286:	438a      	bics	r2, r1
 800e288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	0018      	movs	r0, r3
 800e28e:	f000 fd2d 	bl	800ecec <UART_SetConfig>
 800e292:	0003      	movs	r3, r0
 800e294:	2b01      	cmp	r3, #1
 800e296:	d101      	bne.n	800e29c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e024      	b.n	800e2e6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	0018      	movs	r0, r3
 800e2a8:	f000 ffbe 	bl	800f228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	490f      	ldr	r1, [pc, #60]	@ (800e2f4 <HAL_UART_Init+0xc8>)
 800e2b8:	400a      	ands	r2, r1
 800e2ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	689a      	ldr	r2, [r3, #8]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	212a      	movs	r1, #42	@ 0x2a
 800e2c8:	438a      	bics	r2, r1
 800e2ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2101      	movs	r1, #1
 800e2d8:	430a      	orrs	r2, r1
 800e2da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	0018      	movs	r0, r3
 800e2e0:	f001 f856 	bl	800f390 <UART_CheckIdleState>
 800e2e4:	0003      	movs	r3, r0
}
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	b002      	add	sp, #8
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	46c0      	nop			@ (mov r8, r8)
 800e2f0:	080084c5 	.word	0x080084c5
 800e2f4:	ffffb7ff 	.word	0xffffb7ff

0800e2f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08a      	sub	sp, #40	@ 0x28
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	603b      	str	r3, [r7, #0]
 800e304:	1dbb      	adds	r3, r7, #6
 800e306:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e30c:	2b20      	cmp	r3, #32
 800e30e:	d000      	beq.n	800e312 <HAL_UART_Transmit+0x1a>
 800e310:	e08c      	b.n	800e42c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d003      	beq.n	800e320 <HAL_UART_Transmit+0x28>
 800e318:	1dbb      	adds	r3, r7, #6
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d101      	bne.n	800e324 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e320:	2301      	movs	r3, #1
 800e322:	e084      	b.n	800e42e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	689a      	ldr	r2, [r3, #8]
 800e328:	2380      	movs	r3, #128	@ 0x80
 800e32a:	015b      	lsls	r3, r3, #5
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d109      	bne.n	800e344 <HAL_UART_Transmit+0x4c>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d105      	bne.n	800e344 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2201      	movs	r2, #1
 800e33c:	4013      	ands	r3, r2
 800e33e:	d001      	beq.n	800e344 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e074      	b.n	800e42e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2284      	movs	r2, #132	@ 0x84
 800e348:	2100      	movs	r1, #0
 800e34a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2221      	movs	r2, #33	@ 0x21
 800e350:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e352:	f7fa fe41 	bl	8008fd8 <HAL_GetTick>
 800e356:	0003      	movs	r3, r0
 800e358:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	1dba      	adds	r2, r7, #6
 800e35e:	2150      	movs	r1, #80	@ 0x50
 800e360:	8812      	ldrh	r2, [r2, #0]
 800e362:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	1dba      	adds	r2, r7, #6
 800e368:	2152      	movs	r1, #82	@ 0x52
 800e36a:	8812      	ldrh	r2, [r2, #0]
 800e36c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	689a      	ldr	r2, [r3, #8]
 800e372:	2380      	movs	r3, #128	@ 0x80
 800e374:	015b      	lsls	r3, r3, #5
 800e376:	429a      	cmp	r2, r3
 800e378:	d108      	bne.n	800e38c <HAL_UART_Transmit+0x94>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d104      	bne.n	800e38c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	61bb      	str	r3, [r7, #24]
 800e38a:	e003      	b.n	800e394 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e390:	2300      	movs	r3, #0
 800e392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e394:	e02f      	b.n	800e3f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e396:	697a      	ldr	r2, [r7, #20]
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	0013      	movs	r3, r2
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	2180      	movs	r1, #128	@ 0x80
 800e3a4:	f001 f89c 	bl	800f4e0 <UART_WaitOnFlagUntilTimeout>
 800e3a8:	1e03      	subs	r3, r0, #0
 800e3aa:	d004      	beq.n	800e3b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2220      	movs	r2, #32
 800e3b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	e03b      	b.n	800e42e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10b      	bne.n	800e3d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	001a      	movs	r2, r3
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	05d2      	lsls	r2, r2, #23
 800e3c8:	0dd2      	lsrs	r2, r2, #23
 800e3ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	3302      	adds	r3, #2
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	e007      	b.n	800e3e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	781a      	ldrb	r2, [r3, #0]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2252      	movs	r2, #82	@ 0x52
 800e3e8:	5a9b      	ldrh	r3, [r3, r2]
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	b299      	uxth	r1, r3
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2252      	movs	r2, #82	@ 0x52
 800e3f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2252      	movs	r2, #82	@ 0x52
 800e3fa:	5a9b      	ldrh	r3, [r3, r2]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d1c9      	bne.n	800e396 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	0013      	movs	r3, r2
 800e40c:	2200      	movs	r2, #0
 800e40e:	2140      	movs	r1, #64	@ 0x40
 800e410:	f001 f866 	bl	800f4e0 <UART_WaitOnFlagUntilTimeout>
 800e414:	1e03      	subs	r3, r0, #0
 800e416:	d004      	beq.n	800e422 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2220      	movs	r2, #32
 800e41c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e41e:	2303      	movs	r3, #3
 800e420:	e005      	b.n	800e42e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2220      	movs	r2, #32
 800e426:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e428:	2300      	movs	r3, #0
 800e42a:	e000      	b.n	800e42e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800e42c:	2302      	movs	r3, #2
  }
}
 800e42e:	0018      	movs	r0, r3
 800e430:	46bd      	mov	sp, r7
 800e432:	b008      	add	sp, #32
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b088      	sub	sp, #32
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	1dbb      	adds	r3, r7, #6
 800e444:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e44a:	2b20      	cmp	r3, #32
 800e44c:	d000      	beq.n	800e450 <HAL_UART_Transmit_DMA+0x18>
 800e44e:	e077      	b.n	800e540 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <HAL_UART_Transmit_DMA+0x26>
 800e456:	1dbb      	adds	r3, r7, #6
 800e458:	881b      	ldrh	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e06f      	b.n	800e542 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	689a      	ldr	r2, [r3, #8]
 800e466:	2380      	movs	r3, #128	@ 0x80
 800e468:	015b      	lsls	r3, r3, #5
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d109      	bne.n	800e482 <HAL_UART_Transmit_DMA+0x4a>
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d105      	bne.n	800e482 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2201      	movs	r2, #1
 800e47a:	4013      	ands	r3, r2
 800e47c:	d001      	beq.n	800e482 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800e47e:	2301      	movs	r3, #1
 800e480:	e05f      	b.n	800e542 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	1dba      	adds	r2, r7, #6
 800e48c:	2150      	movs	r1, #80	@ 0x50
 800e48e:	8812      	ldrh	r2, [r2, #0]
 800e490:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	1dba      	adds	r2, r7, #6
 800e496:	2152      	movs	r1, #82	@ 0x52
 800e498:	8812      	ldrh	r2, [r2, #0]
 800e49a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2284      	movs	r2, #132	@ 0x84
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2221      	movs	r2, #33	@ 0x21
 800e4a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d027      	beq.n	800e502 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4b6:	4a25      	ldr	r2, [pc, #148]	@ (800e54c <HAL_UART_Transmit_DMA+0x114>)
 800e4b8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4be:	4a24      	ldr	r2, [pc, #144]	@ (800e550 <HAL_UART_Transmit_DMA+0x118>)
 800e4c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4c6:	4a23      	ldr	r2, [pc, #140]	@ (800e554 <HAL_UART_Transmit_DMA+0x11c>)
 800e4c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4da:	0019      	movs	r1, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	3328      	adds	r3, #40	@ 0x28
 800e4e2:	001a      	movs	r2, r3
 800e4e4:	1dbb      	adds	r3, r7, #6
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	f7fb fad6 	bl	8009a98 <HAL_DMA_Start_IT>
 800e4ec:	1e03      	subs	r3, r0, #0
 800e4ee:	d008      	beq.n	800e502 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2284      	movs	r2, #132	@ 0x84
 800e4f4:	2110      	movs	r1, #16
 800e4f6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800e4fe:	2301      	movs	r3, #1
 800e500:	e01f      	b.n	800e542 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2240      	movs	r2, #64	@ 0x40
 800e508:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e50a:	f3ef 8310 	mrs	r3, PRIMASK
 800e50e:	613b      	str	r3, [r7, #16]
  return(result);
 800e510:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e512:	61fb      	str	r3, [r7, #28]
 800e514:	2301      	movs	r3, #1
 800e516:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	f383 8810 	msr	PRIMASK, r3
}
 800e51e:	46c0      	nop			@ (mov r8, r8)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689a      	ldr	r2, [r3, #8]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2180      	movs	r1, #128	@ 0x80
 800e52c:	430a      	orrs	r2, r1
 800e52e:	609a      	str	r2, [r3, #8]
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	f383 8810 	msr	PRIMASK, r3
}
 800e53a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	e000      	b.n	800e542 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e540:	2302      	movs	r3, #2
  }
}
 800e542:	0018      	movs	r0, r3
 800e544:	46bd      	mov	sp, r7
 800e546:	b008      	add	sp, #32
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	46c0      	nop			@ (mov r8, r8)
 800e54c:	0800f805 	.word	0x0800f805
 800e550:	0800f8a1 	.word	0x0800f8a1
 800e554:	0800fa41 	.word	0x0800fa41

0800e558 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	1dbb      	adds	r3, r7, #6
 800e564:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2280      	movs	r2, #128	@ 0x80
 800e56a:	589b      	ldr	r3, [r3, r2]
 800e56c:	2b20      	cmp	r3, #32
 800e56e:	d14a      	bne.n	800e606 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d003      	beq.n	800e57e <HAL_UART_Receive_DMA+0x26>
 800e576:	1dbb      	adds	r3, r7, #6
 800e578:	881b      	ldrh	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d101      	bne.n	800e582 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e57e:	2301      	movs	r3, #1
 800e580:	e042      	b.n	800e608 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	689a      	ldr	r2, [r3, #8]
 800e586:	2380      	movs	r3, #128	@ 0x80
 800e588:	015b      	lsls	r3, r3, #5
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d109      	bne.n	800e5a2 <HAL_UART_Receive_DMA+0x4a>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	691b      	ldr	r3, [r3, #16]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d105      	bne.n	800e5a2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	2201      	movs	r2, #1
 800e59a:	4013      	ands	r3, r2
 800e59c:	d001      	beq.n	800e5a2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e032      	b.n	800e608 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a18      	ldr	r2, [pc, #96]	@ (800e610 <HAL_UART_Receive_DMA+0xb8>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d020      	beq.n	800e5f4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	685a      	ldr	r2, [r3, #4]
 800e5b8:	2380      	movs	r3, #128	@ 0x80
 800e5ba:	041b      	lsls	r3, r3, #16
 800e5bc:	4013      	ands	r3, r2
 800e5be:	d019      	beq.n	800e5f4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5c0:	f3ef 8310 	mrs	r3, PRIMASK
 800e5c4:	613b      	str	r3, [r7, #16]
  return(result);
 800e5c6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e5c8:	61fb      	str	r3, [r7, #28]
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	f383 8810 	msr	PRIMASK, r3
}
 800e5d4:	46c0      	nop			@ (mov r8, r8)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2180      	movs	r1, #128	@ 0x80
 800e5e2:	04c9      	lsls	r1, r1, #19
 800e5e4:	430a      	orrs	r2, r1
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	f383 8810 	msr	PRIMASK, r3
}
 800e5f2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e5f4:	1dbb      	adds	r3, r7, #6
 800e5f6:	881a      	ldrh	r2, [r3, #0]
 800e5f8:	68b9      	ldr	r1, [r7, #8]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	f000 ffd9 	bl	800f5b4 <UART_Start_Receive_DMA>
 800e602:	0003      	movs	r3, r0
 800e604:	e000      	b.n	800e608 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800e606:	2302      	movs	r3, #2
  }
}
 800e608:	0018      	movs	r0, r3
 800e60a:	46bd      	mov	sp, r7
 800e60c:	b008      	add	sp, #32
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	40004800 	.word	0x40004800

0800e614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e614:	b590      	push	{r4, r7, lr}
 800e616:	b0ab      	sub	sp, #172	@ 0xac
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	69db      	ldr	r3, [r3, #28]
 800e622:	22a4      	movs	r2, #164	@ 0xa4
 800e624:	18b9      	adds	r1, r7, r2
 800e626:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	20a0      	movs	r0, #160	@ 0xa0
 800e630:	1839      	adds	r1, r7, r0
 800e632:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	219c      	movs	r1, #156	@ 0x9c
 800e63c:	1879      	adds	r1, r7, r1
 800e63e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e640:	0011      	movs	r1, r2
 800e642:	18bb      	adds	r3, r7, r2
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a9c      	ldr	r2, [pc, #624]	@ (800e8b8 <HAL_UART_IRQHandler+0x2a4>)
 800e648:	4013      	ands	r3, r2
 800e64a:	2298      	movs	r2, #152	@ 0x98
 800e64c:	18bc      	adds	r4, r7, r2
 800e64e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800e650:	18bb      	adds	r3, r7, r2
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d114      	bne.n	800e682 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e658:	187b      	adds	r3, r7, r1
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2220      	movs	r2, #32
 800e65e:	4013      	ands	r3, r2
 800e660:	d00f      	beq.n	800e682 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e662:	183b      	adds	r3, r7, r0
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2220      	movs	r2, #32
 800e668:	4013      	ands	r3, r2
 800e66a:	d00a      	beq.n	800e682 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e670:	2b00      	cmp	r3, #0
 800e672:	d100      	bne.n	800e676 <HAL_UART_IRQHandler+0x62>
 800e674:	e2aa      	b.n	800ebcc <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	0010      	movs	r0, r2
 800e67e:	4798      	blx	r3
      }
      return;
 800e680:	e2a4      	b.n	800ebcc <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e682:	2398      	movs	r3, #152	@ 0x98
 800e684:	18fb      	adds	r3, r7, r3
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d100      	bne.n	800e68e <HAL_UART_IRQHandler+0x7a>
 800e68c:	e11a      	b.n	800e8c4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e68e:	239c      	movs	r3, #156	@ 0x9c
 800e690:	18fb      	adds	r3, r7, r3
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2201      	movs	r2, #1
 800e696:	4013      	ands	r3, r2
 800e698:	d106      	bne.n	800e6a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e69a:	23a0      	movs	r3, #160	@ 0xa0
 800e69c:	18fb      	adds	r3, r7, r3
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a86      	ldr	r2, [pc, #536]	@ (800e8bc <HAL_UART_IRQHandler+0x2a8>)
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	d100      	bne.n	800e6a8 <HAL_UART_IRQHandler+0x94>
 800e6a6:	e10d      	b.n	800e8c4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e6a8:	23a4      	movs	r3, #164	@ 0xa4
 800e6aa:	18fb      	adds	r3, r7, r3
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	4013      	ands	r3, r2
 800e6b2:	d012      	beq.n	800e6da <HAL_UART_IRQHandler+0xc6>
 800e6b4:	23a0      	movs	r3, #160	@ 0xa0
 800e6b6:	18fb      	adds	r3, r7, r3
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	2380      	movs	r3, #128	@ 0x80
 800e6bc:	005b      	lsls	r3, r3, #1
 800e6be:	4013      	ands	r3, r2
 800e6c0:	d00b      	beq.n	800e6da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2284      	movs	r2, #132	@ 0x84
 800e6ce:	589b      	ldr	r3, [r3, r2]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	431a      	orrs	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2184      	movs	r1, #132	@ 0x84
 800e6d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6da:	23a4      	movs	r3, #164	@ 0xa4
 800e6dc:	18fb      	adds	r3, r7, r3
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	d011      	beq.n	800e70a <HAL_UART_IRQHandler+0xf6>
 800e6e6:	239c      	movs	r3, #156	@ 0x9c
 800e6e8:	18fb      	adds	r3, r7, r3
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	4013      	ands	r3, r2
 800e6f0:	d00b      	beq.n	800e70a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2284      	movs	r2, #132	@ 0x84
 800e6fe:	589b      	ldr	r3, [r3, r2]
 800e700:	2204      	movs	r2, #4
 800e702:	431a      	orrs	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2184      	movs	r1, #132	@ 0x84
 800e708:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e70a:	23a4      	movs	r3, #164	@ 0xa4
 800e70c:	18fb      	adds	r3, r7, r3
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2204      	movs	r2, #4
 800e712:	4013      	ands	r3, r2
 800e714:	d011      	beq.n	800e73a <HAL_UART_IRQHandler+0x126>
 800e716:	239c      	movs	r3, #156	@ 0x9c
 800e718:	18fb      	adds	r3, r7, r3
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2201      	movs	r2, #1
 800e71e:	4013      	ands	r3, r2
 800e720:	d00b      	beq.n	800e73a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2204      	movs	r2, #4
 800e728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2284      	movs	r2, #132	@ 0x84
 800e72e:	589b      	ldr	r3, [r3, r2]
 800e730:	2202      	movs	r2, #2
 800e732:	431a      	orrs	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2184      	movs	r1, #132	@ 0x84
 800e738:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e73a:	23a4      	movs	r3, #164	@ 0xa4
 800e73c:	18fb      	adds	r3, r7, r3
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2208      	movs	r2, #8
 800e742:	4013      	ands	r3, r2
 800e744:	d017      	beq.n	800e776 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e746:	23a0      	movs	r3, #160	@ 0xa0
 800e748:	18fb      	adds	r3, r7, r3
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2220      	movs	r2, #32
 800e74e:	4013      	ands	r3, r2
 800e750:	d105      	bne.n	800e75e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e752:	239c      	movs	r3, #156	@ 0x9c
 800e754:	18fb      	adds	r3, r7, r3
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2201      	movs	r2, #1
 800e75a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e75c:	d00b      	beq.n	800e776 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2208      	movs	r2, #8
 800e764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2284      	movs	r2, #132	@ 0x84
 800e76a:	589b      	ldr	r3, [r3, r2]
 800e76c:	2208      	movs	r2, #8
 800e76e:	431a      	orrs	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2184      	movs	r1, #132	@ 0x84
 800e774:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e776:	23a4      	movs	r3, #164	@ 0xa4
 800e778:	18fb      	adds	r3, r7, r3
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	2380      	movs	r3, #128	@ 0x80
 800e77e:	011b      	lsls	r3, r3, #4
 800e780:	4013      	ands	r3, r2
 800e782:	d013      	beq.n	800e7ac <HAL_UART_IRQHandler+0x198>
 800e784:	23a0      	movs	r3, #160	@ 0xa0
 800e786:	18fb      	adds	r3, r7, r3
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	2380      	movs	r3, #128	@ 0x80
 800e78c:	04db      	lsls	r3, r3, #19
 800e78e:	4013      	ands	r3, r2
 800e790:	d00c      	beq.n	800e7ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2280      	movs	r2, #128	@ 0x80
 800e798:	0112      	lsls	r2, r2, #4
 800e79a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2284      	movs	r2, #132	@ 0x84
 800e7a0:	589b      	ldr	r3, [r3, r2]
 800e7a2:	2220      	movs	r2, #32
 800e7a4:	431a      	orrs	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2184      	movs	r1, #132	@ 0x84
 800e7aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2284      	movs	r2, #132	@ 0x84
 800e7b0:	589b      	ldr	r3, [r3, r2]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d100      	bne.n	800e7b8 <HAL_UART_IRQHandler+0x1a4>
 800e7b6:	e20b      	b.n	800ebd0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e7b8:	23a4      	movs	r3, #164	@ 0xa4
 800e7ba:	18fb      	adds	r3, r7, r3
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2220      	movs	r2, #32
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	d00e      	beq.n	800e7e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e7c4:	23a0      	movs	r3, #160	@ 0xa0
 800e7c6:	18fb      	adds	r3, r7, r3
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	d008      	beq.n	800e7e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d004      	beq.n	800e7e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	0010      	movs	r0, r2
 800e7e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2284      	movs	r2, #132	@ 0x84
 800e7e6:	589b      	ldr	r3, [r3, r2]
 800e7e8:	2194      	movs	r1, #148	@ 0x94
 800e7ea:	187a      	adds	r2, r7, r1
 800e7ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	2240      	movs	r2, #64	@ 0x40
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	2b40      	cmp	r3, #64	@ 0x40
 800e7fa:	d004      	beq.n	800e806 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7fc:	187b      	adds	r3, r7, r1
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2228      	movs	r2, #40	@ 0x28
 800e802:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e804:	d04b      	beq.n	800e89e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	0018      	movs	r0, r3
 800e80a:	f000 ff97 	bl	800f73c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	2240      	movs	r2, #64	@ 0x40
 800e816:	4013      	ands	r3, r2
 800e818:	2b40      	cmp	r3, #64	@ 0x40
 800e81a:	d139      	bne.n	800e890 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e81c:	f3ef 8310 	mrs	r3, PRIMASK
 800e820:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800e822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e824:	2090      	movs	r0, #144	@ 0x90
 800e826:	183a      	adds	r2, r7, r0
 800e828:	6013      	str	r3, [r2, #0]
 800e82a:	2301      	movs	r3, #1
 800e82c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e82e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e830:	f383 8810 	msr	PRIMASK, r3
}
 800e834:	46c0      	nop			@ (mov r8, r8)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	689a      	ldr	r2, [r3, #8]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2140      	movs	r1, #64	@ 0x40
 800e842:	438a      	bics	r2, r1
 800e844:	609a      	str	r2, [r3, #8]
 800e846:	183b      	adds	r3, r7, r0
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e84c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e84e:	f383 8810 	msr	PRIMASK, r3
}
 800e852:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d012      	beq.n	800e882 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e860:	4a17      	ldr	r2, [pc, #92]	@ (800e8c0 <HAL_UART_IRQHandler+0x2ac>)
 800e862:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e868:	0018      	movs	r0, r3
 800e86a:	f7fb f9bb 	bl	8009be4 <HAL_DMA_Abort_IT>
 800e86e:	1e03      	subs	r3, r0, #0
 800e870:	d020      	beq.n	800e8b4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e87c:	0018      	movs	r0, r3
 800e87e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e880:	e018      	b.n	800e8b4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2298      	movs	r2, #152	@ 0x98
 800e886:	589b      	ldr	r3, [r3, r2]
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	0010      	movs	r0, r2
 800e88c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e88e:	e011      	b.n	800e8b4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2298      	movs	r2, #152	@ 0x98
 800e894:	589b      	ldr	r3, [r3, r2]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	0010      	movs	r0, r2
 800e89a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e89c:	e00a      	b.n	800e8b4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2298      	movs	r2, #152	@ 0x98
 800e8a2:	589b      	ldr	r3, [r3, r2]
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	0010      	movs	r0, r2
 800e8a8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2284      	movs	r2, #132	@ 0x84
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800e8b2:	e18d      	b.n	800ebd0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8b4:	46c0      	nop			@ (mov r8, r8)
    return;
 800e8b6:	e18b      	b.n	800ebd0 <HAL_UART_IRQHandler+0x5bc>
 800e8b8:	0000080f 	.word	0x0000080f
 800e8bc:	04000120 	.word	0x04000120
 800e8c0:	0800fac9 	.word	0x0800fac9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d000      	beq.n	800e8ce <HAL_UART_IRQHandler+0x2ba>
 800e8cc:	e13d      	b.n	800eb4a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e8ce:	23a4      	movs	r3, #164	@ 0xa4
 800e8d0:	18fb      	adds	r3, r7, r3
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2210      	movs	r2, #16
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	d100      	bne.n	800e8dc <HAL_UART_IRQHandler+0x2c8>
 800e8da:	e136      	b.n	800eb4a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e8dc:	23a0      	movs	r3, #160	@ 0xa0
 800e8de:	18fb      	adds	r3, r7, r3
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2210      	movs	r2, #16
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	d100      	bne.n	800e8ea <HAL_UART_IRQHandler+0x2d6>
 800e8e8:	e12f      	b.n	800eb4a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2210      	movs	r2, #16
 800e8f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	2240      	movs	r2, #64	@ 0x40
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	2b40      	cmp	r3, #64	@ 0x40
 800e8fe:	d000      	beq.n	800e902 <HAL_UART_IRQHandler+0x2ee>
 800e900:	e0a2      	b.n	800ea48 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	217e      	movs	r1, #126	@ 0x7e
 800e90c:	187b      	adds	r3, r7, r1
 800e90e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800e910:	187b      	adds	r3, r7, r1
 800e912:	881b      	ldrh	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d100      	bne.n	800e91a <HAL_UART_IRQHandler+0x306>
 800e918:	e15c      	b.n	800ebd4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2258      	movs	r2, #88	@ 0x58
 800e91e:	5a9b      	ldrh	r3, [r3, r2]
 800e920:	187a      	adds	r2, r7, r1
 800e922:	8812      	ldrh	r2, [r2, #0]
 800e924:	429a      	cmp	r2, r3
 800e926:	d300      	bcc.n	800e92a <HAL_UART_IRQHandler+0x316>
 800e928:	e154      	b.n	800ebd4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	187a      	adds	r2, r7, r1
 800e92e:	215a      	movs	r1, #90	@ 0x5a
 800e930:	8812      	ldrh	r2, [r2, #0]
 800e932:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2220      	movs	r2, #32
 800e93e:	4013      	ands	r3, r2
 800e940:	d16f      	bne.n	800ea22 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e942:	f3ef 8310 	mrs	r3, PRIMASK
 800e946:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e94a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e94c:	2301      	movs	r3, #1
 800e94e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e952:	f383 8810 	msr	PRIMASK, r3
}
 800e956:	46c0      	nop			@ (mov r8, r8)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	49a0      	ldr	r1, [pc, #640]	@ (800ebe4 <HAL_UART_IRQHandler+0x5d0>)
 800e964:	400a      	ands	r2, r1
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e96a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e96e:	f383 8810 	msr	PRIMASK, r3
}
 800e972:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e974:	f3ef 8310 	mrs	r3, PRIMASK
 800e978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800e97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e97c:	677b      	str	r3, [r7, #116]	@ 0x74
 800e97e:	2301      	movs	r3, #1
 800e980:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e984:	f383 8810 	msr	PRIMASK, r3
}
 800e988:	46c0      	nop			@ (mov r8, r8)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	689a      	ldr	r2, [r3, #8]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2101      	movs	r1, #1
 800e996:	438a      	bics	r2, r1
 800e998:	609a      	str	r2, [r3, #8]
 800e99a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e99c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e99e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9a0:	f383 8810 	msr	PRIMASK, r3
}
 800e9a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e9aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800e9ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9ae:	673b      	str	r3, [r7, #112]	@ 0x70
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9b6:	f383 8810 	msr	PRIMASK, r3
}
 800e9ba:	46c0      	nop			@ (mov r8, r8)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	689a      	ldr	r2, [r3, #8]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2140      	movs	r1, #64	@ 0x40
 800e9c8:	438a      	bics	r2, r1
 800e9ca:	609a      	str	r2, [r3, #8]
 800e9cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9ce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9d2:	f383 8810 	msr	PRIMASK, r3
}
 800e9d6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2280      	movs	r2, #128	@ 0x80
 800e9dc:	2120      	movs	r1, #32
 800e9de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e9ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800e9ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9f6:	f383 8810 	msr	PRIMASK, r3
}
 800e9fa:	46c0      	nop			@ (mov r8, r8)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2110      	movs	r1, #16
 800ea08:	438a      	bics	r2, r1
 800ea0a:	601a      	str	r2, [r3, #0]
 800ea0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea12:	f383 8810 	msr	PRIMASK, r3
}
 800ea16:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea1c:	0018      	movs	r0, r3
 800ea1e:	f7fb f8a1 	bl	8009b64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2202      	movs	r2, #2
 800ea26:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	22ac      	movs	r2, #172	@ 0xac
 800ea2c:	589b      	ldr	r3, [r3, r2]
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	2158      	movs	r1, #88	@ 0x58
 800ea32:	5a51      	ldrh	r1, [r2, r1]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	205a      	movs	r0, #90	@ 0x5a
 800ea38:	5a12      	ldrh	r2, [r2, r0]
 800ea3a:	b292      	uxth	r2, r2
 800ea3c:	1a8a      	subs	r2, r1, r2
 800ea3e:	b291      	uxth	r1, r2
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	0010      	movs	r0, r2
 800ea44:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea46:	e0c5      	b.n	800ebd4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2258      	movs	r2, #88	@ 0x58
 800ea4c:	5a99      	ldrh	r1, [r3, r2]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	225a      	movs	r2, #90	@ 0x5a
 800ea52:	5a9b      	ldrh	r3, [r3, r2]
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	208e      	movs	r0, #142	@ 0x8e
 800ea58:	183b      	adds	r3, r7, r0
 800ea5a:	1a8a      	subs	r2, r1, r2
 800ea5c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	225a      	movs	r2, #90	@ 0x5a
 800ea62:	5a9b      	ldrh	r3, [r3, r2]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d100      	bne.n	800ea6c <HAL_UART_IRQHandler+0x458>
 800ea6a:	e0b5      	b.n	800ebd8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800ea6c:	183b      	adds	r3, r7, r0
 800ea6e:	881b      	ldrh	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d100      	bne.n	800ea76 <HAL_UART_IRQHandler+0x462>
 800ea74:	e0b0      	b.n	800ebd8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea76:	f3ef 8310 	mrs	r3, PRIMASK
 800ea7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea7e:	2488      	movs	r4, #136	@ 0x88
 800ea80:	193a      	adds	r2, r7, r4
 800ea82:	6013      	str	r3, [r2, #0]
 800ea84:	2301      	movs	r3, #1
 800ea86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	f383 8810 	msr	PRIMASK, r3
}
 800ea8e:	46c0      	nop			@ (mov r8, r8)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4953      	ldr	r1, [pc, #332]	@ (800ebe8 <HAL_UART_IRQHandler+0x5d4>)
 800ea9c:	400a      	ands	r2, r1
 800ea9e:	601a      	str	r2, [r3, #0]
 800eaa0:	193b      	adds	r3, r7, r4
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f383 8810 	msr	PRIMASK, r3
}
 800eaac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaae:	f3ef 8310 	mrs	r3, PRIMASK
 800eab2:	61bb      	str	r3, [r7, #24]
  return(result);
 800eab4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eab6:	2484      	movs	r4, #132	@ 0x84
 800eab8:	193a      	adds	r2, r7, r4
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	2301      	movs	r3, #1
 800eabe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	f383 8810 	msr	PRIMASK, r3
}
 800eac6:	46c0      	nop			@ (mov r8, r8)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	689a      	ldr	r2, [r3, #8]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2101      	movs	r1, #1
 800ead4:	438a      	bics	r2, r1
 800ead6:	609a      	str	r2, [r3, #8]
 800ead8:	193b      	adds	r3, r7, r4
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eade:	6a3b      	ldr	r3, [r7, #32]
 800eae0:	f383 8810 	msr	PRIMASK, r3
}
 800eae4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2280      	movs	r2, #128	@ 0x80
 800eaea:	2120      	movs	r1, #32
 800eaec:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eafa:	f3ef 8310 	mrs	r3, PRIMASK
 800eafe:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800eb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb02:	2480      	movs	r4, #128	@ 0x80
 800eb04:	193a      	adds	r2, r7, r4
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	2301      	movs	r3, #1
 800eb0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb0e:	f383 8810 	msr	PRIMASK, r3
}
 800eb12:	46c0      	nop			@ (mov r8, r8)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2110      	movs	r1, #16
 800eb20:	438a      	bics	r2, r1
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	193b      	adds	r3, r7, r4
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2c:	f383 8810 	msr	PRIMASK, r3
}
 800eb30:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2202      	movs	r2, #2
 800eb36:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	22ac      	movs	r2, #172	@ 0xac
 800eb3c:	589b      	ldr	r3, [r3, r2]
 800eb3e:	183a      	adds	r2, r7, r0
 800eb40:	8811      	ldrh	r1, [r2, #0]
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	0010      	movs	r0, r2
 800eb46:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb48:	e046      	b.n	800ebd8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eb4a:	23a4      	movs	r3, #164	@ 0xa4
 800eb4c:	18fb      	adds	r3, r7, r3
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	2380      	movs	r3, #128	@ 0x80
 800eb52:	035b      	lsls	r3, r3, #13
 800eb54:	4013      	ands	r3, r2
 800eb56:	d012      	beq.n	800eb7e <HAL_UART_IRQHandler+0x56a>
 800eb58:	239c      	movs	r3, #156	@ 0x9c
 800eb5a:	18fb      	adds	r3, r7, r3
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	2380      	movs	r3, #128	@ 0x80
 800eb60:	03db      	lsls	r3, r3, #15
 800eb62:	4013      	ands	r3, r2
 800eb64:	d00b      	beq.n	800eb7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2280      	movs	r2, #128	@ 0x80
 800eb6c:	0352      	lsls	r2, r2, #13
 800eb6e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	22a8      	movs	r2, #168	@ 0xa8
 800eb74:	589b      	ldr	r3, [r3, r2]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	0010      	movs	r0, r2
 800eb7a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb7c:	e02f      	b.n	800ebde <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800eb7e:	23a4      	movs	r3, #164	@ 0xa4
 800eb80:	18fb      	adds	r3, r7, r3
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2280      	movs	r2, #128	@ 0x80
 800eb86:	4013      	ands	r3, r2
 800eb88:	d00f      	beq.n	800ebaa <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800eb8a:	23a0      	movs	r3, #160	@ 0xa0
 800eb8c:	18fb      	adds	r3, r7, r3
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2280      	movs	r2, #128	@ 0x80
 800eb92:	4013      	ands	r3, r2
 800eb94:	d009      	beq.n	800ebaa <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d01e      	beq.n	800ebdc <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	0010      	movs	r0, r2
 800eba6:	4798      	blx	r3
    }
    return;
 800eba8:	e018      	b.n	800ebdc <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ebaa:	23a4      	movs	r3, #164	@ 0xa4
 800ebac:	18fb      	adds	r3, r7, r3
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2240      	movs	r2, #64	@ 0x40
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	d013      	beq.n	800ebde <HAL_UART_IRQHandler+0x5ca>
 800ebb6:	23a0      	movs	r3, #160	@ 0xa0
 800ebb8:	18fb      	adds	r3, r7, r3
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2240      	movs	r2, #64	@ 0x40
 800ebbe:	4013      	ands	r3, r2
 800ebc0:	d00d      	beq.n	800ebde <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	0018      	movs	r0, r3
 800ebc6:	f000 ff98 	bl	800fafa <UART_EndTransmit_IT>
    return;
 800ebca:	e008      	b.n	800ebde <HAL_UART_IRQHandler+0x5ca>
      return;
 800ebcc:	46c0      	nop			@ (mov r8, r8)
 800ebce:	e006      	b.n	800ebde <HAL_UART_IRQHandler+0x5ca>
    return;
 800ebd0:	46c0      	nop			@ (mov r8, r8)
 800ebd2:	e004      	b.n	800ebde <HAL_UART_IRQHandler+0x5ca>
      return;
 800ebd4:	46c0      	nop			@ (mov r8, r8)
 800ebd6:	e002      	b.n	800ebde <HAL_UART_IRQHandler+0x5ca>
      return;
 800ebd8:	46c0      	nop			@ (mov r8, r8)
 800ebda:	e000      	b.n	800ebde <HAL_UART_IRQHandler+0x5ca>
    return;
 800ebdc:	46c0      	nop			@ (mov r8, r8)
  }

}
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	b02b      	add	sp, #172	@ 0xac
 800ebe2:	bd90      	pop	{r4, r7, pc}
 800ebe4:	fffffeff 	.word	0xfffffeff
 800ebe8:	fffffedf 	.word	0xfffffedf

0800ebec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ebf4:	46c0      	nop			@ (mov r8, r8)
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	b002      	add	sp, #8
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ec04:	46c0      	nop			@ (mov r8, r8)
 800ec06:	46bd      	mov	sp, r7
 800ec08:	b002      	add	sp, #8
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ec14:	46c0      	nop			@ (mov r8, r8)
 800ec16:	46bd      	mov	sp, r7
 800ec18:	b002      	add	sp, #8
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ec24:	46c0      	nop			@ (mov r8, r8)
 800ec26:	46bd      	mov	sp, r7
 800ec28:	b002      	add	sp, #8
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ec34:	46c0      	nop			@ (mov r8, r8)
 800ec36:	46bd      	mov	sp, r7
 800ec38:	b002      	add	sp, #8
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ec44:	46c0      	nop			@ (mov r8, r8)
 800ec46:	46bd      	mov	sp, r7
 800ec48:	b002      	add	sp, #8
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	000a      	movs	r2, r1
 800ec56:	1cbb      	adds	r3, r7, #2
 800ec58:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ec5a:	46c0      	nop			@ (mov r8, r8)
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	b002      	add	sp, #8
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2188      	movs	r1, #136	@ 0x88
 800ec70:	4a14      	ldr	r2, [pc, #80]	@ (800ecc4 <UART_InitCallbacksToDefault+0x60>)
 800ec72:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	218c      	movs	r1, #140	@ 0x8c
 800ec78:	4a13      	ldr	r2, [pc, #76]	@ (800ecc8 <UART_InitCallbacksToDefault+0x64>)
 800ec7a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2190      	movs	r1, #144	@ 0x90
 800ec80:	4a12      	ldr	r2, [pc, #72]	@ (800eccc <UART_InitCallbacksToDefault+0x68>)
 800ec82:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2194      	movs	r1, #148	@ 0x94
 800ec88:	4a11      	ldr	r2, [pc, #68]	@ (800ecd0 <UART_InitCallbacksToDefault+0x6c>)
 800ec8a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2198      	movs	r1, #152	@ 0x98
 800ec90:	4a10      	ldr	r2, [pc, #64]	@ (800ecd4 <UART_InitCallbacksToDefault+0x70>)
 800ec92:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	219c      	movs	r1, #156	@ 0x9c
 800ec98:	4a0f      	ldr	r2, [pc, #60]	@ (800ecd8 <UART_InitCallbacksToDefault+0x74>)
 800ec9a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	21a0      	movs	r1, #160	@ 0xa0
 800eca0:	4a0e      	ldr	r2, [pc, #56]	@ (800ecdc <UART_InitCallbacksToDefault+0x78>)
 800eca2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	21a4      	movs	r1, #164	@ 0xa4
 800eca8:	4a0d      	ldr	r2, [pc, #52]	@ (800ece0 <UART_InitCallbacksToDefault+0x7c>)
 800ecaa:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	21a8      	movs	r1, #168	@ 0xa8
 800ecb0:	4a0c      	ldr	r2, [pc, #48]	@ (800ece4 <UART_InitCallbacksToDefault+0x80>)
 800ecb2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	21ac      	movs	r1, #172	@ 0xac
 800ecb8:	4a0b      	ldr	r2, [pc, #44]	@ (800ece8 <UART_InitCallbacksToDefault+0x84>)
 800ecba:	505a      	str	r2, [r3, r1]

}
 800ecbc:	46c0      	nop			@ (mov r8, r8)
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	b002      	add	sp, #8
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	0800ebfd 	.word	0x0800ebfd
 800ecc8:	0800ebed 	.word	0x0800ebed
 800eccc:	0800ec0d 	.word	0x0800ec0d
 800ecd0:	08003819 	.word	0x08003819
 800ecd4:	08003855 	.word	0x08003855
 800ecd8:	0800ec1d 	.word	0x0800ec1d
 800ecdc:	0800ec2d 	.word	0x0800ec2d
 800ece0:	0800ec3d 	.word	0x0800ec3d
 800ece4:	0800fb55 	.word	0x0800fb55
 800ece8:	0800ec4d 	.word	0x0800ec4d

0800ecec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecec:	b5b0      	push	{r4, r5, r7, lr}
 800ecee:	b08e      	sub	sp, #56	@ 0x38
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecf4:	231a      	movs	r3, #26
 800ecf6:	2218      	movs	r2, #24
 800ecf8:	189b      	adds	r3, r3, r2
 800ecfa:	19db      	adds	r3, r3, r7
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	689a      	ldr	r2, [r3, #8]
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	431a      	orrs	r2, r3
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	695b      	ldr	r3, [r3, #20]
 800ed0e:	431a      	orrs	r2, r3
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	69db      	ldr	r3, [r3, #28]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	4ac3      	ldr	r2, [pc, #780]	@ (800f02c <UART_SetConfig+0x340>)
 800ed20:	4013      	ands	r3, r2
 800ed22:	0019      	movs	r1, r3
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed2a:	430a      	orrs	r2, r1
 800ed2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4abe      	ldr	r2, [pc, #760]	@ (800f030 <UART_SetConfig+0x344>)
 800ed36:	4013      	ands	r3, r2
 800ed38:	0019      	movs	r1, r3
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	68da      	ldr	r2, [r3, #12]
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	430a      	orrs	r2, r1
 800ed44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4ab8      	ldr	r2, [pc, #736]	@ (800f034 <UART_SetConfig+0x348>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d004      	beq.n	800ed60 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	4ab4      	ldr	r2, [pc, #720]	@ (800f038 <UART_SetConfig+0x34c>)
 800ed68:	4013      	ands	r3, r2
 800ed6a:	0019      	movs	r1, r3
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed72:	430a      	orrs	r2, r1
 800ed74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4ab0      	ldr	r2, [pc, #704]	@ (800f03c <UART_SetConfig+0x350>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d131      	bne.n	800ede4 <UART_SetConfig+0xf8>
 800ed80:	4baf      	ldr	r3, [pc, #700]	@ (800f040 <UART_SetConfig+0x354>)
 800ed82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed84:	2203      	movs	r2, #3
 800ed86:	4013      	ands	r3, r2
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d01d      	beq.n	800edc8 <UART_SetConfig+0xdc>
 800ed8c:	d823      	bhi.n	800edd6 <UART_SetConfig+0xea>
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	d00c      	beq.n	800edac <UART_SetConfig+0xc0>
 800ed92:	d820      	bhi.n	800edd6 <UART_SetConfig+0xea>
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <UART_SetConfig+0xb2>
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d00e      	beq.n	800edba <UART_SetConfig+0xce>
 800ed9c:	e01b      	b.n	800edd6 <UART_SetConfig+0xea>
 800ed9e:	231b      	movs	r3, #27
 800eda0:	2218      	movs	r2, #24
 800eda2:	189b      	adds	r3, r3, r2
 800eda4:	19db      	adds	r3, r3, r7
 800eda6:	2201      	movs	r2, #1
 800eda8:	701a      	strb	r2, [r3, #0]
 800edaa:	e0b4      	b.n	800ef16 <UART_SetConfig+0x22a>
 800edac:	231b      	movs	r3, #27
 800edae:	2218      	movs	r2, #24
 800edb0:	189b      	adds	r3, r3, r2
 800edb2:	19db      	adds	r3, r3, r7
 800edb4:	2202      	movs	r2, #2
 800edb6:	701a      	strb	r2, [r3, #0]
 800edb8:	e0ad      	b.n	800ef16 <UART_SetConfig+0x22a>
 800edba:	231b      	movs	r3, #27
 800edbc:	2218      	movs	r2, #24
 800edbe:	189b      	adds	r3, r3, r2
 800edc0:	19db      	adds	r3, r3, r7
 800edc2:	2204      	movs	r2, #4
 800edc4:	701a      	strb	r2, [r3, #0]
 800edc6:	e0a6      	b.n	800ef16 <UART_SetConfig+0x22a>
 800edc8:	231b      	movs	r3, #27
 800edca:	2218      	movs	r2, #24
 800edcc:	189b      	adds	r3, r3, r2
 800edce:	19db      	adds	r3, r3, r7
 800edd0:	2208      	movs	r2, #8
 800edd2:	701a      	strb	r2, [r3, #0]
 800edd4:	e09f      	b.n	800ef16 <UART_SetConfig+0x22a>
 800edd6:	231b      	movs	r3, #27
 800edd8:	2218      	movs	r2, #24
 800edda:	189b      	adds	r3, r3, r2
 800eddc:	19db      	adds	r3, r3, r7
 800edde:	2210      	movs	r2, #16
 800ede0:	701a      	strb	r2, [r3, #0]
 800ede2:	e098      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a96      	ldr	r2, [pc, #600]	@ (800f044 <UART_SetConfig+0x358>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d131      	bne.n	800ee52 <UART_SetConfig+0x166>
 800edee:	4b94      	ldr	r3, [pc, #592]	@ (800f040 <UART_SetConfig+0x354>)
 800edf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edf2:	220c      	movs	r2, #12
 800edf4:	4013      	ands	r3, r2
 800edf6:	2b0c      	cmp	r3, #12
 800edf8:	d01d      	beq.n	800ee36 <UART_SetConfig+0x14a>
 800edfa:	d823      	bhi.n	800ee44 <UART_SetConfig+0x158>
 800edfc:	2b08      	cmp	r3, #8
 800edfe:	d00c      	beq.n	800ee1a <UART_SetConfig+0x12e>
 800ee00:	d820      	bhi.n	800ee44 <UART_SetConfig+0x158>
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <UART_SetConfig+0x120>
 800ee06:	2b04      	cmp	r3, #4
 800ee08:	d00e      	beq.n	800ee28 <UART_SetConfig+0x13c>
 800ee0a:	e01b      	b.n	800ee44 <UART_SetConfig+0x158>
 800ee0c:	231b      	movs	r3, #27
 800ee0e:	2218      	movs	r2, #24
 800ee10:	189b      	adds	r3, r3, r2
 800ee12:	19db      	adds	r3, r3, r7
 800ee14:	2200      	movs	r2, #0
 800ee16:	701a      	strb	r2, [r3, #0]
 800ee18:	e07d      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ee1a:	231b      	movs	r3, #27
 800ee1c:	2218      	movs	r2, #24
 800ee1e:	189b      	adds	r3, r3, r2
 800ee20:	19db      	adds	r3, r3, r7
 800ee22:	2202      	movs	r2, #2
 800ee24:	701a      	strb	r2, [r3, #0]
 800ee26:	e076      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ee28:	231b      	movs	r3, #27
 800ee2a:	2218      	movs	r2, #24
 800ee2c:	189b      	adds	r3, r3, r2
 800ee2e:	19db      	adds	r3, r3, r7
 800ee30:	2204      	movs	r2, #4
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	e06f      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ee36:	231b      	movs	r3, #27
 800ee38:	2218      	movs	r2, #24
 800ee3a:	189b      	adds	r3, r3, r2
 800ee3c:	19db      	adds	r3, r3, r7
 800ee3e:	2208      	movs	r2, #8
 800ee40:	701a      	strb	r2, [r3, #0]
 800ee42:	e068      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ee44:	231b      	movs	r3, #27
 800ee46:	2218      	movs	r2, #24
 800ee48:	189b      	adds	r3, r3, r2
 800ee4a:	19db      	adds	r3, r3, r7
 800ee4c:	2210      	movs	r2, #16
 800ee4e:	701a      	strb	r2, [r3, #0]
 800ee50:	e061      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a7c      	ldr	r2, [pc, #496]	@ (800f048 <UART_SetConfig+0x35c>)
 800ee58:	4293      	cmp	r3, r2
 800ee5a:	d106      	bne.n	800ee6a <UART_SetConfig+0x17e>
 800ee5c:	231b      	movs	r3, #27
 800ee5e:	2218      	movs	r2, #24
 800ee60:	189b      	adds	r3, r3, r2
 800ee62:	19db      	adds	r3, r3, r7
 800ee64:	2200      	movs	r2, #0
 800ee66:	701a      	strb	r2, [r3, #0]
 800ee68:	e055      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4a77      	ldr	r2, [pc, #476]	@ (800f04c <UART_SetConfig+0x360>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d106      	bne.n	800ee82 <UART_SetConfig+0x196>
 800ee74:	231b      	movs	r3, #27
 800ee76:	2218      	movs	r2, #24
 800ee78:	189b      	adds	r3, r3, r2
 800ee7a:	19db      	adds	r3, r3, r7
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	e049      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a6b      	ldr	r2, [pc, #428]	@ (800f034 <UART_SetConfig+0x348>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d13e      	bne.n	800ef0a <UART_SetConfig+0x21e>
 800ee8c:	4b6c      	ldr	r3, [pc, #432]	@ (800f040 <UART_SetConfig+0x354>)
 800ee8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee90:	23c0      	movs	r3, #192	@ 0xc0
 800ee92:	011b      	lsls	r3, r3, #4
 800ee94:	4013      	ands	r3, r2
 800ee96:	22c0      	movs	r2, #192	@ 0xc0
 800ee98:	0112      	lsls	r2, r2, #4
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d027      	beq.n	800eeee <UART_SetConfig+0x202>
 800ee9e:	22c0      	movs	r2, #192	@ 0xc0
 800eea0:	0112      	lsls	r2, r2, #4
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d82a      	bhi.n	800eefc <UART_SetConfig+0x210>
 800eea6:	2280      	movs	r2, #128	@ 0x80
 800eea8:	0112      	lsls	r2, r2, #4
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d011      	beq.n	800eed2 <UART_SetConfig+0x1e6>
 800eeae:	2280      	movs	r2, #128	@ 0x80
 800eeb0:	0112      	lsls	r2, r2, #4
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d822      	bhi.n	800eefc <UART_SetConfig+0x210>
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d004      	beq.n	800eec4 <UART_SetConfig+0x1d8>
 800eeba:	2280      	movs	r2, #128	@ 0x80
 800eebc:	00d2      	lsls	r2, r2, #3
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d00e      	beq.n	800eee0 <UART_SetConfig+0x1f4>
 800eec2:	e01b      	b.n	800eefc <UART_SetConfig+0x210>
 800eec4:	231b      	movs	r3, #27
 800eec6:	2218      	movs	r2, #24
 800eec8:	189b      	adds	r3, r3, r2
 800eeca:	19db      	adds	r3, r3, r7
 800eecc:	2200      	movs	r2, #0
 800eece:	701a      	strb	r2, [r3, #0]
 800eed0:	e021      	b.n	800ef16 <UART_SetConfig+0x22a>
 800eed2:	231b      	movs	r3, #27
 800eed4:	2218      	movs	r2, #24
 800eed6:	189b      	adds	r3, r3, r2
 800eed8:	19db      	adds	r3, r3, r7
 800eeda:	2202      	movs	r2, #2
 800eedc:	701a      	strb	r2, [r3, #0]
 800eede:	e01a      	b.n	800ef16 <UART_SetConfig+0x22a>
 800eee0:	231b      	movs	r3, #27
 800eee2:	2218      	movs	r2, #24
 800eee4:	189b      	adds	r3, r3, r2
 800eee6:	19db      	adds	r3, r3, r7
 800eee8:	2204      	movs	r2, #4
 800eeea:	701a      	strb	r2, [r3, #0]
 800eeec:	e013      	b.n	800ef16 <UART_SetConfig+0x22a>
 800eeee:	231b      	movs	r3, #27
 800eef0:	2218      	movs	r2, #24
 800eef2:	189b      	adds	r3, r3, r2
 800eef4:	19db      	adds	r3, r3, r7
 800eef6:	2208      	movs	r2, #8
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	e00c      	b.n	800ef16 <UART_SetConfig+0x22a>
 800eefc:	231b      	movs	r3, #27
 800eefe:	2218      	movs	r2, #24
 800ef00:	189b      	adds	r3, r3, r2
 800ef02:	19db      	adds	r3, r3, r7
 800ef04:	2210      	movs	r2, #16
 800ef06:	701a      	strb	r2, [r3, #0]
 800ef08:	e005      	b.n	800ef16 <UART_SetConfig+0x22a>
 800ef0a:	231b      	movs	r3, #27
 800ef0c:	2218      	movs	r2, #24
 800ef0e:	189b      	adds	r3, r3, r2
 800ef10:	19db      	adds	r3, r3, r7
 800ef12:	2210      	movs	r2, #16
 800ef14:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4a46      	ldr	r2, [pc, #280]	@ (800f034 <UART_SetConfig+0x348>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d000      	beq.n	800ef22 <UART_SetConfig+0x236>
 800ef20:	e09a      	b.n	800f058 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef22:	231b      	movs	r3, #27
 800ef24:	2218      	movs	r2, #24
 800ef26:	189b      	adds	r3, r3, r2
 800ef28:	19db      	adds	r3, r3, r7
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	2b08      	cmp	r3, #8
 800ef2e:	d01d      	beq.n	800ef6c <UART_SetConfig+0x280>
 800ef30:	dc20      	bgt.n	800ef74 <UART_SetConfig+0x288>
 800ef32:	2b04      	cmp	r3, #4
 800ef34:	d015      	beq.n	800ef62 <UART_SetConfig+0x276>
 800ef36:	dc1d      	bgt.n	800ef74 <UART_SetConfig+0x288>
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d002      	beq.n	800ef42 <UART_SetConfig+0x256>
 800ef3c:	2b02      	cmp	r3, #2
 800ef3e:	d005      	beq.n	800ef4c <UART_SetConfig+0x260>
 800ef40:	e018      	b.n	800ef74 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef42:	f7fe fc51 	bl	800d7e8 <HAL_RCC_GetPCLK1Freq>
 800ef46:	0003      	movs	r3, r0
 800ef48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ef4a:	e01c      	b.n	800ef86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef4c:	4b3c      	ldr	r3, [pc, #240]	@ (800f040 <UART_SetConfig+0x354>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2210      	movs	r2, #16
 800ef52:	4013      	ands	r3, r2
 800ef54:	d002      	beq.n	800ef5c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ef56:	4b3e      	ldr	r3, [pc, #248]	@ (800f050 <UART_SetConfig+0x364>)
 800ef58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef5a:	e014      	b.n	800ef86 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800ef5c:	4b3d      	ldr	r3, [pc, #244]	@ (800f054 <UART_SetConfig+0x368>)
 800ef5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ef60:	e011      	b.n	800ef86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef62:	f7fe fb91 	bl	800d688 <HAL_RCC_GetSysClockFreq>
 800ef66:	0003      	movs	r3, r0
 800ef68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ef6a:	e00c      	b.n	800ef86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef6c:	2380      	movs	r3, #128	@ 0x80
 800ef6e:	021b      	lsls	r3, r3, #8
 800ef70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ef72:	e008      	b.n	800ef86 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800ef74:	2300      	movs	r3, #0
 800ef76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800ef78:	231a      	movs	r3, #26
 800ef7a:	2218      	movs	r2, #24
 800ef7c:	189b      	adds	r3, r3, r2
 800ef7e:	19db      	adds	r3, r3, r7
 800ef80:	2201      	movs	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]
        break;
 800ef84:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d100      	bne.n	800ef8e <UART_SetConfig+0x2a2>
 800ef8c:	e133      	b.n	800f1f6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	685a      	ldr	r2, [r3, #4]
 800ef92:	0013      	movs	r3, r2
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	189b      	adds	r3, r3, r2
 800ef98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d305      	bcc.n	800efaa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800efa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d906      	bls.n	800efb8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800efaa:	231a      	movs	r3, #26
 800efac:	2218      	movs	r2, #24
 800efae:	189b      	adds	r3, r3, r2
 800efb0:	19db      	adds	r3, r3, r7
 800efb2:	2201      	movs	r2, #1
 800efb4:	701a      	strb	r2, [r3, #0]
 800efb6:	e11e      	b.n	800f1f6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efba:	613b      	str	r3, [r7, #16]
 800efbc:	2300      	movs	r3, #0
 800efbe:	617b      	str	r3, [r7, #20]
 800efc0:	6939      	ldr	r1, [r7, #16]
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	000b      	movs	r3, r1
 800efc6:	0e1b      	lsrs	r3, r3, #24
 800efc8:	0010      	movs	r0, r2
 800efca:	0205      	lsls	r5, r0, #8
 800efcc:	431d      	orrs	r5, r3
 800efce:	000b      	movs	r3, r1
 800efd0:	021c      	lsls	r4, r3, #8
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	085b      	lsrs	r3, r3, #1
 800efd8:	60bb      	str	r3, [r7, #8]
 800efda:	2300      	movs	r3, #0
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	68b8      	ldr	r0, [r7, #8]
 800efe0:	68f9      	ldr	r1, [r7, #12]
 800efe2:	1900      	adds	r0, r0, r4
 800efe4:	4169      	adcs	r1, r5
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	603b      	str	r3, [r7, #0]
 800efec:	2300      	movs	r3, #0
 800efee:	607b      	str	r3, [r7, #4]
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f7f1 fad8 	bl	80005a8 <__aeabi_uldivmod>
 800eff8:	0002      	movs	r2, r0
 800effa:	000b      	movs	r3, r1
 800effc:	0013      	movs	r3, r2
 800effe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f002:	23c0      	movs	r3, #192	@ 0xc0
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	429a      	cmp	r2, r3
 800f008:	d309      	bcc.n	800f01e <UART_SetConfig+0x332>
 800f00a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f00c:	2380      	movs	r3, #128	@ 0x80
 800f00e:	035b      	lsls	r3, r3, #13
 800f010:	429a      	cmp	r2, r3
 800f012:	d204      	bcs.n	800f01e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f01a:	60da      	str	r2, [r3, #12]
 800f01c:	e0eb      	b.n	800f1f6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800f01e:	231a      	movs	r3, #26
 800f020:	2218      	movs	r2, #24
 800f022:	189b      	adds	r3, r3, r2
 800f024:	19db      	adds	r3, r3, r7
 800f026:	2201      	movs	r2, #1
 800f028:	701a      	strb	r2, [r3, #0]
 800f02a:	e0e4      	b.n	800f1f6 <UART_SetConfig+0x50a>
 800f02c:	efff69f3 	.word	0xefff69f3
 800f030:	ffffcfff 	.word	0xffffcfff
 800f034:	40004800 	.word	0x40004800
 800f038:	fffff4ff 	.word	0xfffff4ff
 800f03c:	40013800 	.word	0x40013800
 800f040:	40021000 	.word	0x40021000
 800f044:	40004400 	.word	0x40004400
 800f048:	40004c00 	.word	0x40004c00
 800f04c:	40005000 	.word	0x40005000
 800f050:	003d0900 	.word	0x003d0900
 800f054:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	69da      	ldr	r2, [r3, #28]
 800f05c:	2380      	movs	r3, #128	@ 0x80
 800f05e:	021b      	lsls	r3, r3, #8
 800f060:	429a      	cmp	r2, r3
 800f062:	d000      	beq.n	800f066 <UART_SetConfig+0x37a>
 800f064:	e070      	b.n	800f148 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800f066:	231b      	movs	r3, #27
 800f068:	2218      	movs	r2, #24
 800f06a:	189b      	adds	r3, r3, r2
 800f06c:	19db      	adds	r3, r3, r7
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2b08      	cmp	r3, #8
 800f072:	d822      	bhi.n	800f0ba <UART_SetConfig+0x3ce>
 800f074:	009a      	lsls	r2, r3, #2
 800f076:	4b67      	ldr	r3, [pc, #412]	@ (800f214 <UART_SetConfig+0x528>)
 800f078:	18d3      	adds	r3, r2, r3
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f07e:	f7fe fbb3 	bl	800d7e8 <HAL_RCC_GetPCLK1Freq>
 800f082:	0003      	movs	r3, r0
 800f084:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f086:	e021      	b.n	800f0cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f088:	f7fe fbc4 	bl	800d814 <HAL_RCC_GetPCLK2Freq>
 800f08c:	0003      	movs	r3, r0
 800f08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f090:	e01c      	b.n	800f0cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f092:	4b61      	ldr	r3, [pc, #388]	@ (800f218 <UART_SetConfig+0x52c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2210      	movs	r2, #16
 800f098:	4013      	ands	r3, r2
 800f09a:	d002      	beq.n	800f0a2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800f09c:	4b5f      	ldr	r3, [pc, #380]	@ (800f21c <UART_SetConfig+0x530>)
 800f09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0a0:	e014      	b.n	800f0cc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800f0a2:	4b5f      	ldr	r3, [pc, #380]	@ (800f220 <UART_SetConfig+0x534>)
 800f0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f0a6:	e011      	b.n	800f0cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0a8:	f7fe faee 	bl	800d688 <HAL_RCC_GetSysClockFreq>
 800f0ac:	0003      	movs	r3, r0
 800f0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f0b0:	e00c      	b.n	800f0cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0b2:	2380      	movs	r3, #128	@ 0x80
 800f0b4:	021b      	lsls	r3, r3, #8
 800f0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f0b8:	e008      	b.n	800f0cc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800f0be:	231a      	movs	r3, #26
 800f0c0:	2218      	movs	r2, #24
 800f0c2:	189b      	adds	r3, r3, r2
 800f0c4:	19db      	adds	r3, r3, r7
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	701a      	strb	r2, [r3, #0]
        break;
 800f0ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d100      	bne.n	800f0d4 <UART_SetConfig+0x3e8>
 800f0d2:	e090      	b.n	800f1f6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d6:	005a      	lsls	r2, r3, #1
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	085b      	lsrs	r3, r3, #1
 800f0de:	18d2      	adds	r2, r2, r3
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	0019      	movs	r1, r3
 800f0e6:	0010      	movs	r0, r2
 800f0e8:	f7f1 f852 	bl	8000190 <__udivsi3>
 800f0ec:	0003      	movs	r3, r0
 800f0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f2:	2b0f      	cmp	r3, #15
 800f0f4:	d921      	bls.n	800f13a <UART_SetConfig+0x44e>
 800f0f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0f8:	2380      	movs	r3, #128	@ 0x80
 800f0fa:	025b      	lsls	r3, r3, #9
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d21c      	bcs.n	800f13a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f102:	b29a      	uxth	r2, r3
 800f104:	200e      	movs	r0, #14
 800f106:	2418      	movs	r4, #24
 800f108:	1903      	adds	r3, r0, r4
 800f10a:	19db      	adds	r3, r3, r7
 800f10c:	210f      	movs	r1, #15
 800f10e:	438a      	bics	r2, r1
 800f110:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f114:	085b      	lsrs	r3, r3, #1
 800f116:	b29b      	uxth	r3, r3
 800f118:	2207      	movs	r2, #7
 800f11a:	4013      	ands	r3, r2
 800f11c:	b299      	uxth	r1, r3
 800f11e:	1903      	adds	r3, r0, r4
 800f120:	19db      	adds	r3, r3, r7
 800f122:	1902      	adds	r2, r0, r4
 800f124:	19d2      	adds	r2, r2, r7
 800f126:	8812      	ldrh	r2, [r2, #0]
 800f128:	430a      	orrs	r2, r1
 800f12a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	1902      	adds	r2, r0, r4
 800f132:	19d2      	adds	r2, r2, r7
 800f134:	8812      	ldrh	r2, [r2, #0]
 800f136:	60da      	str	r2, [r3, #12]
 800f138:	e05d      	b.n	800f1f6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800f13a:	231a      	movs	r3, #26
 800f13c:	2218      	movs	r2, #24
 800f13e:	189b      	adds	r3, r3, r2
 800f140:	19db      	adds	r3, r3, r7
 800f142:	2201      	movs	r2, #1
 800f144:	701a      	strb	r2, [r3, #0]
 800f146:	e056      	b.n	800f1f6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f148:	231b      	movs	r3, #27
 800f14a:	2218      	movs	r2, #24
 800f14c:	189b      	adds	r3, r3, r2
 800f14e:	19db      	adds	r3, r3, r7
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	2b08      	cmp	r3, #8
 800f154:	d822      	bhi.n	800f19c <UART_SetConfig+0x4b0>
 800f156:	009a      	lsls	r2, r3, #2
 800f158:	4b32      	ldr	r3, [pc, #200]	@ (800f224 <UART_SetConfig+0x538>)
 800f15a:	18d3      	adds	r3, r2, r3
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f160:	f7fe fb42 	bl	800d7e8 <HAL_RCC_GetPCLK1Freq>
 800f164:	0003      	movs	r3, r0
 800f166:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f168:	e021      	b.n	800f1ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f16a:	f7fe fb53 	bl	800d814 <HAL_RCC_GetPCLK2Freq>
 800f16e:	0003      	movs	r3, r0
 800f170:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f172:	e01c      	b.n	800f1ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f174:	4b28      	ldr	r3, [pc, #160]	@ (800f218 <UART_SetConfig+0x52c>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2210      	movs	r2, #16
 800f17a:	4013      	ands	r3, r2
 800f17c:	d002      	beq.n	800f184 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800f17e:	4b27      	ldr	r3, [pc, #156]	@ (800f21c <UART_SetConfig+0x530>)
 800f180:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f182:	e014      	b.n	800f1ae <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800f184:	4b26      	ldr	r3, [pc, #152]	@ (800f220 <UART_SetConfig+0x534>)
 800f186:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f188:	e011      	b.n	800f1ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f18a:	f7fe fa7d 	bl	800d688 <HAL_RCC_GetSysClockFreq>
 800f18e:	0003      	movs	r3, r0
 800f190:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f192:	e00c      	b.n	800f1ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f194:	2380      	movs	r3, #128	@ 0x80
 800f196:	021b      	lsls	r3, r3, #8
 800f198:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800f19a:	e008      	b.n	800f1ae <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800f19c:	2300      	movs	r3, #0
 800f19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800f1a0:	231a      	movs	r3, #26
 800f1a2:	2218      	movs	r2, #24
 800f1a4:	189b      	adds	r3, r3, r2
 800f1a6:	19db      	adds	r3, r3, r7
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	701a      	strb	r2, [r3, #0]
        break;
 800f1ac:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800f1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d020      	beq.n	800f1f6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	085a      	lsrs	r2, r3, #1
 800f1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1bc:	18d2      	adds	r2, r2, r3
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	0019      	movs	r1, r3
 800f1c4:	0010      	movs	r0, r2
 800f1c6:	f7f0 ffe3 	bl	8000190 <__udivsi3>
 800f1ca:	0003      	movs	r3, r0
 800f1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d0:	2b0f      	cmp	r3, #15
 800f1d2:	d90a      	bls.n	800f1ea <UART_SetConfig+0x4fe>
 800f1d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1d6:	2380      	movs	r3, #128	@ 0x80
 800f1d8:	025b      	lsls	r3, r3, #9
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d205      	bcs.n	800f1ea <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	60da      	str	r2, [r3, #12]
 800f1e8:	e005      	b.n	800f1f6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800f1ea:	231a      	movs	r3, #26
 800f1ec:	2218      	movs	r2, #24
 800f1ee:	189b      	adds	r3, r3, r2
 800f1f0:	19db      	adds	r3, r3, r7
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	2200      	movs	r2, #0
 800f200:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f202:	231a      	movs	r3, #26
 800f204:	2218      	movs	r2, #24
 800f206:	189b      	adds	r3, r3, r2
 800f208:	19db      	adds	r3, r3, r7
 800f20a:	781b      	ldrb	r3, [r3, #0]
}
 800f20c:	0018      	movs	r0, r3
 800f20e:	46bd      	mov	sp, r7
 800f210:	b00e      	add	sp, #56	@ 0x38
 800f212:	bdb0      	pop	{r4, r5, r7, pc}
 800f214:	080153e4 	.word	0x080153e4
 800f218:	40021000 	.word	0x40021000
 800f21c:	003d0900 	.word	0x003d0900
 800f220:	00f42400 	.word	0x00f42400
 800f224:	08015408 	.word	0x08015408

0800f228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f234:	2201      	movs	r2, #1
 800f236:	4013      	ands	r3, r2
 800f238:	d00b      	beq.n	800f252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	4a4a      	ldr	r2, [pc, #296]	@ (800f36c <UART_AdvFeatureConfig+0x144>)
 800f242:	4013      	ands	r3, r2
 800f244:	0019      	movs	r1, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	430a      	orrs	r2, r1
 800f250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f256:	2202      	movs	r2, #2
 800f258:	4013      	ands	r3, r2
 800f25a:	d00b      	beq.n	800f274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	4a43      	ldr	r2, [pc, #268]	@ (800f370 <UART_AdvFeatureConfig+0x148>)
 800f264:	4013      	ands	r3, r2
 800f266:	0019      	movs	r1, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	430a      	orrs	r2, r1
 800f272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f278:	2204      	movs	r2, #4
 800f27a:	4013      	ands	r3, r2
 800f27c:	d00b      	beq.n	800f296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	4a3b      	ldr	r2, [pc, #236]	@ (800f374 <UART_AdvFeatureConfig+0x14c>)
 800f286:	4013      	ands	r3, r2
 800f288:	0019      	movs	r1, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	430a      	orrs	r2, r1
 800f294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f29a:	2208      	movs	r2, #8
 800f29c:	4013      	ands	r3, r2
 800f29e:	d00b      	beq.n	800f2b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	4a34      	ldr	r2, [pc, #208]	@ (800f378 <UART_AdvFeatureConfig+0x150>)
 800f2a8:	4013      	ands	r3, r2
 800f2aa:	0019      	movs	r1, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	430a      	orrs	r2, r1
 800f2b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2bc:	2210      	movs	r2, #16
 800f2be:	4013      	ands	r3, r2
 800f2c0:	d00b      	beq.n	800f2da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	4a2c      	ldr	r2, [pc, #176]	@ (800f37c <UART_AdvFeatureConfig+0x154>)
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	0019      	movs	r1, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	430a      	orrs	r2, r1
 800f2d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2de:	2220      	movs	r2, #32
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	d00b      	beq.n	800f2fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	4a25      	ldr	r2, [pc, #148]	@ (800f380 <UART_AdvFeatureConfig+0x158>)
 800f2ec:	4013      	ands	r3, r2
 800f2ee:	0019      	movs	r1, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	430a      	orrs	r2, r1
 800f2fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f300:	2240      	movs	r2, #64	@ 0x40
 800f302:	4013      	ands	r3, r2
 800f304:	d01d      	beq.n	800f342 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	685b      	ldr	r3, [r3, #4]
 800f30c:	4a1d      	ldr	r2, [pc, #116]	@ (800f384 <UART_AdvFeatureConfig+0x15c>)
 800f30e:	4013      	ands	r3, r2
 800f310:	0019      	movs	r1, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	430a      	orrs	r2, r1
 800f31c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f322:	2380      	movs	r3, #128	@ 0x80
 800f324:	035b      	lsls	r3, r3, #13
 800f326:	429a      	cmp	r2, r3
 800f328:	d10b      	bne.n	800f342 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	4a15      	ldr	r2, [pc, #84]	@ (800f388 <UART_AdvFeatureConfig+0x160>)
 800f332:	4013      	ands	r3, r2
 800f334:	0019      	movs	r1, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	430a      	orrs	r2, r1
 800f340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f346:	2280      	movs	r2, #128	@ 0x80
 800f348:	4013      	ands	r3, r2
 800f34a:	d00b      	beq.n	800f364 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	4a0e      	ldr	r2, [pc, #56]	@ (800f38c <UART_AdvFeatureConfig+0x164>)
 800f354:	4013      	ands	r3, r2
 800f356:	0019      	movs	r1, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	430a      	orrs	r2, r1
 800f362:	605a      	str	r2, [r3, #4]
  }
}
 800f364:	46c0      	nop			@ (mov r8, r8)
 800f366:	46bd      	mov	sp, r7
 800f368:	b002      	add	sp, #8
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	fffdffff 	.word	0xfffdffff
 800f370:	fffeffff 	.word	0xfffeffff
 800f374:	fffbffff 	.word	0xfffbffff
 800f378:	ffff7fff 	.word	0xffff7fff
 800f37c:	ffffefff 	.word	0xffffefff
 800f380:	ffffdfff 	.word	0xffffdfff
 800f384:	ffefffff 	.word	0xffefffff
 800f388:	ff9fffff 	.word	0xff9fffff
 800f38c:	fff7ffff 	.word	0xfff7ffff

0800f390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b092      	sub	sp, #72	@ 0x48
 800f394:	af02      	add	r7, sp, #8
 800f396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2284      	movs	r2, #132	@ 0x84
 800f39c:	2100      	movs	r1, #0
 800f39e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3a0:	f7f9 fe1a 	bl	8008fd8 <HAL_GetTick>
 800f3a4:	0003      	movs	r3, r0
 800f3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2208      	movs	r2, #8
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	2b08      	cmp	r3, #8
 800f3b4:	d12c      	bne.n	800f410 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b8:	2280      	movs	r2, #128	@ 0x80
 800f3ba:	0391      	lsls	r1, r2, #14
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	4a46      	ldr	r2, [pc, #280]	@ (800f4d8 <UART_CheckIdleState+0x148>)
 800f3c0:	9200      	str	r2, [sp, #0]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f000 f88c 	bl	800f4e0 <UART_WaitOnFlagUntilTimeout>
 800f3c8:	1e03      	subs	r3, r0, #0
 800f3ca:	d021      	beq.n	800f410 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800f3d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800f3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f3d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3dc:	f383 8810 	msr	PRIMASK, r3
}
 800f3e0:	46c0      	nop			@ (mov r8, r8)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2180      	movs	r1, #128	@ 0x80
 800f3ee:	438a      	bics	r2, r1
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f8:	f383 8810 	msr	PRIMASK, r3
}
 800f3fc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2220      	movs	r2, #32
 800f402:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2278      	movs	r2, #120	@ 0x78
 800f408:	2100      	movs	r1, #0
 800f40a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f40c:	2303      	movs	r3, #3
 800f40e:	e05f      	b.n	800f4d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2204      	movs	r2, #4
 800f418:	4013      	ands	r3, r2
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	d146      	bne.n	800f4ac <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f420:	2280      	movs	r2, #128	@ 0x80
 800f422:	03d1      	lsls	r1, r2, #15
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	4a2c      	ldr	r2, [pc, #176]	@ (800f4d8 <UART_CheckIdleState+0x148>)
 800f428:	9200      	str	r2, [sp, #0]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f000 f858 	bl	800f4e0 <UART_WaitOnFlagUntilTimeout>
 800f430:	1e03      	subs	r3, r0, #0
 800f432:	d03b      	beq.n	800f4ac <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f434:	f3ef 8310 	mrs	r3, PRIMASK
 800f438:	60fb      	str	r3, [r7, #12]
  return(result);
 800f43a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f43e:	2301      	movs	r3, #1
 800f440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	f383 8810 	msr	PRIMASK, r3
}
 800f448:	46c0      	nop			@ (mov r8, r8)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4921      	ldr	r1, [pc, #132]	@ (800f4dc <UART_CheckIdleState+0x14c>)
 800f456:	400a      	ands	r2, r1
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f45c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	f383 8810 	msr	PRIMASK, r3
}
 800f464:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f466:	f3ef 8310 	mrs	r3, PRIMASK
 800f46a:	61bb      	str	r3, [r7, #24]
  return(result);
 800f46c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f46e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f470:	2301      	movs	r3, #1
 800f472:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	f383 8810 	msr	PRIMASK, r3
}
 800f47a:	46c0      	nop			@ (mov r8, r8)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	689a      	ldr	r2, [r3, #8]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2101      	movs	r1, #1
 800f488:	438a      	bics	r2, r1
 800f48a:	609a      	str	r2, [r3, #8]
 800f48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	f383 8810 	msr	PRIMASK, r3
}
 800f496:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2280      	movs	r2, #128	@ 0x80
 800f49c:	2120      	movs	r1, #32
 800f49e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2278      	movs	r2, #120	@ 0x78
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e011      	b.n	800f4d0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2220      	movs	r2, #32
 800f4b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2280      	movs	r2, #128	@ 0x80
 800f4b6:	2120      	movs	r1, #32
 800f4b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2278      	movs	r2, #120	@ 0x78
 800f4ca:	2100      	movs	r1, #0
 800f4cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	0018      	movs	r0, r3
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	b010      	add	sp, #64	@ 0x40
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	01ffffff 	.word	0x01ffffff
 800f4dc:	fffffedf 	.word	0xfffffedf

0800f4e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	603b      	str	r3, [r7, #0]
 800f4ec:	1dfb      	adds	r3, r7, #7
 800f4ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4f0:	e04b      	b.n	800f58a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	d048      	beq.n	800f58a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4f8:	f7f9 fd6e 	bl	8008fd8 <HAL_GetTick>
 800f4fc:	0002      	movs	r2, r0
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	1ad3      	subs	r3, r2, r3
 800f502:	69ba      	ldr	r2, [r7, #24]
 800f504:	429a      	cmp	r2, r3
 800f506:	d302      	bcc.n	800f50e <UART_WaitOnFlagUntilTimeout+0x2e>
 800f508:	69bb      	ldr	r3, [r7, #24]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d101      	bne.n	800f512 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	e04b      	b.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2204      	movs	r2, #4
 800f51a:	4013      	ands	r3, r2
 800f51c:	d035      	beq.n	800f58a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	69db      	ldr	r3, [r3, #28]
 800f524:	2208      	movs	r2, #8
 800f526:	4013      	ands	r3, r2
 800f528:	2b08      	cmp	r3, #8
 800f52a:	d111      	bne.n	800f550 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2208      	movs	r2, #8
 800f532:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	0018      	movs	r0, r3
 800f538:	f000 f900 	bl	800f73c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2284      	movs	r2, #132	@ 0x84
 800f540:	2108      	movs	r1, #8
 800f542:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2278      	movs	r2, #120	@ 0x78
 800f548:	2100      	movs	r1, #0
 800f54a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	e02c      	b.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	69da      	ldr	r2, [r3, #28]
 800f556:	2380      	movs	r3, #128	@ 0x80
 800f558:	011b      	lsls	r3, r3, #4
 800f55a:	401a      	ands	r2, r3
 800f55c:	2380      	movs	r3, #128	@ 0x80
 800f55e:	011b      	lsls	r3, r3, #4
 800f560:	429a      	cmp	r2, r3
 800f562:	d112      	bne.n	800f58a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2280      	movs	r2, #128	@ 0x80
 800f56a:	0112      	lsls	r2, r2, #4
 800f56c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	0018      	movs	r0, r3
 800f572:	f000 f8e3 	bl	800f73c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2284      	movs	r2, #132	@ 0x84
 800f57a:	2120      	movs	r1, #32
 800f57c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	2278      	movs	r2, #120	@ 0x78
 800f582:	2100      	movs	r1, #0
 800f584:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f586:	2303      	movs	r3, #3
 800f588:	e00f      	b.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	69db      	ldr	r3, [r3, #28]
 800f590:	68ba      	ldr	r2, [r7, #8]
 800f592:	4013      	ands	r3, r2
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	425a      	negs	r2, r3
 800f59a:	4153      	adcs	r3, r2
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	001a      	movs	r2, r3
 800f5a0:	1dfb      	adds	r3, r7, #7
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d0a4      	beq.n	800f4f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	0018      	movs	r0, r3
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	b004      	add	sp, #16
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b090      	sub	sp, #64	@ 0x40
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	1dbb      	adds	r3, r7, #6
 800f5c0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	1dba      	adds	r2, r7, #6
 800f5cc:	2158      	movs	r1, #88	@ 0x58
 800f5ce:	8812      	ldrh	r2, [r2, #0]
 800f5d0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2284      	movs	r2, #132	@ 0x84
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2280      	movs	r2, #128	@ 0x80
 800f5de:	2122      	movs	r1, #34	@ 0x22
 800f5e0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d028      	beq.n	800f63c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5ee:	4a3e      	ldr	r2, [pc, #248]	@ (800f6e8 <UART_Start_Receive_DMA+0x134>)
 800f5f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5f6:	4a3d      	ldr	r2, [pc, #244]	@ (800f6ec <UART_Start_Receive_DMA+0x138>)
 800f5f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5fe:	4a3c      	ldr	r2, [pc, #240]	@ (800f6f0 <UART_Start_Receive_DMA+0x13c>)
 800f600:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f606:	2200      	movs	r2, #0
 800f608:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	3324      	adds	r3, #36	@ 0x24
 800f614:	0019      	movs	r1, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f61a:	001a      	movs	r2, r3
 800f61c:	1dbb      	adds	r3, r7, #6
 800f61e:	881b      	ldrh	r3, [r3, #0]
 800f620:	f7fa fa3a 	bl	8009a98 <HAL_DMA_Start_IT>
 800f624:	1e03      	subs	r3, r0, #0
 800f626:	d009      	beq.n	800f63c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2284      	movs	r2, #132	@ 0x84
 800f62c:	2110      	movs	r1, #16
 800f62e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2280      	movs	r2, #128	@ 0x80
 800f634:	2120      	movs	r1, #32
 800f636:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800f638:	2301      	movs	r3, #1
 800f63a:	e050      	b.n	800f6de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d019      	beq.n	800f678 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f644:	f3ef 8310 	mrs	r3, PRIMASK
 800f648:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800f64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f64e:	2301      	movs	r3, #1
 800f650:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f654:	f383 8810 	msr	PRIMASK, r3
}
 800f658:	46c0      	nop			@ (mov r8, r8)
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2180      	movs	r1, #128	@ 0x80
 800f666:	0049      	lsls	r1, r1, #1
 800f668:	430a      	orrs	r2, r1
 800f66a:	601a      	str	r2, [r3, #0]
 800f66c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f66e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f672:	f383 8810 	msr	PRIMASK, r3
}
 800f676:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f678:	f3ef 8310 	mrs	r3, PRIMASK
 800f67c:	613b      	str	r3, [r7, #16]
  return(result);
 800f67e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f680:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f682:	2301      	movs	r3, #1
 800f684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	f383 8810 	msr	PRIMASK, r3
}
 800f68c:	46c0      	nop			@ (mov r8, r8)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	689a      	ldr	r2, [r3, #8]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2101      	movs	r1, #1
 800f69a:	430a      	orrs	r2, r1
 800f69c:	609a      	str	r2, [r3, #8]
 800f69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	f383 8810 	msr	PRIMASK, r3
}
 800f6a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6aa:	f3ef 8310 	mrs	r3, PRIMASK
 800f6ae:	61fb      	str	r3, [r7, #28]
  return(result);
 800f6b0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	f383 8810 	msr	PRIMASK, r3
}
 800f6be:	46c0      	nop			@ (mov r8, r8)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	689a      	ldr	r2, [r3, #8]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2140      	movs	r1, #64	@ 0x40
 800f6cc:	430a      	orrs	r2, r1
 800f6ce:	609a      	str	r2, [r3, #8]
 800f6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d6:	f383 8810 	msr	PRIMASK, r3
}
 800f6da:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	0018      	movs	r0, r3
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	b010      	add	sp, #64	@ 0x40
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	46c0      	nop			@ (mov r8, r8)
 800f6e8:	0800f8c5 	.word	0x0800f8c5
 800f6ec:	0800f9f9 	.word	0x0800f9f9
 800f6f0:	0800fa41 	.word	0x0800fa41

0800f6f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f700:	60bb      	str	r3, [r7, #8]
  return(result);
 800f702:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f704:	617b      	str	r3, [r7, #20]
 800f706:	2301      	movs	r3, #1
 800f708:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f383 8810 	msr	PRIMASK, r3
}
 800f710:	46c0      	nop			@ (mov r8, r8)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	21c0      	movs	r1, #192	@ 0xc0
 800f71e:	438a      	bics	r2, r1
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	f383 8810 	msr	PRIMASK, r3
}
 800f72c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2220      	movs	r2, #32
 800f732:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f734:	46c0      	nop			@ (mov r8, r8)
 800f736:	46bd      	mov	sp, r7
 800f738:	b006      	add	sp, #24
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08e      	sub	sp, #56	@ 0x38
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f744:	f3ef 8310 	mrs	r3, PRIMASK
 800f748:	617b      	str	r3, [r7, #20]
  return(result);
 800f74a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f74e:	2301      	movs	r3, #1
 800f750:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	f383 8810 	msr	PRIMASK, r3
}
 800f758:	46c0      	nop			@ (mov r8, r8)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4926      	ldr	r1, [pc, #152]	@ (800f800 <UART_EndRxTransfer+0xc4>)
 800f766:	400a      	ands	r2, r1
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f76c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	f383 8810 	msr	PRIMASK, r3
}
 800f774:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f776:	f3ef 8310 	mrs	r3, PRIMASK
 800f77a:	623b      	str	r3, [r7, #32]
  return(result);
 800f77c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f77e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f780:	2301      	movs	r3, #1
 800f782:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f786:	f383 8810 	msr	PRIMASK, r3
}
 800f78a:	46c0      	nop			@ (mov r8, r8)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689a      	ldr	r2, [r3, #8]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2101      	movs	r1, #1
 800f798:	438a      	bics	r2, r1
 800f79a:	609a      	str	r2, [r3, #8]
 800f79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f79e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a2:	f383 8810 	msr	PRIMASK, r3
}
 800f7a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d118      	bne.n	800f7e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800f7b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f7b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f383 8810 	msr	PRIMASK, r3
}
 800f7c4:	46c0      	nop			@ (mov r8, r8)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2110      	movs	r1, #16
 800f7d2:	438a      	bics	r2, r1
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	f383 8810 	msr	PRIMASK, r3
}
 800f7e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2280      	movs	r2, #128	@ 0x80
 800f7e6:	2120      	movs	r1, #32
 800f7e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f7f6:	46c0      	nop			@ (mov r8, r8)
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	b00e      	add	sp, #56	@ 0x38
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	46c0      	nop			@ (mov r8, r8)
 800f800:	fffffedf 	.word	0xfffffedf

0800f804 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08c      	sub	sp, #48	@ 0x30
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f810:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2220      	movs	r2, #32
 800f81a:	4013      	ands	r3, r2
 800f81c:	d135      	bne.n	800f88a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800f81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f820:	2252      	movs	r2, #82	@ 0x52
 800f822:	2100      	movs	r1, #0
 800f824:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f826:	f3ef 8310 	mrs	r3, PRIMASK
 800f82a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f82c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f82e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f830:	2301      	movs	r3, #1
 800f832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	f383 8810 	msr	PRIMASK, r3
}
 800f83a:	46c0      	nop			@ (mov r8, r8)
 800f83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	689a      	ldr	r2, [r3, #8]
 800f842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2180      	movs	r1, #128	@ 0x80
 800f848:	438a      	bics	r2, r1
 800f84a:	609a      	str	r2, [r3, #8]
 800f84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f84e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	f383 8810 	msr	PRIMASK, r3
}
 800f856:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f858:	f3ef 8310 	mrs	r3, PRIMASK
 800f85c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f85e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f860:	627b      	str	r3, [r7, #36]	@ 0x24
 800f862:	2301      	movs	r3, #1
 800f864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	f383 8810 	msr	PRIMASK, r3
}
 800f86c:	46c0      	nop			@ (mov r8, r8)
 800f86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2140      	movs	r1, #64	@ 0x40
 800f87a:	430a      	orrs	r2, r1
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f880:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f882:	6a3b      	ldr	r3, [r7, #32]
 800f884:	f383 8810 	msr	PRIMASK, r3
}
 800f888:	e006      	b.n	800f898 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800f88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88c:	228c      	movs	r2, #140	@ 0x8c
 800f88e:	589b      	ldr	r3, [r3, r2]
 800f890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f892:	0010      	movs	r0, r2
 800f894:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f896:	46c0      	nop			@ (mov r8, r8)
 800f898:	46c0      	nop			@ (mov r8, r8)
 800f89a:	46bd      	mov	sp, r7
 800f89c:	b00c      	add	sp, #48	@ 0x30
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2288      	movs	r2, #136	@ 0x88
 800f8b2:	589b      	ldr	r3, [r3, r2]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	0010      	movs	r0, r2
 800f8b8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8ba:	46c0      	nop			@ (mov r8, r8)
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	b004      	add	sp, #16
 800f8c0:	bd80      	pop	{r7, pc}
	...

0800f8c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b094      	sub	sp, #80	@ 0x50
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	2220      	movs	r2, #32
 800f8da:	4013      	ands	r3, r2
 800f8dc:	d16f      	bne.n	800f9be <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800f8de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8e0:	225a      	movs	r2, #90	@ 0x5a
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8e6:	f3ef 8310 	mrs	r3, PRIMASK
 800f8ea:	61bb      	str	r3, [r7, #24]
  return(result);
 800f8ec:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	f383 8810 	msr	PRIMASK, r3
}
 800f8fa:	46c0      	nop			@ (mov r8, r8)
 800f8fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	493b      	ldr	r1, [pc, #236]	@ (800f9f4 <UART_DMAReceiveCplt+0x130>)
 800f908:	400a      	ands	r2, r1
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f90e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f910:	6a3b      	ldr	r3, [r7, #32]
 800f912:	f383 8810 	msr	PRIMASK, r3
}
 800f916:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f918:	f3ef 8310 	mrs	r3, PRIMASK
 800f91c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800f91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f920:	647b      	str	r3, [r7, #68]	@ 0x44
 800f922:	2301      	movs	r3, #1
 800f924:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f928:	f383 8810 	msr	PRIMASK, r3
}
 800f92c:	46c0      	nop			@ (mov r8, r8)
 800f92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	689a      	ldr	r2, [r3, #8]
 800f934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2101      	movs	r1, #1
 800f93a:	438a      	bics	r2, r1
 800f93c:	609a      	str	r2, [r3, #8]
 800f93e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f944:	f383 8810 	msr	PRIMASK, r3
}
 800f948:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f94a:	f3ef 8310 	mrs	r3, PRIMASK
 800f94e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f952:	643b      	str	r3, [r7, #64]	@ 0x40
 800f954:	2301      	movs	r3, #1
 800f956:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f95a:	f383 8810 	msr	PRIMASK, r3
}
 800f95e:	46c0      	nop			@ (mov r8, r8)
 800f960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	689a      	ldr	r2, [r3, #8]
 800f966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2140      	movs	r1, #64	@ 0x40
 800f96c:	438a      	bics	r2, r1
 800f96e:	609a      	str	r2, [r3, #8]
 800f970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f972:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f976:	f383 8810 	msr	PRIMASK, r3
}
 800f97a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f97c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f97e:	2280      	movs	r2, #128	@ 0x80
 800f980:	2120      	movs	r1, #32
 800f982:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d118      	bne.n	800f9be <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f98c:	f3ef 8310 	mrs	r3, PRIMASK
 800f990:	60fb      	str	r3, [r7, #12]
  return(result);
 800f992:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f996:	2301      	movs	r3, #1
 800f998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	f383 8810 	msr	PRIMASK, r3
}
 800f9a0:	46c0      	nop			@ (mov r8, r8)
 800f9a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2110      	movs	r1, #16
 800f9ae:	438a      	bics	r2, r1
 800f9b0:	601a      	str	r2, [r3, #0]
 800f9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f383 8810 	msr	PRIMASK, r3
}
 800f9bc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f9be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d109      	bne.n	800f9e0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800f9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ce:	22ac      	movs	r2, #172	@ 0xac
 800f9d0:	589b      	ldr	r3, [r3, r2]
 800f9d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f9d4:	2158      	movs	r1, #88	@ 0x58
 800f9d6:	5a51      	ldrh	r1, [r2, r1]
 800f9d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f9da:	0010      	movs	r0, r2
 800f9dc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9de:	e005      	b.n	800f9ec <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800f9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9e2:	2294      	movs	r2, #148	@ 0x94
 800f9e4:	589b      	ldr	r3, [r3, r2]
 800f9e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f9e8:	0010      	movs	r0, r2
 800f9ea:	4798      	blx	r3
}
 800f9ec:	46c0      	nop			@ (mov r8, r8)
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	b014      	add	sp, #80	@ 0x50
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	fffffeff 	.word	0xfffffeff

0800f9f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa04:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d10b      	bne.n	800fa2c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	22ac      	movs	r2, #172	@ 0xac
 800fa18:	589b      	ldr	r3, [r3, r2]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	2158      	movs	r1, #88	@ 0x58
 800fa1e:	5a52      	ldrh	r2, [r2, r1]
 800fa20:	0852      	lsrs	r2, r2, #1
 800fa22:	b291      	uxth	r1, r2
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	0010      	movs	r0, r2
 800fa28:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa2a:	e005      	b.n	800fa38 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2290      	movs	r2, #144	@ 0x90
 800fa30:	589b      	ldr	r3, [r3, r2]
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	0010      	movs	r0, r2
 800fa36:	4798      	blx	r3
}
 800fa38:	46c0      	nop			@ (mov r8, r8)
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	b004      	add	sp, #16
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa4c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa52:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	2280      	movs	r2, #128	@ 0x80
 800fa58:	589b      	ldr	r3, [r3, r2]
 800fa5a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	2280      	movs	r2, #128	@ 0x80
 800fa64:	4013      	ands	r3, r2
 800fa66:	2b80      	cmp	r3, #128	@ 0x80
 800fa68:	d10a      	bne.n	800fa80 <UART_DMAError+0x40>
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	2b21      	cmp	r3, #33	@ 0x21
 800fa6e:	d107      	bne.n	800fa80 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	2252      	movs	r2, #82	@ 0x52
 800fa74:	2100      	movs	r1, #0
 800fa76:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	0018      	movs	r0, r3
 800fa7c:	f7ff fe3a 	bl	800f6f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	689b      	ldr	r3, [r3, #8]
 800fa86:	2240      	movs	r2, #64	@ 0x40
 800fa88:	4013      	ands	r3, r2
 800fa8a:	2b40      	cmp	r3, #64	@ 0x40
 800fa8c:	d10a      	bne.n	800faa4 <UART_DMAError+0x64>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2b22      	cmp	r3, #34	@ 0x22
 800fa92:	d107      	bne.n	800faa4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	225a      	movs	r2, #90	@ 0x5a
 800fa98:	2100      	movs	r1, #0
 800fa9a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	0018      	movs	r0, r3
 800faa0:	f7ff fe4c 	bl	800f73c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	2284      	movs	r2, #132	@ 0x84
 800faa8:	589b      	ldr	r3, [r3, r2]
 800faaa:	2210      	movs	r2, #16
 800faac:	431a      	orrs	r2, r3
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2184      	movs	r1, #132	@ 0x84
 800fab2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	2298      	movs	r2, #152	@ 0x98
 800fab8:	589b      	ldr	r3, [r3, r2]
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	0010      	movs	r0, r2
 800fabe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fac0:	46c0      	nop			@ (mov r8, r8)
 800fac2:	46bd      	mov	sp, r7
 800fac4:	b006      	add	sp, #24
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	225a      	movs	r2, #90	@ 0x5a
 800fada:	2100      	movs	r1, #0
 800fadc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2252      	movs	r2, #82	@ 0x52
 800fae2:	2100      	movs	r1, #0
 800fae4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2298      	movs	r2, #152	@ 0x98
 800faea:	589b      	ldr	r3, [r3, r2]
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	0010      	movs	r0, r2
 800faf0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800faf2:	46c0      	nop			@ (mov r8, r8)
 800faf4:	46bd      	mov	sp, r7
 800faf6:	b004      	add	sp, #16
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b086      	sub	sp, #24
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb02:	f3ef 8310 	mrs	r3, PRIMASK
 800fb06:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb08:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb0a:	617b      	str	r3, [r7, #20]
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f383 8810 	msr	PRIMASK, r3
}
 800fb16:	46c0      	nop			@ (mov r8, r8)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2140      	movs	r1, #64	@ 0x40
 800fb24:	438a      	bics	r2, r1
 800fb26:	601a      	str	r2, [r3, #0]
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	f383 8810 	msr	PRIMASK, r3
}
 800fb32:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2220      	movs	r2, #32
 800fb38:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	228c      	movs	r2, #140	@ 0x8c
 800fb44:	589b      	ldr	r3, [r3, r2]
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	0010      	movs	r0, r2
 800fb4a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb4c:	46c0      	nop			@ (mov r8, r8)
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	b006      	add	sp, #24
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb5c:	46c0      	nop			@ (mov r8, r8)
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	b002      	add	sp, #8
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fb6c:	4b09      	ldr	r3, [pc, #36]	@ (800fb94 <USB_DisableGlobalInt+0x30>)
 800fb6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2240      	movs	r2, #64	@ 0x40
 800fb74:	5a9b      	ldrh	r3, [r3, r2]
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	b292      	uxth	r2, r2
 800fb7c:	43d2      	mvns	r2, r2
 800fb7e:	b292      	uxth	r2, r2
 800fb80:	4013      	ands	r3, r2
 800fb82:	b299      	uxth	r1, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2240      	movs	r2, #64	@ 0x40
 800fb88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	0018      	movs	r0, r3
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	b004      	add	sp, #16
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	0000bf80 	.word	0x0000bf80

0800fb98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fb98:	b084      	sub	sp, #16
 800fb9a:	b590      	push	{r4, r7, lr}
 800fb9c:	b083      	sub	sp, #12
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
 800fba2:	2004      	movs	r0, #4
 800fba4:	2410      	movs	r4, #16
 800fba6:	1900      	adds	r0, r0, r4
 800fba8:	2408      	movs	r4, #8
 800fbaa:	46a4      	mov	ip, r4
 800fbac:	44bc      	add	ip, r7
 800fbae:	4460      	add	r0, ip
 800fbb0:	6001      	str	r1, [r0, #0]
 800fbb2:	6042      	str	r2, [r0, #4]
 800fbb4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2240      	movs	r2, #64	@ 0x40
 800fbba:	2101      	movs	r1, #1
 800fbbc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2240      	movs	r2, #64	@ 0x40
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2244      	movs	r2, #68	@ 0x44
 800fbca:	2100      	movs	r1, #0
 800fbcc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2250      	movs	r2, #80	@ 0x50
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	0018      	movs	r0, r3
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	b003      	add	sp, #12
 800fbde:	bc90      	pop	{r4, r7}
 800fbe0:	bc08      	pop	{r3}
 800fbe2:	b004      	add	sp, #16
 800fbe4:	4718      	bx	r3
	...

0800fbe8 <arm_split_rfft_q15>:
 800fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbea:	4644      	mov	r4, r8
 800fbec:	465f      	mov	r7, fp
 800fbee:	4656      	mov	r6, sl
 800fbf0:	464d      	mov	r5, r9
 800fbf2:	b4f0      	push	{r4, r5, r6, r7}
 800fbf4:	b089      	sub	sp, #36	@ 0x24
 800fbf6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fbf8:	9007      	str	r0, [sp, #28]
 800fbfa:	00a4      	lsls	r4, r4, #2
 800fbfc:	46a2      	mov	sl, r4
 800fbfe:	449a      	add	sl, r3
 800fc00:	0003      	movs	r3, r0
 800fc02:	46a3      	mov	fp, r4
 800fc04:	3304      	adds	r3, #4
 800fc06:	4699      	mov	r9, r3
 800fc08:	4b45      	ldr	r3, [pc, #276]	@ (800fd20 <arm_split_rfft_q15+0x138>)
 800fc0a:	4493      	add	fp, r2
 800fc0c:	18cb      	adds	r3, r1, r3
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	0002      	movs	r2, r0
 800fc12:	0018      	movs	r0, r3
 800fc14:	9306      	str	r3, [sp, #24]
 800fc16:	4684      	mov	ip, r0
 800fc18:	0013      	movs	r3, r2
 800fc1a:	4463      	add	r3, ip
 800fc1c:	9404      	str	r4, [sp, #16]
 800fc1e:	4698      	mov	r8, r3
 800fc20:	2901      	cmp	r1, #1
 800fc22:	d95d      	bls.n	800fce0 <arm_split_rfft_q15+0xf8>
 800fc24:	9a07      	ldr	r2, [sp, #28]
 800fc26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc28:	4694      	mov	ip, r2
 800fc2a:	00c9      	lsls	r1, r1, #3
 800fc2c:	3904      	subs	r1, #4
 800fc2e:	1d1d      	adds	r5, r3, #4
 800fc30:	1858      	adds	r0, r3, r1
 800fc32:	9b06      	ldr	r3, [sp, #24]
 800fc34:	464e      	mov	r6, r9
 800fc36:	3304      	adds	r3, #4
 800fc38:	4463      	add	r3, ip
 800fc3a:	46c1      	mov	r9, r8
 800fc3c:	46ac      	mov	ip, r5
 800fc3e:	4680      	mov	r8, r0
 800fc40:	465d      	mov	r5, fp
 800fc42:	4650      	mov	r0, sl
 800fc44:	9305      	str	r3, [sp, #20]
 800fc46:	2200      	movs	r2, #0
 800fc48:	5eb3      	ldrsh	r3, [r6, r2]
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	5e6a      	ldrsh	r2, [r5, r1]
 800fc4e:	001c      	movs	r4, r3
 800fc50:	9301      	str	r3, [sp, #4]
 800fc52:	9202      	str	r2, [sp, #8]
 800fc54:	2102      	movs	r1, #2
 800fc56:	5e73      	ldrsh	r3, [r6, r1]
 800fc58:	4354      	muls	r4, r2
 800fc5a:	2102      	movs	r1, #2
 800fc5c:	5e6a      	ldrsh	r2, [r5, r1]
 800fc5e:	4649      	mov	r1, r9
 800fc60:	2700      	movs	r7, #0
 800fc62:	5fc9      	ldrsh	r1, [r1, r7]
 800fc64:	9203      	str	r2, [sp, #12]
 800fc66:	468b      	mov	fp, r1
 800fc68:	2700      	movs	r7, #0
 800fc6a:	5fc1      	ldrsh	r1, [r0, r7]
 800fc6c:	435a      	muls	r2, r3
 800fc6e:	468a      	mov	sl, r1
 800fc70:	4649      	mov	r1, r9
 800fc72:	1aa4      	subs	r4, r4, r2
 800fc74:	2702      	movs	r7, #2
 800fc76:	5fcf      	ldrsh	r7, [r1, r7]
 800fc78:	2102      	movs	r1, #2
 800fc7a:	5e42      	ldrsh	r2, [r0, r1]
 800fc7c:	4651      	mov	r1, sl
 800fc7e:	9200      	str	r2, [sp, #0]
 800fc80:	465a      	mov	r2, fp
 800fc82:	434a      	muls	r2, r1
 800fc84:	4659      	mov	r1, fp
 800fc86:	1914      	adds	r4, r2, r4
 800fc88:	9a00      	ldr	r2, [sp, #0]
 800fc8a:	3604      	adds	r6, #4
 800fc8c:	437a      	muls	r2, r7
 800fc8e:	18a2      	adds	r2, r4, r2
 800fc90:	9c00      	ldr	r4, [sp, #0]
 800fc92:	1412      	asrs	r2, r2, #16
 800fc94:	434c      	muls	r4, r1
 800fc96:	0021      	movs	r1, r4
 800fc98:	4654      	mov	r4, sl
 800fc9a:	4367      	muls	r7, r4
 800fc9c:	9c02      	ldr	r4, [sp, #8]
 800fc9e:	1bc9      	subs	r1, r1, r7
 800fca0:	4363      	muls	r3, r4
 800fca2:	1859      	adds	r1, r3, r1
 800fca4:	2304      	movs	r3, #4
 800fca6:	425b      	negs	r3, r3
 800fca8:	469a      	mov	sl, r3
 800fcaa:	4663      	mov	r3, ip
 800fcac:	9f01      	ldr	r7, [sp, #4]
 800fcae:	801a      	strh	r2, [r3, #0]
 800fcb0:	9b03      	ldr	r3, [sp, #12]
 800fcb2:	44d1      	add	r9, sl
 800fcb4:	435f      	muls	r7, r3
 800fcb6:	4663      	mov	r3, ip
 800fcb8:	1879      	adds	r1, r7, r1
 800fcba:	1409      	asrs	r1, r1, #16
 800fcbc:	8059      	strh	r1, [r3, #2]
 800fcbe:	4643      	mov	r3, r8
 800fcc0:	801a      	strh	r2, [r3, #0]
 800fcc2:	9a04      	ldr	r2, [sp, #16]
 800fcc4:	4249      	negs	r1, r1
 800fcc6:	4692      	mov	sl, r2
 800fcc8:	8059      	strh	r1, [r3, #2]
 800fcca:	2304      	movs	r3, #4
 800fccc:	4450      	add	r0, sl
 800fcce:	4455      	add	r5, sl
 800fcd0:	469a      	mov	sl, r3
 800fcd2:	3b08      	subs	r3, #8
 800fcd4:	44d4      	add	ip, sl
 800fcd6:	469a      	mov	sl, r3
 800fcd8:	9b05      	ldr	r3, [sp, #20]
 800fcda:	44d0      	add	r8, sl
 800fcdc:	429e      	cmp	r6, r3
 800fcde:	d1b2      	bne.n	800fc46 <arm_split_rfft_q15+0x5e>
 800fce0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fce2:	9b06      	ldr	r3, [sp, #24]
 800fce4:	4694      	mov	ip, r2
 800fce6:	4463      	add	r3, ip
 800fce8:	0019      	movs	r1, r3
 800fcea:	9807      	ldr	r0, [sp, #28]
 800fcec:	2200      	movs	r2, #0
 800fcee:	5e83      	ldrsh	r3, [r0, r2]
 800fcf0:	2402      	movs	r4, #2
 800fcf2:	5f02      	ldrsh	r2, [r0, r4]
 800fcf4:	1a9b      	subs	r3, r3, r2
 800fcf6:	105b      	asrs	r3, r3, #1
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	808b      	strh	r3, [r1, #4]
 800fcfc:	0003      	movs	r3, r0
 800fcfe:	80ca      	strh	r2, [r1, #6]
 800fd00:	2000      	movs	r0, #0
 800fd02:	5e19      	ldrsh	r1, [r3, r0]
 800fd04:	2002      	movs	r0, #2
 800fd06:	5e1b      	ldrsh	r3, [r3, r0]
 800fd08:	18cb      	adds	r3, r1, r3
 800fd0a:	4661      	mov	r1, ip
 800fd0c:	105b      	asrs	r3, r3, #1
 800fd0e:	800b      	strh	r3, [r1, #0]
 800fd10:	804a      	strh	r2, [r1, #2]
 800fd12:	b009      	add	sp, #36	@ 0x24
 800fd14:	bc3c      	pop	{r2, r3, r4, r5}
 800fd16:	4690      	mov	r8, r2
 800fd18:	4699      	mov	r9, r3
 800fd1a:	46a2      	mov	sl, r4
 800fd1c:	46ab      	mov	fp, r5
 800fd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd20:	3fffffff 	.word	0x3fffffff

0800fd24 <arm_rfft_q15>:
 800fd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd26:	465f      	mov	r7, fp
 800fd28:	4656      	mov	r6, sl
 800fd2a:	464d      	mov	r5, r9
 800fd2c:	4644      	mov	r4, r8
 800fd2e:	b4f0      	push	{r4, r5, r6, r7}
 800fd30:	6943      	ldr	r3, [r0, #20]
 800fd32:	b08b      	sub	sp, #44	@ 0x2c
 800fd34:	9308      	str	r3, [sp, #32]
 800fd36:	6803      	ldr	r3, [r0, #0]
 800fd38:	9207      	str	r2, [sp, #28]
 800fd3a:	085b      	lsrs	r3, r3, #1
 800fd3c:	9302      	str	r3, [sp, #8]
 800fd3e:	7902      	ldrb	r2, [r0, #4]
 800fd40:	0007      	movs	r7, r0
 800fd42:	000e      	movs	r6, r1
 800fd44:	2a01      	cmp	r2, #1
 800fd46:	d013      	beq.n	800fd70 <arm_rfft_q15+0x4c>
 800fd48:	7943      	ldrb	r3, [r0, #5]
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	9808      	ldr	r0, [sp, #32]
 800fd4e:	f000 fa9d 	bl	801028c <arm_cfft_q15>
 800fd52:	cf0e      	ldmia	r7!, {r1, r2, r3}
 800fd54:	9101      	str	r1, [sp, #4]
 800fd56:	9907      	ldr	r1, [sp, #28]
 800fd58:	0030      	movs	r0, r6
 800fd5a:	9100      	str	r1, [sp, #0]
 800fd5c:	9902      	ldr	r1, [sp, #8]
 800fd5e:	f7ff ff43 	bl	800fbe8 <arm_split_rfft_q15>
 800fd62:	b00b      	add	sp, #44	@ 0x2c
 800fd64:	bc3c      	pop	{r2, r3, r4, r5}
 800fd66:	4690      	mov	r8, r2
 800fd68:	4699      	mov	r9, r3
 800fd6a:	46a2      	mov	sl, r4
 800fd6c:	46ab      	mov	fp, r5
 800fd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd70:	0019      	movs	r1, r3
 800fd72:	68c3      	ldr	r3, [r0, #12]
 800fd74:	6882      	ldr	r2, [r0, #8]
 800fd76:	469b      	mov	fp, r3
 800fd78:	6903      	ldr	r3, [r0, #16]
 800fd7a:	4698      	mov	r8, r3
 800fd7c:	008b      	lsls	r3, r1, #2
 800fd7e:	18f0      	adds	r0, r6, r3
 800fd80:	2900      	cmp	r1, #0
 800fd82:	d060      	beq.n	800fe46 <arm_rfft_q15+0x122>
 800fd84:	46b4      	mov	ip, r6
 800fd86:	4646      	mov	r6, r8
 800fd88:	0093      	lsls	r3, r2, #2
 800fd8a:	9a07      	ldr	r2, [sp, #28]
 800fd8c:	9306      	str	r3, [sp, #24]
 800fd8e:	9709      	str	r7, [sp, #36]	@ 0x24
 800fd90:	2100      	movs	r1, #0
 800fd92:	5e43      	ldrsh	r3, [r0, r1]
 800fd94:	3804      	subs	r0, #4
 800fd96:	4698      	mov	r8, r3
 800fd98:	4645      	mov	r5, r8
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	5e73      	ldrsh	r3, [r6, r1]
 800fd9e:	2406      	movs	r4, #6
 800fda0:	5f01      	ldrsh	r1, [r0, r4]
 800fda2:	9303      	str	r3, [sp, #12]
 800fda4:	435d      	muls	r5, r3
 800fda6:	2402      	movs	r4, #2
 800fda8:	5f33      	ldrsh	r3, [r6, r4]
 800fdaa:	4664      	mov	r4, ip
 800fdac:	9104      	str	r1, [sp, #16]
 800fdae:	4359      	muls	r1, r3
 800fdb0:	1a6d      	subs	r5, r5, r1
 800fdb2:	9505      	str	r5, [sp, #20]
 800fdb4:	2500      	movs	r5, #0
 800fdb6:	5f64      	ldrsh	r4, [r4, r5]
 800fdb8:	46a1      	mov	r9, r4
 800fdba:	465c      	mov	r4, fp
 800fdbc:	2500      	movs	r5, #0
 800fdbe:	5f64      	ldrsh	r4, [r4, r5]
 800fdc0:	46a2      	mov	sl, r4
 800fdc2:	4664      	mov	r4, ip
 800fdc4:	2102      	movs	r1, #2
 800fdc6:	5e61      	ldrsh	r1, [r4, r1]
 800fdc8:	465c      	mov	r4, fp
 800fdca:	4655      	mov	r5, sl
 800fdcc:	2702      	movs	r7, #2
 800fdce:	5fe7      	ldrsh	r7, [r4, r7]
 800fdd0:	464c      	mov	r4, r9
 800fdd2:	436c      	muls	r4, r5
 800fdd4:	9d05      	ldr	r5, [sp, #20]
 800fdd6:	1965      	adds	r5, r4, r5
 800fdd8:	003c      	movs	r4, r7
 800fdda:	434c      	muls	r4, r1
 800fddc:	192c      	adds	r4, r5, r4
 800fdde:	4655      	mov	r5, sl
 800fde0:	4369      	muls	r1, r5
 800fde2:	464d      	mov	r5, r9
 800fde4:	436f      	muls	r7, r5
 800fde6:	4645      	mov	r5, r8
 800fde8:	436b      	muls	r3, r5
 800fdea:	2504      	movs	r5, #4
 800fdec:	46a8      	mov	r8, r5
 800fdee:	1bc9      	subs	r1, r1, r7
 800fdf0:	1ac9      	subs	r1, r1, r3
 800fdf2:	9f03      	ldr	r7, [sp, #12]
 800fdf4:	9b04      	ldr	r3, [sp, #16]
 800fdf6:	44c4      	add	ip, r8
 800fdf8:	435f      	muls	r7, r3
 800fdfa:	1bc9      	subs	r1, r1, r7
 800fdfc:	1409      	asrs	r1, r1, #16
 800fdfe:	8051      	strh	r1, [r2, #2]
 800fe00:	9906      	ldr	r1, [sp, #24]
 800fe02:	9b02      	ldr	r3, [sp, #8]
 800fe04:	4688      	mov	r8, r1
 800fe06:	1424      	asrs	r4, r4, #16
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	8014      	strh	r4, [r2, #0]
 800fe0c:	4446      	add	r6, r8
 800fe0e:	44c3      	add	fp, r8
 800fe10:	9302      	str	r3, [sp, #8]
 800fe12:	3204      	adds	r2, #4
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1bb      	bne.n	800fd90 <arm_rfft_q15+0x6c>
 800fe18:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800fe1a:	793a      	ldrb	r2, [r7, #4]
 800fe1c:	9c07      	ldr	r4, [sp, #28]
 800fe1e:	797b      	ldrb	r3, [r7, #5]
 800fe20:	0021      	movs	r1, r4
 800fe22:	9808      	ldr	r0, [sp, #32]
 800fe24:	f000 fa32 	bl	801028c <arm_cfft_q15>
 800fe28:	683a      	ldr	r2, [r7, #0]
 800fe2a:	0023      	movs	r3, r4
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	2a00      	cmp	r2, #0
 800fe30:	d097      	beq.n	800fd62 <arm_rfft_q15+0x3e>
 800fe32:	2000      	movs	r0, #0
 800fe34:	5e1a      	ldrsh	r2, [r3, r0]
 800fe36:	3101      	adds	r1, #1
 800fe38:	0052      	lsls	r2, r2, #1
 800fe3a:	801a      	strh	r2, [r3, #0]
 800fe3c:	683a      	ldr	r2, [r7, #0]
 800fe3e:	3302      	adds	r3, #2
 800fe40:	428a      	cmp	r2, r1
 800fe42:	d8f6      	bhi.n	800fe32 <arm_rfft_q15+0x10e>
 800fe44:	e78d      	b.n	800fd62 <arm_rfft_q15+0x3e>
 800fe46:	2201      	movs	r2, #1
 800fe48:	e7e8      	b.n	800fe1c <arm_rfft_q15+0xf8>
 800fe4a:	46c0      	nop			@ (mov r8, r8)

0800fe4c <arm_rfft_init_q15>:
 800fe4c:	b510      	push	{r4, lr}
 800fe4e:	7143      	strb	r3, [r0, #5]
 800fe50:	2380      	movs	r3, #128	@ 0x80
 800fe52:	4c31      	ldr	r4, [pc, #196]	@ (800ff18 <arm_rfft_init_q15+0xcc>)
 800fe54:	0409      	lsls	r1, r1, #16
 800fe56:	60c4      	str	r4, [r0, #12]
 800fe58:	4c30      	ldr	r4, [pc, #192]	@ (800ff1c <arm_rfft_init_q15+0xd0>)
 800fe5a:	0c09      	lsrs	r1, r1, #16
 800fe5c:	6001      	str	r1, [r0, #0]
 800fe5e:	6104      	str	r4, [r0, #16]
 800fe60:	7102      	strb	r2, [r0, #4]
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	4299      	cmp	r1, r3
 800fe66:	d047      	beq.n	800fef8 <arm_rfft_init_q15+0xac>
 800fe68:	d912      	bls.n	800fe90 <arm_rfft_init_q15+0x44>
 800fe6a:	2380      	movs	r3, #128	@ 0x80
 800fe6c:	011b      	lsls	r3, r3, #4
 800fe6e:	4299      	cmp	r1, r3
 800fe70:	d048      	beq.n	800ff04 <arm_rfft_init_q15+0xb8>
 800fe72:	d931      	bls.n	800fed8 <arm_rfft_init_q15+0x8c>
 800fe74:	2380      	movs	r3, #128	@ 0x80
 800fe76:	015b      	lsls	r3, r3, #5
 800fe78:	4299      	cmp	r1, r3
 800fe7a:	d01e      	beq.n	800feba <arm_rfft_init_q15+0x6e>
 800fe7c:	2380      	movs	r3, #128	@ 0x80
 800fe7e:	019b      	lsls	r3, r3, #6
 800fe80:	4299      	cmp	r1, r3
 800fe82:	d145      	bne.n	800ff10 <arm_rfft_init_q15+0xc4>
 800fe84:	2301      	movs	r3, #1
 800fe86:	6083      	str	r3, [r0, #8]
 800fe88:	4b25      	ldr	r3, [pc, #148]	@ (800ff20 <arm_rfft_init_q15+0xd4>)
 800fe8a:	6143      	str	r3, [r0, #20]
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	bd10      	pop	{r4, pc}
 800fe90:	2940      	cmp	r1, #64	@ 0x40
 800fe92:	d02b      	beq.n	800feec <arm_rfft_init_q15+0xa0>
 800fe94:	d917      	bls.n	800fec6 <arm_rfft_init_q15+0x7a>
 800fe96:	2980      	cmp	r1, #128	@ 0x80
 800fe98:	d009      	beq.n	800feae <arm_rfft_init_q15+0x62>
 800fe9a:	2380      	movs	r3, #128	@ 0x80
 800fe9c:	005b      	lsls	r3, r3, #1
 800fe9e:	4299      	cmp	r1, r3
 800fea0:	d136      	bne.n	800ff10 <arm_rfft_init_q15+0xc4>
 800fea2:	2320      	movs	r3, #32
 800fea4:	6083      	str	r3, [r0, #8]
 800fea6:	4b1f      	ldr	r3, [pc, #124]	@ (800ff24 <arm_rfft_init_q15+0xd8>)
 800fea8:	6143      	str	r3, [r0, #20]
 800feaa:	2000      	movs	r0, #0
 800feac:	e7ef      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800feae:	2340      	movs	r3, #64	@ 0x40
 800feb0:	6083      	str	r3, [r0, #8]
 800feb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ff28 <arm_rfft_init_q15+0xdc>)
 800feb4:	6143      	str	r3, [r0, #20]
 800feb6:	2000      	movs	r0, #0
 800feb8:	e7e9      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800feba:	2302      	movs	r3, #2
 800febc:	6083      	str	r3, [r0, #8]
 800febe:	4b1b      	ldr	r3, [pc, #108]	@ (800ff2c <arm_rfft_init_q15+0xe0>)
 800fec0:	6143      	str	r3, [r0, #20]
 800fec2:	2000      	movs	r0, #0
 800fec4:	e7e3      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800fec6:	2920      	cmp	r1, #32
 800fec8:	d122      	bne.n	800ff10 <arm_rfft_init_q15+0xc4>
 800feca:	2380      	movs	r3, #128	@ 0x80
 800fecc:	005b      	lsls	r3, r3, #1
 800fece:	6083      	str	r3, [r0, #8]
 800fed0:	4b17      	ldr	r3, [pc, #92]	@ (800ff30 <arm_rfft_init_q15+0xe4>)
 800fed2:	6143      	str	r3, [r0, #20]
 800fed4:	2000      	movs	r0, #0
 800fed6:	e7da      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800fed8:	2380      	movs	r3, #128	@ 0x80
 800feda:	00db      	lsls	r3, r3, #3
 800fedc:	4299      	cmp	r1, r3
 800fede:	d117      	bne.n	800ff10 <arm_rfft_init_q15+0xc4>
 800fee0:	2308      	movs	r3, #8
 800fee2:	6083      	str	r3, [r0, #8]
 800fee4:	4b13      	ldr	r3, [pc, #76]	@ (800ff34 <arm_rfft_init_q15+0xe8>)
 800fee6:	6143      	str	r3, [r0, #20]
 800fee8:	2000      	movs	r0, #0
 800feea:	e7d0      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800feec:	2380      	movs	r3, #128	@ 0x80
 800feee:	6083      	str	r3, [r0, #8]
 800fef0:	4b11      	ldr	r3, [pc, #68]	@ (800ff38 <arm_rfft_init_q15+0xec>)
 800fef2:	6143      	str	r3, [r0, #20]
 800fef4:	2000      	movs	r0, #0
 800fef6:	e7ca      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800fef8:	2310      	movs	r3, #16
 800fefa:	6083      	str	r3, [r0, #8]
 800fefc:	4b0f      	ldr	r3, [pc, #60]	@ (800ff3c <arm_rfft_init_q15+0xf0>)
 800fefe:	6143      	str	r3, [r0, #20]
 800ff00:	2000      	movs	r0, #0
 800ff02:	e7c4      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800ff04:	2304      	movs	r3, #4
 800ff06:	6083      	str	r3, [r0, #8]
 800ff08:	4b0d      	ldr	r3, [pc, #52]	@ (800ff40 <arm_rfft_init_q15+0xf4>)
 800ff0a:	6143      	str	r3, [r0, #20]
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	e7be      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800ff10:	2001      	movs	r0, #1
 800ff12:	4240      	negs	r0, r0
 800ff14:	e7bb      	b.n	800fe8e <arm_rfft_init_q15+0x42>
 800ff16:	46c0      	nop			@ (mov r8, r8)
 800ff18:	0801542c 	.word	0x0801542c
 800ff1c:	0801942c 	.word	0x0801942c
 800ff20:	0801d48c 	.word	0x0801d48c
 800ff24:	0801d43c 	.word	0x0801d43c
 800ff28:	0801d46c 	.word	0x0801d46c
 800ff2c:	0801d47c 	.word	0x0801d47c
 800ff30:	0801d49c 	.word	0x0801d49c
 800ff34:	0801d44c 	.word	0x0801d44c
 800ff38:	0801d4ac 	.word	0x0801d4ac
 800ff3c:	0801d42c 	.word	0x0801d42c
 800ff40:	0801d45c 	.word	0x0801d45c

0800ff44 <arm_sqrt_q15>:
 800ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff46:	0004      	movs	r4, r0
 800ff48:	000f      	movs	r7, r1
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	dd56      	ble.n	800fffc <arm_sqrt_q15+0xb8>
 800ff4e:	f7f0 fb0d 	bl	800056c <__clzsi2>
 800ff52:	2601      	movs	r6, #1
 800ff54:	3811      	subs	r0, #17
 800ff56:	b285      	uxth	r5, r0
 800ff58:	402e      	ands	r6, r5
 800ff5a:	d046      	beq.n	800ffea <arm_sqrt_q15+0xa6>
 800ff5c:	1e6b      	subs	r3, r5, #1
 800ff5e:	409c      	lsls	r4, r3
 800ff60:	b224      	sxth	r4, r4
 800ff62:	0020      	movs	r0, r4
 800ff64:	f7f1 faf8 	bl	8001558 <__aeabi_i2f>
 800ff68:	21e0      	movs	r1, #224	@ 0xe0
 800ff6a:	0589      	lsls	r1, r1, #22
 800ff6c:	f7f0 ffdc 	bl	8000f28 <__aeabi_fmul>
 800ff70:	218d      	movs	r1, #141	@ 0x8d
 800ff72:	4b25      	ldr	r3, [pc, #148]	@ (8010008 <arm_sqrt_q15+0xc4>)
 800ff74:	1040      	asrs	r0, r0, #1
 800ff76:	1a18      	subs	r0, r3, r0
 800ff78:	05c9      	lsls	r1, r1, #23
 800ff7a:	f7f0 ffd5 	bl	8000f28 <__aeabi_fmul>
 800ff7e:	f7f1 facb 	bl	8001518 <__aeabi_f2iz>
 800ff82:	23c0      	movs	r3, #192	@ 0xc0
 800ff84:	b201      	sxth	r1, r0
 800ff86:	000a      	movs	r2, r1
 800ff88:	019b      	lsls	r3, r3, #6
 800ff8a:	469c      	mov	ip, r3
 800ff8c:	434a      	muls	r2, r1
 800ff8e:	13d2      	asrs	r2, r2, #15
 800ff90:	1060      	asrs	r0, r4, #1
 800ff92:	b212      	sxth	r2, r2
 800ff94:	4342      	muls	r2, r0
 800ff96:	13d2      	asrs	r2, r2, #15
 800ff98:	1a9a      	subs	r2, r3, r2
 800ff9a:	434a      	muls	r2, r1
 800ff9c:	13d2      	asrs	r2, r2, #15
 800ff9e:	0092      	lsls	r2, r2, #2
 800ffa0:	b212      	sxth	r2, r2
 800ffa2:	0013      	movs	r3, r2
 800ffa4:	4661      	mov	r1, ip
 800ffa6:	4353      	muls	r3, r2
 800ffa8:	13db      	asrs	r3, r3, #15
 800ffaa:	b21b      	sxth	r3, r3
 800ffac:	4343      	muls	r3, r0
 800ffae:	13db      	asrs	r3, r3, #15
 800ffb0:	1acb      	subs	r3, r1, r3
 800ffb2:	435a      	muls	r2, r3
 800ffb4:	13d2      	asrs	r2, r2, #15
 800ffb6:	0092      	lsls	r2, r2, #2
 800ffb8:	b213      	sxth	r3, r2
 800ffba:	001a      	movs	r2, r3
 800ffbc:	435a      	muls	r2, r3
 800ffbe:	13d2      	asrs	r2, r2, #15
 800ffc0:	b212      	sxth	r2, r2
 800ffc2:	4350      	muls	r0, r2
 800ffc4:	13c0      	asrs	r0, r0, #15
 800ffc6:	1a08      	subs	r0, r1, r0
 800ffc8:	4343      	muls	r3, r0
 800ffca:	13db      	asrs	r3, r3, #15
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	b21b      	sxth	r3, r3
 800ffd0:	4363      	muls	r3, r4
 800ffd2:	13db      	asrs	r3, r3, #15
 800ffd4:	b21b      	sxth	r3, r3
 800ffd6:	005b      	lsls	r3, r3, #1
 800ffd8:	b21b      	sxth	r3, r3
 800ffda:	2e00      	cmp	r6, #0
 800ffdc:	d108      	bne.n	800fff0 <arm_sqrt_q15+0xac>
 800ffde:	b22d      	sxth	r5, r5
 800ffe0:	106d      	asrs	r5, r5, #1
 800ffe2:	412b      	asrs	r3, r5
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	803b      	strh	r3, [r7, #0]
 800ffe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffea:	40ac      	lsls	r4, r5
 800ffec:	b224      	sxth	r4, r4
 800ffee:	e7b8      	b.n	800ff62 <arm_sqrt_q15+0x1e>
 800fff0:	3d01      	subs	r5, #1
 800fff2:	0fe8      	lsrs	r0, r5, #31
 800fff4:	1945      	adds	r5, r0, r5
 800fff6:	106d      	asrs	r5, r5, #1
 800fff8:	412b      	asrs	r3, r5
 800fffa:	e7f3      	b.n	800ffe4 <arm_sqrt_q15+0xa0>
 800fffc:	2300      	movs	r3, #0
 800fffe:	2001      	movs	r0, #1
 8010000:	800b      	strh	r3, [r1, #0]
 8010002:	4240      	negs	r0, r0
 8010004:	e7f0      	b.n	800ffe8 <arm_sqrt_q15+0xa4>
 8010006:	46c0      	nop			@ (mov r8, r8)
 8010008:	5f3759df 	.word	0x5f3759df

0801000c <arm_abs_q15>:
 801000c:	b570      	push	{r4, r5, r6, lr}
 801000e:	2400      	movs	r4, #0
 8010010:	2a00      	cmp	r2, #0
 8010012:	d012      	beq.n	801003a <arm_abs_q15+0x2e>
 8010014:	4d0a      	ldr	r5, [pc, #40]	@ (8010040 <arm_abs_q15+0x34>)
 8010016:	e004      	b.n	8010022 <arm_abs_q15+0x16>
 8010018:	3a01      	subs	r2, #1
 801001a:	530b      	strh	r3, [r1, r4]
 801001c:	3402      	adds	r4, #2
 801001e:	2a00      	cmp	r2, #0
 8010020:	d00b      	beq.n	801003a <arm_abs_q15+0x2e>
 8010022:	5f03      	ldrsh	r3, [r0, r4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	dcf7      	bgt.n	8010018 <arm_abs_q15+0xc>
 8010028:	42ab      	cmp	r3, r5
 801002a:	d007      	beq.n	801003c <arm_abs_q15+0x30>
 801002c:	425b      	negs	r3, r3
 801002e:	b21b      	sxth	r3, r3
 8010030:	3a01      	subs	r2, #1
 8010032:	530b      	strh	r3, [r1, r4]
 8010034:	3402      	adds	r4, #2
 8010036:	2a00      	cmp	r2, #0
 8010038:	d1f3      	bne.n	8010022 <arm_abs_q15+0x16>
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	4b01      	ldr	r3, [pc, #4]	@ (8010044 <arm_abs_q15+0x38>)
 801003e:	e7eb      	b.n	8010018 <arm_abs_q15+0xc>
 8010040:	ffff8000 	.word	0xffff8000
 8010044:	00007fff 	.word	0x00007fff

08010048 <arm_cfft_radix4by2_q15>:
 8010048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801004a:	465f      	mov	r7, fp
 801004c:	4644      	mov	r4, r8
 801004e:	4656      	mov	r6, sl
 8010050:	464d      	mov	r5, r9
 8010052:	b4f0      	push	{r4, r5, r6, r7}
 8010054:	084b      	lsrs	r3, r1, #1
 8010056:	b087      	sub	sp, #28
 8010058:	9103      	str	r1, [sp, #12]
 801005a:	0007      	movs	r7, r0
 801005c:	9002      	str	r0, [sp, #8]
 801005e:	0014      	movs	r4, r2
 8010060:	9204      	str	r2, [sp, #16]
 8010062:	1e19      	subs	r1, r3, #0
 8010064:	9305      	str	r3, [sp, #20]
 8010066:	d06c      	beq.n	8010142 <arm_cfft_radix4by2_q15+0xfa>
 8010068:	008a      	lsls	r2, r1, #2
 801006a:	4691      	mov	r9, r2
 801006c:	0022      	movs	r2, r4
 801006e:	0003      	movs	r3, r0
 8010070:	444a      	add	r2, r9
 8010072:	4693      	mov	fp, r2
 8010074:	0025      	movs	r5, r4
 8010076:	4684      	mov	ip, r0
 8010078:	464e      	mov	r6, r9
 801007a:	3302      	adds	r3, #2
 801007c:	2100      	movs	r1, #0
 801007e:	5e6a      	ldrsh	r2, [r5, r1]
 8010080:	4690      	mov	r8, r2
 8010082:	2200      	movs	r2, #0
 8010084:	5eb8      	ldrsh	r0, [r7, r2]
 8010086:	2202      	movs	r2, #2
 8010088:	5ea9      	ldrsh	r1, [r5, r2]
 801008a:	1042      	asrs	r2, r0, #1
 801008c:	4691      	mov	r9, r2
 801008e:	5fb8      	ldrsh	r0, [r7, r6]
 8010090:	9101      	str	r1, [sp, #4]
 8010092:	1041      	asrs	r1, r0, #1
 8010094:	468a      	mov	sl, r1
 8010096:	464a      	mov	r2, r9
 8010098:	4452      	add	r2, sl
 801009a:	1052      	asrs	r2, r2, #1
 801009c:	803a      	strh	r2, [r7, #0]
 801009e:	000c      	movs	r4, r1
 80100a0:	2100      	movs	r1, #0
 80100a2:	5e5a      	ldrsh	r2, [r3, r1]
 80100a4:	5f99      	ldrsh	r1, [r3, r6]
 80100a6:	1052      	asrs	r2, r2, #1
 80100a8:	1049      	asrs	r1, r1, #1
 80100aa:	1888      	adds	r0, r1, r2
 80100ac:	1040      	asrs	r0, r0, #1
 80100ae:	8018      	strh	r0, [r3, #0]
 80100b0:	4648      	mov	r0, r9
 80100b2:	1a52      	subs	r2, r2, r1
 80100b4:	4641      	mov	r1, r8
 80100b6:	1b00      	subs	r0, r0, r4
 80100b8:	4341      	muls	r1, r0
 80100ba:	1409      	asrs	r1, r1, #16
 80100bc:	4689      	mov	r9, r1
 80100be:	9901      	ldr	r1, [sp, #4]
 80100c0:	3504      	adds	r5, #4
 80100c2:	4351      	muls	r1, r2
 80100c4:	1409      	asrs	r1, r1, #16
 80100c6:	4449      	add	r1, r9
 80100c8:	53b9      	strh	r1, [r7, r6]
 80100ca:	4641      	mov	r1, r8
 80100cc:	434a      	muls	r2, r1
 80100ce:	1411      	asrs	r1, r2, #16
 80100d0:	9a01      	ldr	r2, [sp, #4]
 80100d2:	3704      	adds	r7, #4
 80100d4:	4342      	muls	r2, r0
 80100d6:	1410      	asrs	r0, r2, #16
 80100d8:	1a0a      	subs	r2, r1, r0
 80100da:	539a      	strh	r2, [r3, r6]
 80100dc:	3304      	adds	r3, #4
 80100de:	455d      	cmp	r5, fp
 80100e0:	d1cc      	bne.n	801007c <arm_cfft_radix4by2_q15+0x34>
 80100e2:	9d05      	ldr	r5, [sp, #20]
 80100e4:	9c02      	ldr	r4, [sp, #8]
 80100e6:	9f04      	ldr	r7, [sp, #16]
 80100e8:	2302      	movs	r3, #2
 80100ea:	003a      	movs	r2, r7
 80100ec:	0029      	movs	r1, r5
 80100ee:	0020      	movs	r0, r4
 80100f0:	4666      	mov	r6, ip
 80100f2:	f000 f92f 	bl	8010354 <arm_radix4_butterfly_q15>
 80100f6:	46a4      	mov	ip, r4
 80100f8:	9903      	ldr	r1, [sp, #12]
 80100fa:	2302      	movs	r3, #2
 80100fc:	0048      	lsls	r0, r1, #1
 80100fe:	4460      	add	r0, ip
 8010100:	003a      	movs	r2, r7
 8010102:	0029      	movs	r1, r5
 8010104:	f000 f926 	bl	8010354 <arm_radix4_butterfly_q15>
 8010108:	46a4      	mov	ip, r4
 801010a:	00e8      	lsls	r0, r5, #3
 801010c:	4460      	add	r0, ip
 801010e:	2300      	movs	r3, #0
 8010110:	5ef4      	ldrsh	r4, [r6, r3]
 8010112:	2302      	movs	r3, #2
 8010114:	5ef1      	ldrsh	r1, [r6, r3]
 8010116:	2304      	movs	r3, #4
 8010118:	5ef2      	ldrsh	r2, [r6, r3]
 801011a:	2506      	movs	r5, #6
 801011c:	5f73      	ldrsh	r3, [r6, r5]
 801011e:	0064      	lsls	r4, r4, #1
 8010120:	0049      	lsls	r1, r1, #1
 8010122:	0052      	lsls	r2, r2, #1
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	8034      	strh	r4, [r6, #0]
 8010128:	8071      	strh	r1, [r6, #2]
 801012a:	80b2      	strh	r2, [r6, #4]
 801012c:	80f3      	strh	r3, [r6, #6]
 801012e:	3608      	adds	r6, #8
 8010130:	42b0      	cmp	r0, r6
 8010132:	d1ec      	bne.n	801010e <arm_cfft_radix4by2_q15+0xc6>
 8010134:	b007      	add	sp, #28
 8010136:	bc3c      	pop	{r2, r3, r4, r5}
 8010138:	4690      	mov	r8, r2
 801013a:	4699      	mov	r9, r3
 801013c:	46a2      	mov	sl, r4
 801013e:	46ab      	mov	fp, r5
 8010140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010142:	9c02      	ldr	r4, [sp, #8]
 8010144:	2302      	movs	r3, #2
 8010146:	0020      	movs	r0, r4
 8010148:	2100      	movs	r1, #0
 801014a:	0015      	movs	r5, r2
 801014c:	f000 f902 	bl	8010354 <arm_radix4_butterfly_q15>
 8010150:	46a4      	mov	ip, r4
 8010152:	9b03      	ldr	r3, [sp, #12]
 8010154:	002a      	movs	r2, r5
 8010156:	0058      	lsls	r0, r3, #1
 8010158:	4460      	add	r0, ip
 801015a:	2302      	movs	r3, #2
 801015c:	2100      	movs	r1, #0
 801015e:	f000 f8f9 	bl	8010354 <arm_radix4_butterfly_q15>
 8010162:	e7e7      	b.n	8010134 <arm_cfft_radix4by2_q15+0xec>

08010164 <arm_cfft_radix4by2_inverse_q15>:
 8010164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010166:	465f      	mov	r7, fp
 8010168:	4644      	mov	r4, r8
 801016a:	4656      	mov	r6, sl
 801016c:	464d      	mov	r5, r9
 801016e:	b4f0      	push	{r4, r5, r6, r7}
 8010170:	084b      	lsrs	r3, r1, #1
 8010172:	b087      	sub	sp, #28
 8010174:	9103      	str	r1, [sp, #12]
 8010176:	0007      	movs	r7, r0
 8010178:	9002      	str	r0, [sp, #8]
 801017a:	0014      	movs	r4, r2
 801017c:	9204      	str	r2, [sp, #16]
 801017e:	1e19      	subs	r1, r3, #0
 8010180:	9305      	str	r3, [sp, #20]
 8010182:	d100      	bne.n	8010186 <arm_cfft_radix4by2_inverse_q15+0x22>
 8010184:	e070      	b.n	8010268 <arm_cfft_radix4by2_inverse_q15+0x104>
 8010186:	008a      	lsls	r2, r1, #2
 8010188:	4691      	mov	r9, r2
 801018a:	0022      	movs	r2, r4
 801018c:	0003      	movs	r3, r0
 801018e:	444a      	add	r2, r9
 8010190:	4692      	mov	sl, r2
 8010192:	464d      	mov	r5, r9
 8010194:	4684      	mov	ip, r0
 8010196:	3302      	adds	r3, #2
 8010198:	2200      	movs	r2, #0
 801019a:	5eb9      	ldrsh	r1, [r7, r2]
 801019c:	2202      	movs	r2, #2
 801019e:	5ea0      	ldrsh	r0, [r4, r2]
 80101a0:	2200      	movs	r2, #0
 80101a2:	5ea6      	ldrsh	r6, [r4, r2]
 80101a4:	104a      	asrs	r2, r1, #1
 80101a6:	4691      	mov	r9, r2
 80101a8:	5f79      	ldrsh	r1, [r7, r5]
 80101aa:	464a      	mov	r2, r9
 80101ac:	1049      	asrs	r1, r1, #1
 80101ae:	1852      	adds	r2, r2, r1
 80101b0:	1052      	asrs	r2, r2, #1
 80101b2:	803a      	strh	r2, [r7, #0]
 80101b4:	9001      	str	r0, [sp, #4]
 80101b6:	2000      	movs	r0, #0
 80101b8:	5e1a      	ldrsh	r2, [r3, r0]
 80101ba:	3404      	adds	r4, #4
 80101bc:	1052      	asrs	r2, r2, #1
 80101be:	4690      	mov	r8, r2
 80101c0:	5f5a      	ldrsh	r2, [r3, r5]
 80101c2:	1052      	asrs	r2, r2, #1
 80101c4:	4693      	mov	fp, r2
 80101c6:	44c3      	add	fp, r8
 80101c8:	4658      	mov	r0, fp
 80101ca:	1040      	asrs	r0, r0, #1
 80101cc:	8018      	strh	r0, [r3, #0]
 80101ce:	4648      	mov	r0, r9
 80101d0:	1a41      	subs	r1, r0, r1
 80101d2:	4640      	mov	r0, r8
 80101d4:	1a82      	subs	r2, r0, r2
 80101d6:	0030      	movs	r0, r6
 80101d8:	4348      	muls	r0, r1
 80101da:	1400      	asrs	r0, r0, #16
 80101dc:	4681      	mov	r9, r0
 80101de:	9801      	ldr	r0, [sp, #4]
 80101e0:	4693      	mov	fp, r2
 80101e2:	4350      	muls	r0, r2
 80101e4:	1400      	asrs	r0, r0, #16
 80101e6:	4680      	mov	r8, r0
 80101e8:	4648      	mov	r0, r9
 80101ea:	4642      	mov	r2, r8
 80101ec:	1a80      	subs	r0, r0, r2
 80101ee:	465a      	mov	r2, fp
 80101f0:	5378      	strh	r0, [r7, r5]
 80101f2:	9801      	ldr	r0, [sp, #4]
 80101f4:	4372      	muls	r2, r6
 80101f6:	4348      	muls	r0, r1
 80101f8:	1412      	asrs	r2, r2, #16
 80101fa:	1401      	asrs	r1, r0, #16
 80101fc:	1852      	adds	r2, r2, r1
 80101fe:	535a      	strh	r2, [r3, r5]
 8010200:	3704      	adds	r7, #4
 8010202:	3304      	adds	r3, #4
 8010204:	4554      	cmp	r4, sl
 8010206:	d1c7      	bne.n	8010198 <arm_cfft_radix4by2_inverse_q15+0x34>
 8010208:	9d05      	ldr	r5, [sp, #20]
 801020a:	9c02      	ldr	r4, [sp, #8]
 801020c:	9f04      	ldr	r7, [sp, #16]
 801020e:	2302      	movs	r3, #2
 8010210:	003a      	movs	r2, r7
 8010212:	0029      	movs	r1, r5
 8010214:	0020      	movs	r0, r4
 8010216:	4666      	mov	r6, ip
 8010218:	f000 fc3c 	bl	8010a94 <arm_radix4_butterfly_inverse_q15>
 801021c:	46a4      	mov	ip, r4
 801021e:	9903      	ldr	r1, [sp, #12]
 8010220:	2302      	movs	r3, #2
 8010222:	0048      	lsls	r0, r1, #1
 8010224:	4460      	add	r0, ip
 8010226:	003a      	movs	r2, r7
 8010228:	0029      	movs	r1, r5
 801022a:	f000 fc33 	bl	8010a94 <arm_radix4_butterfly_inverse_q15>
 801022e:	46a4      	mov	ip, r4
 8010230:	00e8      	lsls	r0, r5, #3
 8010232:	4460      	add	r0, ip
 8010234:	2300      	movs	r3, #0
 8010236:	5ef4      	ldrsh	r4, [r6, r3]
 8010238:	2302      	movs	r3, #2
 801023a:	5ef1      	ldrsh	r1, [r6, r3]
 801023c:	2304      	movs	r3, #4
 801023e:	5ef2      	ldrsh	r2, [r6, r3]
 8010240:	2506      	movs	r5, #6
 8010242:	5f73      	ldrsh	r3, [r6, r5]
 8010244:	0064      	lsls	r4, r4, #1
 8010246:	0049      	lsls	r1, r1, #1
 8010248:	0052      	lsls	r2, r2, #1
 801024a:	005b      	lsls	r3, r3, #1
 801024c:	8034      	strh	r4, [r6, #0]
 801024e:	8071      	strh	r1, [r6, #2]
 8010250:	80b2      	strh	r2, [r6, #4]
 8010252:	80f3      	strh	r3, [r6, #6]
 8010254:	3608      	adds	r6, #8
 8010256:	42b0      	cmp	r0, r6
 8010258:	d1ec      	bne.n	8010234 <arm_cfft_radix4by2_inverse_q15+0xd0>
 801025a:	b007      	add	sp, #28
 801025c:	bc3c      	pop	{r2, r3, r4, r5}
 801025e:	4690      	mov	r8, r2
 8010260:	4699      	mov	r9, r3
 8010262:	46a2      	mov	sl, r4
 8010264:	46ab      	mov	fp, r5
 8010266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010268:	9c02      	ldr	r4, [sp, #8]
 801026a:	2302      	movs	r3, #2
 801026c:	0020      	movs	r0, r4
 801026e:	2100      	movs	r1, #0
 8010270:	0015      	movs	r5, r2
 8010272:	f000 fc0f 	bl	8010a94 <arm_radix4_butterfly_inverse_q15>
 8010276:	46a4      	mov	ip, r4
 8010278:	9b03      	ldr	r3, [sp, #12]
 801027a:	002a      	movs	r2, r5
 801027c:	0058      	lsls	r0, r3, #1
 801027e:	4460      	add	r0, ip
 8010280:	2302      	movs	r3, #2
 8010282:	2100      	movs	r1, #0
 8010284:	f000 fc06 	bl	8010a94 <arm_radix4_butterfly_inverse_q15>
 8010288:	e7e7      	b.n	801025a <arm_cfft_radix4by2_inverse_q15+0xf6>
 801028a:	46c0      	nop			@ (mov r8, r8)

0801028c <arm_cfft_q15>:
 801028c:	b570      	push	{r4, r5, r6, lr}
 801028e:	001e      	movs	r6, r3
 8010290:	2380      	movs	r3, #128	@ 0x80
 8010292:	000d      	movs	r5, r1
 8010294:	0004      	movs	r4, r0
 8010296:	8801      	ldrh	r1, [r0, #0]
 8010298:	005b      	lsls	r3, r3, #1
 801029a:	2a01      	cmp	r2, #1
 801029c:	d028      	beq.n	80102f0 <arm_cfft_q15+0x64>
 801029e:	4299      	cmp	r1, r3
 80102a0:	d020      	beq.n	80102e4 <arm_cfft_q15+0x58>
 80102a2:	d812      	bhi.n	80102ca <arm_cfft_q15+0x3e>
 80102a4:	2920      	cmp	r1, #32
 80102a6:	d004      	beq.n	80102b2 <arm_cfft_q15+0x26>
 80102a8:	d949      	bls.n	801033e <arm_cfft_q15+0xb2>
 80102aa:	2940      	cmp	r1, #64	@ 0x40
 80102ac:	d01a      	beq.n	80102e4 <arm_cfft_q15+0x58>
 80102ae:	2980      	cmp	r1, #128	@ 0x80
 80102b0:	d103      	bne.n	80102ba <arm_cfft_q15+0x2e>
 80102b2:	6862      	ldr	r2, [r4, #4]
 80102b4:	0028      	movs	r0, r5
 80102b6:	f7ff fec7 	bl	8010048 <arm_cfft_radix4by2_q15>
 80102ba:	2e00      	cmp	r6, #0
 80102bc:	d004      	beq.n	80102c8 <arm_cfft_q15+0x3c>
 80102be:	68a2      	ldr	r2, [r4, #8]
 80102c0:	89a1      	ldrh	r1, [r4, #12]
 80102c2:	0028      	movs	r0, r5
 80102c4:	f7ef ff35 	bl	8000132 <arm_bitreversal_16>
 80102c8:	bd70      	pop	{r4, r5, r6, pc}
 80102ca:	2380      	movs	r3, #128	@ 0x80
 80102cc:	00db      	lsls	r3, r3, #3
 80102ce:	4299      	cmp	r1, r3
 80102d0:	d008      	beq.n	80102e4 <arm_cfft_q15+0x58>
 80102d2:	d92f      	bls.n	8010334 <arm_cfft_q15+0xa8>
 80102d4:	2380      	movs	r3, #128	@ 0x80
 80102d6:	011b      	lsls	r3, r3, #4
 80102d8:	4299      	cmp	r1, r3
 80102da:	d0ea      	beq.n	80102b2 <arm_cfft_q15+0x26>
 80102dc:	2380      	movs	r3, #128	@ 0x80
 80102de:	015b      	lsls	r3, r3, #5
 80102e0:	4299      	cmp	r1, r3
 80102e2:	d1ea      	bne.n	80102ba <arm_cfft_q15+0x2e>
 80102e4:	2301      	movs	r3, #1
 80102e6:	6862      	ldr	r2, [r4, #4]
 80102e8:	0028      	movs	r0, r5
 80102ea:	f000 f833 	bl	8010354 <arm_radix4_butterfly_q15>
 80102ee:	e7e4      	b.n	80102ba <arm_cfft_q15+0x2e>
 80102f0:	4299      	cmp	r1, r3
 80102f2:	d019      	beq.n	8010328 <arm_cfft_q15+0x9c>
 80102f4:	d80b      	bhi.n	801030e <arm_cfft_q15+0x82>
 80102f6:	2920      	cmp	r1, #32
 80102f8:	d004      	beq.n	8010304 <arm_cfft_q15+0x78>
 80102fa:	d928      	bls.n	801034e <arm_cfft_q15+0xc2>
 80102fc:	2940      	cmp	r1, #64	@ 0x40
 80102fe:	d013      	beq.n	8010328 <arm_cfft_q15+0x9c>
 8010300:	2980      	cmp	r1, #128	@ 0x80
 8010302:	d1da      	bne.n	80102ba <arm_cfft_q15+0x2e>
 8010304:	6862      	ldr	r2, [r4, #4]
 8010306:	0028      	movs	r0, r5
 8010308:	f7ff ff2c 	bl	8010164 <arm_cfft_radix4by2_inverse_q15>
 801030c:	e7d5      	b.n	80102ba <arm_cfft_q15+0x2e>
 801030e:	2380      	movs	r3, #128	@ 0x80
 8010310:	00db      	lsls	r3, r3, #3
 8010312:	4299      	cmp	r1, r3
 8010314:	d008      	beq.n	8010328 <arm_cfft_q15+0x9c>
 8010316:	d915      	bls.n	8010344 <arm_cfft_q15+0xb8>
 8010318:	2380      	movs	r3, #128	@ 0x80
 801031a:	011b      	lsls	r3, r3, #4
 801031c:	4299      	cmp	r1, r3
 801031e:	d0f1      	beq.n	8010304 <arm_cfft_q15+0x78>
 8010320:	2380      	movs	r3, #128	@ 0x80
 8010322:	015b      	lsls	r3, r3, #5
 8010324:	4299      	cmp	r1, r3
 8010326:	d1c8      	bne.n	80102ba <arm_cfft_q15+0x2e>
 8010328:	2301      	movs	r3, #1
 801032a:	6862      	ldr	r2, [r4, #4]
 801032c:	0028      	movs	r0, r5
 801032e:	f000 fbb1 	bl	8010a94 <arm_radix4_butterfly_inverse_q15>
 8010332:	e7c2      	b.n	80102ba <arm_cfft_q15+0x2e>
 8010334:	2380      	movs	r3, #128	@ 0x80
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	4299      	cmp	r1, r3
 801033a:	d0ba      	beq.n	80102b2 <arm_cfft_q15+0x26>
 801033c:	e7bd      	b.n	80102ba <arm_cfft_q15+0x2e>
 801033e:	2910      	cmp	r1, #16
 8010340:	d1bb      	bne.n	80102ba <arm_cfft_q15+0x2e>
 8010342:	e7cf      	b.n	80102e4 <arm_cfft_q15+0x58>
 8010344:	2380      	movs	r3, #128	@ 0x80
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4299      	cmp	r1, r3
 801034a:	d0db      	beq.n	8010304 <arm_cfft_q15+0x78>
 801034c:	e7b5      	b.n	80102ba <arm_cfft_q15+0x2e>
 801034e:	2910      	cmp	r1, #16
 8010350:	d1b3      	bne.n	80102ba <arm_cfft_q15+0x2e>
 8010352:	e7e9      	b.n	8010328 <arm_cfft_q15+0x9c>

08010354 <arm_radix4_butterfly_q15>:
 8010354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010356:	4656      	mov	r6, sl
 8010358:	464d      	mov	r5, r9
 801035a:	465f      	mov	r7, fp
 801035c:	4644      	mov	r4, r8
 801035e:	b4f0      	push	{r4, r5, r6, r7}
 8010360:	b0ab      	sub	sp, #172	@ 0xac
 8010362:	9114      	str	r1, [sp, #80]	@ 0x50
 8010364:	0889      	lsrs	r1, r1, #2
 8010366:	000d      	movs	r5, r1
 8010368:	9122      	str	r1, [sp, #136]	@ 0x88
 801036a:	0001      	movs	r1, r0
 801036c:	9028      	str	r0, [sp, #160]	@ 0xa0
 801036e:	9020      	str	r0, [sp, #128]	@ 0x80
 8010370:	00a8      	lsls	r0, r5, #2
 8010372:	0004      	movs	r4, r0
 8010374:	9003      	str	r0, [sp, #12]
 8010376:	0008      	movs	r0, r1
 8010378:	4682      	mov	sl, r0
 801037a:	0016      	movs	r6, r2
 801037c:	9229      	str	r2, [sp, #164]	@ 0xa4
 801037e:	1ca2      	adds	r2, r4, #2
 8010380:	4689      	mov	r9, r1
 8010382:	4492      	add	sl, r2
 8010384:	00d9      	lsls	r1, r3, #3
 8010386:	005a      	lsls	r2, r3, #1
 8010388:	9108      	str	r1, [sp, #32]
 801038a:	0099      	lsls	r1, r3, #2
 801038c:	18d3      	adds	r3, r2, r3
 801038e:	46a4      	mov	ip, r4
 8010390:	9107      	str	r1, [sp, #28]
 8010392:	0099      	lsls	r1, r3, #2
 8010394:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010396:	00e9      	lsls	r1, r5, #3
 8010398:	468b      	mov	fp, r1
 801039a:	44e1      	add	r9, ip
 801039c:	44cc      	add	ip, r9
 801039e:	4661      	mov	r1, ip
 80103a0:	465b      	mov	r3, fp
 80103a2:	9001      	str	r0, [sp, #4]
 80103a4:	464a      	mov	r2, r9
 80103a6:	4650      	mov	r0, sl
 80103a8:	910a      	str	r1, [sp, #40]	@ 0x28
 80103aa:	9606      	str	r6, [sp, #24]
 80103ac:	9604      	str	r6, [sp, #16]
 80103ae:	9605      	str	r6, [sp, #20]
 80103b0:	9302      	str	r3, [sp, #8]
 80103b2:	9c01      	ldr	r4, [sp, #4]
 80103b4:	9e03      	ldr	r6, [sp, #12]
 80103b6:	2300      	movs	r3, #0
 80103b8:	5ee1      	ldrsh	r1, [r4, r3]
 80103ba:	2700      	movs	r7, #0
 80103bc:	5fd5      	ldrsh	r5, [r2, r7]
 80103be:	108b      	asrs	r3, r1, #2
 80103c0:	4698      	mov	r8, r3
 80103c2:	2102      	movs	r1, #2
 80103c4:	5e63      	ldrsh	r3, [r4, r1]
 80103c6:	109b      	asrs	r3, r3, #2
 80103c8:	469c      	mov	ip, r3
 80103ca:	0033      	movs	r3, r6
 80103cc:	5ed1      	ldrsh	r1, [r2, r3]
 80103ce:	5f83      	ldrsh	r3, [r0, r6]
 80103d0:	4644      	mov	r4, r8
 80103d2:	1089      	asrs	r1, r1, #2
 80103d4:	1a64      	subs	r4, r4, r1
 80103d6:	46a3      	mov	fp, r4
 80103d8:	4664      	mov	r4, ip
 80103da:	109b      	asrs	r3, r3, #2
 80103dc:	1ae4      	subs	r4, r4, r3
 80103de:	9409      	str	r4, [sp, #36]	@ 0x24
 80103e0:	10ac      	asrs	r4, r5, #2
 80103e2:	46a2      	mov	sl, r4
 80103e4:	2700      	movs	r7, #0
 80103e6:	5fc4      	ldrsh	r4, [r0, r7]
 80103e8:	4441      	add	r1, r8
 80103ea:	10a4      	asrs	r4, r4, #2
 80103ec:	46a1      	mov	r9, r4
 80103ee:	9c02      	ldr	r4, [sp, #8]
 80103f0:	4463      	add	r3, ip
 80103f2:	0027      	movs	r7, r4
 80103f4:	5fd5      	ldrsh	r5, [r2, r7]
 80103f6:	0027      	movs	r7, r4
 80103f8:	5fc4      	ldrsh	r4, [r0, r7]
 80103fa:	10ad      	asrs	r5, r5, #2
 80103fc:	4455      	add	r5, sl
 80103fe:	104f      	asrs	r7, r1, #1
 8010400:	10a4      	asrs	r4, r4, #2
 8010402:	444c      	add	r4, r9
 8010404:	46b9      	mov	r9, r7
 8010406:	106f      	asrs	r7, r5, #1
 8010408:	46b8      	mov	r8, r7
 801040a:	44c8      	add	r8, r9
 801040c:	4647      	mov	r7, r8
 801040e:	46a2      	mov	sl, r4
 8010410:	9c01      	ldr	r4, [sp, #4]
 8010412:	1b49      	subs	r1, r1, r5
 8010414:	8027      	strh	r7, [r4, #0]
 8010416:	105f      	asrs	r7, r3, #1
 8010418:	46bc      	mov	ip, r7
 801041a:	4657      	mov	r7, sl
 801041c:	107f      	asrs	r7, r7, #1
 801041e:	46b8      	mov	r8, r7
 8010420:	44e0      	add	r8, ip
 8010422:	4647      	mov	r7, r8
 8010424:	8067      	strh	r7, [r4, #2]
 8010426:	4654      	mov	r4, sl
 8010428:	1b1b      	subs	r3, r3, r4
 801042a:	9c05      	ldr	r4, [sp, #20]
 801042c:	2500      	movs	r5, #0
 801042e:	5f67      	ldrsh	r7, [r4, r5]
 8010430:	46b9      	mov	r9, r7
 8010432:	2702      	movs	r7, #2
 8010434:	5fe5      	ldrsh	r5, [r4, r7]
 8010436:	2700      	movs	r7, #0
 8010438:	5fd4      	ldrsh	r4, [r2, r7]
 801043a:	10a7      	asrs	r7, r4, #2
 801043c:	46bc      	mov	ip, r7
 801043e:	2700      	movs	r7, #0
 8010440:	5fc4      	ldrsh	r4, [r0, r7]
 8010442:	10a7      	asrs	r7, r4, #2
 8010444:	464c      	mov	r4, r9
 8010446:	46ba      	mov	sl, r7
 8010448:	464f      	mov	r7, r9
 801044a:	434c      	muls	r4, r1
 801044c:	46a0      	mov	r8, r4
 801044e:	001c      	movs	r4, r3
 8010450:	4369      	muls	r1, r5
 8010452:	437b      	muls	r3, r7
 8010454:	9f02      	ldr	r7, [sp, #8]
 8010456:	1a5b      	subs	r3, r3, r1
 8010458:	0039      	movs	r1, r7
 801045a:	436c      	muls	r4, r5
 801045c:	4444      	add	r4, r8
 801045e:	1424      	asrs	r4, r4, #16
 8010460:	141b      	asrs	r3, r3, #16
 8010462:	8014      	strh	r4, [r2, #0]
 8010464:	8003      	strh	r3, [r0, #0]
 8010466:	5e53      	ldrsh	r3, [r2, r1]
 8010468:	4661      	mov	r1, ip
 801046a:	109b      	asrs	r3, r3, #2
 801046c:	1acb      	subs	r3, r1, r3
 801046e:	0039      	movs	r1, r7
 8010470:	5e41      	ldrsh	r1, [r0, r1]
 8010472:	4657      	mov	r7, sl
 8010474:	1089      	asrs	r1, r1, #2
 8010476:	1a79      	subs	r1, r7, r1
 8010478:	465f      	mov	r7, fp
 801047a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801047c:	1a7f      	subs	r7, r7, r1
 801047e:	195c      	adds	r4, r3, r5
 8010480:	1aed      	subs	r5, r5, r3
 8010482:	4459      	add	r1, fp
 8010484:	46ab      	mov	fp, r5
 8010486:	9d04      	ldr	r5, [sp, #16]
 8010488:	46b8      	mov	r8, r7
 801048a:	2302      	movs	r3, #2
 801048c:	5eef      	ldrsh	r7, [r5, r3]
 801048e:	46bc      	mov	ip, r7
 8010490:	2300      	movs	r3, #0
 8010492:	5eef      	ldrsh	r7, [r5, r3]
 8010494:	4665      	mov	r5, ip
 8010496:	465b      	mov	r3, fp
 8010498:	435d      	muls	r5, r3
 801049a:	46b9      	mov	r9, r7
 801049c:	46aa      	mov	sl, r5
 801049e:	003d      	movs	r5, r7
 80104a0:	4667      	mov	r7, ip
 80104a2:	434d      	muls	r5, r1
 80104a4:	4379      	muls	r1, r7
 80104a6:	464f      	mov	r7, r9
 80104a8:	437b      	muls	r3, r7
 80104aa:	4455      	add	r5, sl
 80104ac:	1a5b      	subs	r3, r3, r1
 80104ae:	142d      	asrs	r5, r5, #16
 80104b0:	141b      	asrs	r3, r3, #16
 80104b2:	5395      	strh	r5, [r2, r6]
 80104b4:	5383      	strh	r3, [r0, r6]
 80104b6:	9b06      	ldr	r3, [sp, #24]
 80104b8:	2602      	movs	r6, #2
 80104ba:	5f99      	ldrsh	r1, [r3, r6]
 80104bc:	001e      	movs	r6, r3
 80104be:	2500      	movs	r5, #0
 80104c0:	5f5d      	ldrsh	r5, [r3, r5]
 80104c2:	0023      	movs	r3, r4
 80104c4:	434b      	muls	r3, r1
 80104c6:	469c      	mov	ip, r3
 80104c8:	4643      	mov	r3, r8
 80104ca:	436b      	muls	r3, r5
 80104cc:	9f02      	ldr	r7, [sp, #8]
 80104ce:	4463      	add	r3, ip
 80104d0:	141b      	asrs	r3, r3, #16
 80104d2:	53d3      	strh	r3, [r2, r7]
 80104d4:	4643      	mov	r3, r8
 80104d6:	436c      	muls	r4, r5
 80104d8:	434b      	muls	r3, r1
 80104da:	1ae3      	subs	r3, r4, r3
 80104dc:	141b      	asrs	r3, r3, #16
 80104de:	53c3      	strh	r3, [r0, r7]
 80104e0:	9b01      	ldr	r3, [sp, #4]
 80104e2:	9c05      	ldr	r4, [sp, #20]
 80104e4:	3304      	adds	r3, #4
 80104e6:	9301      	str	r3, [sp, #4]
 80104e8:	9b08      	ldr	r3, [sp, #32]
 80104ea:	9d04      	ldr	r5, [sp, #16]
 80104ec:	469c      	mov	ip, r3
 80104ee:	9b07      	ldr	r3, [sp, #28]
 80104f0:	4464      	add	r4, ip
 80104f2:	469c      	mov	ip, r3
 80104f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80104f6:	4465      	add	r5, ip
 80104f8:	0033      	movs	r3, r6
 80104fa:	468c      	mov	ip, r1
 80104fc:	4463      	add	r3, ip
 80104fe:	9306      	str	r3, [sp, #24]
 8010500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010502:	3204      	adds	r2, #4
 8010504:	3004      	adds	r0, #4
 8010506:	9405      	str	r4, [sp, #20]
 8010508:	9504      	str	r5, [sp, #16]
 801050a:	429a      	cmp	r2, r3
 801050c:	d000      	beq.n	8010510 <arm_radix4_butterfly_q15+0x1bc>
 801050e:	e750      	b.n	80103b2 <arm_radix4_butterfly_q15+0x5e>
 8010510:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010512:	9b07      	ldr	r3, [sp, #28]
 8010514:	2a04      	cmp	r2, #4
 8010516:	d800      	bhi.n	801051a <arm_radix4_butterfly_q15+0x1c6>
 8010518:	e198      	b.n	801084c <arm_radix4_butterfly_q15+0x4f8>
 801051a:	9219      	str	r2, [sp, #100]	@ 0x64
 801051c:	9227      	str	r2, [sp, #156]	@ 0x9c
 801051e:	4ad9      	ldr	r2, [pc, #868]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 8010520:	4692      	mov	sl, r2
 8010522:	4ad9      	ldr	r2, [pc, #868]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 8010524:	4693      	mov	fp, r2
 8010526:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010528:	0892      	lsrs	r2, r2, #2
 801052a:	0011      	movs	r1, r2
 801052c:	9222      	str	r2, [sp, #136]	@ 0x88
 801052e:	3a01      	subs	r2, #1
 8010530:	9224      	str	r2, [sp, #144]	@ 0x90
 8010532:	009a      	lsls	r2, r3, #2
 8010534:	9221      	str	r2, [sp, #132]	@ 0x84
 8010536:	00da      	lsls	r2, r3, #3
 8010538:	9223      	str	r2, [sp, #140]	@ 0x8c
 801053a:	005a      	lsls	r2, r3, #1
 801053c:	18d3      	adds	r3, r2, r3
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	9325      	str	r3, [sp, #148]	@ 0x94
 8010542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	931a      	str	r3, [sp, #104]	@ 0x68
 8010548:	00cb      	lsls	r3, r1, #3
 801054a:	4699      	mov	r9, r3
 801054c:	008b      	lsls	r3, r1, #2
 801054e:	9303      	str	r3, [sp, #12]
 8010550:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010552:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010554:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8010556:	931e      	str	r3, [sp, #120]	@ 0x78
 8010558:	931d      	str	r3, [sp, #116]	@ 0x74
 801055a:	931c      	str	r3, [sp, #112]	@ 0x70
 801055c:	2300      	movs	r3, #0
 801055e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010560:	464b      	mov	r3, r9
 8010562:	3302      	adds	r3, #2
 8010564:	9326      	str	r3, [sp, #152]	@ 0x98
 8010566:	464b      	mov	r3, r9
 8010568:	9302      	str	r3, [sp, #8]
 801056a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801056c:	2100      	movs	r1, #0
 801056e:	5e5a      	ldrsh	r2, [r3, r1]
 8010570:	9208      	str	r2, [sp, #32]
 8010572:	2202      	movs	r2, #2
 8010574:	5e9b      	ldrsh	r3, [r3, r2]
 8010576:	9311      	str	r3, [sp, #68]	@ 0x44
 8010578:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801057a:	2100      	movs	r1, #0
 801057c:	5e5a      	ldrsh	r2, [r3, r1]
 801057e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010580:	2202      	movs	r2, #2
 8010582:	5e9b      	ldrsh	r3, [r3, r2]
 8010584:	9312      	str	r3, [sp, #72]	@ 0x48
 8010586:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010588:	2100      	movs	r1, #0
 801058a:	5e5a      	ldrsh	r2, [r3, r1]
 801058c:	9215      	str	r2, [sp, #84]	@ 0x54
 801058e:	2202      	movs	r2, #2
 8010590:	5e9b      	ldrsh	r3, [r3, r2]
 8010592:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010594:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010596:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010598:	4293      	cmp	r3, r2
 801059a:	d800      	bhi.n	801059e <arm_radix4_butterfly_q15+0x24a>
 801059c:	e134      	b.n	8010808 <arm_radix4_butterfly_q15+0x4b4>
 801059e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80105a0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80105a2:	425b      	negs	r3, r3
 80105a4:	9318      	str	r3, [sp, #96]	@ 0x60
 80105a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105a8:	4694      	mov	ip, r2
 80105aa:	425b      	negs	r3, r3
 80105ac:	9317      	str	r3, [sp, #92]	@ 0x5c
 80105ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105b0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80105b2:	425b      	negs	r3, r3
 80105b4:	9316      	str	r3, [sp, #88]	@ 0x58
 80105b6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80105b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80105ba:	0019      	movs	r1, r3
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	4461      	add	r1, ip
 80105c0:	4698      	mov	r8, r3
 80105c2:	44e0      	add	r8, ip
 80105c4:	4643      	mov	r3, r8
 80105c6:	46e1      	mov	r9, ip
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	4688      	mov	r8, r1
 80105cc:	e0a1      	b.n	8010712 <arm_radix4_butterfly_q15+0x3be>
 80105ce:	b200      	sxth	r0, r0
 80105d0:	1040      	asrs	r0, r0, #1
 80105d2:	2e00      	cmp	r6, #0
 80105d4:	dc00      	bgt.n	80105d8 <arm_radix4_butterfly_q15+0x284>
 80105d6:	e100      	b.n	80107da <arm_radix4_butterfly_q15+0x486>
 80105d8:	b212      	sxth	r2, r2
 80105da:	1052      	asrs	r2, r2, #1
 80105dc:	9e05      	ldr	r6, [sp, #20]
 80105de:	2f00      	cmp	r7, #0
 80105e0:	dc00      	bgt.n	80105e4 <arm_radix4_butterfly_q15+0x290>
 80105e2:	e101      	b.n	80107e8 <arm_radix4_butterfly_q15+0x494>
 80105e4:	b236      	sxth	r6, r6
 80105e6:	1076      	asrs	r6, r6, #1
 80105e8:	2d00      	cmp	r5, #0
 80105ea:	dc00      	bgt.n	80105ee <arm_radix4_butterfly_q15+0x29a>
 80105ec:	e102      	b.n	80107f4 <arm_radix4_butterfly_q15+0x4a0>
 80105ee:	4649      	mov	r1, r9
 80105f0:	1885      	adds	r5, r0, r2
 80105f2:	b21b      	sxth	r3, r3
 80105f4:	105b      	asrs	r3, r3, #1
 80105f6:	106d      	asrs	r5, r5, #1
 80105f8:	800d      	strh	r5, [r1, #0]
 80105fa:	18f5      	adds	r5, r6, r3
 80105fc:	106d      	asrs	r5, r5, #1
 80105fe:	804d      	strh	r5, [r1, #2]
 8010600:	9901      	ldr	r1, [sp, #4]
 8010602:	1a80      	subs	r0, r0, r2
 8010604:	000a      	movs	r2, r1
 8010606:	2500      	movs	r5, #0
 8010608:	5f55      	ldrsh	r5, [r2, r5]
 801060a:	000a      	movs	r2, r1
 801060c:	1af3      	subs	r3, r6, r3
 801060e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010610:	2602      	movs	r6, #2
 8010612:	5f96      	ldrsh	r6, [r2, r6]
 8010614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010616:	435f      	muls	r7, r3
 8010618:	4342      	muls	r2, r0
 801061a:	19d7      	adds	r7, r2, r7
 801061c:	143f      	asrs	r7, r7, #16
 801061e:	800f      	strh	r7, [r1, #0]
 8010620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010622:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010624:	4353      	muls	r3, r2
 8010626:	4348      	muls	r0, r1
 8010628:	9a01      	ldr	r2, [sp, #4]
 801062a:	18c0      	adds	r0, r0, r3
 801062c:	1400      	asrs	r0, r0, #16
 801062e:	9b02      	ldr	r3, [sp, #8]
 8010630:	8050      	strh	r0, [r2, #2]
 8010632:	5ed3      	ldrsh	r3, [r2, r3]
 8010634:	1aed      	subs	r5, r5, r3
 8010636:	002b      	movs	r3, r5
 8010638:	4555      	cmp	r5, sl
 801063a:	dd00      	ble.n	801063e <arm_radix4_butterfly_q15+0x2ea>
 801063c:	4b91      	ldr	r3, [pc, #580]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 801063e:	002f      	movs	r7, r5
 8010640:	455d      	cmp	r5, fp
 8010642:	da00      	bge.n	8010646 <arm_radix4_butterfly_q15+0x2f2>
 8010644:	4f90      	ldr	r7, [pc, #576]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 8010646:	4642      	mov	r2, r8
 8010648:	9903      	ldr	r1, [sp, #12]
 801064a:	5e52      	ldrsh	r2, [r2, r1]
 801064c:	1ab6      	subs	r6, r6, r2
 801064e:	0030      	movs	r0, r6
 8010650:	4556      	cmp	r6, sl
 8010652:	dd00      	ble.n	8010656 <arm_radix4_butterfly_q15+0x302>
 8010654:	488b      	ldr	r0, [pc, #556]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 8010656:	46b4      	mov	ip, r6
 8010658:	455e      	cmp	r6, fp
 801065a:	da01      	bge.n	8010660 <arm_radix4_butterfly_q15+0x30c>
 801065c:	4a8a      	ldr	r2, [pc, #552]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 801065e:	4694      	mov	ip, r2
 8010660:	9a07      	ldr	r2, [sp, #28]
 8010662:	2c00      	cmp	r4, #0
 8010664:	dc00      	bgt.n	8010668 <arm_radix4_butterfly_q15+0x314>
 8010666:	e0cd      	b.n	8010804 <arm_radix4_butterfly_q15+0x4b0>
 8010668:	b212      	sxth	r2, r2
 801066a:	1052      	asrs	r2, r2, #1
 801066c:	b292      	uxth	r2, r2
 801066e:	2e00      	cmp	r6, #0
 8010670:	dc00      	bgt.n	8010674 <arm_radix4_butterfly_q15+0x320>
 8010672:	e0c5      	b.n	8010800 <arm_radix4_butterfly_q15+0x4ac>
 8010674:	b204      	sxth	r4, r0
 8010676:	9904      	ldr	r1, [sp, #16]
 8010678:	1064      	asrs	r4, r4, #1
 801067a:	b2a4      	uxth	r4, r4
 801067c:	9806      	ldr	r0, [sp, #24]
 801067e:	2900      	cmp	r1, #0
 8010680:	dc00      	bgt.n	8010684 <arm_radix4_butterfly_q15+0x330>
 8010682:	e0bb      	b.n	80107fc <arm_radix4_butterfly_q15+0x4a8>
 8010684:	b200      	sxth	r0, r0
 8010686:	1040      	asrs	r0, r0, #1
 8010688:	b280      	uxth	r0, r0
 801068a:	2d00      	cmp	r5, #0
 801068c:	dc00      	bgt.n	8010690 <arm_radix4_butterfly_q15+0x33c>
 801068e:	e0b3      	b.n	80107f8 <arm_radix4_butterfly_q15+0x4a4>
 8010690:	1916      	adds	r6, r2, r4
 8010692:	9f08      	ldr	r7, [sp, #32]
 8010694:	b236      	sxth	r6, r6
 8010696:	4377      	muls	r7, r6
 8010698:	b21b      	sxth	r3, r3
 801069a:	46bc      	mov	ip, r7
 801069c:	105b      	asrs	r3, r3, #1
 801069e:	b29b      	uxth	r3, r3
 80106a0:	1ac5      	subs	r5, r0, r3
 80106a2:	9304      	str	r3, [sp, #16]
 80106a4:	464b      	mov	r3, r9
 80106a6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80106a8:	b22d      	sxth	r5, r5
 80106aa:	436f      	muls	r7, r5
 80106ac:	9902      	ldr	r1, [sp, #8]
 80106ae:	4467      	add	r7, ip
 80106b0:	143f      	asrs	r7, r7, #16
 80106b2:	525f      	strh	r7, [r3, r1]
 80106b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80106b6:	9f08      	ldr	r7, [sp, #32]
 80106b8:	435e      	muls	r6, r3
 80106ba:	4643      	mov	r3, r8
 80106bc:	437d      	muls	r5, r7
 80106be:	1976      	adds	r6, r6, r5
 80106c0:	1436      	asrs	r6, r6, #16
 80106c2:	801e      	strh	r6, [r3, #0]
 80106c4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80106c6:	9b04      	ldr	r3, [sp, #16]
 80106c8:	1b12      	subs	r2, r2, r4
 80106ca:	18c3      	adds	r3, r0, r3
 80106cc:	0028      	movs	r0, r5
 80106ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80106d0:	b21b      	sxth	r3, r3
 80106d2:	b212      	sxth	r2, r2
 80106d4:	435c      	muls	r4, r3
 80106d6:	4350      	muls	r0, r2
 80106d8:	1820      	adds	r0, r4, r0
 80106da:	9c01      	ldr	r4, [sp, #4]
 80106dc:	1400      	asrs	r0, r0, #16
 80106de:	5260      	strh	r0, [r4, r1]
 80106e0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80106e2:	436b      	muls	r3, r5
 80106e4:	434a      	muls	r2, r1
 80106e6:	18d2      	adds	r2, r2, r3
 80106e8:	4643      	mov	r3, r8
 80106ea:	9903      	ldr	r1, [sp, #12]
 80106ec:	1412      	asrs	r2, r2, #16
 80106ee:	525a      	strh	r2, [r3, r1]
 80106f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80106f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106f4:	4694      	mov	ip, r2
 80106f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80106f8:	4463      	add	r3, ip
 80106fa:	0019      	movs	r1, r3
 80106fc:	4694      	mov	ip, r2
 80106fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010700:	0023      	movs	r3, r4
 8010702:	4463      	add	r3, ip
 8010704:	9301      	str	r3, [sp, #4]
 8010706:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010708:	44e1      	add	r9, ip
 801070a:	44e0      	add	r8, ip
 801070c:	001a      	movs	r2, r3
 801070e:	428a      	cmp	r2, r1
 8010710:	d97a      	bls.n	8010808 <arm_radix4_butterfly_q15+0x4b4>
 8010712:	464b      	mov	r3, r9
 8010714:	2500      	movs	r5, #0
 8010716:	5f5d      	ldrsh	r5, [r3, r5]
 8010718:	464b      	mov	r3, r9
 801071a:	9a02      	ldr	r2, [sp, #8]
 801071c:	5e9c      	ldrsh	r4, [r3, r2]
 801071e:	192b      	adds	r3, r5, r4
 8010720:	469c      	mov	ip, r3
 8010722:	0018      	movs	r0, r3
 8010724:	4553      	cmp	r3, sl
 8010726:	dd00      	ble.n	801072a <arm_radix4_butterfly_q15+0x3d6>
 8010728:	4856      	ldr	r0, [pc, #344]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 801072a:	4663      	mov	r3, ip
 801072c:	930d      	str	r3, [sp, #52]	@ 0x34
 801072e:	45dc      	cmp	ip, fp
 8010730:	da01      	bge.n	8010736 <arm_radix4_butterfly_q15+0x3e2>
 8010732:	4b55      	ldr	r3, [pc, #340]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 8010734:	930d      	str	r3, [sp, #52]	@ 0x34
 8010736:	464b      	mov	r3, r9
 8010738:	2202      	movs	r2, #2
 801073a:	5e9a      	ldrsh	r2, [r3, r2]
 801073c:	4643      	mov	r3, r8
 801073e:	2100      	movs	r1, #0
 8010740:	5e5b      	ldrsh	r3, [r3, r1]
 8010742:	18d7      	adds	r7, r2, r3
 8010744:	9705      	str	r7, [sp, #20]
 8010746:	4557      	cmp	r7, sl
 8010748:	dd01      	ble.n	801074e <arm_radix4_butterfly_q15+0x3fa>
 801074a:	494e      	ldr	r1, [pc, #312]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 801074c:	9105      	str	r1, [sp, #20]
 801074e:	970c      	str	r7, [sp, #48]	@ 0x30
 8010750:	455f      	cmp	r7, fp
 8010752:	da01      	bge.n	8010758 <arm_radix4_butterfly_q15+0x404>
 8010754:	494c      	ldr	r1, [pc, #304]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 8010756:	910c      	str	r1, [sp, #48]	@ 0x30
 8010758:	1b2c      	subs	r4, r5, r4
 801075a:	9407      	str	r4, [sp, #28]
 801075c:	4554      	cmp	r4, sl
 801075e:	dd01      	ble.n	8010764 <arm_radix4_butterfly_q15+0x410>
 8010760:	4948      	ldr	r1, [pc, #288]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 8010762:	9107      	str	r1, [sp, #28]
 8010764:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010766:	455c      	cmp	r4, fp
 8010768:	da01      	bge.n	801076e <arm_radix4_butterfly_q15+0x41a>
 801076a:	4947      	ldr	r1, [pc, #284]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 801076c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801076e:	1ad3      	subs	r3, r2, r3
 8010770:	9304      	str	r3, [sp, #16]
 8010772:	9306      	str	r3, [sp, #24]
 8010774:	4553      	cmp	r3, sl
 8010776:	dd02      	ble.n	801077e <arm_radix4_butterfly_q15+0x42a>
 8010778:	4b42      	ldr	r3, [pc, #264]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 801077a:	9306      	str	r3, [sp, #24]
 801077c:	9b04      	ldr	r3, [sp, #16]
 801077e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010780:	455b      	cmp	r3, fp
 8010782:	da01      	bge.n	8010788 <arm_radix4_butterfly_q15+0x434>
 8010784:	4b40      	ldr	r3, [pc, #256]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 8010786:	930e      	str	r3, [sp, #56]	@ 0x38
 8010788:	9a01      	ldr	r2, [sp, #4]
 801078a:	2300      	movs	r3, #0
 801078c:	5ed6      	ldrsh	r6, [r2, r3]
 801078e:	9b02      	ldr	r3, [sp, #8]
 8010790:	5ed3      	ldrsh	r3, [r2, r3]
 8010792:	18f6      	adds	r6, r6, r3
 8010794:	0032      	movs	r2, r6
 8010796:	4556      	cmp	r6, sl
 8010798:	dd00      	ble.n	801079c <arm_radix4_butterfly_q15+0x448>
 801079a:	4a3a      	ldr	r2, [pc, #232]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 801079c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801079e:	455e      	cmp	r6, fp
 80107a0:	da01      	bge.n	80107a6 <arm_radix4_butterfly_q15+0x452>
 80107a2:	4b39      	ldr	r3, [pc, #228]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 80107a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	9903      	ldr	r1, [sp, #12]
 80107aa:	2502      	movs	r5, #2
 80107ac:	5f5d      	ldrsh	r5, [r3, r5]
 80107ae:	4643      	mov	r3, r8
 80107b0:	5e5b      	ldrsh	r3, [r3, r1]
 80107b2:	18ed      	adds	r5, r5, r3
 80107b4:	002b      	movs	r3, r5
 80107b6:	4555      	cmp	r5, sl
 80107b8:	dd00      	ble.n	80107bc <arm_radix4_butterfly_q15+0x468>
 80107ba:	4b32      	ldr	r3, [pc, #200]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 80107bc:	9510      	str	r5, [sp, #64]	@ 0x40
 80107be:	455d      	cmp	r5, fp
 80107c0:	da01      	bge.n	80107c6 <arm_radix4_butterfly_q15+0x472>
 80107c2:	4931      	ldr	r1, [pc, #196]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 80107c4:	9110      	str	r1, [sp, #64]	@ 0x40
 80107c6:	4661      	mov	r1, ip
 80107c8:	2900      	cmp	r1, #0
 80107ca:	dd00      	ble.n	80107ce <arm_radix4_butterfly_q15+0x47a>
 80107cc:	e6ff      	b.n	80105ce <arm_radix4_butterfly_q15+0x27a>
 80107ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80107d0:	b200      	sxth	r0, r0
 80107d2:	1040      	asrs	r0, r0, #1
 80107d4:	2e00      	cmp	r6, #0
 80107d6:	dd00      	ble.n	80107da <arm_radix4_butterfly_q15+0x486>
 80107d8:	e6fe      	b.n	80105d8 <arm_radix4_butterfly_q15+0x284>
 80107da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80107dc:	9e05      	ldr	r6, [sp, #20]
 80107de:	b212      	sxth	r2, r2
 80107e0:	1052      	asrs	r2, r2, #1
 80107e2:	2f00      	cmp	r7, #0
 80107e4:	dd00      	ble.n	80107e8 <arm_radix4_butterfly_q15+0x494>
 80107e6:	e6fd      	b.n	80105e4 <arm_radix4_butterfly_q15+0x290>
 80107e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107ea:	b236      	sxth	r6, r6
 80107ec:	1076      	asrs	r6, r6, #1
 80107ee:	2d00      	cmp	r5, #0
 80107f0:	dd00      	ble.n	80107f4 <arm_radix4_butterfly_q15+0x4a0>
 80107f2:	e6fc      	b.n	80105ee <arm_radix4_butterfly_q15+0x29a>
 80107f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80107f6:	e6fa      	b.n	80105ee <arm_radix4_butterfly_q15+0x29a>
 80107f8:	003b      	movs	r3, r7
 80107fa:	e749      	b.n	8010690 <arm_radix4_butterfly_q15+0x33c>
 80107fc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80107fe:	e741      	b.n	8010684 <arm_radix4_butterfly_q15+0x330>
 8010800:	4660      	mov	r0, ip
 8010802:	e737      	b.n	8010674 <arm_radix4_butterfly_q15+0x320>
 8010804:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010806:	e72f      	b.n	8010668 <arm_radix4_butterfly_q15+0x314>
 8010808:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801080a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801080c:	468c      	mov	ip, r1
 801080e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8010810:	4462      	add	r2, ip
 8010812:	468c      	mov	ip, r1
 8010814:	921c      	str	r2, [sp, #112]	@ 0x70
 8010816:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8010818:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801081a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801081c:	4462      	add	r2, ip
 801081e:	468c      	mov	ip, r1
 8010820:	921d      	str	r2, [sp, #116]	@ 0x74
 8010822:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010824:	3301      	adds	r3, #1
 8010826:	4462      	add	r2, ip
 8010828:	921e      	str	r2, [sp, #120]	@ 0x78
 801082a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801082c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801082e:	3204      	adds	r2, #4
 8010830:	921f      	str	r2, [sp, #124]	@ 0x7c
 8010832:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010834:	4293      	cmp	r3, r2
 8010836:	d800      	bhi.n	801083a <arm_radix4_butterfly_q15+0x4e6>
 8010838:	e697      	b.n	801056a <arm_radix4_butterfly_q15+0x216>
 801083a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801083c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801083e:	0892      	lsrs	r2, r2, #2
 8010840:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010842:	9227      	str	r2, [sp, #156]	@ 0x9c
 8010844:	9119      	str	r1, [sp, #100]	@ 0x64
 8010846:	2a04      	cmp	r2, #4
 8010848:	d900      	bls.n	801084c <arm_radix4_butterfly_q15+0x4f8>
 801084a:	e66c      	b.n	8010526 <arm_radix4_butterfly_q15+0x1d2>
 801084c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801084e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010850:	0893      	lsrs	r3, r2, #2
 8010852:	0058      	lsls	r0, r3, #1
 8010854:	1a8a      	subs	r2, r1, r2
 8010856:	18c0      	adds	r0, r0, r3
 8010858:	920f      	str	r2, [sp, #60]	@ 0x3c
 801085a:	009a      	lsls	r2, r3, #2
 801085c:	00db      	lsls	r3, r3, #3
 801085e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010860:	2300      	movs	r3, #0
 8010862:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8010864:	9305      	str	r3, [sp, #20]
 8010866:	46a1      	mov	r9, r4
 8010868:	4b06      	ldr	r3, [pc, #24]	@ (8010884 <arm_radix4_butterfly_q15+0x530>)
 801086a:	9202      	str	r2, [sp, #8]
 801086c:	469b      	mov	fp, r3
 801086e:	3202      	adds	r2, #2
 8010870:	4b05      	ldr	r3, [pc, #20]	@ (8010888 <arm_radix4_butterfly_q15+0x534>)
 8010872:	4491      	add	r9, r2
 8010874:	46a0      	mov	r8, r4
 8010876:	469a      	mov	sl, r3
 8010878:	464b      	mov	r3, r9
 801087a:	0080      	lsls	r0, r0, #2
 801087c:	4480      	add	r8, r0
 801087e:	4640      	mov	r0, r8
 8010880:	9301      	str	r3, [sp, #4]
 8010882:	e08a      	b.n	801099a <arm_radix4_butterfly_q15+0x646>
 8010884:	00007fff 	.word	0x00007fff
 8010888:	ffff8000 	.word	0xffff8000
 801088c:	b21b      	sxth	r3, r3
 801088e:	105b      	asrs	r3, r3, #1
 8010890:	b29b      	uxth	r3, r3
 8010892:	469c      	mov	ip, r3
 8010894:	2d00      	cmp	r5, #0
 8010896:	dc00      	bgt.n	801089a <arm_radix4_butterfly_q15+0x546>
 8010898:	e0e2      	b.n	8010a60 <arm_radix4_butterfly_q15+0x70c>
 801089a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801089c:	b21b      	sxth	r3, r3
 801089e:	105b      	asrs	r3, r3, #1
 80108a0:	b29d      	uxth	r5, r3
 80108a2:	4663      	mov	r3, ip
 80108a4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80108a6:	195b      	adds	r3, r3, r5
 80108a8:	8033      	strh	r3, [r6, #0]
 80108aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ac:	2f00      	cmp	r7, #0
 80108ae:	dc00      	bgt.n	80108b2 <arm_radix4_butterfly_q15+0x55e>
 80108b0:	e0ea      	b.n	8010a88 <arm_radix4_butterfly_q15+0x734>
 80108b2:	b21f      	sxth	r7, r3
 80108b4:	107f      	asrs	r7, r7, #1
 80108b6:	b2bf      	uxth	r7, r7
 80108b8:	464b      	mov	r3, r9
 80108ba:	2c00      	cmp	r4, #0
 80108bc:	dc00      	bgt.n	80108c0 <arm_radix4_butterfly_q15+0x56c>
 80108be:	e0e1      	b.n	8010a84 <arm_radix4_butterfly_q15+0x730>
 80108c0:	b21c      	sxth	r4, r3
 80108c2:	1064      	asrs	r4, r4, #1
 80108c4:	b2a3      	uxth	r3, r4
 80108c6:	4699      	mov	r9, r3
 80108c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80108ca:	18fb      	adds	r3, r7, r3
 80108cc:	8073      	strh	r3, [r6, #2]
 80108ce:	9b02      	ldr	r3, [sp, #8]
 80108d0:	5ef3      	ldrsh	r3, [r6, r3]
 80108d2:	4698      	mov	r8, r3
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	2400      	movs	r4, #0
 80108d8:	5f1b      	ldrsh	r3, [r3, r4]
 80108da:	464c      	mov	r4, r9
 80108dc:	9304      	str	r3, [sp, #16]
 80108de:	4663      	mov	r3, ip
 80108e0:	1b5b      	subs	r3, r3, r5
 80108e2:	9d02      	ldr	r5, [sp, #8]
 80108e4:	1b3f      	subs	r7, r7, r4
 80108e6:	5373      	strh	r3, [r6, r5]
 80108e8:	9b01      	ldr	r3, [sp, #4]
 80108ea:	801f      	strh	r7, [r3, #0]
 80108ec:	2300      	movs	r3, #0
 80108ee:	5ec4      	ldrsh	r4, [r0, r3]
 80108f0:	4643      	mov	r3, r8
 80108f2:	1b1c      	subs	r4, r3, r4
 80108f4:	46a0      	mov	r8, r4
 80108f6:	455c      	cmp	r4, fp
 80108f8:	dd01      	ble.n	80108fe <arm_radix4_butterfly_q15+0x5aa>
 80108fa:	4b64      	ldr	r3, [pc, #400]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 80108fc:	4698      	mov	r8, r3
 80108fe:	46a1      	mov	r9, r4
 8010900:	4554      	cmp	r4, sl
 8010902:	da01      	bge.n	8010908 <arm_radix4_butterfly_q15+0x5b4>
 8010904:	4b62      	ldr	r3, [pc, #392]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 8010906:	4699      	mov	r9, r3
 8010908:	2302      	movs	r3, #2
 801090a:	5ec5      	ldrsh	r5, [r0, r3]
 801090c:	9b04      	ldr	r3, [sp, #16]
 801090e:	1b5d      	subs	r5, r3, r5
 8010910:	002b      	movs	r3, r5
 8010912:	455d      	cmp	r5, fp
 8010914:	dd00      	ble.n	8010918 <arm_radix4_butterfly_q15+0x5c4>
 8010916:	4b5d      	ldr	r3, [pc, #372]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 8010918:	002f      	movs	r7, r5
 801091a:	4555      	cmp	r5, sl
 801091c:	da00      	bge.n	8010920 <arm_radix4_butterfly_q15+0x5cc>
 801091e:	4f5c      	ldr	r7, [pc, #368]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 8010920:	9e07      	ldr	r6, [sp, #28]
 8010922:	46b4      	mov	ip, r6
 8010924:	2900      	cmp	r1, #0
 8010926:	dc00      	bgt.n	801092a <arm_radix4_butterfly_q15+0x5d6>
 8010928:	e0a9      	b.n	8010a7e <arm_radix4_butterfly_q15+0x72a>
 801092a:	4661      	mov	r1, ip
 801092c:	b209      	sxth	r1, r1
 801092e:	1049      	asrs	r1, r1, #1
 8010930:	b289      	uxth	r1, r1
 8010932:	2d00      	cmp	r5, #0
 8010934:	dc00      	bgt.n	8010938 <arm_radix4_butterfly_q15+0x5e4>
 8010936:	e0a0      	b.n	8010a7a <arm_radix4_butterfly_q15+0x726>
 8010938:	b21b      	sxth	r3, r3
 801093a:	105b      	asrs	r3, r3, #1
 801093c:	b29b      	uxth	r3, r3
 801093e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010940:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8010942:	18cd      	adds	r5, r1, r3
 8010944:	53f5      	strh	r5, [r6, r7]
 8010946:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010948:	2a00      	cmp	r2, #0
 801094a:	dc00      	bgt.n	801094e <arm_radix4_butterfly_q15+0x5fa>
 801094c:	e093      	b.n	8010a76 <arm_radix4_butterfly_q15+0x722>
 801094e:	b22d      	sxth	r5, r5
 8010950:	106d      	asrs	r5, r5, #1
 8010952:	b2ad      	uxth	r5, r5
 8010954:	2c00      	cmp	r4, #0
 8010956:	dc00      	bgt.n	801095a <arm_radix4_butterfly_q15+0x606>
 8010958:	e08b      	b.n	8010a72 <arm_radix4_butterfly_q15+0x71e>
 801095a:	4642      	mov	r2, r8
 801095c:	b212      	sxth	r2, r2
 801095e:	1052      	asrs	r2, r2, #1
 8010960:	9f01      	ldr	r7, [sp, #4]
 8010962:	b292      	uxth	r2, r2
 8010964:	9e02      	ldr	r6, [sp, #8]
 8010966:	1aac      	subs	r4, r5, r2
 8010968:	18aa      	adds	r2, r5, r2
 801096a:	53bc      	strh	r4, [r7, r6]
 801096c:	8042      	strh	r2, [r0, #2]
 801096e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010970:	1ac9      	subs	r1, r1, r3
 8010972:	4694      	mov	ip, r2
 8010974:	9b05      	ldr	r3, [sp, #20]
 8010976:	8001      	strh	r1, [r0, #0]
 8010978:	4463      	add	r3, ip
 801097a:	9a03      	ldr	r2, [sp, #12]
 801097c:	0019      	movs	r1, r3
 801097e:	9305      	str	r3, [sp, #20]
 8010980:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010982:	4694      	mov	ip, r2
 8010984:	001c      	movs	r4, r3
 8010986:	003b      	movs	r3, r7
 8010988:	4463      	add	r3, ip
 801098a:	9301      	str	r3, [sp, #4]
 801098c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801098e:	4464      	add	r4, ip
 8010990:	9420      	str	r4, [sp, #128]	@ 0x80
 8010992:	4460      	add	r0, ip
 8010994:	001a      	movs	r2, r3
 8010996:	428a      	cmp	r2, r1
 8010998:	d364      	bcc.n	8010a64 <arm_radix4_butterfly_q15+0x710>
 801099a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801099c:	2200      	movs	r2, #0
 801099e:	5e9d      	ldrsh	r5, [r3, r2]
 80109a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109a2:	5e99      	ldrsh	r1, [r3, r2]
 80109a4:	186b      	adds	r3, r5, r1
 80109a6:	469c      	mov	ip, r3
 80109a8:	455b      	cmp	r3, fp
 80109aa:	dd00      	ble.n	80109ae <arm_radix4_butterfly_q15+0x65a>
 80109ac:	4b37      	ldr	r3, [pc, #220]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 80109ae:	46e0      	mov	r8, ip
 80109b0:	45d4      	cmp	ip, sl
 80109b2:	da01      	bge.n	80109b8 <arm_radix4_butterfly_q15+0x664>
 80109b4:	4a36      	ldr	r2, [pc, #216]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 80109b6:	4690      	mov	r8, r2
 80109b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80109ba:	9e01      	ldr	r6, [sp, #4]
 80109bc:	2402      	movs	r4, #2
 80109be:	5f14      	ldrsh	r4, [r2, r4]
 80109c0:	9a02      	ldr	r2, [sp, #8]
 80109c2:	5eb2      	ldrsh	r2, [r6, r2]
 80109c4:	18a7      	adds	r7, r4, r2
 80109c6:	9709      	str	r7, [sp, #36]	@ 0x24
 80109c8:	455f      	cmp	r7, fp
 80109ca:	dd01      	ble.n	80109d0 <arm_radix4_butterfly_q15+0x67c>
 80109cc:	4e2f      	ldr	r6, [pc, #188]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 80109ce:	9609      	str	r6, [sp, #36]	@ 0x24
 80109d0:	9708      	str	r7, [sp, #32]
 80109d2:	4557      	cmp	r7, sl
 80109d4:	da01      	bge.n	80109da <arm_radix4_butterfly_q15+0x686>
 80109d6:	4e2e      	ldr	r6, [pc, #184]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 80109d8:	9608      	str	r6, [sp, #32]
 80109da:	1a69      	subs	r1, r5, r1
 80109dc:	9107      	str	r1, [sp, #28]
 80109de:	4559      	cmp	r1, fp
 80109e0:	dd01      	ble.n	80109e6 <arm_radix4_butterfly_q15+0x692>
 80109e2:	4d2a      	ldr	r5, [pc, #168]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 80109e4:	9507      	str	r5, [sp, #28]
 80109e6:	9106      	str	r1, [sp, #24]
 80109e8:	4551      	cmp	r1, sl
 80109ea:	da01      	bge.n	80109f0 <arm_radix4_butterfly_q15+0x69c>
 80109ec:	4d28      	ldr	r5, [pc, #160]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 80109ee:	9506      	str	r5, [sp, #24]
 80109f0:	1aa2      	subs	r2, r4, r2
 80109f2:	920d      	str	r2, [sp, #52]	@ 0x34
 80109f4:	455a      	cmp	r2, fp
 80109f6:	dd01      	ble.n	80109fc <arm_radix4_butterfly_q15+0x6a8>
 80109f8:	4c24      	ldr	r4, [pc, #144]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 80109fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80109fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80109fe:	4552      	cmp	r2, sl
 8010a00:	da01      	bge.n	8010a06 <arm_radix4_butterfly_q15+0x6b2>
 8010a02:	4c23      	ldr	r4, [pc, #140]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 8010a04:	940a      	str	r4, [sp, #40]	@ 0x28
 8010a06:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8010a08:	9d02      	ldr	r5, [sp, #8]
 8010a0a:	5f65      	ldrsh	r5, [r4, r5]
 8010a0c:	2600      	movs	r6, #0
 8010a0e:	5f84      	ldrsh	r4, [r0, r6]
 8010a10:	192d      	adds	r5, r5, r4
 8010a12:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010a14:	455d      	cmp	r5, fp
 8010a16:	dd01      	ble.n	8010a1c <arm_radix4_butterfly_q15+0x6c8>
 8010a18:	4c1c      	ldr	r4, [pc, #112]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 8010a1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010a1c:	950c      	str	r5, [sp, #48]	@ 0x30
 8010a1e:	4555      	cmp	r5, sl
 8010a20:	da01      	bge.n	8010a26 <arm_radix4_butterfly_q15+0x6d2>
 8010a22:	4c1b      	ldr	r4, [pc, #108]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 8010a24:	940c      	str	r4, [sp, #48]	@ 0x30
 8010a26:	9c01      	ldr	r4, [sp, #4]
 8010a28:	2600      	movs	r6, #0
 8010a2a:	5fa4      	ldrsh	r4, [r4, r6]
 8010a2c:	46a1      	mov	r9, r4
 8010a2e:	2602      	movs	r6, #2
 8010a30:	5f84      	ldrsh	r4, [r0, r6]
 8010a32:	444c      	add	r4, r9
 8010a34:	46a1      	mov	r9, r4
 8010a36:	455c      	cmp	r4, fp
 8010a38:	dd01      	ble.n	8010a3e <arm_radix4_butterfly_q15+0x6ea>
 8010a3a:	4e14      	ldr	r6, [pc, #80]	@ (8010a8c <arm_radix4_butterfly_q15+0x738>)
 8010a3c:	46b1      	mov	r9, r6
 8010a3e:	9404      	str	r4, [sp, #16]
 8010a40:	4554      	cmp	r4, sl
 8010a42:	da01      	bge.n	8010a48 <arm_radix4_butterfly_q15+0x6f4>
 8010a44:	4e12      	ldr	r6, [pc, #72]	@ (8010a90 <arm_radix4_butterfly_q15+0x73c>)
 8010a46:	9604      	str	r6, [sp, #16]
 8010a48:	4666      	mov	r6, ip
 8010a4a:	2e00      	cmp	r6, #0
 8010a4c:	dd00      	ble.n	8010a50 <arm_radix4_butterfly_q15+0x6fc>
 8010a4e:	e71d      	b.n	801088c <arm_radix4_butterfly_q15+0x538>
 8010a50:	4643      	mov	r3, r8
 8010a52:	b21b      	sxth	r3, r3
 8010a54:	105b      	asrs	r3, r3, #1
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	469c      	mov	ip, r3
 8010a5a:	2d00      	cmp	r5, #0
 8010a5c:	dd00      	ble.n	8010a60 <arm_radix4_butterfly_q15+0x70c>
 8010a5e:	e71c      	b.n	801089a <arm_radix4_butterfly_q15+0x546>
 8010a60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a62:	e71b      	b.n	801089c <arm_radix4_butterfly_q15+0x548>
 8010a64:	b02b      	add	sp, #172	@ 0xac
 8010a66:	bc3c      	pop	{r2, r3, r4, r5}
 8010a68:	4690      	mov	r8, r2
 8010a6a:	4699      	mov	r9, r3
 8010a6c:	46a2      	mov	sl, r4
 8010a6e:	46ab      	mov	fp, r5
 8010a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a72:	464a      	mov	r2, r9
 8010a74:	e772      	b.n	801095c <arm_radix4_butterfly_q15+0x608>
 8010a76:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010a78:	e769      	b.n	801094e <arm_radix4_butterfly_q15+0x5fa>
 8010a7a:	003b      	movs	r3, r7
 8010a7c:	e75c      	b.n	8010938 <arm_radix4_butterfly_q15+0x5e4>
 8010a7e:	9906      	ldr	r1, [sp, #24]
 8010a80:	468c      	mov	ip, r1
 8010a82:	e752      	b.n	801092a <arm_radix4_butterfly_q15+0x5d6>
 8010a84:	9b04      	ldr	r3, [sp, #16]
 8010a86:	e71b      	b.n	80108c0 <arm_radix4_butterfly_q15+0x56c>
 8010a88:	9b08      	ldr	r3, [sp, #32]
 8010a8a:	e712      	b.n	80108b2 <arm_radix4_butterfly_q15+0x55e>
 8010a8c:	00007fff 	.word	0x00007fff
 8010a90:	ffff8000 	.word	0xffff8000

08010a94 <arm_radix4_butterfly_inverse_q15>:
 8010a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a96:	4656      	mov	r6, sl
 8010a98:	464d      	mov	r5, r9
 8010a9a:	465f      	mov	r7, fp
 8010a9c:	4644      	mov	r4, r8
 8010a9e:	b4f0      	push	{r4, r5, r6, r7}
 8010aa0:	b0a7      	sub	sp, #156	@ 0x9c
 8010aa2:	9111      	str	r1, [sp, #68]	@ 0x44
 8010aa4:	0889      	lsrs	r1, r1, #2
 8010aa6:	000d      	movs	r5, r1
 8010aa8:	911e      	str	r1, [sp, #120]	@ 0x78
 8010aaa:	0001      	movs	r1, r0
 8010aac:	9024      	str	r0, [sp, #144]	@ 0x90
 8010aae:	901c      	str	r0, [sp, #112]	@ 0x70
 8010ab0:	00a8      	lsls	r0, r5, #2
 8010ab2:	0004      	movs	r4, r0
 8010ab4:	9002      	str	r0, [sp, #8]
 8010ab6:	0008      	movs	r0, r1
 8010ab8:	4682      	mov	sl, r0
 8010aba:	0016      	movs	r6, r2
 8010abc:	9225      	str	r2, [sp, #148]	@ 0x94
 8010abe:	1ca2      	adds	r2, r4, #2
 8010ac0:	4689      	mov	r9, r1
 8010ac2:	4492      	add	sl, r2
 8010ac4:	00d9      	lsls	r1, r3, #3
 8010ac6:	005a      	lsls	r2, r3, #1
 8010ac8:	9106      	str	r1, [sp, #24]
 8010aca:	0099      	lsls	r1, r3, #2
 8010acc:	18d3      	adds	r3, r2, r3
 8010ace:	46a4      	mov	ip, r4
 8010ad0:	9105      	str	r1, [sp, #20]
 8010ad2:	0099      	lsls	r1, r3, #2
 8010ad4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ad6:	00e9      	lsls	r1, r5, #3
 8010ad8:	468b      	mov	fp, r1
 8010ada:	44e1      	add	r9, ip
 8010adc:	44cc      	add	ip, r9
 8010ade:	4661      	mov	r1, ip
 8010ae0:	465b      	mov	r3, fp
 8010ae2:	9601      	str	r6, [sp, #4]
 8010ae4:	9603      	str	r6, [sp, #12]
 8010ae6:	9604      	str	r6, [sp, #16]
 8010ae8:	464a      	mov	r2, r9
 8010aea:	0006      	movs	r6, r0
 8010aec:	4650      	mov	r0, sl
 8010aee:	9108      	str	r1, [sp, #32]
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	2300      	movs	r3, #0
 8010af4:	5ef1      	ldrsh	r1, [r6, r3]
 8010af6:	9c02      	ldr	r4, [sp, #8]
 8010af8:	108b      	asrs	r3, r1, #2
 8010afa:	4698      	mov	r8, r3
 8010afc:	2102      	movs	r1, #2
 8010afe:	5e73      	ldrsh	r3, [r6, r1]
 8010b00:	0037      	movs	r7, r6
 8010b02:	109b      	asrs	r3, r3, #2
 8010b04:	469c      	mov	ip, r3
 8010b06:	0023      	movs	r3, r4
 8010b08:	5ed1      	ldrsh	r1, [r2, r3]
 8010b0a:	5f03      	ldrsh	r3, [r0, r4]
 8010b0c:	4645      	mov	r5, r8
 8010b0e:	1089      	asrs	r1, r1, #2
 8010b10:	1a6d      	subs	r5, r5, r1
 8010b12:	46ab      	mov	fp, r5
 8010b14:	4665      	mov	r5, ip
 8010b16:	109b      	asrs	r3, r3, #2
 8010b18:	1aed      	subs	r5, r5, r3
 8010b1a:	9507      	str	r5, [sp, #28]
 8010b1c:	2600      	movs	r6, #0
 8010b1e:	5f95      	ldrsh	r5, [r2, r6]
 8010b20:	4441      	add	r1, r8
 8010b22:	10ae      	asrs	r6, r5, #2
 8010b24:	46b2      	mov	sl, r6
 8010b26:	2600      	movs	r6, #0
 8010b28:	5f84      	ldrsh	r4, [r0, r6]
 8010b2a:	4463      	add	r3, ip
 8010b2c:	10a6      	asrs	r6, r4, #2
 8010b2e:	46b1      	mov	r9, r6
 8010b30:	9c00      	ldr	r4, [sp, #0]
 8010b32:	5f15      	ldrsh	r5, [r2, r4]
 8010b34:	5f04      	ldrsh	r4, [r0, r4]
 8010b36:	10ad      	asrs	r5, r5, #2
 8010b38:	4455      	add	r5, sl
 8010b3a:	104e      	asrs	r6, r1, #1
 8010b3c:	10a4      	asrs	r4, r4, #2
 8010b3e:	444c      	add	r4, r9
 8010b40:	46b1      	mov	r9, r6
 8010b42:	106e      	asrs	r6, r5, #1
 8010b44:	46b0      	mov	r8, r6
 8010b46:	44c8      	add	r8, r9
 8010b48:	4646      	mov	r6, r8
 8010b4a:	803e      	strh	r6, [r7, #0]
 8010b4c:	105e      	asrs	r6, r3, #1
 8010b4e:	46b4      	mov	ip, r6
 8010b50:	1066      	asrs	r6, r4, #1
 8010b52:	46b0      	mov	r8, r6
 8010b54:	44e0      	add	r8, ip
 8010b56:	4646      	mov	r6, r8
 8010b58:	1b49      	subs	r1, r1, r5
 8010b5a:	9d04      	ldr	r5, [sp, #16]
 8010b5c:	807e      	strh	r6, [r7, #2]
 8010b5e:	1b1b      	subs	r3, r3, r4
 8010b60:	2400      	movs	r4, #0
 8010b62:	5f2e      	ldrsh	r6, [r5, r4]
 8010b64:	46b1      	mov	r9, r6
 8010b66:	2600      	movs	r6, #0
 8010b68:	5f94      	ldrsh	r4, [r2, r6]
 8010b6a:	2602      	movs	r6, #2
 8010b6c:	5fad      	ldrsh	r5, [r5, r6]
 8010b6e:	10a6      	asrs	r6, r4, #2
 8010b70:	46b4      	mov	ip, r6
 8010b72:	2600      	movs	r6, #0
 8010b74:	5f84      	ldrsh	r4, [r0, r6]
 8010b76:	10a6      	asrs	r6, r4, #2
 8010b78:	46b2      	mov	sl, r6
 8010b7a:	464c      	mov	r4, r9
 8010b7c:	001e      	movs	r6, r3
 8010b7e:	434c      	muls	r4, r1
 8010b80:	436e      	muls	r6, r5
 8010b82:	1ba4      	subs	r4, r4, r6
 8010b84:	464e      	mov	r6, r9
 8010b86:	4369      	muls	r1, r5
 8010b88:	4373      	muls	r3, r6
 8010b8a:	18cb      	adds	r3, r1, r3
 8010b8c:	1424      	asrs	r4, r4, #16
 8010b8e:	141b      	asrs	r3, r3, #16
 8010b90:	8014      	strh	r4, [r2, #0]
 8010b92:	8003      	strh	r3, [r0, #0]
 8010b94:	9b00      	ldr	r3, [sp, #0]
 8010b96:	9d07      	ldr	r5, [sp, #28]
 8010b98:	5ed3      	ldrsh	r3, [r2, r3]
 8010b9a:	4661      	mov	r1, ip
 8010b9c:	109b      	asrs	r3, r3, #2
 8010b9e:	1acb      	subs	r3, r1, r3
 8010ba0:	9900      	ldr	r1, [sp, #0]
 8010ba2:	1aec      	subs	r4, r5, r3
 8010ba4:	5e41      	ldrsh	r1, [r0, r1]
 8010ba6:	4656      	mov	r6, sl
 8010ba8:	1089      	asrs	r1, r1, #2
 8010baa:	1a71      	subs	r1, r6, r1
 8010bac:	465e      	mov	r6, fp
 8010bae:	9407      	str	r4, [sp, #28]
 8010bb0:	9c03      	ldr	r4, [sp, #12]
 8010bb2:	46ac      	mov	ip, r5
 8010bb4:	4688      	mov	r8, r1
 8010bb6:	1a71      	subs	r1, r6, r1
 8010bb8:	2500      	movs	r5, #0
 8010bba:	5f66      	ldrsh	r6, [r4, r5]
 8010bbc:	4463      	add	r3, ip
 8010bbe:	46b1      	mov	r9, r6
 8010bc0:	2502      	movs	r5, #2
 8010bc2:	5f66      	ldrsh	r6, [r4, r5]
 8010bc4:	9c02      	ldr	r4, [sp, #8]
 8010bc6:	46b4      	mov	ip, r6
 8010bc8:	464e      	mov	r6, r9
 8010bca:	434e      	muls	r6, r1
 8010bcc:	0035      	movs	r5, r6
 8010bce:	4666      	mov	r6, ip
 8010bd0:	435e      	muls	r6, r3
 8010bd2:	1bad      	subs	r5, r5, r6
 8010bd4:	4666      	mov	r6, ip
 8010bd6:	4371      	muls	r1, r6
 8010bd8:	464e      	mov	r6, r9
 8010bda:	4373      	muls	r3, r6
 8010bdc:	18cb      	adds	r3, r1, r3
 8010bde:	142d      	asrs	r5, r5, #16
 8010be0:	141b      	asrs	r3, r3, #16
 8010be2:	5315      	strh	r5, [r2, r4]
 8010be4:	5303      	strh	r3, [r0, r4]
 8010be6:	9b01      	ldr	r3, [sp, #4]
 8010be8:	44d8      	add	r8, fp
 8010bea:	2600      	movs	r6, #0
 8010bec:	5f99      	ldrsh	r1, [r3, r6]
 8010bee:	2602      	movs	r6, #2
 8010bf0:	5f9d      	ldrsh	r5, [r3, r6]
 8010bf2:	4646      	mov	r6, r8
 8010bf4:	434e      	muls	r6, r1
 8010bf6:	9c07      	ldr	r4, [sp, #28]
 8010bf8:	0033      	movs	r3, r6
 8010bfa:	0026      	movs	r6, r4
 8010bfc:	436e      	muls	r6, r5
 8010bfe:	1b9b      	subs	r3, r3, r6
 8010c00:	9e00      	ldr	r6, [sp, #0]
 8010c02:	141b      	asrs	r3, r3, #16
 8010c04:	5393      	strh	r3, [r2, r6]
 8010c06:	4646      	mov	r6, r8
 8010c08:	434c      	muls	r4, r1
 8010c0a:	436e      	muls	r6, r5
 8010c0c:	9900      	ldr	r1, [sp, #0]
 8010c0e:	1933      	adds	r3, r6, r4
 8010c10:	141b      	asrs	r3, r3, #16
 8010c12:	5243      	strh	r3, [r0, r1]
 8010c14:	9906      	ldr	r1, [sp, #24]
 8010c16:	9d04      	ldr	r5, [sp, #16]
 8010c18:	468c      	mov	ip, r1
 8010c1a:	9905      	ldr	r1, [sp, #20]
 8010c1c:	4465      	add	r5, ip
 8010c1e:	468c      	mov	ip, r1
 8010c20:	003b      	movs	r3, r7
 8010c22:	9c03      	ldr	r4, [sp, #12]
 8010c24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c26:	4464      	add	r4, ip
 8010c28:	468c      	mov	ip, r1
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	001e      	movs	r6, r3
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	3204      	adds	r2, #4
 8010c32:	4463      	add	r3, ip
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	9b08      	ldr	r3, [sp, #32]
 8010c38:	3004      	adds	r0, #4
 8010c3a:	9504      	str	r5, [sp, #16]
 8010c3c:	9403      	str	r4, [sp, #12]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d000      	beq.n	8010c44 <arm_radix4_butterfly_inverse_q15+0x1b0>
 8010c42:	e756      	b.n	8010af2 <arm_radix4_butterfly_inverse_q15+0x5e>
 8010c44:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010c46:	9b05      	ldr	r3, [sp, #20]
 8010c48:	2a04      	cmp	r2, #4
 8010c4a:	d800      	bhi.n	8010c4e <arm_radix4_butterfly_inverse_q15+0x1ba>
 8010c4c:	e188      	b.n	8010f60 <arm_radix4_butterfly_inverse_q15+0x4cc>
 8010c4e:	9215      	str	r2, [sp, #84]	@ 0x54
 8010c50:	9223      	str	r2, [sp, #140]	@ 0x8c
 8010c52:	4ad1      	ldr	r2, [pc, #836]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010c54:	4692      	mov	sl, r2
 8010c56:	4ad1      	ldr	r2, [pc, #836]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010c58:	4693      	mov	fp, r2
 8010c5a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010c5c:	0892      	lsrs	r2, r2, #2
 8010c5e:	0011      	movs	r1, r2
 8010c60:	921e      	str	r2, [sp, #120]	@ 0x78
 8010c62:	3a01      	subs	r2, #1
 8010c64:	9220      	str	r2, [sp, #128]	@ 0x80
 8010c66:	009a      	lsls	r2, r3, #2
 8010c68:	921d      	str	r2, [sp, #116]	@ 0x74
 8010c6a:	00da      	lsls	r2, r3, #3
 8010c6c:	921f      	str	r2, [sp, #124]	@ 0x7c
 8010c6e:	005a      	lsls	r2, r3, #1
 8010c70:	18d3      	adds	r3, r2, r3
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	9321      	str	r3, [sp, #132]	@ 0x84
 8010c76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	9316      	str	r3, [sp, #88]	@ 0x58
 8010c7c:	00cb      	lsls	r3, r1, #3
 8010c7e:	4699      	mov	r9, r3
 8010c80:	008b      	lsls	r3, r1, #2
 8010c82:	9302      	str	r3, [sp, #8]
 8010c84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010c86:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010c88:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8010c8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8010c8e:	9318      	str	r3, [sp, #96]	@ 0x60
 8010c90:	2300      	movs	r3, #0
 8010c92:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010c94:	464b      	mov	r3, r9
 8010c96:	3302      	adds	r3, #2
 8010c98:	9322      	str	r3, [sp, #136]	@ 0x88
 8010c9a:	464b      	mov	r3, r9
 8010c9c:	9301      	str	r3, [sp, #4]
 8010c9e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	5e5a      	ldrsh	r2, [r3, r1]
 8010ca4:	9207      	str	r2, [sp, #28]
 8010ca6:	2202      	movs	r2, #2
 8010ca8:	5e9b      	ldrsh	r3, [r3, r2]
 8010caa:	9308      	str	r3, [sp, #32]
 8010cac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cae:	2100      	movs	r1, #0
 8010cb0:	5e5a      	ldrsh	r2, [r3, r1]
 8010cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	5e9b      	ldrsh	r3, [r3, r2]
 8010cb8:	9312      	str	r3, [sp, #72]	@ 0x48
 8010cba:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010cbc:	2100      	movs	r1, #0
 8010cbe:	5e5a      	ldrsh	r2, [r3, r1]
 8010cc0:	9213      	str	r2, [sp, #76]	@ 0x4c
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	5e9b      	ldrsh	r3, [r3, r2]
 8010cc6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010cc8:	9314      	str	r3, [sp, #80]	@ 0x50
 8010cca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d800      	bhi.n	8010cd2 <arm_radix4_butterfly_inverse_q15+0x23e>
 8010cd0:	e124      	b.n	8010f1c <arm_radix4_butterfly_inverse_q15+0x488>
 8010cd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010cd4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010cd6:	0019      	movs	r1, r3
 8010cd8:	9b02      	ldr	r3, [sp, #8]
 8010cda:	4694      	mov	ip, r2
 8010cdc:	4699      	mov	r9, r3
 8010cde:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010ce0:	44e1      	add	r9, ip
 8010ce2:	920a      	str	r2, [sp, #40]	@ 0x28
 8010ce4:	464a      	mov	r2, r9
 8010ce6:	4461      	add	r1, ip
 8010ce8:	4688      	mov	r8, r1
 8010cea:	9200      	str	r2, [sp, #0]
 8010cec:	46e1      	mov	r9, ip
 8010cee:	e0a3      	b.n	8010e38 <arm_radix4_butterfly_inverse_q15+0x3a4>
 8010cf0:	b200      	sxth	r0, r0
 8010cf2:	1040      	asrs	r0, r0, #1
 8010cf4:	2e00      	cmp	r6, #0
 8010cf6:	dc00      	bgt.n	8010cfa <arm_radix4_butterfly_inverse_q15+0x266>
 8010cf8:	e102      	b.n	8010f00 <arm_radix4_butterfly_inverse_q15+0x46c>
 8010cfa:	4649      	mov	r1, r9
 8010cfc:	b212      	sxth	r2, r2
 8010cfe:	1052      	asrs	r2, r2, #1
 8010d00:	1886      	adds	r6, r0, r2
 8010d02:	1076      	asrs	r6, r6, #1
 8010d04:	800e      	strh	r6, [r1, #0]
 8010d06:	9e04      	ldr	r6, [sp, #16]
 8010d08:	2f00      	cmp	r7, #0
 8010d0a:	dc00      	bgt.n	8010d0e <arm_radix4_butterfly_inverse_q15+0x27a>
 8010d0c:	e104      	b.n	8010f18 <arm_radix4_butterfly_inverse_q15+0x484>
 8010d0e:	b236      	sxth	r6, r6
 8010d10:	1076      	asrs	r6, r6, #1
 8010d12:	2d00      	cmp	r5, #0
 8010d14:	dc00      	bgt.n	8010d18 <arm_radix4_butterfly_inverse_q15+0x284>
 8010d16:	e0fd      	b.n	8010f14 <arm_radix4_butterfly_inverse_q15+0x480>
 8010d18:	4649      	mov	r1, r9
 8010d1a:	b21b      	sxth	r3, r3
 8010d1c:	105b      	asrs	r3, r3, #1
 8010d1e:	18f5      	adds	r5, r6, r3
 8010d20:	106d      	asrs	r5, r5, #1
 8010d22:	804d      	strh	r5, [r1, #2]
 8010d24:	9900      	ldr	r1, [sp, #0]
 8010d26:	1a80      	subs	r0, r0, r2
 8010d28:	000a      	movs	r2, r1
 8010d2a:	2500      	movs	r5, #0
 8010d2c:	5f55      	ldrsh	r5, [r2, r5]
 8010d2e:	000a      	movs	r2, r1
 8010d30:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010d32:	1af3      	subs	r3, r6, r3
 8010d34:	2602      	movs	r6, #2
 8010d36:	5f96      	ldrsh	r6, [r2, r6]
 8010d38:	000a      	movs	r2, r1
 8010d3a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010d3c:	435a      	muls	r2, r3
 8010d3e:	4347      	muls	r7, r0
 8010d40:	1abf      	subs	r7, r7, r2
 8010d42:	9a00      	ldr	r2, [sp, #0]
 8010d44:	143f      	asrs	r7, r7, #16
 8010d46:	8017      	strh	r7, [r2, #0]
 8010d48:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010d4a:	4348      	muls	r0, r1
 8010d4c:	437b      	muls	r3, r7
 8010d4e:	9a00      	ldr	r2, [sp, #0]
 8010d50:	18c0      	adds	r0, r0, r3
 8010d52:	1400      	asrs	r0, r0, #16
 8010d54:	9b01      	ldr	r3, [sp, #4]
 8010d56:	8050      	strh	r0, [r2, #2]
 8010d58:	5ed3      	ldrsh	r3, [r2, r3]
 8010d5a:	1aed      	subs	r5, r5, r3
 8010d5c:	0028      	movs	r0, r5
 8010d5e:	4555      	cmp	r5, sl
 8010d60:	dd00      	ble.n	8010d64 <arm_radix4_butterfly_inverse_q15+0x2d0>
 8010d62:	488d      	ldr	r0, [pc, #564]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010d64:	002f      	movs	r7, r5
 8010d66:	455d      	cmp	r5, fp
 8010d68:	da00      	bge.n	8010d6c <arm_radix4_butterfly_inverse_q15+0x2d8>
 8010d6a:	4f8c      	ldr	r7, [pc, #560]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010d6c:	4643      	mov	r3, r8
 8010d6e:	9a02      	ldr	r2, [sp, #8]
 8010d70:	5e9b      	ldrsh	r3, [r3, r2]
 8010d72:	1af6      	subs	r6, r6, r3
 8010d74:	0033      	movs	r3, r6
 8010d76:	4556      	cmp	r6, sl
 8010d78:	dd00      	ble.n	8010d7c <arm_radix4_butterfly_inverse_q15+0x2e8>
 8010d7a:	4b87      	ldr	r3, [pc, #540]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010d7c:	46b4      	mov	ip, r6
 8010d7e:	455e      	cmp	r6, fp
 8010d80:	da01      	bge.n	8010d86 <arm_radix4_butterfly_inverse_q15+0x2f2>
 8010d82:	4a86      	ldr	r2, [pc, #536]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010d84:	4694      	mov	ip, r2
 8010d86:	9a06      	ldr	r2, [sp, #24]
 8010d88:	2c00      	cmp	r4, #0
 8010d8a:	dc00      	bgt.n	8010d8e <arm_radix4_butterfly_inverse_q15+0x2fa>
 8010d8c:	e0c0      	b.n	8010f10 <arm_radix4_butterfly_inverse_q15+0x47c>
 8010d8e:	b212      	sxth	r2, r2
 8010d90:	1052      	asrs	r2, r2, #1
 8010d92:	b292      	uxth	r2, r2
 8010d94:	2e00      	cmp	r6, #0
 8010d96:	dc00      	bgt.n	8010d9a <arm_radix4_butterfly_inverse_q15+0x306>
 8010d98:	e0b8      	b.n	8010f0c <arm_radix4_butterfly_inverse_q15+0x478>
 8010d9a:	b21c      	sxth	r4, r3
 8010d9c:	9903      	ldr	r1, [sp, #12]
 8010d9e:	1064      	asrs	r4, r4, #1
 8010da0:	b2a4      	uxth	r4, r4
 8010da2:	9b05      	ldr	r3, [sp, #20]
 8010da4:	2900      	cmp	r1, #0
 8010da6:	dc00      	bgt.n	8010daa <arm_radix4_butterfly_inverse_q15+0x316>
 8010da8:	e0ae      	b.n	8010f08 <arm_radix4_butterfly_inverse_q15+0x474>
 8010daa:	b21b      	sxth	r3, r3
 8010dac:	105b      	asrs	r3, r3, #1
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	9303      	str	r3, [sp, #12]
 8010db2:	2d00      	cmp	r5, #0
 8010db4:	dc00      	bgt.n	8010db8 <arm_radix4_butterfly_inverse_q15+0x324>
 8010db6:	e0a5      	b.n	8010f04 <arm_radix4_butterfly_inverse_q15+0x470>
 8010db8:	b200      	sxth	r0, r0
 8010dba:	1040      	asrs	r0, r0, #1
 8010dbc:	b280      	uxth	r0, r0
 8010dbe:	181d      	adds	r5, r3, r0
 8010dc0:	464b      	mov	r3, r9
 8010dc2:	1b16      	subs	r6, r2, r4
 8010dc4:	9f07      	ldr	r7, [sp, #28]
 8010dc6:	9908      	ldr	r1, [sp, #32]
 8010dc8:	b236      	sxth	r6, r6
 8010dca:	b22d      	sxth	r5, r5
 8010dcc:	4369      	muls	r1, r5
 8010dce:	4377      	muls	r7, r6
 8010dd0:	1a7f      	subs	r7, r7, r1
 8010dd2:	9901      	ldr	r1, [sp, #4]
 8010dd4:	143f      	asrs	r7, r7, #16
 8010dd6:	525f      	strh	r7, [r3, r1]
 8010dd8:	4643      	mov	r3, r8
 8010dda:	9908      	ldr	r1, [sp, #32]
 8010ddc:	9f07      	ldr	r7, [sp, #28]
 8010dde:	434e      	muls	r6, r1
 8010de0:	437d      	muls	r5, r7
 8010de2:	1976      	adds	r6, r6, r5
 8010de4:	1436      	asrs	r6, r6, #16
 8010de6:	801e      	strh	r6, [r3, #0]
 8010de8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010dea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010dec:	9b03      	ldr	r3, [sp, #12]
 8010dee:	1912      	adds	r2, r2, r4
 8010df0:	1a1b      	subs	r3, r3, r0
 8010df2:	002c      	movs	r4, r5
 8010df4:	0008      	movs	r0, r1
 8010df6:	b212      	sxth	r2, r2
 8010df8:	b21b      	sxth	r3, r3
 8010dfa:	435c      	muls	r4, r3
 8010dfc:	4350      	muls	r0, r2
 8010dfe:	434b      	muls	r3, r1
 8010e00:	436a      	muls	r2, r5
 8010e02:	18d2      	adds	r2, r2, r3
 8010e04:	4643      	mov	r3, r8
 8010e06:	9e00      	ldr	r6, [sp, #0]
 8010e08:	1b00      	subs	r0, r0, r4
 8010e0a:	9902      	ldr	r1, [sp, #8]
 8010e0c:	9c01      	ldr	r4, [sp, #4]
 8010e0e:	1412      	asrs	r2, r2, #16
 8010e10:	1400      	asrs	r0, r0, #16
 8010e12:	5330      	strh	r0, [r6, r4]
 8010e14:	525a      	strh	r2, [r3, r1]
 8010e16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010e18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e1a:	4694      	mov	ip, r2
 8010e1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010e1e:	4463      	add	r3, ip
 8010e20:	0019      	movs	r1, r3
 8010e22:	4694      	mov	ip, r2
 8010e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e26:	0033      	movs	r3, r6
 8010e28:	4463      	add	r3, ip
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010e2e:	44e1      	add	r9, ip
 8010e30:	44e0      	add	r8, ip
 8010e32:	001a      	movs	r2, r3
 8010e34:	428a      	cmp	r2, r1
 8010e36:	d971      	bls.n	8010f1c <arm_radix4_butterfly_inverse_q15+0x488>
 8010e38:	464b      	mov	r3, r9
 8010e3a:	2500      	movs	r5, #0
 8010e3c:	5f5d      	ldrsh	r5, [r3, r5]
 8010e3e:	464b      	mov	r3, r9
 8010e40:	9a01      	ldr	r2, [sp, #4]
 8010e42:	5e9c      	ldrsh	r4, [r3, r2]
 8010e44:	192b      	adds	r3, r5, r4
 8010e46:	469c      	mov	ip, r3
 8010e48:	0018      	movs	r0, r3
 8010e4a:	4553      	cmp	r3, sl
 8010e4c:	dd00      	ble.n	8010e50 <arm_radix4_butterfly_inverse_q15+0x3bc>
 8010e4e:	4852      	ldr	r0, [pc, #328]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010e50:	4663      	mov	r3, ip
 8010e52:	930d      	str	r3, [sp, #52]	@ 0x34
 8010e54:	45dc      	cmp	ip, fp
 8010e56:	da01      	bge.n	8010e5c <arm_radix4_butterfly_inverse_q15+0x3c8>
 8010e58:	4b50      	ldr	r3, [pc, #320]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010e5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8010e5c:	464b      	mov	r3, r9
 8010e5e:	2202      	movs	r2, #2
 8010e60:	5e9a      	ldrsh	r2, [r3, r2]
 8010e62:	4643      	mov	r3, r8
 8010e64:	2100      	movs	r1, #0
 8010e66:	5e5b      	ldrsh	r3, [r3, r1]
 8010e68:	18d7      	adds	r7, r2, r3
 8010e6a:	9704      	str	r7, [sp, #16]
 8010e6c:	4557      	cmp	r7, sl
 8010e6e:	dd01      	ble.n	8010e74 <arm_radix4_butterfly_inverse_q15+0x3e0>
 8010e70:	4949      	ldr	r1, [pc, #292]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010e72:	9104      	str	r1, [sp, #16]
 8010e74:	970c      	str	r7, [sp, #48]	@ 0x30
 8010e76:	455f      	cmp	r7, fp
 8010e78:	da01      	bge.n	8010e7e <arm_radix4_butterfly_inverse_q15+0x3ea>
 8010e7a:	4948      	ldr	r1, [pc, #288]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010e7c:	910c      	str	r1, [sp, #48]	@ 0x30
 8010e7e:	1b2c      	subs	r4, r5, r4
 8010e80:	9406      	str	r4, [sp, #24]
 8010e82:	4554      	cmp	r4, sl
 8010e84:	dd01      	ble.n	8010e8a <arm_radix4_butterfly_inverse_q15+0x3f6>
 8010e86:	4944      	ldr	r1, [pc, #272]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010e88:	9106      	str	r1, [sp, #24]
 8010e8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010e8c:	455c      	cmp	r4, fp
 8010e8e:	da01      	bge.n	8010e94 <arm_radix4_butterfly_inverse_q15+0x400>
 8010e90:	4942      	ldr	r1, [pc, #264]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010e92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010e94:	1ad3      	subs	r3, r2, r3
 8010e96:	9303      	str	r3, [sp, #12]
 8010e98:	9305      	str	r3, [sp, #20]
 8010e9a:	4553      	cmp	r3, sl
 8010e9c:	dd02      	ble.n	8010ea4 <arm_radix4_butterfly_inverse_q15+0x410>
 8010e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010ea0:	9305      	str	r3, [sp, #20]
 8010ea2:	9b03      	ldr	r3, [sp, #12]
 8010ea4:	930e      	str	r3, [sp, #56]	@ 0x38
 8010ea6:	455b      	cmp	r3, fp
 8010ea8:	da01      	bge.n	8010eae <arm_radix4_butterfly_inverse_q15+0x41a>
 8010eaa:	4b3c      	ldr	r3, [pc, #240]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010eac:	930e      	str	r3, [sp, #56]	@ 0x38
 8010eae:	9a00      	ldr	r2, [sp, #0]
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	5ed6      	ldrsh	r6, [r2, r3]
 8010eb4:	9b01      	ldr	r3, [sp, #4]
 8010eb6:	5ed3      	ldrsh	r3, [r2, r3]
 8010eb8:	18f6      	adds	r6, r6, r3
 8010eba:	0032      	movs	r2, r6
 8010ebc:	4556      	cmp	r6, sl
 8010ebe:	dd00      	ble.n	8010ec2 <arm_radix4_butterfly_inverse_q15+0x42e>
 8010ec0:	4a35      	ldr	r2, [pc, #212]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010ec2:	960f      	str	r6, [sp, #60]	@ 0x3c
 8010ec4:	455e      	cmp	r6, fp
 8010ec6:	da01      	bge.n	8010ecc <arm_radix4_butterfly_inverse_q15+0x438>
 8010ec8:	4b34      	ldr	r3, [pc, #208]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ecc:	9b00      	ldr	r3, [sp, #0]
 8010ece:	9902      	ldr	r1, [sp, #8]
 8010ed0:	2502      	movs	r5, #2
 8010ed2:	5f5d      	ldrsh	r5, [r3, r5]
 8010ed4:	4643      	mov	r3, r8
 8010ed6:	5e5b      	ldrsh	r3, [r3, r1]
 8010ed8:	18ed      	adds	r5, r5, r3
 8010eda:	002b      	movs	r3, r5
 8010edc:	4555      	cmp	r5, sl
 8010ede:	dd00      	ble.n	8010ee2 <arm_radix4_butterfly_inverse_q15+0x44e>
 8010ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010ee2:	9510      	str	r5, [sp, #64]	@ 0x40
 8010ee4:	455d      	cmp	r5, fp
 8010ee6:	da01      	bge.n	8010eec <arm_radix4_butterfly_inverse_q15+0x458>
 8010ee8:	492c      	ldr	r1, [pc, #176]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010eea:	9110      	str	r1, [sp, #64]	@ 0x40
 8010eec:	4661      	mov	r1, ip
 8010eee:	2900      	cmp	r1, #0
 8010ef0:	dd00      	ble.n	8010ef4 <arm_radix4_butterfly_inverse_q15+0x460>
 8010ef2:	e6fd      	b.n	8010cf0 <arm_radix4_butterfly_inverse_q15+0x25c>
 8010ef4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010ef6:	b200      	sxth	r0, r0
 8010ef8:	1040      	asrs	r0, r0, #1
 8010efa:	2e00      	cmp	r6, #0
 8010efc:	dd00      	ble.n	8010f00 <arm_radix4_butterfly_inverse_q15+0x46c>
 8010efe:	e6fc      	b.n	8010cfa <arm_radix4_butterfly_inverse_q15+0x266>
 8010f00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010f02:	e6fa      	b.n	8010cfa <arm_radix4_butterfly_inverse_q15+0x266>
 8010f04:	0038      	movs	r0, r7
 8010f06:	e757      	b.n	8010db8 <arm_radix4_butterfly_inverse_q15+0x324>
 8010f08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f0a:	e74e      	b.n	8010daa <arm_radix4_butterfly_inverse_q15+0x316>
 8010f0c:	4663      	mov	r3, ip
 8010f0e:	e744      	b.n	8010d9a <arm_radix4_butterfly_inverse_q15+0x306>
 8010f10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f12:	e73c      	b.n	8010d8e <arm_radix4_butterfly_inverse_q15+0x2fa>
 8010f14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f16:	e6ff      	b.n	8010d18 <arm_radix4_butterfly_inverse_q15+0x284>
 8010f18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f1a:	e6f8      	b.n	8010d0e <arm_radix4_butterfly_inverse_q15+0x27a>
 8010f1c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8010f1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010f20:	468c      	mov	ip, r1
 8010f22:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8010f24:	4462      	add	r2, ip
 8010f26:	468c      	mov	ip, r1
 8010f28:	9218      	str	r2, [sp, #96]	@ 0x60
 8010f2a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010f2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f2e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f30:	4462      	add	r2, ip
 8010f32:	468c      	mov	ip, r1
 8010f34:	9219      	str	r2, [sp, #100]	@ 0x64
 8010f36:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010f38:	3301      	adds	r3, #1
 8010f3a:	4462      	add	r2, ip
 8010f3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8010f3e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010f40:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010f42:	3204      	adds	r2, #4
 8010f44:	921b      	str	r2, [sp, #108]	@ 0x6c
 8010f46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d800      	bhi.n	8010f4e <arm_radix4_butterfly_inverse_q15+0x4ba>
 8010f4c:	e6a7      	b.n	8010c9e <arm_radix4_butterfly_inverse_q15+0x20a>
 8010f4e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f50:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010f52:	0892      	lsrs	r2, r2, #2
 8010f54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010f56:	9223      	str	r2, [sp, #140]	@ 0x8c
 8010f58:	9115      	str	r1, [sp, #84]	@ 0x54
 8010f5a:	2a04      	cmp	r2, #4
 8010f5c:	d900      	bls.n	8010f60 <arm_radix4_butterfly_inverse_q15+0x4cc>
 8010f5e:	e67c      	b.n	8010c5a <arm_radix4_butterfly_inverse_q15+0x1c6>
 8010f60:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010f62:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010f64:	0893      	lsrs	r3, r2, #2
 8010f66:	0058      	lsls	r0, r3, #1
 8010f68:	1a8a      	subs	r2, r1, r2
 8010f6a:	18c0      	adds	r0, r0, r3
 8010f6c:	920e      	str	r2, [sp, #56]	@ 0x38
 8010f6e:	009a      	lsls	r2, r3, #2
 8010f70:	00db      	lsls	r3, r3, #3
 8010f72:	930d      	str	r3, [sp, #52]	@ 0x34
 8010f74:	2300      	movs	r3, #0
 8010f76:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8010f78:	9304      	str	r3, [sp, #16]
 8010f7a:	46a1      	mov	r9, r4
 8010f7c:	4b06      	ldr	r3, [pc, #24]	@ (8010f98 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010f7e:	9201      	str	r2, [sp, #4]
 8010f80:	469b      	mov	fp, r3
 8010f82:	3202      	adds	r2, #2
 8010f84:	4b05      	ldr	r3, [pc, #20]	@ (8010f9c <arm_radix4_butterfly_inverse_q15+0x508>)
 8010f86:	4491      	add	r9, r2
 8010f88:	46a0      	mov	r8, r4
 8010f8a:	469a      	mov	sl, r3
 8010f8c:	464b      	mov	r3, r9
 8010f8e:	0080      	lsls	r0, r0, #2
 8010f90:	4480      	add	r8, r0
 8010f92:	4640      	mov	r0, r8
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	e08a      	b.n	80110ae <arm_radix4_butterfly_inverse_q15+0x61a>
 8010f98:	00007fff 	.word	0x00007fff
 8010f9c:	ffff8000 	.word	0xffff8000
 8010fa0:	b21b      	sxth	r3, r3
 8010fa2:	105b      	asrs	r3, r3, #1
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	469c      	mov	ip, r3
 8010fa8:	2d00      	cmp	r5, #0
 8010faa:	dc00      	bgt.n	8010fae <arm_radix4_butterfly_inverse_q15+0x51a>
 8010fac:	e0e2      	b.n	8011174 <arm_radix4_butterfly_inverse_q15+0x6e0>
 8010fae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fb0:	b21b      	sxth	r3, r3
 8010fb2:	105b      	asrs	r3, r3, #1
 8010fb4:	b29d      	uxth	r5, r3
 8010fb6:	4663      	mov	r3, ip
 8010fb8:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010fba:	195b      	adds	r3, r3, r5
 8010fbc:	8033      	strh	r3, [r6, #0]
 8010fbe:	9b08      	ldr	r3, [sp, #32]
 8010fc0:	2f00      	cmp	r7, #0
 8010fc2:	dc00      	bgt.n	8010fc6 <arm_radix4_butterfly_inverse_q15+0x532>
 8010fc4:	e0ea      	b.n	801119c <arm_radix4_butterfly_inverse_q15+0x708>
 8010fc6:	b21f      	sxth	r7, r3
 8010fc8:	107f      	asrs	r7, r7, #1
 8010fca:	b2bf      	uxth	r7, r7
 8010fcc:	464b      	mov	r3, r9
 8010fce:	2c00      	cmp	r4, #0
 8010fd0:	dc00      	bgt.n	8010fd4 <arm_radix4_butterfly_inverse_q15+0x540>
 8010fd2:	e0e1      	b.n	8011198 <arm_radix4_butterfly_inverse_q15+0x704>
 8010fd4:	b21c      	sxth	r4, r3
 8010fd6:	1064      	asrs	r4, r4, #1
 8010fd8:	b2a3      	uxth	r3, r4
 8010fda:	4699      	mov	r9, r3
 8010fdc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010fde:	18fb      	adds	r3, r7, r3
 8010fe0:	8073      	strh	r3, [r6, #2]
 8010fe2:	9b01      	ldr	r3, [sp, #4]
 8010fe4:	5ef3      	ldrsh	r3, [r6, r3]
 8010fe6:	4698      	mov	r8, r3
 8010fe8:	9b00      	ldr	r3, [sp, #0]
 8010fea:	2400      	movs	r4, #0
 8010fec:	5f1b      	ldrsh	r3, [r3, r4]
 8010fee:	464c      	mov	r4, r9
 8010ff0:	9303      	str	r3, [sp, #12]
 8010ff2:	4663      	mov	r3, ip
 8010ff4:	1b5b      	subs	r3, r3, r5
 8010ff6:	9d01      	ldr	r5, [sp, #4]
 8010ff8:	1b3f      	subs	r7, r7, r4
 8010ffa:	5373      	strh	r3, [r6, r5]
 8010ffc:	9b00      	ldr	r3, [sp, #0]
 8010ffe:	801f      	strh	r7, [r3, #0]
 8011000:	2300      	movs	r3, #0
 8011002:	5ec4      	ldrsh	r4, [r0, r3]
 8011004:	4643      	mov	r3, r8
 8011006:	1b1c      	subs	r4, r3, r4
 8011008:	46a0      	mov	r8, r4
 801100a:	455c      	cmp	r4, fp
 801100c:	dd01      	ble.n	8011012 <arm_radix4_butterfly_inverse_q15+0x57e>
 801100e:	4b64      	ldr	r3, [pc, #400]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8011010:	4698      	mov	r8, r3
 8011012:	46a1      	mov	r9, r4
 8011014:	4554      	cmp	r4, sl
 8011016:	da01      	bge.n	801101c <arm_radix4_butterfly_inverse_q15+0x588>
 8011018:	4b62      	ldr	r3, [pc, #392]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 801101a:	4699      	mov	r9, r3
 801101c:	2302      	movs	r3, #2
 801101e:	5ec5      	ldrsh	r5, [r0, r3]
 8011020:	9b03      	ldr	r3, [sp, #12]
 8011022:	1b5d      	subs	r5, r3, r5
 8011024:	002b      	movs	r3, r5
 8011026:	455d      	cmp	r5, fp
 8011028:	dd00      	ble.n	801102c <arm_radix4_butterfly_inverse_q15+0x598>
 801102a:	4b5d      	ldr	r3, [pc, #372]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 801102c:	002f      	movs	r7, r5
 801102e:	4555      	cmp	r5, sl
 8011030:	da00      	bge.n	8011034 <arm_radix4_butterfly_inverse_q15+0x5a0>
 8011032:	4f5c      	ldr	r7, [pc, #368]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8011034:	9e06      	ldr	r6, [sp, #24]
 8011036:	46b4      	mov	ip, r6
 8011038:	2900      	cmp	r1, #0
 801103a:	dc00      	bgt.n	801103e <arm_radix4_butterfly_inverse_q15+0x5aa>
 801103c:	e0a9      	b.n	8011192 <arm_radix4_butterfly_inverse_q15+0x6fe>
 801103e:	4661      	mov	r1, ip
 8011040:	b209      	sxth	r1, r1
 8011042:	1049      	asrs	r1, r1, #1
 8011044:	b289      	uxth	r1, r1
 8011046:	2d00      	cmp	r5, #0
 8011048:	dc00      	bgt.n	801104c <arm_radix4_butterfly_inverse_q15+0x5b8>
 801104a:	e0a0      	b.n	801118e <arm_radix4_butterfly_inverse_q15+0x6fa>
 801104c:	b21b      	sxth	r3, r3
 801104e:	105b      	asrs	r3, r3, #1
 8011050:	b29b      	uxth	r3, r3
 8011052:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011054:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8011056:	1acd      	subs	r5, r1, r3
 8011058:	53f5      	strh	r5, [r6, r7]
 801105a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801105c:	2a00      	cmp	r2, #0
 801105e:	dc00      	bgt.n	8011062 <arm_radix4_butterfly_inverse_q15+0x5ce>
 8011060:	e093      	b.n	801118a <arm_radix4_butterfly_inverse_q15+0x6f6>
 8011062:	b22d      	sxth	r5, r5
 8011064:	106d      	asrs	r5, r5, #1
 8011066:	b2ad      	uxth	r5, r5
 8011068:	2c00      	cmp	r4, #0
 801106a:	dc00      	bgt.n	801106e <arm_radix4_butterfly_inverse_q15+0x5da>
 801106c:	e08b      	b.n	8011186 <arm_radix4_butterfly_inverse_q15+0x6f2>
 801106e:	4642      	mov	r2, r8
 8011070:	b212      	sxth	r2, r2
 8011072:	1052      	asrs	r2, r2, #1
 8011074:	9f00      	ldr	r7, [sp, #0]
 8011076:	b292      	uxth	r2, r2
 8011078:	9e01      	ldr	r6, [sp, #4]
 801107a:	18ac      	adds	r4, r5, r2
 801107c:	1aaa      	subs	r2, r5, r2
 801107e:	53bc      	strh	r4, [r7, r6]
 8011080:	8042      	strh	r2, [r0, #2]
 8011082:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8011084:	18c9      	adds	r1, r1, r3
 8011086:	4694      	mov	ip, r2
 8011088:	9b04      	ldr	r3, [sp, #16]
 801108a:	8001      	strh	r1, [r0, #0]
 801108c:	4463      	add	r3, ip
 801108e:	9a02      	ldr	r2, [sp, #8]
 8011090:	0019      	movs	r1, r3
 8011092:	9304      	str	r3, [sp, #16]
 8011094:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011096:	4694      	mov	ip, r2
 8011098:	001c      	movs	r4, r3
 801109a:	003b      	movs	r3, r7
 801109c:	4463      	add	r3, ip
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110a2:	4464      	add	r4, ip
 80110a4:	941c      	str	r4, [sp, #112]	@ 0x70
 80110a6:	4460      	add	r0, ip
 80110a8:	001a      	movs	r2, r3
 80110aa:	428a      	cmp	r2, r1
 80110ac:	d364      	bcc.n	8011178 <arm_radix4_butterfly_inverse_q15+0x6e4>
 80110ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80110b0:	2200      	movs	r2, #0
 80110b2:	5e9d      	ldrsh	r5, [r3, r2]
 80110b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110b6:	5e99      	ldrsh	r1, [r3, r2]
 80110b8:	186b      	adds	r3, r5, r1
 80110ba:	469c      	mov	ip, r3
 80110bc:	455b      	cmp	r3, fp
 80110be:	dd00      	ble.n	80110c2 <arm_radix4_butterfly_inverse_q15+0x62e>
 80110c0:	4b37      	ldr	r3, [pc, #220]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 80110c2:	46e0      	mov	r8, ip
 80110c4:	45d4      	cmp	ip, sl
 80110c6:	da01      	bge.n	80110cc <arm_radix4_butterfly_inverse_q15+0x638>
 80110c8:	4a36      	ldr	r2, [pc, #216]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 80110ca:	4690      	mov	r8, r2
 80110cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80110ce:	9e00      	ldr	r6, [sp, #0]
 80110d0:	2402      	movs	r4, #2
 80110d2:	5f14      	ldrsh	r4, [r2, r4]
 80110d4:	9a01      	ldr	r2, [sp, #4]
 80110d6:	5eb2      	ldrsh	r2, [r6, r2]
 80110d8:	18a7      	adds	r7, r4, r2
 80110da:	9708      	str	r7, [sp, #32]
 80110dc:	455f      	cmp	r7, fp
 80110de:	dd01      	ble.n	80110e4 <arm_radix4_butterfly_inverse_q15+0x650>
 80110e0:	4e2f      	ldr	r6, [pc, #188]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 80110e2:	9608      	str	r6, [sp, #32]
 80110e4:	9707      	str	r7, [sp, #28]
 80110e6:	4557      	cmp	r7, sl
 80110e8:	da01      	bge.n	80110ee <arm_radix4_butterfly_inverse_q15+0x65a>
 80110ea:	4e2e      	ldr	r6, [pc, #184]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 80110ec:	9607      	str	r6, [sp, #28]
 80110ee:	1a69      	subs	r1, r5, r1
 80110f0:	9106      	str	r1, [sp, #24]
 80110f2:	4559      	cmp	r1, fp
 80110f4:	dd01      	ble.n	80110fa <arm_radix4_butterfly_inverse_q15+0x666>
 80110f6:	4d2a      	ldr	r5, [pc, #168]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 80110f8:	9506      	str	r5, [sp, #24]
 80110fa:	9105      	str	r1, [sp, #20]
 80110fc:	4551      	cmp	r1, sl
 80110fe:	da01      	bge.n	8011104 <arm_radix4_butterfly_inverse_q15+0x670>
 8011100:	4d28      	ldr	r5, [pc, #160]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8011102:	9505      	str	r5, [sp, #20]
 8011104:	1aa2      	subs	r2, r4, r2
 8011106:	920c      	str	r2, [sp, #48]	@ 0x30
 8011108:	455a      	cmp	r2, fp
 801110a:	dd01      	ble.n	8011110 <arm_radix4_butterfly_inverse_q15+0x67c>
 801110c:	4c24      	ldr	r4, [pc, #144]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 801110e:	940c      	str	r4, [sp, #48]	@ 0x30
 8011110:	9209      	str	r2, [sp, #36]	@ 0x24
 8011112:	4552      	cmp	r2, sl
 8011114:	da01      	bge.n	801111a <arm_radix4_butterfly_inverse_q15+0x686>
 8011116:	4c23      	ldr	r4, [pc, #140]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8011118:	9409      	str	r4, [sp, #36]	@ 0x24
 801111a:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801111c:	9d01      	ldr	r5, [sp, #4]
 801111e:	5f65      	ldrsh	r5, [r4, r5]
 8011120:	2600      	movs	r6, #0
 8011122:	5f84      	ldrsh	r4, [r0, r6]
 8011124:	192d      	adds	r5, r5, r4
 8011126:	950a      	str	r5, [sp, #40]	@ 0x28
 8011128:	455d      	cmp	r5, fp
 801112a:	dd01      	ble.n	8011130 <arm_radix4_butterfly_inverse_q15+0x69c>
 801112c:	4c1c      	ldr	r4, [pc, #112]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 801112e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011130:	950b      	str	r5, [sp, #44]	@ 0x2c
 8011132:	4555      	cmp	r5, sl
 8011134:	da01      	bge.n	801113a <arm_radix4_butterfly_inverse_q15+0x6a6>
 8011136:	4c1b      	ldr	r4, [pc, #108]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8011138:	940b      	str	r4, [sp, #44]	@ 0x2c
 801113a:	9c00      	ldr	r4, [sp, #0]
 801113c:	2600      	movs	r6, #0
 801113e:	5fa4      	ldrsh	r4, [r4, r6]
 8011140:	46a1      	mov	r9, r4
 8011142:	2602      	movs	r6, #2
 8011144:	5f84      	ldrsh	r4, [r0, r6]
 8011146:	444c      	add	r4, r9
 8011148:	46a1      	mov	r9, r4
 801114a:	455c      	cmp	r4, fp
 801114c:	dd01      	ble.n	8011152 <arm_radix4_butterfly_inverse_q15+0x6be>
 801114e:	4e14      	ldr	r6, [pc, #80]	@ (80111a0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8011150:	46b1      	mov	r9, r6
 8011152:	9403      	str	r4, [sp, #12]
 8011154:	4554      	cmp	r4, sl
 8011156:	da01      	bge.n	801115c <arm_radix4_butterfly_inverse_q15+0x6c8>
 8011158:	4e12      	ldr	r6, [pc, #72]	@ (80111a4 <arm_radix4_butterfly_inverse_q15+0x710>)
 801115a:	9603      	str	r6, [sp, #12]
 801115c:	4666      	mov	r6, ip
 801115e:	2e00      	cmp	r6, #0
 8011160:	dd00      	ble.n	8011164 <arm_radix4_butterfly_inverse_q15+0x6d0>
 8011162:	e71d      	b.n	8010fa0 <arm_radix4_butterfly_inverse_q15+0x50c>
 8011164:	4643      	mov	r3, r8
 8011166:	b21b      	sxth	r3, r3
 8011168:	105b      	asrs	r3, r3, #1
 801116a:	b29b      	uxth	r3, r3
 801116c:	469c      	mov	ip, r3
 801116e:	2d00      	cmp	r5, #0
 8011170:	dd00      	ble.n	8011174 <arm_radix4_butterfly_inverse_q15+0x6e0>
 8011172:	e71c      	b.n	8010fae <arm_radix4_butterfly_inverse_q15+0x51a>
 8011174:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011176:	e71b      	b.n	8010fb0 <arm_radix4_butterfly_inverse_q15+0x51c>
 8011178:	b027      	add	sp, #156	@ 0x9c
 801117a:	bc3c      	pop	{r2, r3, r4, r5}
 801117c:	4690      	mov	r8, r2
 801117e:	4699      	mov	r9, r3
 8011180:	46a2      	mov	sl, r4
 8011182:	46ab      	mov	fp, r5
 8011184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011186:	464a      	mov	r2, r9
 8011188:	e772      	b.n	8011070 <arm_radix4_butterfly_inverse_q15+0x5dc>
 801118a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801118c:	e769      	b.n	8011062 <arm_radix4_butterfly_inverse_q15+0x5ce>
 801118e:	003b      	movs	r3, r7
 8011190:	e75c      	b.n	801104c <arm_radix4_butterfly_inverse_q15+0x5b8>
 8011192:	9905      	ldr	r1, [sp, #20]
 8011194:	468c      	mov	ip, r1
 8011196:	e752      	b.n	801103e <arm_radix4_butterfly_inverse_q15+0x5aa>
 8011198:	9b03      	ldr	r3, [sp, #12]
 801119a:	e71b      	b.n	8010fd4 <arm_radix4_butterfly_inverse_q15+0x540>
 801119c:	9b07      	ldr	r3, [sp, #28]
 801119e:	e712      	b.n	8010fc6 <arm_radix4_butterfly_inverse_q15+0x532>
 80111a0:	00007fff 	.word	0x00007fff
 80111a4:	ffff8000 	.word	0xffff8000

080111a8 <__cvt>:
 80111a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111aa:	001f      	movs	r7, r3
 80111ac:	2300      	movs	r3, #0
 80111ae:	0016      	movs	r6, r2
 80111b0:	b08b      	sub	sp, #44	@ 0x2c
 80111b2:	429f      	cmp	r7, r3
 80111b4:	da04      	bge.n	80111c0 <__cvt+0x18>
 80111b6:	2180      	movs	r1, #128	@ 0x80
 80111b8:	0609      	lsls	r1, r1, #24
 80111ba:	187b      	adds	r3, r7, r1
 80111bc:	001f      	movs	r7, r3
 80111be:	232d      	movs	r3, #45	@ 0x2d
 80111c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80111c2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80111c4:	7013      	strb	r3, [r2, #0]
 80111c6:	2320      	movs	r3, #32
 80111c8:	2203      	movs	r2, #3
 80111ca:	439d      	bics	r5, r3
 80111cc:	2d46      	cmp	r5, #70	@ 0x46
 80111ce:	d007      	beq.n	80111e0 <__cvt+0x38>
 80111d0:	002b      	movs	r3, r5
 80111d2:	3b45      	subs	r3, #69	@ 0x45
 80111d4:	4259      	negs	r1, r3
 80111d6:	414b      	adcs	r3, r1
 80111d8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80111da:	3a01      	subs	r2, #1
 80111dc:	18cb      	adds	r3, r1, r3
 80111de:	9310      	str	r3, [sp, #64]	@ 0x40
 80111e0:	ab09      	add	r3, sp, #36	@ 0x24
 80111e2:	9304      	str	r3, [sp, #16]
 80111e4:	ab08      	add	r3, sp, #32
 80111e6:	9303      	str	r3, [sp, #12]
 80111e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80111ea:	9200      	str	r2, [sp, #0]
 80111ec:	9302      	str	r3, [sp, #8]
 80111ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80111f0:	0032      	movs	r2, r6
 80111f2:	9301      	str	r3, [sp, #4]
 80111f4:	003b      	movs	r3, r7
 80111f6:	f000 fefb 	bl	8011ff0 <_dtoa_r>
 80111fa:	0004      	movs	r4, r0
 80111fc:	2d47      	cmp	r5, #71	@ 0x47
 80111fe:	d11b      	bne.n	8011238 <__cvt+0x90>
 8011200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011202:	07db      	lsls	r3, r3, #31
 8011204:	d511      	bpl.n	801122a <__cvt+0x82>
 8011206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011208:	18c3      	adds	r3, r0, r3
 801120a:	9307      	str	r3, [sp, #28]
 801120c:	2200      	movs	r2, #0
 801120e:	2300      	movs	r3, #0
 8011210:	0030      	movs	r0, r6
 8011212:	0039      	movs	r1, r7
 8011214:	f7ef f942 	bl	800049c <__aeabi_dcmpeq>
 8011218:	2800      	cmp	r0, #0
 801121a:	d001      	beq.n	8011220 <__cvt+0x78>
 801121c:	9b07      	ldr	r3, [sp, #28]
 801121e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011220:	2230      	movs	r2, #48	@ 0x30
 8011222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011224:	9907      	ldr	r1, [sp, #28]
 8011226:	428b      	cmp	r3, r1
 8011228:	d320      	bcc.n	801126c <__cvt+0xc4>
 801122a:	0020      	movs	r0, r4
 801122c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801122e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011230:	1b1b      	subs	r3, r3, r4
 8011232:	6013      	str	r3, [r2, #0]
 8011234:	b00b      	add	sp, #44	@ 0x2c
 8011236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011238:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801123a:	18c3      	adds	r3, r0, r3
 801123c:	9307      	str	r3, [sp, #28]
 801123e:	2d46      	cmp	r5, #70	@ 0x46
 8011240:	d1e4      	bne.n	801120c <__cvt+0x64>
 8011242:	7803      	ldrb	r3, [r0, #0]
 8011244:	2b30      	cmp	r3, #48	@ 0x30
 8011246:	d10c      	bne.n	8011262 <__cvt+0xba>
 8011248:	2200      	movs	r2, #0
 801124a:	2300      	movs	r3, #0
 801124c:	0030      	movs	r0, r6
 801124e:	0039      	movs	r1, r7
 8011250:	f7ef f924 	bl	800049c <__aeabi_dcmpeq>
 8011254:	2800      	cmp	r0, #0
 8011256:	d104      	bne.n	8011262 <__cvt+0xba>
 8011258:	2301      	movs	r3, #1
 801125a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801125c:	1a9b      	subs	r3, r3, r2
 801125e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011260:	6013      	str	r3, [r2, #0]
 8011262:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011264:	9a07      	ldr	r2, [sp, #28]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	18d3      	adds	r3, r2, r3
 801126a:	e7ce      	b.n	801120a <__cvt+0x62>
 801126c:	1c59      	adds	r1, r3, #1
 801126e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011270:	701a      	strb	r2, [r3, #0]
 8011272:	e7d6      	b.n	8011222 <__cvt+0x7a>

08011274 <__exponent>:
 8011274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011276:	232b      	movs	r3, #43	@ 0x2b
 8011278:	0005      	movs	r5, r0
 801127a:	000c      	movs	r4, r1
 801127c:	b085      	sub	sp, #20
 801127e:	7002      	strb	r2, [r0, #0]
 8011280:	2900      	cmp	r1, #0
 8011282:	da01      	bge.n	8011288 <__exponent+0x14>
 8011284:	424c      	negs	r4, r1
 8011286:	3302      	adds	r3, #2
 8011288:	706b      	strb	r3, [r5, #1]
 801128a:	2c09      	cmp	r4, #9
 801128c:	dd2c      	ble.n	80112e8 <__exponent+0x74>
 801128e:	ab02      	add	r3, sp, #8
 8011290:	1dde      	adds	r6, r3, #7
 8011292:	0020      	movs	r0, r4
 8011294:	210a      	movs	r1, #10
 8011296:	f7ef f8eb 	bl	8000470 <__aeabi_idivmod>
 801129a:	0037      	movs	r7, r6
 801129c:	3130      	adds	r1, #48	@ 0x30
 801129e:	3e01      	subs	r6, #1
 80112a0:	0020      	movs	r0, r4
 80112a2:	7031      	strb	r1, [r6, #0]
 80112a4:	210a      	movs	r1, #10
 80112a6:	9401      	str	r4, [sp, #4]
 80112a8:	f7ee fffc 	bl	80002a4 <__divsi3>
 80112ac:	9b01      	ldr	r3, [sp, #4]
 80112ae:	0004      	movs	r4, r0
 80112b0:	2b63      	cmp	r3, #99	@ 0x63
 80112b2:	dcee      	bgt.n	8011292 <__exponent+0x1e>
 80112b4:	1eba      	subs	r2, r7, #2
 80112b6:	1ca8      	adds	r0, r5, #2
 80112b8:	0001      	movs	r1, r0
 80112ba:	0013      	movs	r3, r2
 80112bc:	3430      	adds	r4, #48	@ 0x30
 80112be:	7014      	strb	r4, [r2, #0]
 80112c0:	ac02      	add	r4, sp, #8
 80112c2:	3407      	adds	r4, #7
 80112c4:	429c      	cmp	r4, r3
 80112c6:	d80a      	bhi.n	80112de <__exponent+0x6a>
 80112c8:	2300      	movs	r3, #0
 80112ca:	42a2      	cmp	r2, r4
 80112cc:	d803      	bhi.n	80112d6 <__exponent+0x62>
 80112ce:	3309      	adds	r3, #9
 80112d0:	aa02      	add	r2, sp, #8
 80112d2:	189b      	adds	r3, r3, r2
 80112d4:	1bdb      	subs	r3, r3, r7
 80112d6:	18c0      	adds	r0, r0, r3
 80112d8:	1b40      	subs	r0, r0, r5
 80112da:	b005      	add	sp, #20
 80112dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112de:	781c      	ldrb	r4, [r3, #0]
 80112e0:	3301      	adds	r3, #1
 80112e2:	700c      	strb	r4, [r1, #0]
 80112e4:	3101      	adds	r1, #1
 80112e6:	e7eb      	b.n	80112c0 <__exponent+0x4c>
 80112e8:	2330      	movs	r3, #48	@ 0x30
 80112ea:	18e4      	adds	r4, r4, r3
 80112ec:	70ab      	strb	r3, [r5, #2]
 80112ee:	1d28      	adds	r0, r5, #4
 80112f0:	70ec      	strb	r4, [r5, #3]
 80112f2:	e7f1      	b.n	80112d8 <__exponent+0x64>

080112f4 <_printf_float>:
 80112f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112f6:	b097      	sub	sp, #92	@ 0x5c
 80112f8:	000d      	movs	r5, r1
 80112fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80112fc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80112fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011300:	9009      	str	r0, [sp, #36]	@ 0x24
 8011302:	f000 fd5d 	bl	8011dc0 <_localeconv_r>
 8011306:	6803      	ldr	r3, [r0, #0]
 8011308:	0018      	movs	r0, r3
 801130a:	930d      	str	r3, [sp, #52]	@ 0x34
 801130c:	f7ee ff24 	bl	8000158 <strlen>
 8011310:	2300      	movs	r3, #0
 8011312:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011314:	9314      	str	r3, [sp, #80]	@ 0x50
 8011316:	7e2b      	ldrb	r3, [r5, #24]
 8011318:	2207      	movs	r2, #7
 801131a:	930c      	str	r3, [sp, #48]	@ 0x30
 801131c:	682b      	ldr	r3, [r5, #0]
 801131e:	930e      	str	r3, [sp, #56]	@ 0x38
 8011320:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	05c9      	lsls	r1, r1, #23
 8011326:	d545      	bpl.n	80113b4 <_printf_float+0xc0>
 8011328:	189b      	adds	r3, r3, r2
 801132a:	4393      	bics	r3, r2
 801132c:	001a      	movs	r2, r3
 801132e:	3208      	adds	r2, #8
 8011330:	6022      	str	r2, [r4, #0]
 8011332:	2201      	movs	r2, #1
 8011334:	681e      	ldr	r6, [r3, #0]
 8011336:	685f      	ldr	r7, [r3, #4]
 8011338:	007b      	lsls	r3, r7, #1
 801133a:	085b      	lsrs	r3, r3, #1
 801133c:	9311      	str	r3, [sp, #68]	@ 0x44
 801133e:	9610      	str	r6, [sp, #64]	@ 0x40
 8011340:	64ae      	str	r6, [r5, #72]	@ 0x48
 8011342:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8011344:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011346:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011348:	4ba7      	ldr	r3, [pc, #668]	@ (80115e8 <_printf_float+0x2f4>)
 801134a:	4252      	negs	r2, r2
 801134c:	f7f1 ff9e 	bl	800328c <__aeabi_dcmpun>
 8011350:	2800      	cmp	r0, #0
 8011352:	d131      	bne.n	80113b8 <_printf_float+0xc4>
 8011354:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011356:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011358:	2201      	movs	r2, #1
 801135a:	4ba3      	ldr	r3, [pc, #652]	@ (80115e8 <_printf_float+0x2f4>)
 801135c:	4252      	negs	r2, r2
 801135e:	f7ef f8ad 	bl	80004bc <__aeabi_dcmple>
 8011362:	2800      	cmp	r0, #0
 8011364:	d128      	bne.n	80113b8 <_printf_float+0xc4>
 8011366:	2200      	movs	r2, #0
 8011368:	2300      	movs	r3, #0
 801136a:	0030      	movs	r0, r6
 801136c:	0039      	movs	r1, r7
 801136e:	f7ef f89b 	bl	80004a8 <__aeabi_dcmplt>
 8011372:	2800      	cmp	r0, #0
 8011374:	d003      	beq.n	801137e <_printf_float+0x8a>
 8011376:	002b      	movs	r3, r5
 8011378:	222d      	movs	r2, #45	@ 0x2d
 801137a:	3343      	adds	r3, #67	@ 0x43
 801137c:	701a      	strb	r2, [r3, #0]
 801137e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011380:	4f9a      	ldr	r7, [pc, #616]	@ (80115ec <_printf_float+0x2f8>)
 8011382:	2b47      	cmp	r3, #71	@ 0x47
 8011384:	d900      	bls.n	8011388 <_printf_float+0x94>
 8011386:	4f9a      	ldr	r7, [pc, #616]	@ (80115f0 <_printf_float+0x2fc>)
 8011388:	2303      	movs	r3, #3
 801138a:	2400      	movs	r4, #0
 801138c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801138e:	612b      	str	r3, [r5, #16]
 8011390:	3301      	adds	r3, #1
 8011392:	439a      	bics	r2, r3
 8011394:	602a      	str	r2, [r5, #0]
 8011396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011398:	0029      	movs	r1, r5
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801139e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113a0:	aa15      	add	r2, sp, #84	@ 0x54
 80113a2:	f000 f9e5 	bl	8011770 <_printf_common>
 80113a6:	3001      	adds	r0, #1
 80113a8:	d000      	beq.n	80113ac <_printf_float+0xb8>
 80113aa:	e09f      	b.n	80114ec <_printf_float+0x1f8>
 80113ac:	2001      	movs	r0, #1
 80113ae:	4240      	negs	r0, r0
 80113b0:	b017      	add	sp, #92	@ 0x5c
 80113b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b4:	3307      	adds	r3, #7
 80113b6:	e7b8      	b.n	801132a <_printf_float+0x36>
 80113b8:	0032      	movs	r2, r6
 80113ba:	003b      	movs	r3, r7
 80113bc:	0030      	movs	r0, r6
 80113be:	0039      	movs	r1, r7
 80113c0:	f7f1 ff64 	bl	800328c <__aeabi_dcmpun>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d00b      	beq.n	80113e0 <_printf_float+0xec>
 80113c8:	2f00      	cmp	r7, #0
 80113ca:	da03      	bge.n	80113d4 <_printf_float+0xe0>
 80113cc:	002b      	movs	r3, r5
 80113ce:	222d      	movs	r2, #45	@ 0x2d
 80113d0:	3343      	adds	r3, #67	@ 0x43
 80113d2:	701a      	strb	r2, [r3, #0]
 80113d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113d6:	4f87      	ldr	r7, [pc, #540]	@ (80115f4 <_printf_float+0x300>)
 80113d8:	2b47      	cmp	r3, #71	@ 0x47
 80113da:	d9d5      	bls.n	8011388 <_printf_float+0x94>
 80113dc:	4f86      	ldr	r7, [pc, #536]	@ (80115f8 <_printf_float+0x304>)
 80113de:	e7d3      	b.n	8011388 <_printf_float+0x94>
 80113e0:	2220      	movs	r2, #32
 80113e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80113e4:	686b      	ldr	r3, [r5, #4]
 80113e6:	4394      	bics	r4, r2
 80113e8:	1c5a      	adds	r2, r3, #1
 80113ea:	d146      	bne.n	801147a <_printf_float+0x186>
 80113ec:	3307      	adds	r3, #7
 80113ee:	606b      	str	r3, [r5, #4]
 80113f0:	2380      	movs	r3, #128	@ 0x80
 80113f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113f4:	00db      	lsls	r3, r3, #3
 80113f6:	4313      	orrs	r3, r2
 80113f8:	2200      	movs	r2, #0
 80113fa:	602b      	str	r3, [r5, #0]
 80113fc:	9206      	str	r2, [sp, #24]
 80113fe:	aa14      	add	r2, sp, #80	@ 0x50
 8011400:	9205      	str	r2, [sp, #20]
 8011402:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011404:	a90a      	add	r1, sp, #40	@ 0x28
 8011406:	9204      	str	r2, [sp, #16]
 8011408:	aa13      	add	r2, sp, #76	@ 0x4c
 801140a:	9203      	str	r2, [sp, #12]
 801140c:	2223      	movs	r2, #35	@ 0x23
 801140e:	1852      	adds	r2, r2, r1
 8011410:	9202      	str	r2, [sp, #8]
 8011412:	9301      	str	r3, [sp, #4]
 8011414:	686b      	ldr	r3, [r5, #4]
 8011416:	0032      	movs	r2, r6
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801141c:	003b      	movs	r3, r7
 801141e:	f7ff fec3 	bl	80111a8 <__cvt>
 8011422:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011424:	0007      	movs	r7, r0
 8011426:	2c47      	cmp	r4, #71	@ 0x47
 8011428:	d12d      	bne.n	8011486 <_printf_float+0x192>
 801142a:	1cd3      	adds	r3, r2, #3
 801142c:	db02      	blt.n	8011434 <_printf_float+0x140>
 801142e:	686b      	ldr	r3, [r5, #4]
 8011430:	429a      	cmp	r2, r3
 8011432:	dd48      	ble.n	80114c6 <_printf_float+0x1d2>
 8011434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011436:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011438:	3b02      	subs	r3, #2
 801143a:	b2db      	uxtb	r3, r3
 801143c:	930c      	str	r3, [sp, #48]	@ 0x30
 801143e:	0028      	movs	r0, r5
 8011440:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011442:	3901      	subs	r1, #1
 8011444:	3050      	adds	r0, #80	@ 0x50
 8011446:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011448:	f7ff ff14 	bl	8011274 <__exponent>
 801144c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801144e:	0004      	movs	r4, r0
 8011450:	1813      	adds	r3, r2, r0
 8011452:	612b      	str	r3, [r5, #16]
 8011454:	2a01      	cmp	r2, #1
 8011456:	dc02      	bgt.n	801145e <_printf_float+0x16a>
 8011458:	682a      	ldr	r2, [r5, #0]
 801145a:	07d2      	lsls	r2, r2, #31
 801145c:	d501      	bpl.n	8011462 <_printf_float+0x16e>
 801145e:	3301      	adds	r3, #1
 8011460:	612b      	str	r3, [r5, #16]
 8011462:	2323      	movs	r3, #35	@ 0x23
 8011464:	aa0a      	add	r2, sp, #40	@ 0x28
 8011466:	189b      	adds	r3, r3, r2
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d100      	bne.n	8011470 <_printf_float+0x17c>
 801146e:	e792      	b.n	8011396 <_printf_float+0xa2>
 8011470:	002b      	movs	r3, r5
 8011472:	222d      	movs	r2, #45	@ 0x2d
 8011474:	3343      	adds	r3, #67	@ 0x43
 8011476:	701a      	strb	r2, [r3, #0]
 8011478:	e78d      	b.n	8011396 <_printf_float+0xa2>
 801147a:	2c47      	cmp	r4, #71	@ 0x47
 801147c:	d1b8      	bne.n	80113f0 <_printf_float+0xfc>
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1b6      	bne.n	80113f0 <_printf_float+0xfc>
 8011482:	3301      	adds	r3, #1
 8011484:	e7b3      	b.n	80113ee <_printf_float+0xfa>
 8011486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011488:	0011      	movs	r1, r2
 801148a:	2b65      	cmp	r3, #101	@ 0x65
 801148c:	d9d7      	bls.n	801143e <_printf_float+0x14a>
 801148e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011490:	2b66      	cmp	r3, #102	@ 0x66
 8011492:	d11a      	bne.n	80114ca <_printf_float+0x1d6>
 8011494:	686b      	ldr	r3, [r5, #4]
 8011496:	2a00      	cmp	r2, #0
 8011498:	dd09      	ble.n	80114ae <_printf_float+0x1ba>
 801149a:	612a      	str	r2, [r5, #16]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d102      	bne.n	80114a6 <_printf_float+0x1b2>
 80114a0:	6829      	ldr	r1, [r5, #0]
 80114a2:	07c9      	lsls	r1, r1, #31
 80114a4:	d50b      	bpl.n	80114be <_printf_float+0x1ca>
 80114a6:	3301      	adds	r3, #1
 80114a8:	189b      	adds	r3, r3, r2
 80114aa:	612b      	str	r3, [r5, #16]
 80114ac:	e007      	b.n	80114be <_printf_float+0x1ca>
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d103      	bne.n	80114ba <_printf_float+0x1c6>
 80114b2:	2201      	movs	r2, #1
 80114b4:	6829      	ldr	r1, [r5, #0]
 80114b6:	4211      	tst	r1, r2
 80114b8:	d000      	beq.n	80114bc <_printf_float+0x1c8>
 80114ba:	1c9a      	adds	r2, r3, #2
 80114bc:	612a      	str	r2, [r5, #16]
 80114be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80114c0:	2400      	movs	r4, #0
 80114c2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80114c4:	e7cd      	b.n	8011462 <_printf_float+0x16e>
 80114c6:	2367      	movs	r3, #103	@ 0x67
 80114c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80114ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80114cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80114ce:	4299      	cmp	r1, r3
 80114d0:	db06      	blt.n	80114e0 <_printf_float+0x1ec>
 80114d2:	682b      	ldr	r3, [r5, #0]
 80114d4:	6129      	str	r1, [r5, #16]
 80114d6:	07db      	lsls	r3, r3, #31
 80114d8:	d5f1      	bpl.n	80114be <_printf_float+0x1ca>
 80114da:	3101      	adds	r1, #1
 80114dc:	6129      	str	r1, [r5, #16]
 80114de:	e7ee      	b.n	80114be <_printf_float+0x1ca>
 80114e0:	2201      	movs	r2, #1
 80114e2:	2900      	cmp	r1, #0
 80114e4:	dce0      	bgt.n	80114a8 <_printf_float+0x1b4>
 80114e6:	1892      	adds	r2, r2, r2
 80114e8:	1a52      	subs	r2, r2, r1
 80114ea:	e7dd      	b.n	80114a8 <_printf_float+0x1b4>
 80114ec:	682a      	ldr	r2, [r5, #0]
 80114ee:	0553      	lsls	r3, r2, #21
 80114f0:	d408      	bmi.n	8011504 <_printf_float+0x210>
 80114f2:	692b      	ldr	r3, [r5, #16]
 80114f4:	003a      	movs	r2, r7
 80114f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80114f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80114fc:	47a0      	blx	r4
 80114fe:	3001      	adds	r0, #1
 8011500:	d129      	bne.n	8011556 <_printf_float+0x262>
 8011502:	e753      	b.n	80113ac <_printf_float+0xb8>
 8011504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011506:	2b65      	cmp	r3, #101	@ 0x65
 8011508:	d800      	bhi.n	801150c <_printf_float+0x218>
 801150a:	e0da      	b.n	80116c2 <_printf_float+0x3ce>
 801150c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801150e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011510:	2200      	movs	r2, #0
 8011512:	2300      	movs	r3, #0
 8011514:	f7ee ffc2 	bl	800049c <__aeabi_dcmpeq>
 8011518:	2800      	cmp	r0, #0
 801151a:	d033      	beq.n	8011584 <_printf_float+0x290>
 801151c:	2301      	movs	r3, #1
 801151e:	4a37      	ldr	r2, [pc, #220]	@ (80115fc <_printf_float+0x308>)
 8011520:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011524:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011526:	47a0      	blx	r4
 8011528:	3001      	adds	r0, #1
 801152a:	d100      	bne.n	801152e <_printf_float+0x23a>
 801152c:	e73e      	b.n	80113ac <_printf_float+0xb8>
 801152e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8011530:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011532:	42b3      	cmp	r3, r6
 8011534:	db02      	blt.n	801153c <_printf_float+0x248>
 8011536:	682b      	ldr	r3, [r5, #0]
 8011538:	07db      	lsls	r3, r3, #31
 801153a:	d50c      	bpl.n	8011556 <_printf_float+0x262>
 801153c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801153e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011540:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011542:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011544:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011546:	47a0      	blx	r4
 8011548:	2400      	movs	r4, #0
 801154a:	3001      	adds	r0, #1
 801154c:	d100      	bne.n	8011550 <_printf_float+0x25c>
 801154e:	e72d      	b.n	80113ac <_printf_float+0xb8>
 8011550:	1e73      	subs	r3, r6, #1
 8011552:	42a3      	cmp	r3, r4
 8011554:	dc0a      	bgt.n	801156c <_printf_float+0x278>
 8011556:	682b      	ldr	r3, [r5, #0]
 8011558:	079b      	lsls	r3, r3, #30
 801155a:	d500      	bpl.n	801155e <_printf_float+0x26a>
 801155c:	e105      	b.n	801176a <_printf_float+0x476>
 801155e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011560:	68e8      	ldr	r0, [r5, #12]
 8011562:	4298      	cmp	r0, r3
 8011564:	db00      	blt.n	8011568 <_printf_float+0x274>
 8011566:	e723      	b.n	80113b0 <_printf_float+0xbc>
 8011568:	0018      	movs	r0, r3
 801156a:	e721      	b.n	80113b0 <_printf_float+0xbc>
 801156c:	002a      	movs	r2, r5
 801156e:	2301      	movs	r3, #1
 8011570:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011574:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011576:	321a      	adds	r2, #26
 8011578:	47b8      	blx	r7
 801157a:	3001      	adds	r0, #1
 801157c:	d100      	bne.n	8011580 <_printf_float+0x28c>
 801157e:	e715      	b.n	80113ac <_printf_float+0xb8>
 8011580:	3401      	adds	r4, #1
 8011582:	e7e5      	b.n	8011550 <_printf_float+0x25c>
 8011584:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011586:	2b00      	cmp	r3, #0
 8011588:	dc3a      	bgt.n	8011600 <_printf_float+0x30c>
 801158a:	2301      	movs	r3, #1
 801158c:	4a1b      	ldr	r2, [pc, #108]	@ (80115fc <_printf_float+0x308>)
 801158e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011590:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011592:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011594:	47a0      	blx	r4
 8011596:	3001      	adds	r0, #1
 8011598:	d100      	bne.n	801159c <_printf_float+0x2a8>
 801159a:	e707      	b.n	80113ac <_printf_float+0xb8>
 801159c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801159e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80115a0:	4333      	orrs	r3, r6
 80115a2:	d102      	bne.n	80115aa <_printf_float+0x2b6>
 80115a4:	682b      	ldr	r3, [r5, #0]
 80115a6:	07db      	lsls	r3, r3, #31
 80115a8:	d5d5      	bpl.n	8011556 <_printf_float+0x262>
 80115aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80115ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80115b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80115b4:	47a0      	blx	r4
 80115b6:	2300      	movs	r3, #0
 80115b8:	3001      	adds	r0, #1
 80115ba:	d100      	bne.n	80115be <_printf_float+0x2ca>
 80115bc:	e6f6      	b.n	80113ac <_printf_float+0xb8>
 80115be:	930c      	str	r3, [sp, #48]	@ 0x30
 80115c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80115c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80115c4:	425b      	negs	r3, r3
 80115c6:	4293      	cmp	r3, r2
 80115c8:	dc01      	bgt.n	80115ce <_printf_float+0x2da>
 80115ca:	0033      	movs	r3, r6
 80115cc:	e792      	b.n	80114f4 <_printf_float+0x200>
 80115ce:	002a      	movs	r2, r5
 80115d0:	2301      	movs	r3, #1
 80115d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80115d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80115d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80115d8:	321a      	adds	r2, #26
 80115da:	47a0      	blx	r4
 80115dc:	3001      	adds	r0, #1
 80115de:	d100      	bne.n	80115e2 <_printf_float+0x2ee>
 80115e0:	e6e4      	b.n	80113ac <_printf_float+0xb8>
 80115e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115e4:	3301      	adds	r3, #1
 80115e6:	e7ea      	b.n	80115be <_printf_float+0x2ca>
 80115e8:	7fefffff 	.word	0x7fefffff
 80115ec:	08027284 	.word	0x08027284
 80115f0:	08027288 	.word	0x08027288
 80115f4:	0802728c 	.word	0x0802728c
 80115f8:	08027290 	.word	0x08027290
 80115fc:	08027294 	.word	0x08027294
 8011600:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011602:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8011604:	930c      	str	r3, [sp, #48]	@ 0x30
 8011606:	429e      	cmp	r6, r3
 8011608:	dd00      	ble.n	801160c <_printf_float+0x318>
 801160a:	001e      	movs	r6, r3
 801160c:	2e00      	cmp	r6, #0
 801160e:	dc31      	bgt.n	8011674 <_printf_float+0x380>
 8011610:	43f3      	mvns	r3, r6
 8011612:	2400      	movs	r4, #0
 8011614:	17db      	asrs	r3, r3, #31
 8011616:	4033      	ands	r3, r6
 8011618:	930e      	str	r3, [sp, #56]	@ 0x38
 801161a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801161c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801161e:	1af3      	subs	r3, r6, r3
 8011620:	42a3      	cmp	r3, r4
 8011622:	dc30      	bgt.n	8011686 <_printf_float+0x392>
 8011624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011626:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011628:	429a      	cmp	r2, r3
 801162a:	dc38      	bgt.n	801169e <_printf_float+0x3aa>
 801162c:	682b      	ldr	r3, [r5, #0]
 801162e:	07db      	lsls	r3, r3, #31
 8011630:	d435      	bmi.n	801169e <_printf_float+0x3aa>
 8011632:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8011634:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011636:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011638:	1b9b      	subs	r3, r3, r6
 801163a:	1b14      	subs	r4, r2, r4
 801163c:	429c      	cmp	r4, r3
 801163e:	dd00      	ble.n	8011642 <_printf_float+0x34e>
 8011640:	001c      	movs	r4, r3
 8011642:	2c00      	cmp	r4, #0
 8011644:	dc34      	bgt.n	80116b0 <_printf_float+0x3bc>
 8011646:	43e3      	mvns	r3, r4
 8011648:	2600      	movs	r6, #0
 801164a:	17db      	asrs	r3, r3, #31
 801164c:	401c      	ands	r4, r3
 801164e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011650:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011652:	1ad3      	subs	r3, r2, r3
 8011654:	1b1b      	subs	r3, r3, r4
 8011656:	42b3      	cmp	r3, r6
 8011658:	dc00      	bgt.n	801165c <_printf_float+0x368>
 801165a:	e77c      	b.n	8011556 <_printf_float+0x262>
 801165c:	002a      	movs	r2, r5
 801165e:	2301      	movs	r3, #1
 8011660:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011664:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011666:	321a      	adds	r2, #26
 8011668:	47b8      	blx	r7
 801166a:	3001      	adds	r0, #1
 801166c:	d100      	bne.n	8011670 <_printf_float+0x37c>
 801166e:	e69d      	b.n	80113ac <_printf_float+0xb8>
 8011670:	3601      	adds	r6, #1
 8011672:	e7ec      	b.n	801164e <_printf_float+0x35a>
 8011674:	0033      	movs	r3, r6
 8011676:	003a      	movs	r2, r7
 8011678:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801167a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801167c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801167e:	47a0      	blx	r4
 8011680:	3001      	adds	r0, #1
 8011682:	d1c5      	bne.n	8011610 <_printf_float+0x31c>
 8011684:	e692      	b.n	80113ac <_printf_float+0xb8>
 8011686:	002a      	movs	r2, r5
 8011688:	2301      	movs	r3, #1
 801168a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801168c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801168e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011690:	321a      	adds	r2, #26
 8011692:	47b0      	blx	r6
 8011694:	3001      	adds	r0, #1
 8011696:	d100      	bne.n	801169a <_printf_float+0x3a6>
 8011698:	e688      	b.n	80113ac <_printf_float+0xb8>
 801169a:	3401      	adds	r4, #1
 801169c:	e7bd      	b.n	801161a <_printf_float+0x326>
 801169e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80116a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80116a8:	47a0      	blx	r4
 80116aa:	3001      	adds	r0, #1
 80116ac:	d1c1      	bne.n	8011632 <_printf_float+0x33e>
 80116ae:	e67d      	b.n	80113ac <_printf_float+0xb8>
 80116b0:	19ba      	adds	r2, r7, r6
 80116b2:	0023      	movs	r3, r4
 80116b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80116ba:	47b0      	blx	r6
 80116bc:	3001      	adds	r0, #1
 80116be:	d1c2      	bne.n	8011646 <_printf_float+0x352>
 80116c0:	e674      	b.n	80113ac <_printf_float+0xb8>
 80116c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80116c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80116c6:	2b01      	cmp	r3, #1
 80116c8:	dc02      	bgt.n	80116d0 <_printf_float+0x3dc>
 80116ca:	2301      	movs	r3, #1
 80116cc:	421a      	tst	r2, r3
 80116ce:	d039      	beq.n	8011744 <_printf_float+0x450>
 80116d0:	2301      	movs	r3, #1
 80116d2:	003a      	movs	r2, r7
 80116d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80116da:	47b0      	blx	r6
 80116dc:	3001      	adds	r0, #1
 80116de:	d100      	bne.n	80116e2 <_printf_float+0x3ee>
 80116e0:	e664      	b.n	80113ac <_printf_float+0xb8>
 80116e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80116e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116ea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80116ec:	47b0      	blx	r6
 80116ee:	3001      	adds	r0, #1
 80116f0:	d100      	bne.n	80116f4 <_printf_float+0x400>
 80116f2:	e65b      	b.n	80113ac <_printf_float+0xb8>
 80116f4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80116f6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80116f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116fa:	2200      	movs	r2, #0
 80116fc:	3b01      	subs	r3, #1
 80116fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8011700:	2300      	movs	r3, #0
 8011702:	f7ee fecb 	bl	800049c <__aeabi_dcmpeq>
 8011706:	2800      	cmp	r0, #0
 8011708:	d11a      	bne.n	8011740 <_printf_float+0x44c>
 801170a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801170c:	1c7a      	adds	r2, r7, #1
 801170e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011710:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011712:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011714:	47b0      	blx	r6
 8011716:	3001      	adds	r0, #1
 8011718:	d10e      	bne.n	8011738 <_printf_float+0x444>
 801171a:	e647      	b.n	80113ac <_printf_float+0xb8>
 801171c:	002a      	movs	r2, r5
 801171e:	2301      	movs	r3, #1
 8011720:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011724:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011726:	321a      	adds	r2, #26
 8011728:	47b8      	blx	r7
 801172a:	3001      	adds	r0, #1
 801172c:	d100      	bne.n	8011730 <_printf_float+0x43c>
 801172e:	e63d      	b.n	80113ac <_printf_float+0xb8>
 8011730:	3601      	adds	r6, #1
 8011732:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011734:	429e      	cmp	r6, r3
 8011736:	dbf1      	blt.n	801171c <_printf_float+0x428>
 8011738:	002a      	movs	r2, r5
 801173a:	0023      	movs	r3, r4
 801173c:	3250      	adds	r2, #80	@ 0x50
 801173e:	e6da      	b.n	80114f6 <_printf_float+0x202>
 8011740:	2600      	movs	r6, #0
 8011742:	e7f6      	b.n	8011732 <_printf_float+0x43e>
 8011744:	003a      	movs	r2, r7
 8011746:	e7e2      	b.n	801170e <_printf_float+0x41a>
 8011748:	002a      	movs	r2, r5
 801174a:	2301      	movs	r3, #1
 801174c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801174e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011750:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011752:	3219      	adds	r2, #25
 8011754:	47b0      	blx	r6
 8011756:	3001      	adds	r0, #1
 8011758:	d100      	bne.n	801175c <_printf_float+0x468>
 801175a:	e627      	b.n	80113ac <_printf_float+0xb8>
 801175c:	3401      	adds	r4, #1
 801175e:	68eb      	ldr	r3, [r5, #12]
 8011760:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011762:	1a9b      	subs	r3, r3, r2
 8011764:	42a3      	cmp	r3, r4
 8011766:	dcef      	bgt.n	8011748 <_printf_float+0x454>
 8011768:	e6f9      	b.n	801155e <_printf_float+0x26a>
 801176a:	2400      	movs	r4, #0
 801176c:	e7f7      	b.n	801175e <_printf_float+0x46a>
 801176e:	46c0      	nop			@ (mov r8, r8)

08011770 <_printf_common>:
 8011770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011772:	0016      	movs	r6, r2
 8011774:	9301      	str	r3, [sp, #4]
 8011776:	688a      	ldr	r2, [r1, #8]
 8011778:	690b      	ldr	r3, [r1, #16]
 801177a:	000c      	movs	r4, r1
 801177c:	9000      	str	r0, [sp, #0]
 801177e:	4293      	cmp	r3, r2
 8011780:	da00      	bge.n	8011784 <_printf_common+0x14>
 8011782:	0013      	movs	r3, r2
 8011784:	0022      	movs	r2, r4
 8011786:	6033      	str	r3, [r6, #0]
 8011788:	3243      	adds	r2, #67	@ 0x43
 801178a:	7812      	ldrb	r2, [r2, #0]
 801178c:	2a00      	cmp	r2, #0
 801178e:	d001      	beq.n	8011794 <_printf_common+0x24>
 8011790:	3301      	adds	r3, #1
 8011792:	6033      	str	r3, [r6, #0]
 8011794:	6823      	ldr	r3, [r4, #0]
 8011796:	069b      	lsls	r3, r3, #26
 8011798:	d502      	bpl.n	80117a0 <_printf_common+0x30>
 801179a:	6833      	ldr	r3, [r6, #0]
 801179c:	3302      	adds	r3, #2
 801179e:	6033      	str	r3, [r6, #0]
 80117a0:	6822      	ldr	r2, [r4, #0]
 80117a2:	2306      	movs	r3, #6
 80117a4:	0015      	movs	r5, r2
 80117a6:	401d      	ands	r5, r3
 80117a8:	421a      	tst	r2, r3
 80117aa:	d027      	beq.n	80117fc <_printf_common+0x8c>
 80117ac:	0023      	movs	r3, r4
 80117ae:	3343      	adds	r3, #67	@ 0x43
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	1e5a      	subs	r2, r3, #1
 80117b4:	4193      	sbcs	r3, r2
 80117b6:	6822      	ldr	r2, [r4, #0]
 80117b8:	0692      	lsls	r2, r2, #26
 80117ba:	d430      	bmi.n	801181e <_printf_common+0xae>
 80117bc:	0022      	movs	r2, r4
 80117be:	9901      	ldr	r1, [sp, #4]
 80117c0:	9800      	ldr	r0, [sp, #0]
 80117c2:	9d08      	ldr	r5, [sp, #32]
 80117c4:	3243      	adds	r2, #67	@ 0x43
 80117c6:	47a8      	blx	r5
 80117c8:	3001      	adds	r0, #1
 80117ca:	d025      	beq.n	8011818 <_printf_common+0xa8>
 80117cc:	2206      	movs	r2, #6
 80117ce:	6823      	ldr	r3, [r4, #0]
 80117d0:	2500      	movs	r5, #0
 80117d2:	4013      	ands	r3, r2
 80117d4:	2b04      	cmp	r3, #4
 80117d6:	d105      	bne.n	80117e4 <_printf_common+0x74>
 80117d8:	6833      	ldr	r3, [r6, #0]
 80117da:	68e5      	ldr	r5, [r4, #12]
 80117dc:	1aed      	subs	r5, r5, r3
 80117de:	43eb      	mvns	r3, r5
 80117e0:	17db      	asrs	r3, r3, #31
 80117e2:	401d      	ands	r5, r3
 80117e4:	68a3      	ldr	r3, [r4, #8]
 80117e6:	6922      	ldr	r2, [r4, #16]
 80117e8:	4293      	cmp	r3, r2
 80117ea:	dd01      	ble.n	80117f0 <_printf_common+0x80>
 80117ec:	1a9b      	subs	r3, r3, r2
 80117ee:	18ed      	adds	r5, r5, r3
 80117f0:	2600      	movs	r6, #0
 80117f2:	42b5      	cmp	r5, r6
 80117f4:	d120      	bne.n	8011838 <_printf_common+0xc8>
 80117f6:	2000      	movs	r0, #0
 80117f8:	e010      	b.n	801181c <_printf_common+0xac>
 80117fa:	3501      	adds	r5, #1
 80117fc:	68e3      	ldr	r3, [r4, #12]
 80117fe:	6832      	ldr	r2, [r6, #0]
 8011800:	1a9b      	subs	r3, r3, r2
 8011802:	42ab      	cmp	r3, r5
 8011804:	ddd2      	ble.n	80117ac <_printf_common+0x3c>
 8011806:	0022      	movs	r2, r4
 8011808:	2301      	movs	r3, #1
 801180a:	9901      	ldr	r1, [sp, #4]
 801180c:	9800      	ldr	r0, [sp, #0]
 801180e:	9f08      	ldr	r7, [sp, #32]
 8011810:	3219      	adds	r2, #25
 8011812:	47b8      	blx	r7
 8011814:	3001      	adds	r0, #1
 8011816:	d1f0      	bne.n	80117fa <_printf_common+0x8a>
 8011818:	2001      	movs	r0, #1
 801181a:	4240      	negs	r0, r0
 801181c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801181e:	2030      	movs	r0, #48	@ 0x30
 8011820:	18e1      	adds	r1, r4, r3
 8011822:	3143      	adds	r1, #67	@ 0x43
 8011824:	7008      	strb	r0, [r1, #0]
 8011826:	0021      	movs	r1, r4
 8011828:	1c5a      	adds	r2, r3, #1
 801182a:	3145      	adds	r1, #69	@ 0x45
 801182c:	7809      	ldrb	r1, [r1, #0]
 801182e:	18a2      	adds	r2, r4, r2
 8011830:	3243      	adds	r2, #67	@ 0x43
 8011832:	3302      	adds	r3, #2
 8011834:	7011      	strb	r1, [r2, #0]
 8011836:	e7c1      	b.n	80117bc <_printf_common+0x4c>
 8011838:	0022      	movs	r2, r4
 801183a:	2301      	movs	r3, #1
 801183c:	9901      	ldr	r1, [sp, #4]
 801183e:	9800      	ldr	r0, [sp, #0]
 8011840:	9f08      	ldr	r7, [sp, #32]
 8011842:	321a      	adds	r2, #26
 8011844:	47b8      	blx	r7
 8011846:	3001      	adds	r0, #1
 8011848:	d0e6      	beq.n	8011818 <_printf_common+0xa8>
 801184a:	3601      	adds	r6, #1
 801184c:	e7d1      	b.n	80117f2 <_printf_common+0x82>
	...

08011850 <_printf_i>:
 8011850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011852:	b08b      	sub	sp, #44	@ 0x2c
 8011854:	9206      	str	r2, [sp, #24]
 8011856:	000a      	movs	r2, r1
 8011858:	3243      	adds	r2, #67	@ 0x43
 801185a:	9307      	str	r3, [sp, #28]
 801185c:	9005      	str	r0, [sp, #20]
 801185e:	9203      	str	r2, [sp, #12]
 8011860:	7e0a      	ldrb	r2, [r1, #24]
 8011862:	000c      	movs	r4, r1
 8011864:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011866:	2a78      	cmp	r2, #120	@ 0x78
 8011868:	d809      	bhi.n	801187e <_printf_i+0x2e>
 801186a:	2a62      	cmp	r2, #98	@ 0x62
 801186c:	d80b      	bhi.n	8011886 <_printf_i+0x36>
 801186e:	2a00      	cmp	r2, #0
 8011870:	d100      	bne.n	8011874 <_printf_i+0x24>
 8011872:	e0bc      	b.n	80119ee <_printf_i+0x19e>
 8011874:	497b      	ldr	r1, [pc, #492]	@ (8011a64 <_printf_i+0x214>)
 8011876:	9104      	str	r1, [sp, #16]
 8011878:	2a58      	cmp	r2, #88	@ 0x58
 801187a:	d100      	bne.n	801187e <_printf_i+0x2e>
 801187c:	e090      	b.n	80119a0 <_printf_i+0x150>
 801187e:	0025      	movs	r5, r4
 8011880:	3542      	adds	r5, #66	@ 0x42
 8011882:	702a      	strb	r2, [r5, #0]
 8011884:	e022      	b.n	80118cc <_printf_i+0x7c>
 8011886:	0010      	movs	r0, r2
 8011888:	3863      	subs	r0, #99	@ 0x63
 801188a:	2815      	cmp	r0, #21
 801188c:	d8f7      	bhi.n	801187e <_printf_i+0x2e>
 801188e:	f7ee fc75 	bl	800017c <__gnu_thumb1_case_shi>
 8011892:	0016      	.short	0x0016
 8011894:	fff6001f 	.word	0xfff6001f
 8011898:	fff6fff6 	.word	0xfff6fff6
 801189c:	001ffff6 	.word	0x001ffff6
 80118a0:	fff6fff6 	.word	0xfff6fff6
 80118a4:	fff6fff6 	.word	0xfff6fff6
 80118a8:	003600a1 	.word	0x003600a1
 80118ac:	fff60080 	.word	0xfff60080
 80118b0:	00b2fff6 	.word	0x00b2fff6
 80118b4:	0036fff6 	.word	0x0036fff6
 80118b8:	fff6fff6 	.word	0xfff6fff6
 80118bc:	0084      	.short	0x0084
 80118be:	0025      	movs	r5, r4
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	3542      	adds	r5, #66	@ 0x42
 80118c4:	1d11      	adds	r1, r2, #4
 80118c6:	6019      	str	r1, [r3, #0]
 80118c8:	6813      	ldr	r3, [r2, #0]
 80118ca:	702b      	strb	r3, [r5, #0]
 80118cc:	2301      	movs	r3, #1
 80118ce:	e0a0      	b.n	8011a12 <_printf_i+0x1c2>
 80118d0:	6818      	ldr	r0, [r3, #0]
 80118d2:	6809      	ldr	r1, [r1, #0]
 80118d4:	1d02      	adds	r2, r0, #4
 80118d6:	060d      	lsls	r5, r1, #24
 80118d8:	d50b      	bpl.n	80118f2 <_printf_i+0xa2>
 80118da:	6806      	ldr	r6, [r0, #0]
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	2e00      	cmp	r6, #0
 80118e0:	da03      	bge.n	80118ea <_printf_i+0x9a>
 80118e2:	232d      	movs	r3, #45	@ 0x2d
 80118e4:	9a03      	ldr	r2, [sp, #12]
 80118e6:	4276      	negs	r6, r6
 80118e8:	7013      	strb	r3, [r2, #0]
 80118ea:	4b5e      	ldr	r3, [pc, #376]	@ (8011a64 <_printf_i+0x214>)
 80118ec:	270a      	movs	r7, #10
 80118ee:	9304      	str	r3, [sp, #16]
 80118f0:	e018      	b.n	8011924 <_printf_i+0xd4>
 80118f2:	6806      	ldr	r6, [r0, #0]
 80118f4:	601a      	str	r2, [r3, #0]
 80118f6:	0649      	lsls	r1, r1, #25
 80118f8:	d5f1      	bpl.n	80118de <_printf_i+0x8e>
 80118fa:	b236      	sxth	r6, r6
 80118fc:	e7ef      	b.n	80118de <_printf_i+0x8e>
 80118fe:	6808      	ldr	r0, [r1, #0]
 8011900:	6819      	ldr	r1, [r3, #0]
 8011902:	c940      	ldmia	r1!, {r6}
 8011904:	0605      	lsls	r5, r0, #24
 8011906:	d402      	bmi.n	801190e <_printf_i+0xbe>
 8011908:	0640      	lsls	r0, r0, #25
 801190a:	d500      	bpl.n	801190e <_printf_i+0xbe>
 801190c:	b2b6      	uxth	r6, r6
 801190e:	6019      	str	r1, [r3, #0]
 8011910:	4b54      	ldr	r3, [pc, #336]	@ (8011a64 <_printf_i+0x214>)
 8011912:	270a      	movs	r7, #10
 8011914:	9304      	str	r3, [sp, #16]
 8011916:	2a6f      	cmp	r2, #111	@ 0x6f
 8011918:	d100      	bne.n	801191c <_printf_i+0xcc>
 801191a:	3f02      	subs	r7, #2
 801191c:	0023      	movs	r3, r4
 801191e:	2200      	movs	r2, #0
 8011920:	3343      	adds	r3, #67	@ 0x43
 8011922:	701a      	strb	r2, [r3, #0]
 8011924:	6863      	ldr	r3, [r4, #4]
 8011926:	60a3      	str	r3, [r4, #8]
 8011928:	2b00      	cmp	r3, #0
 801192a:	db03      	blt.n	8011934 <_printf_i+0xe4>
 801192c:	2104      	movs	r1, #4
 801192e:	6822      	ldr	r2, [r4, #0]
 8011930:	438a      	bics	r2, r1
 8011932:	6022      	str	r2, [r4, #0]
 8011934:	2e00      	cmp	r6, #0
 8011936:	d102      	bne.n	801193e <_printf_i+0xee>
 8011938:	9d03      	ldr	r5, [sp, #12]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00c      	beq.n	8011958 <_printf_i+0x108>
 801193e:	9d03      	ldr	r5, [sp, #12]
 8011940:	0030      	movs	r0, r6
 8011942:	0039      	movs	r1, r7
 8011944:	f7ee fcaa 	bl	800029c <__aeabi_uidivmod>
 8011948:	9b04      	ldr	r3, [sp, #16]
 801194a:	3d01      	subs	r5, #1
 801194c:	5c5b      	ldrb	r3, [r3, r1]
 801194e:	702b      	strb	r3, [r5, #0]
 8011950:	0033      	movs	r3, r6
 8011952:	0006      	movs	r6, r0
 8011954:	429f      	cmp	r7, r3
 8011956:	d9f3      	bls.n	8011940 <_printf_i+0xf0>
 8011958:	2f08      	cmp	r7, #8
 801195a:	d109      	bne.n	8011970 <_printf_i+0x120>
 801195c:	6823      	ldr	r3, [r4, #0]
 801195e:	07db      	lsls	r3, r3, #31
 8011960:	d506      	bpl.n	8011970 <_printf_i+0x120>
 8011962:	6862      	ldr	r2, [r4, #4]
 8011964:	6923      	ldr	r3, [r4, #16]
 8011966:	429a      	cmp	r2, r3
 8011968:	dc02      	bgt.n	8011970 <_printf_i+0x120>
 801196a:	2330      	movs	r3, #48	@ 0x30
 801196c:	3d01      	subs	r5, #1
 801196e:	702b      	strb	r3, [r5, #0]
 8011970:	9b03      	ldr	r3, [sp, #12]
 8011972:	1b5b      	subs	r3, r3, r5
 8011974:	6123      	str	r3, [r4, #16]
 8011976:	9b07      	ldr	r3, [sp, #28]
 8011978:	0021      	movs	r1, r4
 801197a:	9300      	str	r3, [sp, #0]
 801197c:	9805      	ldr	r0, [sp, #20]
 801197e:	9b06      	ldr	r3, [sp, #24]
 8011980:	aa09      	add	r2, sp, #36	@ 0x24
 8011982:	f7ff fef5 	bl	8011770 <_printf_common>
 8011986:	3001      	adds	r0, #1
 8011988:	d148      	bne.n	8011a1c <_printf_i+0x1cc>
 801198a:	2001      	movs	r0, #1
 801198c:	4240      	negs	r0, r0
 801198e:	b00b      	add	sp, #44	@ 0x2c
 8011990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011992:	2220      	movs	r2, #32
 8011994:	6809      	ldr	r1, [r1, #0]
 8011996:	430a      	orrs	r2, r1
 8011998:	6022      	str	r2, [r4, #0]
 801199a:	2278      	movs	r2, #120	@ 0x78
 801199c:	4932      	ldr	r1, [pc, #200]	@ (8011a68 <_printf_i+0x218>)
 801199e:	9104      	str	r1, [sp, #16]
 80119a0:	0021      	movs	r1, r4
 80119a2:	3145      	adds	r1, #69	@ 0x45
 80119a4:	700a      	strb	r2, [r1, #0]
 80119a6:	6819      	ldr	r1, [r3, #0]
 80119a8:	6822      	ldr	r2, [r4, #0]
 80119aa:	c940      	ldmia	r1!, {r6}
 80119ac:	0610      	lsls	r0, r2, #24
 80119ae:	d402      	bmi.n	80119b6 <_printf_i+0x166>
 80119b0:	0650      	lsls	r0, r2, #25
 80119b2:	d500      	bpl.n	80119b6 <_printf_i+0x166>
 80119b4:	b2b6      	uxth	r6, r6
 80119b6:	6019      	str	r1, [r3, #0]
 80119b8:	07d3      	lsls	r3, r2, #31
 80119ba:	d502      	bpl.n	80119c2 <_printf_i+0x172>
 80119bc:	2320      	movs	r3, #32
 80119be:	4313      	orrs	r3, r2
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	2e00      	cmp	r6, #0
 80119c4:	d001      	beq.n	80119ca <_printf_i+0x17a>
 80119c6:	2710      	movs	r7, #16
 80119c8:	e7a8      	b.n	801191c <_printf_i+0xcc>
 80119ca:	2220      	movs	r2, #32
 80119cc:	6823      	ldr	r3, [r4, #0]
 80119ce:	4393      	bics	r3, r2
 80119d0:	6023      	str	r3, [r4, #0]
 80119d2:	e7f8      	b.n	80119c6 <_printf_i+0x176>
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	680d      	ldr	r5, [r1, #0]
 80119d8:	1d10      	adds	r0, r2, #4
 80119da:	6949      	ldr	r1, [r1, #20]
 80119dc:	6018      	str	r0, [r3, #0]
 80119de:	6813      	ldr	r3, [r2, #0]
 80119e0:	062e      	lsls	r6, r5, #24
 80119e2:	d501      	bpl.n	80119e8 <_printf_i+0x198>
 80119e4:	6019      	str	r1, [r3, #0]
 80119e6:	e002      	b.n	80119ee <_printf_i+0x19e>
 80119e8:	066d      	lsls	r5, r5, #25
 80119ea:	d5fb      	bpl.n	80119e4 <_printf_i+0x194>
 80119ec:	8019      	strh	r1, [r3, #0]
 80119ee:	2300      	movs	r3, #0
 80119f0:	9d03      	ldr	r5, [sp, #12]
 80119f2:	6123      	str	r3, [r4, #16]
 80119f4:	e7bf      	b.n	8011976 <_printf_i+0x126>
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	1d11      	adds	r1, r2, #4
 80119fa:	6019      	str	r1, [r3, #0]
 80119fc:	6815      	ldr	r5, [r2, #0]
 80119fe:	2100      	movs	r1, #0
 8011a00:	0028      	movs	r0, r5
 8011a02:	6862      	ldr	r2, [r4, #4]
 8011a04:	f000 fa5b 	bl	8011ebe <memchr>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d001      	beq.n	8011a10 <_printf_i+0x1c0>
 8011a0c:	1b40      	subs	r0, r0, r5
 8011a0e:	6060      	str	r0, [r4, #4]
 8011a10:	6863      	ldr	r3, [r4, #4]
 8011a12:	6123      	str	r3, [r4, #16]
 8011a14:	2300      	movs	r3, #0
 8011a16:	9a03      	ldr	r2, [sp, #12]
 8011a18:	7013      	strb	r3, [r2, #0]
 8011a1a:	e7ac      	b.n	8011976 <_printf_i+0x126>
 8011a1c:	002a      	movs	r2, r5
 8011a1e:	6923      	ldr	r3, [r4, #16]
 8011a20:	9906      	ldr	r1, [sp, #24]
 8011a22:	9805      	ldr	r0, [sp, #20]
 8011a24:	9d07      	ldr	r5, [sp, #28]
 8011a26:	47a8      	blx	r5
 8011a28:	3001      	adds	r0, #1
 8011a2a:	d0ae      	beq.n	801198a <_printf_i+0x13a>
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	079b      	lsls	r3, r3, #30
 8011a30:	d415      	bmi.n	8011a5e <_printf_i+0x20e>
 8011a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a34:	68e0      	ldr	r0, [r4, #12]
 8011a36:	4298      	cmp	r0, r3
 8011a38:	daa9      	bge.n	801198e <_printf_i+0x13e>
 8011a3a:	0018      	movs	r0, r3
 8011a3c:	e7a7      	b.n	801198e <_printf_i+0x13e>
 8011a3e:	0022      	movs	r2, r4
 8011a40:	2301      	movs	r3, #1
 8011a42:	9906      	ldr	r1, [sp, #24]
 8011a44:	9805      	ldr	r0, [sp, #20]
 8011a46:	9e07      	ldr	r6, [sp, #28]
 8011a48:	3219      	adds	r2, #25
 8011a4a:	47b0      	blx	r6
 8011a4c:	3001      	adds	r0, #1
 8011a4e:	d09c      	beq.n	801198a <_printf_i+0x13a>
 8011a50:	3501      	adds	r5, #1
 8011a52:	68e3      	ldr	r3, [r4, #12]
 8011a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a56:	1a9b      	subs	r3, r3, r2
 8011a58:	42ab      	cmp	r3, r5
 8011a5a:	dcf0      	bgt.n	8011a3e <_printf_i+0x1ee>
 8011a5c:	e7e9      	b.n	8011a32 <_printf_i+0x1e2>
 8011a5e:	2500      	movs	r5, #0
 8011a60:	e7f7      	b.n	8011a52 <_printf_i+0x202>
 8011a62:	46c0      	nop			@ (mov r8, r8)
 8011a64:	08027296 	.word	0x08027296
 8011a68:	080272a7 	.word	0x080272a7

08011a6c <std>:
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	0004      	movs	r4, r0
 8011a72:	6003      	str	r3, [r0, #0]
 8011a74:	6043      	str	r3, [r0, #4]
 8011a76:	6083      	str	r3, [r0, #8]
 8011a78:	8181      	strh	r1, [r0, #12]
 8011a7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a7c:	81c2      	strh	r2, [r0, #14]
 8011a7e:	6103      	str	r3, [r0, #16]
 8011a80:	6143      	str	r3, [r0, #20]
 8011a82:	6183      	str	r3, [r0, #24]
 8011a84:	0019      	movs	r1, r3
 8011a86:	2208      	movs	r2, #8
 8011a88:	305c      	adds	r0, #92	@ 0x5c
 8011a8a:	f000 f967 	bl	8011d5c <memset>
 8011a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8011abc <std+0x50>)
 8011a90:	6224      	str	r4, [r4, #32]
 8011a92:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a94:	4b0a      	ldr	r3, [pc, #40]	@ (8011ac0 <std+0x54>)
 8011a96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a98:	4b0a      	ldr	r3, [pc, #40]	@ (8011ac4 <std+0x58>)
 8011a9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8011ac8 <std+0x5c>)
 8011a9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8011aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8011acc <std+0x60>)
 8011aa2:	429c      	cmp	r4, r3
 8011aa4:	d005      	beq.n	8011ab2 <std+0x46>
 8011aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad0 <std+0x64>)
 8011aa8:	429c      	cmp	r4, r3
 8011aaa:	d002      	beq.n	8011ab2 <std+0x46>
 8011aac:	4b09      	ldr	r3, [pc, #36]	@ (8011ad4 <std+0x68>)
 8011aae:	429c      	cmp	r4, r3
 8011ab0:	d103      	bne.n	8011aba <std+0x4e>
 8011ab2:	0020      	movs	r0, r4
 8011ab4:	3058      	adds	r0, #88	@ 0x58
 8011ab6:	f000 f9ff 	bl	8011eb8 <__retarget_lock_init_recursive>
 8011aba:	bd10      	pop	{r4, pc}
 8011abc:	08011c55 	.word	0x08011c55
 8011ac0:	08011c7d 	.word	0x08011c7d
 8011ac4:	08011cb5 	.word	0x08011cb5
 8011ac8:	08011ce1 	.word	0x08011ce1
 8011acc:	2000361c 	.word	0x2000361c
 8011ad0:	20003684 	.word	0x20003684
 8011ad4:	200036ec 	.word	0x200036ec

08011ad8 <stdio_exit_handler>:
 8011ad8:	b510      	push	{r4, lr}
 8011ada:	4a03      	ldr	r2, [pc, #12]	@ (8011ae8 <stdio_exit_handler+0x10>)
 8011adc:	4903      	ldr	r1, [pc, #12]	@ (8011aec <stdio_exit_handler+0x14>)
 8011ade:	4804      	ldr	r0, [pc, #16]	@ (8011af0 <stdio_exit_handler+0x18>)
 8011ae0:	f000 f86c 	bl	8011bbc <_fwalk_sglue>
 8011ae4:	bd10      	pop	{r4, pc}
 8011ae6:	46c0      	nop			@ (mov r8, r8)
 8011ae8:	2000014c 	.word	0x2000014c
 8011aec:	08013b7d 	.word	0x08013b7d
 8011af0:	2000015c 	.word	0x2000015c

08011af4 <cleanup_stdio>:
 8011af4:	6841      	ldr	r1, [r0, #4]
 8011af6:	4b0b      	ldr	r3, [pc, #44]	@ (8011b24 <cleanup_stdio+0x30>)
 8011af8:	b510      	push	{r4, lr}
 8011afa:	0004      	movs	r4, r0
 8011afc:	4299      	cmp	r1, r3
 8011afe:	d001      	beq.n	8011b04 <cleanup_stdio+0x10>
 8011b00:	f002 f83c 	bl	8013b7c <_fflush_r>
 8011b04:	68a1      	ldr	r1, [r4, #8]
 8011b06:	4b08      	ldr	r3, [pc, #32]	@ (8011b28 <cleanup_stdio+0x34>)
 8011b08:	4299      	cmp	r1, r3
 8011b0a:	d002      	beq.n	8011b12 <cleanup_stdio+0x1e>
 8011b0c:	0020      	movs	r0, r4
 8011b0e:	f002 f835 	bl	8013b7c <_fflush_r>
 8011b12:	68e1      	ldr	r1, [r4, #12]
 8011b14:	4b05      	ldr	r3, [pc, #20]	@ (8011b2c <cleanup_stdio+0x38>)
 8011b16:	4299      	cmp	r1, r3
 8011b18:	d002      	beq.n	8011b20 <cleanup_stdio+0x2c>
 8011b1a:	0020      	movs	r0, r4
 8011b1c:	f002 f82e 	bl	8013b7c <_fflush_r>
 8011b20:	bd10      	pop	{r4, pc}
 8011b22:	46c0      	nop			@ (mov r8, r8)
 8011b24:	2000361c 	.word	0x2000361c
 8011b28:	20003684 	.word	0x20003684
 8011b2c:	200036ec 	.word	0x200036ec

08011b30 <global_stdio_init.part.0>:
 8011b30:	b510      	push	{r4, lr}
 8011b32:	4b09      	ldr	r3, [pc, #36]	@ (8011b58 <global_stdio_init.part.0+0x28>)
 8011b34:	4a09      	ldr	r2, [pc, #36]	@ (8011b5c <global_stdio_init.part.0+0x2c>)
 8011b36:	2104      	movs	r1, #4
 8011b38:	601a      	str	r2, [r3, #0]
 8011b3a:	4809      	ldr	r0, [pc, #36]	@ (8011b60 <global_stdio_init.part.0+0x30>)
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f7ff ff95 	bl	8011a6c <std>
 8011b42:	2201      	movs	r2, #1
 8011b44:	2109      	movs	r1, #9
 8011b46:	4807      	ldr	r0, [pc, #28]	@ (8011b64 <global_stdio_init.part.0+0x34>)
 8011b48:	f7ff ff90 	bl	8011a6c <std>
 8011b4c:	2202      	movs	r2, #2
 8011b4e:	2112      	movs	r1, #18
 8011b50:	4805      	ldr	r0, [pc, #20]	@ (8011b68 <global_stdio_init.part.0+0x38>)
 8011b52:	f7ff ff8b 	bl	8011a6c <std>
 8011b56:	bd10      	pop	{r4, pc}
 8011b58:	20003754 	.word	0x20003754
 8011b5c:	08011ad9 	.word	0x08011ad9
 8011b60:	2000361c 	.word	0x2000361c
 8011b64:	20003684 	.word	0x20003684
 8011b68:	200036ec 	.word	0x200036ec

08011b6c <__sfp_lock_acquire>:
 8011b6c:	b510      	push	{r4, lr}
 8011b6e:	4802      	ldr	r0, [pc, #8]	@ (8011b78 <__sfp_lock_acquire+0xc>)
 8011b70:	f000 f9a3 	bl	8011eba <__retarget_lock_acquire_recursive>
 8011b74:	bd10      	pop	{r4, pc}
 8011b76:	46c0      	nop			@ (mov r8, r8)
 8011b78:	2000375d 	.word	0x2000375d

08011b7c <__sfp_lock_release>:
 8011b7c:	b510      	push	{r4, lr}
 8011b7e:	4802      	ldr	r0, [pc, #8]	@ (8011b88 <__sfp_lock_release+0xc>)
 8011b80:	f000 f99c 	bl	8011ebc <__retarget_lock_release_recursive>
 8011b84:	bd10      	pop	{r4, pc}
 8011b86:	46c0      	nop			@ (mov r8, r8)
 8011b88:	2000375d 	.word	0x2000375d

08011b8c <__sinit>:
 8011b8c:	b510      	push	{r4, lr}
 8011b8e:	0004      	movs	r4, r0
 8011b90:	f7ff ffec 	bl	8011b6c <__sfp_lock_acquire>
 8011b94:	6a23      	ldr	r3, [r4, #32]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d002      	beq.n	8011ba0 <__sinit+0x14>
 8011b9a:	f7ff ffef 	bl	8011b7c <__sfp_lock_release>
 8011b9e:	bd10      	pop	{r4, pc}
 8011ba0:	4b04      	ldr	r3, [pc, #16]	@ (8011bb4 <__sinit+0x28>)
 8011ba2:	6223      	str	r3, [r4, #32]
 8011ba4:	4b04      	ldr	r3, [pc, #16]	@ (8011bb8 <__sinit+0x2c>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d1f6      	bne.n	8011b9a <__sinit+0xe>
 8011bac:	f7ff ffc0 	bl	8011b30 <global_stdio_init.part.0>
 8011bb0:	e7f3      	b.n	8011b9a <__sinit+0xe>
 8011bb2:	46c0      	nop			@ (mov r8, r8)
 8011bb4:	08011af5 	.word	0x08011af5
 8011bb8:	20003754 	.word	0x20003754

08011bbc <_fwalk_sglue>:
 8011bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bbe:	0014      	movs	r4, r2
 8011bc0:	2600      	movs	r6, #0
 8011bc2:	9000      	str	r0, [sp, #0]
 8011bc4:	9101      	str	r1, [sp, #4]
 8011bc6:	68a5      	ldr	r5, [r4, #8]
 8011bc8:	6867      	ldr	r7, [r4, #4]
 8011bca:	3f01      	subs	r7, #1
 8011bcc:	d504      	bpl.n	8011bd8 <_fwalk_sglue+0x1c>
 8011bce:	6824      	ldr	r4, [r4, #0]
 8011bd0:	2c00      	cmp	r4, #0
 8011bd2:	d1f8      	bne.n	8011bc6 <_fwalk_sglue+0xa>
 8011bd4:	0030      	movs	r0, r6
 8011bd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011bd8:	89ab      	ldrh	r3, [r5, #12]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d908      	bls.n	8011bf0 <_fwalk_sglue+0x34>
 8011bde:	220e      	movs	r2, #14
 8011be0:	5eab      	ldrsh	r3, [r5, r2]
 8011be2:	3301      	adds	r3, #1
 8011be4:	d004      	beq.n	8011bf0 <_fwalk_sglue+0x34>
 8011be6:	0029      	movs	r1, r5
 8011be8:	9800      	ldr	r0, [sp, #0]
 8011bea:	9b01      	ldr	r3, [sp, #4]
 8011bec:	4798      	blx	r3
 8011bee:	4306      	orrs	r6, r0
 8011bf0:	3568      	adds	r5, #104	@ 0x68
 8011bf2:	e7ea      	b.n	8011bca <_fwalk_sglue+0xe>

08011bf4 <iprintf>:
 8011bf4:	b40f      	push	{r0, r1, r2, r3}
 8011bf6:	b507      	push	{r0, r1, r2, lr}
 8011bf8:	4905      	ldr	r1, [pc, #20]	@ (8011c10 <iprintf+0x1c>)
 8011bfa:	ab04      	add	r3, sp, #16
 8011bfc:	6808      	ldr	r0, [r1, #0]
 8011bfe:	cb04      	ldmia	r3!, {r2}
 8011c00:	6881      	ldr	r1, [r0, #8]
 8011c02:	9301      	str	r3, [sp, #4]
 8011c04:	f001 fe18 	bl	8013838 <_vfiprintf_r>
 8011c08:	b003      	add	sp, #12
 8011c0a:	bc08      	pop	{r3}
 8011c0c:	b004      	add	sp, #16
 8011c0e:	4718      	bx	r3
 8011c10:	20000158 	.word	0x20000158

08011c14 <siprintf>:
 8011c14:	b40e      	push	{r1, r2, r3}
 8011c16:	b500      	push	{lr}
 8011c18:	490b      	ldr	r1, [pc, #44]	@ (8011c48 <siprintf+0x34>)
 8011c1a:	b09c      	sub	sp, #112	@ 0x70
 8011c1c:	ab1d      	add	r3, sp, #116	@ 0x74
 8011c1e:	9002      	str	r0, [sp, #8]
 8011c20:	9006      	str	r0, [sp, #24]
 8011c22:	9107      	str	r1, [sp, #28]
 8011c24:	9104      	str	r1, [sp, #16]
 8011c26:	4809      	ldr	r0, [pc, #36]	@ (8011c4c <siprintf+0x38>)
 8011c28:	4909      	ldr	r1, [pc, #36]	@ (8011c50 <siprintf+0x3c>)
 8011c2a:	cb04      	ldmia	r3!, {r2}
 8011c2c:	9105      	str	r1, [sp, #20]
 8011c2e:	6800      	ldr	r0, [r0, #0]
 8011c30:	a902      	add	r1, sp, #8
 8011c32:	9301      	str	r3, [sp, #4]
 8011c34:	f001 fcda 	bl	80135ec <_svfiprintf_r>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	9b02      	ldr	r3, [sp, #8]
 8011c3c:	701a      	strb	r2, [r3, #0]
 8011c3e:	b01c      	add	sp, #112	@ 0x70
 8011c40:	bc08      	pop	{r3}
 8011c42:	b003      	add	sp, #12
 8011c44:	4718      	bx	r3
 8011c46:	46c0      	nop			@ (mov r8, r8)
 8011c48:	7fffffff 	.word	0x7fffffff
 8011c4c:	20000158 	.word	0x20000158
 8011c50:	ffff0208 	.word	0xffff0208

08011c54 <__sread>:
 8011c54:	b570      	push	{r4, r5, r6, lr}
 8011c56:	000c      	movs	r4, r1
 8011c58:	250e      	movs	r5, #14
 8011c5a:	5f49      	ldrsh	r1, [r1, r5]
 8011c5c:	f000 f8da 	bl	8011e14 <_read_r>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	db03      	blt.n	8011c6c <__sread+0x18>
 8011c64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011c66:	181b      	adds	r3, r3, r0
 8011c68:	6563      	str	r3, [r4, #84]	@ 0x54
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	89a3      	ldrh	r3, [r4, #12]
 8011c6e:	4a02      	ldr	r2, [pc, #8]	@ (8011c78 <__sread+0x24>)
 8011c70:	4013      	ands	r3, r2
 8011c72:	81a3      	strh	r3, [r4, #12]
 8011c74:	e7f9      	b.n	8011c6a <__sread+0x16>
 8011c76:	46c0      	nop			@ (mov r8, r8)
 8011c78:	ffffefff 	.word	0xffffefff

08011c7c <__swrite>:
 8011c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c7e:	001f      	movs	r7, r3
 8011c80:	898b      	ldrh	r3, [r1, #12]
 8011c82:	0005      	movs	r5, r0
 8011c84:	000c      	movs	r4, r1
 8011c86:	0016      	movs	r6, r2
 8011c88:	05db      	lsls	r3, r3, #23
 8011c8a:	d505      	bpl.n	8011c98 <__swrite+0x1c>
 8011c8c:	230e      	movs	r3, #14
 8011c8e:	5ec9      	ldrsh	r1, [r1, r3]
 8011c90:	2200      	movs	r2, #0
 8011c92:	2302      	movs	r3, #2
 8011c94:	f000 f8aa 	bl	8011dec <_lseek_r>
 8011c98:	89a3      	ldrh	r3, [r4, #12]
 8011c9a:	4a05      	ldr	r2, [pc, #20]	@ (8011cb0 <__swrite+0x34>)
 8011c9c:	0028      	movs	r0, r5
 8011c9e:	4013      	ands	r3, r2
 8011ca0:	81a3      	strh	r3, [r4, #12]
 8011ca2:	0032      	movs	r2, r6
 8011ca4:	230e      	movs	r3, #14
 8011ca6:	5ee1      	ldrsh	r1, [r4, r3]
 8011ca8:	003b      	movs	r3, r7
 8011caa:	f000 f8c7 	bl	8011e3c <_write_r>
 8011cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cb0:	ffffefff 	.word	0xffffefff

08011cb4 <__sseek>:
 8011cb4:	b570      	push	{r4, r5, r6, lr}
 8011cb6:	000c      	movs	r4, r1
 8011cb8:	250e      	movs	r5, #14
 8011cba:	5f49      	ldrsh	r1, [r1, r5]
 8011cbc:	f000 f896 	bl	8011dec <_lseek_r>
 8011cc0:	89a3      	ldrh	r3, [r4, #12]
 8011cc2:	1c42      	adds	r2, r0, #1
 8011cc4:	d103      	bne.n	8011cce <__sseek+0x1a>
 8011cc6:	4a05      	ldr	r2, [pc, #20]	@ (8011cdc <__sseek+0x28>)
 8011cc8:	4013      	ands	r3, r2
 8011cca:	81a3      	strh	r3, [r4, #12]
 8011ccc:	bd70      	pop	{r4, r5, r6, pc}
 8011cce:	2280      	movs	r2, #128	@ 0x80
 8011cd0:	0152      	lsls	r2, r2, #5
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	81a3      	strh	r3, [r4, #12]
 8011cd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011cd8:	e7f8      	b.n	8011ccc <__sseek+0x18>
 8011cda:	46c0      	nop			@ (mov r8, r8)
 8011cdc:	ffffefff 	.word	0xffffefff

08011ce0 <__sclose>:
 8011ce0:	b510      	push	{r4, lr}
 8011ce2:	230e      	movs	r3, #14
 8011ce4:	5ec9      	ldrsh	r1, [r1, r3]
 8011ce6:	f000 f86f 	bl	8011dc8 <_close_r>
 8011cea:	bd10      	pop	{r4, pc}

08011cec <_vsniprintf_r>:
 8011cec:	b530      	push	{r4, r5, lr}
 8011cee:	0014      	movs	r4, r2
 8011cf0:	0005      	movs	r5, r0
 8011cf2:	001a      	movs	r2, r3
 8011cf4:	b09b      	sub	sp, #108	@ 0x6c
 8011cf6:	2c00      	cmp	r4, #0
 8011cf8:	da05      	bge.n	8011d06 <_vsniprintf_r+0x1a>
 8011cfa:	238b      	movs	r3, #139	@ 0x8b
 8011cfc:	6003      	str	r3, [r0, #0]
 8011cfe:	2001      	movs	r0, #1
 8011d00:	4240      	negs	r0, r0
 8011d02:	b01b      	add	sp, #108	@ 0x6c
 8011d04:	bd30      	pop	{r4, r5, pc}
 8011d06:	2382      	movs	r3, #130	@ 0x82
 8011d08:	4668      	mov	r0, sp
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	8183      	strh	r3, [r0, #12]
 8011d0e:	2300      	movs	r3, #0
 8011d10:	9100      	str	r1, [sp, #0]
 8011d12:	9104      	str	r1, [sp, #16]
 8011d14:	429c      	cmp	r4, r3
 8011d16:	d000      	beq.n	8011d1a <_vsniprintf_r+0x2e>
 8011d18:	1e63      	subs	r3, r4, #1
 8011d1a:	9302      	str	r3, [sp, #8]
 8011d1c:	9305      	str	r3, [sp, #20]
 8011d1e:	2301      	movs	r3, #1
 8011d20:	4669      	mov	r1, sp
 8011d22:	425b      	negs	r3, r3
 8011d24:	81cb      	strh	r3, [r1, #14]
 8011d26:	0028      	movs	r0, r5
 8011d28:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011d2a:	f001 fc5f 	bl	80135ec <_svfiprintf_r>
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	da01      	bge.n	8011d36 <_vsniprintf_r+0x4a>
 8011d32:	238b      	movs	r3, #139	@ 0x8b
 8011d34:	602b      	str	r3, [r5, #0]
 8011d36:	2c00      	cmp	r4, #0
 8011d38:	d0e3      	beq.n	8011d02 <_vsniprintf_r+0x16>
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	9b00      	ldr	r3, [sp, #0]
 8011d3e:	701a      	strb	r2, [r3, #0]
 8011d40:	e7df      	b.n	8011d02 <_vsniprintf_r+0x16>
	...

08011d44 <vsniprintf>:
 8011d44:	b513      	push	{r0, r1, r4, lr}
 8011d46:	4c04      	ldr	r4, [pc, #16]	@ (8011d58 <vsniprintf+0x14>)
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	0013      	movs	r3, r2
 8011d4c:	000a      	movs	r2, r1
 8011d4e:	0001      	movs	r1, r0
 8011d50:	6820      	ldr	r0, [r4, #0]
 8011d52:	f7ff ffcb 	bl	8011cec <_vsniprintf_r>
 8011d56:	bd16      	pop	{r1, r2, r4, pc}
 8011d58:	20000158 	.word	0x20000158

08011d5c <memset>:
 8011d5c:	0003      	movs	r3, r0
 8011d5e:	1882      	adds	r2, r0, r2
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d100      	bne.n	8011d66 <memset+0xa>
 8011d64:	4770      	bx	lr
 8011d66:	7019      	strb	r1, [r3, #0]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	e7f9      	b.n	8011d60 <memset+0x4>

08011d6c <strncpy>:
 8011d6c:	0003      	movs	r3, r0
 8011d6e:	b530      	push	{r4, r5, lr}
 8011d70:	001d      	movs	r5, r3
 8011d72:	2a00      	cmp	r2, #0
 8011d74:	d006      	beq.n	8011d84 <strncpy+0x18>
 8011d76:	780c      	ldrb	r4, [r1, #0]
 8011d78:	3a01      	subs	r2, #1
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	702c      	strb	r4, [r5, #0]
 8011d7e:	3101      	adds	r1, #1
 8011d80:	2c00      	cmp	r4, #0
 8011d82:	d1f5      	bne.n	8011d70 <strncpy+0x4>
 8011d84:	2100      	movs	r1, #0
 8011d86:	189a      	adds	r2, r3, r2
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d100      	bne.n	8011d8e <strncpy+0x22>
 8011d8c:	bd30      	pop	{r4, r5, pc}
 8011d8e:	7019      	strb	r1, [r3, #0]
 8011d90:	3301      	adds	r3, #1
 8011d92:	e7f9      	b.n	8011d88 <strncpy+0x1c>

08011d94 <strstr>:
 8011d94:	780a      	ldrb	r2, [r1, #0]
 8011d96:	b530      	push	{r4, r5, lr}
 8011d98:	2a00      	cmp	r2, #0
 8011d9a:	d10c      	bne.n	8011db6 <strstr+0x22>
 8011d9c:	bd30      	pop	{r4, r5, pc}
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d108      	bne.n	8011db4 <strstr+0x20>
 8011da2:	2301      	movs	r3, #1
 8011da4:	5ccc      	ldrb	r4, [r1, r3]
 8011da6:	2c00      	cmp	r4, #0
 8011da8:	d0f8      	beq.n	8011d9c <strstr+0x8>
 8011daa:	5cc5      	ldrb	r5, [r0, r3]
 8011dac:	42a5      	cmp	r5, r4
 8011dae:	d101      	bne.n	8011db4 <strstr+0x20>
 8011db0:	3301      	adds	r3, #1
 8011db2:	e7f7      	b.n	8011da4 <strstr+0x10>
 8011db4:	3001      	adds	r0, #1
 8011db6:	7803      	ldrb	r3, [r0, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d1f0      	bne.n	8011d9e <strstr+0xa>
 8011dbc:	0018      	movs	r0, r3
 8011dbe:	e7ed      	b.n	8011d9c <strstr+0x8>

08011dc0 <_localeconv_r>:
 8011dc0:	4800      	ldr	r0, [pc, #0]	@ (8011dc4 <_localeconv_r+0x4>)
 8011dc2:	4770      	bx	lr
 8011dc4:	20000298 	.word	0x20000298

08011dc8 <_close_r>:
 8011dc8:	2300      	movs	r3, #0
 8011dca:	b570      	push	{r4, r5, r6, lr}
 8011dcc:	4d06      	ldr	r5, [pc, #24]	@ (8011de8 <_close_r+0x20>)
 8011dce:	0004      	movs	r4, r0
 8011dd0:	0008      	movs	r0, r1
 8011dd2:	602b      	str	r3, [r5, #0]
 8011dd4:	f7f6 f92c 	bl	8008030 <_close>
 8011dd8:	1c43      	adds	r3, r0, #1
 8011dda:	d103      	bne.n	8011de4 <_close_r+0x1c>
 8011ddc:	682b      	ldr	r3, [r5, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d000      	beq.n	8011de4 <_close_r+0x1c>
 8011de2:	6023      	str	r3, [r4, #0]
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	46c0      	nop			@ (mov r8, r8)
 8011de8:	20003758 	.word	0x20003758

08011dec <_lseek_r>:
 8011dec:	b570      	push	{r4, r5, r6, lr}
 8011dee:	0004      	movs	r4, r0
 8011df0:	0008      	movs	r0, r1
 8011df2:	0011      	movs	r1, r2
 8011df4:	001a      	movs	r2, r3
 8011df6:	2300      	movs	r3, #0
 8011df8:	4d05      	ldr	r5, [pc, #20]	@ (8011e10 <_lseek_r+0x24>)
 8011dfa:	602b      	str	r3, [r5, #0]
 8011dfc:	f7f6 f939 	bl	8008072 <_lseek>
 8011e00:	1c43      	adds	r3, r0, #1
 8011e02:	d103      	bne.n	8011e0c <_lseek_r+0x20>
 8011e04:	682b      	ldr	r3, [r5, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d000      	beq.n	8011e0c <_lseek_r+0x20>
 8011e0a:	6023      	str	r3, [r4, #0]
 8011e0c:	bd70      	pop	{r4, r5, r6, pc}
 8011e0e:	46c0      	nop			@ (mov r8, r8)
 8011e10:	20003758 	.word	0x20003758

08011e14 <_read_r>:
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	0004      	movs	r4, r0
 8011e18:	0008      	movs	r0, r1
 8011e1a:	0011      	movs	r1, r2
 8011e1c:	001a      	movs	r2, r3
 8011e1e:	2300      	movs	r3, #0
 8011e20:	4d05      	ldr	r5, [pc, #20]	@ (8011e38 <_read_r+0x24>)
 8011e22:	602b      	str	r3, [r5, #0]
 8011e24:	f7f6 f8e7 	bl	8007ff6 <_read>
 8011e28:	1c43      	adds	r3, r0, #1
 8011e2a:	d103      	bne.n	8011e34 <_read_r+0x20>
 8011e2c:	682b      	ldr	r3, [r5, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d000      	beq.n	8011e34 <_read_r+0x20>
 8011e32:	6023      	str	r3, [r4, #0]
 8011e34:	bd70      	pop	{r4, r5, r6, pc}
 8011e36:	46c0      	nop			@ (mov r8, r8)
 8011e38:	20003758 	.word	0x20003758

08011e3c <_write_r>:
 8011e3c:	b570      	push	{r4, r5, r6, lr}
 8011e3e:	0004      	movs	r4, r0
 8011e40:	0008      	movs	r0, r1
 8011e42:	0011      	movs	r1, r2
 8011e44:	001a      	movs	r2, r3
 8011e46:	2300      	movs	r3, #0
 8011e48:	4d05      	ldr	r5, [pc, #20]	@ (8011e60 <_write_r+0x24>)
 8011e4a:	602b      	str	r3, [r5, #0]
 8011e4c:	f7f6 fd34 	bl	80088b8 <_write>
 8011e50:	1c43      	adds	r3, r0, #1
 8011e52:	d103      	bne.n	8011e5c <_write_r+0x20>
 8011e54:	682b      	ldr	r3, [r5, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d000      	beq.n	8011e5c <_write_r+0x20>
 8011e5a:	6023      	str	r3, [r4, #0]
 8011e5c:	bd70      	pop	{r4, r5, r6, pc}
 8011e5e:	46c0      	nop			@ (mov r8, r8)
 8011e60:	20003758 	.word	0x20003758

08011e64 <__errno>:
 8011e64:	4b01      	ldr	r3, [pc, #4]	@ (8011e6c <__errno+0x8>)
 8011e66:	6818      	ldr	r0, [r3, #0]
 8011e68:	4770      	bx	lr
 8011e6a:	46c0      	nop			@ (mov r8, r8)
 8011e6c:	20000158 	.word	0x20000158

08011e70 <__libc_init_array>:
 8011e70:	b570      	push	{r4, r5, r6, lr}
 8011e72:	2600      	movs	r6, #0
 8011e74:	4c0c      	ldr	r4, [pc, #48]	@ (8011ea8 <__libc_init_array+0x38>)
 8011e76:	4d0d      	ldr	r5, [pc, #52]	@ (8011eac <__libc_init_array+0x3c>)
 8011e78:	1b64      	subs	r4, r4, r5
 8011e7a:	10a4      	asrs	r4, r4, #2
 8011e7c:	42a6      	cmp	r6, r4
 8011e7e:	d109      	bne.n	8011e94 <__libc_init_array+0x24>
 8011e80:	2600      	movs	r6, #0
 8011e82:	f002 fd49 	bl	8014918 <_init>
 8011e86:	4c0a      	ldr	r4, [pc, #40]	@ (8011eb0 <__libc_init_array+0x40>)
 8011e88:	4d0a      	ldr	r5, [pc, #40]	@ (8011eb4 <__libc_init_array+0x44>)
 8011e8a:	1b64      	subs	r4, r4, r5
 8011e8c:	10a4      	asrs	r4, r4, #2
 8011e8e:	42a6      	cmp	r6, r4
 8011e90:	d105      	bne.n	8011e9e <__libc_init_array+0x2e>
 8011e92:	bd70      	pop	{r4, r5, r6, pc}
 8011e94:	00b3      	lsls	r3, r6, #2
 8011e96:	58eb      	ldr	r3, [r5, r3]
 8011e98:	4798      	blx	r3
 8011e9a:	3601      	adds	r6, #1
 8011e9c:	e7ee      	b.n	8011e7c <__libc_init_array+0xc>
 8011e9e:	00b3      	lsls	r3, r6, #2
 8011ea0:	58eb      	ldr	r3, [r5, r3]
 8011ea2:	4798      	blx	r3
 8011ea4:	3601      	adds	r6, #1
 8011ea6:	e7f2      	b.n	8011e8e <__libc_init_array+0x1e>
 8011ea8:	08027618 	.word	0x08027618
 8011eac:	08027618 	.word	0x08027618
 8011eb0:	0802761c 	.word	0x0802761c
 8011eb4:	08027618 	.word	0x08027618

08011eb8 <__retarget_lock_init_recursive>:
 8011eb8:	4770      	bx	lr

08011eba <__retarget_lock_acquire_recursive>:
 8011eba:	4770      	bx	lr

08011ebc <__retarget_lock_release_recursive>:
 8011ebc:	4770      	bx	lr

08011ebe <memchr>:
 8011ebe:	b2c9      	uxtb	r1, r1
 8011ec0:	1882      	adds	r2, r0, r2
 8011ec2:	4290      	cmp	r0, r2
 8011ec4:	d101      	bne.n	8011eca <memchr+0xc>
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	4770      	bx	lr
 8011eca:	7803      	ldrb	r3, [r0, #0]
 8011ecc:	428b      	cmp	r3, r1
 8011ece:	d0fb      	beq.n	8011ec8 <memchr+0xa>
 8011ed0:	3001      	adds	r0, #1
 8011ed2:	e7f6      	b.n	8011ec2 <memchr+0x4>

08011ed4 <quorem>:
 8011ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ed6:	6902      	ldr	r2, [r0, #16]
 8011ed8:	690f      	ldr	r7, [r1, #16]
 8011eda:	b087      	sub	sp, #28
 8011edc:	0006      	movs	r6, r0
 8011ede:	000b      	movs	r3, r1
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	9102      	str	r1, [sp, #8]
 8011ee4:	42ba      	cmp	r2, r7
 8011ee6:	db6d      	blt.n	8011fc4 <quorem+0xf0>
 8011ee8:	3f01      	subs	r7, #1
 8011eea:	00bc      	lsls	r4, r7, #2
 8011eec:	3314      	adds	r3, #20
 8011eee:	9305      	str	r3, [sp, #20]
 8011ef0:	191b      	adds	r3, r3, r4
 8011ef2:	9303      	str	r3, [sp, #12]
 8011ef4:	0033      	movs	r3, r6
 8011ef6:	3314      	adds	r3, #20
 8011ef8:	191c      	adds	r4, r3, r4
 8011efa:	9301      	str	r3, [sp, #4]
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	9304      	str	r3, [sp, #16]
 8011f00:	9b03      	ldr	r3, [sp, #12]
 8011f02:	9804      	ldr	r0, [sp, #16]
 8011f04:	681d      	ldr	r5, [r3, #0]
 8011f06:	3501      	adds	r5, #1
 8011f08:	0029      	movs	r1, r5
 8011f0a:	f7ee f941 	bl	8000190 <__udivsi3>
 8011f0e:	9b04      	ldr	r3, [sp, #16]
 8011f10:	9000      	str	r0, [sp, #0]
 8011f12:	42ab      	cmp	r3, r5
 8011f14:	d32b      	bcc.n	8011f6e <quorem+0x9a>
 8011f16:	9b05      	ldr	r3, [sp, #20]
 8011f18:	9d01      	ldr	r5, [sp, #4]
 8011f1a:	469c      	mov	ip, r3
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	9305      	str	r3, [sp, #20]
 8011f20:	9304      	str	r3, [sp, #16]
 8011f22:	4662      	mov	r2, ip
 8011f24:	ca08      	ldmia	r2!, {r3}
 8011f26:	6828      	ldr	r0, [r5, #0]
 8011f28:	4694      	mov	ip, r2
 8011f2a:	9a00      	ldr	r2, [sp, #0]
 8011f2c:	b299      	uxth	r1, r3
 8011f2e:	4351      	muls	r1, r2
 8011f30:	9a05      	ldr	r2, [sp, #20]
 8011f32:	0c1b      	lsrs	r3, r3, #16
 8011f34:	1889      	adds	r1, r1, r2
 8011f36:	9a00      	ldr	r2, [sp, #0]
 8011f38:	4353      	muls	r3, r2
 8011f3a:	0c0a      	lsrs	r2, r1, #16
 8011f3c:	189b      	adds	r3, r3, r2
 8011f3e:	0c1a      	lsrs	r2, r3, #16
 8011f40:	b289      	uxth	r1, r1
 8011f42:	9205      	str	r2, [sp, #20]
 8011f44:	b282      	uxth	r2, r0
 8011f46:	1a52      	subs	r2, r2, r1
 8011f48:	9904      	ldr	r1, [sp, #16]
 8011f4a:	0c00      	lsrs	r0, r0, #16
 8011f4c:	1852      	adds	r2, r2, r1
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	1411      	asrs	r1, r2, #16
 8011f52:	1ac3      	subs	r3, r0, r3
 8011f54:	185b      	adds	r3, r3, r1
 8011f56:	1419      	asrs	r1, r3, #16
 8011f58:	b292      	uxth	r2, r2
 8011f5a:	041b      	lsls	r3, r3, #16
 8011f5c:	431a      	orrs	r2, r3
 8011f5e:	9b03      	ldr	r3, [sp, #12]
 8011f60:	9104      	str	r1, [sp, #16]
 8011f62:	c504      	stmia	r5!, {r2}
 8011f64:	4563      	cmp	r3, ip
 8011f66:	d2dc      	bcs.n	8011f22 <quorem+0x4e>
 8011f68:	6823      	ldr	r3, [r4, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d030      	beq.n	8011fd0 <quorem+0xfc>
 8011f6e:	0030      	movs	r0, r6
 8011f70:	9902      	ldr	r1, [sp, #8]
 8011f72:	f001 f9c5 	bl	8013300 <__mcmp>
 8011f76:	2800      	cmp	r0, #0
 8011f78:	db23      	blt.n	8011fc2 <quorem+0xee>
 8011f7a:	0034      	movs	r4, r6
 8011f7c:	2500      	movs	r5, #0
 8011f7e:	9902      	ldr	r1, [sp, #8]
 8011f80:	3414      	adds	r4, #20
 8011f82:	3114      	adds	r1, #20
 8011f84:	6823      	ldr	r3, [r4, #0]
 8011f86:	c901      	ldmia	r1!, {r0}
 8011f88:	9302      	str	r3, [sp, #8]
 8011f8a:	466b      	mov	r3, sp
 8011f8c:	891b      	ldrh	r3, [r3, #8]
 8011f8e:	b282      	uxth	r2, r0
 8011f90:	1a9a      	subs	r2, r3, r2
 8011f92:	9b02      	ldr	r3, [sp, #8]
 8011f94:	1952      	adds	r2, r2, r5
 8011f96:	0c00      	lsrs	r0, r0, #16
 8011f98:	0c1b      	lsrs	r3, r3, #16
 8011f9a:	1a1b      	subs	r3, r3, r0
 8011f9c:	1410      	asrs	r0, r2, #16
 8011f9e:	181b      	adds	r3, r3, r0
 8011fa0:	141d      	asrs	r5, r3, #16
 8011fa2:	b292      	uxth	r2, r2
 8011fa4:	041b      	lsls	r3, r3, #16
 8011fa6:	431a      	orrs	r2, r3
 8011fa8:	9b03      	ldr	r3, [sp, #12]
 8011faa:	c404      	stmia	r4!, {r2}
 8011fac:	428b      	cmp	r3, r1
 8011fae:	d2e9      	bcs.n	8011f84 <quorem+0xb0>
 8011fb0:	9a01      	ldr	r2, [sp, #4]
 8011fb2:	00bb      	lsls	r3, r7, #2
 8011fb4:	18d3      	adds	r3, r2, r3
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	2a00      	cmp	r2, #0
 8011fba:	d013      	beq.n	8011fe4 <quorem+0x110>
 8011fbc:	9b00      	ldr	r3, [sp, #0]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	9300      	str	r3, [sp, #0]
 8011fc2:	9800      	ldr	r0, [sp, #0]
 8011fc4:	b007      	add	sp, #28
 8011fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d104      	bne.n	8011fd8 <quorem+0x104>
 8011fce:	3f01      	subs	r7, #1
 8011fd0:	9b01      	ldr	r3, [sp, #4]
 8011fd2:	3c04      	subs	r4, #4
 8011fd4:	42a3      	cmp	r3, r4
 8011fd6:	d3f7      	bcc.n	8011fc8 <quorem+0xf4>
 8011fd8:	6137      	str	r7, [r6, #16]
 8011fda:	e7c8      	b.n	8011f6e <quorem+0x9a>
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	2a00      	cmp	r2, #0
 8011fe0:	d104      	bne.n	8011fec <quorem+0x118>
 8011fe2:	3f01      	subs	r7, #1
 8011fe4:	9a01      	ldr	r2, [sp, #4]
 8011fe6:	3b04      	subs	r3, #4
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d3f7      	bcc.n	8011fdc <quorem+0x108>
 8011fec:	6137      	str	r7, [r6, #16]
 8011fee:	e7e5      	b.n	8011fbc <quorem+0xe8>

08011ff0 <_dtoa_r>:
 8011ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ff2:	0014      	movs	r4, r2
 8011ff4:	001d      	movs	r5, r3
 8011ff6:	69c6      	ldr	r6, [r0, #28]
 8011ff8:	b09d      	sub	sp, #116	@ 0x74
 8011ffa:	940a      	str	r4, [sp, #40]	@ 0x28
 8011ffc:	950b      	str	r5, [sp, #44]	@ 0x2c
 8011ffe:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8012000:	9003      	str	r0, [sp, #12]
 8012002:	2e00      	cmp	r6, #0
 8012004:	d10f      	bne.n	8012026 <_dtoa_r+0x36>
 8012006:	2010      	movs	r0, #16
 8012008:	f000 fe30 	bl	8012c6c <malloc>
 801200c:	9b03      	ldr	r3, [sp, #12]
 801200e:	1e02      	subs	r2, r0, #0
 8012010:	61d8      	str	r0, [r3, #28]
 8012012:	d104      	bne.n	801201e <_dtoa_r+0x2e>
 8012014:	21ef      	movs	r1, #239	@ 0xef
 8012016:	4bc7      	ldr	r3, [pc, #796]	@ (8012334 <_dtoa_r+0x344>)
 8012018:	48c7      	ldr	r0, [pc, #796]	@ (8012338 <_dtoa_r+0x348>)
 801201a:	f001 feab 	bl	8013d74 <__assert_func>
 801201e:	6046      	str	r6, [r0, #4]
 8012020:	6086      	str	r6, [r0, #8]
 8012022:	6006      	str	r6, [r0, #0]
 8012024:	60c6      	str	r6, [r0, #12]
 8012026:	9b03      	ldr	r3, [sp, #12]
 8012028:	69db      	ldr	r3, [r3, #28]
 801202a:	6819      	ldr	r1, [r3, #0]
 801202c:	2900      	cmp	r1, #0
 801202e:	d00b      	beq.n	8012048 <_dtoa_r+0x58>
 8012030:	685a      	ldr	r2, [r3, #4]
 8012032:	2301      	movs	r3, #1
 8012034:	4093      	lsls	r3, r2
 8012036:	604a      	str	r2, [r1, #4]
 8012038:	608b      	str	r3, [r1, #8]
 801203a:	9803      	ldr	r0, [sp, #12]
 801203c:	f000 ff16 	bl	8012e6c <_Bfree>
 8012040:	2200      	movs	r2, #0
 8012042:	9b03      	ldr	r3, [sp, #12]
 8012044:	69db      	ldr	r3, [r3, #28]
 8012046:	601a      	str	r2, [r3, #0]
 8012048:	2d00      	cmp	r5, #0
 801204a:	da1e      	bge.n	801208a <_dtoa_r+0x9a>
 801204c:	2301      	movs	r3, #1
 801204e:	603b      	str	r3, [r7, #0]
 8012050:	006b      	lsls	r3, r5, #1
 8012052:	085b      	lsrs	r3, r3, #1
 8012054:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012056:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012058:	4bb8      	ldr	r3, [pc, #736]	@ (801233c <_dtoa_r+0x34c>)
 801205a:	4ab8      	ldr	r2, [pc, #736]	@ (801233c <_dtoa_r+0x34c>)
 801205c:	403b      	ands	r3, r7
 801205e:	4293      	cmp	r3, r2
 8012060:	d116      	bne.n	8012090 <_dtoa_r+0xa0>
 8012062:	4bb7      	ldr	r3, [pc, #732]	@ (8012340 <_dtoa_r+0x350>)
 8012064:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012066:	6013      	str	r3, [r2, #0]
 8012068:	033b      	lsls	r3, r7, #12
 801206a:	0b1b      	lsrs	r3, r3, #12
 801206c:	4323      	orrs	r3, r4
 801206e:	d101      	bne.n	8012074 <_dtoa_r+0x84>
 8012070:	f000 fd83 	bl	8012b7a <_dtoa_r+0xb8a>
 8012074:	4bb3      	ldr	r3, [pc, #716]	@ (8012344 <_dtoa_r+0x354>)
 8012076:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8012078:	9308      	str	r3, [sp, #32]
 801207a:	2a00      	cmp	r2, #0
 801207c:	d002      	beq.n	8012084 <_dtoa_r+0x94>
 801207e:	4bb2      	ldr	r3, [pc, #712]	@ (8012348 <_dtoa_r+0x358>)
 8012080:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8012082:	6013      	str	r3, [r2, #0]
 8012084:	9808      	ldr	r0, [sp, #32]
 8012086:	b01d      	add	sp, #116	@ 0x74
 8012088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801208a:	2300      	movs	r3, #0
 801208c:	603b      	str	r3, [r7, #0]
 801208e:	e7e2      	b.n	8012056 <_dtoa_r+0x66>
 8012090:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012094:	9212      	str	r2, [sp, #72]	@ 0x48
 8012096:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012098:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801209a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801209c:	2200      	movs	r2, #0
 801209e:	2300      	movs	r3, #0
 80120a0:	f7ee f9fc 	bl	800049c <__aeabi_dcmpeq>
 80120a4:	1e06      	subs	r6, r0, #0
 80120a6:	d00b      	beq.n	80120c0 <_dtoa_r+0xd0>
 80120a8:	2301      	movs	r3, #1
 80120aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80120ac:	6013      	str	r3, [r2, #0]
 80120ae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d002      	beq.n	80120ba <_dtoa_r+0xca>
 80120b4:	4ba5      	ldr	r3, [pc, #660]	@ (801234c <_dtoa_r+0x35c>)
 80120b6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80120b8:	6013      	str	r3, [r2, #0]
 80120ba:	4ba5      	ldr	r3, [pc, #660]	@ (8012350 <_dtoa_r+0x360>)
 80120bc:	9308      	str	r3, [sp, #32]
 80120be:	e7e1      	b.n	8012084 <_dtoa_r+0x94>
 80120c0:	ab1a      	add	r3, sp, #104	@ 0x68
 80120c2:	9301      	str	r3, [sp, #4]
 80120c4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80120c6:	9300      	str	r3, [sp, #0]
 80120c8:	9803      	ldr	r0, [sp, #12]
 80120ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80120cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80120ce:	f001 f9cd 	bl	801346c <__d2b>
 80120d2:	007a      	lsls	r2, r7, #1
 80120d4:	9005      	str	r0, [sp, #20]
 80120d6:	0d52      	lsrs	r2, r2, #21
 80120d8:	d100      	bne.n	80120dc <_dtoa_r+0xec>
 80120da:	e07b      	b.n	80121d4 <_dtoa_r+0x1e4>
 80120dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80120de:	9618      	str	r6, [sp, #96]	@ 0x60
 80120e0:	0319      	lsls	r1, r3, #12
 80120e2:	4b9c      	ldr	r3, [pc, #624]	@ (8012354 <_dtoa_r+0x364>)
 80120e4:	0b09      	lsrs	r1, r1, #12
 80120e6:	430b      	orrs	r3, r1
 80120e8:	499b      	ldr	r1, [pc, #620]	@ (8012358 <_dtoa_r+0x368>)
 80120ea:	1857      	adds	r7, r2, r1
 80120ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80120ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80120f0:	0019      	movs	r1, r3
 80120f2:	2200      	movs	r2, #0
 80120f4:	4b99      	ldr	r3, [pc, #612]	@ (801235c <_dtoa_r+0x36c>)
 80120f6:	f7f0 fd2d 	bl	8002b54 <__aeabi_dsub>
 80120fa:	4a99      	ldr	r2, [pc, #612]	@ (8012360 <_dtoa_r+0x370>)
 80120fc:	4b99      	ldr	r3, [pc, #612]	@ (8012364 <_dtoa_r+0x374>)
 80120fe:	f7f0 fa61 	bl	80025c4 <__aeabi_dmul>
 8012102:	4a99      	ldr	r2, [pc, #612]	@ (8012368 <_dtoa_r+0x378>)
 8012104:	4b99      	ldr	r3, [pc, #612]	@ (801236c <_dtoa_r+0x37c>)
 8012106:	f7ef fab5 	bl	8001674 <__aeabi_dadd>
 801210a:	0004      	movs	r4, r0
 801210c:	0038      	movs	r0, r7
 801210e:	000d      	movs	r5, r1
 8012110:	f7f1 f91a 	bl	8003348 <__aeabi_i2d>
 8012114:	4a96      	ldr	r2, [pc, #600]	@ (8012370 <_dtoa_r+0x380>)
 8012116:	4b97      	ldr	r3, [pc, #604]	@ (8012374 <_dtoa_r+0x384>)
 8012118:	f7f0 fa54 	bl	80025c4 <__aeabi_dmul>
 801211c:	0002      	movs	r2, r0
 801211e:	000b      	movs	r3, r1
 8012120:	0020      	movs	r0, r4
 8012122:	0029      	movs	r1, r5
 8012124:	f7ef faa6 	bl	8001674 <__aeabi_dadd>
 8012128:	0004      	movs	r4, r0
 801212a:	000d      	movs	r5, r1
 801212c:	f7f1 f8d0 	bl	80032d0 <__aeabi_d2iz>
 8012130:	2200      	movs	r2, #0
 8012132:	9004      	str	r0, [sp, #16]
 8012134:	2300      	movs	r3, #0
 8012136:	0020      	movs	r0, r4
 8012138:	0029      	movs	r1, r5
 801213a:	f7ee f9b5 	bl	80004a8 <__aeabi_dcmplt>
 801213e:	2800      	cmp	r0, #0
 8012140:	d00b      	beq.n	801215a <_dtoa_r+0x16a>
 8012142:	9804      	ldr	r0, [sp, #16]
 8012144:	f7f1 f900 	bl	8003348 <__aeabi_i2d>
 8012148:	002b      	movs	r3, r5
 801214a:	0022      	movs	r2, r4
 801214c:	f7ee f9a6 	bl	800049c <__aeabi_dcmpeq>
 8012150:	4243      	negs	r3, r0
 8012152:	4158      	adcs	r0, r3
 8012154:	9b04      	ldr	r3, [sp, #16]
 8012156:	1a1b      	subs	r3, r3, r0
 8012158:	9304      	str	r3, [sp, #16]
 801215a:	2301      	movs	r3, #1
 801215c:	9315      	str	r3, [sp, #84]	@ 0x54
 801215e:	9b04      	ldr	r3, [sp, #16]
 8012160:	2b16      	cmp	r3, #22
 8012162:	d810      	bhi.n	8012186 <_dtoa_r+0x196>
 8012164:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8012166:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8012168:	9a04      	ldr	r2, [sp, #16]
 801216a:	4b83      	ldr	r3, [pc, #524]	@ (8012378 <_dtoa_r+0x388>)
 801216c:	00d2      	lsls	r2, r2, #3
 801216e:	189b      	adds	r3, r3, r2
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	f7ee f998 	bl	80004a8 <__aeabi_dcmplt>
 8012178:	2800      	cmp	r0, #0
 801217a:	d047      	beq.n	801220c <_dtoa_r+0x21c>
 801217c:	9b04      	ldr	r3, [sp, #16]
 801217e:	3b01      	subs	r3, #1
 8012180:	9304      	str	r3, [sp, #16]
 8012182:	2300      	movs	r3, #0
 8012184:	9315      	str	r3, [sp, #84]	@ 0x54
 8012186:	2200      	movs	r2, #0
 8012188:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801218a:	9206      	str	r2, [sp, #24]
 801218c:	1bdb      	subs	r3, r3, r7
 801218e:	1e5a      	subs	r2, r3, #1
 8012190:	d53e      	bpl.n	8012210 <_dtoa_r+0x220>
 8012192:	2201      	movs	r2, #1
 8012194:	1ad3      	subs	r3, r2, r3
 8012196:	9306      	str	r3, [sp, #24]
 8012198:	2300      	movs	r3, #0
 801219a:	930d      	str	r3, [sp, #52]	@ 0x34
 801219c:	9b04      	ldr	r3, [sp, #16]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	db38      	blt.n	8012214 <_dtoa_r+0x224>
 80121a2:	9a04      	ldr	r2, [sp, #16]
 80121a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121a6:	4694      	mov	ip, r2
 80121a8:	4463      	add	r3, ip
 80121aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80121ac:	2300      	movs	r3, #0
 80121ae:	9214      	str	r2, [sp, #80]	@ 0x50
 80121b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80121b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80121b4:	2401      	movs	r4, #1
 80121b6:	2b09      	cmp	r3, #9
 80121b8:	d867      	bhi.n	801228a <_dtoa_r+0x29a>
 80121ba:	2b05      	cmp	r3, #5
 80121bc:	dd02      	ble.n	80121c4 <_dtoa_r+0x1d4>
 80121be:	2400      	movs	r4, #0
 80121c0:	3b04      	subs	r3, #4
 80121c2:	9322      	str	r3, [sp, #136]	@ 0x88
 80121c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80121c6:	1e98      	subs	r0, r3, #2
 80121c8:	2803      	cmp	r0, #3
 80121ca:	d867      	bhi.n	801229c <_dtoa_r+0x2ac>
 80121cc:	f7ed ffcc 	bl	8000168 <__gnu_thumb1_case_uqi>
 80121d0:	5b383a2b 	.word	0x5b383a2b
 80121d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80121d6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80121d8:	18f6      	adds	r6, r6, r3
 80121da:	4b68      	ldr	r3, [pc, #416]	@ (801237c <_dtoa_r+0x38c>)
 80121dc:	18f2      	adds	r2, r6, r3
 80121de:	2a20      	cmp	r2, #32
 80121e0:	dd0f      	ble.n	8012202 <_dtoa_r+0x212>
 80121e2:	2340      	movs	r3, #64	@ 0x40
 80121e4:	1a9b      	subs	r3, r3, r2
 80121e6:	409f      	lsls	r7, r3
 80121e8:	4b65      	ldr	r3, [pc, #404]	@ (8012380 <_dtoa_r+0x390>)
 80121ea:	0038      	movs	r0, r7
 80121ec:	18f3      	adds	r3, r6, r3
 80121ee:	40dc      	lsrs	r4, r3
 80121f0:	4320      	orrs	r0, r4
 80121f2:	f7f1 f8d7 	bl	80033a4 <__aeabi_ui2d>
 80121f6:	2201      	movs	r2, #1
 80121f8:	4b62      	ldr	r3, [pc, #392]	@ (8012384 <_dtoa_r+0x394>)
 80121fa:	1e77      	subs	r7, r6, #1
 80121fc:	18cb      	adds	r3, r1, r3
 80121fe:	9218      	str	r2, [sp, #96]	@ 0x60
 8012200:	e776      	b.n	80120f0 <_dtoa_r+0x100>
 8012202:	2320      	movs	r3, #32
 8012204:	0020      	movs	r0, r4
 8012206:	1a9b      	subs	r3, r3, r2
 8012208:	4098      	lsls	r0, r3
 801220a:	e7f2      	b.n	80121f2 <_dtoa_r+0x202>
 801220c:	9015      	str	r0, [sp, #84]	@ 0x54
 801220e:	e7ba      	b.n	8012186 <_dtoa_r+0x196>
 8012210:	920d      	str	r2, [sp, #52]	@ 0x34
 8012212:	e7c3      	b.n	801219c <_dtoa_r+0x1ac>
 8012214:	9b06      	ldr	r3, [sp, #24]
 8012216:	9a04      	ldr	r2, [sp, #16]
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	9306      	str	r3, [sp, #24]
 801221c:	4253      	negs	r3, r2
 801221e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012220:	2300      	movs	r3, #0
 8012222:	9314      	str	r3, [sp, #80]	@ 0x50
 8012224:	e7c5      	b.n	80121b2 <_dtoa_r+0x1c2>
 8012226:	2300      	movs	r3, #0
 8012228:	9310      	str	r3, [sp, #64]	@ 0x40
 801222a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801222c:	930e      	str	r3, [sp, #56]	@ 0x38
 801222e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012230:	2b00      	cmp	r3, #0
 8012232:	dc13      	bgt.n	801225c <_dtoa_r+0x26c>
 8012234:	2301      	movs	r3, #1
 8012236:	001a      	movs	r2, r3
 8012238:	930e      	str	r3, [sp, #56]	@ 0x38
 801223a:	9309      	str	r3, [sp, #36]	@ 0x24
 801223c:	9223      	str	r2, [sp, #140]	@ 0x8c
 801223e:	e00d      	b.n	801225c <_dtoa_r+0x26c>
 8012240:	2301      	movs	r3, #1
 8012242:	e7f1      	b.n	8012228 <_dtoa_r+0x238>
 8012244:	2300      	movs	r3, #0
 8012246:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012248:	9310      	str	r3, [sp, #64]	@ 0x40
 801224a:	4694      	mov	ip, r2
 801224c:	9b04      	ldr	r3, [sp, #16]
 801224e:	4463      	add	r3, ip
 8012250:	930e      	str	r3, [sp, #56]	@ 0x38
 8012252:	3301      	adds	r3, #1
 8012254:	9309      	str	r3, [sp, #36]	@ 0x24
 8012256:	2b00      	cmp	r3, #0
 8012258:	dc00      	bgt.n	801225c <_dtoa_r+0x26c>
 801225a:	2301      	movs	r3, #1
 801225c:	9a03      	ldr	r2, [sp, #12]
 801225e:	2100      	movs	r1, #0
 8012260:	69d0      	ldr	r0, [r2, #28]
 8012262:	2204      	movs	r2, #4
 8012264:	0015      	movs	r5, r2
 8012266:	3514      	adds	r5, #20
 8012268:	429d      	cmp	r5, r3
 801226a:	d91b      	bls.n	80122a4 <_dtoa_r+0x2b4>
 801226c:	6041      	str	r1, [r0, #4]
 801226e:	9803      	ldr	r0, [sp, #12]
 8012270:	f000 fdb8 	bl	8012de4 <_Balloc>
 8012274:	9008      	str	r0, [sp, #32]
 8012276:	2800      	cmp	r0, #0
 8012278:	d117      	bne.n	80122aa <_dtoa_r+0x2ba>
 801227a:	21b0      	movs	r1, #176	@ 0xb0
 801227c:	4b42      	ldr	r3, [pc, #264]	@ (8012388 <_dtoa_r+0x398>)
 801227e:	482e      	ldr	r0, [pc, #184]	@ (8012338 <_dtoa_r+0x348>)
 8012280:	9a08      	ldr	r2, [sp, #32]
 8012282:	31ff      	adds	r1, #255	@ 0xff
 8012284:	e6c9      	b.n	801201a <_dtoa_r+0x2a>
 8012286:	2301      	movs	r3, #1
 8012288:	e7dd      	b.n	8012246 <_dtoa_r+0x256>
 801228a:	2300      	movs	r3, #0
 801228c:	9410      	str	r4, [sp, #64]	@ 0x40
 801228e:	9322      	str	r3, [sp, #136]	@ 0x88
 8012290:	3b01      	subs	r3, #1
 8012292:	930e      	str	r3, [sp, #56]	@ 0x38
 8012294:	9309      	str	r3, [sp, #36]	@ 0x24
 8012296:	2200      	movs	r2, #0
 8012298:	3313      	adds	r3, #19
 801229a:	e7cf      	b.n	801223c <_dtoa_r+0x24c>
 801229c:	2301      	movs	r3, #1
 801229e:	9310      	str	r3, [sp, #64]	@ 0x40
 80122a0:	3b02      	subs	r3, #2
 80122a2:	e7f6      	b.n	8012292 <_dtoa_r+0x2a2>
 80122a4:	3101      	adds	r1, #1
 80122a6:	0052      	lsls	r2, r2, #1
 80122a8:	e7dc      	b.n	8012264 <_dtoa_r+0x274>
 80122aa:	9b03      	ldr	r3, [sp, #12]
 80122ac:	9a08      	ldr	r2, [sp, #32]
 80122ae:	69db      	ldr	r3, [r3, #28]
 80122b0:	601a      	str	r2, [r3, #0]
 80122b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122b4:	2b0e      	cmp	r3, #14
 80122b6:	d900      	bls.n	80122ba <_dtoa_r+0x2ca>
 80122b8:	e0d9      	b.n	801246e <_dtoa_r+0x47e>
 80122ba:	2c00      	cmp	r4, #0
 80122bc:	d100      	bne.n	80122c0 <_dtoa_r+0x2d0>
 80122be:	e0d6      	b.n	801246e <_dtoa_r+0x47e>
 80122c0:	9b04      	ldr	r3, [sp, #16]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	dd64      	ble.n	8012390 <_dtoa_r+0x3a0>
 80122c6:	210f      	movs	r1, #15
 80122c8:	9a04      	ldr	r2, [sp, #16]
 80122ca:	4b2b      	ldr	r3, [pc, #172]	@ (8012378 <_dtoa_r+0x388>)
 80122cc:	400a      	ands	r2, r1
 80122ce:	00d2      	lsls	r2, r2, #3
 80122d0:	189b      	adds	r3, r3, r2
 80122d2:	681e      	ldr	r6, [r3, #0]
 80122d4:	685f      	ldr	r7, [r3, #4]
 80122d6:	9b04      	ldr	r3, [sp, #16]
 80122d8:	2402      	movs	r4, #2
 80122da:	111d      	asrs	r5, r3, #4
 80122dc:	05db      	lsls	r3, r3, #23
 80122de:	d50a      	bpl.n	80122f6 <_dtoa_r+0x306>
 80122e0:	4b2a      	ldr	r3, [pc, #168]	@ (801238c <_dtoa_r+0x39c>)
 80122e2:	400d      	ands	r5, r1
 80122e4:	6a1a      	ldr	r2, [r3, #32]
 80122e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80122ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80122ec:	f7ef fd26 	bl	8001d3c <__aeabi_ddiv>
 80122f0:	900a      	str	r0, [sp, #40]	@ 0x28
 80122f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80122f4:	3401      	adds	r4, #1
 80122f6:	4b25      	ldr	r3, [pc, #148]	@ (801238c <_dtoa_r+0x39c>)
 80122f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80122fa:	2d00      	cmp	r5, #0
 80122fc:	d108      	bne.n	8012310 <_dtoa_r+0x320>
 80122fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012302:	0032      	movs	r2, r6
 8012304:	003b      	movs	r3, r7
 8012306:	f7ef fd19 	bl	8001d3c <__aeabi_ddiv>
 801230a:	900a      	str	r0, [sp, #40]	@ 0x28
 801230c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801230e:	e05a      	b.n	80123c6 <_dtoa_r+0x3d6>
 8012310:	2301      	movs	r3, #1
 8012312:	421d      	tst	r5, r3
 8012314:	d009      	beq.n	801232a <_dtoa_r+0x33a>
 8012316:	18e4      	adds	r4, r4, r3
 8012318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801231a:	0030      	movs	r0, r6
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	0039      	movs	r1, r7
 8012322:	f7f0 f94f 	bl	80025c4 <__aeabi_dmul>
 8012326:	0006      	movs	r6, r0
 8012328:	000f      	movs	r7, r1
 801232a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801232c:	106d      	asrs	r5, r5, #1
 801232e:	3308      	adds	r3, #8
 8012330:	e7e2      	b.n	80122f8 <_dtoa_r+0x308>
 8012332:	46c0      	nop			@ (mov r8, r8)
 8012334:	080272c5 	.word	0x080272c5
 8012338:	080272dc 	.word	0x080272dc
 801233c:	7ff00000 	.word	0x7ff00000
 8012340:	0000270f 	.word	0x0000270f
 8012344:	080272c1 	.word	0x080272c1
 8012348:	080272c4 	.word	0x080272c4
 801234c:	08027295 	.word	0x08027295
 8012350:	08027294 	.word	0x08027294
 8012354:	3ff00000 	.word	0x3ff00000
 8012358:	fffffc01 	.word	0xfffffc01
 801235c:	3ff80000 	.word	0x3ff80000
 8012360:	636f4361 	.word	0x636f4361
 8012364:	3fd287a7 	.word	0x3fd287a7
 8012368:	8b60c8b3 	.word	0x8b60c8b3
 801236c:	3fc68a28 	.word	0x3fc68a28
 8012370:	509f79fb 	.word	0x509f79fb
 8012374:	3fd34413 	.word	0x3fd34413
 8012378:	080273d8 	.word	0x080273d8
 801237c:	00000432 	.word	0x00000432
 8012380:	00000412 	.word	0x00000412
 8012384:	fe100000 	.word	0xfe100000
 8012388:	08027334 	.word	0x08027334
 801238c:	080273b0 	.word	0x080273b0
 8012390:	9b04      	ldr	r3, [sp, #16]
 8012392:	2402      	movs	r4, #2
 8012394:	2b00      	cmp	r3, #0
 8012396:	d016      	beq.n	80123c6 <_dtoa_r+0x3d6>
 8012398:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801239a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801239c:	220f      	movs	r2, #15
 801239e:	425d      	negs	r5, r3
 80123a0:	402a      	ands	r2, r5
 80123a2:	4bd7      	ldr	r3, [pc, #860]	@ (8012700 <_dtoa_r+0x710>)
 80123a4:	00d2      	lsls	r2, r2, #3
 80123a6:	189b      	adds	r3, r3, r2
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	f7f0 f90a 	bl	80025c4 <__aeabi_dmul>
 80123b0:	2701      	movs	r7, #1
 80123b2:	2300      	movs	r3, #0
 80123b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80123b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80123b8:	4ed2      	ldr	r6, [pc, #840]	@ (8012704 <_dtoa_r+0x714>)
 80123ba:	112d      	asrs	r5, r5, #4
 80123bc:	2d00      	cmp	r5, #0
 80123be:	d000      	beq.n	80123c2 <_dtoa_r+0x3d2>
 80123c0:	e0ba      	b.n	8012538 <_dtoa_r+0x548>
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1a1      	bne.n	801230a <_dtoa_r+0x31a>
 80123c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80123c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80123ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d100      	bne.n	80123d2 <_dtoa_r+0x3e2>
 80123d0:	e0bd      	b.n	801254e <_dtoa_r+0x55e>
 80123d2:	2200      	movs	r2, #0
 80123d4:	0030      	movs	r0, r6
 80123d6:	0039      	movs	r1, r7
 80123d8:	4bcb      	ldr	r3, [pc, #812]	@ (8012708 <_dtoa_r+0x718>)
 80123da:	f7ee f865 	bl	80004a8 <__aeabi_dcmplt>
 80123de:	2800      	cmp	r0, #0
 80123e0:	d100      	bne.n	80123e4 <_dtoa_r+0x3f4>
 80123e2:	e0b4      	b.n	801254e <_dtoa_r+0x55e>
 80123e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d100      	bne.n	80123ec <_dtoa_r+0x3fc>
 80123ea:	e0b0      	b.n	801254e <_dtoa_r+0x55e>
 80123ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	dd39      	ble.n	8012466 <_dtoa_r+0x476>
 80123f2:	9b04      	ldr	r3, [sp, #16]
 80123f4:	2200      	movs	r2, #0
 80123f6:	3b01      	subs	r3, #1
 80123f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80123fa:	0030      	movs	r0, r6
 80123fc:	4bc3      	ldr	r3, [pc, #780]	@ (801270c <_dtoa_r+0x71c>)
 80123fe:	0039      	movs	r1, r7
 8012400:	f7f0 f8e0 	bl	80025c4 <__aeabi_dmul>
 8012404:	900a      	str	r0, [sp, #40]	@ 0x28
 8012406:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801240a:	3401      	adds	r4, #1
 801240c:	0020      	movs	r0, r4
 801240e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012410:	f7f0 ff9a 	bl	8003348 <__aeabi_i2d>
 8012414:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012418:	f7f0 f8d4 	bl	80025c4 <__aeabi_dmul>
 801241c:	4bbc      	ldr	r3, [pc, #752]	@ (8012710 <_dtoa_r+0x720>)
 801241e:	2200      	movs	r2, #0
 8012420:	f7ef f928 	bl	8001674 <__aeabi_dadd>
 8012424:	4bbb      	ldr	r3, [pc, #748]	@ (8012714 <_dtoa_r+0x724>)
 8012426:	0006      	movs	r6, r0
 8012428:	18cf      	adds	r7, r1, r3
 801242a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801242c:	2b00      	cmp	r3, #0
 801242e:	d000      	beq.n	8012432 <_dtoa_r+0x442>
 8012430:	e091      	b.n	8012556 <_dtoa_r+0x566>
 8012432:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012436:	2200      	movs	r2, #0
 8012438:	4bb7      	ldr	r3, [pc, #732]	@ (8012718 <_dtoa_r+0x728>)
 801243a:	f7f0 fb8b 	bl	8002b54 <__aeabi_dsub>
 801243e:	0032      	movs	r2, r6
 8012440:	003b      	movs	r3, r7
 8012442:	0004      	movs	r4, r0
 8012444:	000d      	movs	r5, r1
 8012446:	f7ee f843 	bl	80004d0 <__aeabi_dcmpgt>
 801244a:	2800      	cmp	r0, #0
 801244c:	d000      	beq.n	8012450 <_dtoa_r+0x460>
 801244e:	e29d      	b.n	801298c <_dtoa_r+0x99c>
 8012450:	2180      	movs	r1, #128	@ 0x80
 8012452:	0609      	lsls	r1, r1, #24
 8012454:	187b      	adds	r3, r7, r1
 8012456:	0032      	movs	r2, r6
 8012458:	0020      	movs	r0, r4
 801245a:	0029      	movs	r1, r5
 801245c:	f7ee f824 	bl	80004a8 <__aeabi_dcmplt>
 8012460:	2800      	cmp	r0, #0
 8012462:	d000      	beq.n	8012466 <_dtoa_r+0x476>
 8012464:	e130      	b.n	80126c8 <_dtoa_r+0x6d8>
 8012466:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012468:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801246a:	930a      	str	r3, [sp, #40]	@ 0x28
 801246c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801246e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012470:	2b00      	cmp	r3, #0
 8012472:	da00      	bge.n	8012476 <_dtoa_r+0x486>
 8012474:	e177      	b.n	8012766 <_dtoa_r+0x776>
 8012476:	9a04      	ldr	r2, [sp, #16]
 8012478:	2a0e      	cmp	r2, #14
 801247a:	dd00      	ble.n	801247e <_dtoa_r+0x48e>
 801247c:	e173      	b.n	8012766 <_dtoa_r+0x776>
 801247e:	4ba0      	ldr	r3, [pc, #640]	@ (8012700 <_dtoa_r+0x710>)
 8012480:	00d2      	lsls	r2, r2, #3
 8012482:	189b      	adds	r3, r3, r2
 8012484:	685c      	ldr	r4, [r3, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	9306      	str	r3, [sp, #24]
 801248a:	9407      	str	r4, [sp, #28]
 801248c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801248e:	2b00      	cmp	r3, #0
 8012490:	da03      	bge.n	801249a <_dtoa_r+0x4aa>
 8012492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012494:	2b00      	cmp	r3, #0
 8012496:	dc00      	bgt.n	801249a <_dtoa_r+0x4aa>
 8012498:	e106      	b.n	80126a8 <_dtoa_r+0x6b8>
 801249a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801249c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801249e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124a0:	9d08      	ldr	r5, [sp, #32]
 80124a2:	3b01      	subs	r3, #1
 80124a4:	195b      	adds	r3, r3, r5
 80124a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80124a8:	9a06      	ldr	r2, [sp, #24]
 80124aa:	9b07      	ldr	r3, [sp, #28]
 80124ac:	0030      	movs	r0, r6
 80124ae:	0039      	movs	r1, r7
 80124b0:	f7ef fc44 	bl	8001d3c <__aeabi_ddiv>
 80124b4:	f7f0 ff0c 	bl	80032d0 <__aeabi_d2iz>
 80124b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80124ba:	f7f0 ff45 	bl	8003348 <__aeabi_i2d>
 80124be:	9a06      	ldr	r2, [sp, #24]
 80124c0:	9b07      	ldr	r3, [sp, #28]
 80124c2:	f7f0 f87f 	bl	80025c4 <__aeabi_dmul>
 80124c6:	0002      	movs	r2, r0
 80124c8:	000b      	movs	r3, r1
 80124ca:	0030      	movs	r0, r6
 80124cc:	0039      	movs	r1, r7
 80124ce:	f7f0 fb41 	bl	8002b54 <__aeabi_dsub>
 80124d2:	002b      	movs	r3, r5
 80124d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80124d6:	3501      	adds	r5, #1
 80124d8:	3230      	adds	r2, #48	@ 0x30
 80124da:	701a      	strb	r2, [r3, #0]
 80124dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80124de:	002c      	movs	r4, r5
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d000      	beq.n	80124e6 <_dtoa_r+0x4f6>
 80124e4:	e131      	b.n	801274a <_dtoa_r+0x75a>
 80124e6:	0002      	movs	r2, r0
 80124e8:	000b      	movs	r3, r1
 80124ea:	f7ef f8c3 	bl	8001674 <__aeabi_dadd>
 80124ee:	9a06      	ldr	r2, [sp, #24]
 80124f0:	9b07      	ldr	r3, [sp, #28]
 80124f2:	0006      	movs	r6, r0
 80124f4:	000f      	movs	r7, r1
 80124f6:	f7ed ffeb 	bl	80004d0 <__aeabi_dcmpgt>
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d000      	beq.n	8012500 <_dtoa_r+0x510>
 80124fe:	e10f      	b.n	8012720 <_dtoa_r+0x730>
 8012500:	9a06      	ldr	r2, [sp, #24]
 8012502:	9b07      	ldr	r3, [sp, #28]
 8012504:	0030      	movs	r0, r6
 8012506:	0039      	movs	r1, r7
 8012508:	f7ed ffc8 	bl	800049c <__aeabi_dcmpeq>
 801250c:	2800      	cmp	r0, #0
 801250e:	d003      	beq.n	8012518 <_dtoa_r+0x528>
 8012510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012512:	07dd      	lsls	r5, r3, #31
 8012514:	d500      	bpl.n	8012518 <_dtoa_r+0x528>
 8012516:	e103      	b.n	8012720 <_dtoa_r+0x730>
 8012518:	9905      	ldr	r1, [sp, #20]
 801251a:	9803      	ldr	r0, [sp, #12]
 801251c:	f000 fca6 	bl	8012e6c <_Bfree>
 8012520:	2300      	movs	r3, #0
 8012522:	7023      	strb	r3, [r4, #0]
 8012524:	9b04      	ldr	r3, [sp, #16]
 8012526:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012528:	3301      	adds	r3, #1
 801252a:	6013      	str	r3, [r2, #0]
 801252c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801252e:	2b00      	cmp	r3, #0
 8012530:	d100      	bne.n	8012534 <_dtoa_r+0x544>
 8012532:	e5a7      	b.n	8012084 <_dtoa_r+0x94>
 8012534:	601c      	str	r4, [r3, #0]
 8012536:	e5a5      	b.n	8012084 <_dtoa_r+0x94>
 8012538:	423d      	tst	r5, r7
 801253a:	d005      	beq.n	8012548 <_dtoa_r+0x558>
 801253c:	6832      	ldr	r2, [r6, #0]
 801253e:	6873      	ldr	r3, [r6, #4]
 8012540:	f7f0 f840 	bl	80025c4 <__aeabi_dmul>
 8012544:	003b      	movs	r3, r7
 8012546:	3401      	adds	r4, #1
 8012548:	106d      	asrs	r5, r5, #1
 801254a:	3608      	adds	r6, #8
 801254c:	e736      	b.n	80123bc <_dtoa_r+0x3cc>
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	930c      	str	r3, [sp, #48]	@ 0x30
 8012552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012554:	e75a      	b.n	801240c <_dtoa_r+0x41c>
 8012556:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012558:	4b69      	ldr	r3, [pc, #420]	@ (8012700 <_dtoa_r+0x710>)
 801255a:	3a01      	subs	r2, #1
 801255c:	00d2      	lsls	r2, r2, #3
 801255e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012560:	189b      	adds	r3, r3, r2
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	2900      	cmp	r1, #0
 8012568:	d04c      	beq.n	8012604 <_dtoa_r+0x614>
 801256a:	2000      	movs	r0, #0
 801256c:	496b      	ldr	r1, [pc, #428]	@ (801271c <_dtoa_r+0x72c>)
 801256e:	f7ef fbe5 	bl	8001d3c <__aeabi_ddiv>
 8012572:	0032      	movs	r2, r6
 8012574:	003b      	movs	r3, r7
 8012576:	f7f0 faed 	bl	8002b54 <__aeabi_dsub>
 801257a:	9a08      	ldr	r2, [sp, #32]
 801257c:	0006      	movs	r6, r0
 801257e:	4694      	mov	ip, r2
 8012580:	000f      	movs	r7, r1
 8012582:	9b08      	ldr	r3, [sp, #32]
 8012584:	9316      	str	r3, [sp, #88]	@ 0x58
 8012586:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012588:	4463      	add	r3, ip
 801258a:	9311      	str	r3, [sp, #68]	@ 0x44
 801258c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801258e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012590:	f7f0 fe9e 	bl	80032d0 <__aeabi_d2iz>
 8012594:	0005      	movs	r5, r0
 8012596:	f7f0 fed7 	bl	8003348 <__aeabi_i2d>
 801259a:	0002      	movs	r2, r0
 801259c:	000b      	movs	r3, r1
 801259e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80125a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80125a2:	f7f0 fad7 	bl	8002b54 <__aeabi_dsub>
 80125a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80125a8:	3530      	adds	r5, #48	@ 0x30
 80125aa:	1c5c      	adds	r4, r3, #1
 80125ac:	701d      	strb	r5, [r3, #0]
 80125ae:	0032      	movs	r2, r6
 80125b0:	003b      	movs	r3, r7
 80125b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80125b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80125b6:	f7ed ff77 	bl	80004a8 <__aeabi_dcmplt>
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d16a      	bne.n	8012694 <_dtoa_r+0x6a4>
 80125be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80125c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125c2:	2000      	movs	r0, #0
 80125c4:	4950      	ldr	r1, [pc, #320]	@ (8012708 <_dtoa_r+0x718>)
 80125c6:	f7f0 fac5 	bl	8002b54 <__aeabi_dsub>
 80125ca:	0032      	movs	r2, r6
 80125cc:	003b      	movs	r3, r7
 80125ce:	f7ed ff6b 	bl	80004a8 <__aeabi_dcmplt>
 80125d2:	2800      	cmp	r0, #0
 80125d4:	d000      	beq.n	80125d8 <_dtoa_r+0x5e8>
 80125d6:	e0a5      	b.n	8012724 <_dtoa_r+0x734>
 80125d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80125da:	42a3      	cmp	r3, r4
 80125dc:	d100      	bne.n	80125e0 <_dtoa_r+0x5f0>
 80125de:	e742      	b.n	8012466 <_dtoa_r+0x476>
 80125e0:	2200      	movs	r2, #0
 80125e2:	0030      	movs	r0, r6
 80125e4:	0039      	movs	r1, r7
 80125e6:	4b49      	ldr	r3, [pc, #292]	@ (801270c <_dtoa_r+0x71c>)
 80125e8:	f7ef ffec 	bl	80025c4 <__aeabi_dmul>
 80125ec:	2200      	movs	r2, #0
 80125ee:	0006      	movs	r6, r0
 80125f0:	000f      	movs	r7, r1
 80125f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80125f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80125f6:	4b45      	ldr	r3, [pc, #276]	@ (801270c <_dtoa_r+0x71c>)
 80125f8:	f7ef ffe4 	bl	80025c4 <__aeabi_dmul>
 80125fc:	9416      	str	r4, [sp, #88]	@ 0x58
 80125fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8012600:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012602:	e7c3      	b.n	801258c <_dtoa_r+0x59c>
 8012604:	0030      	movs	r0, r6
 8012606:	0039      	movs	r1, r7
 8012608:	f7ef ffdc 	bl	80025c4 <__aeabi_dmul>
 801260c:	9d08      	ldr	r5, [sp, #32]
 801260e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012610:	002b      	movs	r3, r5
 8012612:	4694      	mov	ip, r2
 8012614:	9016      	str	r0, [sp, #88]	@ 0x58
 8012616:	9117      	str	r1, [sp, #92]	@ 0x5c
 8012618:	4463      	add	r3, ip
 801261a:	9319      	str	r3, [sp, #100]	@ 0x64
 801261c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801261e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012620:	f7f0 fe56 	bl	80032d0 <__aeabi_d2iz>
 8012624:	0004      	movs	r4, r0
 8012626:	f7f0 fe8f 	bl	8003348 <__aeabi_i2d>
 801262a:	000b      	movs	r3, r1
 801262c:	0002      	movs	r2, r0
 801262e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012630:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012632:	f7f0 fa8f 	bl	8002b54 <__aeabi_dsub>
 8012636:	3430      	adds	r4, #48	@ 0x30
 8012638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801263a:	702c      	strb	r4, [r5, #0]
 801263c:	3501      	adds	r5, #1
 801263e:	0006      	movs	r6, r0
 8012640:	000f      	movs	r7, r1
 8012642:	42ab      	cmp	r3, r5
 8012644:	d129      	bne.n	801269a <_dtoa_r+0x6aa>
 8012646:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8012648:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801264a:	9b08      	ldr	r3, [sp, #32]
 801264c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801264e:	469c      	mov	ip, r3
 8012650:	2200      	movs	r2, #0
 8012652:	4b32      	ldr	r3, [pc, #200]	@ (801271c <_dtoa_r+0x72c>)
 8012654:	4464      	add	r4, ip
 8012656:	f7ef f80d 	bl	8001674 <__aeabi_dadd>
 801265a:	0002      	movs	r2, r0
 801265c:	000b      	movs	r3, r1
 801265e:	0030      	movs	r0, r6
 8012660:	0039      	movs	r1, r7
 8012662:	f7ed ff35 	bl	80004d0 <__aeabi_dcmpgt>
 8012666:	2800      	cmp	r0, #0
 8012668:	d15c      	bne.n	8012724 <_dtoa_r+0x734>
 801266a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801266c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801266e:	2000      	movs	r0, #0
 8012670:	492a      	ldr	r1, [pc, #168]	@ (801271c <_dtoa_r+0x72c>)
 8012672:	f7f0 fa6f 	bl	8002b54 <__aeabi_dsub>
 8012676:	0002      	movs	r2, r0
 8012678:	000b      	movs	r3, r1
 801267a:	0030      	movs	r0, r6
 801267c:	0039      	movs	r1, r7
 801267e:	f7ed ff13 	bl	80004a8 <__aeabi_dcmplt>
 8012682:	2800      	cmp	r0, #0
 8012684:	d100      	bne.n	8012688 <_dtoa_r+0x698>
 8012686:	e6ee      	b.n	8012466 <_dtoa_r+0x476>
 8012688:	0023      	movs	r3, r4
 801268a:	3c01      	subs	r4, #1
 801268c:	7822      	ldrb	r2, [r4, #0]
 801268e:	2a30      	cmp	r2, #48	@ 0x30
 8012690:	d0fa      	beq.n	8012688 <_dtoa_r+0x698>
 8012692:	001c      	movs	r4, r3
 8012694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012696:	9304      	str	r3, [sp, #16]
 8012698:	e73e      	b.n	8012518 <_dtoa_r+0x528>
 801269a:	2200      	movs	r2, #0
 801269c:	4b1b      	ldr	r3, [pc, #108]	@ (801270c <_dtoa_r+0x71c>)
 801269e:	f7ef ff91 	bl	80025c4 <__aeabi_dmul>
 80126a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80126a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80126a6:	e7b9      	b.n	801261c <_dtoa_r+0x62c>
 80126a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d10c      	bne.n	80126c8 <_dtoa_r+0x6d8>
 80126ae:	9806      	ldr	r0, [sp, #24]
 80126b0:	9907      	ldr	r1, [sp, #28]
 80126b2:	2200      	movs	r2, #0
 80126b4:	4b18      	ldr	r3, [pc, #96]	@ (8012718 <_dtoa_r+0x728>)
 80126b6:	f7ef ff85 	bl	80025c4 <__aeabi_dmul>
 80126ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126be:	f7ed ff11 	bl	80004e4 <__aeabi_dcmpge>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d100      	bne.n	80126c8 <_dtoa_r+0x6d8>
 80126c6:	e164      	b.n	8012992 <_dtoa_r+0x9a2>
 80126c8:	2600      	movs	r6, #0
 80126ca:	0037      	movs	r7, r6
 80126cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80126ce:	9c08      	ldr	r4, [sp, #32]
 80126d0:	43db      	mvns	r3, r3
 80126d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80126d4:	2300      	movs	r3, #0
 80126d6:	9304      	str	r3, [sp, #16]
 80126d8:	0031      	movs	r1, r6
 80126da:	9803      	ldr	r0, [sp, #12]
 80126dc:	f000 fbc6 	bl	8012e6c <_Bfree>
 80126e0:	2f00      	cmp	r7, #0
 80126e2:	d0d7      	beq.n	8012694 <_dtoa_r+0x6a4>
 80126e4:	9b04      	ldr	r3, [sp, #16]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d005      	beq.n	80126f6 <_dtoa_r+0x706>
 80126ea:	42bb      	cmp	r3, r7
 80126ec:	d003      	beq.n	80126f6 <_dtoa_r+0x706>
 80126ee:	0019      	movs	r1, r3
 80126f0:	9803      	ldr	r0, [sp, #12]
 80126f2:	f000 fbbb 	bl	8012e6c <_Bfree>
 80126f6:	0039      	movs	r1, r7
 80126f8:	9803      	ldr	r0, [sp, #12]
 80126fa:	f000 fbb7 	bl	8012e6c <_Bfree>
 80126fe:	e7c9      	b.n	8012694 <_dtoa_r+0x6a4>
 8012700:	080273d8 	.word	0x080273d8
 8012704:	080273b0 	.word	0x080273b0
 8012708:	3ff00000 	.word	0x3ff00000
 801270c:	40240000 	.word	0x40240000
 8012710:	401c0000 	.word	0x401c0000
 8012714:	fcc00000 	.word	0xfcc00000
 8012718:	40140000 	.word	0x40140000
 801271c:	3fe00000 	.word	0x3fe00000
 8012720:	9b04      	ldr	r3, [sp, #16]
 8012722:	930c      	str	r3, [sp, #48]	@ 0x30
 8012724:	0023      	movs	r3, r4
 8012726:	001c      	movs	r4, r3
 8012728:	3b01      	subs	r3, #1
 801272a:	781a      	ldrb	r2, [r3, #0]
 801272c:	2a39      	cmp	r2, #57	@ 0x39
 801272e:	d108      	bne.n	8012742 <_dtoa_r+0x752>
 8012730:	9a08      	ldr	r2, [sp, #32]
 8012732:	429a      	cmp	r2, r3
 8012734:	d1f7      	bne.n	8012726 <_dtoa_r+0x736>
 8012736:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012738:	9908      	ldr	r1, [sp, #32]
 801273a:	3201      	adds	r2, #1
 801273c:	920c      	str	r2, [sp, #48]	@ 0x30
 801273e:	2230      	movs	r2, #48	@ 0x30
 8012740:	700a      	strb	r2, [r1, #0]
 8012742:	781a      	ldrb	r2, [r3, #0]
 8012744:	3201      	adds	r2, #1
 8012746:	701a      	strb	r2, [r3, #0]
 8012748:	e7a4      	b.n	8012694 <_dtoa_r+0x6a4>
 801274a:	2200      	movs	r2, #0
 801274c:	4bc6      	ldr	r3, [pc, #792]	@ (8012a68 <_dtoa_r+0xa78>)
 801274e:	f7ef ff39 	bl	80025c4 <__aeabi_dmul>
 8012752:	2200      	movs	r2, #0
 8012754:	2300      	movs	r3, #0
 8012756:	0006      	movs	r6, r0
 8012758:	000f      	movs	r7, r1
 801275a:	f7ed fe9f 	bl	800049c <__aeabi_dcmpeq>
 801275e:	2800      	cmp	r0, #0
 8012760:	d100      	bne.n	8012764 <_dtoa_r+0x774>
 8012762:	e6a1      	b.n	80124a8 <_dtoa_r+0x4b8>
 8012764:	e6d8      	b.n	8012518 <_dtoa_r+0x528>
 8012766:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012768:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801276a:	9c06      	ldr	r4, [sp, #24]
 801276c:	2f00      	cmp	r7, #0
 801276e:	d014      	beq.n	801279a <_dtoa_r+0x7aa>
 8012770:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012772:	2a01      	cmp	r2, #1
 8012774:	dd00      	ble.n	8012778 <_dtoa_r+0x788>
 8012776:	e0c8      	b.n	801290a <_dtoa_r+0x91a>
 8012778:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801277a:	2a00      	cmp	r2, #0
 801277c:	d100      	bne.n	8012780 <_dtoa_r+0x790>
 801277e:	e0be      	b.n	80128fe <_dtoa_r+0x90e>
 8012780:	4aba      	ldr	r2, [pc, #744]	@ (8012a6c <_dtoa_r+0xa7c>)
 8012782:	189b      	adds	r3, r3, r2
 8012784:	9a06      	ldr	r2, [sp, #24]
 8012786:	2101      	movs	r1, #1
 8012788:	18d2      	adds	r2, r2, r3
 801278a:	9206      	str	r2, [sp, #24]
 801278c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801278e:	9803      	ldr	r0, [sp, #12]
 8012790:	18d3      	adds	r3, r2, r3
 8012792:	930d      	str	r3, [sp, #52]	@ 0x34
 8012794:	f000 fc22 	bl	8012fdc <__i2b>
 8012798:	0007      	movs	r7, r0
 801279a:	2c00      	cmp	r4, #0
 801279c:	d00e      	beq.n	80127bc <_dtoa_r+0x7cc>
 801279e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	dd0b      	ble.n	80127bc <_dtoa_r+0x7cc>
 80127a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80127a6:	0023      	movs	r3, r4
 80127a8:	4294      	cmp	r4, r2
 80127aa:	dd00      	ble.n	80127ae <_dtoa_r+0x7be>
 80127ac:	0013      	movs	r3, r2
 80127ae:	9a06      	ldr	r2, [sp, #24]
 80127b0:	1ae4      	subs	r4, r4, r3
 80127b2:	1ad2      	subs	r2, r2, r3
 80127b4:	9206      	str	r2, [sp, #24]
 80127b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80127b8:	1ad3      	subs	r3, r2, r3
 80127ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80127bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d01f      	beq.n	8012802 <_dtoa_r+0x812>
 80127c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d100      	bne.n	80127ca <_dtoa_r+0x7da>
 80127c8:	e0b5      	b.n	8012936 <_dtoa_r+0x946>
 80127ca:	2d00      	cmp	r5, #0
 80127cc:	d010      	beq.n	80127f0 <_dtoa_r+0x800>
 80127ce:	0039      	movs	r1, r7
 80127d0:	002a      	movs	r2, r5
 80127d2:	9803      	ldr	r0, [sp, #12]
 80127d4:	f000 fccc 	bl	8013170 <__pow5mult>
 80127d8:	9a05      	ldr	r2, [sp, #20]
 80127da:	0001      	movs	r1, r0
 80127dc:	0007      	movs	r7, r0
 80127de:	9803      	ldr	r0, [sp, #12]
 80127e0:	f000 fc14 	bl	801300c <__multiply>
 80127e4:	0006      	movs	r6, r0
 80127e6:	9905      	ldr	r1, [sp, #20]
 80127e8:	9803      	ldr	r0, [sp, #12]
 80127ea:	f000 fb3f 	bl	8012e6c <_Bfree>
 80127ee:	9605      	str	r6, [sp, #20]
 80127f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127f2:	1b5a      	subs	r2, r3, r5
 80127f4:	42ab      	cmp	r3, r5
 80127f6:	d004      	beq.n	8012802 <_dtoa_r+0x812>
 80127f8:	9905      	ldr	r1, [sp, #20]
 80127fa:	9803      	ldr	r0, [sp, #12]
 80127fc:	f000 fcb8 	bl	8013170 <__pow5mult>
 8012800:	9005      	str	r0, [sp, #20]
 8012802:	2101      	movs	r1, #1
 8012804:	9803      	ldr	r0, [sp, #12]
 8012806:	f000 fbe9 	bl	8012fdc <__i2b>
 801280a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801280c:	0006      	movs	r6, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d100      	bne.n	8012814 <_dtoa_r+0x824>
 8012812:	e1bc      	b.n	8012b8e <_dtoa_r+0xb9e>
 8012814:	001a      	movs	r2, r3
 8012816:	0001      	movs	r1, r0
 8012818:	9803      	ldr	r0, [sp, #12]
 801281a:	f000 fca9 	bl	8013170 <__pow5mult>
 801281e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012820:	0006      	movs	r6, r0
 8012822:	2500      	movs	r5, #0
 8012824:	2b01      	cmp	r3, #1
 8012826:	dc16      	bgt.n	8012856 <_dtoa_r+0x866>
 8012828:	2500      	movs	r5, #0
 801282a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801282c:	42ab      	cmp	r3, r5
 801282e:	d10e      	bne.n	801284e <_dtoa_r+0x85e>
 8012830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012832:	031b      	lsls	r3, r3, #12
 8012834:	42ab      	cmp	r3, r5
 8012836:	d10a      	bne.n	801284e <_dtoa_r+0x85e>
 8012838:	4b8d      	ldr	r3, [pc, #564]	@ (8012a70 <_dtoa_r+0xa80>)
 801283a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801283c:	4213      	tst	r3, r2
 801283e:	d006      	beq.n	801284e <_dtoa_r+0x85e>
 8012840:	9b06      	ldr	r3, [sp, #24]
 8012842:	3501      	adds	r5, #1
 8012844:	3301      	adds	r3, #1
 8012846:	9306      	str	r3, [sp, #24]
 8012848:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801284a:	3301      	adds	r3, #1
 801284c:	930d      	str	r3, [sp, #52]	@ 0x34
 801284e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012850:	2001      	movs	r0, #1
 8012852:	2b00      	cmp	r3, #0
 8012854:	d008      	beq.n	8012868 <_dtoa_r+0x878>
 8012856:	6933      	ldr	r3, [r6, #16]
 8012858:	3303      	adds	r3, #3
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	18f3      	adds	r3, r6, r3
 801285e:	6858      	ldr	r0, [r3, #4]
 8012860:	f000 fb6c 	bl	8012f3c <__hi0bits>
 8012864:	2320      	movs	r3, #32
 8012866:	1a18      	subs	r0, r3, r0
 8012868:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801286a:	1818      	adds	r0, r3, r0
 801286c:	0002      	movs	r2, r0
 801286e:	231f      	movs	r3, #31
 8012870:	401a      	ands	r2, r3
 8012872:	4218      	tst	r0, r3
 8012874:	d065      	beq.n	8012942 <_dtoa_r+0x952>
 8012876:	3301      	adds	r3, #1
 8012878:	1a9b      	subs	r3, r3, r2
 801287a:	2b04      	cmp	r3, #4
 801287c:	dd5d      	ble.n	801293a <_dtoa_r+0x94a>
 801287e:	231c      	movs	r3, #28
 8012880:	1a9b      	subs	r3, r3, r2
 8012882:	9a06      	ldr	r2, [sp, #24]
 8012884:	18e4      	adds	r4, r4, r3
 8012886:	18d2      	adds	r2, r2, r3
 8012888:	9206      	str	r2, [sp, #24]
 801288a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801288c:	18d3      	adds	r3, r2, r3
 801288e:	930d      	str	r3, [sp, #52]	@ 0x34
 8012890:	9b06      	ldr	r3, [sp, #24]
 8012892:	2b00      	cmp	r3, #0
 8012894:	dd05      	ble.n	80128a2 <_dtoa_r+0x8b2>
 8012896:	001a      	movs	r2, r3
 8012898:	9905      	ldr	r1, [sp, #20]
 801289a:	9803      	ldr	r0, [sp, #12]
 801289c:	f000 fcc4 	bl	8013228 <__lshift>
 80128a0:	9005      	str	r0, [sp, #20]
 80128a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	dd05      	ble.n	80128b4 <_dtoa_r+0x8c4>
 80128a8:	0031      	movs	r1, r6
 80128aa:	001a      	movs	r2, r3
 80128ac:	9803      	ldr	r0, [sp, #12]
 80128ae:	f000 fcbb 	bl	8013228 <__lshift>
 80128b2:	0006      	movs	r6, r0
 80128b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d045      	beq.n	8012946 <_dtoa_r+0x956>
 80128ba:	0031      	movs	r1, r6
 80128bc:	9805      	ldr	r0, [sp, #20]
 80128be:	f000 fd1f 	bl	8013300 <__mcmp>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	da3f      	bge.n	8012946 <_dtoa_r+0x956>
 80128c6:	9b04      	ldr	r3, [sp, #16]
 80128c8:	220a      	movs	r2, #10
 80128ca:	3b01      	subs	r3, #1
 80128cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80128ce:	9905      	ldr	r1, [sp, #20]
 80128d0:	2300      	movs	r3, #0
 80128d2:	9803      	ldr	r0, [sp, #12]
 80128d4:	f000 faee 	bl	8012eb4 <__multadd>
 80128d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80128da:	9005      	str	r0, [sp, #20]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d100      	bne.n	80128e2 <_dtoa_r+0x8f2>
 80128e0:	e15c      	b.n	8012b9c <_dtoa_r+0xbac>
 80128e2:	2300      	movs	r3, #0
 80128e4:	0039      	movs	r1, r7
 80128e6:	220a      	movs	r2, #10
 80128e8:	9803      	ldr	r0, [sp, #12]
 80128ea:	f000 fae3 	bl	8012eb4 <__multadd>
 80128ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128f0:	0007      	movs	r7, r0
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	dc55      	bgt.n	80129a2 <_dtoa_r+0x9b2>
 80128f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80128f8:	2b02      	cmp	r3, #2
 80128fa:	dc2d      	bgt.n	8012958 <_dtoa_r+0x968>
 80128fc:	e051      	b.n	80129a2 <_dtoa_r+0x9b2>
 80128fe:	2336      	movs	r3, #54	@ 0x36
 8012900:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012902:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8012904:	9c06      	ldr	r4, [sp, #24]
 8012906:	1a9b      	subs	r3, r3, r2
 8012908:	e73c      	b.n	8012784 <_dtoa_r+0x794>
 801290a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801290c:	1e5d      	subs	r5, r3, #1
 801290e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012910:	42ab      	cmp	r3, r5
 8012912:	db08      	blt.n	8012926 <_dtoa_r+0x936>
 8012914:	1b5d      	subs	r5, r3, r5
 8012916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012918:	9c06      	ldr	r4, [sp, #24]
 801291a:	2b00      	cmp	r3, #0
 801291c:	db00      	blt.n	8012920 <_dtoa_r+0x930>
 801291e:	e731      	b.n	8012784 <_dtoa_r+0x794>
 8012920:	1ae4      	subs	r4, r4, r3
 8012922:	2300      	movs	r3, #0
 8012924:	e72e      	b.n	8012784 <_dtoa_r+0x794>
 8012926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012928:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801292a:	1aeb      	subs	r3, r5, r3
 801292c:	18d3      	adds	r3, r2, r3
 801292e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8012930:	9314      	str	r3, [sp, #80]	@ 0x50
 8012932:	2500      	movs	r5, #0
 8012934:	e7ef      	b.n	8012916 <_dtoa_r+0x926>
 8012936:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012938:	e75e      	b.n	80127f8 <_dtoa_r+0x808>
 801293a:	2b04      	cmp	r3, #4
 801293c:	d0a8      	beq.n	8012890 <_dtoa_r+0x8a0>
 801293e:	331c      	adds	r3, #28
 8012940:	e79f      	b.n	8012882 <_dtoa_r+0x892>
 8012942:	0013      	movs	r3, r2
 8012944:	e7fb      	b.n	801293e <_dtoa_r+0x94e>
 8012946:	9b04      	ldr	r3, [sp, #16]
 8012948:	930c      	str	r3, [sp, #48]	@ 0x30
 801294a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801294c:	930e      	str	r3, [sp, #56]	@ 0x38
 801294e:	2b00      	cmp	r3, #0
 8012950:	dc23      	bgt.n	801299a <_dtoa_r+0x9aa>
 8012952:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012954:	2b02      	cmp	r3, #2
 8012956:	dd20      	ble.n	801299a <_dtoa_r+0x9aa>
 8012958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801295a:	2b00      	cmp	r3, #0
 801295c:	d000      	beq.n	8012960 <_dtoa_r+0x970>
 801295e:	e6b5      	b.n	80126cc <_dtoa_r+0x6dc>
 8012960:	0031      	movs	r1, r6
 8012962:	2205      	movs	r2, #5
 8012964:	9803      	ldr	r0, [sp, #12]
 8012966:	f000 faa5 	bl	8012eb4 <__multadd>
 801296a:	0006      	movs	r6, r0
 801296c:	0001      	movs	r1, r0
 801296e:	9805      	ldr	r0, [sp, #20]
 8012970:	f000 fcc6 	bl	8013300 <__mcmp>
 8012974:	2800      	cmp	r0, #0
 8012976:	dc00      	bgt.n	801297a <_dtoa_r+0x98a>
 8012978:	e6a8      	b.n	80126cc <_dtoa_r+0x6dc>
 801297a:	9b08      	ldr	r3, [sp, #32]
 801297c:	9a08      	ldr	r2, [sp, #32]
 801297e:	1c5c      	adds	r4, r3, #1
 8012980:	2331      	movs	r3, #49	@ 0x31
 8012982:	7013      	strb	r3, [r2, #0]
 8012984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012986:	3301      	adds	r3, #1
 8012988:	930c      	str	r3, [sp, #48]	@ 0x30
 801298a:	e6a3      	b.n	80126d4 <_dtoa_r+0x6e4>
 801298c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801298e:	0037      	movs	r7, r6
 8012990:	e7f3      	b.n	801297a <_dtoa_r+0x98a>
 8012992:	9b04      	ldr	r3, [sp, #16]
 8012994:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8012996:	930c      	str	r3, [sp, #48]	@ 0x30
 8012998:	e7f9      	b.n	801298e <_dtoa_r+0x99e>
 801299a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801299c:	2b00      	cmp	r3, #0
 801299e:	d100      	bne.n	80129a2 <_dtoa_r+0x9b2>
 80129a0:	e100      	b.n	8012ba4 <_dtoa_r+0xbb4>
 80129a2:	2c00      	cmp	r4, #0
 80129a4:	dd05      	ble.n	80129b2 <_dtoa_r+0x9c2>
 80129a6:	0039      	movs	r1, r7
 80129a8:	0022      	movs	r2, r4
 80129aa:	9803      	ldr	r0, [sp, #12]
 80129ac:	f000 fc3c 	bl	8013228 <__lshift>
 80129b0:	0007      	movs	r7, r0
 80129b2:	0038      	movs	r0, r7
 80129b4:	2d00      	cmp	r5, #0
 80129b6:	d018      	beq.n	80129ea <_dtoa_r+0x9fa>
 80129b8:	6879      	ldr	r1, [r7, #4]
 80129ba:	9803      	ldr	r0, [sp, #12]
 80129bc:	f000 fa12 	bl	8012de4 <_Balloc>
 80129c0:	1e04      	subs	r4, r0, #0
 80129c2:	d105      	bne.n	80129d0 <_dtoa_r+0x9e0>
 80129c4:	0022      	movs	r2, r4
 80129c6:	4b2b      	ldr	r3, [pc, #172]	@ (8012a74 <_dtoa_r+0xa84>)
 80129c8:	482b      	ldr	r0, [pc, #172]	@ (8012a78 <_dtoa_r+0xa88>)
 80129ca:	492c      	ldr	r1, [pc, #176]	@ (8012a7c <_dtoa_r+0xa8c>)
 80129cc:	f7ff fb25 	bl	801201a <_dtoa_r+0x2a>
 80129d0:	0039      	movs	r1, r7
 80129d2:	693a      	ldr	r2, [r7, #16]
 80129d4:	310c      	adds	r1, #12
 80129d6:	3202      	adds	r2, #2
 80129d8:	0092      	lsls	r2, r2, #2
 80129da:	300c      	adds	r0, #12
 80129dc:	f001 f9c0 	bl	8013d60 <memcpy>
 80129e0:	2201      	movs	r2, #1
 80129e2:	0021      	movs	r1, r4
 80129e4:	9803      	ldr	r0, [sp, #12]
 80129e6:	f000 fc1f 	bl	8013228 <__lshift>
 80129ea:	9b08      	ldr	r3, [sp, #32]
 80129ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129ee:	9306      	str	r3, [sp, #24]
 80129f0:	3b01      	subs	r3, #1
 80129f2:	189b      	adds	r3, r3, r2
 80129f4:	2201      	movs	r2, #1
 80129f6:	9704      	str	r7, [sp, #16]
 80129f8:	0007      	movs	r7, r0
 80129fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80129fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129fe:	4013      	ands	r3, r2
 8012a00:	930e      	str	r3, [sp, #56]	@ 0x38
 8012a02:	0031      	movs	r1, r6
 8012a04:	9805      	ldr	r0, [sp, #20]
 8012a06:	f7ff fa65 	bl	8011ed4 <quorem>
 8012a0a:	9904      	ldr	r1, [sp, #16]
 8012a0c:	0005      	movs	r5, r0
 8012a0e:	900a      	str	r0, [sp, #40]	@ 0x28
 8012a10:	9805      	ldr	r0, [sp, #20]
 8012a12:	f000 fc75 	bl	8013300 <__mcmp>
 8012a16:	003a      	movs	r2, r7
 8012a18:	900d      	str	r0, [sp, #52]	@ 0x34
 8012a1a:	0031      	movs	r1, r6
 8012a1c:	9803      	ldr	r0, [sp, #12]
 8012a1e:	f000 fc8b 	bl	8013338 <__mdiff>
 8012a22:	2201      	movs	r2, #1
 8012a24:	68c3      	ldr	r3, [r0, #12]
 8012a26:	0004      	movs	r4, r0
 8012a28:	3530      	adds	r5, #48	@ 0x30
 8012a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d104      	bne.n	8012a3a <_dtoa_r+0xa4a>
 8012a30:	0001      	movs	r1, r0
 8012a32:	9805      	ldr	r0, [sp, #20]
 8012a34:	f000 fc64 	bl	8013300 <__mcmp>
 8012a38:	9009      	str	r0, [sp, #36]	@ 0x24
 8012a3a:	0021      	movs	r1, r4
 8012a3c:	9803      	ldr	r0, [sp, #12]
 8012a3e:	f000 fa15 	bl	8012e6c <_Bfree>
 8012a42:	9b06      	ldr	r3, [sp, #24]
 8012a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a46:	1c5c      	adds	r4, r3, #1
 8012a48:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	d116      	bne.n	8012a80 <_dtoa_r+0xa90>
 8012a52:	2d39      	cmp	r5, #57	@ 0x39
 8012a54:	d02f      	beq.n	8012ab6 <_dtoa_r+0xac6>
 8012a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	dd01      	ble.n	8012a60 <_dtoa_r+0xa70>
 8012a5c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012a5e:	3531      	adds	r5, #49	@ 0x31
 8012a60:	9b06      	ldr	r3, [sp, #24]
 8012a62:	701d      	strb	r5, [r3, #0]
 8012a64:	e638      	b.n	80126d8 <_dtoa_r+0x6e8>
 8012a66:	46c0      	nop			@ (mov r8, r8)
 8012a68:	40240000 	.word	0x40240000
 8012a6c:	00000433 	.word	0x00000433
 8012a70:	7ff00000 	.word	0x7ff00000
 8012a74:	08027334 	.word	0x08027334
 8012a78:	080272dc 	.word	0x080272dc
 8012a7c:	000002ef 	.word	0x000002ef
 8012a80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	db04      	blt.n	8012a90 <_dtoa_r+0xaa0>
 8012a86:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	d11e      	bne.n	8012ace <_dtoa_r+0xade>
 8012a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	dde4      	ble.n	8012a60 <_dtoa_r+0xa70>
 8012a96:	9905      	ldr	r1, [sp, #20]
 8012a98:	2201      	movs	r2, #1
 8012a9a:	9803      	ldr	r0, [sp, #12]
 8012a9c:	f000 fbc4 	bl	8013228 <__lshift>
 8012aa0:	0031      	movs	r1, r6
 8012aa2:	9005      	str	r0, [sp, #20]
 8012aa4:	f000 fc2c 	bl	8013300 <__mcmp>
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	dc02      	bgt.n	8012ab2 <_dtoa_r+0xac2>
 8012aac:	d1d8      	bne.n	8012a60 <_dtoa_r+0xa70>
 8012aae:	07eb      	lsls	r3, r5, #31
 8012ab0:	d5d6      	bpl.n	8012a60 <_dtoa_r+0xa70>
 8012ab2:	2d39      	cmp	r5, #57	@ 0x39
 8012ab4:	d1d2      	bne.n	8012a5c <_dtoa_r+0xa6c>
 8012ab6:	2339      	movs	r3, #57	@ 0x39
 8012ab8:	9a06      	ldr	r2, [sp, #24]
 8012aba:	7013      	strb	r3, [r2, #0]
 8012abc:	0023      	movs	r3, r4
 8012abe:	001c      	movs	r4, r3
 8012ac0:	3b01      	subs	r3, #1
 8012ac2:	781a      	ldrb	r2, [r3, #0]
 8012ac4:	2a39      	cmp	r2, #57	@ 0x39
 8012ac6:	d04f      	beq.n	8012b68 <_dtoa_r+0xb78>
 8012ac8:	3201      	adds	r2, #1
 8012aca:	701a      	strb	r2, [r3, #0]
 8012acc:	e604      	b.n	80126d8 <_dtoa_r+0x6e8>
 8012ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	dd03      	ble.n	8012adc <_dtoa_r+0xaec>
 8012ad4:	2d39      	cmp	r5, #57	@ 0x39
 8012ad6:	d0ee      	beq.n	8012ab6 <_dtoa_r+0xac6>
 8012ad8:	3501      	adds	r5, #1
 8012ada:	e7c1      	b.n	8012a60 <_dtoa_r+0xa70>
 8012adc:	9b06      	ldr	r3, [sp, #24]
 8012ade:	9a06      	ldr	r2, [sp, #24]
 8012ae0:	701d      	strb	r5, [r3, #0]
 8012ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d02a      	beq.n	8012b3e <_dtoa_r+0xb4e>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	220a      	movs	r2, #10
 8012aec:	9905      	ldr	r1, [sp, #20]
 8012aee:	9803      	ldr	r0, [sp, #12]
 8012af0:	f000 f9e0 	bl	8012eb4 <__multadd>
 8012af4:	9b04      	ldr	r3, [sp, #16]
 8012af6:	9005      	str	r0, [sp, #20]
 8012af8:	42bb      	cmp	r3, r7
 8012afa:	d109      	bne.n	8012b10 <_dtoa_r+0xb20>
 8012afc:	2300      	movs	r3, #0
 8012afe:	220a      	movs	r2, #10
 8012b00:	9904      	ldr	r1, [sp, #16]
 8012b02:	9803      	ldr	r0, [sp, #12]
 8012b04:	f000 f9d6 	bl	8012eb4 <__multadd>
 8012b08:	9004      	str	r0, [sp, #16]
 8012b0a:	0007      	movs	r7, r0
 8012b0c:	9406      	str	r4, [sp, #24]
 8012b0e:	e778      	b.n	8012a02 <_dtoa_r+0xa12>
 8012b10:	9904      	ldr	r1, [sp, #16]
 8012b12:	2300      	movs	r3, #0
 8012b14:	220a      	movs	r2, #10
 8012b16:	9803      	ldr	r0, [sp, #12]
 8012b18:	f000 f9cc 	bl	8012eb4 <__multadd>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	9004      	str	r0, [sp, #16]
 8012b20:	220a      	movs	r2, #10
 8012b22:	0039      	movs	r1, r7
 8012b24:	9803      	ldr	r0, [sp, #12]
 8012b26:	f000 f9c5 	bl	8012eb4 <__multadd>
 8012b2a:	e7ee      	b.n	8012b0a <_dtoa_r+0xb1a>
 8012b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b2e:	2401      	movs	r4, #1
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	dd00      	ble.n	8012b36 <_dtoa_r+0xb46>
 8012b34:	001c      	movs	r4, r3
 8012b36:	9b08      	ldr	r3, [sp, #32]
 8012b38:	191c      	adds	r4, r3, r4
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	9304      	str	r3, [sp, #16]
 8012b3e:	9905      	ldr	r1, [sp, #20]
 8012b40:	2201      	movs	r2, #1
 8012b42:	9803      	ldr	r0, [sp, #12]
 8012b44:	f000 fb70 	bl	8013228 <__lshift>
 8012b48:	0031      	movs	r1, r6
 8012b4a:	9005      	str	r0, [sp, #20]
 8012b4c:	f000 fbd8 	bl	8013300 <__mcmp>
 8012b50:	2800      	cmp	r0, #0
 8012b52:	dcb3      	bgt.n	8012abc <_dtoa_r+0xacc>
 8012b54:	d101      	bne.n	8012b5a <_dtoa_r+0xb6a>
 8012b56:	07ed      	lsls	r5, r5, #31
 8012b58:	d4b0      	bmi.n	8012abc <_dtoa_r+0xacc>
 8012b5a:	0023      	movs	r3, r4
 8012b5c:	001c      	movs	r4, r3
 8012b5e:	3b01      	subs	r3, #1
 8012b60:	781a      	ldrb	r2, [r3, #0]
 8012b62:	2a30      	cmp	r2, #48	@ 0x30
 8012b64:	d0fa      	beq.n	8012b5c <_dtoa_r+0xb6c>
 8012b66:	e5b7      	b.n	80126d8 <_dtoa_r+0x6e8>
 8012b68:	9a08      	ldr	r2, [sp, #32]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d1a7      	bne.n	8012abe <_dtoa_r+0xace>
 8012b6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b70:	3301      	adds	r3, #1
 8012b72:	930c      	str	r3, [sp, #48]	@ 0x30
 8012b74:	2331      	movs	r3, #49	@ 0x31
 8012b76:	7013      	strb	r3, [r2, #0]
 8012b78:	e5ae      	b.n	80126d8 <_dtoa_r+0x6e8>
 8012b7a:	4b15      	ldr	r3, [pc, #84]	@ (8012bd0 <_dtoa_r+0xbe0>)
 8012b7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8012b7e:	9308      	str	r3, [sp, #32]
 8012b80:	4b14      	ldr	r3, [pc, #80]	@ (8012bd4 <_dtoa_r+0xbe4>)
 8012b82:	2a00      	cmp	r2, #0
 8012b84:	d001      	beq.n	8012b8a <_dtoa_r+0xb9a>
 8012b86:	f7ff fa7b 	bl	8012080 <_dtoa_r+0x90>
 8012b8a:	f7ff fa7b 	bl	8012084 <_dtoa_r+0x94>
 8012b8e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	dc00      	bgt.n	8012b96 <_dtoa_r+0xba6>
 8012b94:	e648      	b.n	8012828 <_dtoa_r+0x838>
 8012b96:	2001      	movs	r0, #1
 8012b98:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8012b9a:	e665      	b.n	8012868 <_dtoa_r+0x878>
 8012b9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	dc00      	bgt.n	8012ba4 <_dtoa_r+0xbb4>
 8012ba2:	e6d6      	b.n	8012952 <_dtoa_r+0x962>
 8012ba4:	2400      	movs	r4, #0
 8012ba6:	0031      	movs	r1, r6
 8012ba8:	9805      	ldr	r0, [sp, #20]
 8012baa:	f7ff f993 	bl	8011ed4 <quorem>
 8012bae:	9b08      	ldr	r3, [sp, #32]
 8012bb0:	3030      	adds	r0, #48	@ 0x30
 8012bb2:	5518      	strb	r0, [r3, r4]
 8012bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bb6:	3401      	adds	r4, #1
 8012bb8:	0005      	movs	r5, r0
 8012bba:	429c      	cmp	r4, r3
 8012bbc:	dab6      	bge.n	8012b2c <_dtoa_r+0xb3c>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	220a      	movs	r2, #10
 8012bc2:	9905      	ldr	r1, [sp, #20]
 8012bc4:	9803      	ldr	r0, [sp, #12]
 8012bc6:	f000 f975 	bl	8012eb4 <__multadd>
 8012bca:	9005      	str	r0, [sp, #20]
 8012bcc:	e7eb      	b.n	8012ba6 <_dtoa_r+0xbb6>
 8012bce:	46c0      	nop			@ (mov r8, r8)
 8012bd0:	080272b8 	.word	0x080272b8
 8012bd4:	080272c0 	.word	0x080272c0

08012bd8 <_free_r>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	0005      	movs	r5, r0
 8012bdc:	1e0c      	subs	r4, r1, #0
 8012bde:	d010      	beq.n	8012c02 <_free_r+0x2a>
 8012be0:	3c04      	subs	r4, #4
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	da00      	bge.n	8012bea <_free_r+0x12>
 8012be8:	18e4      	adds	r4, r4, r3
 8012bea:	0028      	movs	r0, r5
 8012bec:	f000 f8ea 	bl	8012dc4 <__malloc_lock>
 8012bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8012c68 <_free_r+0x90>)
 8012bf2:	6813      	ldr	r3, [r2, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d105      	bne.n	8012c04 <_free_r+0x2c>
 8012bf8:	6063      	str	r3, [r4, #4]
 8012bfa:	6014      	str	r4, [r2, #0]
 8012bfc:	0028      	movs	r0, r5
 8012bfe:	f000 f8e9 	bl	8012dd4 <__malloc_unlock>
 8012c02:	bd70      	pop	{r4, r5, r6, pc}
 8012c04:	42a3      	cmp	r3, r4
 8012c06:	d908      	bls.n	8012c1a <_free_r+0x42>
 8012c08:	6820      	ldr	r0, [r4, #0]
 8012c0a:	1821      	adds	r1, r4, r0
 8012c0c:	428b      	cmp	r3, r1
 8012c0e:	d1f3      	bne.n	8012bf8 <_free_r+0x20>
 8012c10:	6819      	ldr	r1, [r3, #0]
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	1809      	adds	r1, r1, r0
 8012c16:	6021      	str	r1, [r4, #0]
 8012c18:	e7ee      	b.n	8012bf8 <_free_r+0x20>
 8012c1a:	001a      	movs	r2, r3
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d001      	beq.n	8012c26 <_free_r+0x4e>
 8012c22:	42a3      	cmp	r3, r4
 8012c24:	d9f9      	bls.n	8012c1a <_free_r+0x42>
 8012c26:	6811      	ldr	r1, [r2, #0]
 8012c28:	1850      	adds	r0, r2, r1
 8012c2a:	42a0      	cmp	r0, r4
 8012c2c:	d10b      	bne.n	8012c46 <_free_r+0x6e>
 8012c2e:	6820      	ldr	r0, [r4, #0]
 8012c30:	1809      	adds	r1, r1, r0
 8012c32:	1850      	adds	r0, r2, r1
 8012c34:	6011      	str	r1, [r2, #0]
 8012c36:	4283      	cmp	r3, r0
 8012c38:	d1e0      	bne.n	8012bfc <_free_r+0x24>
 8012c3a:	6818      	ldr	r0, [r3, #0]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	1841      	adds	r1, r0, r1
 8012c40:	6011      	str	r1, [r2, #0]
 8012c42:	6053      	str	r3, [r2, #4]
 8012c44:	e7da      	b.n	8012bfc <_free_r+0x24>
 8012c46:	42a0      	cmp	r0, r4
 8012c48:	d902      	bls.n	8012c50 <_free_r+0x78>
 8012c4a:	230c      	movs	r3, #12
 8012c4c:	602b      	str	r3, [r5, #0]
 8012c4e:	e7d5      	b.n	8012bfc <_free_r+0x24>
 8012c50:	6820      	ldr	r0, [r4, #0]
 8012c52:	1821      	adds	r1, r4, r0
 8012c54:	428b      	cmp	r3, r1
 8012c56:	d103      	bne.n	8012c60 <_free_r+0x88>
 8012c58:	6819      	ldr	r1, [r3, #0]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	1809      	adds	r1, r1, r0
 8012c5e:	6021      	str	r1, [r4, #0]
 8012c60:	6063      	str	r3, [r4, #4]
 8012c62:	6054      	str	r4, [r2, #4]
 8012c64:	e7ca      	b.n	8012bfc <_free_r+0x24>
 8012c66:	46c0      	nop			@ (mov r8, r8)
 8012c68:	20003764 	.word	0x20003764

08012c6c <malloc>:
 8012c6c:	b510      	push	{r4, lr}
 8012c6e:	4b03      	ldr	r3, [pc, #12]	@ (8012c7c <malloc+0x10>)
 8012c70:	0001      	movs	r1, r0
 8012c72:	6818      	ldr	r0, [r3, #0]
 8012c74:	f000 f826 	bl	8012cc4 <_malloc_r>
 8012c78:	bd10      	pop	{r4, pc}
 8012c7a:	46c0      	nop			@ (mov r8, r8)
 8012c7c:	20000158 	.word	0x20000158

08012c80 <sbrk_aligned>:
 8012c80:	b570      	push	{r4, r5, r6, lr}
 8012c82:	4e0f      	ldr	r6, [pc, #60]	@ (8012cc0 <sbrk_aligned+0x40>)
 8012c84:	000d      	movs	r5, r1
 8012c86:	6831      	ldr	r1, [r6, #0]
 8012c88:	0004      	movs	r4, r0
 8012c8a:	2900      	cmp	r1, #0
 8012c8c:	d102      	bne.n	8012c94 <sbrk_aligned+0x14>
 8012c8e:	f001 f855 	bl	8013d3c <_sbrk_r>
 8012c92:	6030      	str	r0, [r6, #0]
 8012c94:	0029      	movs	r1, r5
 8012c96:	0020      	movs	r0, r4
 8012c98:	f001 f850 	bl	8013d3c <_sbrk_r>
 8012c9c:	1c43      	adds	r3, r0, #1
 8012c9e:	d103      	bne.n	8012ca8 <sbrk_aligned+0x28>
 8012ca0:	2501      	movs	r5, #1
 8012ca2:	426d      	negs	r5, r5
 8012ca4:	0028      	movs	r0, r5
 8012ca6:	bd70      	pop	{r4, r5, r6, pc}
 8012ca8:	2303      	movs	r3, #3
 8012caa:	1cc5      	adds	r5, r0, #3
 8012cac:	439d      	bics	r5, r3
 8012cae:	42a8      	cmp	r0, r5
 8012cb0:	d0f8      	beq.n	8012ca4 <sbrk_aligned+0x24>
 8012cb2:	1a29      	subs	r1, r5, r0
 8012cb4:	0020      	movs	r0, r4
 8012cb6:	f001 f841 	bl	8013d3c <_sbrk_r>
 8012cba:	3001      	adds	r0, #1
 8012cbc:	d1f2      	bne.n	8012ca4 <sbrk_aligned+0x24>
 8012cbe:	e7ef      	b.n	8012ca0 <sbrk_aligned+0x20>
 8012cc0:	20003760 	.word	0x20003760

08012cc4 <_malloc_r>:
 8012cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cc6:	2203      	movs	r2, #3
 8012cc8:	1ccb      	adds	r3, r1, #3
 8012cca:	4393      	bics	r3, r2
 8012ccc:	3308      	adds	r3, #8
 8012cce:	0005      	movs	r5, r0
 8012cd0:	001f      	movs	r7, r3
 8012cd2:	2b0c      	cmp	r3, #12
 8012cd4:	d234      	bcs.n	8012d40 <_malloc_r+0x7c>
 8012cd6:	270c      	movs	r7, #12
 8012cd8:	42b9      	cmp	r1, r7
 8012cda:	d833      	bhi.n	8012d44 <_malloc_r+0x80>
 8012cdc:	0028      	movs	r0, r5
 8012cde:	f000 f871 	bl	8012dc4 <__malloc_lock>
 8012ce2:	4e37      	ldr	r6, [pc, #220]	@ (8012dc0 <_malloc_r+0xfc>)
 8012ce4:	6833      	ldr	r3, [r6, #0]
 8012ce6:	001c      	movs	r4, r3
 8012ce8:	2c00      	cmp	r4, #0
 8012cea:	d12f      	bne.n	8012d4c <_malloc_r+0x88>
 8012cec:	0039      	movs	r1, r7
 8012cee:	0028      	movs	r0, r5
 8012cf0:	f7ff ffc6 	bl	8012c80 <sbrk_aligned>
 8012cf4:	0004      	movs	r4, r0
 8012cf6:	1c43      	adds	r3, r0, #1
 8012cf8:	d15f      	bne.n	8012dba <_malloc_r+0xf6>
 8012cfa:	6834      	ldr	r4, [r6, #0]
 8012cfc:	9400      	str	r4, [sp, #0]
 8012cfe:	9b00      	ldr	r3, [sp, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d14a      	bne.n	8012d9a <_malloc_r+0xd6>
 8012d04:	2c00      	cmp	r4, #0
 8012d06:	d052      	beq.n	8012dae <_malloc_r+0xea>
 8012d08:	6823      	ldr	r3, [r4, #0]
 8012d0a:	0028      	movs	r0, r5
 8012d0c:	18e3      	adds	r3, r4, r3
 8012d0e:	9900      	ldr	r1, [sp, #0]
 8012d10:	9301      	str	r3, [sp, #4]
 8012d12:	f001 f813 	bl	8013d3c <_sbrk_r>
 8012d16:	9b01      	ldr	r3, [sp, #4]
 8012d18:	4283      	cmp	r3, r0
 8012d1a:	d148      	bne.n	8012dae <_malloc_r+0xea>
 8012d1c:	6823      	ldr	r3, [r4, #0]
 8012d1e:	0028      	movs	r0, r5
 8012d20:	1aff      	subs	r7, r7, r3
 8012d22:	0039      	movs	r1, r7
 8012d24:	f7ff ffac 	bl	8012c80 <sbrk_aligned>
 8012d28:	3001      	adds	r0, #1
 8012d2a:	d040      	beq.n	8012dae <_malloc_r+0xea>
 8012d2c:	6823      	ldr	r3, [r4, #0]
 8012d2e:	19db      	adds	r3, r3, r7
 8012d30:	6023      	str	r3, [r4, #0]
 8012d32:	6833      	ldr	r3, [r6, #0]
 8012d34:	685a      	ldr	r2, [r3, #4]
 8012d36:	2a00      	cmp	r2, #0
 8012d38:	d133      	bne.n	8012da2 <_malloc_r+0xde>
 8012d3a:	9b00      	ldr	r3, [sp, #0]
 8012d3c:	6033      	str	r3, [r6, #0]
 8012d3e:	e019      	b.n	8012d74 <_malloc_r+0xb0>
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	dac9      	bge.n	8012cd8 <_malloc_r+0x14>
 8012d44:	230c      	movs	r3, #12
 8012d46:	602b      	str	r3, [r5, #0]
 8012d48:	2000      	movs	r0, #0
 8012d4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012d4c:	6821      	ldr	r1, [r4, #0]
 8012d4e:	1bc9      	subs	r1, r1, r7
 8012d50:	d420      	bmi.n	8012d94 <_malloc_r+0xd0>
 8012d52:	290b      	cmp	r1, #11
 8012d54:	d90a      	bls.n	8012d6c <_malloc_r+0xa8>
 8012d56:	19e2      	adds	r2, r4, r7
 8012d58:	6027      	str	r7, [r4, #0]
 8012d5a:	42a3      	cmp	r3, r4
 8012d5c:	d104      	bne.n	8012d68 <_malloc_r+0xa4>
 8012d5e:	6032      	str	r2, [r6, #0]
 8012d60:	6863      	ldr	r3, [r4, #4]
 8012d62:	6011      	str	r1, [r2, #0]
 8012d64:	6053      	str	r3, [r2, #4]
 8012d66:	e005      	b.n	8012d74 <_malloc_r+0xb0>
 8012d68:	605a      	str	r2, [r3, #4]
 8012d6a:	e7f9      	b.n	8012d60 <_malloc_r+0x9c>
 8012d6c:	6862      	ldr	r2, [r4, #4]
 8012d6e:	42a3      	cmp	r3, r4
 8012d70:	d10e      	bne.n	8012d90 <_malloc_r+0xcc>
 8012d72:	6032      	str	r2, [r6, #0]
 8012d74:	0028      	movs	r0, r5
 8012d76:	f000 f82d 	bl	8012dd4 <__malloc_unlock>
 8012d7a:	0020      	movs	r0, r4
 8012d7c:	2207      	movs	r2, #7
 8012d7e:	300b      	adds	r0, #11
 8012d80:	1d23      	adds	r3, r4, #4
 8012d82:	4390      	bics	r0, r2
 8012d84:	1ac2      	subs	r2, r0, r3
 8012d86:	4298      	cmp	r0, r3
 8012d88:	d0df      	beq.n	8012d4a <_malloc_r+0x86>
 8012d8a:	1a1b      	subs	r3, r3, r0
 8012d8c:	50a3      	str	r3, [r4, r2]
 8012d8e:	e7dc      	b.n	8012d4a <_malloc_r+0x86>
 8012d90:	605a      	str	r2, [r3, #4]
 8012d92:	e7ef      	b.n	8012d74 <_malloc_r+0xb0>
 8012d94:	0023      	movs	r3, r4
 8012d96:	6864      	ldr	r4, [r4, #4]
 8012d98:	e7a6      	b.n	8012ce8 <_malloc_r+0x24>
 8012d9a:	9c00      	ldr	r4, [sp, #0]
 8012d9c:	6863      	ldr	r3, [r4, #4]
 8012d9e:	9300      	str	r3, [sp, #0]
 8012da0:	e7ad      	b.n	8012cfe <_malloc_r+0x3a>
 8012da2:	001a      	movs	r2, r3
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	42a3      	cmp	r3, r4
 8012da8:	d1fb      	bne.n	8012da2 <_malloc_r+0xde>
 8012daa:	2300      	movs	r3, #0
 8012dac:	e7da      	b.n	8012d64 <_malloc_r+0xa0>
 8012dae:	230c      	movs	r3, #12
 8012db0:	0028      	movs	r0, r5
 8012db2:	602b      	str	r3, [r5, #0]
 8012db4:	f000 f80e 	bl	8012dd4 <__malloc_unlock>
 8012db8:	e7c6      	b.n	8012d48 <_malloc_r+0x84>
 8012dba:	6007      	str	r7, [r0, #0]
 8012dbc:	e7da      	b.n	8012d74 <_malloc_r+0xb0>
 8012dbe:	46c0      	nop			@ (mov r8, r8)
 8012dc0:	20003764 	.word	0x20003764

08012dc4 <__malloc_lock>:
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	4802      	ldr	r0, [pc, #8]	@ (8012dd0 <__malloc_lock+0xc>)
 8012dc8:	f7ff f877 	bl	8011eba <__retarget_lock_acquire_recursive>
 8012dcc:	bd10      	pop	{r4, pc}
 8012dce:	46c0      	nop			@ (mov r8, r8)
 8012dd0:	2000375c 	.word	0x2000375c

08012dd4 <__malloc_unlock>:
 8012dd4:	b510      	push	{r4, lr}
 8012dd6:	4802      	ldr	r0, [pc, #8]	@ (8012de0 <__malloc_unlock+0xc>)
 8012dd8:	f7ff f870 	bl	8011ebc <__retarget_lock_release_recursive>
 8012ddc:	bd10      	pop	{r4, pc}
 8012dde:	46c0      	nop			@ (mov r8, r8)
 8012de0:	2000375c 	.word	0x2000375c

08012de4 <_Balloc>:
 8012de4:	b570      	push	{r4, r5, r6, lr}
 8012de6:	69c5      	ldr	r5, [r0, #28]
 8012de8:	0006      	movs	r6, r0
 8012dea:	000c      	movs	r4, r1
 8012dec:	2d00      	cmp	r5, #0
 8012dee:	d10e      	bne.n	8012e0e <_Balloc+0x2a>
 8012df0:	2010      	movs	r0, #16
 8012df2:	f7ff ff3b 	bl	8012c6c <malloc>
 8012df6:	1e02      	subs	r2, r0, #0
 8012df8:	61f0      	str	r0, [r6, #28]
 8012dfa:	d104      	bne.n	8012e06 <_Balloc+0x22>
 8012dfc:	216b      	movs	r1, #107	@ 0x6b
 8012dfe:	4b19      	ldr	r3, [pc, #100]	@ (8012e64 <_Balloc+0x80>)
 8012e00:	4819      	ldr	r0, [pc, #100]	@ (8012e68 <_Balloc+0x84>)
 8012e02:	f000 ffb7 	bl	8013d74 <__assert_func>
 8012e06:	6045      	str	r5, [r0, #4]
 8012e08:	6085      	str	r5, [r0, #8]
 8012e0a:	6005      	str	r5, [r0, #0]
 8012e0c:	60c5      	str	r5, [r0, #12]
 8012e0e:	69f5      	ldr	r5, [r6, #28]
 8012e10:	68eb      	ldr	r3, [r5, #12]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d013      	beq.n	8012e3e <_Balloc+0x5a>
 8012e16:	69f3      	ldr	r3, [r6, #28]
 8012e18:	00a2      	lsls	r2, r4, #2
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	189b      	adds	r3, r3, r2
 8012e1e:	6818      	ldr	r0, [r3, #0]
 8012e20:	2800      	cmp	r0, #0
 8012e22:	d118      	bne.n	8012e56 <_Balloc+0x72>
 8012e24:	2101      	movs	r1, #1
 8012e26:	000d      	movs	r5, r1
 8012e28:	40a5      	lsls	r5, r4
 8012e2a:	1d6a      	adds	r2, r5, #5
 8012e2c:	0030      	movs	r0, r6
 8012e2e:	0092      	lsls	r2, r2, #2
 8012e30:	f000 ffbe 	bl	8013db0 <_calloc_r>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d00c      	beq.n	8012e52 <_Balloc+0x6e>
 8012e38:	6044      	str	r4, [r0, #4]
 8012e3a:	6085      	str	r5, [r0, #8]
 8012e3c:	e00d      	b.n	8012e5a <_Balloc+0x76>
 8012e3e:	2221      	movs	r2, #33	@ 0x21
 8012e40:	2104      	movs	r1, #4
 8012e42:	0030      	movs	r0, r6
 8012e44:	f000 ffb4 	bl	8013db0 <_calloc_r>
 8012e48:	69f3      	ldr	r3, [r6, #28]
 8012e4a:	60e8      	str	r0, [r5, #12]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d1e1      	bne.n	8012e16 <_Balloc+0x32>
 8012e52:	2000      	movs	r0, #0
 8012e54:	bd70      	pop	{r4, r5, r6, pc}
 8012e56:	6802      	ldr	r2, [r0, #0]
 8012e58:	601a      	str	r2, [r3, #0]
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	6103      	str	r3, [r0, #16]
 8012e5e:	60c3      	str	r3, [r0, #12]
 8012e60:	e7f8      	b.n	8012e54 <_Balloc+0x70>
 8012e62:	46c0      	nop			@ (mov r8, r8)
 8012e64:	080272c5 	.word	0x080272c5
 8012e68:	08027345 	.word	0x08027345

08012e6c <_Bfree>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	69c6      	ldr	r6, [r0, #28]
 8012e70:	0005      	movs	r5, r0
 8012e72:	000c      	movs	r4, r1
 8012e74:	2e00      	cmp	r6, #0
 8012e76:	d10e      	bne.n	8012e96 <_Bfree+0x2a>
 8012e78:	2010      	movs	r0, #16
 8012e7a:	f7ff fef7 	bl	8012c6c <malloc>
 8012e7e:	1e02      	subs	r2, r0, #0
 8012e80:	61e8      	str	r0, [r5, #28]
 8012e82:	d104      	bne.n	8012e8e <_Bfree+0x22>
 8012e84:	218f      	movs	r1, #143	@ 0x8f
 8012e86:	4b09      	ldr	r3, [pc, #36]	@ (8012eac <_Bfree+0x40>)
 8012e88:	4809      	ldr	r0, [pc, #36]	@ (8012eb0 <_Bfree+0x44>)
 8012e8a:	f000 ff73 	bl	8013d74 <__assert_func>
 8012e8e:	6046      	str	r6, [r0, #4]
 8012e90:	6086      	str	r6, [r0, #8]
 8012e92:	6006      	str	r6, [r0, #0]
 8012e94:	60c6      	str	r6, [r0, #12]
 8012e96:	2c00      	cmp	r4, #0
 8012e98:	d007      	beq.n	8012eaa <_Bfree+0x3e>
 8012e9a:	69eb      	ldr	r3, [r5, #28]
 8012e9c:	6862      	ldr	r2, [r4, #4]
 8012e9e:	68db      	ldr	r3, [r3, #12]
 8012ea0:	0092      	lsls	r2, r2, #2
 8012ea2:	189b      	adds	r3, r3, r2
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	6022      	str	r2, [r4, #0]
 8012ea8:	601c      	str	r4, [r3, #0]
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}
 8012eac:	080272c5 	.word	0x080272c5
 8012eb0:	08027345 	.word	0x08027345

08012eb4 <__multadd>:
 8012eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012eb6:	000f      	movs	r7, r1
 8012eb8:	9001      	str	r0, [sp, #4]
 8012eba:	000c      	movs	r4, r1
 8012ebc:	001e      	movs	r6, r3
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	690d      	ldr	r5, [r1, #16]
 8012ec2:	3714      	adds	r7, #20
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	3001      	adds	r0, #1
 8012ec8:	b299      	uxth	r1, r3
 8012eca:	4351      	muls	r1, r2
 8012ecc:	0c1b      	lsrs	r3, r3, #16
 8012ece:	4353      	muls	r3, r2
 8012ed0:	1989      	adds	r1, r1, r6
 8012ed2:	0c0e      	lsrs	r6, r1, #16
 8012ed4:	199b      	adds	r3, r3, r6
 8012ed6:	0c1e      	lsrs	r6, r3, #16
 8012ed8:	b289      	uxth	r1, r1
 8012eda:	041b      	lsls	r3, r3, #16
 8012edc:	185b      	adds	r3, r3, r1
 8012ede:	c708      	stmia	r7!, {r3}
 8012ee0:	4285      	cmp	r5, r0
 8012ee2:	dcef      	bgt.n	8012ec4 <__multadd+0x10>
 8012ee4:	2e00      	cmp	r6, #0
 8012ee6:	d022      	beq.n	8012f2e <__multadd+0x7a>
 8012ee8:	68a3      	ldr	r3, [r4, #8]
 8012eea:	42ab      	cmp	r3, r5
 8012eec:	dc19      	bgt.n	8012f22 <__multadd+0x6e>
 8012eee:	6861      	ldr	r1, [r4, #4]
 8012ef0:	9801      	ldr	r0, [sp, #4]
 8012ef2:	3101      	adds	r1, #1
 8012ef4:	f7ff ff76 	bl	8012de4 <_Balloc>
 8012ef8:	1e07      	subs	r7, r0, #0
 8012efa:	d105      	bne.n	8012f08 <__multadd+0x54>
 8012efc:	003a      	movs	r2, r7
 8012efe:	21ba      	movs	r1, #186	@ 0xba
 8012f00:	4b0c      	ldr	r3, [pc, #48]	@ (8012f34 <__multadd+0x80>)
 8012f02:	480d      	ldr	r0, [pc, #52]	@ (8012f38 <__multadd+0x84>)
 8012f04:	f000 ff36 	bl	8013d74 <__assert_func>
 8012f08:	0021      	movs	r1, r4
 8012f0a:	6922      	ldr	r2, [r4, #16]
 8012f0c:	310c      	adds	r1, #12
 8012f0e:	3202      	adds	r2, #2
 8012f10:	0092      	lsls	r2, r2, #2
 8012f12:	300c      	adds	r0, #12
 8012f14:	f000 ff24 	bl	8013d60 <memcpy>
 8012f18:	0021      	movs	r1, r4
 8012f1a:	9801      	ldr	r0, [sp, #4]
 8012f1c:	f7ff ffa6 	bl	8012e6c <_Bfree>
 8012f20:	003c      	movs	r4, r7
 8012f22:	1d2b      	adds	r3, r5, #4
 8012f24:	009b      	lsls	r3, r3, #2
 8012f26:	18e3      	adds	r3, r4, r3
 8012f28:	3501      	adds	r5, #1
 8012f2a:	605e      	str	r6, [r3, #4]
 8012f2c:	6125      	str	r5, [r4, #16]
 8012f2e:	0020      	movs	r0, r4
 8012f30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012f32:	46c0      	nop			@ (mov r8, r8)
 8012f34:	08027334 	.word	0x08027334
 8012f38:	08027345 	.word	0x08027345

08012f3c <__hi0bits>:
 8012f3c:	2280      	movs	r2, #128	@ 0x80
 8012f3e:	0003      	movs	r3, r0
 8012f40:	0252      	lsls	r2, r2, #9
 8012f42:	2000      	movs	r0, #0
 8012f44:	4293      	cmp	r3, r2
 8012f46:	d201      	bcs.n	8012f4c <__hi0bits+0x10>
 8012f48:	041b      	lsls	r3, r3, #16
 8012f4a:	3010      	adds	r0, #16
 8012f4c:	2280      	movs	r2, #128	@ 0x80
 8012f4e:	0452      	lsls	r2, r2, #17
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d201      	bcs.n	8012f58 <__hi0bits+0x1c>
 8012f54:	3008      	adds	r0, #8
 8012f56:	021b      	lsls	r3, r3, #8
 8012f58:	2280      	movs	r2, #128	@ 0x80
 8012f5a:	0552      	lsls	r2, r2, #21
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d201      	bcs.n	8012f64 <__hi0bits+0x28>
 8012f60:	3004      	adds	r0, #4
 8012f62:	011b      	lsls	r3, r3, #4
 8012f64:	2280      	movs	r2, #128	@ 0x80
 8012f66:	05d2      	lsls	r2, r2, #23
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	d201      	bcs.n	8012f70 <__hi0bits+0x34>
 8012f6c:	3002      	adds	r0, #2
 8012f6e:	009b      	lsls	r3, r3, #2
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	db03      	blt.n	8012f7c <__hi0bits+0x40>
 8012f74:	3001      	adds	r0, #1
 8012f76:	4213      	tst	r3, r2
 8012f78:	d100      	bne.n	8012f7c <__hi0bits+0x40>
 8012f7a:	2020      	movs	r0, #32
 8012f7c:	4770      	bx	lr

08012f7e <__lo0bits>:
 8012f7e:	6803      	ldr	r3, [r0, #0]
 8012f80:	0001      	movs	r1, r0
 8012f82:	2207      	movs	r2, #7
 8012f84:	0018      	movs	r0, r3
 8012f86:	4010      	ands	r0, r2
 8012f88:	4213      	tst	r3, r2
 8012f8a:	d00d      	beq.n	8012fa8 <__lo0bits+0x2a>
 8012f8c:	3a06      	subs	r2, #6
 8012f8e:	2000      	movs	r0, #0
 8012f90:	4213      	tst	r3, r2
 8012f92:	d105      	bne.n	8012fa0 <__lo0bits+0x22>
 8012f94:	3002      	adds	r0, #2
 8012f96:	4203      	tst	r3, r0
 8012f98:	d003      	beq.n	8012fa2 <__lo0bits+0x24>
 8012f9a:	40d3      	lsrs	r3, r2
 8012f9c:	0010      	movs	r0, r2
 8012f9e:	600b      	str	r3, [r1, #0]
 8012fa0:	4770      	bx	lr
 8012fa2:	089b      	lsrs	r3, r3, #2
 8012fa4:	600b      	str	r3, [r1, #0]
 8012fa6:	e7fb      	b.n	8012fa0 <__lo0bits+0x22>
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	d101      	bne.n	8012fb2 <__lo0bits+0x34>
 8012fae:	2010      	movs	r0, #16
 8012fb0:	0c1b      	lsrs	r3, r3, #16
 8012fb2:	b2da      	uxtb	r2, r3
 8012fb4:	2a00      	cmp	r2, #0
 8012fb6:	d101      	bne.n	8012fbc <__lo0bits+0x3e>
 8012fb8:	3008      	adds	r0, #8
 8012fba:	0a1b      	lsrs	r3, r3, #8
 8012fbc:	071a      	lsls	r2, r3, #28
 8012fbe:	d101      	bne.n	8012fc4 <__lo0bits+0x46>
 8012fc0:	3004      	adds	r0, #4
 8012fc2:	091b      	lsrs	r3, r3, #4
 8012fc4:	079a      	lsls	r2, r3, #30
 8012fc6:	d101      	bne.n	8012fcc <__lo0bits+0x4e>
 8012fc8:	3002      	adds	r0, #2
 8012fca:	089b      	lsrs	r3, r3, #2
 8012fcc:	07da      	lsls	r2, r3, #31
 8012fce:	d4e9      	bmi.n	8012fa4 <__lo0bits+0x26>
 8012fd0:	3001      	adds	r0, #1
 8012fd2:	085b      	lsrs	r3, r3, #1
 8012fd4:	d1e6      	bne.n	8012fa4 <__lo0bits+0x26>
 8012fd6:	2020      	movs	r0, #32
 8012fd8:	e7e2      	b.n	8012fa0 <__lo0bits+0x22>
	...

08012fdc <__i2b>:
 8012fdc:	b510      	push	{r4, lr}
 8012fde:	000c      	movs	r4, r1
 8012fe0:	2101      	movs	r1, #1
 8012fe2:	f7ff feff 	bl	8012de4 <_Balloc>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d107      	bne.n	8012ffa <__i2b+0x1e>
 8012fea:	2146      	movs	r1, #70	@ 0x46
 8012fec:	4c05      	ldr	r4, [pc, #20]	@ (8013004 <__i2b+0x28>)
 8012fee:	0002      	movs	r2, r0
 8012ff0:	4b05      	ldr	r3, [pc, #20]	@ (8013008 <__i2b+0x2c>)
 8012ff2:	0020      	movs	r0, r4
 8012ff4:	31ff      	adds	r1, #255	@ 0xff
 8012ff6:	f000 febd 	bl	8013d74 <__assert_func>
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	6144      	str	r4, [r0, #20]
 8012ffe:	6103      	str	r3, [r0, #16]
 8013000:	bd10      	pop	{r4, pc}
 8013002:	46c0      	nop			@ (mov r8, r8)
 8013004:	08027345 	.word	0x08027345
 8013008:	08027334 	.word	0x08027334

0801300c <__multiply>:
 801300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801300e:	0014      	movs	r4, r2
 8013010:	690a      	ldr	r2, [r1, #16]
 8013012:	6923      	ldr	r3, [r4, #16]
 8013014:	000d      	movs	r5, r1
 8013016:	b08b      	sub	sp, #44	@ 0x2c
 8013018:	429a      	cmp	r2, r3
 801301a:	db02      	blt.n	8013022 <__multiply+0x16>
 801301c:	0023      	movs	r3, r4
 801301e:	000c      	movs	r4, r1
 8013020:	001d      	movs	r5, r3
 8013022:	6927      	ldr	r7, [r4, #16]
 8013024:	692e      	ldr	r6, [r5, #16]
 8013026:	6861      	ldr	r1, [r4, #4]
 8013028:	19bb      	adds	r3, r7, r6
 801302a:	9303      	str	r3, [sp, #12]
 801302c:	68a3      	ldr	r3, [r4, #8]
 801302e:	19ba      	adds	r2, r7, r6
 8013030:	4293      	cmp	r3, r2
 8013032:	da00      	bge.n	8013036 <__multiply+0x2a>
 8013034:	3101      	adds	r1, #1
 8013036:	f7ff fed5 	bl	8012de4 <_Balloc>
 801303a:	9002      	str	r0, [sp, #8]
 801303c:	2800      	cmp	r0, #0
 801303e:	d106      	bne.n	801304e <__multiply+0x42>
 8013040:	21b1      	movs	r1, #177	@ 0xb1
 8013042:	4b49      	ldr	r3, [pc, #292]	@ (8013168 <__multiply+0x15c>)
 8013044:	4849      	ldr	r0, [pc, #292]	@ (801316c <__multiply+0x160>)
 8013046:	9a02      	ldr	r2, [sp, #8]
 8013048:	0049      	lsls	r1, r1, #1
 801304a:	f000 fe93 	bl	8013d74 <__assert_func>
 801304e:	9b02      	ldr	r3, [sp, #8]
 8013050:	2200      	movs	r2, #0
 8013052:	3314      	adds	r3, #20
 8013054:	469c      	mov	ip, r3
 8013056:	19bb      	adds	r3, r7, r6
 8013058:	009b      	lsls	r3, r3, #2
 801305a:	4463      	add	r3, ip
 801305c:	9304      	str	r3, [sp, #16]
 801305e:	4663      	mov	r3, ip
 8013060:	9904      	ldr	r1, [sp, #16]
 8013062:	428b      	cmp	r3, r1
 8013064:	d32a      	bcc.n	80130bc <__multiply+0xb0>
 8013066:	0023      	movs	r3, r4
 8013068:	00bf      	lsls	r7, r7, #2
 801306a:	3314      	adds	r3, #20
 801306c:	3514      	adds	r5, #20
 801306e:	9308      	str	r3, [sp, #32]
 8013070:	00b6      	lsls	r6, r6, #2
 8013072:	19db      	adds	r3, r3, r7
 8013074:	9305      	str	r3, [sp, #20]
 8013076:	19ab      	adds	r3, r5, r6
 8013078:	9309      	str	r3, [sp, #36]	@ 0x24
 801307a:	2304      	movs	r3, #4
 801307c:	9306      	str	r3, [sp, #24]
 801307e:	0023      	movs	r3, r4
 8013080:	9a05      	ldr	r2, [sp, #20]
 8013082:	3315      	adds	r3, #21
 8013084:	9501      	str	r5, [sp, #4]
 8013086:	429a      	cmp	r2, r3
 8013088:	d305      	bcc.n	8013096 <__multiply+0x8a>
 801308a:	1b13      	subs	r3, r2, r4
 801308c:	3b15      	subs	r3, #21
 801308e:	089b      	lsrs	r3, r3, #2
 8013090:	3301      	adds	r3, #1
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	9306      	str	r3, [sp, #24]
 8013096:	9b01      	ldr	r3, [sp, #4]
 8013098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801309a:	4293      	cmp	r3, r2
 801309c:	d310      	bcc.n	80130c0 <__multiply+0xb4>
 801309e:	9b03      	ldr	r3, [sp, #12]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	dd05      	ble.n	80130b0 <__multiply+0xa4>
 80130a4:	9b04      	ldr	r3, [sp, #16]
 80130a6:	3b04      	subs	r3, #4
 80130a8:	9304      	str	r3, [sp, #16]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d056      	beq.n	801315e <__multiply+0x152>
 80130b0:	9b02      	ldr	r3, [sp, #8]
 80130b2:	9a03      	ldr	r2, [sp, #12]
 80130b4:	0018      	movs	r0, r3
 80130b6:	611a      	str	r2, [r3, #16]
 80130b8:	b00b      	add	sp, #44	@ 0x2c
 80130ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130bc:	c304      	stmia	r3!, {r2}
 80130be:	e7cf      	b.n	8013060 <__multiply+0x54>
 80130c0:	9b01      	ldr	r3, [sp, #4]
 80130c2:	6818      	ldr	r0, [r3, #0]
 80130c4:	b280      	uxth	r0, r0
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d01e      	beq.n	8013108 <__multiply+0xfc>
 80130ca:	4667      	mov	r7, ip
 80130cc:	2500      	movs	r5, #0
 80130ce:	9e08      	ldr	r6, [sp, #32]
 80130d0:	ce02      	ldmia	r6!, {r1}
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	9307      	str	r3, [sp, #28]
 80130d6:	b28b      	uxth	r3, r1
 80130d8:	4343      	muls	r3, r0
 80130da:	001a      	movs	r2, r3
 80130dc:	466b      	mov	r3, sp
 80130de:	0c09      	lsrs	r1, r1, #16
 80130e0:	8b9b      	ldrh	r3, [r3, #28]
 80130e2:	4341      	muls	r1, r0
 80130e4:	18d3      	adds	r3, r2, r3
 80130e6:	9a07      	ldr	r2, [sp, #28]
 80130e8:	195b      	adds	r3, r3, r5
 80130ea:	0c12      	lsrs	r2, r2, #16
 80130ec:	1889      	adds	r1, r1, r2
 80130ee:	0c1a      	lsrs	r2, r3, #16
 80130f0:	188a      	adds	r2, r1, r2
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	0c15      	lsrs	r5, r2, #16
 80130f6:	0412      	lsls	r2, r2, #16
 80130f8:	431a      	orrs	r2, r3
 80130fa:	9b05      	ldr	r3, [sp, #20]
 80130fc:	c704      	stmia	r7!, {r2}
 80130fe:	42b3      	cmp	r3, r6
 8013100:	d8e6      	bhi.n	80130d0 <__multiply+0xc4>
 8013102:	4663      	mov	r3, ip
 8013104:	9a06      	ldr	r2, [sp, #24]
 8013106:	509d      	str	r5, [r3, r2]
 8013108:	9b01      	ldr	r3, [sp, #4]
 801310a:	6818      	ldr	r0, [r3, #0]
 801310c:	0c00      	lsrs	r0, r0, #16
 801310e:	d020      	beq.n	8013152 <__multiply+0x146>
 8013110:	4663      	mov	r3, ip
 8013112:	0025      	movs	r5, r4
 8013114:	4661      	mov	r1, ip
 8013116:	2700      	movs	r7, #0
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	3514      	adds	r5, #20
 801311c:	682a      	ldr	r2, [r5, #0]
 801311e:	680e      	ldr	r6, [r1, #0]
 8013120:	b292      	uxth	r2, r2
 8013122:	4342      	muls	r2, r0
 8013124:	0c36      	lsrs	r6, r6, #16
 8013126:	1992      	adds	r2, r2, r6
 8013128:	19d2      	adds	r2, r2, r7
 801312a:	0416      	lsls	r6, r2, #16
 801312c:	b29b      	uxth	r3, r3
 801312e:	431e      	orrs	r6, r3
 8013130:	600e      	str	r6, [r1, #0]
 8013132:	cd40      	ldmia	r5!, {r6}
 8013134:	684b      	ldr	r3, [r1, #4]
 8013136:	0c36      	lsrs	r6, r6, #16
 8013138:	4346      	muls	r6, r0
 801313a:	b29b      	uxth	r3, r3
 801313c:	0c12      	lsrs	r2, r2, #16
 801313e:	18f3      	adds	r3, r6, r3
 8013140:	189b      	adds	r3, r3, r2
 8013142:	9a05      	ldr	r2, [sp, #20]
 8013144:	0c1f      	lsrs	r7, r3, #16
 8013146:	3104      	adds	r1, #4
 8013148:	42aa      	cmp	r2, r5
 801314a:	d8e7      	bhi.n	801311c <__multiply+0x110>
 801314c:	4662      	mov	r2, ip
 801314e:	9906      	ldr	r1, [sp, #24]
 8013150:	5053      	str	r3, [r2, r1]
 8013152:	9b01      	ldr	r3, [sp, #4]
 8013154:	3304      	adds	r3, #4
 8013156:	9301      	str	r3, [sp, #4]
 8013158:	2304      	movs	r3, #4
 801315a:	449c      	add	ip, r3
 801315c:	e79b      	b.n	8013096 <__multiply+0x8a>
 801315e:	9b03      	ldr	r3, [sp, #12]
 8013160:	3b01      	subs	r3, #1
 8013162:	9303      	str	r3, [sp, #12]
 8013164:	e79b      	b.n	801309e <__multiply+0x92>
 8013166:	46c0      	nop			@ (mov r8, r8)
 8013168:	08027334 	.word	0x08027334
 801316c:	08027345 	.word	0x08027345

08013170 <__pow5mult>:
 8013170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013172:	2303      	movs	r3, #3
 8013174:	0015      	movs	r5, r2
 8013176:	0007      	movs	r7, r0
 8013178:	000e      	movs	r6, r1
 801317a:	401a      	ands	r2, r3
 801317c:	421d      	tst	r5, r3
 801317e:	d008      	beq.n	8013192 <__pow5mult+0x22>
 8013180:	4925      	ldr	r1, [pc, #148]	@ (8013218 <__pow5mult+0xa8>)
 8013182:	3a01      	subs	r2, #1
 8013184:	0092      	lsls	r2, r2, #2
 8013186:	5852      	ldr	r2, [r2, r1]
 8013188:	2300      	movs	r3, #0
 801318a:	0031      	movs	r1, r6
 801318c:	f7ff fe92 	bl	8012eb4 <__multadd>
 8013190:	0006      	movs	r6, r0
 8013192:	10ad      	asrs	r5, r5, #2
 8013194:	d03d      	beq.n	8013212 <__pow5mult+0xa2>
 8013196:	69fc      	ldr	r4, [r7, #28]
 8013198:	2c00      	cmp	r4, #0
 801319a:	d10f      	bne.n	80131bc <__pow5mult+0x4c>
 801319c:	2010      	movs	r0, #16
 801319e:	f7ff fd65 	bl	8012c6c <malloc>
 80131a2:	1e02      	subs	r2, r0, #0
 80131a4:	61f8      	str	r0, [r7, #28]
 80131a6:	d105      	bne.n	80131b4 <__pow5mult+0x44>
 80131a8:	21b4      	movs	r1, #180	@ 0xb4
 80131aa:	4b1c      	ldr	r3, [pc, #112]	@ (801321c <__pow5mult+0xac>)
 80131ac:	481c      	ldr	r0, [pc, #112]	@ (8013220 <__pow5mult+0xb0>)
 80131ae:	31ff      	adds	r1, #255	@ 0xff
 80131b0:	f000 fde0 	bl	8013d74 <__assert_func>
 80131b4:	6044      	str	r4, [r0, #4]
 80131b6:	6084      	str	r4, [r0, #8]
 80131b8:	6004      	str	r4, [r0, #0]
 80131ba:	60c4      	str	r4, [r0, #12]
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	689c      	ldr	r4, [r3, #8]
 80131c0:	9301      	str	r3, [sp, #4]
 80131c2:	2c00      	cmp	r4, #0
 80131c4:	d108      	bne.n	80131d8 <__pow5mult+0x68>
 80131c6:	0038      	movs	r0, r7
 80131c8:	4916      	ldr	r1, [pc, #88]	@ (8013224 <__pow5mult+0xb4>)
 80131ca:	f7ff ff07 	bl	8012fdc <__i2b>
 80131ce:	9b01      	ldr	r3, [sp, #4]
 80131d0:	0004      	movs	r4, r0
 80131d2:	6098      	str	r0, [r3, #8]
 80131d4:	2300      	movs	r3, #0
 80131d6:	6003      	str	r3, [r0, #0]
 80131d8:	2301      	movs	r3, #1
 80131da:	421d      	tst	r5, r3
 80131dc:	d00a      	beq.n	80131f4 <__pow5mult+0x84>
 80131de:	0031      	movs	r1, r6
 80131e0:	0022      	movs	r2, r4
 80131e2:	0038      	movs	r0, r7
 80131e4:	f7ff ff12 	bl	801300c <__multiply>
 80131e8:	0031      	movs	r1, r6
 80131ea:	9001      	str	r0, [sp, #4]
 80131ec:	0038      	movs	r0, r7
 80131ee:	f7ff fe3d 	bl	8012e6c <_Bfree>
 80131f2:	9e01      	ldr	r6, [sp, #4]
 80131f4:	106d      	asrs	r5, r5, #1
 80131f6:	d00c      	beq.n	8013212 <__pow5mult+0xa2>
 80131f8:	6820      	ldr	r0, [r4, #0]
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d107      	bne.n	801320e <__pow5mult+0x9e>
 80131fe:	0022      	movs	r2, r4
 8013200:	0021      	movs	r1, r4
 8013202:	0038      	movs	r0, r7
 8013204:	f7ff ff02 	bl	801300c <__multiply>
 8013208:	2300      	movs	r3, #0
 801320a:	6020      	str	r0, [r4, #0]
 801320c:	6003      	str	r3, [r0, #0]
 801320e:	0004      	movs	r4, r0
 8013210:	e7e2      	b.n	80131d8 <__pow5mult+0x68>
 8013212:	0030      	movs	r0, r6
 8013214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013216:	46c0      	nop			@ (mov r8, r8)
 8013218:	080273a0 	.word	0x080273a0
 801321c:	080272c5 	.word	0x080272c5
 8013220:	08027345 	.word	0x08027345
 8013224:	00000271 	.word	0x00000271

08013228 <__lshift>:
 8013228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801322a:	000c      	movs	r4, r1
 801322c:	0016      	movs	r6, r2
 801322e:	6923      	ldr	r3, [r4, #16]
 8013230:	1157      	asrs	r7, r2, #5
 8013232:	b085      	sub	sp, #20
 8013234:	18fb      	adds	r3, r7, r3
 8013236:	9301      	str	r3, [sp, #4]
 8013238:	3301      	adds	r3, #1
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	6849      	ldr	r1, [r1, #4]
 801323e:	68a3      	ldr	r3, [r4, #8]
 8013240:	9002      	str	r0, [sp, #8]
 8013242:	9a00      	ldr	r2, [sp, #0]
 8013244:	4293      	cmp	r3, r2
 8013246:	db10      	blt.n	801326a <__lshift+0x42>
 8013248:	9802      	ldr	r0, [sp, #8]
 801324a:	f7ff fdcb 	bl	8012de4 <_Balloc>
 801324e:	2300      	movs	r3, #0
 8013250:	0001      	movs	r1, r0
 8013252:	0005      	movs	r5, r0
 8013254:	001a      	movs	r2, r3
 8013256:	3114      	adds	r1, #20
 8013258:	4298      	cmp	r0, r3
 801325a:	d10c      	bne.n	8013276 <__lshift+0x4e>
 801325c:	21ef      	movs	r1, #239	@ 0xef
 801325e:	002a      	movs	r2, r5
 8013260:	4b25      	ldr	r3, [pc, #148]	@ (80132f8 <__lshift+0xd0>)
 8013262:	4826      	ldr	r0, [pc, #152]	@ (80132fc <__lshift+0xd4>)
 8013264:	0049      	lsls	r1, r1, #1
 8013266:	f000 fd85 	bl	8013d74 <__assert_func>
 801326a:	3101      	adds	r1, #1
 801326c:	005b      	lsls	r3, r3, #1
 801326e:	e7e8      	b.n	8013242 <__lshift+0x1a>
 8013270:	0098      	lsls	r0, r3, #2
 8013272:	500a      	str	r2, [r1, r0]
 8013274:	3301      	adds	r3, #1
 8013276:	42bb      	cmp	r3, r7
 8013278:	dbfa      	blt.n	8013270 <__lshift+0x48>
 801327a:	43fb      	mvns	r3, r7
 801327c:	17db      	asrs	r3, r3, #31
 801327e:	401f      	ands	r7, r3
 8013280:	00bf      	lsls	r7, r7, #2
 8013282:	0023      	movs	r3, r4
 8013284:	201f      	movs	r0, #31
 8013286:	19c9      	adds	r1, r1, r7
 8013288:	0037      	movs	r7, r6
 801328a:	6922      	ldr	r2, [r4, #16]
 801328c:	3314      	adds	r3, #20
 801328e:	0092      	lsls	r2, r2, #2
 8013290:	189a      	adds	r2, r3, r2
 8013292:	4007      	ands	r7, r0
 8013294:	4206      	tst	r6, r0
 8013296:	d029      	beq.n	80132ec <__lshift+0xc4>
 8013298:	3001      	adds	r0, #1
 801329a:	1bc0      	subs	r0, r0, r7
 801329c:	9003      	str	r0, [sp, #12]
 801329e:	468c      	mov	ip, r1
 80132a0:	2000      	movs	r0, #0
 80132a2:	681e      	ldr	r6, [r3, #0]
 80132a4:	40be      	lsls	r6, r7
 80132a6:	4306      	orrs	r6, r0
 80132a8:	4660      	mov	r0, ip
 80132aa:	c040      	stmia	r0!, {r6}
 80132ac:	4684      	mov	ip, r0
 80132ae:	9e03      	ldr	r6, [sp, #12]
 80132b0:	cb01      	ldmia	r3!, {r0}
 80132b2:	40f0      	lsrs	r0, r6
 80132b4:	429a      	cmp	r2, r3
 80132b6:	d8f4      	bhi.n	80132a2 <__lshift+0x7a>
 80132b8:	0026      	movs	r6, r4
 80132ba:	3615      	adds	r6, #21
 80132bc:	2304      	movs	r3, #4
 80132be:	42b2      	cmp	r2, r6
 80132c0:	d304      	bcc.n	80132cc <__lshift+0xa4>
 80132c2:	1b13      	subs	r3, r2, r4
 80132c4:	3b15      	subs	r3, #21
 80132c6:	089b      	lsrs	r3, r3, #2
 80132c8:	3301      	adds	r3, #1
 80132ca:	009b      	lsls	r3, r3, #2
 80132cc:	50c8      	str	r0, [r1, r3]
 80132ce:	2800      	cmp	r0, #0
 80132d0:	d002      	beq.n	80132d8 <__lshift+0xb0>
 80132d2:	9b01      	ldr	r3, [sp, #4]
 80132d4:	3302      	adds	r3, #2
 80132d6:	9300      	str	r3, [sp, #0]
 80132d8:	9b00      	ldr	r3, [sp, #0]
 80132da:	9802      	ldr	r0, [sp, #8]
 80132dc:	3b01      	subs	r3, #1
 80132de:	0021      	movs	r1, r4
 80132e0:	612b      	str	r3, [r5, #16]
 80132e2:	f7ff fdc3 	bl	8012e6c <_Bfree>
 80132e6:	0028      	movs	r0, r5
 80132e8:	b005      	add	sp, #20
 80132ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ec:	cb01      	ldmia	r3!, {r0}
 80132ee:	c101      	stmia	r1!, {r0}
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d8fb      	bhi.n	80132ec <__lshift+0xc4>
 80132f4:	e7f0      	b.n	80132d8 <__lshift+0xb0>
 80132f6:	46c0      	nop			@ (mov r8, r8)
 80132f8:	08027334 	.word	0x08027334
 80132fc:	08027345 	.word	0x08027345

08013300 <__mcmp>:
 8013300:	b530      	push	{r4, r5, lr}
 8013302:	690b      	ldr	r3, [r1, #16]
 8013304:	6904      	ldr	r4, [r0, #16]
 8013306:	0002      	movs	r2, r0
 8013308:	1ae0      	subs	r0, r4, r3
 801330a:	429c      	cmp	r4, r3
 801330c:	d10f      	bne.n	801332e <__mcmp+0x2e>
 801330e:	3214      	adds	r2, #20
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	3114      	adds	r1, #20
 8013314:	0014      	movs	r4, r2
 8013316:	18c9      	adds	r1, r1, r3
 8013318:	18d2      	adds	r2, r2, r3
 801331a:	3a04      	subs	r2, #4
 801331c:	3904      	subs	r1, #4
 801331e:	6815      	ldr	r5, [r2, #0]
 8013320:	680b      	ldr	r3, [r1, #0]
 8013322:	429d      	cmp	r5, r3
 8013324:	d004      	beq.n	8013330 <__mcmp+0x30>
 8013326:	2001      	movs	r0, #1
 8013328:	429d      	cmp	r5, r3
 801332a:	d200      	bcs.n	801332e <__mcmp+0x2e>
 801332c:	3802      	subs	r0, #2
 801332e:	bd30      	pop	{r4, r5, pc}
 8013330:	4294      	cmp	r4, r2
 8013332:	d3f2      	bcc.n	801331a <__mcmp+0x1a>
 8013334:	e7fb      	b.n	801332e <__mcmp+0x2e>
	...

08013338 <__mdiff>:
 8013338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801333a:	000c      	movs	r4, r1
 801333c:	b087      	sub	sp, #28
 801333e:	9000      	str	r0, [sp, #0]
 8013340:	0011      	movs	r1, r2
 8013342:	0020      	movs	r0, r4
 8013344:	0017      	movs	r7, r2
 8013346:	f7ff ffdb 	bl	8013300 <__mcmp>
 801334a:	1e05      	subs	r5, r0, #0
 801334c:	d110      	bne.n	8013370 <__mdiff+0x38>
 801334e:	0001      	movs	r1, r0
 8013350:	9800      	ldr	r0, [sp, #0]
 8013352:	f7ff fd47 	bl	8012de4 <_Balloc>
 8013356:	1e02      	subs	r2, r0, #0
 8013358:	d104      	bne.n	8013364 <__mdiff+0x2c>
 801335a:	4b40      	ldr	r3, [pc, #256]	@ (801345c <__mdiff+0x124>)
 801335c:	4840      	ldr	r0, [pc, #256]	@ (8013460 <__mdiff+0x128>)
 801335e:	4941      	ldr	r1, [pc, #260]	@ (8013464 <__mdiff+0x12c>)
 8013360:	f000 fd08 	bl	8013d74 <__assert_func>
 8013364:	2301      	movs	r3, #1
 8013366:	6145      	str	r5, [r0, #20]
 8013368:	6103      	str	r3, [r0, #16]
 801336a:	0010      	movs	r0, r2
 801336c:	b007      	add	sp, #28
 801336e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013370:	2600      	movs	r6, #0
 8013372:	42b0      	cmp	r0, r6
 8013374:	da03      	bge.n	801337e <__mdiff+0x46>
 8013376:	0023      	movs	r3, r4
 8013378:	003c      	movs	r4, r7
 801337a:	001f      	movs	r7, r3
 801337c:	3601      	adds	r6, #1
 801337e:	6861      	ldr	r1, [r4, #4]
 8013380:	9800      	ldr	r0, [sp, #0]
 8013382:	f7ff fd2f 	bl	8012de4 <_Balloc>
 8013386:	1e02      	subs	r2, r0, #0
 8013388:	d103      	bne.n	8013392 <__mdiff+0x5a>
 801338a:	4b34      	ldr	r3, [pc, #208]	@ (801345c <__mdiff+0x124>)
 801338c:	4834      	ldr	r0, [pc, #208]	@ (8013460 <__mdiff+0x128>)
 801338e:	4936      	ldr	r1, [pc, #216]	@ (8013468 <__mdiff+0x130>)
 8013390:	e7e6      	b.n	8013360 <__mdiff+0x28>
 8013392:	6923      	ldr	r3, [r4, #16]
 8013394:	3414      	adds	r4, #20
 8013396:	9300      	str	r3, [sp, #0]
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	18e3      	adds	r3, r4, r3
 801339c:	0021      	movs	r1, r4
 801339e:	9401      	str	r4, [sp, #4]
 80133a0:	003c      	movs	r4, r7
 80133a2:	9302      	str	r3, [sp, #8]
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	3414      	adds	r4, #20
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	18e3      	adds	r3, r4, r3
 80133ac:	9303      	str	r3, [sp, #12]
 80133ae:	0003      	movs	r3, r0
 80133b0:	60c6      	str	r6, [r0, #12]
 80133b2:	468c      	mov	ip, r1
 80133b4:	2000      	movs	r0, #0
 80133b6:	3314      	adds	r3, #20
 80133b8:	9304      	str	r3, [sp, #16]
 80133ba:	9305      	str	r3, [sp, #20]
 80133bc:	4663      	mov	r3, ip
 80133be:	cb20      	ldmia	r3!, {r5}
 80133c0:	b2a9      	uxth	r1, r5
 80133c2:	000e      	movs	r6, r1
 80133c4:	469c      	mov	ip, r3
 80133c6:	cc08      	ldmia	r4!, {r3}
 80133c8:	0c2d      	lsrs	r5, r5, #16
 80133ca:	b299      	uxth	r1, r3
 80133cc:	1a71      	subs	r1, r6, r1
 80133ce:	1809      	adds	r1, r1, r0
 80133d0:	0c1b      	lsrs	r3, r3, #16
 80133d2:	1408      	asrs	r0, r1, #16
 80133d4:	1aeb      	subs	r3, r5, r3
 80133d6:	181b      	adds	r3, r3, r0
 80133d8:	1418      	asrs	r0, r3, #16
 80133da:	b289      	uxth	r1, r1
 80133dc:	041b      	lsls	r3, r3, #16
 80133de:	4319      	orrs	r1, r3
 80133e0:	9b05      	ldr	r3, [sp, #20]
 80133e2:	c302      	stmia	r3!, {r1}
 80133e4:	9305      	str	r3, [sp, #20]
 80133e6:	9b03      	ldr	r3, [sp, #12]
 80133e8:	42a3      	cmp	r3, r4
 80133ea:	d8e7      	bhi.n	80133bc <__mdiff+0x84>
 80133ec:	0039      	movs	r1, r7
 80133ee:	9c03      	ldr	r4, [sp, #12]
 80133f0:	3115      	adds	r1, #21
 80133f2:	2304      	movs	r3, #4
 80133f4:	428c      	cmp	r4, r1
 80133f6:	d304      	bcc.n	8013402 <__mdiff+0xca>
 80133f8:	1be3      	subs	r3, r4, r7
 80133fa:	3b15      	subs	r3, #21
 80133fc:	089b      	lsrs	r3, r3, #2
 80133fe:	3301      	adds	r3, #1
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	9901      	ldr	r1, [sp, #4]
 8013404:	18cd      	adds	r5, r1, r3
 8013406:	9904      	ldr	r1, [sp, #16]
 8013408:	002e      	movs	r6, r5
 801340a:	18cb      	adds	r3, r1, r3
 801340c:	001f      	movs	r7, r3
 801340e:	9902      	ldr	r1, [sp, #8]
 8013410:	428e      	cmp	r6, r1
 8013412:	d311      	bcc.n	8013438 <__mdiff+0x100>
 8013414:	9c02      	ldr	r4, [sp, #8]
 8013416:	1ee9      	subs	r1, r5, #3
 8013418:	2000      	movs	r0, #0
 801341a:	428c      	cmp	r4, r1
 801341c:	d304      	bcc.n	8013428 <__mdiff+0xf0>
 801341e:	0021      	movs	r1, r4
 8013420:	3103      	adds	r1, #3
 8013422:	1b49      	subs	r1, r1, r5
 8013424:	0889      	lsrs	r1, r1, #2
 8013426:	0088      	lsls	r0, r1, #2
 8013428:	181b      	adds	r3, r3, r0
 801342a:	3b04      	subs	r3, #4
 801342c:	6819      	ldr	r1, [r3, #0]
 801342e:	2900      	cmp	r1, #0
 8013430:	d010      	beq.n	8013454 <__mdiff+0x11c>
 8013432:	9b00      	ldr	r3, [sp, #0]
 8013434:	6113      	str	r3, [r2, #16]
 8013436:	e798      	b.n	801336a <__mdiff+0x32>
 8013438:	4684      	mov	ip, r0
 801343a:	ce02      	ldmia	r6!, {r1}
 801343c:	b288      	uxth	r0, r1
 801343e:	4460      	add	r0, ip
 8013440:	1400      	asrs	r0, r0, #16
 8013442:	0c0c      	lsrs	r4, r1, #16
 8013444:	1904      	adds	r4, r0, r4
 8013446:	4461      	add	r1, ip
 8013448:	1420      	asrs	r0, r4, #16
 801344a:	b289      	uxth	r1, r1
 801344c:	0424      	lsls	r4, r4, #16
 801344e:	4321      	orrs	r1, r4
 8013450:	c702      	stmia	r7!, {r1}
 8013452:	e7dc      	b.n	801340e <__mdiff+0xd6>
 8013454:	9900      	ldr	r1, [sp, #0]
 8013456:	3901      	subs	r1, #1
 8013458:	9100      	str	r1, [sp, #0]
 801345a:	e7e6      	b.n	801342a <__mdiff+0xf2>
 801345c:	08027334 	.word	0x08027334
 8013460:	08027345 	.word	0x08027345
 8013464:	00000237 	.word	0x00000237
 8013468:	00000245 	.word	0x00000245

0801346c <__d2b>:
 801346c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801346e:	2101      	movs	r1, #1
 8013470:	0016      	movs	r6, r2
 8013472:	001f      	movs	r7, r3
 8013474:	f7ff fcb6 	bl	8012de4 <_Balloc>
 8013478:	1e04      	subs	r4, r0, #0
 801347a:	d105      	bne.n	8013488 <__d2b+0x1c>
 801347c:	0022      	movs	r2, r4
 801347e:	4b25      	ldr	r3, [pc, #148]	@ (8013514 <__d2b+0xa8>)
 8013480:	4825      	ldr	r0, [pc, #148]	@ (8013518 <__d2b+0xac>)
 8013482:	4926      	ldr	r1, [pc, #152]	@ (801351c <__d2b+0xb0>)
 8013484:	f000 fc76 	bl	8013d74 <__assert_func>
 8013488:	033b      	lsls	r3, r7, #12
 801348a:	007d      	lsls	r5, r7, #1
 801348c:	0b1b      	lsrs	r3, r3, #12
 801348e:	0d6d      	lsrs	r5, r5, #21
 8013490:	d002      	beq.n	8013498 <__d2b+0x2c>
 8013492:	2280      	movs	r2, #128	@ 0x80
 8013494:	0352      	lsls	r2, r2, #13
 8013496:	4313      	orrs	r3, r2
 8013498:	9301      	str	r3, [sp, #4]
 801349a:	2e00      	cmp	r6, #0
 801349c:	d025      	beq.n	80134ea <__d2b+0x7e>
 801349e:	4668      	mov	r0, sp
 80134a0:	9600      	str	r6, [sp, #0]
 80134a2:	f7ff fd6c 	bl	8012f7e <__lo0bits>
 80134a6:	9b01      	ldr	r3, [sp, #4]
 80134a8:	9900      	ldr	r1, [sp, #0]
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d01b      	beq.n	80134e6 <__d2b+0x7a>
 80134ae:	2220      	movs	r2, #32
 80134b0:	001e      	movs	r6, r3
 80134b2:	1a12      	subs	r2, r2, r0
 80134b4:	4096      	lsls	r6, r2
 80134b6:	0032      	movs	r2, r6
 80134b8:	40c3      	lsrs	r3, r0
 80134ba:	430a      	orrs	r2, r1
 80134bc:	6162      	str	r2, [r4, #20]
 80134be:	9301      	str	r3, [sp, #4]
 80134c0:	9e01      	ldr	r6, [sp, #4]
 80134c2:	61a6      	str	r6, [r4, #24]
 80134c4:	1e73      	subs	r3, r6, #1
 80134c6:	419e      	sbcs	r6, r3
 80134c8:	3601      	adds	r6, #1
 80134ca:	6126      	str	r6, [r4, #16]
 80134cc:	2d00      	cmp	r5, #0
 80134ce:	d014      	beq.n	80134fa <__d2b+0x8e>
 80134d0:	2635      	movs	r6, #53	@ 0x35
 80134d2:	4b13      	ldr	r3, [pc, #76]	@ (8013520 <__d2b+0xb4>)
 80134d4:	18ed      	adds	r5, r5, r3
 80134d6:	9b08      	ldr	r3, [sp, #32]
 80134d8:	182d      	adds	r5, r5, r0
 80134da:	601d      	str	r5, [r3, #0]
 80134dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134de:	1a36      	subs	r6, r6, r0
 80134e0:	601e      	str	r6, [r3, #0]
 80134e2:	0020      	movs	r0, r4
 80134e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80134e6:	6161      	str	r1, [r4, #20]
 80134e8:	e7ea      	b.n	80134c0 <__d2b+0x54>
 80134ea:	a801      	add	r0, sp, #4
 80134ec:	f7ff fd47 	bl	8012f7e <__lo0bits>
 80134f0:	9b01      	ldr	r3, [sp, #4]
 80134f2:	2601      	movs	r6, #1
 80134f4:	6163      	str	r3, [r4, #20]
 80134f6:	3020      	adds	r0, #32
 80134f8:	e7e7      	b.n	80134ca <__d2b+0x5e>
 80134fa:	4b0a      	ldr	r3, [pc, #40]	@ (8013524 <__d2b+0xb8>)
 80134fc:	18c0      	adds	r0, r0, r3
 80134fe:	9b08      	ldr	r3, [sp, #32]
 8013500:	6018      	str	r0, [r3, #0]
 8013502:	4b09      	ldr	r3, [pc, #36]	@ (8013528 <__d2b+0xbc>)
 8013504:	18f3      	adds	r3, r6, r3
 8013506:	009b      	lsls	r3, r3, #2
 8013508:	18e3      	adds	r3, r4, r3
 801350a:	6958      	ldr	r0, [r3, #20]
 801350c:	f7ff fd16 	bl	8012f3c <__hi0bits>
 8013510:	0176      	lsls	r6, r6, #5
 8013512:	e7e3      	b.n	80134dc <__d2b+0x70>
 8013514:	08027334 	.word	0x08027334
 8013518:	08027345 	.word	0x08027345
 801351c:	0000030f 	.word	0x0000030f
 8013520:	fffffbcd 	.word	0xfffffbcd
 8013524:	fffffbce 	.word	0xfffffbce
 8013528:	3fffffff 	.word	0x3fffffff

0801352c <__ssputs_r>:
 801352c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801352e:	688e      	ldr	r6, [r1, #8]
 8013530:	b085      	sub	sp, #20
 8013532:	001f      	movs	r7, r3
 8013534:	000c      	movs	r4, r1
 8013536:	680b      	ldr	r3, [r1, #0]
 8013538:	9002      	str	r0, [sp, #8]
 801353a:	9203      	str	r2, [sp, #12]
 801353c:	42be      	cmp	r6, r7
 801353e:	d830      	bhi.n	80135a2 <__ssputs_r+0x76>
 8013540:	210c      	movs	r1, #12
 8013542:	5e62      	ldrsh	r2, [r4, r1]
 8013544:	2190      	movs	r1, #144	@ 0x90
 8013546:	00c9      	lsls	r1, r1, #3
 8013548:	420a      	tst	r2, r1
 801354a:	d028      	beq.n	801359e <__ssputs_r+0x72>
 801354c:	2003      	movs	r0, #3
 801354e:	6921      	ldr	r1, [r4, #16]
 8013550:	1a5b      	subs	r3, r3, r1
 8013552:	9301      	str	r3, [sp, #4]
 8013554:	6963      	ldr	r3, [r4, #20]
 8013556:	4343      	muls	r3, r0
 8013558:	9801      	ldr	r0, [sp, #4]
 801355a:	0fdd      	lsrs	r5, r3, #31
 801355c:	18ed      	adds	r5, r5, r3
 801355e:	1c7b      	adds	r3, r7, #1
 8013560:	181b      	adds	r3, r3, r0
 8013562:	106d      	asrs	r5, r5, #1
 8013564:	42ab      	cmp	r3, r5
 8013566:	d900      	bls.n	801356a <__ssputs_r+0x3e>
 8013568:	001d      	movs	r5, r3
 801356a:	0552      	lsls	r2, r2, #21
 801356c:	d528      	bpl.n	80135c0 <__ssputs_r+0x94>
 801356e:	0029      	movs	r1, r5
 8013570:	9802      	ldr	r0, [sp, #8]
 8013572:	f7ff fba7 	bl	8012cc4 <_malloc_r>
 8013576:	1e06      	subs	r6, r0, #0
 8013578:	d02c      	beq.n	80135d4 <__ssputs_r+0xa8>
 801357a:	9a01      	ldr	r2, [sp, #4]
 801357c:	6921      	ldr	r1, [r4, #16]
 801357e:	f000 fbef 	bl	8013d60 <memcpy>
 8013582:	89a2      	ldrh	r2, [r4, #12]
 8013584:	4b18      	ldr	r3, [pc, #96]	@ (80135e8 <__ssputs_r+0xbc>)
 8013586:	401a      	ands	r2, r3
 8013588:	2380      	movs	r3, #128	@ 0x80
 801358a:	4313      	orrs	r3, r2
 801358c:	81a3      	strh	r3, [r4, #12]
 801358e:	9b01      	ldr	r3, [sp, #4]
 8013590:	6126      	str	r6, [r4, #16]
 8013592:	18f6      	adds	r6, r6, r3
 8013594:	6026      	str	r6, [r4, #0]
 8013596:	003e      	movs	r6, r7
 8013598:	6165      	str	r5, [r4, #20]
 801359a:	1aed      	subs	r5, r5, r3
 801359c:	60a5      	str	r5, [r4, #8]
 801359e:	42be      	cmp	r6, r7
 80135a0:	d900      	bls.n	80135a4 <__ssputs_r+0x78>
 80135a2:	003e      	movs	r6, r7
 80135a4:	0032      	movs	r2, r6
 80135a6:	9903      	ldr	r1, [sp, #12]
 80135a8:	6820      	ldr	r0, [r4, #0]
 80135aa:	f000 fbb3 	bl	8013d14 <memmove>
 80135ae:	2000      	movs	r0, #0
 80135b0:	68a3      	ldr	r3, [r4, #8]
 80135b2:	1b9b      	subs	r3, r3, r6
 80135b4:	60a3      	str	r3, [r4, #8]
 80135b6:	6823      	ldr	r3, [r4, #0]
 80135b8:	199b      	adds	r3, r3, r6
 80135ba:	6023      	str	r3, [r4, #0]
 80135bc:	b005      	add	sp, #20
 80135be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135c0:	002a      	movs	r2, r5
 80135c2:	9802      	ldr	r0, [sp, #8]
 80135c4:	f000 fc33 	bl	8013e2e <_realloc_r>
 80135c8:	1e06      	subs	r6, r0, #0
 80135ca:	d1e0      	bne.n	801358e <__ssputs_r+0x62>
 80135cc:	6921      	ldr	r1, [r4, #16]
 80135ce:	9802      	ldr	r0, [sp, #8]
 80135d0:	f7ff fb02 	bl	8012bd8 <_free_r>
 80135d4:	230c      	movs	r3, #12
 80135d6:	2001      	movs	r0, #1
 80135d8:	9a02      	ldr	r2, [sp, #8]
 80135da:	4240      	negs	r0, r0
 80135dc:	6013      	str	r3, [r2, #0]
 80135de:	89a2      	ldrh	r2, [r4, #12]
 80135e0:	3334      	adds	r3, #52	@ 0x34
 80135e2:	4313      	orrs	r3, r2
 80135e4:	81a3      	strh	r3, [r4, #12]
 80135e6:	e7e9      	b.n	80135bc <__ssputs_r+0x90>
 80135e8:	fffffb7f 	.word	0xfffffb7f

080135ec <_svfiprintf_r>:
 80135ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ee:	b0a1      	sub	sp, #132	@ 0x84
 80135f0:	9003      	str	r0, [sp, #12]
 80135f2:	001d      	movs	r5, r3
 80135f4:	898b      	ldrh	r3, [r1, #12]
 80135f6:	000f      	movs	r7, r1
 80135f8:	0016      	movs	r6, r2
 80135fa:	061b      	lsls	r3, r3, #24
 80135fc:	d511      	bpl.n	8013622 <_svfiprintf_r+0x36>
 80135fe:	690b      	ldr	r3, [r1, #16]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d10e      	bne.n	8013622 <_svfiprintf_r+0x36>
 8013604:	2140      	movs	r1, #64	@ 0x40
 8013606:	f7ff fb5d 	bl	8012cc4 <_malloc_r>
 801360a:	6038      	str	r0, [r7, #0]
 801360c:	6138      	str	r0, [r7, #16]
 801360e:	2800      	cmp	r0, #0
 8013610:	d105      	bne.n	801361e <_svfiprintf_r+0x32>
 8013612:	230c      	movs	r3, #12
 8013614:	9a03      	ldr	r2, [sp, #12]
 8013616:	6013      	str	r3, [r2, #0]
 8013618:	2001      	movs	r0, #1
 801361a:	4240      	negs	r0, r0
 801361c:	e0cf      	b.n	80137be <_svfiprintf_r+0x1d2>
 801361e:	2340      	movs	r3, #64	@ 0x40
 8013620:	617b      	str	r3, [r7, #20]
 8013622:	2300      	movs	r3, #0
 8013624:	ac08      	add	r4, sp, #32
 8013626:	6163      	str	r3, [r4, #20]
 8013628:	3320      	adds	r3, #32
 801362a:	7663      	strb	r3, [r4, #25]
 801362c:	3310      	adds	r3, #16
 801362e:	76a3      	strb	r3, [r4, #26]
 8013630:	9507      	str	r5, [sp, #28]
 8013632:	0035      	movs	r5, r6
 8013634:	782b      	ldrb	r3, [r5, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d001      	beq.n	801363e <_svfiprintf_r+0x52>
 801363a:	2b25      	cmp	r3, #37	@ 0x25
 801363c:	d148      	bne.n	80136d0 <_svfiprintf_r+0xe4>
 801363e:	1bab      	subs	r3, r5, r6
 8013640:	9305      	str	r3, [sp, #20]
 8013642:	42b5      	cmp	r5, r6
 8013644:	d00b      	beq.n	801365e <_svfiprintf_r+0x72>
 8013646:	0032      	movs	r2, r6
 8013648:	0039      	movs	r1, r7
 801364a:	9803      	ldr	r0, [sp, #12]
 801364c:	f7ff ff6e 	bl	801352c <__ssputs_r>
 8013650:	3001      	adds	r0, #1
 8013652:	d100      	bne.n	8013656 <_svfiprintf_r+0x6a>
 8013654:	e0ae      	b.n	80137b4 <_svfiprintf_r+0x1c8>
 8013656:	6963      	ldr	r3, [r4, #20]
 8013658:	9a05      	ldr	r2, [sp, #20]
 801365a:	189b      	adds	r3, r3, r2
 801365c:	6163      	str	r3, [r4, #20]
 801365e:	782b      	ldrb	r3, [r5, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d100      	bne.n	8013666 <_svfiprintf_r+0x7a>
 8013664:	e0a6      	b.n	80137b4 <_svfiprintf_r+0x1c8>
 8013666:	2201      	movs	r2, #1
 8013668:	2300      	movs	r3, #0
 801366a:	4252      	negs	r2, r2
 801366c:	6062      	str	r2, [r4, #4]
 801366e:	a904      	add	r1, sp, #16
 8013670:	3254      	adds	r2, #84	@ 0x54
 8013672:	1852      	adds	r2, r2, r1
 8013674:	1c6e      	adds	r6, r5, #1
 8013676:	6023      	str	r3, [r4, #0]
 8013678:	60e3      	str	r3, [r4, #12]
 801367a:	60a3      	str	r3, [r4, #8]
 801367c:	7013      	strb	r3, [r2, #0]
 801367e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8013680:	4b54      	ldr	r3, [pc, #336]	@ (80137d4 <_svfiprintf_r+0x1e8>)
 8013682:	2205      	movs	r2, #5
 8013684:	0018      	movs	r0, r3
 8013686:	7831      	ldrb	r1, [r6, #0]
 8013688:	9305      	str	r3, [sp, #20]
 801368a:	f7fe fc18 	bl	8011ebe <memchr>
 801368e:	1c75      	adds	r5, r6, #1
 8013690:	2800      	cmp	r0, #0
 8013692:	d11f      	bne.n	80136d4 <_svfiprintf_r+0xe8>
 8013694:	6822      	ldr	r2, [r4, #0]
 8013696:	06d3      	lsls	r3, r2, #27
 8013698:	d504      	bpl.n	80136a4 <_svfiprintf_r+0xb8>
 801369a:	2353      	movs	r3, #83	@ 0x53
 801369c:	a904      	add	r1, sp, #16
 801369e:	185b      	adds	r3, r3, r1
 80136a0:	2120      	movs	r1, #32
 80136a2:	7019      	strb	r1, [r3, #0]
 80136a4:	0713      	lsls	r3, r2, #28
 80136a6:	d504      	bpl.n	80136b2 <_svfiprintf_r+0xc6>
 80136a8:	2353      	movs	r3, #83	@ 0x53
 80136aa:	a904      	add	r1, sp, #16
 80136ac:	185b      	adds	r3, r3, r1
 80136ae:	212b      	movs	r1, #43	@ 0x2b
 80136b0:	7019      	strb	r1, [r3, #0]
 80136b2:	7833      	ldrb	r3, [r6, #0]
 80136b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80136b6:	d016      	beq.n	80136e6 <_svfiprintf_r+0xfa>
 80136b8:	0035      	movs	r5, r6
 80136ba:	2100      	movs	r1, #0
 80136bc:	200a      	movs	r0, #10
 80136be:	68e3      	ldr	r3, [r4, #12]
 80136c0:	782a      	ldrb	r2, [r5, #0]
 80136c2:	1c6e      	adds	r6, r5, #1
 80136c4:	3a30      	subs	r2, #48	@ 0x30
 80136c6:	2a09      	cmp	r2, #9
 80136c8:	d950      	bls.n	801376c <_svfiprintf_r+0x180>
 80136ca:	2900      	cmp	r1, #0
 80136cc:	d111      	bne.n	80136f2 <_svfiprintf_r+0x106>
 80136ce:	e017      	b.n	8013700 <_svfiprintf_r+0x114>
 80136d0:	3501      	adds	r5, #1
 80136d2:	e7af      	b.n	8013634 <_svfiprintf_r+0x48>
 80136d4:	9b05      	ldr	r3, [sp, #20]
 80136d6:	6822      	ldr	r2, [r4, #0]
 80136d8:	1ac0      	subs	r0, r0, r3
 80136da:	2301      	movs	r3, #1
 80136dc:	4083      	lsls	r3, r0
 80136de:	4313      	orrs	r3, r2
 80136e0:	002e      	movs	r6, r5
 80136e2:	6023      	str	r3, [r4, #0]
 80136e4:	e7cc      	b.n	8013680 <_svfiprintf_r+0x94>
 80136e6:	9b07      	ldr	r3, [sp, #28]
 80136e8:	1d19      	adds	r1, r3, #4
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	9107      	str	r1, [sp, #28]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	db01      	blt.n	80136f6 <_svfiprintf_r+0x10a>
 80136f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136f4:	e004      	b.n	8013700 <_svfiprintf_r+0x114>
 80136f6:	425b      	negs	r3, r3
 80136f8:	60e3      	str	r3, [r4, #12]
 80136fa:	2302      	movs	r3, #2
 80136fc:	4313      	orrs	r3, r2
 80136fe:	6023      	str	r3, [r4, #0]
 8013700:	782b      	ldrb	r3, [r5, #0]
 8013702:	2b2e      	cmp	r3, #46	@ 0x2e
 8013704:	d10c      	bne.n	8013720 <_svfiprintf_r+0x134>
 8013706:	786b      	ldrb	r3, [r5, #1]
 8013708:	2b2a      	cmp	r3, #42	@ 0x2a
 801370a:	d134      	bne.n	8013776 <_svfiprintf_r+0x18a>
 801370c:	9b07      	ldr	r3, [sp, #28]
 801370e:	3502      	adds	r5, #2
 8013710:	1d1a      	adds	r2, r3, #4
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	9207      	str	r2, [sp, #28]
 8013716:	2b00      	cmp	r3, #0
 8013718:	da01      	bge.n	801371e <_svfiprintf_r+0x132>
 801371a:	2301      	movs	r3, #1
 801371c:	425b      	negs	r3, r3
 801371e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013720:	4e2d      	ldr	r6, [pc, #180]	@ (80137d8 <_svfiprintf_r+0x1ec>)
 8013722:	2203      	movs	r2, #3
 8013724:	0030      	movs	r0, r6
 8013726:	7829      	ldrb	r1, [r5, #0]
 8013728:	f7fe fbc9 	bl	8011ebe <memchr>
 801372c:	2800      	cmp	r0, #0
 801372e:	d006      	beq.n	801373e <_svfiprintf_r+0x152>
 8013730:	2340      	movs	r3, #64	@ 0x40
 8013732:	1b80      	subs	r0, r0, r6
 8013734:	4083      	lsls	r3, r0
 8013736:	6822      	ldr	r2, [r4, #0]
 8013738:	3501      	adds	r5, #1
 801373a:	4313      	orrs	r3, r2
 801373c:	6023      	str	r3, [r4, #0]
 801373e:	7829      	ldrb	r1, [r5, #0]
 8013740:	2206      	movs	r2, #6
 8013742:	4826      	ldr	r0, [pc, #152]	@ (80137dc <_svfiprintf_r+0x1f0>)
 8013744:	1c6e      	adds	r6, r5, #1
 8013746:	7621      	strb	r1, [r4, #24]
 8013748:	f7fe fbb9 	bl	8011ebe <memchr>
 801374c:	2800      	cmp	r0, #0
 801374e:	d038      	beq.n	80137c2 <_svfiprintf_r+0x1d6>
 8013750:	4b23      	ldr	r3, [pc, #140]	@ (80137e0 <_svfiprintf_r+0x1f4>)
 8013752:	2b00      	cmp	r3, #0
 8013754:	d122      	bne.n	801379c <_svfiprintf_r+0x1b0>
 8013756:	2207      	movs	r2, #7
 8013758:	9b07      	ldr	r3, [sp, #28]
 801375a:	3307      	adds	r3, #7
 801375c:	4393      	bics	r3, r2
 801375e:	3308      	adds	r3, #8
 8013760:	9307      	str	r3, [sp, #28]
 8013762:	6963      	ldr	r3, [r4, #20]
 8013764:	9a04      	ldr	r2, [sp, #16]
 8013766:	189b      	adds	r3, r3, r2
 8013768:	6163      	str	r3, [r4, #20]
 801376a:	e762      	b.n	8013632 <_svfiprintf_r+0x46>
 801376c:	4343      	muls	r3, r0
 801376e:	0035      	movs	r5, r6
 8013770:	2101      	movs	r1, #1
 8013772:	189b      	adds	r3, r3, r2
 8013774:	e7a4      	b.n	80136c0 <_svfiprintf_r+0xd4>
 8013776:	2300      	movs	r3, #0
 8013778:	200a      	movs	r0, #10
 801377a:	0019      	movs	r1, r3
 801377c:	3501      	adds	r5, #1
 801377e:	6063      	str	r3, [r4, #4]
 8013780:	782a      	ldrb	r2, [r5, #0]
 8013782:	1c6e      	adds	r6, r5, #1
 8013784:	3a30      	subs	r2, #48	@ 0x30
 8013786:	2a09      	cmp	r2, #9
 8013788:	d903      	bls.n	8013792 <_svfiprintf_r+0x1a6>
 801378a:	2b00      	cmp	r3, #0
 801378c:	d0c8      	beq.n	8013720 <_svfiprintf_r+0x134>
 801378e:	9109      	str	r1, [sp, #36]	@ 0x24
 8013790:	e7c6      	b.n	8013720 <_svfiprintf_r+0x134>
 8013792:	4341      	muls	r1, r0
 8013794:	0035      	movs	r5, r6
 8013796:	2301      	movs	r3, #1
 8013798:	1889      	adds	r1, r1, r2
 801379a:	e7f1      	b.n	8013780 <_svfiprintf_r+0x194>
 801379c:	aa07      	add	r2, sp, #28
 801379e:	9200      	str	r2, [sp, #0]
 80137a0:	0021      	movs	r1, r4
 80137a2:	003a      	movs	r2, r7
 80137a4:	4b0f      	ldr	r3, [pc, #60]	@ (80137e4 <_svfiprintf_r+0x1f8>)
 80137a6:	9803      	ldr	r0, [sp, #12]
 80137a8:	f7fd fda4 	bl	80112f4 <_printf_float>
 80137ac:	9004      	str	r0, [sp, #16]
 80137ae:	9b04      	ldr	r3, [sp, #16]
 80137b0:	3301      	adds	r3, #1
 80137b2:	d1d6      	bne.n	8013762 <_svfiprintf_r+0x176>
 80137b4:	89bb      	ldrh	r3, [r7, #12]
 80137b6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80137b8:	065b      	lsls	r3, r3, #25
 80137ba:	d500      	bpl.n	80137be <_svfiprintf_r+0x1d2>
 80137bc:	e72c      	b.n	8013618 <_svfiprintf_r+0x2c>
 80137be:	b021      	add	sp, #132	@ 0x84
 80137c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137c2:	aa07      	add	r2, sp, #28
 80137c4:	9200      	str	r2, [sp, #0]
 80137c6:	0021      	movs	r1, r4
 80137c8:	003a      	movs	r2, r7
 80137ca:	4b06      	ldr	r3, [pc, #24]	@ (80137e4 <_svfiprintf_r+0x1f8>)
 80137cc:	9803      	ldr	r0, [sp, #12]
 80137ce:	f7fe f83f 	bl	8011850 <_printf_i>
 80137d2:	e7eb      	b.n	80137ac <_svfiprintf_r+0x1c0>
 80137d4:	080274a0 	.word	0x080274a0
 80137d8:	080274a6 	.word	0x080274a6
 80137dc:	080274aa 	.word	0x080274aa
 80137e0:	080112f5 	.word	0x080112f5
 80137e4:	0801352d 	.word	0x0801352d

080137e8 <__sfputc_r>:
 80137e8:	6893      	ldr	r3, [r2, #8]
 80137ea:	b510      	push	{r4, lr}
 80137ec:	3b01      	subs	r3, #1
 80137ee:	6093      	str	r3, [r2, #8]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	da04      	bge.n	80137fe <__sfputc_r+0x16>
 80137f4:	6994      	ldr	r4, [r2, #24]
 80137f6:	42a3      	cmp	r3, r4
 80137f8:	db07      	blt.n	801380a <__sfputc_r+0x22>
 80137fa:	290a      	cmp	r1, #10
 80137fc:	d005      	beq.n	801380a <__sfputc_r+0x22>
 80137fe:	6813      	ldr	r3, [r2, #0]
 8013800:	1c58      	adds	r0, r3, #1
 8013802:	6010      	str	r0, [r2, #0]
 8013804:	7019      	strb	r1, [r3, #0]
 8013806:	0008      	movs	r0, r1
 8013808:	bd10      	pop	{r4, pc}
 801380a:	f000 f9e2 	bl	8013bd2 <__swbuf_r>
 801380e:	0001      	movs	r1, r0
 8013810:	e7f9      	b.n	8013806 <__sfputc_r+0x1e>

08013812 <__sfputs_r>:
 8013812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013814:	0006      	movs	r6, r0
 8013816:	000f      	movs	r7, r1
 8013818:	0014      	movs	r4, r2
 801381a:	18d5      	adds	r5, r2, r3
 801381c:	42ac      	cmp	r4, r5
 801381e:	d101      	bne.n	8013824 <__sfputs_r+0x12>
 8013820:	2000      	movs	r0, #0
 8013822:	e007      	b.n	8013834 <__sfputs_r+0x22>
 8013824:	7821      	ldrb	r1, [r4, #0]
 8013826:	003a      	movs	r2, r7
 8013828:	0030      	movs	r0, r6
 801382a:	f7ff ffdd 	bl	80137e8 <__sfputc_r>
 801382e:	3401      	adds	r4, #1
 8013830:	1c43      	adds	r3, r0, #1
 8013832:	d1f3      	bne.n	801381c <__sfputs_r+0xa>
 8013834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013838 <_vfiprintf_r>:
 8013838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801383a:	b0a1      	sub	sp, #132	@ 0x84
 801383c:	000f      	movs	r7, r1
 801383e:	0015      	movs	r5, r2
 8013840:	001e      	movs	r6, r3
 8013842:	9003      	str	r0, [sp, #12]
 8013844:	2800      	cmp	r0, #0
 8013846:	d004      	beq.n	8013852 <_vfiprintf_r+0x1a>
 8013848:	6a03      	ldr	r3, [r0, #32]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d101      	bne.n	8013852 <_vfiprintf_r+0x1a>
 801384e:	f7fe f99d 	bl	8011b8c <__sinit>
 8013852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013854:	07db      	lsls	r3, r3, #31
 8013856:	d405      	bmi.n	8013864 <_vfiprintf_r+0x2c>
 8013858:	89bb      	ldrh	r3, [r7, #12]
 801385a:	059b      	lsls	r3, r3, #22
 801385c:	d402      	bmi.n	8013864 <_vfiprintf_r+0x2c>
 801385e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013860:	f7fe fb2b 	bl	8011eba <__retarget_lock_acquire_recursive>
 8013864:	89bb      	ldrh	r3, [r7, #12]
 8013866:	071b      	lsls	r3, r3, #28
 8013868:	d502      	bpl.n	8013870 <_vfiprintf_r+0x38>
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d113      	bne.n	8013898 <_vfiprintf_r+0x60>
 8013870:	0039      	movs	r1, r7
 8013872:	9803      	ldr	r0, [sp, #12]
 8013874:	f000 f9f0 	bl	8013c58 <__swsetup_r>
 8013878:	2800      	cmp	r0, #0
 801387a:	d00d      	beq.n	8013898 <_vfiprintf_r+0x60>
 801387c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801387e:	07db      	lsls	r3, r3, #31
 8013880:	d503      	bpl.n	801388a <_vfiprintf_r+0x52>
 8013882:	2001      	movs	r0, #1
 8013884:	4240      	negs	r0, r0
 8013886:	b021      	add	sp, #132	@ 0x84
 8013888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801388a:	89bb      	ldrh	r3, [r7, #12]
 801388c:	059b      	lsls	r3, r3, #22
 801388e:	d4f8      	bmi.n	8013882 <_vfiprintf_r+0x4a>
 8013890:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013892:	f7fe fb13 	bl	8011ebc <__retarget_lock_release_recursive>
 8013896:	e7f4      	b.n	8013882 <_vfiprintf_r+0x4a>
 8013898:	2300      	movs	r3, #0
 801389a:	ac08      	add	r4, sp, #32
 801389c:	6163      	str	r3, [r4, #20]
 801389e:	3320      	adds	r3, #32
 80138a0:	7663      	strb	r3, [r4, #25]
 80138a2:	3310      	adds	r3, #16
 80138a4:	76a3      	strb	r3, [r4, #26]
 80138a6:	9607      	str	r6, [sp, #28]
 80138a8:	002e      	movs	r6, r5
 80138aa:	7833      	ldrb	r3, [r6, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d001      	beq.n	80138b4 <_vfiprintf_r+0x7c>
 80138b0:	2b25      	cmp	r3, #37	@ 0x25
 80138b2:	d148      	bne.n	8013946 <_vfiprintf_r+0x10e>
 80138b4:	1b73      	subs	r3, r6, r5
 80138b6:	9305      	str	r3, [sp, #20]
 80138b8:	42ae      	cmp	r6, r5
 80138ba:	d00b      	beq.n	80138d4 <_vfiprintf_r+0x9c>
 80138bc:	002a      	movs	r2, r5
 80138be:	0039      	movs	r1, r7
 80138c0:	9803      	ldr	r0, [sp, #12]
 80138c2:	f7ff ffa6 	bl	8013812 <__sfputs_r>
 80138c6:	3001      	adds	r0, #1
 80138c8:	d100      	bne.n	80138cc <_vfiprintf_r+0x94>
 80138ca:	e0ae      	b.n	8013a2a <_vfiprintf_r+0x1f2>
 80138cc:	6963      	ldr	r3, [r4, #20]
 80138ce:	9a05      	ldr	r2, [sp, #20]
 80138d0:	189b      	adds	r3, r3, r2
 80138d2:	6163      	str	r3, [r4, #20]
 80138d4:	7833      	ldrb	r3, [r6, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d100      	bne.n	80138dc <_vfiprintf_r+0xa4>
 80138da:	e0a6      	b.n	8013a2a <_vfiprintf_r+0x1f2>
 80138dc:	2201      	movs	r2, #1
 80138de:	2300      	movs	r3, #0
 80138e0:	4252      	negs	r2, r2
 80138e2:	6062      	str	r2, [r4, #4]
 80138e4:	a904      	add	r1, sp, #16
 80138e6:	3254      	adds	r2, #84	@ 0x54
 80138e8:	1852      	adds	r2, r2, r1
 80138ea:	1c75      	adds	r5, r6, #1
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	60e3      	str	r3, [r4, #12]
 80138f0:	60a3      	str	r3, [r4, #8]
 80138f2:	7013      	strb	r3, [r2, #0]
 80138f4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80138f6:	4b59      	ldr	r3, [pc, #356]	@ (8013a5c <_vfiprintf_r+0x224>)
 80138f8:	2205      	movs	r2, #5
 80138fa:	0018      	movs	r0, r3
 80138fc:	7829      	ldrb	r1, [r5, #0]
 80138fe:	9305      	str	r3, [sp, #20]
 8013900:	f7fe fadd 	bl	8011ebe <memchr>
 8013904:	1c6e      	adds	r6, r5, #1
 8013906:	2800      	cmp	r0, #0
 8013908:	d11f      	bne.n	801394a <_vfiprintf_r+0x112>
 801390a:	6822      	ldr	r2, [r4, #0]
 801390c:	06d3      	lsls	r3, r2, #27
 801390e:	d504      	bpl.n	801391a <_vfiprintf_r+0xe2>
 8013910:	2353      	movs	r3, #83	@ 0x53
 8013912:	a904      	add	r1, sp, #16
 8013914:	185b      	adds	r3, r3, r1
 8013916:	2120      	movs	r1, #32
 8013918:	7019      	strb	r1, [r3, #0]
 801391a:	0713      	lsls	r3, r2, #28
 801391c:	d504      	bpl.n	8013928 <_vfiprintf_r+0xf0>
 801391e:	2353      	movs	r3, #83	@ 0x53
 8013920:	a904      	add	r1, sp, #16
 8013922:	185b      	adds	r3, r3, r1
 8013924:	212b      	movs	r1, #43	@ 0x2b
 8013926:	7019      	strb	r1, [r3, #0]
 8013928:	782b      	ldrb	r3, [r5, #0]
 801392a:	2b2a      	cmp	r3, #42	@ 0x2a
 801392c:	d016      	beq.n	801395c <_vfiprintf_r+0x124>
 801392e:	002e      	movs	r6, r5
 8013930:	2100      	movs	r1, #0
 8013932:	200a      	movs	r0, #10
 8013934:	68e3      	ldr	r3, [r4, #12]
 8013936:	7832      	ldrb	r2, [r6, #0]
 8013938:	1c75      	adds	r5, r6, #1
 801393a:	3a30      	subs	r2, #48	@ 0x30
 801393c:	2a09      	cmp	r2, #9
 801393e:	d950      	bls.n	80139e2 <_vfiprintf_r+0x1aa>
 8013940:	2900      	cmp	r1, #0
 8013942:	d111      	bne.n	8013968 <_vfiprintf_r+0x130>
 8013944:	e017      	b.n	8013976 <_vfiprintf_r+0x13e>
 8013946:	3601      	adds	r6, #1
 8013948:	e7af      	b.n	80138aa <_vfiprintf_r+0x72>
 801394a:	9b05      	ldr	r3, [sp, #20]
 801394c:	6822      	ldr	r2, [r4, #0]
 801394e:	1ac0      	subs	r0, r0, r3
 8013950:	2301      	movs	r3, #1
 8013952:	4083      	lsls	r3, r0
 8013954:	4313      	orrs	r3, r2
 8013956:	0035      	movs	r5, r6
 8013958:	6023      	str	r3, [r4, #0]
 801395a:	e7cc      	b.n	80138f6 <_vfiprintf_r+0xbe>
 801395c:	9b07      	ldr	r3, [sp, #28]
 801395e:	1d19      	adds	r1, r3, #4
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	9107      	str	r1, [sp, #28]
 8013964:	2b00      	cmp	r3, #0
 8013966:	db01      	blt.n	801396c <_vfiprintf_r+0x134>
 8013968:	930b      	str	r3, [sp, #44]	@ 0x2c
 801396a:	e004      	b.n	8013976 <_vfiprintf_r+0x13e>
 801396c:	425b      	negs	r3, r3
 801396e:	60e3      	str	r3, [r4, #12]
 8013970:	2302      	movs	r3, #2
 8013972:	4313      	orrs	r3, r2
 8013974:	6023      	str	r3, [r4, #0]
 8013976:	7833      	ldrb	r3, [r6, #0]
 8013978:	2b2e      	cmp	r3, #46	@ 0x2e
 801397a:	d10c      	bne.n	8013996 <_vfiprintf_r+0x15e>
 801397c:	7873      	ldrb	r3, [r6, #1]
 801397e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013980:	d134      	bne.n	80139ec <_vfiprintf_r+0x1b4>
 8013982:	9b07      	ldr	r3, [sp, #28]
 8013984:	3602      	adds	r6, #2
 8013986:	1d1a      	adds	r2, r3, #4
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	9207      	str	r2, [sp, #28]
 801398c:	2b00      	cmp	r3, #0
 801398e:	da01      	bge.n	8013994 <_vfiprintf_r+0x15c>
 8013990:	2301      	movs	r3, #1
 8013992:	425b      	negs	r3, r3
 8013994:	9309      	str	r3, [sp, #36]	@ 0x24
 8013996:	4d32      	ldr	r5, [pc, #200]	@ (8013a60 <_vfiprintf_r+0x228>)
 8013998:	2203      	movs	r2, #3
 801399a:	0028      	movs	r0, r5
 801399c:	7831      	ldrb	r1, [r6, #0]
 801399e:	f7fe fa8e 	bl	8011ebe <memchr>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d006      	beq.n	80139b4 <_vfiprintf_r+0x17c>
 80139a6:	2340      	movs	r3, #64	@ 0x40
 80139a8:	1b40      	subs	r0, r0, r5
 80139aa:	4083      	lsls	r3, r0
 80139ac:	6822      	ldr	r2, [r4, #0]
 80139ae:	3601      	adds	r6, #1
 80139b0:	4313      	orrs	r3, r2
 80139b2:	6023      	str	r3, [r4, #0]
 80139b4:	7831      	ldrb	r1, [r6, #0]
 80139b6:	2206      	movs	r2, #6
 80139b8:	482a      	ldr	r0, [pc, #168]	@ (8013a64 <_vfiprintf_r+0x22c>)
 80139ba:	1c75      	adds	r5, r6, #1
 80139bc:	7621      	strb	r1, [r4, #24]
 80139be:	f7fe fa7e 	bl	8011ebe <memchr>
 80139c2:	2800      	cmp	r0, #0
 80139c4:	d040      	beq.n	8013a48 <_vfiprintf_r+0x210>
 80139c6:	4b28      	ldr	r3, [pc, #160]	@ (8013a68 <_vfiprintf_r+0x230>)
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d122      	bne.n	8013a12 <_vfiprintf_r+0x1da>
 80139cc:	2207      	movs	r2, #7
 80139ce:	9b07      	ldr	r3, [sp, #28]
 80139d0:	3307      	adds	r3, #7
 80139d2:	4393      	bics	r3, r2
 80139d4:	3308      	adds	r3, #8
 80139d6:	9307      	str	r3, [sp, #28]
 80139d8:	6963      	ldr	r3, [r4, #20]
 80139da:	9a04      	ldr	r2, [sp, #16]
 80139dc:	189b      	adds	r3, r3, r2
 80139de:	6163      	str	r3, [r4, #20]
 80139e0:	e762      	b.n	80138a8 <_vfiprintf_r+0x70>
 80139e2:	4343      	muls	r3, r0
 80139e4:	002e      	movs	r6, r5
 80139e6:	2101      	movs	r1, #1
 80139e8:	189b      	adds	r3, r3, r2
 80139ea:	e7a4      	b.n	8013936 <_vfiprintf_r+0xfe>
 80139ec:	2300      	movs	r3, #0
 80139ee:	200a      	movs	r0, #10
 80139f0:	0019      	movs	r1, r3
 80139f2:	3601      	adds	r6, #1
 80139f4:	6063      	str	r3, [r4, #4]
 80139f6:	7832      	ldrb	r2, [r6, #0]
 80139f8:	1c75      	adds	r5, r6, #1
 80139fa:	3a30      	subs	r2, #48	@ 0x30
 80139fc:	2a09      	cmp	r2, #9
 80139fe:	d903      	bls.n	8013a08 <_vfiprintf_r+0x1d0>
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d0c8      	beq.n	8013996 <_vfiprintf_r+0x15e>
 8013a04:	9109      	str	r1, [sp, #36]	@ 0x24
 8013a06:	e7c6      	b.n	8013996 <_vfiprintf_r+0x15e>
 8013a08:	4341      	muls	r1, r0
 8013a0a:	002e      	movs	r6, r5
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	1889      	adds	r1, r1, r2
 8013a10:	e7f1      	b.n	80139f6 <_vfiprintf_r+0x1be>
 8013a12:	aa07      	add	r2, sp, #28
 8013a14:	9200      	str	r2, [sp, #0]
 8013a16:	0021      	movs	r1, r4
 8013a18:	003a      	movs	r2, r7
 8013a1a:	4b14      	ldr	r3, [pc, #80]	@ (8013a6c <_vfiprintf_r+0x234>)
 8013a1c:	9803      	ldr	r0, [sp, #12]
 8013a1e:	f7fd fc69 	bl	80112f4 <_printf_float>
 8013a22:	9004      	str	r0, [sp, #16]
 8013a24:	9b04      	ldr	r3, [sp, #16]
 8013a26:	3301      	adds	r3, #1
 8013a28:	d1d6      	bne.n	80139d8 <_vfiprintf_r+0x1a0>
 8013a2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a2c:	07db      	lsls	r3, r3, #31
 8013a2e:	d405      	bmi.n	8013a3c <_vfiprintf_r+0x204>
 8013a30:	89bb      	ldrh	r3, [r7, #12]
 8013a32:	059b      	lsls	r3, r3, #22
 8013a34:	d402      	bmi.n	8013a3c <_vfiprintf_r+0x204>
 8013a36:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013a38:	f7fe fa40 	bl	8011ebc <__retarget_lock_release_recursive>
 8013a3c:	89bb      	ldrh	r3, [r7, #12]
 8013a3e:	065b      	lsls	r3, r3, #25
 8013a40:	d500      	bpl.n	8013a44 <_vfiprintf_r+0x20c>
 8013a42:	e71e      	b.n	8013882 <_vfiprintf_r+0x4a>
 8013a44:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8013a46:	e71e      	b.n	8013886 <_vfiprintf_r+0x4e>
 8013a48:	aa07      	add	r2, sp, #28
 8013a4a:	9200      	str	r2, [sp, #0]
 8013a4c:	0021      	movs	r1, r4
 8013a4e:	003a      	movs	r2, r7
 8013a50:	4b06      	ldr	r3, [pc, #24]	@ (8013a6c <_vfiprintf_r+0x234>)
 8013a52:	9803      	ldr	r0, [sp, #12]
 8013a54:	f7fd fefc 	bl	8011850 <_printf_i>
 8013a58:	e7e3      	b.n	8013a22 <_vfiprintf_r+0x1ea>
 8013a5a:	46c0      	nop			@ (mov r8, r8)
 8013a5c:	080274a0 	.word	0x080274a0
 8013a60:	080274a6 	.word	0x080274a6
 8013a64:	080274aa 	.word	0x080274aa
 8013a68:	080112f5 	.word	0x080112f5
 8013a6c:	08013813 	.word	0x08013813

08013a70 <__sflush_r>:
 8013a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a72:	220c      	movs	r2, #12
 8013a74:	5e8b      	ldrsh	r3, [r1, r2]
 8013a76:	0005      	movs	r5, r0
 8013a78:	000c      	movs	r4, r1
 8013a7a:	071a      	lsls	r2, r3, #28
 8013a7c:	d456      	bmi.n	8013b2c <__sflush_r+0xbc>
 8013a7e:	684a      	ldr	r2, [r1, #4]
 8013a80:	2a00      	cmp	r2, #0
 8013a82:	dc02      	bgt.n	8013a8a <__sflush_r+0x1a>
 8013a84:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8013a86:	2a00      	cmp	r2, #0
 8013a88:	dd4e      	ble.n	8013b28 <__sflush_r+0xb8>
 8013a8a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013a8c:	2f00      	cmp	r7, #0
 8013a8e:	d04b      	beq.n	8013b28 <__sflush_r+0xb8>
 8013a90:	2200      	movs	r2, #0
 8013a92:	2080      	movs	r0, #128	@ 0x80
 8013a94:	682e      	ldr	r6, [r5, #0]
 8013a96:	602a      	str	r2, [r5, #0]
 8013a98:	001a      	movs	r2, r3
 8013a9a:	0140      	lsls	r0, r0, #5
 8013a9c:	6a21      	ldr	r1, [r4, #32]
 8013a9e:	4002      	ands	r2, r0
 8013aa0:	4203      	tst	r3, r0
 8013aa2:	d033      	beq.n	8013b0c <__sflush_r+0x9c>
 8013aa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	075b      	lsls	r3, r3, #29
 8013aaa:	d506      	bpl.n	8013aba <__sflush_r+0x4a>
 8013aac:	6863      	ldr	r3, [r4, #4]
 8013aae:	1ad2      	subs	r2, r2, r3
 8013ab0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d001      	beq.n	8013aba <__sflush_r+0x4a>
 8013ab6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ab8:	1ad2      	subs	r2, r2, r3
 8013aba:	2300      	movs	r3, #0
 8013abc:	0028      	movs	r0, r5
 8013abe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013ac0:	6a21      	ldr	r1, [r4, #32]
 8013ac2:	47b8      	blx	r7
 8013ac4:	89a2      	ldrh	r2, [r4, #12]
 8013ac6:	1c43      	adds	r3, r0, #1
 8013ac8:	d106      	bne.n	8013ad8 <__sflush_r+0x68>
 8013aca:	6829      	ldr	r1, [r5, #0]
 8013acc:	291d      	cmp	r1, #29
 8013ace:	d846      	bhi.n	8013b5e <__sflush_r+0xee>
 8013ad0:	4b29      	ldr	r3, [pc, #164]	@ (8013b78 <__sflush_r+0x108>)
 8013ad2:	410b      	asrs	r3, r1
 8013ad4:	07db      	lsls	r3, r3, #31
 8013ad6:	d442      	bmi.n	8013b5e <__sflush_r+0xee>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	6063      	str	r3, [r4, #4]
 8013adc:	6923      	ldr	r3, [r4, #16]
 8013ade:	6023      	str	r3, [r4, #0]
 8013ae0:	04d2      	lsls	r2, r2, #19
 8013ae2:	d505      	bpl.n	8013af0 <__sflush_r+0x80>
 8013ae4:	1c43      	adds	r3, r0, #1
 8013ae6:	d102      	bne.n	8013aee <__sflush_r+0x7e>
 8013ae8:	682b      	ldr	r3, [r5, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d100      	bne.n	8013af0 <__sflush_r+0x80>
 8013aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8013af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013af2:	602e      	str	r6, [r5, #0]
 8013af4:	2900      	cmp	r1, #0
 8013af6:	d017      	beq.n	8013b28 <__sflush_r+0xb8>
 8013af8:	0023      	movs	r3, r4
 8013afa:	3344      	adds	r3, #68	@ 0x44
 8013afc:	4299      	cmp	r1, r3
 8013afe:	d002      	beq.n	8013b06 <__sflush_r+0x96>
 8013b00:	0028      	movs	r0, r5
 8013b02:	f7ff f869 	bl	8012bd8 <_free_r>
 8013b06:	2300      	movs	r3, #0
 8013b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b0a:	e00d      	b.n	8013b28 <__sflush_r+0xb8>
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	0028      	movs	r0, r5
 8013b10:	47b8      	blx	r7
 8013b12:	0002      	movs	r2, r0
 8013b14:	1c43      	adds	r3, r0, #1
 8013b16:	d1c6      	bne.n	8013aa6 <__sflush_r+0x36>
 8013b18:	682b      	ldr	r3, [r5, #0]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d0c3      	beq.n	8013aa6 <__sflush_r+0x36>
 8013b1e:	2b1d      	cmp	r3, #29
 8013b20:	d001      	beq.n	8013b26 <__sflush_r+0xb6>
 8013b22:	2b16      	cmp	r3, #22
 8013b24:	d11a      	bne.n	8013b5c <__sflush_r+0xec>
 8013b26:	602e      	str	r6, [r5, #0]
 8013b28:	2000      	movs	r0, #0
 8013b2a:	e01e      	b.n	8013b6a <__sflush_r+0xfa>
 8013b2c:	690e      	ldr	r6, [r1, #16]
 8013b2e:	2e00      	cmp	r6, #0
 8013b30:	d0fa      	beq.n	8013b28 <__sflush_r+0xb8>
 8013b32:	680f      	ldr	r7, [r1, #0]
 8013b34:	600e      	str	r6, [r1, #0]
 8013b36:	1bba      	subs	r2, r7, r6
 8013b38:	9201      	str	r2, [sp, #4]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	079b      	lsls	r3, r3, #30
 8013b3e:	d100      	bne.n	8013b42 <__sflush_r+0xd2>
 8013b40:	694a      	ldr	r2, [r1, #20]
 8013b42:	60a2      	str	r2, [r4, #8]
 8013b44:	9b01      	ldr	r3, [sp, #4]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	ddee      	ble.n	8013b28 <__sflush_r+0xb8>
 8013b4a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013b4c:	0032      	movs	r2, r6
 8013b4e:	001f      	movs	r7, r3
 8013b50:	0028      	movs	r0, r5
 8013b52:	9b01      	ldr	r3, [sp, #4]
 8013b54:	6a21      	ldr	r1, [r4, #32]
 8013b56:	47b8      	blx	r7
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	dc07      	bgt.n	8013b6c <__sflush_r+0xfc>
 8013b5c:	89a2      	ldrh	r2, [r4, #12]
 8013b5e:	2340      	movs	r3, #64	@ 0x40
 8013b60:	2001      	movs	r0, #1
 8013b62:	4313      	orrs	r3, r2
 8013b64:	b21b      	sxth	r3, r3
 8013b66:	81a3      	strh	r3, [r4, #12]
 8013b68:	4240      	negs	r0, r0
 8013b6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013b6c:	9b01      	ldr	r3, [sp, #4]
 8013b6e:	1836      	adds	r6, r6, r0
 8013b70:	1a1b      	subs	r3, r3, r0
 8013b72:	9301      	str	r3, [sp, #4]
 8013b74:	e7e6      	b.n	8013b44 <__sflush_r+0xd4>
 8013b76:	46c0      	nop			@ (mov r8, r8)
 8013b78:	dfbffffe 	.word	0xdfbffffe

08013b7c <_fflush_r>:
 8013b7c:	690b      	ldr	r3, [r1, #16]
 8013b7e:	b570      	push	{r4, r5, r6, lr}
 8013b80:	0005      	movs	r5, r0
 8013b82:	000c      	movs	r4, r1
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d102      	bne.n	8013b8e <_fflush_r+0x12>
 8013b88:	2500      	movs	r5, #0
 8013b8a:	0028      	movs	r0, r5
 8013b8c:	bd70      	pop	{r4, r5, r6, pc}
 8013b8e:	2800      	cmp	r0, #0
 8013b90:	d004      	beq.n	8013b9c <_fflush_r+0x20>
 8013b92:	6a03      	ldr	r3, [r0, #32]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d101      	bne.n	8013b9c <_fflush_r+0x20>
 8013b98:	f7fd fff8 	bl	8011b8c <__sinit>
 8013b9c:	220c      	movs	r2, #12
 8013b9e:	5ea3      	ldrsh	r3, [r4, r2]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d0f1      	beq.n	8013b88 <_fflush_r+0xc>
 8013ba4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013ba6:	07d2      	lsls	r2, r2, #31
 8013ba8:	d404      	bmi.n	8013bb4 <_fflush_r+0x38>
 8013baa:	059b      	lsls	r3, r3, #22
 8013bac:	d402      	bmi.n	8013bb4 <_fflush_r+0x38>
 8013bae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bb0:	f7fe f983 	bl	8011eba <__retarget_lock_acquire_recursive>
 8013bb4:	0028      	movs	r0, r5
 8013bb6:	0021      	movs	r1, r4
 8013bb8:	f7ff ff5a 	bl	8013a70 <__sflush_r>
 8013bbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013bbe:	0005      	movs	r5, r0
 8013bc0:	07db      	lsls	r3, r3, #31
 8013bc2:	d4e2      	bmi.n	8013b8a <_fflush_r+0xe>
 8013bc4:	89a3      	ldrh	r3, [r4, #12]
 8013bc6:	059b      	lsls	r3, r3, #22
 8013bc8:	d4df      	bmi.n	8013b8a <_fflush_r+0xe>
 8013bca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bcc:	f7fe f976 	bl	8011ebc <__retarget_lock_release_recursive>
 8013bd0:	e7db      	b.n	8013b8a <_fflush_r+0xe>

08013bd2 <__swbuf_r>:
 8013bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bd4:	0006      	movs	r6, r0
 8013bd6:	000d      	movs	r5, r1
 8013bd8:	0014      	movs	r4, r2
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	d004      	beq.n	8013be8 <__swbuf_r+0x16>
 8013bde:	6a03      	ldr	r3, [r0, #32]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d101      	bne.n	8013be8 <__swbuf_r+0x16>
 8013be4:	f7fd ffd2 	bl	8011b8c <__sinit>
 8013be8:	69a3      	ldr	r3, [r4, #24]
 8013bea:	60a3      	str	r3, [r4, #8]
 8013bec:	89a3      	ldrh	r3, [r4, #12]
 8013bee:	071b      	lsls	r3, r3, #28
 8013bf0:	d502      	bpl.n	8013bf8 <__swbuf_r+0x26>
 8013bf2:	6923      	ldr	r3, [r4, #16]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d109      	bne.n	8013c0c <__swbuf_r+0x3a>
 8013bf8:	0021      	movs	r1, r4
 8013bfa:	0030      	movs	r0, r6
 8013bfc:	f000 f82c 	bl	8013c58 <__swsetup_r>
 8013c00:	2800      	cmp	r0, #0
 8013c02:	d003      	beq.n	8013c0c <__swbuf_r+0x3a>
 8013c04:	2501      	movs	r5, #1
 8013c06:	426d      	negs	r5, r5
 8013c08:	0028      	movs	r0, r5
 8013c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c0c:	6923      	ldr	r3, [r4, #16]
 8013c0e:	6820      	ldr	r0, [r4, #0]
 8013c10:	b2ef      	uxtb	r7, r5
 8013c12:	1ac0      	subs	r0, r0, r3
 8013c14:	6963      	ldr	r3, [r4, #20]
 8013c16:	b2ed      	uxtb	r5, r5
 8013c18:	4283      	cmp	r3, r0
 8013c1a:	dc05      	bgt.n	8013c28 <__swbuf_r+0x56>
 8013c1c:	0021      	movs	r1, r4
 8013c1e:	0030      	movs	r0, r6
 8013c20:	f7ff ffac 	bl	8013b7c <_fflush_r>
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d1ed      	bne.n	8013c04 <__swbuf_r+0x32>
 8013c28:	68a3      	ldr	r3, [r4, #8]
 8013c2a:	3001      	adds	r0, #1
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	60a3      	str	r3, [r4, #8]
 8013c30:	6823      	ldr	r3, [r4, #0]
 8013c32:	1c5a      	adds	r2, r3, #1
 8013c34:	6022      	str	r2, [r4, #0]
 8013c36:	701f      	strb	r7, [r3, #0]
 8013c38:	6963      	ldr	r3, [r4, #20]
 8013c3a:	4283      	cmp	r3, r0
 8013c3c:	d004      	beq.n	8013c48 <__swbuf_r+0x76>
 8013c3e:	89a3      	ldrh	r3, [r4, #12]
 8013c40:	07db      	lsls	r3, r3, #31
 8013c42:	d5e1      	bpl.n	8013c08 <__swbuf_r+0x36>
 8013c44:	2d0a      	cmp	r5, #10
 8013c46:	d1df      	bne.n	8013c08 <__swbuf_r+0x36>
 8013c48:	0021      	movs	r1, r4
 8013c4a:	0030      	movs	r0, r6
 8013c4c:	f7ff ff96 	bl	8013b7c <_fflush_r>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	d0d9      	beq.n	8013c08 <__swbuf_r+0x36>
 8013c54:	e7d6      	b.n	8013c04 <__swbuf_r+0x32>
	...

08013c58 <__swsetup_r>:
 8013c58:	4b2d      	ldr	r3, [pc, #180]	@ (8013d10 <__swsetup_r+0xb8>)
 8013c5a:	b570      	push	{r4, r5, r6, lr}
 8013c5c:	0005      	movs	r5, r0
 8013c5e:	6818      	ldr	r0, [r3, #0]
 8013c60:	000c      	movs	r4, r1
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d004      	beq.n	8013c70 <__swsetup_r+0x18>
 8013c66:	6a03      	ldr	r3, [r0, #32]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d101      	bne.n	8013c70 <__swsetup_r+0x18>
 8013c6c:	f7fd ff8e 	bl	8011b8c <__sinit>
 8013c70:	230c      	movs	r3, #12
 8013c72:	5ee2      	ldrsh	r2, [r4, r3]
 8013c74:	0713      	lsls	r3, r2, #28
 8013c76:	d423      	bmi.n	8013cc0 <__swsetup_r+0x68>
 8013c78:	06d3      	lsls	r3, r2, #27
 8013c7a:	d407      	bmi.n	8013c8c <__swsetup_r+0x34>
 8013c7c:	2309      	movs	r3, #9
 8013c7e:	602b      	str	r3, [r5, #0]
 8013c80:	2340      	movs	r3, #64	@ 0x40
 8013c82:	2001      	movs	r0, #1
 8013c84:	4313      	orrs	r3, r2
 8013c86:	81a3      	strh	r3, [r4, #12]
 8013c88:	4240      	negs	r0, r0
 8013c8a:	e03a      	b.n	8013d02 <__swsetup_r+0xaa>
 8013c8c:	0752      	lsls	r2, r2, #29
 8013c8e:	d513      	bpl.n	8013cb8 <__swsetup_r+0x60>
 8013c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013c92:	2900      	cmp	r1, #0
 8013c94:	d008      	beq.n	8013ca8 <__swsetup_r+0x50>
 8013c96:	0023      	movs	r3, r4
 8013c98:	3344      	adds	r3, #68	@ 0x44
 8013c9a:	4299      	cmp	r1, r3
 8013c9c:	d002      	beq.n	8013ca4 <__swsetup_r+0x4c>
 8013c9e:	0028      	movs	r0, r5
 8013ca0:	f7fe ff9a 	bl	8012bd8 <_free_r>
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	6363      	str	r3, [r4, #52]	@ 0x34
 8013ca8:	2224      	movs	r2, #36	@ 0x24
 8013caa:	89a3      	ldrh	r3, [r4, #12]
 8013cac:	4393      	bics	r3, r2
 8013cae:	81a3      	strh	r3, [r4, #12]
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	6063      	str	r3, [r4, #4]
 8013cb4:	6923      	ldr	r3, [r4, #16]
 8013cb6:	6023      	str	r3, [r4, #0]
 8013cb8:	2308      	movs	r3, #8
 8013cba:	89a2      	ldrh	r2, [r4, #12]
 8013cbc:	4313      	orrs	r3, r2
 8013cbe:	81a3      	strh	r3, [r4, #12]
 8013cc0:	6923      	ldr	r3, [r4, #16]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d10b      	bne.n	8013cde <__swsetup_r+0x86>
 8013cc6:	21a0      	movs	r1, #160	@ 0xa0
 8013cc8:	2280      	movs	r2, #128	@ 0x80
 8013cca:	89a3      	ldrh	r3, [r4, #12]
 8013ccc:	0089      	lsls	r1, r1, #2
 8013cce:	0092      	lsls	r2, r2, #2
 8013cd0:	400b      	ands	r3, r1
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	d003      	beq.n	8013cde <__swsetup_r+0x86>
 8013cd6:	0021      	movs	r1, r4
 8013cd8:	0028      	movs	r0, r5
 8013cda:	f000 f91f 	bl	8013f1c <__smakebuf_r>
 8013cde:	230c      	movs	r3, #12
 8013ce0:	5ee2      	ldrsh	r2, [r4, r3]
 8013ce2:	2101      	movs	r1, #1
 8013ce4:	0013      	movs	r3, r2
 8013ce6:	400b      	ands	r3, r1
 8013ce8:	420a      	tst	r2, r1
 8013cea:	d00b      	beq.n	8013d04 <__swsetup_r+0xac>
 8013cec:	2300      	movs	r3, #0
 8013cee:	60a3      	str	r3, [r4, #8]
 8013cf0:	6963      	ldr	r3, [r4, #20]
 8013cf2:	425b      	negs	r3, r3
 8013cf4:	61a3      	str	r3, [r4, #24]
 8013cf6:	2000      	movs	r0, #0
 8013cf8:	6923      	ldr	r3, [r4, #16]
 8013cfa:	4283      	cmp	r3, r0
 8013cfc:	d101      	bne.n	8013d02 <__swsetup_r+0xaa>
 8013cfe:	0613      	lsls	r3, r2, #24
 8013d00:	d4be      	bmi.n	8013c80 <__swsetup_r+0x28>
 8013d02:	bd70      	pop	{r4, r5, r6, pc}
 8013d04:	0791      	lsls	r1, r2, #30
 8013d06:	d400      	bmi.n	8013d0a <__swsetup_r+0xb2>
 8013d08:	6963      	ldr	r3, [r4, #20]
 8013d0a:	60a3      	str	r3, [r4, #8]
 8013d0c:	e7f3      	b.n	8013cf6 <__swsetup_r+0x9e>
 8013d0e:	46c0      	nop			@ (mov r8, r8)
 8013d10:	20000158 	.word	0x20000158

08013d14 <memmove>:
 8013d14:	b510      	push	{r4, lr}
 8013d16:	4288      	cmp	r0, r1
 8013d18:	d806      	bhi.n	8013d28 <memmove+0x14>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d008      	beq.n	8013d32 <memmove+0x1e>
 8013d20:	5ccc      	ldrb	r4, [r1, r3]
 8013d22:	54c4      	strb	r4, [r0, r3]
 8013d24:	3301      	adds	r3, #1
 8013d26:	e7f9      	b.n	8013d1c <memmove+0x8>
 8013d28:	188b      	adds	r3, r1, r2
 8013d2a:	4298      	cmp	r0, r3
 8013d2c:	d2f5      	bcs.n	8013d1a <memmove+0x6>
 8013d2e:	3a01      	subs	r2, #1
 8013d30:	d200      	bcs.n	8013d34 <memmove+0x20>
 8013d32:	bd10      	pop	{r4, pc}
 8013d34:	5c8b      	ldrb	r3, [r1, r2]
 8013d36:	5483      	strb	r3, [r0, r2]
 8013d38:	e7f9      	b.n	8013d2e <memmove+0x1a>
	...

08013d3c <_sbrk_r>:
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	b570      	push	{r4, r5, r6, lr}
 8013d40:	4d06      	ldr	r5, [pc, #24]	@ (8013d5c <_sbrk_r+0x20>)
 8013d42:	0004      	movs	r4, r0
 8013d44:	0008      	movs	r0, r1
 8013d46:	602b      	str	r3, [r5, #0]
 8013d48:	f7f4 f99e 	bl	8008088 <_sbrk>
 8013d4c:	1c43      	adds	r3, r0, #1
 8013d4e:	d103      	bne.n	8013d58 <_sbrk_r+0x1c>
 8013d50:	682b      	ldr	r3, [r5, #0]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d000      	beq.n	8013d58 <_sbrk_r+0x1c>
 8013d56:	6023      	str	r3, [r4, #0]
 8013d58:	bd70      	pop	{r4, r5, r6, pc}
 8013d5a:	46c0      	nop			@ (mov r8, r8)
 8013d5c:	20003758 	.word	0x20003758

08013d60 <memcpy>:
 8013d60:	2300      	movs	r3, #0
 8013d62:	b510      	push	{r4, lr}
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d100      	bne.n	8013d6a <memcpy+0xa>
 8013d68:	bd10      	pop	{r4, pc}
 8013d6a:	5ccc      	ldrb	r4, [r1, r3]
 8013d6c:	54c4      	strb	r4, [r0, r3]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	e7f8      	b.n	8013d64 <memcpy+0x4>
	...

08013d74 <__assert_func>:
 8013d74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013d76:	0014      	movs	r4, r2
 8013d78:	001a      	movs	r2, r3
 8013d7a:	4b09      	ldr	r3, [pc, #36]	@ (8013da0 <__assert_func+0x2c>)
 8013d7c:	0005      	movs	r5, r0
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	000e      	movs	r6, r1
 8013d82:	68d8      	ldr	r0, [r3, #12]
 8013d84:	4b07      	ldr	r3, [pc, #28]	@ (8013da4 <__assert_func+0x30>)
 8013d86:	2c00      	cmp	r4, #0
 8013d88:	d101      	bne.n	8013d8e <__assert_func+0x1a>
 8013d8a:	4b07      	ldr	r3, [pc, #28]	@ (8013da8 <__assert_func+0x34>)
 8013d8c:	001c      	movs	r4, r3
 8013d8e:	4907      	ldr	r1, [pc, #28]	@ (8013dac <__assert_func+0x38>)
 8013d90:	9301      	str	r3, [sp, #4]
 8013d92:	9402      	str	r4, [sp, #8]
 8013d94:	002b      	movs	r3, r5
 8013d96:	9600      	str	r6, [sp, #0]
 8013d98:	f000 f886 	bl	8013ea8 <fiprintf>
 8013d9c:	f000 f924 	bl	8013fe8 <abort>
 8013da0:	20000158 	.word	0x20000158
 8013da4:	080274bb 	.word	0x080274bb
 8013da8:	080274f6 	.word	0x080274f6
 8013dac:	080274c8 	.word	0x080274c8

08013db0 <_calloc_r>:
 8013db0:	b570      	push	{r4, r5, r6, lr}
 8013db2:	0c0b      	lsrs	r3, r1, #16
 8013db4:	0c15      	lsrs	r5, r2, #16
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d11e      	bne.n	8013df8 <_calloc_r+0x48>
 8013dba:	2d00      	cmp	r5, #0
 8013dbc:	d10c      	bne.n	8013dd8 <_calloc_r+0x28>
 8013dbe:	b289      	uxth	r1, r1
 8013dc0:	b294      	uxth	r4, r2
 8013dc2:	434c      	muls	r4, r1
 8013dc4:	0021      	movs	r1, r4
 8013dc6:	f7fe ff7d 	bl	8012cc4 <_malloc_r>
 8013dca:	1e05      	subs	r5, r0, #0
 8013dcc:	d01a      	beq.n	8013e04 <_calloc_r+0x54>
 8013dce:	0022      	movs	r2, r4
 8013dd0:	2100      	movs	r1, #0
 8013dd2:	f7fd ffc3 	bl	8011d5c <memset>
 8013dd6:	e016      	b.n	8013e06 <_calloc_r+0x56>
 8013dd8:	1c2b      	adds	r3, r5, #0
 8013dda:	1c0c      	adds	r4, r1, #0
 8013ddc:	b289      	uxth	r1, r1
 8013dde:	b292      	uxth	r2, r2
 8013de0:	434a      	muls	r2, r1
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	b2a1      	uxth	r1, r4
 8013de6:	4359      	muls	r1, r3
 8013de8:	0c14      	lsrs	r4, r2, #16
 8013dea:	190c      	adds	r4, r1, r4
 8013dec:	0c23      	lsrs	r3, r4, #16
 8013dee:	d107      	bne.n	8013e00 <_calloc_r+0x50>
 8013df0:	0424      	lsls	r4, r4, #16
 8013df2:	b292      	uxth	r2, r2
 8013df4:	4314      	orrs	r4, r2
 8013df6:	e7e5      	b.n	8013dc4 <_calloc_r+0x14>
 8013df8:	2d00      	cmp	r5, #0
 8013dfa:	d101      	bne.n	8013e00 <_calloc_r+0x50>
 8013dfc:	1c14      	adds	r4, r2, #0
 8013dfe:	e7ed      	b.n	8013ddc <_calloc_r+0x2c>
 8013e00:	230c      	movs	r3, #12
 8013e02:	6003      	str	r3, [r0, #0]
 8013e04:	2500      	movs	r5, #0
 8013e06:	0028      	movs	r0, r5
 8013e08:	bd70      	pop	{r4, r5, r6, pc}

08013e0a <__ascii_mbtowc>:
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	2900      	cmp	r1, #0
 8013e0e:	d100      	bne.n	8013e12 <__ascii_mbtowc+0x8>
 8013e10:	a901      	add	r1, sp, #4
 8013e12:	1e10      	subs	r0, r2, #0
 8013e14:	d006      	beq.n	8013e24 <__ascii_mbtowc+0x1a>
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d006      	beq.n	8013e28 <__ascii_mbtowc+0x1e>
 8013e1a:	7813      	ldrb	r3, [r2, #0]
 8013e1c:	600b      	str	r3, [r1, #0]
 8013e1e:	7810      	ldrb	r0, [r2, #0]
 8013e20:	1e43      	subs	r3, r0, #1
 8013e22:	4198      	sbcs	r0, r3
 8013e24:	b002      	add	sp, #8
 8013e26:	4770      	bx	lr
 8013e28:	2002      	movs	r0, #2
 8013e2a:	4240      	negs	r0, r0
 8013e2c:	e7fa      	b.n	8013e24 <__ascii_mbtowc+0x1a>

08013e2e <_realloc_r>:
 8013e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e30:	0006      	movs	r6, r0
 8013e32:	000c      	movs	r4, r1
 8013e34:	0015      	movs	r5, r2
 8013e36:	2900      	cmp	r1, #0
 8013e38:	d105      	bne.n	8013e46 <_realloc_r+0x18>
 8013e3a:	0011      	movs	r1, r2
 8013e3c:	f7fe ff42 	bl	8012cc4 <_malloc_r>
 8013e40:	0004      	movs	r4, r0
 8013e42:	0020      	movs	r0, r4
 8013e44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013e46:	2a00      	cmp	r2, #0
 8013e48:	d103      	bne.n	8013e52 <_realloc_r+0x24>
 8013e4a:	f7fe fec5 	bl	8012bd8 <_free_r>
 8013e4e:	2400      	movs	r4, #0
 8013e50:	e7f7      	b.n	8013e42 <_realloc_r+0x14>
 8013e52:	f000 f8d0 	bl	8013ff6 <_malloc_usable_size_r>
 8013e56:	0007      	movs	r7, r0
 8013e58:	4285      	cmp	r5, r0
 8013e5a:	d802      	bhi.n	8013e62 <_realloc_r+0x34>
 8013e5c:	0843      	lsrs	r3, r0, #1
 8013e5e:	42ab      	cmp	r3, r5
 8013e60:	d3ef      	bcc.n	8013e42 <_realloc_r+0x14>
 8013e62:	0029      	movs	r1, r5
 8013e64:	0030      	movs	r0, r6
 8013e66:	f7fe ff2d 	bl	8012cc4 <_malloc_r>
 8013e6a:	9001      	str	r0, [sp, #4]
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	d0ee      	beq.n	8013e4e <_realloc_r+0x20>
 8013e70:	002a      	movs	r2, r5
 8013e72:	42bd      	cmp	r5, r7
 8013e74:	d900      	bls.n	8013e78 <_realloc_r+0x4a>
 8013e76:	003a      	movs	r2, r7
 8013e78:	0021      	movs	r1, r4
 8013e7a:	9801      	ldr	r0, [sp, #4]
 8013e7c:	f7ff ff70 	bl	8013d60 <memcpy>
 8013e80:	0021      	movs	r1, r4
 8013e82:	0030      	movs	r0, r6
 8013e84:	f7fe fea8 	bl	8012bd8 <_free_r>
 8013e88:	9c01      	ldr	r4, [sp, #4]
 8013e8a:	e7da      	b.n	8013e42 <_realloc_r+0x14>

08013e8c <__ascii_wctomb>:
 8013e8c:	0003      	movs	r3, r0
 8013e8e:	1e08      	subs	r0, r1, #0
 8013e90:	d005      	beq.n	8013e9e <__ascii_wctomb+0x12>
 8013e92:	2aff      	cmp	r2, #255	@ 0xff
 8013e94:	d904      	bls.n	8013ea0 <__ascii_wctomb+0x14>
 8013e96:	228a      	movs	r2, #138	@ 0x8a
 8013e98:	2001      	movs	r0, #1
 8013e9a:	601a      	str	r2, [r3, #0]
 8013e9c:	4240      	negs	r0, r0
 8013e9e:	4770      	bx	lr
 8013ea0:	2001      	movs	r0, #1
 8013ea2:	700a      	strb	r2, [r1, #0]
 8013ea4:	e7fb      	b.n	8013e9e <__ascii_wctomb+0x12>
	...

08013ea8 <fiprintf>:
 8013ea8:	b40e      	push	{r1, r2, r3}
 8013eaa:	b517      	push	{r0, r1, r2, r4, lr}
 8013eac:	4c05      	ldr	r4, [pc, #20]	@ (8013ec4 <fiprintf+0x1c>)
 8013eae:	ab05      	add	r3, sp, #20
 8013eb0:	cb04      	ldmia	r3!, {r2}
 8013eb2:	0001      	movs	r1, r0
 8013eb4:	6820      	ldr	r0, [r4, #0]
 8013eb6:	9301      	str	r3, [sp, #4]
 8013eb8:	f7ff fcbe 	bl	8013838 <_vfiprintf_r>
 8013ebc:	bc1e      	pop	{r1, r2, r3, r4}
 8013ebe:	bc08      	pop	{r3}
 8013ec0:	b003      	add	sp, #12
 8013ec2:	4718      	bx	r3
 8013ec4:	20000158 	.word	0x20000158

08013ec8 <__swhatbuf_r>:
 8013ec8:	b570      	push	{r4, r5, r6, lr}
 8013eca:	000e      	movs	r6, r1
 8013ecc:	001d      	movs	r5, r3
 8013ece:	230e      	movs	r3, #14
 8013ed0:	5ec9      	ldrsh	r1, [r1, r3]
 8013ed2:	0014      	movs	r4, r2
 8013ed4:	b096      	sub	sp, #88	@ 0x58
 8013ed6:	2900      	cmp	r1, #0
 8013ed8:	da0c      	bge.n	8013ef4 <__swhatbuf_r+0x2c>
 8013eda:	89b2      	ldrh	r2, [r6, #12]
 8013edc:	2380      	movs	r3, #128	@ 0x80
 8013ede:	0011      	movs	r1, r2
 8013ee0:	4019      	ands	r1, r3
 8013ee2:	421a      	tst	r2, r3
 8013ee4:	d114      	bne.n	8013f10 <__swhatbuf_r+0x48>
 8013ee6:	2380      	movs	r3, #128	@ 0x80
 8013ee8:	00db      	lsls	r3, r3, #3
 8013eea:	2000      	movs	r0, #0
 8013eec:	6029      	str	r1, [r5, #0]
 8013eee:	6023      	str	r3, [r4, #0]
 8013ef0:	b016      	add	sp, #88	@ 0x58
 8013ef2:	bd70      	pop	{r4, r5, r6, pc}
 8013ef4:	466a      	mov	r2, sp
 8013ef6:	f000 f853 	bl	8013fa0 <_fstat_r>
 8013efa:	2800      	cmp	r0, #0
 8013efc:	dbed      	blt.n	8013eda <__swhatbuf_r+0x12>
 8013efe:	23f0      	movs	r3, #240	@ 0xf0
 8013f00:	9901      	ldr	r1, [sp, #4]
 8013f02:	021b      	lsls	r3, r3, #8
 8013f04:	4019      	ands	r1, r3
 8013f06:	4b04      	ldr	r3, [pc, #16]	@ (8013f18 <__swhatbuf_r+0x50>)
 8013f08:	18c9      	adds	r1, r1, r3
 8013f0a:	424b      	negs	r3, r1
 8013f0c:	4159      	adcs	r1, r3
 8013f0e:	e7ea      	b.n	8013ee6 <__swhatbuf_r+0x1e>
 8013f10:	2100      	movs	r1, #0
 8013f12:	2340      	movs	r3, #64	@ 0x40
 8013f14:	e7e9      	b.n	8013eea <__swhatbuf_r+0x22>
 8013f16:	46c0      	nop			@ (mov r8, r8)
 8013f18:	ffffe000 	.word	0xffffe000

08013f1c <__smakebuf_r>:
 8013f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f1e:	2602      	movs	r6, #2
 8013f20:	898b      	ldrh	r3, [r1, #12]
 8013f22:	0005      	movs	r5, r0
 8013f24:	000c      	movs	r4, r1
 8013f26:	b085      	sub	sp, #20
 8013f28:	4233      	tst	r3, r6
 8013f2a:	d007      	beq.n	8013f3c <__smakebuf_r+0x20>
 8013f2c:	0023      	movs	r3, r4
 8013f2e:	3347      	adds	r3, #71	@ 0x47
 8013f30:	6023      	str	r3, [r4, #0]
 8013f32:	6123      	str	r3, [r4, #16]
 8013f34:	2301      	movs	r3, #1
 8013f36:	6163      	str	r3, [r4, #20]
 8013f38:	b005      	add	sp, #20
 8013f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f3c:	ab03      	add	r3, sp, #12
 8013f3e:	aa02      	add	r2, sp, #8
 8013f40:	f7ff ffc2 	bl	8013ec8 <__swhatbuf_r>
 8013f44:	9f02      	ldr	r7, [sp, #8]
 8013f46:	9001      	str	r0, [sp, #4]
 8013f48:	0039      	movs	r1, r7
 8013f4a:	0028      	movs	r0, r5
 8013f4c:	f7fe feba 	bl	8012cc4 <_malloc_r>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	d108      	bne.n	8013f66 <__smakebuf_r+0x4a>
 8013f54:	220c      	movs	r2, #12
 8013f56:	5ea3      	ldrsh	r3, [r4, r2]
 8013f58:	059a      	lsls	r2, r3, #22
 8013f5a:	d4ed      	bmi.n	8013f38 <__smakebuf_r+0x1c>
 8013f5c:	2203      	movs	r2, #3
 8013f5e:	4393      	bics	r3, r2
 8013f60:	431e      	orrs	r6, r3
 8013f62:	81a6      	strh	r6, [r4, #12]
 8013f64:	e7e2      	b.n	8013f2c <__smakebuf_r+0x10>
 8013f66:	2380      	movs	r3, #128	@ 0x80
 8013f68:	89a2      	ldrh	r2, [r4, #12]
 8013f6a:	6020      	str	r0, [r4, #0]
 8013f6c:	4313      	orrs	r3, r2
 8013f6e:	81a3      	strh	r3, [r4, #12]
 8013f70:	9b03      	ldr	r3, [sp, #12]
 8013f72:	6120      	str	r0, [r4, #16]
 8013f74:	6167      	str	r7, [r4, #20]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d00c      	beq.n	8013f94 <__smakebuf_r+0x78>
 8013f7a:	0028      	movs	r0, r5
 8013f7c:	230e      	movs	r3, #14
 8013f7e:	5ee1      	ldrsh	r1, [r4, r3]
 8013f80:	f000 f820 	bl	8013fc4 <_isatty_r>
 8013f84:	2800      	cmp	r0, #0
 8013f86:	d005      	beq.n	8013f94 <__smakebuf_r+0x78>
 8013f88:	2303      	movs	r3, #3
 8013f8a:	89a2      	ldrh	r2, [r4, #12]
 8013f8c:	439a      	bics	r2, r3
 8013f8e:	3b02      	subs	r3, #2
 8013f90:	4313      	orrs	r3, r2
 8013f92:	81a3      	strh	r3, [r4, #12]
 8013f94:	89a3      	ldrh	r3, [r4, #12]
 8013f96:	9a01      	ldr	r2, [sp, #4]
 8013f98:	4313      	orrs	r3, r2
 8013f9a:	81a3      	strh	r3, [r4, #12]
 8013f9c:	e7cc      	b.n	8013f38 <__smakebuf_r+0x1c>
	...

08013fa0 <_fstat_r>:
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	b570      	push	{r4, r5, r6, lr}
 8013fa4:	4d06      	ldr	r5, [pc, #24]	@ (8013fc0 <_fstat_r+0x20>)
 8013fa6:	0004      	movs	r4, r0
 8013fa8:	0008      	movs	r0, r1
 8013faa:	0011      	movs	r1, r2
 8013fac:	602b      	str	r3, [r5, #0]
 8013fae:	f7f4 f849 	bl	8008044 <_fstat>
 8013fb2:	1c43      	adds	r3, r0, #1
 8013fb4:	d103      	bne.n	8013fbe <_fstat_r+0x1e>
 8013fb6:	682b      	ldr	r3, [r5, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d000      	beq.n	8013fbe <_fstat_r+0x1e>
 8013fbc:	6023      	str	r3, [r4, #0]
 8013fbe:	bd70      	pop	{r4, r5, r6, pc}
 8013fc0:	20003758 	.word	0x20003758

08013fc4 <_isatty_r>:
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	b570      	push	{r4, r5, r6, lr}
 8013fc8:	4d06      	ldr	r5, [pc, #24]	@ (8013fe4 <_isatty_r+0x20>)
 8013fca:	0004      	movs	r4, r0
 8013fcc:	0008      	movs	r0, r1
 8013fce:	602b      	str	r3, [r5, #0]
 8013fd0:	f7f4 f846 	bl	8008060 <_isatty>
 8013fd4:	1c43      	adds	r3, r0, #1
 8013fd6:	d103      	bne.n	8013fe0 <_isatty_r+0x1c>
 8013fd8:	682b      	ldr	r3, [r5, #0]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d000      	beq.n	8013fe0 <_isatty_r+0x1c>
 8013fde:	6023      	str	r3, [r4, #0]
 8013fe0:	bd70      	pop	{r4, r5, r6, pc}
 8013fe2:	46c0      	nop			@ (mov r8, r8)
 8013fe4:	20003758 	.word	0x20003758

08013fe8 <abort>:
 8013fe8:	2006      	movs	r0, #6
 8013fea:	b510      	push	{r4, lr}
 8013fec:	f000 f834 	bl	8014058 <raise>
 8013ff0:	2001      	movs	r0, #1
 8013ff2:	f7f3 fff3 	bl	8007fdc <_exit>

08013ff6 <_malloc_usable_size_r>:
 8013ff6:	1f0b      	subs	r3, r1, #4
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	1f18      	subs	r0, r3, #4
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	da01      	bge.n	8014004 <_malloc_usable_size_r+0xe>
 8014000:	580b      	ldr	r3, [r1, r0]
 8014002:	18c0      	adds	r0, r0, r3
 8014004:	4770      	bx	lr

08014006 <_raise_r>:
 8014006:	b570      	push	{r4, r5, r6, lr}
 8014008:	0004      	movs	r4, r0
 801400a:	000d      	movs	r5, r1
 801400c:	291f      	cmp	r1, #31
 801400e:	d904      	bls.n	801401a <_raise_r+0x14>
 8014010:	2316      	movs	r3, #22
 8014012:	6003      	str	r3, [r0, #0]
 8014014:	2001      	movs	r0, #1
 8014016:	4240      	negs	r0, r0
 8014018:	bd70      	pop	{r4, r5, r6, pc}
 801401a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801401c:	2b00      	cmp	r3, #0
 801401e:	d004      	beq.n	801402a <_raise_r+0x24>
 8014020:	008a      	lsls	r2, r1, #2
 8014022:	189b      	adds	r3, r3, r2
 8014024:	681a      	ldr	r2, [r3, #0]
 8014026:	2a00      	cmp	r2, #0
 8014028:	d108      	bne.n	801403c <_raise_r+0x36>
 801402a:	0020      	movs	r0, r4
 801402c:	f000 f830 	bl	8014090 <_getpid_r>
 8014030:	002a      	movs	r2, r5
 8014032:	0001      	movs	r1, r0
 8014034:	0020      	movs	r0, r4
 8014036:	f000 f819 	bl	801406c <_kill_r>
 801403a:	e7ed      	b.n	8014018 <_raise_r+0x12>
 801403c:	2a01      	cmp	r2, #1
 801403e:	d009      	beq.n	8014054 <_raise_r+0x4e>
 8014040:	1c51      	adds	r1, r2, #1
 8014042:	d103      	bne.n	801404c <_raise_r+0x46>
 8014044:	2316      	movs	r3, #22
 8014046:	6003      	str	r3, [r0, #0]
 8014048:	2001      	movs	r0, #1
 801404a:	e7e5      	b.n	8014018 <_raise_r+0x12>
 801404c:	2100      	movs	r1, #0
 801404e:	0028      	movs	r0, r5
 8014050:	6019      	str	r1, [r3, #0]
 8014052:	4790      	blx	r2
 8014054:	2000      	movs	r0, #0
 8014056:	e7df      	b.n	8014018 <_raise_r+0x12>

08014058 <raise>:
 8014058:	b510      	push	{r4, lr}
 801405a:	4b03      	ldr	r3, [pc, #12]	@ (8014068 <raise+0x10>)
 801405c:	0001      	movs	r1, r0
 801405e:	6818      	ldr	r0, [r3, #0]
 8014060:	f7ff ffd1 	bl	8014006 <_raise_r>
 8014064:	bd10      	pop	{r4, pc}
 8014066:	46c0      	nop			@ (mov r8, r8)
 8014068:	20000158 	.word	0x20000158

0801406c <_kill_r>:
 801406c:	2300      	movs	r3, #0
 801406e:	b570      	push	{r4, r5, r6, lr}
 8014070:	4d06      	ldr	r5, [pc, #24]	@ (801408c <_kill_r+0x20>)
 8014072:	0004      	movs	r4, r0
 8014074:	0008      	movs	r0, r1
 8014076:	0011      	movs	r1, r2
 8014078:	602b      	str	r3, [r5, #0]
 801407a:	f7f3 ff9f 	bl	8007fbc <_kill>
 801407e:	1c43      	adds	r3, r0, #1
 8014080:	d103      	bne.n	801408a <_kill_r+0x1e>
 8014082:	682b      	ldr	r3, [r5, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d000      	beq.n	801408a <_kill_r+0x1e>
 8014088:	6023      	str	r3, [r4, #0]
 801408a:	bd70      	pop	{r4, r5, r6, pc}
 801408c:	20003758 	.word	0x20003758

08014090 <_getpid_r>:
 8014090:	b510      	push	{r4, lr}
 8014092:	f7f3 ff8d 	bl	8007fb0 <_getpid>
 8014096:	bd10      	pop	{r4, pc}

08014098 <log10>:
 8014098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409a:	0004      	movs	r4, r0
 801409c:	000d      	movs	r5, r1
 801409e:	f000 f8fd 	bl	801429c <__ieee754_log10>
 80140a2:	0022      	movs	r2, r4
 80140a4:	0006      	movs	r6, r0
 80140a6:	000f      	movs	r7, r1
 80140a8:	002b      	movs	r3, r5
 80140aa:	0020      	movs	r0, r4
 80140ac:	0029      	movs	r1, r5
 80140ae:	f7ef f8ed 	bl	800328c <__aeabi_dcmpun>
 80140b2:	2800      	cmp	r0, #0
 80140b4:	d115      	bne.n	80140e2 <log10+0x4a>
 80140b6:	2200      	movs	r2, #0
 80140b8:	2300      	movs	r3, #0
 80140ba:	0020      	movs	r0, r4
 80140bc:	0029      	movs	r1, r5
 80140be:	f7ec f9fd 	bl	80004bc <__aeabi_dcmple>
 80140c2:	2800      	cmp	r0, #0
 80140c4:	d00d      	beq.n	80140e2 <log10+0x4a>
 80140c6:	2200      	movs	r2, #0
 80140c8:	2300      	movs	r3, #0
 80140ca:	0020      	movs	r0, r4
 80140cc:	0029      	movs	r1, r5
 80140ce:	f7ec f9e5 	bl	800049c <__aeabi_dcmpeq>
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d008      	beq.n	80140e8 <log10+0x50>
 80140d6:	f7fd fec5 	bl	8011e64 <__errno>
 80140da:	2322      	movs	r3, #34	@ 0x22
 80140dc:	2600      	movs	r6, #0
 80140de:	4f07      	ldr	r7, [pc, #28]	@ (80140fc <log10+0x64>)
 80140e0:	6003      	str	r3, [r0, #0]
 80140e2:	0030      	movs	r0, r6
 80140e4:	0039      	movs	r1, r7
 80140e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e8:	f7fd febc 	bl	8011e64 <__errno>
 80140ec:	2321      	movs	r3, #33	@ 0x21
 80140ee:	6003      	str	r3, [r0, #0]
 80140f0:	4803      	ldr	r0, [pc, #12]	@ (8014100 <log10+0x68>)
 80140f2:	f000 f84b 	bl	801418c <nan>
 80140f6:	0006      	movs	r6, r0
 80140f8:	000f      	movs	r7, r1
 80140fa:	e7f2      	b.n	80140e2 <log10+0x4a>
 80140fc:	fff00000 	.word	0xfff00000
 8014100:	080274f6 	.word	0x080274f6

08014104 <expf>:
 8014104:	b570      	push	{r4, r5, r6, lr}
 8014106:	1c04      	adds	r4, r0, #0
 8014108:	f000 f942 	bl	8014390 <__ieee754_expf>
 801410c:	1c05      	adds	r5, r0, #0
 801410e:	1c20      	adds	r0, r4, #0
 8014110:	f000 f842 	bl	8014198 <finitef>
 8014114:	2800      	cmp	r0, #0
 8014116:	d00b      	beq.n	8014130 <expf+0x2c>
 8014118:	490c      	ldr	r1, [pc, #48]	@ (801414c <expf+0x48>)
 801411a:	1c20      	adds	r0, r4, #0
 801411c:	f7ec fa12 	bl	8000544 <__aeabi_fcmpgt>
 8014120:	2800      	cmp	r0, #0
 8014122:	d007      	beq.n	8014134 <expf+0x30>
 8014124:	f7fd fe9e 	bl	8011e64 <__errno>
 8014128:	25ff      	movs	r5, #255	@ 0xff
 801412a:	2322      	movs	r3, #34	@ 0x22
 801412c:	05ed      	lsls	r5, r5, #23
 801412e:	6003      	str	r3, [r0, #0]
 8014130:	1c28      	adds	r0, r5, #0
 8014132:	bd70      	pop	{r4, r5, r6, pc}
 8014134:	4906      	ldr	r1, [pc, #24]	@ (8014150 <expf+0x4c>)
 8014136:	1c20      	adds	r0, r4, #0
 8014138:	f7ec f9f0 	bl	800051c <__aeabi_fcmplt>
 801413c:	2800      	cmp	r0, #0
 801413e:	d0f7      	beq.n	8014130 <expf+0x2c>
 8014140:	f7fd fe90 	bl	8011e64 <__errno>
 8014144:	2322      	movs	r3, #34	@ 0x22
 8014146:	2500      	movs	r5, #0
 8014148:	6003      	str	r3, [r0, #0]
 801414a:	e7f1      	b.n	8014130 <expf+0x2c>
 801414c:	42b17217 	.word	0x42b17217
 8014150:	c2cff1b5 	.word	0xc2cff1b5

08014154 <sqrtf>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	1c05      	adds	r5, r0, #0
 8014158:	f000 f828 	bl	80141ac <__ieee754_sqrtf>
 801415c:	1c29      	adds	r1, r5, #0
 801415e:	1c04      	adds	r4, r0, #0
 8014160:	1c28      	adds	r0, r5, #0
 8014162:	f7ed f9c3 	bl	80014ec <__aeabi_fcmpun>
 8014166:	2800      	cmp	r0, #0
 8014168:	d10e      	bne.n	8014188 <sqrtf+0x34>
 801416a:	2100      	movs	r1, #0
 801416c:	1c28      	adds	r0, r5, #0
 801416e:	f7ec f9d5 	bl	800051c <__aeabi_fcmplt>
 8014172:	2800      	cmp	r0, #0
 8014174:	d008      	beq.n	8014188 <sqrtf+0x34>
 8014176:	f7fd fe75 	bl	8011e64 <__errno>
 801417a:	2321      	movs	r3, #33	@ 0x21
 801417c:	2100      	movs	r1, #0
 801417e:	6003      	str	r3, [r0, #0]
 8014180:	1c08      	adds	r0, r1, #0
 8014182:	f7ec fceb 	bl	8000b5c <__aeabi_fdiv>
 8014186:	1c04      	adds	r4, r0, #0
 8014188:	1c20      	adds	r0, r4, #0
 801418a:	bd70      	pop	{r4, r5, r6, pc}

0801418c <nan>:
 801418c:	2000      	movs	r0, #0
 801418e:	4901      	ldr	r1, [pc, #4]	@ (8014194 <nan+0x8>)
 8014190:	4770      	bx	lr
 8014192:	46c0      	nop			@ (mov r8, r8)
 8014194:	7ff80000 	.word	0x7ff80000

08014198 <finitef>:
 8014198:	22ff      	movs	r2, #255	@ 0xff
 801419a:	0043      	lsls	r3, r0, #1
 801419c:	085b      	lsrs	r3, r3, #1
 801419e:	2001      	movs	r0, #1
 80141a0:	05d2      	lsls	r2, r2, #23
 80141a2:	4293      	cmp	r3, r2
 80141a4:	db00      	blt.n	80141a8 <finitef+0x10>
 80141a6:	2000      	movs	r0, #0
 80141a8:	4770      	bx	lr
	...

080141ac <__ieee754_sqrtf>:
 80141ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141ae:	0003      	movs	r3, r0
 80141b0:	0042      	lsls	r2, r0, #1
 80141b2:	1c04      	adds	r4, r0, #0
 80141b4:	20ff      	movs	r0, #255	@ 0xff
 80141b6:	0852      	lsrs	r2, r2, #1
 80141b8:	05c0      	lsls	r0, r0, #23
 80141ba:	4282      	cmp	r2, r0
 80141bc:	d30a      	bcc.n	80141d4 <__ieee754_sqrtf+0x28>
 80141be:	1c21      	adds	r1, r4, #0
 80141c0:	1c20      	adds	r0, r4, #0
 80141c2:	f7ec feb1 	bl	8000f28 <__aeabi_fmul>
 80141c6:	1c01      	adds	r1, r0, #0
 80141c8:	1c20      	adds	r0, r4, #0
 80141ca:	f7ec fb3d 	bl	8000848 <__aeabi_fadd>
 80141ce:	1c04      	adds	r4, r0, #0
 80141d0:	1c20      	adds	r0, r4, #0
 80141d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80141d4:	2a00      	cmp	r2, #0
 80141d6:	d0fb      	beq.n	80141d0 <__ieee754_sqrtf+0x24>
 80141d8:	2c00      	cmp	r4, #0
 80141da:	da07      	bge.n	80141ec <__ieee754_sqrtf+0x40>
 80141dc:	1c21      	adds	r1, r4, #0
 80141de:	1c20      	adds	r0, r4, #0
 80141e0:	f7ec ffe0 	bl	80011a4 <__aeabi_fsub>
 80141e4:	1c01      	adds	r1, r0, #0
 80141e6:	f7ec fcb9 	bl	8000b5c <__aeabi_fdiv>
 80141ea:	e7f0      	b.n	80141ce <__ieee754_sqrtf+0x22>
 80141ec:	0022      	movs	r2, r4
 80141ee:	15e1      	asrs	r1, r4, #23
 80141f0:	4002      	ands	r2, r0
 80141f2:	4204      	tst	r4, r0
 80141f4:	d046      	beq.n	8014284 <__ieee754_sqrtf+0xd8>
 80141f6:	2280      	movs	r2, #128	@ 0x80
 80141f8:	000f      	movs	r7, r1
 80141fa:	025b      	lsls	r3, r3, #9
 80141fc:	0a5b      	lsrs	r3, r3, #9
 80141fe:	0412      	lsls	r2, r2, #16
 8014200:	3f7f      	subs	r7, #127	@ 0x7f
 8014202:	4313      	orrs	r3, r2
 8014204:	07c9      	lsls	r1, r1, #31
 8014206:	d400      	bmi.n	801420a <__ieee754_sqrtf+0x5e>
 8014208:	005b      	lsls	r3, r3, #1
 801420a:	2400      	movs	r4, #0
 801420c:	2180      	movs	r1, #128	@ 0x80
 801420e:	2019      	movs	r0, #25
 8014210:	0026      	movs	r6, r4
 8014212:	107f      	asrs	r7, r7, #1
 8014214:	005b      	lsls	r3, r3, #1
 8014216:	0449      	lsls	r1, r1, #17
 8014218:	1875      	adds	r5, r6, r1
 801421a:	001a      	movs	r2, r3
 801421c:	429d      	cmp	r5, r3
 801421e:	dc02      	bgt.n	8014226 <__ieee754_sqrtf+0x7a>
 8014220:	186e      	adds	r6, r5, r1
 8014222:	1b5a      	subs	r2, r3, r5
 8014224:	1864      	adds	r4, r4, r1
 8014226:	3801      	subs	r0, #1
 8014228:	0053      	lsls	r3, r2, #1
 801422a:	0849      	lsrs	r1, r1, #1
 801422c:	2800      	cmp	r0, #0
 801422e:	d1f3      	bne.n	8014218 <__ieee754_sqrtf+0x6c>
 8014230:	2a00      	cmp	r2, #0
 8014232:	d019      	beq.n	8014268 <__ieee754_sqrtf+0xbc>
 8014234:	4d17      	ldr	r5, [pc, #92]	@ (8014294 <__ieee754_sqrtf+0xe8>)
 8014236:	4e18      	ldr	r6, [pc, #96]	@ (8014298 <__ieee754_sqrtf+0xec>)
 8014238:	6828      	ldr	r0, [r5, #0]
 801423a:	6831      	ldr	r1, [r6, #0]
 801423c:	682b      	ldr	r3, [r5, #0]
 801423e:	9301      	str	r3, [sp, #4]
 8014240:	f7ec ffb0 	bl	80011a4 <__aeabi_fsub>
 8014244:	1c01      	adds	r1, r0, #0
 8014246:	9801      	ldr	r0, [sp, #4]
 8014248:	f7ec f972 	bl	8000530 <__aeabi_fcmple>
 801424c:	2800      	cmp	r0, #0
 801424e:	d00b      	beq.n	8014268 <__ieee754_sqrtf+0xbc>
 8014250:	6828      	ldr	r0, [r5, #0]
 8014252:	6831      	ldr	r1, [r6, #0]
 8014254:	f7ec faf8 	bl	8000848 <__aeabi_fadd>
 8014258:	682d      	ldr	r5, [r5, #0]
 801425a:	1c01      	adds	r1, r0, #0
 801425c:	1c28      	adds	r0, r5, #0
 801425e:	f7ec f95d 	bl	800051c <__aeabi_fcmplt>
 8014262:	2800      	cmp	r0, #0
 8014264:	d011      	beq.n	801428a <__ieee754_sqrtf+0xde>
 8014266:	3402      	adds	r4, #2
 8014268:	23fc      	movs	r3, #252	@ 0xfc
 801426a:	1064      	asrs	r4, r4, #1
 801426c:	059b      	lsls	r3, r3, #22
 801426e:	18e3      	adds	r3, r4, r3
 8014270:	05fc      	lsls	r4, r7, #23
 8014272:	18e4      	adds	r4, r4, r3
 8014274:	e7ac      	b.n	80141d0 <__ieee754_sqrtf+0x24>
 8014276:	005b      	lsls	r3, r3, #1
 8014278:	3201      	adds	r2, #1
 801427a:	4203      	tst	r3, r0
 801427c:	d0fb      	beq.n	8014276 <__ieee754_sqrtf+0xca>
 801427e:	3a01      	subs	r2, #1
 8014280:	1a89      	subs	r1, r1, r2
 8014282:	e7b8      	b.n	80141f6 <__ieee754_sqrtf+0x4a>
 8014284:	2080      	movs	r0, #128	@ 0x80
 8014286:	0400      	lsls	r0, r0, #16
 8014288:	e7f7      	b.n	801427a <__ieee754_sqrtf+0xce>
 801428a:	2301      	movs	r3, #1
 801428c:	3401      	adds	r4, #1
 801428e:	439c      	bics	r4, r3
 8014290:	e7ea      	b.n	8014268 <__ieee754_sqrtf+0xbc>
 8014292:	46c0      	nop			@ (mov r8, r8)
 8014294:	20000318 	.word	0x20000318
 8014298:	20000314 	.word	0x20000314

0801429c <__ieee754_log10>:
 801429c:	2280      	movs	r2, #128	@ 0x80
 801429e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142a0:	000b      	movs	r3, r1
 80142a2:	0004      	movs	r4, r0
 80142a4:	000d      	movs	r5, r1
 80142a6:	b085      	sub	sp, #20
 80142a8:	0352      	lsls	r2, r2, #13
 80142aa:	4291      	cmp	r1, r2
 80142ac:	da26      	bge.n	80142fc <__ieee754_log10+0x60>
 80142ae:	004a      	lsls	r2, r1, #1
 80142b0:	0852      	lsrs	r2, r2, #1
 80142b2:	4302      	orrs	r2, r0
 80142b4:	d107      	bne.n	80142c6 <__ieee754_log10+0x2a>
 80142b6:	2200      	movs	r2, #0
 80142b8:	2300      	movs	r3, #0
 80142ba:	2000      	movs	r0, #0
 80142bc:	4929      	ldr	r1, [pc, #164]	@ (8014364 <__ieee754_log10+0xc8>)
 80142be:	f7ed fd3d 	bl	8001d3c <__aeabi_ddiv>
 80142c2:	b005      	add	sp, #20
 80142c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142c6:	2900      	cmp	r1, #0
 80142c8:	da05      	bge.n	80142d6 <__ieee754_log10+0x3a>
 80142ca:	0002      	movs	r2, r0
 80142cc:	f7ee fc42 	bl	8002b54 <__aeabi_dsub>
 80142d0:	2200      	movs	r2, #0
 80142d2:	2300      	movs	r3, #0
 80142d4:	e7f3      	b.n	80142be <__ieee754_log10+0x22>
 80142d6:	2200      	movs	r2, #0
 80142d8:	4b23      	ldr	r3, [pc, #140]	@ (8014368 <__ieee754_log10+0xcc>)
 80142da:	f7ee f973 	bl	80025c4 <__aeabi_dmul>
 80142de:	2236      	movs	r2, #54	@ 0x36
 80142e0:	0004      	movs	r4, r0
 80142e2:	000d      	movs	r5, r1
 80142e4:	000b      	movs	r3, r1
 80142e6:	4252      	negs	r2, r2
 80142e8:	4920      	ldr	r1, [pc, #128]	@ (801436c <__ieee754_log10+0xd0>)
 80142ea:	428b      	cmp	r3, r1
 80142ec:	dd08      	ble.n	8014300 <__ieee754_log10+0x64>
 80142ee:	0022      	movs	r2, r4
 80142f0:	002b      	movs	r3, r5
 80142f2:	0020      	movs	r0, r4
 80142f4:	0029      	movs	r1, r5
 80142f6:	f7ed f9bd 	bl	8001674 <__aeabi_dadd>
 80142fa:	e7e2      	b.n	80142c2 <__ieee754_log10+0x26>
 80142fc:	2200      	movs	r2, #0
 80142fe:	e7f3      	b.n	80142e8 <__ieee754_log10+0x4c>
 8014300:	491b      	ldr	r1, [pc, #108]	@ (8014370 <__ieee754_log10+0xd4>)
 8014302:	1518      	asrs	r0, r3, #20
 8014304:	1840      	adds	r0, r0, r1
 8014306:	1880      	adds	r0, r0, r2
 8014308:	0fc2      	lsrs	r2, r0, #31
 801430a:	031b      	lsls	r3, r3, #12
 801430c:	0b1b      	lsrs	r3, r3, #12
 801430e:	1880      	adds	r0, r0, r2
 8014310:	9203      	str	r2, [sp, #12]
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	f7ef f818 	bl	8003348 <__aeabi_i2d>
 8014318:	9a03      	ldr	r2, [sp, #12]
 801431a:	4b16      	ldr	r3, [pc, #88]	@ (8014374 <__ieee754_log10+0xd8>)
 801431c:	0006      	movs	r6, r0
 801431e:	1a9b      	subs	r3, r3, r2
 8014320:	9a00      	ldr	r2, [sp, #0]
 8014322:	051b      	lsls	r3, r3, #20
 8014324:	431a      	orrs	r2, r3
 8014326:	0015      	movs	r5, r2
 8014328:	4b13      	ldr	r3, [pc, #76]	@ (8014378 <__ieee754_log10+0xdc>)
 801432a:	4a14      	ldr	r2, [pc, #80]	@ (801437c <__ieee754_log10+0xe0>)
 801432c:	000f      	movs	r7, r1
 801432e:	f7ee f949 	bl	80025c4 <__aeabi_dmul>
 8014332:	9000      	str	r0, [sp, #0]
 8014334:	9101      	str	r1, [sp, #4]
 8014336:	0020      	movs	r0, r4
 8014338:	0029      	movs	r1, r5
 801433a:	f000 f93b 	bl	80145b4 <__ieee754_log>
 801433e:	4a10      	ldr	r2, [pc, #64]	@ (8014380 <__ieee754_log10+0xe4>)
 8014340:	4b10      	ldr	r3, [pc, #64]	@ (8014384 <__ieee754_log10+0xe8>)
 8014342:	f7ee f93f 	bl	80025c4 <__aeabi_dmul>
 8014346:	9a00      	ldr	r2, [sp, #0]
 8014348:	9b01      	ldr	r3, [sp, #4]
 801434a:	f7ed f993 	bl	8001674 <__aeabi_dadd>
 801434e:	4a0e      	ldr	r2, [pc, #56]	@ (8014388 <__ieee754_log10+0xec>)
 8014350:	4b0e      	ldr	r3, [pc, #56]	@ (801438c <__ieee754_log10+0xf0>)
 8014352:	0004      	movs	r4, r0
 8014354:	000d      	movs	r5, r1
 8014356:	0030      	movs	r0, r6
 8014358:	0039      	movs	r1, r7
 801435a:	f7ee f933 	bl	80025c4 <__aeabi_dmul>
 801435e:	0002      	movs	r2, r0
 8014360:	000b      	movs	r3, r1
 8014362:	e7c6      	b.n	80142f2 <__ieee754_log10+0x56>
 8014364:	c3500000 	.word	0xc3500000
 8014368:	43500000 	.word	0x43500000
 801436c:	7fefffff 	.word	0x7fefffff
 8014370:	fffffc01 	.word	0xfffffc01
 8014374:	000003ff 	.word	0x000003ff
 8014378:	3d59fef3 	.word	0x3d59fef3
 801437c:	11f12b36 	.word	0x11f12b36
 8014380:	1526e50e 	.word	0x1526e50e
 8014384:	3fdbcb7b 	.word	0x3fdbcb7b
 8014388:	509f6000 	.word	0x509f6000
 801438c:	3fd34413 	.word	0x3fd34413

08014390 <__ieee754_expf>:
 8014390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014392:	21ff      	movs	r1, #255	@ 0xff
 8014394:	0043      	lsls	r3, r0, #1
 8014396:	1c04      	adds	r4, r0, #0
 8014398:	085b      	lsrs	r3, r3, #1
 801439a:	05c9      	lsls	r1, r1, #23
 801439c:	428b      	cmp	r3, r1
 801439e:	d904      	bls.n	80143aa <__ieee754_expf+0x1a>
 80143a0:	1c01      	adds	r1, r0, #0
 80143a2:	1c20      	adds	r0, r4, #0
 80143a4:	f7ec fa50 	bl	8000848 <__aeabi_fadd>
 80143a8:	e00d      	b.n	80143c6 <__ieee754_expf+0x36>
 80143aa:	0fc6      	lsrs	r6, r0, #31
 80143ac:	428b      	cmp	r3, r1
 80143ae:	d104      	bne.n	80143ba <__ieee754_expf+0x2a>
 80143b0:	2e00      	cmp	r6, #0
 80143b2:	d000      	beq.n	80143b6 <__ieee754_expf+0x26>
 80143b4:	e0ba      	b.n	801452c <__ieee754_expf+0x19c>
 80143b6:	1c20      	adds	r0, r4, #0
 80143b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80143ba:	495d      	ldr	r1, [pc, #372]	@ (8014530 <__ieee754_expf+0x1a0>)
 80143bc:	4288      	cmp	r0, r1
 80143be:	dd04      	ble.n	80143ca <__ieee754_expf+0x3a>
 80143c0:	2000      	movs	r0, #0
 80143c2:	f000 f8f1 	bl	80145a8 <__math_oflowf>
 80143c6:	1c04      	adds	r4, r0, #0
 80143c8:	e7f5      	b.n	80143b6 <__ieee754_expf+0x26>
 80143ca:	2800      	cmp	r0, #0
 80143cc:	da06      	bge.n	80143dc <__ieee754_expf+0x4c>
 80143ce:	4a59      	ldr	r2, [pc, #356]	@ (8014534 <__ieee754_expf+0x1a4>)
 80143d0:	4293      	cmp	r3, r2
 80143d2:	d903      	bls.n	80143dc <__ieee754_expf+0x4c>
 80143d4:	2000      	movs	r0, #0
 80143d6:	f000 f8e1 	bl	801459c <__math_uflowf>
 80143da:	e7f4      	b.n	80143c6 <__ieee754_expf+0x36>
 80143dc:	4a56      	ldr	r2, [pc, #344]	@ (8014538 <__ieee754_expf+0x1a8>)
 80143de:	4293      	cmp	r3, r2
 80143e0:	d96e      	bls.n	80144c0 <__ieee754_expf+0x130>
 80143e2:	4a56      	ldr	r2, [pc, #344]	@ (801453c <__ieee754_expf+0x1ac>)
 80143e4:	00b5      	lsls	r5, r6, #2
 80143e6:	4293      	cmp	r3, r2
 80143e8:	d84e      	bhi.n	8014488 <__ieee754_expf+0xf8>
 80143ea:	4b55      	ldr	r3, [pc, #340]	@ (8014540 <__ieee754_expf+0x1b0>)
 80143ec:	1c20      	adds	r0, r4, #0
 80143ee:	5959      	ldr	r1, [r3, r5]
 80143f0:	f7ec fed8 	bl	80011a4 <__aeabi_fsub>
 80143f4:	4b53      	ldr	r3, [pc, #332]	@ (8014544 <__ieee754_expf+0x1b4>)
 80143f6:	1c07      	adds	r7, r0, #0
 80143f8:	595b      	ldr	r3, [r3, r5]
 80143fa:	2501      	movs	r5, #1
 80143fc:	1bad      	subs	r5, r5, r6
 80143fe:	9300      	str	r3, [sp, #0]
 8014400:	1bad      	subs	r5, r5, r6
 8014402:	9900      	ldr	r1, [sp, #0]
 8014404:	1c38      	adds	r0, r7, #0
 8014406:	f7ec fecd 	bl	80011a4 <__aeabi_fsub>
 801440a:	1c04      	adds	r4, r0, #0
 801440c:	1c21      	adds	r1, r4, #0
 801440e:	1c20      	adds	r0, r4, #0
 8014410:	f7ec fd8a 	bl	8000f28 <__aeabi_fmul>
 8014414:	494c      	ldr	r1, [pc, #304]	@ (8014548 <__ieee754_expf+0x1b8>)
 8014416:	1c06      	adds	r6, r0, #0
 8014418:	f7ec fd86 	bl	8000f28 <__aeabi_fmul>
 801441c:	494b      	ldr	r1, [pc, #300]	@ (801454c <__ieee754_expf+0x1bc>)
 801441e:	f7ec fec1 	bl	80011a4 <__aeabi_fsub>
 8014422:	1c31      	adds	r1, r6, #0
 8014424:	f7ec fd80 	bl	8000f28 <__aeabi_fmul>
 8014428:	4949      	ldr	r1, [pc, #292]	@ (8014550 <__ieee754_expf+0x1c0>)
 801442a:	f7ec fa0d 	bl	8000848 <__aeabi_fadd>
 801442e:	1c31      	adds	r1, r6, #0
 8014430:	f7ec fd7a 	bl	8000f28 <__aeabi_fmul>
 8014434:	4947      	ldr	r1, [pc, #284]	@ (8014554 <__ieee754_expf+0x1c4>)
 8014436:	f7ec feb5 	bl	80011a4 <__aeabi_fsub>
 801443a:	1c31      	adds	r1, r6, #0
 801443c:	f7ec fd74 	bl	8000f28 <__aeabi_fmul>
 8014440:	4945      	ldr	r1, [pc, #276]	@ (8014558 <__ieee754_expf+0x1c8>)
 8014442:	f7ec fa01 	bl	8000848 <__aeabi_fadd>
 8014446:	1c31      	adds	r1, r6, #0
 8014448:	f7ec fd6e 	bl	8000f28 <__aeabi_fmul>
 801444c:	1c01      	adds	r1, r0, #0
 801444e:	1c20      	adds	r0, r4, #0
 8014450:	f7ec fea8 	bl	80011a4 <__aeabi_fsub>
 8014454:	1c01      	adds	r1, r0, #0
 8014456:	1c06      	adds	r6, r0, #0
 8014458:	1c20      	adds	r0, r4, #0
 801445a:	f7ec fd65 	bl	8000f28 <__aeabi_fmul>
 801445e:	9001      	str	r0, [sp, #4]
 8014460:	2d00      	cmp	r5, #0
 8014462:	d140      	bne.n	80144e6 <__ieee754_expf+0x156>
 8014464:	2180      	movs	r1, #128	@ 0x80
 8014466:	1c30      	adds	r0, r6, #0
 8014468:	05c9      	lsls	r1, r1, #23
 801446a:	f7ec fe9b 	bl	80011a4 <__aeabi_fsub>
 801446e:	1c01      	adds	r1, r0, #0
 8014470:	9801      	ldr	r0, [sp, #4]
 8014472:	f7ec fb73 	bl	8000b5c <__aeabi_fdiv>
 8014476:	1c21      	adds	r1, r4, #0
 8014478:	f7ec fe94 	bl	80011a4 <__aeabi_fsub>
 801447c:	1c01      	adds	r1, r0, #0
 801447e:	20fe      	movs	r0, #254	@ 0xfe
 8014480:	0580      	lsls	r0, r0, #22
 8014482:	f7ec fe8f 	bl	80011a4 <__aeabi_fsub>
 8014486:	e79e      	b.n	80143c6 <__ieee754_expf+0x36>
 8014488:	4934      	ldr	r1, [pc, #208]	@ (801455c <__ieee754_expf+0x1cc>)
 801448a:	1c20      	adds	r0, r4, #0
 801448c:	f7ec fd4c 	bl	8000f28 <__aeabi_fmul>
 8014490:	4b33      	ldr	r3, [pc, #204]	@ (8014560 <__ieee754_expf+0x1d0>)
 8014492:	5959      	ldr	r1, [r3, r5]
 8014494:	f7ec f9d8 	bl	8000848 <__aeabi_fadd>
 8014498:	f7ed f83e 	bl	8001518 <__aeabi_f2iz>
 801449c:	0005      	movs	r5, r0
 801449e:	f7ed f85b 	bl	8001558 <__aeabi_i2f>
 80144a2:	4930      	ldr	r1, [pc, #192]	@ (8014564 <__ieee754_expf+0x1d4>)
 80144a4:	1c06      	adds	r6, r0, #0
 80144a6:	f7ec fd3f 	bl	8000f28 <__aeabi_fmul>
 80144aa:	1c01      	adds	r1, r0, #0
 80144ac:	1c20      	adds	r0, r4, #0
 80144ae:	f7ec fe79 	bl	80011a4 <__aeabi_fsub>
 80144b2:	492d      	ldr	r1, [pc, #180]	@ (8014568 <__ieee754_expf+0x1d8>)
 80144b4:	1c07      	adds	r7, r0, #0
 80144b6:	1c30      	adds	r0, r6, #0
 80144b8:	f7ec fd36 	bl	8000f28 <__aeabi_fmul>
 80144bc:	9000      	str	r0, [sp, #0]
 80144be:	e7a0      	b.n	8014402 <__ieee754_expf+0x72>
 80144c0:	22d0      	movs	r2, #208	@ 0xd0
 80144c2:	0592      	lsls	r2, r2, #22
 80144c4:	4293      	cmp	r3, r2
 80144c6:	d20c      	bcs.n	80144e2 <__ieee754_expf+0x152>
 80144c8:	4928      	ldr	r1, [pc, #160]	@ (801456c <__ieee754_expf+0x1dc>)
 80144ca:	1c20      	adds	r0, r4, #0
 80144cc:	f7ec f9bc 	bl	8000848 <__aeabi_fadd>
 80144d0:	21fe      	movs	r1, #254	@ 0xfe
 80144d2:	0589      	lsls	r1, r1, #22
 80144d4:	f7ec f836 	bl	8000544 <__aeabi_fcmpgt>
 80144d8:	1e05      	subs	r5, r0, #0
 80144da:	d097      	beq.n	801440c <__ieee754_expf+0x7c>
 80144dc:	21fe      	movs	r1, #254	@ 0xfe
 80144de:	0589      	lsls	r1, r1, #22
 80144e0:	e75f      	b.n	80143a2 <__ieee754_expf+0x12>
 80144e2:	2500      	movs	r5, #0
 80144e4:	e792      	b.n	801440c <__ieee754_expf+0x7c>
 80144e6:	2080      	movs	r0, #128	@ 0x80
 80144e8:	1c31      	adds	r1, r6, #0
 80144ea:	05c0      	lsls	r0, r0, #23
 80144ec:	f7ec fe5a 	bl	80011a4 <__aeabi_fsub>
 80144f0:	1c01      	adds	r1, r0, #0
 80144f2:	9801      	ldr	r0, [sp, #4]
 80144f4:	f7ec fb32 	bl	8000b5c <__aeabi_fdiv>
 80144f8:	1c01      	adds	r1, r0, #0
 80144fa:	9800      	ldr	r0, [sp, #0]
 80144fc:	f7ec fe52 	bl	80011a4 <__aeabi_fsub>
 8014500:	1c39      	adds	r1, r7, #0
 8014502:	f7ec fe4f 	bl	80011a4 <__aeabi_fsub>
 8014506:	1c01      	adds	r1, r0, #0
 8014508:	20fe      	movs	r0, #254	@ 0xfe
 801450a:	0580      	lsls	r0, r0, #22
 801450c:	f7ec fe4a 	bl	80011a4 <__aeabi_fsub>
 8014510:	002b      	movs	r3, r5
 8014512:	337d      	adds	r3, #125	@ 0x7d
 8014514:	db02      	blt.n	801451c <__ieee754_expf+0x18c>
 8014516:	05ec      	lsls	r4, r5, #23
 8014518:	1824      	adds	r4, r4, r0
 801451a:	e74c      	b.n	80143b6 <__ieee754_expf+0x26>
 801451c:	21d8      	movs	r1, #216	@ 0xd8
 801451e:	3564      	adds	r5, #100	@ 0x64
 8014520:	05ed      	lsls	r5, r5, #23
 8014522:	1828      	adds	r0, r5, r0
 8014524:	0509      	lsls	r1, r1, #20
 8014526:	f7ec fcff 	bl	8000f28 <__aeabi_fmul>
 801452a:	e74c      	b.n	80143c6 <__ieee754_expf+0x36>
 801452c:	2400      	movs	r4, #0
 801452e:	e742      	b.n	80143b6 <__ieee754_expf+0x26>
 8014530:	42b17217 	.word	0x42b17217
 8014534:	42cff1b5 	.word	0x42cff1b5
 8014538:	3eb17218 	.word	0x3eb17218
 801453c:	3f851591 	.word	0x3f851591
 8014540:	08027600 	.word	0x08027600
 8014544:	080275f8 	.word	0x080275f8
 8014548:	3331bb4c 	.word	0x3331bb4c
 801454c:	35ddea0e 	.word	0x35ddea0e
 8014550:	388ab355 	.word	0x388ab355
 8014554:	3b360b61 	.word	0x3b360b61
 8014558:	3e2aaaab 	.word	0x3e2aaaab
 801455c:	3fb8aa3b 	.word	0x3fb8aa3b
 8014560:	08027608 	.word	0x08027608
 8014564:	3f317180 	.word	0x3f317180
 8014568:	3717f7d1 	.word	0x3717f7d1
 801456c:	7149f2ca 	.word	0x7149f2ca

08014570 <with_errnof>:
 8014570:	b570      	push	{r4, r5, r6, lr}
 8014572:	000d      	movs	r5, r1
 8014574:	1c04      	adds	r4, r0, #0
 8014576:	f7fd fc75 	bl	8011e64 <__errno>
 801457a:	6005      	str	r5, [r0, #0]
 801457c:	1c20      	adds	r0, r4, #0
 801457e:	bd70      	pop	{r4, r5, r6, pc}

08014580 <xflowf>:
 8014580:	b510      	push	{r4, lr}
 8014582:	1c0b      	adds	r3, r1, #0
 8014584:	2800      	cmp	r0, #0
 8014586:	d002      	beq.n	801458e <xflowf+0xe>
 8014588:	2380      	movs	r3, #128	@ 0x80
 801458a:	061b      	lsls	r3, r3, #24
 801458c:	18cb      	adds	r3, r1, r3
 801458e:	1c18      	adds	r0, r3, #0
 8014590:	f7ec fcca 	bl	8000f28 <__aeabi_fmul>
 8014594:	2122      	movs	r1, #34	@ 0x22
 8014596:	f7ff ffeb 	bl	8014570 <with_errnof>
 801459a:	bd10      	pop	{r4, pc}

0801459c <__math_uflowf>:
 801459c:	2180      	movs	r1, #128	@ 0x80
 801459e:	b510      	push	{r4, lr}
 80145a0:	0549      	lsls	r1, r1, #21
 80145a2:	f7ff ffed 	bl	8014580 <xflowf>
 80145a6:	bd10      	pop	{r4, pc}

080145a8 <__math_oflowf>:
 80145a8:	21e0      	movs	r1, #224	@ 0xe0
 80145aa:	b510      	push	{r4, lr}
 80145ac:	05c9      	lsls	r1, r1, #23
 80145ae:	f7ff ffe7 	bl	8014580 <xflowf>
 80145b2:	bd10      	pop	{r4, pc}

080145b4 <__ieee754_log>:
 80145b4:	2380      	movs	r3, #128	@ 0x80
 80145b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145b8:	035b      	lsls	r3, r3, #13
 80145ba:	000e      	movs	r6, r1
 80145bc:	b08d      	sub	sp, #52	@ 0x34
 80145be:	4299      	cmp	r1, r3
 80145c0:	da23      	bge.n	801460a <__ieee754_log+0x56>
 80145c2:	004b      	lsls	r3, r1, #1
 80145c4:	085b      	lsrs	r3, r3, #1
 80145c6:	4303      	orrs	r3, r0
 80145c8:	d107      	bne.n	80145da <__ieee754_log+0x26>
 80145ca:	2200      	movs	r2, #0
 80145cc:	2300      	movs	r3, #0
 80145ce:	2000      	movs	r0, #0
 80145d0:	49b4      	ldr	r1, [pc, #720]	@ (80148a4 <__ieee754_log+0x2f0>)
 80145d2:	f7ed fbb3 	bl	8001d3c <__aeabi_ddiv>
 80145d6:	b00d      	add	sp, #52	@ 0x34
 80145d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145da:	2900      	cmp	r1, #0
 80145dc:	da06      	bge.n	80145ec <__ieee754_log+0x38>
 80145de:	0002      	movs	r2, r0
 80145e0:	000b      	movs	r3, r1
 80145e2:	f7ee fab7 	bl	8002b54 <__aeabi_dsub>
 80145e6:	2200      	movs	r2, #0
 80145e8:	2300      	movs	r3, #0
 80145ea:	e7f2      	b.n	80145d2 <__ieee754_log+0x1e>
 80145ec:	4bae      	ldr	r3, [pc, #696]	@ (80148a8 <__ieee754_log+0x2f4>)
 80145ee:	2200      	movs	r2, #0
 80145f0:	f7ed ffe8 	bl	80025c4 <__aeabi_dmul>
 80145f4:	2336      	movs	r3, #54	@ 0x36
 80145f6:	000e      	movs	r6, r1
 80145f8:	425b      	negs	r3, r3
 80145fa:	4aac      	ldr	r2, [pc, #688]	@ (80148ac <__ieee754_log+0x2f8>)
 80145fc:	4296      	cmp	r6, r2
 80145fe:	dd06      	ble.n	801460e <__ieee754_log+0x5a>
 8014600:	0002      	movs	r2, r0
 8014602:	000b      	movs	r3, r1
 8014604:	f7ed f836 	bl	8001674 <__aeabi_dadd>
 8014608:	e7e5      	b.n	80145d6 <__ieee754_log+0x22>
 801460a:	2300      	movs	r3, #0
 801460c:	e7f5      	b.n	80145fa <__ieee754_log+0x46>
 801460e:	4ca8      	ldr	r4, [pc, #672]	@ (80148b0 <__ieee754_log+0x2fc>)
 8014610:	1532      	asrs	r2, r6, #20
 8014612:	1912      	adds	r2, r2, r4
 8014614:	0336      	lsls	r6, r6, #12
 8014616:	4ca7      	ldr	r4, [pc, #668]	@ (80148b4 <__ieee754_log+0x300>)
 8014618:	18d2      	adds	r2, r2, r3
 801461a:	0b33      	lsrs	r3, r6, #12
 801461c:	9302      	str	r3, [sp, #8]
 801461e:	191b      	adds	r3, r3, r4
 8014620:	2480      	movs	r4, #128	@ 0x80
 8014622:	0364      	lsls	r4, r4, #13
 8014624:	4023      	ands	r3, r4
 8014626:	4ca4      	ldr	r4, [pc, #656]	@ (80148b8 <__ieee754_log+0x304>)
 8014628:	9d02      	ldr	r5, [sp, #8]
 801462a:	405c      	eors	r4, r3
 801462c:	151b      	asrs	r3, r3, #20
 801462e:	189b      	adds	r3, r3, r2
 8014630:	4325      	orrs	r5, r4
 8014632:	2200      	movs	r2, #0
 8014634:	9300      	str	r3, [sp, #0]
 8014636:	0029      	movs	r1, r5
 8014638:	4b9f      	ldr	r3, [pc, #636]	@ (80148b8 <__ieee754_log+0x304>)
 801463a:	f7ee fa8b 	bl	8002b54 <__aeabi_dsub>
 801463e:	9b02      	ldr	r3, [sp, #8]
 8014640:	0006      	movs	r6, r0
 8014642:	3302      	adds	r3, #2
 8014644:	031b      	lsls	r3, r3, #12
 8014646:	000f      	movs	r7, r1
 8014648:	2200      	movs	r2, #0
 801464a:	0b1b      	lsrs	r3, r3, #12
 801464c:	2b02      	cmp	r3, #2
 801464e:	dc64      	bgt.n	801471a <__ieee754_log+0x166>
 8014650:	2300      	movs	r3, #0
 8014652:	f7eb ff23 	bl	800049c <__aeabi_dcmpeq>
 8014656:	2800      	cmp	r0, #0
 8014658:	d019      	beq.n	801468e <__ieee754_log+0xda>
 801465a:	9b00      	ldr	r3, [sp, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d100      	bne.n	8014662 <__ieee754_log+0xae>
 8014660:	e11c      	b.n	801489c <__ieee754_log+0x2e8>
 8014662:	0018      	movs	r0, r3
 8014664:	f7ee fe70 	bl	8003348 <__aeabi_i2d>
 8014668:	4a94      	ldr	r2, [pc, #592]	@ (80148bc <__ieee754_log+0x308>)
 801466a:	4b95      	ldr	r3, [pc, #596]	@ (80148c0 <__ieee754_log+0x30c>)
 801466c:	0004      	movs	r4, r0
 801466e:	000d      	movs	r5, r1
 8014670:	f7ed ffa8 	bl	80025c4 <__aeabi_dmul>
 8014674:	4a93      	ldr	r2, [pc, #588]	@ (80148c4 <__ieee754_log+0x310>)
 8014676:	0006      	movs	r6, r0
 8014678:	000f      	movs	r7, r1
 801467a:	4b93      	ldr	r3, [pc, #588]	@ (80148c8 <__ieee754_log+0x314>)
 801467c:	0020      	movs	r0, r4
 801467e:	0029      	movs	r1, r5
 8014680:	f7ed ffa0 	bl	80025c4 <__aeabi_dmul>
 8014684:	0002      	movs	r2, r0
 8014686:	000b      	movs	r3, r1
 8014688:	0030      	movs	r0, r6
 801468a:	0039      	movs	r1, r7
 801468c:	e7ba      	b.n	8014604 <__ieee754_log+0x50>
 801468e:	4a8f      	ldr	r2, [pc, #572]	@ (80148cc <__ieee754_log+0x318>)
 8014690:	4b8f      	ldr	r3, [pc, #572]	@ (80148d0 <__ieee754_log+0x31c>)
 8014692:	0030      	movs	r0, r6
 8014694:	0039      	movs	r1, r7
 8014696:	f7ed ff95 	bl	80025c4 <__aeabi_dmul>
 801469a:	0002      	movs	r2, r0
 801469c:	000b      	movs	r3, r1
 801469e:	2000      	movs	r0, #0
 80146a0:	498c      	ldr	r1, [pc, #560]	@ (80148d4 <__ieee754_log+0x320>)
 80146a2:	f7ee fa57 	bl	8002b54 <__aeabi_dsub>
 80146a6:	0032      	movs	r2, r6
 80146a8:	0004      	movs	r4, r0
 80146aa:	000d      	movs	r5, r1
 80146ac:	003b      	movs	r3, r7
 80146ae:	0030      	movs	r0, r6
 80146b0:	0039      	movs	r1, r7
 80146b2:	f7ed ff87 	bl	80025c4 <__aeabi_dmul>
 80146b6:	000b      	movs	r3, r1
 80146b8:	0002      	movs	r2, r0
 80146ba:	0029      	movs	r1, r5
 80146bc:	0020      	movs	r0, r4
 80146be:	f7ed ff81 	bl	80025c4 <__aeabi_dmul>
 80146c2:	9b00      	ldr	r3, [sp, #0]
 80146c4:	9002      	str	r0, [sp, #8]
 80146c6:	9103      	str	r1, [sp, #12]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d106      	bne.n	80146da <__ieee754_log+0x126>
 80146cc:	0002      	movs	r2, r0
 80146ce:	000b      	movs	r3, r1
 80146d0:	0030      	movs	r0, r6
 80146d2:	0039      	movs	r1, r7
 80146d4:	f7ee fa3e 	bl	8002b54 <__aeabi_dsub>
 80146d8:	e77d      	b.n	80145d6 <__ieee754_log+0x22>
 80146da:	9800      	ldr	r0, [sp, #0]
 80146dc:	f7ee fe34 	bl	8003348 <__aeabi_i2d>
 80146e0:	4a76      	ldr	r2, [pc, #472]	@ (80148bc <__ieee754_log+0x308>)
 80146e2:	4b77      	ldr	r3, [pc, #476]	@ (80148c0 <__ieee754_log+0x30c>)
 80146e4:	0004      	movs	r4, r0
 80146e6:	000d      	movs	r5, r1
 80146e8:	f7ed ff6c 	bl	80025c4 <__aeabi_dmul>
 80146ec:	4a75      	ldr	r2, [pc, #468]	@ (80148c4 <__ieee754_log+0x310>)
 80146ee:	9000      	str	r0, [sp, #0]
 80146f0:	9101      	str	r1, [sp, #4]
 80146f2:	4b75      	ldr	r3, [pc, #468]	@ (80148c8 <__ieee754_log+0x314>)
 80146f4:	0020      	movs	r0, r4
 80146f6:	0029      	movs	r1, r5
 80146f8:	f7ed ff64 	bl	80025c4 <__aeabi_dmul>
 80146fc:	0002      	movs	r2, r0
 80146fe:	000b      	movs	r3, r1
 8014700:	9802      	ldr	r0, [sp, #8]
 8014702:	9903      	ldr	r1, [sp, #12]
 8014704:	f7ee fa26 	bl	8002b54 <__aeabi_dsub>
 8014708:	0032      	movs	r2, r6
 801470a:	003b      	movs	r3, r7
 801470c:	f7ee fa22 	bl	8002b54 <__aeabi_dsub>
 8014710:	0002      	movs	r2, r0
 8014712:	000b      	movs	r3, r1
 8014714:	9800      	ldr	r0, [sp, #0]
 8014716:	9901      	ldr	r1, [sp, #4]
 8014718:	e7dc      	b.n	80146d4 <__ieee754_log+0x120>
 801471a:	2380      	movs	r3, #128	@ 0x80
 801471c:	05db      	lsls	r3, r3, #23
 801471e:	f7ec ffa9 	bl	8001674 <__aeabi_dadd>
 8014722:	0002      	movs	r2, r0
 8014724:	000b      	movs	r3, r1
 8014726:	0030      	movs	r0, r6
 8014728:	0039      	movs	r1, r7
 801472a:	f7ed fb07 	bl	8001d3c <__aeabi_ddiv>
 801472e:	9004      	str	r0, [sp, #16]
 8014730:	9105      	str	r1, [sp, #20]
 8014732:	9800      	ldr	r0, [sp, #0]
 8014734:	f7ee fe08 	bl	8003348 <__aeabi_i2d>
 8014738:	9a04      	ldr	r2, [sp, #16]
 801473a:	9b05      	ldr	r3, [sp, #20]
 801473c:	9006      	str	r0, [sp, #24]
 801473e:	9107      	str	r1, [sp, #28]
 8014740:	0010      	movs	r0, r2
 8014742:	0019      	movs	r1, r3
 8014744:	f7ed ff3e 	bl	80025c4 <__aeabi_dmul>
 8014748:	4a63      	ldr	r2, [pc, #396]	@ (80148d8 <__ieee754_log+0x324>)
 801474a:	9b02      	ldr	r3, [sp, #8]
 801474c:	4694      	mov	ip, r2
 801474e:	4463      	add	r3, ip
 8014750:	0002      	movs	r2, r0
 8014752:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014754:	000b      	movs	r3, r1
 8014756:	9008      	str	r0, [sp, #32]
 8014758:	9109      	str	r1, [sp, #36]	@ 0x24
 801475a:	f7ed ff33 	bl	80025c4 <__aeabi_dmul>
 801475e:	0004      	movs	r4, r0
 8014760:	000d      	movs	r5, r1
 8014762:	4a5e      	ldr	r2, [pc, #376]	@ (80148dc <__ieee754_log+0x328>)
 8014764:	4b5e      	ldr	r3, [pc, #376]	@ (80148e0 <__ieee754_log+0x32c>)
 8014766:	f7ed ff2d 	bl	80025c4 <__aeabi_dmul>
 801476a:	4a5e      	ldr	r2, [pc, #376]	@ (80148e4 <__ieee754_log+0x330>)
 801476c:	4b5e      	ldr	r3, [pc, #376]	@ (80148e8 <__ieee754_log+0x334>)
 801476e:	f7ec ff81 	bl	8001674 <__aeabi_dadd>
 8014772:	0022      	movs	r2, r4
 8014774:	002b      	movs	r3, r5
 8014776:	f7ed ff25 	bl	80025c4 <__aeabi_dmul>
 801477a:	4a5c      	ldr	r2, [pc, #368]	@ (80148ec <__ieee754_log+0x338>)
 801477c:	4b5c      	ldr	r3, [pc, #368]	@ (80148f0 <__ieee754_log+0x33c>)
 801477e:	f7ec ff79 	bl	8001674 <__aeabi_dadd>
 8014782:	0022      	movs	r2, r4
 8014784:	002b      	movs	r3, r5
 8014786:	f7ed ff1d 	bl	80025c4 <__aeabi_dmul>
 801478a:	4a5a      	ldr	r2, [pc, #360]	@ (80148f4 <__ieee754_log+0x340>)
 801478c:	4b5a      	ldr	r3, [pc, #360]	@ (80148f8 <__ieee754_log+0x344>)
 801478e:	f7ec ff71 	bl	8001674 <__aeabi_dadd>
 8014792:	9a08      	ldr	r2, [sp, #32]
 8014794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014796:	f7ed ff15 	bl	80025c4 <__aeabi_dmul>
 801479a:	4a58      	ldr	r2, [pc, #352]	@ (80148fc <__ieee754_log+0x348>)
 801479c:	9008      	str	r0, [sp, #32]
 801479e:	9109      	str	r1, [sp, #36]	@ 0x24
 80147a0:	4b57      	ldr	r3, [pc, #348]	@ (8014900 <__ieee754_log+0x34c>)
 80147a2:	0020      	movs	r0, r4
 80147a4:	0029      	movs	r1, r5
 80147a6:	f7ed ff0d 	bl	80025c4 <__aeabi_dmul>
 80147aa:	4a56      	ldr	r2, [pc, #344]	@ (8014904 <__ieee754_log+0x350>)
 80147ac:	4b56      	ldr	r3, [pc, #344]	@ (8014908 <__ieee754_log+0x354>)
 80147ae:	f7ec ff61 	bl	8001674 <__aeabi_dadd>
 80147b2:	0022      	movs	r2, r4
 80147b4:	002b      	movs	r3, r5
 80147b6:	f7ed ff05 	bl	80025c4 <__aeabi_dmul>
 80147ba:	4a54      	ldr	r2, [pc, #336]	@ (801490c <__ieee754_log+0x358>)
 80147bc:	4b54      	ldr	r3, [pc, #336]	@ (8014910 <__ieee754_log+0x35c>)
 80147be:	f7ec ff59 	bl	8001674 <__aeabi_dadd>
 80147c2:	0022      	movs	r2, r4
 80147c4:	002b      	movs	r3, r5
 80147c6:	f7ed fefd 	bl	80025c4 <__aeabi_dmul>
 80147ca:	0002      	movs	r2, r0
 80147cc:	000b      	movs	r3, r1
 80147ce:	9808      	ldr	r0, [sp, #32]
 80147d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80147d2:	f7ec ff4f 	bl	8001674 <__aeabi_dadd>
 80147d6:	9a02      	ldr	r2, [sp, #8]
 80147d8:	4b4e      	ldr	r3, [pc, #312]	@ (8014914 <__ieee754_log+0x360>)
 80147da:	0004      	movs	r4, r0
 80147dc:	1a9b      	subs	r3, r3, r2
 80147de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80147e0:	000d      	movs	r5, r1
 80147e2:	4313      	orrs	r3, r2
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	dd34      	ble.n	8014852 <__ieee754_log+0x29e>
 80147e8:	2200      	movs	r2, #0
 80147ea:	4b3a      	ldr	r3, [pc, #232]	@ (80148d4 <__ieee754_log+0x320>)
 80147ec:	0030      	movs	r0, r6
 80147ee:	0039      	movs	r1, r7
 80147f0:	f7ed fee8 	bl	80025c4 <__aeabi_dmul>
 80147f4:	0032      	movs	r2, r6
 80147f6:	003b      	movs	r3, r7
 80147f8:	f7ed fee4 	bl	80025c4 <__aeabi_dmul>
 80147fc:	0002      	movs	r2, r0
 80147fe:	000b      	movs	r3, r1
 8014800:	9002      	str	r0, [sp, #8]
 8014802:	9103      	str	r1, [sp, #12]
 8014804:	0020      	movs	r0, r4
 8014806:	0029      	movs	r1, r5
 8014808:	f7ec ff34 	bl	8001674 <__aeabi_dadd>
 801480c:	9a04      	ldr	r2, [sp, #16]
 801480e:	9b05      	ldr	r3, [sp, #20]
 8014810:	f7ed fed8 	bl	80025c4 <__aeabi_dmul>
 8014814:	9b00      	ldr	r3, [sp, #0]
 8014816:	0004      	movs	r4, r0
 8014818:	000d      	movs	r5, r1
 801481a:	2b00      	cmp	r3, #0
 801481c:	d106      	bne.n	801482c <__ieee754_log+0x278>
 801481e:	0002      	movs	r2, r0
 8014820:	000b      	movs	r3, r1
 8014822:	9802      	ldr	r0, [sp, #8]
 8014824:	9903      	ldr	r1, [sp, #12]
 8014826:	f7ee f995 	bl	8002b54 <__aeabi_dsub>
 801482a:	e74f      	b.n	80146cc <__ieee754_log+0x118>
 801482c:	4a23      	ldr	r2, [pc, #140]	@ (80148bc <__ieee754_log+0x308>)
 801482e:	4b24      	ldr	r3, [pc, #144]	@ (80148c0 <__ieee754_log+0x30c>)
 8014830:	9806      	ldr	r0, [sp, #24]
 8014832:	9907      	ldr	r1, [sp, #28]
 8014834:	f7ed fec6 	bl	80025c4 <__aeabi_dmul>
 8014838:	4a22      	ldr	r2, [pc, #136]	@ (80148c4 <__ieee754_log+0x310>)
 801483a:	9000      	str	r0, [sp, #0]
 801483c:	9101      	str	r1, [sp, #4]
 801483e:	9806      	ldr	r0, [sp, #24]
 8014840:	9907      	ldr	r1, [sp, #28]
 8014842:	4b21      	ldr	r3, [pc, #132]	@ (80148c8 <__ieee754_log+0x314>)
 8014844:	f7ed febe 	bl	80025c4 <__aeabi_dmul>
 8014848:	0022      	movs	r2, r4
 801484a:	002b      	movs	r3, r5
 801484c:	f7ec ff12 	bl	8001674 <__aeabi_dadd>
 8014850:	e754      	b.n	80146fc <__ieee754_log+0x148>
 8014852:	0002      	movs	r2, r0
 8014854:	000b      	movs	r3, r1
 8014856:	0030      	movs	r0, r6
 8014858:	0039      	movs	r1, r7
 801485a:	f7ee f97b 	bl	8002b54 <__aeabi_dsub>
 801485e:	9a04      	ldr	r2, [sp, #16]
 8014860:	9b05      	ldr	r3, [sp, #20]
 8014862:	f7ed feaf 	bl	80025c4 <__aeabi_dmul>
 8014866:	9b00      	ldr	r3, [sp, #0]
 8014868:	0004      	movs	r4, r0
 801486a:	000d      	movs	r5, r1
 801486c:	2b00      	cmp	r3, #0
 801486e:	d102      	bne.n	8014876 <__ieee754_log+0x2c2>
 8014870:	0002      	movs	r2, r0
 8014872:	000b      	movs	r3, r1
 8014874:	e72c      	b.n	80146d0 <__ieee754_log+0x11c>
 8014876:	4a11      	ldr	r2, [pc, #68]	@ (80148bc <__ieee754_log+0x308>)
 8014878:	4b11      	ldr	r3, [pc, #68]	@ (80148c0 <__ieee754_log+0x30c>)
 801487a:	9806      	ldr	r0, [sp, #24]
 801487c:	9907      	ldr	r1, [sp, #28]
 801487e:	f7ed fea1 	bl	80025c4 <__aeabi_dmul>
 8014882:	4a10      	ldr	r2, [pc, #64]	@ (80148c4 <__ieee754_log+0x310>)
 8014884:	9000      	str	r0, [sp, #0]
 8014886:	9101      	str	r1, [sp, #4]
 8014888:	9806      	ldr	r0, [sp, #24]
 801488a:	9907      	ldr	r1, [sp, #28]
 801488c:	4b0e      	ldr	r3, [pc, #56]	@ (80148c8 <__ieee754_log+0x314>)
 801488e:	f7ed fe99 	bl	80025c4 <__aeabi_dmul>
 8014892:	0002      	movs	r2, r0
 8014894:	000b      	movs	r3, r1
 8014896:	0020      	movs	r0, r4
 8014898:	0029      	movs	r1, r5
 801489a:	e733      	b.n	8014704 <__ieee754_log+0x150>
 801489c:	2000      	movs	r0, #0
 801489e:	2100      	movs	r1, #0
 80148a0:	e699      	b.n	80145d6 <__ieee754_log+0x22>
 80148a2:	46c0      	nop			@ (mov r8, r8)
 80148a4:	c3500000 	.word	0xc3500000
 80148a8:	43500000 	.word	0x43500000
 80148ac:	7fefffff 	.word	0x7fefffff
 80148b0:	fffffc01 	.word	0xfffffc01
 80148b4:	00095f64 	.word	0x00095f64
 80148b8:	3ff00000 	.word	0x3ff00000
 80148bc:	fee00000 	.word	0xfee00000
 80148c0:	3fe62e42 	.word	0x3fe62e42
 80148c4:	35793c76 	.word	0x35793c76
 80148c8:	3dea39ef 	.word	0x3dea39ef
 80148cc:	55555555 	.word	0x55555555
 80148d0:	3fd55555 	.word	0x3fd55555
 80148d4:	3fe00000 	.word	0x3fe00000
 80148d8:	fff9eb86 	.word	0xfff9eb86
 80148dc:	df3e5244 	.word	0xdf3e5244
 80148e0:	3fc2f112 	.word	0x3fc2f112
 80148e4:	96cb03de 	.word	0x96cb03de
 80148e8:	3fc74664 	.word	0x3fc74664
 80148ec:	94229359 	.word	0x94229359
 80148f0:	3fd24924 	.word	0x3fd24924
 80148f4:	55555593 	.word	0x55555593
 80148f8:	3fe55555 	.word	0x3fe55555
 80148fc:	d078c69f 	.word	0xd078c69f
 8014900:	3fc39a09 	.word	0x3fc39a09
 8014904:	1d8e78af 	.word	0x1d8e78af
 8014908:	3fcc71c5 	.word	0x3fcc71c5
 801490c:	9997fa04 	.word	0x9997fa04
 8014910:	3fd99999 	.word	0x3fd99999
 8014914:	0006b851 	.word	0x0006b851

08014918 <_init>:
 8014918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801491a:	46c0      	nop			@ (mov r8, r8)
 801491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801491e:	bc08      	pop	{r3}
 8014920:	469e      	mov	lr, r3
 8014922:	4770      	bx	lr

08014924 <_fini>:
 8014924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014926:	46c0      	nop			@ (mov r8, r8)
 8014928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801492a:	bc08      	pop	{r3}
 801492c:	469e      	mov	lr, r3
 801492e:	4770      	bx	lr
