
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aeb0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001208  0801af70  0801af70  0001bf70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c178  0801c178  0001e3c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c178  0801c178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c180  0801c180  0001e3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c180  0801c180  0001d180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c184  0801c184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  0801c188  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c48  200003c8  0801c550  0001e3c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20004010  0801c550  0001f010  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c189  00000000  00000000  0001e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000081a1  00000000  00000000  0004a579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002548  00000000  00000000  00052720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c50  00000000  00000000  00054c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021212  00000000  00000000  000568b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003af04  00000000  00000000  00077aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d551  00000000  00000000  000b29ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ff1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009934  00000000  00000000  0014ff64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00159898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801af58 	.word	0x0801af58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	0801af58 	.word	0x0801af58

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801ba68 	.word	0x0801ba68
 8000d08:	0801baa8 	.word	0x0801baa8
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801bae4 	.word	0x0801bae4
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 fd28 	bl	800afb4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 fd7f 	bl	800b084 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 fd32 	bl	800b010 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	200003e4 	.word	0x200003e4

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fcad 	bl	800afb4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 fcdc 	bl	800b02c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fcc0 	bl	800b010 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f001 ff04 	bl	80054a8 <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f001 ff61 	bl	800556c <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	2000050c 	.word	0x2000050c
 80036bc:	20000510 	.word	0x20000510

080036c0 <setMeasurement>:

void setMeasurement(float temp, float humid, uint16_t voc){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <setMeasurement+0x2c>)
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <setMeasurement+0x30>)
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <setMeasurement+0x34>)
 80036dc:	1dba      	adds	r2, r7, #6
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	801a      	strh	r2, [r3, #0]
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	20000504 	.word	0x20000504
 80036f0:	20000508 	.word	0x20000508
 80036f4:	20000514 	.word	0x20000514

080036f8 <setMic>:
void setMic(float dB){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <setMic+0x18>)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	20000518 	.word	0x20000518

08003714 <SetConfigMode>:

void SetConfigMode(){
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003718:	4b02      	ldr	r3, [pc, #8]	@ (8003724 <SetConfigMode+0x10>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200004f2 	.word	0x200004f2

08003728 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 800372c:	f006 fc0e 	bl	8009f4c <HAL_GetUIDw0>
 8003730:	0002      	movs	r2, r0
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <ESP_GetUID+0x28>)
 8003734:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003736:	f006 fc13 	bl	8009f60 <HAL_GetUIDw1>
 800373a:	0002      	movs	r2, r0
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <ESP_GetUID+0x28>)
 800373e:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003740:	f006 fc18 	bl	8009f74 <HAL_GetUIDw2>
 8003744:	0002      	movs	r2, r0
 8003746:	4b02      	ldr	r3, [pc, #8]	@ (8003750 <ESP_GetUID+0x28>)
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200004f8 	.word	0x200004f8

08003754 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <ESP_Init+0x20>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003762:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <ESP_Init+0x24>)
 8003764:	2202      	movs	r2, #2
 8003766:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003768:	f7ff ffde 	bl	8003728 <ESP_GetUID>
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	200003e8 	.word	0x200003e8
 8003778:	2000001d 	.word	0x2000001d

0800377c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	000a      	movs	r2, r1
 8003786:	1cbb      	adds	r3, r7, #2
 8003788:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <ESP_Send+0x48>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	250f      	movs	r5, #15
 8003790:	197c      	adds	r4, r7, r5
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0019      	movs	r1, r3
 800379a:	f00d ffc3 	bl	8011724 <HAL_UART_Transmit_DMA>
 800379e:	0003      	movs	r3, r0
 80037a0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037a2:	197b      	adds	r3, r7, r5
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037aa:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <ESP_Send+0x4c>)
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <ESP_Send+0x50>)
 80037ae:	0019      	movs	r1, r3
 80037b0:	2003      	movs	r0, #3
 80037b2:	f006 f801 	bl	80097b8 <CreateLine>
    return false;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <ESP_Send+0x40>
  }
  return true;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}
 80037c4:	200003e8 	.word	0x200003e8
 80037c8:	0801af70 	.word	0x0801af70
 80037cc:	0801af90 	.word	0x0801af90

080037d0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037d0:	b5b0      	push	{r4, r5, r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	000a      	movs	r2, r1
 80037da:	1cfb      	adds	r3, r7, #3
 80037dc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037de:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <ESP_Receive+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <ESP_Receive+0x5c>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	1cfb      	adds	r3, r7, #3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	250f      	movs	r5, #15
 80037f0:	197c      	adds	r4, r7, r5
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0019      	movs	r1, r3
 80037f6:	f00e f825 	bl	8011844 <HAL_UART_Receive_DMA>
 80037fa:	0003      	movs	r3, r0
 80037fc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037fe:	197b      	adds	r3, r7, r5
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <ESP_Receive+0x60>)
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <ESP_Receive+0x64>)
 800380a:	0019      	movs	r1, r3
 800380c:	2003      	movs	r0, #3
 800380e:	f005 ffd3 	bl	80097b8 <CreateLine>
    RxComplete = true;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <ESP_Receive+0x58>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
    return false;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <ESP_Receive+0x4e>
  }
  return true;
 800381c:	2301      	movs	r3, #1
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	200003ec 	.word	0x200003ec
 800382c:	200003e8 	.word	0x200003e8
 8003830:	0801af94 	.word	0x0801af94
 8003834:	0801af90 	.word	0x0801af90

08003838 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_UART_RxCpltCallback+0x2c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d108      	bne.n	800385c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_UART_RxCpltCallback+0x30>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003850:	4a06      	ldr	r2, [pc, #24]	@ (800386c <HAL_UART_RxCpltCallback+0x34>)
 8003852:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <HAL_UART_RxCpltCallback+0x38>)
 8003854:	0019      	movs	r1, r3
 8003856:	2003      	movs	r0, #3
 8003858:	f005 ffae 	bl	80097b8 <CreateLine>
  }
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200003e8 	.word	0x200003e8
 8003868:	200003ec 	.word	0x200003ec
 800386c:	0801afb4 	.word	0x0801afb4
 8003870:	0801af90 	.word	0x0801af90

08003874 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
    // Handle error
    //EspState = ESP_STATE_ERROR;
  }
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e010      	b.n	80038b6 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	001a      	movs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1898      	adds	r0, r3, r2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	18d3      	adds	r3, r2, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	001a      	movs	r2, r3
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <uint8ArrayToString+0x44>)
 80038aa:	0019      	movs	r1, r3
 80038ac:	f014 fbb6 	bl	801801c <siprintf>
  for (int i = 0; i < 12; i++)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3301      	adds	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b0b      	cmp	r3, #11
 80038ba:	ddeb      	ble.n	8003894 <uint8ArrayToString+0x10>
  }
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b004      	add	sp, #16
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	0801afc0 	.word	0x0801afc0

080038cc <CreateMessage>:
uint16_t CreateMessage(){
 80038cc:	b5b0      	push	{r4, r5, r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af04      	add	r7, sp, #16
  uint16_t messageLength = 0;
 80038d2:	1dbb      	adds	r3, r7, #6
 80038d4:	2200      	movs	r2, #0
 80038d6:	801a      	strh	r2, [r3, #0]
  static uint8_t humidConfig[IdSize];
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80038d8:	4b71      	ldr	r3, [pc, #452]	@ (8003aa0 <CreateMessage+0x1d4>)
 80038da:	4872      	ldr	r0, [pc, #456]	@ (8003aa4 <CreateMessage+0x1d8>)
 80038dc:	220c      	movs	r2, #12
 80038de:	0019      	movs	r1, r3
 80038e0:	f7ff fe89 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 80038e4:	4b70      	ldr	r3, [pc, #448]	@ (8003aa8 <CreateMessage+0x1dc>)
 80038e6:	4871      	ldr	r0, [pc, #452]	@ (8003aac <CreateMessage+0x1e0>)
 80038e8:	220c      	movs	r2, #12
 80038ea:	0019      	movs	r1, r3
 80038ec:	f7ff fe83 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 80038f0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab0 <CreateMessage+0x1e4>)
 80038f2:	4870      	ldr	r0, [pc, #448]	@ (8003ab4 <CreateMessage+0x1e8>)
 80038f4:	220c      	movs	r2, #12
 80038f6:	0019      	movs	r1, r3
 80038f8:	f7ff fe7d 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 80038fc:	4b6e      	ldr	r3, [pc, #440]	@ (8003ab8 <CreateMessage+0x1ec>)
 80038fe:	486f      	ldr	r0, [pc, #444]	@ (8003abc <CreateMessage+0x1f0>)
 8003900:	220c      	movs	r2, #12
 8003902:	0019      	movs	r1, r3
 8003904:	f7ff fe77 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003908:	4b6d      	ldr	r3, [pc, #436]	@ (8003ac0 <CreateMessage+0x1f4>)
 800390a:	486e      	ldr	r0, [pc, #440]	@ (8003ac4 <CreateMessage+0x1f8>)
 800390c:	220c      	movs	r2, #12
 800390e:	0019      	movs	r1, r3
 8003910:	f7ff fe71 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003914:	4b6c      	ldr	r3, [pc, #432]	@ (8003ac8 <CreateMessage+0x1fc>)
 8003916:	486d      	ldr	r0, [pc, #436]	@ (8003acc <CreateMessage+0x200>)
 8003918:	221e      	movs	r2, #30
 800391a:	0019      	movs	r1, r3
 800391c:	f7ff fe6b 	bl	80035f6 <ReadUint8ArrayEEprom>
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003920:	f7ff feba 	bl	8003698 <setCharges>
  uint8ArrayToString(Buffer, tempConfig);
 8003924:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa0 <CreateMessage+0x1d4>)
 8003926:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad0 <CreateMessage+0x204>)
 8003928:	0011      	movs	r1, r2
 800392a:	0018      	movs	r0, r3
 800392c:	f7ff ffaa 	bl	8003884 <uint8ArrayToString>
  sprintf(messagePart1, "\"name\":\"temp\", \"id\": %d, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%3.2f", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003930:	4b68      	ldr	r3, [pc, #416]	@ (8003ad4 <CreateMessage+0x208>)
 8003932:	689c      	ldr	r4, [r3, #8]
 8003934:	4b68      	ldr	r3, [pc, #416]	@ (8003ad8 <CreateMessage+0x20c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	1c18      	adds	r0, r3, #0
 800393a:	f7ff fd11 	bl	8003360 <__aeabi_f2d>
 800393e:	0002      	movs	r2, r0
 8003940:	000b      	movs	r3, r1
 8003942:	4d61      	ldr	r5, [pc, #388]	@ (8003ac8 <CreateMessage+0x1fc>)
 8003944:	4965      	ldr	r1, [pc, #404]	@ (8003adc <CreateMessage+0x210>)
 8003946:	4866      	ldr	r0, [pc, #408]	@ (8003ae0 <CreateMessage+0x214>)
 8003948:	9202      	str	r2, [sp, #8]
 800394a:	9303      	str	r3, [sp, #12]
 800394c:	4b60      	ldr	r3, [pc, #384]	@ (8003ad0 <CreateMessage+0x204>)
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	002b      	movs	r3, r5
 8003952:	0022      	movs	r2, r4
 8003954:	f014 fb62 	bl	801801c <siprintf>
  messageLength += strlen(messagePart1);
 8003958:	4b61      	ldr	r3, [pc, #388]	@ (8003ae0 <CreateMessage+0x214>)
 800395a:	0018      	movs	r0, r3
 800395c:	f7fc fbd4 	bl	8000108 <strlen>
 8003960:	0003      	movs	r3, r0
 8003962:	b299      	uxth	r1, r3
 8003964:	1dbb      	adds	r3, r7, #6
 8003966:	1dba      	adds	r2, r7, #6
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	188a      	adds	r2, r1, r2
 800396c:	801a      	strh	r2, [r3, #0]
  uint8ArrayToString(Buffer, humidConfig);
 800396e:	4a4e      	ldr	r2, [pc, #312]	@ (8003aa8 <CreateMessage+0x1dc>)
 8003970:	4b57      	ldr	r3, [pc, #348]	@ (8003ad0 <CreateMessage+0x204>)
 8003972:	0011      	movs	r1, r2
 8003974:	0018      	movs	r0, r3
 8003976:	f7ff ff85 	bl	8003884 <uint8ArrayToString>
  sprintf(messagePart2, "\"name\":\"humid\", \"id\": %d, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%3.2f", uid[2], (char*)nameConfig, Buffer, Humidity);
 800397a:	4b56      	ldr	r3, [pc, #344]	@ (8003ad4 <CreateMessage+0x208>)
 800397c:	689c      	ldr	r4, [r3, #8]
 800397e:	4b59      	ldr	r3, [pc, #356]	@ (8003ae4 <CreateMessage+0x218>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1c18      	adds	r0, r3, #0
 8003984:	f7ff fcec 	bl	8003360 <__aeabi_f2d>
 8003988:	0002      	movs	r2, r0
 800398a:	000b      	movs	r3, r1
 800398c:	4d4e      	ldr	r5, [pc, #312]	@ (8003ac8 <CreateMessage+0x1fc>)
 800398e:	4956      	ldr	r1, [pc, #344]	@ (8003ae8 <CreateMessage+0x21c>)
 8003990:	4856      	ldr	r0, [pc, #344]	@ (8003aec <CreateMessage+0x220>)
 8003992:	9202      	str	r2, [sp, #8]
 8003994:	9303      	str	r3, [sp, #12]
 8003996:	4b4e      	ldr	r3, [pc, #312]	@ (8003ad0 <CreateMessage+0x204>)
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	002b      	movs	r3, r5
 800399c:	0022      	movs	r2, r4
 800399e:	f014 fb3d 	bl	801801c <siprintf>
  messageLength += strlen(messagePart2);
 80039a2:	4b52      	ldr	r3, [pc, #328]	@ (8003aec <CreateMessage+0x220>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fc fbaf 	bl	8000108 <strlen>
 80039aa:	0003      	movs	r3, r0
 80039ac:	b299      	uxth	r1, r3
 80039ae:	1dbb      	adds	r3, r7, #6
 80039b0:	1dba      	adds	r2, r7, #6
 80039b2:	8812      	ldrh	r2, [r2, #0]
 80039b4:	188a      	adds	r2, r1, r2
 80039b6:	801a      	strh	r2, [r3, #0]
  uint8ArrayToString(Buffer, soundConfig);
 80039b8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab0 <CreateMessage+0x1e4>)
 80039ba:	4b45      	ldr	r3, [pc, #276]	@ (8003ad0 <CreateMessage+0x204>)
 80039bc:	0011      	movs	r1, r2
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff ff60 	bl	8003884 <uint8ArrayToString>
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\": %d, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%3.2f", uid[2], (char*)nameConfig, Buffer, dBC);
 80039c4:	4b43      	ldr	r3, [pc, #268]	@ (8003ad4 <CreateMessage+0x208>)
 80039c6:	689c      	ldr	r4, [r3, #8]
 80039c8:	4b49      	ldr	r3, [pc, #292]	@ (8003af0 <CreateMessage+0x224>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1c18      	adds	r0, r3, #0
 80039ce:	f7ff fcc7 	bl	8003360 <__aeabi_f2d>
 80039d2:	0002      	movs	r2, r0
 80039d4:	000b      	movs	r3, r1
 80039d6:	4d3c      	ldr	r5, [pc, #240]	@ (8003ac8 <CreateMessage+0x1fc>)
 80039d8:	4946      	ldr	r1, [pc, #280]	@ (8003af4 <CreateMessage+0x228>)
 80039da:	4847      	ldr	r0, [pc, #284]	@ (8003af8 <CreateMessage+0x22c>)
 80039dc:	9202      	str	r2, [sp, #8]
 80039de:	9303      	str	r3, [sp, #12]
 80039e0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad0 <CreateMessage+0x204>)
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	002b      	movs	r3, r5
 80039e6:	0022      	movs	r2, r4
 80039e8:	f014 fb18 	bl	801801c <siprintf>
  messageLength += strlen(messagePart3);
 80039ec:	4b42      	ldr	r3, [pc, #264]	@ (8003af8 <CreateMessage+0x22c>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc fb8a 	bl	8000108 <strlen>
 80039f4:	0003      	movs	r3, r0
 80039f6:	b299      	uxth	r1, r3
 80039f8:	1dbb      	adds	r3, r7, #6
 80039fa:	1dba      	adds	r2, r7, #6
 80039fc:	8812      	ldrh	r2, [r2, #0]
 80039fe:	188a      	adds	r2, r1, r2
 8003a00:	801a      	strh	r2, [r3, #0]
  uint8ArrayToString(Buffer, vocConfig);
 8003a02:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab8 <CreateMessage+0x1ec>)
 8003a04:	4b32      	ldr	r3, [pc, #200]	@ (8003ad0 <CreateMessage+0x204>)
 8003a06:	0011      	movs	r1, r2
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff ff3b 	bl	8003884 <uint8ArrayToString>
  sprintf(messagePart4, "\"name\":\"voc\", \"id\": %d, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003a0e:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <CreateMessage+0x208>)
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4b3a      	ldr	r3, [pc, #232]	@ (8003afc <CreateMessage+0x230>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	4c2c      	ldr	r4, [pc, #176]	@ (8003ac8 <CreateMessage+0x1fc>)
 8003a18:	4939      	ldr	r1, [pc, #228]	@ (8003b00 <CreateMessage+0x234>)
 8003a1a:	483a      	ldr	r0, [pc, #232]	@ (8003b04 <CreateMessage+0x238>)
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad0 <CreateMessage+0x204>)
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	0023      	movs	r3, r4
 8003a24:	f014 fafa 	bl	801801c <siprintf>
  messageLength += strlen(messagePart4);
 8003a28:	4b36      	ldr	r3, [pc, #216]	@ (8003b04 <CreateMessage+0x238>)
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7fc fb6c 	bl	8000108 <strlen>
 8003a30:	0003      	movs	r3, r0
 8003a32:	b299      	uxth	r1, r3
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	1dba      	adds	r2, r7, #6
 8003a38:	8812      	ldrh	r2, [r2, #0]
 8003a3a:	188a      	adds	r2, r1, r2
 8003a3c:	801a      	strh	r2, [r3, #0]
  uint8ArrayToString(Buffer, batteryConfig);
 8003a3e:	4a20      	ldr	r2, [pc, #128]	@ (8003ac0 <CreateMessage+0x1f4>)
 8003a40:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <CreateMessage+0x204>)
 8003a42:	0011      	movs	r1, r2
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff ff1d 	bl	8003884 <uint8ArrayToString>
  sprintf(messagePart5, "\"name\":\"battery\", \"id\": %d, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%3.2f", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003a4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ad4 <CreateMessage+0x208>)
 8003a4c:	689c      	ldr	r4, [r3, #8]
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b08 <CreateMessage+0x23c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1c18      	adds	r0, r3, #0
 8003a54:	f7ff fc84 	bl	8003360 <__aeabi_f2d>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	000b      	movs	r3, r1
 8003a5c:	4d1a      	ldr	r5, [pc, #104]	@ (8003ac8 <CreateMessage+0x1fc>)
 8003a5e:	492b      	ldr	r1, [pc, #172]	@ (8003b0c <CreateMessage+0x240>)
 8003a60:	482b      	ldr	r0, [pc, #172]	@ (8003b10 <CreateMessage+0x244>)
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <CreateMessage+0x204>)
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	002b      	movs	r3, r5
 8003a6c:	0022      	movs	r2, r4
 8003a6e:	f014 fad5 	bl	801801c <siprintf>
  messageLength += strlen(messagePart5);
 8003a72:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <CreateMessage+0x244>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fc fb47 	bl	8000108 <strlen>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	b299      	uxth	r1, r3
 8003a7e:	1dbb      	adds	r3, r7, #6
 8003a80:	1dba      	adds	r2, r7, #6
 8003a82:	8812      	ldrh	r2, [r2, #0]
 8003a84:	188a      	adds	r2, r1, r2
 8003a86:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	1dba      	adds	r2, r7, #6
 8003a8c:	8812      	ldrh	r2, [r2, #0]
 8003a8e:	3214      	adds	r2, #20
 8003a90:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003a92:	1dbb      	adds	r3, r7, #6
 8003a94:	881b      	ldrh	r3, [r3, #0]
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	20000a48 	.word	0x20000a48
 8003aa4:	0808000c 	.word	0x0808000c
 8003aa8:	20000a54 	.word	0x20000a54
 8003aac:	08080018 	.word	0x08080018
 8003ab0:	20000a60 	.word	0x20000a60
 8003ab4:	08080048 	.word	0x08080048
 8003ab8:	20000a6c 	.word	0x20000a6c
 8003abc:	08080030 	.word	0x08080030
 8003ac0:	20000a78 	.word	0x20000a78
 8003ac4:	0808006c 	.word	0x0808006c
 8003ac8:	20000a84 	.word	0x20000a84
 8003acc:	08080090 	.word	0x08080090
 8003ad0:	20000aa4 	.word	0x20000aa4
 8003ad4:	200004f8 	.word	0x200004f8
 8003ad8:	20000504 	.word	0x20000504
 8003adc:	0801afc8 	.word	0x0801afc8
 8003ae0:	2000051c 	.word	0x2000051c
 8003ae4:	20000508 	.word	0x20000508
 8003ae8:	0801b010 	.word	0x0801b010
 8003aec:	2000059c 	.word	0x2000059c
 8003af0:	20000518 	.word	0x20000518
 8003af4:	0801b058 	.word	0x0801b058
 8003af8:	2000061c 	.word	0x2000061c
 8003afc:	20000514 	.word	0x20000514
 8003b00:	0801b0a0 	.word	0x0801b0a0
 8003b04:	2000069c 	.word	0x2000069c
 8003b08:	2000050c 	.word	0x2000050c
 8003b0c:	0801b0e4 	.word	0x0801b0e4
 8003b10:	2000071c 	.word	0x2000071c

08003b14 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, 656);
 8003b1c:	23a4      	movs	r3, #164	@ 0xa4
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <SetCommandBuffer+0x24>)
 8003b24:	0018      	movs	r0, r3
 8003b26:	f014 fb33 	bl	8018190 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003b2a:	4b04      	ldr	r3, [pc, #16]	@ (8003b3c <SetCommandBuffer+0x28>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200007b0 	.word	0x200007b0
 8003b3c:	20000a40 	.word	0x20000a40

08003b40 <StartProg>:
void StartProg(){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003b44:	2064      	movs	r0, #100	@ 0x64
 8003b46:	f006 f9dd 	bl	8009f04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <StartProg+0x60>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2101      	movs	r1, #1
 8003b50:	0018      	movs	r0, r3
 8003b52:	f007 fd6c 	bl	800b62e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003b56:	2064      	movs	r0, #100	@ 0x64
 8003b58:	f006 f9d4 	bl	8009f04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003b5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <StartProg+0x60>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2102      	movs	r1, #2
 8003b62:	0018      	movs	r0, r3
 8003b64:	f007 fd63 	bl	800b62e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003b68:	23fa      	movs	r3, #250	@ 0xfa
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f006 f9c9 	bl	8009f04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <StartProg+0x60>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	2101      	movs	r1, #1
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f007 fd58 	bl	800b62e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003b7e:	23fa      	movs	r3, #250	@ 0xfa
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	0018      	movs	r0, r3
 8003b84:	f006 f9be 	bl	8009f04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <StartProg+0x60>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f007 fd4d 	bl	800b62e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003b94:	2028      	movs	r0, #40	@ 0x28
 8003b96:	f006 f9b5 	bl	8009f04 <HAL_Delay>
}
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	50001c00 	.word	0x50001c00

08003ba4 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	46c6      	mov	lr, r8
 8003ba8:	b500      	push	{lr}
 8003baa:	b09a      	sub	sp, #104	@ 0x68
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	61f8      	str	r0, [r7, #28]
 8003bb0:	0008      	movs	r0, r1
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	261a      	movs	r6, #26
 8003bb6:	19bb      	adds	r3, r7, r6
 8003bb8:	1c02      	adds	r2, r0, #0
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	2319      	movs	r3, #25
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	1c0a      	adds	r2, r1, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	466b      	mov	r3, sp
 8003bc6:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003bc8:	19bb      	adds	r3, r7, r6
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	1e5a      	subs	r2, r3, #1
 8003bd0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	60ba      	str	r2, [r7, #8]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60fa      	str	r2, [r7, #12]
 8003bda:	68b8      	ldr	r0, [r7, #8]
 8003bdc:	68f9      	ldr	r1, [r7, #12]
 8003bde:	0002      	movs	r2, r0
 8003be0:	0f52      	lsrs	r2, r2, #29
 8003be2:	000e      	movs	r6, r1
 8003be4:	00f6      	lsls	r6, r6, #3
 8003be6:	617e      	str	r6, [r7, #20]
 8003be8:	697e      	ldr	r6, [r7, #20]
 8003bea:	4316      	orrs	r6, r2
 8003bec:	617e      	str	r6, [r7, #20]
 8003bee:	0002      	movs	r2, r0
 8003bf0:	00d2      	lsls	r2, r2, #3
 8003bf2:	613a      	str	r2, [r7, #16]
 8003bf4:	001a      	movs	r2, r3
 8003bf6:	603a      	str	r2, [r7, #0]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	6838      	ldr	r0, [r7, #0]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	0002      	movs	r2, r0
 8003c02:	0f52      	lsrs	r2, r2, #29
 8003c04:	000e      	movs	r6, r1
 8003c06:	00f5      	lsls	r5, r6, #3
 8003c08:	4315      	orrs	r5, r2
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	00d4      	lsls	r4, r2, #3
 8003c0e:	3307      	adds	r3, #7
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	466a      	mov	r2, sp
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	469d      	mov	sp, r3
 8003c1a:	466b      	mov	r3, sp
 8003c1c:	3300      	adds	r3, #0
 8003c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003c20:	234f      	movs	r3, #79	@ 0x4f
 8003c22:	2118      	movs	r1, #24
 8003c24:	185b      	adds	r3, r3, r1
 8003c26:	19db      	adds	r3, r3, r7
 8003c28:	2203      	movs	r2, #3
 8003c2a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003c2c:	234c      	movs	r3, #76	@ 0x4c
 8003c2e:	185b      	adds	r3, r3, r1
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	2200      	movs	r2, #0
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e013      	b.n	8003c60 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003c38:	204c      	movs	r0, #76	@ 0x4c
 8003c3a:	2418      	movs	r4, #24
 8003c3c:	1903      	adds	r3, r0, r4
 8003c3e:	19db      	adds	r3, r3, r7
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	18d2      	adds	r2, r2, r3
 8003c46:	1903      	adds	r3, r0, r4
 8003c48:	19db      	adds	r3, r3, r7
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	7811      	ldrb	r1, [r2, #0]
 8003c4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c50:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003c52:	1903      	adds	r3, r0, r4
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	881a      	ldrh	r2, [r3, #0]
 8003c58:	1903      	adds	r3, r0, r4
 8003c5a:	19db      	adds	r3, r3, r7
 8003c5c:	3201      	adds	r2, #1
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	234c      	movs	r3, #76	@ 0x4c
 8003c62:	2018      	movs	r0, #24
 8003c64:	181b      	adds	r3, r3, r0
 8003c66:	19da      	adds	r2, r3, r7
 8003c68:	211a      	movs	r1, #26
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d3e1      	bcc.n	8003c38 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003c7e:	233f      	movs	r3, #63	@ 0x3f
 8003c80:	0006      	movs	r6, r0
 8003c82:	199b      	adds	r3, r3, r6
 8003c84:	19db      	adds	r3, r3, r7
 8003c86:	224e      	movs	r2, #78	@ 0x4e
 8003c88:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003c8a:	2530      	movs	r5, #48	@ 0x30
 8003c8c:	19ab      	adds	r3, r5, r6
 8003c8e:	19db      	adds	r3, r3, r7
 8003c90:	4a60      	ldr	r2, [pc, #384]	@ (8003e14 <ParseBuffer+0x270>)
 8003c92:	8811      	ldrh	r1, [r2, #0]
 8003c94:	8019      	strh	r1, [r3, #0]
 8003c96:	7892      	ldrb	r2, [r2, #2]
 8003c98:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003c9a:	2328      	movs	r3, #40	@ 0x28
 8003c9c:	199b      	adds	r3, r3, r6
 8003c9e:	19db      	adds	r3, r3, r7
 8003ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e18 <ParseBuffer+0x274>)
 8003ca2:	6811      	ldr	r1, [r2, #0]
 8003ca4:	6019      	str	r1, [r3, #0]
 8003ca6:	8892      	ldrh	r2, [r2, #4]
 8003ca8:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003caa:	2320      	movs	r3, #32
 8003cac:	199b      	adds	r3, r3, r6
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	4a5a      	ldr	r2, [pc, #360]	@ (8003e1c <ParseBuffer+0x278>)
 8003cb2:	6811      	ldr	r1, [r2, #0]
 8003cb4:	6019      	str	r1, [r3, #0]
 8003cb6:	8892      	ldrh	r2, [r2, #4]
 8003cb8:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003cba:	231c      	movs	r3, #28
 8003cbc:	199b      	adds	r3, r3, r6
 8003cbe:	19db      	adds	r3, r3, r7
 8003cc0:	223e      	movs	r2, #62	@ 0x3e
 8003cc2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	199b      	adds	r3, r3, r6
 8003cc8:	19db      	adds	r3, r3, r7
 8003cca:	4a55      	ldr	r2, [pc, #340]	@ (8003e20 <ParseBuffer+0x27c>)
 8003ccc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003cce:	c313      	stmia	r3!, {r0, r1, r4}
 8003cd0:	8811      	ldrh	r1, [r2, #0]
 8003cd2:	8019      	strh	r1, [r3, #0]
 8003cd4:	7892      	ldrb	r2, [r2, #2]
 8003cd6:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003cd8:	2319      	movs	r3, #25
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003ce2:	19ab      	adds	r3, r5, r6
 8003ce4:	19da      	adds	r2, r3, r7
 8003ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f014 fa64 	bl	80181b8 <strstr>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003cf4:	2319      	movs	r3, #25
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10a      	bne.n	8003d14 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003cfe:	2320      	movs	r3, #32
 8003d00:	2218      	movs	r2, #24
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	19da      	adds	r2, r3, r7
 8003d06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d08:	0011      	movs	r1, r2
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f014 fa54 	bl	80181b8 <strstr>
 8003d10:	0003      	movs	r3, r0
 8003d12:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003d14:	2319      	movs	r3, #25
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d10a      	bne.n	8003d34 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003d1e:	231c      	movs	r3, #28
 8003d20:	2218      	movs	r2, #24
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	19da      	adds	r2, r3, r7
 8003d26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d28:	0011      	movs	r1, r2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f014 fa44 	bl	80181b8 <strstr>
 8003d30:	0003      	movs	r3, r0
 8003d32:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003d34:	2328      	movs	r3, #40	@ 0x28
 8003d36:	2418      	movs	r4, #24
 8003d38:	191b      	adds	r3, r3, r4
 8003d3a:	19da      	adds	r2, r3, r7
 8003d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f014 fa39 	bl	80181b8 <strstr>
 8003d46:	0003      	movs	r3, r0
 8003d48:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	191b      	adds	r3, r3, r4
 8003d4e:	19da      	adds	r2, r3, r7
 8003d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d52:	0011      	movs	r1, r2
 8003d54:	0018      	movs	r0, r3
 8003d56:	f014 fa2f 	bl	80181b8 <strstr>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003d5e:	231a      	movs	r3, #26
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d948      	bls.n	8003dfa <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003d68:	213f      	movs	r1, #63	@ 0x3f
 8003d6a:	190b      	adds	r3, r1, r4
 8003d6c:	19db      	adds	r3, r3, r7
 8003d6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d70:	7812      	ldrb	r2, [r2, #0]
 8003d72:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003d74:	190b      	adds	r3, r1, r4
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003d7c:	d104      	bne.n	8003d88 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003d7e:	234f      	movs	r3, #79	@ 0x4f
 8003d80:	191b      	adds	r3, r3, r4
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003d88:	233f      	movs	r3, #63	@ 0x3f
 8003d8a:	2218      	movs	r2, #24
 8003d8c:	189b      	adds	r3, r3, r2
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b72      	cmp	r3, #114	@ 0x72
 8003d94:	d104      	bne.n	8003da0 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003d96:	234f      	movs	r3, #79	@ 0x4f
 8003d98:	189b      	adds	r3, r3, r2
 8003d9a:	19db      	adds	r3, r3, r7
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003da0:	233f      	movs	r3, #63	@ 0x3f
 8003da2:	2218      	movs	r2, #24
 8003da4:	189b      	adds	r3, r3, r2
 8003da6:	19db      	adds	r3, r3, r7
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dac:	d104      	bne.n	8003db8 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003dae:	234f      	movs	r3, #79	@ 0x4f
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	19db      	adds	r3, r3, r7
 8003db4:	2205      	movs	r2, #5
 8003db6:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003db8:	213f      	movs	r1, #63	@ 0x3f
 8003dba:	2018      	movs	r0, #24
 8003dbc:	180b      	adds	r3, r1, r0
 8003dbe:	19db      	adds	r3, r3, r7
 8003dc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	188b      	adds	r3, r1, r2
 8003dca:	19db      	adds	r3, r3, r7
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b45      	cmp	r3, #69	@ 0x45
 8003dd0:	d104      	bne.n	8003ddc <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003dd2:	234f      	movs	r3, #79	@ 0x4f
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	19db      	adds	r3, r3, r7
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003ddc:	213f      	movs	r1, #63	@ 0x3f
 8003dde:	2018      	movs	r0, #24
 8003de0:	180b      	adds	r3, r1, r0
 8003de2:	19db      	adds	r3, r3, r7
 8003de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003dea:	180b      	adds	r3, r1, r0
 8003dec:	19db      	adds	r3, r3, r7
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b57      	cmp	r3, #87	@ 0x57
 8003df2:	d102      	bne.n	8003dfa <ParseBuffer+0x256>
      ConnectionMade = true;
 8003df4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <ParseBuffer+0x280>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003dfa:	234f      	movs	r3, #79	@ 0x4f
 8003dfc:	2218      	movs	r2, #24
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	46c5      	mov	sp, r8

}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b01a      	add	sp, #104	@ 0x68
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	46b8      	mov	r8, r7
 8003e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	0801b12c 	.word	0x0801b12c
 8003e18:	0801b130 	.word	0x0801b130
 8003e1c:	0801b138 	.word	0x0801b138
 8003e20:	0801b140 	.word	0x0801b140
 8003e24:	200004f3 	.word	0x200004f3

08003e28 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <PollAwake+0x3c>)
 8003e30:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff fe6d 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fc f963 	bl	8000108 <strlen>
 8003e42:	0003      	movs	r3, r0
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0011      	movs	r1, r2
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f7ff fc96 	bl	800377c <ESP_Send>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d001      	beq.n	8003e58 <PollAwake+0x30>
    return true;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <PollAwake+0x32>
  }
  else{
    return false;
 8003e58:	2300      	movs	r3, #0
  }
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b002      	add	sp, #8
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	0801b150 	.word	0x0801b150

08003e68 <RFPower>:
bool RFPower(){
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <RFPower+0x3c>)
 8003e70:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fe4d 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7fc f943 	bl	8000108 <strlen>
 8003e82:	0003      	movs	r3, r0
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	0011      	movs	r1, r2
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7ff fc76 	bl	800377c <ESP_Send>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <RFPower+0x30>
    return true;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <RFPower+0x32>
  }
  else{
    return false;
 8003e98:	2300      	movs	r3, #0
  }
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b002      	add	sp, #8
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	0801b158 	.word	0x0801b158

08003ea8 <CheckRFPower>:
bool CheckRFPower(){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <CheckRFPower+0x3c>)
 8003eb0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff fe2d 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7fc f923 	bl	8000108 <strlen>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0011      	movs	r1, r2
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7ff fc56 	bl	800377c <ESP_Send>
 8003ed0:	1e03      	subs	r3, r0, #0
 8003ed2:	d001      	beq.n	8003ed8 <CheckRFPower+0x30>
    return true;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <CheckRFPower+0x32>
  }
  else{
    return false;
 8003ed8:	2300      	movs	r3, #0
  }
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b002      	add	sp, #8
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	0801b168 	.word	0x0801b168

08003ee8 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <ATRestore+0x3c>)
 8003ef0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7ff fe0d 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fc f903 	bl	8000108 <strlen>
 8003f02:	0003      	movs	r3, r0
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7ff fc36 	bl	800377c <ESP_Send>
 8003f10:	1e03      	subs	r3, r0, #0
 8003f12:	d001      	beq.n	8003f18 <ATRestore+0x30>
    return true;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <ATRestore+0x32>
  }
  else{
    return false;
 8003f18:	2300      	movs	r3, #0
  }
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	0801b178 	.word	0x0801b178

08003f28 <CWINIT>:
bool CWINIT(){
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <CWINIT+0x3c>)
 8003f30:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fded 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7fc f8e3 	bl	8000108 <strlen>
 8003f42:	0003      	movs	r3, r0
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff fc16 	bl	800377c <ESP_Send>
 8003f50:	1e03      	subs	r3, r0, #0
 8003f52:	d001      	beq.n	8003f58 <CWINIT+0x30>
    return true;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <CWINIT+0x32>
  }
  else{
    return false;
 8003f58:	2300      	movs	r3, #0
  }
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b002      	add	sp, #8
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	0801b188 	.word	0x0801b188

08003f68 <CWMODE1>:
bool CWMODE1(){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <CWMODE1+0x3c>)
 8003f70:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7ff fdcd 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7fc f8c3 	bl	8000108 <strlen>
 8003f82:	0003      	movs	r3, r0
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0011      	movs	r1, r2
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7ff fbf6 	bl	800377c <ESP_Send>
 8003f90:	1e03      	subs	r3, r0, #0
 8003f92:	d001      	beq.n	8003f98 <CWMODE1+0x30>
    return true;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <CWMODE1+0x32>
  }
  else{
    return false;
 8003f98:	2300      	movs	r3, #0
  }
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b002      	add	sp, #8
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	0801b198 	.word	0x0801b198

08003fa8 <CWMODE2>:
bool CWMODE2(){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8003fae:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <CWMODE2+0x3c>)
 8003fb0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7ff fdad 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7fc f8a3 	bl	8000108 <strlen>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0011      	movs	r1, r2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7ff fbd6 	bl	800377c <ESP_Send>
 8003fd0:	1e03      	subs	r3, r0, #0
 8003fd2:	d001      	beq.n	8003fd8 <CWMODE2+0x30>
    return true;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <CWMODE2+0x32>
  }
  else{
    return false;
 8003fd8:	2300      	movs	r3, #0
  }
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b002      	add	sp, #8
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	0801b1a8 	.word	0x0801b1a8

08003fe8 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003fee:	4b0d      	ldr	r3, [pc, #52]	@ (8004024 <CWAUTOCONN+0x3c>)
 8003ff0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7ff fd8d 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7fc f883 	bl	8000108 <strlen>
 8004002:	0003      	movs	r3, r0
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff fbb6 	bl	800377c <ESP_Send>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d001      	beq.n	8004018 <CWAUTOCONN+0x30>
    return true;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8004018:	2300      	movs	r3, #0
  }
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b002      	add	sp, #8
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	0801b1b8 	.word	0x0801b1b8

08004028 <CWJAP>:
bool CWJAP(){
 8004028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402a:	46c6      	mov	lr, r8
 800402c:	b500      	push	{lr}
 800402e:	b0a2      	sub	sp, #136	@ 0x88
 8004030:	af00      	add	r7, sp, #0
 8004032:	466b      	mov	r3, sp
 8004034:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004036:	2618      	movs	r6, #24
 8004038:	19bb      	adds	r3, r7, r6
 800403a:	2264      	movs	r2, #100	@ 0x64
 800403c:	2100      	movs	r1, #0
 800403e:	0018      	movs	r0, r3
 8004040:	f014 f890 	bl	8018164 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004044:	4b35      	ldr	r3, [pc, #212]	@ (800411c <CWJAP+0xf4>)
 8004046:	4a36      	ldr	r2, [pc, #216]	@ (8004120 <CWJAP+0xf8>)
 8004048:	4936      	ldr	r1, [pc, #216]	@ (8004124 <CWJAP+0xfc>)
 800404a:	19b8      	adds	r0, r7, r6
 800404c:	f013 ffe6 	bl	801801c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004050:	19bb      	adds	r3, r7, r6
 8004052:	0018      	movs	r0, r3
 8004054:	f7fc f858 	bl	8000108 <strlen>
 8004058:	0002      	movs	r2, r0
 800405a:	216f      	movs	r1, #111	@ 0x6f
 800405c:	0030      	movs	r0, r6
 800405e:	180b      	adds	r3, r1, r0
 8004060:	19db      	adds	r3, r3, r7
 8004062:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004064:	180b      	adds	r3, r1, r0
 8004066:	19db      	adds	r3, r3, r7
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	2180      	movs	r1, #128	@ 0x80
 8004070:	1879      	adds	r1, r7, r1
 8004072:	600a      	str	r2, [r1, #0]
 8004074:	001a      	movs	r2, r3
 8004076:	60ba      	str	r2, [r7, #8]
 8004078:	2200      	movs	r2, #0
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	68b8      	ldr	r0, [r7, #8]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	0002      	movs	r2, r0
 8004082:	0f52      	lsrs	r2, r2, #29
 8004084:	000e      	movs	r6, r1
 8004086:	00f6      	lsls	r6, r6, #3
 8004088:	617e      	str	r6, [r7, #20]
 800408a:	697e      	ldr	r6, [r7, #20]
 800408c:	4316      	orrs	r6, r2
 800408e:	617e      	str	r6, [r7, #20]
 8004090:	0002      	movs	r2, r0
 8004092:	00d2      	lsls	r2, r2, #3
 8004094:	613a      	str	r2, [r7, #16]
 8004096:	001a      	movs	r2, r3
 8004098:	603a      	str	r2, [r7, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	6838      	ldr	r0, [r7, #0]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	0002      	movs	r2, r0
 80040a4:	0f52      	lsrs	r2, r2, #29
 80040a6:	000e      	movs	r6, r1
 80040a8:	00f5      	lsls	r5, r6, #3
 80040aa:	4315      	orrs	r5, r2
 80040ac:	0002      	movs	r2, r0
 80040ae:	00d4      	lsls	r4, r2, #3
 80040b0:	3307      	adds	r3, #7
 80040b2:	08db      	lsrs	r3, r3, #3
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	466a      	mov	r2, sp
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	469d      	mov	sp, r3
 80040bc:	466b      	mov	r3, sp
 80040be:	3300      	adds	r3, #0
 80040c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80040c2:	246f      	movs	r4, #111	@ 0x6f
 80040c4:	2518      	movs	r5, #24
 80040c6:	1963      	adds	r3, r4, r5
 80040c8:	19db      	adds	r3, r3, r7
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	001a      	movs	r2, r3
 80040d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040d2:	2100      	movs	r1, #0
 80040d4:	0018      	movs	r0, r3
 80040d6:	f014 f845 	bl	8018164 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80040da:	1963      	adds	r3, r4, r5
 80040dc:	19db      	adds	r3, r3, r7
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	1979      	adds	r1, r7, r5
 80040e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040e4:	0018      	movs	r0, r3
 80040e6:	f014 f853 	bl	8018190 <strncpy>
  SetCommandBuffer(atCommand);
 80040ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7ff fd11 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80040f2:	1963      	adds	r3, r4, r5
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040fc:	0011      	movs	r1, r2
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fb3c 	bl	800377c <ESP_Send>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d001      	beq.n	800410c <CWJAP+0xe4>
    return true;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <CWJAP+0xe6>
  }
  else{
    return false;
 800410c:	2300      	movs	r3, #0
 800410e:	46c5      	mov	sp, r8
  }
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b022      	add	sp, #136	@ 0x88
 8004116:	bc80      	pop	{r7}
 8004118:	46b8      	mov	r8, r7
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411c:	0801bb30 	.word	0x0801bb30
 8004120:	0801bb24 	.word	0x0801bb24
 8004124:	0801b1cc 	.word	0x0801b1cc

08004128 <CWMODE3>:
bool CWMODE3(){
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <CWMODE3+0x3c>)
 8004130:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff fced 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f7fb ffe3 	bl	8000108 <strlen>
 8004142:	0003      	movs	r3, r0
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0011      	movs	r1, r2
 800414a:	0018      	movs	r0, r3
 800414c:	f7ff fb16 	bl	800377c <ESP_Send>
 8004150:	1e03      	subs	r3, r0, #0
 8004152:	d001      	beq.n	8004158 <CWMODE3+0x30>
    return true;
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <CWMODE3+0x32>
  }
  else{
    return false;
 8004158:	2300      	movs	r3, #0
  }
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b002      	add	sp, #8
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	0801b1e4 	.word	0x0801b1e4

08004168 <CWSAP>:
bool CWSAP(){
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <CWSAP+0x3c>)
 8004170:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	0018      	movs	r0, r3
 8004176:	f7ff fccd 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f7fb ffc3 	bl	8000108 <strlen>
 8004182:	0003      	movs	r3, r0
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0011      	movs	r1, r2
 800418a:	0018      	movs	r0, r3
 800418c:	f7ff faf6 	bl	800377c <ESP_Send>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <CWSAP+0x30>
    return true;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <CWSAP+0x32>
  }
  else{
    return false;
 8004198:	2300      	movs	r3, #0
  }
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b002      	add	sp, #8
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	0801b1f4 	.word	0x0801b1f4

080041a8 <CIPMUX>:
bool CIPMUX(){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <CIPMUX+0x3c>)
 80041b0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff fcad 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fb ffa3 	bl	8000108 <strlen>
 80041c2:	0003      	movs	r3, r0
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7ff fad6 	bl	800377c <ESP_Send>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d001      	beq.n	80041d8 <CIPMUX+0x30>
    return true;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <CIPMUX+0x32>
  }
  else{
    return false;
 80041d8:	2300      	movs	r3, #0
  }
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	0801b218 	.word	0x0801b218

080041e8 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80041ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <WEBSERVER+0x3c>)
 80041f0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7ff fc8d 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f7fb ff83 	bl	8000108 <strlen>
 8004202:	0003      	movs	r3, r0
 8004204:	b29a      	uxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff fab6 	bl	800377c <ESP_Send>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <WEBSERVER+0x30>
    return true;
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004218:	2300      	movs	r3, #0
  }
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b002      	add	sp, #8
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	0801b228 	.word	0x0801b228

08004228 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b0c5      	sub	sp, #276	@ 0x114
 800422c:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	005a      	lsls	r2, r3, #1
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	2100      	movs	r1, #0
 8004236:	0018      	movs	r0, r3
 8004238:	f013 ff94 	bl	8018164 <memset>
  uint16_t length = CreateMessage();
 800423c:	1dfc      	adds	r4, r7, #7
 800423e:	34ff      	adds	r4, #255	@ 0xff
 8004240:	f7ff fb44 	bl	80038cc <CreateMessage>
 8004244:	0003      	movs	r3, r0
 8004246:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004248:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <HTTPCPOST+0xa4>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HTTPCPOST+0x3a>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004250:	1dfb      	adds	r3, r7, #7
 8004252:	33ff      	adds	r3, #255	@ 0xff
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	4a1e      	ldr	r2, [pc, #120]	@ (80042d0 <HTTPCPOST+0xa8>)
 8004258:	491e      	ldr	r1, [pc, #120]	@ (80042d4 <HTTPCPOST+0xac>)
 800425a:	1d38      	adds	r0, r7, #4
 800425c:	f013 fede 	bl	801801c <siprintf>
 8004260:	e016      	b.n	8004290 <HTTPCPOST+0x68>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[24];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004262:	4b1d      	ldr	r3, [pc, #116]	@ (80042d8 <HTTPCPOST+0xb0>)
 8004264:	481d      	ldr	r0, [pc, #116]	@ (80042dc <HTTPCPOST+0xb4>)
 8004266:	220c      	movs	r2, #12
 8004268:	0019      	movs	r1, r3
 800426a:	f7ff f9c4 	bl	80035f6 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800426e:	4a1a      	ldr	r2, [pc, #104]	@ (80042d8 <HTTPCPOST+0xb0>)
 8004270:	4b1b      	ldr	r3, [pc, #108]	@ (80042e0 <HTTPCPOST+0xb8>)
 8004272:	0011      	movs	r1, r2
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff fb05 	bl	8003884 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 800427a:	1dfb      	adds	r3, r7, #7
 800427c:	33ff      	adds	r3, #255	@ 0xff
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	4c17      	ldr	r4, [pc, #92]	@ (80042e0 <HTTPCPOST+0xb8>)
 8004282:	4a18      	ldr	r2, [pc, #96]	@ (80042e4 <HTTPCPOST+0xbc>)
 8004284:	4918      	ldr	r1, [pc, #96]	@ (80042e8 <HTTPCPOST+0xc0>)
 8004286:	1d38      	adds	r0, r7, #4
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	0023      	movs	r3, r4
 800428c:	f013 fec6 	bl	801801c <siprintf>
  }
    uint8_t len = strlen(atCommandBuff);
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	0018      	movs	r0, r3
 8004294:	f7fb ff38 	bl	8000108 <strlen>
 8004298:	0002      	movs	r2, r0
 800429a:	1dbb      	adds	r3, r7, #6
 800429c:	33ff      	adds	r3, #255	@ 0xff
 800429e:	701a      	strb	r2, [r3, #0]
  //char atCommand[len+1];
  //strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7ff fc36 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 80042a8:	1dbb      	adds	r3, r7, #6
 80042aa:	33ff      	adds	r3, #255	@ 0xff
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	0011      	movs	r1, r2
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff fa61 	bl	800377c <ESP_Send>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d001      	beq.n	80042c2 <HTTPCPOST+0x9a>
    return true;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HTTPCPOST+0x9c>
  }
  else{
    return false;
 80042c2:	2300      	movs	r3, #0
  }
}
 80042c4:	0018      	movs	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b043      	add	sp, #268	@ 0x10c
 80042ca:	bd90      	pop	{r4, r7, pc}
 80042cc:	200004f4 	.word	0x200004f4
 80042d0:	0801bb48 	.word	0x0801bb48
 80042d4:	0801b240 	.word	0x0801b240
 80042d8:	20000abc 	.word	0x20000abc
 80042dc:	08080000 	.word	0x08080000
 80042e0:	20000ac8 	.word	0x20000ac8
 80042e4:	0801bb84 	.word	0x0801bb84
 80042e8:	0801b278 	.word	0x0801b278

080042ec <SENDDATA>:
bool SENDDATA(){
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	4c1a      	ldr	r4, [pc, #104]	@ (8004358 <SENDDATA+0x6c>)
 80042f0:	44a5      	add	sp, r4
 80042f2:	af04      	add	r7, sp, #16
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80042f4:	23a4      	movs	r3, #164	@ 0xa4
 80042f6:	009a      	lsls	r2, r3, #2
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	2100      	movs	r1, #0
 80042fc:	0018      	movs	r0, r3
 80042fe:	f013 ff31 	bl	8018164 <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 8004302:	4c16      	ldr	r4, [pc, #88]	@ (800435c <SENDDATA+0x70>)
 8004304:	4a16      	ldr	r2, [pc, #88]	@ (8004360 <SENDDATA+0x74>)
 8004306:	4917      	ldr	r1, [pc, #92]	@ (8004364 <SENDDATA+0x78>)
 8004308:	1d38      	adds	r0, r7, #4
 800430a:	4b17      	ldr	r3, [pc, #92]	@ (8004368 <SENDDATA+0x7c>)
 800430c:	9302      	str	r3, [sp, #8]
 800430e:	4b17      	ldr	r3, [pc, #92]	@ (800436c <SENDDATA+0x80>)
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	4b17      	ldr	r3, [pc, #92]	@ (8004370 <SENDDATA+0x84>)
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	0023      	movs	r3, r4
 8004318:	f013 fe80 	bl	801801c <siprintf>
  uint16_t len = strlen(atCommandBuff);
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	0018      	movs	r0, r3
 8004320:	f7fb fef2 	bl	8000108 <strlen>
 8004324:	0002      	movs	r2, r0
 8004326:	4c13      	ldr	r4, [pc, #76]	@ (8004374 <SENDDATA+0x88>)
 8004328:	193b      	adds	r3, r7, r4
 800432a:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //memset(atCommand, '\0', len+1);
  //1strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	0018      	movs	r0, r3
 8004330:	f7ff fbf0 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommandBuff, len)) {
 8004334:	193b      	adds	r3, r7, r4
 8004336:	881a      	ldrh	r2, [r3, #0]
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff fa1d 	bl	800377c <ESP_Send>
 8004342:	1e03      	subs	r3, r0, #0
 8004344:	d001      	beq.n	800434a <SENDDATA+0x5e>
    return true;
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <SENDDATA+0x60>
  }
  else{
    return false;
 800434a:	2300      	movs	r3, #0
  }
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	23a7      	movs	r3, #167	@ 0xa7
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	449d      	add	sp, r3
 8004356:	bd90      	pop	{r4, r7, pc}
 8004358:	fffffd54 	.word	0xfffffd54
 800435c:	2000059c 	.word	0x2000059c
 8004360:	2000051c 	.word	0x2000051c
 8004364:	0801b2b8 	.word	0x0801b2b8
 8004368:	2000071c 	.word	0x2000071c
 800436c:	2000069c 	.word	0x2000069c
 8004370:	2000061c 	.word	0x2000061c
 8004374:	00000296 	.word	0x00000296

08004378 <SLEEP>:
bool SLEEP(){
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <SLEEP+0x3c>)
 8004380:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f7ff fbc5 	bl	8003b14 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0018      	movs	r0, r3
 800438e:	f7fb febb 	bl	8000108 <strlen>
 8004392:	0003      	movs	r3, r0
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0011      	movs	r1, r2
 800439a:	0018      	movs	r0, r3
 800439c:	f7ff f9ee 	bl	800377c <ESP_Send>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d001      	beq.n	80043a8 <SLEEP+0x30>
    return true;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <SLEEP+0x32>
  }
  else{
    return false;
 80043a8:	2300      	movs	r3, #0
  }
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	0801b2d8 	.word	0x0801b2d8

080043b8 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	0002      	movs	r2, r0
 80043c0:	1dfb      	adds	r3, r7, #7
 80043c2:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80043c4:	4b50      	ldr	r3, [pc, #320]	@ (8004508 <DMA_ProcessBuffer+0x150>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	210e      	movs	r1, #14
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	43d2      	mvns	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 80043d4:	200f      	movs	r0, #15
 80043d6:	183b      	adds	r3, r7, r0
 80043d8:	2203      	movs	r2, #3
 80043da:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 80043dc:	4b4b      	ldr	r3, [pc, #300]	@ (800450c <DMA_ProcessBuffer+0x154>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	187a      	adds	r2, r7, r1
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d131      	bne.n	800444e <DMA_ProcessBuffer+0x96>
      if(retry >4){
 80043ea:	4b49      	ldr	r3, [pc, #292]	@ (8004510 <DMA_ProcessBuffer+0x158>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d91b      	bls.n	800442a <DMA_ProcessBuffer+0x72>
        retry = 0;
 80043f2:	4b47      	ldr	r3, [pc, #284]	@ (8004510 <DMA_ProcessBuffer+0x158>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80043f8:	4b46      	ldr	r3, [pc, #280]	@ (8004514 <DMA_ProcessBuffer+0x15c>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <DMA_ProcessBuffer+0x56>
 8004400:	4b45      	ldr	r3, [pc, #276]	@ (8004518 <DMA_ProcessBuffer+0x160>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 8004408:	183b      	adds	r3, r7, r0
 800440a:	2207      	movs	r2, #7
 800440c:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 800440e:	4b41      	ldr	r3, [pc, #260]	@ (8004514 <DMA_ProcessBuffer+0x15c>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b08      	cmp	r3, #8
 8004414:	d104      	bne.n	8004420 <DMA_ProcessBuffer+0x68>
          status = RECEIVE_STATUS_HOME;
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	2208      	movs	r2, #8
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e016      	b.n	800444e <DMA_ProcessBuffer+0x96>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004420:	230f      	movs	r3, #15
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2206      	movs	r2, #6
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e011      	b.n	800444e <DMA_ProcessBuffer+0x96>
        }
      }
     else{
       retry ++;
 800442a:	4b39      	ldr	r3, [pc, #228]	@ (8004510 <DMA_ProcessBuffer+0x158>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	3301      	adds	r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b37      	ldr	r3, [pc, #220]	@ (8004510 <DMA_ProcessBuffer+0x158>)
 8004434:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004436:	f005 fd5b 	bl	8009ef0 <HAL_GetTick>
 800443a:	0003      	movs	r3, r0
 800443c:	33f5      	adds	r3, #245	@ 0xf5
 800443e:	33ff      	adds	r3, #255	@ 0xff
 8004440:	001a      	movs	r2, r3
 8004442:	4b36      	ldr	r3, [pc, #216]	@ (800451c <DMA_ProcessBuffer+0x164>)
 8004444:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004446:	230f      	movs	r3, #15
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	2204      	movs	r2, #4
 800444c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 800444e:	4b2f      	ldr	r3, [pc, #188]	@ (800450c <DMA_ProcessBuffer+0x154>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	210e      	movs	r1, #14
 8004456:	187a      	adds	r2, r7, r1
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d048      	beq.n	80044f0 <DMA_ProcessBuffer+0x138>
      retry = 0;
 800445e:	4b2c      	ldr	r3, [pc, #176]	@ (8004510 <DMA_ProcessBuffer+0x158>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004464:	4b29      	ldr	r3, [pc, #164]	@ (800450c <DMA_ProcessBuffer+0x154>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	187a      	adds	r2, r7, r1
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d917      	bls.n	80044a2 <DMA_ProcessBuffer+0xea>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004472:	4b26      	ldr	r3, [pc, #152]	@ (800450c <DMA_ProcessBuffer+0x154>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	001a      	movs	r2, r3
 800447a:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <DMA_ProcessBuffer+0x168>)
 800447c:	18d0      	adds	r0, r2, r3
 800447e:	187b      	adds	r3, r7, r1
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	4a21      	ldr	r2, [pc, #132]	@ (800450c <DMA_ProcessBuffer+0x154>)
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	b299      	uxth	r1, r3
 800448e:	230f      	movs	r3, #15
 8004490:	18fc      	adds	r4, r7, r3
 8004492:	1dfb      	adds	r3, r7, #7
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	001a      	movs	r2, r3
 8004498:	f7ff fb84 	bl	8003ba4 <ParseBuffer>
 800449c:	0003      	movs	r3, r0
 800449e:	7023      	strb	r3, [r4, #0]
 80044a0:	e026      	b.n	80044f0 <DMA_ProcessBuffer+0x138>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80044a2:	4b1a      	ldr	r3, [pc, #104]	@ (800450c <DMA_ProcessBuffer+0x154>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	001a      	movs	r2, r3
 80044aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <DMA_ProcessBuffer+0x168>)
 80044ac:	18d0      	adds	r0, r2, r3
 80044ae:	4b17      	ldr	r3, [pc, #92]	@ (800450c <DMA_ProcessBuffer+0x154>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	001a      	movs	r2, r3
 80044b6:	23ff      	movs	r3, #255	@ 0xff
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	b299      	uxth	r1, r3
 80044bc:	250f      	movs	r5, #15
 80044be:	197c      	adds	r4, r7, r5
 80044c0:	1dfb      	adds	r3, r7, #7
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	001a      	movs	r2, r3
 80044c6:	f7ff fb6d 	bl	8003ba4 <ParseBuffer>
 80044ca:	0003      	movs	r3, r0
 80044cc:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 80044ce:	220e      	movs	r2, #14
 80044d0:	18bb      	adds	r3, r7, r2
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00b      	beq.n	80044f0 <DMA_ProcessBuffer+0x138>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80044d8:	18bb      	adds	r3, r7, r2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b299      	uxth	r1, r3
 80044de:	197c      	adds	r4, r7, r5
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <DMA_ProcessBuffer+0x168>)
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7ff fb5c 	bl	8003ba4 <ParseBuffer>
 80044ec:	0003      	movs	r3, r0
 80044ee:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <DMA_ProcessBuffer+0x154>)
 80044f2:	220e      	movs	r2, #14
 80044f4:	18ba      	adds	r2, r7, r2
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	701a      	strb	r2, [r3, #0]
    return status;
 80044fa:	230f      	movs	r3, #15
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	781b      	ldrb	r3, [r3, #0]
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bdb0      	pop	{r4, r5, r7, pc}
 8004508:	20002b60 	.word	0x20002b60
 800450c:	200007a7 	.word	0x200007a7
 8004510:	200007ac 	.word	0x200007ac
 8004514:	20000a42 	.word	0x20000a42
 8004518:	20000000 	.word	0x20000000
 800451c:	200007a8 	.word	0x200007a8
 8004520:	200003f0 	.word	0x200003f0

08004524 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	0002      	movs	r2, r0
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	1c0a      	adds	r2, r1, #0
 8004534:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004536:	210f      	movs	r1, #15
 8004538:	187b      	adds	r3, r7, r1
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004546:	187b      	adds	r3, r7, r1
 8004548:	1dfa      	adds	r2, r7, #7
 800454a:	7812      	ldrb	r2, [r2, #0]
 800454c:	4251      	negs	r1, r2
 800454e:	414a      	adcs	r2, r1
 8004550:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004552:	1dbb      	adds	r3, r7, #6
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800455a:	230f      	movs	r3, #15
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	1dfa      	adds	r2, r7, #7
 8004560:	7812      	ldrb	r2, [r2, #0]
 8004562:	3a02      	subs	r2, #2
 8004564:	4251      	negs	r1, r2
 8004566:	414a      	adcs	r2, r1
 8004568:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800456a:	1dbb      	adds	r3, r7, #6
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d107      	bne.n	8004582 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004572:	230f      	movs	r3, #15
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	1dfa      	adds	r2, r7, #7
 8004578:	7812      	ldrb	r2, [r2, #0]
 800457a:	3a05      	subs	r2, #5
 800457c:	4251      	negs	r1, r2
 800457e:	414a      	adcs	r2, r1
 8004580:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004582:	230f      	movs	r3, #15
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	781b      	ldrb	r3, [r3, #0]
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}

08004590 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	0002      	movs	r2, r0
 8004598:	1dfb      	adds	r3, r7, #7
 800459a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 800459c:	230f      	movs	r3, #15
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
  switch (state){
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b0f      	cmp	r3, #15
 80045aa:	d900      	bls.n	80045ae <AT_Send+0x1e>
 80045ac:	e14a      	b.n	8004844 <AT_Send+0x2b4>
 80045ae:	009a      	lsls	r2, r3, #2
 80045b0:	4ba8      	ldr	r3, [pc, #672]	@ (8004854 <AT_Send+0x2c4>)
 80045b2:	18d3      	adds	r3, r2, r3
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80045b8:	4ba7      	ldr	r3, [pc, #668]	@ (8004858 <AT_Send+0x2c8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	0018      	movs	r0, r3
 80045be:	f005 f8a5 	bl	800970c <TimestampIsReached>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d100      	bne.n	80045c8 <AT_Send+0x38>
 80045c6:	e13c      	b.n	8004842 <AT_Send+0x2b2>
    ATCommandSend = PollAwake();
 80045c8:	230f      	movs	r3, #15
 80045ca:	18fc      	adds	r4, r7, r3
 80045cc:	f7ff fc2c 	bl	8003e28 <PollAwake>
 80045d0:	0003      	movs	r3, r0
 80045d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045d4:	f005 fc8c 	bl	8009ef0 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	3332      	adds	r3, #50	@ 0x32
 80045dc:	001a      	movs	r2, r3
 80045de:	4b9e      	ldr	r3, [pc, #632]	@ (8004858 <AT_Send+0x2c8>)
 80045e0:	601a      	str	r2, [r3, #0]
  }
  break;
 80045e2:	e12e      	b.n	8004842 <AT_Send+0x2b2>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80045e4:	4a9d      	ldr	r2, [pc, #628]	@ (800485c <AT_Send+0x2cc>)
 80045e6:	4b9e      	ldr	r3, [pc, #632]	@ (8004860 <AT_Send+0x2d0>)
 80045e8:	0019      	movs	r1, r3
 80045ea:	2003      	movs	r0, #3
 80045ec:	f005 f8e4 	bl	80097b8 <CreateLine>
    ATCommandSend = RFPower();
 80045f0:	230f      	movs	r3, #15
 80045f2:	18fc      	adds	r4, r7, r3
 80045f4:	f7ff fc38 	bl	8003e68 <RFPower>
 80045f8:	0003      	movs	r3, r0
 80045fa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045fc:	f005 fc78 	bl	8009ef0 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	330a      	adds	r3, #10
 8004604:	001a      	movs	r2, r3
 8004606:	4b94      	ldr	r3, [pc, #592]	@ (8004858 <AT_Send+0x2c8>)
 8004608:	601a      	str	r2, [r3, #0]
    break;
 800460a:	e11b      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800460c:	4a95      	ldr	r2, [pc, #596]	@ (8004864 <AT_Send+0x2d4>)
 800460e:	4b94      	ldr	r3, [pc, #592]	@ (8004860 <AT_Send+0x2d0>)
 8004610:	0019      	movs	r1, r3
 8004612:	2003      	movs	r0, #3
 8004614:	f005 f8d0 	bl	80097b8 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004618:	230f      	movs	r3, #15
 800461a:	18fc      	adds	r4, r7, r3
 800461c:	f7ff fc44 	bl	8003ea8 <CheckRFPower>
 8004620:	0003      	movs	r3, r0
 8004622:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004624:	f005 fc64 	bl	8009ef0 <HAL_GetTick>
 8004628:	0003      	movs	r3, r0
 800462a:	330a      	adds	r3, #10
 800462c:	001a      	movs	r2, r3
 800462e:	4b8a      	ldr	r3, [pc, #552]	@ (8004858 <AT_Send+0x2c8>)
 8004630:	601a      	str	r2, [r3, #0]
    break;
 8004632:	e107      	b.n	8004844 <AT_Send+0x2b4>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004634:	4a8c      	ldr	r2, [pc, #560]	@ (8004868 <AT_Send+0x2d8>)
 8004636:	4b8a      	ldr	r3, [pc, #552]	@ (8004860 <AT_Send+0x2d0>)
 8004638:	0019      	movs	r1, r3
 800463a:	2003      	movs	r0, #3
 800463c:	f005 f8bc 	bl	80097b8 <CreateLine>
    ATCommandSend = ATRestore();
 8004640:	230f      	movs	r3, #15
 8004642:	18fc      	adds	r4, r7, r3
 8004644:	f7ff fc50 	bl	8003ee8 <ATRestore>
 8004648:	0003      	movs	r3, r0
 800464a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800464c:	f005 fc50 	bl	8009ef0 <HAL_GetTick>
 8004650:	0003      	movs	r3, r0
 8004652:	3332      	adds	r3, #50	@ 0x32
 8004654:	001a      	movs	r2, r3
 8004656:	4b80      	ldr	r3, [pc, #512]	@ (8004858 <AT_Send+0x2c8>)
 8004658:	601a      	str	r2, [r3, #0]
    break;
 800465a:	e0f3      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800465c:	4a83      	ldr	r2, [pc, #524]	@ (800486c <AT_Send+0x2dc>)
 800465e:	4b80      	ldr	r3, [pc, #512]	@ (8004860 <AT_Send+0x2d0>)
 8004660:	0019      	movs	r1, r3
 8004662:	2003      	movs	r0, #3
 8004664:	f005 f8a8 	bl	80097b8 <CreateLine>
    ATCommandSend = CWINIT();
 8004668:	230f      	movs	r3, #15
 800466a:	18fc      	adds	r4, r7, r3
 800466c:	f7ff fc5c 	bl	8003f28 <CWINIT>
 8004670:	0003      	movs	r3, r0
 8004672:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004674:	f005 fc3c 	bl	8009ef0 <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	33f5      	adds	r3, #245	@ 0xf5
 800467c:	33ff      	adds	r3, #255	@ 0xff
 800467e:	001a      	movs	r2, r3
 8004680:	4b75      	ldr	r3, [pc, #468]	@ (8004858 <AT_Send+0x2c8>)
 8004682:	601a      	str	r2, [r3, #0]
    break;
 8004684:	e0de      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004686:	4a7a      	ldr	r2, [pc, #488]	@ (8004870 <AT_Send+0x2e0>)
 8004688:	4b75      	ldr	r3, [pc, #468]	@ (8004860 <AT_Send+0x2d0>)
 800468a:	0019      	movs	r1, r3
 800468c:	2003      	movs	r0, #3
 800468e:	f005 f893 	bl	80097b8 <CreateLine>
    ATCommandSend = CWMODE1();
 8004692:	230f      	movs	r3, #15
 8004694:	18fc      	adds	r4, r7, r3
 8004696:	f7ff fc67 	bl	8003f68 <CWMODE1>
 800469a:	0003      	movs	r3, r0
 800469c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800469e:	f005 fc27 	bl	8009ef0 <HAL_GetTick>
 80046a2:	0003      	movs	r3, r0
 80046a4:	330a      	adds	r3, #10
 80046a6:	001a      	movs	r2, r3
 80046a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004858 <AT_Send+0x2c8>)
 80046aa:	601a      	str	r2, [r3, #0]
    break;
 80046ac:	e0ca      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80046ae:	4a70      	ldr	r2, [pc, #448]	@ (8004870 <AT_Send+0x2e0>)
 80046b0:	4b6b      	ldr	r3, [pc, #428]	@ (8004860 <AT_Send+0x2d0>)
 80046b2:	0019      	movs	r1, r3
 80046b4:	2003      	movs	r0, #3
 80046b6:	f005 f87f 	bl	80097b8 <CreateLine>
    ATCommandSend = CWMODE2();
 80046ba:	230f      	movs	r3, #15
 80046bc:	18fc      	adds	r4, r7, r3
 80046be:	f7ff fc73 	bl	8003fa8 <CWMODE2>
 80046c2:	0003      	movs	r3, r0
 80046c4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046c6:	f005 fc13 	bl	8009ef0 <HAL_GetTick>
 80046ca:	0003      	movs	r3, r0
 80046cc:	330a      	adds	r3, #10
 80046ce:	001a      	movs	r2, r3
 80046d0:	4b61      	ldr	r3, [pc, #388]	@ (8004858 <AT_Send+0x2c8>)
 80046d2:	601a      	str	r2, [r3, #0]
    break;
 80046d4:	e0b6      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80046d6:	4a67      	ldr	r2, [pc, #412]	@ (8004874 <AT_Send+0x2e4>)
 80046d8:	4b61      	ldr	r3, [pc, #388]	@ (8004860 <AT_Send+0x2d0>)
 80046da:	0019      	movs	r1, r3
 80046dc:	2003      	movs	r0, #3
 80046de:	f005 f86b 	bl	80097b8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 80046e2:	230f      	movs	r3, #15
 80046e4:	18fc      	adds	r4, r7, r3
 80046e6:	f7ff fc7f 	bl	8003fe8 <CWAUTOCONN>
 80046ea:	0003      	movs	r3, r0
 80046ec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ee:	f005 fbff 	bl	8009ef0 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	330a      	adds	r3, #10
 80046f6:	001a      	movs	r2, r3
 80046f8:	4b57      	ldr	r3, [pc, #348]	@ (8004858 <AT_Send+0x2c8>)
 80046fa:	601a      	str	r2, [r3, #0]
    break;
 80046fc:	e0a2      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80046fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004878 <AT_Send+0x2e8>)
 8004700:	4b57      	ldr	r3, [pc, #348]	@ (8004860 <AT_Send+0x2d0>)
 8004702:	0019      	movs	r1, r3
 8004704:	2003      	movs	r0, #3
 8004706:	f005 f857 	bl	80097b8 <CreateLine>
    ATCommandSend = CWJAP();
 800470a:	230f      	movs	r3, #15
 800470c:	18fc      	adds	r4, r7, r3
 800470e:	f7ff fc8b 	bl	8004028 <CWJAP>
 8004712:	0003      	movs	r3, r0
 8004714:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004716:	f005 fbeb 	bl	8009ef0 <HAL_GetTick>
 800471a:	0003      	movs	r3, r0
 800471c:	3332      	adds	r3, #50	@ 0x32
 800471e:	001a      	movs	r2, r3
 8004720:	4b4d      	ldr	r3, [pc, #308]	@ (8004858 <AT_Send+0x2c8>)
 8004722:	601a      	str	r2, [r3, #0]
    break;
 8004724:	e08e      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004726:	4a55      	ldr	r2, [pc, #340]	@ (800487c <AT_Send+0x2ec>)
 8004728:	4b4d      	ldr	r3, [pc, #308]	@ (8004860 <AT_Send+0x2d0>)
 800472a:	0019      	movs	r1, r3
 800472c:	2003      	movs	r0, #3
 800472e:	f005 f843 	bl	80097b8 <CreateLine>
    ATCommandSend = CWMODE3();
 8004732:	230f      	movs	r3, #15
 8004734:	18fc      	adds	r4, r7, r3
 8004736:	f7ff fcf7 	bl	8004128 <CWMODE3>
 800473a:	0003      	movs	r3, r0
 800473c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800473e:	f005 fbd7 	bl	8009ef0 <HAL_GetTick>
 8004742:	0003      	movs	r3, r0
 8004744:	330a      	adds	r3, #10
 8004746:	001a      	movs	r2, r3
 8004748:	4b43      	ldr	r3, [pc, #268]	@ (8004858 <AT_Send+0x2c8>)
 800474a:	601a      	str	r2, [r3, #0]
    break;
 800474c:	e07a      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800474e:	4a4c      	ldr	r2, [pc, #304]	@ (8004880 <AT_Send+0x2f0>)
 8004750:	4b43      	ldr	r3, [pc, #268]	@ (8004860 <AT_Send+0x2d0>)
 8004752:	0019      	movs	r1, r3
 8004754:	2003      	movs	r0, #3
 8004756:	f005 f82f 	bl	80097b8 <CreateLine>
    ATCommandSend = CWSAP();
 800475a:	230f      	movs	r3, #15
 800475c:	18fc      	adds	r4, r7, r3
 800475e:	f7ff fd03 	bl	8004168 <CWSAP>
 8004762:	0003      	movs	r3, r0
 8004764:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004766:	f005 fbc3 	bl	8009ef0 <HAL_GetTick>
 800476a:	0003      	movs	r3, r0
 800476c:	330a      	adds	r3, #10
 800476e:	001a      	movs	r2, r3
 8004770:	4b39      	ldr	r3, [pc, #228]	@ (8004858 <AT_Send+0x2c8>)
 8004772:	601a      	str	r2, [r3, #0]
    break;
 8004774:	e066      	b.n	8004844 <AT_Send+0x2b4>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 8004776:	4a43      	ldr	r2, [pc, #268]	@ (8004884 <AT_Send+0x2f4>)
 8004778:	4b39      	ldr	r3, [pc, #228]	@ (8004860 <AT_Send+0x2d0>)
 800477a:	0019      	movs	r1, r3
 800477c:	2003      	movs	r0, #3
 800477e:	f005 f81b 	bl	80097b8 <CreateLine>
    ATCommandSend = CIPMUX();
 8004782:	230f      	movs	r3, #15
 8004784:	18fc      	adds	r4, r7, r3
 8004786:	f7ff fd0f 	bl	80041a8 <CIPMUX>
 800478a:	0003      	movs	r3, r0
 800478c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800478e:	f005 fbaf 	bl	8009ef0 <HAL_GetTick>
 8004792:	0003      	movs	r3, r0
 8004794:	330a      	adds	r3, #10
 8004796:	001a      	movs	r2, r3
 8004798:	4b2f      	ldr	r3, [pc, #188]	@ (8004858 <AT_Send+0x2c8>)
 800479a:	601a      	str	r2, [r3, #0]
    break;
 800479c:	e052      	b.n	8004844 <AT_Send+0x2b4>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 800479e:	4a37      	ldr	r2, [pc, #220]	@ (800487c <AT_Send+0x2ec>)
 80047a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004860 <AT_Send+0x2d0>)
 80047a2:	0019      	movs	r1, r3
 80047a4:	2003      	movs	r0, #3
 80047a6:	f005 f807 	bl	80097b8 <CreateLine>
    ATCommandSend = WEBSERVER();
 80047aa:	230f      	movs	r3, #15
 80047ac:	18fc      	adds	r4, r7, r3
 80047ae:	f7ff fd1b 	bl	80041e8 <WEBSERVER>
 80047b2:	0003      	movs	r3, r0
 80047b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047b6:	f005 fb9b 	bl	8009ef0 <HAL_GetTick>
 80047ba:	0003      	movs	r3, r0
 80047bc:	330a      	adds	r3, #10
 80047be:	001a      	movs	r2, r3
 80047c0:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <AT_Send+0x2c8>)
 80047c2:	601a      	str	r2, [r3, #0]
    break;
 80047c4:	e03e      	b.n	8004844 <AT_Send+0x2b4>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80047c6:	4a2d      	ldr	r2, [pc, #180]	@ (800487c <AT_Send+0x2ec>)
 80047c8:	4b25      	ldr	r3, [pc, #148]	@ (8004860 <AT_Send+0x2d0>)
 80047ca:	0019      	movs	r1, r3
 80047cc:	2003      	movs	r0, #3
 80047ce:	f004 fff3 	bl	80097b8 <CreateLine>
    ATCommandSend = HTTPCPOST();
 80047d2:	230f      	movs	r3, #15
 80047d4:	18fc      	adds	r4, r7, r3
 80047d6:	f7ff fd27 	bl	8004228 <HTTPCPOST>
 80047da:	0003      	movs	r3, r0
 80047dc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80047de:	f005 fb87 	bl	8009ef0 <HAL_GetTick>
 80047e2:	0003      	movs	r3, r0
 80047e4:	33f5      	adds	r3, #245	@ 0xf5
 80047e6:	33ff      	adds	r3, #255	@ 0xff
 80047e8:	001a      	movs	r2, r3
 80047ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004858 <AT_Send+0x2c8>)
 80047ec:	601a      	str	r2, [r3, #0]
    break;
 80047ee:	e029      	b.n	8004844 <AT_Send+0x2b4>

  case AT_SENDDATA:
    Debug("Send the data");
 80047f0:	4a25      	ldr	r2, [pc, #148]	@ (8004888 <AT_Send+0x2f8>)
 80047f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <AT_Send+0x2d0>)
 80047f4:	0019      	movs	r1, r3
 80047f6:	2003      	movs	r0, #3
 80047f8:	f004 ffde 	bl	80097b8 <CreateLine>
    ATCommandSend = SENDDATA();
 80047fc:	230f      	movs	r3, #15
 80047fe:	18fc      	adds	r4, r7, r3
 8004800:	f7ff fd74 	bl	80042ec <SENDDATA>
 8004804:	0003      	movs	r3, r0
 8004806:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004808:	f005 fb72 	bl	8009ef0 <HAL_GetTick>
 800480c:	0003      	movs	r3, r0
 800480e:	33f5      	adds	r3, #245	@ 0xf5
 8004810:	33ff      	adds	r3, #255	@ 0xff
 8004812:	001a      	movs	r2, r3
 8004814:	4b10      	ldr	r3, [pc, #64]	@ (8004858 <AT_Send+0x2c8>)
 8004816:	601a      	str	r2, [r3, #0]
    break;
 8004818:	e014      	b.n	8004844 <AT_Send+0x2b4>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800481a:	4a1c      	ldr	r2, [pc, #112]	@ (800488c <AT_Send+0x2fc>)
 800481c:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <AT_Send+0x2d0>)
 800481e:	0019      	movs	r1, r3
 8004820:	2003      	movs	r0, #3
 8004822:	f004 ffc9 	bl	80097b8 <CreateLine>
    ATCommandSend = SLEEP();
 8004826:	230f      	movs	r3, #15
 8004828:	18fc      	adds	r4, r7, r3
 800482a:	f7ff fda5 	bl	8004378 <SLEEP>
 800482e:	0003      	movs	r3, r0
 8004830:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004832:	f005 fb5d 	bl	8009ef0 <HAL_GetTick>
 8004836:	0003      	movs	r3, r0
 8004838:	330a      	adds	r3, #10
 800483a:	001a      	movs	r2, r3
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <AT_Send+0x2c8>)
 800483e:	601a      	str	r2, [r3, #0]
    break;
 8004840:	e000      	b.n	8004844 <AT_Send+0x2b4>
  break;
 8004842:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004844:	230f      	movs	r3, #15
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	781b      	ldrb	r3, [r3, #0]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b005      	add	sp, #20
 8004850:	bd90      	pop	{r4, r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	0801bbac 	.word	0x0801bbac
 8004858:	200007a8 	.word	0x200007a8
 800485c:	0801b2e8 	.word	0x0801b2e8
 8004860:	0801af90 	.word	0x0801af90
 8004864:	0801b2fc 	.word	0x0801b2fc
 8004868:	0801b310 	.word	0x0801b310
 800486c:	0801b320 	.word	0x0801b320
 8004870:	0801b334 	.word	0x0801b334
 8004874:	0801b34c 	.word	0x0801b34c
 8004878:	0801b364 	.word	0x0801b364
 800487c:	0801b378 	.word	0x0801b378
 8004880:	0801b394 	.word	0x0801b394
 8004884:	0801b3b0 	.word	0x0801b3b0
 8004888:	0801b3d4 	.word	0x0801b3d4
 800488c:	0801b3e4 	.word	0x0801b3e4

08004890 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004896:	1dfb      	adds	r3, r7, #7
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800489c:	4b79      	ldr	r3, [pc, #484]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d900      	bls.n	80048a6 <ESP_WakeTest+0x16>
 80048a4:	e0d4      	b.n	8004a50 <ESP_WakeTest+0x1c0>
 80048a6:	009a      	lsls	r2, r3, #2
 80048a8:	4b77      	ldr	r3, [pc, #476]	@ (8004a88 <ESP_WakeTest+0x1f8>)
 80048aa:	18d3      	adds	r3, r2, r3
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80048b0:	4b76      	ldr	r3, [pc, #472]	@ (8004a8c <ESP_WakeTest+0x1fc>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2201      	movs	r2, #1
 80048b6:	4053      	eors	r3, r2
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d036      	beq.n	800492c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	4873      	ldr	r0, [pc, #460]	@ (8004a90 <ESP_WakeTest+0x200>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	0019      	movs	r1, r3
 80048c8:	f006 feb1 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80048cc:	2032      	movs	r0, #50	@ 0x32
 80048ce:	f005 fb19 	bl	8009f04 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80048d2:	2380      	movs	r3, #128	@ 0x80
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	486e      	ldr	r0, [pc, #440]	@ (8004a90 <ESP_WakeTest+0x200>)
 80048d8:	2201      	movs	r2, #1
 80048da:	0019      	movs	r1, r3
 80048dc:	f006 fea7 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80048e0:	200a      	movs	r0, #10
 80048e2:	f005 fb0f 	bl	8009f04 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80048e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004a94 <ESP_WakeTest+0x204>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	2101      	movs	r1, #1
 80048ec:	0018      	movs	r0, r3
 80048ee:	f006 fe9e 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80048f2:	200a      	movs	r0, #10
 80048f4:	f005 fb06 	bl	8009f04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80048f8:	4b66      	ldr	r3, [pc, #408]	@ (8004a94 <ESP_WakeTest+0x204>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	2102      	movs	r1, #2
 80048fe:	0018      	movs	r0, r3
 8004900:	f006 fe95 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004904:	200a      	movs	r0, #10
 8004906:	f005 fafd 	bl	8009f04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800490a:	4b62      	ldr	r3, [pc, #392]	@ (8004a94 <ESP_WakeTest+0x204>)
 800490c:	2201      	movs	r2, #1
 800490e:	2101      	movs	r1, #1
 8004910:	0018      	movs	r0, r3
 8004912:	f006 fe8c 	bl	800b62e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004916:	f005 faeb 	bl	8009ef0 <HAL_GetTick>
 800491a:	0003      	movs	r3, r0
 800491c:	22af      	movs	r2, #175	@ 0xaf
 800491e:	0092      	lsls	r2, r2, #2
 8004920:	189a      	adds	r2, r3, r2
 8004922:	4b5d      	ldr	r3, [pc, #372]	@ (8004a98 <ESP_WakeTest+0x208>)
 8004924:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004926:	4b59      	ldr	r3, [pc, #356]	@ (8004a8c <ESP_WakeTest+0x1fc>)
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800492c:	4b5b      	ldr	r3, [pc, #364]	@ (8004a9c <ESP_WakeTest+0x20c>)
 800492e:	21ff      	movs	r1, #255	@ 0xff
 8004930:	0018      	movs	r0, r3
 8004932:	f7fe ff4d 	bl	80037d0 <ESP_Receive>
 8004936:	1e03      	subs	r3, r0, #0
 8004938:	d100      	bne.n	800493c <ESP_WakeTest+0xac>
 800493a:	e099      	b.n	8004a70 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 800493c:	4b51      	ldr	r3, [pc, #324]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 800493e:	2201      	movs	r2, #1
 8004940:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004942:	e095      	b.n	8004a70 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004944:	4b54      	ldr	r3, [pc, #336]	@ (8004a98 <ESP_WakeTest+0x208>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	0018      	movs	r0, r3
 800494a:	f004 fedf 	bl	800970c <TimestampIsReached>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d100      	bne.n	8004954 <ESP_WakeTest+0xc4>
 8004952:	e08f      	b.n	8004a74 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004954:	4b52      	ldr	r3, [pc, #328]	@ (8004aa0 <ESP_WakeTest+0x210>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	1dfc      	adds	r4, r7, #7
 800495a:	0018      	movs	r0, r3
 800495c:	f7ff fe18 	bl	8004590 <AT_Send>
 8004960:	0003      	movs	r3, r0
 8004962:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d100      	bne.n	800496e <ESP_WakeTest+0xde>
 800496c:	e082      	b.n	8004a74 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 800496e:	4b45      	ldr	r3, [pc, #276]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 8004970:	2202      	movs	r2, #2
 8004972:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004974:	e07e      	b.n	8004a74 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004976:	4b48      	ldr	r3, [pc, #288]	@ (8004a98 <ESP_WakeTest+0x208>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	0018      	movs	r0, r3
 800497c:	f004 fec6 	bl	800970c <TimestampIsReached>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d100      	bne.n	8004986 <ESP_WakeTest+0xf6>
 8004984:	e078      	b.n	8004a78 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004986:	4b47      	ldr	r3, [pc, #284]	@ (8004aa4 <ESP_WakeTest+0x214>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff fd14 	bl	80043b8 <DMA_ProcessBuffer>
 8004990:	0003      	movs	r3, r0
 8004992:	001a      	movs	r2, r3
 8004994:	4b44      	ldr	r3, [pc, #272]	@ (8004aa8 <ESP_WakeTest+0x218>)
 8004996:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004998:	4b43      	ldr	r3, [pc, #268]	@ (8004aa8 <ESP_WakeTest+0x218>)
 800499a:	781a      	ldrb	r2, [r3, #0]
 800499c:	4b41      	ldr	r3, [pc, #260]	@ (8004aa4 <ESP_WakeTest+0x214>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	1dbc      	adds	r4, r7, #6
 80049a2:	0019      	movs	r1, r3
 80049a4:	0010      	movs	r0, r2
 80049a6:	f7ff fdbd 	bl	8004524 <ATCompare>
 80049aa:	0003      	movs	r3, r0
 80049ac:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80049ae:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa8 <ESP_WakeTest+0x218>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d102      	bne.n	80049bc <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 80049b6:	4b33      	ldr	r3, [pc, #204]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80049bc:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <ESP_WakeTest+0x218>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b07      	cmp	r3, #7
 80049c2:	d104      	bne.n	80049ce <ESP_WakeTest+0x13e>
          StartProg();
 80049c4:	f7ff f8bc 	bl	8003b40 <StartProg>
          TestState = ESP_TEST_BOOT;
 80049c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 80049ca:	2205      	movs	r2, #5
 80049cc:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80049ce:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <ESP_WakeTest+0x218>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d109      	bne.n	80049ea <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 80049d6:	f005 fa8b 	bl	8009ef0 <HAL_GetTick>
 80049da:	0003      	movs	r3, r0
 80049dc:	3332      	adds	r3, #50	@ 0x32
 80049de:	001a      	movs	r2, r3
 80049e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a98 <ESP_WakeTest+0x208>)
 80049e2:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80049e4:	4b27      	ldr	r3, [pc, #156]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80049ea:	1dbb      	adds	r3, r7, #6
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d042      	beq.n	8004a78 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 80049f2:	4b24      	ldr	r3, [pc, #144]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 80049f4:	2203      	movs	r2, #3
 80049f6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80049f8:	e03e      	b.n	8004a78 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 80049fa:	4b2c      	ldr	r3, [pc, #176]	@ (8004aac <ESP_WakeTest+0x21c>)
 80049fc:	22fa      	movs	r2, #250	@ 0xfa
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004a02:	4b2a      	ldr	r3, [pc, #168]	@ (8004aac <ESP_WakeTest+0x21c>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004a08:	4b28      	ldr	r3, [pc, #160]	@ (8004aac <ESP_WakeTest+0x21c>)
 8004a0a:	22fa      	movs	r2, #250	@ 0xfa
 8004a0c:	0112      	lsls	r2, r2, #4
 8004a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004a10:	4b1c      	ldr	r3, [pc, #112]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 8004a12:	2204      	movs	r2, #4
 8004a14:	701a      	strb	r2, [r3, #0]

      break;
 8004a16:	e030      	b.n	8004a7a <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <ESP_WakeTest+0x220>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <ESP_WakeTest+0x1fc>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a24:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <ESP_WakeTest+0x204>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	2101      	movs	r1, #1
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f006 fdff 	bl	800b62e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4816      	ldr	r0, [pc, #88]	@ (8004a90 <ESP_WakeTest+0x200>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	0019      	movs	r1, r3
 8004a3a:	f006 fdf8 	bl	800b62e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <ESP_WakeTest+0x204>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	2102      	movs	r1, #2
 8004a44:	0018      	movs	r0, r3
 8004a46:	f006 fdf2 	bl	800b62e <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004a4a:	f002 f80f 	bl	8006a6c <SetESPMeasurementDone>
      break;
 8004a4e:	e014      	b.n	8004a7a <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004a50:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <ESP_WakeTest+0x1f4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
      break;
 8004a56:	e010      	b.n	8004a7a <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004a58:	4b14      	ldr	r3, [pc, #80]	@ (8004aac <ESP_WakeTest+0x21c>)
 8004a5a:	22fa      	movs	r2, #250	@ 0xfa
 8004a5c:	0112      	lsls	r2, r2, #4
 8004a5e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004a60:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <ESP_WakeTest+0x21c>)
 8004a62:	22fa      	movs	r2, #250	@ 0xfa
 8004a64:	0112      	lsls	r2, r2, #4
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004a68:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <ESP_WakeTest+0x21c>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004a6e:	e004      	b.n	8004a7a <ESP_WakeTest+0x1ea>
      break;
 8004a70:	46c0      	nop			@ (mov r8, r8)
 8004a72:	e002      	b.n	8004a7a <ESP_WakeTest+0x1ea>
      break;
 8004a74:	46c0      	nop			@ (mov r8, r8)
 8004a76:	e000      	b.n	8004a7a <ESP_WakeTest+0x1ea>
      break;
 8004a78:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b003      	add	sp, #12
 8004a80:	bd90      	pop	{r4, r7, pc}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	20000a44 	.word	0x20000a44
 8004a88:	0801bbec 	.word	0x0801bbec
 8004a8c:	200004ef 	.word	0x200004ef
 8004a90:	50000800 	.word	0x50000800
 8004a94:	50001c00 	.word	0x50001c00
 8004a98:	200007a8 	.word	0x200007a8
 8004a9c:	200003f0 	.word	0x200003f0
 8004aa0:	20000a42 	.word	0x20000a42
 8004aa4:	20000a41 	.word	0x20000a41
 8004aa8:	2000001e 	.word	0x2000001e
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	20000000 	.word	0x20000000

08004ab4 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004ac0:	4bd2      	ldr	r3, [pc, #840]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b0e      	cmp	r3, #14
 8004ac6:	d900      	bls.n	8004aca <ESP_Upkeep+0x16>
 8004ac8:	e234      	b.n	8004f34 <ESP_Upkeep+0x480>
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	4bd0      	ldr	r3, [pc, #832]	@ (8004e10 <ESP_Upkeep+0x35c>)
 8004ace:	18d3      	adds	r3, r2, r3
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004ad4:	4bcd      	ldr	r3, [pc, #820]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]
      break;
 8004ada:	e242      	b.n	8004f62 <ESP_Upkeep+0x4ae>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004adc:	4bcd      	ldr	r3, [pc, #820]	@ (8004e14 <ESP_Upkeep+0x360>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4053      	eors	r3, r2
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d036      	beq.n	8004b58 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	48ca      	ldr	r0, [pc, #808]	@ (8004e18 <ESP_Upkeep+0x364>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	0019      	movs	r1, r3
 8004af4:	f006 fd9b 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004af8:	2032      	movs	r0, #50	@ 0x32
 8004afa:	f005 fa03 	bl	8009f04 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	48c5      	ldr	r0, [pc, #788]	@ (8004e18 <ESP_Upkeep+0x364>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	0019      	movs	r1, r3
 8004b08:	f006 fd91 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b0c:	200a      	movs	r0, #10
 8004b0e:	f005 f9f9 	bl	8009f04 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004b12:	4bc2      	ldr	r3, [pc, #776]	@ (8004e1c <ESP_Upkeep+0x368>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	2101      	movs	r1, #1
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f006 fd88 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b1e:	200a      	movs	r0, #10
 8004b20:	f005 f9f0 	bl	8009f04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004b24:	4bbd      	ldr	r3, [pc, #756]	@ (8004e1c <ESP_Upkeep+0x368>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	2102      	movs	r1, #2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f006 fd7f 	bl	800b62e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b30:	200a      	movs	r0, #10
 8004b32:	f005 f9e7 	bl	8009f04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004b36:	4bb9      	ldr	r3, [pc, #740]	@ (8004e1c <ESP_Upkeep+0x368>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f006 fd76 	bl	800b62e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004b42:	f005 f9d5 	bl	8009ef0 <HAL_GetTick>
 8004b46:	0003      	movs	r3, r0
 8004b48:	22af      	movs	r2, #175	@ 0xaf
 8004b4a:	0092      	lsls	r2, r2, #2
 8004b4c:	189a      	adds	r2, r3, r2
 8004b4e:	4bb4      	ldr	r3, [pc, #720]	@ (8004e20 <ESP_Upkeep+0x36c>)
 8004b50:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004b52:	4bb0      	ldr	r3, [pc, #704]	@ (8004e14 <ESP_Upkeep+0x360>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004b58:	4bb2      	ldr	r3, [pc, #712]	@ (8004e24 <ESP_Upkeep+0x370>)
 8004b5a:	21ff      	movs	r1, #255	@ 0xff
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fe fe37 	bl	80037d0 <ESP_Receive>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d100      	bne.n	8004b68 <ESP_Upkeep+0xb4>
 8004b66:	e1f1      	b.n	8004f4c <ESP_Upkeep+0x498>
        EspState = ESP_STATE_MODE_SELECT;
 8004b68:	4ba8      	ldr	r3, [pc, #672]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004b6a:	220b      	movs	r2, #11
 8004b6c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b6e:	e1ed      	b.n	8004f4c <ESP_Upkeep+0x498>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004b70:	4bad      	ldr	r3, [pc, #692]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004b72:	2209      	movs	r2, #9
 8004b74:	2110      	movs	r1, #16
 8004b76:	0018      	movs	r0, r3
 8004b78:	f013 faf4 	bl	8018164 <memset>
      if(!InitIsDone || WifiReset){
 8004b7c:	4bab      	ldr	r3, [pc, #684]	@ (8004e2c <ESP_Upkeep+0x378>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	4053      	eors	r3, r2
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d103      	bne.n	8004b92 <ESP_Upkeep+0xde>
 8004b8a:	4ba9      	ldr	r3, [pc, #676]	@ (8004e30 <ESP_Upkeep+0x37c>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01a      	beq.n	8004bc8 <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004b92:	4ba5      	ldr	r3, [pc, #660]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004b94:	4aa7      	ldr	r2, [pc, #668]	@ (8004e34 <ESP_Upkeep+0x380>)
 8004b96:	6811      	ldr	r1, [r2, #0]
 8004b98:	6019      	str	r1, [r3, #0]
 8004b9a:	8891      	ldrh	r1, [r2, #4]
 8004b9c:	8099      	strh	r1, [r3, #4]
 8004b9e:	7992      	ldrb	r2, [r2, #6]
 8004ba0:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004ba2:	4b9a      	ldr	r3, [pc, #616]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004ba8:	4ba3      	ldr	r3, [pc, #652]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004bae:	4ba3      	ldr	r3, [pc, #652]	@ (8004e3c <ESP_Upkeep+0x388>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004bb4:	4ba0      	ldr	r3, [pc, #640]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	001a      	movs	r2, r3
 8004bba:	4b9b      	ldr	r3, [pc, #620]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004bbc:	5c9a      	ldrb	r2, [r3, r2]
 8004bbe:	4ba0      	ldr	r3, [pc, #640]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004bc0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004bc2:	4ba0      	ldr	r3, [pc, #640]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004bc8:	4b98      	ldr	r3, [pc, #608]	@ (8004e2c <ESP_Upkeep+0x378>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01f      	beq.n	8004c10 <ESP_Upkeep+0x15c>
 8004bd0:	4b9d      	ldr	r3, [pc, #628]	@ (8004e48 <ESP_Upkeep+0x394>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4053      	eors	r3, r2
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d018      	beq.n	8004c10 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004bde:	4b92      	ldr	r3, [pc, #584]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004be0:	4a9a      	ldr	r2, [pc, #616]	@ (8004e4c <ESP_Upkeep+0x398>)
 8004be2:	6811      	ldr	r1, [r2, #0]
 8004be4:	6019      	str	r1, [r3, #0]
 8004be6:	8892      	ldrh	r2, [r2, #4]
 8004be8:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004bea:	4b88      	ldr	r3, [pc, #544]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004bec:	2204      	movs	r2, #4
 8004bee:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bf0:	4b91      	ldr	r3, [pc, #580]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004bf6:	4b91      	ldr	r3, [pc, #580]	@ (8004e3c <ESP_Upkeep+0x388>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	001a      	movs	r2, r3
 8004c02:	4b89      	ldr	r3, [pc, #548]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004c04:	5c9a      	ldrb	r2, [r3, r2]
 8004c06:	4b8e      	ldr	r3, [pc, #568]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004c08:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004c10:	4b86      	ldr	r3, [pc, #536]	@ (8004e2c <ESP_Upkeep+0x378>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d025      	beq.n	8004c64 <ESP_Upkeep+0x1b0>
 8004c18:	4b8b      	ldr	r3, [pc, #556]	@ (8004e48 <ESP_Upkeep+0x394>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d021      	beq.n	8004c64 <ESP_Upkeep+0x1b0>
 8004c20:	4b83      	ldr	r3, [pc, #524]	@ (8004e30 <ESP_Upkeep+0x37c>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2201      	movs	r2, #1
 8004c26:	4053      	eors	r3, r2
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01a      	beq.n	8004c64 <ESP_Upkeep+0x1b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004c2e:	4b7e      	ldr	r3, [pc, #504]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004c30:	4a87      	ldr	r2, [pc, #540]	@ (8004e50 <ESP_Upkeep+0x39c>)
 8004c32:	8811      	ldrh	r1, [r2, #0]
 8004c34:	8019      	strh	r1, [r3, #0]
 8004c36:	7892      	ldrb	r2, [r2, #2]
 8004c38:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004c3a:	4b74      	ldr	r3, [pc, #464]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c40:	4b7d      	ldr	r3, [pc, #500]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004c46:	4b7d      	ldr	r3, [pc, #500]	@ (8004e3c <ESP_Upkeep+0x388>)
 8004c48:	2202      	movs	r2, #2
 8004c4a:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004c4c:	f003 ffe6 	bl	8008c1c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004c50:	4b79      	ldr	r3, [pc, #484]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	001a      	movs	r2, r3
 8004c56:	4b74      	ldr	r3, [pc, #464]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004c58:	5c9a      	ldrb	r2, [r3, r2]
 8004c5a:	4b79      	ldr	r3, [pc, #484]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004c5c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c5e:	4b79      	ldr	r3, [pc, #484]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004c64:	4b7b      	ldr	r3, [pc, #492]	@ (8004e54 <ESP_Upkeep+0x3a0>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d100      	bne.n	8004c6e <ESP_Upkeep+0x1ba>
 8004c6c:	e170      	b.n	8004f50 <ESP_Upkeep+0x49c>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004c6e:	4b6e      	ldr	r3, [pc, #440]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004c70:	4a79      	ldr	r2, [pc, #484]	@ (8004e58 <ESP_Upkeep+0x3a4>)
 8004c72:	6811      	ldr	r1, [r2, #0]
 8004c74:	6019      	str	r1, [r3, #0]
 8004c76:	7912      	ldrb	r2, [r2, #4]
 8004c78:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004c7a:	4b64      	ldr	r3, [pc, #400]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c80:	4b6d      	ldr	r3, [pc, #436]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004c86:	4b6d      	ldr	r3, [pc, #436]	@ (8004e3c <ESP_Upkeep+0x388>)
 8004c88:	2203      	movs	r2, #3
 8004c8a:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004c8c:	f003 ffc6 	bl	8008c1c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004c90:	4b69      	ldr	r3, [pc, #420]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	001a      	movs	r2, r3
 8004c96:	4b64      	ldr	r3, [pc, #400]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004c98:	5c9a      	ldrb	r2, [r3, r2]
 8004c9a:	4b69      	ldr	r3, [pc, #420]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004c9c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c9e:	4b69      	ldr	r3, [pc, #420]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004ca4:	e154      	b.n	8004f50 <ESP_Upkeep+0x49c>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004ca6:	4b66      	ldr	r3, [pc, #408]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	1dfc      	adds	r4, r7, #7
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff fc6f 	bl	8004590 <AT_Send>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d100      	bne.n	8004cc0 <ESP_Upkeep+0x20c>
 8004cbe:	e149      	b.n	8004f54 <ESP_Upkeep+0x4a0>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004cc0:	4b52      	ldr	r3, [pc, #328]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004cc6:	e145      	b.n	8004f54 <ESP_Upkeep+0x4a0>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004cc8:	4b55      	ldr	r3, [pc, #340]	@ (8004e20 <ESP_Upkeep+0x36c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f004 fd1d 	bl	800970c <TimestampIsReached>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d100      	bne.n	8004cd8 <ESP_Upkeep+0x224>
 8004cd6:	e13f      	b.n	8004f58 <ESP_Upkeep+0x4a4>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7ff fb6b 	bl	80043b8 <DMA_ProcessBuffer>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	4b5d      	ldr	r3, [pc, #372]	@ (8004e5c <ESP_Upkeep+0x3a8>)
 8004ce8:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004cea:	4b5c      	ldr	r3, [pc, #368]	@ (8004e5c <ESP_Upkeep+0x3a8>)
 8004cec:	781a      	ldrb	r2, [r3, #0]
 8004cee:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	1dbc      	adds	r4, r7, #6
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	0010      	movs	r0, r2
 8004cf8:	f7ff fc14 	bl	8004524 <ATCompare>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004d00:	4b56      	ldr	r3, [pc, #344]	@ (8004e5c <ESP_Upkeep+0x3a8>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10f      	bne.n	8004d28 <ESP_Upkeep+0x274>
          if(ATCommand == AT_SENDDATA){
 8004d08:	4b4d      	ldr	r3, [pc, #308]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b0e      	cmp	r3, #14
 8004d0e:	d108      	bne.n	8004d22 <ESP_Upkeep+0x26e>
            ATCommand = AT_HTTPCPOST;
 8004d10:	4b4b      	ldr	r3, [pc, #300]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004d12:	220d      	movs	r2, #13
 8004d14:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004d16:	4b4b      	ldr	r3, [pc, #300]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004d18:	2202      	movs	r2, #2
 8004d1a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8004d1c:	4b46      	ldr	r3, [pc, #280]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8004d22:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004d24:	2204      	movs	r2, #4
 8004d26:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004d28:	4b4c      	ldr	r3, [pc, #304]	@ (8004e5c <ESP_Upkeep+0x3a8>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d106      	bne.n	8004d3e <ESP_Upkeep+0x28a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004d30:	f005 f8de 	bl	8009ef0 <HAL_GetTick>
 8004d34:	0003      	movs	r3, r0
 8004d36:	330a      	adds	r3, #10
 8004d38:	001a      	movs	r2, r3
 8004d3a:	4b39      	ldr	r3, [pc, #228]	@ (8004e20 <ESP_Upkeep+0x36c>)
 8004d3c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004d3e:	4b47      	ldr	r3, [pc, #284]	@ (8004e5c <ESP_Upkeep+0x3a8>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d116      	bne.n	8004d74 <ESP_Upkeep+0x2c0>
          if(ATCommand != AT_SENDDATA){
 8004d46:	4b3e      	ldr	r3, [pc, #248]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b0e      	cmp	r3, #14
 8004d4c:	d003      	beq.n	8004d56 <ESP_Upkeep+0x2a2>
            EspState = ESP_STATE_SEND;
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004d50:	2204      	movs	r2, #4
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e00e      	b.n	8004d74 <ESP_Upkeep+0x2c0>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004d56:	4b3a      	ldr	r3, [pc, #232]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004d58:	220d      	movs	r2, #13
 8004d5a:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004d5c:	4b36      	ldr	r3, [pc, #216]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	4b34      	ldr	r3, [pc, #208]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004d66:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004d68:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004d6e:	4b27      	ldr	r3, [pc, #156]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004d70:	2204      	movs	r2, #4
 8004d72:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004d74:	1dbb      	adds	r3, r7, #6
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d100      	bne.n	8004d7e <ESP_Upkeep+0x2ca>
 8004d7c:	e0ec      	b.n	8004f58 <ESP_Upkeep+0x4a4>
          EspState = ESP_STATE_NEXT_AT;
 8004d7e:	4b23      	ldr	r3, [pc, #140]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004d80:	2205      	movs	r2, #5
 8004d82:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004d84:	e0e8      	b.n	8004f58 <ESP_Upkeep+0x4a4>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004d86:	4b2c      	ldr	r3, [pc, #176]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004d90:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <ESP_Upkeep+0x384>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	001a      	movs	r2, r3
 8004d98:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <ESP_Upkeep+0x374>)
 8004d9a:	5c9a      	ldrb	r2, [r3, r2]
 8004d9c:	4b28      	ldr	r3, [pc, #160]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004d9e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004da0:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d102      	bne.n	8004dae <ESP_Upkeep+0x2fa>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004da8:	4b26      	ldr	r3, [pc, #152]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004dae:	4b24      	ldr	r3, [pc, #144]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b0d      	cmp	r3, #13
 8004db4:	d102      	bne.n	8004dbc <ESP_Upkeep+0x308>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004db6:	4b23      	ldr	r3, [pc, #140]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004db8:	2202      	movs	r2, #2
 8004dba:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004dbc:	4b20      	ldr	r3, [pc, #128]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b0d      	cmp	r3, #13
 8004dc2:	d006      	beq.n	8004dd2 <ESP_Upkeep+0x31e>
 8004dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d002      	beq.n	8004dd2 <ESP_Upkeep+0x31e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <ESP_Upkeep+0x390>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004dd8:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <ESP_Upkeep+0x38c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d000      	beq.n	8004de2 <ESP_Upkeep+0x32e>
 8004de0:	e0bc      	b.n	8004f5c <ESP_Upkeep+0x4a8>
        if(Mode == AT_MODE_SEND){
 8004de2:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <ESP_Upkeep+0x388>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d10c      	bne.n	8004e04 <ESP_Upkeep+0x350>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004dea:	f005 f881 	bl	8009ef0 <HAL_GetTick>
 8004dee:	0003      	movs	r3, r0
 8004df0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e60 <ESP_Upkeep+0x3ac>)
 8004df2:	189a      	adds	r2, r3, r2
 8004df4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e20 <ESP_Upkeep+0x36c>)
 8004df6:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8004df8:	f003 ff22 	bl	8008c40 <ResetESPIndicator>
          EspState = ESP_STATE_DEINIT;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004dfe:	220d      	movs	r2, #13
 8004e00:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8004e02:	e0ab      	b.n	8004f5c <ESP_Upkeep+0x4a8>
          EspState = ESP_STATE_RESET;
 8004e04:	4b01      	ldr	r3, [pc, #4]	@ (8004e0c <ESP_Upkeep+0x358>)
 8004e06:	2209      	movs	r2, #9
 8004e08:	701a      	strb	r2, [r3, #0]
    break;
 8004e0a:	e0a7      	b.n	8004f5c <ESP_Upkeep+0x4a8>
 8004e0c:	2000001d 	.word	0x2000001d
 8004e10:	0801bc04 	.word	0x0801bc04
 8004e14:	200004ef 	.word	0x200004ef
 8004e18:	50000800 	.word	0x50000800
 8004e1c:	50001c00 	.word	0x50001c00
 8004e20:	200007a8 	.word	0x200007a8
 8004e24:	200003f0 	.word	0x200003f0
 8004e28:	2000079c 	.word	0x2000079c
 8004e2c:	200004f0 	.word	0x200004f0
 8004e30:	200004f1 	.word	0x200004f1
 8004e34:	20000004 	.word	0x20000004
 8004e38:	200007a6 	.word	0x200007a6
 8004e3c:	20000a43 	.word	0x20000a43
 8004e40:	20000a42 	.word	0x20000a42
 8004e44:	20000a41 	.word	0x20000a41
 8004e48:	200004f3 	.word	0x200004f3
 8004e4c:	20000010 	.word	0x20000010
 8004e50:	2000000c 	.word	0x2000000c
 8004e54:	200004f2 	.word	0x200004f2
 8004e58:	20000018 	.word	0x20000018
 8004e5c:	2000001f 	.word	0x2000001f
 8004e60:	000493e0 	.word	0x000493e0

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8004e64:	4b41      	ldr	r3, [pc, #260]	@ (8004f6c <ESP_Upkeep+0x4b8>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e6a:	4b41      	ldr	r3, [pc, #260]	@ (8004f70 <ESP_Upkeep+0x4bc>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2101      	movs	r1, #1
 8004e70:	0018      	movs	r0, r3
 8004e72:	f006 fbdc 	bl	800b62e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e76:	2001      	movs	r0, #1
 8004e78:	f005 f844 	bl	8009f04 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	483c      	ldr	r0, [pc, #240]	@ (8004f74 <ESP_Upkeep+0x4c0>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	0019      	movs	r1, r3
 8004e86:	f006 fbd2 	bl	800b62e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e8a:	2001      	movs	r0, #1
 8004e8c:	f005 f83a 	bl	8009f04 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004e90:	4b37      	ldr	r3, [pc, #220]	@ (8004f70 <ESP_Upkeep+0x4bc>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	2102      	movs	r1, #2
 8004e96:	0018      	movs	r0, r3
 8004e98:	f006 fbc9 	bl	800b62e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8004e9c:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <ESP_Upkeep+0x4c4>)
 8004e9e:	2209      	movs	r2, #9
 8004ea0:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	f005 f82e 	bl	8009f04 <HAL_Delay>
      break;
 8004ea8:	e05b      	b.n	8004f62 <ESP_Upkeep+0x4ae>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8004eaa:	4b34      	ldr	r3, [pc, #208]	@ (8004f7c <ESP_Upkeep+0x4c8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f004 fc2c 	bl	800970c <TimestampIsReached>
 8004eb4:	1e03      	subs	r3, r0, #0
 8004eb6:	d103      	bne.n	8004ec0 <ESP_Upkeep+0x40c>
 8004eb8:	4b31      	ldr	r3, [pc, #196]	@ (8004f80 <ESP_Upkeep+0x4cc>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d04f      	beq.n	8004f60 <ESP_Upkeep+0x4ac>
        if(Mode == AT_MODE_INIT){
 8004ec0:	4b30      	ldr	r3, [pc, #192]	@ (8004f84 <ESP_Upkeep+0x4d0>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <ESP_Upkeep+0x420>
          InitIsDone = true;
 8004ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8004f88 <ESP_Upkeep+0x4d4>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004ece:	4b2a      	ldr	r3, [pc, #168]	@ (8004f78 <ESP_Upkeep+0x4c4>)
 8004ed0:	220b      	movs	r2, #11
 8004ed2:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <ESP_Upkeep+0x4d0>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <ESP_Upkeep+0x434>
          ConnectionMade = true;
 8004edc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f8c <ESP_Upkeep+0x4d8>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004ee2:	4b25      	ldr	r3, [pc, #148]	@ (8004f78 <ESP_Upkeep+0x4c4>)
 8004ee4:	220b      	movs	r2, #11
 8004ee6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8004ee8:	4b26      	ldr	r3, [pc, #152]	@ (8004f84 <ESP_Upkeep+0x4d0>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d102      	bne.n	8004ef6 <ESP_Upkeep+0x442>
          EspState = ESP_STATE_INIT;
 8004ef0:	4b21      	ldr	r3, [pc, #132]	@ (8004f78 <ESP_Upkeep+0x4c4>)
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8004ef6:	4b23      	ldr	r3, [pc, #140]	@ (8004f84 <ESP_Upkeep+0x4d0>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d130      	bne.n	8004f60 <ESP_Upkeep+0x4ac>
          EspState = ESP_STATE_CONFIG;
 8004efe:	4b1e      	ldr	r3, [pc, #120]	@ (8004f78 <ESP_Upkeep+0x4c4>)
 8004f00:	220e      	movs	r2, #14
 8004f02:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 8004f04:	e02c      	b.n	8004f60 <ESP_Upkeep+0x4ac>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8004f06:	4a22      	ldr	r2, [pc, #136]	@ (8004f90 <ESP_Upkeep+0x4dc>)
 8004f08:	4b22      	ldr	r3, [pc, #136]	@ (8004f94 <ESP_Upkeep+0x4e0>)
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f004 fc53 	bl	80097b8 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8004f12:	f011 fe87 	bl	8016c24 <GetUsbRxPointer>
 8004f16:	0003      	movs	r3, r0
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f8b3 	bl	8005084 <Process_PC_Config>

      break;
 8004f1e:	e020      	b.n	8004f62 <ESP_Upkeep+0x4ae>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004f20:	4a1d      	ldr	r2, [pc, #116]	@ (8004f98 <ESP_Upkeep+0x4e4>)
 8004f22:	4b1c      	ldr	r3, [pc, #112]	@ (8004f94 <ESP_Upkeep+0x4e0>)
 8004f24:	0019      	movs	r1, r3
 8004f26:	2003      	movs	r0, #3
 8004f28:	f004 fc46 	bl	80097b8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004f2c:	4b12      	ldr	r3, [pc, #72]	@ (8004f78 <ESP_Upkeep+0x4c4>)
 8004f2e:	2202      	movs	r2, #2
 8004f30:	701a      	strb	r2, [r3, #0]
      break;
 8004f32:	e016      	b.n	8004f62 <ESP_Upkeep+0x4ae>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 8004f34:	4a19      	ldr	r2, [pc, #100]	@ (8004f9c <ESP_Upkeep+0x4e8>)
 8004f36:	4b17      	ldr	r3, [pc, #92]	@ (8004f94 <ESP_Upkeep+0x4e0>)
 8004f38:	0019      	movs	r1, r3
 8004f3a:	2003      	movs	r0, #3
 8004f3c:	f004 fc3c 	bl	80097b8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8004f40:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <ESP_Upkeep+0x4c4>)
 8004f42:	2207      	movs	r2, #7
 8004f44:	701a      	strb	r2, [r3, #0]
      break;
 8004f46:	e00c      	b.n	8004f62 <ESP_Upkeep+0x4ae>
      break;
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	e00a      	b.n	8004f62 <ESP_Upkeep+0x4ae>
      break;
 8004f4c:	46c0      	nop			@ (mov r8, r8)
 8004f4e:	e008      	b.n	8004f62 <ESP_Upkeep+0x4ae>
    break;
 8004f50:	46c0      	nop			@ (mov r8, r8)
 8004f52:	e006      	b.n	8004f62 <ESP_Upkeep+0x4ae>
         break;
 8004f54:	46c0      	nop			@ (mov r8, r8)
 8004f56:	e004      	b.n	8004f62 <ESP_Upkeep+0x4ae>
      break;
 8004f58:	46c0      	nop			@ (mov r8, r8)
 8004f5a:	e002      	b.n	8004f62 <ESP_Upkeep+0x4ae>
    break;
 8004f5c:	46c0      	nop			@ (mov r8, r8)
 8004f5e:	e000      	b.n	8004f62 <ESP_Upkeep+0x4ae>
      break;
 8004f60:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b003      	add	sp, #12
 8004f68:	bd90      	pop	{r4, r7, pc}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	200004ef 	.word	0x200004ef
 8004f70:	50001c00 	.word	0x50001c00
 8004f74:	50000800 	.word	0x50000800
 8004f78:	2000001d 	.word	0x2000001d
 8004f7c:	200007a8 	.word	0x200007a8
 8004f80:	200004f2 	.word	0x200004f2
 8004f84:	20000a43 	.word	0x20000a43
 8004f88:	200004f0 	.word	0x200004f0
 8004f8c:	200004f3 	.word	0x200004f3
 8004f90:	0801b408 	.word	0x0801b408
 8004f94:	0801af90 	.word	0x0801af90
 8004f98:	0801b420 	.word	0x0801b420
 8004f9c:	0801b434 	.word	0x0801b434

08004fa0 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004fa8:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <I2CSensors_Init+0x30>)
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004fae:	4a09      	ldr	r2, [pc, #36]	@ (8004fd4 <I2CSensors_Init+0x34>)
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <I2CSensors_Init+0x38>)
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 fe5f 	bl	8005c78 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004fba:	4a06      	ldr	r2, [pc, #24]	@ (8004fd4 <I2CSensors_Init+0x34>)
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <I2CSensors_Init+0x38>)
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f000 fcc9 	bl	8005958 <Gas_Init>
}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			@ (mov r8, r8)
 8004fd0:	20000ae0 	.word	0x20000ae0
 8004fd4:	08005031 	.word	0x08005031
 8004fd8:	08004fdd 	.word	0x08004fdd

08004fdc <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6039      	str	r1, [r7, #0]
 8004fe4:	0011      	movs	r1, r2
 8004fe6:	1dfb      	adds	r3, r7, #7
 8004fe8:	1c02      	adds	r2, r0, #0
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	1dbb      	adds	r3, r7, #6
 8004fee:	1c0a      	adds	r2, r1, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <ReadI2C+0x50>)
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	1dfb      	adds	r3, r7, #7
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	18db      	adds	r3, r3, r3
 8004ffe:	b299      	uxth	r1, r3
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	250f      	movs	r5, #15
 8005008:	197c      	adds	r4, r7, r5
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	f006 fcc8 	bl	800b9a0 <HAL_I2C_Master_Receive_DMA>
 8005010:	0003      	movs	r3, r0
 8005012:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005014:	197b      	adds	r3, r7, r5
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <ReadI2C+0x44>
        return false;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <ReadI2C+0x46>
    }
    return true;
 8005020:	2301      	movs	r3, #1
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b004      	add	sp, #16
 8005028:	bdb0      	pop	{r4, r5, r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	20000ae0 	.word	0x20000ae0

08005030 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005030:	b5b0      	push	{r4, r5, r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6039      	str	r1, [r7, #0]
 8005038:	0011      	movs	r1, r2
 800503a:	1dfb      	adds	r3, r7, #7
 800503c:	1c02      	adds	r2, r0, #0
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	1c0a      	adds	r2, r1, #0
 8005044:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005046:	4b0e      	ldr	r3, [pc, #56]	@ (8005080 <WriteI2C+0x50>)
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	1dfb      	adds	r3, r7, #7
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	18db      	adds	r3, r3, r3
 8005052:	b299      	uxth	r1, r3
 8005054:	1dbb      	adds	r3, r7, #6
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	250f      	movs	r5, #15
 800505c:	197c      	adds	r4, r7, r5
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	f006 fb98 	bl	800b794 <HAL_I2C_Master_Transmit_DMA>
 8005064:	0003      	movs	r3, r0
 8005066:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005068:	197b      	adds	r3, r7, r5
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <WriteI2C+0x44>
        return false;
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <WriteI2C+0x46>
    }
    return true;
 8005074:	2301      	movs	r3, #1
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	b004      	add	sp, #16
 800507c:	bdb0      	pop	{r4, r5, r7, pc}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	20000ae0 	.word	0x20000ae0

08005084 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b0c3      	sub	sp, #268	@ 0x10c
 8005088:	af3e      	add	r7, sp, #248	@ 0xf8
 800508a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800508c:	f011 fdea 	bl	8016c64 <GetUsbRxDataSize>
 8005090:	0003      	movs	r3, r0
 8005092:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b05      	cmp	r3, #5
 8005098:	d971      	bls.n	800517e <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2123      	movs	r1, #35	@ 0x23
 800509e:	0018      	movs	r0, r3
 80050a0:	f013 f868 	bl	8018174 <strchr>
 80050a4:	0003      	movs	r3, r0
 80050a6:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d065      	beq.n	800517a <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	785a      	ldrb	r2, [r3, #1]
 80050b2:	4b34      	ldr	r3, [pc, #208]	@ (8005184 <Process_PC_Config+0x100>)
 80050b4:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	789a      	ldrb	r2, [r3, #2]
 80050ba:	4b32      	ldr	r3, [pc, #200]	@ (8005184 <Process_PC_Config+0x100>)
 80050bc:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80050be:	4b31      	ldr	r3, [pc, #196]	@ (8005184 <Process_PC_Config+0x100>)
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	3305      	adds	r3, #5
 80050c4:	001a      	movs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d351      	bcc.n	8005170 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	1cd9      	adds	r1, r3, #3
 80050d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005184 <Process_PC_Config+0x100>)
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	001a      	movs	r2, r3
 80050d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005188 <Process_PC_Config+0x104>)
 80050d8:	0018      	movs	r0, r3
 80050da:	f013 f90d 	bl	80182f8 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80050de:	4b29      	ldr	r3, [pc, #164]	@ (8005184 <Process_PC_Config+0x100>)
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	3303      	adds	r3, #3
 80050e4:	001a      	movs	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	189b      	adds	r3, r3, r2
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	b21a      	sxth	r2, r3
 80050f0:	4b24      	ldr	r3, [pc, #144]	@ (8005184 <Process_PC_Config+0x100>)
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	3304      	adds	r3, #4
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	18cb      	adds	r3, r1, r3
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	b21b      	sxth	r3, r3
 8005102:	b299      	uxth	r1, r3
 8005104:	4a1f      	ldr	r2, [pc, #124]	@ (8005184 <Process_PC_Config+0x100>)
 8005106:	2381      	movs	r3, #129	@ 0x81
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 800510c:	4a1d      	ldr	r2, [pc, #116]	@ (8005184 <Process_PC_Config+0x100>)
 800510e:	2381      	movs	r3, #129	@ 0x81
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	5ad4      	ldrh	r4, [r2, r3]
 8005114:	4b1b      	ldr	r3, [pc, #108]	@ (8005184 <Process_PC_Config+0x100>)
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	3303      	adds	r3, #3
 800511a:	b29a      	uxth	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	0011      	movs	r1, r2
 8005120:	0018      	movs	r0, r3
 8005122:	f000 f975 	bl	8005410 <CRC16_ARC>
 8005126:	0003      	movs	r3, r0
 8005128:	429c      	cmp	r4, r3
 800512a:	d007      	beq.n	800513c <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 800512c:	4b15      	ldr	r3, [pc, #84]	@ (8005184 <Process_PC_Config+0x100>)
 800512e:	785a      	ldrb	r2, [r3, #1]
 8005130:	4b15      	ldr	r3, [pc, #84]	@ (8005188 <Process_PC_Config+0x104>)
 8005132:	0019      	movs	r1, r3
 8005134:	2001      	movs	r0, #1
 8005136:	f000 f919 	bl	800536c <Create_Message>
 800513a:	e016      	b.n	800516a <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 800513c:	4c11      	ldr	r4, [pc, #68]	@ (8005184 <Process_PC_Config+0x100>)
 800513e:	466b      	mov	r3, sp
 8005140:	0018      	movs	r0, r3
 8005142:	0023      	movs	r3, r4
 8005144:	3310      	adds	r3, #16
 8005146:	22f4      	movs	r2, #244	@ 0xf4
 8005148:	0019      	movs	r1, r3
 800514a:	f013 f8d5 	bl	80182f8 <memcpy>
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	6861      	ldr	r1, [r4, #4]
 8005152:	68a2      	ldr	r2, [r4, #8]
 8005154:	68e3      	ldr	r3, [r4, #12]
 8005156:	f000 f819 	bl	800518c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 800515a:	4b0a      	ldr	r3, [pc, #40]	@ (8005184 <Process_PC_Config+0x100>)
 800515c:	7818      	ldrb	r0, [r3, #0]
 800515e:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <Process_PC_Config+0x100>)
 8005160:	785a      	ldrb	r2, [r3, #1]
 8005162:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <Process_PC_Config+0x104>)
 8005164:	0019      	movs	r1, r3
 8005166:	f000 f901 	bl	800536c <Create_Message>
                }
                ResetUsbRxDataSize();
 800516a:	f011 fd63 	bl	8016c34 <ResetUsbRxDataSize>
                return;
 800516e:	e006      	b.n	800517e <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	0018      	movs	r0, r3
 8005174:	f011 fd80 	bl	8016c78 <GetUsbRxNextChunk>
 8005178:	e001      	b.n	800517e <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 800517a:	f011 fd5b 	bl	8016c34 <ResetUsbRxDataSize>
        }
    }
}
 800517e:	46bd      	mov	sp, r7
 8005180:	b005      	add	sp, #20
 8005182:	bd90      	pop	{r4, r7, pc}
 8005184:	20000ae4 	.word	0x20000ae4
 8005188:	20000ae6 	.word	0x20000ae6

0800518c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 800518c:	b084      	sub	sp, #16
 800518e:	b5b0      	push	{r4, r5, r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	2518      	movs	r5, #24
 8005196:	197c      	adds	r4, r7, r5
 8005198:	6020      	str	r0, [r4, #0]
 800519a:	6061      	str	r1, [r4, #4]
 800519c:	60a2      	str	r2, [r4, #8]
 800519e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80051a0:	197b      	adds	r3, r7, r5
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80051a6:	d100      	bne.n	80051aa <ProcessCmd+0x1e>
 80051a8:	e09c      	b.n	80052e4 <ProcessCmd+0x158>
 80051aa:	dd00      	ble.n	80051ae <ProcessCmd+0x22>
 80051ac:	e0bc      	b.n	8005328 <ProcessCmd+0x19c>
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	dc0a      	bgt.n	80051c8 <ProcessCmd+0x3c>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	da00      	bge.n	80051b8 <ProcessCmd+0x2c>
 80051b6:	e0b7      	b.n	8005328 <ProcessCmd+0x19c>
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d900      	bls.n	80051be <ProcessCmd+0x32>
 80051bc:	e0b4      	b.n	8005328 <ProcessCmd+0x19c>
 80051be:	009a      	lsls	r2, r3, #2
 80051c0:	4b5d      	ldr	r3, [pc, #372]	@ (8005338 <ProcessCmd+0x1ac>)
 80051c2:	18d3      	adds	r3, r2, r3
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	469f      	mov	pc, r3
 80051c8:	2bfd      	cmp	r3, #253	@ 0xfd
 80051ca:	d100      	bne.n	80051ce <ProcessCmd+0x42>
 80051cc:	e084      	b.n	80052d8 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 80051ce:	e0ab      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80051d0:	2118      	movs	r1, #24
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	001a      	movs	r2, r3
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	1c99      	adds	r1, r3, #2
 80051dc:	4857      	ldr	r0, [pc, #348]	@ (800533c <ProcessCmd+0x1b0>)
 80051de:	230c      	movs	r3, #12
 80051e0:	f7fe f9ec 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80051e4:	e0a0      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80051e6:	2118      	movs	r1, #24
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	001a      	movs	r2, r3
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	1c99      	adds	r1, r3, #2
 80051f2:	4853      	ldr	r0, [pc, #332]	@ (8005340 <ProcessCmd+0x1b4>)
 80051f4:	230c      	movs	r3, #12
 80051f6:	f7fe f9e1 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80051fa:	e095      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80051fc:	2118      	movs	r1, #24
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	001a      	movs	r2, r3
 8005204:	187b      	adds	r3, r7, r1
 8005206:	1c99      	adds	r1, r3, #2
 8005208:	484e      	ldr	r0, [pc, #312]	@ (8005344 <ProcessCmd+0x1b8>)
 800520a:	230c      	movs	r3, #12
 800520c:	f7fe f9d6 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005210:	e08a      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005212:	2118      	movs	r1, #24
 8005214:	187b      	adds	r3, r7, r1
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	001a      	movs	r2, r3
 800521a:	187b      	adds	r3, r7, r1
 800521c:	1c99      	adds	r1, r3, #2
 800521e:	484a      	ldr	r0, [pc, #296]	@ (8005348 <ProcessCmd+0x1bc>)
 8005220:	230c      	movs	r3, #12
 8005222:	f7fe f9cb 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005226:	e07f      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005228:	2118      	movs	r1, #24
 800522a:	187b      	adds	r3, r7, r1
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	001a      	movs	r2, r3
 8005230:	187b      	adds	r3, r7, r1
 8005232:	1c99      	adds	r1, r3, #2
 8005234:	4845      	ldr	r0, [pc, #276]	@ (800534c <ProcessCmd+0x1c0>)
 8005236:	230c      	movs	r3, #12
 8005238:	f7fe f9c0 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800523c:	e074      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800523e:	2118      	movs	r1, #24
 8005240:	187b      	adds	r3, r7, r1
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	001a      	movs	r2, r3
 8005246:	187b      	adds	r3, r7, r1
 8005248:	1c99      	adds	r1, r3, #2
 800524a:	4841      	ldr	r0, [pc, #260]	@ (8005350 <ProcessCmd+0x1c4>)
 800524c:	230c      	movs	r3, #12
 800524e:	f7fe f9b5 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005252:	e069      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005254:	2118      	movs	r1, #24
 8005256:	187b      	adds	r3, r7, r1
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	001a      	movs	r2, r3
 800525c:	187b      	adds	r3, r7, r1
 800525e:	1c99      	adds	r1, r3, #2
 8005260:	483c      	ldr	r0, [pc, #240]	@ (8005354 <ProcessCmd+0x1c8>)
 8005262:	230c      	movs	r3, #12
 8005264:	f7fe f9aa 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005268:	e05e      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800526a:	2118      	movs	r1, #24
 800526c:	187b      	adds	r3, r7, r1
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	001a      	movs	r2, r3
 8005272:	187b      	adds	r3, r7, r1
 8005274:	1c99      	adds	r1, r3, #2
 8005276:	4838      	ldr	r0, [pc, #224]	@ (8005358 <ProcessCmd+0x1cc>)
 8005278:	231e      	movs	r3, #30
 800527a:	f7fe f99f 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800527e:	e053      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005280:	2118      	movs	r1, #24
 8005282:	187b      	adds	r3, r7, r1
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	001a      	movs	r2, r3
 8005288:	187b      	adds	r3, r7, r1
 800528a:	1c99      	adds	r1, r3, #2
 800528c:	4833      	ldr	r0, [pc, #204]	@ (800535c <ProcessCmd+0x1d0>)
 800528e:	230c      	movs	r3, #12
 8005290:	f7fe f994 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005294:	e048      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005296:	2118      	movs	r1, #24
 8005298:	187b      	adds	r3, r7, r1
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	001a      	movs	r2, r3
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	1c99      	adds	r1, r3, #2
 80052a2:	482f      	ldr	r0, [pc, #188]	@ (8005360 <ProcessCmd+0x1d4>)
 80052a4:	230c      	movs	r3, #12
 80052a6:	f7fe f989 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052aa:	e03d      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80052ac:	2118      	movs	r1, #24
 80052ae:	187b      	adds	r3, r7, r1
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	001a      	movs	r2, r3
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	1c99      	adds	r1, r3, #2
 80052b8:	482a      	ldr	r0, [pc, #168]	@ (8005364 <ProcessCmd+0x1d8>)
 80052ba:	230c      	movs	r3, #12
 80052bc:	f7fe f97e 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052c0:	e032      	b.n	8005328 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80052c2:	2118      	movs	r1, #24
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	001a      	movs	r2, r3
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	1c99      	adds	r1, r3, #2
 80052ce:	4826      	ldr	r0, [pc, #152]	@ (8005368 <ProcessCmd+0x1dc>)
 80052d0:	230c      	movs	r3, #12
 80052d2:	f7fe f973 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80052d6:	e027      	b.n	8005328 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80052d8:	4b18      	ldr	r3, [pc, #96]	@ (800533c <ProcessCmd+0x1b0>)
 80052da:	21ba      	movs	r1, #186	@ 0xba
 80052dc:	0018      	movs	r0, r3
 80052de:	f7fe f9b3 	bl	8003648 <ClearEEprom>
        break;
 80052e2:	e021      	b.n	8005328 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80052e4:	2118      	movs	r1, #24
 80052e6:	187b      	adds	r3, r7, r1
 80052e8:	789b      	ldrb	r3, [r3, #2]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	b21a      	sxth	r2, r3
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	78db      	ldrb	r3, [r3, #3]
 80052f2:	b21b      	sxth	r3, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	b21a      	sxth	r2, r3
 80052f8:	1dbb      	adds	r3, r7, #6
 80052fa:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80052fc:	1dbb      	adds	r3, r7, #6
 80052fe:	881a      	ldrh	r2, [r3, #0]
 8005300:	23c0      	movs	r3, #192	@ 0xc0
 8005302:	015b      	lsls	r3, r3, #5
 8005304:	429a      	cmp	r2, r3
 8005306:	d207      	bcs.n	8005318 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005308:	1dbb      	adds	r3, r7, #6
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	4a0b      	ldr	r2, [pc, #44]	@ (800533c <ProcessCmd+0x1b0>)
 800530e:	0019      	movs	r1, r3
 8005310:	0010      	movs	r0, r2
 8005312:	f7fe f999 	bl	8003648 <ClearEEprom>
            break;
 8005316:	e006      	b.n	8005326 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005318:	23c0      	movs	r3, #192	@ 0xc0
 800531a:	015b      	lsls	r3, r3, #5
 800531c:	4a07      	ldr	r2, [pc, #28]	@ (800533c <ProcessCmd+0x1b0>)
 800531e:	0019      	movs	r1, r3
 8005320:	0010      	movs	r0, r2
 8005322:	f7fe f991 	bl	8003648 <ClearEEprom>
            break;
 8005326:	46c0      	nop			@ (mov r8, r8)
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bcb0      	pop	{r4, r5, r7}
 8005330:	bc08      	pop	{r3}
 8005332:	b004      	add	sp, #16
 8005334:	4718      	bx	r3
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	0801bc40 	.word	0x0801bc40
 800533c:	08080000 	.word	0x08080000
 8005340:	0808000c 	.word	0x0808000c
 8005344:	08080018 	.word	0x08080018
 8005348:	08080024 	.word	0x08080024
 800534c:	08080030 	.word	0x08080030
 8005350:	0808003c 	.word	0x0808003c
 8005354:	08080048 	.word	0x08080048
 8005358:	08080090 	.word	0x08080090
 800535c:	08080078 	.word	0x08080078
 8005360:	0808006c 	.word	0x0808006c
 8005364:	08080060 	.word	0x08080060
 8005368:	08080054 	.word	0x08080054

0800536c <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 800536c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6039      	str	r1, [r7, #0]
 8005374:	0011      	movs	r1, r2
 8005376:	1dfb      	adds	r3, r7, #7
 8005378:	1c02      	adds	r2, r0, #0
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	1dbb      	adds	r3, r7, #6
 800537e:	1c0a      	adds	r2, r1, #0
 8005380:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005382:	2223      	movs	r2, #35	@ 0x23
 8005384:	4b20      	ldr	r3, [pc, #128]	@ (8005408 <Create_Message+0x9c>)
 8005386:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005388:	4b1f      	ldr	r3, [pc, #124]	@ (8005408 <Create_Message+0x9c>)
 800538a:	1dfa      	adds	r2, r7, #7
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <Create_Message+0x9c>)
 8005392:	1dba      	adds	r2, r7, #6
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005398:	1dbb      	adds	r3, r7, #6
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	4b1b      	ldr	r3, [pc, #108]	@ (800540c <Create_Message+0xa0>)
 80053a0:	0018      	movs	r0, r3
 80053a2:	f012 ffa9 	bl	80182f8 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80053a6:	1dbb      	adds	r3, r7, #6
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	250e      	movs	r5, #14
 80053ae:	197b      	adds	r3, r7, r5
 80053b0:	3203      	adds	r2, #3
 80053b2:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80053b4:	260c      	movs	r6, #12
 80053b6:	19bc      	adds	r4, r7, r6
 80053b8:	197b      	adds	r3, r7, r5
 80053ba:	881a      	ldrh	r2, [r3, #0]
 80053bc:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <Create_Message+0x9c>)
 80053be:	0011      	movs	r1, r2
 80053c0:	0018      	movs	r0, r3
 80053c2:	f000 f825 	bl	8005410 <CRC16_ARC>
 80053c6:	0003      	movs	r3, r0
 80053c8:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80053ca:	0030      	movs	r0, r6
 80053cc:	183b      	adds	r3, r7, r0
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	0a1b      	lsrs	r3, r3, #8
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	197b      	adds	r3, r7, r5
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b2d1      	uxtb	r1, r2
 80053da:	4a0b      	ldr	r2, [pc, #44]	@ (8005408 <Create_Message+0x9c>)
 80053dc:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80053de:	197b      	adds	r3, r7, r5
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	183a      	adds	r2, r7, r0
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	b2d1      	uxtb	r1, r2
 80053ea:	4a07      	ldr	r2, [pc, #28]	@ (8005408 <Create_Message+0x9c>)
 80053ec:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80053ee:	197b      	adds	r3, r7, r5
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	3302      	adds	r3, #2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <Create_Message+0x9c>)
 80053f8:	0011      	movs	r1, r2
 80053fa:	0018      	movs	r0, r3
 80053fc:	f011 fbd8 	bl	8016bb0 <CDC_Transmit_FS>
}
 8005400:	46c0      	nop			@ (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b005      	add	sp, #20
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005408:	20000be8 	.word	0x20000be8
 800540c:	20000beb 	.word	0x20000beb

08005410 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	000a      	movs	r2, r1
 800541a:	1cbb      	adds	r3, r7, #2
 800541c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800541e:	2316      	movs	r3, #22
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2200      	movs	r2, #0
 8005424:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	e02e      	b.n	800548a <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	18d3      	adds	r3, r2, r3
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	0019      	movs	r1, r3
 8005436:	2216      	movs	r2, #22
 8005438:	18bb      	adds	r3, r7, r2
 800543a:	18ba      	adds	r2, r7, r2
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	404a      	eors	r2, r1
 8005440:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e01a      	b.n	800547e <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005448:	2116      	movs	r1, #22
 800544a:	187b      	adds	r3, r7, r1
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	4013      	ands	r3, r2
 8005452:	d00b      	beq.n	800546c <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005454:	187b      	adds	r3, r7, r1
 8005456:	187a      	adds	r2, r7, r1
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	0852      	lsrs	r2, r2, #1
 800545c:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800545e:	187b      	adds	r3, r7, r1
 8005460:	187a      	adds	r2, r7, r1
 8005462:	8812      	ldrh	r2, [r2, #0]
 8005464:	490f      	ldr	r1, [pc, #60]	@ (80054a4 <CRC16_ARC+0x94>)
 8005466:	404a      	eors	r2, r1
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e005      	b.n	8005478 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 800546c:	2216      	movs	r2, #22
 800546e:	18bb      	adds	r3, r7, r2
 8005470:	18ba      	adds	r2, r7, r2
 8005472:	8812      	ldrh	r2, [r2, #0]
 8005474:	0852      	lsrs	r2, r2, #1
 8005476:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b07      	cmp	r3, #7
 8005482:	dde1      	ble.n	8005448 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	3301      	adds	r3, #1
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	1cbb      	adds	r3, r7, #2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	429a      	cmp	r2, r3
 8005492:	dbcb      	blt.n	800542c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005494:	2316      	movs	r3, #22
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	881b      	ldrh	r3, [r3, #0]
}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b006      	add	sp, #24
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	ffffa001 	.word	0xffffa001

080054a8 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 80054ac:	4b26      	ldr	r3, [pc, #152]	@ (8005548 <ReadBatteryVoltage+0xa0>)
 80054ae:	4a27      	ldr	r2, [pc, #156]	@ (800554c <ReadBatteryVoltage+0xa4>)
 80054b0:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80054b2:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <ReadBatteryVoltage+0xa0>)
 80054b4:	2280      	movs	r2, #128	@ 0x80
 80054b6:	0152      	lsls	r2, r2, #5
 80054b8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054ba:	4a23      	ldr	r2, [pc, #140]	@ (8005548 <ReadBatteryVoltage+0xa0>)
 80054bc:	4b24      	ldr	r3, [pc, #144]	@ (8005550 <ReadBatteryVoltage+0xa8>)
 80054be:	0011      	movs	r1, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	f004 ffd1 	bl	800a468 <HAL_ADC_ConfigChannel>
 80054c6:	1e03      	subs	r3, r0, #0
 80054c8:	d001      	beq.n	80054ce <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 80054ca:	f000 ff5b 	bl	8006384 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 80054ce:	4b20      	ldr	r3, [pc, #128]	@ (8005550 <ReadBatteryVoltage+0xa8>)
 80054d0:	0018      	movs	r0, r3
 80054d2:	f004 fecd 	bl	800a270 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 80054d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005550 <ReadBatteryVoltage+0xa8>)
 80054d8:	2101      	movs	r1, #1
 80054da:	0018      	movs	r0, r3
 80054dc:	f004 ff1c 	bl	800a318 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80054e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005550 <ReadBatteryVoltage+0xa8>)
 80054e2:	0018      	movs	r0, r3
 80054e4:	f004 ffb4 	bl	800a450 <HAL_ADC_GetValue>
 80054e8:	0002      	movs	r2, r0
 80054ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005554 <ReadBatteryVoltage+0xac>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4353      	muls	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4919      	ldr	r1, [pc, #100]	@ (8005558 <ReadBatteryVoltage+0xb0>)
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7fa fe23 	bl	8000140 <__udivsi3>
 80054fa:	0003      	movs	r3, r0
 80054fc:	001a      	movs	r2, r3
 80054fe:	4b17      	ldr	r3, [pc, #92]	@ (800555c <ReadBatteryVoltage+0xb4>)
 8005500:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005502:	4b16      	ldr	r3, [pc, #88]	@ (800555c <ReadBatteryVoltage+0xb4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	0018      	movs	r0, r3
 8005508:	f7fc f82c 	bl	8001564 <__aeabi_ui2f>
 800550c:	1c03      	adds	r3, r0, #0
 800550e:	4914      	ldr	r1, [pc, #80]	@ (8005560 <ReadBatteryVoltage+0xb8>)
 8005510:	1c18      	adds	r0, r3, #0
 8005512:	f7fb fadd 	bl	8000ad0 <__aeabi_fdiv>
 8005516:	1c03      	adds	r3, r0, #0
 8005518:	1c1a      	adds	r2, r3, #0
 800551a:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <ReadBatteryVoltage+0xbc>)
 800551c:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 800551e:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <ReadBatteryVoltage+0xa0>)
 8005520:	4a0a      	ldr	r2, [pc, #40]	@ (800554c <ReadBatteryVoltage+0xa4>)
 8005522:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005524:	4b08      	ldr	r3, [pc, #32]	@ (8005548 <ReadBatteryVoltage+0xa0>)
 8005526:	4a10      	ldr	r2, [pc, #64]	@ (8005568 <ReadBatteryVoltage+0xc0>)
 8005528:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800552a:	4a07      	ldr	r2, [pc, #28]	@ (8005548 <ReadBatteryVoltage+0xa0>)
 800552c:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <ReadBatteryVoltage+0xa8>)
 800552e:	0011      	movs	r1, r2
 8005530:	0018      	movs	r0, r3
 8005532:	f004 ff99 	bl	800a468 <HAL_ADC_ConfigChannel>
 8005536:	1e03      	subs	r3, r0, #0
 8005538:	d001      	beq.n	800553e <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 800553a:	f000 ff23 	bl	8006384 <Error_Handler>
   }
   return trueValue;
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <ReadBatteryVoltage+0xbc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 }
 8005542:	1c18      	adds	r0, r3, #0
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000cf0 	.word	0x20000cf0
 800554c:	38004000 	.word	0x38004000
 8005550:	20000d10 	.word	0x20000d10
 8005554:	20000020 	.word	0x20000020
 8005558:	00000fff 	.word	0x00000fff
 800555c:	20000cf8 	.word	0x20000cf8
 8005560:	447a0000 	.word	0x447a0000
 8005564:	20000cfc 	.word	0x20000cfc
 8005568:	00001001 	.word	0x00001001

0800556c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005570:	4b27      	ldr	r3, [pc, #156]	@ (8005610 <ReadSolarVoltage+0xa4>)
 8005572:	4a28      	ldr	r2, [pc, #160]	@ (8005614 <ReadSolarVoltage+0xa8>)
 8005574:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005576:	4b26      	ldr	r3, [pc, #152]	@ (8005610 <ReadSolarVoltage+0xa4>)
 8005578:	2280      	movs	r2, #128	@ 0x80
 800557a:	0152      	lsls	r2, r2, #5
 800557c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800557e:	4a24      	ldr	r2, [pc, #144]	@ (8005610 <ReadSolarVoltage+0xa4>)
 8005580:	4b25      	ldr	r3, [pc, #148]	@ (8005618 <ReadSolarVoltage+0xac>)
 8005582:	0011      	movs	r1, r2
 8005584:	0018      	movs	r0, r3
 8005586:	f004 ff6f 	bl	800a468 <HAL_ADC_ConfigChannel>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d001      	beq.n	8005592 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 800558e:	f000 fef9 	bl	8006384 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005592:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <ReadSolarVoltage+0xac>)
 8005594:	0018      	movs	r0, r3
 8005596:	f004 fe6b 	bl	800a270 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 800559a:	4b1f      	ldr	r3, [pc, #124]	@ (8005618 <ReadSolarVoltage+0xac>)
 800559c:	2101      	movs	r1, #1
 800559e:	0018      	movs	r0, r3
 80055a0:	f004 feba 	bl	800a318 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80055a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <ReadSolarVoltage+0xac>)
 80055a6:	0018      	movs	r0, r3
 80055a8:	f004 ff52 	bl	800a450 <HAL_ADC_GetValue>
 80055ac:	0002      	movs	r2, r0
 80055ae:	4b1b      	ldr	r3, [pc, #108]	@ (800561c <ReadSolarVoltage+0xb0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	435a      	muls	r2, r3
 80055b4:	0013      	movs	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	189b      	adds	r3, r3, r2
 80055ba:	4919      	ldr	r1, [pc, #100]	@ (8005620 <ReadSolarVoltage+0xb4>)
 80055bc:	0018      	movs	r0, r3
 80055be:	f7fa fdbf 	bl	8000140 <__udivsi3>
 80055c2:	0003      	movs	r3, r0
 80055c4:	001a      	movs	r2, r3
 80055c6:	4b17      	ldr	r3, [pc, #92]	@ (8005624 <ReadSolarVoltage+0xb8>)
 80055c8:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 80055ca:	4b16      	ldr	r3, [pc, #88]	@ (8005624 <ReadSolarVoltage+0xb8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	0018      	movs	r0, r3
 80055d0:	f7fb ffc8 	bl	8001564 <__aeabi_ui2f>
 80055d4:	1c03      	adds	r3, r0, #0
 80055d6:	4914      	ldr	r1, [pc, #80]	@ (8005628 <ReadSolarVoltage+0xbc>)
 80055d8:	1c18      	adds	r0, r3, #0
 80055da:	f7fb fa79 	bl	8000ad0 <__aeabi_fdiv>
 80055de:	1c03      	adds	r3, r0, #0
 80055e0:	1c1a      	adds	r2, r3, #0
 80055e2:	4b12      	ldr	r3, [pc, #72]	@ (800562c <ReadSolarVoltage+0xc0>)
 80055e4:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 80055e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005610 <ReadSolarVoltage+0xa4>)
 80055e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005614 <ReadSolarVoltage+0xa8>)
 80055ea:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80055ec:	4b08      	ldr	r3, [pc, #32]	@ (8005610 <ReadSolarVoltage+0xa4>)
 80055ee:	4a10      	ldr	r2, [pc, #64]	@ (8005630 <ReadSolarVoltage+0xc4>)
 80055f0:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80055f2:	4a07      	ldr	r2, [pc, #28]	@ (8005610 <ReadSolarVoltage+0xa4>)
 80055f4:	4b08      	ldr	r3, [pc, #32]	@ (8005618 <ReadSolarVoltage+0xac>)
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f004 ff35 	bl	800a468 <HAL_ADC_ConfigChannel>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	d001      	beq.n	8005606 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005602:	f000 febf 	bl	8006384 <Error_Handler>
   }
   return trueValue;
 8005606:	4b09      	ldr	r3, [pc, #36]	@ (800562c <ReadSolarVoltage+0xc0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 }
 800560a:	1c18      	adds	r0, r3, #0
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000cf0 	.word	0x20000cf0
 8005614:	3c008000 	.word	0x3c008000
 8005618:	20000d10 	.word	0x20000d10
 800561c:	20000020 	.word	0x20000020
 8005620:	00000fff 	.word	0x00000fff
 8005624:	20000d00 	.word	0x20000d00
 8005628:	447a0000 	.word	0x447a0000
 800562c:	20000d04 	.word	0x20000d04
 8005630:	00001001 	.word	0x00001001

08005634 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005638:	23a0      	movs	r3, #160	@ 0xa0
 800563a:	05db      	lsls	r3, r3, #23
 800563c:	2180      	movs	r1, #128	@ 0x80
 800563e:	0018      	movs	r0, r3
 8005640:	f005 ffd8 	bl	800b5f4 <HAL_GPIO_ReadPin>
 8005644:	0003      	movs	r3, r0
 8005646:	1e5a      	subs	r2, r3, #1
 8005648:	4193      	sbcs	r3, r2
 800564a:	b2db      	uxtb	r3, r3
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005652:	b580      	push	{r7, lr}
 8005654:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	23a0      	movs	r3, #160	@ 0xa0
 800565c:	05db      	lsls	r3, r3, #23
 800565e:	0011      	movs	r1, r2
 8005660:	0018      	movs	r0, r3
 8005662:	f005 ffc7 	bl	800b5f4 <HAL_GPIO_ReadPin>
 8005666:	0003      	movs	r3, r0
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	4193      	sbcs	r3, r2
 800566c:	b2db      	uxtb	r3, r3
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005678:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <UserButton_Pressed+0x1c>)
 800567a:	2104      	movs	r1, #4
 800567c:	0018      	movs	r0, r3
 800567e:	f005 ffb9 	bl	800b5f4 <HAL_GPIO_ReadPin>
 8005682:	0003      	movs	r3, r0
 8005684:	425a      	negs	r2, r3
 8005686:	4153      	adcs	r3, r2
 8005688:	b2db      	uxtb	r3, r3
}
 800568a:	0018      	movs	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	50000c00 	.word	0x50000c00

08005694 <RTC_SetTime>:
static Clock RealTime = {.Hours = 0, .Minutes = 0, .Seconds = 0};
static Clock NextAction = {.Hours = 0, .Minutes = 0, .Seconds = 0};
RTC_HandleTypeDef* RealTime_Handle = NULL;

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8005694:	b590      	push	{r4, r7, lr}
 8005696:	b089      	sub	sp, #36	@ 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	000c      	movs	r4, r1
 800569e:	0010      	movs	r0, r2
 80056a0:	0019      	movs	r1, r3
 80056a2:	1cfb      	adds	r3, r7, #3
 80056a4:	1c22      	adds	r2, r4, #0
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	1cbb      	adds	r3, r7, #2
 80056aa:	1c02      	adds	r2, r0, #0
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	1c7b      	adds	r3, r7, #1
 80056b0:	1c0a      	adds	r2, r1, #0
 80056b2:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 80056b4:	240c      	movs	r4, #12
 80056b6:	193b      	adds	r3, r7, r4
 80056b8:	0018      	movs	r0, r3
 80056ba:	2314      	movs	r3, #20
 80056bc:	001a      	movs	r2, r3
 80056be:	2100      	movs	r1, #0
 80056c0:	f012 fd50 	bl	8018164 <memset>

    sTime.Hours = hours;
 80056c4:	0021      	movs	r1, r4
 80056c6:	187b      	adds	r3, r7, r1
 80056c8:	1cfa      	adds	r2, r7, #3
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80056ce:	187b      	adds	r3, r7, r1
 80056d0:	1cba      	adds	r2, r7, #2
 80056d2:	7812      	ldrb	r2, [r2, #0]
 80056d4:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80056d6:	187b      	adds	r3, r7, r1
 80056d8:	1c7a      	adds	r2, r7, #1
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 80056de:	187b      	adds	r3, r7, r1
 80056e0:	2200      	movs	r2, #0
 80056e2:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80056e4:	187b      	adds	r3, r7, r1
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80056ea:	187b      	adds	r3, r7, r1
 80056ec:	2200      	movs	r2, #0
 80056ee:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80056f0:	1879      	adds	r1, r7, r1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	0018      	movs	r0, r3
 80056f8:	f00b f964 	bl	80109c4 <HAL_RTC_SetTime>
        // Foutafhandeling
    }
}
 80056fc:	46c0      	nop			@ (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b009      	add	sp, #36	@ 0x24
 8005702:	bd90      	pop	{r4, r7, pc}

08005704 <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 800570c:	4b08      	ldr	r3, [pc, #32]	@ (8005730 <InitClock+0x2c>)
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 8005712:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <InitClock+0x2c>)
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	4b07      	ldr	r3, [pc, #28]	@ (8005734 <InitClock+0x30>)
 8005718:	7819      	ldrb	r1, [r3, #0]
 800571a:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <InitClock+0x30>)
 800571c:	785a      	ldrb	r2, [r3, #1]
 800571e:	4b05      	ldr	r3, [pc, #20]	@ (8005734 <InitClock+0x30>)
 8005720:	789b      	ldrb	r3, [r3, #2]
 8005722:	f7ff ffb7 	bl	8005694 <RTC_SetTime>
}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	46bd      	mov	sp, r7
 800572a:	b002      	add	sp, #8
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	20000d0c 	.word	0x20000d0c
 8005734:	20000d08 	.word	0x20000d08

08005738 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800573e:	003b      	movs	r3, r7
 8005740:	0018      	movs	r0, r3
 8005742:	2308      	movs	r3, #8
 8005744:	001a      	movs	r2, r3
 8005746:	2100      	movs	r1, #0
 8005748:	f012 fd0c 	bl	8018164 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800574c:	4b30      	ldr	r3, [pc, #192]	@ (8005810 <MX_ADC_Init+0xd8>)
 800574e:	4a31      	ldr	r2, [pc, #196]	@ (8005814 <MX_ADC_Init+0xdc>)
 8005750:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005752:	4b2f      	ldr	r3, [pc, #188]	@ (8005810 <MX_ADC_Init+0xd8>)
 8005754:	2200      	movs	r2, #0
 8005756:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005758:	4b2d      	ldr	r3, [pc, #180]	@ (8005810 <MX_ADC_Init+0xd8>)
 800575a:	22c0      	movs	r2, #192	@ 0xc0
 800575c:	0612      	lsls	r2, r2, #24
 800575e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005760:	4b2b      	ldr	r3, [pc, #172]	@ (8005810 <MX_ADC_Init+0xd8>)
 8005762:	2200      	movs	r2, #0
 8005764:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005766:	4b2a      	ldr	r3, [pc, #168]	@ (8005810 <MX_ADC_Init+0xd8>)
 8005768:	2200      	movs	r2, #0
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800576c:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <MX_ADC_Init+0xd8>)
 800576e:	2201      	movs	r2, #1
 8005770:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005772:	4b27      	ldr	r3, [pc, #156]	@ (8005810 <MX_ADC_Init+0xd8>)
 8005774:	2200      	movs	r2, #0
 8005776:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005778:	4b25      	ldr	r3, [pc, #148]	@ (8005810 <MX_ADC_Init+0xd8>)
 800577a:	2220      	movs	r2, #32
 800577c:	2100      	movs	r1, #0
 800577e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005780:	4b23      	ldr	r3, [pc, #140]	@ (8005810 <MX_ADC_Init+0xd8>)
 8005782:	2221      	movs	r2, #33	@ 0x21
 8005784:	2101      	movs	r1, #1
 8005786:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005788:	4b21      	ldr	r3, [pc, #132]	@ (8005810 <MX_ADC_Init+0xd8>)
 800578a:	2200      	movs	r2, #0
 800578c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800578e:	4b20      	ldr	r3, [pc, #128]	@ (8005810 <MX_ADC_Init+0xd8>)
 8005790:	22c2      	movs	r2, #194	@ 0xc2
 8005792:	32ff      	adds	r2, #255	@ 0xff
 8005794:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005796:	4b1e      	ldr	r3, [pc, #120]	@ (8005810 <MX_ADC_Init+0xd8>)
 8005798:	222c      	movs	r2, #44	@ 0x2c
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800579e:	4b1c      	ldr	r3, [pc, #112]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057a0:	2204      	movs	r2, #4
 80057a2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80057a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80057aa:	4b19      	ldr	r3, [pc, #100]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80057b0:	4b17      	ldr	r3, [pc, #92]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80057b6:	4b16      	ldr	r3, [pc, #88]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80057bc:	4b14      	ldr	r3, [pc, #80]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057be:	0018      	movs	r0, r3
 80057c0:	f004 fbe2 	bl	8009f88 <HAL_ADC_Init>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d001      	beq.n	80057cc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80057c8:	f000 fddc 	bl	8006384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80057cc:	003b      	movs	r3, r7
 80057ce:	4a12      	ldr	r2, [pc, #72]	@ (8005818 <MX_ADC_Init+0xe0>)
 80057d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80057d2:	003b      	movs	r3, r7
 80057d4:	2280      	movs	r2, #128	@ 0x80
 80057d6:	0152      	lsls	r2, r2, #5
 80057d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057da:	003a      	movs	r2, r7
 80057dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f004 fe41 	bl	800a468 <HAL_ADC_ConfigChannel>
 80057e6:	1e03      	subs	r3, r0, #0
 80057e8:	d001      	beq.n	80057ee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80057ea:	f000 fdcb 	bl	8006384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80057ee:	003b      	movs	r3, r7
 80057f0:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <MX_ADC_Init+0xe4>)
 80057f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057f4:	003a      	movs	r2, r7
 80057f6:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <MX_ADC_Init+0xd8>)
 80057f8:	0011      	movs	r1, r2
 80057fa:	0018      	movs	r0, r3
 80057fc:	f004 fe34 	bl	800a468 <HAL_ADC_ConfigChannel>
 8005800:	1e03      	subs	r3, r0, #0
 8005802:	d001      	beq.n	8005808 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005804:	f000 fdbe 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005808:	46c0      	nop			@ (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b002      	add	sp, #8
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000d10 	.word	0x20000d10
 8005814:	40012400 	.word	0x40012400
 8005818:	38004000 	.word	0x38004000
 800581c:	3c008000 	.word	0x3c008000

08005820 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b089      	sub	sp, #36	@ 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	240c      	movs	r4, #12
 800582a:	193b      	adds	r3, r7, r4
 800582c:	0018      	movs	r0, r3
 800582e:	2314      	movs	r3, #20
 8005830:	001a      	movs	r2, r3
 8005832:	2100      	movs	r1, #0
 8005834:	f012 fc96 	bl	8018164 <memset>
  if(adcHandle->Instance==ADC1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a14      	ldr	r2, [pc, #80]	@ (8005890 <HAL_ADC_MspInit+0x70>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d121      	bne.n	8005886 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005842:	4b14      	ldr	r3, [pc, #80]	@ (8005894 <HAL_ADC_MspInit+0x74>)
 8005844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005846:	4b13      	ldr	r3, [pc, #76]	@ (8005894 <HAL_ADC_MspInit+0x74>)
 8005848:	2180      	movs	r1, #128	@ 0x80
 800584a:	0089      	lsls	r1, r1, #2
 800584c:	430a      	orrs	r2, r1
 800584e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005850:	4b10      	ldr	r3, [pc, #64]	@ (8005894 <HAL_ADC_MspInit+0x74>)
 8005852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005854:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <HAL_ADC_MspInit+0x74>)
 8005856:	2104      	movs	r1, #4
 8005858:	430a      	orrs	r2, r1
 800585a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800585c:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <HAL_ADC_MspInit+0x74>)
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	2204      	movs	r2, #4
 8005862:	4013      	ands	r3, r2
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005868:	193b      	adds	r3, r7, r4
 800586a:	2230      	movs	r2, #48	@ 0x30
 800586c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800586e:	193b      	adds	r3, r7, r4
 8005870:	2203      	movs	r2, #3
 8005872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005874:	193b      	adds	r3, r7, r4
 8005876:	2200      	movs	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800587a:	193b      	adds	r3, r7, r4
 800587c:	4a06      	ldr	r2, [pc, #24]	@ (8005898 <HAL_ADC_MspInit+0x78>)
 800587e:	0019      	movs	r1, r3
 8005880:	0010      	movs	r0, r2
 8005882:	f005 fc57 	bl	800b134 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b009      	add	sp, #36	@ 0x24
 800588c:	bd90      	pop	{r4, r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	40012400 	.word	0x40012400
 8005894:	40021000 	.word	0x40021000
 8005898:	50000800 	.word	0x50000800

0800589c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80058a2:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <MX_DMA_Init+0x48>)
 80058a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058a6:	4b0f      	ldr	r3, [pc, #60]	@ (80058e4 <MX_DMA_Init+0x48>)
 80058a8:	2101      	movs	r1, #1
 80058aa:	430a      	orrs	r2, r1
 80058ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80058ae:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <MX_DMA_Init+0x48>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b2:	2201      	movs	r2, #1
 80058b4:	4013      	ands	r3, r2
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80058ba:	2200      	movs	r2, #0
 80058bc:	2100      	movs	r1, #0
 80058be:	200a      	movs	r0, #10
 80058c0:	f004 ff8c 	bl	800a7dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80058c4:	200a      	movs	r0, #10
 80058c6:	f004 ff9e 	bl	800a806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80058ca:	2200      	movs	r2, #0
 80058cc:	2103      	movs	r1, #3
 80058ce:	200b      	movs	r0, #11
 80058d0:	f004 ff84 	bl	800a7dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80058d4:	200b      	movs	r0, #11
 80058d6:	f004 ff96 	bl	800a806 <HAL_NVIC_EnableIRQ>

}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	46bd      	mov	sp, r7
 80058de:	b002      	add	sp, #8
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	40021000 	.word	0x40021000

080058e8 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80058f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <Gadget_Init+0x40>)
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f001 f869 	bl	80069d0 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	0018      	movs	r0, r3
 8005906:	f000 fdb1 	bl	800646c <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	0018      	movs	r0, r3
 800590e:	f7fd ff21 	bl	8003754 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005912:	4a06      	ldr	r2, [pc, #24]	@ (800592c <Gadget_Init+0x44>)
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <Gadget_Init+0x48>)
 8005916:	0019      	movs	r1, r3
 8005918:	2003      	movs	r0, #3
 800591a:	f003 ff4d 	bl	80097b8 <CreateLine>
}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b004      	add	sp, #16
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	20000024 	.word	0x20000024
 800592c:	0801b44c 	.word	0x0801b44c
 8005930:	0801b460 	.word	0x0801b460

08005934 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  Meas_Test();
 8005938:	f000 fece 	bl	80066d8 <Meas_Test>
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UpkeepGadget>:

void UpkeepGadget() {
 8005942:	b580      	push	{r7, lr}
 8005944:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8005946:	f000 ffb5 	bl	80068b4 <Meas_Upkeep>
  Mic_Upkeep();
 800594a:	f000 ff67 	bl	800681c <Mic_Upkeep>
  status_Upkeep();
 800594e:	f003 fa49 	bl	8008de4 <status_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	0011      	movs	r1, r2
 8005968:	0018      	movs	r0, r3
 800596a:	f002 fb99 	bl	80080a0 <SGP_Init>
}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b002      	add	sp, #8
 8005974:	bd80      	pop	{r7, pc}

08005976 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005976:	b580      	push	{r7, lr}
 8005978:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800597a:	f002 fbab 	bl	80080d4 <SGP_StartMeasurement>
}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0018      	movs	r0, r3
 8005990:	f002 fc10 	bl	80081b4 <SGP_GetMeasurementValues>
 8005994:	0003      	movs	r3, r0
}
 8005996:	0018      	movs	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	b002      	add	sp, #8
 800599c:	bd80      	pop	{r7, pc}

0800599e <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800599e:	b580      	push	{r7, lr}
 80059a0:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80059a2:	f002 fe1d 	bl	80085e0 <SGP_DeviceConnected>
 80059a6:	0003      	movs	r3, r0
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b08b      	sub	sp, #44	@ 0x2c
 80059b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b6:	2414      	movs	r4, #20
 80059b8:	193b      	adds	r3, r7, r4
 80059ba:	0018      	movs	r0, r3
 80059bc:	2314      	movs	r3, #20
 80059be:	001a      	movs	r2, r3
 80059c0:	2100      	movs	r1, #0
 80059c2:	f012 fbcf 	bl	8018164 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059c6:	4b7c      	ldr	r3, [pc, #496]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ca:	4b7b      	ldr	r3, [pc, #492]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059cc:	2104      	movs	r1, #4
 80059ce:	430a      	orrs	r2, r1
 80059d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80059d2:	4b79      	ldr	r3, [pc, #484]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d6:	2204      	movs	r2, #4
 80059d8:	4013      	ands	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80059de:	4b76      	ldr	r3, [pc, #472]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e2:	4b75      	ldr	r3, [pc, #468]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059e4:	2180      	movs	r1, #128	@ 0x80
 80059e6:	430a      	orrs	r2, r1
 80059e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80059ea:	4b73      	ldr	r3, [pc, #460]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	2280      	movs	r2, #128	@ 0x80
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059f6:	4b70      	ldr	r3, [pc, #448]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fa:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 80059fc:	2101      	movs	r1, #1
 80059fe:	430a      	orrs	r2, r1
 8005a00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a02:	4b6d      	ldr	r3, [pc, #436]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a06:	2201      	movs	r2, #1
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 8005a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a12:	4b69      	ldr	r3, [pc, #420]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 8005a14:	2102      	movs	r1, #2
 8005a16:	430a      	orrs	r2, r1
 8005a18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a1a:	4b67      	ldr	r3, [pc, #412]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1e:	2202      	movs	r2, #2
 8005a20:	4013      	ands	r3, r2
 8005a22:	607b      	str	r3, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a26:	4b64      	ldr	r3, [pc, #400]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 8005a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2a:	4b63      	ldr	r3, [pc, #396]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 8005a2c:	2108      	movs	r1, #8
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a32:	4b61      	ldr	r3, [pc, #388]	@ (8005bb8 <MX_GPIO_Init+0x208>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	2208      	movs	r2, #8
 8005a38:	4013      	ands	r3, r2
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bbc <MX_GPIO_Init+0x20c>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	2101      	movs	r1, #1
 8005a44:	0018      	movs	r0, r3
 8005a46:	f005 fdf2 	bl	800b62e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bbc <MX_GPIO_Init+0x20c>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2102      	movs	r1, #2
 8005a50:	0018      	movs	r0, r3
 8005a52:	f005 fdec 	bl	800b62e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005a56:	495a      	ldr	r1, [pc, #360]	@ (8005bc0 <MX_GPIO_Init+0x210>)
 8005a58:	4b5a      	ldr	r3, [pc, #360]	@ (8005bc4 <MX_GPIO_Init+0x214>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f005 fde6 	bl	800b62e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005a62:	2380      	movs	r3, #128	@ 0x80
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	4858      	ldr	r0, [pc, #352]	@ (8005bc8 <MX_GPIO_Init+0x218>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	f005 fddf 	bl	800b62e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005a70:	2380      	movs	r3, #128	@ 0x80
 8005a72:	015b      	lsls	r3, r3, #5
 8005a74:	4854      	ldr	r0, [pc, #336]	@ (8005bc8 <MX_GPIO_Init+0x218>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	0019      	movs	r1, r3
 8005a7a:	f005 fdd8 	bl	800b62e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005a7e:	193b      	adds	r3, r7, r4
 8005a80:	4a52      	ldr	r2, [pc, #328]	@ (8005bcc <MX_GPIO_Init+0x21c>)
 8005a82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a84:	193b      	adds	r3, r7, r4
 8005a86:	2203      	movs	r2, #3
 8005a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	193b      	adds	r3, r7, r4
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a90:	193b      	adds	r3, r7, r4
 8005a92:	4a4d      	ldr	r2, [pc, #308]	@ (8005bc8 <MX_GPIO_Init+0x218>)
 8005a94:	0019      	movs	r1, r3
 8005a96:	0010      	movs	r0, r2
 8005a98:	f005 fb4c 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005a9c:	193b      	adds	r3, r7, r4
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aa2:	193b      	adds	r3, r7, r4
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa8:	193b      	adds	r3, r7, r4
 8005aaa:	2200      	movs	r2, #0
 8005aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aae:	193b      	adds	r3, r7, r4
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005ab4:	193b      	adds	r3, r7, r4
 8005ab6:	4a41      	ldr	r2, [pc, #260]	@ (8005bbc <MX_GPIO_Init+0x20c>)
 8005ab8:	0019      	movs	r1, r3
 8005aba:	0010      	movs	r0, r2
 8005abc:	f005 fb3a 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005ac0:	193b      	adds	r3, r7, r4
 8005ac2:	2270      	movs	r2, #112	@ 0x70
 8005ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ac6:	193b      	adds	r3, r7, r4
 8005ac8:	2203      	movs	r2, #3
 8005aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005acc:	193b      	adds	r3, r7, r4
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad2:	193a      	adds	r2, r7, r4
 8005ad4:	23a0      	movs	r3, #160	@ 0xa0
 8005ad6:	05db      	lsls	r3, r3, #23
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f005 fb2a 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8005ae0:	193b      	adds	r3, r7, r4
 8005ae2:	4a3b      	ldr	r2, [pc, #236]	@ (8005bd0 <MX_GPIO_Init+0x220>)
 8005ae4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ae6:	193b      	adds	r3, r7, r4
 8005ae8:	2200      	movs	r2, #0
 8005aea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aec:	193b      	adds	r3, r7, r4
 8005aee:	2200      	movs	r2, #0
 8005af0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005af2:	193a      	adds	r2, r7, r4
 8005af4:	23a0      	movs	r3, #160	@ 0xa0
 8005af6:	05db      	lsls	r3, r3, #23
 8005af8:	0011      	movs	r1, r2
 8005afa:	0018      	movs	r0, r3
 8005afc:	f005 fb1a 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005b00:	193b      	adds	r3, r7, r4
 8005b02:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc0 <MX_GPIO_Init+0x210>)
 8005b04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b06:	193b      	adds	r3, r7, r4
 8005b08:	2201      	movs	r2, #1
 8005b0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0c:	193b      	adds	r3, r7, r4
 8005b0e:	2200      	movs	r2, #0
 8005b10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b12:	193b      	adds	r3, r7, r4
 8005b14:	2200      	movs	r2, #0
 8005b16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc4 <MX_GPIO_Init+0x214>)
 8005b1c:	0019      	movs	r1, r3
 8005b1e:	0010      	movs	r0, r2
 8005b20:	f005 fb08 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005b24:	193b      	adds	r3, r7, r4
 8005b26:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd4 <MX_GPIO_Init+0x224>)
 8005b28:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b2a:	193b      	adds	r3, r7, r4
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	193b      	adds	r3, r7, r4
 8005b32:	2200      	movs	r2, #0
 8005b34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b36:	193b      	adds	r3, r7, r4
 8005b38:	4a22      	ldr	r2, [pc, #136]	@ (8005bc4 <MX_GPIO_Init+0x214>)
 8005b3a:	0019      	movs	r1, r3
 8005b3c:	0010      	movs	r0, r2
 8005b3e:	f005 faf9 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005b42:	0021      	movs	r1, r4
 8005b44:	187b      	adds	r3, r7, r1
 8005b46:	2280      	movs	r2, #128	@ 0x80
 8005b48:	0092      	lsls	r2, r2, #2
 8005b4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b4c:	000c      	movs	r4, r1
 8005b4e:	193b      	adds	r3, r7, r4
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	193b      	adds	r3, r7, r4
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005b5a:	193b      	adds	r3, r7, r4
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc8 <MX_GPIO_Init+0x218>)
 8005b5e:	0019      	movs	r1, r3
 8005b60:	0010      	movs	r0, r2
 8005b62:	f005 fae7 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005b66:	0021      	movs	r1, r4
 8005b68:	187b      	adds	r3, r7, r1
 8005b6a:	22c0      	movs	r2, #192	@ 0xc0
 8005b6c:	0152      	lsls	r2, r2, #5
 8005b6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b70:	000c      	movs	r4, r1
 8005b72:	193b      	adds	r3, r7, r4
 8005b74:	2201      	movs	r2, #1
 8005b76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b78:	193b      	adds	r3, r7, r4
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b84:	193b      	adds	r3, r7, r4
 8005b86:	4a10      	ldr	r2, [pc, #64]	@ (8005bc8 <MX_GPIO_Init+0x218>)
 8005b88:	0019      	movs	r1, r3
 8005b8a:	0010      	movs	r0, r2
 8005b8c:	f005 fad2 	bl	800b134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005b90:	0021      	movs	r1, r4
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	2204      	movs	r2, #4
 8005b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b98:	187b      	adds	r3, r7, r1
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b9e:	187b      	adds	r3, r7, r1
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd8 <MX_GPIO_Init+0x228>)
 8005ba8:	0019      	movs	r1, r3
 8005baa:	0010      	movs	r0, r2
 8005bac:	f005 fac2 	bl	800b134 <HAL_GPIO_Init>

}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b00b      	add	sp, #44	@ 0x2c
 8005bb6:	bd90      	pop	{r4, r7, pc}
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	50001c00 	.word	0x50001c00
 8005bc0:	00000301 	.word	0x00000301
 8005bc4:	50000400 	.word	0x50000400
 8005bc8:	50000800 	.word	0x50000800
 8005bcc:	0000200c 	.word	0x0000200c
 8005bd0:	00008180 	.word	0x00008180
 8005bd4:	0000403e 	.word	0x0000403e
 8005bd8:	50000c00 	.word	0x50000c00

08005bdc <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2100      	movs	r1, #0
 8005bea:	0018      	movs	r0, r3
 8005bec:	f00b f93a 	bl	8010e64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2108      	movs	r1, #8
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f00b f935 	bl	8010e64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	210c      	movs	r1, #12
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f00b f930 	bl	8010e64 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005c04:	2380      	movs	r3, #128	@ 0x80
 8005c06:	05db      	lsls	r3, r3, #23
 8005c08:	22fa      	movs	r2, #250	@ 0xfa
 8005c0a:	0112      	lsls	r2, r2, #4
 8005c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005c0e:	2380      	movs	r3, #128	@ 0x80
 8005c10:	05db      	lsls	r3, r3, #23
 8005c12:	22fa      	movs	r2, #250	@ 0xfa
 8005c14:	0112      	lsls	r2, r2, #4
 8005c16:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005c18:	2380      	movs	r3, #128	@ 0x80
 8005c1a:	05db      	lsls	r3, r3, #23
 8005c1c:	22fa      	movs	r2, #250	@ 0xfa
 8005c1e:	0112      	lsls	r2, r2, #4
 8005c20:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005c22:	2380      	movs	r3, #128	@ 0x80
 8005c24:	05db      	lsls	r3, r3, #23
 8005c26:	22fa      	movs	r2, #250	@ 0xfa
 8005c28:	0112      	lsls	r2, r2, #4
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2100      	movs	r1, #0
 8005c30:	0018      	movs	r0, r3
 8005c32:	f00b f917 	bl	8010e64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2104      	movs	r1, #4
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f00b f912 	bl	8010e64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2108      	movs	r1, #8
 8005c44:	0018      	movs	r0, r3
 8005c46:	f00b f90d 	bl	8010e64 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <GPIO_InitPWMLEDs+0x98>)
 8005c4c:	22fa      	movs	r2, #250	@ 0xfa
 8005c4e:	0112      	lsls	r2, r2, #4
 8005c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005c52:	4b08      	ldr	r3, [pc, #32]	@ (8005c74 <GPIO_InitPWMLEDs+0x98>)
 8005c54:	22fa      	movs	r2, #250	@ 0xfa
 8005c56:	0112      	lsls	r2, r2, #4
 8005c58:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <GPIO_InitPWMLEDs+0x98>)
 8005c5c:	22fa      	movs	r2, #250	@ 0xfa
 8005c5e:	0112      	lsls	r2, r2, #4
 8005c60:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005c62:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <GPIO_InitPWMLEDs+0x98>)
 8005c64:	22fa      	movs	r2, #250	@ 0xfa
 8005c66:	0112      	lsls	r2, r2, #4
 8005c68:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b002      	add	sp, #8
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	40000400 	.word	0x40000400

08005c78 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0011      	movs	r1, r2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f003 feed 	bl	8009a68 <HIDS_Init>
}
 8005c8e:	46c0      	nop			@ (mov r8, r8)
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b002      	add	sp, #8
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005c96:	b580      	push	{r7, lr}
 8005c98:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005c9a:	f003 ff07 	bl	8009aac <HIDS_StartMeasurement>
}
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	0011      	movs	r1, r2
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f003 ffd5 	bl	8009c64 <HIDS_GetMeasurementValues>
 8005cba:	0003      	movs	r3, r0
}
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b002      	add	sp, #8
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005cc8:	f003 ff70 	bl	8009bac <HIDS_DeviceConnected>
 8005ccc:	0003      	movs	r3, r0
}
 8005cce:	0018      	movs	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005cda:	4a1c      	ldr	r2, [pc, #112]	@ (8005d4c <MX_I2C1_Init+0x78>)
 8005cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005cde:	4b1a      	ldr	r3, [pc, #104]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <MX_I2C1_Init+0x7c>)
 8005ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005ce4:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005cea:	4b17      	ldr	r3, [pc, #92]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005cf0:	4b15      	ldr	r3, [pc, #84]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005cf6:	4b14      	ldr	r3, [pc, #80]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005cfc:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d02:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d08:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005d10:	0018      	movs	r0, r3
 8005d12:	f005 fca9 	bl	800b668 <HAL_I2C_Init>
 8005d16:	1e03      	subs	r3, r0, #0
 8005d18:	d001      	beq.n	8005d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005d1a:	f000 fb33 	bl	8006384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005d20:	2100      	movs	r1, #0
 8005d22:	0018      	movs	r0, r3
 8005d24:	f007 fc18 	bl	800d558 <HAL_I2CEx_ConfigAnalogFilter>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d001      	beq.n	8005d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005d2c:	f000 fb2a 	bl	8006384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005d30:	4b05      	ldr	r3, [pc, #20]	@ (8005d48 <MX_I2C1_Init+0x74>)
 8005d32:	2100      	movs	r1, #0
 8005d34:	0018      	movs	r0, r3
 8005d36:	f007 fc5b 	bl	800d5f0 <HAL_I2CEx_ConfigDigitalFilter>
 8005d3a:	1e03      	subs	r3, r0, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005d3e:	f000 fb21 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000d6c 	.word	0x20000d6c
 8005d4c:	40005400 	.word	0x40005400
 8005d50:	00503d58 	.word	0x00503d58

08005d54 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005d58:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dcc <MX_I2C2_Init+0x78>)
 8005d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d60:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd0 <MX_I2C2_Init+0x7c>)
 8005d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005d64:	4b18      	ldr	r3, [pc, #96]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d6a:	4b17      	ldr	r3, [pc, #92]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d70:	4b15      	ldr	r3, [pc, #84]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005d76:	4b14      	ldr	r3, [pc, #80]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d7c:	4b12      	ldr	r3, [pc, #72]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d82:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005d90:	0018      	movs	r0, r3
 8005d92:	f005 fc69 	bl	800b668 <HAL_I2C_Init>
 8005d96:	1e03      	subs	r3, r0, #0
 8005d98:	d001      	beq.n	8005d9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005d9a:	f000 faf3 	bl	8006384 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005da0:	2100      	movs	r1, #0
 8005da2:	0018      	movs	r0, r3
 8005da4:	f007 fbd8 	bl	800d558 <HAL_I2CEx_ConfigAnalogFilter>
 8005da8:	1e03      	subs	r3, r0, #0
 8005daa:	d001      	beq.n	8005db0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005dac:	f000 faea 	bl	8006384 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005db0:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <MX_I2C2_Init+0x74>)
 8005db2:	2100      	movs	r1, #0
 8005db4:	0018      	movs	r0, r3
 8005db6:	f007 fc1b 	bl	800d5f0 <HAL_I2CEx_ConfigDigitalFilter>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005dbe:	f000 fae1 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000dc0 	.word	0x20000dc0
 8005dcc:	40005800 	.word	0x40005800
 8005dd0:	00503d58 	.word	0x00503d58

08005dd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b08b      	sub	sp, #44	@ 0x2c
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ddc:	2414      	movs	r4, #20
 8005dde:	193b      	adds	r3, r7, r4
 8005de0:	0018      	movs	r0, r3
 8005de2:	2314      	movs	r3, #20
 8005de4:	001a      	movs	r2, r3
 8005de6:	2100      	movs	r1, #0
 8005de8:	f012 f9bc 	bl	8018164 <memset>
  if(i2cHandle->Instance==I2C1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f68 <HAL_I2C_MspInit+0x194>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d000      	beq.n	8005df8 <HAL_I2C_MspInit+0x24>
 8005df6:	e083      	b.n	8005f00 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005df8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005dfe:	2102      	movs	r1, #2
 8005e00:	430a      	orrs	r2, r1
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e04:	4b59      	ldr	r3, [pc, #356]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	2202      	movs	r2, #2
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e10:	0021      	movs	r1, r4
 8005e12:	187b      	adds	r3, r7, r1
 8005e14:	22c0      	movs	r2, #192	@ 0xc0
 8005e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	2212      	movs	r2, #18
 8005e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1e:	187b      	adds	r3, r7, r1
 8005e20:	2200      	movs	r2, #0
 8005e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	2203      	movs	r2, #3
 8005e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005e2a:	187b      	adds	r3, r7, r1
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e30:	187b      	adds	r3, r7, r1
 8005e32:	4a4f      	ldr	r2, [pc, #316]	@ (8005f70 <HAL_I2C_MspInit+0x19c>)
 8005e34:	0019      	movs	r1, r3
 8005e36:	0010      	movs	r0, r2
 8005e38:	f005 f97c 	bl	800b134 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e40:	4b4a      	ldr	r3, [pc, #296]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005e42:	2180      	movs	r1, #128	@ 0x80
 8005e44:	0389      	lsls	r1, r1, #14
 8005e46:	430a      	orrs	r2, r1
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f78 <HAL_I2C_MspInit+0x1a4>)
 8005e4e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005e50:	4b48      	ldr	r3, [pc, #288]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e52:	2206      	movs	r2, #6
 8005e54:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e56:	4b47      	ldr	r3, [pc, #284]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e5c:	4b45      	ldr	r3, [pc, #276]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e62:	4b44      	ldr	r3, [pc, #272]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e64:	2280      	movs	r2, #128	@ 0x80
 8005e66:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e68:	4b42      	ldr	r3, [pc, #264]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e6e:	4b41      	ldr	r3, [pc, #260]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005e74:	4b3f      	ldr	r3, [pc, #252]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005e80:	4b3c      	ldr	r3, [pc, #240]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e82:	0018      	movs	r0, r3
 8005e84:	f004 fcdc 	bl	800a840 <HAL_DMA_Init>
 8005e88:	1e03      	subs	r3, r0, #0
 8005e8a:	d001      	beq.n	8005e90 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005e8c:	f000 fa7a 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a38      	ldr	r2, [pc, #224]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005e96:	4b37      	ldr	r3, [pc, #220]	@ (8005f74 <HAL_I2C_MspInit+0x1a0>)
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005e9c:	4b37      	ldr	r3, [pc, #220]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005e9e:	4a38      	ldr	r2, [pc, #224]	@ (8005f80 <HAL_I2C_MspInit+0x1ac>)
 8005ea0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005ea2:	4b36      	ldr	r3, [pc, #216]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005ea4:	2206      	movs	r2, #6
 8005ea6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ea8:	4b34      	ldr	r3, [pc, #208]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005eaa:	2210      	movs	r2, #16
 8005eac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eae:	4b33      	ldr	r3, [pc, #204]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005eb4:	4b31      	ldr	r3, [pc, #196]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005eb6:	2280      	movs	r2, #128	@ 0x80
 8005eb8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eba:	4b30      	ldr	r3, [pc, #192]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f004 fcb3 	bl	800a840 <HAL_DMA_Init>
 8005eda:	1e03      	subs	r3, r0, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005ede:	f000 fa51 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ee8:	4b24      	ldr	r3, [pc, #144]	@ (8005f7c <HAL_I2C_MspInit+0x1a8>)
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	2017      	movs	r0, #23
 8005ef4:	f004 fc72 	bl	800a7dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005ef8:	2017      	movs	r0, #23
 8005efa:	f004 fc84 	bl	800a806 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005efe:	e02e      	b.n	8005f5e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1f      	ldr	r2, [pc, #124]	@ (8005f84 <HAL_I2C_MspInit+0x1b0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d129      	bne.n	8005f5e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f0a:	4b18      	ldr	r3, [pc, #96]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0e:	4b17      	ldr	r3, [pc, #92]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005f10:	2102      	movs	r1, #2
 8005f12:	430a      	orrs	r2, r1
 8005f14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f16:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f22:	2114      	movs	r1, #20
 8005f24:	187b      	adds	r3, r7, r1
 8005f26:	22c0      	movs	r2, #192	@ 0xc0
 8005f28:	0112      	lsls	r2, r2, #4
 8005f2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f2c:	187b      	adds	r3, r7, r1
 8005f2e:	2212      	movs	r2, #18
 8005f30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	2200      	movs	r2, #0
 8005f36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	2206      	movs	r2, #6
 8005f42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	4a0a      	ldr	r2, [pc, #40]	@ (8005f70 <HAL_I2C_MspInit+0x19c>)
 8005f48:	0019      	movs	r1, r3
 8005f4a:	0010      	movs	r0, r2
 8005f4c:	f005 f8f2 	bl	800b134 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f50:	4b06      	ldr	r3, [pc, #24]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f54:	4b05      	ldr	r3, [pc, #20]	@ (8005f6c <HAL_I2C_MspInit+0x198>)
 8005f56:	2180      	movs	r1, #128	@ 0x80
 8005f58:	03c9      	lsls	r1, r1, #15
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b00b      	add	sp, #44	@ 0x2c
 8005f64:	bd90      	pop	{r4, r7, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	40005400 	.word	0x40005400
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	50000400 	.word	0x50000400
 8005f74:	20000e14 	.word	0x20000e14
 8005f78:	40020030 	.word	0x40020030
 8005f7c:	20000e5c 	.word	0x20000e5c
 8005f80:	4002001c 	.word	0x4002001c
 8005f84:	40005800 	.word	0x40005800

08005f88 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005f8c:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005f8e:	4a11      	ldr	r2, [pc, #68]	@ (8005fd4 <MX_I2S2_Init+0x4c>)
 8005f90:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005f92:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005f94:	22c0      	movs	r2, #192	@ 0xc0
 8005f96:	0092      	lsls	r2, r2, #2
 8005f98:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005f9c:	2210      	movs	r2, #16
 8005f9e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005fac:	4b08      	ldr	r3, [pc, #32]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005fae:	22fa      	movs	r2, #250	@ 0xfa
 8005fb0:	0152      	lsls	r2, r2, #5
 8005fb2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005fb4:	4b06      	ldr	r3, [pc, #24]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005fba:	4b05      	ldr	r3, [pc, #20]	@ (8005fd0 <MX_I2S2_Init+0x48>)
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f007 fb63 	bl	800d688 <HAL_I2S_Init>
 8005fc2:	1e03      	subs	r3, r0, #0
 8005fc4:	d001      	beq.n	8005fca <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8005fc6:	f000 f9dd 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20000ea4 	.word	0x20000ea4
 8005fd4:	40003800 	.word	0x40003800

08005fd8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b089      	sub	sp, #36	@ 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe0:	240c      	movs	r4, #12
 8005fe2:	193b      	adds	r3, r7, r4
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	2314      	movs	r3, #20
 8005fe8:	001a      	movs	r2, r3
 8005fea:	2100      	movs	r1, #0
 8005fec:	f012 f8ba 	bl	8018164 <memset>
  if(i2sHandle->Instance==SPI2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80060ac <HAL_I2S_MspInit+0xd4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d154      	bne.n	80060a4 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80060b0 <HAL_I2S_MspInit+0xd8>)
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80060b0 <HAL_I2S_MspInit+0xd8>)
 8006000:	2180      	movs	r1, #128	@ 0x80
 8006002:	01c9      	lsls	r1, r1, #7
 8006004:	430a      	orrs	r2, r1
 8006006:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006008:	4b29      	ldr	r3, [pc, #164]	@ (80060b0 <HAL_I2S_MspInit+0xd8>)
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	4b28      	ldr	r3, [pc, #160]	@ (80060b0 <HAL_I2S_MspInit+0xd8>)
 800600e:	2102      	movs	r1, #2
 8006010:	430a      	orrs	r2, r1
 8006012:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006014:	4b26      	ldr	r3, [pc, #152]	@ (80060b0 <HAL_I2S_MspInit+0xd8>)
 8006016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006018:	2202      	movs	r2, #2
 800601a:	4013      	ands	r3, r2
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006020:	193b      	adds	r3, r7, r4
 8006022:	22b0      	movs	r2, #176	@ 0xb0
 8006024:	0212      	lsls	r2, r2, #8
 8006026:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006028:	0021      	movs	r1, r4
 800602a:	187b      	adds	r3, r7, r1
 800602c:	2202      	movs	r2, #2
 800602e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006030:	187b      	adds	r3, r7, r1
 8006032:	2200      	movs	r2, #0
 8006034:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006036:	187b      	adds	r3, r7, r1
 8006038:	2200      	movs	r2, #0
 800603a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800603c:	187b      	adds	r3, r7, r1
 800603e:	2200      	movs	r2, #0
 8006040:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006042:	187b      	adds	r3, r7, r1
 8006044:	4a1b      	ldr	r2, [pc, #108]	@ (80060b4 <HAL_I2S_MspInit+0xdc>)
 8006046:	0019      	movs	r1, r3
 8006048:	0010      	movs	r0, r2
 800604a:	f005 f873 	bl	800b134 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800604e:	4b1a      	ldr	r3, [pc, #104]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 8006050:	4a1a      	ldr	r2, [pc, #104]	@ (80060bc <HAL_I2S_MspInit+0xe4>)
 8006052:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006054:	4b18      	ldr	r3, [pc, #96]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 8006056:	2202      	movs	r2, #2
 8006058:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800605a:	4b17      	ldr	r3, [pc, #92]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 800605c:	2200      	movs	r2, #0
 800605e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006060:	4b15      	ldr	r3, [pc, #84]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 8006062:	2200      	movs	r2, #0
 8006064:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006066:	4b14      	ldr	r3, [pc, #80]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 8006068:	2280      	movs	r2, #128	@ 0x80
 800606a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800606c:	4b12      	ldr	r3, [pc, #72]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 800606e:	2280      	movs	r2, #128	@ 0x80
 8006070:	0052      	lsls	r2, r2, #1
 8006072:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006074:	4b10      	ldr	r3, [pc, #64]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 8006076:	2280      	movs	r2, #128	@ 0x80
 8006078:	00d2      	lsls	r2, r2, #3
 800607a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800607c:	4b0e      	ldr	r3, [pc, #56]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 800607e:	2220      	movs	r2, #32
 8006080:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 8006084:	2200      	movs	r2, #0
 8006086:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006088:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 800608a:	0018      	movs	r0, r3
 800608c:	f004 fbd8 	bl	800a840 <HAL_DMA_Init>
 8006090:	1e03      	subs	r3, r0, #0
 8006092:	d001      	beq.n	8006098 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006094:	f000 f976 	bl	8006384 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a07      	ldr	r2, [pc, #28]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30
 800609e:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <HAL_I2S_MspInit+0xe0>)
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80060a4:	46c0      	nop			@ (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b009      	add	sp, #36	@ 0x24
 80060aa:	bd90      	pop	{r4, r7, pc}
 80060ac:	40003800 	.word	0x40003800
 80060b0:	40021000 	.word	0x40021000
 80060b4:	50000400 	.word	0x50000400
 80060b8:	20000ee0 	.word	0x20000ee0
 80060bc:	40020044 	.word	0x40020044

080060c0 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a0c      	ldr	r2, [pc, #48]	@ (8006100 <HAL_I2S_MspDeInit+0x40>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d111      	bne.n	80060f6 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80060d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006104 <HAL_I2S_MspDeInit+0x44>)
 80060d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006104 <HAL_I2S_MspDeInit+0x44>)
 80060d8:	490b      	ldr	r1, [pc, #44]	@ (8006108 <HAL_I2S_MspDeInit+0x48>)
 80060da:	400a      	ands	r2, r1
 80060dc:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80060de:	23b0      	movs	r3, #176	@ 0xb0
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	4a0a      	ldr	r2, [pc, #40]	@ (800610c <HAL_I2S_MspDeInit+0x4c>)
 80060e4:	0019      	movs	r1, r3
 80060e6:	0010      	movs	r0, r2
 80060e8:	f005 f9a2 	bl	800b430 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	0018      	movs	r0, r3
 80060f2:	f004 fc1d 	bl	800a930 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b002      	add	sp, #8
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	40003800 	.word	0x40003800
 8006104:	40021000 	.word	0x40021000
 8006108:	ffffbfff 	.word	0xffffbfff
 800610c:	50000400 	.word	0x50000400

08006110 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  testDone = true;
 8006114:	4b1e      	ldr	r3, [pc, #120]	@ (8006190 <SetTestDone+0x80>)
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 800611a:	23fa      	movs	r3, #250	@ 0xfa
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	0018      	movs	r0, r3
 8006120:	f003 fef0 	bl	8009f04 <HAL_Delay>
  SetDBLED(false, false, true);
 8006124:	2201      	movs	r2, #1
 8006126:	2100      	movs	r1, #0
 8006128:	2000      	movs	r0, #0
 800612a:	f002 fcc1 	bl	8008ab0 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 800612e:	4a19      	ldr	r2, [pc, #100]	@ (8006194 <SetTestDone+0x84>)
 8006130:	23fa      	movs	r3, #250	@ 0xfa
 8006132:	0119      	lsls	r1, r3, #4
 8006134:	23fa      	movs	r3, #250	@ 0xfa
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	0018      	movs	r0, r3
 800613a:	f002 fc8b 	bl	8008a54 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 800613e:	4a15      	ldr	r2, [pc, #84]	@ (8006194 <SetTestDone+0x84>)
 8006140:	23fa      	movs	r3, #250	@ 0xfa
 8006142:	0119      	lsls	r1, r3, #4
 8006144:	23fa      	movs	r3, #250	@ 0xfa
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	0018      	movs	r0, r3
 800614a:	f002 fcf5 	bl	8008b38 <SetVocLED>
  HAL_Delay(1000);
 800614e:	23fa      	movs	r3, #250	@ 0xfa
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	0018      	movs	r0, r3
 8006154:	f003 fed6 	bl	8009f04 <HAL_Delay>
  SetDBLED(false, false, false);
 8006158:	2200      	movs	r2, #0
 800615a:	2100      	movs	r1, #0
 800615c:	2000      	movs	r0, #0
 800615e:	f002 fca7 	bl	8008ab0 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8006162:	23fa      	movs	r3, #250	@ 0xfa
 8006164:	011a      	lsls	r2, r3, #4
 8006166:	23fa      	movs	r3, #250	@ 0xfa
 8006168:	0119      	lsls	r1, r3, #4
 800616a:	23fa      	movs	r3, #250	@ 0xfa
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	0018      	movs	r0, r3
 8006170:	f002 fc70 	bl	8008a54 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8006174:	23fa      	movs	r3, #250	@ 0xfa
 8006176:	011a      	lsls	r2, r3, #4
 8006178:	23fa      	movs	r3, #250	@ 0xfa
 800617a:	0119      	lsls	r1, r3, #4
 800617c:	23fa      	movs	r3, #250	@ 0xfa
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	0018      	movs	r0, r3
 8006182:	f002 fcd9 	bl	8008b38 <SetVocLED>
  InitDone();
 8006186:	f002 fc0f 	bl	80089a8 <InitDone>
}
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20000f28 	.word	0x20000f28
 8006194:	00000bb8 	.word	0x00000bb8

08006198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800619c:	f003 fe42 	bl	8009e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061a0:	f000 f86a 	bl	8006278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061a4:	f7ff fc04 	bl	80059b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80061a8:	f7ff fb78 	bl	800589c <MX_DMA_Init>
  MX_I2C1_Init();
 80061ac:	f7ff fd92 	bl	8005cd4 <MX_I2C1_Init>
  MX_I2S2_Init();
 80061b0:	f7ff feea 	bl	8005f88 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80061b4:	f003 f916 	bl	80093e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80061b8:	f7ff fdcc 	bl	8005d54 <MX_I2C2_Init>
  MX_TIM2_Init();
 80061bc:	f002 ff5e 	bl	800907c <MX_TIM2_Init>
  MX_TIM3_Init();
 80061c0:	f002 ffd0 	bl	8009164 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80061c4:	f003 f942 	bl	800944c <MX_USART4_UART_Init>
  MX_ADC_Init();
 80061c8:	f7ff fab6 	bl	8005738 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80061cc:	f010 fc50 	bl	8016a70 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80061d0:	f000 fff4 	bl	80071bc <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80061d4:	f003 f8d0 	bl	8009378 <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80061d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006254 <main+0xbc>)
 80061da:	4b1f      	ldr	r3, [pc, #124]	@ (8006258 <main+0xc0>)
 80061dc:	0011      	movs	r1, r2
 80061de:	0018      	movs	r0, r3
 80061e0:	f7ff fcfc 	bl	8005bdc <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80061e4:	f7ff fa46 	bl	8005674 <UserButton_Pressed>
 80061e8:	1e03      	subs	r3, r0, #0
 80061ea:	d004      	beq.n	80061f6 <main+0x5e>
    EnableESPProg();
 80061ec:	f010 fd10 	bl	8016c10 <EnableESPProg>
    ESP_Programming = true;
 80061f0:	4b1a      	ldr	r3, [pc, #104]	@ (800625c <main+0xc4>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 80061f6:	2003      	movs	r0, #3
 80061f8:	f003 fb5a 	bl	80098b0 <SetVerboseLevel>
  BinaryReleaseInfo();
 80061fc:	f003 fb70 	bl	80098e0 <BinaryReleaseInfo>
  InitClock(&hrtc);
 8006200:	4b17      	ldr	r3, [pc, #92]	@ (8006260 <main+0xc8>)
 8006202:	0018      	movs	r0, r3
 8006204:	f7ff fa7e 	bl	8005704 <InitClock>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8006208:	4b16      	ldr	r3, [pc, #88]	@ (8006264 <main+0xcc>)
 800620a:	4a17      	ldr	r2, [pc, #92]	@ (8006268 <main+0xd0>)
 800620c:	4917      	ldr	r1, [pc, #92]	@ (800626c <main+0xd4>)
 800620e:	4818      	ldr	r0, [pc, #96]	@ (8006270 <main+0xd8>)
 8006210:	f7ff fb6a 	bl	80058e8 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming){
 8006214:	4b17      	ldr	r3, [pc, #92]	@ (8006274 <main+0xdc>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <main+0x9a>
 800621c:	4b0f      	ldr	r3, [pc, #60]	@ (800625c <main+0xc4>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2201      	movs	r2, #1
 8006222:	4053      	eors	r3, r2
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <main+0x9a>
      UpkeepGadget();
 800622a:	f7ff fb8a 	bl	8005942 <UpkeepGadget>
      ESP_Upkeep();
 800622e:	f7fe fc41 	bl	8004ab4 <ESP_Upkeep>
    }
    if(!testDone && !ESP_Programming){
 8006232:	4b10      	ldr	r3, [pc, #64]	@ (8006274 <main+0xdc>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	4053      	eors	r3, r2
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0e9      	beq.n	8006214 <main+0x7c>
 8006240:	4b06      	ldr	r3, [pc, #24]	@ (800625c <main+0xc4>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2201      	movs	r2, #1
 8006246:	4053      	eors	r3, r2
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0e2      	beq.n	8006214 <main+0x7c>
      Gadget_Test();
 800624e:	f7ff fb71 	bl	8005934 <Gadget_Test>
    if(testDone && !ESP_Programming){
 8006252:	e7df      	b.n	8006214 <main+0x7c>
 8006254:	200028f8 	.word	0x200028f8
 8006258:	200028b8 	.word	0x200028b8
 800625c:	20000f29 	.word	0x20000f29
 8006260:	200027c0 	.word	0x200027c0
 8006264:	20000d10 	.word	0x20000d10
 8006268:	20002aa8 	.word	0x20002aa8
 800626c:	20000ea4 	.word	0x20000ea4
 8006270:	20000d6c 	.word	0x20000d6c
 8006274:	20000f28 	.word	0x20000f28

08006278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006278:	b590      	push	{r4, r7, lr}
 800627a:	b09d      	sub	sp, #116	@ 0x74
 800627c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800627e:	2438      	movs	r4, #56	@ 0x38
 8006280:	193b      	adds	r3, r7, r4
 8006282:	0018      	movs	r0, r3
 8006284:	2338      	movs	r3, #56	@ 0x38
 8006286:	001a      	movs	r2, r3
 8006288:	2100      	movs	r1, #0
 800628a:	f011 ff6b 	bl	8018164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800628e:	2324      	movs	r3, #36	@ 0x24
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	0018      	movs	r0, r3
 8006294:	2314      	movs	r3, #20
 8006296:	001a      	movs	r2, r3
 8006298:	2100      	movs	r1, #0
 800629a:	f011 ff63 	bl	8018164 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800629e:	003b      	movs	r3, r7
 80062a0:	0018      	movs	r0, r3
 80062a2:	2324      	movs	r3, #36	@ 0x24
 80062a4:	001a      	movs	r2, r3
 80062a6:	2100      	movs	r1, #0
 80062a8:	f011 ff5c 	bl	8018164 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80062ac:	4b32      	ldr	r3, [pc, #200]	@ (8006378 <SystemClock_Config+0x100>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a32      	ldr	r2, [pc, #200]	@ (800637c <SystemClock_Config+0x104>)
 80062b2:	401a      	ands	r2, r3
 80062b4:	4b30      	ldr	r3, [pc, #192]	@ (8006378 <SystemClock_Config+0x100>)
 80062b6:	2180      	movs	r1, #128	@ 0x80
 80062b8:	0109      	lsls	r1, r1, #4
 80062ba:	430a      	orrs	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80062be:	f009 fb83 	bl	800f9c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80062c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006380 <SystemClock_Config+0x108>)
 80062c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006380 <SystemClock_Config+0x108>)
 80062c8:	492c      	ldr	r1, [pc, #176]	@ (800637c <SystemClock_Config+0x104>)
 80062ca:	400a      	ands	r2, r1
 80062cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80062ce:	193b      	adds	r3, r7, r4
 80062d0:	2226      	movs	r2, #38	@ 0x26
 80062d2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80062d4:	193b      	adds	r3, r7, r4
 80062d6:	2280      	movs	r2, #128	@ 0x80
 80062d8:	0052      	lsls	r2, r2, #1
 80062da:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062dc:	0021      	movs	r1, r4
 80062de:	187b      	adds	r3, r7, r1
 80062e0:	2201      	movs	r2, #1
 80062e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	2210      	movs	r2, #16
 80062e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	2201      	movs	r2, #1
 80062ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80062f0:	187b      	adds	r3, r7, r1
 80062f2:	2200      	movs	r2, #0
 80062f4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062f6:	187b      	adds	r3, r7, r1
 80062f8:	0018      	movs	r0, r3
 80062fa:	f009 fb73 	bl	800f9e4 <HAL_RCC_OscConfig>
 80062fe:	1e03      	subs	r3, r0, #0
 8006300:	d001      	beq.n	8006306 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006302:	f000 f83f 	bl	8006384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006306:	2124      	movs	r1, #36	@ 0x24
 8006308:	187b      	adds	r3, r7, r1
 800630a:	220f      	movs	r2, #15
 800630c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800630e:	187b      	adds	r3, r7, r1
 8006310:	2201      	movs	r2, #1
 8006312:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006314:	187b      	adds	r3, r7, r1
 8006316:	2200      	movs	r2, #0
 8006318:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800631a:	187b      	adds	r3, r7, r1
 800631c:	2200      	movs	r2, #0
 800631e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006320:	187b      	adds	r3, r7, r1
 8006322:	2200      	movs	r2, #0
 8006324:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006326:	187b      	adds	r3, r7, r1
 8006328:	2100      	movs	r1, #0
 800632a:	0018      	movs	r0, r3
 800632c:	f009 ff2e 	bl	801018c <HAL_RCC_ClockConfig>
 8006330:	1e03      	subs	r3, r0, #0
 8006332:	d001      	beq.n	8006338 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006334:	f000 f826 	bl	8006384 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006338:	003b      	movs	r3, r7
 800633a:	226d      	movs	r2, #109	@ 0x6d
 800633c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800633e:	003b      	movs	r3, r7
 8006340:	2200      	movs	r2, #0
 8006342:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006344:	003b      	movs	r3, r7
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800634a:	003b      	movs	r3, r7
 800634c:	2200      	movs	r2, #0
 800634e:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006350:	003b      	movs	r3, r7
 8006352:	2280      	movs	r2, #128	@ 0x80
 8006354:	0252      	lsls	r2, r2, #9
 8006356:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006358:	003b      	movs	r3, r7
 800635a:	2280      	movs	r2, #128	@ 0x80
 800635c:	04d2      	lsls	r2, r2, #19
 800635e:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006360:	003b      	movs	r3, r7
 8006362:	0018      	movs	r0, r3
 8006364:	f00a f936 	bl	80105d4 <HAL_RCCEx_PeriphCLKConfig>
 8006368:	1e03      	subs	r3, r0, #0
 800636a:	d001      	beq.n	8006370 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800636c:	f000 f80a 	bl	8006384 <Error_Handler>
  }
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b01d      	add	sp, #116	@ 0x74
 8006376:	bd90      	pop	{r4, r7, pc}
 8006378:	40007000 	.word	0x40007000
 800637c:	ffffe7ff 	.word	0xffffe7ff
 8006380:	40021000 	.word	0x40021000

08006384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006388:	b672      	cpsid	i
}
 800638a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800638c:	46c0      	nop			@ (mov r8, r8)
 800638e:	e7fd      	b.n	800638c <Error_Handler+0x8>

08006390 <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8006394:	f7ff fc7f 	bl	8005c96 <HT_StartMeasurement>
}
 8006398:	46c0      	nop			@ (mov r8, r8)
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80063a4:	4a04      	ldr	r2, [pc, #16]	@ (80063b8 <HT_IsMeasurementDoneWrapper+0x18>)
 80063a6:	4b05      	ldr	r3, [pc, #20]	@ (80063bc <HT_IsMeasurementDoneWrapper+0x1c>)
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7ff fc7a 	bl	8005ca4 <HT_GetMeasurementValues>
 80063b0:	0003      	movs	r3, r0
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000f30 	.word	0x20000f30
 80063bc:	20000f2c 	.word	0x20000f2c

080063c0 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 80063c4:	f7ff fad7 	bl	8005976 <Gas_StartMeasurement>
}
 80063c8:	46c0      	nop			@ (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 80063d4:	4b03      	ldr	r3, [pc, #12]	@ (80063e4 <VOC_IsMeasurementDoneWrapper+0x14>)
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7ff fad4 	bl	8005984 <Gas_GetMeasurementValues>
 80063dc:	0003      	movs	r3, r0
}
 80063de:	0018      	movs	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20000f34 	.word	0x20000f34

080063e8 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
}
 80063ec:	46c0      	nop			@ (mov r8, r8)
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80063f2:	b580      	push	{r7, lr}
 80063f4:	af00      	add	r7, sp, #0
  return true;
 80063f6:	2301      	movs	r3, #1
}
 80063f8:	0018      	movs	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 80063fe:	b580      	push	{r7, lr}
 8006400:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8006402:	23fa      	movs	r3, #250	@ 0xfa
 8006404:	015b      	lsls	r3, r3, #5
 8006406:	2180      	movs	r1, #128	@ 0x80
 8006408:	0018      	movs	r0, r3
 800640a:	f000 fb9f 	bl	8006b4c <MIC_Start>
}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8006418:	f000 fdfa 	bl	8007010 <MIC_MeasurementDone>
 800641c:	0003      	movs	r3, r0
}
 800641e:	0018      	movs	r0, r3
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <Meas_TestStart>:
void Meas_TestStart(){
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8006428:	f7ff ffe9 	bl	80063fe <MIC_StartMeasurementWrapper>
}
 800642c:	46c0      	nop			@ (mov r8, r8)
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8006432:	b580      	push	{r7, lr}
 8006434:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006436:	f000 fe0b 	bl	8007050 <MIC_TestMeasurementDone>
 800643a:	0003      	movs	r3, r0
}
 800643c:	0018      	movs	r0, r3
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <testInit>:
void testInit(){
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8006448:	4b07      	ldr	r3, [pc, #28]	@ (8006468 <testInit+0x24>)
 800644a:	2200      	movs	r2, #0
 800644c:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 800644e:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <testInit+0x24>)
 8006450:	2200      	movs	r2, #0
 8006452:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8006454:	4b04      	ldr	r3, [pc, #16]	@ (8006468 <testInit+0x24>)
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 800645a:	4b03      	ldr	r3, [pc, #12]	@ (8006468 <testInit+0x24>)
 800645c:	2200      	movs	r2, #0
 800645e:	705a      	strb	r2, [r3, #1]
}
 8006460:	46c0      	nop			@ (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			@ (mov r8, r8)
 8006468:	20000f70 	.word	0x20000f70

0800646c <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 800646c:	b5b0      	push	{r4, r5, r7, lr}
 800646e:	b092      	sub	sp, #72	@ 0x48
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8006478:	4b6f      	ldr	r3, [pc, #444]	@ (8006638 <Meas_Init+0x1cc>)
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
  testInit();
 800647e:	f7ff ffe1 	bl	8006444 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8006482:	4b6e      	ldr	r3, [pc, #440]	@ (800663c <Meas_Init+0x1d0>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <Meas_Init+0x26>
 800648a:	4b6c      	ldr	r3, [pc, #432]	@ (800663c <Meas_Init+0x1d0>)
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d068      	beq.n	8006564 <Meas_Init+0xf8>
    I2CSensors_Init(sensorI2C);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	0018      	movs	r0, r3
 8006496:	f7fe fd83 	bl	8004fa0 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 800649a:	f7ff fc13 	bl	8005cc4 <HT_DeviceConnected>
 800649e:	0003      	movs	r3, r0
 80064a0:	001a      	movs	r2, r3
 80064a2:	2301      	movs	r3, #1
 80064a4:	4053      	eors	r3, r2
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 80064ac:	4a64      	ldr	r2, [pc, #400]	@ (8006640 <Meas_Init+0x1d4>)
 80064ae:	4b65      	ldr	r3, [pc, #404]	@ (8006644 <Meas_Init+0x1d8>)
 80064b0:	0019      	movs	r1, r3
 80064b2:	2001      	movs	r0, #1
 80064b4:	f003 f980 	bl	80097b8 <CreateLine>
       MeasTest.HT_Tested = false;
 80064b8:	4b63      	ldr	r3, [pc, #396]	@ (8006648 <Meas_Init+0x1dc>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 80064be:	4b5f      	ldr	r3, [pc, #380]	@ (800663c <Meas_Init+0x1d0>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e008      	b.n	80064d8 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 80064c6:	4b60      	ldr	r3, [pc, #384]	@ (8006648 <Meas_Init+0x1dc>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 80064cc:	4a5f      	ldr	r2, [pc, #380]	@ (800664c <Meas_Init+0x1e0>)
 80064ce:	4b60      	ldr	r3, [pc, #384]	@ (8006650 <Meas_Init+0x1e4>)
 80064d0:	0019      	movs	r1, r3
 80064d2:	2003      	movs	r0, #3
 80064d4:	f003 f970 	bl	80097b8 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 80064d8:	f7ff fa61 	bl	800599e <Gas_DeviceConnected>
 80064dc:	0003      	movs	r3, r0
 80064de:	001a      	movs	r2, r3
 80064e0:	2301      	movs	r3, #1
 80064e2:	4053      	eors	r3, r2
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00c      	beq.n	8006504 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 80064ea:	4b57      	ldr	r3, [pc, #348]	@ (8006648 <Meas_Init+0x1dc>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 80064f0:	4a58      	ldr	r2, [pc, #352]	@ (8006654 <Meas_Init+0x1e8>)
 80064f2:	4b54      	ldr	r3, [pc, #336]	@ (8006644 <Meas_Init+0x1d8>)
 80064f4:	0019      	movs	r1, r3
 80064f6:	2001      	movs	r0, #1
 80064f8:	f003 f95e 	bl	80097b8 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 80064fc:	4b4f      	ldr	r3, [pc, #316]	@ (800663c <Meas_Init+0x1d0>)
 80064fe:	2200      	movs	r2, #0
 8006500:	705a      	strb	r2, [r3, #1]
 8006502:	e008      	b.n	8006516 <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 8006504:	4b50      	ldr	r3, [pc, #320]	@ (8006648 <Meas_Init+0x1dc>)
 8006506:	2201      	movs	r2, #1
 8006508:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 800650a:	4a53      	ldr	r2, [pc, #332]	@ (8006658 <Meas_Init+0x1ec>)
 800650c:	4b50      	ldr	r3, [pc, #320]	@ (8006650 <Meas_Init+0x1e4>)
 800650e:	0019      	movs	r1, r3
 8006510:	2003      	movs	r0, #3
 8006512:	f003 f951 	bl	80097b8 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8006516:	4b4c      	ldr	r3, [pc, #304]	@ (8006648 <Meas_Init+0x1dc>)
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <Meas_Init+0xc6>
 800651e:	4b4a      	ldr	r3, [pc, #296]	@ (8006648 <Meas_Init+0x1dc>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <Meas_Init+0xc6>
      SetDBLED(false, true, false);
 8006526:	2200      	movs	r2, #0
 8006528:	2101      	movs	r1, #1
 800652a:	2000      	movs	r0, #0
 800652c:	f002 fac0 	bl	8008ab0 <SetDBLED>
 8006530:	e018      	b.n	8006564 <Meas_Init+0xf8>
    }
    else{
      SetDBLED(true, false, false);
 8006532:	2200      	movs	r2, #0
 8006534:	2100      	movs	r1, #0
 8006536:	2001      	movs	r0, #1
 8006538:	f002 faba 	bl	8008ab0 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800653c:	4b47      	ldr	r3, [pc, #284]	@ (800665c <Meas_Init+0x1f0>)
 800653e:	2200      	movs	r2, #0
 8006540:	2101      	movs	r1, #1
 8006542:	0018      	movs	r0, r3
 8006544:	f005 f873 	bl	800b62e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	4843      	ldr	r0, [pc, #268]	@ (800665c <Meas_Init+0x1f0>)
 800654e:	2201      	movs	r2, #1
 8006550:	0019      	movs	r1, r3
 8006552:	f005 f86c 	bl	800b62e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4840      	ldr	r0, [pc, #256]	@ (800665c <Meas_Init+0x1f0>)
 800655c:	2201      	movs	r2, #1
 800655e:	0019      	movs	r1, r3
 8006560:	f005 f865 	bl	800b62e <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8006564:	4b35      	ldr	r3, [pc, #212]	@ (800663c <Meas_Init+0x1d0>)
 8006566:	78db      	ldrb	r3, [r3, #3]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <Meas_Init+0x10c>
    MIC_Init(micI2s);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	0018      	movs	r0, r3
 8006570:	f000 fa86 	bl	8006a80 <MIC_Init>
    Meas_TestStart();
 8006574:	f7ff ff56 	bl	8006424 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8006578:	2547      	movs	r5, #71	@ 0x47
 800657a:	197b      	adds	r3, r7, r5
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8006580:	197b      	adds	r3, r7, r5
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	197a      	adds	r2, r7, r5
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	7011      	strb	r1, [r2, #0]
 800658a:	4a2c      	ldr	r2, [pc, #176]	@ (800663c <Meas_Init+0x1d0>)
 800658c:	7814      	ldrb	r4, [r2, #0]
 800658e:	4a34      	ldr	r2, [pc, #208]	@ (8006660 <Meas_Init+0x1f4>)
 8006590:	0119      	lsls	r1, r3, #4
 8006592:	4834      	ldr	r0, [pc, #208]	@ (8006664 <Meas_Init+0x1f8>)
 8006594:	5088      	str	r0, [r1, r2]
 8006596:	4932      	ldr	r1, [pc, #200]	@ (8006660 <Meas_Init+0x1f4>)
 8006598:	011a      	lsls	r2, r3, #4
 800659a:	188a      	adds	r2, r1, r2
 800659c:	3204      	adds	r2, #4
 800659e:	4932      	ldr	r1, [pc, #200]	@ (8006668 <Meas_Init+0x1fc>)
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	492f      	ldr	r1, [pc, #188]	@ (8006660 <Meas_Init+0x1f4>)
 80065a4:	011a      	lsls	r2, r3, #4
 80065a6:	188a      	adds	r2, r1, r2
 80065a8:	3208      	adds	r2, #8
 80065aa:	4930      	ldr	r1, [pc, #192]	@ (800666c <Meas_Init+0x200>)
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006660 <Meas_Init+0x1f4>)
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	18d3      	adds	r3, r2, r3
 80065b4:	330c      	adds	r3, #12
 80065b6:	1c22      	adds	r2, r4, #0
 80065b8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80065ba:	197b      	adds	r3, r7, r5
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	197a      	adds	r2, r7, r5
 80065c0:	1c59      	adds	r1, r3, #1
 80065c2:	7011      	strb	r1, [r2, #0]
 80065c4:	4a1d      	ldr	r2, [pc, #116]	@ (800663c <Meas_Init+0x1d0>)
 80065c6:	7854      	ldrb	r4, [r2, #1]
 80065c8:	4a25      	ldr	r2, [pc, #148]	@ (8006660 <Meas_Init+0x1f4>)
 80065ca:	0119      	lsls	r1, r3, #4
 80065cc:	4828      	ldr	r0, [pc, #160]	@ (8006670 <Meas_Init+0x204>)
 80065ce:	5088      	str	r0, [r1, r2]
 80065d0:	4923      	ldr	r1, [pc, #140]	@ (8006660 <Meas_Init+0x1f4>)
 80065d2:	011a      	lsls	r2, r3, #4
 80065d4:	188a      	adds	r2, r1, r2
 80065d6:	3204      	adds	r2, #4
 80065d8:	4926      	ldr	r1, [pc, #152]	@ (8006674 <Meas_Init+0x208>)
 80065da:	6011      	str	r1, [r2, #0]
 80065dc:	4920      	ldr	r1, [pc, #128]	@ (8006660 <Meas_Init+0x1f4>)
 80065de:	011a      	lsls	r2, r3, #4
 80065e0:	188a      	adds	r2, r1, r2
 80065e2:	3208      	adds	r2, #8
 80065e4:	4924      	ldr	r1, [pc, #144]	@ (8006678 <Meas_Init+0x20c>)
 80065e6:	6011      	str	r1, [r2, #0]
 80065e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006660 <Meas_Init+0x1f4>)
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	18d3      	adds	r3, r2, r3
 80065ee:	330c      	adds	r3, #12
 80065f0:	1c22      	adds	r2, r4, #0
 80065f2:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 80065f4:	197b      	adds	r3, r7, r5
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	197a      	adds	r2, r7, r5
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	7011      	strb	r1, [r2, #0]
 80065fe:	4a0f      	ldr	r2, [pc, #60]	@ (800663c <Meas_Init+0x1d0>)
 8006600:	7894      	ldrb	r4, [r2, #2]
 8006602:	4a17      	ldr	r2, [pc, #92]	@ (8006660 <Meas_Init+0x1f4>)
 8006604:	0119      	lsls	r1, r3, #4
 8006606:	481d      	ldr	r0, [pc, #116]	@ (800667c <Meas_Init+0x210>)
 8006608:	5088      	str	r0, [r1, r2]
 800660a:	4915      	ldr	r1, [pc, #84]	@ (8006660 <Meas_Init+0x1f4>)
 800660c:	011a      	lsls	r2, r3, #4
 800660e:	188a      	adds	r2, r1, r2
 8006610:	3204      	adds	r2, #4
 8006612:	491b      	ldr	r1, [pc, #108]	@ (8006680 <Meas_Init+0x214>)
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	4912      	ldr	r1, [pc, #72]	@ (8006660 <Meas_Init+0x1f4>)
 8006618:	011a      	lsls	r2, r3, #4
 800661a:	188a      	adds	r2, r1, r2
 800661c:	3208      	adds	r2, #8
 800661e:	4919      	ldr	r1, [pc, #100]	@ (8006684 <Meas_Init+0x218>)
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	4a0f      	ldr	r2, [pc, #60]	@ (8006660 <Meas_Init+0x1f4>)
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	18d3      	adds	r3, r2, r3
 8006628:	330c      	adds	r3, #12
 800662a:	1c22      	adds	r2, r4, #0
 800662c:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b012      	add	sp, #72	@ 0x48
 8006634:	bdb0      	pop	{r4, r5, r7, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	20000f74 	.word	0x20000f74
 800663c:	20000f6c 	.word	0x20000f6c
 8006640:	0801b464 	.word	0x0801b464
 8006644:	0801b494 	.word	0x0801b494
 8006648:	20000f70 	.word	0x20000f70
 800664c:	0801b498 	.word	0x0801b498
 8006650:	0801b4c4 	.word	0x0801b4c4
 8006654:	0801b4c8 	.word	0x0801b4c8
 8006658:	0801b4e4 	.word	0x0801b4e4
 800665c:	50000400 	.word	0x50000400
 8006660:	20000f3c 	.word	0x20000f3c
 8006664:	08006391 	.word	0x08006391
 8006668:	080063a1 	.word	0x080063a1
 800666c:	20000f38 	.word	0x20000f38
 8006670:	080063c1 	.word	0x080063c1
 8006674:	080063d1 	.word	0x080063d1
 8006678:	20000f39 	.word	0x20000f39
 800667c:	080063e9 	.word	0x080063e9
 8006680:	080063f3 	.word	0x080063f3
 8006684:	20000f3a 	.word	0x20000f3a

08006688 <StartMeasurements>:

void StartMeasurements(void) {
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800668c:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <StartMeasurements+0x48>)
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	e015      	b.n	80066c0 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006694:	4b0e      	ldr	r3, [pc, #56]	@ (80066d0 <StartMeasurements+0x48>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	4a0e      	ldr	r2, [pc, #56]	@ (80066d4 <StartMeasurements+0x4c>)
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	18d3      	adds	r3, r2, r3
 800669e:	330c      	adds	r3, #12
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <StartMeasurements+0x48>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	001a      	movs	r2, r3
 80066ac:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <StartMeasurements+0x4c>)
 80066ae:	0112      	lsls	r2, r2, #4
 80066b0:	58d3      	ldr	r3, [r2, r3]
 80066b2:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80066b4:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <StartMeasurements+0x48>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	4b04      	ldr	r3, [pc, #16]	@ (80066d0 <StartMeasurements+0x48>)
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	4b03      	ldr	r3, [pc, #12]	@ (80066d0 <StartMeasurements+0x48>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d9e5      	bls.n	8006694 <StartMeasurements+0xc>
    }
  }
}
 80066c8:	46c0      	nop			@ (mov r8, r8)
 80066ca:	46c0      	nop			@ (mov r8, r8)
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000f76 	.word	0x20000f76
 80066d4:	20000f3c 	.word	0x20000f3c

080066d8 <Meas_Test>:

void Meas_Test(){
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 80066dc:	4b21      	ldr	r3, [pc, #132]	@ (8006764 <Meas_Test+0x8c>)
 80066de:	78db      	ldrb	r3, [r3, #3]
 80066e0:	2201      	movs	r2, #1
 80066e2:	4053      	eors	r3, r2
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <Meas_Test+0x16>
    ESP_WakeTest();
 80066ea:	f7fe f8d1 	bl	8004890 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 80066ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006764 <Meas_Test+0x8c>)
 80066f0:	789b      	ldrb	r3, [r3, #2]
 80066f2:	2201      	movs	r2, #1
 80066f4:	4053      	eors	r3, r2
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d017      	beq.n	800672c <Meas_Test+0x54>
    if(MIC_IsTestMeasurementDoneWrapper()){
 80066fc:	f7ff fe99 	bl	8006432 <MIC_IsTestMeasurementDoneWrapper>
 8006700:	1e03      	subs	r3, r0, #0
 8006702:	d00b      	beq.n	800671c <Meas_Test+0x44>
      MeasTest.MIC_Tested = true;
 8006704:	4b17      	ldr	r3, [pc, #92]	@ (8006764 <Meas_Test+0x8c>)
 8006706:	2201      	movs	r2, #1
 8006708:	709a      	strb	r2, [r3, #2]
      SetStatusLED(4000, 3000, 4000);
 800670a:	23fa      	movs	r3, #250	@ 0xfa
 800670c:	011a      	lsls	r2, r3, #4
 800670e:	4916      	ldr	r1, [pc, #88]	@ (8006768 <Meas_Test+0x90>)
 8006710:	23fa      	movs	r3, #250	@ 0xfa
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	0018      	movs	r0, r3
 8006716:	f002 f99d 	bl	8008a54 <SetStatusLED>
 800671a:	e007      	b.n	800672c <Meas_Test+0x54>
    }
    else{
      SetStatusLED(3000, 4000, 4000);
 800671c:	23fa      	movs	r3, #250	@ 0xfa
 800671e:	011a      	lsls	r2, r3, #4
 8006720:	23fa      	movs	r3, #250	@ 0xfa
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	4810      	ldr	r0, [pc, #64]	@ (8006768 <Meas_Test+0x90>)
 8006726:	0019      	movs	r1, r3
 8006728:	f002 f994 	bl	8008a54 <SetStatusLED>
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 800672c:	4b0d      	ldr	r3, [pc, #52]	@ (8006764 <Meas_Test+0x8c>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d013      	beq.n	800675c <Meas_Test+0x84>
 8006734:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <Meas_Test+0x8c>)
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00f      	beq.n	800675c <Meas_Test+0x84>
 800673c:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <Meas_Test+0x8c>)
 800673e:	78db      	ldrb	r3, [r3, #3]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <Meas_Test+0x84>
 8006744:	4b07      	ldr	r3, [pc, #28]	@ (8006764 <Meas_Test+0x8c>)
 8006746:	789b      	ldrb	r3, [r3, #2]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <Meas_Test+0x84>
    Debug("Test completed");
 800674c:	4a07      	ldr	r2, [pc, #28]	@ (800676c <Meas_Test+0x94>)
 800674e:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <Meas_Test+0x98>)
 8006750:	0019      	movs	r1, r3
 8006752:	2003      	movs	r0, #3
 8006754:	f003 f830 	bl	80097b8 <CreateLine>
    SetTestDone();
 8006758:	f7ff fcda 	bl	8006110 <SetTestDone>
  }
}
 800675c:	46c0      	nop			@ (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	20000f70 	.word	0x20000f70
 8006768:	00000bb8 	.word	0x00000bb8
 800676c:	0801b4fc 	.word	0x0801b4fc
 8006770:	0801b4c4 	.word	0x0801b4c4

08006774 <ResetMeasurements>:
void ResetMeasurements(void) {
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8006778:	4b0b      	ldr	r3, [pc, #44]	@ (80067a8 <ResetMeasurements+0x34>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 800677e:	4b0a      	ldr	r3, [pc, #40]	@ (80067a8 <ResetMeasurements+0x34>)
 8006780:	2200      	movs	r2, #0
 8006782:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006784:	4b08      	ldr	r3, [pc, #32]	@ (80067a8 <ResetMeasurements+0x34>)
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800678a:	4b07      	ldr	r3, [pc, #28]	@ (80067a8 <ResetMeasurements+0x34>)
 800678c:	2200      	movs	r2, #0
 800678e:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006790:	4b05      	ldr	r3, [pc, #20]	@ (80067a8 <ResetMeasurements+0x34>)
 8006792:	2200      	movs	r2, #0
 8006794:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8006796:	4b04      	ldr	r3, [pc, #16]	@ (80067a8 <ResetMeasurements+0x34>)
 8006798:	2200      	movs	r2, #0
 800679a:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 800679c:	4b02      	ldr	r3, [pc, #8]	@ (80067a8 <ResetMeasurements+0x34>)
 800679e:	2200      	movs	r2, #0
 80067a0:	73da      	strb	r2, [r3, #15]
}
 80067a2:	46c0      	nop			@ (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000f2c 	.word	0x20000f2c

080067ac <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80067b0:	4b18      	ldr	r3, [pc, #96]	@ (8006814 <MeasurementsCompleted+0x68>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e024      	b.n	8006802 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80067b8:	4b16      	ldr	r3, [pc, #88]	@ (8006814 <MeasurementsCompleted+0x68>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4a16      	ldr	r2, [pc, #88]	@ (8006818 <MeasurementsCompleted+0x6c>)
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	18d3      	adds	r3, r2, r3
 80067c2:	330c      	adds	r3, #12
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d015      	beq.n	80067f6 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 80067ca:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <MeasurementsCompleted+0x68>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	4a12      	ldr	r2, [pc, #72]	@ (8006818 <MeasurementsCompleted+0x6c>)
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	18d3      	adds	r3, r2, r3
 80067d4:	3304      	adds	r3, #4
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4798      	blx	r3
 80067da:	1e03      	subs	r3, r0, #0
 80067dc:	d009      	beq.n	80067f2 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 80067de:	4b0d      	ldr	r3, [pc, #52]	@ (8006814 <MeasurementsCompleted+0x68>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006818 <MeasurementsCompleted+0x6c>)
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	18d3      	adds	r3, r2, r3
 80067e8:	3308      	adds	r3, #8
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e001      	b.n	80067f6 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e00a      	b.n	800680c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80067f6:	4b07      	ldr	r3, [pc, #28]	@ (8006814 <MeasurementsCompleted+0x68>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	4b05      	ldr	r3, [pc, #20]	@ (8006814 <MeasurementsCompleted+0x68>)
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	4b04      	ldr	r3, [pc, #16]	@ (8006814 <MeasurementsCompleted+0x68>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d9d6      	bls.n	80067b8 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800680a:	2301      	movs	r3, #1
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	20000f76 	.word	0x20000f76
 8006818:	20000f3c 	.word	0x20000f3c

0800681c <Mic_Upkeep>:

void Mic_Upkeep(){
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  switch(MicState){
 8006820:	4b20      	ldr	r3, [pc, #128]	@ (80068a4 <Mic_Upkeep+0x88>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d022      	beq.n	800686e <Mic_Upkeep+0x52>
 8006828:	dc2c      	bgt.n	8006884 <Mic_Upkeep+0x68>
 800682a:	2b02      	cmp	r3, #2
 800682c:	d00f      	beq.n	800684e <Mic_Upkeep+0x32>
 800682e:	dc29      	bgt.n	8006884 <Mic_Upkeep+0x68>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <Mic_Upkeep+0x1e>
 8006834:	2b01      	cmp	r3, #1
 8006836:	d004      	beq.n	8006842 <Mic_Upkeep+0x26>
 8006838:	e024      	b.n	8006884 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 800683a:	4b1a      	ldr	r3, [pc, #104]	@ (80068a4 <Mic_Upkeep+0x88>)
 800683c:	2201      	movs	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]
    break;
 8006840:	e02d      	b.n	800689e <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8006842:	f7ff fddc 	bl	80063fe <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006846:	4b17      	ldr	r3, [pc, #92]	@ (80068a4 <Mic_Upkeep+0x88>)
 8006848:	2202      	movs	r2, #2
 800684a:	701a      	strb	r2, [r3, #0]
    break;
 800684c:	e027      	b.n	800689e <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 800684e:	f7ff fde1 	bl	8006414 <MIC_IsMeasurementDoneWrapper>
 8006852:	1e03      	subs	r3, r0, #0
 8006854:	d020      	beq.n	8006898 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8006856:	4b13      	ldr	r3, [pc, #76]	@ (80068a4 <Mic_Upkeep+0x88>)
 8006858:	2203      	movs	r2, #3
 800685a:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 800685c:	f003 fb48 	bl	8009ef0 <HAL_GetTick>
 8006860:	0003      	movs	r3, r0
 8006862:	22fa      	movs	r2, #250	@ 0xfa
 8006864:	0092      	lsls	r2, r2, #2
 8006866:	189a      	adds	r2, r3, r2
 8006868:	4b0f      	ldr	r3, [pc, #60]	@ (80068a8 <Mic_Upkeep+0x8c>)
 800686a:	601a      	str	r2, [r3, #0]
    }
    break;
 800686c:	e014      	b.n	8006898 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 800686e:	4b0e      	ldr	r3, [pc, #56]	@ (80068a8 <Mic_Upkeep+0x8c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	0018      	movs	r0, r3
 8006874:	f002 ff4a 	bl	800970c <TimestampIsReached>
 8006878:	1e03      	subs	r3, r0, #0
 800687a:	d00f      	beq.n	800689c <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <Mic_Upkeep+0x88>)
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006882:	e00b      	b.n	800689c <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006884:	4a09      	ldr	r2, [pc, #36]	@ (80068ac <Mic_Upkeep+0x90>)
 8006886:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <Mic_Upkeep+0x94>)
 8006888:	0019      	movs	r1, r3
 800688a:	2003      	movs	r0, #3
 800688c:	f002 ff94 	bl	80097b8 <CreateLine>
    MicState = MIC_STATE_INIT;
 8006890:	4b04      	ldr	r3, [pc, #16]	@ (80068a4 <Mic_Upkeep+0x88>)
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
    break;
 8006896:	e002      	b.n	800689e <Mic_Upkeep+0x82>
    break;
 8006898:	46c0      	nop			@ (mov r8, r8)
 800689a:	e000      	b.n	800689e <Mic_Upkeep+0x82>
    break;
 800689c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800689e:	46c0      	nop			@ (mov r8, r8)
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000f75 	.word	0x20000f75
 80068a8:	20000f7c 	.word	0x20000f7c
 80068ac:	0801b50c 	.word	0x0801b50c
 80068b0:	0801b4c4 	.word	0x0801b4c4

080068b4 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80068b4:	b5b0      	push	{r4, r5, r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80068ba:	4b3b      	ldr	r3, [pc, #236]	@ (80069a8 <Meas_Upkeep+0xf4>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b06      	cmp	r3, #6
 80068c0:	d868      	bhi.n	8006994 <Meas_Upkeep+0xe0>
 80068c2:	009a      	lsls	r2, r3, #2
 80068c4:	4b39      	ldr	r3, [pc, #228]	@ (80069ac <Meas_Upkeep+0xf8>)
 80068c6:	18d3      	adds	r3, r2, r3
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 80068cc:	4a38      	ldr	r2, [pc, #224]	@ (80069b0 <Meas_Upkeep+0xfc>)
 80068ce:	4b39      	ldr	r3, [pc, #228]	@ (80069b4 <Meas_Upkeep+0x100>)
 80068d0:	0019      	movs	r1, r3
 80068d2:	2003      	movs	r0, #3
 80068d4:	f002 ff70 	bl	80097b8 <CreateLine>
    break;
 80068d8:	e063      	b.n	80069a2 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80068da:	f7ff ff4b 	bl	8006774 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80068de:	4b32      	ldr	r3, [pc, #200]	@ (80069a8 <Meas_Upkeep+0xf4>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
    break;
 80068e4:	e05d      	b.n	80069a2 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80068e6:	f7ff fecf 	bl	8006688 <StartMeasurements>
    SetMeasurementIndicator();
 80068ea:	f002 f953 	bl	8008b94 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80068ee:	4b2e      	ldr	r3, [pc, #184]	@ (80069a8 <Meas_Upkeep+0xf4>)
 80068f0:	2202      	movs	r2, #2
 80068f2:	701a      	strb	r2, [r3, #0]
   break;
 80068f4:	e055      	b.n	80069a2 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80068f6:	f7ff ff59 	bl	80067ac <MeasurementsCompleted>
 80068fa:	1e03      	subs	r3, r0, #0
 80068fc:	d04e      	beq.n	800699c <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80068fe:	4b2a      	ldr	r3, [pc, #168]	@ (80069a8 <Meas_Upkeep+0xf4>)
 8006900:	2203      	movs	r2, #3
 8006902:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006904:	e04a      	b.n	800699c <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8006906:	4a2c      	ldr	r2, [pc, #176]	@ (80069b8 <Meas_Upkeep+0x104>)
 8006908:	4b2a      	ldr	r3, [pc, #168]	@ (80069b4 <Meas_Upkeep+0x100>)
 800690a:	0019      	movs	r1, r3
 800690c:	2003      	movs	r0, #3
 800690e:	f002 ff53 	bl	80097b8 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006912:	4b2a      	ldr	r3, [pc, #168]	@ (80069bc <Meas_Upkeep+0x108>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4a2a      	ldr	r2, [pc, #168]	@ (80069c0 <Meas_Upkeep+0x10c>)
 8006918:	4926      	ldr	r1, [pc, #152]	@ (80069b4 <Meas_Upkeep+0x100>)
 800691a:	2003      	movs	r0, #3
 800691c:	f002 ff4c 	bl	80097b8 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8006920:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <Meas_Upkeep+0x108>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	1c18      	adds	r0, r3, #0
 8006926:	f7fc fd1b 	bl	8003360 <__aeabi_f2d>
 800692a:	0004      	movs	r4, r0
 800692c:	000d      	movs	r5, r1
 800692e:	4b23      	ldr	r3, [pc, #140]	@ (80069bc <Meas_Upkeep+0x108>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	1c18      	adds	r0, r3, #0
 8006934:	f7fc fd14 	bl	8003360 <__aeabi_f2d>
 8006938:	0002      	movs	r2, r0
 800693a:	000b      	movs	r3, r1
 800693c:	4821      	ldr	r0, [pc, #132]	@ (80069c4 <Meas_Upkeep+0x110>)
 800693e:	491d      	ldr	r1, [pc, #116]	@ (80069b4 <Meas_Upkeep+0x100>)
 8006940:	9202      	str	r2, [sp, #8]
 8006942:	9303      	str	r3, [sp, #12]
 8006944:	9400      	str	r4, [sp, #0]
 8006946:	9501      	str	r5, [sp, #4]
 8006948:	0002      	movs	r2, r0
 800694a:	2003      	movs	r0, #3
 800694c:	f002 ff34 	bl	80097b8 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006950:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <Meas_Upkeep+0x108>)
 8006952:	6858      	ldr	r0, [r3, #4]
 8006954:	4b19      	ldr	r3, [pc, #100]	@ (80069bc <Meas_Upkeep+0x108>)
 8006956:	6819      	ldr	r1, [r3, #0]
 8006958:	4b18      	ldr	r3, [pc, #96]	@ (80069bc <Meas_Upkeep+0x108>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	b29b      	uxth	r3, r3
 800695e:	001a      	movs	r2, r3
 8006960:	f7fc feae 	bl	80036c0 <setMeasurement>
    ResetMeasurementIndicator();
 8006964:	f002 f928 	bl	8008bb8 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8006968:	f003 fac2 	bl	8009ef0 <HAL_GetTick>
 800696c:	0003      	movs	r3, r0
 800696e:	4a16      	ldr	r2, [pc, #88]	@ (80069c8 <Meas_Upkeep+0x114>)
 8006970:	189a      	adds	r2, r3, r2
 8006972:	4b16      	ldr	r3, [pc, #88]	@ (80069cc <Meas_Upkeep+0x118>)
 8006974:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006976:	4b0c      	ldr	r3, [pc, #48]	@ (80069a8 <Meas_Upkeep+0xf4>)
 8006978:	2206      	movs	r2, #6
 800697a:	701a      	strb	r2, [r3, #0]
    break;
 800697c:	e011      	b.n	80069a2 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 800697e:	4b13      	ldr	r3, [pc, #76]	@ (80069cc <Meas_Upkeep+0x118>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	0018      	movs	r0, r3
 8006984:	f002 fec2 	bl	800970c <TimestampIsReached>
 8006988:	1e03      	subs	r3, r0, #0
 800698a:	d009      	beq.n	80069a0 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 800698c:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <Meas_Upkeep+0xf4>)
 800698e:	2200      	movs	r2, #0
 8006990:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006992:	e005      	b.n	80069a0 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006994:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <Meas_Upkeep+0xf4>)
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]
    break;
 800699a:	e002      	b.n	80069a2 <Meas_Upkeep+0xee>
    break;
 800699c:	46c0      	nop			@ (mov r8, r8)
 800699e:	e000      	b.n	80069a2 <Meas_Upkeep+0xee>
    break;
 80069a0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bdb0      	pop	{r4, r5, r7, pc}
 80069a8:	20000f74 	.word	0x20000f74
 80069ac:	0801bc74 	.word	0x0801bc74
 80069b0:	0801b52c 	.word	0x0801b52c
 80069b4:	0801b4c4 	.word	0x0801b4c4
 80069b8:	0801b54c 	.word	0x0801b54c
 80069bc:	20000f2c 	.word	0x20000f2c
 80069c0:	0801b560 	.word	0x0801b560
 80069c4:	0801b578 	.word	0x0801b578
 80069c8:	00002710 	.word	0x00002710
 80069cc:	20000f78 	.word	0x20000f78

080069d0 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	1d3b      	adds	r3, r7, #4
 80069d8:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80069da:	240f      	movs	r4, #15
 80069dc:	193b      	adds	r3, r7, r4
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80069e2:	4b20      	ldr	r3, [pc, #128]	@ (8006a64 <Meas_SetEnabledSensors+0x94>)
 80069e4:	1d3a      	adds	r2, r7, #4
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80069ea:	193b      	adds	r3, r7, r4
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	193a      	adds	r2, r7, r4
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	7011      	strb	r1, [r2, #0]
 80069f4:	0018      	movs	r0, r3
 80069f6:	1d3b      	adds	r3, r7, #4
 80069f8:	7819      	ldrb	r1, [r3, #0]
 80069fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006a68 <Meas_SetEnabledSensors+0x98>)
 80069fc:	0103      	lsls	r3, r0, #4
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	330c      	adds	r3, #12
 8006a02:	1c0a      	adds	r2, r1, #0
 8006a04:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006a06:	193b      	adds	r3, r7, r4
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	193a      	adds	r2, r7, r4
 8006a0c:	1c59      	adds	r1, r3, #1
 8006a0e:	7011      	strb	r1, [r2, #0]
 8006a10:	0018      	movs	r0, r3
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	7859      	ldrb	r1, [r3, #1]
 8006a16:	4a14      	ldr	r2, [pc, #80]	@ (8006a68 <Meas_SetEnabledSensors+0x98>)
 8006a18:	0103      	lsls	r3, r0, #4
 8006a1a:	18d3      	adds	r3, r2, r3
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	1c0a      	adds	r2, r1, #0
 8006a20:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8006a22:	193b      	adds	r3, r7, r4
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	193a      	adds	r2, r7, r4
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	7011      	strb	r1, [r2, #0]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	1d3b      	adds	r3, r7, #4
 8006a30:	7899      	ldrb	r1, [r3, #2]
 8006a32:	4a0d      	ldr	r2, [pc, #52]	@ (8006a68 <Meas_SetEnabledSensors+0x98>)
 8006a34:	0103      	lsls	r3, r0, #4
 8006a36:	18d3      	adds	r3, r2, r3
 8006a38:	330c      	adds	r3, #12
 8006a3a:	1c0a      	adds	r2, r1, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006a3e:	193b      	adds	r3, r7, r4
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	193a      	adds	r2, r7, r4
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	7011      	strb	r1, [r2, #0]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	78d9      	ldrb	r1, [r3, #3]
 8006a4e:	4a06      	ldr	r2, [pc, #24]	@ (8006a68 <Meas_SetEnabledSensors+0x98>)
 8006a50:	0103      	lsls	r3, r0, #4
 8006a52:	18d3      	adds	r3, r2, r3
 8006a54:	330c      	adds	r3, #12
 8006a56:	1c0a      	adds	r2, r1, #0
 8006a58:	701a      	strb	r2, [r3, #0]
}
 8006a5a:	46c0      	nop			@ (mov r8, r8)
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b005      	add	sp, #20
 8006a60:	bd90      	pop	{r4, r7, pc}
 8006a62:	46c0      	nop			@ (mov r8, r8)
 8006a64:	20000f6c 	.word	0x20000f6c
 8006a68:	20000f3c 	.word	0x20000f3c

08006a6c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006a70:	4b02      	ldr	r3, [pc, #8]	@ (8006a7c <SetESPMeasurementDone+0x10>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	70da      	strb	r2, [r3, #3]
}
 8006a76:	46c0      	nop			@ (mov r8, r8)
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000f70 	.word	0x20000f70

08006a80 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	4b03      	ldr	r3, [pc, #12]	@ (8006a98 <MIC_Init+0x18>)
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	b002      	add	sp, #8
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	20000f80 	.word	0x20000f80

08006a9c <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <UpdateSampleRate+0x3c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d00e      	beq.n	8006ace <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006ab0:	4b09      	ldr	r3, [pc, #36]	@ (8006ad8 <UpdateSampleRate+0x3c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f006 fed9 	bl	800d86c <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006aba:	4b07      	ldr	r3, [pc, #28]	@ (8006ad8 <UpdateSampleRate+0x3c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006ac2:	4b05      	ldr	r3, [pc, #20]	@ (8006ad8 <UpdateSampleRate+0x3c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f006 fdde 	bl	800d688 <HAL_I2S_Init>
 8006acc:	e000      	b.n	8006ad0 <UpdateSampleRate+0x34>
    return;
 8006ace:	46c0      	nop			@ (mov r8, r8)
}
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b002      	add	sp, #8
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	20000f80 	.word	0x20000f80

08006adc <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006ae4:	4b18      	ldr	r3, [pc, #96]	@ (8006b48 <ConvertAudio+0x6c>)
 8006ae6:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	5e9b      	ldrsh	r3, [r3, r2]
 8006af6:	025b      	lsls	r3, r3, #9
 8006af8:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3302      	adds	r3, #2
 8006afe:	2200      	movs	r2, #0
 8006b00:	5e9b      	ldrsh	r3, [r3, r2]
 8006b02:	11db      	asrs	r3, r3, #7
 8006b04:	05db      	lsls	r3, r3, #23
 8006b06:	0ddb      	lsrs	r3, r3, #23
 8006b08:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	2380      	movs	r3, #128	@ 0x80
 8006b16:	041b      	lsls	r3, r3, #16
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d004      	beq.n	8006b26 <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	22ff      	movs	r2, #255	@ 0xff
 8006b20:	0612      	lsls	r2, r2, #24
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7fa fcce 	bl	80014cc <__aeabi_i2f>
 8006b30:	1c03      	adds	r3, r0, #0
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	1c18      	adds	r0, r3, #0
 8006b36:	f7f9 ffcb 	bl	8000ad0 <__aeabi_fdiv>
 8006b3a:	1c03      	adds	r3, r0, #0
 8006b3c:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006b3e:	697b      	ldr	r3, [r7, #20]
}
 8006b40:	1c18      	adds	r0, r3, #0
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b008      	add	sp, #32
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	4afffffe 	.word	0x4afffffe

08006b4c <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006b4c:	b5b0      	push	{r4, r5, r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	000a      	movs	r2, r1
 8006b56:	1cbb      	adds	r3, r7, #2
 8006b58:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd8 <MIC_Start+0x8c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006b62:	4a1e      	ldr	r2, [pc, #120]	@ (8006bdc <MIC_Start+0x90>)
 8006b64:	4b1e      	ldr	r3, [pc, #120]	@ (8006be0 <MIC_Start+0x94>)
 8006b66:	0019      	movs	r1, r3
 8006b68:	2001      	movs	r0, #1
 8006b6a:	f002 fe25 	bl	80097b8 <CreateLine>
    return;
 8006b6e:	e02f      	b.n	8006bd0 <MIC_Start+0x84>
  }
  SetMICIndicator();
 8006b70:	f002 f832 	bl	8008bd8 <SetMICIndicator>
  Debug("In mic start");
 8006b74:	4a1b      	ldr	r2, [pc, #108]	@ (8006be4 <MIC_Start+0x98>)
 8006b76:	4b1c      	ldr	r3, [pc, #112]	@ (8006be8 <MIC_Start+0x9c>)
 8006b78:	0019      	movs	r1, r3
 8006b7a:	2003      	movs	r0, #3
 8006b7c:	f002 fe1c 	bl	80097b8 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7ff ff8a 	bl	8006a9c <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006b88:	4b18      	ldr	r3, [pc, #96]	@ (8006bec <MIC_Start+0xa0>)
 8006b8a:	1cba      	adds	r2, r7, #2
 8006b8c:	8812      	ldrh	r2, [r2, #0]
 8006b8e:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006b90:	f003 f9ae 	bl	8009ef0 <HAL_GetTick>
 8006b94:	0003      	movs	r3, r0
 8006b96:	3314      	adds	r3, #20
 8006b98:	001a      	movs	r2, r3
 8006b9a:	4b15      	ldr	r3, [pc, #84]	@ (8006bf0 <MIC_Start+0xa4>)
 8006b9c:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006b9e:	4b15      	ldr	r3, [pc, #84]	@ (8006bf4 <MIC_Start+0xa8>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006ba4:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <MIC_Start+0xac>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006baa:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <MIC_Start+0x8c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	250f      	movs	r5, #15
 8006bb0:	197c      	adds	r4, r7, r5
 8006bb2:	2280      	movs	r2, #128	@ 0x80
 8006bb4:	00d2      	lsls	r2, r2, #3
 8006bb6:	4911      	ldr	r1, [pc, #68]	@ (8006bfc <MIC_Start+0xb0>)
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f006 fe83 	bl	800d8c4 <HAL_I2S_Receive_DMA>
 8006bbe:	0003      	movs	r3, r0
 8006bc0:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006bc2:	197b      	adds	r3, r7, r5
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8006c00 <MIC_Start+0xb4>)
 8006bc8:	490e      	ldr	r1, [pc, #56]	@ (8006c04 <MIC_Start+0xb8>)
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f002 fdf4 	bl	80097b8 <CreateLine>
}
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b004      	add	sp, #16
 8006bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd6:	46c0      	nop			@ (mov r8, r8)
 8006bd8:	20000f80 	.word	0x20000f80
 8006bdc:	0801b5ac 	.word	0x0801b5ac
 8006be0:	0801b5cc 	.word	0x0801b5cc
 8006be4:	0801b5d0 	.word	0x0801b5d0
 8006be8:	0801b5e0 	.word	0x0801b5e0
 8006bec:	20000028 	.word	0x20000028
 8006bf0:	20001f84 	.word	0x20001f84
 8006bf4:	20001f88 	.word	0x20001f88
 8006bf8:	20001f89 	.word	0x20001f89
 8006bfc:	20000f84 	.word	0x20000f84
 8006c00:	0801b5e4 	.word	0x0801b5e4
 8006c04:	0801b5f0 	.word	0x0801b5f0

08006c08 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	0002      	movs	r2, r0
 8006c10:	1dbb      	adds	r3, r7, #6
 8006c12:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006c14:	23fe      	movs	r3, #254	@ 0xfe
 8006c16:	059b      	lsls	r3, r3, #22
 8006c18:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006c1a:	230a      	movs	r3, #10
 8006c1c:	18fb      	adds	r3, r7, r3
 8006c1e:	2200      	movs	r2, #0
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	e01c      	b.n	8006c5e <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006c24:	240a      	movs	r4, #10
 8006c26:	193b      	adds	r3, r7, r4
 8006c28:	2200      	movs	r2, #0
 8006c2a:	5e9a      	ldrsh	r2, [r3, r2]
 8006c2c:	4b12      	ldr	r3, [pc, #72]	@ (8006c78 <MinimalValue+0x70>)
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	58d3      	ldr	r3, [r2, r3]
 8006c32:	1c19      	adds	r1, r3, #0
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7f9 fc5d 	bl	80004f4 <__aeabi_fcmpgt>
 8006c3a:	1e03      	subs	r3, r0, #0
 8006c3c:	d006      	beq.n	8006c4c <MinimalValue+0x44>
      MinVal = sample[i];
 8006c3e:	193b      	adds	r3, r7, r4
 8006c40:	2200      	movs	r2, #0
 8006c42:	5e9a      	ldrsh	r2, [r3, r2]
 8006c44:	4b0c      	ldr	r3, [pc, #48]	@ (8006c78 <MinimalValue+0x70>)
 8006c46:	0092      	lsls	r2, r2, #2
 8006c48:	58d3      	ldr	r3, [r2, r3]
 8006c4a:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006c4c:	210a      	movs	r1, #10
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	2200      	movs	r2, #0
 8006c52:	5e9b      	ldrsh	r3, [r3, r2]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3301      	adds	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	187b      	adds	r3, r7, r1
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	230a      	movs	r3, #10
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	2200      	movs	r2, #0
 8006c64:	5e9a      	ldrsh	r2, [r3, r2]
 8006c66:	1dbb      	adds	r3, r7, #6
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	dbda      	blt.n	8006c24 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	1c18      	adds	r0, r3, #0
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b005      	add	sp, #20
 8006c76:	bd90      	pop	{r4, r7, pc}
 8006c78:	20001fc0 	.word	0x20001fc0

08006c7c <MaximalValue>:

float MaximalValue(uint16_t length){
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	0002      	movs	r2, r0
 8006c84:	1dbb      	adds	r3, r7, #6
 8006c86:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006c88:	4b18      	ldr	r3, [pc, #96]	@ (8006cec <MaximalValue+0x70>)
 8006c8a:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006c8c:	230a      	movs	r3, #10
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	2200      	movs	r2, #0
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	e01c      	b.n	8006cd0 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006c96:	240a      	movs	r4, #10
 8006c98:	193b      	adds	r3, r7, r4
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	5e9a      	ldrsh	r2, [r3, r2]
 8006c9e:	4b14      	ldr	r3, [pc, #80]	@ (8006cf0 <MaximalValue+0x74>)
 8006ca0:	0092      	lsls	r2, r2, #2
 8006ca2:	58d3      	ldr	r3, [r2, r3]
 8006ca4:	1c19      	adds	r1, r3, #0
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f7f9 fc10 	bl	80004cc <__aeabi_fcmplt>
 8006cac:	1e03      	subs	r3, r0, #0
 8006cae:	d006      	beq.n	8006cbe <MaximalValue+0x42>
      MaxVal = sample[i];
 8006cb0:	193b      	adds	r3, r7, r4
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	5e9a      	ldrsh	r2, [r3, r2]
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <MaximalValue+0x74>)
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	58d3      	ldr	r3, [r2, r3]
 8006cbc:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006cbe:	210a      	movs	r1, #10
 8006cc0:	187b      	adds	r3, r7, r1
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	5e9b      	ldrsh	r3, [r3, r2]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3301      	adds	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	187b      	adds	r3, r7, r1
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	230a      	movs	r3, #10
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	5e9a      	ldrsh	r2, [r3, r2]
 8006cd8:	1dbb      	adds	r3, r7, #6
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	dbda      	blt.n	8006c96 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
}
 8006ce2:	1c18      	adds	r0, r3, #0
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b005      	add	sp, #20
 8006ce8:	bd90      	pop	{r4, r7, pc}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	bf800000 	.word	0xbf800000
 8006cf0:	20001fc0 	.word	0x20001fc0

08006cf4 <MIC_Check>:
bool MIC_Check(void) {
 8006cf4:	b5b0      	push	{r4, r5, r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006cfa:	4a25      	ldr	r2, [pc, #148]	@ (8006d90 <MIC_Check+0x9c>)
 8006cfc:	4b25      	ldr	r3, [pc, #148]	@ (8006d94 <MIC_Check+0xa0>)
 8006cfe:	0019      	movs	r1, r3
 8006d00:	2002      	movs	r0, #2
 8006d02:	f002 fd59 	bl	80097b8 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d06:	230e      	movs	r3, #14
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e016      	b.n	8006d3e <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006d10:	210e      	movs	r1, #14
 8006d12:	187b      	adds	r3, r7, r1
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	3302      	adds	r3, #2
 8006d1a:	005a      	lsls	r2, r3, #1
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006d98 <MIC_Check+0xa4>)
 8006d1e:	18d2      	adds	r2, r2, r3
 8006d20:	000d      	movs	r5, r1
 8006d22:	187b      	adds	r3, r7, r1
 8006d24:	881c      	ldrh	r4, [r3, #0]
 8006d26:	0010      	movs	r0, r2
 8006d28:	f7ff fed8 	bl	8006adc <ConvertAudio>
 8006d2c:	1c01      	adds	r1, r0, #0
 8006d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d9c <MIC_Check+0xa8>)
 8006d30:	00a2      	lsls	r2, r4, #2
 8006d32:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d34:	197b      	adds	r3, r7, r5
 8006d36:	197a      	adds	r2, r7, r5
 8006d38:	8812      	ldrh	r2, [r2, #0]
 8006d3a:	3201      	adds	r2, #1
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	230e      	movs	r3, #14
 8006d40:	18fb      	adds	r3, r7, r3
 8006d42:	881a      	ldrh	r2, [r3, #0]
 8006d44:	2380      	movs	r3, #128	@ 0x80
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d3e1      	bcc.n	8006d10 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006d4c:	2380      	movs	r3, #128	@ 0x80
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7ff ff93 	bl	8006c7c <MaximalValue>
 8006d56:	1c03      	adds	r3, r0, #0
 8006d58:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006d5a:	2380      	movs	r3, #128	@ 0x80
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7ff ff52 	bl	8006c08 <MinimalValue>
 8006d64:	1c03      	adds	r3, r0, #0
 8006d66:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006d68:	2100      	movs	r1, #0
 8006d6a:	68b8      	ldr	r0, [r7, #8]
 8006d6c:	f7f9 fbc2 	bl	80004f4 <__aeabi_fcmpgt>
 8006d70:	1e03      	subs	r3, r0, #0
 8006d72:	d105      	bne.n	8006d80 <MIC_Check+0x8c>
 8006d74:	2100      	movs	r1, #0
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7f9 fba8 	bl	80004cc <__aeabi_fcmplt>
 8006d7c:	1e03      	subs	r3, r0, #0
 8006d7e:	d001      	beq.n	8006d84 <MIC_Check+0x90>
    return(true);
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <MIC_Check+0x92>
  }
  return(false);
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	0018      	movs	r0, r3
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	b004      	add	sp, #16
 8006d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8e:	46c0      	nop			@ (mov r8, r8)
 8006d90:	0801b5f4 	.word	0x0801b5f4
 8006d94:	0801b5f0 	.word	0x0801b5f0
 8006d98:	20000f84 	.word	0x20000f84
 8006d9c:	20001fc0 	.word	0x20001fc0

08006da0 <MIC_Print>:
void MIC_Print(void) {
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
  Info("New samples");
 8006da6:	4a8a      	ldr	r2, [pc, #552]	@ (8006fd0 <MIC_Print+0x230>)
 8006da8:	4b8a      	ldr	r3, [pc, #552]	@ (8006fd4 <MIC_Print+0x234>)
 8006daa:	0019      	movs	r1, r3
 8006dac:	2002      	movs	r0, #2
 8006dae:	f002 fd03 	bl	80097b8 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006db2:	1dbb      	adds	r3, r7, #6
 8006db4:	2200      	movs	r2, #0
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	e014      	b.n	8006de4 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006dba:	1dbb      	adds	r3, r7, #6
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	005a      	lsls	r2, r3, #1
 8006dc4:	4b84      	ldr	r3, [pc, #528]	@ (8006fd8 <MIC_Print+0x238>)
 8006dc6:	18d2      	adds	r2, r2, r3
 8006dc8:	1dbb      	adds	r3, r7, #6
 8006dca:	881c      	ldrh	r4, [r3, #0]
 8006dcc:	0010      	movs	r0, r2
 8006dce:	f7ff fe85 	bl	8006adc <ConvertAudio>
 8006dd2:	1c01      	adds	r1, r0, #0
 8006dd4:	4b81      	ldr	r3, [pc, #516]	@ (8006fdc <MIC_Print+0x23c>)
 8006dd6:	00a2      	lsls	r2, r4, #2
 8006dd8:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006dda:	1dbb      	adds	r3, r7, #6
 8006ddc:	1dba      	adds	r2, r7, #6
 8006dde:	8812      	ldrh	r2, [r2, #0]
 8006de0:	3201      	adds	r2, #1
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	1dbb      	adds	r3, r7, #6
 8006de6:	881a      	ldrh	r2, [r3, #0]
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d3e4      	bcc.n	8006dba <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8006df0:	f000 f976 	bl	80070e0 <MIC_GetDB>
 8006df4:	1c02      	adds	r2, r0, #0
 8006df6:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe0 <MIC_Print+0x240>)
 8006df8:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 8006dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8006fe4 <MIC_Print+0x244>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d80e      	bhi.n	8006e20 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 8006e02:	4b78      	ldr	r3, [pc, #480]	@ (8006fe4 <MIC_Print+0x244>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	001a      	movs	r2, r3
 8006e08:	4b75      	ldr	r3, [pc, #468]	@ (8006fe0 <MIC_Print+0x240>)
 8006e0a:	6819      	ldr	r1, [r3, #0]
 8006e0c:	4b76      	ldr	r3, [pc, #472]	@ (8006fe8 <MIC_Print+0x248>)
 8006e0e:	0092      	lsls	r2, r2, #2
 8006e10:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006e12:	4b74      	ldr	r3, [pc, #464]	@ (8006fe4 <MIC_Print+0x244>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	3301      	adds	r3, #1
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	4b72      	ldr	r3, [pc, #456]	@ (8006fe4 <MIC_Print+0x244>)
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e013      	b.n	8006e48 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8006e20:	4b70      	ldr	r3, [pc, #448]	@ (8006fe4 <MIC_Print+0x244>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006e26:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe4 <MIC_Print+0x244>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe0 <MIC_Print+0x240>)
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	4b6d      	ldr	r3, [pc, #436]	@ (8006fe8 <MIC_Print+0x248>)
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006e36:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe4 <MIC_Print+0x244>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	4b69      	ldr	r3, [pc, #420]	@ (8006fe4 <MIC_Print+0x244>)
 8006e40:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8006e42:	4b6a      	ldr	r3, [pc, #424]	@ (8006fec <MIC_Print+0x24c>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006e48:	4b68      	ldr	r3, [pc, #416]	@ (8006fec <MIC_Print+0x24c>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	4053      	eors	r3, r2
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <MIC_Print+0xc2>
    setMic(dBc);
 8006e56:	4b62      	ldr	r3, [pc, #392]	@ (8006fe0 <MIC_Print+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1c18      	adds	r0, r3, #0
 8006e5c:	f7fc fc4c 	bl	80036f8 <setMic>
 8006e60:	e02d      	b.n	8006ebe <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 8006e62:	4b63      	ldr	r3, [pc, #396]	@ (8006ff0 <MIC_Print+0x250>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e68:	1d7b      	adds	r3, r7, #5
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e013      	b.n	8006e98 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 8006e70:	1d7b      	adds	r3, r7, #5
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	4b5c      	ldr	r3, [pc, #368]	@ (8006fe8 <MIC_Print+0x248>)
 8006e76:	0092      	lsls	r2, r2, #2
 8006e78:	58d2      	ldr	r2, [r2, r3]
 8006e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ff0 <MIC_Print+0x250>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	1c19      	adds	r1, r3, #0
 8006e80:	1c10      	adds	r0, r2, #0
 8006e82:	f7f9 fc9b 	bl	80007bc <__aeabi_fadd>
 8006e86:	1c03      	adds	r3, r0, #0
 8006e88:	1c1a      	adds	r2, r3, #0
 8006e8a:	4b59      	ldr	r3, [pc, #356]	@ (8006ff0 <MIC_Print+0x250>)
 8006e8c:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e8e:	1d7b      	adds	r3, r7, #5
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	1d7b      	adds	r3, r7, #5
 8006e94:	3201      	adds	r2, #1
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	1d7b      	adds	r3, r7, #5
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b09      	cmp	r3, #9
 8006e9e:	d9e7      	bls.n	8006e70 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8006ea0:	4b53      	ldr	r3, [pc, #332]	@ (8006ff0 <MIC_Print+0x250>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4953      	ldr	r1, [pc, #332]	@ (8006ff4 <MIC_Print+0x254>)
 8006ea6:	1c18      	adds	r0, r3, #0
 8006ea8:	f7f9 fe12 	bl	8000ad0 <__aeabi_fdiv>
 8006eac:	1c03      	adds	r3, r0, #0
 8006eae:	1c1a      	adds	r2, r3, #0
 8006eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8006ff0 <MIC_Print+0x250>)
 8006eb2:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8006eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8006ff0 <MIC_Print+0x250>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	1c18      	adds	r0, r3, #0
 8006eba:	f7fc fc1d 	bl	80036f8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8006ebe:	4b48      	ldr	r3, [pc, #288]	@ (8006fe0 <MIC_Print+0x240>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	494d      	ldr	r1, [pc, #308]	@ (8006ff8 <MIC_Print+0x258>)
 8006ec4:	1c18      	adds	r0, r3, #0
 8006ec6:	f7f9 fb15 	bl	80004f4 <__aeabi_fcmpgt>
 8006eca:	1e03      	subs	r3, r0, #0
 8006ecc:	d004      	beq.n	8006ed8 <MIC_Print+0x138>
    SetDBLED(true, true, true);
 8006ece:	2201      	movs	r2, #1
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	f001 fdec 	bl	8008ab0 <SetDBLED>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8006ed8:	4b41      	ldr	r3, [pc, #260]	@ (8006fe0 <MIC_Print+0x240>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4946      	ldr	r1, [pc, #280]	@ (8006ff8 <MIC_Print+0x258>)
 8006ede:	1c18      	adds	r0, r3, #0
 8006ee0:	f7f9 faf4 	bl	80004cc <__aeabi_fcmplt>
 8006ee4:	1e03      	subs	r3, r0, #0
 8006ee6:	d00c      	beq.n	8006f02 <MIC_Print+0x162>
 8006ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe0 <MIC_Print+0x240>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4943      	ldr	r1, [pc, #268]	@ (8006ffc <MIC_Print+0x25c>)
 8006eee:	1c18      	adds	r0, r3, #0
 8006ef0:	f7f9 fb0a 	bl	8000508 <__aeabi_fcmpge>
 8006ef4:	1e03      	subs	r3, r0, #0
 8006ef6:	d004      	beq.n	8006f02 <MIC_Print+0x162>
    SetDBLED(true, false, false);
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2100      	movs	r1, #0
 8006efc:	2001      	movs	r0, #1
 8006efe:	f001 fdd7 	bl	8008ab0 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8006f02:	4b37      	ldr	r3, [pc, #220]	@ (8006fe0 <MIC_Print+0x240>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	493d      	ldr	r1, [pc, #244]	@ (8006ffc <MIC_Print+0x25c>)
 8006f08:	1c18      	adds	r0, r3, #0
 8006f0a:	f7f9 fadf 	bl	80004cc <__aeabi_fcmplt>
 8006f0e:	1e03      	subs	r3, r0, #0
 8006f10:	d00c      	beq.n	8006f2c <MIC_Print+0x18c>
 8006f12:	4b33      	ldr	r3, [pc, #204]	@ (8006fe0 <MIC_Print+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	493a      	ldr	r1, [pc, #232]	@ (8007000 <MIC_Print+0x260>)
 8006f18:	1c18      	adds	r0, r3, #0
 8006f1a:	f7f9 faf5 	bl	8000508 <__aeabi_fcmpge>
 8006f1e:	1e03      	subs	r3, r0, #0
 8006f20:	d004      	beq.n	8006f2c <MIC_Print+0x18c>
    SetDBLED(true, false, true);
 8006f22:	2201      	movs	r2, #1
 8006f24:	2100      	movs	r1, #0
 8006f26:	2001      	movs	r0, #1
 8006f28:	f001 fdc2 	bl	8008ab0 <SetDBLED>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8006f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe0 <MIC_Print+0x240>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4933      	ldr	r1, [pc, #204]	@ (8007000 <MIC_Print+0x260>)
 8006f32:	1c18      	adds	r0, r3, #0
 8006f34:	f7f9 faca 	bl	80004cc <__aeabi_fcmplt>
 8006f38:	1e03      	subs	r3, r0, #0
 8006f3a:	d00c      	beq.n	8006f56 <MIC_Print+0x1b6>
 8006f3c:	4b28      	ldr	r3, [pc, #160]	@ (8006fe0 <MIC_Print+0x240>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4930      	ldr	r1, [pc, #192]	@ (8007004 <MIC_Print+0x264>)
 8006f42:	1c18      	adds	r0, r3, #0
 8006f44:	f7f9 fae0 	bl	8000508 <__aeabi_fcmpge>
 8006f48:	1e03      	subs	r3, r0, #0
 8006f4a:	d004      	beq.n	8006f56 <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2101      	movs	r1, #1
 8006f50:	2001      	movs	r0, #1
 8006f52:	f001 fdad 	bl	8008ab0 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8006f56:	4b22      	ldr	r3, [pc, #136]	@ (8006fe0 <MIC_Print+0x240>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	492a      	ldr	r1, [pc, #168]	@ (8007004 <MIC_Print+0x264>)
 8006f5c:	1c18      	adds	r0, r3, #0
 8006f5e:	f7f9 fab5 	bl	80004cc <__aeabi_fcmplt>
 8006f62:	1e03      	subs	r3, r0, #0
 8006f64:	d00c      	beq.n	8006f80 <MIC_Print+0x1e0>
 8006f66:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe0 <MIC_Print+0x240>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4927      	ldr	r1, [pc, #156]	@ (8007008 <MIC_Print+0x268>)
 8006f6c:	1c18      	adds	r0, r3, #0
 8006f6e:	f7f9 facb 	bl	8000508 <__aeabi_fcmpge>
 8006f72:	1e03      	subs	r3, r0, #0
 8006f74:	d004      	beq.n	8006f80 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 8006f76:	2200      	movs	r2, #0
 8006f78:	2101      	movs	r1, #1
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f001 fd98 	bl	8008ab0 <SetDBLED>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8006f80:	4b17      	ldr	r3, [pc, #92]	@ (8006fe0 <MIC_Print+0x240>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4920      	ldr	r1, [pc, #128]	@ (8007008 <MIC_Print+0x268>)
 8006f86:	1c18      	adds	r0, r3, #0
 8006f88:	f7f9 faa0 	bl	80004cc <__aeabi_fcmplt>
 8006f8c:	1e03      	subs	r3, r0, #0
 8006f8e:	d00c      	beq.n	8006faa <MIC_Print+0x20a>
 8006f90:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <MIC_Print+0x240>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	491d      	ldr	r1, [pc, #116]	@ (800700c <MIC_Print+0x26c>)
 8006f96:	1c18      	adds	r0, r3, #0
 8006f98:	f7f9 fab6 	bl	8000508 <__aeabi_fcmpge>
 8006f9c:	1e03      	subs	r3, r0, #0
 8006f9e:	d004      	beq.n	8006faa <MIC_Print+0x20a>
    SetDBLED(false, false, true);
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f001 fd83 	bl	8008ab0 <SetDBLED>
  }
  if(dBc < 60){//light blue
 8006faa:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <MIC_Print+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4917      	ldr	r1, [pc, #92]	@ (800700c <MIC_Print+0x26c>)
 8006fb0:	1c18      	adds	r0, r3, #0
 8006fb2:	f7f9 fa8b 	bl	80004cc <__aeabi_fcmplt>
 8006fb6:	1e03      	subs	r3, r0, #0
 8006fb8:	d100      	bne.n	8006fbc <MIC_Print+0x21c>
    SetDBLED(false, true, true);
  }


  //FFT();
}
 8006fba:	e004      	b.n	8006fc6 <MIC_Print+0x226>
    SetDBLED(false, true, true);
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f001 fd75 	bl	8008ab0 <SetDBLED>
}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b003      	add	sp, #12
 8006fcc:	bd90      	pop	{r4, r7, pc}
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	0801b5f4 	.word	0x0801b5f4
 8006fd4:	0801b5f0 	.word	0x0801b5f0
 8006fd8:	20000f84 	.word	0x20000f84
 8006fdc:	20001fc0 	.word	0x20001fc0
 8006fe0:	20001f8c 	.word	0x20001f8c
 8006fe4:	20001fbc 	.word	0x20001fbc
 8006fe8:	20001f90 	.word	0x20001f90
 8006fec:	20001fbd 	.word	0x20001fbd
 8006ff0:	20001fb8 	.word	0x20001fb8
 8006ff4:	41200000 	.word	0x41200000
 8006ff8:	42aa0000 	.word	0x42aa0000
 8006ffc:	42a00000 	.word	0x42a00000
 8007000:	42960000 	.word	0x42960000
 8007004:	428c0000 	.word	0x428c0000
 8007008:	42820000 	.word	0x42820000
 800700c:	42700000 	.word	0x42700000

08007010 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  if(DataReady) {
 8007014:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <MIC_MeasurementDone+0x30>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <MIC_MeasurementDone+0x28>
    MIC_Print();
 800701e:	f7ff febf 	bl	8006da0 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8007022:	4b08      	ldr	r3, [pc, #32]	@ (8007044 <MIC_MeasurementDone+0x34>)
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <MIC_MeasurementDone+0x38>)
 8007028:	4908      	ldr	r1, [pc, #32]	@ (800704c <MIC_MeasurementDone+0x3c>)
 800702a:	2003      	movs	r0, #3
 800702c:	f002 fbc4 	bl	80097b8 <CreateLine>
    ResetMICIndicator();
 8007030:	f001 fde4 	bl	8008bfc <ResetMICIndicator>
    return true;
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <MIC_MeasurementDone+0x2a>
  }
  return false;
 8007038:	2300      	movs	r3, #0
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20001f89 	.word	0x20001f89
 8007044:	20000028 	.word	0x20000028
 8007048:	0801b600 	.word	0x0801b600
 800704c:	0801b5e0 	.word	0x0801b5e0

08007050 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 8007056:	4b0a      	ldr	r3, [pc, #40]	@ (8007080 <MIC_TestMeasurementDone+0x30>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <MIC_TestMeasurementDone+0x24>
    Check = MIC_Check();
 8007060:	1dfc      	adds	r4, r7, #7
 8007062:	f7ff fe47 	bl	8006cf4 <MIC_Check>
 8007066:	0003      	movs	r3, r0
 8007068:	7023      	strb	r3, [r4, #0]
    ResetMICIndicator();
 800706a:	f001 fdc7 	bl	8008bfc <ResetMICIndicator>
    return Check;
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	e000      	b.n	8007076 <MIC_TestMeasurementDone+0x26>
  }
  return false;
 8007074:	2300      	movs	r3, #0
}
 8007076:	0018      	movs	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	b003      	add	sp, #12
 800707c:	bd90      	pop	{r4, r7, pc}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	20001f89 	.word	0x20001f89

08007084 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 800708c:	4b10      	ldr	r3, [pc, #64]	@ (80070d0 <HAL_I2S_RxCpltCallback+0x4c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d118      	bne.n	80070c8 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8007096:	4b0f      	ldr	r3, [pc, #60]	@ (80070d4 <HAL_I2S_RxCpltCallback+0x50>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 80070a0:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <HAL_I2S_RxCpltCallback+0x4c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	0018      	movs	r0, r3
 80070a6:	f006 fccf 	bl	800da48 <HAL_I2S_DMAStop>
    DataReady = true;
 80070aa:	4b0b      	ldr	r3, [pc, #44]	@ (80070d8 <HAL_I2S_RxCpltCallback+0x54>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	e00b      	b.n	80070ca <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 80070b2:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <HAL_I2S_RxCpltCallback+0x58>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	0018      	movs	r0, r3
 80070b8:	f002 fb28 	bl	800970c <TimestampIsReached>
 80070bc:	1e03      	subs	r3, r0, #0
 80070be:	d004      	beq.n	80070ca <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 80070c0:	4b04      	ldr	r3, [pc, #16]	@ (80070d4 <HAL_I2S_RxCpltCallback+0x50>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	e000      	b.n	80070ca <HAL_I2S_RxCpltCallback+0x46>
    return;
 80070c8:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b002      	add	sp, #8
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000f80 	.word	0x20000f80
 80070d4:	20001f88 	.word	0x20001f88
 80070d8:	20001f89 	.word	0x20001f89
 80070dc:	20001f84 	.word	0x20001f84

080070e0 <MIC_GetDB>:

float MIC_GetDB(void) {
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 80070ea:	2300      	movs	r3, #0
 80070ec:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80070ee:	230a      	movs	r3, #10
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	2280      	movs	r2, #128	@ 0x80
 80070f4:	0052      	lsls	r2, r2, #1
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e019      	b.n	800712e <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 80070fa:	240a      	movs	r4, #10
 80070fc:	193b      	adds	r3, r7, r4
 80070fe:	881a      	ldrh	r2, [r3, #0]
 8007100:	4b2b      	ldr	r3, [pc, #172]	@ (80071b0 <MIC_GetDB+0xd0>)
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	58d0      	ldr	r0, [r2, r3]
 8007106:	193b      	adds	r3, r7, r4
 8007108:	881a      	ldrh	r2, [r3, #0]
 800710a:	4b29      	ldr	r3, [pc, #164]	@ (80071b0 <MIC_GetDB+0xd0>)
 800710c:	0092      	lsls	r2, r2, #2
 800710e:	58d3      	ldr	r3, [r2, r3]
 8007110:	1c19      	adds	r1, r3, #0
 8007112:	f7f9 fec3 	bl	8000e9c <__aeabi_fmul>
 8007116:	1c03      	adds	r3, r0, #0
 8007118:	1c19      	adds	r1, r3, #0
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7f9 fb4e 	bl	80007bc <__aeabi_fadd>
 8007120:	1c03      	adds	r3, r0, #0
 8007122:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8007124:	193b      	adds	r3, r7, r4
 8007126:	881a      	ldrh	r2, [r3, #0]
 8007128:	193b      	adds	r3, r7, r4
 800712a:	3201      	adds	r2, #1
 800712c:	801a      	strh	r2, [r3, #0]
 800712e:	230a      	movs	r3, #10
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	881a      	ldrh	r2, [r3, #0]
 8007134:	2380      	movs	r3, #128	@ 0x80
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	429a      	cmp	r2, r3
 800713a:	d3de      	bcc.n	80070fa <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 800713c:	2187      	movs	r1, #135	@ 0x87
 800713e:	05c9      	lsls	r1, r1, #23
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7f9 fcc5 	bl	8000ad0 <__aeabi_fdiv>
 8007146:	1c03      	adds	r3, r0, #0
 8007148:	1c18      	adds	r0, r3, #0
 800714a:	f7fc f909 	bl	8003360 <__aeabi_f2d>
 800714e:	0002      	movs	r2, r0
 8007150:	000b      	movs	r3, r1
 8007152:	0010      	movs	r0, r2
 8007154:	0019      	movs	r1, r3
 8007156:	f013 f9e7 	bl	801a528 <sqrt>
 800715a:	0002      	movs	r2, r0
 800715c:	000b      	movs	r3, r1
 800715e:	0010      	movs	r0, r2
 8007160:	0019      	movs	r1, r3
 8007162:	f7fc f945 	bl	80033f0 <__aeabi_d2f>
 8007166:	1c03      	adds	r3, r0, #0
 8007168:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 800716a:	6838      	ldr	r0, [r7, #0]
 800716c:	f7fc f8f8 	bl	8003360 <__aeabi_f2d>
 8007170:	0002      	movs	r2, r0
 8007172:	000b      	movs	r3, r1
 8007174:	0010      	movs	r0, r2
 8007176:	0019      	movs	r1, r3
 8007178:	f013 f9a0 	bl	801a4bc <log10>
 800717c:	2200      	movs	r2, #0
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <MIC_GetDB+0xd4>)
 8007180:	f7fb f9da 	bl	8002538 <__aeabi_dmul>
 8007184:	0002      	movs	r2, r0
 8007186:	000b      	movs	r3, r1
 8007188:	0010      	movs	r0, r2
 800718a:	0019      	movs	r1, r3
 800718c:	2200      	movs	r2, #0
 800718e:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <MIC_GetDB+0xd8>)
 8007190:	f7fa fa2a 	bl	80015e8 <__aeabi_dadd>
 8007194:	0002      	movs	r2, r0
 8007196:	000b      	movs	r3, r1
 8007198:	0010      	movs	r0, r2
 800719a:	0019      	movs	r1, r3
 800719c:	f7fc f928 	bl	80033f0 <__aeabi_d2f>
 80071a0:	1c03      	adds	r3, r0, #0
 80071a2:	607b      	str	r3, [r7, #4]

    return dBValue;
 80071a4:	687b      	ldr	r3, [r7, #4]
}
 80071a6:	1c18      	adds	r0, r3, #0
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b005      	add	sp, #20
 80071ac:	bd90      	pop	{r4, r7, pc}
 80071ae:	46c0      	nop			@ (mov r8, r8)
 80071b0:	20001fc0 	.word	0x20001fc0
 80071b4:	40340000 	.word	0x40340000
 80071b8:	405e0000 	.word	0x405e0000

080071bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80071c0:	4b16      	ldr	r3, [pc, #88]	@ (800721c <MX_RTC_Init+0x60>)
 80071c2:	4a17      	ldr	r2, [pc, #92]	@ (8007220 <MX_RTC_Init+0x64>)
 80071c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80071c6:	4b15      	ldr	r3, [pc, #84]	@ (800721c <MX_RTC_Init+0x60>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80071cc:	4b13      	ldr	r3, [pc, #76]	@ (800721c <MX_RTC_Init+0x60>)
 80071ce:	227f      	movs	r2, #127	@ 0x7f
 80071d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80071d2:	4b12      	ldr	r3, [pc, #72]	@ (800721c <MX_RTC_Init+0x60>)
 80071d4:	22ff      	movs	r2, #255	@ 0xff
 80071d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80071d8:	4b10      	ldr	r3, [pc, #64]	@ (800721c <MX_RTC_Init+0x60>)
 80071da:	2200      	movs	r2, #0
 80071dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80071de:	4b0f      	ldr	r3, [pc, #60]	@ (800721c <MX_RTC_Init+0x60>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80071e4:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <MX_RTC_Init+0x60>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80071ea:	4b0c      	ldr	r3, [pc, #48]	@ (800721c <MX_RTC_Init+0x60>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80071f0:	4b0a      	ldr	r3, [pc, #40]	@ (800721c <MX_RTC_Init+0x60>)
 80071f2:	0018      	movs	r0, r3
 80071f4:	f009 fb4a 	bl	801088c <HAL_RTC_Init>
 80071f8:	1e03      	subs	r3, r0, #0
 80071fa:	d001      	beq.n	8007200 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80071fc:	f7ff f8c2 	bl	8006384 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8007200:	4b06      	ldr	r3, [pc, #24]	@ (800721c <MX_RTC_Init+0x60>)
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	0018      	movs	r0, r3
 8007208:	f009 fd3e 	bl	8010c88 <HAL_RTCEx_SetWakeUpTimer>
 800720c:	1e03      	subs	r3, r0, #0
 800720e:	d001      	beq.n	8007214 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8007210:	f7ff f8b8 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007214:	46c0      	nop			@ (mov r8, r8)
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	46c0      	nop			@ (mov r8, r8)
 800721c:	200027c0 	.word	0x200027c0
 8007220:	40002800 	.word	0x40002800

08007224 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a06      	ldr	r2, [pc, #24]	@ (800724c <HAL_RTC_MspInit+0x28>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d106      	bne.n	8007244 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007236:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <HAL_RTC_MspInit+0x2c>)
 8007238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800723a:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <HAL_RTC_MspInit+0x2c>)
 800723c:	2180      	movs	r1, #128	@ 0x80
 800723e:	02c9      	lsls	r1, r1, #11
 8007240:	430a      	orrs	r2, r1
 8007242:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007244:	46c0      	nop			@ (mov r8, r8)
 8007246:	46bd      	mov	sp, r7
 8007248:	b002      	add	sp, #8
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40002800 	.word	0x40002800
 8007250:	40021000 	.word	0x40021000

08007254 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d113      	bne.n	800729a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	22fe      	movs	r2, #254	@ 0xfe
 8007276:	0592      	lsls	r2, r2, #22
 8007278:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a1a      	ldr	r2, [pc, #104]	@ (80072e8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800727e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4a1a      	ldr	r2, [pc, #104]	@ (80072ec <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007284:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4a19      	ldr	r2, [pc, #100]	@ (80072f0 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800728a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a19      	ldr	r2, [pc, #100]	@ (80072f4 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8007290:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a18      	ldr	r2, [pc, #96]	@ (80072f8 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8007296:	61da      	str	r2, [r3, #28]
 8007298:	e011      	b.n	80072be <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a17      	ldr	r2, [pc, #92]	@ (80072fc <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800729e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4a17      	ldr	r2, [pc, #92]	@ (8007300 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80072a4:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a16      	ldr	r2, [pc, #88]	@ (8007304 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80072aa:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4a16      	ldr	r2, [pc, #88]	@ (8007308 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80072b0:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a15      	ldr	r2, [pc, #84]	@ (800730c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80072b6:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a15      	ldr	r2, [pc, #84]	@ (8007310 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80072bc:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4a14      	ldr	r2, [pc, #80]	@ (8007314 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80072c2:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a14      	ldr	r2, [pc, #80]	@ (8007318 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80072c8:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4a12      	ldr	r2, [pc, #72]	@ (8007318 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80072ce:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4a12      	ldr	r2, [pc, #72]	@ (800731c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80072d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0018      	movs	r0, r3
 80072da:	f000 f831 	bl	8007340 <GasIndexAlgorithm_reset>
}
 80072de:	46c0      	nop			@ (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b004      	add	sp, #16
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	00002710 	.word	0x00002710
 80072ec:	44340000 	.word	0x44340000
 80072f0:	46859800 	.word	0x46859800
 80072f4:	46a05000 	.word	0x46a05000
 80072f8:	41f00000 	.word	0x41f00000
 80072fc:	42c80000 	.word	0x42c80000
 8007300:	00004e20 	.word	0x00004e20
 8007304:	43340000 	.word	0x43340000
 8007308:	4528c000 	.word	0x4528c000
 800730c:	45a32000 	.word	0x45a32000
 8007310:	43aa0000 	.word	0x43aa0000
 8007314:	43660000 	.word	0x43660000
 8007318:	41400000 	.word	0x41400000
 800731c:	42480000 	.word	0x42480000

08007320 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800732a:	22fe      	movs	r2, #254	@ 0xfe
 800732c:	0592      	lsls	r2, r2, #22
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	0018      	movs	r0, r3
 8007334:	f7ff ff8e 	bl	8007254 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8007338:	46c0      	nop			@ (mov r8, r8)
 800733a:	46bd      	mov	sp, r7
 800733c:	b002      	add	sp, #8
 800733e:	bd80      	pop	{r7, pc}

08007340 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0018      	movs	r0, r3
 800735e:	f000 f805 	bl	800736c <GasIndexAlgorithm__init_instances>
}
 8007362:	46c0      	nop			@ (mov r8, r8)
 8007364:	46bd      	mov	sp, r7
 8007366:	b002      	add	sp, #8
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800736c:	b590      	push	{r4, r7, lr}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	0018      	movs	r0, r3
 8007378:	f000 f8e8 	bl	800754c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	0018      	movs	r0, r3
 8007380:	f000 f9a6 	bl	80076d0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007384:	1c04      	adds	r4, r0, #0
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0018      	movs	r0, r3
 800738a:	f000 f9ab 	bl	80076e4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800738e:	1c02      	adds	r2, r0, #0
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	1c21      	adds	r1, r4, #0
 8007394:	0018      	movs	r0, r3
 8007396:	f000 fc3b 	bl	8007c10 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d107      	bne.n	80073b2 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80073a2:	23fe      	movs	r3, #254	@ 0xfe
 80073a4:	059b      	lsls	r3, r3, #22
 80073a6:	4a0a      	ldr	r2, [pc, #40]	@ (80073d0 <GasIndexAlgorithm__init_instances+0x64>)
 80073a8:	490a      	ldr	r1, [pc, #40]	@ (80073d4 <GasIndexAlgorithm__init_instances+0x68>)
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fc86 	bl	8007cbc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80073b0:	e005      	b.n	80073be <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80073b2:	4b09      	ldr	r3, [pc, #36]	@ (80073d8 <GasIndexAlgorithm__init_instances+0x6c>)
 80073b4:	4a09      	ldr	r2, [pc, #36]	@ (80073dc <GasIndexAlgorithm__init_instances+0x70>)
 80073b6:	490a      	ldr	r1, [pc, #40]	@ (80073e0 <GasIndexAlgorithm__init_instances+0x74>)
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fc7f 	bl	8007cbc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	0018      	movs	r0, r3
 80073c2:	f000 fd35 	bl	8007e30 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80073c6:	46c0      	nop			@ (mov r8, r8)
 80073c8:	46bd      	mov	sp, r7
 80073ca:	b003      	add	sp, #12
 80073cc:	bd90      	pop	{r4, r7, pc}
 80073ce:	46c0      	nop			@ (mov r8, r8)
 80073d0:	bc257a78 	.word	0xbc257a78
 80073d4:	44198000 	.word	0x44198000
 80073d8:	42c80000 	.word	0x42c80000
 80073dc:	bbd4fdf4 	.word	0xbbd4fdf4
 80073e0:	43550000 	.word	0x43550000

080073e4 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80073e4:	b590      	push	{r4, r7, lr}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	4952      	ldr	r1, [pc, #328]	@ (8007540 <GasIndexAlgorithm_process+0x15c>)
 80073f6:	1c18      	adds	r0, r3, #0
 80073f8:	f7f9 f872 	bl	80004e0 <__aeabi_fcmple>
 80073fc:	1e03      	subs	r3, r0, #0
 80073fe:	d00c      	beq.n	800741a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	1c19      	adds	r1, r3, #0
 800740a:	1c10      	adds	r0, r2, #0
 800740c:	f7f9 f9d6 	bl	80007bc <__aeabi_fadd>
 8007410:	1c03      	adds	r3, r0, #0
 8007412:	1c1a      	adds	r2, r3, #0
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	631a      	str	r2, [r3, #48]	@ 0x30
 8007418:	e080      	b.n	800751c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dd25      	ble.n	800746c <GasIndexAlgorithm_process+0x88>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4a48      	ldr	r2, [pc, #288]	@ (8007544 <GasIndexAlgorithm_process+0x160>)
 8007424:	4293      	cmp	r3, r2
 8007426:	dc21      	bgt.n	800746c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	429a      	cmp	r2, r3
 8007430:	dc04      	bgt.n	800743c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60bb      	str	r3, [r7, #8]
 800743a:	e00d      	b.n	8007458 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	4a41      	ldr	r2, [pc, #260]	@ (8007548 <GasIndexAlgorithm_process+0x164>)
 8007442:	4694      	mov	ip, r2
 8007444:	4463      	add	r3, ip
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	429a      	cmp	r2, r3
 800744a:	dd05      	ble.n	8007458 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4a3d      	ldr	r2, [pc, #244]	@ (8007548 <GasIndexAlgorithm_process+0x164>)
 8007452:	4694      	mov	ip, r2
 8007454:	4463      	add	r3, ip
 8007456:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	0018      	movs	r0, r3
 8007462:	f7fa f833 	bl	80014cc <__aeabi_i2f>
 8007466:	1c02      	adds	r2, r0, #0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	0018      	movs	r0, r3
 8007478:	f000 f945 	bl	8007706 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800747c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800747e:	d014      	beq.n	80074aa <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	1c11      	adds	r1, r2, #0
 8007488:	0018      	movs	r0, r3
 800748a:	f000 fbd1 	bl	8007c30 <GasIndexAlgorithm__mox_model__process>
 800748e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	1c11      	adds	r1, r2, #0
 800749c:	0018      	movs	r0, r3
 800749e:	f000 fc25 	bl	8007cec <GasIndexAlgorithm__sigmoid_scaled__process>
 80074a2:	1c02      	adds	r2, r0, #0
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80074a8:	e003      	b.n	80074b2 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1c11      	adds	r1, r2, #0
 80074ba:	0018      	movs	r0, r3
 80074bc:	f000 fcec 	bl	8007e98 <GasIndexAlgorithm__adaptive_lowpass__process>
 80074c0:	1c02      	adds	r2, r0, #0
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	21fc      	movs	r1, #252	@ 0xfc
 80074cc:	0589      	lsls	r1, r1, #22
 80074ce:	1c18      	adds	r0, r3, #0
 80074d0:	f7f8 fffc 	bl	80004cc <__aeabi_fcmplt>
 80074d4:	1e03      	subs	r3, r0, #0
 80074d6:	d003      	beq.n	80074e0 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	22fc      	movs	r2, #252	@ 0xfc
 80074dc:	0592      	lsls	r2, r2, #22
 80074de:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e4:	2100      	movs	r1, #0
 80074e6:	1c18      	adds	r0, r3, #0
 80074e8:	f7f9 f804 	bl	80004f4 <__aeabi_fcmpgt>
 80074ec:	1e03      	subs	r3, r0, #0
 80074ee:	d015      	beq.n	800751c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1c11      	adds	r1, r2, #0
 80074f8:	0018      	movs	r0, r3
 80074fa:	f000 fa4f 	bl	800799c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	0018      	movs	r0, r3
 8007502:	f000 f8e5 	bl	80076d0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007506:	1c04      	adds	r4, r0, #0
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	0018      	movs	r0, r3
 800750c:	f000 f8ea 	bl	80076e4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007510:	1c02      	adds	r2, r0, #0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1c21      	adds	r1, r4, #0
 8007516:	0018      	movs	r0, r3
 8007518:	f000 fb7a 	bl	8007c10 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007520:	21fc      	movs	r1, #252	@ 0xfc
 8007522:	0589      	lsls	r1, r1, #22
 8007524:	1c18      	adds	r0, r3, #0
 8007526:	f7f9 f949 	bl	80007bc <__aeabi_fadd>
 800752a:	1c03      	adds	r3, r0, #0
 800752c:	1c18      	adds	r0, r3, #0
 800752e:	f7f9 ffad 	bl	800148c <__aeabi_f2iz>
 8007532:	0002      	movs	r2, r0
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	601a      	str	r2, [r3, #0]
    return;
 8007538:	46c0      	nop			@ (mov r8, r8)
}
 800753a:	46bd      	mov	sp, r7
 800753c:	b005      	add	sp, #20
 800753e:	bd90      	pop	{r4, r7, pc}
 8007540:	42340000 	.word	0x42340000
 8007544:	0000fde7 	.word	0x0000fde7
 8007548:	00007fff 	.word	0x00007fff

0800754c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800754c:	b5b0      	push	{r4, r5, r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	223c      	movs	r2, #60	@ 0x3c
 8007558:	2100      	movs	r1, #0
 800755a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4952      	ldr	r1, [pc, #328]	@ (80076c0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007576:	1c18      	adds	r0, r3, #0
 8007578:	f7f9 faaa 	bl	8000ad0 <__aeabi_fdiv>
 800757c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800757e:	2188      	movs	r1, #136	@ 0x88
 8007580:	05c9      	lsls	r1, r1, #23
 8007582:	1c18      	adds	r0, r3, #0
 8007584:	f7f9 fc8a 	bl	8000e9c <__aeabi_fmul>
 8007588:	1c03      	adds	r3, r0, #0
 800758a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	494a      	ldr	r1, [pc, #296]	@ (80076c0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007596:	1c18      	adds	r0, r3, #0
 8007598:	f7f9 fa9a 	bl	8000ad0 <__aeabi_fdiv>
 800759c:	1c03      	adds	r3, r0, #0
 800759e:	1c19      	adds	r1, r3, #0
 80075a0:	1c20      	adds	r0, r4, #0
 80075a2:	f7f9 f90b 	bl	80007bc <__aeabi_fadd>
 80075a6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80075a8:	1c19      	adds	r1, r3, #0
 80075aa:	1c28      	adds	r0, r5, #0
 80075ac:	f7f9 fa90 	bl	8000ad0 <__aeabi_fdiv>
 80075b0:	1c03      	adds	r3, r0, #0
 80075b2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	4940      	ldr	r1, [pc, #256]	@ (80076c0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80075be:	1c18      	adds	r0, r3, #0
 80075c0:	f7f9 fa86 	bl	8000ad0 <__aeabi_fdiv>
 80075c4:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80075c6:	2185      	movs	r1, #133	@ 0x85
 80075c8:	05c9      	lsls	r1, r1, #23
 80075ca:	1c18      	adds	r0, r3, #0
 80075cc:	f7f9 fc66 	bl	8000e9c <__aeabi_fmul>
 80075d0:	1c03      	adds	r3, r0, #0
 80075d2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4938      	ldr	r1, [pc, #224]	@ (80076c0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80075de:	1c18      	adds	r0, r3, #0
 80075e0:	f7f9 fa76 	bl	8000ad0 <__aeabi_fdiv>
 80075e4:	1c03      	adds	r3, r0, #0
 80075e6:	1c19      	adds	r1, r3, #0
 80075e8:	1c20      	adds	r0, r4, #0
 80075ea:	f7f9 f8e7 	bl	80007bc <__aeabi_fadd>
 80075ee:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80075f0:	1c19      	adds	r1, r3, #0
 80075f2:	1c28      	adds	r0, r5, #0
 80075f4:	f7f9 fa6c 	bl	8000ad0 <__aeabi_fdiv>
 80075f8:	1c03      	adds	r3, r0, #0
 80075fa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d118      	bne.n	800763a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800760c:	2188      	movs	r1, #136	@ 0x88
 800760e:	05c9      	lsls	r1, r1, #23
 8007610:	1c18      	adds	r0, r3, #0
 8007612:	f7f9 fc43 	bl	8000e9c <__aeabi_fmul>
 8007616:	1c03      	adds	r3, r0, #0
 8007618:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800761e:	4929      	ldr	r1, [pc, #164]	@ (80076c4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8007620:	1c18      	adds	r0, r3, #0
 8007622:	f7f9 f8cb 	bl	80007bc <__aeabi_fadd>
 8007626:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007628:	1c19      	adds	r1, r3, #0
 800762a:	1c20      	adds	r0, r4, #0
 800762c:	f7f9 fa50 	bl	8000ad0 <__aeabi_fdiv>
 8007630:	1c03      	adds	r3, r0, #0
 8007632:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	655a      	str	r2, [r3, #84]	@ 0x54
 8007638:	e017      	b.n	800766a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800763e:	2188      	movs	r1, #136	@ 0x88
 8007640:	05c9      	lsls	r1, r1, #23
 8007642:	1c18      	adds	r0, r3, #0
 8007644:	f7f9 fc2a 	bl	8000e9c <__aeabi_fmul>
 8007648:	1c03      	adds	r3, r0, #0
 800764a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007650:	491d      	ldr	r1, [pc, #116]	@ (80076c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8007652:	1c18      	adds	r0, r3, #0
 8007654:	f7f9 f8b2 	bl	80007bc <__aeabi_fadd>
 8007658:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800765a:	1c19      	adds	r1, r3, #0
 800765c:	1c20      	adds	r0, r4, #0
 800765e:	f7f9 fa37 	bl	8000ad0 <__aeabi_fdiv>
 8007662:	1c03      	adds	r3, r0, #0
 8007664:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800766e:	2185      	movs	r1, #133	@ 0x85
 8007670:	05c9      	lsls	r1, r1, #23
 8007672:	1c18      	adds	r0, r3, #0
 8007674:	f7f9 fc12 	bl	8000e9c <__aeabi_fmul>
 8007678:	1c03      	adds	r3, r0, #0
 800767a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	4912      	ldr	r1, [pc, #72]	@ (80076cc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8007682:	1c18      	adds	r0, r3, #0
 8007684:	f7f9 f89a 	bl	80007bc <__aeabi_fadd>
 8007688:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800768a:	1c19      	adds	r1, r3, #0
 800768c:	1c20      	adds	r0, r4, #0
 800768e:	f7f9 fa1f 	bl	8000ad0 <__aeabi_fdiv>
 8007692:	1c03      	adds	r3, r0, #0
 8007694:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80076b8:	46c0      	nop			@ (mov r8, r8)
 80076ba:	46bd      	mov	sp, r7
 80076bc:	b002      	add	sp, #8
 80076be:	bdb0      	pop	{r4, r5, r7, pc}
 80076c0:	45610000 	.word	0x45610000
 80076c4:	44960000 	.word	0x44960000
 80076c8:	41a00000 	.word	0x41a00000
 80076cc:	451c4000 	.word	0x451c4000

080076d0 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80076dc:	1c18      	adds	r0, r3, #0
 80076de:	46bd      	mov	sp, r7
 80076e0:	b002      	add	sp, #8
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80076f4:	1c19      	adds	r1, r3, #0
 80076f6:	1c10      	adds	r0, r2, #0
 80076f8:	f7f9 f860 	bl	80007bc <__aeabi_fadd>
 80076fc:	1c03      	adds	r3, r0, #0
}
 80076fe:	1c18      	adds	r0, r3, #0
 8007700:	46bd      	mov	sp, r7
 8007702:	b002      	add	sp, #8
 8007704:	bd80      	pop	{r7, pc}

08007706 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	223c      	movs	r2, #60	@ 0x3c
 8007712:	5c9b      	ldrb	r3, [r3, r2]
}
 8007714:	0018      	movs	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	b002      	add	sp, #8
 800771a:	bd80      	pop	{r7, pc}

0800771c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800771c:	b5b0      	push	{r4, r5, r7, lr}
 800771e:	b08c      	sub	sp, #48	@ 0x30
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8007728:	1c19      	adds	r1, r3, #0
 800772a:	4895      	ldr	r0, [pc, #596]	@ (8007980 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800772c:	f7f9 fcf4 	bl	8001118 <__aeabi_fsub>
 8007730:	1c03      	adds	r3, r0, #0
 8007732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007738:	1c19      	adds	r1, r3, #0
 800773a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800773c:	f7f8 feda 	bl	80004f4 <__aeabi_fcmpgt>
 8007740:	1e03      	subs	r3, r0, #0
 8007742:	d00b      	beq.n	800775c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800774c:	1c19      	adds	r1, r3, #0
 800774e:	1c10      	adds	r0, r2, #0
 8007750:	f7f9 f834 	bl	80007bc <__aeabi_fadd>
 8007754:	1c03      	adds	r3, r0, #0
 8007756:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007760:	1c19      	adds	r1, r3, #0
 8007762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007764:	f7f8 fec6 	bl	80004f4 <__aeabi_fcmpgt>
 8007768:	1e03      	subs	r3, r0, #0
 800776a:	d00b      	beq.n	8007784 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007774:	1c19      	adds	r1, r3, #0
 8007776:	1c10      	adds	r0, r2, #0
 8007778:	f7f9 f820 	bl	80007bc <__aeabi_fadd>
 800777c:	1c03      	adds	r3, r0, #0
 800777e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6959      	ldr	r1, [r3, #20]
 8007788:	4a7e      	ldr	r2, [pc, #504]	@ (8007984 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	0018      	movs	r0, r3
 800778e:	f000 f9f1 	bl	8007b74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	1c11      	adds	r1, r2, #0
 800779a:	0018      	movs	r0, r3
 800779c:	f000 f9fa 	bl	8007b94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80077a0:	1c03      	adds	r3, r0, #0
 80077a2:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80077b0:	1c19      	adds	r1, r3, #0
 80077b2:	1c10      	adds	r0, r2, #0
 80077b4:	f7f9 fcb0 	bl	8001118 <__aeabi_fsub>
 80077b8:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80077ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077bc:	1c18      	adds	r0, r3, #0
 80077be:	f7f9 fb6d 	bl	8000e9c <__aeabi_fmul>
 80077c2:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80077c4:	1c19      	adds	r1, r3, #0
 80077c6:	1c20      	adds	r0, r4, #0
 80077c8:	f7f8 fff8 	bl	80007bc <__aeabi_fadd>
 80077cc:	1c03      	adds	r3, r0, #0
 80077ce:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80077d8:	1c19      	adds	r1, r3, #0
 80077da:	486b      	ldr	r0, [pc, #428]	@ (8007988 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80077dc:	f7f9 fc9c 	bl	8001118 <__aeabi_fsub>
 80077e0:	1c03      	adds	r3, r0, #0
 80077e2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	1c11      	adds	r1, r2, #0
 80077ec:	0018      	movs	r0, r3
 80077ee:	f000 f9d1 	bl	8007b94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80077f2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80077f4:	1c19      	adds	r1, r3, #0
 80077f6:	1c28      	adds	r0, r5, #0
 80077f8:	f7f9 fb50 	bl	8000e9c <__aeabi_fmul>
 80077fc:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 80077fe:	1c19      	adds	r1, r3, #0
 8007800:	1c20      	adds	r0, r4, #0
 8007802:	f7f8 ffdb 	bl	80007bc <__aeabi_fadd>
 8007806:	1c03      	adds	r3, r0, #0
 8007808:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800780a:	4a60      	ldr	r2, [pc, #384]	@ (800798c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800780c:	6a39      	ldr	r1, [r7, #32]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0018      	movs	r0, r3
 8007812:	f000 f9af 	bl	8007b74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	1c11      	adds	r1, r2, #0
 800781e:	0018      	movs	r0, r3
 8007820:	f000 f9b8 	bl	8007b94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007824:	1c03      	adds	r3, r0, #0
 8007826:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800782a:	69f8      	ldr	r0, [r7, #28]
 800782c:	f7f9 fb36 	bl	8000e9c <__aeabi_fmul>
 8007830:	1c03      	adds	r3, r0, #0
 8007832:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6999      	ldr	r1, [r3, #24]
 800783c:	4a51      	ldr	r2, [pc, #324]	@ (8007984 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	0018      	movs	r0, r3
 8007842:	f000 f997 	bl	8007b74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	1c11      	adds	r1, r2, #0
 800784e:	0018      	movs	r0, r3
 8007850:	f000 f9a0 	bl	8007b94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007854:	1c03      	adds	r3, r0, #0
 8007856:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007864:	1c19      	adds	r1, r3, #0
 8007866:	1c10      	adds	r0, r2, #0
 8007868:	f7f9 fc56 	bl	8001118 <__aeabi_fsub>
 800786c:	1c03      	adds	r3, r0, #0
 800786e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007872:	69b8      	ldr	r0, [r7, #24]
 8007874:	f7f9 fc50 	bl	8001118 <__aeabi_fsub>
 8007878:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800787a:	1c19      	adds	r1, r3, #0
 800787c:	1c28      	adds	r0, r5, #0
 800787e:	f7f9 fb0d 	bl	8000e9c <__aeabi_fmul>
 8007882:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007884:	1c19      	adds	r1, r3, #0
 8007886:	1c20      	adds	r0, r4, #0
 8007888:	f7f8 ff98 	bl	80007bc <__aeabi_fadd>
 800788c:	1c03      	adds	r3, r0, #0
 800788e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007898:	1c19      	adds	r1, r3, #0
 800789a:	483b      	ldr	r0, [pc, #236]	@ (8007988 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800789c:	f7f9 fc3c 	bl	8001118 <__aeabi_fsub>
 80078a0:	1c03      	adds	r3, r0, #0
 80078a2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	1c11      	adds	r1, r2, #0
 80078ac:	0018      	movs	r0, r3
 80078ae:	f000 f971 	bl	8007b94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078b2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80078b4:	1c19      	adds	r1, r3, #0
 80078b6:	1c28      	adds	r0, r5, #0
 80078b8:	f7f9 faf0 	bl	8000e9c <__aeabi_fmul>
 80078bc:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80078be:	1c19      	adds	r1, r3, #0
 80078c0:	1c20      	adds	r0, r4, #0
 80078c2:	f7f8 ff7b 	bl	80007bc <__aeabi_fadd>
 80078c6:	1c03      	adds	r3, r0, #0
 80078c8:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80078ca:	4a30      	ldr	r2, [pc, #192]	@ (800798c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80078cc:	6939      	ldr	r1, [r7, #16]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	0018      	movs	r0, r3
 80078d2:	f000 f94f 	bl	8007b74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	1c11      	adds	r1, r2, #0
 80078de:	0018      	movs	r0, r3
 80078e0:	f000 f958 	bl	8007b94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078e4:	1c03      	adds	r3, r0, #0
 80078e6:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80078e8:	6979      	ldr	r1, [r7, #20]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7f9 fad6 	bl	8000e9c <__aeabi_fmul>
 80078f0:	1c03      	adds	r3, r0, #0
 80078f2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4923      	ldr	r1, [pc, #140]	@ (8007990 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007902:	1c18      	adds	r0, r3, #0
 8007904:	f7f9 f8e4 	bl	8000ad0 <__aeabi_fdiv>
 8007908:	1c03      	adds	r3, r0, #0
 800790a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800790c:	69f9      	ldr	r1, [r7, #28]
 800790e:	20fe      	movs	r0, #254	@ 0xfe
 8007910:	0580      	lsls	r0, r0, #22
 8007912:	f7f9 fc01 	bl	8001118 <__aeabi_fsub>
 8007916:	1c03      	adds	r3, r0, #0
 8007918:	491e      	ldr	r1, [pc, #120]	@ (8007994 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800791a:	1c18      	adds	r0, r3, #0
 800791c:	f7f9 fabe 	bl	8000e9c <__aeabi_fmul>
 8007920:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007922:	491d      	ldr	r1, [pc, #116]	@ (8007998 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007924:	1c18      	adds	r0, r3, #0
 8007926:	f7f9 fbf7 	bl	8001118 <__aeabi_fsub>
 800792a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800792c:	1c19      	adds	r1, r3, #0
 800792e:	1c28      	adds	r0, r5, #0
 8007930:	f7f9 fab4 	bl	8000e9c <__aeabi_fmul>
 8007934:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007936:	1c19      	adds	r1, r3, #0
 8007938:	1c20      	adds	r0, r4, #0
 800793a:	f7f8 ff3f 	bl	80007bc <__aeabi_fadd>
 800793e:	1c03      	adds	r3, r0, #0
 8007940:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794a:	2100      	movs	r1, #0
 800794c:	1c18      	adds	r0, r3, #0
 800794e:	f7f8 fdbd 	bl	80004cc <__aeabi_fcmplt>
 8007952:	1e03      	subs	r3, r0, #0
 8007954:	d002      	beq.n	800795c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007964:	1c19      	adds	r1, r3, #0
 8007966:	1c10      	adds	r0, r2, #0
 8007968:	f7f8 fdc4 	bl	80004f4 <__aeabi_fcmpgt>
 800796c:	1e03      	subs	r3, r0, #0
 800796e:	d100      	bne.n	8007972 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007970:	e002      	b.n	8007978 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007978:	46c0      	nop			@ (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b00c      	add	sp, #48	@ 0x30
 800797e:	bdb0      	pop	{r4, r5, r7, pc}
 8007980:	46fffe00 	.word	0x46fffe00
 8007984:	3c23d70a 	.word	0x3c23d70a
 8007988:	43ff0000 	.word	0x43ff0000
 800798c:	3db851ec 	.word	0x3db851ec
 8007990:	42700000 	.word	0x42700000
 8007994:	3fa66666 	.word	0x3fa66666
 8007998:	3e99999a 	.word	0x3e99999a

0800799c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800799c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	223c      	movs	r2, #60	@ 0x3c
 80079aa:	5c9b      	ldrb	r3, [r3, r2]
 80079ac:	2201      	movs	r2, #1
 80079ae:	4053      	eors	r3, r2
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	223c      	movs	r2, #60	@ 0x3c
 80079ba:	2101      	movs	r1, #1
 80079bc:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80079ca:	e0c8      	b.n	8007b5e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d0:	4965      	ldr	r1, [pc, #404]	@ (8007b68 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80079d2:	1c18      	adds	r0, r3, #0
 80079d4:	f7f8 fd98 	bl	8000508 <__aeabi_fcmpge>
 80079d8:	1e03      	subs	r3, r0, #0
 80079da:	d107      	bne.n	80079ec <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80079e0:	4962      	ldr	r1, [pc, #392]	@ (8007b6c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80079e2:	1c18      	adds	r0, r3, #0
 80079e4:	f7f8 fd7c 	bl	80004e0 <__aeabi_fcmple>
 80079e8:	1e03      	subs	r3, r0, #0
 80079ea:	d00e      	beq.n	8007a0a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80079f4:	1c19      	adds	r1, r3, #0
 80079f6:	1c10      	adds	r0, r2, #0
 80079f8:	f7f8 fee0 	bl	80007bc <__aeabi_fadd>
 80079fc:	1c03      	adds	r3, r0, #0
 80079fe:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a0e:	1c19      	adds	r1, r3, #0
 8007a10:	6838      	ldr	r0, [r7, #0]
 8007a12:	f7f9 fb81 	bl	8001118 <__aeabi_fsub>
 8007a16:	1c03      	adds	r3, r0, #0
 8007a18:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f7ff fe7d 	bl	800771c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a26:	1c19      	adds	r1, r3, #0
 8007a28:	6838      	ldr	r0, [r7, #0]
 8007a2a:	f7f9 fb75 	bl	8001118 <__aeabi_fsub>
 8007a2e:	1c03      	adds	r3, r0, #0
 8007a30:	2185      	movs	r1, #133	@ 0x85
 8007a32:	05c9      	lsls	r1, r1, #23
 8007a34:	1c18      	adds	r0, r3, #0
 8007a36:	f7f9 f84b 	bl	8000ad0 <__aeabi_fdiv>
 8007a3a:	1c03      	adds	r3, r0, #0
 8007a3c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007a3e:	2100      	movs	r1, #0
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7f8 fd43 	bl	80004cc <__aeabi_fcmplt>
 8007a46:	1e03      	subs	r3, r0, #0
 8007a48:	d008      	beq.n	8007a5c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	1c18      	adds	r0, r3, #0
 8007a52:	f7f9 fb61 	bl	8001118 <__aeabi_fsub>
 8007a56:	1c03      	adds	r3, r0, #0
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e007      	b.n	8007a6c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a60:	1c19      	adds	r1, r3, #0
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7f8 feaa 	bl	80007bc <__aeabi_fadd>
 8007a68:	1c03      	adds	r3, r0, #0
 8007a6a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007a6c:	23fe      	movs	r3, #254	@ 0xfe
 8007a6e:	059b      	lsls	r3, r3, #22
 8007a70:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007a72:	493f      	ldr	r1, [pc, #252]	@ (8007b70 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007a74:	6978      	ldr	r0, [r7, #20]
 8007a76:	f7f8 fd3d 	bl	80004f4 <__aeabi_fcmpgt>
 8007a7a:	1e03      	subs	r3, r0, #0
 8007a7c:	d010      	beq.n	8007aa0 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007a7e:	493c      	ldr	r1, [pc, #240]	@ (8007b70 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007a80:	6978      	ldr	r0, [r7, #20]
 8007a82:	f7f9 f825 	bl	8000ad0 <__aeabi_fdiv>
 8007a86:	1c03      	adds	r3, r0, #0
 8007a88:	1c1c      	adds	r4, r3, #0
 8007a8a:	4939      	ldr	r1, [pc, #228]	@ (8007b70 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007a8c:	6978      	ldr	r0, [r7, #20]
 8007a8e:	f7f9 f81f 	bl	8000ad0 <__aeabi_fdiv>
 8007a92:	1c03      	adds	r3, r0, #0
 8007a94:	1c19      	adds	r1, r3, #0
 8007a96:	1c20      	adds	r0, r4, #0
 8007a98:	f7f9 fa00 	bl	8000e9c <__aeabi_fmul>
 8007a9c:	1c03      	adds	r3, r0, #0
 8007a9e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007aa4:	1c19      	adds	r1, r3, #0
 8007aa6:	2085      	movs	r0, #133	@ 0x85
 8007aa8:	05c0      	lsls	r0, r0, #23
 8007aaa:	f7f9 fb35 	bl	8001118 <__aeabi_fsub>
 8007aae:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007ab0:	6939      	ldr	r1, [r7, #16]
 8007ab2:	1c18      	adds	r0, r3, #0
 8007ab4:	f7f9 f9f2 	bl	8000e9c <__aeabi_fmul>
 8007ab8:	1c03      	adds	r3, r0, #0
 8007aba:	1c18      	adds	r0, r3, #0
 8007abc:	f012 fd82 	bl	801a5c4 <sqrtf>
 8007ac0:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007aca:	2185      	movs	r1, #133	@ 0x85
 8007acc:	05c9      	lsls	r1, r1, #23
 8007ace:	6938      	ldr	r0, [r7, #16]
 8007ad0:	f7f9 f9e4 	bl	8000e9c <__aeabi_fmul>
 8007ad4:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007ad6:	1c19      	adds	r1, r3, #0
 8007ad8:	1c28      	adds	r0, r5, #0
 8007ada:	f7f8 fff9 	bl	8000ad0 <__aeabi_fdiv>
 8007ade:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007ae0:	1c19      	adds	r1, r3, #0
 8007ae2:	1c20      	adds	r0, r4, #0
 8007ae4:	f7f9 f9da 	bl	8000e9c <__aeabi_fmul>
 8007ae8:	1c03      	adds	r3, r0, #0
 8007aea:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af0:	68f9      	ldr	r1, [r7, #12]
 8007af2:	1c18      	adds	r0, r3, #0
 8007af4:	f7f9 f9d2 	bl	8000e9c <__aeabi_fmul>
 8007af8:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007afa:	6939      	ldr	r1, [r7, #16]
 8007afc:	1c18      	adds	r0, r3, #0
 8007afe:	f7f8 ffe7 	bl	8000ad0 <__aeabi_fdiv>
 8007b02:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007b04:	68f9      	ldr	r1, [r7, #12]
 8007b06:	1c18      	adds	r0, r3, #0
 8007b08:	f7f9 f9c8 	bl	8000e9c <__aeabi_fmul>
 8007b0c:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007b0e:	1c19      	adds	r1, r3, #0
 8007b10:	1c20      	adds	r0, r4, #0
 8007b12:	f7f8 fe53 	bl	80007bc <__aeabi_fadd>
 8007b16:	1c03      	adds	r3, r0, #0
 8007b18:	1c18      	adds	r0, r3, #0
 8007b1a:	f012 fd53 	bl	801a5c4 <sqrtf>
 8007b1e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007b20:	1c19      	adds	r1, r3, #0
 8007b22:	1c30      	adds	r0, r6, #0
 8007b24:	f7f9 f9ba 	bl	8000e9c <__aeabi_fmul>
 8007b28:	1c03      	adds	r3, r0, #0
 8007b2a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b38:	68f9      	ldr	r1, [r7, #12]
 8007b3a:	1c18      	adds	r0, r3, #0
 8007b3c:	f7f9 f9ae 	bl	8000e9c <__aeabi_fmul>
 8007b40:	1c03      	adds	r3, r0, #0
 8007b42:	2182      	movs	r1, #130	@ 0x82
 8007b44:	05c9      	lsls	r1, r1, #23
 8007b46:	1c18      	adds	r0, r3, #0
 8007b48:	f7f8 ffc2 	bl	8000ad0 <__aeabi_fdiv>
 8007b4c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007b4e:	1c19      	adds	r1, r3, #0
 8007b50:	1c20      	adds	r0, r4, #0
 8007b52:	f7f8 fe33 	bl	80007bc <__aeabi_fadd>
 8007b56:	1c03      	adds	r3, r0, #0
 8007b58:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007b5e:	46c0      	nop			@ (mov r8, r8)
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b007      	add	sp, #28
 8007b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b66:	46c0      	nop			@ (mov r8, r8)
 8007b68:	42c80000 	.word	0x42c80000
 8007b6c:	c2c80000 	.word	0xc2c80000
 8007b70:	44b40000 	.word	0x44b40000

08007b74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b8c:	46c0      	nop			@ (mov r8, r8)
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b004      	add	sp, #16
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007b94:	b590      	push	{r4, r7, lr}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ba6:	1c19      	adds	r1, r3, #0
 8007ba8:	6838      	ldr	r0, [r7, #0]
 8007baa:	f7f9 fab5 	bl	8001118 <__aeabi_fsub>
 8007bae:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007bb0:	1c19      	adds	r1, r3, #0
 8007bb2:	1c20      	adds	r0, r4, #0
 8007bb4:	f7f9 f972 	bl	8000e9c <__aeabi_fmul>
 8007bb8:	1c03      	adds	r3, r0, #0
 8007bba:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007bbc:	4912      	ldr	r1, [pc, #72]	@ (8007c08 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7f8 fc84 	bl	80004cc <__aeabi_fcmplt>
 8007bc4:	1e03      	subs	r3, r0, #0
 8007bc6:	d002      	beq.n	8007bce <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007bc8:	23fe      	movs	r3, #254	@ 0xfe
 8007bca:	059b      	lsls	r3, r3, #22
 8007bcc:	e018      	b.n	8007c00 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007bce:	490f      	ldr	r1, [pc, #60]	@ (8007c0c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7f8 fc8f 	bl	80004f4 <__aeabi_fcmpgt>
 8007bd6:	1e03      	subs	r3, r0, #0
 8007bd8:	d001      	beq.n	8007bde <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e010      	b.n	8007c00 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1c18      	adds	r0, r3, #0
 8007be2:	f012 fcc7 	bl	801a574 <expf>
 8007be6:	1c03      	adds	r3, r0, #0
 8007be8:	21fe      	movs	r1, #254	@ 0xfe
 8007bea:	0589      	lsls	r1, r1, #22
 8007bec:	1c18      	adds	r0, r3, #0
 8007bee:	f7f8 fde5 	bl	80007bc <__aeabi_fadd>
 8007bf2:	1c03      	adds	r3, r0, #0
 8007bf4:	1c19      	adds	r1, r3, #0
 8007bf6:	20fe      	movs	r0, #254	@ 0xfe
 8007bf8:	0580      	lsls	r0, r0, #22
 8007bfa:	f7f8 ff69 	bl	8000ad0 <__aeabi_fdiv>
 8007bfe:	1c03      	adds	r3, r0, #0
    }
}
 8007c00:	1c18      	adds	r0, r3, #0
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b005      	add	sp, #20
 8007c06:	bd90      	pop	{r4, r7, pc}
 8007c08:	c2480000 	.word	0xc2480000
 8007c0c:	42480000 	.word	0x42480000

08007c10 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007c28:	46c0      	nop			@ (mov r8, r8)
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	b004      	add	sp, #16
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d114      	bne.n	8007c6c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c46:	1c19      	adds	r1, r3, #0
 8007c48:	6838      	ldr	r0, [r7, #0]
 8007c4a:	f7f9 fa65 	bl	8001118 <__aeabi_fsub>
 8007c4e:	1c03      	adds	r3, r0, #0
 8007c50:	4918      	ldr	r1, [pc, #96]	@ (8007cb4 <GasIndexAlgorithm__mox_model__process+0x84>)
 8007c52:	1c18      	adds	r0, r3, #0
 8007c54:	f7f8 ff3c 	bl	8000ad0 <__aeabi_fdiv>
 8007c58:	1c03      	adds	r3, r0, #0
 8007c5a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007c60:	1c19      	adds	r1, r3, #0
 8007c62:	1c10      	adds	r0, r2, #0
 8007c64:	f7f9 f91a 	bl	8000e9c <__aeabi_fmul>
 8007c68:	1c03      	adds	r3, r0, #0
 8007c6a:	e01f      	b.n	8007cac <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c70:	1c19      	adds	r1, r3, #0
 8007c72:	6838      	ldr	r0, [r7, #0]
 8007c74:	f7f9 fa50 	bl	8001118 <__aeabi_fsub>
 8007c78:	1c03      	adds	r3, r0, #0
 8007c7a:	1c1a      	adds	r2, r3, #0
 8007c7c:	2380      	movs	r3, #128	@ 0x80
 8007c7e:	061b      	lsls	r3, r3, #24
 8007c80:	4053      	eors	r3, r2
 8007c82:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c88:	490b      	ldr	r1, [pc, #44]	@ (8007cb8 <GasIndexAlgorithm__mox_model__process+0x88>)
 8007c8a:	1c18      	adds	r0, r3, #0
 8007c8c:	f7f8 fd96 	bl	80007bc <__aeabi_fadd>
 8007c90:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007c92:	1c19      	adds	r1, r3, #0
 8007c94:	1c20      	adds	r0, r4, #0
 8007c96:	f7f8 ff1b 	bl	8000ad0 <__aeabi_fdiv>
 8007c9a:	1c03      	adds	r3, r0, #0
 8007c9c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007ca2:	1c19      	adds	r1, r3, #0
 8007ca4:	1c10      	adds	r0, r2, #0
 8007ca6:	f7f9 f8f9 	bl	8000e9c <__aeabi_fmul>
 8007caa:	1c03      	adds	r3, r0, #0
    }
}
 8007cac:	1c18      	adds	r0, r3, #0
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b003      	add	sp, #12
 8007cb2:	bd90      	pop	{r4, r7, pc}
 8007cb4:	44fa0000 	.word	0x44fa0000
 8007cb8:	435c0000 	.word	0x435c0000

08007cbc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2180      	movs	r1, #128	@ 0x80
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2184      	movs	r1, #132	@ 0x84
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2188      	movs	r1, #136	@ 0x88
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	505a      	str	r2, [r3, r1]
}
 8007ce2:	46c0      	nop			@ (mov r8, r8)
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b004      	add	sp, #16
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007cec:	b590      	push	{r4, r7, lr}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2280      	movs	r2, #128	@ 0x80
 8007cfa:	589c      	ldr	r4, [r3, r2]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2284      	movs	r2, #132	@ 0x84
 8007d00:	589b      	ldr	r3, [r3, r2]
 8007d02:	1c19      	adds	r1, r3, #0
 8007d04:	6838      	ldr	r0, [r7, #0]
 8007d06:	f7f9 fa07 	bl	8001118 <__aeabi_fsub>
 8007d0a:	1c03      	adds	r3, r0, #0
 8007d0c:	1c19      	adds	r1, r3, #0
 8007d0e:	1c20      	adds	r0, r4, #0
 8007d10:	f7f9 f8c4 	bl	8000e9c <__aeabi_fmul>
 8007d14:	1c03      	adds	r3, r0, #0
 8007d16:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007d18:	4940      	ldr	r1, [pc, #256]	@ (8007e1c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007d1a:	68b8      	ldr	r0, [r7, #8]
 8007d1c:	f7f8 fbd6 	bl	80004cc <__aeabi_fcmplt>
 8007d20:	1e03      	subs	r3, r0, #0
 8007d22:	d001      	beq.n	8007d28 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007d24:	4b3e      	ldr	r3, [pc, #248]	@ (8007e20 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007d26:	e075      	b.n	8007e14 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007d28:	493e      	ldr	r1, [pc, #248]	@ (8007e24 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007d2a:	68b8      	ldr	r0, [r7, #8]
 8007d2c:	f7f8 fbe2 	bl	80004f4 <__aeabi_fcmpgt>
 8007d30:	1e03      	subs	r3, r0, #0
 8007d32:	d001      	beq.n	8007d38 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007d34:	2300      	movs	r3, #0
 8007d36:	e06d      	b.n	8007e14 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007d38:	2100      	movs	r1, #0
 8007d3a:	6838      	ldr	r0, [r7, #0]
 8007d3c:	f7f8 fbe4 	bl	8000508 <__aeabi_fcmpge>
 8007d40:	1e03      	subs	r3, r0, #0
 8007d42:	d047      	beq.n	8007dd4 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2288      	movs	r2, #136	@ 0x88
 8007d48:	589b      	ldr	r3, [r3, r2]
 8007d4a:	21fe      	movs	r1, #254	@ 0xfe
 8007d4c:	0589      	lsls	r1, r1, #22
 8007d4e:	1c18      	adds	r0, r3, #0
 8007d50:	f7f8 fbb6 	bl	80004c0 <__aeabi_fcmpeq>
 8007d54:	1e03      	subs	r3, r0, #0
 8007d56:	d00e      	beq.n	8007d76 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	1c19      	adds	r1, r3, #0
 8007d5e:	20fe      	movs	r0, #254	@ 0xfe
 8007d60:	0580      	lsls	r0, r0, #22
 8007d62:	f7f9 f9d9 	bl	8001118 <__aeabi_fsub>
 8007d66:	1c03      	adds	r3, r0, #0
 8007d68:	492f      	ldr	r1, [pc, #188]	@ (8007e28 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007d6a:	1c18      	adds	r0, r3, #0
 8007d6c:	f7f9 f896 	bl	8000e9c <__aeabi_fmul>
 8007d70:	1c03      	adds	r3, r0, #0
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e012      	b.n	8007d9c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	492c      	ldr	r1, [pc, #176]	@ (8007e2c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007d7c:	1c18      	adds	r0, r3, #0
 8007d7e:	f7f9 f88d 	bl	8000e9c <__aeabi_fmul>
 8007d82:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007d84:	1c19      	adds	r1, r3, #0
 8007d86:	4826      	ldr	r0, [pc, #152]	@ (8007e20 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007d88:	f7f9 f9c6 	bl	8001118 <__aeabi_fsub>
 8007d8c:	1c03      	adds	r3, r0, #0
 8007d8e:	2181      	movs	r1, #129	@ 0x81
 8007d90:	05c9      	lsls	r1, r1, #23
 8007d92:	1c18      	adds	r0, r3, #0
 8007d94:	f7f8 fe9c 	bl	8000ad0 <__aeabi_fdiv>
 8007d98:	1c03      	adds	r3, r0, #0
 8007d9a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007d9c:	4920      	ldr	r1, [pc, #128]	@ (8007e20 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7f8 fd0c 	bl	80007bc <__aeabi_fadd>
 8007da4:	1c03      	adds	r3, r0, #0
 8007da6:	1c1c      	adds	r4, r3, #0
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	1c18      	adds	r0, r3, #0
 8007dac:	f012 fbe2 	bl	801a574 <expf>
 8007db0:	1c03      	adds	r3, r0, #0
 8007db2:	21fe      	movs	r1, #254	@ 0xfe
 8007db4:	0589      	lsls	r1, r1, #22
 8007db6:	1c18      	adds	r0, r3, #0
 8007db8:	f7f8 fd00 	bl	80007bc <__aeabi_fadd>
 8007dbc:	1c03      	adds	r3, r0, #0
 8007dbe:	1c19      	adds	r1, r3, #0
 8007dc0:	1c20      	adds	r0, r4, #0
 8007dc2:	f7f8 fe85 	bl	8000ad0 <__aeabi_fdiv>
 8007dc6:	1c03      	adds	r3, r0, #0
 8007dc8:	68f9      	ldr	r1, [r7, #12]
 8007dca:	1c18      	adds	r0, r3, #0
 8007dcc:	f7f9 f9a4 	bl	8001118 <__aeabi_fsub>
 8007dd0:	1c03      	adds	r3, r0, #0
 8007dd2:	e01f      	b.n	8007e14 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2188      	movs	r1, #136	@ 0x88
 8007ddc:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8007dde:	1c19      	adds	r1, r3, #0
 8007de0:	1c10      	adds	r0, r2, #0
 8007de2:	f7f8 fe75 	bl	8000ad0 <__aeabi_fdiv>
 8007de6:	1c03      	adds	r3, r0, #0
 8007de8:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	1c18      	adds	r0, r3, #0
 8007dee:	f012 fbc1 	bl	801a574 <expf>
 8007df2:	1c03      	adds	r3, r0, #0
 8007df4:	21fe      	movs	r1, #254	@ 0xfe
 8007df6:	0589      	lsls	r1, r1, #22
 8007df8:	1c18      	adds	r0, r3, #0
 8007dfa:	f7f8 fcdf 	bl	80007bc <__aeabi_fadd>
 8007dfe:	1c03      	adds	r3, r0, #0
 8007e00:	1c19      	adds	r1, r3, #0
 8007e02:	4807      	ldr	r0, [pc, #28]	@ (8007e20 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e04:	f7f8 fe64 	bl	8000ad0 <__aeabi_fdiv>
 8007e08:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007e0a:	1c19      	adds	r1, r3, #0
 8007e0c:	1c20      	adds	r0, r4, #0
 8007e0e:	f7f9 f845 	bl	8000e9c <__aeabi_fmul>
 8007e12:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007e14:	1c18      	adds	r0, r3, #0
 8007e16:	46bd      	mov	sp, r7
 8007e18:	b005      	add	sp, #20
 8007e1a:	bd90      	pop	{r4, r7, pc}
 8007e1c:	c2480000 	.word	0xc2480000
 8007e20:	43fa0000 	.word	0x43fa0000
 8007e24:	42480000 	.word	0x42480000
 8007e28:	3f8041ab 	.word	0x3f8041ab
 8007e2c:	40a00000 	.word	0x40a00000

08007e30 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	4913      	ldr	r1, [pc, #76]	@ (8007e90 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8007e42:	1c18      	adds	r0, r3, #0
 8007e44:	f7f8 fcba 	bl	80007bc <__aeabi_fadd>
 8007e48:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007e4a:	1c19      	adds	r1, r3, #0
 8007e4c:	1c20      	adds	r0, r4, #0
 8007e4e:	f7f8 fe3f 	bl	8000ad0 <__aeabi_fdiv>
 8007e52:	1c03      	adds	r3, r0, #0
 8007e54:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	228c      	movs	r2, #140	@ 0x8c
 8007e5a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	490b      	ldr	r1, [pc, #44]	@ (8007e94 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8007e66:	1c18      	adds	r0, r3, #0
 8007e68:	f7f8 fca8 	bl	80007bc <__aeabi_fadd>
 8007e6c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007e6e:	1c19      	adds	r1, r3, #0
 8007e70:	1c20      	adds	r0, r4, #0
 8007e72:	f7f8 fe2d 	bl	8000ad0 <__aeabi_fdiv>
 8007e76:	1c03      	adds	r3, r0, #0
 8007e78:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2290      	movs	r2, #144	@ 0x90
 8007e7e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2294      	movs	r2, #148	@ 0x94
 8007e84:	2100      	movs	r1, #0
 8007e86:	5499      	strb	r1, [r3, r2]
}
 8007e88:	46c0      	nop			@ (mov r8, r8)
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b003      	add	sp, #12
 8007e8e:	bd90      	pop	{r4, r7, pc}
 8007e90:	41a00000 	.word	0x41a00000
 8007e94:	43fa0000 	.word	0x43fa0000

08007e98 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2294      	movs	r2, #148	@ 0x94
 8007ea6:	5c9b      	ldrb	r3, [r3, r2]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	4053      	eors	r3, r2
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2198      	movs	r1, #152	@ 0x98
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	219c      	movs	r1, #156	@ 0x9c
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	21a0      	movs	r1, #160	@ 0xa0
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2294      	movs	r2, #148	@ 0x94
 8007ece:	2101      	movs	r1, #1
 8007ed0:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	228c      	movs	r2, #140	@ 0x8c
 8007ed6:	589b      	ldr	r3, [r3, r2]
 8007ed8:	1c19      	adds	r1, r3, #0
 8007eda:	20fe      	movs	r0, #254	@ 0xfe
 8007edc:	0580      	lsls	r0, r0, #22
 8007ede:	f7f9 f91b 	bl	8001118 <__aeabi_fsub>
 8007ee2:	1c03      	adds	r3, r0, #0
 8007ee4:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2298      	movs	r2, #152	@ 0x98
 8007eea:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007eec:	1c19      	adds	r1, r3, #0
 8007eee:	f7f8 ffd5 	bl	8000e9c <__aeabi_fmul>
 8007ef2:	1c03      	adds	r3, r0, #0
 8007ef4:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	228c      	movs	r2, #140	@ 0x8c
 8007efa:	589b      	ldr	r3, [r3, r2]
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	1c18      	adds	r0, r3, #0
 8007f00:	f7f8 ffcc 	bl	8000e9c <__aeabi_fmul>
 8007f04:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8007f06:	1c19      	adds	r1, r3, #0
 8007f08:	1c20      	adds	r0, r4, #0
 8007f0a:	f7f8 fc57 	bl	80007bc <__aeabi_fadd>
 8007f0e:	1c03      	adds	r3, r0, #0
 8007f10:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2298      	movs	r2, #152	@ 0x98
 8007f16:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2290      	movs	r2, #144	@ 0x90
 8007f1c:	589b      	ldr	r3, [r3, r2]
 8007f1e:	1c19      	adds	r1, r3, #0
 8007f20:	20fe      	movs	r0, #254	@ 0xfe
 8007f22:	0580      	lsls	r0, r0, #22
 8007f24:	f7f9 f8f8 	bl	8001118 <__aeabi_fsub>
 8007f28:	1c03      	adds	r3, r0, #0
 8007f2a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	229c      	movs	r2, #156	@ 0x9c
 8007f30:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007f32:	1c19      	adds	r1, r3, #0
 8007f34:	f7f8 ffb2 	bl	8000e9c <__aeabi_fmul>
 8007f38:	1c03      	adds	r3, r0, #0
 8007f3a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2290      	movs	r2, #144	@ 0x90
 8007f40:	589b      	ldr	r3, [r3, r2]
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	1c18      	adds	r0, r3, #0
 8007f46:	f7f8 ffa9 	bl	8000e9c <__aeabi_fmul>
 8007f4a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007f4c:	1c19      	adds	r1, r3, #0
 8007f4e:	1c20      	adds	r0, r4, #0
 8007f50:	f7f8 fc34 	bl	80007bc <__aeabi_fadd>
 8007f54:	1c03      	adds	r3, r0, #0
 8007f56:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	229c      	movs	r2, #156	@ 0x9c
 8007f5c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2298      	movs	r2, #152	@ 0x98
 8007f62:	589a      	ldr	r2, [r3, r2]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	219c      	movs	r1, #156	@ 0x9c
 8007f68:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8007f6a:	1c19      	adds	r1, r3, #0
 8007f6c:	1c10      	adds	r0, r2, #0
 8007f6e:	f7f9 f8d3 	bl	8001118 <__aeabi_fsub>
 8007f72:	1c03      	adds	r3, r0, #0
 8007f74:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8007f76:	2100      	movs	r1, #0
 8007f78:	6978      	ldr	r0, [r7, #20]
 8007f7a:	f7f8 faa7 	bl	80004cc <__aeabi_fcmplt>
 8007f7e:	1e03      	subs	r3, r0, #0
 8007f80:	d004      	beq.n	8007f8c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2280      	movs	r2, #128	@ 0x80
 8007f86:	0612      	lsls	r2, r2, #24
 8007f88:	4053      	eors	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8007f8c:	4923      	ldr	r1, [pc, #140]	@ (800801c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8007f8e:	6978      	ldr	r0, [r7, #20]
 8007f90:	f7f8 ff84 	bl	8000e9c <__aeabi_fmul>
 8007f94:	1c03      	adds	r3, r0, #0
 8007f96:	1c18      	adds	r0, r3, #0
 8007f98:	f012 faec 	bl	801a574 <expf>
 8007f9c:	1c03      	adds	r3, r0, #0
 8007f9e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8007fa0:	491f      	ldr	r1, [pc, #124]	@ (8008020 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8007fa2:	6938      	ldr	r0, [r7, #16]
 8007fa4:	f7f8 ff7a 	bl	8000e9c <__aeabi_fmul>
 8007fa8:	1c03      	adds	r3, r0, #0
 8007faa:	491e      	ldr	r1, [pc, #120]	@ (8008024 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8007fac:	1c18      	adds	r0, r3, #0
 8007fae:	f7f8 fc05 	bl	80007bc <__aeabi_fadd>
 8007fb2:	1c03      	adds	r3, r0, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685c      	ldr	r4, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	1c18      	adds	r0, r3, #0
 8007fc2:	f7f8 fbfb 	bl	80007bc <__aeabi_fadd>
 8007fc6:	1c03      	adds	r3, r0, #0
 8007fc8:	1c19      	adds	r1, r3, #0
 8007fca:	1c20      	adds	r0, r4, #0
 8007fcc:	f7f8 fd80 	bl	8000ad0 <__aeabi_fdiv>
 8007fd0:	1c03      	adds	r3, r0, #0
 8007fd2:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8007fd4:	68b9      	ldr	r1, [r7, #8]
 8007fd6:	20fe      	movs	r0, #254	@ 0xfe
 8007fd8:	0580      	lsls	r0, r0, #22
 8007fda:	f7f9 f89d 	bl	8001118 <__aeabi_fsub>
 8007fde:	1c03      	adds	r3, r0, #0
 8007fe0:	1c18      	adds	r0, r3, #0
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	22a0      	movs	r2, #160	@ 0xa0
 8007fe6:	589b      	ldr	r3, [r3, r2]
 8007fe8:	1c19      	adds	r1, r3, #0
 8007fea:	f7f8 ff57 	bl	8000e9c <__aeabi_fmul>
 8007fee:	1c03      	adds	r3, r0, #0
 8007ff0:	1c1c      	adds	r4, r3, #0
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	68b8      	ldr	r0, [r7, #8]
 8007ff6:	f7f8 ff51 	bl	8000e9c <__aeabi_fmul>
 8007ffa:	1c03      	adds	r3, r0, #0
 8007ffc:	1c19      	adds	r1, r3, #0
 8007ffe:	1c20      	adds	r0, r4, #0
 8008000:	f7f8 fbdc 	bl	80007bc <__aeabi_fadd>
 8008004:	1c03      	adds	r3, r0, #0
 8008006:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	22a0      	movs	r2, #160	@ 0xa0
 800800c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	22a0      	movs	r2, #160	@ 0xa0
 8008012:	589b      	ldr	r3, [r3, r2]
}
 8008014:	1c18      	adds	r0, r3, #0
 8008016:	46bd      	mov	sp, r7
 8008018:	b007      	add	sp, #28
 800801a:	bd90      	pop	{r4, r7, pc}
 800801c:	be4ccccd 	.word	0xbe4ccccd
 8008020:	43f00000 	.word	0x43f00000
 8008024:	41a00000 	.word	0x41a00000

08008028 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6039      	str	r1, [r7, #0]
 8008030:	0011      	movs	r1, r2
 8008032:	1dfb      	adds	r3, r7, #7
 8008034:	1c02      	adds	r2, r0, #0
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	1dbb      	adds	r3, r7, #6
 800803a:	1c0a      	adds	r2, r1, #0
 800803c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800803e:	4b08      	ldr	r3, [pc, #32]	@ (8008060 <ReadRegister+0x38>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d008      	beq.n	8008058 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8008046:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <ReadRegister+0x38>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	1dba      	adds	r2, r7, #6
 800804c:	7814      	ldrb	r4, [r2, #0]
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	1dfa      	adds	r2, r7, #7
 8008052:	7810      	ldrb	r0, [r2, #0]
 8008054:	0022      	movs	r2, r4
 8008056:	4798      	blx	r3
  }
}
 8008058:	46c0      	nop			@ (mov r8, r8)
 800805a:	46bd      	mov	sp, r7
 800805c:	b003      	add	sp, #12
 800805e:	bd90      	pop	{r4, r7, pc}
 8008060:	200027e4 	.word	0x200027e4

08008064 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008064:	b590      	push	{r4, r7, lr}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6039      	str	r1, [r7, #0]
 800806c:	0011      	movs	r1, r2
 800806e:	1dfb      	adds	r3, r7, #7
 8008070:	1c02      	adds	r2, r0, #0
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	1dbb      	adds	r3, r7, #6
 8008076:	1c0a      	adds	r2, r1, #0
 8008078:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800807a:	4b08      	ldr	r3, [pc, #32]	@ (800809c <WriteRegister+0x38>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008082:	4b06      	ldr	r3, [pc, #24]	@ (800809c <WriteRegister+0x38>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1dba      	adds	r2, r7, #6
 8008088:	7814      	ldrb	r4, [r2, #0]
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	1dfa      	adds	r2, r7, #7
 800808e:	7810      	ldrb	r0, [r2, #0]
 8008090:	0022      	movs	r2, r4
 8008092:	4798      	blx	r3
  }
}
 8008094:	46c0      	nop			@ (mov r8, r8)
 8008096:	46bd      	mov	sp, r7
 8008098:	b003      	add	sp, #12
 800809a:	bd90      	pop	{r4, r7, pc}
 800809c:	200027e8 	.word	0x200027e8

080080a0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80080aa:	4b07      	ldr	r3, [pc, #28]	@ (80080c8 <SGP_Init+0x28>)
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80080b0:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <SGP_Init+0x2c>)
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80080b6:	4b06      	ldr	r3, [pc, #24]	@ (80080d0 <SGP_Init+0x30>)
 80080b8:	2100      	movs	r1, #0
 80080ba:	0018      	movs	r0, r3
 80080bc:	f7ff f930 	bl	8007320 <GasIndexAlgorithm_init>
}
 80080c0:	46c0      	nop			@ (mov r8, r8)
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b002      	add	sp, #8
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200027e4 	.word	0x200027e4
 80080cc:	200027e8 	.word	0x200027e8
 80080d0:	200027f8 	.word	0x200027f8

080080d4 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80080d8:	4b13      	ldr	r3, [pc, #76]	@ (8008128 <SGP_StartMeasurement+0x54>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00d      	beq.n	80080fc <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80080e0:	4b12      	ldr	r3, [pc, #72]	@ (800812c <SGP_StartMeasurement+0x58>)
 80080e2:	2208      	movs	r2, #8
 80080e4:	0019      	movs	r1, r3
 80080e6:	2059      	movs	r0, #89	@ 0x59
 80080e8:	f7ff ffbc 	bl	8008064 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80080ec:	f001 fbf0 	bl	80098d0 <GetCurrentHalTicks>
 80080f0:	0003      	movs	r3, r0
 80080f2:	331e      	adds	r3, #30
 80080f4:	001a      	movs	r2, r3
 80080f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008130 <SGP_StartMeasurement+0x5c>)
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e00c      	b.n	8008116 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80080fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008134 <SGP_StartMeasurement+0x60>)
 80080fe:	2208      	movs	r2, #8
 8008100:	0019      	movs	r1, r3
 8008102:	2059      	movs	r0, #89	@ 0x59
 8008104:	f7ff ffae 	bl	8008064 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008108:	f001 fbe2 	bl	80098d0 <GetCurrentHalTicks>
 800810c:	0003      	movs	r3, r0
 800810e:	33aa      	adds	r3, #170	@ 0xaa
 8008110:	001a      	movs	r2, r3
 8008112:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <SGP_StartMeasurement+0x64>)
 8008114:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8008116:	4b09      	ldr	r3, [pc, #36]	@ (800813c <SGP_StartMeasurement+0x68>)
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800811c:	4b08      	ldr	r3, [pc, #32]	@ (8008140 <SGP_StartMeasurement+0x6c>)
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
}
 8008122:	46c0      	nop			@ (mov r8, r8)
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	200028a0 	.word	0x200028a0
 800812c:	2000003c 	.word	0x2000003c
 8008130:	20000050 	.word	0x20000050
 8008134:	20000034 	.word	0x20000034
 8008138:	20000048 	.word	0x20000048
 800813c:	200027f6 	.word	0x200027f6
 8008140:	200027f7 	.word	0x200027f7

08008144 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
 8008148:	4b04      	ldr	r3, [pc, #16]	@ (800815c <SGP_HeatedUp+0x18>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	0018      	movs	r0, r3
 800814e:	f001 fadd 	bl	800970c <TimestampIsReached>
 8008152:	0003      	movs	r3, r0
 8008154:	0018      	movs	r0, r3
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	46c0      	nop			@ (mov r8, r8)
 800815c:	20000048 	.word	0x20000048

08008160 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008164:	4b04      	ldr	r3, [pc, #16]	@ (8008178 <SGP_MeasurementReady+0x18>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	0018      	movs	r0, r3
 800816a:	f001 facf 	bl	800970c <TimestampIsReached>
 800816e:	0003      	movs	r3, r0
}
 8008170:	0018      	movs	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	20000050 	.word	0x20000050

0800817c <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008180:	4b04      	ldr	r3, [pc, #16]	@ (8008194 <SGP_MeasurementDone+0x18>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	0018      	movs	r0, r3
 8008186:	f001 fac1 	bl	800970c <TimestampIsReached>
 800818a:	0003      	movs	r3, r0
}
 800818c:	0018      	movs	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	46c0      	nop			@ (mov r8, r8)
 8008194:	2000004c 	.word	0x2000004c

08008198 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800819c:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <SGP_TurnHeaterOff+0x18>)
 800819e:	2202      	movs	r2, #2
 80081a0:	0019      	movs	r1, r3
 80081a2:	2059      	movs	r0, #89	@ 0x59
 80081a4:	f7ff ff5e 	bl	8008064 <WriteRegister>
}
 80081a8:	46c0      	nop			@ (mov r8, r8)
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	2000002c 	.word	0x2000002c

080081b4 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80081b4:	b5b0      	push	{r4, r5, r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80081bc:	f7ff ffc2 	bl	8008144 <SGP_HeatedUp>
 80081c0:	1e03      	subs	r3, r0, #0
 80081c2:	d038      	beq.n	8008236 <SGP_GetMeasurementValues+0x82>
 80081c4:	4bd5      	ldr	r3, [pc, #852]	@ (800851c <SGP_GetMeasurementValues+0x368>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2201      	movs	r2, #1
 80081ca:	4053      	eors	r3, r2
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d031      	beq.n	8008236 <SGP_GetMeasurementValues+0x82>
 80081d2:	4bd3      	ldr	r3, [pc, #844]	@ (8008520 <SGP_GetMeasurementValues+0x36c>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2201      	movs	r2, #1
 80081d8:	4053      	eors	r3, r2
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d02a      	beq.n	8008236 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80081e0:	4ad0      	ldr	r2, [pc, #832]	@ (8008524 <SGP_GetMeasurementValues+0x370>)
 80081e2:	4bd1      	ldr	r3, [pc, #836]	@ (8008528 <SGP_GetMeasurementValues+0x374>)
 80081e4:	0019      	movs	r1, r3
 80081e6:	2003      	movs	r0, #3
 80081e8:	f001 fae6 	bl	80097b8 <CreateLine>
    HeatUpIsDone = true;
 80081ec:	4bcb      	ldr	r3, [pc, #812]	@ (800851c <SGP_GetMeasurementValues+0x368>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80081f2:	4bce      	ldr	r3, [pc, #824]	@ (800852c <SGP_GetMeasurementValues+0x378>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00d      	beq.n	8008216 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80081fa:	4bcd      	ldr	r3, [pc, #820]	@ (8008530 <SGP_GetMeasurementValues+0x37c>)
 80081fc:	2208      	movs	r2, #8
 80081fe:	0019      	movs	r1, r3
 8008200:	2059      	movs	r0, #89	@ 0x59
 8008202:	f7ff ff2f 	bl	8008064 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008206:	f001 fb63 	bl	80098d0 <GetCurrentHalTicks>
 800820a:	0003      	movs	r3, r0
 800820c:	331e      	adds	r3, #30
 800820e:	001a      	movs	r2, r3
 8008210:	4bc8      	ldr	r3, [pc, #800]	@ (8008534 <SGP_GetMeasurementValues+0x380>)
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e00c      	b.n	8008230 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008216:	4bc8      	ldr	r3, [pc, #800]	@ (8008538 <SGP_GetMeasurementValues+0x384>)
 8008218:	2208      	movs	r2, #8
 800821a:	0019      	movs	r1, r3
 800821c:	2059      	movs	r0, #89	@ 0x59
 800821e:	f7ff ff21 	bl	8008064 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008222:	f001 fb55 	bl	80098d0 <GetCurrentHalTicks>
 8008226:	0003      	movs	r3, r0
 8008228:	331e      	adds	r3, #30
 800822a:	001a      	movs	r2, r3
 800822c:	4bc1      	ldr	r3, [pc, #772]	@ (8008534 <SGP_GetMeasurementValues+0x380>)
 800822e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008230:	4bbb      	ldr	r3, [pc, #748]	@ (8008520 <SGP_GetMeasurementValues+0x36c>)
 8008232:	2201      	movs	r2, #1
 8008234:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8008236:	4bb9      	ldr	r3, [pc, #740]	@ (800851c <SGP_GetMeasurementValues+0x368>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d100      	bne.n	8008240 <SGP_GetMeasurementValues+0x8c>
 800823e:	e1a9      	b.n	8008594 <SGP_GetMeasurementValues+0x3e0>
 8008240:	f7ff ff8e 	bl	8008160 <SGP_MeasurementReady>
 8008244:	1e03      	subs	r3, r0, #0
 8008246:	d100      	bne.n	800824a <SGP_GetMeasurementValues+0x96>
 8008248:	e1a4      	b.n	8008594 <SGP_GetMeasurementValues+0x3e0>
 800824a:	4bbc      	ldr	r3, [pc, #752]	@ (800853c <SGP_GetMeasurementValues+0x388>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2201      	movs	r2, #1
 8008250:	4053      	eors	r3, r2
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d100      	bne.n	800825a <SGP_GetMeasurementValues+0xa6>
 8008258:	e19c      	b.n	8008594 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800825a:	4bb9      	ldr	r3, [pc, #740]	@ (8008540 <SGP_GetMeasurementValues+0x38c>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	4ab8      	ldr	r2, [pc, #736]	@ (8008544 <SGP_GetMeasurementValues+0x390>)
 8008262:	49b1      	ldr	r1, [pc, #708]	@ (8008528 <SGP_GetMeasurementValues+0x374>)
 8008264:	2003      	movs	r0, #3
 8008266:	f001 faa7 	bl	80097b8 <CreateLine>
    MeasurementIsReady = true;
 800826a:	4bb4      	ldr	r3, [pc, #720]	@ (800853c <SGP_GetMeasurementValues+0x388>)
 800826c:	2201      	movs	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8008270:	4bb5      	ldr	r3, [pc, #724]	@ (8008548 <SGP_GetMeasurementValues+0x394>)
 8008272:	2203      	movs	r2, #3
 8008274:	0019      	movs	r1, r3
 8008276:	2059      	movs	r0, #89	@ 0x59
 8008278:	f7ff fed6 	bl	8008028 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800827c:	4bb2      	ldr	r3, [pc, #712]	@ (8008548 <SGP_GetMeasurementValues+0x394>)
 800827e:	2203      	movs	r2, #3
 8008280:	2103      	movs	r1, #3
 8008282:	0018      	movs	r0, r3
 8008284:	f000 f9ec 	bl	8008660 <CheckCRC>
 8008288:	0003      	movs	r3, r0
 800828a:	001a      	movs	r2, r3
 800828c:	2301      	movs	r3, #1
 800828e:	4053      	eors	r3, r2
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d02a      	beq.n	80082ec <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8008296:	4aad      	ldr	r2, [pc, #692]	@ (800854c <SGP_GetMeasurementValues+0x398>)
 8008298:	4bad      	ldr	r3, [pc, #692]	@ (8008550 <SGP_GetMeasurementValues+0x39c>)
 800829a:	0019      	movs	r1, r3
 800829c:	2001      	movs	r0, #1
 800829e:	f001 fa8b 	bl	80097b8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80082a2:	4aac      	ldr	r2, [pc, #688]	@ (8008554 <SGP_GetMeasurementValues+0x3a0>)
 80082a4:	4bac      	ldr	r3, [pc, #688]	@ (8008558 <SGP_GetMeasurementValues+0x3a4>)
 80082a6:	0019      	movs	r1, r3
 80082a8:	2002      	movs	r0, #2
 80082aa:	f001 fa85 	bl	80097b8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80082ae:	230f      	movs	r3, #15
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	e012      	b.n	80082de <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80082b8:	240f      	movs	r4, #15
 80082ba:	193b      	adds	r3, r7, r4
 80082bc:	7818      	ldrb	r0, [r3, #0]
 80082be:	193b      	adds	r3, r7, r4
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	4aa1      	ldr	r2, [pc, #644]	@ (8008548 <SGP_GetMeasurementValues+0x394>)
 80082c4:	5cd3      	ldrb	r3, [r2, r3]
 80082c6:	4aa5      	ldr	r2, [pc, #660]	@ (800855c <SGP_GetMeasurementValues+0x3a8>)
 80082c8:	4997      	ldr	r1, [pc, #604]	@ (8008528 <SGP_GetMeasurementValues+0x374>)
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	0003      	movs	r3, r0
 80082ce:	2003      	movs	r0, #3
 80082d0:	f001 fa72 	bl	80097b8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80082d4:	193b      	adds	r3, r7, r4
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	193b      	adds	r3, r7, r4
 80082da:	3201      	adds	r2, #1
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	230f      	movs	r3, #15
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d9e7      	bls.n	80082b8 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e16b      	b.n	80085c4 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80082ec:	f001 faf0 	bl	80098d0 <GetCurrentHalTicks>
 80082f0:	0003      	movs	r3, r0
 80082f2:	22fa      	movs	r2, #250	@ 0xfa
 80082f4:	0092      	lsls	r2, r2, #2
 80082f6:	189a      	adds	r2, r3, r2
 80082f8:	4b99      	ldr	r3, [pc, #612]	@ (8008560 <SGP_GetMeasurementValues+0x3ac>)
 80082fa:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80082fc:	f7ff ff4c 	bl	8008198 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8008300:	4b8f      	ldr	r3, [pc, #572]	@ (8008540 <SGP_GetMeasurementValues+0x38c>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	4b8d      	ldr	r3, [pc, #564]	@ (8008540 <SGP_GetMeasurementValues+0x38c>)
 800830a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800830c:	4b8c      	ldr	r3, [pc, #560]	@ (8008540 <SGP_GetMeasurementValues+0x38c>)
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	4b94      	ldr	r3, [pc, #592]	@ (8008564 <SGP_GetMeasurementValues+0x3b0>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d200      	bcs.n	800831a <SGP_GetMeasurementValues+0x166>
 8008318:	e13c      	b.n	8008594 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800831a:	4b8b      	ldr	r3, [pc, #556]	@ (8008548 <SGP_GetMeasurementValues+0x394>)
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	b21a      	sxth	r2, r3
 8008322:	4b89      	ldr	r3, [pc, #548]	@ (8008548 <SGP_GetMeasurementValues+0x394>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	b21b      	sxth	r3, r3
 8008328:	4313      	orrs	r3, r2
 800832a:	b21a      	sxth	r2, r3
 800832c:	240c      	movs	r4, #12
 800832e:	193b      	adds	r3, r7, r4
 8008330:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8008332:	193b      	adds	r3, r7, r4
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	4a8c      	ldr	r2, [pc, #560]	@ (8008568 <SGP_GetMeasurementValues+0x3b4>)
 8008338:	497b      	ldr	r1, [pc, #492]	@ (8008528 <SGP_GetMeasurementValues+0x374>)
 800833a:	2003      	movs	r0, #3
 800833c:	f001 fa3c 	bl	80097b8 <CreateLine>
      int32_t tempVocIndex = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8008344:	193b      	adds	r3, r7, r4
 8008346:	8819      	ldrh	r1, [r3, #0]
 8008348:	2308      	movs	r3, #8
 800834a:	18fa      	adds	r2, r7, r3
 800834c:	4b87      	ldr	r3, [pc, #540]	@ (800856c <SGP_GetMeasurementValues+0x3b8>)
 800834e:	0018      	movs	r0, r3
 8008350:	f7ff f848 	bl	80073e4 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4a86      	ldr	r2, [pc, #536]	@ (8008570 <SGP_GetMeasurementValues+0x3bc>)
 8008358:	4973      	ldr	r1, [pc, #460]	@ (8008528 <SGP_GetMeasurementValues+0x374>)
 800835a:	2003      	movs	r0, #3
 800835c:	f001 fa2c 	bl	80097b8 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	dd5a      	ble.n	8008424 <SGP_GetMeasurementValues+0x270>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b64      	cmp	r3, #100	@ 0x64
 8008374:	dc56      	bgt.n	8008424 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	0018      	movs	r0, r3
 800837c:	f7fa ff9e 	bl	80032bc <__aeabi_i2d>
 8008380:	2200      	movs	r2, #0
 8008382:	4b7c      	ldr	r3, [pc, #496]	@ (8008574 <SGP_GetMeasurementValues+0x3c0>)
 8008384:	f7f9 fc94 	bl	8001cb0 <__aeabi_ddiv>
 8008388:	0002      	movs	r2, r0
 800838a:	000b      	movs	r3, r1
 800838c:	2000      	movs	r0, #0
 800838e:	497a      	ldr	r1, [pc, #488]	@ (8008578 <SGP_GetMeasurementValues+0x3c4>)
 8008390:	f7fa fb9a 	bl	8002ac8 <__aeabi_dsub>
 8008394:	0002      	movs	r2, r0
 8008396:	000b      	movs	r3, r1
 8008398:	0014      	movs	r4, r2
 800839a:	001d      	movs	r5, r3
 800839c:	4b77      	ldr	r3, [pc, #476]	@ (800857c <SGP_GetMeasurementValues+0x3c8>)
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	0018      	movs	r0, r3
 80083a2:	f7fa ff8b 	bl	80032bc <__aeabi_i2d>
 80083a6:	0002      	movs	r2, r0
 80083a8:	000b      	movs	r3, r1
 80083aa:	0020      	movs	r0, r4
 80083ac:	0029      	movs	r1, r5
 80083ae:	f7fa f8c3 	bl	8002538 <__aeabi_dmul>
 80083b2:	0002      	movs	r2, r0
 80083b4:	000b      	movs	r3, r1
 80083b6:	0010      	movs	r0, r2
 80083b8:	0019      	movs	r1, r3
 80083ba:	f7f8 f915 	bl	80005e8 <__aeabi_d2uiz>
 80083be:	0003      	movs	r3, r0
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008580 <SGP_GetMeasurementValues+0x3cc>)
 80083c4:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	0018      	movs	r0, r3
 80083cc:	f7fa ff76 	bl	80032bc <__aeabi_i2d>
 80083d0:	2200      	movs	r2, #0
 80083d2:	4b68      	ldr	r3, [pc, #416]	@ (8008574 <SGP_GetMeasurementValues+0x3c0>)
 80083d4:	f7f9 fc6c 	bl	8001cb0 <__aeabi_ddiv>
 80083d8:	0002      	movs	r2, r0
 80083da:	000b      	movs	r3, r1
 80083dc:	0014      	movs	r4, r2
 80083de:	001d      	movs	r5, r3
 80083e0:	4b66      	ldr	r3, [pc, #408]	@ (800857c <SGP_GetMeasurementValues+0x3c8>)
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	0018      	movs	r0, r3
 80083e6:	f7fa ff69 	bl	80032bc <__aeabi_i2d>
 80083ea:	0002      	movs	r2, r0
 80083ec:	000b      	movs	r3, r1
 80083ee:	0020      	movs	r0, r4
 80083f0:	0029      	movs	r1, r5
 80083f2:	f7fa f8a1 	bl	8002538 <__aeabi_dmul>
 80083f6:	0002      	movs	r2, r0
 80083f8:	000b      	movs	r3, r1
 80083fa:	0010      	movs	r0, r2
 80083fc:	0019      	movs	r1, r3
 80083fe:	f7f8 f8f3 	bl	80005e8 <__aeabi_d2uiz>
 8008402:	0003      	movs	r3, r0
 8008404:	b29a      	uxth	r2, r3
 8008406:	4b5f      	ldr	r3, [pc, #380]	@ (8008584 <SGP_GetMeasurementValues+0x3d0>)
 8008408:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800840a:	4b5c      	ldr	r3, [pc, #368]	@ (800857c <SGP_GetMeasurementValues+0x3c8>)
 800840c:	881a      	ldrh	r2, [r3, #0]
 800840e:	4b5e      	ldr	r3, [pc, #376]	@ (8008588 <SGP_GetMeasurementValues+0x3d4>)
 8008410:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 8008412:	4b5d      	ldr	r3, [pc, #372]	@ (8008588 <SGP_GetMeasurementValues+0x3d4>)
 8008414:	8818      	ldrh	r0, [r3, #0]
 8008416:	4b5a      	ldr	r3, [pc, #360]	@ (8008580 <SGP_GetMeasurementValues+0x3cc>)
 8008418:	8819      	ldrh	r1, [r3, #0]
 800841a:	4b5a      	ldr	r3, [pc, #360]	@ (8008584 <SGP_GetMeasurementValues+0x3d0>)
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	001a      	movs	r2, r3
 8008420:	f000 fb8a 	bl	8008b38 <SetVocLED>
      }
      if(*vocIndex > 100){
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b64      	cmp	r3, #100	@ 0x64
 800842a:	dd66      	ble.n	80084fa <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	0018      	movs	r0, r3
 8008432:	f7fa ff43 	bl	80032bc <__aeabi_i2d>
 8008436:	2200      	movs	r2, #0
 8008438:	4b4e      	ldr	r3, [pc, #312]	@ (8008574 <SGP_GetMeasurementValues+0x3c0>)
 800843a:	f7fa fb45 	bl	8002ac8 <__aeabi_dsub>
 800843e:	0002      	movs	r2, r0
 8008440:	000b      	movs	r3, r1
 8008442:	0010      	movs	r0, r2
 8008444:	0019      	movs	r1, r3
 8008446:	2200      	movs	r2, #0
 8008448:	4b50      	ldr	r3, [pc, #320]	@ (800858c <SGP_GetMeasurementValues+0x3d8>)
 800844a:	f7f9 fc31 	bl	8001cb0 <__aeabi_ddiv>
 800844e:	0002      	movs	r2, r0
 8008450:	000b      	movs	r3, r1
 8008452:	0014      	movs	r4, r2
 8008454:	001d      	movs	r5, r3
 8008456:	4b49      	ldr	r3, [pc, #292]	@ (800857c <SGP_GetMeasurementValues+0x3c8>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	0018      	movs	r0, r3
 800845c:	f7fa ff2e 	bl	80032bc <__aeabi_i2d>
 8008460:	0002      	movs	r2, r0
 8008462:	000b      	movs	r3, r1
 8008464:	0020      	movs	r0, r4
 8008466:	0029      	movs	r1, r5
 8008468:	f7fa f866 	bl	8002538 <__aeabi_dmul>
 800846c:	0002      	movs	r2, r0
 800846e:	000b      	movs	r3, r1
 8008470:	0010      	movs	r0, r2
 8008472:	0019      	movs	r1, r3
 8008474:	f7f8 f8b8 	bl	80005e8 <__aeabi_d2uiz>
 8008478:	0003      	movs	r3, r0
 800847a:	b29a      	uxth	r2, r3
 800847c:	4b40      	ldr	r3, [pc, #256]	@ (8008580 <SGP_GetMeasurementValues+0x3cc>)
 800847e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	0018      	movs	r0, r3
 8008486:	f7fa ff19 	bl	80032bc <__aeabi_i2d>
 800848a:	2200      	movs	r2, #0
 800848c:	4b39      	ldr	r3, [pc, #228]	@ (8008574 <SGP_GetMeasurementValues+0x3c0>)
 800848e:	f7fa fb1b 	bl	8002ac8 <__aeabi_dsub>
 8008492:	0002      	movs	r2, r0
 8008494:	000b      	movs	r3, r1
 8008496:	0010      	movs	r0, r2
 8008498:	0019      	movs	r1, r3
 800849a:	2200      	movs	r2, #0
 800849c:	4b3b      	ldr	r3, [pc, #236]	@ (800858c <SGP_GetMeasurementValues+0x3d8>)
 800849e:	f7f9 fc07 	bl	8001cb0 <__aeabi_ddiv>
 80084a2:	0002      	movs	r2, r0
 80084a4:	000b      	movs	r3, r1
 80084a6:	2000      	movs	r0, #0
 80084a8:	4933      	ldr	r1, [pc, #204]	@ (8008578 <SGP_GetMeasurementValues+0x3c4>)
 80084aa:	f7fa fb0d 	bl	8002ac8 <__aeabi_dsub>
 80084ae:	0002      	movs	r2, r0
 80084b0:	000b      	movs	r3, r1
 80084b2:	0014      	movs	r4, r2
 80084b4:	001d      	movs	r5, r3
 80084b6:	4b31      	ldr	r3, [pc, #196]	@ (800857c <SGP_GetMeasurementValues+0x3c8>)
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	0018      	movs	r0, r3
 80084bc:	f7fa fefe 	bl	80032bc <__aeabi_i2d>
 80084c0:	0002      	movs	r2, r0
 80084c2:	000b      	movs	r3, r1
 80084c4:	0020      	movs	r0, r4
 80084c6:	0029      	movs	r1, r5
 80084c8:	f7fa f836 	bl	8002538 <__aeabi_dmul>
 80084cc:	0002      	movs	r2, r0
 80084ce:	000b      	movs	r3, r1
 80084d0:	0010      	movs	r0, r2
 80084d2:	0019      	movs	r1, r3
 80084d4:	f7f8 f888 	bl	80005e8 <__aeabi_d2uiz>
 80084d8:	0003      	movs	r3, r0
 80084da:	b29a      	uxth	r2, r3
 80084dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008588 <SGP_GetMeasurementValues+0x3d4>)
 80084de:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80084e0:	4b26      	ldr	r3, [pc, #152]	@ (800857c <SGP_GetMeasurementValues+0x3c8>)
 80084e2:	881a      	ldrh	r2, [r3, #0]
 80084e4:	4b27      	ldr	r3, [pc, #156]	@ (8008584 <SGP_GetMeasurementValues+0x3d0>)
 80084e6:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 80084e8:	4b27      	ldr	r3, [pc, #156]	@ (8008588 <SGP_GetMeasurementValues+0x3d4>)
 80084ea:	8818      	ldrh	r0, [r3, #0]
 80084ec:	4b24      	ldr	r3, [pc, #144]	@ (8008580 <SGP_GetMeasurementValues+0x3cc>)
 80084ee:	8819      	ldrh	r1, [r3, #0]
 80084f0:	4b24      	ldr	r3, [pc, #144]	@ (8008584 <SGP_GetMeasurementValues+0x3d0>)
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	001a      	movs	r2, r3
 80084f6:	f000 fb1f 	bl	8008b38 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 80084fa:	4b11      	ldr	r3, [pc, #68]	@ (8008540 <SGP_GetMeasurementValues+0x38c>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8008500:	4a23      	ldr	r2, [pc, #140]	@ (8008590 <SGP_GetMeasurementValues+0x3dc>)
 8008502:	4b09      	ldr	r3, [pc, #36]	@ (8008528 <SGP_GetMeasurementValues+0x374>)
 8008504:	0019      	movs	r1, r3
 8008506:	2003      	movs	r0, #3
 8008508:	f001 f956 	bl	80097b8 <CreateLine>
      HT_MeasurementReceived = false;
 800850c:	4b07      	ldr	r3, [pc, #28]	@ (800852c <SGP_GetMeasurementValues+0x378>)
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8008512:	4b03      	ldr	r3, [pc, #12]	@ (8008520 <SGP_GetMeasurementValues+0x36c>)
 8008514:	2200      	movs	r2, #0
 8008516:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8008518:	2301      	movs	r3, #1
 800851a:	e053      	b.n	80085c4 <SGP_GetMeasurementValues+0x410>
 800851c:	200027f6 	.word	0x200027f6
 8008520:	200028a1 	.word	0x200028a1
 8008524:	0801b62c 	.word	0x0801b62c
 8008528:	0801b658 	.word	0x0801b658
 800852c:	200028a0 	.word	0x200028a0
 8008530:	2000003c 	.word	0x2000003c
 8008534:	20000050 	.word	0x20000050
 8008538:	20000034 	.word	0x20000034
 800853c:	200027f7 	.word	0x200027f7
 8008540:	200027f5 	.word	0x200027f5
 8008544:	0801b65c 	.word	0x0801b65c
 8008548:	200027ec 	.word	0x200027ec
 800854c:	0801b68c 	.word	0x0801b68c
 8008550:	0801b6b0 	.word	0x0801b6b0
 8008554:	0801b6b4 	.word	0x0801b6b4
 8008558:	0801b6d4 	.word	0x0801b6d4
 800855c:	0801b6d8 	.word	0x0801b6d8
 8008560:	2000004c 	.word	0x2000004c
 8008564:	20000044 	.word	0x20000044
 8008568:	0801b6f8 	.word	0x0801b6f8
 800856c:	200027f8 	.word	0x200027f8
 8008570:	0801b70c 	.word	0x0801b70c
 8008574:	40590000 	.word	0x40590000
 8008578:	3ff00000 	.word	0x3ff00000
 800857c:	20000054 	.word	0x20000054
 8008580:	200028a6 	.word	0x200028a6
 8008584:	200028a4 	.word	0x200028a4
 8008588:	200028a2 	.word	0x200028a2
 800858c:	40790000 	.word	0x40790000
 8008590:	0801b720 	.word	0x0801b720
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8008594:	f7ff fdf2 	bl	800817c <SGP_MeasurementDone>
 8008598:	1e03      	subs	r3, r0, #0
 800859a:	d012      	beq.n	80085c2 <SGP_GetMeasurementValues+0x40e>
 800859c:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <SGP_GetMeasurementValues+0x418>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00e      	beq.n	80085c2 <SGP_GetMeasurementValues+0x40e>
 80085a4:	4b0a      	ldr	r3, [pc, #40]	@ (80085d0 <SGP_GetMeasurementValues+0x41c>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80085ac:	4a09      	ldr	r2, [pc, #36]	@ (80085d4 <SGP_GetMeasurementValues+0x420>)
 80085ae:	4b0a      	ldr	r3, [pc, #40]	@ (80085d8 <SGP_GetMeasurementValues+0x424>)
 80085b0:	0019      	movs	r1, r3
 80085b2:	2003      	movs	r0, #3
 80085b4:	f001 f900 	bl	80097b8 <CreateLine>
    SGP_StartMeasurement();
 80085b8:	f7ff fd8c 	bl	80080d4 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80085bc:	4b07      	ldr	r3, [pc, #28]	@ (80085dc <SGP_GetMeasurementValues+0x428>)
 80085be:	2200      	movs	r2, #0
 80085c0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	0018      	movs	r0, r3
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b004      	add	sp, #16
 80085ca:	bdb0      	pop	{r4, r5, r7, pc}
 80085cc:	200027f6 	.word	0x200027f6
 80085d0:	200027f7 	.word	0x200027f7
 80085d4:	0801b744 	.word	0x0801b744
 80085d8:	0801b658 	.word	0x0801b658
 80085dc:	200028a1 	.word	0x200028a1

080085e0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80085e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008650 <SGP_DeviceConnected+0x70>)
 80085e8:	2202      	movs	r2, #2
 80085ea:	0019      	movs	r1, r3
 80085ec:	2059      	movs	r0, #89	@ 0x59
 80085ee:	f7ff fd39 	bl	8008064 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80085f2:	2001      	movs	r0, #1
 80085f4:	f001 fc86 	bl	8009f04 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80085f8:	4b16      	ldr	r3, [pc, #88]	@ (8008654 <SGP_DeviceConnected+0x74>)
 80085fa:	2209      	movs	r2, #9
 80085fc:	0019      	movs	r1, r3
 80085fe:	2059      	movs	r0, #89	@ 0x59
 8008600:	f7ff fd12 	bl	8008028 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008604:	1dfb      	adds	r3, r7, #7
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	e011      	b.n	8008630 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800860c:	1dfb      	adds	r3, r7, #7
 800860e:	7818      	ldrb	r0, [r3, #0]
 8008610:	1dfb      	adds	r3, r7, #7
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4a0f      	ldr	r2, [pc, #60]	@ (8008654 <SGP_DeviceConnected+0x74>)
 8008616:	5cd3      	ldrb	r3, [r2, r3]
 8008618:	4a0f      	ldr	r2, [pc, #60]	@ (8008658 <SGP_DeviceConnected+0x78>)
 800861a:	4910      	ldr	r1, [pc, #64]	@ (800865c <SGP_DeviceConnected+0x7c>)
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	0003      	movs	r3, r0
 8008620:	2002      	movs	r0, #2
 8008622:	f001 f8c9 	bl	80097b8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008626:	1dfb      	adds	r3, r7, #7
 8008628:	781a      	ldrb	r2, [r3, #0]
 800862a:	1dfb      	adds	r3, r7, #7
 800862c:	3201      	adds	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	1dfb      	adds	r3, r7, #7
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b08      	cmp	r3, #8
 8008636:	d9e9      	bls.n	800860c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8008638:	4b06      	ldr	r3, [pc, #24]	@ (8008654 <SGP_DeviceConnected+0x74>)
 800863a:	2203      	movs	r2, #3
 800863c:	2109      	movs	r1, #9
 800863e:	0018      	movs	r0, r3
 8008640:	f000 f80e 	bl	8008660 <CheckCRC>
 8008644:	0003      	movs	r3, r0
}
 8008646:	0018      	movs	r0, r3
 8008648:	46bd      	mov	sp, r7
 800864a:	b002      	add	sp, #8
 800864c:	bd80      	pop	{r7, pc}
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	20000030 	.word	0x20000030
 8008654:	200027ec 	.word	0x200027ec
 8008658:	0801b764 	.word	0x0801b764
 800865c:	0801b6d4 	.word	0x0801b6d4

08008660 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8008660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008662:	b08f      	sub	sp, #60	@ 0x3c
 8008664:	af00      	add	r7, sp, #0
 8008666:	6278      	str	r0, [r7, #36]	@ 0x24
 8008668:	0008      	movs	r0, r1
 800866a:	0011      	movs	r1, r2
 800866c:	2323      	movs	r3, #35	@ 0x23
 800866e:	18fb      	adds	r3, r7, r3
 8008670:	1c02      	adds	r2, r0, #0
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	2322      	movs	r3, #34	@ 0x22
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	1c0a      	adds	r2, r1, #0
 800867a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800867c:	2317      	movs	r3, #23
 800867e:	2220      	movs	r2, #32
 8008680:	189b      	adds	r3, r3, r2
 8008682:	19db      	adds	r3, r3, r7
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e09f      	b.n	80087ca <CheckCRC+0x16a>
 800868a:	466b      	mov	r3, sp
 800868c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800868e:	2322      	movs	r3, #34	@ 0x22
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	001a      	movs	r2, r3
 8008696:	3a01      	subs	r2, #1
 8008698:	633a      	str	r2, [r7, #48]	@ 0x30
 800869a:	60bb      	str	r3, [r7, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	60fa      	str	r2, [r7, #12]
 80086a0:	68b8      	ldr	r0, [r7, #8]
 80086a2:	68f9      	ldr	r1, [r7, #12]
 80086a4:	0002      	movs	r2, r0
 80086a6:	0f52      	lsrs	r2, r2, #29
 80086a8:	000c      	movs	r4, r1
 80086aa:	00e4      	lsls	r4, r4, #3
 80086ac:	61fc      	str	r4, [r7, #28]
 80086ae:	69fc      	ldr	r4, [r7, #28]
 80086b0:	4314      	orrs	r4, r2
 80086b2:	61fc      	str	r4, [r7, #28]
 80086b4:	0002      	movs	r2, r0
 80086b6:	00d2      	lsls	r2, r2, #3
 80086b8:	61ba      	str	r2, [r7, #24]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	2200      	movs	r2, #0
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	6838      	ldr	r0, [r7, #0]
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	0002      	movs	r2, r0
 80086c6:	0f52      	lsrs	r2, r2, #29
 80086c8:	000c      	movs	r4, r1
 80086ca:	00e4      	lsls	r4, r4, #3
 80086cc:	617c      	str	r4, [r7, #20]
 80086ce:	697c      	ldr	r4, [r7, #20]
 80086d0:	4314      	orrs	r4, r2
 80086d2:	617c      	str	r4, [r7, #20]
 80086d4:	0002      	movs	r2, r0
 80086d6:	00d2      	lsls	r2, r2, #3
 80086d8:	613a      	str	r2, [r7, #16]
 80086da:	3307      	adds	r3, #7
 80086dc:	08db      	lsrs	r3, r3, #3
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	466a      	mov	r2, sp
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	469d      	mov	sp, r3
 80086e6:	466b      	mov	r3, sp
 80086e8:	3300      	adds	r3, #0
 80086ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80086ec:	2316      	movs	r3, #22
 80086ee:	2220      	movs	r2, #32
 80086f0:	189b      	adds	r3, r3, r2
 80086f2:	19db      	adds	r3, r3, r7
 80086f4:	2200      	movs	r2, #0
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e01e      	b.n	8008738 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80086fa:	2317      	movs	r3, #23
 80086fc:	2220      	movs	r2, #32
 80086fe:	189b      	adds	r3, r3, r2
 8008700:	19db      	adds	r3, r3, r7
 8008702:	781a      	ldrb	r2, [r3, #0]
 8008704:	2116      	movs	r1, #22
 8008706:	2320      	movs	r3, #32
 8008708:	18cb      	adds	r3, r1, r3
 800870a:	19db      	adds	r3, r3, r7
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	18d3      	adds	r3, r2, r3
 8008710:	001a      	movs	r2, r3
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	189a      	adds	r2, r3, r2
 8008716:	0008      	movs	r0, r1
 8008718:	2320      	movs	r3, #32
 800871a:	18cb      	adds	r3, r1, r3
 800871c:	19db      	adds	r3, r3, r7
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	7811      	ldrb	r1, [r2, #0]
 8008722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008724:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8008726:	2320      	movs	r3, #32
 8008728:	18c3      	adds	r3, r0, r3
 800872a:	19db      	adds	r3, r3, r7
 800872c:	781a      	ldrb	r2, [r3, #0]
 800872e:	2320      	movs	r3, #32
 8008730:	18c3      	adds	r3, r0, r3
 8008732:	19db      	adds	r3, r3, r7
 8008734:	3201      	adds	r2, #1
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	2316      	movs	r3, #22
 800873a:	2220      	movs	r2, #32
 800873c:	189b      	adds	r3, r3, r2
 800873e:	19da      	adds	r2, r3, r7
 8008740:	2322      	movs	r3, #34	@ 0x22
 8008742:	18fb      	adds	r3, r7, r3
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d3d6      	bcc.n	80086fa <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800874c:	2417      	movs	r4, #23
 800874e:	2320      	movs	r3, #32
 8008750:	18e3      	adds	r3, r4, r3
 8008752:	19db      	adds	r3, r3, r7
 8008754:	781a      	ldrb	r2, [r3, #0]
 8008756:	2322      	movs	r3, #34	@ 0x22
 8008758:	18fb      	adds	r3, r7, r3
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	18d3      	adds	r3, r2, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008762:	18d2      	adds	r2, r2, r3
 8008764:	250b      	movs	r5, #11
 8008766:	2320      	movs	r3, #32
 8008768:	18eb      	adds	r3, r5, r3
 800876a:	19db      	adds	r3, r3, r7
 800876c:	7812      	ldrb	r2, [r2, #0]
 800876e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008770:	2322      	movs	r3, #34	@ 0x22
 8008772:	18fb      	adds	r3, r7, r3
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	3b01      	subs	r3, #1
 8008778:	b2da      	uxtb	r2, r3
 800877a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877c:	0011      	movs	r1, r2
 800877e:	0018      	movs	r0, r3
 8008780:	f000 f838 	bl	80087f4 <CalculateCRC>
 8008784:	0003      	movs	r3, r0
 8008786:	001a      	movs	r2, r3
 8008788:	2320      	movs	r3, #32
 800878a:	18eb      	adds	r3, r5, r3
 800878c:	19db      	adds	r3, r3, r7
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	4293      	cmp	r3, r2
 8008792:	d00c      	beq.n	80087ae <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008794:	2320      	movs	r3, #32
 8008796:	18e3      	adds	r3, r4, r3
 8008798:	19db      	adds	r3, r3, r7
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	3301      	adds	r3, #1
 800879e:	4a13      	ldr	r2, [pc, #76]	@ (80087ec <CheckCRC+0x18c>)
 80087a0:	4913      	ldr	r1, [pc, #76]	@ (80087f0 <CheckCRC+0x190>)
 80087a2:	2001      	movs	r0, #1
 80087a4:	f001 f808 	bl	80097b8 <CreateLine>
      return false;
 80087a8:	2300      	movs	r3, #0
 80087aa:	46b5      	mov	sp, r6
 80087ac:	e019      	b.n	80087e2 <CheckCRC+0x182>
 80087ae:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80087b0:	2217      	movs	r2, #23
 80087b2:	2320      	movs	r3, #32
 80087b4:	18d3      	adds	r3, r2, r3
 80087b6:	19db      	adds	r3, r3, r7
 80087b8:	2120      	movs	r1, #32
 80087ba:	1852      	adds	r2, r2, r1
 80087bc:	19d1      	adds	r1, r2, r7
 80087be:	2222      	movs	r2, #34	@ 0x22
 80087c0:	18ba      	adds	r2, r7, r2
 80087c2:	7809      	ldrb	r1, [r1, #0]
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	188a      	adds	r2, r1, r2
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	2317      	movs	r3, #23
 80087cc:	2220      	movs	r2, #32
 80087ce:	189b      	adds	r3, r3, r2
 80087d0:	19da      	adds	r2, r3, r7
 80087d2:	2323      	movs	r3, #35	@ 0x23
 80087d4:	18fb      	adds	r3, r7, r3
 80087d6:	7812      	ldrb	r2, [r2, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d200      	bcs.n	80087e0 <CheckCRC+0x180>
 80087de:	e754      	b.n	800868a <CheckCRC+0x2a>
    }
  }
  return true;
 80087e0:	2301      	movs	r3, #1
}
 80087e2:	0018      	movs	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	b00f      	add	sp, #60	@ 0x3c
 80087e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ea:	46c0      	nop			@ (mov r8, r8)
 80087ec:	0801b784 	.word	0x0801b784
 80087f0:	0801b6b0 	.word	0x0801b6b0

080087f4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	000a      	movs	r2, r1
 80087fe:	1cfb      	adds	r3, r7, #3
 8008800:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008802:	230f      	movs	r3, #15
 8008804:	18fb      	adds	r3, r7, r3
 8008806:	22ff      	movs	r2, #255	@ 0xff
 8008808:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800880a:	230e      	movs	r3, #14
 800880c:	18fb      	adds	r3, r7, r3
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	e037      	b.n	8008884 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008814:	230e      	movs	r3, #14
 8008816:	18fb      	adds	r3, r7, r3
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	18d3      	adds	r3, r2, r3
 800881e:	7819      	ldrb	r1, [r3, #0]
 8008820:	220f      	movs	r2, #15
 8008822:	18bb      	adds	r3, r7, r2
 8008824:	18ba      	adds	r2, r7, r2
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	404a      	eors	r2, r1
 800882a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800882c:	230d      	movs	r3, #13
 800882e:	18fb      	adds	r3, r7, r3
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	e01b      	b.n	800886e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008836:	210f      	movs	r1, #15
 8008838:	187b      	adds	r3, r7, r1
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	b25b      	sxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	da09      	bge.n	8008856 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008842:	187b      	adds	r3, r7, r1
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	b25b      	sxtb	r3, r3
 800884a:	2231      	movs	r2, #49	@ 0x31
 800884c:	4053      	eors	r3, r2
 800884e:	b25a      	sxtb	r2, r3
 8008850:	187b      	adds	r3, r7, r1
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	e005      	b.n	8008862 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008856:	230f      	movs	r3, #15
 8008858:	18fa      	adds	r2, r7, r3
 800885a:	18fb      	adds	r3, r7, r3
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	18db      	adds	r3, r3, r3
 8008860:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008862:	210d      	movs	r1, #13
 8008864:	187b      	adds	r3, r7, r1
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	187b      	adds	r3, r7, r1
 800886a:	3201      	adds	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	230d      	movs	r3, #13
 8008870:	18fb      	adds	r3, r7, r3
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b07      	cmp	r3, #7
 8008876:	d9de      	bls.n	8008836 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008878:	210e      	movs	r1, #14
 800887a:	187b      	adds	r3, r7, r1
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	187b      	adds	r3, r7, r1
 8008880:	3201      	adds	r2, #1
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	230e      	movs	r3, #14
 8008886:	18fa      	adds	r2, r7, r3
 8008888:	1cfb      	adds	r3, r7, #3
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d3c0      	bcc.n	8008814 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008892:	230f      	movs	r3, #15
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	781b      	ldrb	r3, [r3, #0]
}
 8008898:	0018      	movs	r0, r3
 800889a:	46bd      	mov	sp, r7
 800889c:	b004      	add	sp, #16
 800889e:	bd80      	pop	{r7, pc}

080088a0 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4936      	ldr	r1, [pc, #216]	@ (8008988 <SGP_GetHT+0xe8>)
 80088b0:	1c18      	adds	r0, r3, #0
 80088b2:	f7f7 ff83 	bl	80007bc <__aeabi_fadd>
 80088b6:	1c03      	adds	r3, r0, #0
 80088b8:	4934      	ldr	r1, [pc, #208]	@ (800898c <SGP_GetHT+0xec>)
 80088ba:	1c18      	adds	r0, r3, #0
 80088bc:	f7f8 f908 	bl	8000ad0 <__aeabi_fdiv>
 80088c0:	1c03      	adds	r3, r0, #0
 80088c2:	4933      	ldr	r1, [pc, #204]	@ (8008990 <SGP_GetHT+0xf0>)
 80088c4:	1c18      	adds	r0, r3, #0
 80088c6:	f7f8 fae9 	bl	8000e9c <__aeabi_fmul>
 80088ca:	1c03      	adds	r3, r0, #0
 80088cc:	1c18      	adds	r0, r3, #0
 80088ce:	f7f7 fe73 	bl	80005b8 <__aeabi_f2uiz>
 80088d2:	0003      	movs	r3, r0
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008994 <SGP_GetHT+0xf4>)
 80088d8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	492e      	ldr	r1, [pc, #184]	@ (8008998 <SGP_GetHT+0xf8>)
 80088e0:	1c18      	adds	r0, r3, #0
 80088e2:	f7f8 f8f5 	bl	8000ad0 <__aeabi_fdiv>
 80088e6:	1c03      	adds	r3, r0, #0
 80088e8:	4929      	ldr	r1, [pc, #164]	@ (8008990 <SGP_GetHT+0xf0>)
 80088ea:	1c18      	adds	r0, r3, #0
 80088ec:	f7f8 fad6 	bl	8000e9c <__aeabi_fmul>
 80088f0:	1c03      	adds	r3, r0, #0
 80088f2:	1c18      	adds	r0, r3, #0
 80088f4:	f7f7 fe60 	bl	80005b8 <__aeabi_f2uiz>
 80088f8:	0003      	movs	r3, r0
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	4b27      	ldr	r3, [pc, #156]	@ (800899c <SGP_GetHT+0xfc>)
 80088fe:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008900:	4b26      	ldr	r3, [pc, #152]	@ (800899c <SGP_GetHT+0xfc>)
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	0a1b      	lsrs	r3, r3, #8
 8008906:	b29b      	uxth	r3, r3
 8008908:	b2da      	uxtb	r2, r3
 800890a:	4b25      	ldr	r3, [pc, #148]	@ (80089a0 <SGP_GetHT+0x100>)
 800890c:	709a      	strb	r2, [r3, #2]
 800890e:	4b24      	ldr	r3, [pc, #144]	@ (80089a0 <SGP_GetHT+0x100>)
 8008910:	789a      	ldrb	r2, [r3, #2]
 8008912:	210c      	movs	r1, #12
 8008914:	187b      	adds	r3, r7, r1
 8008916:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008918:	4b20      	ldr	r3, [pc, #128]	@ (800899c <SGP_GetHT+0xfc>)
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b2da      	uxtb	r2, r3
 800891e:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <SGP_GetHT+0x100>)
 8008920:	70da      	strb	r2, [r3, #3]
 8008922:	4b1f      	ldr	r3, [pc, #124]	@ (80089a0 <SGP_GetHT+0x100>)
 8008924:	78da      	ldrb	r2, [r3, #3]
 8008926:	187b      	adds	r3, r7, r1
 8008928:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800892a:	187b      	adds	r3, r7, r1
 800892c:	2102      	movs	r1, #2
 800892e:	0018      	movs	r0, r3
 8008930:	f7ff ff60 	bl	80087f4 <CalculateCRC>
 8008934:	0003      	movs	r3, r0
 8008936:	001a      	movs	r2, r3
 8008938:	4b19      	ldr	r3, [pc, #100]	@ (80089a0 <SGP_GetHT+0x100>)
 800893a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800893c:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <SGP_GetHT+0xf4>)
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	0a1b      	lsrs	r3, r3, #8
 8008942:	b29b      	uxth	r3, r3
 8008944:	b2da      	uxtb	r2, r3
 8008946:	4b16      	ldr	r3, [pc, #88]	@ (80089a0 <SGP_GetHT+0x100>)
 8008948:	715a      	strb	r2, [r3, #5]
 800894a:	4b15      	ldr	r3, [pc, #84]	@ (80089a0 <SGP_GetHT+0x100>)
 800894c:	795a      	ldrb	r2, [r3, #5]
 800894e:	2108      	movs	r1, #8
 8008950:	187b      	adds	r3, r7, r1
 8008952:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008954:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <SGP_GetHT+0xf4>)
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	b2da      	uxtb	r2, r3
 800895a:	4b11      	ldr	r3, [pc, #68]	@ (80089a0 <SGP_GetHT+0x100>)
 800895c:	719a      	strb	r2, [r3, #6]
 800895e:	4b10      	ldr	r3, [pc, #64]	@ (80089a0 <SGP_GetHT+0x100>)
 8008960:	799a      	ldrb	r2, [r3, #6]
 8008962:	187b      	adds	r3, r7, r1
 8008964:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008966:	187b      	adds	r3, r7, r1
 8008968:	2102      	movs	r1, #2
 800896a:	0018      	movs	r0, r3
 800896c:	f7ff ff42 	bl	80087f4 <CalculateCRC>
 8008970:	0003      	movs	r3, r0
 8008972:	001a      	movs	r2, r3
 8008974:	4b0a      	ldr	r3, [pc, #40]	@ (80089a0 <SGP_GetHT+0x100>)
 8008976:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008978:	4b0a      	ldr	r3, [pc, #40]	@ (80089a4 <SGP_GetHT+0x104>)
 800897a:	2201      	movs	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
}
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	46bd      	mov	sp, r7
 8008982:	b004      	add	sp, #16
 8008984:	bd80      	pop	{r7, pc}
 8008986:	46c0      	nop			@ (mov r8, r8)
 8008988:	42340000 	.word	0x42340000
 800898c:	432f0000 	.word	0x432f0000
 8008990:	477fff00 	.word	0x477fff00
 8008994:	2000289e 	.word	0x2000289e
 8008998:	42c80000 	.word	0x42c80000
 800899c:	2000289c 	.word	0x2000289c
 80089a0:	2000003c 	.word	0x2000003c
 80089a4:	200028a0 	.word	0x200028a0

080089a8 <InitDone>:
bool LEDGood = false;
bool init = true;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
  init = false;
 80089ac:	4b02      	ldr	r3, [pc, #8]	@ (80089b8 <InitDone+0x10>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
}
 80089b2:	46c0      	nop			@ (mov r8, r8)
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20000056 	.word	0x20000056

080089bc <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 80089c2:	f7fc fd71 	bl	80054a8 <ReadBatteryVoltage>
 80089c6:	1c03      	adds	r3, r0, #0
 80089c8:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 80089ca:	491f      	ldr	r1, [pc, #124]	@ (8008a48 <batteryChargeCheck+0x8c>)
 80089cc:	6838      	ldr	r0, [r7, #0]
 80089ce:	f7f7 fd7d 	bl	80004cc <__aeabi_fcmplt>
 80089d2:	1e03      	subs	r3, r0, #0
 80089d4:	d002      	beq.n	80089dc <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 80089d6:	1dfb      	adds	r3, r7, #7
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 80089dc:	6838      	ldr	r0, [r7, #0]
 80089de:	f7fa fcbf 	bl	8003360 <__aeabi_f2d>
 80089e2:	4a1a      	ldr	r2, [pc, #104]	@ (8008a4c <batteryChargeCheck+0x90>)
 80089e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a50 <batteryChargeCheck+0x94>)
 80089e6:	f7f7 fd37 	bl	8000458 <__aeabi_dcmplt>
 80089ea:	1e03      	subs	r3, r0, #0
 80089ec:	d008      	beq.n	8008a00 <batteryChargeCheck+0x44>
 80089ee:	4916      	ldr	r1, [pc, #88]	@ (8008a48 <batteryChargeCheck+0x8c>)
 80089f0:	6838      	ldr	r0, [r7, #0]
 80089f2:	f7f7 fd89 	bl	8000508 <__aeabi_fcmpge>
 80089f6:	1e03      	subs	r3, r0, #0
 80089f8:	d002      	beq.n	8008a00 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 80089fa:	1dfb      	adds	r3, r7, #7
 80089fc:	2202      	movs	r2, #2
 80089fe:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008a00:	2181      	movs	r1, #129	@ 0x81
 8008a02:	05c9      	lsls	r1, r1, #23
 8008a04:	6838      	ldr	r0, [r7, #0]
 8008a06:	f7f7 fd61 	bl	80004cc <__aeabi_fcmplt>
 8008a0a:	1e03      	subs	r3, r0, #0
 8008a0c:	d00b      	beq.n	8008a26 <batteryChargeCheck+0x6a>
 8008a0e:	6838      	ldr	r0, [r7, #0]
 8008a10:	f7fa fca6 	bl	8003360 <__aeabi_f2d>
 8008a14:	4a0d      	ldr	r2, [pc, #52]	@ (8008a4c <batteryChargeCheck+0x90>)
 8008a16:	4b0e      	ldr	r3, [pc, #56]	@ (8008a50 <batteryChargeCheck+0x94>)
 8008a18:	f7f7 fd3c 	bl	8000494 <__aeabi_dcmpge>
 8008a1c:	1e03      	subs	r3, r0, #0
 8008a1e:	d002      	beq.n	8008a26 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008a20:	1dfb      	adds	r3, r7, #7
 8008a22:	2203      	movs	r2, #3
 8008a24:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008a26:	2181      	movs	r1, #129	@ 0x81
 8008a28:	05c9      	lsls	r1, r1, #23
 8008a2a:	6838      	ldr	r0, [r7, #0]
 8008a2c:	f7f7 fd6c 	bl	8000508 <__aeabi_fcmpge>
 8008a30:	1e03      	subs	r3, r0, #0
 8008a32:	d002      	beq.n	8008a3a <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008a34:	1dfb      	adds	r3, r7, #7
 8008a36:	2204      	movs	r2, #4
 8008a38:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008a3a:	1dfb      	adds	r3, r7, #7
 8008a3c:	781b      	ldrb	r3, [r3, #0]
}
 8008a3e:	0018      	movs	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b002      	add	sp, #8
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	46c0      	nop			@ (mov r8, r8)
 8008a48:	40600000 	.word	0x40600000
 8008a4c:	9999999a 	.word	0x9999999a
 8008a50:	400d9999 	.word	0x400d9999

08008a54 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	0004      	movs	r4, r0
 8008a5c:	0008      	movs	r0, r1
 8008a5e:	0011      	movs	r1, r2
 8008a60:	1dbb      	adds	r3, r7, #6
 8008a62:	1c22      	adds	r2, r4, #0
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	1c02      	adds	r2, r0, #0
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	1cbb      	adds	r3, r7, #2
 8008a6e:	1c0a      	adds	r2, r1, #0
 8008a70:	801a      	strh	r2, [r3, #0]
  if(LEDGood || init){
 8008a72:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa8 <SetStatusLED+0x54>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <SetStatusLED+0x2e>
 8008a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <SetStatusLED+0x58>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00e      	beq.n	8008aa0 <SetStatusLED+0x4c>
    TIM2 -> CCR1 = red;
 8008a82:	2380      	movs	r3, #128	@ 0x80
 8008a84:	05db      	lsls	r3, r3, #23
 8008a86:	1dba      	adds	r2, r7, #6
 8008a88:	8812      	ldrh	r2, [r2, #0]
 8008a8a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8008a8c:	2380      	movs	r3, #128	@ 0x80
 8008a8e:	05db      	lsls	r3, r3, #23
 8008a90:	1d3a      	adds	r2, r7, #4
 8008a92:	8812      	ldrh	r2, [r2, #0]
 8008a94:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8008a96:	2380      	movs	r3, #128	@ 0x80
 8008a98:	05db      	lsls	r3, r3, #23
 8008a9a:	1cba      	adds	r2, r7, #2
 8008a9c:	8812      	ldrh	r2, [r2, #0]
 8008a9e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008aa0:	46c0      	nop			@ (mov r8, r8)
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	b003      	add	sp, #12
 8008aa6:	bd90      	pop	{r4, r7, pc}
 8008aa8:	200028a9 	.word	0x200028a9
 8008aac:	20000056 	.word	0x20000056

08008ab0 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8008ab0:	b590      	push	{r4, r7, lr}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	0004      	movs	r4, r0
 8008ab8:	0008      	movs	r0, r1
 8008aba:	0011      	movs	r1, r2
 8008abc:	1dfb      	adds	r3, r7, #7
 8008abe:	1c22      	adds	r2, r4, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	1dbb      	adds	r3, r7, #6
 8008ac4:	1c02      	adds	r2, r0, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	1d7b      	adds	r3, r7, #5
 8008aca:	1c0a      	adds	r2, r1, #0
 8008acc:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(LEDGood || init){
 8008ace:	4b17      	ldr	r3, [pc, #92]	@ (8008b2c <SetDBLED+0x7c>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d103      	bne.n	8008ade <SetDBLED+0x2e>
 8008ad6:	4b16      	ldr	r3, [pc, #88]	@ (8008b30 <SetDBLED+0x80>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d022      	beq.n	8008b24 <SetDBLED+0x74>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8008ade:	1dfb      	adds	r3, r7, #7
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	4053      	eors	r3, r2
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	001a      	movs	r2, r3
 8008aea:	4b12      	ldr	r3, [pc, #72]	@ (8008b34 <SetDBLED+0x84>)
 8008aec:	2101      	movs	r1, #1
 8008aee:	0018      	movs	r0, r3
 8008af0:	f002 fd9d 	bl	800b62e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8008af4:	1dbb      	adds	r3, r7, #6
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2201      	movs	r2, #1
 8008afa:	4053      	eors	r3, r2
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	001a      	movs	r2, r3
 8008b00:	2380      	movs	r3, #128	@ 0x80
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	480b      	ldr	r0, [pc, #44]	@ (8008b34 <SetDBLED+0x84>)
 8008b06:	0019      	movs	r1, r3
 8008b08:	f002 fd91 	bl	800b62e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8008b0c:	1d7b      	adds	r3, r7, #5
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2201      	movs	r2, #1
 8008b12:	4053      	eors	r3, r2
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	001a      	movs	r2, r3
 8008b18:	2380      	movs	r3, #128	@ 0x80
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4805      	ldr	r0, [pc, #20]	@ (8008b34 <SetDBLED+0x84>)
 8008b1e:	0019      	movs	r1, r3
 8008b20:	f002 fd85 	bl	800b62e <HAL_GPIO_WritePin>
  }
}
 8008b24:	46c0      	nop			@ (mov r8, r8)
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b003      	add	sp, #12
 8008b2a:	bd90      	pop	{r4, r7, pc}
 8008b2c:	200028a9 	.word	0x200028a9
 8008b30:	20000056 	.word	0x20000056
 8008b34:	50000400 	.word	0x50000400

08008b38 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	0004      	movs	r4, r0
 8008b40:	0008      	movs	r0, r1
 8008b42:	0011      	movs	r1, r2
 8008b44:	1dbb      	adds	r3, r7, #6
 8008b46:	1c22      	adds	r2, r4, #0
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	1d3b      	adds	r3, r7, #4
 8008b4c:	1c02      	adds	r2, r0, #0
 8008b4e:	801a      	strh	r2, [r3, #0]
 8008b50:	1cbb      	adds	r3, r7, #2
 8008b52:	1c0a      	adds	r2, r1, #0
 8008b54:	801a      	strh	r2, [r3, #0]
  if(LEDGood || init){
 8008b56:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <SetVocLED+0x50>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d103      	bne.n	8008b66 <SetVocLED+0x2e>
 8008b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b8c <SetVocLED+0x54>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00b      	beq.n	8008b7e <SetVocLED+0x46>
    TIM3 -> CCR1 = red;
 8008b66:	4b0a      	ldr	r3, [pc, #40]	@ (8008b90 <SetVocLED+0x58>)
 8008b68:	1dba      	adds	r2, r7, #6
 8008b6a:	8812      	ldrh	r2, [r2, #0]
 8008b6c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8008b6e:	4b08      	ldr	r3, [pc, #32]	@ (8008b90 <SetVocLED+0x58>)
 8008b70:	1d3a      	adds	r2, r7, #4
 8008b72:	8812      	ldrh	r2, [r2, #0]
 8008b74:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8008b76:	4b06      	ldr	r3, [pc, #24]	@ (8008b90 <SetVocLED+0x58>)
 8008b78:	1cba      	adds	r2, r7, #2
 8008b7a:	8812      	ldrh	r2, [r2, #0]
 8008b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008b7e:	46c0      	nop			@ (mov r8, r8)
 8008b80:	46bd      	mov	sp, r7
 8008b82:	b003      	add	sp, #12
 8008b84:	bd90      	pop	{r4, r7, pc}
 8008b86:	46c0      	nop			@ (mov r8, r8)
 8008b88:	200028a9 	.word	0x200028a9
 8008b8c:	20000056 	.word	0x20000056
 8008b90:	40000400 	.word	0x40000400

08008b94 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008b98:	4b05      	ldr	r3, [pc, #20]	@ (8008bb0 <SetMeasurementIndicator+0x1c>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <SetMeasurementIndicator+0x14>
    TIM2 -> CCR3 = 3000;
 8008ba0:	2380      	movs	r3, #128	@ 0x80
 8008ba2:	05db      	lsls	r3, r3, #23
 8008ba4:	4a03      	ldr	r2, [pc, #12]	@ (8008bb4 <SetMeasurementIndicator+0x20>)
 8008ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008ba8:	46c0      	nop			@ (mov r8, r8)
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	46c0      	nop			@ (mov r8, r8)
 8008bb0:	200028a9 	.word	0x200028a9
 8008bb4:	00000bb8 	.word	0x00000bb8

08008bb8 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008bbc:	4b05      	ldr	r3, [pc, #20]	@ (8008bd4 <ResetMeasurementIndicator+0x1c>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d004      	beq.n	8008bce <ResetMeasurementIndicator+0x16>
    TIM2 -> CCR3 = 4000;
 8008bc4:	2380      	movs	r3, #128	@ 0x80
 8008bc6:	05db      	lsls	r3, r3, #23
 8008bc8:	22fa      	movs	r2, #250	@ 0xfa
 8008bca:	0112      	lsls	r2, r2, #4
 8008bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	200028a9 	.word	0x200028a9

08008bd8 <SetMICIndicator>:
void SetMICIndicator(){
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008bdc:	4b05      	ldr	r3, [pc, #20]	@ (8008bf4 <SetMICIndicator+0x1c>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <SetMICIndicator+0x14>
    TIM2 -> CCR1 = 3000;
 8008be4:	2380      	movs	r3, #128	@ 0x80
 8008be6:	05db      	lsls	r3, r3, #23
 8008be8:	4a03      	ldr	r2, [pc, #12]	@ (8008bf8 <SetMICIndicator+0x20>)
 8008bea:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008bec:	46c0      	nop			@ (mov r8, r8)
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	46c0      	nop			@ (mov r8, r8)
 8008bf4:	200028a9 	.word	0x200028a9
 8008bf8:	00000bb8 	.word	0x00000bb8

08008bfc <ResetMICIndicator>:
void ResetMICIndicator(){
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008c00:	4b05      	ldr	r3, [pc, #20]	@ (8008c18 <ResetMICIndicator+0x1c>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <ResetMICIndicator+0x16>
    TIM2 -> CCR1 = 4000;
 8008c08:	2380      	movs	r3, #128	@ 0x80
 8008c0a:	05db      	lsls	r3, r3, #23
 8008c0c:	22fa      	movs	r2, #250	@ 0xfa
 8008c0e:	0112      	lsls	r2, r2, #4
 8008c10:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008c12:	46c0      	nop			@ (mov r8, r8)
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	200028a9 	.word	0x200028a9

08008c1c <SetESPIndicator>:
void SetESPIndicator(){
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008c20:	4b05      	ldr	r3, [pc, #20]	@ (8008c38 <SetESPIndicator+0x1c>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <SetESPIndicator+0x14>
    TIM2 -> CCR4 = 3000;
 8008c28:	2380      	movs	r3, #128	@ 0x80
 8008c2a:	05db      	lsls	r3, r3, #23
 8008c2c:	4a03      	ldr	r2, [pc, #12]	@ (8008c3c <SetESPIndicator+0x20>)
 8008c2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008c30:	46c0      	nop			@ (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	46c0      	nop			@ (mov r8, r8)
 8008c38:	200028a9 	.word	0x200028a9
 8008c3c:	00000bb8 	.word	0x00000bb8

08008c40 <ResetESPIndicator>:
void ResetESPIndicator(){
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  if(LEDGood){
 8008c44:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <ResetESPIndicator+0x1c>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <ResetESPIndicator+0x16>
    TIM2 -> CCR4 = 4000;
 8008c4c:	2380      	movs	r3, #128	@ 0x80
 8008c4e:	05db      	lsls	r3, r3, #23
 8008c50:	22fa      	movs	r2, #250	@ 0xfa
 8008c52:	0112      	lsls	r2, r2, #4
 8008c54:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008c56:	46c0      	nop			@ (mov r8, r8)
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	200028a9 	.word	0x200028a9

08008c60 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  SetStatusLED(4000,4000,4000);
 8008c64:	23fa      	movs	r3, #250	@ 0xfa
 8008c66:	011a      	lsls	r2, r3, #4
 8008c68:	23fa      	movs	r3, #250	@ 0xfa
 8008c6a:	0119      	lsls	r1, r3, #4
 8008c6c:	23fa      	movs	r3, #250	@ 0xfa
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff feef 	bl	8008a54 <SetStatusLED>
  SetDBLED(false,false,false);
 8008c76:	2200      	movs	r2, #0
 8008c78:	2100      	movs	r1, #0
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	f7ff ff18 	bl	8008ab0 <SetDBLED>
  SetVocLED(4000,4000,4000);
 8008c80:	23fa      	movs	r3, #250	@ 0xfa
 8008c82:	011a      	lsls	r2, r3, #4
 8008c84:	23fa      	movs	r3, #250	@ 0xfa
 8008c86:	0119      	lsls	r1, r3, #4
 8008c88:	23fa      	movs	r3, #250	@ 0xfa
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f7ff ff53 	bl	8008b38 <SetVocLED>
return;
 8008c92:	46c0      	nop			@ (mov r8, r8)
}
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <powerCheck>:

Battery_Status powerCheck(){
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
  PowerStamp = HAL_GetTick() + 10000;
 8008c9e:	f001 f927 	bl	8009ef0 <HAL_GetTick>
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8008ce4 <powerCheck+0x4c>)
 8008ca6:	189a      	adds	r2, r3, r2
 8008ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce8 <powerCheck+0x50>)
 8008caa:	601a      	str	r2, [r3, #0]
  Battery_Status status;
  if(Check_USB_PowerOn()){
 8008cac:	f7fc fcc2 	bl	8005634 <Check_USB_PowerOn>
 8008cb0:	1e03      	subs	r3, r0, #0
 8008cb2:	d006      	beq.n	8008cc2 <powerCheck+0x2a>
    status = USB_PLUGGED_IN;
 8008cb4:	1dfb      	adds	r3, r7, #7
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	701a      	strb	r2, [r3, #0]
    LEDGood = true;
 8008cba:	4b0c      	ldr	r3, [pc, #48]	@ (8008cec <powerCheck+0x54>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	701a      	strb	r2, [r3, #0]
 8008cc0:	e009      	b.n	8008cd6 <powerCheck+0x3e>
  }
  else{
    status = batteryChargeCheck();
 8008cc2:	1dfc      	adds	r4, r7, #7
 8008cc4:	f7ff fe7a 	bl	80089bc <batteryChargeCheck>
 8008cc8:	0003      	movs	r3, r0
 8008cca:	7023      	strb	r3, [r4, #0]
    SetLEDsOff();
 8008ccc:	f7ff ffc8 	bl	8008c60 <SetLEDsOff>
    LEDGood = false;
 8008cd0:	4b06      	ldr	r3, [pc, #24]	@ (8008cec <powerCheck+0x54>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	701a      	strb	r2, [r3, #0]

  }
  return status;
 8008cd6:	1dfb      	adds	r3, r7, #7
 8008cd8:	781b      	ldrb	r3, [r3, #0]
}
 8008cda:	0018      	movs	r0, r3
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	b003      	add	sp, #12
 8008ce0:	bd90      	pop	{r4, r7, pc}
 8008ce2:	46c0      	nop			@ (mov r8, r8)
 8008ce4:	00002710 	.word	0x00002710
 8008ce8:	200028b0 	.word	0x200028b0
 8008cec:	200028a9 	.word	0x200028a9

08008cf0 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	0002      	movs	r2, r0
 8008cf8:	1dfb      	adds	r3, r7, #7
 8008cfa:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8008cfc:	1dfb      	adds	r3, r7, #7
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d105      	bne.n	8008d10 <powerDisplay+0x20>
    Debug("LEDS are okay");
 8008d04:	4a18      	ldr	r2, [pc, #96]	@ (8008d68 <powerDisplay+0x78>)
 8008d06:	4b19      	ldr	r3, [pc, #100]	@ (8008d6c <powerDisplay+0x7c>)
 8008d08:	0019      	movs	r1, r3
 8008d0a:	2003      	movs	r0, #3
 8008d0c:	f000 fd54 	bl	80097b8 <CreateLine>

  }
  if(status == BATTERY_FULL){
 8008d10:	1dfb      	adds	r3, r7, #7
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d105      	bne.n	8008d24 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8008d18:	4a15      	ldr	r2, [pc, #84]	@ (8008d70 <powerDisplay+0x80>)
 8008d1a:	4b14      	ldr	r3, [pc, #80]	@ (8008d6c <powerDisplay+0x7c>)
 8008d1c:	0019      	movs	r1, r3
 8008d1e:	2003      	movs	r0, #3
 8008d20:	f000 fd4a 	bl	80097b8 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8008d24:	1dfb      	adds	r3, r7, #7
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d105      	bne.n	8008d38 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8008d2c:	4a11      	ldr	r2, [pc, #68]	@ (8008d74 <powerDisplay+0x84>)
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d6c <powerDisplay+0x7c>)
 8008d30:	0019      	movs	r1, r3
 8008d32:	2003      	movs	r0, #3
 8008d34:	f000 fd40 	bl	80097b8 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8008d38:	1dfb      	adds	r3, r7, #7
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d105      	bne.n	8008d4c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8008d40:	4a0d      	ldr	r2, [pc, #52]	@ (8008d78 <powerDisplay+0x88>)
 8008d42:	4b0a      	ldr	r3, [pc, #40]	@ (8008d6c <powerDisplay+0x7c>)
 8008d44:	0019      	movs	r1, r3
 8008d46:	2003      	movs	r0, #3
 8008d48:	f000 fd36 	bl	80097b8 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8008d4c:	1dfb      	adds	r3, r7, #7
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8008d54:	4a09      	ldr	r2, [pc, #36]	@ (8008d7c <powerDisplay+0x8c>)
 8008d56:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <powerDisplay+0x7c>)
 8008d58:	0019      	movs	r1, r3
 8008d5a:	2003      	movs	r0, #3
 8008d5c:	f000 fd2c 	bl	80097b8 <CreateLine>
  }
}
 8008d60:	46c0      	nop			@ (mov r8, r8)
 8008d62:	46bd      	mov	sp, r7
 8008d64:	b002      	add	sp, #8
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	0801b82c 	.word	0x0801b82c
 8008d6c:	0801b83c 	.word	0x0801b83c
 8008d70:	0801b840 	.word	0x0801b840
 8008d74:	0801b858 	.word	0x0801b858
 8008d78:	0801b878 	.word	0x0801b878
 8008d7c:	0801b890 	.word	0x0801b890

08008d80 <configCheck>:

void configCheck(){
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8008d84:	f7fc fc65 	bl	8005652 <BootButton_Pressed>
 8008d88:	1e03      	subs	r3, r0, #0
 8008d8a:	d007      	beq.n	8008d9c <configCheck+0x1c>
 8008d8c:	f7fc fc72 	bl	8005674 <UserButton_Pressed>
 8008d90:	1e03      	subs	r3, r0, #0
 8008d92:	d003      	beq.n	8008d9c <configCheck+0x1c>
    configSet = true;
 8008d94:	4b11      	ldr	r3, [pc, #68]	@ (8008ddc <configCheck+0x5c>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	e00a      	b.n	8008db2 <configCheck+0x32>
  }
  else{
    configSet = false;
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8008ddc <configCheck+0x5c>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8008da2:	f001 f8a5 	bl	8009ef0 <HAL_GetTick>
 8008da6:	0003      	movs	r3, r0
 8008da8:	22fa      	movs	r2, #250	@ 0xfa
 8008daa:	00d2      	lsls	r2, r2, #3
 8008dac:	189a      	adds	r2, r3, r2
 8008dae:	4b0c      	ldr	r3, [pc, #48]	@ (8008de0 <configCheck+0x60>)
 8008db0:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8008db2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ddc <configCheck+0x5c>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00d      	beq.n	8008dd6 <configCheck+0x56>
 8008dba:	4b09      	ldr	r3, [pc, #36]	@ (8008de0 <configCheck+0x60>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f000 fca4 	bl	800970c <TimestampIsReached>
 8008dc4:	1e03      	subs	r3, r0, #0
 8008dc6:	d006      	beq.n	8008dd6 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 8008dc8:	f7fa fca4 	bl	8003714 <SetConfigMode>
    SetDBLED(true, true, true);
 8008dcc:	2201      	movs	r2, #1
 8008dce:	2101      	movs	r1, #1
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	f7ff fe6d 	bl	8008ab0 <SetDBLED>
  }
}
 8008dd6:	46c0      	nop			@ (mov r8, r8)
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	200028a8 	.word	0x200028a8
 8008de0:	200028ac 	.word	0x200028ac

08008de4 <status_Upkeep>:
  //RTC_SetWakeUpTimer(RTC_Handler, 300000);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void status_Upkeep(){
 8008de4:	b590      	push	{r4, r7, lr}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
  Battery_Status status;
  configCheck();
 8008dea:	f7ff ffc9 	bl	8008d80 <configCheck>
//  UpdateClock();
  if(TimestampIsReached(PowerStamp)){
 8008dee:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <status_Upkeep+0x34>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	0018      	movs	r0, r3
 8008df4:	f000 fc8a 	bl	800970c <TimestampIsReached>
 8008df8:	1e03      	subs	r3, r0, #0
 8008dfa:	d009      	beq.n	8008e10 <status_Upkeep+0x2c>
    status = powerCheck();
 8008dfc:	1dfc      	adds	r4, r7, #7
 8008dfe:	f7ff ff4b 	bl	8008c98 <powerCheck>
 8008e02:	0003      	movs	r3, r0
 8008e04:	7023      	strb	r3, [r4, #0]
    powerDisplay(status);
 8008e06:	1dfb      	adds	r3, r7, #7
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f7ff ff70 	bl	8008cf0 <powerDisplay>
  }

}
 8008e10:	46c0      	nop			@ (mov r8, r8)
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b003      	add	sp, #12
 8008e16:	bd90      	pop	{r4, r7, pc}
 8008e18:	200028b0 	.word	0x200028b0

08008e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e20:	4b07      	ldr	r3, [pc, #28]	@ (8008e40 <HAL_MspInit+0x24>)
 8008e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e24:	4b06      	ldr	r3, [pc, #24]	@ (8008e40 <HAL_MspInit+0x24>)
 8008e26:	2101      	movs	r1, #1
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e2c:	4b04      	ldr	r3, [pc, #16]	@ (8008e40 <HAL_MspInit+0x24>)
 8008e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e30:	4b03      	ldr	r3, [pc, #12]	@ (8008e40 <HAL_MspInit+0x24>)
 8008e32:	2180      	movs	r1, #128	@ 0x80
 8008e34:	0549      	lsls	r1, r1, #21
 8008e36:	430a      	orrs	r2, r1
 8008e38:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e3a:	46c0      	nop			@ (mov r8, r8)
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	40021000 	.word	0x40021000

08008e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008e48:	46c0      	nop			@ (mov r8, r8)
 8008e4a:	e7fd      	b.n	8008e48 <NMI_Handler+0x4>

08008e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e50:	46c0      	nop			@ (mov r8, r8)
 8008e52:	e7fd      	b.n	8008e50 <HardFault_Handler+0x4>

08008e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008e58:	46c0      	nop			@ (mov r8, r8)
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008e62:	46c0      	nop			@ (mov r8, r8)
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008e6c:	f001 f82e 	bl	8009ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008e70:	46c0      	nop			@ (mov r8, r8)
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008e7c:	4b05      	ldr	r3, [pc, #20]	@ (8008e94 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f001 fea1 	bl	800abc6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008e84:	4b04      	ldr	r3, [pc, #16]	@ (8008e98 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008e86:	0018      	movs	r0, r3
 8008e88:	f001 fe9d 	bl	800abc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008e8c:	46c0      	nop			@ (mov r8, r8)
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	46c0      	nop			@ (mov r8, r8)
 8008e94:	20000e5c 	.word	0x20000e5c
 8008e98:	20000e14 	.word	0x20000e14

08008e9c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008ea0:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f001 fe8f 	bl	800abc6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008ea8:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f001 fe8b 	bl	800abc6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008eb0:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f001 fe87 	bl	800abc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008eb8:	46c0      	nop			@ (mov r8, r8)
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	46c0      	nop			@ (mov r8, r8)
 8008ec0:	20000ee0 	.word	0x20000ee0
 8008ec4:	20002b60 	.word	0x20002b60
 8008ec8:	20002ba8 	.word	0x20002ba8

08008ecc <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008ed0:	4b03      	ldr	r3, [pc, #12]	@ (8008ee0 <USART4_5_IRQHandler+0x14>)
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f008 fd14 	bl	8011900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008ed8:	46c0      	nop			@ (mov r8, r8)
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	46c0      	nop			@ (mov r8, r8)
 8008ee0:	20002aa8 	.word	0x20002aa8

08008ee4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008ee8:	4b09      	ldr	r3, [pc, #36]	@ (8008f10 <I2C1_IRQHandler+0x2c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	699a      	ldr	r2, [r3, #24]
 8008eee:	23e0      	movs	r3, #224	@ 0xe0
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	d004      	beq.n	8008f00 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8008ef6:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <I2C1_IRQHandler+0x2c>)
 8008ef8:	0018      	movs	r0, r3
 8008efa:	f002 fe71 	bl	800bbe0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8008efe:	e003      	b.n	8008f08 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008f00:	4b03      	ldr	r3, [pc, #12]	@ (8008f10 <I2C1_IRQHandler+0x2c>)
 8008f02:	0018      	movs	r0, r3
 8008f04:	f002 fe52 	bl	800bbac <HAL_I2C_EV_IRQHandler>
}
 8008f08:	46c0      	nop			@ (mov r8, r8)
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	46c0      	nop			@ (mov r8, r8)
 8008f10:	20000d6c 	.word	0x20000d6c

08008f14 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008f18:	4b03      	ldr	r3, [pc, #12]	@ (8008f28 <USB_IRQHandler+0x14>)
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f005 f828 	bl	800df70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8008f20:	46c0      	nop			@ (mov r8, r8)
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	46c0      	nop			@ (mov r8, r8)
 8008f28:	200039b0 	.word	0x200039b0

08008f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  return 1;
 8008f30:	2301      	movs	r3, #1
}
 8008f32:	0018      	movs	r0, r3
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <_kill>:

int _kill(int pid, int sig)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008f42:	f00f f9a1 	bl	8018288 <__errno>
 8008f46:	0003      	movs	r3, r0
 8008f48:	2216      	movs	r2, #22
 8008f4a:	601a      	str	r2, [r3, #0]
  return -1;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	425b      	negs	r3, r3
}
 8008f50:	0018      	movs	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b002      	add	sp, #8
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <_exit>:

void _exit (int status)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008f60:	2301      	movs	r3, #1
 8008f62:	425a      	negs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	0011      	movs	r1, r2
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7ff ffe5 	bl	8008f38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008f6e:	46c0      	nop			@ (mov r8, r8)
 8008f70:	e7fd      	b.n	8008f6e <_exit+0x16>

08008f72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	e00a      	b.n	8008f9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008f84:	e000      	b.n	8008f88 <_read+0x16>
 8008f86:	bf00      	nop
 8008f88:	0001      	movs	r1, r0
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	60ba      	str	r2, [r7, #8]
 8008f90:	b2ca      	uxtb	r2, r1
 8008f92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	3301      	adds	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	dbf0      	blt.n	8008f84 <_read+0x12>
  }

  return len;
 8008fa2:	687b      	ldr	r3, [r7, #4]
}
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	b006      	add	sp, #24
 8008faa:	bd80      	pop	{r7, pc}

08008fac <_close>:
  }
  return len;
}

int _close(int file)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	425b      	negs	r3, r3
}
 8008fb8:	0018      	movs	r0, r3
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b002      	add	sp, #8
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2280      	movs	r2, #128	@ 0x80
 8008fce:	0192      	lsls	r2, r2, #6
 8008fd0:	605a      	str	r2, [r3, #4]
  return 0;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b002      	add	sp, #8
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <_isatty>:

int _isatty(int file)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008fe4:	2301      	movs	r3, #1
}
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	b002      	add	sp, #8
 8008fec:	bd80      	pop	{r7, pc}

08008fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	46bd      	mov	sp, r7
 8009000:	b004      	add	sp, #16
 8009002:	bd80      	pop	{r7, pc}

08009004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800900c:	4a14      	ldr	r2, [pc, #80]	@ (8009060 <_sbrk+0x5c>)
 800900e:	4b15      	ldr	r3, [pc, #84]	@ (8009064 <_sbrk+0x60>)
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009018:	4b13      	ldr	r3, [pc, #76]	@ (8009068 <_sbrk+0x64>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009020:	4b11      	ldr	r3, [pc, #68]	@ (8009068 <_sbrk+0x64>)
 8009022:	4a12      	ldr	r2, [pc, #72]	@ (800906c <_sbrk+0x68>)
 8009024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009026:	4b10      	ldr	r3, [pc, #64]	@ (8009068 <_sbrk+0x64>)
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	18d3      	adds	r3, r2, r3
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	429a      	cmp	r2, r3
 8009032:	d207      	bcs.n	8009044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009034:	f00f f928 	bl	8018288 <__errno>
 8009038:	0003      	movs	r3, r0
 800903a:	220c      	movs	r2, #12
 800903c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800903e:	2301      	movs	r3, #1
 8009040:	425b      	negs	r3, r3
 8009042:	e009      	b.n	8009058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009044:	4b08      	ldr	r3, [pc, #32]	@ (8009068 <_sbrk+0x64>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800904a:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <_sbrk+0x64>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	18d2      	adds	r2, r2, r3
 8009052:	4b05      	ldr	r3, [pc, #20]	@ (8009068 <_sbrk+0x64>)
 8009054:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8009056:	68fb      	ldr	r3, [r7, #12]
}
 8009058:	0018      	movs	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	b006      	add	sp, #24
 800905e:	bd80      	pop	{r7, pc}
 8009060:	20005000 	.word	0x20005000
 8009064:	00000400 	.word	0x00000400
 8009068:	200028b4 	.word	0x200028b4
 800906c:	20004010 	.word	0x20004010

08009070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009074:	46c0      	nop			@ (mov r8, r8)
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009082:	2310      	movs	r3, #16
 8009084:	18fb      	adds	r3, r7, r3
 8009086:	0018      	movs	r0, r3
 8009088:	2308      	movs	r3, #8
 800908a:	001a      	movs	r2, r3
 800908c:	2100      	movs	r1, #0
 800908e:	f00f f869 	bl	8018164 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009092:	003b      	movs	r3, r7
 8009094:	0018      	movs	r0, r3
 8009096:	2310      	movs	r3, #16
 8009098:	001a      	movs	r2, r3
 800909a:	2100      	movs	r1, #0
 800909c:	f00f f862 	bl	8018164 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80090a0:	4b2e      	ldr	r3, [pc, #184]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090a2:	2280      	movs	r2, #128	@ 0x80
 80090a4:	05d2      	lsls	r2, r2, #23
 80090a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80090a8:	4b2c      	ldr	r3, [pc, #176]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090ae:	4b2b      	ldr	r3, [pc, #172]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80090b4:	4b29      	ldr	r3, [pc, #164]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009160 <MX_TIM2_Init+0xe4>)
 80090b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090ba:	4b28      	ldr	r3, [pc, #160]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090bc:	2200      	movs	r2, #0
 80090be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090c0:	4b26      	ldr	r3, [pc, #152]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80090c6:	4b25      	ldr	r3, [pc, #148]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090c8:	0018      	movs	r0, r3
 80090ca:	f007 fe8b 	bl	8010de4 <HAL_TIM_PWM_Init>
 80090ce:	1e03      	subs	r3, r0, #0
 80090d0:	d001      	beq.n	80090d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80090d2:	f7fd f957 	bl	8006384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090d6:	2110      	movs	r1, #16
 80090d8:	187b      	adds	r3, r7, r1
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090de:	187b      	adds	r3, r7, r1
 80090e0:	2200      	movs	r2, #0
 80090e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80090e4:	187a      	adds	r2, r7, r1
 80090e6:	4b1d      	ldr	r3, [pc, #116]	@ (800915c <MX_TIM2_Init+0xe0>)
 80090e8:	0011      	movs	r1, r2
 80090ea:	0018      	movs	r0, r3
 80090ec:	f008 f998 	bl	8011420 <HAL_TIMEx_MasterConfigSynchronization>
 80090f0:	1e03      	subs	r3, r0, #0
 80090f2:	d001      	beq.n	80090f8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80090f4:	f7fd f946 	bl	8006384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80090f8:	003b      	movs	r3, r7
 80090fa:	2260      	movs	r2, #96	@ 0x60
 80090fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80090fe:	003b      	movs	r3, r7
 8009100:	2200      	movs	r2, #0
 8009102:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009104:	003b      	movs	r3, r7
 8009106:	2200      	movs	r2, #0
 8009108:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800910a:	003b      	movs	r3, r7
 800910c:	2200      	movs	r2, #0
 800910e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009110:	0039      	movs	r1, r7
 8009112:	4b12      	ldr	r3, [pc, #72]	@ (800915c <MX_TIM2_Init+0xe0>)
 8009114:	2200      	movs	r2, #0
 8009116:	0018      	movs	r0, r3
 8009118:	f007 ff36 	bl	8010f88 <HAL_TIM_PWM_ConfigChannel>
 800911c:	1e03      	subs	r3, r0, #0
 800911e:	d001      	beq.n	8009124 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8009120:	f7fd f930 	bl	8006384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009124:	0039      	movs	r1, r7
 8009126:	4b0d      	ldr	r3, [pc, #52]	@ (800915c <MX_TIM2_Init+0xe0>)
 8009128:	2208      	movs	r2, #8
 800912a:	0018      	movs	r0, r3
 800912c:	f007 ff2c 	bl	8010f88 <HAL_TIM_PWM_ConfigChannel>
 8009130:	1e03      	subs	r3, r0, #0
 8009132:	d001      	beq.n	8009138 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8009134:	f7fd f926 	bl	8006384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009138:	0039      	movs	r1, r7
 800913a:	4b08      	ldr	r3, [pc, #32]	@ (800915c <MX_TIM2_Init+0xe0>)
 800913c:	220c      	movs	r2, #12
 800913e:	0018      	movs	r0, r3
 8009140:	f007 ff22 	bl	8010f88 <HAL_TIM_PWM_ConfigChannel>
 8009144:	1e03      	subs	r3, r0, #0
 8009146:	d001      	beq.n	800914c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8009148:	f7fd f91c 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800914c:	4b03      	ldr	r3, [pc, #12]	@ (800915c <MX_TIM2_Init+0xe0>)
 800914e:	0018      	movs	r0, r3
 8009150:	f000 f8aa 	bl	80092a8 <HAL_TIM_MspPostInit>

}
 8009154:	46c0      	nop			@ (mov r8, r8)
 8009156:	46bd      	mov	sp, r7
 8009158:	b006      	add	sp, #24
 800915a:	bd80      	pop	{r7, pc}
 800915c:	200028b8 	.word	0x200028b8
 8009160:	0000ffff 	.word	0x0000ffff

08009164 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800916a:	2310      	movs	r3, #16
 800916c:	18fb      	adds	r3, r7, r3
 800916e:	0018      	movs	r0, r3
 8009170:	2308      	movs	r3, #8
 8009172:	001a      	movs	r2, r3
 8009174:	2100      	movs	r1, #0
 8009176:	f00e fff5 	bl	8018164 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800917a:	003b      	movs	r3, r7
 800917c:	0018      	movs	r0, r3
 800917e:	2310      	movs	r3, #16
 8009180:	001a      	movs	r2, r3
 8009182:	2100      	movs	r1, #0
 8009184:	f00e ffee 	bl	8018164 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009188:	4b32      	ldr	r3, [pc, #200]	@ (8009254 <MX_TIM3_Init+0xf0>)
 800918a:	4a33      	ldr	r2, [pc, #204]	@ (8009258 <MX_TIM3_Init+0xf4>)
 800918c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800918e:	4b31      	ldr	r3, [pc, #196]	@ (8009254 <MX_TIM3_Init+0xf0>)
 8009190:	2200      	movs	r2, #0
 8009192:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009194:	4b2f      	ldr	r3, [pc, #188]	@ (8009254 <MX_TIM3_Init+0xf0>)
 8009196:	2200      	movs	r2, #0
 8009198:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800919a:	4b2e      	ldr	r3, [pc, #184]	@ (8009254 <MX_TIM3_Init+0xf0>)
 800919c:	4a2f      	ldr	r2, [pc, #188]	@ (800925c <MX_TIM3_Init+0xf8>)
 800919e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091a0:	4b2c      	ldr	r3, [pc, #176]	@ (8009254 <MX_TIM3_Init+0xf0>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091a6:	4b2b      	ldr	r3, [pc, #172]	@ (8009254 <MX_TIM3_Init+0xf0>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80091ac:	4b29      	ldr	r3, [pc, #164]	@ (8009254 <MX_TIM3_Init+0xf0>)
 80091ae:	0018      	movs	r0, r3
 80091b0:	f007 fe18 	bl	8010de4 <HAL_TIM_PWM_Init>
 80091b4:	1e03      	subs	r3, r0, #0
 80091b6:	d001      	beq.n	80091bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80091b8:	f7fd f8e4 	bl	8006384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091bc:	2110      	movs	r1, #16
 80091be:	187b      	adds	r3, r7, r1
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091c4:	187b      	adds	r3, r7, r1
 80091c6:	2200      	movs	r2, #0
 80091c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80091ca:	187a      	adds	r2, r7, r1
 80091cc:	4b21      	ldr	r3, [pc, #132]	@ (8009254 <MX_TIM3_Init+0xf0>)
 80091ce:	0011      	movs	r1, r2
 80091d0:	0018      	movs	r0, r3
 80091d2:	f008 f925 	bl	8011420 <HAL_TIMEx_MasterConfigSynchronization>
 80091d6:	1e03      	subs	r3, r0, #0
 80091d8:	d001      	beq.n	80091de <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80091da:	f7fd f8d3 	bl	8006384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80091de:	003b      	movs	r3, r7
 80091e0:	2260      	movs	r2, #96	@ 0x60
 80091e2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80091e4:	003b      	movs	r3, r7
 80091e6:	2200      	movs	r2, #0
 80091e8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80091ea:	003b      	movs	r3, r7
 80091ec:	2200      	movs	r2, #0
 80091ee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80091f0:	003b      	movs	r3, r7
 80091f2:	2200      	movs	r2, #0
 80091f4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80091f6:	0039      	movs	r1, r7
 80091f8:	4b16      	ldr	r3, [pc, #88]	@ (8009254 <MX_TIM3_Init+0xf0>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	0018      	movs	r0, r3
 80091fe:	f007 fec3 	bl	8010f88 <HAL_TIM_PWM_ConfigChannel>
 8009202:	1e03      	subs	r3, r0, #0
 8009204:	d001      	beq.n	800920a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8009206:	f7fd f8bd 	bl	8006384 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800920a:	4b12      	ldr	r3, [pc, #72]	@ (8009254 <MX_TIM3_Init+0xf0>)
 800920c:	2104      	movs	r1, #4
 800920e:	0018      	movs	r0, r3
 8009210:	f008 f964 	bl	80114dc <HAL_TIMEx_RemapConfig>
 8009214:	1e03      	subs	r3, r0, #0
 8009216:	d001      	beq.n	800921c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8009218:	f7fd f8b4 	bl	8006384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800921c:	0039      	movs	r1, r7
 800921e:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <MX_TIM3_Init+0xf0>)
 8009220:	2204      	movs	r2, #4
 8009222:	0018      	movs	r0, r3
 8009224:	f007 feb0 	bl	8010f88 <HAL_TIM_PWM_ConfigChannel>
 8009228:	1e03      	subs	r3, r0, #0
 800922a:	d001      	beq.n	8009230 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800922c:	f7fd f8aa 	bl	8006384 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009230:	0039      	movs	r1, r7
 8009232:	4b08      	ldr	r3, [pc, #32]	@ (8009254 <MX_TIM3_Init+0xf0>)
 8009234:	2208      	movs	r2, #8
 8009236:	0018      	movs	r0, r3
 8009238:	f007 fea6 	bl	8010f88 <HAL_TIM_PWM_ConfigChannel>
 800923c:	1e03      	subs	r3, r0, #0
 800923e:	d001      	beq.n	8009244 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8009240:	f7fd f8a0 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009244:	4b03      	ldr	r3, [pc, #12]	@ (8009254 <MX_TIM3_Init+0xf0>)
 8009246:	0018      	movs	r0, r3
 8009248:	f000 f82e 	bl	80092a8 <HAL_TIM_MspPostInit>

}
 800924c:	46c0      	nop			@ (mov r8, r8)
 800924e:	46bd      	mov	sp, r7
 8009250:	b006      	add	sp, #24
 8009252:	bd80      	pop	{r7, pc}
 8009254:	200028f8 	.word	0x200028f8
 8009258:	40000400 	.word	0x40000400
 800925c:	0000ffff 	.word	0x0000ffff

08009260 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	2380      	movs	r3, #128	@ 0x80
 800926e:	05db      	lsls	r3, r3, #23
 8009270:	429a      	cmp	r2, r3
 8009272:	d106      	bne.n	8009282 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009274:	4b0a      	ldr	r3, [pc, #40]	@ (80092a0 <HAL_TIM_PWM_MspInit+0x40>)
 8009276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009278:	4b09      	ldr	r3, [pc, #36]	@ (80092a0 <HAL_TIM_PWM_MspInit+0x40>)
 800927a:	2101      	movs	r1, #1
 800927c:	430a      	orrs	r2, r1
 800927e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009280:	e00a      	b.n	8009298 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a07      	ldr	r2, [pc, #28]	@ (80092a4 <HAL_TIM_PWM_MspInit+0x44>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d105      	bne.n	8009298 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800928c:	4b04      	ldr	r3, [pc, #16]	@ (80092a0 <HAL_TIM_PWM_MspInit+0x40>)
 800928e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009290:	4b03      	ldr	r3, [pc, #12]	@ (80092a0 <HAL_TIM_PWM_MspInit+0x40>)
 8009292:	2102      	movs	r1, #2
 8009294:	430a      	orrs	r2, r1
 8009296:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009298:	46c0      	nop			@ (mov r8, r8)
 800929a:	46bd      	mov	sp, r7
 800929c:	b002      	add	sp, #8
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	40021000 	.word	0x40021000
 80092a4:	40000400 	.word	0x40000400

080092a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b08b      	sub	sp, #44	@ 0x2c
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092b0:	2414      	movs	r4, #20
 80092b2:	193b      	adds	r3, r7, r4
 80092b4:	0018      	movs	r0, r3
 80092b6:	2314      	movs	r3, #20
 80092b8:	001a      	movs	r2, r3
 80092ba:	2100      	movs	r1, #0
 80092bc:	f00e ff52 	bl	8018164 <memset>
  if(timHandle->Instance==TIM2)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	2380      	movs	r3, #128	@ 0x80
 80092c6:	05db      	lsls	r3, r3, #23
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d123      	bne.n	8009314 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092cc:	4b27      	ldr	r3, [pc, #156]	@ (800936c <HAL_TIM_MspPostInit+0xc4>)
 80092ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d0:	4b26      	ldr	r3, [pc, #152]	@ (800936c <HAL_TIM_MspPostInit+0xc4>)
 80092d2:	2101      	movs	r1, #1
 80092d4:	430a      	orrs	r2, r1
 80092d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80092d8:	4b24      	ldr	r3, [pc, #144]	@ (800936c <HAL_TIM_MspPostInit+0xc4>)
 80092da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092dc:	2201      	movs	r2, #1
 80092de:	4013      	ands	r3, r2
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80092e4:	0021      	movs	r1, r4
 80092e6:	187b      	adds	r3, r7, r1
 80092e8:	220d      	movs	r2, #13
 80092ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092ec:	187b      	adds	r3, r7, r1
 80092ee:	2202      	movs	r2, #2
 80092f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	2200      	movs	r2, #0
 80092f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092f8:	187b      	adds	r3, r7, r1
 80092fa:	2200      	movs	r2, #0
 80092fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80092fe:	187b      	adds	r3, r7, r1
 8009300:	2202      	movs	r2, #2
 8009302:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009304:	187a      	adds	r2, r7, r1
 8009306:	23a0      	movs	r3, #160	@ 0xa0
 8009308:	05db      	lsls	r3, r3, #23
 800930a:	0011      	movs	r1, r2
 800930c:	0018      	movs	r0, r3
 800930e:	f001 ff11 	bl	800b134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009312:	e027      	b.n	8009364 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a15      	ldr	r2, [pc, #84]	@ (8009370 <HAL_TIM_MspPostInit+0xc8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d122      	bne.n	8009364 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800931e:	4b13      	ldr	r3, [pc, #76]	@ (800936c <HAL_TIM_MspPostInit+0xc4>)
 8009320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009322:	4b12      	ldr	r3, [pc, #72]	@ (800936c <HAL_TIM_MspPostInit+0xc4>)
 8009324:	2104      	movs	r1, #4
 8009326:	430a      	orrs	r2, r1
 8009328:	62da      	str	r2, [r3, #44]	@ 0x2c
 800932a:	4b10      	ldr	r3, [pc, #64]	@ (800936c <HAL_TIM_MspPostInit+0xc4>)
 800932c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932e:	2204      	movs	r2, #4
 8009330:	4013      	ands	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8009336:	2114      	movs	r1, #20
 8009338:	187b      	adds	r3, r7, r1
 800933a:	22e0      	movs	r2, #224	@ 0xe0
 800933c:	0052      	lsls	r2, r2, #1
 800933e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009340:	187b      	adds	r3, r7, r1
 8009342:	2202      	movs	r2, #2
 8009344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009346:	187b      	adds	r3, r7, r1
 8009348:	2200      	movs	r2, #0
 800934a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800934c:	187b      	adds	r3, r7, r1
 800934e:	2200      	movs	r2, #0
 8009350:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009352:	187b      	adds	r3, r7, r1
 8009354:	2202      	movs	r2, #2
 8009356:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009358:	187b      	adds	r3, r7, r1
 800935a:	4a06      	ldr	r2, [pc, #24]	@ (8009374 <HAL_TIM_MspPostInit+0xcc>)
 800935c:	0019      	movs	r1, r3
 800935e:	0010      	movs	r0, r2
 8009360:	f001 fee8 	bl	800b134 <HAL_GPIO_Init>
}
 8009364:	46c0      	nop			@ (mov r8, r8)
 8009366:	46bd      	mov	sp, r7
 8009368:	b00b      	add	sp, #44	@ 0x2c
 800936a:	bd90      	pop	{r4, r7, pc}
 800936c:	40021000 	.word	0x40021000
 8009370:	40000400 	.word	0x40000400
 8009374:	50000800 	.word	0x50000800

08009378 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800937c:	4b17      	ldr	r3, [pc, #92]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 800937e:	4a18      	ldr	r2, [pc, #96]	@ (80093e0 <MX_LPUART1_UART_Init+0x68>)
 8009380:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8009382:	4b16      	ldr	r3, [pc, #88]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 8009384:	22e1      	movs	r2, #225	@ 0xe1
 8009386:	0252      	lsls	r2, r2, #9
 8009388:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800938a:	4b14      	ldr	r3, [pc, #80]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 800938c:	2200      	movs	r2, #0
 800938e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009390:	4b12      	ldr	r3, [pc, #72]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 8009392:	2200      	movs	r2, #0
 8009394:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009396:	4b11      	ldr	r3, [pc, #68]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 8009398:	2200      	movs	r2, #0
 800939a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800939c:	4b0f      	ldr	r3, [pc, #60]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 800939e:	220c      	movs	r2, #12
 80093a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80093a2:	4b0e      	ldr	r3, [pc, #56]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80093a8:	4b0c      	ldr	r3, [pc, #48]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80093ae:	4b0b      	ldr	r3, [pc, #44]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 80093b0:	2218      	movs	r2, #24
 80093b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80093b4:	4b09      	ldr	r3, [pc, #36]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 80093b6:	2280      	movs	r2, #128	@ 0x80
 80093b8:	0212      	lsls	r2, r2, #8
 80093ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80093bc:	4b07      	ldr	r3, [pc, #28]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 80093be:	2280      	movs	r2, #128	@ 0x80
 80093c0:	0152      	lsls	r2, r2, #5
 80093c2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <MX_LPUART1_UART_Init+0x64>)
 80093c6:	0018      	movs	r0, r3
 80093c8:	f008 f8a6 	bl	8011518 <HAL_UART_Init>
 80093cc:	1e03      	subs	r3, r0, #0
 80093ce:	d001      	beq.n	80093d4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80093d0:	f7fc ffd8 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80093d4:	46c0      	nop			@ (mov r8, r8)
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	20002938 	.word	0x20002938
 80093e0:	40004800 	.word	0x40004800

080093e4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80093e8:	4b16      	ldr	r3, [pc, #88]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 80093ea:	4a17      	ldr	r2, [pc, #92]	@ (8009448 <MX_USART1_UART_Init+0x64>)
 80093ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80093ee:	4b15      	ldr	r3, [pc, #84]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 80093f0:	22e1      	movs	r2, #225	@ 0xe1
 80093f2:	0252      	lsls	r2, r2, #9
 80093f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80093f6:	4b13      	ldr	r3, [pc, #76]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80093fc:	4b11      	ldr	r3, [pc, #68]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 80093fe:	2200      	movs	r2, #0
 8009400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009402:	4b10      	ldr	r3, [pc, #64]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 8009404:	2200      	movs	r2, #0
 8009406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009408:	4b0e      	ldr	r3, [pc, #56]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 800940a:	220c      	movs	r2, #12
 800940c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800940e:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 8009410:	2200      	movs	r2, #0
 8009412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009414:	4b0b      	ldr	r3, [pc, #44]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 8009416:	2200      	movs	r2, #0
 8009418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800941a:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 800941c:	2200      	movs	r2, #0
 800941e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8009420:	4b08      	ldr	r3, [pc, #32]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 8009422:	2208      	movs	r2, #8
 8009424:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009426:	4b07      	ldr	r3, [pc, #28]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 8009428:	2280      	movs	r2, #128	@ 0x80
 800942a:	0212      	lsls	r2, r2, #8
 800942c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800942e:	4b05      	ldr	r3, [pc, #20]	@ (8009444 <MX_USART1_UART_Init+0x60>)
 8009430:	0018      	movs	r0, r3
 8009432:	f008 f871 	bl	8011518 <HAL_UART_Init>
 8009436:	1e03      	subs	r3, r0, #0
 8009438:	d001      	beq.n	800943e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800943a:	f7fc ffa3 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800943e:	46c0      	nop			@ (mov r8, r8)
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	200029f0 	.word	0x200029f0
 8009448:	40013800 	.word	0x40013800

0800944c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009450:	4b14      	ldr	r3, [pc, #80]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009452:	4a15      	ldr	r2, [pc, #84]	@ (80094a8 <MX_USART4_UART_Init+0x5c>)
 8009454:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009456:	4b13      	ldr	r3, [pc, #76]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009458:	22e1      	movs	r2, #225	@ 0xe1
 800945a:	0252      	lsls	r2, r2, #9
 800945c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800945e:	4b11      	ldr	r3, [pc, #68]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009460:	2200      	movs	r2, #0
 8009462:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009464:	4b0f      	ldr	r3, [pc, #60]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009466:	2200      	movs	r2, #0
 8009468:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800946a:	4b0e      	ldr	r3, [pc, #56]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 800946c:	2200      	movs	r2, #0
 800946e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009470:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009472:	220c      	movs	r2, #12
 8009474:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009476:	4b0b      	ldr	r3, [pc, #44]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009478:	2200      	movs	r2, #0
 800947a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800947c:	4b09      	ldr	r3, [pc, #36]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 800947e:	2200      	movs	r2, #0
 8009480:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009482:	4b08      	ldr	r3, [pc, #32]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009484:	2200      	movs	r2, #0
 8009486:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009488:	4b06      	ldr	r3, [pc, #24]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 800948a:	2200      	movs	r2, #0
 800948c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800948e:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <MX_USART4_UART_Init+0x58>)
 8009490:	0018      	movs	r0, r3
 8009492:	f008 f841 	bl	8011518 <HAL_UART_Init>
 8009496:	1e03      	subs	r3, r0, #0
 8009498:	d001      	beq.n	800949e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800949a:	f7fc ff73 	bl	8006384 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800949e:	46c0      	nop			@ (mov r8, r8)
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20002aa8 	.word	0x20002aa8
 80094a8:	40004c00 	.word	0x40004c00

080094ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b08d      	sub	sp, #52	@ 0x34
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094b4:	241c      	movs	r4, #28
 80094b6:	193b      	adds	r3, r7, r4
 80094b8:	0018      	movs	r0, r3
 80094ba:	2314      	movs	r3, #20
 80094bc:	001a      	movs	r2, r3
 80094be:	2100      	movs	r1, #0
 80094c0:	f00e fe50 	bl	8018164 <memset>
  if(uartHandle->Instance==LPUART1)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a87      	ldr	r2, [pc, #540]	@ (80096e8 <HAL_UART_MspInit+0x23c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d129      	bne.n	8009522 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80094ce:	4b87      	ldr	r3, [pc, #540]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80094d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d2:	4b86      	ldr	r3, [pc, #536]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80094d4:	2180      	movs	r1, #128	@ 0x80
 80094d6:	02c9      	lsls	r1, r1, #11
 80094d8:	430a      	orrs	r2, r1
 80094da:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094dc:	4b83      	ldr	r3, [pc, #524]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80094de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e0:	4b82      	ldr	r3, [pc, #520]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80094e2:	2104      	movs	r1, #4
 80094e4:	430a      	orrs	r2, r1
 80094e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094e8:	4b80      	ldr	r3, [pc, #512]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	2204      	movs	r2, #4
 80094ee:	4013      	ands	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80094f4:	0021      	movs	r1, r4
 80094f6:	187b      	adds	r3, r7, r1
 80094f8:	2203      	movs	r2, #3
 80094fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fc:	187b      	adds	r3, r7, r1
 80094fe:	2202      	movs	r2, #2
 8009500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009502:	187b      	adds	r3, r7, r1
 8009504:	2200      	movs	r2, #0
 8009506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009508:	187b      	adds	r3, r7, r1
 800950a:	2203      	movs	r2, #3
 800950c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800950e:	187b      	adds	r3, r7, r1
 8009510:	2206      	movs	r2, #6
 8009512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009514:	187b      	adds	r3, r7, r1
 8009516:	4a76      	ldr	r2, [pc, #472]	@ (80096f0 <HAL_UART_MspInit+0x244>)
 8009518:	0019      	movs	r1, r3
 800951a:	0010      	movs	r0, r2
 800951c:	f001 fe0a 	bl	800b134 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8009520:	e0dd      	b.n	80096de <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a73      	ldr	r2, [pc, #460]	@ (80096f4 <HAL_UART_MspInit+0x248>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d12b      	bne.n	8009584 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800952c:	4b6f      	ldr	r3, [pc, #444]	@ (80096ec <HAL_UART_MspInit+0x240>)
 800952e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009530:	4b6e      	ldr	r3, [pc, #440]	@ (80096ec <HAL_UART_MspInit+0x240>)
 8009532:	2180      	movs	r1, #128	@ 0x80
 8009534:	01c9      	lsls	r1, r1, #7
 8009536:	430a      	orrs	r2, r1
 8009538:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800953a:	4b6c      	ldr	r3, [pc, #432]	@ (80096ec <HAL_UART_MspInit+0x240>)
 800953c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953e:	4b6b      	ldr	r3, [pc, #428]	@ (80096ec <HAL_UART_MspInit+0x240>)
 8009540:	2101      	movs	r1, #1
 8009542:	430a      	orrs	r2, r1
 8009544:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009546:	4b69      	ldr	r3, [pc, #420]	@ (80096ec <HAL_UART_MspInit+0x240>)
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	2201      	movs	r2, #1
 800954c:	4013      	ands	r3, r2
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009552:	211c      	movs	r1, #28
 8009554:	187b      	adds	r3, r7, r1
 8009556:	22c0      	movs	r2, #192	@ 0xc0
 8009558:	00d2      	lsls	r2, r2, #3
 800955a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800955c:	187b      	adds	r3, r7, r1
 800955e:	2202      	movs	r2, #2
 8009560:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009562:	187b      	adds	r3, r7, r1
 8009564:	2200      	movs	r2, #0
 8009566:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009568:	187b      	adds	r3, r7, r1
 800956a:	2203      	movs	r2, #3
 800956c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800956e:	187b      	adds	r3, r7, r1
 8009570:	2204      	movs	r2, #4
 8009572:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009574:	187a      	adds	r2, r7, r1
 8009576:	23a0      	movs	r3, #160	@ 0xa0
 8009578:	05db      	lsls	r3, r3, #23
 800957a:	0011      	movs	r1, r2
 800957c:	0018      	movs	r0, r3
 800957e:	f001 fdd9 	bl	800b134 <HAL_GPIO_Init>
}
 8009582:	e0ac      	b.n	80096de <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a5b      	ldr	r2, [pc, #364]	@ (80096f8 <HAL_UART_MspInit+0x24c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d000      	beq.n	8009590 <HAL_UART_MspInit+0xe4>
 800958e:	e0a6      	b.n	80096de <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009590:	4b56      	ldr	r3, [pc, #344]	@ (80096ec <HAL_UART_MspInit+0x240>)
 8009592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009594:	4b55      	ldr	r3, [pc, #340]	@ (80096ec <HAL_UART_MspInit+0x240>)
 8009596:	2180      	movs	r1, #128	@ 0x80
 8009598:	0309      	lsls	r1, r1, #12
 800959a:	430a      	orrs	r2, r1
 800959c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800959e:	4b53      	ldr	r3, [pc, #332]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80095a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a2:	4b52      	ldr	r3, [pc, #328]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80095a4:	2101      	movs	r1, #1
 80095a6:	430a      	orrs	r2, r1
 80095a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80095aa:	4b50      	ldr	r3, [pc, #320]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80095ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ae:	2201      	movs	r2, #1
 80095b0:	4013      	ands	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
 80095b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80095b6:	4b4d      	ldr	r3, [pc, #308]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80095b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ba:	4b4c      	ldr	r3, [pc, #304]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80095bc:	2104      	movs	r1, #4
 80095be:	430a      	orrs	r2, r1
 80095c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80095c2:	4b4a      	ldr	r3, [pc, #296]	@ (80096ec <HAL_UART_MspInit+0x240>)
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	2204      	movs	r2, #4
 80095c8:	4013      	ands	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80095ce:	241c      	movs	r4, #28
 80095d0:	193b      	adds	r3, r7, r4
 80095d2:	2202      	movs	r2, #2
 80095d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095d6:	193b      	adds	r3, r7, r4
 80095d8:	2202      	movs	r2, #2
 80095da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095dc:	193b      	adds	r3, r7, r4
 80095de:	2200      	movs	r2, #0
 80095e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095e2:	193b      	adds	r3, r7, r4
 80095e4:	2203      	movs	r2, #3
 80095e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80095e8:	193b      	adds	r3, r7, r4
 80095ea:	2206      	movs	r2, #6
 80095ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ee:	193a      	adds	r2, r7, r4
 80095f0:	23a0      	movs	r3, #160	@ 0xa0
 80095f2:	05db      	lsls	r3, r3, #23
 80095f4:	0011      	movs	r1, r2
 80095f6:	0018      	movs	r0, r3
 80095f8:	f001 fd9c 	bl	800b134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80095fc:	0021      	movs	r1, r4
 80095fe:	187b      	adds	r3, r7, r1
 8009600:	2280      	movs	r2, #128	@ 0x80
 8009602:	00d2      	lsls	r2, r2, #3
 8009604:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009606:	187b      	adds	r3, r7, r1
 8009608:	2202      	movs	r2, #2
 800960a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960c:	187b      	adds	r3, r7, r1
 800960e:	2200      	movs	r2, #0
 8009610:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009612:	187b      	adds	r3, r7, r1
 8009614:	2203      	movs	r2, #3
 8009616:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009618:	187b      	adds	r3, r7, r1
 800961a:	2206      	movs	r2, #6
 800961c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800961e:	187b      	adds	r3, r7, r1
 8009620:	4a33      	ldr	r2, [pc, #204]	@ (80096f0 <HAL_UART_MspInit+0x244>)
 8009622:	0019      	movs	r1, r3
 8009624:	0010      	movs	r0, r2
 8009626:	f001 fd85 	bl	800b134 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800962a:	4b34      	ldr	r3, [pc, #208]	@ (80096fc <HAL_UART_MspInit+0x250>)
 800962c:	4a34      	ldr	r2, [pc, #208]	@ (8009700 <HAL_UART_MspInit+0x254>)
 800962e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8009630:	4b32      	ldr	r3, [pc, #200]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009632:	220c      	movs	r2, #12
 8009634:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009636:	4b31      	ldr	r3, [pc, #196]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009638:	2200      	movs	r2, #0
 800963a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800963c:	4b2f      	ldr	r3, [pc, #188]	@ (80096fc <HAL_UART_MspInit+0x250>)
 800963e:	2200      	movs	r2, #0
 8009640:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009642:	4b2e      	ldr	r3, [pc, #184]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009644:	2280      	movs	r2, #128	@ 0x80
 8009646:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009648:	4b2c      	ldr	r3, [pc, #176]	@ (80096fc <HAL_UART_MspInit+0x250>)
 800964a:	2200      	movs	r2, #0
 800964c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800964e:	4b2b      	ldr	r3, [pc, #172]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009650:	2200      	movs	r2, #0
 8009652:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8009654:	4b29      	ldr	r3, [pc, #164]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009656:	2220      	movs	r2, #32
 8009658:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800965a:	4b28      	ldr	r3, [pc, #160]	@ (80096fc <HAL_UART_MspInit+0x250>)
 800965c:	2200      	movs	r2, #0
 800965e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009660:	4b26      	ldr	r3, [pc, #152]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009662:	0018      	movs	r0, r3
 8009664:	f001 f8ec 	bl	800a840 <HAL_DMA_Init>
 8009668:	1e03      	subs	r3, r0, #0
 800966a:	d001      	beq.n	8009670 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 800966c:	f7fc fe8a 	bl	8006384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a22      	ldr	r2, [pc, #136]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009674:	675a      	str	r2, [r3, #116]	@ 0x74
 8009676:	4b21      	ldr	r3, [pc, #132]	@ (80096fc <HAL_UART_MspInit+0x250>)
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800967c:	4b21      	ldr	r3, [pc, #132]	@ (8009704 <HAL_UART_MspInit+0x258>)
 800967e:	4a22      	ldr	r2, [pc, #136]	@ (8009708 <HAL_UART_MspInit+0x25c>)
 8009680:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8009682:	4b20      	ldr	r3, [pc, #128]	@ (8009704 <HAL_UART_MspInit+0x258>)
 8009684:	220c      	movs	r2, #12
 8009686:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009688:	4b1e      	ldr	r3, [pc, #120]	@ (8009704 <HAL_UART_MspInit+0x258>)
 800968a:	2210      	movs	r2, #16
 800968c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800968e:	4b1d      	ldr	r3, [pc, #116]	@ (8009704 <HAL_UART_MspInit+0x258>)
 8009690:	2200      	movs	r2, #0
 8009692:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009694:	4b1b      	ldr	r3, [pc, #108]	@ (8009704 <HAL_UART_MspInit+0x258>)
 8009696:	2280      	movs	r2, #128	@ 0x80
 8009698:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800969a:	4b1a      	ldr	r3, [pc, #104]	@ (8009704 <HAL_UART_MspInit+0x258>)
 800969c:	2200      	movs	r2, #0
 800969e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80096a0:	4b18      	ldr	r3, [pc, #96]	@ (8009704 <HAL_UART_MspInit+0x258>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80096a6:	4b17      	ldr	r3, [pc, #92]	@ (8009704 <HAL_UART_MspInit+0x258>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80096ac:	4b15      	ldr	r3, [pc, #84]	@ (8009704 <HAL_UART_MspInit+0x258>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80096b2:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <HAL_UART_MspInit+0x258>)
 80096b4:	0018      	movs	r0, r3
 80096b6:	f001 f8c3 	bl	800a840 <HAL_DMA_Init>
 80096ba:	1e03      	subs	r3, r0, #0
 80096bc:	d001      	beq.n	80096c2 <HAL_UART_MspInit+0x216>
      Error_Handler();
 80096be:	f7fc fe61 	bl	8006384 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a0f      	ldr	r2, [pc, #60]	@ (8009704 <HAL_UART_MspInit+0x258>)
 80096c6:	671a      	str	r2, [r3, #112]	@ 0x70
 80096c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009704 <HAL_UART_MspInit+0x258>)
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80096ce:	2200      	movs	r2, #0
 80096d0:	2100      	movs	r1, #0
 80096d2:	200e      	movs	r0, #14
 80096d4:	f001 f882 	bl	800a7dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80096d8:	200e      	movs	r0, #14
 80096da:	f001 f894 	bl	800a806 <HAL_NVIC_EnableIRQ>
}
 80096de:	46c0      	nop			@ (mov r8, r8)
 80096e0:	46bd      	mov	sp, r7
 80096e2:	b00d      	add	sp, #52	@ 0x34
 80096e4:	bd90      	pop	{r4, r7, pc}
 80096e6:	46c0      	nop			@ (mov r8, r8)
 80096e8:	40004800 	.word	0x40004800
 80096ec:	40021000 	.word	0x40021000
 80096f0:	50000800 	.word	0x50000800
 80096f4:	40013800 	.word	0x40013800
 80096f8:	40004c00 	.word	0x40004c00
 80096fc:	20002b60 	.word	0x20002b60
 8009700:	4002006c 	.word	0x4002006c
 8009704:	20002ba8 	.word	0x20002ba8
 8009708:	40020080 	.word	0x40020080

0800970c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009714:	f000 fbec 	bl	8009ef0 <HAL_GetTick>
 8009718:	0003      	movs	r3, r0
 800971a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800971c:	4b1c      	ldr	r3, [pc, #112]	@ (8009790 <TimestampIsReached+0x84>)
 800971e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d307      	bcc.n	8009738 <TimestampIsReached+0x2c>
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	429a      	cmp	r2, r3
 8009732:	d901      	bls.n	8009738 <TimestampIsReached+0x2c>
 8009734:	2201      	movs	r2, #1
 8009736:	e000      	b.n	800973a <TimestampIsReached+0x2e>
 8009738:	2200      	movs	r2, #0
 800973a:	230f      	movs	r3, #15
 800973c:	18fb      	adds	r3, r7, r3
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	781a      	ldrb	r2, [r3, #0]
 8009742:	2101      	movs	r1, #1
 8009744:	400a      	ands	r2, r1
 8009746:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d207      	bcs.n	8009760 <TimestampIsReached+0x54>
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	429a      	cmp	r2, r3
 800975a:	d201      	bcs.n	8009760 <TimestampIsReached+0x54>
 800975c:	2201      	movs	r2, #1
 800975e:	e000      	b.n	8009762 <TimestampIsReached+0x56>
 8009760:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8009762:	200e      	movs	r0, #14
 8009764:	183b      	adds	r3, r7, r0
 8009766:	701a      	strb	r2, [r3, #0]
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	2101      	movs	r1, #1
 800976c:	400a      	ands	r2, r1
 800976e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8009770:	230f      	movs	r3, #15
 8009772:	18fb      	adds	r3, r7, r3
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d103      	bne.n	8009782 <TimestampIsReached+0x76>
 800977a:	183b      	adds	r3, r7, r0
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8009786:	2300      	movs	r3, #0
}
 8009788:	0018      	movs	r0, r3
 800978a:	46bd      	mov	sp, r7
 800978c:	b006      	add	sp, #24
 800978e:	bd80      	pop	{r7, pc}
 8009790:	7fffffff 	.word	0x7fffffff

08009794 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800979c:	f000 fba8 	bl	8009ef0 <HAL_GetTick>
 80097a0:	0002      	movs	r2, r0
 80097a2:	4904      	ldr	r1, [pc, #16]	@ (80097b4 <AddTimestamp+0x20>)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	0018      	movs	r0, r3
 80097a8:	f00e fc38 	bl	801801c <siprintf>
}
 80097ac:	46c0      	nop			@ (mov r8, r8)
 80097ae:	46bd      	mov	sp, r7
 80097b0:	b002      	add	sp, #8
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	0801b8b4 	.word	0x0801b8b4

080097b8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80097b8:	b40c      	push	{r2, r3}
 80097ba:	b5b0      	push	{r4, r5, r7, lr}
 80097bc:	4c2b      	ldr	r4, [pc, #172]	@ (800986c <CreateLine+0xb4>)
 80097be:	44a5      	add	sp, r4
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	0002      	movs	r2, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009870 <CreateLine+0xb8>)
 80097c8:	2182      	movs	r1, #130	@ 0x82
 80097ca:	00c9      	lsls	r1, r1, #3
 80097cc:	185b      	adds	r3, r3, r1
 80097ce:	19db      	adds	r3, r3, r7
 80097d0:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80097d2:	4b28      	ldr	r3, [pc, #160]	@ (8009874 <CreateLine+0xbc>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	4a26      	ldr	r2, [pc, #152]	@ (8009870 <CreateLine+0xb8>)
 80097d8:	1852      	adds	r2, r2, r1
 80097da:	19d2      	adds	r2, r2, r7
 80097dc:	7812      	ldrb	r2, [r2, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d83b      	bhi.n	800985a <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4924      	ldr	r1, [pc, #144]	@ (8009878 <CreateLine+0xc0>)
 80097e6:	240c      	movs	r4, #12
 80097e8:	193b      	adds	r3, r7, r4
 80097ea:	0018      	movs	r0, r3
 80097ec:	f00e fc16 	bl	801801c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80097f0:	4b20      	ldr	r3, [pc, #128]	@ (8009874 <CreateLine+0xbc>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d909      	bls.n	800980c <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80097f8:	193b      	adds	r3, r7, r4
 80097fa:	0018      	movs	r0, r3
 80097fc:	f7f6 fc84 	bl	8000108 <strlen>
 8009800:	0002      	movs	r2, r0
 8009802:	193b      	adds	r3, r7, r4
 8009804:	189b      	adds	r3, r3, r2
 8009806:	0018      	movs	r0, r3
 8009808:	f7ff ffc4 	bl	8009794 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800980c:	240c      	movs	r4, #12
 800980e:	193b      	adds	r3, r7, r4
 8009810:	0018      	movs	r0, r3
 8009812:	f7f6 fc79 	bl	8000108 <strlen>
 8009816:	0003      	movs	r3, r0
 8009818:	4918      	ldr	r1, [pc, #96]	@ (800987c <CreateLine+0xc4>)
 800981a:	187a      	adds	r2, r7, r1
 800981c:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800981e:	4b18      	ldr	r3, [pc, #96]	@ (8009880 <CreateLine+0xc8>)
 8009820:	2508      	movs	r5, #8
 8009822:	195b      	adds	r3, r3, r5
 8009824:	19db      	adds	r3, r3, r7
 8009826:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8009828:	193a      	adds	r2, r7, r4
 800982a:	187b      	adds	r3, r7, r1
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	18d0      	adds	r0, r2, r3
 8009830:	187b      	adds	r3, r7, r1
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2280      	movs	r2, #128	@ 0x80
 8009836:	00d2      	lsls	r2, r2, #3
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	0019      	movs	r1, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2283      	movs	r2, #131	@ 0x83
 8009840:	00d2      	lsls	r2, r2, #3
 8009842:	1952      	adds	r2, r2, r5
 8009844:	19d2      	adds	r2, r2, r7
 8009846:	6812      	ldr	r2, [r2, #0]
 8009848:	f00e fc80 	bl	801814c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800984c:	193a      	adds	r2, r7, r4
 800984e:	4b0d      	ldr	r3, [pc, #52]	@ (8009884 <CreateLine+0xcc>)
 8009850:	0011      	movs	r1, r2
 8009852:	0018      	movs	r0, r3
 8009854:	f00e fbd2 	bl	8017ffc <iprintf>
 8009858:	e000      	b.n	800985c <CreateLine+0xa4>
    return;
 800985a:	46c0      	nop			@ (mov r8, r8)
}
 800985c:	46bd      	mov	sp, r7
 800985e:	2382      	movs	r3, #130	@ 0x82
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	449d      	add	sp, r3
 8009864:	bcb0      	pop	{r4, r5, r7}
 8009866:	bc08      	pop	{r3}
 8009868:	b002      	add	sp, #8
 800986a:	4718      	bx	r3
 800986c:	fffffbf0 	.word	0xfffffbf0
 8009870:	fffffbf7 	.word	0xfffffbf7
 8009874:	2000005c 	.word	0x2000005c
 8009878:	0801b8c0 	.word	0x0801b8c0
 800987c:	0000040c 	.word	0x0000040c
 8009880:	0000041c 	.word	0x0000041c
 8009884:	0801b8c4 	.word	0x0801b8c4

08009888 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	b29a      	uxth	r2, r3
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	4804      	ldr	r0, [pc, #16]	@ (80098ac <_write+0x24>)
 800989c:	2364      	movs	r3, #100	@ 0x64
 800989e:	f007 fea1 	bl	80115e4 <HAL_UART_Transmit>
  return count;
 80098a2:	687b      	ldr	r3, [r7, #4]
}
 80098a4:	0018      	movs	r0, r3
 80098a6:	46bd      	mov	sp, r7
 80098a8:	b004      	add	sp, #16
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	200029f0 	.word	0x200029f0

080098b0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	0002      	movs	r2, r0
 80098b8:	1dfb      	adds	r3, r7, #7
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	4b03      	ldr	r3, [pc, #12]	@ (80098cc <SetVerboseLevel+0x1c>)
 80098be:	1dfa      	adds	r2, r7, #7
 80098c0:	7812      	ldrb	r2, [r2, #0]
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	46c0      	nop			@ (mov r8, r8)
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b002      	add	sp, #8
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	2000005c 	.word	0x2000005c

080098d0 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80098d4:	f000 fb0c 	bl	8009ef0 <HAL_GetTick>
 80098d8:	0003      	movs	r3, r0
}
 80098da:	0018      	movs	r0, r3
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80098e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009924 <BinaryReleaseInfo+0x44>)
 80098e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009928 <BinaryReleaseInfo+0x48>)
 80098ea:	0019      	movs	r1, r3
 80098ec:	2002      	movs	r0, #2
 80098ee:	f7ff ff63 	bl	80097b8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80098f2:	480e      	ldr	r0, [pc, #56]	@ (800992c <BinaryReleaseInfo+0x4c>)
 80098f4:	4a0e      	ldr	r2, [pc, #56]	@ (8009930 <BinaryReleaseInfo+0x50>)
 80098f6:	490c      	ldr	r1, [pc, #48]	@ (8009928 <BinaryReleaseInfo+0x48>)
 80098f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009934 <BinaryReleaseInfo+0x54>)
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	0003      	movs	r3, r0
 80098fe:	2002      	movs	r0, #2
 8009900:	f7ff ff5a 	bl	80097b8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009904:	4a0c      	ldr	r2, [pc, #48]	@ (8009938 <BinaryReleaseInfo+0x58>)
 8009906:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <BinaryReleaseInfo+0x48>)
 8009908:	0019      	movs	r1, r3
 800990a:	2002      	movs	r0, #2
 800990c:	f7ff ff54 	bl	80097b8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009910:	4b0a      	ldr	r3, [pc, #40]	@ (800993c <BinaryReleaseInfo+0x5c>)
 8009912:	4a0b      	ldr	r2, [pc, #44]	@ (8009940 <BinaryReleaseInfo+0x60>)
 8009914:	4904      	ldr	r1, [pc, #16]	@ (8009928 <BinaryReleaseInfo+0x48>)
 8009916:	2002      	movs	r0, #2
 8009918:	f7ff ff4e 	bl	80097b8 <CreateLine>
}
 800991c:	46c0      	nop			@ (mov r8, r8)
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	46c0      	nop			@ (mov r8, r8)
 8009924:	0801b8cc 	.word	0x0801b8cc
 8009928:	0801b8f8 	.word	0x0801b8f8
 800992c:	0801b8fc 	.word	0x0801b8fc
 8009930:	0801b908 	.word	0x0801b908
 8009934:	0801b91c 	.word	0x0801b91c
 8009938:	0801b928 	.word	0x0801b928
 800993c:	0801b934 	.word	0x0801b934
 8009940:	0801b93c 	.word	0x0801b93c

08009944 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009944:	b590      	push	{r4, r7, lr}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6039      	str	r1, [r7, #0]
 800994c:	0011      	movs	r1, r2
 800994e:	1dfb      	adds	r3, r7, #7
 8009950:	1c02      	adds	r2, r0, #0
 8009952:	701a      	strb	r2, [r3, #0]
 8009954:	1dbb      	adds	r3, r7, #6
 8009956:	1c0a      	adds	r2, r1, #0
 8009958:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800995a:	4b08      	ldr	r3, [pc, #32]	@ (800997c <ReadRegister+0x38>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d008      	beq.n	8009974 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8009962:	4b06      	ldr	r3, [pc, #24]	@ (800997c <ReadRegister+0x38>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	1dba      	adds	r2, r7, #6
 8009968:	7814      	ldrb	r4, [r2, #0]
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	1dfa      	adds	r2, r7, #7
 800996e:	7810      	ldrb	r0, [r2, #0]
 8009970:	0022      	movs	r2, r4
 8009972:	4798      	blx	r3
	}
}
 8009974:	46c0      	nop			@ (mov r8, r8)
 8009976:	46bd      	mov	sp, r7
 8009978:	b003      	add	sp, #12
 800997a:	bd90      	pop	{r4, r7, pc}
 800997c:	20002bf0 	.word	0x20002bf0

08009980 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6039      	str	r1, [r7, #0]
 8009988:	0011      	movs	r1, r2
 800998a:	1dfb      	adds	r3, r7, #7
 800998c:	1c02      	adds	r2, r0, #0
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	1dbb      	adds	r3, r7, #6
 8009992:	1c0a      	adds	r2, r1, #0
 8009994:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009996:	4b08      	ldr	r3, [pc, #32]	@ (80099b8 <WriteRegister+0x38>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d008      	beq.n	80099b0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800999e:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <WriteRegister+0x38>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	1dba      	adds	r2, r7, #6
 80099a4:	7814      	ldrb	r4, [r2, #0]
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	1dfa      	adds	r2, r7, #7
 80099aa:	7810      	ldrb	r0, [r2, #0]
 80099ac:	0022      	movs	r2, r4
 80099ae:	4798      	blx	r3
  }
}
 80099b0:	46c0      	nop			@ (mov r8, r8)
 80099b2:	46bd      	mov	sp, r7
 80099b4:	b003      	add	sp, #12
 80099b6:	bd90      	pop	{r4, r7, pc}
 80099b8:	20002bf4 	.word	0x20002bf4

080099bc <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	000a      	movs	r2, r1
 80099c6:	1cfb      	adds	r3, r7, #3
 80099c8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80099ca:	230f      	movs	r3, #15
 80099cc:	18fb      	adds	r3, r7, r3
 80099ce:	22ff      	movs	r2, #255	@ 0xff
 80099d0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80099d2:	230e      	movs	r3, #14
 80099d4:	18fb      	adds	r3, r7, r3
 80099d6:	2200      	movs	r2, #0
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e037      	b.n	8009a4c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80099dc:	230e      	movs	r3, #14
 80099de:	18fb      	adds	r3, r7, r3
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	18d3      	adds	r3, r2, r3
 80099e6:	7819      	ldrb	r1, [r3, #0]
 80099e8:	220f      	movs	r2, #15
 80099ea:	18bb      	adds	r3, r7, r2
 80099ec:	18ba      	adds	r2, r7, r2
 80099ee:	7812      	ldrb	r2, [r2, #0]
 80099f0:	404a      	eors	r2, r1
 80099f2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80099f4:	230d      	movs	r3, #13
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	2200      	movs	r2, #0
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e01b      	b.n	8009a36 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80099fe:	210f      	movs	r1, #15
 8009a00:	187b      	adds	r3, r7, r1
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	b25b      	sxtb	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	da09      	bge.n	8009a1e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8009a0a:	187b      	adds	r3, r7, r1
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	b25b      	sxtb	r3, r3
 8009a12:	2231      	movs	r2, #49	@ 0x31
 8009a14:	4053      	eors	r3, r2
 8009a16:	b25a      	sxtb	r2, r3
 8009a18:	187b      	adds	r3, r7, r1
 8009a1a:	701a      	strb	r2, [r3, #0]
 8009a1c:	e005      	b.n	8009a2a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009a1e:	230f      	movs	r3, #15
 8009a20:	18fa      	adds	r2, r7, r3
 8009a22:	18fb      	adds	r3, r7, r3
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	18db      	adds	r3, r3, r3
 8009a28:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009a2a:	210d      	movs	r1, #13
 8009a2c:	187b      	adds	r3, r7, r1
 8009a2e:	781a      	ldrb	r2, [r3, #0]
 8009a30:	187b      	adds	r3, r7, r1
 8009a32:	3201      	adds	r2, #1
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	230d      	movs	r3, #13
 8009a38:	18fb      	adds	r3, r7, r3
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b07      	cmp	r3, #7
 8009a3e:	d9de      	bls.n	80099fe <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009a40:	210e      	movs	r1, #14
 8009a42:	187b      	adds	r3, r7, r1
 8009a44:	781a      	ldrb	r2, [r3, #0]
 8009a46:	187b      	adds	r3, r7, r1
 8009a48:	3201      	adds	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	230e      	movs	r3, #14
 8009a4e:	18fa      	adds	r2, r7, r3
 8009a50:	1cfb      	adds	r3, r7, #3
 8009a52:	7812      	ldrb	r2, [r2, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d3c0      	bcc.n	80099dc <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009a5a:	230f      	movs	r3, #15
 8009a5c:	18fb      	adds	r3, r7, r3
 8009a5e:	781b      	ldrb	r3, [r3, #0]
}
 8009a60:	0018      	movs	r0, r3
 8009a62:	46bd      	mov	sp, r7
 8009a64:	b004      	add	sp, #16
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8009a72:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <HIDS_Init+0x34>)
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <HIDS_Init+0x38>)
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <HIDS_Init+0x3c>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	0018      	movs	r0, r3
 8009a84:	f000 f8d0 	bl	8009c28 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8009a88:	4b07      	ldr	r3, [pc, #28]	@ (8009aa8 <HIDS_Init+0x40>)
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f000 f82b 	bl	8009ae8 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8009a92:	46c0      	nop			@ (mov r8, r8)
 8009a94:	46bd      	mov	sp, r7
 8009a96:	b002      	add	sp, #8
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	46c0      	nop			@ (mov r8, r8)
 8009a9c:	20002bf0 	.word	0x20002bf0
 8009aa0:	20002bf4 	.word	0x20002bf4
 8009aa4:	2000005e 	.word	0x2000005e
 8009aa8:	2000005d 	.word	0x2000005d

08009aac <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8009ab0:	f7ff ff0e 	bl	80098d0 <GetCurrentHalTicks>
 8009ab4:	0002      	movs	r2, r0
 8009ab6:	4b08      	ldr	r3, [pc, #32]	@ (8009ad8 <HIDS_StartMeasurement+0x2c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	18d2      	adds	r2, r2, r3
 8009abc:	4b07      	ldr	r3, [pc, #28]	@ (8009adc <HIDS_StartMeasurement+0x30>)
 8009abe:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009ac0:	4b07      	ldr	r3, [pc, #28]	@ (8009ae0 <HIDS_StartMeasurement+0x34>)
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	0019      	movs	r1, r3
 8009ac6:	2044      	movs	r0, #68	@ 0x44
 8009ac8:	f7ff ff5a 	bl	8009980 <WriteRegister>
  MeasurementDone = false;
 8009acc:	4b05      	ldr	r3, [pc, #20]	@ (8009ae4 <HIDS_StartMeasurement+0x38>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	701a      	strb	r2, [r3, #0]
}
 8009ad2:	46c0      	nop			@ (mov r8, r8)
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000064 	.word	0x20000064
 8009adc:	20000060 	.word	0x20000060
 8009ae0:	2000005e 	.word	0x2000005e
 8009ae4:	20002c06 	.word	0x20002c06

08009ae8 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	0002      	movs	r2, r0
 8009af0:	1dfb      	adds	r3, r7, #7
 8009af2:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009af4:	4b03      	ldr	r3, [pc, #12]	@ (8009b04 <HIDS_SetHeaterMode+0x1c>)
 8009af6:	1dfa      	adds	r2, r7, #7
 8009af8:	7812      	ldrb	r2, [r2, #0]
 8009afa:	701a      	strb	r2, [r3, #0]
}
 8009afc:	46c0      	nop			@ (mov r8, r8)
 8009afe:	46bd      	mov	sp, r7
 8009b00:	b002      	add	sp, #8
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	2000005d 	.word	0x2000005d

08009b08 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009b08:	b590      	push	{r4, r7, lr}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	210c      	movs	r1, #12
 8009b16:	187b      	adds	r3, r7, r1
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	785a      	ldrb	r2, [r3, #1]
 8009b1e:	187b      	adds	r3, r7, r1
 8009b20:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009b22:	240f      	movs	r4, #15
 8009b24:	193b      	adds	r3, r7, r4
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	7892      	ldrb	r2, [r2, #2]
 8009b2a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8009b2c:	187b      	adds	r3, r7, r1
 8009b2e:	2102      	movs	r1, #2
 8009b30:	0018      	movs	r0, r3
 8009b32:	f7ff ff43 	bl	80099bc <CalculateCRC>
 8009b36:	0003      	movs	r3, r0
 8009b38:	001a      	movs	r2, r3
 8009b3a:	193b      	adds	r3, r7, r4
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d007      	beq.n	8009b52 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009b42:	4a17      	ldr	r2, [pc, #92]	@ (8009ba0 <CheckCRC+0x98>)
 8009b44:	4b17      	ldr	r3, [pc, #92]	@ (8009ba4 <CheckCRC+0x9c>)
 8009b46:	0019      	movs	r1, r3
 8009b48:	2001      	movs	r0, #1
 8009b4a:	f7ff fe35 	bl	80097b8 <CreateLine>
		return false;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e021      	b.n	8009b96 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	78da      	ldrb	r2, [r3, #3]
 8009b56:	2108      	movs	r1, #8
 8009b58:	187b      	adds	r3, r7, r1
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	791a      	ldrb	r2, [r3, #4]
 8009b60:	187b      	adds	r3, r7, r1
 8009b62:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8009b64:	240e      	movs	r4, #14
 8009b66:	193b      	adds	r3, r7, r4
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	7952      	ldrb	r2, [r2, #5]
 8009b6c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8009b6e:	187b      	adds	r3, r7, r1
 8009b70:	2102      	movs	r1, #2
 8009b72:	0018      	movs	r0, r3
 8009b74:	f7ff ff22 	bl	80099bc <CalculateCRC>
 8009b78:	0003      	movs	r3, r0
 8009b7a:	001a      	movs	r2, r3
 8009b7c:	193b      	adds	r3, r7, r4
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d007      	beq.n	8009b94 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8009b84:	4a08      	ldr	r2, [pc, #32]	@ (8009ba8 <CheckCRC+0xa0>)
 8009b86:	4b07      	ldr	r3, [pc, #28]	@ (8009ba4 <CheckCRC+0x9c>)
 8009b88:	0019      	movs	r1, r3
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	f7ff fe14 	bl	80097b8 <CreateLine>
		return false;
 8009b90:	2300      	movs	r3, #0
 8009b92:	e000      	b.n	8009b96 <CheckCRC+0x8e>
	}
	return true;
 8009b94:	2301      	movs	r3, #1
}
 8009b96:	0018      	movs	r0, r3
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	b005      	add	sp, #20
 8009b9c:	bd90      	pop	{r4, r7, pc}
 8009b9e:	46c0      	nop			@ (mov r8, r8)
 8009ba0:	0801b978 	.word	0x0801b978
 8009ba4:	0801b9a0 	.word	0x0801b9a0
 8009ba8:	0801b9a4 	.word	0x0801b9a4

08009bac <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8009bb2:	1dbb      	adds	r3, r7, #6
 8009bb4:	2289      	movs	r2, #137	@ 0x89
 8009bb6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8009bb8:	1dbb      	adds	r3, r7, #6
 8009bba:	2201      	movs	r2, #1
 8009bbc:	0019      	movs	r1, r3
 8009bbe:	2044      	movs	r0, #68	@ 0x44
 8009bc0:	f7ff fede 	bl	8009980 <WriteRegister>
	HAL_Delay(30);
 8009bc4:	201e      	movs	r0, #30
 8009bc6:	f000 f99d 	bl	8009f04 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8009bca:	4b14      	ldr	r3, [pc, #80]	@ (8009c1c <HIDS_DeviceConnected+0x70>)
 8009bcc:	2206      	movs	r2, #6
 8009bce:	0019      	movs	r1, r3
 8009bd0:	2044      	movs	r0, #68	@ 0x44
 8009bd2:	f7ff feb7 	bl	8009944 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009bd6:	1dfb      	adds	r3, r7, #7
 8009bd8:	2200      	movs	r2, #0
 8009bda:	701a      	strb	r2, [r3, #0]
 8009bdc:	e011      	b.n	8009c02 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8009bde:	1dfb      	adds	r3, r7, #7
 8009be0:	7818      	ldrb	r0, [r3, #0]
 8009be2:	1dfb      	adds	r3, r7, #7
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	4a0d      	ldr	r2, [pc, #52]	@ (8009c1c <HIDS_DeviceConnected+0x70>)
 8009be8:	5cd3      	ldrb	r3, [r2, r3]
 8009bea:	4a0d      	ldr	r2, [pc, #52]	@ (8009c20 <HIDS_DeviceConnected+0x74>)
 8009bec:	490d      	ldr	r1, [pc, #52]	@ (8009c24 <HIDS_DeviceConnected+0x78>)
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	0003      	movs	r3, r0
 8009bf2:	2002      	movs	r0, #2
 8009bf4:	f7ff fde0 	bl	80097b8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009bf8:	1dfb      	adds	r3, r7, #7
 8009bfa:	781a      	ldrb	r2, [r3, #0]
 8009bfc:	1dfb      	adds	r3, r7, #7
 8009bfe:	3201      	adds	r2, #1
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	1dfb      	adds	r3, r7, #7
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d9e9      	bls.n	8009bde <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8009c0a:	4b04      	ldr	r3, [pc, #16]	@ (8009c1c <HIDS_DeviceConnected+0x70>)
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	f7ff ff7b 	bl	8009b08 <CheckCRC>
 8009c12:	0003      	movs	r3, r0
}
 8009c14:	0018      	movs	r0, r3
 8009c16:	46bd      	mov	sp, r7
 8009c18:	b002      	add	sp, #8
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20002bf8 	.word	0x20002bf8
 8009c20:	0801b9d0 	.word	0x0801b9d0
 8009c24:	0801b974 	.word	0x0801b974

08009c28 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	0002      	movs	r2, r0
 8009c30:	1dfb      	adds	r3, r7, #7
 8009c32:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8009c34:	4b03      	ldr	r3, [pc, #12]	@ (8009c44 <HIDS_SetMeasurementMode+0x1c>)
 8009c36:	1dfa      	adds	r2, r7, #7
 8009c38:	7812      	ldrb	r2, [r2, #0]
 8009c3a:	701a      	strb	r2, [r3, #0]
}
 8009c3c:	46c0      	nop			@ (mov r8, r8)
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	b002      	add	sp, #8
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	2000005e 	.word	0x2000005e

08009c48 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8009c4c:	4b04      	ldr	r3, [pc, #16]	@ (8009c60 <HIDS_MeasurementReady+0x18>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	0018      	movs	r0, r3
 8009c52:	f7ff fd5b 	bl	800970c <TimestampIsReached>
 8009c56:	0003      	movs	r3, r0
}
 8009c58:	0018      	movs	r0, r3
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	46c0      	nop			@ (mov r8, r8)
 8009c60:	20000060 	.word	0x20000060

08009c64 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af02      	add	r7, sp, #8
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8009c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8009da8 <HIDS_GetMeasurementValues+0x144>)
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <HIDS_GetMeasurementValues+0x16>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e092      	b.n	8009da0 <HIDS_GetMeasurementValues+0x13c>
  if(!HIDS_MeasurementReady()) return false;
 8009c7a:	f7ff ffe5 	bl	8009c48 <HIDS_MeasurementReady>
 8009c7e:	0003      	movs	r3, r0
 8009c80:	001a      	movs	r2, r3
 8009c82:	2301      	movs	r3, #1
 8009c84:	4053      	eors	r3, r2
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <HIDS_GetMeasurementValues+0x2c>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e087      	b.n	8009da0 <HIDS_GetMeasurementValues+0x13c>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8009c90:	4b46      	ldr	r3, [pc, #280]	@ (8009dac <HIDS_GetMeasurementValues+0x148>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	4b46      	ldr	r3, [pc, #280]	@ (8009db0 <HIDS_GetMeasurementValues+0x14c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	0019      	movs	r1, r3
 8009c9a:	0010      	movs	r0, r2
 8009c9c:	f7f6 fa50 	bl	8000140 <__udivsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	613b      	str	r3, [r7, #16]
  float currentTemperature;
  float currentHumidity;
  //static float temperatures[HIDS_MAX_MEASUREMENTS];
  //static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8009ca4:	4b43      	ldr	r3, [pc, #268]	@ (8009db4 <HIDS_GetMeasurementValues+0x150>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	1c58      	adds	r0, r3, #1
 8009caa:	4a43      	ldr	r2, [pc, #268]	@ (8009db8 <HIDS_GetMeasurementValues+0x154>)
 8009cac:	4943      	ldr	r1, [pc, #268]	@ (8009dbc <HIDS_GetMeasurementValues+0x158>)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	0003      	movs	r3, r0
 8009cb4:	2003      	movs	r0, #3
 8009cb6:	f7ff fd7f 	bl	80097b8 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8009cba:	4b41      	ldr	r3, [pc, #260]	@ (8009dc0 <HIDS_GetMeasurementValues+0x15c>)
 8009cbc:	2206      	movs	r2, #6
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	2044      	movs	r0, #68	@ 0x44
 8009cc2:	f7ff fe3f 	bl	8009944 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8009cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8009dc0 <HIDS_GetMeasurementValues+0x15c>)
 8009cc8:	0018      	movs	r0, r3
 8009cca:	f7ff ff1d 	bl	8009b08 <CheckCRC>
 8009cce:	0003      	movs	r3, r0
 8009cd0:	001a      	movs	r2, r3
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4053      	eors	r3, r2
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d011      	beq.n	8009d00 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8009cdc:	2317      	movs	r3, #23
 8009cde:	18fb      	adds	r3, r7, r3
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	701a      	strb	r2, [r3, #0]
 8009ce4:	e005      	b.n	8009cf2 <HIDS_GetMeasurementValues+0x8e>
 8009ce6:	2117      	movs	r1, #23
 8009ce8:	187b      	adds	r3, r7, r1
 8009cea:	781a      	ldrb	r2, [r3, #0]
 8009cec:	187b      	adds	r3, r7, r1
 8009cee:	3201      	adds	r2, #1
 8009cf0:	701a      	strb	r2, [r3, #0]
 8009cf2:	2317      	movs	r3, #23
 8009cf4:	18fb      	adds	r3, r7, r3
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b05      	cmp	r3, #5
 8009cfa:	d9f4      	bls.n	8009ce6 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e04f      	b.n	8009da0 <HIDS_GetMeasurementValues+0x13c>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8009d00:	4b2f      	ldr	r3, [pc, #188]	@ (8009dc0 <HIDS_GetMeasurementValues+0x15c>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	021b      	lsls	r3, r3, #8
 8009d06:	22af      	movs	r2, #175	@ 0xaf
 8009d08:	4353      	muls	r3, r2
 8009d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8009dc0 <HIDS_GetMeasurementValues+0x15c>)
 8009d0c:	7852      	ldrb	r2, [r2, #1]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	0018      	movs	r0, r3
 8009d12:	f7f9 fad3 	bl	80032bc <__aeabi_i2d>
 8009d16:	2200      	movs	r2, #0
 8009d18:	4b2a      	ldr	r3, [pc, #168]	@ (8009dc4 <HIDS_GetMeasurementValues+0x160>)
 8009d1a:	f7f7 ffc9 	bl	8001cb0 <__aeabi_ddiv>
 8009d1e:	0002      	movs	r2, r0
 8009d20:	000b      	movs	r3, r1
 8009d22:	0010      	movs	r0, r2
 8009d24:	0019      	movs	r1, r3
 8009d26:	f7f9 fb63 	bl	80033f0 <__aeabi_d2f>
 8009d2a:	1c03      	adds	r3, r0, #0
 8009d2c:	60fb      	str	r3, [r7, #12]
	currentTemperature += -45;
 8009d2e:	4926      	ldr	r1, [pc, #152]	@ (8009dc8 <HIDS_GetMeasurementValues+0x164>)
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f7f7 f9f1 	bl	8001118 <__aeabi_fsub>
 8009d36:	1c03      	adds	r3, r0, #0
 8009d38:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8009d3a:	4b21      	ldr	r3, [pc, #132]	@ (8009dc0 <HIDS_GetMeasurementValues+0x15c>)
 8009d3c:	78db      	ldrb	r3, [r3, #3]
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	4a1f      	ldr	r2, [pc, #124]	@ (8009dc0 <HIDS_GetMeasurementValues+0x15c>)
 8009d42:	7912      	ldrb	r2, [r2, #4]
 8009d44:	431a      	orrs	r2, r3
 8009d46:	0013      	movs	r3, r2
 8009d48:	015b      	lsls	r3, r3, #5
 8009d4a:	1a9b      	subs	r3, r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	189b      	adds	r3, r3, r2
 8009d50:	0018      	movs	r0, r3
 8009d52:	f7f9 fab3 	bl	80032bc <__aeabi_i2d>
 8009d56:	2200      	movs	r2, #0
 8009d58:	4b1a      	ldr	r3, [pc, #104]	@ (8009dc4 <HIDS_GetMeasurementValues+0x160>)
 8009d5a:	f7f7 ffa9 	bl	8001cb0 <__aeabi_ddiv>
 8009d5e:	0002      	movs	r2, r0
 8009d60:	000b      	movs	r3, r1
 8009d62:	0010      	movs	r0, r2
 8009d64:	0019      	movs	r1, r3
 8009d66:	f7f9 fb43 	bl	80033f0 <__aeabi_d2f>
 8009d6a:	1c03      	adds	r3, r0, #0
 8009d6c:	60bb      	str	r3, [r7, #8]
	currentHumidity += -6;
 8009d6e:	4917      	ldr	r1, [pc, #92]	@ (8009dcc <HIDS_GetMeasurementValues+0x168>)
 8009d70:	68b8      	ldr	r0, [r7, #8]
 8009d72:	f7f7 f9d1 	bl	8001118 <__aeabi_fsub>
 8009d76:	1c03      	adds	r3, r0, #0
 8009d78:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	0011      	movs	r1, r2
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f7fe fd87 	bl	80088a0 <SGP_GetHT>

   measurements = 0;
 8009d92:	4b08      	ldr	r3, [pc, #32]	@ (8009db4 <HIDS_GetMeasurementValues+0x150>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 8009d98:	4b03      	ldr	r3, [pc, #12]	@ (8009da8 <HIDS_GetMeasurementValues+0x144>)
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
   return true;
 8009d9e:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.
	//HIDS_StartMeasurement();
	//return false;
}
 8009da0:	0018      	movs	r0, r3
 8009da2:	46bd      	mov	sp, r7
 8009da4:	b006      	add	sp, #24
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20002c06 	.word	0x20002c06
 8009dac:	20000068 	.word	0x20000068
 8009db0:	20000064 	.word	0x20000064
 8009db4:	20002c08 	.word	0x20002c08
 8009db8:	0801b9f0 	.word	0x0801b9f0
 8009dbc:	0801ba1c 	.word	0x0801ba1c
 8009dc0:	20002c00 	.word	0x20002c00
 8009dc4:	40efffe0 	.word	0x40efffe0
 8009dc8:	42340000 	.word	0x42340000
 8009dcc:	40c00000 	.word	0x40c00000

08009dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009dd0:	480d      	ldr	r0, [pc, #52]	@ (8009e08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009dd2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009dd4:	f7ff f94c 	bl	8009070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009dd8:	480c      	ldr	r0, [pc, #48]	@ (8009e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8009dda:	490d      	ldr	r1, [pc, #52]	@ (8009e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8009e14 <LoopForever+0xe>)
  movs r3, #0
 8009dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009de0:	e002      	b.n	8009de8 <LoopCopyDataInit>

08009de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009de6:	3304      	adds	r3, #4

08009de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009dec:	d3f9      	bcc.n	8009de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009dee:	4a0a      	ldr	r2, [pc, #40]	@ (8009e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009df0:	4c0a      	ldr	r4, [pc, #40]	@ (8009e1c <LoopForever+0x16>)
  movs r3, #0
 8009df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009df4:	e001      	b.n	8009dfa <LoopFillZerobss>

08009df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009df8:	3204      	adds	r2, #4

08009dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009dfc:	d3fb      	bcc.n	8009df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009dfe:	f00e fa49 	bl	8018294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e02:	f7fc f9c9 	bl	8006198 <main>

08009e06 <LoopForever>:

LoopForever:
    b LoopForever
 8009e06:	e7fe      	b.n	8009e06 <LoopForever>
   ldr   r0, =_estack
 8009e08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009e10:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8009e14:	0801c188 	.word	0x0801c188
  ldr r2, =_sbss
 8009e18:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8009e1c:	20004010 	.word	0x20004010

08009e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e20:	e7fe      	b.n	8009e20 <ADC1_COMP_IRQHandler>
	...

08009e24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009e2a:	1dfb      	adds	r3, r7, #7
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009e30:	4b0b      	ldr	r3, [pc, #44]	@ (8009e60 <HAL_Init+0x3c>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	4b0a      	ldr	r3, [pc, #40]	@ (8009e60 <HAL_Init+0x3c>)
 8009e36:	2140      	movs	r1, #64	@ 0x40
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009e3c:	2003      	movs	r0, #3
 8009e3e:	f000 f811 	bl	8009e64 <HAL_InitTick>
 8009e42:	1e03      	subs	r3, r0, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009e46:	1dfb      	adds	r3, r7, #7
 8009e48:	2201      	movs	r2, #1
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	e001      	b.n	8009e52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009e4e:	f7fe ffe5 	bl	8008e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009e52:	1dfb      	adds	r3, r7, #7
 8009e54:	781b      	ldrb	r3, [r3, #0]
}
 8009e56:	0018      	movs	r0, r3
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b002      	add	sp, #8
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	46c0      	nop			@ (mov r8, r8)
 8009e60:	40022000 	.word	0x40022000

08009e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e64:	b590      	push	{r4, r7, lr}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e6c:	4b14      	ldr	r3, [pc, #80]	@ (8009ec0 <HAL_InitTick+0x5c>)
 8009e6e:	681c      	ldr	r4, [r3, #0]
 8009e70:	4b14      	ldr	r3, [pc, #80]	@ (8009ec4 <HAL_InitTick+0x60>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	0019      	movs	r1, r3
 8009e76:	23fa      	movs	r3, #250	@ 0xfa
 8009e78:	0098      	lsls	r0, r3, #2
 8009e7a:	f7f6 f961 	bl	8000140 <__udivsi3>
 8009e7e:	0003      	movs	r3, r0
 8009e80:	0019      	movs	r1, r3
 8009e82:	0020      	movs	r0, r4
 8009e84:	f7f6 f95c 	bl	8000140 <__udivsi3>
 8009e88:	0003      	movs	r3, r0
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	f000 fccb 	bl	800a826 <HAL_SYSTICK_Config>
 8009e90:	1e03      	subs	r3, r0, #0
 8009e92:	d001      	beq.n	8009e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e00f      	b.n	8009eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d80b      	bhi.n	8009eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	425b      	negs	r3, r3
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f000 fc98 	bl	800a7dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009eac:	4b06      	ldr	r3, [pc, #24]	@ (8009ec8 <HAL_InitTick+0x64>)
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e000      	b.n	8009eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
}
 8009eb8:	0018      	movs	r0, r3
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	b003      	add	sp, #12
 8009ebe:	bd90      	pop	{r4, r7, pc}
 8009ec0:	20000058 	.word	0x20000058
 8009ec4:	20000070 	.word	0x20000070
 8009ec8:	2000006c 	.word	0x2000006c

08009ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ed0:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <HAL_IncTick+0x1c>)
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	001a      	movs	r2, r3
 8009ed6:	4b05      	ldr	r3, [pc, #20]	@ (8009eec <HAL_IncTick+0x20>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	18d2      	adds	r2, r2, r3
 8009edc:	4b03      	ldr	r3, [pc, #12]	@ (8009eec <HAL_IncTick+0x20>)
 8009ede:	601a      	str	r2, [r3, #0]
}
 8009ee0:	46c0      	nop			@ (mov r8, r8)
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	46c0      	nop			@ (mov r8, r8)
 8009ee8:	20000070 	.word	0x20000070
 8009eec:	20002c0c 	.word	0x20002c0c

08009ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8009ef4:	4b02      	ldr	r3, [pc, #8]	@ (8009f00 <HAL_GetTick+0x10>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
}
 8009ef8:	0018      	movs	r0, r3
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	46c0      	nop			@ (mov r8, r8)
 8009f00:	20002c0c 	.word	0x20002c0c

08009f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f0c:	f7ff fff0 	bl	8009ef0 <HAL_GetTick>
 8009f10:	0003      	movs	r3, r0
 8009f12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	d005      	beq.n	8009f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f48 <HAL_Delay+0x44>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	001a      	movs	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	189b      	adds	r3, r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f2a:	46c0      	nop			@ (mov r8, r8)
 8009f2c:	f7ff ffe0 	bl	8009ef0 <HAL_GetTick>
 8009f30:	0002      	movs	r2, r0
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d8f7      	bhi.n	8009f2c <HAL_Delay+0x28>
  {
  }
}
 8009f3c:	46c0      	nop			@ (mov r8, r8)
 8009f3e:	46c0      	nop			@ (mov r8, r8)
 8009f40:	46bd      	mov	sp, r7
 8009f42:	b004      	add	sp, #16
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	46c0      	nop			@ (mov r8, r8)
 8009f48:	20000070 	.word	0x20000070

08009f4c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009f50:	4b02      	ldr	r3, [pc, #8]	@ (8009f5c <HAL_GetUIDw0+0x10>)
 8009f52:	681b      	ldr	r3, [r3, #0]
}
 8009f54:	0018      	movs	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	46c0      	nop			@ (mov r8, r8)
 8009f5c:	1ff80050 	.word	0x1ff80050

08009f60 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8009f64:	4b02      	ldr	r3, [pc, #8]	@ (8009f70 <HAL_GetUIDw1+0x10>)
 8009f66:	681b      	ldr	r3, [r3, #0]
}
 8009f68:	0018      	movs	r0, r3
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	46c0      	nop			@ (mov r8, r8)
 8009f70:	1ff80054 	.word	0x1ff80054

08009f74 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8009f78:	4b02      	ldr	r3, [pc, #8]	@ (8009f84 <HAL_GetUIDw2+0x10>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
}
 8009f7c:	0018      	movs	r0, r3
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	46c0      	nop			@ (mov r8, r8)
 8009f84:	1ff80064 	.word	0x1ff80064

08009f88 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e159      	b.n	800a24e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2250      	movs	r2, #80	@ 0x50
 8009fac:	2100      	movs	r1, #0
 8009fae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f7fb fc34 	bl	8005820 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fbc:	2210      	movs	r2, #16
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	2b10      	cmp	r3, #16
 8009fc2:	d005      	beq.n	8009fd0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2204      	movs	r2, #4
 8009fcc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009fce:	d00b      	beq.n	8009fe8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd4:	2210      	movs	r2, #16
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2250      	movs	r2, #80	@ 0x50
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e132      	b.n	800a24e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fec:	4a9a      	ldr	r2, [pc, #616]	@ (800a258 <HAL_ADC_Init+0x2d0>)
 8009fee:	4013      	ands	r3, r2
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2203      	movs	r2, #3
 800a000:	4013      	ands	r3, r2
 800a002:	2b01      	cmp	r3, #1
 800a004:	d108      	bne.n	800a018 <HAL_ADC_Init+0x90>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2201      	movs	r2, #1
 800a00e:	4013      	ands	r3, r2
 800a010:	2b01      	cmp	r3, #1
 800a012:	d101      	bne.n	800a018 <HAL_ADC_Init+0x90>
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <HAL_ADC_Init+0x92>
 800a018:	2300      	movs	r3, #0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d149      	bne.n	800a0b2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	23c0      	movs	r3, #192	@ 0xc0
 800a024:	061b      	lsls	r3, r3, #24
 800a026:	429a      	cmp	r2, r3
 800a028:	d00b      	beq.n	800a042 <HAL_ADC_Init+0xba>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	2380      	movs	r3, #128	@ 0x80
 800a030:	05db      	lsls	r3, r3, #23
 800a032:	429a      	cmp	r2, r3
 800a034:	d005      	beq.n	800a042 <HAL_ADC_Init+0xba>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	2380      	movs	r3, #128	@ 0x80
 800a03c:	061b      	lsls	r3, r3, #24
 800a03e:	429a      	cmp	r2, r3
 800a040:	d111      	bne.n	800a066 <HAL_ADC_Init+0xde>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	0092      	lsls	r2, r2, #2
 800a04e:	0892      	lsrs	r2, r2, #2
 800a050:	611a      	str	r2, [r3, #16]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6919      	ldr	r1, [r3, #16]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	611a      	str	r2, [r3, #16]
 800a064:	e014      	b.n	800a090 <HAL_ADC_Init+0x108>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	691a      	ldr	r2, [r3, #16]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	0092      	lsls	r2, r2, #2
 800a072:	0892      	lsrs	r2, r2, #2
 800a074:	611a      	str	r2, [r3, #16]
 800a076:	4b79      	ldr	r3, [pc, #484]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	4b78      	ldr	r3, [pc, #480]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a07c:	4978      	ldr	r1, [pc, #480]	@ (800a260 <HAL_ADC_Init+0x2d8>)
 800a07e:	400a      	ands	r2, r1
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	4b76      	ldr	r3, [pc, #472]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a084:	6819      	ldr	r1, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	4b74      	ldr	r3, [pc, #464]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a08c:	430a      	orrs	r2, r1
 800a08e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2118      	movs	r1, #24
 800a09c:	438a      	bics	r2, r1
 800a09e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68d9      	ldr	r1, [r3, #12]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800a0b2:	4b6a      	ldr	r3, [pc, #424]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	4b69      	ldr	r3, [pc, #420]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a0b8:	496a      	ldr	r1, [pc, #424]	@ (800a264 <HAL_ADC_Init+0x2dc>)
 800a0ba:	400a      	ands	r2, r1
 800a0bc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800a0be:	4b67      	ldr	r3, [pc, #412]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a0c0:	6819      	ldr	r1, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c6:	065a      	lsls	r2, r3, #25
 800a0c8:	4b64      	ldr	r3, [pc, #400]	@ (800a25c <HAL_ADC_Init+0x2d4>)
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	2380      	movs	r3, #128	@ 0x80
 800a0d6:	055b      	lsls	r3, r3, #21
 800a0d8:	4013      	ands	r3, r2
 800a0da:	d108      	bne.n	800a0ee <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2180      	movs	r1, #128	@ 0x80
 800a0e8:	0549      	lsls	r1, r1, #21
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	495b      	ldr	r1, [pc, #364]	@ (800a268 <HAL_ADC_Init+0x2e0>)
 800a0fa:	400a      	ands	r2, r1
 800a0fc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68d9      	ldr	r1, [r3, #12]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d101      	bne.n	800a114 <HAL_ADC_Init+0x18c>
 800a110:	2304      	movs	r3, #4
 800a112:	e000      	b.n	800a116 <HAL_ADC_Init+0x18e>
 800a114:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a116:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2020      	movs	r0, #32
 800a11c:	5c1b      	ldrb	r3, [r3, r0]
 800a11e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a120:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	202c      	movs	r0, #44	@ 0x2c
 800a126:	5c1b      	ldrb	r3, [r3, r0]
 800a128:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a12a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a130:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800a138:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a140:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a14e:	23c2      	movs	r3, #194	@ 0xc2
 800a150:	33ff      	adds	r3, #255	@ 0xff
 800a152:	429a      	cmp	r2, r3
 800a154:	d00b      	beq.n	800a16e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68d9      	ldr	r1, [r3, #12]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2221      	movs	r2, #33	@ 0x21
 800a172:	5c9b      	ldrb	r3, [r3, r2]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d11a      	bne.n	800a1ae <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	5c9b      	ldrb	r3, [r3, r2]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2180      	movs	r1, #128	@ 0x80
 800a18e:	0249      	lsls	r1, r1, #9
 800a190:	430a      	orrs	r2, r1
 800a192:	60da      	str	r2, [r3, #12]
 800a194:	e00b      	b.n	800a1ae <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19a:	2220      	movs	r2, #32
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d11f      	bne.n	800a1f6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	492a      	ldr	r1, [pc, #168]	@ (800a26c <HAL_ADC_Init+0x2e4>)
 800a1c2:	400a      	ands	r2, r1
 800a1c4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6919      	ldr	r1, [r3, #16]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a1d4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a1da:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	611a      	str	r2, [r3, #16]
 800a1f4:	e00e      	b.n	800a214 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4013      	ands	r3, r2
 800a200:	2b01      	cmp	r3, #1
 800a202:	d107      	bne.n	800a214 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2101      	movs	r1, #1
 800a210:	438a      	bics	r2, r1
 800a212:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	695a      	ldr	r2, [r3, #20]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2107      	movs	r1, #7
 800a220:	438a      	bics	r2, r1
 800a222:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6959      	ldr	r1, [r3, #20]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a240:	2203      	movs	r2, #3
 800a242:	4393      	bics	r3, r2
 800a244:	2201      	movs	r2, #1
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	0018      	movs	r0, r3
 800a250:	46bd      	mov	sp, r7
 800a252:	b002      	add	sp, #8
 800a254:	bd80      	pop	{r7, pc}
 800a256:	46c0      	nop			@ (mov r8, r8)
 800a258:	fffffefd 	.word	0xfffffefd
 800a25c:	40012708 	.word	0x40012708
 800a260:	ffc3ffff 	.word	0xffc3ffff
 800a264:	fdffffff 	.word	0xfdffffff
 800a268:	fffe0219 	.word	0xfffe0219
 800a26c:	fffffc03 	.word	0xfffffc03

0800a270 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a270:	b590      	push	{r4, r7, lr}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a278:	230f      	movs	r3, #15
 800a27a:	18fb      	adds	r3, r7, r3
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	2204      	movs	r2, #4
 800a288:	4013      	ands	r3, r2
 800a28a:	d138      	bne.n	800a2fe <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2250      	movs	r2, #80	@ 0x50
 800a290:	5c9b      	ldrb	r3, [r3, r2]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_ADC_Start+0x2a>
 800a296:	2302      	movs	r3, #2
 800a298:	e038      	b.n	800a30c <HAL_ADC_Start+0x9c>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2250      	movs	r2, #80	@ 0x50
 800a29e:	2101      	movs	r1, #1
 800a2a0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d007      	beq.n	800a2ba <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a2aa:	230f      	movs	r3, #15
 800a2ac:	18fc      	adds	r4, r7, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	f000 f95f 	bl	800a574 <ADC_Enable>
 800a2b6:	0003      	movs	r3, r0
 800a2b8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a2ba:	230f      	movs	r3, #15
 800a2bc:	18fb      	adds	r3, r7, r3
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d120      	bne.n	800a306 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c8:	4a12      	ldr	r2, [pc, #72]	@ (800a314 <HAL_ADC_Start+0xa4>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	2280      	movs	r2, #128	@ 0x80
 800a2ce:	0052      	lsls	r2, r2, #1
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2250      	movs	r2, #80	@ 0x50
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	221c      	movs	r2, #28
 800a2ea:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689a      	ldr	r2, [r3, #8]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	609a      	str	r2, [r3, #8]
 800a2fc:	e003      	b.n	800a306 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a2fe:	230f      	movs	r3, #15
 800a300:	18fb      	adds	r3, r7, r3
 800a302:	2202      	movs	r2, #2
 800a304:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a306:	230f      	movs	r3, #15
 800a308:	18fb      	adds	r3, r7, r3
 800a30a:	781b      	ldrb	r3, [r3, #0]
}
 800a30c:	0018      	movs	r0, r3
 800a30e:	46bd      	mov	sp, r7
 800a310:	b005      	add	sp, #20
 800a312:	bd90      	pop	{r4, r7, pc}
 800a314:	fffff0fe 	.word	0xfffff0fe

0800a318 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	2b08      	cmp	r3, #8
 800a330:	d102      	bne.n	800a338 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a332:	2308      	movs	r3, #8
 800a334:	60fb      	str	r3, [r7, #12]
 800a336:	e014      	b.n	800a362 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2201      	movs	r2, #1
 800a340:	4013      	ands	r3, r2
 800a342:	2b01      	cmp	r3, #1
 800a344:	d10b      	bne.n	800a35e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a34a:	2220      	movs	r2, #32
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2250      	movs	r2, #80	@ 0x50
 800a356:	2100      	movs	r1, #0
 800a358:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e072      	b.n	800a444 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a35e:	230c      	movs	r3, #12
 800a360:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a362:	f7ff fdc5 	bl	8009ef0 <HAL_GetTick>
 800a366:	0003      	movs	r3, r0
 800a368:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a36a:	e01f      	b.n	800a3ac <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	3301      	adds	r3, #1
 800a370:	d01c      	beq.n	800a3ac <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d007      	beq.n	800a388 <HAL_ADC_PollForConversion+0x70>
 800a378:	f7ff fdba 	bl	8009ef0 <HAL_GetTick>
 800a37c:	0002      	movs	r2, r0
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d211      	bcs.n	800a3ac <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	4013      	ands	r3, r2
 800a392:	d10b      	bne.n	800a3ac <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a398:	2204      	movs	r2, #4
 800a39a:	431a      	orrs	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2250      	movs	r2, #80	@ 0x50
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e04b      	b.n	800a444 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	d0d9      	beq.n	800a36c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3bc:	2280      	movs	r2, #128	@ 0x80
 800a3be:	0092      	lsls	r2, r2, #2
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68da      	ldr	r2, [r3, #12]
 800a3cc:	23c0      	movs	r3, #192	@ 0xc0
 800a3ce:	011b      	lsls	r3, r3, #4
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	d12e      	bne.n	800a432 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d129      	bne.n	800a432 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2208      	movs	r2, #8
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d122      	bne.n	800a432 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	2204      	movs	r2, #4
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	d110      	bne.n	800a41a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	210c      	movs	r1, #12
 800a404:	438a      	bics	r2, r1
 800a406:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a40c:	4a0f      	ldr	r2, [pc, #60]	@ (800a44c <HAL_ADC_PollForConversion+0x134>)
 800a40e:	4013      	ands	r3, r2
 800a410:	2201      	movs	r2, #1
 800a412:	431a      	orrs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	655a      	str	r2, [r3, #84]	@ 0x54
 800a418:	e00b      	b.n	800a432 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a41e:	2220      	movs	r2, #32
 800a420:	431a      	orrs	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a42a:	2201      	movs	r2, #1
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d103      	bne.n	800a442 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	220c      	movs	r2, #12
 800a440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	0018      	movs	r0, r3
 800a446:	46bd      	mov	sp, r7
 800a448:	b004      	add	sp, #16
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	fffffefe 	.word	0xfffffefe

0800a450 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a45e:	0018      	movs	r0, r3
 800a460:	46bd      	mov	sp, r7
 800a462:	b002      	add	sp, #8
 800a464:	bd80      	pop	{r7, pc}
	...

0800a468 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2250      	movs	r2, #80	@ 0x50
 800a476:	5c9b      	ldrb	r3, [r3, r2]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <HAL_ADC_ConfigChannel+0x18>
 800a47c:	2302      	movs	r3, #2
 800a47e:	e06c      	b.n	800a55a <HAL_ADC_ConfigChannel+0xf2>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2250      	movs	r2, #80	@ 0x50
 800a484:	2101      	movs	r1, #1
 800a486:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	2204      	movs	r2, #4
 800a490:	4013      	ands	r3, r2
 800a492:	d00b      	beq.n	800a4ac <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a498:	2220      	movs	r2, #32
 800a49a:	431a      	orrs	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2250      	movs	r2, #80	@ 0x50
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e056      	b.n	800a55a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	4a2c      	ldr	r2, [pc, #176]	@ (800a564 <HAL_ADC_ConfigChannel+0xfc>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d028      	beq.n	800a508 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	035b      	lsls	r3, r3, #13
 800a4c2:	0b5a      	lsrs	r2, r3, #13
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	430a      	orrs	r2, r1
 800a4ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	2380      	movs	r3, #128	@ 0x80
 800a4d2:	02db      	lsls	r3, r3, #11
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	d009      	beq.n	800a4ec <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a4d8:	4b23      	ldr	r3, [pc, #140]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	4b22      	ldr	r3, [pc, #136]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a4de:	2180      	movs	r1, #128	@ 0x80
 800a4e0:	0409      	lsls	r1, r1, #16
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a4e6:	200a      	movs	r0, #10
 800a4e8:	f000 f8ac 	bl	800a644 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	2380      	movs	r3, #128	@ 0x80
 800a4f2:	029b      	lsls	r3, r3, #10
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	d02b      	beq.n	800a550 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a4f8:	4b1b      	ldr	r3, [pc, #108]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a4fe:	2180      	movs	r1, #128	@ 0x80
 800a500:	03c9      	lsls	r1, r1, #15
 800a502:	430a      	orrs	r2, r1
 800a504:	601a      	str	r2, [r3, #0]
 800a506:	e023      	b.n	800a550 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	035b      	lsls	r3, r3, #13
 800a514:	0b5b      	lsrs	r3, r3, #13
 800a516:	43d9      	mvns	r1, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	400a      	ands	r2, r1
 800a51e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	2380      	movs	r3, #128	@ 0x80
 800a526:	02db      	lsls	r3, r3, #11
 800a528:	4013      	ands	r3, r2
 800a52a:	d005      	beq.n	800a538 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a52c:	4b0e      	ldr	r3, [pc, #56]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	4b0d      	ldr	r3, [pc, #52]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a532:	490e      	ldr	r1, [pc, #56]	@ (800a56c <HAL_ADC_ConfigChannel+0x104>)
 800a534:	400a      	ands	r2, r1
 800a536:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	2380      	movs	r3, #128	@ 0x80
 800a53e:	029b      	lsls	r3, r3, #10
 800a540:	4013      	ands	r3, r2
 800a542:	d005      	beq.n	800a550 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a544:	4b08      	ldr	r3, [pc, #32]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	4b07      	ldr	r3, [pc, #28]	@ (800a568 <HAL_ADC_ConfigChannel+0x100>)
 800a54a:	4909      	ldr	r1, [pc, #36]	@ (800a570 <HAL_ADC_ConfigChannel+0x108>)
 800a54c:	400a      	ands	r2, r1
 800a54e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2250      	movs	r2, #80	@ 0x50
 800a554:	2100      	movs	r1, #0
 800a556:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b002      	add	sp, #8
 800a560:	bd80      	pop	{r7, pc}
 800a562:	46c0      	nop			@ (mov r8, r8)
 800a564:	00001001 	.word	0x00001001
 800a568:	40012708 	.word	0x40012708
 800a56c:	ff7fffff 	.word	0xff7fffff
 800a570:	ffbfffff 	.word	0xffbfffff

0800a574 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	2203      	movs	r2, #3
 800a588:	4013      	ands	r3, r2
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d108      	bne.n	800a5a0 <ADC_Enable+0x2c>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2201      	movs	r2, #1
 800a596:	4013      	ands	r3, r2
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <ADC_Enable+0x2c>
 800a59c:	2301      	movs	r3, #1
 800a59e:	e000      	b.n	800a5a2 <ADC_Enable+0x2e>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d146      	bne.n	800a634 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	4a24      	ldr	r2, [pc, #144]	@ (800a640 <ADC_Enable+0xcc>)
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	d00d      	beq.n	800a5ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5b6:	2210      	movs	r2, #16
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e033      	b.n	800a636 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2101      	movs	r1, #1
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a5de:	2001      	movs	r0, #1
 800a5e0:	f000 f830 	bl	800a644 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a5e4:	f7ff fc84 	bl	8009ef0 <HAL_GetTick>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a5ec:	e01b      	b.n	800a626 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a5ee:	f7ff fc7f 	bl	8009ef0 <HAL_GetTick>
 800a5f2:	0002      	movs	r2, r0
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b0a      	cmp	r3, #10
 800a5fa:	d914      	bls.n	800a626 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2201      	movs	r2, #1
 800a604:	4013      	ands	r3, r2
 800a606:	2b01      	cmp	r3, #1
 800a608:	d00d      	beq.n	800a626 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a60e:	2210      	movs	r2, #16
 800a610:	431a      	orrs	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a61a:	2201      	movs	r2, #1
 800a61c:	431a      	orrs	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e007      	b.n	800a636 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2201      	movs	r2, #1
 800a62e:	4013      	ands	r3, r2
 800a630:	2b01      	cmp	r3, #1
 800a632:	d1dc      	bne.n	800a5ee <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	0018      	movs	r0, r3
 800a638:	46bd      	mov	sp, r7
 800a63a:	b004      	add	sp, #16
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	46c0      	nop			@ (mov r8, r8)
 800a640:	80000017 	.word	0x80000017

0800a644 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800a64c:	4b0b      	ldr	r3, [pc, #44]	@ (800a67c <ADC_DelayMicroSecond+0x38>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	490b      	ldr	r1, [pc, #44]	@ (800a680 <ADC_DelayMicroSecond+0x3c>)
 800a652:	0018      	movs	r0, r3
 800a654:	f7f5 fd74 	bl	8000140 <__udivsi3>
 800a658:	0003      	movs	r3, r0
 800a65a:	001a      	movs	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4353      	muls	r3, r2
 800a660:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800a662:	e002      	b.n	800a66a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3b01      	subs	r3, #1
 800a668:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1f9      	bne.n	800a664 <ADC_DelayMicroSecond+0x20>
  }
}
 800a670:	46c0      	nop			@ (mov r8, r8)
 800a672:	46c0      	nop			@ (mov r8, r8)
 800a674:	46bd      	mov	sp, r7
 800a676:	b004      	add	sp, #16
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	46c0      	nop			@ (mov r8, r8)
 800a67c:	20000058 	.word	0x20000058
 800a680:	000f4240 	.word	0x000f4240

0800a684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	0002      	movs	r2, r0
 800a68c:	1dfb      	adds	r3, r7, #7
 800a68e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a690:	1dfb      	adds	r3, r7, #7
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b7f      	cmp	r3, #127	@ 0x7f
 800a696:	d809      	bhi.n	800a6ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a698:	1dfb      	adds	r3, r7, #7
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	001a      	movs	r2, r3
 800a69e:	231f      	movs	r3, #31
 800a6a0:	401a      	ands	r2, r3
 800a6a2:	4b04      	ldr	r3, [pc, #16]	@ (800a6b4 <__NVIC_EnableIRQ+0x30>)
 800a6a4:	2101      	movs	r1, #1
 800a6a6:	4091      	lsls	r1, r2
 800a6a8:	000a      	movs	r2, r1
 800a6aa:	601a      	str	r2, [r3, #0]
  }
}
 800a6ac:	46c0      	nop			@ (mov r8, r8)
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	b002      	add	sp, #8
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	e000e100 	.word	0xe000e100

0800a6b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a6b8:	b590      	push	{r4, r7, lr}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	0002      	movs	r2, r0
 800a6c0:	6039      	str	r1, [r7, #0]
 800a6c2:	1dfb      	adds	r3, r7, #7
 800a6c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a6c6:	1dfb      	adds	r3, r7, #7
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6cc:	d828      	bhi.n	800a720 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a6ce:	4a2f      	ldr	r2, [pc, #188]	@ (800a78c <__NVIC_SetPriority+0xd4>)
 800a6d0:	1dfb      	adds	r3, r7, #7
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	b25b      	sxtb	r3, r3
 800a6d6:	089b      	lsrs	r3, r3, #2
 800a6d8:	33c0      	adds	r3, #192	@ 0xc0
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	589b      	ldr	r3, [r3, r2]
 800a6de:	1dfa      	adds	r2, r7, #7
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	0011      	movs	r1, r2
 800a6e4:	2203      	movs	r2, #3
 800a6e6:	400a      	ands	r2, r1
 800a6e8:	00d2      	lsls	r2, r2, #3
 800a6ea:	21ff      	movs	r1, #255	@ 0xff
 800a6ec:	4091      	lsls	r1, r2
 800a6ee:	000a      	movs	r2, r1
 800a6f0:	43d2      	mvns	r2, r2
 800a6f2:	401a      	ands	r2, r3
 800a6f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	019b      	lsls	r3, r3, #6
 800a6fa:	22ff      	movs	r2, #255	@ 0xff
 800a6fc:	401a      	ands	r2, r3
 800a6fe:	1dfb      	adds	r3, r7, #7
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	0018      	movs	r0, r3
 800a704:	2303      	movs	r3, #3
 800a706:	4003      	ands	r3, r0
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a70c:	481f      	ldr	r0, [pc, #124]	@ (800a78c <__NVIC_SetPriority+0xd4>)
 800a70e:	1dfb      	adds	r3, r7, #7
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	b25b      	sxtb	r3, r3
 800a714:	089b      	lsrs	r3, r3, #2
 800a716:	430a      	orrs	r2, r1
 800a718:	33c0      	adds	r3, #192	@ 0xc0
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800a71e:	e031      	b.n	800a784 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a720:	4a1b      	ldr	r2, [pc, #108]	@ (800a790 <__NVIC_SetPriority+0xd8>)
 800a722:	1dfb      	adds	r3, r7, #7
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	0019      	movs	r1, r3
 800a728:	230f      	movs	r3, #15
 800a72a:	400b      	ands	r3, r1
 800a72c:	3b08      	subs	r3, #8
 800a72e:	089b      	lsrs	r3, r3, #2
 800a730:	3306      	adds	r3, #6
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	18d3      	adds	r3, r2, r3
 800a736:	3304      	adds	r3, #4
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	1dfa      	adds	r2, r7, #7
 800a73c:	7812      	ldrb	r2, [r2, #0]
 800a73e:	0011      	movs	r1, r2
 800a740:	2203      	movs	r2, #3
 800a742:	400a      	ands	r2, r1
 800a744:	00d2      	lsls	r2, r2, #3
 800a746:	21ff      	movs	r1, #255	@ 0xff
 800a748:	4091      	lsls	r1, r2
 800a74a:	000a      	movs	r2, r1
 800a74c:	43d2      	mvns	r2, r2
 800a74e:	401a      	ands	r2, r3
 800a750:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	019b      	lsls	r3, r3, #6
 800a756:	22ff      	movs	r2, #255	@ 0xff
 800a758:	401a      	ands	r2, r3
 800a75a:	1dfb      	adds	r3, r7, #7
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	0018      	movs	r0, r3
 800a760:	2303      	movs	r3, #3
 800a762:	4003      	ands	r3, r0
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a768:	4809      	ldr	r0, [pc, #36]	@ (800a790 <__NVIC_SetPriority+0xd8>)
 800a76a:	1dfb      	adds	r3, r7, #7
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	001c      	movs	r4, r3
 800a770:	230f      	movs	r3, #15
 800a772:	4023      	ands	r3, r4
 800a774:	3b08      	subs	r3, #8
 800a776:	089b      	lsrs	r3, r3, #2
 800a778:	430a      	orrs	r2, r1
 800a77a:	3306      	adds	r3, #6
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	18c3      	adds	r3, r0, r3
 800a780:	3304      	adds	r3, #4
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	46c0      	nop			@ (mov r8, r8)
 800a786:	46bd      	mov	sp, r7
 800a788:	b003      	add	sp, #12
 800a78a:	bd90      	pop	{r4, r7, pc}
 800a78c:	e000e100 	.word	0xe000e100
 800a790:	e000ed00 	.word	0xe000ed00

0800a794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	1e5a      	subs	r2, r3, #1
 800a7a0:	2380      	movs	r3, #128	@ 0x80
 800a7a2:	045b      	lsls	r3, r3, #17
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d301      	bcc.n	800a7ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e010      	b.n	800a7ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d8 <SysTick_Config+0x44>)
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	3a01      	subs	r2, #1
 800a7b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	425b      	negs	r3, r3
 800a7b8:	2103      	movs	r1, #3
 800a7ba:	0018      	movs	r0, r3
 800a7bc:	f7ff ff7c 	bl	800a6b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a7c0:	4b05      	ldr	r3, [pc, #20]	@ (800a7d8 <SysTick_Config+0x44>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a7c6:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <SysTick_Config+0x44>)
 800a7c8:	2207      	movs	r2, #7
 800a7ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	b002      	add	sp, #8
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	46c0      	nop			@ (mov r8, r8)
 800a7d8:	e000e010 	.word	0xe000e010

0800a7dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60b9      	str	r1, [r7, #8]
 800a7e4:	607a      	str	r2, [r7, #4]
 800a7e6:	210f      	movs	r1, #15
 800a7e8:	187b      	adds	r3, r7, r1
 800a7ea:	1c02      	adds	r2, r0, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	187b      	adds	r3, r7, r1
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	0011      	movs	r1, r2
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f7ff ff5d 	bl	800a6b8 <__NVIC_SetPriority>
}
 800a7fe:	46c0      	nop			@ (mov r8, r8)
 800a800:	46bd      	mov	sp, r7
 800a802:	b004      	add	sp, #16
 800a804:	bd80      	pop	{r7, pc}

0800a806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	0002      	movs	r2, r0
 800a80e:	1dfb      	adds	r3, r7, #7
 800a810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a812:	1dfb      	adds	r3, r7, #7
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b25b      	sxtb	r3, r3
 800a818:	0018      	movs	r0, r3
 800a81a:	f7ff ff33 	bl	800a684 <__NVIC_EnableIRQ>
}
 800a81e:	46c0      	nop			@ (mov r8, r8)
 800a820:	46bd      	mov	sp, r7
 800a822:	b002      	add	sp, #8
 800a824:	bd80      	pop	{r7, pc}

0800a826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	0018      	movs	r0, r3
 800a832:	f7ff ffaf 	bl	800a794 <SysTick_Config>
 800a836:	0003      	movs	r3, r0
}
 800a838:	0018      	movs	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b002      	add	sp, #8
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e061      	b.n	800a916 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a32      	ldr	r2, [pc, #200]	@ (800a920 <HAL_DMA_Init+0xe0>)
 800a858:	4694      	mov	ip, r2
 800a85a:	4463      	add	r3, ip
 800a85c:	2114      	movs	r1, #20
 800a85e:	0018      	movs	r0, r3
 800a860:	f7f5 fc6e 	bl	8000140 <__udivsi3>
 800a864:	0003      	movs	r3, r0
 800a866:	009a      	lsls	r2, r3, #2
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a2d      	ldr	r2, [pc, #180]	@ (800a924 <HAL_DMA_Init+0xe4>)
 800a870:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2225      	movs	r2, #37	@ 0x25
 800a876:	2102      	movs	r1, #2
 800a878:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	4a28      	ldr	r2, [pc, #160]	@ (800a928 <HAL_DMA_Init+0xe8>)
 800a886:	4013      	ands	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a892:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691b      	ldr	r3, [r3, #16]
 800a898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a89e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a8aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689a      	ldr	r2, [r3, #8]
 800a8c4:	2380      	movs	r3, #128	@ 0x80
 800a8c6:	01db      	lsls	r3, r3, #7
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d018      	beq.n	800a8fe <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a8cc:	4b17      	ldr	r3, [pc, #92]	@ (800a92c <HAL_DMA_Init+0xec>)
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8d4:	211c      	movs	r1, #28
 800a8d6:	400b      	ands	r3, r1
 800a8d8:	210f      	movs	r1, #15
 800a8da:	4099      	lsls	r1, r3
 800a8dc:	000b      	movs	r3, r1
 800a8de:	43d9      	mvns	r1, r3
 800a8e0:	4b12      	ldr	r3, [pc, #72]	@ (800a92c <HAL_DMA_Init+0xec>)
 800a8e2:	400a      	ands	r2, r1
 800a8e4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a8e6:	4b11      	ldr	r3, [pc, #68]	@ (800a92c <HAL_DMA_Init+0xec>)
 800a8e8:	6819      	ldr	r1, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8f2:	201c      	movs	r0, #28
 800a8f4:	4003      	ands	r3, r0
 800a8f6:	409a      	lsls	r2, r3
 800a8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a92c <HAL_DMA_Init+0xec>)
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2225      	movs	r2, #37	@ 0x25
 800a908:	2101      	movs	r1, #1
 800a90a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2224      	movs	r2, #36	@ 0x24
 800a910:	2100      	movs	r1, #0
 800a912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	0018      	movs	r0, r3
 800a918:	46bd      	mov	sp, r7
 800a91a:	b004      	add	sp, #16
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	46c0      	nop			@ (mov r8, r8)
 800a920:	bffdfff8 	.word	0xbffdfff8
 800a924:	40020000 	.word	0x40020000
 800a928:	ffff800f 	.word	0xffff800f
 800a92c:	400200a8 	.word	0x400200a8

0800a930 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e04a      	b.n	800a9d8 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2101      	movs	r1, #1
 800a94e:	438a      	bics	r2, r1
 800a950:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a22      	ldr	r2, [pc, #136]	@ (800a9e0 <HAL_DMA_DeInit+0xb0>)
 800a958:	4694      	mov	ip, r2
 800a95a:	4463      	add	r3, ip
 800a95c:	2114      	movs	r1, #20
 800a95e:	0018      	movs	r0, r3
 800a960:	f7f5 fbee 	bl	8000140 <__udivsi3>
 800a964:	0003      	movs	r3, r0
 800a966:	009a      	lsls	r2, r3, #2
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a1d      	ldr	r2, [pc, #116]	@ (800a9e4 <HAL_DMA_DeInit+0xb4>)
 800a970:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a97e:	221c      	movs	r2, #28
 800a980:	401a      	ands	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a986:	2101      	movs	r1, #1
 800a988:	4091      	lsls	r1, r2
 800a98a:	000a      	movs	r2, r1
 800a98c:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a98e:	4b16      	ldr	r3, [pc, #88]	@ (800a9e8 <HAL_DMA_DeInit+0xb8>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a996:	211c      	movs	r1, #28
 800a998:	400b      	ands	r3, r1
 800a99a:	210f      	movs	r1, #15
 800a99c:	4099      	lsls	r1, r3
 800a99e:	000b      	movs	r3, r1
 800a9a0:	43d9      	mvns	r1, r3
 800a9a2:	4b11      	ldr	r3, [pc, #68]	@ (800a9e8 <HAL_DMA_DeInit+0xb8>)
 800a9a4:	400a      	ands	r2, r1
 800a9a6:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2225      	movs	r2, #37	@ 0x25
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2224      	movs	r2, #36	@ 0x24
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	0018      	movs	r0, r3
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	b002      	add	sp, #8
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	bffdfff8 	.word	0xbffdfff8
 800a9e4:	40020000 	.word	0x40020000
 800a9e8:	400200a8 	.word	0x400200a8

0800a9ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9fa:	2317      	movs	r3, #23
 800a9fc:	18fb      	adds	r3, r7, r3
 800a9fe:	2200      	movs	r2, #0
 800aa00:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2224      	movs	r2, #36	@ 0x24
 800aa06:	5c9b      	ldrb	r3, [r3, r2]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d101      	bne.n	800aa10 <HAL_DMA_Start_IT+0x24>
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	e04f      	b.n	800aab0 <HAL_DMA_Start_IT+0xc4>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2224      	movs	r2, #36	@ 0x24
 800aa14:	2101      	movs	r1, #1
 800aa16:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2225      	movs	r2, #37	@ 0x25
 800aa1c:	5c9b      	ldrb	r3, [r3, r2]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d13a      	bne.n	800aa9a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2225      	movs	r2, #37	@ 0x25
 800aa28:	2102      	movs	r1, #2
 800aa2a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	438a      	bics	r2, r1
 800aa40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	68b9      	ldr	r1, [r7, #8]
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 f976 	bl	800ad3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d008      	beq.n	800aa68 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	210e      	movs	r1, #14
 800aa62:	430a      	orrs	r2, r1
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	e00f      	b.n	800aa88 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2104      	movs	r1, #4
 800aa74:	438a      	bics	r2, r1
 800aa76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	210a      	movs	r1, #10
 800aa84:	430a      	orrs	r2, r1
 800aa86:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2101      	movs	r1, #1
 800aa94:	430a      	orrs	r2, r1
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	e007      	b.n	800aaaa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2224      	movs	r2, #36	@ 0x24
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800aaa2:	2317      	movs	r3, #23
 800aaa4:	18fb      	adds	r3, r7, r3
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800aaaa:	2317      	movs	r3, #23
 800aaac:	18fb      	adds	r3, r7, r3
 800aaae:	781b      	ldrb	r3, [r3, #0]
}
 800aab0:	0018      	movs	r0, r3
 800aab2:	46bd      	mov	sp, r7
 800aab4:	b006      	add	sp, #24
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aac0:	230f      	movs	r3, #15
 800aac2:	18fb      	adds	r3, r7, r3
 800aac4:	2200      	movs	r2, #0
 800aac6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2225      	movs	r2, #37	@ 0x25
 800aacc:	5c9b      	ldrb	r3, [r3, r2]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d008      	beq.n	800aae6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2204      	movs	r2, #4
 800aad8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2224      	movs	r2, #36	@ 0x24
 800aade:	2100      	movs	r1, #0
 800aae0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e024      	b.n	800ab30 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	210e      	movs	r1, #14
 800aaf2:	438a      	bics	r2, r1
 800aaf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2101      	movs	r1, #1
 800ab02:	438a      	bics	r2, r1
 800ab04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab0a:	221c      	movs	r2, #28
 800ab0c:	401a      	ands	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab12:	2101      	movs	r1, #1
 800ab14:	4091      	lsls	r1, r2
 800ab16:	000a      	movs	r2, r1
 800ab18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2225      	movs	r2, #37	@ 0x25
 800ab1e:	2101      	movs	r1, #1
 800ab20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2224      	movs	r2, #36	@ 0x24
 800ab26:	2100      	movs	r1, #0
 800ab28:	5499      	strb	r1, [r3, r2]

    return status;
 800ab2a:	230f      	movs	r3, #15
 800ab2c:	18fb      	adds	r3, r7, r3
 800ab2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab30:	0018      	movs	r0, r3
 800ab32:	46bd      	mov	sp, r7
 800ab34:	b004      	add	sp, #16
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab40:	210f      	movs	r1, #15
 800ab42:	187b      	adds	r3, r7, r1
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2225      	movs	r2, #37	@ 0x25
 800ab4c:	5c9b      	ldrb	r3, [r3, r2]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d006      	beq.n	800ab62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2204      	movs	r2, #4
 800ab58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ab5a:	187b      	adds	r3, r7, r1
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	e02a      	b.n	800abb8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	210e      	movs	r1, #14
 800ab6e:	438a      	bics	r2, r1
 800ab70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	438a      	bics	r2, r1
 800ab80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab86:	221c      	movs	r2, #28
 800ab88:	401a      	ands	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab8e:	2101      	movs	r1, #1
 800ab90:	4091      	lsls	r1, r2
 800ab92:	000a      	movs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2225      	movs	r2, #37	@ 0x25
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2224      	movs	r2, #36	@ 0x24
 800aba2:	2100      	movs	r1, #0
 800aba4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d004      	beq.n	800abb8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	0010      	movs	r0, r2
 800abb6:	4798      	blx	r3
    }
  }
  return status;
 800abb8:	230f      	movs	r3, #15
 800abba:	18fb      	adds	r3, r7, r3
 800abbc:	781b      	ldrb	r3, [r3, #0]
}
 800abbe:	0018      	movs	r0, r3
 800abc0:	46bd      	mov	sp, r7
 800abc2:	b004      	add	sp, #16
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe2:	221c      	movs	r2, #28
 800abe4:	4013      	ands	r3, r2
 800abe6:	2204      	movs	r2, #4
 800abe8:	409a      	lsls	r2, r3
 800abea:	0013      	movs	r3, r2
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4013      	ands	r3, r2
 800abf0:	d026      	beq.n	800ac40 <HAL_DMA_IRQHandler+0x7a>
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2204      	movs	r2, #4
 800abf6:	4013      	ands	r3, r2
 800abf8:	d022      	beq.n	800ac40 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2220      	movs	r2, #32
 800ac02:	4013      	ands	r3, r2
 800ac04:	d107      	bne.n	800ac16 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2104      	movs	r1, #4
 800ac12:	438a      	bics	r2, r1
 800ac14:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1a:	221c      	movs	r2, #28
 800ac1c:	401a      	ands	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac22:	2104      	movs	r1, #4
 800ac24:	4091      	lsls	r1, r2
 800ac26:	000a      	movs	r2, r1
 800ac28:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d100      	bne.n	800ac34 <HAL_DMA_IRQHandler+0x6e>
 800ac32:	e071      	b.n	800ad18 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	0010      	movs	r0, r2
 800ac3c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800ac3e:	e06b      	b.n	800ad18 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac44:	221c      	movs	r2, #28
 800ac46:	4013      	ands	r3, r2
 800ac48:	2202      	movs	r2, #2
 800ac4a:	409a      	lsls	r2, r3
 800ac4c:	0013      	movs	r3, r2
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	4013      	ands	r3, r2
 800ac52:	d02d      	beq.n	800acb0 <HAL_DMA_IRQHandler+0xea>
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2202      	movs	r2, #2
 800ac58:	4013      	ands	r3, r2
 800ac5a:	d029      	beq.n	800acb0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2220      	movs	r2, #32
 800ac64:	4013      	ands	r3, r2
 800ac66:	d10b      	bne.n	800ac80 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	210a      	movs	r1, #10
 800ac74:	438a      	bics	r2, r1
 800ac76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2225      	movs	r2, #37	@ 0x25
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac84:	221c      	movs	r2, #28
 800ac86:	401a      	ands	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	2102      	movs	r1, #2
 800ac8e:	4091      	lsls	r1, r2
 800ac90:	000a      	movs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2224      	movs	r2, #36	@ 0x24
 800ac98:	2100      	movs	r1, #0
 800ac9a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d039      	beq.n	800ad18 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	0010      	movs	r0, r2
 800acac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800acae:	e033      	b.n	800ad18 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acb4:	221c      	movs	r2, #28
 800acb6:	4013      	ands	r3, r2
 800acb8:	2208      	movs	r2, #8
 800acba:	409a      	lsls	r2, r3
 800acbc:	0013      	movs	r3, r2
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	4013      	ands	r3, r2
 800acc2:	d02a      	beq.n	800ad1a <HAL_DMA_IRQHandler+0x154>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2208      	movs	r2, #8
 800acc8:	4013      	ands	r3, r2
 800acca:	d026      	beq.n	800ad1a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	210e      	movs	r1, #14
 800acd8:	438a      	bics	r2, r1
 800acda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace0:	221c      	movs	r2, #28
 800ace2:	401a      	ands	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace8:	2101      	movs	r1, #1
 800acea:	4091      	lsls	r1, r2
 800acec:	000a      	movs	r2, r1
 800acee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2225      	movs	r2, #37	@ 0x25
 800acfa:	2101      	movs	r1, #1
 800acfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2224      	movs	r2, #36	@ 0x24
 800ad02:	2100      	movs	r1, #0
 800ad04:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d005      	beq.n	800ad1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	0010      	movs	r0, r2
 800ad16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ad18:	46c0      	nop			@ (mov r8, r8)
 800ad1a:	46c0      	nop			@ (mov r8, r8)
}
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	b004      	add	sp, #16
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2225      	movs	r2, #37	@ 0x25
 800ad2e:	5c9b      	ldrb	r3, [r3, r2]
 800ad30:	b2db      	uxtb	r3, r3
}
 800ad32:	0018      	movs	r0, r3
 800ad34:	46bd      	mov	sp, r7
 800ad36:	b002      	add	sp, #8
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	60f8      	str	r0, [r7, #12]
 800ad42:	60b9      	str	r1, [r7, #8]
 800ad44:	607a      	str	r2, [r7, #4]
 800ad46:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad4c:	221c      	movs	r2, #28
 800ad4e:	401a      	ands	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad54:	2101      	movs	r1, #1
 800ad56:	4091      	lsls	r1, r2
 800ad58:	000a      	movs	r2, r1
 800ad5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	2b10      	cmp	r3, #16
 800ad6a:	d108      	bne.n	800ad7e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ad7c:	e007      	b.n	800ad8e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	60da      	str	r2, [r3, #12]
}
 800ad8e:	46c0      	nop			@ (mov r8, r8)
 800ad90:	46bd      	mov	sp, r7
 800ad92:	b004      	add	sp, #16
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ada0:	f7ff f8a6 	bl	8009ef0 <HAL_GetTick>
 800ada4:	0003      	movs	r3, r0
 800ada6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ada8:	e00f      	b.n	800adca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3301      	adds	r3, #1
 800adae:	d00c      	beq.n	800adca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d007      	beq.n	800adc6 <FLASH_WaitForLastOperation+0x2e>
 800adb6:	f7ff f89b 	bl	8009ef0 <HAL_GetTick>
 800adba:	0002      	movs	r2, r0
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d201      	bcs.n	800adca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e052      	b.n	800ae70 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800adca:	4b2b      	ldr	r3, [pc, #172]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	2201      	movs	r2, #1
 800add0:	4013      	ands	r3, r2
 800add2:	2b01      	cmp	r3, #1
 800add4:	d0e9      	beq.n	800adaa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800add6:	4b28      	ldr	r3, [pc, #160]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	2202      	movs	r2, #2
 800addc:	4013      	ands	r3, r2
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d102      	bne.n	800ade8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ade2:	4b25      	ldr	r3, [pc, #148]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800ade4:	2202      	movs	r2, #2
 800ade6:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ade8:	4b23      	ldr	r3, [pc, #140]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800adea:	699a      	ldr	r2, [r3, #24]
 800adec:	2380      	movs	r3, #128	@ 0x80
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	401a      	ands	r2, r3
 800adf2:	2380      	movs	r3, #128	@ 0x80
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d035      	beq.n	800ae66 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800adfa:	4b1f      	ldr	r3, [pc, #124]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	2380      	movs	r3, #128	@ 0x80
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ae04:	2380      	movs	r3, #128	@ 0x80
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d02c      	beq.n	800ae66 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ae0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800ae0e:	699a      	ldr	r2, [r3, #24]
 800ae10:	2380      	movs	r3, #128	@ 0x80
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ae16:	2380      	movs	r3, #128	@ 0x80
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d023      	beq.n	800ae66 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ae1e:	4b16      	ldr	r3, [pc, #88]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800ae20:	699a      	ldr	r2, [r3, #24]
 800ae22:	2380      	movs	r3, #128	@ 0x80
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ae28:	2380      	movs	r3, #128	@ 0x80
 800ae2a:	011b      	lsls	r3, r3, #4
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d01a      	beq.n	800ae66 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ae30:	4b11      	ldr	r3, [pc, #68]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800ae32:	699a      	ldr	r2, [r3, #24]
 800ae34:	2380      	movs	r3, #128	@ 0x80
 800ae36:	019b      	lsls	r3, r3, #6
 800ae38:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ae3a:	2380      	movs	r3, #128	@ 0x80
 800ae3c:	019b      	lsls	r3, r3, #6
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d011      	beq.n	800ae66 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ae42:	4b0d      	ldr	r3, [pc, #52]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800ae44:	699a      	ldr	r2, [r3, #24]
 800ae46:	2380      	movs	r3, #128	@ 0x80
 800ae48:	029b      	lsls	r3, r3, #10
 800ae4a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ae4c:	2380      	movs	r3, #128	@ 0x80
 800ae4e:	029b      	lsls	r3, r3, #10
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d008      	beq.n	800ae66 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800ae54:	4b08      	ldr	r3, [pc, #32]	@ (800ae78 <FLASH_WaitForLastOperation+0xe0>)
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	2380      	movs	r3, #128	@ 0x80
 800ae5a:	025b      	lsls	r3, r3, #9
 800ae5c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ae5e:	2380      	movs	r3, #128	@ 0x80
 800ae60:	025b      	lsls	r3, r3, #9
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d103      	bne.n	800ae6e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ae66:	f000 f809 	bl	800ae7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e000      	b.n	800ae70 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	0018      	movs	r0, r3
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b004      	add	sp, #16
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	40022000 	.word	0x40022000

0800ae7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ae86:	4b49      	ldr	r3, [pc, #292]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800ae88:	699a      	ldr	r2, [r3, #24]
 800ae8a:	2380      	movs	r3, #128	@ 0x80
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	401a      	ands	r2, r3
 800ae90:	2380      	movs	r3, #128	@ 0x80
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d10a      	bne.n	800aeae <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ae98:	4b45      	ldr	r3, [pc, #276]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	4b43      	ldr	r3, [pc, #268]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800aea2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2280      	movs	r2, #128	@ 0x80
 800aea8:	0052      	lsls	r2, r2, #1
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800aeae:	4b3f      	ldr	r3, [pc, #252]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	2380      	movs	r3, #128	@ 0x80
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	401a      	ands	r2, r3
 800aeb8:	2380      	movs	r3, #128	@ 0x80
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d10a      	bne.n	800aed6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800aec0:	4b3b      	ldr	r3, [pc, #236]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800aec2:	695b      	ldr	r3, [r3, #20]
 800aec4:	2201      	movs	r2, #1
 800aec6:	431a      	orrs	r2, r3
 800aec8:	4b39      	ldr	r3, [pc, #228]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800aeca:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2280      	movs	r2, #128	@ 0x80
 800aed0:	0092      	lsls	r2, r2, #2
 800aed2:	4313      	orrs	r3, r2
 800aed4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800aed6:	4b35      	ldr	r3, [pc, #212]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800aed8:	699a      	ldr	r2, [r3, #24]
 800aeda:	2380      	movs	r3, #128	@ 0x80
 800aedc:	00db      	lsls	r3, r3, #3
 800aede:	401a      	ands	r2, r3
 800aee0:	2380      	movs	r3, #128	@ 0x80
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d10a      	bne.n	800aefe <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800aee8:	4b31      	ldr	r3, [pc, #196]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	2208      	movs	r2, #8
 800aeee:	431a      	orrs	r2, r3
 800aef0:	4b2f      	ldr	r3, [pc, #188]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800aef2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2280      	movs	r2, #128	@ 0x80
 800aef8:	00d2      	lsls	r2, r2, #3
 800aefa:	4313      	orrs	r3, r2
 800aefc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800aefe:	4b2b      	ldr	r3, [pc, #172]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	2380      	movs	r3, #128	@ 0x80
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	401a      	ands	r2, r3
 800af08:	2380      	movs	r3, #128	@ 0x80
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d10a      	bne.n	800af26 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800af10:	4b27      	ldr	r3, [pc, #156]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	2204      	movs	r2, #4
 800af16:	431a      	orrs	r2, r3
 800af18:	4b25      	ldr	r3, [pc, #148]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af1a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2280      	movs	r2, #128	@ 0x80
 800af20:	0112      	lsls	r2, r2, #4
 800af22:	4313      	orrs	r3, r2
 800af24:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800af26:	4b21      	ldr	r3, [pc, #132]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800af28:	699a      	ldr	r2, [r3, #24]
 800af2a:	2380      	movs	r3, #128	@ 0x80
 800af2c:	019b      	lsls	r3, r3, #6
 800af2e:	401a      	ands	r2, r3
 800af30:	2380      	movs	r3, #128	@ 0x80
 800af32:	019b      	lsls	r3, r3, #6
 800af34:	429a      	cmp	r2, r3
 800af36:	d10a      	bne.n	800af4e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800af38:	4b1d      	ldr	r3, [pc, #116]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	2210      	movs	r2, #16
 800af3e:	431a      	orrs	r2, r3
 800af40:	4b1b      	ldr	r3, [pc, #108]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af42:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2280      	movs	r2, #128	@ 0x80
 800af48:	0192      	lsls	r2, r2, #6
 800af4a:	4313      	orrs	r3, r2
 800af4c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800af4e:	4b17      	ldr	r3, [pc, #92]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800af50:	699a      	ldr	r2, [r3, #24]
 800af52:	2380      	movs	r3, #128	@ 0x80
 800af54:	029b      	lsls	r3, r3, #10
 800af56:	401a      	ands	r2, r3
 800af58:	2380      	movs	r3, #128	@ 0x80
 800af5a:	029b      	lsls	r3, r3, #10
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d109      	bne.n	800af74 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800af60:	4b13      	ldr	r3, [pc, #76]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	2220      	movs	r2, #32
 800af66:	431a      	orrs	r2, r3
 800af68:	4b11      	ldr	r3, [pc, #68]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af6a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2220      	movs	r2, #32
 800af70:	4313      	orrs	r3, r2
 800af72:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800af74:	4b0d      	ldr	r3, [pc, #52]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	2380      	movs	r3, #128	@ 0x80
 800af7a:	025b      	lsls	r3, r3, #9
 800af7c:	401a      	ands	r2, r3
 800af7e:	2380      	movs	r3, #128	@ 0x80
 800af80:	025b      	lsls	r3, r3, #9
 800af82:	429a      	cmp	r2, r3
 800af84:	d10a      	bne.n	800af9c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800af86:	4b0a      	ldr	r3, [pc, #40]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	2240      	movs	r2, #64	@ 0x40
 800af8c:	431a      	orrs	r2, r3
 800af8e:	4b08      	ldr	r3, [pc, #32]	@ (800afb0 <FLASH_SetErrorCode+0x134>)
 800af90:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2280      	movs	r2, #128	@ 0x80
 800af96:	0252      	lsls	r2, r2, #9
 800af98:	4313      	orrs	r3, r2
 800af9a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800af9c:	4b03      	ldr	r3, [pc, #12]	@ (800afac <FLASH_SetErrorCode+0x130>)
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	619a      	str	r2, [r3, #24]
}  
 800afa2:	46c0      	nop			@ (mov r8, r8)
 800afa4:	46bd      	mov	sp, r7
 800afa6:	b002      	add	sp, #8
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	46c0      	nop			@ (mov r8, r8)
 800afac:	40022000 	.word	0x40022000
 800afb0:	20002c10 	.word	0x20002c10

0800afb4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800afba:	4b12      	ldr	r3, [pc, #72]	@ (800b004 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	4013      	ands	r3, r2
 800afc2:	d019      	beq.n	800aff8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc4:	f3ef 8310 	mrs	r3, PRIMASK
 800afc8:	607b      	str	r3, [r7, #4]
  return(result);
 800afca:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800afcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800afce:	b672      	cpsid	i
}
 800afd0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800afd2:	4b0c      	ldr	r3, [pc, #48]	@ (800b004 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800afd4:	4a0c      	ldr	r2, [pc, #48]	@ (800b008 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800afd6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800afd8:	4b0a      	ldr	r3, [pc, #40]	@ (800b004 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800afda:	4a0c      	ldr	r2, [pc, #48]	@ (800b00c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800afdc:	60da      	str	r2, [r3, #12]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f383 8810 	msr	PRIMASK, r3
}
 800afe8:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800afea:	4b06      	ldr	r3, [pc, #24]	@ (800b004 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	4013      	ands	r3, r2
 800aff2:	d001      	beq.n	800aff8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	e000      	b.n	800affa <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800aff8:	2300      	movs	r3, #0
}
 800affa:	0018      	movs	r0, r3
 800affc:	46bd      	mov	sp, r7
 800affe:	b004      	add	sp, #16
 800b000:	bd80      	pop	{r7, pc}
 800b002:	46c0      	nop			@ (mov r8, r8)
 800b004:	40022000 	.word	0x40022000
 800b008:	89abcdef 	.word	0x89abcdef
 800b00c:	02030405 	.word	0x02030405

0800b010 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800b014:	4b04      	ldr	r3, [pc, #16]	@ (800b028 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	4b03      	ldr	r3, [pc, #12]	@ (800b028 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b01a:	2101      	movs	r1, #1
 800b01c:	430a      	orrs	r2, r1
 800b01e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	0018      	movs	r0, r3
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40022000 	.word	0x40022000

0800b02c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800b02c:	b5b0      	push	{r4, r5, r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b034:	250f      	movs	r5, #15
 800b036:	197b      	adds	r3, r7, r5
 800b038:	2200      	movs	r2, #0
 800b03a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b03c:	197c      	adds	r4, r7, r5
 800b03e:	4b0f      	ldr	r3, [pc, #60]	@ (800b07c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b040:	0018      	movs	r0, r3
 800b042:	f7ff fea9 	bl	800ad98 <FLASH_WaitForLastOperation>
 800b046:	0003      	movs	r3, r0
 800b048:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b04a:	0029      	movs	r1, r5
 800b04c:	187b      	adds	r3, r7, r1
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10c      	bne.n	800b06e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b054:	4b0a      	ldr	r3, [pc, #40]	@ (800b080 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800b056:	2200      	movs	r2, #0
 800b058:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b060:	187c      	adds	r4, r7, r1
 800b062:	4b06      	ldr	r3, [pc, #24]	@ (800b07c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b064:	0018      	movs	r0, r3
 800b066:	f7ff fe97 	bl	800ad98 <FLASH_WaitForLastOperation>
 800b06a:	0003      	movs	r3, r0
 800b06c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800b06e:	230f      	movs	r3, #15
 800b070:	18fb      	adds	r3, r7, r3
 800b072:	781b      	ldrb	r3, [r3, #0]
}  
 800b074:	0018      	movs	r0, r3
 800b076:	46bd      	mov	sp, r7
 800b078:	b004      	add	sp, #16
 800b07a:	bdb0      	pop	{r4, r5, r7, pc}
 800b07c:	0000c350 	.word	0x0000c350
 800b080:	20002c10 	.word	0x20002c10

0800b084 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800b084:	b5b0      	push	{r4, r5, r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b090:	2317      	movs	r3, #23
 800b092:	18fb      	adds	r3, r7, r3
 800b094:	2201      	movs	r2, #1
 800b096:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b098:	4b24      	ldr	r3, [pc, #144]	@ (800b12c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b09a:	7c1b      	ldrb	r3, [r3, #16]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e03e      	b.n	800b122 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800b0a4:	4b21      	ldr	r3, [pc, #132]	@ (800b12c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b0aa:	2517      	movs	r5, #23
 800b0ac:	197c      	adds	r4, r7, r5
 800b0ae:	4b20      	ldr	r3, [pc, #128]	@ (800b130 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b0b0:	0018      	movs	r0, r3
 800b0b2:	f7ff fe71 	bl	800ad98 <FLASH_WaitForLastOperation>
 800b0b6:	0003      	movs	r3, r0
 800b0b8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b0ba:	197b      	adds	r3, r7, r5
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d129      	bne.n	800b116 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b0c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b12c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d103      	bne.n	800b0d6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	e013      	b.n	800b0fe <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d104      	bne.n	800b0e6 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	b292      	uxth	r2, r2
 800b0e2:	801a      	strh	r2, [r3, #0]
 800b0e4:	e00b      	b.n	800b0fe <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d104      	bne.n	800b0f6 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	b2d2      	uxtb	r2, r2
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	e003      	b.n	800b0fe <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800b0f6:	2317      	movs	r3, #23
 800b0f8:	18fb      	adds	r3, r7, r3
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b0fe:	2217      	movs	r2, #23
 800b100:	18bb      	adds	r3, r7, r2
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d106      	bne.n	800b116 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b108:	18bc      	adds	r4, r7, r2
 800b10a:	4b09      	ldr	r3, [pc, #36]	@ (800b130 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b10c:	0018      	movs	r0, r3
 800b10e:	f7ff fe43 	bl	800ad98 <FLASH_WaitForLastOperation>
 800b112:	0003      	movs	r3, r0
 800b114:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b116:	4b05      	ldr	r3, [pc, #20]	@ (800b12c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b118:	2200      	movs	r2, #0
 800b11a:	741a      	strb	r2, [r3, #16]

  return status;
 800b11c:	2317      	movs	r3, #23
 800b11e:	18fb      	adds	r3, r7, r3
 800b120:	781b      	ldrb	r3, [r3, #0]
}
 800b122:	0018      	movs	r0, r3
 800b124:	46bd      	mov	sp, r7
 800b126:	b006      	add	sp, #24
 800b128:	bdb0      	pop	{r4, r5, r7, pc}
 800b12a:	46c0      	nop			@ (mov r8, r8)
 800b12c:	20002c10 	.word	0x20002c10
 800b130:	0000c350 	.word	0x0000c350

0800b134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800b146:	2300      	movs	r3, #0
 800b148:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b14a:	e155      	b.n	800b3f8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2101      	movs	r1, #1
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	4091      	lsls	r1, r2
 800b156:	000a      	movs	r2, r1
 800b158:	4013      	ands	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d100      	bne.n	800b164 <HAL_GPIO_Init+0x30>
 800b162:	e146      	b.n	800b3f2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	2203      	movs	r2, #3
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d005      	beq.n	800b17c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	2203      	movs	r2, #3
 800b176:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d130      	bne.n	800b1de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	005b      	lsls	r3, r3, #1
 800b186:	2203      	movs	r2, #3
 800b188:	409a      	lsls	r2, r3
 800b18a:	0013      	movs	r3, r2
 800b18c:	43da      	mvns	r2, r3
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	4013      	ands	r3, r2
 800b192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	68da      	ldr	r2, [r3, #12]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	409a      	lsls	r2, r3
 800b19e:	0013      	movs	r3, r2
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	409a      	lsls	r2, r3
 800b1b8:	0013      	movs	r3, r2
 800b1ba:	43da      	mvns	r2, r3
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	4013      	ands	r3, r2
 800b1c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	091b      	lsrs	r3, r3, #4
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	401a      	ands	r2, r3
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	409a      	lsls	r2, r3
 800b1d0:	0013      	movs	r3, r2
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d017      	beq.n	800b21a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	2203      	movs	r2, #3
 800b1f6:	409a      	lsls	r2, r3
 800b1f8:	0013      	movs	r3, r2
 800b1fa:	43da      	mvns	r2, r3
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	4013      	ands	r3, r2
 800b200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	689a      	ldr	r2, [r3, #8]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	409a      	lsls	r2, r3
 800b20c:	0013      	movs	r3, r2
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	4313      	orrs	r3, r2
 800b212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2203      	movs	r2, #3
 800b220:	4013      	ands	r3, r2
 800b222:	2b02      	cmp	r3, #2
 800b224:	d123      	bne.n	800b26e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	08da      	lsrs	r2, r3, #3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3208      	adds	r2, #8
 800b22e:	0092      	lsls	r2, r2, #2
 800b230:	58d3      	ldr	r3, [r2, r3]
 800b232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2207      	movs	r2, #7
 800b238:	4013      	ands	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	220f      	movs	r2, #15
 800b23e:	409a      	lsls	r2, r3
 800b240:	0013      	movs	r3, r2
 800b242:	43da      	mvns	r2, r3
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	4013      	ands	r3, r2
 800b248:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	691a      	ldr	r2, [r3, #16]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2107      	movs	r1, #7
 800b252:	400b      	ands	r3, r1
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	409a      	lsls	r2, r3
 800b258:	0013      	movs	r3, r2
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	08da      	lsrs	r2, r3, #3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3208      	adds	r2, #8
 800b268:	0092      	lsls	r2, r2, #2
 800b26a:	6939      	ldr	r1, [r7, #16]
 800b26c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	2203      	movs	r2, #3
 800b27a:	409a      	lsls	r2, r3
 800b27c:	0013      	movs	r3, r2
 800b27e:	43da      	mvns	r2, r3
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	4013      	ands	r3, r2
 800b284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	2203      	movs	r2, #3
 800b28c:	401a      	ands	r2, r3
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	409a      	lsls	r2, r3
 800b294:	0013      	movs	r3, r2
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	4313      	orrs	r3, r2
 800b29a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	23c0      	movs	r3, #192	@ 0xc0
 800b2a8:	029b      	lsls	r3, r3, #10
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	d100      	bne.n	800b2b0 <HAL_GPIO_Init+0x17c>
 800b2ae:	e0a0      	b.n	800b3f2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2b0:	4b57      	ldr	r3, [pc, #348]	@ (800b410 <HAL_GPIO_Init+0x2dc>)
 800b2b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2b4:	4b56      	ldr	r3, [pc, #344]	@ (800b410 <HAL_GPIO_Init+0x2dc>)
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	430a      	orrs	r2, r1
 800b2ba:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b2bc:	4a55      	ldr	r2, [pc, #340]	@ (800b414 <HAL_GPIO_Init+0x2e0>)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	089b      	lsrs	r3, r3, #2
 800b2c2:	3302      	adds	r3, #2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	589b      	ldr	r3, [r3, r2]
 800b2c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2203      	movs	r2, #3
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	220f      	movs	r2, #15
 800b2d4:	409a      	lsls	r2, r3
 800b2d6:	0013      	movs	r3, r2
 800b2d8:	43da      	mvns	r2, r3
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	4013      	ands	r3, r2
 800b2de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	23a0      	movs	r3, #160	@ 0xa0
 800b2e4:	05db      	lsls	r3, r3, #23
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d01f      	beq.n	800b32a <HAL_GPIO_Init+0x1f6>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a4a      	ldr	r2, [pc, #296]	@ (800b418 <HAL_GPIO_Init+0x2e4>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d019      	beq.n	800b326 <HAL_GPIO_Init+0x1f2>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a49      	ldr	r2, [pc, #292]	@ (800b41c <HAL_GPIO_Init+0x2e8>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d013      	beq.n	800b322 <HAL_GPIO_Init+0x1ee>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a48      	ldr	r2, [pc, #288]	@ (800b420 <HAL_GPIO_Init+0x2ec>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d00d      	beq.n	800b31e <HAL_GPIO_Init+0x1ea>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a47      	ldr	r2, [pc, #284]	@ (800b424 <HAL_GPIO_Init+0x2f0>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d007      	beq.n	800b31a <HAL_GPIO_Init+0x1e6>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a46      	ldr	r2, [pc, #280]	@ (800b428 <HAL_GPIO_Init+0x2f4>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d101      	bne.n	800b316 <HAL_GPIO_Init+0x1e2>
 800b312:	2305      	movs	r3, #5
 800b314:	e00a      	b.n	800b32c <HAL_GPIO_Init+0x1f8>
 800b316:	2306      	movs	r3, #6
 800b318:	e008      	b.n	800b32c <HAL_GPIO_Init+0x1f8>
 800b31a:	2304      	movs	r3, #4
 800b31c:	e006      	b.n	800b32c <HAL_GPIO_Init+0x1f8>
 800b31e:	2303      	movs	r3, #3
 800b320:	e004      	b.n	800b32c <HAL_GPIO_Init+0x1f8>
 800b322:	2302      	movs	r3, #2
 800b324:	e002      	b.n	800b32c <HAL_GPIO_Init+0x1f8>
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <HAL_GPIO_Init+0x1f8>
 800b32a:	2300      	movs	r3, #0
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	2103      	movs	r1, #3
 800b330:	400a      	ands	r2, r1
 800b332:	0092      	lsls	r2, r2, #2
 800b334:	4093      	lsls	r3, r2
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	4313      	orrs	r3, r2
 800b33a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b33c:	4935      	ldr	r1, [pc, #212]	@ (800b414 <HAL_GPIO_Init+0x2e0>)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	089b      	lsrs	r3, r3, #2
 800b342:	3302      	adds	r3, #2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b34a:	4b38      	ldr	r3, [pc, #224]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	43da      	mvns	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	4013      	ands	r3, r2
 800b358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	2380      	movs	r3, #128	@ 0x80
 800b360:	035b      	lsls	r3, r3, #13
 800b362:	4013      	ands	r3, r2
 800b364:	d003      	beq.n	800b36e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b36e:	4b2f      	ldr	r3, [pc, #188]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b374:	4b2d      	ldr	r3, [pc, #180]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	43da      	mvns	r2, r3
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	4013      	ands	r3, r2
 800b382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	2380      	movs	r3, #128	@ 0x80
 800b38a:	039b      	lsls	r3, r3, #14
 800b38c:	4013      	ands	r3, r2
 800b38e:	d003      	beq.n	800b398 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b390:	693a      	ldr	r2, [r7, #16]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	4313      	orrs	r3, r2
 800b396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b398:	4b24      	ldr	r3, [pc, #144]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b39e:	4b23      	ldr	r3, [pc, #140]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	43da      	mvns	r2, r3
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	2380      	movs	r3, #128	@ 0x80
 800b3b4:	029b      	lsls	r3, r3, #10
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	d003      	beq.n	800b3c2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b3c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b3c8:	4b18      	ldr	r3, [pc, #96]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	43da      	mvns	r2, r3
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	2380      	movs	r3, #128	@ 0x80
 800b3de:	025b      	lsls	r3, r3, #9
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	d003      	beq.n	800b3ec <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b42c <HAL_GPIO_Init+0x2f8>)
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	40da      	lsrs	r2, r3
 800b400:	1e13      	subs	r3, r2, #0
 800b402:	d000      	beq.n	800b406 <HAL_GPIO_Init+0x2d2>
 800b404:	e6a2      	b.n	800b14c <HAL_GPIO_Init+0x18>
  }
}
 800b406:	46c0      	nop			@ (mov r8, r8)
 800b408:	46c0      	nop			@ (mov r8, r8)
 800b40a:	46bd      	mov	sp, r7
 800b40c:	b006      	add	sp, #24
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	40021000 	.word	0x40021000
 800b414:	40010000 	.word	0x40010000
 800b418:	50000400 	.word	0x50000400
 800b41c:	50000800 	.word	0x50000800
 800b420:	50000c00 	.word	0x50000c00
 800b424:	50001000 	.word	0x50001000
 800b428:	50001c00 	.word	0x50001c00
 800b42c:	40010400 	.word	0x40010400

0800b430 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b43e:	2300      	movs	r3, #0
 800b440:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b442:	2300      	movs	r3, #0
 800b444:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b446:	e0bc      	b.n	800b5c2 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b448:	2201      	movs	r2, #1
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	409a      	lsls	r2, r3
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	4013      	ands	r3, r2
 800b452:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d100      	bne.n	800b45c <HAL_GPIO_DeInit+0x2c>
 800b45a:	e0af      	b.n	800b5bc <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b45c:	4a5e      	ldr	r2, [pc, #376]	@ (800b5d8 <HAL_GPIO_DeInit+0x1a8>)
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	089b      	lsrs	r3, r3, #2
 800b462:	3302      	adds	r3, #2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	589b      	ldr	r3, [r3, r2]
 800b468:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2203      	movs	r2, #3
 800b46e:	4013      	ands	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	220f      	movs	r2, #15
 800b474:	409a      	lsls	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4013      	ands	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	23a0      	movs	r3, #160	@ 0xa0
 800b480:	05db      	lsls	r3, r3, #23
 800b482:	429a      	cmp	r2, r3
 800b484:	d01f      	beq.n	800b4c6 <HAL_GPIO_DeInit+0x96>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a54      	ldr	r2, [pc, #336]	@ (800b5dc <HAL_GPIO_DeInit+0x1ac>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d019      	beq.n	800b4c2 <HAL_GPIO_DeInit+0x92>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a53      	ldr	r2, [pc, #332]	@ (800b5e0 <HAL_GPIO_DeInit+0x1b0>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d013      	beq.n	800b4be <HAL_GPIO_DeInit+0x8e>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a52      	ldr	r2, [pc, #328]	@ (800b5e4 <HAL_GPIO_DeInit+0x1b4>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d00d      	beq.n	800b4ba <HAL_GPIO_DeInit+0x8a>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a51      	ldr	r2, [pc, #324]	@ (800b5e8 <HAL_GPIO_DeInit+0x1b8>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d007      	beq.n	800b4b6 <HAL_GPIO_DeInit+0x86>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a50      	ldr	r2, [pc, #320]	@ (800b5ec <HAL_GPIO_DeInit+0x1bc>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d101      	bne.n	800b4b2 <HAL_GPIO_DeInit+0x82>
 800b4ae:	2305      	movs	r3, #5
 800b4b0:	e00a      	b.n	800b4c8 <HAL_GPIO_DeInit+0x98>
 800b4b2:	2306      	movs	r3, #6
 800b4b4:	e008      	b.n	800b4c8 <HAL_GPIO_DeInit+0x98>
 800b4b6:	2304      	movs	r3, #4
 800b4b8:	e006      	b.n	800b4c8 <HAL_GPIO_DeInit+0x98>
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e004      	b.n	800b4c8 <HAL_GPIO_DeInit+0x98>
 800b4be:	2302      	movs	r3, #2
 800b4c0:	e002      	b.n	800b4c8 <HAL_GPIO_DeInit+0x98>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e000      	b.n	800b4c8 <HAL_GPIO_DeInit+0x98>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	2103      	movs	r1, #3
 800b4cc:	400a      	ands	r2, r1
 800b4ce:	0092      	lsls	r2, r2, #2
 800b4d0:	4093      	lsls	r3, r2
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d132      	bne.n	800b53e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b4d8:	4b45      	ldr	r3, [pc, #276]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	43d9      	mvns	r1, r3
 800b4e0:	4b43      	ldr	r3, [pc, #268]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b4e2:	400a      	ands	r2, r1
 800b4e4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b4e6:	4b42      	ldr	r3, [pc, #264]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	43d9      	mvns	r1, r3
 800b4ee:	4b40      	ldr	r3, [pc, #256]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b4f0:	400a      	ands	r2, r1
 800b4f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b4f4:	4b3e      	ldr	r3, [pc, #248]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b4f6:	68da      	ldr	r2, [r3, #12]
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	43d9      	mvns	r1, r3
 800b4fc:	4b3c      	ldr	r3, [pc, #240]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b4fe:	400a      	ands	r2, r1
 800b500:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b502:	4b3b      	ldr	r3, [pc, #236]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	43d9      	mvns	r1, r3
 800b50a:	4b39      	ldr	r3, [pc, #228]	@ (800b5f0 <HAL_GPIO_DeInit+0x1c0>)
 800b50c:	400a      	ands	r2, r1
 800b50e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2203      	movs	r2, #3
 800b514:	4013      	ands	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	220f      	movs	r2, #15
 800b51a:	409a      	lsls	r2, r3
 800b51c:	0013      	movs	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b520:	4a2d      	ldr	r2, [pc, #180]	@ (800b5d8 <HAL_GPIO_DeInit+0x1a8>)
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	089b      	lsrs	r3, r3, #2
 800b526:	3302      	adds	r3, #2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	589a      	ldr	r2, [r3, r2]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	43d9      	mvns	r1, r3
 800b530:	4829      	ldr	r0, [pc, #164]	@ (800b5d8 <HAL_GPIO_DeInit+0x1a8>)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	089b      	lsrs	r3, r3, #2
 800b536:	400a      	ands	r2, r1
 800b538:	3302      	adds	r3, #2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	2103      	movs	r1, #3
 800b548:	4099      	lsls	r1, r3
 800b54a:	000b      	movs	r3, r1
 800b54c:	431a      	orrs	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	08da      	lsrs	r2, r3, #3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3208      	adds	r2, #8
 800b55a:	0092      	lsls	r2, r2, #2
 800b55c:	58d3      	ldr	r3, [r2, r3]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	2107      	movs	r1, #7
 800b562:	400a      	ands	r2, r1
 800b564:	0092      	lsls	r2, r2, #2
 800b566:	210f      	movs	r1, #15
 800b568:	4091      	lsls	r1, r2
 800b56a:	000a      	movs	r2, r1
 800b56c:	43d1      	mvns	r1, r2
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	08d2      	lsrs	r2, r2, #3
 800b572:	4019      	ands	r1, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3208      	adds	r2, #8
 800b578:	0092      	lsls	r2, r2, #2
 800b57a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	0052      	lsls	r2, r2, #1
 800b584:	2103      	movs	r1, #3
 800b586:	4091      	lsls	r1, r2
 800b588:	000a      	movs	r2, r1
 800b58a:	43d2      	mvns	r2, r2
 800b58c:	401a      	ands	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	2101      	movs	r1, #1
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	4091      	lsls	r1, r2
 800b59c:	000a      	movs	r2, r1
 800b59e:	43d2      	mvns	r2, r2
 800b5a0:	401a      	ands	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	0052      	lsls	r2, r2, #1
 800b5ae:	2103      	movs	r1, #3
 800b5b0:	4091      	lsls	r1, r2
 800b5b2:	000a      	movs	r2, r1
 800b5b4:	43d2      	mvns	r2, r2
 800b5b6:	401a      	ands	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	40da      	lsrs	r2, r3
 800b5c8:	1e13      	subs	r3, r2, #0
 800b5ca:	d000      	beq.n	800b5ce <HAL_GPIO_DeInit+0x19e>
 800b5cc:	e73c      	b.n	800b448 <HAL_GPIO_DeInit+0x18>
  }
}
 800b5ce:	46c0      	nop			@ (mov r8, r8)
 800b5d0:	46c0      	nop			@ (mov r8, r8)
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	b006      	add	sp, #24
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	40010000 	.word	0x40010000
 800b5dc:	50000400 	.word	0x50000400
 800b5e0:	50000800 	.word	0x50000800
 800b5e4:	50000c00 	.word	0x50000c00
 800b5e8:	50001000 	.word	0x50001000
 800b5ec:	50001c00 	.word	0x50001c00
 800b5f0:	40010400 	.word	0x40010400

0800b5f4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	000a      	movs	r2, r1
 800b5fe:	1cbb      	adds	r3, r7, #2
 800b600:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	1cba      	adds	r2, r7, #2
 800b608:	8812      	ldrh	r2, [r2, #0]
 800b60a:	4013      	ands	r3, r2
 800b60c:	d004      	beq.n	800b618 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b60e:	230f      	movs	r3, #15
 800b610:	18fb      	adds	r3, r7, r3
 800b612:	2201      	movs	r2, #1
 800b614:	701a      	strb	r2, [r3, #0]
 800b616:	e003      	b.n	800b620 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b618:	230f      	movs	r3, #15
 800b61a:	18fb      	adds	r3, r7, r3
 800b61c:	2200      	movs	r2, #0
 800b61e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b620:	230f      	movs	r3, #15
 800b622:	18fb      	adds	r3, r7, r3
 800b624:	781b      	ldrb	r3, [r3, #0]
}
 800b626:	0018      	movs	r0, r3
 800b628:	46bd      	mov	sp, r7
 800b62a:	b004      	add	sp, #16
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	0008      	movs	r0, r1
 800b638:	0011      	movs	r1, r2
 800b63a:	1cbb      	adds	r3, r7, #2
 800b63c:	1c02      	adds	r2, r0, #0
 800b63e:	801a      	strh	r2, [r3, #0]
 800b640:	1c7b      	adds	r3, r7, #1
 800b642:	1c0a      	adds	r2, r1, #0
 800b644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b646:	1c7b      	adds	r3, r7, #1
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d004      	beq.n	800b658 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b64e:	1cbb      	adds	r3, r7, #2
 800b650:	881a      	ldrh	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800b656:	e003      	b.n	800b660 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800b658:	1cbb      	adds	r3, r7, #2
 800b65a:	881a      	ldrh	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b660:	46c0      	nop			@ (mov r8, r8)
 800b662:	46bd      	mov	sp, r7
 800b664:	b002      	add	sp, #8
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e082      	b.n	800b780 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2241      	movs	r2, #65	@ 0x41
 800b67e:	5c9b      	ldrb	r3, [r3, r2]
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b00      	cmp	r3, #0
 800b684:	d107      	bne.n	800b696 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2240      	movs	r2, #64	@ 0x40
 800b68a:	2100      	movs	r1, #0
 800b68c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	0018      	movs	r0, r3
 800b692:	f7fa fb9f 	bl	8005dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2241      	movs	r2, #65	@ 0x41
 800b69a:	2124      	movs	r1, #36	@ 0x24
 800b69c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2101      	movs	r1, #1
 800b6aa:	438a      	bics	r2, r1
 800b6ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4934      	ldr	r1, [pc, #208]	@ (800b788 <HAL_I2C_Init+0x120>)
 800b6b8:	400a      	ands	r2, r1
 800b6ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4931      	ldr	r1, [pc, #196]	@ (800b78c <HAL_I2C_Init+0x124>)
 800b6c8:	400a      	ands	r2, r1
 800b6ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d108      	bne.n	800b6e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689a      	ldr	r2, [r3, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2180      	movs	r1, #128	@ 0x80
 800b6de:	0209      	lsls	r1, r1, #8
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	609a      	str	r2, [r3, #8]
 800b6e4:	e007      	b.n	800b6f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	689a      	ldr	r2, [r3, #8]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2184      	movs	r1, #132	@ 0x84
 800b6f0:	0209      	lsls	r1, r1, #8
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d104      	bne.n	800b708 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2280      	movs	r2, #128	@ 0x80
 800b704:	0112      	lsls	r2, r2, #4
 800b706:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	491f      	ldr	r1, [pc, #124]	@ (800b790 <HAL_I2C_Init+0x128>)
 800b714:	430a      	orrs	r2, r1
 800b716:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	491a      	ldr	r1, [pc, #104]	@ (800b78c <HAL_I2C_Init+0x124>)
 800b724:	400a      	ands	r2, r1
 800b726:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	691a      	ldr	r2, [r3, #16]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	431a      	orrs	r2, r3
 800b732:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	430a      	orrs	r2, r1
 800b740:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	69d9      	ldr	r1, [r3, #28]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a1a      	ldr	r2, [r3, #32]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	430a      	orrs	r2, r1
 800b750:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2101      	movs	r1, #1
 800b75e:	430a      	orrs	r2, r1
 800b760:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2241      	movs	r2, #65	@ 0x41
 800b76c:	2120      	movs	r1, #32
 800b76e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2242      	movs	r2, #66	@ 0x42
 800b77a:	2100      	movs	r1, #0
 800b77c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	0018      	movs	r0, r3
 800b782:	46bd      	mov	sp, r7
 800b784:	b002      	add	sp, #8
 800b786:	bd80      	pop	{r7, pc}
 800b788:	f0ffffff 	.word	0xf0ffffff
 800b78c:	ffff7fff 	.word	0xffff7fff
 800b790:	02008000 	.word	0x02008000

0800b794 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b794:	b5b0      	push	{r4, r5, r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af02      	add	r7, sp, #8
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	0008      	movs	r0, r1
 800b79e:	607a      	str	r2, [r7, #4]
 800b7a0:	0019      	movs	r1, r3
 800b7a2:	230a      	movs	r3, #10
 800b7a4:	18fb      	adds	r3, r7, r3
 800b7a6:	1c02      	adds	r2, r0, #0
 800b7a8:	801a      	strh	r2, [r3, #0]
 800b7aa:	2308      	movs	r3, #8
 800b7ac:	18fb      	adds	r3, r7, r3
 800b7ae:	1c0a      	adds	r2, r1, #0
 800b7b0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2241      	movs	r2, #65	@ 0x41
 800b7b6:	5c9b      	ldrb	r3, [r3, r2]
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	d000      	beq.n	800b7c0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800b7be:	e0dd      	b.n	800b97c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	2380      	movs	r3, #128	@ 0x80
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	401a      	ands	r2, r3
 800b7cc:	2380      	movs	r3, #128	@ 0x80
 800b7ce:	021b      	lsls	r3, r3, #8
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d101      	bne.n	800b7d8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	e0d2      	b.n	800b97e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2240      	movs	r2, #64	@ 0x40
 800b7dc:	5c9b      	ldrb	r3, [r3, r2]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <HAL_I2C_Master_Transmit_DMA+0x52>
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e0cb      	b.n	800b97e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2240      	movs	r2, #64	@ 0x40
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2241      	movs	r2, #65	@ 0x41
 800b7f2:	2121      	movs	r1, #33	@ 0x21
 800b7f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2242      	movs	r2, #66	@ 0x42
 800b7fa:	2110      	movs	r1, #16
 800b7fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2208      	movs	r2, #8
 800b80e:	18ba      	adds	r2, r7, r2
 800b810:	8812      	ldrh	r2, [r2, #0]
 800b812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	4a5c      	ldr	r2, [pc, #368]	@ (800b988 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800b818:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	4a5b      	ldr	r2, [pc, #364]	@ (800b98c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800b81e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b824:	b29b      	uxth	r3, r3
 800b826:	2bff      	cmp	r3, #255	@ 0xff
 800b828:	d906      	bls.n	800b838 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	22ff      	movs	r2, #255	@ 0xff
 800b82e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b830:	2380      	movs	r3, #128	@ 0x80
 800b832:	045b      	lsls	r3, r3, #17
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e007      	b.n	800b848 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b842:	2380      	movs	r3, #128	@ 0x80
 800b844:	049b      	lsls	r3, r3, #18
 800b846:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d100      	bne.n	800b852 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800b850:	e078      	b.n	800b944 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b856:	2b00      	cmp	r3, #0
 800b858:	d023      	beq.n	800b8a2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b85e:	4a4c      	ldr	r2, [pc, #304]	@ (800b990 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800b860:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b866:	4a4b      	ldr	r2, [pc, #300]	@ (800b994 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800b868:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b86e:	2200      	movs	r2, #0
 800b870:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b876:	2200      	movs	r2, #0
 800b878:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3328      	adds	r3, #40	@ 0x28
 800b886:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b88c:	2513      	movs	r5, #19
 800b88e:	197c      	adds	r4, r7, r5
 800b890:	f7ff f8ac 	bl	800a9ec <HAL_DMA_Start_IT>
 800b894:	0003      	movs	r3, r0
 800b896:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b898:	197b      	adds	r3, r7, r5
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d13d      	bne.n	800b91c <HAL_I2C_Master_Transmit_DMA+0x188>
 800b8a0:	e013      	b.n	800b8ca <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2241      	movs	r2, #65	@ 0x41
 800b8a6:	2120      	movs	r1, #32
 800b8a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2242      	movs	r2, #66	@ 0x42
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8b6:	2280      	movs	r2, #128	@ 0x80
 800b8b8:	431a      	orrs	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2240      	movs	r2, #64	@ 0x40
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e059      	b.n	800b97e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	697c      	ldr	r4, [r7, #20]
 800b8d2:	230a      	movs	r3, #10
 800b8d4:	18fb      	adds	r3, r7, r3
 800b8d6:	8819      	ldrh	r1, [r3, #0]
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	4b2f      	ldr	r3, [pc, #188]	@ (800b998 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	0023      	movs	r3, r4
 800b8e0:	f001 fd0e 	bl	800d300 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2240      	movs	r2, #64	@ 0x40
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2110      	movs	r1, #16
 800b902:	0018      	movs	r0, r3
 800b904:	f001 fd36 	bl	800d374 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2180      	movs	r1, #128	@ 0x80
 800b914:	01c9      	lsls	r1, r1, #7
 800b916:	430a      	orrs	r2, r1
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	e02d      	b.n	800b978 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2241      	movs	r2, #65	@ 0x41
 800b920:	2120      	movs	r1, #32
 800b922:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2242      	movs	r2, #66	@ 0x42
 800b928:	2100      	movs	r1, #0
 800b92a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b930:	2210      	movs	r2, #16
 800b932:	431a      	orrs	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2240      	movs	r2, #64	@ 0x40
 800b93c:	2100      	movs	r1, #0
 800b93e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e01c      	b.n	800b97e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4a15      	ldr	r2, [pc, #84]	@ (800b99c <HAL_I2C_Master_Transmit_DMA+0x208>)
 800b948:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	2380      	movs	r3, #128	@ 0x80
 800b952:	049c      	lsls	r4, r3, #18
 800b954:	230a      	movs	r3, #10
 800b956:	18fb      	adds	r3, r7, r3
 800b958:	8819      	ldrh	r1, [r3, #0]
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	4b0e      	ldr	r3, [pc, #56]	@ (800b998 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	0023      	movs	r3, r4
 800b962:	f001 fccd 	bl	800d300 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2240      	movs	r2, #64	@ 0x40
 800b96a:	2100      	movs	r1, #0
 800b96c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2101      	movs	r1, #1
 800b972:	0018      	movs	r0, r3
 800b974:	f001 fcfe 	bl	800d374 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	e000      	b.n	800b97e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b97c:	2302      	movs	r3, #2
  }
}
 800b97e:	0018      	movs	r0, r3
 800b980:	46bd      	mov	sp, r7
 800b982:	b006      	add	sp, #24
 800b984:	bdb0      	pop	{r4, r5, r7, pc}
 800b986:	46c0      	nop			@ (mov r8, r8)
 800b988:	ffff0000 	.word	0xffff0000
 800b98c:	0800c199 	.word	0x0800c199
 800b990:	0800d151 	.word	0x0800d151
 800b994:	0800d291 	.word	0x0800d291
 800b998:	80002000 	.word	0x80002000
 800b99c:	0800bd45 	.word	0x0800bd45

0800b9a0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b9a0:	b5b0      	push	{r4, r5, r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	0008      	movs	r0, r1
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	0019      	movs	r1, r3
 800b9ae:	230a      	movs	r3, #10
 800b9b0:	18fb      	adds	r3, r7, r3
 800b9b2:	1c02      	adds	r2, r0, #0
 800b9b4:	801a      	strh	r2, [r3, #0]
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	18fb      	adds	r3, r7, r3
 800b9ba:	1c0a      	adds	r2, r1, #0
 800b9bc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2241      	movs	r2, #65	@ 0x41
 800b9c2:	5c9b      	ldrb	r3, [r3, r2]
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d000      	beq.n	800b9cc <HAL_I2C_Master_Receive_DMA+0x2c>
 800b9ca:	e0dd      	b.n	800bb88 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	699a      	ldr	r2, [r3, #24]
 800b9d2:	2380      	movs	r3, #128	@ 0x80
 800b9d4:	021b      	lsls	r3, r3, #8
 800b9d6:	401a      	ands	r2, r3
 800b9d8:	2380      	movs	r3, #128	@ 0x80
 800b9da:	021b      	lsls	r3, r3, #8
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d101      	bne.n	800b9e4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800b9e0:	2302      	movs	r3, #2
 800b9e2:	e0d2      	b.n	800bb8a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2240      	movs	r2, #64	@ 0x40
 800b9e8:	5c9b      	ldrb	r3, [r3, r2]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d101      	bne.n	800b9f2 <HAL_I2C_Master_Receive_DMA+0x52>
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	e0cb      	b.n	800bb8a <HAL_I2C_Master_Receive_DMA+0x1ea>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2240      	movs	r2, #64	@ 0x40
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2241      	movs	r2, #65	@ 0x41
 800b9fe:	2122      	movs	r1, #34	@ 0x22
 800ba00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2242      	movs	r2, #66	@ 0x42
 800ba06:	2110      	movs	r1, #16
 800ba08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2208      	movs	r2, #8
 800ba1a:	18ba      	adds	r2, r7, r2
 800ba1c:	8812      	ldrh	r2, [r2, #0]
 800ba1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	4a5c      	ldr	r2, [pc, #368]	@ (800bb94 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800ba24:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	4a5b      	ldr	r2, [pc, #364]	@ (800bb98 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800ba2a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	2bff      	cmp	r3, #255	@ 0xff
 800ba34:	d906      	bls.n	800ba44 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	22ff      	movs	r2, #255	@ 0xff
 800ba3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800ba3c:	2380      	movs	r3, #128	@ 0x80
 800ba3e:	045b      	lsls	r3, r3, #17
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	e007      	b.n	800ba54 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ba4e:	2380      	movs	r3, #128	@ 0x80
 800ba50:	049b      	lsls	r3, r3, #18
 800ba52:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d100      	bne.n	800ba5e <HAL_I2C_Master_Receive_DMA+0xbe>
 800ba5c:	e078      	b.n	800bb50 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d023      	beq.n	800baae <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba6a:	4a4c      	ldr	r2, [pc, #304]	@ (800bb9c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800ba6c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba72:	4a4b      	ldr	r2, [pc, #300]	@ (800bba0 <HAL_I2C_Master_Receive_DMA+0x200>)
 800ba74:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba82:	2200      	movs	r2, #0
 800ba84:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3324      	adds	r3, #36	@ 0x24
 800ba90:	0019      	movs	r1, r3
 800ba92:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ba98:	2513      	movs	r5, #19
 800ba9a:	197c      	adds	r4, r7, r5
 800ba9c:	f7fe ffa6 	bl	800a9ec <HAL_DMA_Start_IT>
 800baa0:	0003      	movs	r3, r0
 800baa2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800baa4:	197b      	adds	r3, r7, r5
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d13d      	bne.n	800bb28 <HAL_I2C_Master_Receive_DMA+0x188>
 800baac:	e013      	b.n	800bad6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2241      	movs	r2, #65	@ 0x41
 800bab2:	2120      	movs	r1, #32
 800bab4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2242      	movs	r2, #66	@ 0x42
 800baba:	2100      	movs	r1, #0
 800babc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac2:	2280      	movs	r2, #128	@ 0x80
 800bac4:	431a      	orrs	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2240      	movs	r2, #64	@ 0x40
 800bace:	2100      	movs	r1, #0
 800bad0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e059      	b.n	800bb8a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bada:	b2da      	uxtb	r2, r3
 800badc:	697c      	ldr	r4, [r7, #20]
 800bade:	230a      	movs	r3, #10
 800bae0:	18fb      	adds	r3, r7, r3
 800bae2:	8819      	ldrh	r1, [r3, #0]
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	4b2f      	ldr	r3, [pc, #188]	@ (800bba4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	0023      	movs	r3, r4
 800baec:	f001 fc08 	bl	800d300 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2240      	movs	r2, #64	@ 0x40
 800bb06:	2100      	movs	r1, #0
 800bb08:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2110      	movs	r1, #16
 800bb0e:	0018      	movs	r0, r3
 800bb10:	f001 fc30 	bl	800d374 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2180      	movs	r1, #128	@ 0x80
 800bb20:	0209      	lsls	r1, r1, #8
 800bb22:	430a      	orrs	r2, r1
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	e02d      	b.n	800bb84 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2241      	movs	r2, #65	@ 0x41
 800bb2c:	2120      	movs	r1, #32
 800bb2e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2242      	movs	r2, #66	@ 0x42
 800bb34:	2100      	movs	r1, #0
 800bb36:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb3c:	2210      	movs	r2, #16
 800bb3e:	431a      	orrs	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2240      	movs	r2, #64	@ 0x40
 800bb48:	2100      	movs	r1, #0
 800bb4a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e01c      	b.n	800bb8a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a15      	ldr	r2, [pc, #84]	@ (800bba8 <HAL_I2C_Master_Receive_DMA+0x208>)
 800bb54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	2380      	movs	r3, #128	@ 0x80
 800bb5e:	049c      	lsls	r4, r3, #18
 800bb60:	230a      	movs	r3, #10
 800bb62:	18fb      	adds	r3, r7, r3
 800bb64:	8819      	ldrh	r1, [r3, #0]
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	4b0e      	ldr	r3, [pc, #56]	@ (800bba4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	0023      	movs	r3, r4
 800bb6e:	f001 fbc7 	bl	800d300 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2240      	movs	r2, #64	@ 0x40
 800bb76:	2100      	movs	r1, #0
 800bb78:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f001 fbf8 	bl	800d374 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	e000      	b.n	800bb8a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bb88:	2302      	movs	r3, #2
  }
}
 800bb8a:	0018      	movs	r0, r3
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	b006      	add	sp, #24
 800bb90:	bdb0      	pop	{r4, r5, r7, pc}
 800bb92:	46c0      	nop			@ (mov r8, r8)
 800bb94:	ffff0000 	.word	0xffff0000
 800bb98:	0800c199 	.word	0x0800c199
 800bb9c:	0800d1f1 	.word	0x0800d1f1
 800bba0:	0800d291 	.word	0x0800d291
 800bba4:	80002400 	.word	0x80002400
 800bba8:	0800bd45 	.word	0x0800bd45

0800bbac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d005      	beq.n	800bbd8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	68f9      	ldr	r1, [r7, #12]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	4798      	blx	r3
  }
}
 800bbd8:	46c0      	nop			@ (mov r8, r8)
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	b004      	add	sp, #16
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	699b      	ldr	r3, [r3, #24]
 800bbee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	2380      	movs	r3, #128	@ 0x80
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	4013      	ands	r3, r2
 800bc00:	d00e      	beq.n	800bc20 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	2280      	movs	r2, #128	@ 0x80
 800bc06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bc08:	d00a      	beq.n	800bc20 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc0e:	2201      	movs	r2, #1
 800bc10:	431a      	orrs	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2280      	movs	r2, #128	@ 0x80
 800bc1c:	0052      	lsls	r2, r2, #1
 800bc1e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	2380      	movs	r3, #128	@ 0x80
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	4013      	ands	r3, r2
 800bc28:	d00e      	beq.n	800bc48 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2280      	movs	r2, #128	@ 0x80
 800bc2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bc30:	d00a      	beq.n	800bc48 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc36:	2208      	movs	r2, #8
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2280      	movs	r2, #128	@ 0x80
 800bc44:	00d2      	lsls	r2, r2, #3
 800bc46:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	2380      	movs	r3, #128	@ 0x80
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4013      	ands	r3, r2
 800bc50:	d00e      	beq.n	800bc70 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2280      	movs	r2, #128	@ 0x80
 800bc56:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bc58:	d00a      	beq.n	800bc70 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc5e:	2202      	movs	r2, #2
 800bc60:	431a      	orrs	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2280      	movs	r2, #128	@ 0x80
 800bc6c:	0092      	lsls	r2, r2, #2
 800bc6e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc74:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	220b      	movs	r2, #11
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	d005      	beq.n	800bc8a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	0011      	movs	r1, r2
 800bc84:	0018      	movs	r0, r3
 800bc86:	f001 f915 	bl	800ceb4 <I2C_ITError>
  }
}
 800bc8a:	46c0      	nop			@ (mov r8, r8)
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	b006      	add	sp, #24
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b082      	sub	sp, #8
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bc9a:	46c0      	nop			@ (mov r8, r8)
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	b002      	add	sp, #8
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b082      	sub	sp, #8
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bcaa:	46c0      	nop			@ (mov r8, r8)
 800bcac:	46bd      	mov	sp, r7
 800bcae:	b002      	add	sp, #8
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bcba:	46c0      	nop			@ (mov r8, r8)
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	b002      	add	sp, #8
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b082      	sub	sp, #8
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bcca:	46c0      	nop			@ (mov r8, r8)
 800bccc:	46bd      	mov	sp, r7
 800bcce:	b002      	add	sp, #8
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	0008      	movs	r0, r1
 800bcdc:	0011      	movs	r1, r2
 800bcde:	1cfb      	adds	r3, r7, #3
 800bce0:	1c02      	adds	r2, r0, #0
 800bce2:	701a      	strb	r2, [r3, #0]
 800bce4:	003b      	movs	r3, r7
 800bce6:	1c0a      	adds	r2, r1, #0
 800bce8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bcea:	46c0      	nop			@ (mov r8, r8)
 800bcec:	46bd      	mov	sp, r7
 800bcee:	b002      	add	sp, #8
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bcfa:	46c0      	nop			@ (mov r8, r8)
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	b002      	add	sp, #8
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bd0a:	46c0      	nop			@ (mov r8, r8)
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	b002      	add	sp, #8
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bd1a:	46c0      	nop			@ (mov r8, r8)
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	b002      	add	sp, #8
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bd2a:	46c0      	nop			@ (mov r8, r8)
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	b002      	add	sp, #8
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b082      	sub	sp, #8
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bd3a:	46c0      	nop			@ (mov r8, r8)
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	b002      	add	sp, #8
 800bd40:	bd80      	pop	{r7, pc}
	...

0800bd44 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bd44:	b590      	push	{r4, r7, lr}
 800bd46:	b089      	sub	sp, #36	@ 0x24
 800bd48:	af02      	add	r7, sp, #8
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2240      	movs	r2, #64	@ 0x40
 800bd58:	5c9b      	ldrb	r3, [r3, r2]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d101      	bne.n	800bd62 <I2C_Master_ISR_IT+0x1e>
 800bd5e:	2302      	movs	r3, #2
 800bd60:	e113      	b.n	800bf8a <I2C_Master_ISR_IT+0x246>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2240      	movs	r2, #64	@ 0x40
 800bd66:	2101      	movs	r1, #1
 800bd68:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	2210      	movs	r2, #16
 800bd6e:	4013      	ands	r3, r2
 800bd70:	d012      	beq.n	800bd98 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2210      	movs	r2, #16
 800bd76:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd78:	d00e      	beq.n	800bd98 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2210      	movs	r2, #16
 800bd80:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd86:	2204      	movs	r2, #4
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	0018      	movs	r0, r3
 800bd92:	f001 f9ba 	bl	800d10a <I2C_Flush_TXDR>
 800bd96:	e0e5      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2204      	movs	r2, #4
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	d021      	beq.n	800bde4 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2204      	movs	r2, #4
 800bda4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bda6:	d01d      	beq.n	800bde4 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2204      	movs	r2, #4
 800bdac:	4393      	bics	r3, r2
 800bdae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc2:	1c5a      	adds	r2, r3, #1
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bde2:	e0bf      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2202      	movs	r2, #2
 800bde8:	4013      	ands	r3, r2
 800bdea:	d01c      	beq.n	800be26 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bdf2:	d018      	beq.n	800be26 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf8:	781a      	ldrb	r2, [r3, #0]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be0e:	3b01      	subs	r3, #1
 800be10:	b29a      	uxth	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29a      	uxth	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800be24:	e09e      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	2280      	movs	r2, #128	@ 0x80
 800be2a:	4013      	ands	r3, r2
 800be2c:	d100      	bne.n	800be30 <I2C_Master_ISR_IT+0xec>
 800be2e:	e069      	b.n	800bf04 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2240      	movs	r2, #64	@ 0x40
 800be34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800be36:	d065      	beq.n	800bf04 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d04a      	beq.n	800bed8 <I2C_Master_ISR_IT+0x194>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be46:	2b00      	cmp	r3, #0
 800be48:	d146      	bne.n	800bed8 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	b29a      	uxth	r2, r3
 800be52:	2112      	movs	r1, #18
 800be54:	187b      	adds	r3, r7, r1
 800be56:	0592      	lsls	r2, r2, #22
 800be58:	0d92      	lsrs	r2, r2, #22
 800be5a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be60:	b29b      	uxth	r3, r3
 800be62:	2bff      	cmp	r3, #255	@ 0xff
 800be64:	d910      	bls.n	800be88 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	22ff      	movs	r2, #255	@ 0xff
 800be6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be70:	b2da      	uxtb	r2, r3
 800be72:	2380      	movs	r3, #128	@ 0x80
 800be74:	045c      	lsls	r4, r3, #17
 800be76:	187b      	adds	r3, r7, r1
 800be78:	8819      	ldrh	r1, [r3, #0]
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	2300      	movs	r3, #0
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	0023      	movs	r3, r4
 800be82:	f001 fa3d 	bl	800d300 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be86:	e03c      	b.n	800bf02 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be96:	4a3f      	ldr	r2, [pc, #252]	@ (800bf94 <I2C_Master_ISR_IT+0x250>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d00e      	beq.n	800beba <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bea0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bea6:	2312      	movs	r3, #18
 800bea8:	18fb      	adds	r3, r7, r3
 800beaa:	8819      	ldrh	r1, [r3, #0]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	2300      	movs	r3, #0
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	0023      	movs	r3, r4
 800beb4:	f001 fa24 	bl	800d300 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800beb8:	e023      	b.n	800bf02 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	2380      	movs	r3, #128	@ 0x80
 800bec2:	049c      	lsls	r4, r3, #18
 800bec4:	2312      	movs	r3, #18
 800bec6:	18fb      	adds	r3, r7, r3
 800bec8:	8819      	ldrh	r1, [r3, #0]
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	2300      	movs	r3, #0
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	0023      	movs	r3, r4
 800bed2:	f001 fa15 	bl	800d300 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bed6:	e014      	b.n	800bf02 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	2380      	movs	r3, #128	@ 0x80
 800bee0:	049b      	lsls	r3, r3, #18
 800bee2:	401a      	ands	r2, r3
 800bee4:	2380      	movs	r3, #128	@ 0x80
 800bee6:	049b      	lsls	r3, r3, #18
 800bee8:	429a      	cmp	r2, r3
 800beea:	d004      	beq.n	800bef6 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	0018      	movs	r0, r3
 800bef0:	f000 fcf4 	bl	800c8dc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bef4:	e036      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2140      	movs	r1, #64	@ 0x40
 800befa:	0018      	movs	r0, r3
 800befc:	f000 ffda 	bl	800ceb4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf00:	e030      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
 800bf02:	e02f      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2240      	movs	r2, #64	@ 0x40
 800bf08:	4013      	ands	r3, r2
 800bf0a:	d02b      	beq.n	800bf64 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2240      	movs	r2, #64	@ 0x40
 800bf10:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bf12:	d027      	beq.n	800bf64 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d11d      	bne.n	800bf5a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	2380      	movs	r3, #128	@ 0x80
 800bf26:	049b      	lsls	r3, r3, #18
 800bf28:	401a      	ands	r2, r3
 800bf2a:	2380      	movs	r3, #128	@ 0x80
 800bf2c:	049b      	lsls	r3, r3, #18
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d018      	beq.n	800bf64 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf36:	4a17      	ldr	r2, [pc, #92]	@ (800bf94 <I2C_Master_ISR_IT+0x250>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d109      	bne.n	800bf50 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2180      	movs	r1, #128	@ 0x80
 800bf48:	01c9      	lsls	r1, r1, #7
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	605a      	str	r2, [r3, #4]
 800bf4e:	e009      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	0018      	movs	r0, r3
 800bf54:	f000 fcc2 	bl	800c8dc <I2C_ITMasterSeqCplt>
 800bf58:	e004      	b.n	800bf64 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2140      	movs	r1, #64	@ 0x40
 800bf5e:	0018      	movs	r0, r3
 800bf60:	f000 ffa8 	bl	800ceb4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	2220      	movs	r2, #32
 800bf68:	4013      	ands	r3, r2
 800bf6a:	d009      	beq.n	800bf80 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2220      	movs	r2, #32
 800bf70:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf72:	d005      	beq.n	800bf80 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	0011      	movs	r1, r2
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	f000 fd54 	bl	800ca28 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2240      	movs	r2, #64	@ 0x40
 800bf84:	2100      	movs	r1, #0
 800bf86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	0018      	movs	r0, r3
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	b007      	add	sp, #28
 800bf90:	bd90      	pop	{r4, r7, pc}
 800bf92:	46c0      	nop			@ (mov r8, r8)
 800bf94:	ffff0000 	.word	0xffff0000

0800bf98 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2240      	movs	r2, #64	@ 0x40
 800bfb2:	5c9b      	ldrb	r3, [r3, r2]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d101      	bne.n	800bfbc <I2C_Slave_ISR_IT+0x24>
 800bfb8:	2302      	movs	r3, #2
 800bfba:	e0e6      	b.n	800c18a <I2C_Slave_ISR_IT+0x1f2>
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2240      	movs	r2, #64	@ 0x40
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	4013      	ands	r3, r2
 800bfca:	d009      	beq.n	800bfe0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfd2:	d005      	beq.n	800bfe0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	0011      	movs	r1, r2
 800bfda:	0018      	movs	r0, r3
 800bfdc:	f000 fdf2 	bl	800cbc4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	2210      	movs	r2, #16
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	d052      	beq.n	800c08e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2210      	movs	r2, #16
 800bfec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfee:	d04e      	beq.n	800c08e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d12d      	bne.n	800c056 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2241      	movs	r2, #65	@ 0x41
 800bffe:	5c9b      	ldrb	r3, [r3, r2]
 800c000:	b2db      	uxtb	r3, r3
 800c002:	2b28      	cmp	r3, #40	@ 0x28
 800c004:	d10b      	bne.n	800c01e <I2C_Slave_ISR_IT+0x86>
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	2380      	movs	r3, #128	@ 0x80
 800c00a:	049b      	lsls	r3, r3, #18
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d106      	bne.n	800c01e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	0011      	movs	r1, r2
 800c016:	0018      	movs	r0, r3
 800c018:	f000 fef4 	bl	800ce04 <I2C_ITListenCplt>
 800c01c:	e036      	b.n	800c08c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2241      	movs	r2, #65	@ 0x41
 800c022:	5c9b      	ldrb	r3, [r3, r2]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b29      	cmp	r3, #41	@ 0x29
 800c028:	d110      	bne.n	800c04c <I2C_Slave_ISR_IT+0xb4>
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	4a59      	ldr	r2, [pc, #356]	@ (800c194 <I2C_Slave_ISR_IT+0x1fc>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d00c      	beq.n	800c04c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2210      	movs	r2, #16
 800c038:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	0018      	movs	r0, r3
 800c03e:	f001 f864 	bl	800d10a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	0018      	movs	r0, r3
 800c046:	f000 fc8b 	bl	800c960 <I2C_ITSlaveSeqCplt>
 800c04a:	e01f      	b.n	800c08c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2210      	movs	r2, #16
 800c052:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c054:	e091      	b.n	800c17a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2210      	movs	r2, #16
 800c05c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c062:	2204      	movs	r2, #4
 800c064:	431a      	orrs	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d005      	beq.n	800c07c <I2C_Slave_ISR_IT+0xe4>
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	2380      	movs	r3, #128	@ 0x80
 800c074:	045b      	lsls	r3, r3, #17
 800c076:	429a      	cmp	r2, r3
 800c078:	d000      	beq.n	800c07c <I2C_Slave_ISR_IT+0xe4>
 800c07a:	e07e      	b.n	800c17a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	0011      	movs	r1, r2
 800c084:	0018      	movs	r0, r3
 800c086:	f000 ff15 	bl	800ceb4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c08a:	e076      	b.n	800c17a <I2C_Slave_ISR_IT+0x1e2>
 800c08c:	e075      	b.n	800c17a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2204      	movs	r2, #4
 800c092:	4013      	ands	r3, r2
 800c094:	d02f      	beq.n	800c0f6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2204      	movs	r2, #4
 800c09a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c09c:	d02b      	beq.n	800c0f6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d018      	beq.n	800c0da <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b2:	b2d2      	uxtb	r2, r2
 800c0b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ba:	1c5a      	adds	r2, r3, #1
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d14c      	bne.n	800c17e <I2C_Slave_ISR_IT+0x1e6>
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	4a2b      	ldr	r2, [pc, #172]	@ (800c194 <I2C_Slave_ISR_IT+0x1fc>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d048      	beq.n	800c17e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	0018      	movs	r0, r3
 800c0f0:	f000 fc36 	bl	800c960 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c0f4:	e043      	b.n	800c17e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2208      	movs	r2, #8
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	d00a      	beq.n	800c114 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2208      	movs	r2, #8
 800c102:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c104:	d006      	beq.n	800c114 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	0011      	movs	r1, r2
 800c10c:	0018      	movs	r0, r3
 800c10e:	f000 fb41 	bl	800c794 <I2C_ITAddrCplt>
 800c112:	e035      	b.n	800c180 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2202      	movs	r2, #2
 800c118:	4013      	ands	r3, r2
 800c11a:	d031      	beq.n	800c180 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2202      	movs	r2, #2
 800c120:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c122:	d02d      	beq.n	800c180 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c128:	b29b      	uxth	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d018      	beq.n	800c160 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c132:	781a      	ldrb	r2, [r3, #0]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c156:	3b01      	subs	r3, #1
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c15e:	e00f      	b.n	800c180 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c160:	697a      	ldr	r2, [r7, #20]
 800c162:	2380      	movs	r3, #128	@ 0x80
 800c164:	045b      	lsls	r3, r3, #17
 800c166:	429a      	cmp	r2, r3
 800c168:	d002      	beq.n	800c170 <I2C_Slave_ISR_IT+0x1d8>
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d107      	bne.n	800c180 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	0018      	movs	r0, r3
 800c174:	f000 fbf4 	bl	800c960 <I2C_ITSlaveSeqCplt>
 800c178:	e002      	b.n	800c180 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800c17a:	46c0      	nop			@ (mov r8, r8)
 800c17c:	e000      	b.n	800c180 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800c17e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2240      	movs	r2, #64	@ 0x40
 800c184:	2100      	movs	r1, #0
 800c186:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	0018      	movs	r0, r3
 800c18c:	46bd      	mov	sp, r7
 800c18e:	b006      	add	sp, #24
 800c190:	bd80      	pop	{r7, pc}
 800c192:	46c0      	nop			@ (mov r8, r8)
 800c194:	ffff0000 	.word	0xffff0000

0800c198 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c198:	b590      	push	{r4, r7, lr}
 800c19a:	b089      	sub	sp, #36	@ 0x24
 800c19c:	af02      	add	r7, sp, #8
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2240      	movs	r2, #64	@ 0x40
 800c1a8:	5c9b      	ldrb	r3, [r3, r2]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d101      	bne.n	800c1b2 <I2C_Master_ISR_DMA+0x1a>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e0e7      	b.n	800c382 <I2C_Master_ISR_DMA+0x1ea>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2240      	movs	r2, #64	@ 0x40
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2210      	movs	r2, #16
 800c1be:	4013      	ands	r3, r2
 800c1c0:	d017      	beq.n	800c1f2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2210      	movs	r2, #16
 800c1c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c1c8:	d013      	beq.n	800c1f2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2210      	movs	r2, #16
 800c1d0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1d6:	2204      	movs	r2, #4
 800c1d8:	431a      	orrs	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2120      	movs	r1, #32
 800c1e2:	0018      	movs	r0, r3
 800c1e4:	f001 f8c6 	bl	800d374 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	f000 ff8d 	bl	800d10a <I2C_Flush_TXDR>
 800c1f0:	e0c2      	b.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2280      	movs	r2, #128	@ 0x80
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	d100      	bne.n	800c1fc <I2C_Master_ISR_DMA+0x64>
 800c1fa:	e07c      	b.n	800c2f6 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2240      	movs	r2, #64	@ 0x40
 800c200:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c202:	d100      	bne.n	800c206 <I2C_Master_ISR_DMA+0x6e>
 800c204:	e077      	b.n	800c2f6 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2140      	movs	r1, #64	@ 0x40
 800c212:	438a      	bics	r2, r1
 800c214:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d055      	beq.n	800c2cc <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	b29a      	uxth	r2, r3
 800c228:	2312      	movs	r3, #18
 800c22a:	18fb      	adds	r3, r7, r3
 800c22c:	0592      	lsls	r2, r2, #22
 800c22e:	0d92      	lsrs	r2, r2, #22
 800c230:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c236:	b29b      	uxth	r3, r3
 800c238:	2bff      	cmp	r3, #255	@ 0xff
 800c23a:	d906      	bls.n	800c24a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	22ff      	movs	r2, #255	@ 0xff
 800c240:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c242:	2380      	movs	r3, #128	@ 0x80
 800c244:	045b      	lsls	r3, r3, #17
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e010      	b.n	800c26c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c24e:	b29a      	uxth	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	4a4c      	ldr	r2, [pc, #304]	@ (800c38c <I2C_Master_ISR_DMA+0x1f4>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d003      	beq.n	800c266 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c262:	617b      	str	r3, [r7, #20]
 800c264:	e002      	b.n	800c26c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c266:	2380      	movs	r3, #128	@ 0x80
 800c268:	049b      	lsls	r3, r3, #18
 800c26a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c270:	b2da      	uxtb	r2, r3
 800c272:	697c      	ldr	r4, [r7, #20]
 800c274:	2312      	movs	r3, #18
 800c276:	18fb      	adds	r3, r7, r3
 800c278:	8819      	ldrh	r1, [r3, #0]
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	2300      	movs	r3, #0
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	0023      	movs	r3, r4
 800c282:	f001 f83d 	bl	800d300 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	b29a      	uxth	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2241      	movs	r2, #65	@ 0x41
 800c29c:	5c9b      	ldrb	r3, [r3, r2]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b22      	cmp	r3, #34	@ 0x22
 800c2a2:	d109      	bne.n	800c2b8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2180      	movs	r1, #128	@ 0x80
 800c2b0:	0209      	lsls	r1, r1, #8
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c2b6:	e05f      	b.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2180      	movs	r1, #128	@ 0x80
 800c2c4:	01c9      	lsls	r1, r1, #7
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c2ca:	e055      	b.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	2380      	movs	r3, #128	@ 0x80
 800c2d4:	049b      	lsls	r3, r3, #18
 800c2d6:	401a      	ands	r2, r3
 800c2d8:	2380      	movs	r3, #128	@ 0x80
 800c2da:	049b      	lsls	r3, r3, #18
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d004      	beq.n	800c2ea <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	f000 fafa 	bl	800c8dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c2e8:	e046      	b.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2140      	movs	r1, #64	@ 0x40
 800c2ee:	0018      	movs	r0, r3
 800c2f0:	f000 fde0 	bl	800ceb4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c2f4:	e040      	b.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2240      	movs	r2, #64	@ 0x40
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	d02c      	beq.n	800c358 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2240      	movs	r2, #64	@ 0x40
 800c302:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c304:	d028      	beq.n	800c358 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d11d      	bne.n	800c34c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	685a      	ldr	r2, [r3, #4]
 800c316:	2380      	movs	r3, #128	@ 0x80
 800c318:	049b      	lsls	r3, r3, #18
 800c31a:	401a      	ands	r2, r3
 800c31c:	2380      	movs	r3, #128	@ 0x80
 800c31e:	049b      	lsls	r3, r3, #18
 800c320:	429a      	cmp	r2, r3
 800c322:	d028      	beq.n	800c376 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c328:	4a18      	ldr	r2, [pc, #96]	@ (800c38c <I2C_Master_ISR_DMA+0x1f4>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d109      	bne.n	800c342 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685a      	ldr	r2, [r3, #4]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2180      	movs	r1, #128	@ 0x80
 800c33a:	01c9      	lsls	r1, r1, #7
 800c33c:	430a      	orrs	r2, r1
 800c33e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c340:	e019      	b.n	800c376 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	0018      	movs	r0, r3
 800c346:	f000 fac9 	bl	800c8dc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c34a:	e014      	b.n	800c376 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2140      	movs	r1, #64	@ 0x40
 800c350:	0018      	movs	r0, r3
 800c352:	f000 fdaf 	bl	800ceb4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c356:	e00e      	b.n	800c376 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2220      	movs	r2, #32
 800c35c:	4013      	ands	r3, r2
 800c35e:	d00b      	beq.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2220      	movs	r2, #32
 800c364:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c366:	d007      	beq.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	0011      	movs	r1, r2
 800c36e:	0018      	movs	r0, r3
 800c370:	f000 fb5a 	bl	800ca28 <I2C_ITMasterCplt>
 800c374:	e000      	b.n	800c378 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c376:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2240      	movs	r2, #64	@ 0x40
 800c37c:	2100      	movs	r1, #0
 800c37e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	0018      	movs	r0, r3
 800c384:	46bd      	mov	sp, r7
 800c386:	b007      	add	sp, #28
 800c388:	bd90      	pop	{r4, r7, pc}
 800c38a:	46c0      	nop			@ (mov r8, r8)
 800c38c:	ffff0000 	.word	0xffff0000

0800c390 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c390:	b590      	push	{r4, r7, lr}
 800c392:	b089      	sub	sp, #36	@ 0x24
 800c394:	af02      	add	r7, sp, #8
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c39c:	4b88      	ldr	r3, [pc, #544]	@ (800c5c0 <I2C_Mem_ISR_DMA+0x230>)
 800c39e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2240      	movs	r2, #64	@ 0x40
 800c3a4:	5c9b      	ldrb	r3, [r3, r2]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d101      	bne.n	800c3ae <I2C_Mem_ISR_DMA+0x1e>
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e104      	b.n	800c5b8 <I2C_Mem_ISR_DMA+0x228>
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2240      	movs	r2, #64	@ 0x40
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2210      	movs	r2, #16
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	d017      	beq.n	800c3ee <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2210      	movs	r2, #16
 800c3c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3c4:	d013      	beq.n	800c3ee <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2210      	movs	r2, #16
 800c3cc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d2:	2204      	movs	r2, #4
 800c3d4:	431a      	orrs	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2120      	movs	r1, #32
 800c3de:	0018      	movs	r0, r3
 800c3e0:	f000 ffc8 	bl	800d374 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	f000 fe8f 	bl	800d10a <I2C_Flush_TXDR>
 800c3ec:	e0df      	b.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	d00d      	beq.n	800c412 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2202      	movs	r2, #2
 800c3fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c3fc:	d009      	beq.n	800c412 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c406:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	4252      	negs	r2, r2
 800c40e:	651a      	str	r2, [r3, #80]	@ 0x50
 800c410:	e0cd      	b.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	2280      	movs	r2, #128	@ 0x80
 800c416:	4013      	ands	r3, r2
 800c418:	d05e      	beq.n	800c4d8 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2240      	movs	r2, #64	@ 0x40
 800c41e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c420:	d05a      	beq.n	800c4d8 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2110      	movs	r1, #16
 800c426:	0018      	movs	r0, r3
 800c428:	f000 ffa4 	bl	800d374 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c430:	b29b      	uxth	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d04a      	beq.n	800c4cc <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	2bff      	cmp	r3, #255	@ 0xff
 800c43e:	d910      	bls.n	800c462 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	22ff      	movs	r2, #255	@ 0xff
 800c444:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c44a:	b299      	uxth	r1, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c450:	b2da      	uxtb	r2, r3
 800c452:	2380      	movs	r3, #128	@ 0x80
 800c454:	045b      	lsls	r3, r3, #17
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	2400      	movs	r4, #0
 800c45a:	9400      	str	r4, [sp, #0]
 800c45c:	f000 ff50 	bl	800d300 <I2C_TransferConfig>
 800c460:	e011      	b.n	800c486 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c466:	b29a      	uxth	r2, r3
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c470:	b299      	uxth	r1, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c476:	b2da      	uxtb	r2, r3
 800c478:	2380      	movs	r3, #128	@ 0x80
 800c47a:	049b      	lsls	r3, r3, #18
 800c47c:	68f8      	ldr	r0, [r7, #12]
 800c47e:	2400      	movs	r4, #0
 800c480:	9400      	str	r4, [sp, #0]
 800c482:	f000 ff3d 	bl	800d300 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	b29a      	uxth	r2, r3
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2241      	movs	r2, #65	@ 0x41
 800c49c:	5c9b      	ldrb	r3, [r3, r2]
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b22      	cmp	r3, #34	@ 0x22
 800c4a2:	d109      	bne.n	800c4b8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2180      	movs	r1, #128	@ 0x80
 800c4b0:	0209      	lsls	r1, r1, #8
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c4b6:	e07a      	b.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2180      	movs	r1, #128	@ 0x80
 800c4c4:	01c9      	lsls	r1, r1, #7
 800c4c6:	430a      	orrs	r2, r1
 800c4c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c4ca:	e070      	b.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2140      	movs	r1, #64	@ 0x40
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f000 fcef 	bl	800ceb4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c4d6:	e06a      	b.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	2240      	movs	r2, #64	@ 0x40
 800c4dc:	4013      	ands	r3, r2
 800c4de:	d058      	beq.n	800c592 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2240      	movs	r2, #64	@ 0x40
 800c4e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4e6:	d054      	beq.n	800c592 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2241      	movs	r2, #65	@ 0x41
 800c4ec:	5c9b      	ldrb	r3, [r3, r2]
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b22      	cmp	r3, #34	@ 0x22
 800c4f2:	d101      	bne.n	800c4f8 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c4f4:	4b33      	ldr	r3, [pc, #204]	@ (800c5c4 <I2C_Mem_ISR_DMA+0x234>)
 800c4f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	2bff      	cmp	r3, #255	@ 0xff
 800c500:	d911      	bls.n	800c526 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	22ff      	movs	r2, #255	@ 0xff
 800c506:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c50c:	b299      	uxth	r1, r3
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c512:	b2da      	uxtb	r2, r3
 800c514:	2380      	movs	r3, #128	@ 0x80
 800c516:	045c      	lsls	r4, r3, #17
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	0023      	movs	r3, r4
 800c520:	f000 feee 	bl	800d300 <I2C_TransferConfig>
 800c524:	e012      	b.n	800c54c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c534:	b299      	uxth	r1, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	2380      	movs	r3, #128	@ 0x80
 800c53e:	049c      	lsls	r4, r3, #18
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	0023      	movs	r3, r4
 800c548:	f000 feda 	bl	800d300 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c550:	b29a      	uxth	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	b29a      	uxth	r2, r3
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2241      	movs	r2, #65	@ 0x41
 800c562:	5c9b      	ldrb	r3, [r3, r2]
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b22      	cmp	r3, #34	@ 0x22
 800c568:	d109      	bne.n	800c57e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2180      	movs	r1, #128	@ 0x80
 800c576:	0209      	lsls	r1, r1, #8
 800c578:	430a      	orrs	r2, r1
 800c57a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c57c:	e017      	b.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2180      	movs	r1, #128	@ 0x80
 800c58a:	01c9      	lsls	r1, r1, #7
 800c58c:	430a      	orrs	r2, r1
 800c58e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c590:	e00d      	b.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2220      	movs	r2, #32
 800c596:	4013      	ands	r3, r2
 800c598:	d009      	beq.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2220      	movs	r2, #32
 800c59e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c5a0:	d005      	beq.n	800c5ae <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	0011      	movs	r1, r2
 800c5a8:	0018      	movs	r0, r3
 800c5aa:	f000 fa3d 	bl	800ca28 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2240      	movs	r2, #64	@ 0x40
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	0018      	movs	r0, r3
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	b007      	add	sp, #28
 800c5be:	bd90      	pop	{r4, r7, pc}
 800c5c0:	80002000 	.word	0x80002000
 800c5c4:	80002400 	.word	0x80002400

0800c5c8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5d8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2240      	movs	r2, #64	@ 0x40
 800c5e2:	5c9b      	ldrb	r3, [r3, r2]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d101      	bne.n	800c5ec <I2C_Slave_ISR_DMA+0x24>
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	e0cd      	b.n	800c788 <I2C_Slave_ISR_DMA+0x1c0>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2240      	movs	r2, #64	@ 0x40
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2220      	movs	r2, #32
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	d009      	beq.n	800c610 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2220      	movs	r2, #32
 800c600:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c602:	d005      	beq.n	800c610 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	0011      	movs	r1, r2
 800c60a:	0018      	movs	r0, r3
 800c60c:	f000 fada 	bl	800cbc4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2210      	movs	r2, #16
 800c614:	4013      	ands	r3, r2
 800c616:	d100      	bne.n	800c61a <I2C_Slave_ISR_DMA+0x52>
 800c618:	e0a3      	b.n	800c762 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2210      	movs	r2, #16
 800c61e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c620:	d100      	bne.n	800c624 <I2C_Slave_ISR_DMA+0x5c>
 800c622:	e09e      	b.n	800c762 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	2380      	movs	r3, #128	@ 0x80
 800c628:	01db      	lsls	r3, r3, #7
 800c62a:	4013      	ands	r3, r2
 800c62c:	d105      	bne.n	800c63a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	2380      	movs	r3, #128	@ 0x80
 800c632:	021b      	lsls	r3, r3, #8
 800c634:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c636:	d100      	bne.n	800c63a <I2C_Slave_ISR_DMA+0x72>
 800c638:	e08c      	b.n	800c754 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00c      	beq.n	800c65c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	2380      	movs	r3, #128	@ 0x80
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	4013      	ands	r3, r2
 800c64a:	d007      	beq.n	800c65c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800c658:	2301      	movs	r3, #1
 800c65a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00c      	beq.n	800c67e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	2380      	movs	r3, #128	@ 0x80
 800c668:	01db      	lsls	r3, r3, #7
 800c66a:	4013      	ands	r3, r2
 800c66c:	d007      	beq.n	800c67e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800c67a:	2301      	movs	r3, #1
 800c67c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d12d      	bne.n	800c6e0 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2241      	movs	r2, #65	@ 0x41
 800c688:	5c9b      	ldrb	r3, [r3, r2]
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b28      	cmp	r3, #40	@ 0x28
 800c68e:	d10b      	bne.n	800c6a8 <I2C_Slave_ISR_DMA+0xe0>
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	2380      	movs	r3, #128	@ 0x80
 800c694:	049b      	lsls	r3, r3, #18
 800c696:	429a      	cmp	r2, r3
 800c698:	d106      	bne.n	800c6a8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	0011      	movs	r1, r2
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	f000 fbaf 	bl	800ce04 <I2C_ITListenCplt>
 800c6a6:	e054      	b.n	800c752 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2241      	movs	r2, #65	@ 0x41
 800c6ac:	5c9b      	ldrb	r3, [r3, r2]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b29      	cmp	r3, #41	@ 0x29
 800c6b2:	d110      	bne.n	800c6d6 <I2C_Slave_ISR_DMA+0x10e>
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	4a36      	ldr	r2, [pc, #216]	@ (800c790 <I2C_Slave_ISR_DMA+0x1c8>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d00c      	beq.n	800c6d6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2210      	movs	r2, #16
 800c6c2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	f000 fd1f 	bl	800d10a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	f000 f946 	bl	800c960 <I2C_ITSlaveSeqCplt>
 800c6d4:	e03d      	b.n	800c752 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2210      	movs	r2, #16
 800c6dc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c6de:	e03e      	b.n	800c75e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2210      	movs	r2, #16
 800c6e6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ec:	2204      	movs	r2, #4
 800c6ee:	431a      	orrs	r2, r3
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c6f4:	2317      	movs	r3, #23
 800c6f6:	18fb      	adds	r3, r7, r3
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	2141      	movs	r1, #65	@ 0x41
 800c6fc:	5c52      	ldrb	r2, [r2, r1]
 800c6fe:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d004      	beq.n	800c710 <I2C_Slave_ISR_DMA+0x148>
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	2380      	movs	r3, #128	@ 0x80
 800c70a:	045b      	lsls	r3, r3, #17
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d126      	bne.n	800c75e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c710:	2217      	movs	r2, #23
 800c712:	18bb      	adds	r3, r7, r2
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b21      	cmp	r3, #33	@ 0x21
 800c718:	d003      	beq.n	800c722 <I2C_Slave_ISR_DMA+0x15a>
 800c71a:	18bb      	adds	r3, r7, r2
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2b29      	cmp	r3, #41	@ 0x29
 800c720:	d103      	bne.n	800c72a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2221      	movs	r2, #33	@ 0x21
 800c726:	631a      	str	r2, [r3, #48]	@ 0x30
 800c728:	e00b      	b.n	800c742 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c72a:	2217      	movs	r2, #23
 800c72c:	18bb      	adds	r3, r7, r2
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b22      	cmp	r3, #34	@ 0x22
 800c732:	d003      	beq.n	800c73c <I2C_Slave_ISR_DMA+0x174>
 800c734:	18bb      	adds	r3, r7, r2
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	2b2a      	cmp	r3, #42	@ 0x2a
 800c73a:	d102      	bne.n	800c742 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2222      	movs	r2, #34	@ 0x22
 800c740:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	0011      	movs	r1, r2
 800c74a:	0018      	movs	r0, r3
 800c74c:	f000 fbb2 	bl	800ceb4 <I2C_ITError>
      if (treatdmanack == 1U)
 800c750:	e005      	b.n	800c75e <I2C_Slave_ISR_DMA+0x196>
 800c752:	e004      	b.n	800c75e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2210      	movs	r2, #16
 800c75a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c75c:	e00f      	b.n	800c77e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800c75e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c760:	e00d      	b.n	800c77e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2208      	movs	r2, #8
 800c766:	4013      	ands	r3, r2
 800c768:	d009      	beq.n	800c77e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2208      	movs	r2, #8
 800c76e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c770:	d005      	beq.n	800c77e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	0011      	movs	r1, r2
 800c778:	0018      	movs	r0, r3
 800c77a:	f000 f80b 	bl	800c794 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2240      	movs	r2, #64	@ 0x40
 800c782:	2100      	movs	r1, #0
 800c784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	0018      	movs	r0, r3
 800c78a:	46bd      	mov	sp, r7
 800c78c:	b008      	add	sp, #32
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	ffff0000 	.word	0xffff0000

0800c794 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c794:	b5b0      	push	{r4, r5, r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2241      	movs	r2, #65	@ 0x41
 800c7a2:	5c9b      	ldrb	r3, [r3, r2]
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	001a      	movs	r2, r3
 800c7a8:	2328      	movs	r3, #40	@ 0x28
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	2b28      	cmp	r3, #40	@ 0x28
 800c7ae:	d000      	beq.n	800c7b2 <I2C_ITAddrCplt+0x1e>
 800c7b0:	e088      	b.n	800c8c4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	0c1b      	lsrs	r3, r3, #16
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	250f      	movs	r5, #15
 800c7be:	197b      	adds	r3, r7, r5
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	400a      	ands	r2, r1
 800c7c4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	0c1b      	lsrs	r3, r3, #16
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	200c      	movs	r0, #12
 800c7d2:	183b      	adds	r3, r7, r0
 800c7d4:	21fe      	movs	r1, #254	@ 0xfe
 800c7d6:	400a      	ands	r2, r1
 800c7d8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	240a      	movs	r4, #10
 800c7e4:	193b      	adds	r3, r7, r4
 800c7e6:	0592      	lsls	r2, r2, #22
 800c7e8:	0d92      	lsrs	r2, r2, #22
 800c7ea:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	2308      	movs	r3, #8
 800c7f6:	18fb      	adds	r3, r7, r3
 800c7f8:	21fe      	movs	r1, #254	@ 0xfe
 800c7fa:	400a      	ands	r2, r1
 800c7fc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	2b02      	cmp	r3, #2
 800c804:	d148      	bne.n	800c898 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c806:	0021      	movs	r1, r4
 800c808:	187b      	adds	r3, r7, r1
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	09db      	lsrs	r3, r3, #7
 800c80e:	b29a      	uxth	r2, r3
 800c810:	183b      	adds	r3, r7, r0
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	4053      	eors	r3, r2
 800c816:	b29b      	uxth	r3, r3
 800c818:	001a      	movs	r2, r3
 800c81a:	2306      	movs	r3, #6
 800c81c:	4013      	ands	r3, r2
 800c81e:	d120      	bne.n	800c862 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800c820:	183b      	adds	r3, r7, r0
 800c822:	187a      	adds	r2, r7, r1
 800c824:	8812      	ldrh	r2, [r2, #0]
 800c826:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c836:	2b02      	cmp	r3, #2
 800c838:	d14c      	bne.n	800c8d4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2200      	movs	r2, #0
 800c83e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2208      	movs	r2, #8
 800c846:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2240      	movs	r2, #64	@ 0x40
 800c84c:	2100      	movs	r1, #0
 800c84e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c850:	183b      	adds	r3, r7, r0
 800c852:	881a      	ldrh	r2, [r3, #0]
 800c854:	197b      	adds	r3, r7, r5
 800c856:	7819      	ldrb	r1, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	0018      	movs	r0, r3
 800c85c:	f7ff fa39 	bl	800bcd2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c860:	e038      	b.n	800c8d4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800c862:	240c      	movs	r4, #12
 800c864:	193b      	adds	r3, r7, r4
 800c866:	2208      	movs	r2, #8
 800c868:	18ba      	adds	r2, r7, r2
 800c86a:	8812      	ldrh	r2, [r2, #0]
 800c86c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c86e:	2380      	movs	r3, #128	@ 0x80
 800c870:	021a      	lsls	r2, r3, #8
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	0011      	movs	r1, r2
 800c876:	0018      	movs	r0, r3
 800c878:	f000 fe0a 	bl	800d490 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2240      	movs	r2, #64	@ 0x40
 800c880:	2100      	movs	r1, #0
 800c882:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c884:	193b      	adds	r3, r7, r4
 800c886:	881a      	ldrh	r2, [r3, #0]
 800c888:	230f      	movs	r3, #15
 800c88a:	18fb      	adds	r3, r7, r3
 800c88c:	7819      	ldrb	r1, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	0018      	movs	r0, r3
 800c892:	f7ff fa1e 	bl	800bcd2 <HAL_I2C_AddrCallback>
}
 800c896:	e01d      	b.n	800c8d4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c898:	2380      	movs	r3, #128	@ 0x80
 800c89a:	021a      	lsls	r2, r3, #8
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	0011      	movs	r1, r2
 800c8a0:	0018      	movs	r0, r3
 800c8a2:	f000 fdf5 	bl	800d490 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2240      	movs	r2, #64	@ 0x40
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c8ae:	230c      	movs	r3, #12
 800c8b0:	18fb      	adds	r3, r7, r3
 800c8b2:	881a      	ldrh	r2, [r3, #0]
 800c8b4:	230f      	movs	r3, #15
 800c8b6:	18fb      	adds	r3, r7, r3
 800c8b8:	7819      	ldrb	r1, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0018      	movs	r0, r3
 800c8be:	f7ff fa08 	bl	800bcd2 <HAL_I2C_AddrCallback>
}
 800c8c2:	e007      	b.n	800c8d4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2208      	movs	r2, #8
 800c8ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2240      	movs	r2, #64	@ 0x40
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	5499      	strb	r1, [r3, r2]
}
 800c8d4:	46c0      	nop			@ (mov r8, r8)
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	b004      	add	sp, #16
 800c8da:	bdb0      	pop	{r4, r5, r7, pc}

0800c8dc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2242      	movs	r2, #66	@ 0x42
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2241      	movs	r2, #65	@ 0x41
 800c8f0:	5c9b      	ldrb	r3, [r3, r2]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b21      	cmp	r3, #33	@ 0x21
 800c8f6:	d117      	bne.n	800c928 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2241      	movs	r2, #65	@ 0x41
 800c8fc:	2120      	movs	r1, #32
 800c8fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2211      	movs	r2, #17
 800c904:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2101      	movs	r1, #1
 800c910:	0018      	movs	r0, r3
 800c912:	f000 fdbd 	bl	800d490 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2240      	movs	r2, #64	@ 0x40
 800c91a:	2100      	movs	r1, #0
 800c91c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	0018      	movs	r0, r3
 800c922:	f7ff f9b6 	bl	800bc92 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c926:	e016      	b.n	800c956 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2241      	movs	r2, #65	@ 0x41
 800c92c:	2120      	movs	r1, #32
 800c92e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2212      	movs	r2, #18
 800c934:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2102      	movs	r1, #2
 800c940:	0018      	movs	r0, r3
 800c942:	f000 fda5 	bl	800d490 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2240      	movs	r2, #64	@ 0x40
 800c94a:	2100      	movs	r1, #0
 800c94c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	0018      	movs	r0, r3
 800c952:	f7ff f9a6 	bl	800bca2 <HAL_I2C_MasterRxCpltCallback>
}
 800c956:	46c0      	nop			@ (mov r8, r8)
 800c958:	46bd      	mov	sp, r7
 800c95a:	b002      	add	sp, #8
 800c95c:	bd80      	pop	{r7, pc}
	...

0800c960 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2242      	movs	r2, #66	@ 0x42
 800c974:	2100      	movs	r1, #0
 800c976:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	2380      	movs	r3, #128	@ 0x80
 800c97c:	01db      	lsls	r3, r3, #7
 800c97e:	4013      	ands	r3, r2
 800c980:	d008      	beq.n	800c994 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4924      	ldr	r1, [pc, #144]	@ (800ca20 <I2C_ITSlaveSeqCplt+0xc0>)
 800c98e:	400a      	ands	r2, r1
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	e00c      	b.n	800c9ae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	2380      	movs	r3, #128	@ 0x80
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	4013      	ands	r3, r2
 800c99c:	d007      	beq.n	800c9ae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	491e      	ldr	r1, [pc, #120]	@ (800ca24 <I2C_ITSlaveSeqCplt+0xc4>)
 800c9aa:	400a      	ands	r2, r1
 800c9ac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2241      	movs	r2, #65	@ 0x41
 800c9b2:	5c9b      	ldrb	r3, [r3, r2]
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b29      	cmp	r3, #41	@ 0x29
 800c9b8:	d114      	bne.n	800c9e4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2241      	movs	r2, #65	@ 0x41
 800c9be:	2128      	movs	r1, #40	@ 0x28
 800c9c0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2221      	movs	r2, #33	@ 0x21
 800c9c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	f000 fd5f 	bl	800d490 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2240      	movs	r2, #64	@ 0x40
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	0018      	movs	r0, r3
 800c9de:	f7ff f968 	bl	800bcb2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c9e2:	e019      	b.n	800ca18 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2241      	movs	r2, #65	@ 0x41
 800c9e8:	5c9b      	ldrb	r3, [r3, r2]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9ee:	d113      	bne.n	800ca18 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2241      	movs	r2, #65	@ 0x41
 800c9f4:	2128      	movs	r1, #40	@ 0x28
 800c9f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2222      	movs	r2, #34	@ 0x22
 800c9fc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2102      	movs	r1, #2
 800ca02:	0018      	movs	r0, r3
 800ca04:	f000 fd44 	bl	800d490 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2240      	movs	r2, #64	@ 0x40
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	0018      	movs	r0, r3
 800ca14:	f7ff f955 	bl	800bcc2 <HAL_I2C_SlaveRxCpltCallback>
}
 800ca18:	46c0      	nop			@ (mov r8, r8)
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	b004      	add	sp, #16
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	ffffbfff 	.word	0xffffbfff
 800ca24:	ffff7fff 	.word	0xffff7fff

0800ca28 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2241      	movs	r2, #65	@ 0x41
 800ca42:	5c9b      	ldrb	r3, [r3, r2]
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b21      	cmp	r3, #33	@ 0x21
 800ca48:	d108      	bne.n	800ca5c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	0018      	movs	r0, r3
 800ca50:	f000 fd1e 	bl	800d490 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2211      	movs	r2, #17
 800ca58:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca5a:	e00d      	b.n	800ca78 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2241      	movs	r2, #65	@ 0x41
 800ca60:	5c9b      	ldrb	r3, [r3, r2]
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	2b22      	cmp	r3, #34	@ 0x22
 800ca66:	d107      	bne.n	800ca78 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2102      	movs	r1, #2
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f000 fd0f 	bl	800d490 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2212      	movs	r2, #18
 800ca76:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	494e      	ldr	r1, [pc, #312]	@ (800cbbc <I2C_ITMasterCplt+0x194>)
 800ca84:	400a      	ands	r2, r1
 800ca86:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a4b      	ldr	r2, [pc, #300]	@ (800cbc0 <I2C_ITMasterCplt+0x198>)
 800ca92:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2210      	movs	r2, #16
 800ca98:	4013      	ands	r3, r2
 800ca9a:	d009      	beq.n	800cab0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2210      	movs	r2, #16
 800caa2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caa8:	2204      	movs	r2, #4
 800caaa:	431a      	orrs	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2241      	movs	r2, #65	@ 0x41
 800cab4:	5c9b      	ldrb	r3, [r3, r2]
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	2b60      	cmp	r3, #96	@ 0x60
 800caba:	d109      	bne.n	800cad0 <I2C_ITMasterCplt+0xa8>
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	2204      	movs	r2, #4
 800cac0:	4013      	ands	r3, r2
 800cac2:	d005      	beq.n	800cad0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800cace:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	0018      	movs	r0, r3
 800cad4:	f000 fb19 	bl	800d10a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cadc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2241      	movs	r2, #65	@ 0x41
 800cae2:	5c9b      	ldrb	r3, [r3, r2]
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b60      	cmp	r3, #96	@ 0x60
 800cae8:	d002      	beq.n	800caf0 <I2C_ITMasterCplt+0xc8>
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d007      	beq.n	800cb00 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	0011      	movs	r1, r2
 800caf8:	0018      	movs	r0, r3
 800cafa:	f000 f9db 	bl	800ceb4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cafe:	e058      	b.n	800cbb2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2241      	movs	r2, #65	@ 0x41
 800cb04:	5c9b      	ldrb	r3, [r3, r2]
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b21      	cmp	r3, #33	@ 0x21
 800cb0a:	d126      	bne.n	800cb5a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2241      	movs	r2, #65	@ 0x41
 800cb10:	2120      	movs	r1, #32
 800cb12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2242      	movs	r2, #66	@ 0x42
 800cb1e:	5c9b      	ldrb	r3, [r3, r2]
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b40      	cmp	r3, #64	@ 0x40
 800cb24:	d10c      	bne.n	800cb40 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2242      	movs	r2, #66	@ 0x42
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2240      	movs	r2, #64	@ 0x40
 800cb32:	2100      	movs	r1, #0
 800cb34:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	0018      	movs	r0, r3
 800cb3a:	f7ff f8e2 	bl	800bd02 <HAL_I2C_MemTxCpltCallback>
}
 800cb3e:	e038      	b.n	800cbb2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2242      	movs	r2, #66	@ 0x42
 800cb44:	2100      	movs	r1, #0
 800cb46:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2240      	movs	r2, #64	@ 0x40
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	0018      	movs	r0, r3
 800cb54:	f7ff f89d 	bl	800bc92 <HAL_I2C_MasterTxCpltCallback>
}
 800cb58:	e02b      	b.n	800cbb2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2241      	movs	r2, #65	@ 0x41
 800cb5e:	5c9b      	ldrb	r3, [r3, r2]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b22      	cmp	r3, #34	@ 0x22
 800cb64:	d125      	bne.n	800cbb2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2241      	movs	r2, #65	@ 0x41
 800cb6a:	2120      	movs	r1, #32
 800cb6c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2242      	movs	r2, #66	@ 0x42
 800cb78:	5c9b      	ldrb	r3, [r3, r2]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	2b40      	cmp	r3, #64	@ 0x40
 800cb7e:	d10c      	bne.n	800cb9a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2242      	movs	r2, #66	@ 0x42
 800cb84:	2100      	movs	r1, #0
 800cb86:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2240      	movs	r2, #64	@ 0x40
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	0018      	movs	r0, r3
 800cb94:	f7ff f8bd 	bl	800bd12 <HAL_I2C_MemRxCpltCallback>
}
 800cb98:	e00b      	b.n	800cbb2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2242      	movs	r2, #66	@ 0x42
 800cb9e:	2100      	movs	r1, #0
 800cba0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2240      	movs	r2, #64	@ 0x40
 800cba6:	2100      	movs	r1, #0
 800cba8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	0018      	movs	r0, r3
 800cbae:	f7ff f878 	bl	800bca2 <HAL_I2C_MasterRxCpltCallback>
}
 800cbb2:	46c0      	nop			@ (mov r8, r8)
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	b006      	add	sp, #24
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	46c0      	nop			@ (mov r8, r8)
 800cbbc:	fe00e800 	.word	0xfe00e800
 800cbc0:	ffff0000 	.word	0xffff0000

0800cbc4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cbda:	200f      	movs	r0, #15
 800cbdc:	183b      	adds	r3, r7, r0
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	2141      	movs	r1, #65	@ 0x41
 800cbe2:	5c52      	ldrb	r2, [r2, r1]
 800cbe4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2220      	movs	r2, #32
 800cbec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cbee:	183b      	adds	r3, r7, r0
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b21      	cmp	r3, #33	@ 0x21
 800cbf4:	d003      	beq.n	800cbfe <I2C_ITSlaveCplt+0x3a>
 800cbf6:	183b      	adds	r3, r7, r0
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b29      	cmp	r3, #41	@ 0x29
 800cbfc:	d109      	bne.n	800cc12 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cbfe:	4a7b      	ldr	r2, [pc, #492]	@ (800cdec <I2C_ITSlaveCplt+0x228>)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	0011      	movs	r1, r2
 800cc04:	0018      	movs	r0, r3
 800cc06:	f000 fc43 	bl	800d490 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2221      	movs	r2, #33	@ 0x21
 800cc0e:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc10:	e011      	b.n	800cc36 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cc12:	220f      	movs	r2, #15
 800cc14:	18bb      	adds	r3, r7, r2
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b22      	cmp	r3, #34	@ 0x22
 800cc1a:	d003      	beq.n	800cc24 <I2C_ITSlaveCplt+0x60>
 800cc1c:	18bb      	adds	r3, r7, r2
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc22:	d108      	bne.n	800cc36 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cc24:	4a72      	ldr	r2, [pc, #456]	@ (800cdf0 <I2C_ITSlaveCplt+0x22c>)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	0011      	movs	r1, r2
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	f000 fc30 	bl	800d490 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2222      	movs	r2, #34	@ 0x22
 800cc34:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2180      	movs	r1, #128	@ 0x80
 800cc42:	0209      	lsls	r1, r1, #8
 800cc44:	430a      	orrs	r2, r1
 800cc46:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685a      	ldr	r2, [r3, #4]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4968      	ldr	r1, [pc, #416]	@ (800cdf4 <I2C_ITSlaveCplt+0x230>)
 800cc54:	400a      	ands	r2, r1
 800cc56:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	f000 fa55 	bl	800d10a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	2380      	movs	r3, #128	@ 0x80
 800cc64:	01db      	lsls	r3, r3, #7
 800cc66:	4013      	ands	r3, r2
 800cc68:	d013      	beq.n	800cc92 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4960      	ldr	r1, [pc, #384]	@ (800cdf8 <I2C_ITSlaveCplt+0x234>)
 800cc76:	400a      	ands	r2, r1
 800cc78:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d01f      	beq.n	800ccc2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cc90:	e017      	b.n	800ccc2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	2380      	movs	r3, #128	@ 0x80
 800cc96:	021b      	lsls	r3, r3, #8
 800cc98:	4013      	ands	r3, r2
 800cc9a:	d012      	beq.n	800ccc2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4955      	ldr	r1, [pc, #340]	@ (800cdfc <I2C_ITSlaveCplt+0x238>)
 800cca8:	400a      	ands	r2, r1
 800ccaa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d006      	beq.n	800ccc2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2204      	movs	r2, #4
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	d020      	beq.n	800cd0c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2204      	movs	r2, #4
 800ccce:	4393      	bics	r3, r2
 800ccd0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccdc:	b2d2      	uxtb	r2, r2
 800ccde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce4:	1c5a      	adds	r2, r3, #1
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00c      	beq.n	800cd0c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	3b01      	subs	r3, #1
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d005      	beq.n	800cd22 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd1a:	2204      	movs	r2, #4
 800cd1c:	431a      	orrs	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2242      	movs	r2, #66	@ 0x42
 800cd26:	2100      	movs	r1, #0
 800cd28:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d013      	beq.n	800cd60 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	0011      	movs	r1, r2
 800cd40:	0018      	movs	r0, r3
 800cd42:	f000 f8b7 	bl	800ceb4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2241      	movs	r2, #65	@ 0x41
 800cd4a:	5c9b      	ldrb	r3, [r3, r2]
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b28      	cmp	r3, #40	@ 0x28
 800cd50:	d147      	bne.n	800cde2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	0011      	movs	r1, r2
 800cd58:	0018      	movs	r0, r3
 800cd5a:	f000 f853 	bl	800ce04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd5e:	e040      	b.n	800cde2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd64:	4a26      	ldr	r2, [pc, #152]	@ (800ce00 <I2C_ITSlaveCplt+0x23c>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d016      	beq.n	800cd98 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f7ff fdf7 	bl	800c960 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a22      	ldr	r2, [pc, #136]	@ (800ce00 <I2C_ITSlaveCplt+0x23c>)
 800cd76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2241      	movs	r2, #65	@ 0x41
 800cd7c:	2120      	movs	r1, #32
 800cd7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2240      	movs	r2, #64	@ 0x40
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	0018      	movs	r0, r3
 800cd92:	f7fe ffae 	bl	800bcf2 <HAL_I2C_ListenCpltCallback>
}
 800cd96:	e024      	b.n	800cde2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2241      	movs	r2, #65	@ 0x41
 800cd9c:	5c9b      	ldrb	r3, [r3, r2]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b22      	cmp	r3, #34	@ 0x22
 800cda2:	d10f      	bne.n	800cdc4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2241      	movs	r2, #65	@ 0x41
 800cda8:	2120      	movs	r1, #32
 800cdaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2240      	movs	r2, #64	@ 0x40
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f7fe ff80 	bl	800bcc2 <HAL_I2C_SlaveRxCpltCallback>
}
 800cdc2:	e00e      	b.n	800cde2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2241      	movs	r2, #65	@ 0x41
 800cdc8:	2120      	movs	r1, #32
 800cdca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2240      	movs	r2, #64	@ 0x40
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	0018      	movs	r0, r3
 800cdde:	f7fe ff68 	bl	800bcb2 <HAL_I2C_SlaveTxCpltCallback>
}
 800cde2:	46c0      	nop			@ (mov r8, r8)
 800cde4:	46bd      	mov	sp, r7
 800cde6:	b006      	add	sp, #24
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	46c0      	nop			@ (mov r8, r8)
 800cdec:	00008001 	.word	0x00008001
 800cdf0:	00008002 	.word	0x00008002
 800cdf4:	fe00e800 	.word	0xfe00e800
 800cdf8:	ffffbfff 	.word	0xffffbfff
 800cdfc:	ffff7fff 	.word	0xffff7fff
 800ce00:	ffff0000 	.word	0xffff0000

0800ce04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4a26      	ldr	r2, [pc, #152]	@ (800ceac <I2C_ITListenCplt+0xa8>)
 800ce12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2241      	movs	r2, #65	@ 0x41
 800ce1e:	2120      	movs	r1, #32
 800ce20:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2242      	movs	r2, #66	@ 0x42
 800ce26:	2100      	movs	r1, #0
 800ce28:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2204      	movs	r2, #4
 800ce34:	4013      	ands	r3, r2
 800ce36:	d022      	beq.n	800ce7e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce42:	b2d2      	uxtb	r2, r2
 800ce44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d012      	beq.n	800ce7e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce76:	2204      	movs	r2, #4
 800ce78:	431a      	orrs	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ce7e:	4a0c      	ldr	r2, [pc, #48]	@ (800ceb0 <I2C_ITListenCplt+0xac>)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	0011      	movs	r1, r2
 800ce84:	0018      	movs	r0, r3
 800ce86:	f000 fb03 	bl	800d490 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2210      	movs	r2, #16
 800ce90:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2240      	movs	r2, #64	@ 0x40
 800ce96:	2100      	movs	r1, #0
 800ce98:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	0018      	movs	r0, r3
 800ce9e:	f7fe ff28 	bl	800bcf2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b002      	add	sp, #8
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	46c0      	nop			@ (mov r8, r8)
 800ceac:	ffff0000 	.word	0xffff0000
 800ceb0:	00008003 	.word	0x00008003

0800ceb4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cebe:	200f      	movs	r0, #15
 800cec0:	183b      	adds	r3, r7, r0
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	2141      	movs	r1, #65	@ 0x41
 800cec6:	5c52      	ldrb	r2, [r2, r1]
 800cec8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2242      	movs	r2, #66	@ 0x42
 800cece:	2100      	movs	r1, #0
 800ced0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a72      	ldr	r2, [pc, #456]	@ (800d0a0 <I2C_ITError+0x1ec>)
 800ced6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	431a      	orrs	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ceea:	183b      	adds	r3, r7, r0
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	2b28      	cmp	r3, #40	@ 0x28
 800cef0:	d007      	beq.n	800cf02 <I2C_ITError+0x4e>
 800cef2:	183b      	adds	r3, r7, r0
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b29      	cmp	r3, #41	@ 0x29
 800cef8:	d003      	beq.n	800cf02 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cefa:	183b      	adds	r3, r7, r0
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf00:	d10c      	bne.n	800cf1c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2103      	movs	r1, #3
 800cf06:	0018      	movs	r0, r3
 800cf08:	f000 fac2 	bl	800d490 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2241      	movs	r2, #65	@ 0x41
 800cf10:	2128      	movs	r1, #40	@ 0x28
 800cf12:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a63      	ldr	r2, [pc, #396]	@ (800d0a4 <I2C_ITError+0x1f0>)
 800cf18:	635a      	str	r2, [r3, #52]	@ 0x34
 800cf1a:	e032      	b.n	800cf82 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf1c:	4a62      	ldr	r2, [pc, #392]	@ (800d0a8 <I2C_ITError+0x1f4>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	0011      	movs	r1, r2
 800cf22:	0018      	movs	r0, r3
 800cf24:	f000 fab4 	bl	800d490 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	0018      	movs	r0, r3
 800cf2c:	f000 f8ed 	bl	800d10a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2241      	movs	r2, #65	@ 0x41
 800cf34:	5c9b      	ldrb	r3, [r3, r2]
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b60      	cmp	r3, #96	@ 0x60
 800cf3a:	d01f      	beq.n	800cf7c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2241      	movs	r2, #65	@ 0x41
 800cf40:	2120      	movs	r1, #32
 800cf42:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	699b      	ldr	r3, [r3, #24]
 800cf4a:	2220      	movs	r2, #32
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	2b20      	cmp	r3, #32
 800cf50:	d114      	bne.n	800cf7c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	2210      	movs	r2, #16
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	2b10      	cmp	r3, #16
 800cf5e:	d109      	bne.n	800cf74 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2210      	movs	r2, #16
 800cf66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf6c:	2204      	movs	r2, #4
 800cf6e:	431a      	orrs	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2220      	movs	r2, #32
 800cf7a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf86:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d03b      	beq.n	800d008 <I2C_ITError+0x154>
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2b11      	cmp	r3, #17
 800cf94:	d002      	beq.n	800cf9c <I2C_ITError+0xe8>
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2b21      	cmp	r3, #33	@ 0x21
 800cf9a:	d135      	bne.n	800d008 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	2380      	movs	r3, #128	@ 0x80
 800cfa4:	01db      	lsls	r3, r3, #7
 800cfa6:	401a      	ands	r2, r3
 800cfa8:	2380      	movs	r3, #128	@ 0x80
 800cfaa:	01db      	lsls	r3, r3, #7
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d107      	bne.n	800cfc0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	493c      	ldr	r1, [pc, #240]	@ (800d0ac <I2C_ITError+0x1f8>)
 800cfbc:	400a      	ands	r2, r1
 800cfbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f7fd feac 	bl	800ad22 <HAL_DMA_GetState>
 800cfca:	0003      	movs	r3, r0
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d016      	beq.n	800cffe <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfd4:	4a36      	ldr	r2, [pc, #216]	@ (800d0b0 <I2C_ITError+0x1fc>)
 800cfd6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2240      	movs	r2, #64	@ 0x40
 800cfdc:	2100      	movs	r1, #0
 800cfde:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfe4:	0018      	movs	r0, r3
 800cfe6:	f7fd fda7 	bl	800ab38 <HAL_DMA_Abort_IT>
 800cfea:	1e03      	subs	r3, r0, #0
 800cfec:	d051      	beq.n	800d092 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff8:	0018      	movs	r0, r3
 800cffa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cffc:	e049      	b.n	800d092 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	0018      	movs	r0, r3
 800d002:	f000 f859 	bl	800d0b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d006:	e044      	b.n	800d092 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d03b      	beq.n	800d088 <I2C_ITError+0x1d4>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b12      	cmp	r3, #18
 800d014:	d002      	beq.n	800d01c <I2C_ITError+0x168>
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b22      	cmp	r3, #34	@ 0x22
 800d01a:	d135      	bne.n	800d088 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	2380      	movs	r3, #128	@ 0x80
 800d024:	021b      	lsls	r3, r3, #8
 800d026:	401a      	ands	r2, r3
 800d028:	2380      	movs	r3, #128	@ 0x80
 800d02a:	021b      	lsls	r3, r3, #8
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d107      	bne.n	800d040 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	491e      	ldr	r1, [pc, #120]	@ (800d0b4 <I2C_ITError+0x200>)
 800d03c:	400a      	ands	r2, r1
 800d03e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d044:	0018      	movs	r0, r3
 800d046:	f7fd fe6c 	bl	800ad22 <HAL_DMA_GetState>
 800d04a:	0003      	movs	r3, r0
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d016      	beq.n	800d07e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d054:	4a16      	ldr	r2, [pc, #88]	@ (800d0b0 <I2C_ITError+0x1fc>)
 800d056:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2240      	movs	r2, #64	@ 0x40
 800d05c:	2100      	movs	r1, #0
 800d05e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d064:	0018      	movs	r0, r3
 800d066:	f7fd fd67 	bl	800ab38 <HAL_DMA_Abort_IT>
 800d06a:	1e03      	subs	r3, r0, #0
 800d06c:	d013      	beq.n	800d096 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d078:	0018      	movs	r0, r3
 800d07a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d07c:	e00b      	b.n	800d096 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	0018      	movs	r0, r3
 800d082:	f000 f819 	bl	800d0b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d086:	e006      	b.n	800d096 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	0018      	movs	r0, r3
 800d08c:	f000 f814 	bl	800d0b8 <I2C_TreatErrorCallback>
  }
}
 800d090:	e002      	b.n	800d098 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d092:	46c0      	nop			@ (mov r8, r8)
 800d094:	e000      	b.n	800d098 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d096:	46c0      	nop			@ (mov r8, r8)
}
 800d098:	46c0      	nop			@ (mov r8, r8)
 800d09a:	46bd      	mov	sp, r7
 800d09c:	b004      	add	sp, #16
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	ffff0000 	.word	0xffff0000
 800d0a4:	0800bf99 	.word	0x0800bf99
 800d0a8:	00008003 	.word	0x00008003
 800d0ac:	ffffbfff 	.word	0xffffbfff
 800d0b0:	0800d2c3 	.word	0x0800d2c3
 800d0b4:	ffff7fff 	.word	0xffff7fff

0800d0b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2241      	movs	r2, #65	@ 0x41
 800d0c4:	5c9b      	ldrb	r3, [r3, r2]
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	2b60      	cmp	r3, #96	@ 0x60
 800d0ca:	d10f      	bne.n	800d0ec <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2241      	movs	r2, #65	@ 0x41
 800d0d0:	2120      	movs	r1, #32
 800d0d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2240      	movs	r2, #64	@ 0x40
 800d0de:	2100      	movs	r1, #0
 800d0e0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	0018      	movs	r0, r3
 800d0e6:	f7fe fe24 	bl	800bd32 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d0ea:	e00a      	b.n	800d102 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2240      	movs	r2, #64	@ 0x40
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f7fe fe10 	bl	800bd22 <HAL_I2C_ErrorCallback>
}
 800d102:	46c0      	nop			@ (mov r8, r8)
 800d104:	46bd      	mov	sp, r7
 800d106:	b002      	add	sp, #8
 800d108:	bd80      	pop	{r7, pc}

0800d10a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b082      	sub	sp, #8
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	2202      	movs	r2, #2
 800d11a:	4013      	ands	r3, r2
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d103      	bne.n	800d128 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2200      	movs	r2, #0
 800d126:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	699b      	ldr	r3, [r3, #24]
 800d12e:	2201      	movs	r2, #1
 800d130:	4013      	ands	r3, r2
 800d132:	2b01      	cmp	r3, #1
 800d134:	d007      	beq.n	800d146 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	699a      	ldr	r2, [r3, #24]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2101      	movs	r1, #1
 800d142:	430a      	orrs	r2, r1
 800d144:	619a      	str	r2, [r3, #24]
  }
}
 800d146:	46c0      	nop			@ (mov r8, r8)
 800d148:	46bd      	mov	sp, r7
 800d14a:	b002      	add	sp, #8
 800d14c:	bd80      	pop	{r7, pc}
	...

0800d150 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d15c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4920      	ldr	r1, [pc, #128]	@ (800d1ec <I2C_DMAMasterTransmitCplt+0x9c>)
 800d16a:	400a      	ands	r2, r1
 800d16c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d172:	b29b      	uxth	r3, r3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d105      	bne.n	800d184 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2120      	movs	r1, #32
 800d17c:	0018      	movs	r0, r3
 800d17e:	f000 f8f9 	bl	800d374 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d182:	e02e      	b.n	800d1e2 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d18c:	189a      	adds	r2, r3, r2
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d196:	b29b      	uxth	r3, r3
 800d198:	2bff      	cmp	r3, #255	@ 0xff
 800d19a:	d903      	bls.n	800d1a4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	22ff      	movs	r2, #255	@ 0xff
 800d1a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d1a2:	e004      	b.n	800d1ae <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b6:	0019      	movs	r1, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3328      	adds	r3, #40	@ 0x28
 800d1be:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d1c4:	f7fd fc12 	bl	800a9ec <HAL_DMA_Start_IT>
 800d1c8:	1e03      	subs	r3, r0, #0
 800d1ca:	d005      	beq.n	800d1d8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2110      	movs	r1, #16
 800d1d0:	0018      	movs	r0, r3
 800d1d2:	f7ff fe6f 	bl	800ceb4 <I2C_ITError>
}
 800d1d6:	e004      	b.n	800d1e2 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2140      	movs	r1, #64	@ 0x40
 800d1dc:	0018      	movs	r0, r3
 800d1de:	f000 f8c9 	bl	800d374 <I2C_Enable_IRQ>
}
 800d1e2:	46c0      	nop			@ (mov r8, r8)
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	b004      	add	sp, #16
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	46c0      	nop			@ (mov r8, r8)
 800d1ec:	ffffbfff 	.word	0xffffbfff

0800d1f0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1fc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4920      	ldr	r1, [pc, #128]	@ (800d28c <I2C_DMAMasterReceiveCplt+0x9c>)
 800d20a:	400a      	ands	r2, r1
 800d20c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d212:	b29b      	uxth	r3, r3
 800d214:	2b00      	cmp	r3, #0
 800d216:	d105      	bne.n	800d224 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2120      	movs	r1, #32
 800d21c:	0018      	movs	r0, r3
 800d21e:	f000 f8a9 	bl	800d374 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d222:	e02e      	b.n	800d282 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d22c:	189a      	adds	r2, r3, r2
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d236:	b29b      	uxth	r3, r3
 800d238:	2bff      	cmp	r3, #255	@ 0xff
 800d23a:	d903      	bls.n	800d244 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	22ff      	movs	r2, #255	@ 0xff
 800d240:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d242:	e004      	b.n	800d24e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d248:	b29a      	uxth	r2, r3
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	3324      	adds	r3, #36	@ 0x24
 800d258:	0019      	movs	r1, r3
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d25e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d264:	f7fd fbc2 	bl	800a9ec <HAL_DMA_Start_IT>
 800d268:	1e03      	subs	r3, r0, #0
 800d26a:	d005      	beq.n	800d278 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2110      	movs	r1, #16
 800d270:	0018      	movs	r0, r3
 800d272:	f7ff fe1f 	bl	800ceb4 <I2C_ITError>
}
 800d276:	e004      	b.n	800d282 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2140      	movs	r1, #64	@ 0x40
 800d27c:	0018      	movs	r0, r3
 800d27e:	f000 f879 	bl	800d374 <I2C_Enable_IRQ>
}
 800d282:	46c0      	nop			@ (mov r8, r8)
 800d284:	46bd      	mov	sp, r7
 800d286:	b004      	add	sp, #16
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	46c0      	nop			@ (mov r8, r8)
 800d28c:	ffff7fff 	.word	0xffff7fff

0800d290 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d29c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2180      	movs	r1, #128	@ 0x80
 800d2aa:	0209      	lsls	r1, r1, #8
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2110      	movs	r1, #16
 800d2b4:	0018      	movs	r0, r3
 800d2b6:	f7ff fdfd 	bl	800ceb4 <I2C_ITError>
}
 800d2ba:	46c0      	nop			@ (mov r8, r8)
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	b004      	add	sp, #16
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b084      	sub	sp, #16
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d003      	beq.n	800d2e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2dc:	2200      	movs	r2, #0
 800d2de:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f7ff fee0 	bl	800d0b8 <I2C_TreatErrorCallback>
}
 800d2f8:	46c0      	nop			@ (mov r8, r8)
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	b004      	add	sp, #16
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d300:	b590      	push	{r4, r7, lr}
 800d302:	b087      	sub	sp, #28
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	0008      	movs	r0, r1
 800d30a:	0011      	movs	r1, r2
 800d30c:	607b      	str	r3, [r7, #4]
 800d30e:	240a      	movs	r4, #10
 800d310:	193b      	adds	r3, r7, r4
 800d312:	1c02      	adds	r2, r0, #0
 800d314:	801a      	strh	r2, [r3, #0]
 800d316:	2009      	movs	r0, #9
 800d318:	183b      	adds	r3, r7, r0
 800d31a:	1c0a      	adds	r2, r1, #0
 800d31c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d31e:	193b      	adds	r3, r7, r4
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	059b      	lsls	r3, r3, #22
 800d324:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d326:	183b      	adds	r3, r7, r0
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	0419      	lsls	r1, r3, #16
 800d32c:	23ff      	movs	r3, #255	@ 0xff
 800d32e:	041b      	lsls	r3, r3, #16
 800d330:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d332:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33a:	4313      	orrs	r3, r2
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	085b      	lsrs	r3, r3, #1
 800d340:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d34a:	0d51      	lsrs	r1, r2, #21
 800d34c:	2280      	movs	r2, #128	@ 0x80
 800d34e:	00d2      	lsls	r2, r2, #3
 800d350:	400a      	ands	r2, r1
 800d352:	4907      	ldr	r1, [pc, #28]	@ (800d370 <I2C_TransferConfig+0x70>)
 800d354:	430a      	orrs	r2, r1
 800d356:	43d2      	mvns	r2, r2
 800d358:	401a      	ands	r2, r3
 800d35a:	0011      	movs	r1, r2
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	430a      	orrs	r2, r1
 800d364:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d366:	46c0      	nop			@ (mov r8, r8)
 800d368:	46bd      	mov	sp, r7
 800d36a:	b007      	add	sp, #28
 800d36c:	bd90      	pop	{r4, r7, pc}
 800d36e:	46c0      	nop			@ (mov r8, r8)
 800d370:	03ff63ff 	.word	0x03ff63ff

0800d374 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	000a      	movs	r2, r1
 800d37e:	1cbb      	adds	r3, r7, #2
 800d380:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d382:	2300      	movs	r3, #0
 800d384:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d38a:	4b3e      	ldr	r3, [pc, #248]	@ (800d484 <I2C_Enable_IRQ+0x110>)
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d035      	beq.n	800d3fc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d394:	4b3c      	ldr	r3, [pc, #240]	@ (800d488 <I2C_Enable_IRQ+0x114>)
 800d396:	429a      	cmp	r2, r3
 800d398:	d030      	beq.n	800d3fc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d39e:	4b3b      	ldr	r3, [pc, #236]	@ (800d48c <I2C_Enable_IRQ+0x118>)
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d02b      	beq.n	800d3fc <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d3a4:	1cbb      	adds	r3, r7, #2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	5e9b      	ldrsh	r3, [r3, r2]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	da03      	bge.n	800d3b6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	22b8      	movs	r2, #184	@ 0xb8
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d3b6:	1cbb      	adds	r3, r7, #2
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	4013      	ands	r3, r2
 800d3be:	d003      	beq.n	800d3c8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	22f2      	movs	r2, #242	@ 0xf2
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d3c8:	1cbb      	adds	r3, r7, #2
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	4013      	ands	r3, r2
 800d3d0:	d003      	beq.n	800d3da <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	22f4      	movs	r2, #244	@ 0xf4
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d3da:	1cbb      	adds	r3, r7, #2
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	2b10      	cmp	r3, #16
 800d3e0:	d103      	bne.n	800d3ea <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2290      	movs	r2, #144	@ 0x90
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d3ea:	1cbb      	adds	r3, r7, #2
 800d3ec:	881b      	ldrh	r3, [r3, #0]
 800d3ee:	2b20      	cmp	r3, #32
 800d3f0:	d13c      	bne.n	800d46c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2220      	movs	r2, #32
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d3fa:	e037      	b.n	800d46c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d3fc:	1cbb      	adds	r3, r7, #2
 800d3fe:	2200      	movs	r2, #0
 800d400:	5e9b      	ldrsh	r3, [r3, r2]
 800d402:	2b00      	cmp	r3, #0
 800d404:	da03      	bge.n	800d40e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	22b8      	movs	r2, #184	@ 0xb8
 800d40a:	4313      	orrs	r3, r2
 800d40c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d40e:	1cbb      	adds	r3, r7, #2
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	2201      	movs	r2, #1
 800d414:	4013      	ands	r3, r2
 800d416:	d003      	beq.n	800d420 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	22f2      	movs	r2, #242	@ 0xf2
 800d41c:	4313      	orrs	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d420:	1cbb      	adds	r3, r7, #2
 800d422:	881b      	ldrh	r3, [r3, #0]
 800d424:	2202      	movs	r2, #2
 800d426:	4013      	ands	r3, r2
 800d428:	d003      	beq.n	800d432 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	22f4      	movs	r2, #244	@ 0xf4
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d432:	1cbb      	adds	r3, r7, #2
 800d434:	881b      	ldrh	r3, [r3, #0]
 800d436:	2b10      	cmp	r3, #16
 800d438:	d103      	bne.n	800d442 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2290      	movs	r2, #144	@ 0x90
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d442:	1cbb      	adds	r3, r7, #2
 800d444:	881b      	ldrh	r3, [r3, #0]
 800d446:	2b20      	cmp	r3, #32
 800d448:	d103      	bne.n	800d452 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2260      	movs	r2, #96	@ 0x60
 800d44e:	4313      	orrs	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d456:	4b0d      	ldr	r3, [pc, #52]	@ (800d48c <I2C_Enable_IRQ+0x118>)
 800d458:	429a      	cmp	r2, r3
 800d45a:	d007      	beq.n	800d46c <I2C_Enable_IRQ+0xf8>
 800d45c:	1cbb      	adds	r3, r7, #2
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	2b40      	cmp	r3, #64	@ 0x40
 800d462:	d103      	bne.n	800d46c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2240      	movs	r2, #64	@ 0x40
 800d468:	4313      	orrs	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6819      	ldr	r1, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	430a      	orrs	r2, r1
 800d47a:	601a      	str	r2, [r3, #0]
}
 800d47c:	46c0      	nop			@ (mov r8, r8)
 800d47e:	46bd      	mov	sp, r7
 800d480:	b004      	add	sp, #16
 800d482:	bd80      	pop	{r7, pc}
 800d484:	0800c199 	.word	0x0800c199
 800d488:	0800c5c9 	.word	0x0800c5c9
 800d48c:	0800c391 	.word	0x0800c391

0800d490 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	000a      	movs	r2, r1
 800d49a:	1cbb      	adds	r3, r7, #2
 800d49c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d4a2:	1cbb      	adds	r3, r7, #2
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	d010      	beq.n	800d4ce <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2242      	movs	r2, #66	@ 0x42
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2241      	movs	r2, #65	@ 0x41
 800d4b8:	5c9b      	ldrb	r3, [r3, r2]
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	001a      	movs	r2, r3
 800d4be:	2328      	movs	r3, #40	@ 0x28
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	2b28      	cmp	r3, #40	@ 0x28
 800d4c4:	d003      	beq.n	800d4ce <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	22b0      	movs	r2, #176	@ 0xb0
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d4ce:	1cbb      	adds	r3, r7, #2
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	2202      	movs	r2, #2
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	d010      	beq.n	800d4fa <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2244      	movs	r2, #68	@ 0x44
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2241      	movs	r2, #65	@ 0x41
 800d4e4:	5c9b      	ldrb	r3, [r3, r2]
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	001a      	movs	r2, r3
 800d4ea:	2328      	movs	r3, #40	@ 0x28
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	2b28      	cmp	r3, #40	@ 0x28
 800d4f0:	d003      	beq.n	800d4fa <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	22b0      	movs	r2, #176	@ 0xb0
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d4fa:	1cbb      	adds	r3, r7, #2
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	5e9b      	ldrsh	r3, [r3, r2]
 800d500:	2b00      	cmp	r3, #0
 800d502:	da03      	bge.n	800d50c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	22b8      	movs	r2, #184	@ 0xb8
 800d508:	4313      	orrs	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d50c:	1cbb      	adds	r3, r7, #2
 800d50e:	881b      	ldrh	r3, [r3, #0]
 800d510:	2b10      	cmp	r3, #16
 800d512:	d103      	bne.n	800d51c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2290      	movs	r2, #144	@ 0x90
 800d518:	4313      	orrs	r3, r2
 800d51a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d51c:	1cbb      	adds	r3, r7, #2
 800d51e:	881b      	ldrh	r3, [r3, #0]
 800d520:	2b20      	cmp	r3, #32
 800d522:	d103      	bne.n	800d52c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2220      	movs	r2, #32
 800d528:	4313      	orrs	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d52c:	1cbb      	adds	r3, r7, #2
 800d52e:	881b      	ldrh	r3, [r3, #0]
 800d530:	2b40      	cmp	r3, #64	@ 0x40
 800d532:	d103      	bne.n	800d53c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2240      	movs	r2, #64	@ 0x40
 800d538:	4313      	orrs	r3, r2
 800d53a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	43d9      	mvns	r1, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	400a      	ands	r2, r1
 800d54c:	601a      	str	r2, [r3, #0]
}
 800d54e:	46c0      	nop			@ (mov r8, r8)
 800d550:	46bd      	mov	sp, r7
 800d552:	b004      	add	sp, #16
 800d554:	bd80      	pop	{r7, pc}
	...

0800d558 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2241      	movs	r2, #65	@ 0x41
 800d566:	5c9b      	ldrb	r3, [r3, r2]
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	2b20      	cmp	r3, #32
 800d56c:	d138      	bne.n	800d5e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2240      	movs	r2, #64	@ 0x40
 800d572:	5c9b      	ldrb	r3, [r3, r2]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d101      	bne.n	800d57c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d578:	2302      	movs	r3, #2
 800d57a:	e032      	b.n	800d5e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2240      	movs	r2, #64	@ 0x40
 800d580:	2101      	movs	r1, #1
 800d582:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2241      	movs	r2, #65	@ 0x41
 800d588:	2124      	movs	r1, #36	@ 0x24
 800d58a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2101      	movs	r1, #1
 800d598:	438a      	bics	r2, r1
 800d59a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4911      	ldr	r1, [pc, #68]	@ (800d5ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d5a8:	400a      	ands	r2, r1
 800d5aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6819      	ldr	r1, [r3, #0]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	683a      	ldr	r2, [r7, #0]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	430a      	orrs	r2, r1
 800d5ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2241      	movs	r2, #65	@ 0x41
 800d5d0:	2120      	movs	r1, #32
 800d5d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2240      	movs	r2, #64	@ 0x40
 800d5d8:	2100      	movs	r1, #0
 800d5da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e000      	b.n	800d5e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d5e0:	2302      	movs	r3, #2
  }
}
 800d5e2:	0018      	movs	r0, r3
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	b002      	add	sp, #8
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	46c0      	nop			@ (mov r8, r8)
 800d5ec:	ffffefff 	.word	0xffffefff

0800d5f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2241      	movs	r2, #65	@ 0x41
 800d5fe:	5c9b      	ldrb	r3, [r3, r2]
 800d600:	b2db      	uxtb	r3, r3
 800d602:	2b20      	cmp	r3, #32
 800d604:	d139      	bne.n	800d67a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2240      	movs	r2, #64	@ 0x40
 800d60a:	5c9b      	ldrb	r3, [r3, r2]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d101      	bne.n	800d614 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d610:	2302      	movs	r3, #2
 800d612:	e033      	b.n	800d67c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2240      	movs	r2, #64	@ 0x40
 800d618:	2101      	movs	r1, #1
 800d61a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2241      	movs	r2, #65	@ 0x41
 800d620:	2124      	movs	r1, #36	@ 0x24
 800d622:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2101      	movs	r1, #1
 800d630:	438a      	bics	r2, r1
 800d632:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4a11      	ldr	r2, [pc, #68]	@ (800d684 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d640:	4013      	ands	r3, r2
 800d642:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	021b      	lsls	r3, r3, #8
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2101      	movs	r1, #1
 800d662:	430a      	orrs	r2, r1
 800d664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2241      	movs	r2, #65	@ 0x41
 800d66a:	2120      	movs	r1, #32
 800d66c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2240      	movs	r2, #64	@ 0x40
 800d672:	2100      	movs	r1, #0
 800d674:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	e000      	b.n	800d67c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d67a:	2302      	movs	r3, #2
  }
}
 800d67c:	0018      	movs	r0, r3
 800d67e:	46bd      	mov	sp, r7
 800d680:	b004      	add	sp, #16
 800d682:	bd80      	pop	{r7, pc}
 800d684:	fffff0ff 	.word	0xfffff0ff

0800d688 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b088      	sub	sp, #32
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800d696:	2301      	movs	r3, #1
 800d698:	e0e1      	b.n	800d85e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2235      	movs	r2, #53	@ 0x35
 800d69e:	5c9b      	ldrb	r3, [r3, r2]
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d107      	bne.n	800d6b6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2234      	movs	r2, #52	@ 0x34
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	0018      	movs	r0, r3
 800d6b2:	f7f8 fc91 	bl	8005fd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2235      	movs	r2, #53	@ 0x35
 800d6ba:	2102      	movs	r1, #2
 800d6bc:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	69da      	ldr	r2, [r3, #28]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4967      	ldr	r1, [pc, #412]	@ (800d868 <HAL_I2S_Init+0x1e0>)
 800d6ca:	400a      	ands	r2, r1
 800d6cc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	695b      	ldr	r3, [r3, #20]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d073      	beq.n	800d7c6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d102      	bne.n	800d6ec <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800d6e6:	2310      	movs	r3, #16
 800d6e8:	617b      	str	r3, [r7, #20]
 800d6ea:	e001      	b.n	800d6f0 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800d6ec:	2320      	movs	r3, #32
 800d6ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	2b20      	cmp	r3, #32
 800d6f6:	d802      	bhi.n	800d6fe <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800d6fe:	f002 fe8d 	bl	801041c <HAL_RCC_GetSysClockFreq>
 800d702:	0003      	movs	r3, r0
 800d704:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	691a      	ldr	r2, [r3, #16]
 800d70a:	2380      	movs	r3, #128	@ 0x80
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	429a      	cmp	r2, r3
 800d710:	d131      	bne.n	800d776 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d016      	beq.n	800d748 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	0019      	movs	r1, r3
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7f2 fd0d 	bl	8000140 <__udivsi3>
 800d726:	0003      	movs	r3, r0
 800d728:	001a      	movs	r2, r3
 800d72a:	0013      	movs	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	189b      	adds	r3, r3, r2
 800d730:	005b      	lsls	r3, r3, #1
 800d732:	001a      	movs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	0019      	movs	r1, r3
 800d73a:	0010      	movs	r0, r2
 800d73c:	f7f2 fd00 	bl	8000140 <__udivsi3>
 800d740:	0003      	movs	r3, r0
 800d742:	3305      	adds	r3, #5
 800d744:	613b      	str	r3, [r7, #16]
 800d746:	e02a      	b.n	800d79e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	0019      	movs	r1, r3
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f7f2 fcf6 	bl	8000140 <__udivsi3>
 800d754:	0003      	movs	r3, r0
 800d756:	001a      	movs	r2, r3
 800d758:	0013      	movs	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	189b      	adds	r3, r3, r2
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	001a      	movs	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	0019      	movs	r1, r3
 800d768:	0010      	movs	r0, r2
 800d76a:	f7f2 fce9 	bl	8000140 <__udivsi3>
 800d76e:	0003      	movs	r3, r0
 800d770:	3305      	adds	r3, #5
 800d772:	613b      	str	r3, [r7, #16]
 800d774:	e013      	b.n	800d79e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d776:	6979      	ldr	r1, [r7, #20]
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f7f2 fce1 	bl	8000140 <__udivsi3>
 800d77e:	0003      	movs	r3, r0
 800d780:	001a      	movs	r2, r3
 800d782:	0013      	movs	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	189b      	adds	r3, r3, r2
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	001a      	movs	r2, r3
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	695b      	ldr	r3, [r3, #20]
 800d790:	0019      	movs	r1, r3
 800d792:	0010      	movs	r0, r2
 800d794:	f7f2 fcd4 	bl	8000140 <__udivsi3>
 800d798:	0003      	movs	r3, r0
 800d79a:	3305      	adds	r3, #5
 800d79c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	210a      	movs	r1, #10
 800d7a2:	0018      	movs	r0, r3
 800d7a4:	f7f2 fccc 	bl	8000140 <__udivsi3>
 800d7a8:	0003      	movs	r3, r0
 800d7aa:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	085b      	lsrs	r3, r3, #1
 800d7bc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	021b      	lsls	r3, r3, #8
 800d7c2:	61bb      	str	r3, [r7, #24]
 800d7c4:	e003      	b.n	800d7ce <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d902      	bls.n	800d7da <HAL_I2S_Init+0x152>
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	2bff      	cmp	r3, #255	@ 0xff
 800d7d8:	d907      	bls.n	800d7ea <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7de:	2210      	movs	r2, #16
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e039      	b.n	800d85e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	691a      	ldr	r2, [r3, #16]
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	431a      	orrs	r2, r3
 800d7f2:	0011      	movs	r1, r2
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	69fa      	ldr	r2, [r7, #28]
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	69db      	ldr	r3, [r3, #28]
 800d804:	4a18      	ldr	r2, [pc, #96]	@ (800d868 <HAL_I2S_Init+0x1e0>)
 800d806:	401a      	ands	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6859      	ldr	r1, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	4319      	orrs	r1, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	4319      	orrs	r1, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	430b      	orrs	r3, r1
 800d81e:	431a      	orrs	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2180      	movs	r1, #128	@ 0x80
 800d826:	0109      	lsls	r1, r1, #4
 800d828:	430a      	orrs	r2, r1
 800d82a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	2b30      	cmp	r3, #48	@ 0x30
 800d832:	d003      	beq.n	800d83c <HAL_I2S_Init+0x1b4>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	2bb0      	cmp	r3, #176	@ 0xb0
 800d83a:	d108      	bne.n	800d84e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	69da      	ldr	r2, [r3, #28]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2180      	movs	r1, #128	@ 0x80
 800d848:	0149      	lsls	r1, r1, #5
 800d84a:	430a      	orrs	r2, r1
 800d84c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2235      	movs	r2, #53	@ 0x35
 800d858:	2101      	movs	r1, #1
 800d85a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	0018      	movs	r0, r3
 800d860:	46bd      	mov	sp, r7
 800d862:	b008      	add	sp, #32
 800d864:	bd80      	pop	{r7, pc}
 800d866:	46c0      	nop			@ (mov r8, r8)
 800d868:	fffff040 	.word	0xfffff040

0800d86c <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d101      	bne.n	800d87e <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800d87a:	2301      	movs	r3, #1
 800d87c:	e01b      	b.n	800d8b6 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2235      	movs	r2, #53	@ 0x35
 800d882:	2102      	movs	r1, #2
 800d884:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	69da      	ldr	r2, [r3, #28]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	490b      	ldr	r1, [pc, #44]	@ (800d8c0 <HAL_I2S_DeInit+0x54>)
 800d892:	400a      	ands	r2, r1
 800d894:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	0018      	movs	r0, r3
 800d89a:	f7f8 fc11 	bl	80060c0 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2235      	movs	r2, #53	@ 0x35
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2234      	movs	r2, #52	@ 0x34
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	0018      	movs	r0, r3
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	b002      	add	sp, #8
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	46c0      	nop			@ (mov r8, r8)
 800d8c0:	fffffbff 	.word	0xfffffbff

0800d8c4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	1dbb      	adds	r3, r7, #6
 800d8d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <HAL_I2S_Receive_DMA+0x1c>
 800d8d8:	1dbb      	adds	r3, r7, #6
 800d8da:	881b      	ldrh	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d101      	bne.n	800d8e4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e0a6      	b.n	800da32 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2234      	movs	r2, #52	@ 0x34
 800d8e8:	5c9b      	ldrb	r3, [r3, r2]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d101      	bne.n	800d8f4 <HAL_I2S_Receive_DMA+0x30>
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	e09e      	b.n	800da32 <HAL_I2S_Receive_DMA+0x16e>
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2234      	movs	r2, #52	@ 0x34
 800d8f8:	2101      	movs	r1, #1
 800d8fa:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2235      	movs	r2, #53	@ 0x35
 800d900:	5c9b      	ldrb	r3, [r3, r2]
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b01      	cmp	r3, #1
 800d906:	d005      	beq.n	800d914 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2234      	movs	r2, #52	@ 0x34
 800d90c:	2100      	movs	r1, #0
 800d90e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800d910:	2302      	movs	r3, #2
 800d912:	e08e      	b.n	800da32 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2235      	movs	r2, #53	@ 0x35
 800d918:	2104      	movs	r1, #4
 800d91a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	69db      	ldr	r3, [r3, #28]
 800d92e:	2207      	movs	r2, #7
 800d930:	4013      	ands	r3, r2
 800d932:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	2b03      	cmp	r3, #3
 800d938:	d002      	beq.n	800d940 <HAL_I2S_Receive_DMA+0x7c>
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	2b05      	cmp	r3, #5
 800d93e:	d10c      	bne.n	800d95a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800d940:	1dbb      	adds	r3, r7, #6
 800d942:	881b      	ldrh	r3, [r3, #0]
 800d944:	18db      	adds	r3, r3, r3
 800d946:	b29a      	uxth	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800d94c:	1dbb      	adds	r3, r7, #6
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	18db      	adds	r3, r3, r3
 800d952:	b29a      	uxth	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d958:	e007      	b.n	800d96a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	1dba      	adds	r2, r7, #6
 800d95e:	8812      	ldrh	r2, [r2, #0]
 800d960:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	1dba      	adds	r2, r7, #6
 800d966:	8812      	ldrh	r2, [r2, #0]
 800d968:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d96e:	4a33      	ldr	r2, [pc, #204]	@ (800da3c <HAL_I2S_Receive_DMA+0x178>)
 800d970:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d976:	4a32      	ldr	r2, [pc, #200]	@ (800da40 <HAL_I2S_Receive_DMA+0x17c>)
 800d978:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d97e:	4a31      	ldr	r2, [pc, #196]	@ (800da44 <HAL_I2S_Receive_DMA+0x180>)
 800d980:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	69da      	ldr	r2, [r3, #28]
 800d988:	23c0      	movs	r3, #192	@ 0xc0
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	401a      	ands	r2, r3
 800d98e:	23c0      	movs	r3, #192	@ 0xc0
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	429a      	cmp	r2, r3
 800d994:	d10a      	bne.n	800d9ac <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d996:	2300      	movs	r3, #0
 800d998:	613b      	str	r3, [r7, #16]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	613b      	str	r3, [r7, #16]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	330c      	adds	r3, #12
 800d9b6:	0019      	movs	r1, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9bc:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d9c4:	f7fd f812 	bl	800a9ec <HAL_DMA_Start_IT>
 800d9c8:	1e03      	subs	r3, r0, #0
 800d9ca:	d00f      	beq.n	800d9ec <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d0:	2208      	movs	r2, #8
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2235      	movs	r2, #53	@ 0x35
 800d9dc:	2101      	movs	r1, #1
 800d9de:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2234      	movs	r2, #52	@ 0x34
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e022      	b.n	800da32 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	69da      	ldr	r2, [r3, #28]
 800d9f2:	2380      	movs	r3, #128	@ 0x80
 800d9f4:	00db      	lsls	r3, r3, #3
 800d9f6:	4013      	ands	r3, r2
 800d9f8:	d108      	bne.n	800da0c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	69da      	ldr	r2, [r3, #28]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2180      	movs	r1, #128	@ 0x80
 800da06:	00c9      	lsls	r1, r1, #3
 800da08:	430a      	orrs	r2, r1
 800da0a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	4013      	ands	r3, r2
 800da16:	d107      	bne.n	800da28 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2101      	movs	r1, #1
 800da24:	430a      	orrs	r2, r1
 800da26:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2234      	movs	r2, #52	@ 0x34
 800da2c:	2100      	movs	r1, #0
 800da2e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	0018      	movs	r0, r3
 800da34:	46bd      	mov	sp, r7
 800da36:	b006      	add	sp, #24
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	46c0      	nop			@ (mov r8, r8)
 800da3c:	0800dc45 	.word	0x0800dc45
 800da40:	0800dc01 	.word	0x0800dc01
 800da44:	0800dc63 	.word	0x0800dc63

0800da48 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da50:	2317      	movs	r3, #23
 800da52:	18fb      	adds	r3, r7, r3
 800da54:	2200      	movs	r2, #0
 800da56:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	2380      	movs	r3, #128	@ 0x80
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	429a      	cmp	r2, r3
 800da62:	d003      	beq.n	800da6c <HAL_I2S_DMAStop+0x24>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d158      	bne.n	800db1e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da70:	2b00      	cmp	r3, #0
 800da72:	d010      	beq.n	800da96 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da78:	0018      	movs	r0, r3
 800da7a:	f7fd f81d 	bl	800aab8 <HAL_DMA_Abort>
 800da7e:	1e03      	subs	r3, r0, #0
 800da80:	d009      	beq.n	800da96 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da86:	2208      	movs	r2, #8
 800da88:	431a      	orrs	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800da8e:	2317      	movs	r3, #23
 800da90:	18fb      	adds	r3, r7, r3
 800da92:	2201      	movs	r2, #1
 800da94:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	2364      	movs	r3, #100	@ 0x64
 800da9a:	2201      	movs	r2, #1
 800da9c:	2102      	movs	r1, #2
 800da9e:	f000 f907 	bl	800dcb0 <I2S_WaitFlagStateUntilTimeout>
 800daa2:	1e03      	subs	r3, r0, #0
 800daa4:	d00d      	beq.n	800dac2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daaa:	2201      	movs	r2, #1
 800daac:	431a      	orrs	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2235      	movs	r2, #53	@ 0x35
 800dab6:	2101      	movs	r1, #1
 800dab8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800daba:	2317      	movs	r3, #23
 800dabc:	18fb      	adds	r3, r7, r3
 800dabe:	2201      	movs	r2, #1
 800dac0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	2364      	movs	r3, #100	@ 0x64
 800dac6:	2200      	movs	r2, #0
 800dac8:	2180      	movs	r1, #128	@ 0x80
 800daca:	f000 f8f1 	bl	800dcb0 <I2S_WaitFlagStateUntilTimeout>
 800dace:	1e03      	subs	r3, r0, #0
 800dad0:	d00d      	beq.n	800daee <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dad6:	2201      	movs	r2, #1
 800dad8:	431a      	orrs	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2235      	movs	r2, #53	@ 0x35
 800dae2:	2101      	movs	r1, #1
 800dae4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800dae6:	2317      	movs	r3, #23
 800dae8:	18fb      	adds	r3, r7, r3
 800daea:	2201      	movs	r2, #1
 800daec:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	69da      	ldr	r2, [r3, #28]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4938      	ldr	r1, [pc, #224]	@ (800dbdc <HAL_I2S_DMAStop+0x194>)
 800dafa:	400a      	ands	r2, r1
 800dafc:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800dafe:	2300      	movs	r3, #0
 800db00:	613b      	str	r3, [r7, #16]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	613b      	str	r3, [r7, #16]
 800db0a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2102      	movs	r1, #2
 800db18:	438a      	bics	r2, r1
 800db1a:	605a      	str	r2, [r3, #4]
 800db1c:	e053      	b.n	800dbc6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	23c0      	movs	r3, #192	@ 0xc0
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	429a      	cmp	r2, r3
 800db28:	d005      	beq.n	800db36 <HAL_I2S_DMAStop+0xee>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	2380      	movs	r3, #128	@ 0x80
 800db30:	005b      	lsls	r3, r3, #1
 800db32:	429a      	cmp	r2, r3
 800db34:	d147      	bne.n	800dbc6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d010      	beq.n	800db60 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db42:	0018      	movs	r0, r3
 800db44:	f7fc ffb8 	bl	800aab8 <HAL_DMA_Abort>
 800db48:	1e03      	subs	r3, r0, #0
 800db4a:	d009      	beq.n	800db60 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db50:	2208      	movs	r2, #8
 800db52:	431a      	orrs	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800db58:	2317      	movs	r3, #23
 800db5a:	18fb      	adds	r3, r7, r3
 800db5c:	2201      	movs	r2, #1
 800db5e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	69da      	ldr	r2, [r3, #28]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	491c      	ldr	r1, [pc, #112]	@ (800dbdc <HAL_I2S_DMAStop+0x194>)
 800db6c:	400a      	ands	r2, r1
 800db6e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800db70:	2300      	movs	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	60fb      	str	r3, [r7, #12]
 800db84:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2101      	movs	r1, #1
 800db92:	438a      	bics	r2, r1
 800db94:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	685a      	ldr	r2, [r3, #4]
 800db9a:	2380      	movs	r3, #128	@ 0x80
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d10e      	bne.n	800dbc0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba6:	2240      	movs	r2, #64	@ 0x40
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2235      	movs	r2, #53	@ 0x35
 800dbb2:	2101      	movs	r1, #1
 800dbb4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800dbb6:	2317      	movs	r3, #23
 800dbb8:	18fb      	adds	r3, r7, r3
 800dbba:	2201      	movs	r2, #1
 800dbbc:	701a      	strb	r2, [r3, #0]
 800dbbe:	e002      	b.n	800dbc6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2235      	movs	r2, #53	@ 0x35
 800dbca:	2101      	movs	r1, #1
 800dbcc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800dbce:	2317      	movs	r3, #23
 800dbd0:	18fb      	adds	r3, r7, r3
 800dbd2:	781b      	ldrb	r3, [r3, #0]
}
 800dbd4:	0018      	movs	r0, r3
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	b006      	add	sp, #24
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	fffffbff 	.word	0xfffffbff

0800dbe0 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800dbe8:	46c0      	nop			@ (mov r8, r8)
 800dbea:	46bd      	mov	sp, r7
 800dbec:	b002      	add	sp, #8
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800dbf8:	46c0      	nop			@ (mov r8, r8)
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	b002      	add	sp, #8
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	69db      	ldr	r3, [r3, #28]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10e      	bne.n	800dc34 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2101      	movs	r1, #1
 800dc22:	438a      	bics	r2, r1
 800dc24:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2235      	movs	r2, #53	@ 0x35
 800dc30:	2101      	movs	r1, #1
 800dc32:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	0018      	movs	r0, r3
 800dc38:	f7f9 fa24 	bl	8007084 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dc3c:	46c0      	nop			@ (mov r8, r8)
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	b004      	add	sp, #16
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc50:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	0018      	movs	r0, r3
 800dc56:	f7ff ffc3 	bl	800dbe0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dc5a:	46c0      	nop			@ (mov r8, r8)
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	b004      	add	sp, #16
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b084      	sub	sp, #16
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc6e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	685a      	ldr	r2, [r3, #4]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2103      	movs	r1, #3
 800dc7c:	438a      	bics	r2, r1
 800dc7e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2200      	movs	r2, #0
 800dc84:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2235      	movs	r2, #53	@ 0x35
 800dc90:	2101      	movs	r1, #1
 800dc92:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc98:	2208      	movs	r2, #8
 800dc9a:	431a      	orrs	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	0018      	movs	r0, r3
 800dca4:	f7ff ffa4 	bl	800dbf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dca8:	46c0      	nop			@ (mov r8, r8)
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	b004      	add	sp, #16
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	603b      	str	r3, [r7, #0]
 800dcbc:	1dfb      	adds	r3, r7, #7
 800dcbe:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800dcc0:	f7fc f916 	bl	8009ef0 <HAL_GetTick>
 800dcc4:	0003      	movs	r3, r0
 800dcc6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800dcc8:	e017      	b.n	800dcfa <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	3301      	adds	r3, #1
 800dcce:	d014      	beq.n	800dcfa <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800dcd0:	f7fc f90e 	bl	8009ef0 <HAL_GetTick>
 800dcd4:	0002      	movs	r2, r0
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	683a      	ldr	r2, [r7, #0]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d902      	bls.n	800dce6 <I2S_WaitFlagStateUntilTimeout+0x36>
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d109      	bne.n	800dcfa <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2235      	movs	r2, #53	@ 0x35
 800dcea:	2101      	movs	r1, #1
 800dcec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2234      	movs	r2, #52	@ 0x34
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	e00f      	b.n	800dd1a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	4013      	ands	r3, r2
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	425a      	negs	r2, r3
 800dd0a:	4153      	adcs	r3, r2
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	001a      	movs	r2, r3
 800dd10:	1dfb      	adds	r3, r7, #7
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d1d8      	bne.n	800dcca <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	0018      	movs	r0, r3
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	b006      	add	sp, #24
 800dd20:	bd80      	pop	{r7, pc}
	...

0800dd24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd26:	b08b      	sub	sp, #44	@ 0x2c
 800dd28:	af06      	add	r7, sp, #24
 800dd2a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d101      	bne.n	800dd36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e0f0      	b.n	800df18 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4a79      	ldr	r2, [pc, #484]	@ (800df20 <HAL_PCD_Init+0x1fc>)
 800dd3a:	5c9b      	ldrb	r3, [r3, r2]
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d108      	bne.n	800dd54 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	23aa      	movs	r3, #170	@ 0xaa
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	2100      	movs	r1, #0
 800dd4a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	0018      	movs	r0, r3
 800dd50:	f009 f8d8 	bl	8016f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a72      	ldr	r2, [pc, #456]	@ (800df20 <HAL_PCD_Init+0x1fc>)
 800dd58:	2103      	movs	r1, #3
 800dd5a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	0018      	movs	r0, r3
 800dd62:	f005 f88b 	bl	8012e7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd66:	230f      	movs	r3, #15
 800dd68:	18fb      	adds	r3, r7, r3
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	e049      	b.n	800de04 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dd70:	200f      	movs	r0, #15
 800dd72:	183b      	adds	r3, r7, r0
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	6879      	ldr	r1, [r7, #4]
 800dd78:	1c5a      	adds	r2, r3, #1
 800dd7a:	0013      	movs	r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	189b      	adds	r3, r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	18cb      	adds	r3, r1, r3
 800dd84:	3301      	adds	r3, #1
 800dd86:	2201      	movs	r2, #1
 800dd88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dd8a:	183b      	adds	r3, r7, r0
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	0013      	movs	r3, r2
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	189b      	adds	r3, r3, r2
 800dd98:	00db      	lsls	r3, r3, #3
 800dd9a:	183a      	adds	r2, r7, r0
 800dd9c:	7812      	ldrb	r2, [r2, #0]
 800dd9e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dda0:	183b      	adds	r3, r7, r0
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	6879      	ldr	r1, [r7, #4]
 800dda6:	1c5a      	adds	r2, r3, #1
 800dda8:	0013      	movs	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	189b      	adds	r3, r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	18cb      	adds	r3, r1, r3
 800ddb2:	3303      	adds	r3, #3
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ddb8:	183b      	adds	r3, r7, r0
 800ddba:	781a      	ldrb	r2, [r3, #0]
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	0013      	movs	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	189b      	adds	r3, r3, r2
 800ddc4:	00db      	lsls	r3, r3, #3
 800ddc6:	18cb      	adds	r3, r1, r3
 800ddc8:	3338      	adds	r3, #56	@ 0x38
 800ddca:	2200      	movs	r2, #0
 800ddcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ddce:	183b      	adds	r3, r7, r0
 800ddd0:	781a      	ldrb	r2, [r3, #0]
 800ddd2:	6879      	ldr	r1, [r7, #4]
 800ddd4:	0013      	movs	r3, r2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	189b      	adds	r3, r3, r2
 800ddda:	00db      	lsls	r3, r3, #3
 800dddc:	18cb      	adds	r3, r1, r3
 800ddde:	333c      	adds	r3, #60	@ 0x3c
 800dde0:	2200      	movs	r2, #0
 800dde2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dde4:	183b      	adds	r3, r7, r0
 800dde6:	781a      	ldrb	r2, [r3, #0]
 800dde8:	6879      	ldr	r1, [r7, #4]
 800ddea:	0013      	movs	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	189b      	adds	r3, r3, r2
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	18cb      	adds	r3, r1, r3
 800ddf4:	3340      	adds	r3, #64	@ 0x40
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ddfa:	183b      	adds	r3, r7, r0
 800ddfc:	781a      	ldrb	r2, [r3, #0]
 800ddfe:	183b      	adds	r3, r7, r0
 800de00:	3201      	adds	r2, #1
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	210f      	movs	r1, #15
 800de06:	187b      	adds	r3, r7, r1
 800de08:	781a      	ldrb	r2, [r3, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d3ae      	bcc.n	800dd70 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800de12:	187b      	adds	r3, r7, r1
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
 800de18:	e056      	b.n	800dec8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800de1a:	240f      	movs	r4, #15
 800de1c:	193b      	adds	r3, r7, r4
 800de1e:	781a      	ldrb	r2, [r3, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	236a      	movs	r3, #106	@ 0x6a
 800de24:	33ff      	adds	r3, #255	@ 0xff
 800de26:	0019      	movs	r1, r3
 800de28:	0013      	movs	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	189b      	adds	r3, r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	18c3      	adds	r3, r0, r3
 800de32:	185b      	adds	r3, r3, r1
 800de34:	2200      	movs	r2, #0
 800de36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800de38:	193b      	adds	r3, r7, r4
 800de3a:	781a      	ldrb	r2, [r3, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	23b4      	movs	r3, #180	@ 0xb4
 800de40:	0059      	lsls	r1, r3, #1
 800de42:	0013      	movs	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	189b      	adds	r3, r3, r2
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	18c3      	adds	r3, r0, r3
 800de4c:	185b      	adds	r3, r3, r1
 800de4e:	193a      	adds	r2, r7, r4
 800de50:	7812      	ldrb	r2, [r2, #0]
 800de52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800de54:	193b      	adds	r3, r7, r4
 800de56:	781a      	ldrb	r2, [r3, #0]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	236c      	movs	r3, #108	@ 0x6c
 800de5c:	33ff      	adds	r3, #255	@ 0xff
 800de5e:	0019      	movs	r1, r3
 800de60:	0013      	movs	r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	189b      	adds	r3, r3, r2
 800de66:	00db      	lsls	r3, r3, #3
 800de68:	18c3      	adds	r3, r0, r3
 800de6a:	185b      	adds	r3, r3, r1
 800de6c:	2200      	movs	r2, #0
 800de6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800de70:	193b      	adds	r3, r7, r4
 800de72:	781a      	ldrb	r2, [r3, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	23bc      	movs	r3, #188	@ 0xbc
 800de78:	0059      	lsls	r1, r3, #1
 800de7a:	0013      	movs	r3, r2
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	189b      	adds	r3, r3, r2
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	18c3      	adds	r3, r0, r3
 800de84:	185b      	adds	r3, r3, r1
 800de86:	2200      	movs	r2, #0
 800de88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800de8a:	193b      	adds	r3, r7, r4
 800de8c:	781a      	ldrb	r2, [r3, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	23be      	movs	r3, #190	@ 0xbe
 800de92:	0059      	lsls	r1, r3, #1
 800de94:	0013      	movs	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	189b      	adds	r3, r3, r2
 800de9a:	00db      	lsls	r3, r3, #3
 800de9c:	18c3      	adds	r3, r0, r3
 800de9e:	185b      	adds	r3, r3, r1
 800dea0:	2200      	movs	r2, #0
 800dea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dea4:	193b      	adds	r3, r7, r4
 800dea6:	781a      	ldrb	r2, [r3, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	23c0      	movs	r3, #192	@ 0xc0
 800deac:	0059      	lsls	r1, r3, #1
 800deae:	0013      	movs	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	189b      	adds	r3, r3, r2
 800deb4:	00db      	lsls	r3, r3, #3
 800deb6:	18c3      	adds	r3, r0, r3
 800deb8:	185b      	adds	r3, r3, r1
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800debe:	193b      	adds	r3, r7, r4
 800dec0:	781a      	ldrb	r2, [r3, #0]
 800dec2:	193b      	adds	r3, r7, r4
 800dec4:	3201      	adds	r2, #1
 800dec6:	701a      	strb	r2, [r3, #0]
 800dec8:	230f      	movs	r3, #15
 800deca:	18fb      	adds	r3, r7, r3
 800decc:	781a      	ldrb	r2, [r3, #0]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d3a1      	bcc.n	800de1a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6818      	ldr	r0, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	466a      	mov	r2, sp
 800dede:	0011      	movs	r1, r2
 800dee0:	001a      	movs	r2, r3
 800dee2:	3210      	adds	r2, #16
 800dee4:	ca70      	ldmia	r2!, {r4, r5, r6}
 800dee6:	c170      	stmia	r1!, {r4, r5, r6}
 800dee8:	ca30      	ldmia	r2!, {r4, r5}
 800deea:	c130      	stmia	r1!, {r4, r5}
 800deec:	6859      	ldr	r1, [r3, #4]
 800deee:	689a      	ldr	r2, [r3, #8]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	f004 ffdd 	bl	8012eb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2224      	movs	r2, #36	@ 0x24
 800defa:	2100      	movs	r1, #0
 800defc:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4a07      	ldr	r2, [pc, #28]	@ (800df20 <HAL_PCD_Init+0x1fc>)
 800df02:	2101      	movs	r1, #1
 800df04:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	69db      	ldr	r3, [r3, #28]
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	d103      	bne.n	800df16 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	0018      	movs	r0, r3
 800df12:	f001 fd23 	bl	800f95c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	0018      	movs	r0, r3
 800df1a:	46bd      	mov	sp, r7
 800df1c:	b005      	add	sp, #20
 800df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df20:	000002a9 	.word	0x000002a9

0800df24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	23aa      	movs	r3, #170	@ 0xaa
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	5cd3      	ldrb	r3, [r2, r3]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d101      	bne.n	800df3c <HAL_PCD_Start+0x18>
 800df38:	2302      	movs	r3, #2
 800df3a:	e014      	b.n	800df66 <HAL_PCD_Start+0x42>
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	23aa      	movs	r3, #170	@ 0xaa
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	2101      	movs	r1, #1
 800df44:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	0018      	movs	r0, r3
 800df4c:	f004 ff80 	bl	8012e50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	0018      	movs	r0, r3
 800df56:	f006 ff83 	bl	8014e60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	23aa      	movs	r3, #170	@ 0xaa
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	2100      	movs	r1, #0
 800df62:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	0018      	movs	r0, r3
 800df68:	46bd      	mov	sp, r7
 800df6a:	b002      	add	sp, #8
 800df6c:	bd80      	pop	{r7, pc}
	...

0800df70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	0018      	movs	r0, r3
 800df7e:	f006 ff85 	bl	8014e8c <USB_ReadInterrupts>
 800df82:	0003      	movs	r3, r0
 800df84:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	2380      	movs	r3, #128	@ 0x80
 800df8a:	021b      	lsls	r3, r3, #8
 800df8c:	4013      	ands	r3, r2
 800df8e:	d004      	beq.n	800df9a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	0018      	movs	r0, r3
 800df94:	f000 fb62 	bl	800e65c <PCD_EP_ISR_Handler>

    return;
 800df98:	e11d      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	2380      	movs	r3, #128	@ 0x80
 800df9e:	00db      	lsls	r3, r3, #3
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	d015      	beq.n	800dfd0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2244      	movs	r2, #68	@ 0x44
 800dfaa:	5a9b      	ldrh	r3, [r3, r2]
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	498a      	ldr	r1, [pc, #552]	@ (800e1dc <HAL_PCD_IRQHandler+0x26c>)
 800dfb4:	400a      	ands	r2, r1
 800dfb6:	b291      	uxth	r1, r2
 800dfb8:	2244      	movs	r2, #68	@ 0x44
 800dfba:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	0018      	movs	r0, r3
 800dfc0:	f009 f823 	bl	801700a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	0018      	movs	r0, r3
 800dfca:	f000 f915 	bl	800e1f8 <HAL_PCD_SetAddress>

    return;
 800dfce:	e102      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800dfd0:	68fa      	ldr	r2, [r7, #12]
 800dfd2:	2380      	movs	r3, #128	@ 0x80
 800dfd4:	01db      	lsls	r3, r3, #7
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	d00c      	beq.n	800dff4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2244      	movs	r2, #68	@ 0x44
 800dfe0:	5a9b      	ldrh	r3, [r3, r2]
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	497d      	ldr	r1, [pc, #500]	@ (800e1e0 <HAL_PCD_IRQHandler+0x270>)
 800dfea:	400a      	ands	r2, r1
 800dfec:	b291      	uxth	r1, r2
 800dfee:	2244      	movs	r2, #68	@ 0x44
 800dff0:	5299      	strh	r1, [r3, r2]

    return;
 800dff2:	e0f0      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	2380      	movs	r3, #128	@ 0x80
 800dff8:	019b      	lsls	r3, r3, #6
 800dffa:	4013      	ands	r3, r2
 800dffc:	d00c      	beq.n	800e018 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2244      	movs	r2, #68	@ 0x44
 800e004:	5a9b      	ldrh	r3, [r3, r2]
 800e006:	b29a      	uxth	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4975      	ldr	r1, [pc, #468]	@ (800e1e4 <HAL_PCD_IRQHandler+0x274>)
 800e00e:	400a      	ands	r2, r1
 800e010:	b291      	uxth	r1, r2
 800e012:	2244      	movs	r2, #68	@ 0x44
 800e014:	5299      	strh	r1, [r3, r2]

    return;
 800e016:	e0de      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	2380      	movs	r3, #128	@ 0x80
 800e01c:	015b      	lsls	r3, r3, #5
 800e01e:	4013      	ands	r3, r2
 800e020:	d038      	beq.n	800e094 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2240      	movs	r2, #64	@ 0x40
 800e028:	5a9b      	ldrh	r3, [r3, r2]
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	2104      	movs	r1, #4
 800e032:	438a      	bics	r2, r1
 800e034:	b291      	uxth	r1, r2
 800e036:	2240      	movs	r2, #64	@ 0x40
 800e038:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2240      	movs	r2, #64	@ 0x40
 800e040:	5a9b      	ldrh	r3, [r3, r2]
 800e042:	b29a      	uxth	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2108      	movs	r1, #8
 800e04a:	438a      	bics	r2, r1
 800e04c:	b291      	uxth	r1, r2
 800e04e:	2240      	movs	r2, #64	@ 0x40
 800e050:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	23b8      	movs	r3, #184	@ 0xb8
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	5cd3      	ldrb	r3, [r2, r3]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d109      	bne.n	800e072 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	23b8      	movs	r3, #184	@ 0xb8
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	2100      	movs	r1, #0
 800e066:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2100      	movs	r1, #0
 800e06c:	0018      	movs	r0, r3
 800e06e:	f001 fc9f 	bl	800f9b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	0018      	movs	r0, r3
 800e076:	f009 f809 	bl	801708c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2244      	movs	r2, #68	@ 0x44
 800e080:	5a9b      	ldrh	r3, [r3, r2]
 800e082:	b29a      	uxth	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4957      	ldr	r1, [pc, #348]	@ (800e1e8 <HAL_PCD_IRQHandler+0x278>)
 800e08a:	400a      	ands	r2, r1
 800e08c:	b291      	uxth	r1, r2
 800e08e:	2244      	movs	r2, #68	@ 0x44
 800e090:	5299      	strh	r1, [r3, r2]

    return;
 800e092:	e0a0      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	2380      	movs	r3, #128	@ 0x80
 800e098:	011b      	lsls	r3, r3, #4
 800e09a:	4013      	ands	r3, r2
 800e09c:	d028      	beq.n	800e0f0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2240      	movs	r2, #64	@ 0x40
 800e0a4:	5a9b      	ldrh	r3, [r3, r2]
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2108      	movs	r1, #8
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	b291      	uxth	r1, r2
 800e0b2:	2240      	movs	r2, #64	@ 0x40
 800e0b4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2244      	movs	r2, #68	@ 0x44
 800e0bc:	5a9b      	ldrh	r3, [r3, r2]
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4949      	ldr	r1, [pc, #292]	@ (800e1ec <HAL_PCD_IRQHandler+0x27c>)
 800e0c6:	400a      	ands	r2, r1
 800e0c8:	b291      	uxth	r1, r2
 800e0ca:	2244      	movs	r2, #68	@ 0x44
 800e0cc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2240      	movs	r2, #64	@ 0x40
 800e0d4:	5a9b      	ldrh	r3, [r3, r2]
 800e0d6:	b29a      	uxth	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2104      	movs	r1, #4
 800e0de:	430a      	orrs	r2, r1
 800e0e0:	b291      	uxth	r1, r2
 800e0e2:	2240      	movs	r2, #64	@ 0x40
 800e0e4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	f008 ffb3 	bl	8017054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e0ee:	e072      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2280      	movs	r2, #128	@ 0x80
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	d046      	beq.n	800e186 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2244      	movs	r2, #68	@ 0x44
 800e0fe:	5a9b      	ldrh	r3, [r3, r2]
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2180      	movs	r1, #128	@ 0x80
 800e108:	438a      	bics	r2, r1
 800e10a:	b291      	uxth	r1, r2
 800e10c:	2244      	movs	r2, #68	@ 0x44
 800e10e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	23b8      	movs	r3, #184	@ 0xb8
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	5cd3      	ldrb	r3, [r2, r3]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d12f      	bne.n	800e17c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2240      	movs	r2, #64	@ 0x40
 800e122:	5a9b      	ldrh	r3, [r3, r2]
 800e124:	b29a      	uxth	r2, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2104      	movs	r1, #4
 800e12c:	430a      	orrs	r2, r1
 800e12e:	b291      	uxth	r1, r2
 800e130:	2240      	movs	r2, #64	@ 0x40
 800e132:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2240      	movs	r2, #64	@ 0x40
 800e13a:	5a9b      	ldrh	r3, [r3, r2]
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2108      	movs	r1, #8
 800e144:	430a      	orrs	r2, r1
 800e146:	b291      	uxth	r1, r2
 800e148:	2240      	movs	r2, #64	@ 0x40
 800e14a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	23b8      	movs	r3, #184	@ 0xb8
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	2101      	movs	r1, #1
 800e154:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2254      	movs	r2, #84	@ 0x54
 800e15c:	5a9b      	ldrh	r3, [r3, r2]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	089b      	lsrs	r3, r3, #2
 800e162:	223c      	movs	r2, #60	@ 0x3c
 800e164:	4013      	ands	r3, r2
 800e166:	0019      	movs	r1, r3
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	23b9      	movs	r3, #185	@ 0xb9
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2101      	movs	r1, #1
 800e174:	0018      	movs	r0, r3
 800e176:	f001 fc1b 	bl	800f9b0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800e17a:	e02c      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	0018      	movs	r0, r3
 800e180:	f008 ff68 	bl	8017054 <HAL_PCD_SuspendCallback>
    return;
 800e184:	e027      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	2380      	movs	r3, #128	@ 0x80
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4013      	ands	r3, r2
 800e18e:	d010      	beq.n	800e1b2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2244      	movs	r2, #68	@ 0x44
 800e196:	5a9b      	ldrh	r3, [r3, r2]
 800e198:	b29a      	uxth	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4914      	ldr	r1, [pc, #80]	@ (800e1f0 <HAL_PCD_IRQHandler+0x280>)
 800e1a0:	400a      	ands	r2, r1
 800e1a2:	b291      	uxth	r1, r2
 800e1a4:	2244      	movs	r2, #68	@ 0x44
 800e1a6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	0018      	movs	r0, r3
 800e1ac:	f008 ff1e 	bl	8016fec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e1b0:	e011      	b.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	2380      	movs	r3, #128	@ 0x80
 800e1b6:	005b      	lsls	r3, r3, #1
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	d00c      	beq.n	800e1d6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2244      	movs	r2, #68	@ 0x44
 800e1c2:	5a9b      	ldrh	r3, [r3, r2]
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	490a      	ldr	r1, [pc, #40]	@ (800e1f4 <HAL_PCD_IRQHandler+0x284>)
 800e1cc:	400a      	ands	r2, r1
 800e1ce:	b291      	uxth	r1, r2
 800e1d0:	2244      	movs	r2, #68	@ 0x44
 800e1d2:	5299      	strh	r1, [r3, r2]

    return;
 800e1d4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	b004      	add	sp, #16
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	fffffbff 	.word	0xfffffbff
 800e1e0:	ffffbfff 	.word	0xffffbfff
 800e1e4:	ffffdfff 	.word	0xffffdfff
 800e1e8:	ffffefff 	.word	0xffffefff
 800e1ec:	fffff7ff 	.word	0xfffff7ff
 800e1f0:	fffffdff 	.word	0xfffffdff
 800e1f4:	fffffeff 	.word	0xfffffeff

0800e1f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	000a      	movs	r2, r1
 800e202:	1cfb      	adds	r3, r7, #3
 800e204:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	23aa      	movs	r3, #170	@ 0xaa
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	5cd3      	ldrb	r3, [r2, r3]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d101      	bne.n	800e216 <HAL_PCD_SetAddress+0x1e>
 800e212:	2302      	movs	r3, #2
 800e214:	e017      	b.n	800e246 <HAL_PCD_SetAddress+0x4e>
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	23aa      	movs	r3, #170	@ 0xaa
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	2101      	movs	r1, #1
 800e21e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	1cfa      	adds	r2, r7, #3
 800e224:	2124      	movs	r1, #36	@ 0x24
 800e226:	7812      	ldrb	r2, [r2, #0]
 800e228:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	1cfb      	adds	r3, r7, #3
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	0019      	movs	r1, r3
 800e234:	0010      	movs	r0, r2
 800e236:	f006 fdff 	bl	8014e38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	23aa      	movs	r3, #170	@ 0xaa
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	2100      	movs	r1, #0
 800e242:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	0018      	movs	r0, r3
 800e248:	46bd      	mov	sp, r7
 800e24a:	b002      	add	sp, #8
 800e24c:	bd80      	pop	{r7, pc}

0800e24e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e24e:	b590      	push	{r4, r7, lr}
 800e250:	b085      	sub	sp, #20
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
 800e256:	000c      	movs	r4, r1
 800e258:	0010      	movs	r0, r2
 800e25a:	0019      	movs	r1, r3
 800e25c:	1cfb      	adds	r3, r7, #3
 800e25e:	1c22      	adds	r2, r4, #0
 800e260:	701a      	strb	r2, [r3, #0]
 800e262:	003b      	movs	r3, r7
 800e264:	1c02      	adds	r2, r0, #0
 800e266:	801a      	strh	r2, [r3, #0]
 800e268:	1cbb      	adds	r3, r7, #2
 800e26a:	1c0a      	adds	r2, r1, #0
 800e26c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e26e:	230b      	movs	r3, #11
 800e270:	18fb      	adds	r3, r7, r3
 800e272:	2200      	movs	r2, #0
 800e274:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e276:	1cfb      	adds	r3, r7, #3
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	b25b      	sxtb	r3, r3
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	da0f      	bge.n	800e2a0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e280:	1cfb      	adds	r3, r7, #3
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	2207      	movs	r2, #7
 800e286:	4013      	ands	r3, r2
 800e288:	1c5a      	adds	r2, r3, #1
 800e28a:	0013      	movs	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	189b      	adds	r3, r3, r2
 800e290:	00db      	lsls	r3, r3, #3
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	18d3      	adds	r3, r2, r3
 800e296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2201      	movs	r2, #1
 800e29c:	705a      	strb	r2, [r3, #1]
 800e29e:	e00f      	b.n	800e2c0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e2a0:	1cfb      	adds	r3, r7, #3
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	2207      	movs	r2, #7
 800e2a6:	401a      	ands	r2, r3
 800e2a8:	0013      	movs	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	189b      	adds	r3, r3, r2
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	3369      	adds	r3, #105	@ 0x69
 800e2b2:	33ff      	adds	r3, #255	@ 0xff
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	18d3      	adds	r3, r2, r3
 800e2b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e2c0:	1cfb      	adds	r3, r7, #3
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	2207      	movs	r2, #7
 800e2c6:	4013      	ands	r3, r2
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e2ce:	003b      	movs	r3, r7
 800e2d0:	881a      	ldrh	r2, [r3, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	1cba      	adds	r2, r7, #2
 800e2da:	7812      	ldrb	r2, [r2, #0]
 800e2dc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e2de:	1cbb      	adds	r3, r7, #2
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b02      	cmp	r3, #2
 800e2e4:	d102      	bne.n	800e2ec <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	23aa      	movs	r3, #170	@ 0xaa
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	5cd3      	ldrb	r3, [r2, r3]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d101      	bne.n	800e2fc <HAL_PCD_EP_Open+0xae>
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	e013      	b.n	800e324 <HAL_PCD_EP_Open+0xd6>
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	23aa      	movs	r3, #170	@ 0xaa
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	2101      	movs	r1, #1
 800e304:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	0011      	movs	r1, r2
 800e30e:	0018      	movs	r0, r3
 800e310:	f004 fdf6 	bl	8012f00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	23aa      	movs	r3, #170	@ 0xaa
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	2100      	movs	r1, #0
 800e31c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e31e:	230b      	movs	r3, #11
 800e320:	18fb      	adds	r3, r7, r3
 800e322:	781b      	ldrb	r3, [r3, #0]
}
 800e324:	0018      	movs	r0, r3
 800e326:	46bd      	mov	sp, r7
 800e328:	b005      	add	sp, #20
 800e32a:	bd90      	pop	{r4, r7, pc}

0800e32c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	000a      	movs	r2, r1
 800e336:	1cfb      	adds	r3, r7, #3
 800e338:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e33a:	1cfb      	adds	r3, r7, #3
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	b25b      	sxtb	r3, r3
 800e340:	2b00      	cmp	r3, #0
 800e342:	da0f      	bge.n	800e364 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e344:	1cfb      	adds	r3, r7, #3
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	2207      	movs	r2, #7
 800e34a:	4013      	ands	r3, r2
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	0013      	movs	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	189b      	adds	r3, r3, r2
 800e354:	00db      	lsls	r3, r3, #3
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	18d3      	adds	r3, r2, r3
 800e35a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2201      	movs	r2, #1
 800e360:	705a      	strb	r2, [r3, #1]
 800e362:	e00f      	b.n	800e384 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e364:	1cfb      	adds	r3, r7, #3
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	2207      	movs	r2, #7
 800e36a:	401a      	ands	r2, r3
 800e36c:	0013      	movs	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	189b      	adds	r3, r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	3369      	adds	r3, #105	@ 0x69
 800e376:	33ff      	adds	r3, #255	@ 0xff
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	18d3      	adds	r3, r2, r3
 800e37c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e384:	1cfb      	adds	r3, r7, #3
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2207      	movs	r2, #7
 800e38a:	4013      	ands	r3, r2
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	23aa      	movs	r3, #170	@ 0xaa
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	5cd3      	ldrb	r3, [r2, r3]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d101      	bne.n	800e3a2 <HAL_PCD_EP_Close+0x76>
 800e39e:	2302      	movs	r3, #2
 800e3a0:	e011      	b.n	800e3c6 <HAL_PCD_EP_Close+0x9a>
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	23aa      	movs	r3, #170	@ 0xaa
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	2101      	movs	r1, #1
 800e3aa:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	0011      	movs	r1, r2
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	f005 f945 	bl	8013644 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	23aa      	movs	r3, #170	@ 0xaa
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	0018      	movs	r0, r3
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	b004      	add	sp, #16
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b086      	sub	sp, #24
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	60f8      	str	r0, [r7, #12]
 800e3d6:	607a      	str	r2, [r7, #4]
 800e3d8:	603b      	str	r3, [r7, #0]
 800e3da:	200b      	movs	r0, #11
 800e3dc:	183b      	adds	r3, r7, r0
 800e3de:	1c0a      	adds	r2, r1, #0
 800e3e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e3e2:	0001      	movs	r1, r0
 800e3e4:	187b      	adds	r3, r7, r1
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	2207      	movs	r2, #7
 800e3ea:	401a      	ands	r2, r3
 800e3ec:	0013      	movs	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	189b      	adds	r3, r3, r2
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	3369      	adds	r3, #105	@ 0x69
 800e3f6:	33ff      	adds	r3, #255	@ 0xff
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	18d3      	adds	r3, r2, r3
 800e3fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2200      	movs	r2, #0
 800e40e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	2200      	movs	r2, #0
 800e414:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e416:	187b      	adds	r3, r7, r1
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	2207      	movs	r2, #7
 800e41c:	4013      	ands	r3, r2
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	0011      	movs	r1, r2
 800e42c:	0018      	movs	r0, r3
 800e42e:	f005 fac9 	bl	80139c4 <USB_EPStartXfer>

  return HAL_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	0018      	movs	r0, r3
 800e436:	46bd      	mov	sp, r7
 800e438:	b006      	add	sp, #24
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	000a      	movs	r2, r1
 800e446:	1cfb      	adds	r3, r7, #3
 800e448:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e44a:	1cfb      	adds	r3, r7, #3
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2207      	movs	r2, #7
 800e450:	401a      	ands	r2, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	23c2      	movs	r3, #194	@ 0xc2
 800e456:	0059      	lsls	r1, r3, #1
 800e458:	0013      	movs	r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	189b      	adds	r3, r3, r2
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	18c3      	adds	r3, r0, r3
 800e462:	185b      	adds	r3, r3, r1
 800e464:	681b      	ldr	r3, [r3, #0]
}
 800e466:	0018      	movs	r0, r3
 800e468:	46bd      	mov	sp, r7
 800e46a:	b002      	add	sp, #8
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b086      	sub	sp, #24
 800e472:	af00      	add	r7, sp, #0
 800e474:	60f8      	str	r0, [r7, #12]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	603b      	str	r3, [r7, #0]
 800e47a:	200b      	movs	r0, #11
 800e47c:	183b      	adds	r3, r7, r0
 800e47e:	1c0a      	adds	r2, r1, #0
 800e480:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e482:	183b      	adds	r3, r7, r0
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2207      	movs	r2, #7
 800e488:	4013      	ands	r3, r2
 800e48a:	1c5a      	adds	r2, r3, #1
 800e48c:	0013      	movs	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	189b      	adds	r3, r3, r2
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	18d3      	adds	r3, r2, r3
 800e498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	2224      	movs	r2, #36	@ 0x24
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	683a      	ldr	r2, [r7, #0]
 800e4b2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e4c0:	183b      	adds	r3, r7, r0
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	2207      	movs	r2, #7
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	0011      	movs	r1, r2
 800e4d6:	0018      	movs	r0, r3
 800e4d8:	f005 fa74 	bl	80139c4 <USB_EPStartXfer>

  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	0018      	movs	r0, r3
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	b006      	add	sp, #24
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b084      	sub	sp, #16
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
 800e4ee:	000a      	movs	r2, r1
 800e4f0:	1cfb      	adds	r3, r7, #3
 800e4f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e4f4:	1cfb      	adds	r3, r7, #3
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2207      	movs	r2, #7
 800e4fa:	401a      	ands	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	429a      	cmp	r2, r3
 800e502:	d901      	bls.n	800e508 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e504:	2301      	movs	r3, #1
 800e506:	e046      	b.n	800e596 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e508:	1cfb      	adds	r3, r7, #3
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	b25b      	sxtb	r3, r3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	da0f      	bge.n	800e532 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e512:	1cfb      	adds	r3, r7, #3
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	2207      	movs	r2, #7
 800e518:	4013      	ands	r3, r2
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	0013      	movs	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	189b      	adds	r3, r3, r2
 800e522:	00db      	lsls	r3, r3, #3
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	18d3      	adds	r3, r2, r3
 800e528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2201      	movs	r2, #1
 800e52e:	705a      	strb	r2, [r3, #1]
 800e530:	e00d      	b.n	800e54e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e532:	1cfb      	adds	r3, r7, #3
 800e534:	781a      	ldrb	r2, [r3, #0]
 800e536:	0013      	movs	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	189b      	adds	r3, r3, r2
 800e53c:	00db      	lsls	r3, r3, #3
 800e53e:	3369      	adds	r3, #105	@ 0x69
 800e540:	33ff      	adds	r3, #255	@ 0xff
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	18d3      	adds	r3, r2, r3
 800e546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2201      	movs	r2, #1
 800e552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e554:	1cfb      	adds	r3, r7, #3
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	2207      	movs	r2, #7
 800e55a:	4013      	ands	r3, r2
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	23aa      	movs	r3, #170	@ 0xaa
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	5cd3      	ldrb	r3, [r2, r3]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d101      	bne.n	800e572 <HAL_PCD_EP_SetStall+0x8c>
 800e56e:	2302      	movs	r3, #2
 800e570:	e011      	b.n	800e596 <HAL_PCD_EP_SetStall+0xb0>
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	23aa      	movs	r3, #170	@ 0xaa
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	2101      	movs	r1, #1
 800e57a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	0011      	movs	r1, r2
 800e584:	0018      	movs	r0, r3
 800e586:	f006 fb55 	bl	8014c34 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	23aa      	movs	r3, #170	@ 0xaa
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	2100      	movs	r1, #0
 800e592:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	0018      	movs	r0, r3
 800e598:	46bd      	mov	sp, r7
 800e59a:	b004      	add	sp, #16
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b084      	sub	sp, #16
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	000a      	movs	r2, r1
 800e5a8:	1cfb      	adds	r3, r7, #3
 800e5aa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e5ac:	1cfb      	adds	r3, r7, #3
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	220f      	movs	r2, #15
 800e5b2:	401a      	ands	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d901      	bls.n	800e5c0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e048      	b.n	800e652 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e5c0:	1cfb      	adds	r3, r7, #3
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	b25b      	sxtb	r3, r3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	da0f      	bge.n	800e5ea <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5ca:	1cfb      	adds	r3, r7, #3
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	2207      	movs	r2, #7
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	0013      	movs	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	189b      	adds	r3, r3, r2
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	18d3      	adds	r3, r2, r3
 800e5e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	705a      	strb	r2, [r3, #1]
 800e5e8:	e00f      	b.n	800e60a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5ea:	1cfb      	adds	r3, r7, #3
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	2207      	movs	r2, #7
 800e5f0:	401a      	ands	r2, r3
 800e5f2:	0013      	movs	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	189b      	adds	r3, r3, r2
 800e5f8:	00db      	lsls	r3, r3, #3
 800e5fa:	3369      	adds	r3, #105	@ 0x69
 800e5fc:	33ff      	adds	r3, #255	@ 0xff
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	18d3      	adds	r3, r2, r3
 800e602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e610:	1cfb      	adds	r3, r7, #3
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	2207      	movs	r2, #7
 800e616:	4013      	ands	r3, r2
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	23aa      	movs	r3, #170	@ 0xaa
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	5cd3      	ldrb	r3, [r2, r3]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d101      	bne.n	800e62e <HAL_PCD_EP_ClrStall+0x90>
 800e62a:	2302      	movs	r3, #2
 800e62c:	e011      	b.n	800e652 <HAL_PCD_EP_ClrStall+0xb4>
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	23aa      	movs	r3, #170	@ 0xaa
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	2101      	movs	r1, #1
 800e636:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	0011      	movs	r1, r2
 800e640:	0018      	movs	r0, r3
 800e642:	f006 fb47 	bl	8014cd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	23aa      	movs	r3, #170	@ 0xaa
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	2100      	movs	r1, #0
 800e64e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	0018      	movs	r0, r3
 800e654:	46bd      	mov	sp, r7
 800e656:	b004      	add	sp, #16
 800e658:	bd80      	pop	{r7, pc}
	...

0800e65c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e65c:	b5b0      	push	{r4, r5, r7, lr}
 800e65e:	b096      	sub	sp, #88	@ 0x58
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e664:	f000 fbec 	bl	800ee40 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	204e      	movs	r0, #78	@ 0x4e
 800e66e:	183b      	adds	r3, r7, r0
 800e670:	2144      	movs	r1, #68	@ 0x44
 800e672:	5a52      	ldrh	r2, [r2, r1]
 800e674:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e676:	183b      	adds	r3, r7, r0
 800e678:	881b      	ldrh	r3, [r3, #0]
 800e67a:	b2da      	uxtb	r2, r3
 800e67c:	244d      	movs	r4, #77	@ 0x4d
 800e67e:	193b      	adds	r3, r7, r4
 800e680:	210f      	movs	r1, #15
 800e682:	400a      	ands	r2, r1
 800e684:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800e686:	193b      	adds	r3, r7, r4
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d000      	beq.n	800e690 <PCD_EP_ISR_Handler+0x34>
 800e68e:	e18f      	b.n	800e9b0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e690:	183b      	adds	r3, r7, r0
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	2210      	movs	r2, #16
 800e696:	4013      	ands	r3, r2
 800e698:	d155      	bne.n	800e746 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	881b      	ldrh	r3, [r3, #0]
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	200e      	movs	r0, #14
 800e6a4:	183b      	adds	r3, r7, r0
 800e6a6:	49bb      	ldr	r1, [pc, #748]	@ (800e994 <PCD_EP_ISR_Handler+0x338>)
 800e6a8:	400a      	ands	r2, r1
 800e6aa:	801a      	strh	r2, [r3, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	183a      	adds	r2, r7, r0
 800e6b2:	8812      	ldrh	r2, [r2, #0]
 800e6b4:	49b8      	ldr	r1, [pc, #736]	@ (800e998 <PCD_EP_ISR_Handler+0x33c>)
 800e6b6:	430a      	orrs	r2, r1
 800e6b8:	b292      	uxth	r2, r2
 800e6ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	3328      	adds	r3, #40	@ 0x28
 800e6c0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2250      	movs	r2, #80	@ 0x50
 800e6c8:	5a9b      	ldrh	r3, [r3, r2]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	001a      	movs	r2, r3
 800e6ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	00db      	lsls	r3, r3, #3
 800e6d4:	18d2      	adds	r2, r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	18d3      	adds	r3, r2, r3
 800e6dc:	4aaf      	ldr	r2, [pc, #700]	@ (800e99c <PCD_EP_ISR_Handler+0x340>)
 800e6de:	4694      	mov	ip, r2
 800e6e0:	4463      	add	r3, ip
 800e6e2:	881b      	ldrh	r3, [r3, #0]
 800e6e4:	059b      	lsls	r3, r3, #22
 800e6e6:	0d9a      	lsrs	r2, r3, #22
 800e6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e6ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ee:	695a      	ldr	r2, [r3, #20]
 800e6f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6f2:	69db      	ldr	r3, [r3, #28]
 800e6f4:	18d2      	adds	r2, r2, r3
 800e6f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	0018      	movs	r0, r3
 800e700:	f008 fc56 	bl	8016fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2224      	movs	r2, #36	@ 0x24
 800e708:	5c9b      	ldrb	r3, [r3, r2]
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d101      	bne.n	800e714 <PCD_EP_ISR_Handler+0xb8>
 800e710:	f000 fb96 	bl	800ee40 <PCD_EP_ISR_Handler+0x7e4>
 800e714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e716:	699b      	ldr	r3, [r3, #24]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <PCD_EP_ISR_Handler+0xc4>
 800e71c:	f000 fb90 	bl	800ee40 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2224      	movs	r2, #36	@ 0x24
 800e724:	5c9b      	ldrb	r3, [r3, r2]
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2280      	movs	r2, #128	@ 0x80
 800e72a:	4252      	negs	r2, r2
 800e72c:	4313      	orrs	r3, r2
 800e72e:	b2da      	uxtb	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	0011      	movs	r1, r2
 800e736:	224c      	movs	r2, #76	@ 0x4c
 800e738:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2224      	movs	r2, #36	@ 0x24
 800e73e:	2100      	movs	r1, #0
 800e740:	5499      	strb	r1, [r3, r2]
 800e742:	f000 fb7d 	bl	800ee40 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	3369      	adds	r3, #105	@ 0x69
 800e74a:	33ff      	adds	r3, #255	@ 0xff
 800e74c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	214a      	movs	r1, #74	@ 0x4a
 800e754:	187b      	adds	r3, r7, r1
 800e756:	8812      	ldrh	r2, [r2, #0]
 800e758:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e75a:	187b      	adds	r3, r7, r1
 800e75c:	881a      	ldrh	r2, [r3, #0]
 800e75e:	2380      	movs	r3, #128	@ 0x80
 800e760:	011b      	lsls	r3, r3, #4
 800e762:	4013      	ands	r3, r2
 800e764:	d037      	beq.n	800e7d6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2250      	movs	r2, #80	@ 0x50
 800e76c:	5a9b      	ldrh	r3, [r3, r2]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	001a      	movs	r2, r3
 800e772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	18d2      	adds	r2, r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	18d3      	adds	r3, r2, r3
 800e780:	4a87      	ldr	r2, [pc, #540]	@ (800e9a0 <PCD_EP_ISR_Handler+0x344>)
 800e782:	4694      	mov	ip, r2
 800e784:	4463      	add	r3, ip
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	059b      	lsls	r3, r3, #22
 800e78a:	0d9a      	lsrs	r2, r3, #22
 800e78c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e78e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6818      	ldr	r0, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	22ac      	movs	r2, #172	@ 0xac
 800e798:	0092      	lsls	r2, r2, #2
 800e79a:	1899      	adds	r1, r3, r2
 800e79c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e79e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e7a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	f006 fbc8 	bl	8014f3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	881b      	ldrh	r3, [r3, #0]
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	2010      	movs	r0, #16
 800e7b4:	183b      	adds	r3, r7, r0
 800e7b6:	497b      	ldr	r1, [pc, #492]	@ (800e9a4 <PCD_EP_ISR_Handler+0x348>)
 800e7b8:	400a      	ands	r2, r1
 800e7ba:	801a      	strh	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	183a      	adds	r2, r7, r0
 800e7c2:	8812      	ldrh	r2, [r2, #0]
 800e7c4:	2180      	movs	r1, #128	@ 0x80
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	b292      	uxth	r2, r2
 800e7ca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	0018      	movs	r0, r3
 800e7d0:	f008 fbb8 	bl	8016f44 <HAL_PCD_SetupStageCallback>
 800e7d4:	e334      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e7d6:	234a      	movs	r3, #74	@ 0x4a
 800e7d8:	18fb      	adds	r3, r7, r3
 800e7da:	2200      	movs	r2, #0
 800e7dc:	5e9b      	ldrsh	r3, [r3, r2]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	db00      	blt.n	800e7e4 <PCD_EP_ISR_Handler+0x188>
 800e7e2:	e32d      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	201e      	movs	r0, #30
 800e7ee:	183b      	adds	r3, r7, r0
 800e7f0:	496c      	ldr	r1, [pc, #432]	@ (800e9a4 <PCD_EP_ISR_Handler+0x348>)
 800e7f2:	400a      	ands	r2, r1
 800e7f4:	801a      	strh	r2, [r3, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	183a      	adds	r2, r7, r0
 800e7fc:	8812      	ldrh	r2, [r2, #0]
 800e7fe:	2180      	movs	r1, #128	@ 0x80
 800e800:	430a      	orrs	r2, r1
 800e802:	b292      	uxth	r2, r2
 800e804:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2250      	movs	r2, #80	@ 0x50
 800e80c:	5a9b      	ldrh	r3, [r3, r2]
 800e80e:	b29b      	uxth	r3, r3
 800e810:	001a      	movs	r2, r3
 800e812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	18d2      	adds	r2, r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	18d3      	adds	r3, r2, r3
 800e820:	4a5f      	ldr	r2, [pc, #380]	@ (800e9a0 <PCD_EP_ISR_Handler+0x344>)
 800e822:	4694      	mov	ip, r2
 800e824:	4463      	add	r3, ip
 800e826:	881b      	ldrh	r3, [r3, #0]
 800e828:	059b      	lsls	r3, r3, #22
 800e82a:	0d9a      	lsrs	r2, r3, #22
 800e82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e82e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d01a      	beq.n	800e86e <PCD_EP_ISR_Handler+0x212>
 800e838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d016      	beq.n	800e86e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6818      	ldr	r0, [r3, #0]
 800e844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e846:	6959      	ldr	r1, [r3, #20]
 800e848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e84a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e84c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e84e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e850:	b29b      	uxth	r3, r3
 800e852:	f006 fb72 	bl	8014f3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e858:	695a      	ldr	r2, [r3, #20]
 800e85a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e85c:	69db      	ldr	r3, [r3, #28]
 800e85e:	18d2      	adds	r2, r2, r3
 800e860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e862:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2100      	movs	r1, #0
 800e868:	0018      	movs	r0, r3
 800e86a:	f008 fb80 	bl	8016f6e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	214a      	movs	r1, #74	@ 0x4a
 800e874:	187b      	adds	r3, r7, r1
 800e876:	8812      	ldrh	r2, [r2, #0]
 800e878:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800e87a:	187b      	adds	r3, r7, r1
 800e87c:	881a      	ldrh	r2, [r3, #0]
 800e87e:	2380      	movs	r3, #128	@ 0x80
 800e880:	011b      	lsls	r3, r3, #4
 800e882:	4013      	ands	r3, r2
 800e884:	d000      	beq.n	800e888 <PCD_EP_ISR_Handler+0x22c>
 800e886:	e2db      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
 800e888:	187b      	adds	r3, r7, r1
 800e88a:	881a      	ldrh	r2, [r3, #0]
 800e88c:	23c0      	movs	r3, #192	@ 0xc0
 800e88e:	019b      	lsls	r3, r3, #6
 800e890:	401a      	ands	r2, r3
 800e892:	23c0      	movs	r3, #192	@ 0xc0
 800e894:	019b      	lsls	r3, r3, #6
 800e896:	429a      	cmp	r2, r3
 800e898:	d100      	bne.n	800e89c <PCD_EP_ISR_Handler+0x240>
 800e89a:	e2d1      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	61bb      	str	r3, [r7, #24]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2250      	movs	r2, #80	@ 0x50
 800e8a8:	5a9b      	ldrh	r3, [r3, r2]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	001a      	movs	r2, r3
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	189b      	adds	r3, r3, r2
 800e8b2:	61bb      	str	r3, [r7, #24]
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	4a3a      	ldr	r2, [pc, #232]	@ (800e9a0 <PCD_EP_ISR_Handler+0x344>)
 800e8b8:	4694      	mov	ip, r2
 800e8ba:	4463      	add	r3, ip
 800e8bc:	617b      	str	r3, [r7, #20]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	881b      	ldrh	r3, [r3, #0]
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	059b      	lsls	r3, r3, #22
 800e8c6:	0d9b      	lsrs	r3, r3, #22
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	801a      	strh	r2, [r3, #0]
 800e8ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8d4:	d91a      	bls.n	800e90c <PCD_EP_ISR_Handler+0x2b0>
 800e8d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8d8:	691b      	ldr	r3, [r3, #16]
 800e8da:	095b      	lsrs	r3, r3, #5
 800e8dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	221f      	movs	r2, #31
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	d102      	bne.n	800e8ee <PCD_EP_ISR_Handler+0x292>
 800e8e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	b29a      	uxth	r2, r3
 800e8f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	029b      	lsls	r3, r3, #10
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4a25      	ldr	r2, [pc, #148]	@ (800e998 <PCD_EP_ISR_Handler+0x33c>)
 800e902:	4313      	orrs	r3, r2
 800e904:	b29a      	uxth	r2, r3
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	801a      	strh	r2, [r3, #0]
 800e90a:	e023      	b.n	800e954 <PCD_EP_ISR_Handler+0x2f8>
 800e90c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d108      	bne.n	800e926 <PCD_EP_ISR_Handler+0x2ca>
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	881b      	ldrh	r3, [r3, #0]
 800e918:	b29b      	uxth	r3, r3
 800e91a:	4a1f      	ldr	r2, [pc, #124]	@ (800e998 <PCD_EP_ISR_Handler+0x33c>)
 800e91c:	4313      	orrs	r3, r2
 800e91e:	b29a      	uxth	r2, r3
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	801a      	strh	r2, [r3, #0]
 800e924:	e016      	b.n	800e954 <PCD_EP_ISR_Handler+0x2f8>
 800e926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e928:	691b      	ldr	r3, [r3, #16]
 800e92a:	085b      	lsrs	r3, r3, #1
 800e92c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e92e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e930:	691b      	ldr	r3, [r3, #16]
 800e932:	2201      	movs	r2, #1
 800e934:	4013      	ands	r3, r2
 800e936:	d002      	beq.n	800e93e <PCD_EP_ISR_Handler+0x2e2>
 800e938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e93a:	3301      	adds	r3, #1
 800e93c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	b29a      	uxth	r2, r3
 800e944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e946:	b29b      	uxth	r3, r3
 800e948:	029b      	lsls	r3, r3, #10
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	4313      	orrs	r3, r2
 800e94e:	b29a      	uxth	r2, r3
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	2012      	movs	r0, #18
 800e95e:	183b      	adds	r3, r7, r0
 800e960:	4911      	ldr	r1, [pc, #68]	@ (800e9a8 <PCD_EP_ISR_Handler+0x34c>)
 800e962:	400a      	ands	r2, r1
 800e964:	801a      	strh	r2, [r3, #0]
 800e966:	183b      	adds	r3, r7, r0
 800e968:	183a      	adds	r2, r7, r0
 800e96a:	8812      	ldrh	r2, [r2, #0]
 800e96c:	2180      	movs	r1, #128	@ 0x80
 800e96e:	0149      	lsls	r1, r1, #5
 800e970:	404a      	eors	r2, r1
 800e972:	801a      	strh	r2, [r3, #0]
 800e974:	183b      	adds	r3, r7, r0
 800e976:	183a      	adds	r2, r7, r0
 800e978:	8812      	ldrh	r2, [r2, #0]
 800e97a:	2180      	movs	r1, #128	@ 0x80
 800e97c:	0189      	lsls	r1, r1, #6
 800e97e:	404a      	eors	r2, r1
 800e980:	801a      	strh	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	183a      	adds	r2, r7, r0
 800e988:	8812      	ldrh	r2, [r2, #0]
 800e98a:	4908      	ldr	r1, [pc, #32]	@ (800e9ac <PCD_EP_ISR_Handler+0x350>)
 800e98c:	430a      	orrs	r2, r1
 800e98e:	b292      	uxth	r2, r2
 800e990:	801a      	strh	r2, [r3, #0]
 800e992:	e255      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
 800e994:	ffff8f0f 	.word	0xffff8f0f
 800e998:	ffff8000 	.word	0xffff8000
 800e99c:	00000402 	.word	0x00000402
 800e9a0:	00000406 	.word	0x00000406
 800e9a4:	00000f8f 	.word	0x00000f8f
 800e9a8:	ffffbf8f 	.word	0xffffbf8f
 800e9ac:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	001a      	movs	r2, r3
 800e9b6:	204d      	movs	r0, #77	@ 0x4d
 800e9b8:	183b      	adds	r3, r7, r0
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	18d2      	adds	r2, r2, r3
 800e9c0:	214a      	movs	r1, #74	@ 0x4a
 800e9c2:	187b      	adds	r3, r7, r1
 800e9c4:	8812      	ldrh	r2, [r2, #0]
 800e9c6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e9c8:	187b      	adds	r3, r7, r1
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	5e9b      	ldrsh	r3, [r3, r2]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	db00      	blt.n	800e9d4 <PCD_EP_ISR_Handler+0x378>
 800e9d2:	e0fa      	b.n	800ebca <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	001a      	movs	r2, r3
 800e9da:	183b      	adds	r3, r7, r0
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	18d3      	adds	r3, r2, r3
 800e9e2:	881b      	ldrh	r3, [r3, #0]
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	2448      	movs	r4, #72	@ 0x48
 800e9e8:	193b      	adds	r3, r7, r4
 800e9ea:	49d1      	ldr	r1, [pc, #836]	@ (800ed30 <PCD_EP_ISR_Handler+0x6d4>)
 800e9ec:	400a      	ands	r2, r1
 800e9ee:	801a      	strh	r2, [r3, #0]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	001a      	movs	r2, r3
 800e9f6:	183b      	adds	r3, r7, r0
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	18d3      	adds	r3, r2, r3
 800e9fe:	193a      	adds	r2, r7, r4
 800ea00:	8812      	ldrh	r2, [r2, #0]
 800ea02:	2180      	movs	r1, #128	@ 0x80
 800ea04:	430a      	orrs	r2, r1
 800ea06:	b292      	uxth	r2, r2
 800ea08:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ea0a:	183b      	adds	r3, r7, r0
 800ea0c:	781a      	ldrb	r2, [r3, #0]
 800ea0e:	0013      	movs	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	189b      	adds	r3, r3, r2
 800ea14:	00db      	lsls	r3, r3, #3
 800ea16:	3369      	adds	r3, #105	@ 0x69
 800ea18:	33ff      	adds	r3, #255	@ 0xff
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	18d3      	adds	r3, r2, r3
 800ea1e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ea20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea22:	7b1b      	ldrb	r3, [r3, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d125      	bne.n	800ea74 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	2250      	movs	r2, #80	@ 0x50
 800ea2e:	5a9b      	ldrh	r3, [r3, r2]
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	001a      	movs	r2, r3
 800ea34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	00db      	lsls	r3, r3, #3
 800ea3a:	18d2      	adds	r2, r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	18d3      	adds	r3, r2, r3
 800ea42:	4abc      	ldr	r2, [pc, #752]	@ (800ed34 <PCD_EP_ISR_Handler+0x6d8>)
 800ea44:	4694      	mov	ip, r2
 800ea46:	4463      	add	r3, ip
 800ea48:	881a      	ldrh	r2, [r3, #0]
 800ea4a:	2450      	movs	r4, #80	@ 0x50
 800ea4c:	193b      	adds	r3, r7, r4
 800ea4e:	0592      	lsls	r2, r2, #22
 800ea50:	0d92      	lsrs	r2, r2, #22
 800ea52:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800ea54:	193b      	adds	r3, r7, r4
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d100      	bne.n	800ea5e <PCD_EP_ISR_Handler+0x402>
 800ea5c:	e08d      	b.n	800eb7a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6818      	ldr	r0, [r3, #0]
 800ea62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea64:	6959      	ldr	r1, [r3, #20]
 800ea66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea68:	88da      	ldrh	r2, [r3, #6]
 800ea6a:	193b      	adds	r3, r7, r4
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	f006 fa64 	bl	8014f3a <USB_ReadPMA>
 800ea72:	e082      	b.n	800eb7a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ea74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea76:	78db      	ldrb	r3, [r3, #3]
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d10c      	bne.n	800ea96 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ea7c:	2350      	movs	r3, #80	@ 0x50
 800ea7e:	18fc      	adds	r4, r7, r3
 800ea80:	234a      	movs	r3, #74	@ 0x4a
 800ea82:	18fb      	adds	r3, r7, r3
 800ea84:	881a      	ldrh	r2, [r3, #0]
 800ea86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	0018      	movs	r0, r3
 800ea8c:	f000 f9ec 	bl	800ee68 <HAL_PCD_EP_DB_Receive>
 800ea90:	0003      	movs	r3, r0
 800ea92:	8023      	strh	r3, [r4, #0]
 800ea94:	e071      	b.n	800eb7a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	001a      	movs	r2, r3
 800ea9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	18d3      	adds	r3, r2, r3
 800eaa4:	881b      	ldrh	r3, [r3, #0]
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	2052      	movs	r0, #82	@ 0x52
 800eaaa:	183b      	adds	r3, r7, r0
 800eaac:	49a2      	ldr	r1, [pc, #648]	@ (800ed38 <PCD_EP_ISR_Handler+0x6dc>)
 800eaae:	400a      	ands	r2, r1
 800eab0:	801a      	strh	r2, [r3, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	001a      	movs	r2, r3
 800eab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	18d3      	adds	r3, r2, r3
 800eac0:	183a      	adds	r2, r7, r0
 800eac2:	8812      	ldrh	r2, [r2, #0]
 800eac4:	499d      	ldr	r1, [pc, #628]	@ (800ed3c <PCD_EP_ISR_Handler+0x6e0>)
 800eac6:	430a      	orrs	r2, r1
 800eac8:	b292      	uxth	r2, r2
 800eaca:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	001a      	movs	r2, r3
 800ead2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	18d3      	adds	r3, r2, r3
 800eada:	881b      	ldrh	r3, [r3, #0]
 800eadc:	b29b      	uxth	r3, r3
 800eade:	001a      	movs	r2, r3
 800eae0:	2380      	movs	r3, #128	@ 0x80
 800eae2:	01db      	lsls	r3, r3, #7
 800eae4:	4013      	ands	r3, r2
 800eae6:	d024      	beq.n	800eb32 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2250      	movs	r2, #80	@ 0x50
 800eaee:	5a9b      	ldrh	r3, [r3, r2]
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	001a      	movs	r2, r3
 800eaf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	00db      	lsls	r3, r3, #3
 800eafa:	18d2      	adds	r2, r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	18d3      	adds	r3, r2, r3
 800eb02:	4a8f      	ldr	r2, [pc, #572]	@ (800ed40 <PCD_EP_ISR_Handler+0x6e4>)
 800eb04:	4694      	mov	ip, r2
 800eb06:	4463      	add	r3, ip
 800eb08:	881a      	ldrh	r2, [r3, #0]
 800eb0a:	2450      	movs	r4, #80	@ 0x50
 800eb0c:	193b      	adds	r3, r7, r4
 800eb0e:	0592      	lsls	r2, r2, #22
 800eb10:	0d92      	lsrs	r2, r2, #22
 800eb12:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800eb14:	193b      	adds	r3, r7, r4
 800eb16:	881b      	ldrh	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d02e      	beq.n	800eb7a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb22:	6959      	ldr	r1, [r3, #20]
 800eb24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb26:	891a      	ldrh	r2, [r3, #8]
 800eb28:	193b      	adds	r3, r7, r4
 800eb2a:	881b      	ldrh	r3, [r3, #0]
 800eb2c:	f006 fa05 	bl	8014f3a <USB_ReadPMA>
 800eb30:	e023      	b.n	800eb7a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2250      	movs	r2, #80	@ 0x50
 800eb38:	5a9b      	ldrh	r3, [r3, r2]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	001a      	movs	r2, r3
 800eb3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	18d2      	adds	r2, r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	18d3      	adds	r3, r2, r3
 800eb4c:	4a79      	ldr	r2, [pc, #484]	@ (800ed34 <PCD_EP_ISR_Handler+0x6d8>)
 800eb4e:	4694      	mov	ip, r2
 800eb50:	4463      	add	r3, ip
 800eb52:	881a      	ldrh	r2, [r3, #0]
 800eb54:	2450      	movs	r4, #80	@ 0x50
 800eb56:	193b      	adds	r3, r7, r4
 800eb58:	0592      	lsls	r2, r2, #22
 800eb5a:	0d92      	lsrs	r2, r2, #22
 800eb5c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800eb5e:	193b      	adds	r3, r7, r4
 800eb60:	881b      	ldrh	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d009      	beq.n	800eb7a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6818      	ldr	r0, [r3, #0]
 800eb6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb6c:	6959      	ldr	r1, [r3, #20]
 800eb6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb70:	895a      	ldrh	r2, [r3, #10]
 800eb72:	193b      	adds	r3, r7, r4
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	f006 f9e0 	bl	8014f3a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800eb7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7c:	69da      	ldr	r2, [r3, #28]
 800eb7e:	2150      	movs	r1, #80	@ 0x50
 800eb80:	187b      	adds	r3, r7, r1
 800eb82:	881b      	ldrh	r3, [r3, #0]
 800eb84:	18d2      	adds	r2, r2, r3
 800eb86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800eb8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb8c:	695a      	ldr	r2, [r3, #20]
 800eb8e:	187b      	adds	r3, r7, r1
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	18d2      	adds	r2, r2, r3
 800eb94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800eb98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d005      	beq.n	800ebac <PCD_EP_ISR_Handler+0x550>
 800eba0:	187b      	adds	r3, r7, r1
 800eba2:	881a      	ldrh	r2, [r3, #0]
 800eba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d207      	bcs.n	800ebbc <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ebac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebae:	781a      	ldrb	r2, [r3, #0]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	0011      	movs	r1, r2
 800ebb4:	0018      	movs	r0, r3
 800ebb6:	f008 f9da 	bl	8016f6e <HAL_PCD_DataOutStageCallback>
 800ebba:	e006      	b.n	800ebca <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ebc2:	0011      	movs	r1, r2
 800ebc4:	0018      	movs	r0, r3
 800ebc6:	f004 fefd 	bl	80139c4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ebca:	244a      	movs	r4, #74	@ 0x4a
 800ebcc:	193b      	adds	r3, r7, r4
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	2280      	movs	r2, #128	@ 0x80
 800ebd2:	4013      	ands	r3, r2
 800ebd4:	d100      	bne.n	800ebd8 <PCD_EP_ISR_Handler+0x57c>
 800ebd6:	e133      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800ebd8:	204d      	movs	r0, #77	@ 0x4d
 800ebda:	183b      	adds	r3, r7, r0
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	1c5a      	adds	r2, r3, #1
 800ebe0:	0013      	movs	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	189b      	adds	r3, r3, r2
 800ebe6:	00db      	lsls	r3, r3, #3
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	18d3      	adds	r3, r2, r3
 800ebec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	001a      	movs	r2, r3
 800ebf4:	183b      	adds	r3, r7, r0
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	18d3      	adds	r3, r2, r3
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	2542      	movs	r5, #66	@ 0x42
 800ec02:	197b      	adds	r3, r7, r5
 800ec04:	494f      	ldr	r1, [pc, #316]	@ (800ed44 <PCD_EP_ISR_Handler+0x6e8>)
 800ec06:	400a      	ands	r2, r1
 800ec08:	801a      	strh	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	001a      	movs	r2, r3
 800ec10:	183b      	adds	r3, r7, r0
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	18d3      	adds	r3, r2, r3
 800ec18:	197a      	adds	r2, r7, r5
 800ec1a:	8812      	ldrh	r2, [r2, #0]
 800ec1c:	494a      	ldr	r1, [pc, #296]	@ (800ed48 <PCD_EP_ISR_Handler+0x6ec>)
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	b292      	uxth	r2, r2
 800ec22:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ec24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec26:	78db      	ldrb	r3, [r3, #3]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d000      	beq.n	800ec2e <PCD_EP_ISR_Handler+0x5d2>
 800ec2c:	e0af      	b.n	800ed8e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800ec2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec30:	2200      	movs	r2, #0
 800ec32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ec34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec36:	7b1b      	ldrb	r3, [r3, #12]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d100      	bne.n	800ec3e <PCD_EP_ISR_Handler+0x5e2>
 800ec3c:	e09f      	b.n	800ed7e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ec3e:	193b      	adds	r3, r7, r4
 800ec40:	881b      	ldrh	r3, [r3, #0]
 800ec42:	2240      	movs	r2, #64	@ 0x40
 800ec44:	4013      	ands	r3, r2
 800ec46:	d046      	beq.n	800ecd6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ec48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec4a:	785b      	ldrb	r3, [r3, #1]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d125      	bne.n	800ec9c <PCD_EP_ISR_Handler+0x640>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2250      	movs	r2, #80	@ 0x50
 800ec5c:	5a9b      	ldrh	r3, [r3, r2]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	001a      	movs	r2, r3
 800ec62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec64:	189b      	adds	r3, r3, r2
 800ec66:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	00da      	lsls	r2, r3, #3
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec70:	18d3      	adds	r3, r2, r3
 800ec72:	4a33      	ldr	r2, [pc, #204]	@ (800ed40 <PCD_EP_ISR_Handler+0x6e4>)
 800ec74:	4694      	mov	ip, r2
 800ec76:	4463      	add	r3, ip
 800ec78:	623b      	str	r3, [r7, #32]
 800ec7a:	6a3b      	ldr	r3, [r7, #32]
 800ec7c:	881b      	ldrh	r3, [r3, #0]
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	059b      	lsls	r3, r3, #22
 800ec82:	0d9b      	lsrs	r3, r3, #22
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	6a3b      	ldr	r3, [r7, #32]
 800ec88:	801a      	strh	r2, [r3, #0]
 800ec8a:	6a3b      	ldr	r3, [r7, #32]
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	4a2d      	ldr	r2, [pc, #180]	@ (800ed48 <PCD_EP_ISR_Handler+0x6ec>)
 800ec92:	4313      	orrs	r3, r2
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	6a3b      	ldr	r3, [r7, #32]
 800ec98:	801a      	strh	r2, [r3, #0]
 800ec9a:	e070      	b.n	800ed7e <PCD_EP_ISR_Handler+0x722>
 800ec9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec9e:	785b      	ldrb	r3, [r3, #1]
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d16c      	bne.n	800ed7e <PCD_EP_ISR_Handler+0x722>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2250      	movs	r2, #80	@ 0x50
 800ecb0:	5a9b      	ldrh	r3, [r3, r2]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	001a      	movs	r2, r3
 800ecb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb8:	189b      	adds	r3, r3, r2
 800ecba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	00da      	lsls	r2, r3, #3
 800ecc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc4:	18d3      	adds	r3, r2, r3
 800ecc6:	4a1e      	ldr	r2, [pc, #120]	@ (800ed40 <PCD_EP_ISR_Handler+0x6e4>)
 800ecc8:	4694      	mov	ip, r2
 800ecca:	4463      	add	r3, ip
 800eccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	801a      	strh	r2, [r3, #0]
 800ecd4:	e053      	b.n	800ed7e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecde:	785b      	ldrb	r3, [r3, #1]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d133      	bne.n	800ed4c <PCD_EP_ISR_Handler+0x6f0>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2250      	movs	r2, #80	@ 0x50
 800ecf0:	5a9b      	ldrh	r3, [r3, r2]
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	001a      	movs	r2, r3
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf8:	189b      	adds	r3, r3, r2
 800ecfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	00da      	lsls	r2, r3, #3
 800ed02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed04:	18d3      	adds	r3, r2, r3
 800ed06:	4a0b      	ldr	r2, [pc, #44]	@ (800ed34 <PCD_EP_ISR_Handler+0x6d8>)
 800ed08:	4694      	mov	ip, r2
 800ed0a:	4463      	add	r3, ip
 800ed0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	059b      	lsls	r3, r3, #22
 800ed16:	0d9b      	lsrs	r3, r3, #22
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1c:	801a      	strh	r2, [r3, #0]
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed20:	881b      	ldrh	r3, [r3, #0]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	4a08      	ldr	r2, [pc, #32]	@ (800ed48 <PCD_EP_ISR_Handler+0x6ec>)
 800ed26:	4313      	orrs	r3, r2
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2c:	801a      	strh	r2, [r3, #0]
 800ed2e:	e026      	b.n	800ed7e <PCD_EP_ISR_Handler+0x722>
 800ed30:	00000f8f 	.word	0x00000f8f
 800ed34:	00000406 	.word	0x00000406
 800ed38:	ffff8f8f 	.word	0xffff8f8f
 800ed3c:	ffff80c0 	.word	0xffff80c0
 800ed40:	00000402 	.word	0x00000402
 800ed44:	ffff8f0f 	.word	0xffff8f0f
 800ed48:	ffff8000 	.word	0xffff8000
 800ed4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed4e:	785b      	ldrb	r3, [r3, #1]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d114      	bne.n	800ed7e <PCD_EP_ISR_Handler+0x722>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2250      	movs	r2, #80	@ 0x50
 800ed5a:	5a9b      	ldrh	r3, [r3, r2]
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	001a      	movs	r2, r3
 800ed60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed62:	189b      	adds	r3, r3, r2
 800ed64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	00da      	lsls	r2, r3, #3
 800ed6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed6e:	18d3      	adds	r3, r2, r3
 800ed70:	4a3b      	ldr	r2, [pc, #236]	@ (800ee60 <PCD_EP_ISR_Handler+0x804>)
 800ed72:	4694      	mov	ip, r2
 800ed74:	4463      	add	r3, ip
 800ed76:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ed7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed80:	781a      	ldrb	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	0011      	movs	r1, r2
 800ed86:	0018      	movs	r0, r3
 800ed88:	f008 f912 	bl	8016fb0 <HAL_PCD_DataInStageCallback>
 800ed8c:	e058      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ed8e:	234a      	movs	r3, #74	@ 0x4a
 800ed90:	18fb      	adds	r3, r7, r3
 800ed92:	881a      	ldrh	r2, [r3, #0]
 800ed94:	2380      	movs	r3, #128	@ 0x80
 800ed96:	005b      	lsls	r3, r3, #1
 800ed98:	4013      	ands	r3, r2
 800ed9a:	d149      	bne.n	800ee30 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2250      	movs	r2, #80	@ 0x50
 800eda2:	5a9b      	ldrh	r3, [r3, r2]
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	001a      	movs	r2, r3
 800eda8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	00db      	lsls	r3, r3, #3
 800edae:	18d2      	adds	r2, r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	18d3      	adds	r3, r2, r3
 800edb6:	4a2b      	ldr	r2, [pc, #172]	@ (800ee64 <PCD_EP_ISR_Handler+0x808>)
 800edb8:	4694      	mov	ip, r2
 800edba:	4463      	add	r3, ip
 800edbc:	881a      	ldrh	r2, [r3, #0]
 800edbe:	2140      	movs	r1, #64	@ 0x40
 800edc0:	187b      	adds	r3, r7, r1
 800edc2:	0592      	lsls	r2, r2, #22
 800edc4:	0d92      	lsrs	r2, r2, #22
 800edc6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800edc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edca:	699a      	ldr	r2, [r3, #24]
 800edcc:	187b      	adds	r3, r7, r1
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d907      	bls.n	800ede4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800edd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edd6:	699a      	ldr	r2, [r3, #24]
 800edd8:	187b      	adds	r3, r7, r1
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	1ad2      	subs	r2, r2, r3
 800edde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ede0:	619a      	str	r2, [r3, #24]
 800ede2:	e002      	b.n	800edea <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800ede4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ede6:	2200      	movs	r2, #0
 800ede8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800edea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edec:	699b      	ldr	r3, [r3, #24]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d107      	bne.n	800ee02 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800edf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edf4:	781a      	ldrb	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	0011      	movs	r1, r2
 800edfa:	0018      	movs	r0, r3
 800edfc:	f008 f8d8 	bl	8016fb0 <HAL_PCD_DataInStageCallback>
 800ee00:	e01e      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ee02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee04:	695a      	ldr	r2, [r3, #20]
 800ee06:	2140      	movs	r1, #64	@ 0x40
 800ee08:	187b      	adds	r3, r7, r1
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	18d2      	adds	r2, r2, r3
 800ee0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee10:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ee12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee14:	69da      	ldr	r2, [r3, #28]
 800ee16:	187b      	adds	r3, r7, r1
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	18d2      	adds	r2, r2, r3
 800ee1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee1e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee26:	0011      	movs	r1, r2
 800ee28:	0018      	movs	r0, r3
 800ee2a:	f004 fdcb 	bl	80139c4 <USB_EPStartXfer>
 800ee2e:	e007      	b.n	800ee40 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ee30:	234a      	movs	r3, #74	@ 0x4a
 800ee32:	18fb      	adds	r3, r7, r3
 800ee34:	881a      	ldrh	r2, [r3, #0]
 800ee36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	0018      	movs	r0, r3
 800ee3c:	f000 f930 	bl	800f0a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2244      	movs	r2, #68	@ 0x44
 800ee46:	5a9b      	ldrh	r3, [r3, r2]
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	b21b      	sxth	r3, r3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	da01      	bge.n	800ee54 <PCD_EP_ISR_Handler+0x7f8>
 800ee50:	f7ff fc0a 	bl	800e668 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	0018      	movs	r0, r3
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	b016      	add	sp, #88	@ 0x58
 800ee5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ee5e:	46c0      	nop			@ (mov r8, r8)
 800ee60:	00000406 	.word	0x00000406
 800ee64:	00000402 	.word	0x00000402

0800ee68 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ee68:	b590      	push	{r4, r7, lr}
 800ee6a:	b089      	sub	sp, #36	@ 0x24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	1dbb      	adds	r3, r7, #6
 800ee74:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ee76:	1dbb      	adds	r3, r7, #6
 800ee78:	881a      	ldrh	r2, [r3, #0]
 800ee7a:	2380      	movs	r3, #128	@ 0x80
 800ee7c:	01db      	lsls	r3, r3, #7
 800ee7e:	4013      	ands	r3, r2
 800ee80:	d100      	bne.n	800ee84 <HAL_PCD_EP_DB_Receive+0x1c>
 800ee82:	e07d      	b.n	800ef80 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2250      	movs	r2, #80	@ 0x50
 800ee8a:	5a9b      	ldrh	r3, [r3, r2]
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	001a      	movs	r2, r3
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	00db      	lsls	r3, r3, #3
 800ee96:	18d2      	adds	r2, r2, r3
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	18d3      	adds	r3, r2, r3
 800ee9e:	4a7a      	ldr	r2, [pc, #488]	@ (800f088 <HAL_PCD_EP_DB_Receive+0x220>)
 800eea0:	4694      	mov	ip, r2
 800eea2:	4463      	add	r3, ip
 800eea4:	881a      	ldrh	r2, [r3, #0]
 800eea6:	211a      	movs	r1, #26
 800eea8:	187b      	adds	r3, r7, r1
 800eeaa:	0592      	lsls	r2, r2, #22
 800eeac:	0d92      	lsrs	r2, r2, #22
 800eeae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	699a      	ldr	r2, [r3, #24]
 800eeb4:	187b      	adds	r3, r7, r1
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d307      	bcc.n	800eecc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	699a      	ldr	r2, [r3, #24]
 800eec0:	187b      	adds	r3, r7, r1
 800eec2:	881b      	ldrh	r3, [r3, #0]
 800eec4:	1ad2      	subs	r2, r2, r3
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	619a      	str	r2, [r3, #24]
 800eeca:	e002      	b.n	800eed2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	2200      	movs	r2, #0
 800eed0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d121      	bne.n	800ef1e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	001a      	movs	r2, r3
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	18d3      	adds	r3, r2, r3
 800eee8:	881b      	ldrh	r3, [r3, #0]
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	2018      	movs	r0, #24
 800eeee:	183b      	adds	r3, r7, r0
 800eef0:	4966      	ldr	r1, [pc, #408]	@ (800f08c <HAL_PCD_EP_DB_Receive+0x224>)
 800eef2:	400a      	ands	r2, r1
 800eef4:	801a      	strh	r2, [r3, #0]
 800eef6:	183b      	adds	r3, r7, r0
 800eef8:	183a      	adds	r2, r7, r0
 800eefa:	8812      	ldrh	r2, [r2, #0]
 800eefc:	2180      	movs	r1, #128	@ 0x80
 800eefe:	0189      	lsls	r1, r1, #6
 800ef00:	404a      	eors	r2, r1
 800ef02:	801a      	strh	r2, [r3, #0]
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	001a      	movs	r2, r3
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	18d3      	adds	r3, r2, r3
 800ef12:	183a      	adds	r2, r7, r0
 800ef14:	8812      	ldrh	r2, [r2, #0]
 800ef16:	495e      	ldr	r1, [pc, #376]	@ (800f090 <HAL_PCD_EP_DB_Receive+0x228>)
 800ef18:	430a      	orrs	r2, r1
 800ef1a:	b292      	uxth	r2, r2
 800ef1c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ef1e:	1dbb      	adds	r3, r7, #6
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	2240      	movs	r2, #64	@ 0x40
 800ef24:	4013      	ands	r3, r2
 800ef26:	d01a      	beq.n	800ef5e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	001a      	movs	r2, r3
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	781b      	ldrb	r3, [r3, #0]
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	18d3      	adds	r3, r2, r3
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	2016      	movs	r0, #22
 800ef3c:	183b      	adds	r3, r7, r0
 800ef3e:	4955      	ldr	r1, [pc, #340]	@ (800f094 <HAL_PCD_EP_DB_Receive+0x22c>)
 800ef40:	400a      	ands	r2, r1
 800ef42:	801a      	strh	r2, [r3, #0]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	001a      	movs	r2, r3
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	18d3      	adds	r3, r2, r3
 800ef52:	183a      	adds	r2, r7, r0
 800ef54:	8812      	ldrh	r2, [r2, #0]
 800ef56:	4950      	ldr	r1, [pc, #320]	@ (800f098 <HAL_PCD_EP_DB_Receive+0x230>)
 800ef58:	430a      	orrs	r2, r1
 800ef5a:	b292      	uxth	r2, r2
 800ef5c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800ef5e:	241a      	movs	r4, #26
 800ef60:	193b      	adds	r3, r7, r4
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d100      	bne.n	800ef6a <HAL_PCD_EP_DB_Receive+0x102>
 800ef68:	e086      	b.n	800f078 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6818      	ldr	r0, [r3, #0]
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	6959      	ldr	r1, [r3, #20]
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	891a      	ldrh	r2, [r3, #8]
 800ef76:	193b      	adds	r3, r7, r4
 800ef78:	881b      	ldrh	r3, [r3, #0]
 800ef7a:	f005 ffde 	bl	8014f3a <USB_ReadPMA>
 800ef7e:	e07b      	b.n	800f078 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2250      	movs	r2, #80	@ 0x50
 800ef86:	5a9b      	ldrh	r3, [r3, r2]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	001a      	movs	r2, r3
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	00db      	lsls	r3, r3, #3
 800ef92:	18d2      	adds	r2, r2, r3
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	18d3      	adds	r3, r2, r3
 800ef9a:	4a40      	ldr	r2, [pc, #256]	@ (800f09c <HAL_PCD_EP_DB_Receive+0x234>)
 800ef9c:	4694      	mov	ip, r2
 800ef9e:	4463      	add	r3, ip
 800efa0:	881a      	ldrh	r2, [r3, #0]
 800efa2:	211a      	movs	r1, #26
 800efa4:	187b      	adds	r3, r7, r1
 800efa6:	0592      	lsls	r2, r2, #22
 800efa8:	0d92      	lsrs	r2, r2, #22
 800efaa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	699a      	ldr	r2, [r3, #24]
 800efb0:	187b      	adds	r3, r7, r1
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d307      	bcc.n	800efc8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	699a      	ldr	r2, [r3, #24]
 800efbc:	187b      	adds	r3, r7, r1
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	1ad2      	subs	r2, r2, r3
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	619a      	str	r2, [r3, #24]
 800efc6:	e002      	b.n	800efce <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2200      	movs	r2, #0
 800efcc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	699b      	ldr	r3, [r3, #24]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d121      	bne.n	800f01a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	001a      	movs	r2, r3
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	18d3      	adds	r3, r2, r3
 800efe4:	881b      	ldrh	r3, [r3, #0]
 800efe6:	b29a      	uxth	r2, r3
 800efe8:	201e      	movs	r0, #30
 800efea:	183b      	adds	r3, r7, r0
 800efec:	4927      	ldr	r1, [pc, #156]	@ (800f08c <HAL_PCD_EP_DB_Receive+0x224>)
 800efee:	400a      	ands	r2, r1
 800eff0:	801a      	strh	r2, [r3, #0]
 800eff2:	183b      	adds	r3, r7, r0
 800eff4:	183a      	adds	r2, r7, r0
 800eff6:	8812      	ldrh	r2, [r2, #0]
 800eff8:	2180      	movs	r1, #128	@ 0x80
 800effa:	0189      	lsls	r1, r1, #6
 800effc:	404a      	eors	r2, r1
 800effe:	801a      	strh	r2, [r3, #0]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	001a      	movs	r2, r3
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	18d3      	adds	r3, r2, r3
 800f00e:	183a      	adds	r2, r7, r0
 800f010:	8812      	ldrh	r2, [r2, #0]
 800f012:	491f      	ldr	r1, [pc, #124]	@ (800f090 <HAL_PCD_EP_DB_Receive+0x228>)
 800f014:	430a      	orrs	r2, r1
 800f016:	b292      	uxth	r2, r2
 800f018:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f01a:	1dbb      	adds	r3, r7, #6
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	2240      	movs	r2, #64	@ 0x40
 800f020:	4013      	ands	r3, r2
 800f022:	d11a      	bne.n	800f05a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	001a      	movs	r2, r3
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	18d3      	adds	r3, r2, r3
 800f032:	881b      	ldrh	r3, [r3, #0]
 800f034:	b29a      	uxth	r2, r3
 800f036:	201c      	movs	r0, #28
 800f038:	183b      	adds	r3, r7, r0
 800f03a:	4916      	ldr	r1, [pc, #88]	@ (800f094 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f03c:	400a      	ands	r2, r1
 800f03e:	801a      	strh	r2, [r3, #0]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	001a      	movs	r2, r3
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	18d3      	adds	r3, r2, r3
 800f04e:	183a      	adds	r2, r7, r0
 800f050:	8812      	ldrh	r2, [r2, #0]
 800f052:	4911      	ldr	r1, [pc, #68]	@ (800f098 <HAL_PCD_EP_DB_Receive+0x230>)
 800f054:	430a      	orrs	r2, r1
 800f056:	b292      	uxth	r2, r2
 800f058:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f05a:	241a      	movs	r4, #26
 800f05c:	193b      	adds	r3, r7, r4
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d009      	beq.n	800f078 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	6818      	ldr	r0, [r3, #0]
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	6959      	ldr	r1, [r3, #20]
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	895a      	ldrh	r2, [r3, #10]
 800f070:	193b      	adds	r3, r7, r4
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	f005 ff61 	bl	8014f3a <USB_ReadPMA>
    }
  }

  return count;
 800f078:	231a      	movs	r3, #26
 800f07a:	18fb      	adds	r3, r7, r3
 800f07c:	881b      	ldrh	r3, [r3, #0]
}
 800f07e:	0018      	movs	r0, r3
 800f080:	46bd      	mov	sp, r7
 800f082:	b009      	add	sp, #36	@ 0x24
 800f084:	bd90      	pop	{r4, r7, pc}
 800f086:	46c0      	nop			@ (mov r8, r8)
 800f088:	00000402 	.word	0x00000402
 800f08c:	ffffbf8f 	.word	0xffffbf8f
 800f090:	ffff8080 	.word	0xffff8080
 800f094:	ffff8f8f 	.word	0xffff8f8f
 800f098:	ffff80c0 	.word	0xffff80c0
 800f09c:	00000406 	.word	0x00000406

0800f0a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b0a4      	sub	sp, #144	@ 0x90
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	1dbb      	adds	r3, r7, #6
 800f0ac:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f0ae:	1dbb      	adds	r3, r7, #6
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	2240      	movs	r2, #64	@ 0x40
 800f0b4:	4013      	ands	r3, r2
 800f0b6:	d100      	bne.n	800f0ba <HAL_PCD_EP_DB_Transmit+0x1a>
 800f0b8:	e1e4      	b.n	800f484 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2250      	movs	r2, #80	@ 0x50
 800f0c0:	5a9b      	ldrh	r3, [r3, r2]
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	001a      	movs	r2, r3
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	00db      	lsls	r3, r3, #3
 800f0cc:	18d2      	adds	r2, r2, r3
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	18d3      	adds	r3, r2, r3
 800f0d4:	4ad0      	ldr	r2, [pc, #832]	@ (800f418 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f0d6:	4694      	mov	ip, r2
 800f0d8:	4463      	add	r3, ip
 800f0da:	881a      	ldrh	r2, [r3, #0]
 800f0dc:	2186      	movs	r1, #134	@ 0x86
 800f0de:	187b      	adds	r3, r7, r1
 800f0e0:	0592      	lsls	r2, r2, #22
 800f0e2:	0d92      	lsrs	r2, r2, #22
 800f0e4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	699a      	ldr	r2, [r3, #24]
 800f0ea:	187b      	adds	r3, r7, r1
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d907      	bls.n	800f102 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	699a      	ldr	r2, [r3, #24]
 800f0f6:	187b      	adds	r3, r7, r1
 800f0f8:	881b      	ldrh	r3, [r3, #0]
 800f0fa:	1ad2      	subs	r2, r2, r3
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	619a      	str	r2, [r3, #24]
 800f100:	e002      	b.n	800f108 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2200      	movs	r2, #0
 800f106:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d000      	beq.n	800f112 <HAL_PCD_EP_DB_Transmit+0x72>
 800f110:	e0b5      	b.n	800f27e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	785b      	ldrb	r3, [r3, #1]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d125      	bne.n	800f166 <HAL_PCD_EP_DB_Transmit+0xc6>
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2250      	movs	r2, #80	@ 0x50
 800f126:	5a9b      	ldrh	r3, [r3, r2]
 800f128:	b29b      	uxth	r3, r3
 800f12a:	001a      	movs	r2, r3
 800f12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f12e:	189b      	adds	r3, r3, r2
 800f130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	00da      	lsls	r2, r3, #3
 800f138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f13a:	18d3      	adds	r3, r2, r3
 800f13c:	4ab6      	ldr	r2, [pc, #728]	@ (800f418 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f13e:	4694      	mov	ip, r2
 800f140:	4463      	add	r3, ip
 800f142:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f146:	881b      	ldrh	r3, [r3, #0]
 800f148:	b29b      	uxth	r3, r3
 800f14a:	059b      	lsls	r3, r3, #22
 800f14c:	0d9b      	lsrs	r3, r3, #22
 800f14e:	b29a      	uxth	r2, r3
 800f150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f152:	801a      	strh	r2, [r3, #0]
 800f154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	4ab0      	ldr	r2, [pc, #704]	@ (800f41c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f15c:	4313      	orrs	r3, r2
 800f15e:	b29a      	uxth	r2, r3
 800f160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f162:	801a      	strh	r2, [r3, #0]
 800f164:	e01b      	b.n	800f19e <HAL_PCD_EP_DB_Transmit+0xfe>
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	785b      	ldrb	r3, [r3, #1]
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d117      	bne.n	800f19e <HAL_PCD_EP_DB_Transmit+0xfe>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	637b      	str	r3, [r7, #52]	@ 0x34
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2250      	movs	r2, #80	@ 0x50
 800f17a:	5a9b      	ldrh	r3, [r3, r2]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	001a      	movs	r2, r3
 800f180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f182:	189b      	adds	r3, r3, r2
 800f184:	637b      	str	r3, [r7, #52]	@ 0x34
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	00da      	lsls	r2, r3, #3
 800f18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f18e:	18d3      	adds	r3, r2, r3
 800f190:	4aa1      	ldr	r2, [pc, #644]	@ (800f418 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f192:	4694      	mov	ip, r2
 800f194:	4463      	add	r3, ip
 800f196:	633b      	str	r3, [r7, #48]	@ 0x30
 800f198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19a:	2200      	movs	r2, #0
 800f19c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	785b      	ldrb	r3, [r3, #1]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d125      	bne.n	800f1f8 <HAL_PCD_EP_DB_Transmit+0x158>
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	61fb      	str	r3, [r7, #28]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2250      	movs	r2, #80	@ 0x50
 800f1b8:	5a9b      	ldrh	r3, [r3, r2]
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	001a      	movs	r2, r3
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	189b      	adds	r3, r3, r2
 800f1c2:	61fb      	str	r3, [r7, #28]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	00da      	lsls	r2, r3, #3
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	18d3      	adds	r3, r2, r3
 800f1ce:	4a94      	ldr	r2, [pc, #592]	@ (800f420 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f1d0:	4694      	mov	ip, r2
 800f1d2:	4463      	add	r3, ip
 800f1d4:	61bb      	str	r3, [r7, #24]
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	881b      	ldrh	r3, [r3, #0]
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	059b      	lsls	r3, r3, #22
 800f1de:	0d9b      	lsrs	r3, r3, #22
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	801a      	strh	r2, [r3, #0]
 800f1e6:	69bb      	ldr	r3, [r7, #24]
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	4a8b      	ldr	r2, [pc, #556]	@ (800f41c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	801a      	strh	r2, [r3, #0]
 800f1f6:	e018      	b.n	800f22a <HAL_PCD_EP_DB_Transmit+0x18a>
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	785b      	ldrb	r3, [r3, #1]
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d114      	bne.n	800f22a <HAL_PCD_EP_DB_Transmit+0x18a>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2250      	movs	r2, #80	@ 0x50
 800f206:	5a9b      	ldrh	r3, [r3, r2]
 800f208:	b29b      	uxth	r3, r3
 800f20a:	001a      	movs	r2, r3
 800f20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20e:	189b      	adds	r3, r3, r2
 800f210:	627b      	str	r3, [r7, #36]	@ 0x24
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	00da      	lsls	r2, r3, #3
 800f218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21a:	18d3      	adds	r3, r2, r3
 800f21c:	4a80      	ldr	r2, [pc, #512]	@ (800f420 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f21e:	4694      	mov	ip, r2
 800f220:	4463      	add	r3, ip
 800f222:	623b      	str	r3, [r7, #32]
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	2200      	movs	r2, #0
 800f228:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	781a      	ldrb	r2, [r3, #0]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	0011      	movs	r1, r2
 800f232:	0018      	movs	r0, r3
 800f234:	f007 febc 	bl	8016fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f238:	1dbb      	adds	r3, r7, #6
 800f23a:	881a      	ldrh	r2, [r3, #0]
 800f23c:	2380      	movs	r3, #128	@ 0x80
 800f23e:	01db      	lsls	r3, r3, #7
 800f240:	4013      	ands	r3, r2
 800f242:	d100      	bne.n	800f246 <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f244:	e309      	b.n	800f85a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	001a      	movs	r2, r3
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	18d3      	adds	r3, r2, r3
 800f254:	881b      	ldrh	r3, [r3, #0]
 800f256:	b29a      	uxth	r2, r3
 800f258:	2016      	movs	r0, #22
 800f25a:	183b      	adds	r3, r7, r0
 800f25c:	4971      	ldr	r1, [pc, #452]	@ (800f424 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f25e:	400a      	ands	r2, r1
 800f260:	801a      	strh	r2, [r3, #0]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	001a      	movs	r2, r3
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	18d3      	adds	r3, r2, r3
 800f270:	183a      	adds	r2, r7, r0
 800f272:	8812      	ldrh	r2, [r2, #0]
 800f274:	496c      	ldr	r1, [pc, #432]	@ (800f428 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f276:	430a      	orrs	r2, r1
 800f278:	b292      	uxth	r2, r2
 800f27a:	801a      	strh	r2, [r3, #0]
 800f27c:	e2ed      	b.n	800f85a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f27e:	1dbb      	adds	r3, r7, #6
 800f280:	881a      	ldrh	r2, [r3, #0]
 800f282:	2380      	movs	r3, #128	@ 0x80
 800f284:	01db      	lsls	r3, r3, #7
 800f286:	4013      	ands	r3, r2
 800f288:	d01a      	beq.n	800f2c0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	001a      	movs	r2, r3
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	18d3      	adds	r3, r2, r3
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	208a      	movs	r0, #138	@ 0x8a
 800f29e:	183b      	adds	r3, r7, r0
 800f2a0:	4960      	ldr	r1, [pc, #384]	@ (800f424 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f2a2:	400a      	ands	r2, r1
 800f2a4:	801a      	strh	r2, [r3, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	001a      	movs	r2, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	18d3      	adds	r3, r2, r3
 800f2b4:	183a      	adds	r2, r7, r0
 800f2b6:	8812      	ldrh	r2, [r2, #0]
 800f2b8:	495b      	ldr	r1, [pc, #364]	@ (800f428 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	b292      	uxth	r2, r2
 800f2be:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	2224      	movs	r2, #36	@ 0x24
 800f2c4:	5c9b      	ldrb	r3, [r3, r2]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d000      	beq.n	800f2cc <HAL_PCD_EP_DB_Transmit+0x22c>
 800f2ca:	e2c6      	b.n	800f85a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	695a      	ldr	r2, [r3, #20]
 800f2d0:	2186      	movs	r1, #134	@ 0x86
 800f2d2:	187b      	adds	r3, r7, r1
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	18d2      	adds	r2, r2, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	69da      	ldr	r2, [r3, #28]
 800f2e0:	187b      	adds	r3, r7, r1
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	18d2      	adds	r2, r2, r3
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	6a1a      	ldr	r2, [r3, #32]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d30c      	bcc.n	800f310 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	691b      	ldr	r3, [r3, #16]
 800f2fa:	218c      	movs	r1, #140	@ 0x8c
 800f2fc:	187a      	adds	r2, r7, r1
 800f2fe:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	6a1a      	ldr	r2, [r3, #32]
 800f304:	187b      	adds	r3, r7, r1
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	1ad2      	subs	r2, r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	621a      	str	r2, [r3, #32]
 800f30e:	e01a      	b.n	800f346 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	6a1b      	ldr	r3, [r3, #32]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10a      	bne.n	800f32e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f318:	2386      	movs	r3, #134	@ 0x86
 800f31a:	18fb      	adds	r3, r7, r3
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	228c      	movs	r2, #140	@ 0x8c
 800f320:	18ba      	adds	r2, r7, r2
 800f322:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	2224      	movs	r2, #36	@ 0x24
 800f328:	2100      	movs	r1, #0
 800f32a:	5499      	strb	r1, [r3, r2]
 800f32c:	e00b      	b.n	800f346 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2224      	movs	r2, #36	@ 0x24
 800f332:	2100      	movs	r1, #0
 800f334:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	228c      	movs	r2, #140	@ 0x8c
 800f33c:	18ba      	adds	r2, r7, r2
 800f33e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	2200      	movs	r2, #0
 800f344:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	785b      	ldrb	r3, [r3, #1]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d000      	beq.n	800f350 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f34e:	e06d      	b.n	800f42c <HAL_PCD_EP_DB_Transmit+0x38c>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2250      	movs	r2, #80	@ 0x50
 800f35c:	5a9b      	ldrh	r3, [r3, r2]
 800f35e:	b29b      	uxth	r3, r3
 800f360:	001a      	movs	r2, r3
 800f362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f364:	189b      	adds	r3, r3, r2
 800f366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	00da      	lsls	r2, r3, #3
 800f36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f370:	18d3      	adds	r3, r2, r3
 800f372:	4a29      	ldr	r2, [pc, #164]	@ (800f418 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f374:	4694      	mov	ip, r2
 800f376:	4463      	add	r3, ip
 800f378:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	059b      	lsls	r3, r3, #22
 800f382:	0d9b      	lsrs	r3, r3, #22
 800f384:	b29a      	uxth	r2, r3
 800f386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f388:	801a      	strh	r2, [r3, #0]
 800f38a:	228c      	movs	r2, #140	@ 0x8c
 800f38c:	18bb      	adds	r3, r7, r2
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b3e      	cmp	r3, #62	@ 0x3e
 800f392:	d91a      	bls.n	800f3ca <HAL_PCD_EP_DB_Transmit+0x32a>
 800f394:	18bb      	adds	r3, r7, r2
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	095b      	lsrs	r3, r3, #5
 800f39a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f39c:	18bb      	adds	r3, r7, r2
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	221f      	movs	r2, #31
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	d102      	bne.n	800f3ac <HAL_PCD_EP_DB_Transmit+0x30c>
 800f3a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	029b      	lsls	r3, r3, #10
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	4a17      	ldr	r2, [pc, #92]	@ (800f41c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c6:	801a      	strh	r2, [r3, #0]
 800f3c8:	e04f      	b.n	800f46a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f3ca:	238c      	movs	r3, #140	@ 0x8c
 800f3cc:	18fb      	adds	r3, r7, r3
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d108      	bne.n	800f3e6 <HAL_PCD_EP_DB_Transmit+0x346>
 800f3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d6:	881b      	ldrh	r3, [r3, #0]
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	4a10      	ldr	r2, [pc, #64]	@ (800f41c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	b29a      	uxth	r2, r3
 800f3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e2:	801a      	strh	r2, [r3, #0]
 800f3e4:	e041      	b.n	800f46a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f3e6:	228c      	movs	r2, #140	@ 0x8c
 800f3e8:	18bb      	adds	r3, r7, r2
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	085b      	lsrs	r3, r3, #1
 800f3ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3f0:	18bb      	adds	r3, r7, r2
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	d002      	beq.n	800f400 <HAL_PCD_EP_DB_Transmit+0x360>
 800f3fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f402:	881b      	ldrh	r3, [r3, #0]
 800f404:	b29a      	uxth	r2, r3
 800f406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f408:	b29b      	uxth	r3, r3
 800f40a:	029b      	lsls	r3, r3, #10
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	4313      	orrs	r3, r2
 800f410:	b29a      	uxth	r2, r3
 800f412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f414:	801a      	strh	r2, [r3, #0]
 800f416:	e028      	b.n	800f46a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f418:	00000402 	.word	0x00000402
 800f41c:	ffff8000 	.word	0xffff8000
 800f420:	00000406 	.word	0x00000406
 800f424:	ffff8f8f 	.word	0xffff8f8f
 800f428:	ffffc080 	.word	0xffffc080
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	785b      	ldrb	r3, [r3, #1]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d11a      	bne.n	800f46a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	647b      	str	r3, [r7, #68]	@ 0x44
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2250      	movs	r2, #80	@ 0x50
 800f440:	5a9b      	ldrh	r3, [r3, r2]
 800f442:	b29b      	uxth	r3, r3
 800f444:	001a      	movs	r2, r3
 800f446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f448:	189b      	adds	r3, r3, r2
 800f44a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	00da      	lsls	r2, r3, #3
 800f452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f454:	18d3      	adds	r3, r2, r3
 800f456:	4adb      	ldr	r2, [pc, #876]	@ (800f7c4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f458:	4694      	mov	ip, r2
 800f45a:	4463      	add	r3, ip
 800f45c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f45e:	238c      	movs	r3, #140	@ 0x8c
 800f460:	18fb      	adds	r3, r7, r3
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	b29a      	uxth	r2, r3
 800f466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f468:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6818      	ldr	r0, [r3, #0]
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	6959      	ldr	r1, [r3, #20]
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	891a      	ldrh	r2, [r3, #8]
 800f476:	238c      	movs	r3, #140	@ 0x8c
 800f478:	18fb      	adds	r3, r7, r3
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	f005 fd13 	bl	8014ea8 <USB_WritePMA>
 800f482:	e1ea      	b.n	800f85a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2250      	movs	r2, #80	@ 0x50
 800f48a:	5a9b      	ldrh	r3, [r3, r2]
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	001a      	movs	r2, r3
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	00db      	lsls	r3, r3, #3
 800f496:	18d2      	adds	r2, r2, r3
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	18d3      	adds	r3, r2, r3
 800f49e:	4aca      	ldr	r2, [pc, #808]	@ (800f7c8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f4a0:	4694      	mov	ip, r2
 800f4a2:	4463      	add	r3, ip
 800f4a4:	881a      	ldrh	r2, [r3, #0]
 800f4a6:	2186      	movs	r1, #134	@ 0x86
 800f4a8:	187b      	adds	r3, r7, r1
 800f4aa:	0592      	lsls	r2, r2, #22
 800f4ac:	0d92      	lsrs	r2, r2, #22
 800f4ae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	699a      	ldr	r2, [r3, #24]
 800f4b4:	187b      	adds	r3, r7, r1
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d307      	bcc.n	800f4cc <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	699a      	ldr	r2, [r3, #24]
 800f4c0:	187b      	adds	r3, r7, r1
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	1ad2      	subs	r2, r2, r3
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	619a      	str	r2, [r3, #24]
 800f4ca:	e002      	b.n	800f4d2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d000      	beq.n	800f4dc <HAL_PCD_EP_DB_Transmit+0x43c>
 800f4da:	e0bb      	b.n	800f654 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	785b      	ldrb	r3, [r3, #1]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d125      	bne.n	800f530 <HAL_PCD_EP_DB_Transmit+0x490>
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2250      	movs	r2, #80	@ 0x50
 800f4f0:	5a9b      	ldrh	r3, [r3, r2]
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	001a      	movs	r2, r3
 800f4f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4f8:	189b      	adds	r3, r3, r2
 800f4fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	00da      	lsls	r2, r3, #3
 800f502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f504:	18d3      	adds	r3, r2, r3
 800f506:	4aaf      	ldr	r2, [pc, #700]	@ (800f7c4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f508:	4694      	mov	ip, r2
 800f50a:	4463      	add	r3, ip
 800f50c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f50e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f510:	881b      	ldrh	r3, [r3, #0]
 800f512:	b29b      	uxth	r3, r3
 800f514:	059b      	lsls	r3, r3, #22
 800f516:	0d9b      	lsrs	r3, r3, #22
 800f518:	b29a      	uxth	r2, r3
 800f51a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f51c:	801a      	strh	r2, [r3, #0]
 800f51e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f520:	881b      	ldrh	r3, [r3, #0]
 800f522:	b29b      	uxth	r3, r3
 800f524:	4aa9      	ldr	r2, [pc, #676]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f526:	4313      	orrs	r3, r2
 800f528:	b29a      	uxth	r2, r3
 800f52a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f52c:	801a      	strh	r2, [r3, #0]
 800f52e:	e01b      	b.n	800f568 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	785b      	ldrb	r3, [r3, #1]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d117      	bne.n	800f568 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2250      	movs	r2, #80	@ 0x50
 800f544:	5a9b      	ldrh	r3, [r3, r2]
 800f546:	b29b      	uxth	r3, r3
 800f548:	001a      	movs	r2, r3
 800f54a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f54c:	189b      	adds	r3, r3, r2
 800f54e:	667b      	str	r3, [r7, #100]	@ 0x64
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	00da      	lsls	r2, r3, #3
 800f556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f558:	18d3      	adds	r3, r2, r3
 800f55a:	4a9a      	ldr	r2, [pc, #616]	@ (800f7c4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f55c:	4694      	mov	ip, r2
 800f55e:	4463      	add	r3, ip
 800f560:	663b      	str	r3, [r7, #96]	@ 0x60
 800f562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f564:	2200      	movs	r2, #0
 800f566:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	677b      	str	r3, [r7, #116]	@ 0x74
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	785b      	ldrb	r3, [r3, #1]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d12b      	bne.n	800f5ce <HAL_PCD_EP_DB_Transmit+0x52e>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2250      	movs	r2, #80	@ 0x50
 800f582:	5a9b      	ldrh	r3, [r3, r2]
 800f584:	b29b      	uxth	r3, r3
 800f586:	001a      	movs	r2, r3
 800f588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f58a:	189b      	adds	r3, r3, r2
 800f58c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	00da      	lsls	r2, r3, #3
 800f594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f596:	18d3      	adds	r3, r2, r3
 800f598:	4a8b      	ldr	r2, [pc, #556]	@ (800f7c8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f59a:	4694      	mov	ip, r2
 800f59c:	4463      	add	r3, ip
 800f59e:	2180      	movs	r1, #128	@ 0x80
 800f5a0:	187a      	adds	r2, r7, r1
 800f5a2:	6013      	str	r3, [r2, #0]
 800f5a4:	187b      	adds	r3, r7, r1
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	059b      	lsls	r3, r3, #22
 800f5ae:	0d9b      	lsrs	r3, r3, #22
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	187b      	adds	r3, r7, r1
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	801a      	strh	r2, [r3, #0]
 800f5b8:	187b      	adds	r3, r7, r1
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	881b      	ldrh	r3, [r3, #0]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	4a82      	ldr	r2, [pc, #520]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	187b      	adds	r3, r7, r1
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	801a      	strh	r2, [r3, #0]
 800f5cc:	e018      	b.n	800f600 <HAL_PCD_EP_DB_Transmit+0x560>
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	785b      	ldrb	r3, [r3, #1]
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d114      	bne.n	800f600 <HAL_PCD_EP_DB_Transmit+0x560>
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2250      	movs	r2, #80	@ 0x50
 800f5dc:	5a9b      	ldrh	r3, [r3, r2]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	001a      	movs	r2, r3
 800f5e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f5e4:	189b      	adds	r3, r3, r2
 800f5e6:	677b      	str	r3, [r7, #116]	@ 0x74
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	00da      	lsls	r2, r3, #3
 800f5ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f5f0:	18d3      	adds	r3, r2, r3
 800f5f2:	4a75      	ldr	r2, [pc, #468]	@ (800f7c8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f5f4:	4694      	mov	ip, r2
 800f5f6:	4463      	add	r3, ip
 800f5f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800f5fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	781a      	ldrb	r2, [r3, #0]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	0011      	movs	r1, r2
 800f608:	0018      	movs	r0, r3
 800f60a:	f007 fcd1 	bl	8016fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f60e:	1dbb      	adds	r3, r7, #6
 800f610:	881a      	ldrh	r2, [r3, #0]
 800f612:	2380      	movs	r3, #128	@ 0x80
 800f614:	01db      	lsls	r3, r3, #7
 800f616:	4013      	ands	r3, r2
 800f618:	d000      	beq.n	800f61c <HAL_PCD_EP_DB_Transmit+0x57c>
 800f61a:	e11e      	b.n	800f85a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	001a      	movs	r2, r3
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	18d3      	adds	r3, r2, r3
 800f62a:	881b      	ldrh	r3, [r3, #0]
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	2088      	movs	r0, #136	@ 0x88
 800f630:	183b      	adds	r3, r7, r0
 800f632:	4967      	ldr	r1, [pc, #412]	@ (800f7d0 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f634:	400a      	ands	r2, r1
 800f636:	801a      	strh	r2, [r3, #0]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	001a      	movs	r2, r3
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	18d3      	adds	r3, r2, r3
 800f646:	183a      	adds	r2, r7, r0
 800f648:	8812      	ldrh	r2, [r2, #0]
 800f64a:	4962      	ldr	r1, [pc, #392]	@ (800f7d4 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f64c:	430a      	orrs	r2, r1
 800f64e:	b292      	uxth	r2, r2
 800f650:	801a      	strh	r2, [r3, #0]
 800f652:	e102      	b.n	800f85a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f654:	1dbb      	adds	r3, r7, #6
 800f656:	881a      	ldrh	r2, [r3, #0]
 800f658:	2380      	movs	r3, #128	@ 0x80
 800f65a:	01db      	lsls	r3, r3, #7
 800f65c:	4013      	ands	r3, r2
 800f65e:	d11a      	bne.n	800f696 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	001a      	movs	r2, r3
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	18d3      	adds	r3, r2, r3
 800f66e:	881b      	ldrh	r3, [r3, #0]
 800f670:	b29a      	uxth	r2, r3
 800f672:	204e      	movs	r0, #78	@ 0x4e
 800f674:	183b      	adds	r3, r7, r0
 800f676:	4956      	ldr	r1, [pc, #344]	@ (800f7d0 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f678:	400a      	ands	r2, r1
 800f67a:	801a      	strh	r2, [r3, #0]
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	001a      	movs	r2, r3
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	18d3      	adds	r3, r2, r3
 800f68a:	183a      	adds	r2, r7, r0
 800f68c:	8812      	ldrh	r2, [r2, #0]
 800f68e:	4951      	ldr	r1, [pc, #324]	@ (800f7d4 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f690:	430a      	orrs	r2, r1
 800f692:	b292      	uxth	r2, r2
 800f694:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	2224      	movs	r2, #36	@ 0x24
 800f69a:	5c9b      	ldrb	r3, [r3, r2]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d000      	beq.n	800f6a2 <HAL_PCD_EP_DB_Transmit+0x602>
 800f6a0:	e0db      	b.n	800f85a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	695a      	ldr	r2, [r3, #20]
 800f6a6:	2186      	movs	r1, #134	@ 0x86
 800f6a8:	187b      	adds	r3, r7, r1
 800f6aa:	881b      	ldrh	r3, [r3, #0]
 800f6ac:	18d2      	adds	r2, r2, r3
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	69da      	ldr	r2, [r3, #28]
 800f6b6:	187b      	adds	r3, r7, r1
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	18d2      	adds	r2, r2, r3
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	6a1a      	ldr	r2, [r3, #32]
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	691b      	ldr	r3, [r3, #16]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d30c      	bcc.n	800f6e6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	218c      	movs	r1, #140	@ 0x8c
 800f6d2:	187a      	adds	r2, r7, r1
 800f6d4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	6a1a      	ldr	r2, [r3, #32]
 800f6da:	187b      	adds	r3, r7, r1
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	1ad2      	subs	r2, r2, r3
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	621a      	str	r2, [r3, #32]
 800f6e4:	e01a      	b.n	800f71c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	6a1b      	ldr	r3, [r3, #32]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10a      	bne.n	800f704 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800f6ee:	2386      	movs	r3, #134	@ 0x86
 800f6f0:	18fb      	adds	r3, r7, r3
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	228c      	movs	r2, #140	@ 0x8c
 800f6f6:	18ba      	adds	r2, r7, r2
 800f6f8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2224      	movs	r2, #36	@ 0x24
 800f6fe:	2100      	movs	r1, #0
 800f700:	5499      	strb	r1, [r3, r2]
 800f702:	e00b      	b.n	800f71c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	6a1b      	ldr	r3, [r3, #32]
 800f708:	228c      	movs	r2, #140	@ 0x8c
 800f70a:	18ba      	adds	r2, r7, r2
 800f70c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	2200      	movs	r2, #0
 800f712:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	2224      	movs	r2, #36	@ 0x24
 800f718:	2100      	movs	r1, #0
 800f71a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	657b      	str	r3, [r7, #84]	@ 0x54
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	785b      	ldrb	r3, [r3, #1]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d000      	beq.n	800f72c <HAL_PCD_EP_DB_Transmit+0x68c>
 800f72a:	e06e      	b.n	800f80a <HAL_PCD_EP_DB_Transmit+0x76a>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2250      	movs	r2, #80	@ 0x50
 800f738:	5a9b      	ldrh	r3, [r3, r2]
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	001a      	movs	r2, r3
 800f73e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f740:	189b      	adds	r3, r3, r2
 800f742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	00da      	lsls	r2, r3, #3
 800f74a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f74c:	18d3      	adds	r3, r2, r3
 800f74e:	4a1e      	ldr	r2, [pc, #120]	@ (800f7c8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f750:	4694      	mov	ip, r2
 800f752:	4463      	add	r3, ip
 800f754:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f756:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	059b      	lsls	r3, r3, #22
 800f75e:	0d9b      	lsrs	r3, r3, #22
 800f760:	b29a      	uxth	r2, r3
 800f762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f764:	801a      	strh	r2, [r3, #0]
 800f766:	228c      	movs	r2, #140	@ 0x8c
 800f768:	18bb      	adds	r3, r7, r2
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b3e      	cmp	r3, #62	@ 0x3e
 800f76e:	d91a      	bls.n	800f7a6 <HAL_PCD_EP_DB_Transmit+0x706>
 800f770:	18bb      	adds	r3, r7, r2
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	095b      	lsrs	r3, r3, #5
 800f776:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f778:	18bb      	adds	r3, r7, r2
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	221f      	movs	r2, #31
 800f77e:	4013      	ands	r3, r2
 800f780:	d102      	bne.n	800f788 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800f782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f784:	3b01      	subs	r3, #1
 800f786:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f788:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f790:	b29b      	uxth	r3, r3
 800f792:	029b      	lsls	r3, r3, #10
 800f794:	b29b      	uxth	r3, r3
 800f796:	4313      	orrs	r3, r2
 800f798:	b29b      	uxth	r3, r3
 800f79a:	4a0c      	ldr	r2, [pc, #48]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f79c:	4313      	orrs	r3, r2
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7a2:	801a      	strh	r2, [r3, #0]
 800f7a4:	e04d      	b.n	800f842 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f7a6:	238c      	movs	r3, #140	@ 0x8c
 800f7a8:	18fb      	adds	r3, r7, r3
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d113      	bne.n	800f7d8 <HAL_PCD_EP_DB_Transmit+0x738>
 800f7b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	4a05      	ldr	r2, [pc, #20]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7be:	801a      	strh	r2, [r3, #0]
 800f7c0:	e03f      	b.n	800f842 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f7c2:	46c0      	nop			@ (mov r8, r8)
 800f7c4:	00000402 	.word	0x00000402
 800f7c8:	00000406 	.word	0x00000406
 800f7cc:	ffff8000 	.word	0xffff8000
 800f7d0:	ffff8f8f 	.word	0xffff8f8f
 800f7d4:	ffffc080 	.word	0xffffc080
 800f7d8:	228c      	movs	r2, #140	@ 0x8c
 800f7da:	18bb      	adds	r3, r7, r2
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	085b      	lsrs	r3, r3, #1
 800f7e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f7e2:	18bb      	adds	r3, r7, r2
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	4013      	ands	r3, r2
 800f7ea:	d002      	beq.n	800f7f2 <HAL_PCD_EP_DB_Transmit+0x752>
 800f7ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f7f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	029b      	lsls	r3, r3, #10
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	4313      	orrs	r3, r2
 800f802:	b29a      	uxth	r2, r3
 800f804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f806:	801a      	strh	r2, [r3, #0]
 800f808:	e01b      	b.n	800f842 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	785b      	ldrb	r3, [r3, #1]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d117      	bne.n	800f842 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2250      	movs	r2, #80	@ 0x50
 800f818:	5a9b      	ldrh	r3, [r3, r2]
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	001a      	movs	r2, r3
 800f81e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f820:	189b      	adds	r3, r3, r2
 800f822:	657b      	str	r3, [r7, #84]	@ 0x54
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	00da      	lsls	r2, r3, #3
 800f82a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f82c:	18d3      	adds	r3, r2, r3
 800f82e:	4a21      	ldr	r2, [pc, #132]	@ (800f8b4 <HAL_PCD_EP_DB_Transmit+0x814>)
 800f830:	4694      	mov	ip, r2
 800f832:	4463      	add	r3, ip
 800f834:	653b      	str	r3, [r7, #80]	@ 0x50
 800f836:	238c      	movs	r3, #140	@ 0x8c
 800f838:	18fb      	adds	r3, r7, r3
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f840:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6818      	ldr	r0, [r3, #0]
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	6959      	ldr	r1, [r3, #20]
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	895a      	ldrh	r2, [r3, #10]
 800f84e:	238c      	movs	r3, #140	@ 0x8c
 800f850:	18fb      	adds	r3, r7, r3
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	b29b      	uxth	r3, r3
 800f856:	f005 fb27 	bl	8014ea8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	001a      	movs	r2, r3
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	18d3      	adds	r3, r2, r3
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	2014      	movs	r0, #20
 800f86e:	183b      	adds	r3, r7, r0
 800f870:	4911      	ldr	r1, [pc, #68]	@ (800f8b8 <HAL_PCD_EP_DB_Transmit+0x818>)
 800f872:	400a      	ands	r2, r1
 800f874:	801a      	strh	r2, [r3, #0]
 800f876:	183b      	adds	r3, r7, r0
 800f878:	183a      	adds	r2, r7, r0
 800f87a:	8812      	ldrh	r2, [r2, #0]
 800f87c:	2110      	movs	r1, #16
 800f87e:	404a      	eors	r2, r1
 800f880:	801a      	strh	r2, [r3, #0]
 800f882:	183b      	adds	r3, r7, r0
 800f884:	183a      	adds	r2, r7, r0
 800f886:	8812      	ldrh	r2, [r2, #0]
 800f888:	2120      	movs	r1, #32
 800f88a:	404a      	eors	r2, r1
 800f88c:	801a      	strh	r2, [r3, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	001a      	movs	r2, r3
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	18d3      	adds	r3, r2, r3
 800f89c:	183a      	adds	r2, r7, r0
 800f89e:	8812      	ldrh	r2, [r2, #0]
 800f8a0:	4906      	ldr	r1, [pc, #24]	@ (800f8bc <HAL_PCD_EP_DB_Transmit+0x81c>)
 800f8a2:	430a      	orrs	r2, r1
 800f8a4:	b292      	uxth	r2, r2
 800f8a6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	0018      	movs	r0, r3
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	b024      	add	sp, #144	@ 0x90
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	46c0      	nop			@ (mov r8, r8)
 800f8b4:	00000406 	.word	0x00000406
 800f8b8:	ffff8fbf 	.word	0xffff8fbf
 800f8bc:	ffff8080 	.word	0xffff8080

0800f8c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f8c0:	b590      	push	{r4, r7, lr}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	0008      	movs	r0, r1
 800f8ca:	0011      	movs	r1, r2
 800f8cc:	607b      	str	r3, [r7, #4]
 800f8ce:	240a      	movs	r4, #10
 800f8d0:	193b      	adds	r3, r7, r4
 800f8d2:	1c02      	adds	r2, r0, #0
 800f8d4:	801a      	strh	r2, [r3, #0]
 800f8d6:	2308      	movs	r3, #8
 800f8d8:	18fb      	adds	r3, r7, r3
 800f8da:	1c0a      	adds	r2, r1, #0
 800f8dc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f8de:	0021      	movs	r1, r4
 800f8e0:	187b      	adds	r3, r7, r1
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	2280      	movs	r2, #128	@ 0x80
 800f8e6:	4013      	ands	r3, r2
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00c      	beq.n	800f908 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f8ee:	187b      	adds	r3, r7, r1
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	2207      	movs	r2, #7
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	1c5a      	adds	r2, r3, #1
 800f8f8:	0013      	movs	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	189b      	adds	r3, r3, r2
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	18d3      	adds	r3, r2, r3
 800f904:	617b      	str	r3, [r7, #20]
 800f906:	e00b      	b.n	800f920 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f908:	230a      	movs	r3, #10
 800f90a:	18fb      	adds	r3, r7, r3
 800f90c:	881a      	ldrh	r2, [r3, #0]
 800f90e:	0013      	movs	r3, r2
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	189b      	adds	r3, r3, r2
 800f914:	00db      	lsls	r3, r3, #3
 800f916:	3369      	adds	r3, #105	@ 0x69
 800f918:	33ff      	adds	r3, #255	@ 0xff
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	18d3      	adds	r3, r2, r3
 800f91e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f920:	2308      	movs	r3, #8
 800f922:	18fb      	adds	r3, r7, r3
 800f924:	881b      	ldrh	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d107      	bne.n	800f93a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	2200      	movs	r2, #0
 800f92e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	b29a      	uxth	r2, r3
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	80da      	strh	r2, [r3, #6]
 800f938:	e00b      	b.n	800f952 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2201      	movs	r2, #1
 800f93e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	b29a      	uxth	r2, r3
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	0c1b      	lsrs	r3, r3, #16
 800f94c:	b29a      	uxth	r2, r3
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f952:	2300      	movs	r3, #0
}
 800f954:	0018      	movs	r0, r3
 800f956:	46bd      	mov	sp, r7
 800f958:	b007      	add	sp, #28
 800f95a:	bd90      	pop	{r4, r7, pc}

0800f95c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	23ba      	movs	r3, #186	@ 0xba
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	2101      	movs	r1, #1
 800f972:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	23b8      	movs	r3, #184	@ 0xb8
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	2100      	movs	r1, #0
 800f97c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2254      	movs	r2, #84	@ 0x54
 800f982:	5a9b      	ldrh	r3, [r3, r2]
 800f984:	b29b      	uxth	r3, r3
 800f986:	2201      	movs	r2, #1
 800f988:	4313      	orrs	r3, r2
 800f98a:	b299      	uxth	r1, r3
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2254      	movs	r2, #84	@ 0x54
 800f990:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2254      	movs	r2, #84	@ 0x54
 800f996:	5a9b      	ldrh	r3, [r3, r2]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	2202      	movs	r2, #2
 800f99c:	4313      	orrs	r3, r2
 800f99e:	b299      	uxth	r1, r3
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2254      	movs	r2, #84	@ 0x54
 800f9a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	0018      	movs	r0, r3
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	b004      	add	sp, #16
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	000a      	movs	r2, r1
 800f9ba:	1cfb      	adds	r3, r7, #3
 800f9bc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f9be:	46c0      	nop			@ (mov r8, r8)
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	b002      	add	sp, #8
 800f9c4:	bd80      	pop	{r7, pc}
	...

0800f9c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800f9cc:	4b04      	ldr	r3, [pc, #16]	@ (800f9e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	4b03      	ldr	r3, [pc, #12]	@ (800f9e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f9d2:	2180      	movs	r1, #128	@ 0x80
 800f9d4:	0049      	lsls	r1, r1, #1
 800f9d6:	430a      	orrs	r2, r1
 800f9d8:	601a      	str	r2, [r3, #0]
}
 800f9da:	46c0      	nop			@ (mov r8, r8)
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	40007000 	.word	0x40007000

0800f9e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f9e4:	b5b0      	push	{r4, r5, r7, lr}
 800f9e6:	b08a      	sub	sp, #40	@ 0x28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d102      	bne.n	800f9f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	f000 fbbf 	bl	8010176 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f9f8:	4bc9      	ldr	r3, [pc, #804]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	220c      	movs	r2, #12
 800f9fe:	4013      	ands	r3, r2
 800fa00:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fa02:	4bc7      	ldr	r3, [pc, #796]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa04:	68da      	ldr	r2, [r3, #12]
 800fa06:	2380      	movs	r3, #128	@ 0x80
 800fa08:	025b      	lsls	r3, r3, #9
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2201      	movs	r2, #1
 800fa14:	4013      	ands	r3, r2
 800fa16:	d100      	bne.n	800fa1a <HAL_RCC_OscConfig+0x36>
 800fa18:	e07e      	b.n	800fb18 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	2b08      	cmp	r3, #8
 800fa1e:	d007      	beq.n	800fa30 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	2b0c      	cmp	r3, #12
 800fa24:	d112      	bne.n	800fa4c <HAL_RCC_OscConfig+0x68>
 800fa26:	69ba      	ldr	r2, [r7, #24]
 800fa28:	2380      	movs	r3, #128	@ 0x80
 800fa2a:	025b      	lsls	r3, r3, #9
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d10d      	bne.n	800fa4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa30:	4bbb      	ldr	r3, [pc, #748]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	2380      	movs	r3, #128	@ 0x80
 800fa36:	029b      	lsls	r3, r3, #10
 800fa38:	4013      	ands	r3, r2
 800fa3a:	d100      	bne.n	800fa3e <HAL_RCC_OscConfig+0x5a>
 800fa3c:	e06b      	b.n	800fb16 <HAL_RCC_OscConfig+0x132>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d167      	bne.n	800fb16 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800fa46:	2301      	movs	r3, #1
 800fa48:	f000 fb95 	bl	8010176 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	685a      	ldr	r2, [r3, #4]
 800fa50:	2380      	movs	r3, #128	@ 0x80
 800fa52:	025b      	lsls	r3, r3, #9
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d107      	bne.n	800fa68 <HAL_RCC_OscConfig+0x84>
 800fa58:	4bb1      	ldr	r3, [pc, #708]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	4bb0      	ldr	r3, [pc, #704]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa5e:	2180      	movs	r1, #128	@ 0x80
 800fa60:	0249      	lsls	r1, r1, #9
 800fa62:	430a      	orrs	r2, r1
 800fa64:	601a      	str	r2, [r3, #0]
 800fa66:	e027      	b.n	800fab8 <HAL_RCC_OscConfig+0xd4>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	685a      	ldr	r2, [r3, #4]
 800fa6c:	23a0      	movs	r3, #160	@ 0xa0
 800fa6e:	02db      	lsls	r3, r3, #11
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d10e      	bne.n	800fa92 <HAL_RCC_OscConfig+0xae>
 800fa74:	4baa      	ldr	r3, [pc, #680]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	4ba9      	ldr	r3, [pc, #676]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa7a:	2180      	movs	r1, #128	@ 0x80
 800fa7c:	02c9      	lsls	r1, r1, #11
 800fa7e:	430a      	orrs	r2, r1
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	4ba7      	ldr	r3, [pc, #668]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	4ba6      	ldr	r3, [pc, #664]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa88:	2180      	movs	r1, #128	@ 0x80
 800fa8a:	0249      	lsls	r1, r1, #9
 800fa8c:	430a      	orrs	r2, r1
 800fa8e:	601a      	str	r2, [r3, #0]
 800fa90:	e012      	b.n	800fab8 <HAL_RCC_OscConfig+0xd4>
 800fa92:	4ba3      	ldr	r3, [pc, #652]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	4ba2      	ldr	r3, [pc, #648]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fa98:	49a2      	ldr	r1, [pc, #648]	@ (800fd24 <HAL_RCC_OscConfig+0x340>)
 800fa9a:	400a      	ands	r2, r1
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	4ba0      	ldr	r3, [pc, #640]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	2380      	movs	r3, #128	@ 0x80
 800faa4:	025b      	lsls	r3, r3, #9
 800faa6:	4013      	ands	r3, r2
 800faa8:	60fb      	str	r3, [r7, #12]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	4b9c      	ldr	r3, [pc, #624]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	4b9b      	ldr	r3, [pc, #620]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fab2:	499d      	ldr	r1, [pc, #628]	@ (800fd28 <HAL_RCC_OscConfig+0x344>)
 800fab4:	400a      	ands	r2, r1
 800fab6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d015      	beq.n	800faec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fac0:	f7fa fa16 	bl	8009ef0 <HAL_GetTick>
 800fac4:	0003      	movs	r3, r0
 800fac6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fac8:	e009      	b.n	800fade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800faca:	f7fa fa11 	bl	8009ef0 <HAL_GetTick>
 800face:	0002      	movs	r2, r0
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	2b64      	cmp	r3, #100	@ 0x64
 800fad6:	d902      	bls.n	800fade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800fad8:	2303      	movs	r3, #3
 800fada:	f000 fb4c 	bl	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fade:	4b90      	ldr	r3, [pc, #576]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	2380      	movs	r3, #128	@ 0x80
 800fae4:	029b      	lsls	r3, r3, #10
 800fae6:	4013      	ands	r3, r2
 800fae8:	d0ef      	beq.n	800faca <HAL_RCC_OscConfig+0xe6>
 800faea:	e015      	b.n	800fb18 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800faec:	f7fa fa00 	bl	8009ef0 <HAL_GetTick>
 800faf0:	0003      	movs	r3, r0
 800faf2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800faf4:	e008      	b.n	800fb08 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800faf6:	f7fa f9fb 	bl	8009ef0 <HAL_GetTick>
 800fafa:	0002      	movs	r2, r0
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	2b64      	cmp	r3, #100	@ 0x64
 800fb02:	d901      	bls.n	800fb08 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800fb04:	2303      	movs	r3, #3
 800fb06:	e336      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fb08:	4b85      	ldr	r3, [pc, #532]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	2380      	movs	r3, #128	@ 0x80
 800fb0e:	029b      	lsls	r3, r3, #10
 800fb10:	4013      	ands	r3, r2
 800fb12:	d1f0      	bne.n	800faf6 <HAL_RCC_OscConfig+0x112>
 800fb14:	e000      	b.n	800fb18 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fb16:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2202      	movs	r2, #2
 800fb1e:	4013      	ands	r3, r2
 800fb20:	d100      	bne.n	800fb24 <HAL_RCC_OscConfig+0x140>
 800fb22:	e099      	b.n	800fc58 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb2c:	2220      	movs	r2, #32
 800fb2e:	4013      	ands	r3, r2
 800fb30:	d009      	beq.n	800fb46 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800fb32:	4b7b      	ldr	r3, [pc, #492]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	4b7a      	ldr	r3, [pc, #488]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb38:	2120      	movs	r1, #32
 800fb3a:	430a      	orrs	r2, r1
 800fb3c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800fb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb40:	2220      	movs	r2, #32
 800fb42:	4393      	bics	r3, r2
 800fb44:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	2b04      	cmp	r3, #4
 800fb4a:	d005      	beq.n	800fb58 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2b0c      	cmp	r3, #12
 800fb50:	d13e      	bne.n	800fbd0 <HAL_RCC_OscConfig+0x1ec>
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d13b      	bne.n	800fbd0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800fb58:	4b71      	ldr	r3, [pc, #452]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2204      	movs	r2, #4
 800fb5e:	4013      	ands	r3, r2
 800fb60:	d004      	beq.n	800fb6c <HAL_RCC_OscConfig+0x188>
 800fb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d101      	bne.n	800fb6c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e304      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb6c:	4b6c      	ldr	r3, [pc, #432]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	4a6e      	ldr	r2, [pc, #440]	@ (800fd2c <HAL_RCC_OscConfig+0x348>)
 800fb72:	4013      	ands	r3, r2
 800fb74:	0019      	movs	r1, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	021a      	lsls	r2, r3, #8
 800fb7c:	4b68      	ldr	r3, [pc, #416]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb7e:	430a      	orrs	r2, r1
 800fb80:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fb82:	4b67      	ldr	r3, [pc, #412]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2209      	movs	r2, #9
 800fb88:	4393      	bics	r3, r2
 800fb8a:	0019      	movs	r1, r3
 800fb8c:	4b64      	ldr	r3, [pc, #400]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb90:	430a      	orrs	r2, r1
 800fb92:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fb94:	f000 fc42 	bl	801041c <HAL_RCC_GetSysClockFreq>
 800fb98:	0001      	movs	r1, r0
 800fb9a:	4b61      	ldr	r3, [pc, #388]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	091b      	lsrs	r3, r3, #4
 800fba0:	220f      	movs	r2, #15
 800fba2:	4013      	ands	r3, r2
 800fba4:	4a62      	ldr	r2, [pc, #392]	@ (800fd30 <HAL_RCC_OscConfig+0x34c>)
 800fba6:	5cd3      	ldrb	r3, [r2, r3]
 800fba8:	000a      	movs	r2, r1
 800fbaa:	40da      	lsrs	r2, r3
 800fbac:	4b61      	ldr	r3, [pc, #388]	@ (800fd34 <HAL_RCC_OscConfig+0x350>)
 800fbae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800fbb0:	4b61      	ldr	r3, [pc, #388]	@ (800fd38 <HAL_RCC_OscConfig+0x354>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2513      	movs	r5, #19
 800fbb6:	197c      	adds	r4, r7, r5
 800fbb8:	0018      	movs	r0, r3
 800fbba:	f7fa f953 	bl	8009e64 <HAL_InitTick>
 800fbbe:	0003      	movs	r3, r0
 800fbc0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800fbc2:	197b      	adds	r3, r7, r5
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d046      	beq.n	800fc58 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800fbca:	197b      	adds	r3, r7, r5
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	e2d2      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d027      	beq.n	800fc26 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fbd6:	4b52      	ldr	r3, [pc, #328]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2209      	movs	r2, #9
 800fbdc:	4393      	bics	r3, r2
 800fbde:	0019      	movs	r1, r3
 800fbe0:	4b4f      	ldr	r3, [pc, #316]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fbe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbe4:	430a      	orrs	r2, r1
 800fbe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbe8:	f7fa f982 	bl	8009ef0 <HAL_GetTick>
 800fbec:	0003      	movs	r3, r0
 800fbee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fbf0:	e008      	b.n	800fc04 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fbf2:	f7fa f97d 	bl	8009ef0 <HAL_GetTick>
 800fbf6:	0002      	movs	r2, r0
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	1ad3      	subs	r3, r2, r3
 800fbfc:	2b02      	cmp	r3, #2
 800fbfe:	d901      	bls.n	800fc04 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800fc00:	2303      	movs	r3, #3
 800fc02:	e2b8      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fc04:	4b46      	ldr	r3, [pc, #280]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2204      	movs	r2, #4
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	d0f1      	beq.n	800fbf2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc0e:	4b44      	ldr	r3, [pc, #272]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	4a46      	ldr	r2, [pc, #280]	@ (800fd2c <HAL_RCC_OscConfig+0x348>)
 800fc14:	4013      	ands	r3, r2
 800fc16:	0019      	movs	r1, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	691b      	ldr	r3, [r3, #16]
 800fc1c:	021a      	lsls	r2, r3, #8
 800fc1e:	4b40      	ldr	r3, [pc, #256]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc20:	430a      	orrs	r2, r1
 800fc22:	605a      	str	r2, [r3, #4]
 800fc24:	e018      	b.n	800fc58 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fc26:	4b3e      	ldr	r3, [pc, #248]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	4b3d      	ldr	r3, [pc, #244]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	438a      	bics	r2, r1
 800fc30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc32:	f7fa f95d 	bl	8009ef0 <HAL_GetTick>
 800fc36:	0003      	movs	r3, r0
 800fc38:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fc3a:	e008      	b.n	800fc4e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fc3c:	f7fa f958 	bl	8009ef0 <HAL_GetTick>
 800fc40:	0002      	movs	r2, r0
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	2b02      	cmp	r3, #2
 800fc48:	d901      	bls.n	800fc4e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800fc4a:	2303      	movs	r3, #3
 800fc4c:	e293      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fc4e:	4b34      	ldr	r3, [pc, #208]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2204      	movs	r2, #4
 800fc54:	4013      	ands	r3, r2
 800fc56:	d1f1      	bne.n	800fc3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	2210      	movs	r2, #16
 800fc5e:	4013      	ands	r3, r2
 800fc60:	d100      	bne.n	800fc64 <HAL_RCC_OscConfig+0x280>
 800fc62:	e0a2      	b.n	800fdaa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d140      	bne.n	800fcec <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fc6a:	4b2d      	ldr	r3, [pc, #180]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	2380      	movs	r3, #128	@ 0x80
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4013      	ands	r3, r2
 800fc74:	d005      	beq.n	800fc82 <HAL_RCC_OscConfig+0x29e>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	69db      	ldr	r3, [r3, #28]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d101      	bne.n	800fc82 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e279      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fc82:	4b27      	ldr	r3, [pc, #156]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	4a2d      	ldr	r2, [pc, #180]	@ (800fd3c <HAL_RCC_OscConfig+0x358>)
 800fc88:	4013      	ands	r3, r2
 800fc8a:	0019      	movs	r1, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc90:	4b23      	ldr	r3, [pc, #140]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc92:	430a      	orrs	r2, r1
 800fc94:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fc96:	4b22      	ldr	r3, [pc, #136]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	021b      	lsls	r3, r3, #8
 800fc9c:	0a19      	lsrs	r1, r3, #8
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6a1b      	ldr	r3, [r3, #32]
 800fca2:	061a      	lsls	r2, r3, #24
 800fca4:	4b1e      	ldr	r3, [pc, #120]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fca6:	430a      	orrs	r2, r1
 800fca8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcae:	0b5b      	lsrs	r3, r3, #13
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	2280      	movs	r2, #128	@ 0x80
 800fcb4:	0212      	lsls	r2, r2, #8
 800fcb6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fcb8:	4b19      	ldr	r3, [pc, #100]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	091b      	lsrs	r3, r3, #4
 800fcbe:	210f      	movs	r1, #15
 800fcc0:	400b      	ands	r3, r1
 800fcc2:	491b      	ldr	r1, [pc, #108]	@ (800fd30 <HAL_RCC_OscConfig+0x34c>)
 800fcc4:	5ccb      	ldrb	r3, [r1, r3]
 800fcc6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fcc8:	4b1a      	ldr	r3, [pc, #104]	@ (800fd34 <HAL_RCC_OscConfig+0x350>)
 800fcca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800fccc:	4b1a      	ldr	r3, [pc, #104]	@ (800fd38 <HAL_RCC_OscConfig+0x354>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2513      	movs	r5, #19
 800fcd2:	197c      	adds	r4, r7, r5
 800fcd4:	0018      	movs	r0, r3
 800fcd6:	f7fa f8c5 	bl	8009e64 <HAL_InitTick>
 800fcda:	0003      	movs	r3, r0
 800fcdc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800fcde:	197b      	adds	r3, r7, r5
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d061      	beq.n	800fdaa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800fce6:	197b      	adds	r3, r7, r5
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	e244      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	69db      	ldr	r3, [r3, #28]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d040      	beq.n	800fd76 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fcf4:	4b0a      	ldr	r3, [pc, #40]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	4b09      	ldr	r3, [pc, #36]	@ (800fd20 <HAL_RCC_OscConfig+0x33c>)
 800fcfa:	2180      	movs	r1, #128	@ 0x80
 800fcfc:	0049      	lsls	r1, r1, #1
 800fcfe:	430a      	orrs	r2, r1
 800fd00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd02:	f7fa f8f5 	bl	8009ef0 <HAL_GetTick>
 800fd06:	0003      	movs	r3, r0
 800fd08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fd0a:	e019      	b.n	800fd40 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd0c:	f7fa f8f0 	bl	8009ef0 <HAL_GetTick>
 800fd10:	0002      	movs	r2, r0
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	2b02      	cmp	r3, #2
 800fd18:	d912      	bls.n	800fd40 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e22b      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
 800fd1e:	46c0      	nop			@ (mov r8, r8)
 800fd20:	40021000 	.word	0x40021000
 800fd24:	fffeffff 	.word	0xfffeffff
 800fd28:	fffbffff 	.word	0xfffbffff
 800fd2c:	ffffe0ff 	.word	0xffffe0ff
 800fd30:	0801bc90 	.word	0x0801bc90
 800fd34:	20000058 	.word	0x20000058
 800fd38:	2000006c 	.word	0x2000006c
 800fd3c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fd40:	4bca      	ldr	r3, [pc, #808]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	2380      	movs	r3, #128	@ 0x80
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	4013      	ands	r3, r2
 800fd4a:	d0df      	beq.n	800fd0c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fd4c:	4bc7      	ldr	r3, [pc, #796]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	4ac7      	ldr	r2, [pc, #796]	@ (8010070 <HAL_RCC_OscConfig+0x68c>)
 800fd52:	4013      	ands	r3, r2
 800fd54:	0019      	movs	r1, r3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd5a:	4bc4      	ldr	r3, [pc, #784]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fd5c:	430a      	orrs	r2, r1
 800fd5e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fd60:	4bc2      	ldr	r3, [pc, #776]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	021b      	lsls	r3, r3, #8
 800fd66:	0a19      	lsrs	r1, r3, #8
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a1b      	ldr	r3, [r3, #32]
 800fd6c:	061a      	lsls	r2, r3, #24
 800fd6e:	4bbf      	ldr	r3, [pc, #764]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fd70:	430a      	orrs	r2, r1
 800fd72:	605a      	str	r2, [r3, #4]
 800fd74:	e019      	b.n	800fdaa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fd76:	4bbd      	ldr	r3, [pc, #756]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	4bbc      	ldr	r3, [pc, #752]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fd7c:	49bd      	ldr	r1, [pc, #756]	@ (8010074 <HAL_RCC_OscConfig+0x690>)
 800fd7e:	400a      	ands	r2, r1
 800fd80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd82:	f7fa f8b5 	bl	8009ef0 <HAL_GetTick>
 800fd86:	0003      	movs	r3, r0
 800fd88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fd8a:	e008      	b.n	800fd9e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fd8c:	f7fa f8b0 	bl	8009ef0 <HAL_GetTick>
 800fd90:	0002      	movs	r2, r0
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d901      	bls.n	800fd9e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	e1eb      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fd9e:	4bb3      	ldr	r3, [pc, #716]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	2380      	movs	r3, #128	@ 0x80
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	4013      	ands	r3, r2
 800fda8:	d1f0      	bne.n	800fd8c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	2208      	movs	r2, #8
 800fdb0:	4013      	ands	r3, r2
 800fdb2:	d036      	beq.n	800fe22 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	695b      	ldr	r3, [r3, #20]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d019      	beq.n	800fdf0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fdbc:	4bab      	ldr	r3, [pc, #684]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fdbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdc0:	4baa      	ldr	r3, [pc, #680]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	430a      	orrs	r2, r1
 800fdc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdc8:	f7fa f892 	bl	8009ef0 <HAL_GetTick>
 800fdcc:	0003      	movs	r3, r0
 800fdce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fdd0:	e008      	b.n	800fde4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdd2:	f7fa f88d 	bl	8009ef0 <HAL_GetTick>
 800fdd6:	0002      	movs	r2, r0
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	2b02      	cmp	r3, #2
 800fdde:	d901      	bls.n	800fde4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800fde0:	2303      	movs	r3, #3
 800fde2:	e1c8      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fde4:	4ba1      	ldr	r3, [pc, #644]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fde6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fde8:	2202      	movs	r2, #2
 800fdea:	4013      	ands	r3, r2
 800fdec:	d0f1      	beq.n	800fdd2 <HAL_RCC_OscConfig+0x3ee>
 800fdee:	e018      	b.n	800fe22 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fdf0:	4b9e      	ldr	r3, [pc, #632]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fdf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdf4:	4b9d      	ldr	r3, [pc, #628]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fdf6:	2101      	movs	r1, #1
 800fdf8:	438a      	bics	r2, r1
 800fdfa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdfc:	f7fa f878 	bl	8009ef0 <HAL_GetTick>
 800fe00:	0003      	movs	r3, r0
 800fe02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fe04:	e008      	b.n	800fe18 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fe06:	f7fa f873 	bl	8009ef0 <HAL_GetTick>
 800fe0a:	0002      	movs	r2, r0
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d901      	bls.n	800fe18 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800fe14:	2303      	movs	r3, #3
 800fe16:	e1ae      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fe18:	4b94      	ldr	r3, [pc, #592]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fe1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe1c:	2202      	movs	r2, #2
 800fe1e:	4013      	ands	r3, r2
 800fe20:	d1f1      	bne.n	800fe06 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2204      	movs	r2, #4
 800fe28:	4013      	ands	r3, r2
 800fe2a:	d100      	bne.n	800fe2e <HAL_RCC_OscConfig+0x44a>
 800fe2c:	e0ae      	b.n	800ff8c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fe2e:	2023      	movs	r0, #35	@ 0x23
 800fe30:	183b      	adds	r3, r7, r0
 800fe32:	2200      	movs	r2, #0
 800fe34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fe36:	4b8d      	ldr	r3, [pc, #564]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fe38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe3a:	2380      	movs	r3, #128	@ 0x80
 800fe3c:	055b      	lsls	r3, r3, #21
 800fe3e:	4013      	ands	r3, r2
 800fe40:	d109      	bne.n	800fe56 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe42:	4b8a      	ldr	r3, [pc, #552]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fe44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe46:	4b89      	ldr	r3, [pc, #548]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fe48:	2180      	movs	r1, #128	@ 0x80
 800fe4a:	0549      	lsls	r1, r1, #21
 800fe4c:	430a      	orrs	r2, r1
 800fe4e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800fe50:	183b      	adds	r3, r7, r0
 800fe52:	2201      	movs	r2, #1
 800fe54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe56:	4b88      	ldr	r3, [pc, #544]	@ (8010078 <HAL_RCC_OscConfig+0x694>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	2380      	movs	r3, #128	@ 0x80
 800fe5c:	005b      	lsls	r3, r3, #1
 800fe5e:	4013      	ands	r3, r2
 800fe60:	d11a      	bne.n	800fe98 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe62:	4b85      	ldr	r3, [pc, #532]	@ (8010078 <HAL_RCC_OscConfig+0x694>)
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	4b84      	ldr	r3, [pc, #528]	@ (8010078 <HAL_RCC_OscConfig+0x694>)
 800fe68:	2180      	movs	r1, #128	@ 0x80
 800fe6a:	0049      	lsls	r1, r1, #1
 800fe6c:	430a      	orrs	r2, r1
 800fe6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe70:	f7fa f83e 	bl	8009ef0 <HAL_GetTick>
 800fe74:	0003      	movs	r3, r0
 800fe76:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe78:	e008      	b.n	800fe8c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe7a:	f7fa f839 	bl	8009ef0 <HAL_GetTick>
 800fe7e:	0002      	movs	r2, r0
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	2b64      	cmp	r3, #100	@ 0x64
 800fe86:	d901      	bls.n	800fe8c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800fe88:	2303      	movs	r3, #3
 800fe8a:	e174      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe8c:	4b7a      	ldr	r3, [pc, #488]	@ (8010078 <HAL_RCC_OscConfig+0x694>)
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	2380      	movs	r3, #128	@ 0x80
 800fe92:	005b      	lsls	r3, r3, #1
 800fe94:	4013      	ands	r3, r2
 800fe96:	d0f0      	beq.n	800fe7a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	689a      	ldr	r2, [r3, #8]
 800fe9c:	2380      	movs	r3, #128	@ 0x80
 800fe9e:	005b      	lsls	r3, r3, #1
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d107      	bne.n	800feb4 <HAL_RCC_OscConfig+0x4d0>
 800fea4:	4b71      	ldr	r3, [pc, #452]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fea6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fea8:	4b70      	ldr	r3, [pc, #448]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800feaa:	2180      	movs	r1, #128	@ 0x80
 800feac:	0049      	lsls	r1, r1, #1
 800feae:	430a      	orrs	r2, r1
 800feb0:	651a      	str	r2, [r3, #80]	@ 0x50
 800feb2:	e031      	b.n	800ff18 <HAL_RCC_OscConfig+0x534>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d10c      	bne.n	800fed6 <HAL_RCC_OscConfig+0x4f2>
 800febc:	4b6b      	ldr	r3, [pc, #428]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800febe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fec0:	4b6a      	ldr	r3, [pc, #424]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fec2:	496c      	ldr	r1, [pc, #432]	@ (8010074 <HAL_RCC_OscConfig+0x690>)
 800fec4:	400a      	ands	r2, r1
 800fec6:	651a      	str	r2, [r3, #80]	@ 0x50
 800fec8:	4b68      	ldr	r3, [pc, #416]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800feca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fecc:	4b67      	ldr	r3, [pc, #412]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fece:	496b      	ldr	r1, [pc, #428]	@ (801007c <HAL_RCC_OscConfig+0x698>)
 800fed0:	400a      	ands	r2, r1
 800fed2:	651a      	str	r2, [r3, #80]	@ 0x50
 800fed4:	e020      	b.n	800ff18 <HAL_RCC_OscConfig+0x534>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	689a      	ldr	r2, [r3, #8]
 800feda:	23a0      	movs	r3, #160	@ 0xa0
 800fedc:	00db      	lsls	r3, r3, #3
 800fede:	429a      	cmp	r2, r3
 800fee0:	d10e      	bne.n	800ff00 <HAL_RCC_OscConfig+0x51c>
 800fee2:	4b62      	ldr	r3, [pc, #392]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fee4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fee6:	4b61      	ldr	r3, [pc, #388]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fee8:	2180      	movs	r1, #128	@ 0x80
 800feea:	00c9      	lsls	r1, r1, #3
 800feec:	430a      	orrs	r2, r1
 800feee:	651a      	str	r2, [r3, #80]	@ 0x50
 800fef0:	4b5e      	ldr	r3, [pc, #376]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fef2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fef4:	4b5d      	ldr	r3, [pc, #372]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fef6:	2180      	movs	r1, #128	@ 0x80
 800fef8:	0049      	lsls	r1, r1, #1
 800fefa:	430a      	orrs	r2, r1
 800fefc:	651a      	str	r2, [r3, #80]	@ 0x50
 800fefe:	e00b      	b.n	800ff18 <HAL_RCC_OscConfig+0x534>
 800ff00:	4b5a      	ldr	r3, [pc, #360]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff04:	4b59      	ldr	r3, [pc, #356]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff06:	495b      	ldr	r1, [pc, #364]	@ (8010074 <HAL_RCC_OscConfig+0x690>)
 800ff08:	400a      	ands	r2, r1
 800ff0a:	651a      	str	r2, [r3, #80]	@ 0x50
 800ff0c:	4b57      	ldr	r3, [pc, #348]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff10:	4b56      	ldr	r3, [pc, #344]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff12:	495a      	ldr	r1, [pc, #360]	@ (801007c <HAL_RCC_OscConfig+0x698>)
 800ff14:	400a      	ands	r2, r1
 800ff16:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d015      	beq.n	800ff4c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff20:	f7f9 ffe6 	bl	8009ef0 <HAL_GetTick>
 800ff24:	0003      	movs	r3, r0
 800ff26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff28:	e009      	b.n	800ff3e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff2a:	f7f9 ffe1 	bl	8009ef0 <HAL_GetTick>
 800ff2e:	0002      	movs	r2, r0
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	1ad3      	subs	r3, r2, r3
 800ff34:	4a52      	ldr	r2, [pc, #328]	@ (8010080 <HAL_RCC_OscConfig+0x69c>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d901      	bls.n	800ff3e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ff3a:	2303      	movs	r3, #3
 800ff3c:	e11b      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ff3e:	4b4b      	ldr	r3, [pc, #300]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff42:	2380      	movs	r3, #128	@ 0x80
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	4013      	ands	r3, r2
 800ff48:	d0ef      	beq.n	800ff2a <HAL_RCC_OscConfig+0x546>
 800ff4a:	e014      	b.n	800ff76 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff4c:	f7f9 ffd0 	bl	8009ef0 <HAL_GetTick>
 800ff50:	0003      	movs	r3, r0
 800ff52:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff54:	e009      	b.n	800ff6a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff56:	f7f9 ffcb 	bl	8009ef0 <HAL_GetTick>
 800ff5a:	0002      	movs	r2, r0
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	4a47      	ldr	r2, [pc, #284]	@ (8010080 <HAL_RCC_OscConfig+0x69c>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d901      	bls.n	800ff6a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800ff66:	2303      	movs	r3, #3
 800ff68:	e105      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ff6a:	4b40      	ldr	r3, [pc, #256]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff6e:	2380      	movs	r3, #128	@ 0x80
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4013      	ands	r3, r2
 800ff74:	d1ef      	bne.n	800ff56 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ff76:	2323      	movs	r3, #35	@ 0x23
 800ff78:	18fb      	adds	r3, r7, r3
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d105      	bne.n	800ff8c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff80:	4b3a      	ldr	r3, [pc, #232]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff84:	4b39      	ldr	r3, [pc, #228]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ff86:	493f      	ldr	r1, [pc, #252]	@ (8010084 <HAL_RCC_OscConfig+0x6a0>)
 800ff88:	400a      	ands	r2, r1
 800ff8a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2220      	movs	r2, #32
 800ff92:	4013      	ands	r3, r2
 800ff94:	d049      	beq.n	801002a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	699b      	ldr	r3, [r3, #24]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d026      	beq.n	800ffec <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800ff9e:	4b33      	ldr	r3, [pc, #204]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ffa0:	689a      	ldr	r2, [r3, #8]
 800ffa2:	4b32      	ldr	r3, [pc, #200]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	430a      	orrs	r2, r1
 800ffa8:	609a      	str	r2, [r3, #8]
 800ffaa:	4b30      	ldr	r3, [pc, #192]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ffac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ffae:	4b2f      	ldr	r3, [pc, #188]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	430a      	orrs	r2, r1
 800ffb4:	635a      	str	r2, [r3, #52]	@ 0x34
 800ffb6:	4b34      	ldr	r3, [pc, #208]	@ (8010088 <HAL_RCC_OscConfig+0x6a4>)
 800ffb8:	6a1a      	ldr	r2, [r3, #32]
 800ffba:	4b33      	ldr	r3, [pc, #204]	@ (8010088 <HAL_RCC_OscConfig+0x6a4>)
 800ffbc:	2180      	movs	r1, #128	@ 0x80
 800ffbe:	0189      	lsls	r1, r1, #6
 800ffc0:	430a      	orrs	r2, r1
 800ffc2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ffc4:	f7f9 ff94 	bl	8009ef0 <HAL_GetTick>
 800ffc8:	0003      	movs	r3, r0
 800ffca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ffcc:	e008      	b.n	800ffe0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ffce:	f7f9 ff8f 	bl	8009ef0 <HAL_GetTick>
 800ffd2:	0002      	movs	r2, r0
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	2b02      	cmp	r3, #2
 800ffda:	d901      	bls.n	800ffe0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e0ca      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ffe0:	4b22      	ldr	r3, [pc, #136]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	2202      	movs	r2, #2
 800ffe6:	4013      	ands	r3, r2
 800ffe8:	d0f1      	beq.n	800ffce <HAL_RCC_OscConfig+0x5ea>
 800ffea:	e01e      	b.n	801002a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800ffec:	4b1f      	ldr	r3, [pc, #124]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800ffee:	689a      	ldr	r2, [r3, #8]
 800fff0:	4b1e      	ldr	r3, [pc, #120]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 800fff2:	2101      	movs	r1, #1
 800fff4:	438a      	bics	r2, r1
 800fff6:	609a      	str	r2, [r3, #8]
 800fff8:	4b23      	ldr	r3, [pc, #140]	@ (8010088 <HAL_RCC_OscConfig+0x6a4>)
 800fffa:	6a1a      	ldr	r2, [r3, #32]
 800fffc:	4b22      	ldr	r3, [pc, #136]	@ (8010088 <HAL_RCC_OscConfig+0x6a4>)
 800fffe:	4923      	ldr	r1, [pc, #140]	@ (801008c <HAL_RCC_OscConfig+0x6a8>)
 8010000:	400a      	ands	r2, r1
 8010002:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010004:	f7f9 ff74 	bl	8009ef0 <HAL_GetTick>
 8010008:	0003      	movs	r3, r0
 801000a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801000c:	e008      	b.n	8010020 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801000e:	f7f9 ff6f 	bl	8009ef0 <HAL_GetTick>
 8010012:	0002      	movs	r2, r0
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	2b02      	cmp	r3, #2
 801001a:	d901      	bls.n	8010020 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801001c:	2303      	movs	r3, #3
 801001e:	e0aa      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010020:	4b12      	ldr	r3, [pc, #72]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	2202      	movs	r2, #2
 8010026:	4013      	ands	r3, r2
 8010028:	d1f1      	bne.n	801000e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801002e:	2b00      	cmp	r3, #0
 8010030:	d100      	bne.n	8010034 <HAL_RCC_OscConfig+0x650>
 8010032:	e09f      	b.n	8010174 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	2b0c      	cmp	r3, #12
 8010038:	d100      	bne.n	801003c <HAL_RCC_OscConfig+0x658>
 801003a:	e078      	b.n	801012e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010040:	2b02      	cmp	r3, #2
 8010042:	d159      	bne.n	80100f8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010044:	4b09      	ldr	r3, [pc, #36]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	4b08      	ldr	r3, [pc, #32]	@ (801006c <HAL_RCC_OscConfig+0x688>)
 801004a:	4911      	ldr	r1, [pc, #68]	@ (8010090 <HAL_RCC_OscConfig+0x6ac>)
 801004c:	400a      	ands	r2, r1
 801004e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010050:	f7f9 ff4e 	bl	8009ef0 <HAL_GetTick>
 8010054:	0003      	movs	r3, r0
 8010056:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010058:	e01c      	b.n	8010094 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801005a:	f7f9 ff49 	bl	8009ef0 <HAL_GetTick>
 801005e:	0002      	movs	r2, r0
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	2b02      	cmp	r3, #2
 8010066:	d915      	bls.n	8010094 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8010068:	2303      	movs	r3, #3
 801006a:	e084      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
 801006c:	40021000 	.word	0x40021000
 8010070:	ffff1fff 	.word	0xffff1fff
 8010074:	fffffeff 	.word	0xfffffeff
 8010078:	40007000 	.word	0x40007000
 801007c:	fffffbff 	.word	0xfffffbff
 8010080:	00001388 	.word	0x00001388
 8010084:	efffffff 	.word	0xefffffff
 8010088:	40010000 	.word	0x40010000
 801008c:	ffffdfff 	.word	0xffffdfff
 8010090:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010094:	4b3a      	ldr	r3, [pc, #232]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	2380      	movs	r3, #128	@ 0x80
 801009a:	049b      	lsls	r3, r3, #18
 801009c:	4013      	ands	r3, r2
 801009e:	d1dc      	bne.n	801005a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80100a0:	4b37      	ldr	r3, [pc, #220]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	4a37      	ldr	r2, [pc, #220]	@ (8010184 <HAL_RCC_OscConfig+0x7a0>)
 80100a6:	4013      	ands	r3, r2
 80100a8:	0019      	movs	r1, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100b2:	431a      	orrs	r2, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100b8:	431a      	orrs	r2, r3
 80100ba:	4b31      	ldr	r3, [pc, #196]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 80100bc:	430a      	orrs	r2, r1
 80100be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80100c0:	4b2f      	ldr	r3, [pc, #188]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	4b2e      	ldr	r3, [pc, #184]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 80100c6:	2180      	movs	r1, #128	@ 0x80
 80100c8:	0449      	lsls	r1, r1, #17
 80100ca:	430a      	orrs	r2, r1
 80100cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100ce:	f7f9 ff0f 	bl	8009ef0 <HAL_GetTick>
 80100d2:	0003      	movs	r3, r0
 80100d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80100d6:	e008      	b.n	80100ea <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80100d8:	f7f9 ff0a 	bl	8009ef0 <HAL_GetTick>
 80100dc:	0002      	movs	r2, r0
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	1ad3      	subs	r3, r2, r3
 80100e2:	2b02      	cmp	r3, #2
 80100e4:	d901      	bls.n	80100ea <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80100e6:	2303      	movs	r3, #3
 80100e8:	e045      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80100ea:	4b25      	ldr	r3, [pc, #148]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	2380      	movs	r3, #128	@ 0x80
 80100f0:	049b      	lsls	r3, r3, #18
 80100f2:	4013      	ands	r3, r2
 80100f4:	d0f0      	beq.n	80100d8 <HAL_RCC_OscConfig+0x6f4>
 80100f6:	e03d      	b.n	8010174 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80100f8:	4b21      	ldr	r3, [pc, #132]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	4b20      	ldr	r3, [pc, #128]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 80100fe:	4922      	ldr	r1, [pc, #136]	@ (8010188 <HAL_RCC_OscConfig+0x7a4>)
 8010100:	400a      	ands	r2, r1
 8010102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010104:	f7f9 fef4 	bl	8009ef0 <HAL_GetTick>
 8010108:	0003      	movs	r3, r0
 801010a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801010c:	e008      	b.n	8010120 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801010e:	f7f9 feef 	bl	8009ef0 <HAL_GetTick>
 8010112:	0002      	movs	r2, r0
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	2b02      	cmp	r3, #2
 801011a:	d901      	bls.n	8010120 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801011c:	2303      	movs	r3, #3
 801011e:	e02a      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010120:	4b17      	ldr	r3, [pc, #92]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	2380      	movs	r3, #128	@ 0x80
 8010126:	049b      	lsls	r3, r3, #18
 8010128:	4013      	ands	r3, r2
 801012a:	d1f0      	bne.n	801010e <HAL_RCC_OscConfig+0x72a>
 801012c:	e022      	b.n	8010174 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010132:	2b01      	cmp	r3, #1
 8010134:	d101      	bne.n	801013a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8010136:	2301      	movs	r3, #1
 8010138:	e01d      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801013a:	4b11      	ldr	r3, [pc, #68]	@ (8010180 <HAL_RCC_OscConfig+0x79c>)
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010140:	69ba      	ldr	r2, [r7, #24]
 8010142:	2380      	movs	r3, #128	@ 0x80
 8010144:	025b      	lsls	r3, r3, #9
 8010146:	401a      	ands	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801014c:	429a      	cmp	r2, r3
 801014e:	d10f      	bne.n	8010170 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010150:	69ba      	ldr	r2, [r7, #24]
 8010152:	23f0      	movs	r3, #240	@ 0xf0
 8010154:	039b      	lsls	r3, r3, #14
 8010156:	401a      	ands	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801015c:	429a      	cmp	r2, r3
 801015e:	d107      	bne.n	8010170 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8010160:	69ba      	ldr	r2, [r7, #24]
 8010162:	23c0      	movs	r3, #192	@ 0xc0
 8010164:	041b      	lsls	r3, r3, #16
 8010166:	401a      	ands	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801016c:	429a      	cmp	r2, r3
 801016e:	d001      	beq.n	8010174 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8010170:	2301      	movs	r3, #1
 8010172:	e000      	b.n	8010176 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	0018      	movs	r0, r3
 8010178:	46bd      	mov	sp, r7
 801017a:	b00a      	add	sp, #40	@ 0x28
 801017c:	bdb0      	pop	{r4, r5, r7, pc}
 801017e:	46c0      	nop			@ (mov r8, r8)
 8010180:	40021000 	.word	0x40021000
 8010184:	ff02ffff 	.word	0xff02ffff
 8010188:	feffffff 	.word	0xfeffffff

0801018c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801018c:	b5b0      	push	{r4, r5, r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d101      	bne.n	80101a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801019c:	2301      	movs	r3, #1
 801019e:	e128      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80101a0:	4b96      	ldr	r3, [pc, #600]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2201      	movs	r2, #1
 80101a6:	4013      	ands	r3, r2
 80101a8:	683a      	ldr	r2, [r7, #0]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d91e      	bls.n	80101ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80101ae:	4b93      	ldr	r3, [pc, #588]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2201      	movs	r2, #1
 80101b4:	4393      	bics	r3, r2
 80101b6:	0019      	movs	r1, r3
 80101b8:	4b90      	ldr	r3, [pc, #576]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	430a      	orrs	r2, r1
 80101be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80101c0:	f7f9 fe96 	bl	8009ef0 <HAL_GetTick>
 80101c4:	0003      	movs	r3, r0
 80101c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101c8:	e009      	b.n	80101de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101ca:	f7f9 fe91 	bl	8009ef0 <HAL_GetTick>
 80101ce:	0002      	movs	r2, r0
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	4a8a      	ldr	r2, [pc, #552]	@ (8010400 <HAL_RCC_ClockConfig+0x274>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d901      	bls.n	80101de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80101da:	2303      	movs	r3, #3
 80101dc:	e109      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101de:	4b87      	ldr	r3, [pc, #540]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2201      	movs	r2, #1
 80101e4:	4013      	ands	r3, r2
 80101e6:	683a      	ldr	r2, [r7, #0]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d1ee      	bne.n	80101ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2202      	movs	r2, #2
 80101f2:	4013      	ands	r3, r2
 80101f4:	d009      	beq.n	801020a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101f6:	4b83      	ldr	r3, [pc, #524]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	22f0      	movs	r2, #240	@ 0xf0
 80101fc:	4393      	bics	r3, r2
 80101fe:	0019      	movs	r1, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	689a      	ldr	r2, [r3, #8]
 8010204:	4b7f      	ldr	r3, [pc, #508]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010206:	430a      	orrs	r2, r1
 8010208:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2201      	movs	r2, #1
 8010210:	4013      	ands	r3, r2
 8010212:	d100      	bne.n	8010216 <HAL_RCC_ClockConfig+0x8a>
 8010214:	e089      	b.n	801032a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	2b02      	cmp	r3, #2
 801021c:	d107      	bne.n	801022e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801021e:	4b79      	ldr	r3, [pc, #484]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	2380      	movs	r3, #128	@ 0x80
 8010224:	029b      	lsls	r3, r3, #10
 8010226:	4013      	ands	r3, r2
 8010228:	d120      	bne.n	801026c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801022a:	2301      	movs	r3, #1
 801022c:	e0e1      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	2b03      	cmp	r3, #3
 8010234:	d107      	bne.n	8010246 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010236:	4b73      	ldr	r3, [pc, #460]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	2380      	movs	r3, #128	@ 0x80
 801023c:	049b      	lsls	r3, r3, #18
 801023e:	4013      	ands	r3, r2
 8010240:	d114      	bne.n	801026c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010242:	2301      	movs	r3, #1
 8010244:	e0d5      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	2b01      	cmp	r3, #1
 801024c:	d106      	bne.n	801025c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801024e:	4b6d      	ldr	r3, [pc, #436]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2204      	movs	r2, #4
 8010254:	4013      	ands	r3, r2
 8010256:	d109      	bne.n	801026c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	e0ca      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801025c:	4b69      	ldr	r3, [pc, #420]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	2380      	movs	r3, #128	@ 0x80
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	4013      	ands	r3, r2
 8010266:	d101      	bne.n	801026c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010268:	2301      	movs	r3, #1
 801026a:	e0c2      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801026c:	4b65      	ldr	r3, [pc, #404]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	2203      	movs	r2, #3
 8010272:	4393      	bics	r3, r2
 8010274:	0019      	movs	r1, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685a      	ldr	r2, [r3, #4]
 801027a:	4b62      	ldr	r3, [pc, #392]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 801027c:	430a      	orrs	r2, r1
 801027e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010280:	f7f9 fe36 	bl	8009ef0 <HAL_GetTick>
 8010284:	0003      	movs	r3, r0
 8010286:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	2b02      	cmp	r3, #2
 801028e:	d111      	bne.n	80102b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010290:	e009      	b.n	80102a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010292:	f7f9 fe2d 	bl	8009ef0 <HAL_GetTick>
 8010296:	0002      	movs	r2, r0
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	1ad3      	subs	r3, r2, r3
 801029c:	4a58      	ldr	r2, [pc, #352]	@ (8010400 <HAL_RCC_ClockConfig+0x274>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d901      	bls.n	80102a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80102a2:	2303      	movs	r3, #3
 80102a4:	e0a5      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80102a6:	4b57      	ldr	r3, [pc, #348]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	220c      	movs	r2, #12
 80102ac:	4013      	ands	r3, r2
 80102ae:	2b08      	cmp	r3, #8
 80102b0:	d1ef      	bne.n	8010292 <HAL_RCC_ClockConfig+0x106>
 80102b2:	e03a      	b.n	801032a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	2b03      	cmp	r3, #3
 80102ba:	d111      	bne.n	80102e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80102bc:	e009      	b.n	80102d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102be:	f7f9 fe17 	bl	8009ef0 <HAL_GetTick>
 80102c2:	0002      	movs	r2, r0
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	4a4d      	ldr	r2, [pc, #308]	@ (8010400 <HAL_RCC_ClockConfig+0x274>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d901      	bls.n	80102d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80102ce:	2303      	movs	r3, #3
 80102d0:	e08f      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80102d2:	4b4c      	ldr	r3, [pc, #304]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 80102d4:	68db      	ldr	r3, [r3, #12]
 80102d6:	220c      	movs	r2, #12
 80102d8:	4013      	ands	r3, r2
 80102da:	2b0c      	cmp	r3, #12
 80102dc:	d1ef      	bne.n	80102be <HAL_RCC_ClockConfig+0x132>
 80102de:	e024      	b.n	801032a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d11b      	bne.n	8010320 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80102e8:	e009      	b.n	80102fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80102ea:	f7f9 fe01 	bl	8009ef0 <HAL_GetTick>
 80102ee:	0002      	movs	r2, r0
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	4a42      	ldr	r2, [pc, #264]	@ (8010400 <HAL_RCC_ClockConfig+0x274>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d901      	bls.n	80102fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80102fa:	2303      	movs	r3, #3
 80102fc:	e079      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80102fe:	4b41      	ldr	r3, [pc, #260]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010300:	68db      	ldr	r3, [r3, #12]
 8010302:	220c      	movs	r2, #12
 8010304:	4013      	ands	r3, r2
 8010306:	2b04      	cmp	r3, #4
 8010308:	d1ef      	bne.n	80102ea <HAL_RCC_ClockConfig+0x15e>
 801030a:	e00e      	b.n	801032a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801030c:	f7f9 fdf0 	bl	8009ef0 <HAL_GetTick>
 8010310:	0002      	movs	r2, r0
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	1ad3      	subs	r3, r2, r3
 8010316:	4a3a      	ldr	r2, [pc, #232]	@ (8010400 <HAL_RCC_ClockConfig+0x274>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d901      	bls.n	8010320 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801031c:	2303      	movs	r3, #3
 801031e:	e068      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8010320:	4b38      	ldr	r3, [pc, #224]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	220c      	movs	r2, #12
 8010326:	4013      	ands	r3, r2
 8010328:	d1f0      	bne.n	801030c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801032a:	4b34      	ldr	r3, [pc, #208]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2201      	movs	r2, #1
 8010330:	4013      	ands	r3, r2
 8010332:	683a      	ldr	r2, [r7, #0]
 8010334:	429a      	cmp	r2, r3
 8010336:	d21e      	bcs.n	8010376 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010338:	4b30      	ldr	r3, [pc, #192]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2201      	movs	r2, #1
 801033e:	4393      	bics	r3, r2
 8010340:	0019      	movs	r1, r3
 8010342:	4b2e      	ldr	r3, [pc, #184]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	430a      	orrs	r2, r1
 8010348:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801034a:	f7f9 fdd1 	bl	8009ef0 <HAL_GetTick>
 801034e:	0003      	movs	r3, r0
 8010350:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010352:	e009      	b.n	8010368 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010354:	f7f9 fdcc 	bl	8009ef0 <HAL_GetTick>
 8010358:	0002      	movs	r2, r0
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	1ad3      	subs	r3, r2, r3
 801035e:	4a28      	ldr	r2, [pc, #160]	@ (8010400 <HAL_RCC_ClockConfig+0x274>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d901      	bls.n	8010368 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8010364:	2303      	movs	r3, #3
 8010366:	e044      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010368:	4b24      	ldr	r3, [pc, #144]	@ (80103fc <HAL_RCC_ClockConfig+0x270>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2201      	movs	r2, #1
 801036e:	4013      	ands	r3, r2
 8010370:	683a      	ldr	r2, [r7, #0]
 8010372:	429a      	cmp	r2, r3
 8010374:	d1ee      	bne.n	8010354 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2204      	movs	r2, #4
 801037c:	4013      	ands	r3, r2
 801037e:	d009      	beq.n	8010394 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010380:	4b20      	ldr	r3, [pc, #128]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	4a20      	ldr	r2, [pc, #128]	@ (8010408 <HAL_RCC_ClockConfig+0x27c>)
 8010386:	4013      	ands	r3, r2
 8010388:	0019      	movs	r1, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	68da      	ldr	r2, [r3, #12]
 801038e:	4b1d      	ldr	r3, [pc, #116]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 8010390:	430a      	orrs	r2, r1
 8010392:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2208      	movs	r2, #8
 801039a:	4013      	ands	r3, r2
 801039c:	d00a      	beq.n	80103b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801039e:	4b19      	ldr	r3, [pc, #100]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	4a1a      	ldr	r2, [pc, #104]	@ (801040c <HAL_RCC_ClockConfig+0x280>)
 80103a4:	4013      	ands	r3, r2
 80103a6:	0019      	movs	r1, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	00da      	lsls	r2, r3, #3
 80103ae:	4b15      	ldr	r3, [pc, #84]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 80103b0:	430a      	orrs	r2, r1
 80103b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80103b4:	f000 f832 	bl	801041c <HAL_RCC_GetSysClockFreq>
 80103b8:	0001      	movs	r1, r0
 80103ba:	4b12      	ldr	r3, [pc, #72]	@ (8010404 <HAL_RCC_ClockConfig+0x278>)
 80103bc:	68db      	ldr	r3, [r3, #12]
 80103be:	091b      	lsrs	r3, r3, #4
 80103c0:	220f      	movs	r2, #15
 80103c2:	4013      	ands	r3, r2
 80103c4:	4a12      	ldr	r2, [pc, #72]	@ (8010410 <HAL_RCC_ClockConfig+0x284>)
 80103c6:	5cd3      	ldrb	r3, [r2, r3]
 80103c8:	000a      	movs	r2, r1
 80103ca:	40da      	lsrs	r2, r3
 80103cc:	4b11      	ldr	r3, [pc, #68]	@ (8010414 <HAL_RCC_ClockConfig+0x288>)
 80103ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80103d0:	4b11      	ldr	r3, [pc, #68]	@ (8010418 <HAL_RCC_ClockConfig+0x28c>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	250b      	movs	r5, #11
 80103d6:	197c      	adds	r4, r7, r5
 80103d8:	0018      	movs	r0, r3
 80103da:	f7f9 fd43 	bl	8009e64 <HAL_InitTick>
 80103de:	0003      	movs	r3, r0
 80103e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80103e2:	197b      	adds	r3, r7, r5
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d002      	beq.n	80103f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80103ea:	197b      	adds	r3, r7, r5
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	e000      	b.n	80103f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	0018      	movs	r0, r3
 80103f4:	46bd      	mov	sp, r7
 80103f6:	b004      	add	sp, #16
 80103f8:	bdb0      	pop	{r4, r5, r7, pc}
 80103fa:	46c0      	nop			@ (mov r8, r8)
 80103fc:	40022000 	.word	0x40022000
 8010400:	00001388 	.word	0x00001388
 8010404:	40021000 	.word	0x40021000
 8010408:	fffff8ff 	.word	0xfffff8ff
 801040c:	ffffc7ff 	.word	0xffffc7ff
 8010410:	0801bc90 	.word	0x0801bc90
 8010414:	20000058 	.word	0x20000058
 8010418:	2000006c 	.word	0x2000006c

0801041c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801041c:	b5b0      	push	{r4, r5, r7, lr}
 801041e:	b08e      	sub	sp, #56	@ 0x38
 8010420:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8010422:	4b4c      	ldr	r3, [pc, #304]	@ (8010554 <HAL_RCC_GetSysClockFreq+0x138>)
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801042a:	230c      	movs	r3, #12
 801042c:	4013      	ands	r3, r2
 801042e:	2b0c      	cmp	r3, #12
 8010430:	d014      	beq.n	801045c <HAL_RCC_GetSysClockFreq+0x40>
 8010432:	d900      	bls.n	8010436 <HAL_RCC_GetSysClockFreq+0x1a>
 8010434:	e07b      	b.n	801052e <HAL_RCC_GetSysClockFreq+0x112>
 8010436:	2b04      	cmp	r3, #4
 8010438:	d002      	beq.n	8010440 <HAL_RCC_GetSysClockFreq+0x24>
 801043a:	2b08      	cmp	r3, #8
 801043c:	d00b      	beq.n	8010456 <HAL_RCC_GetSysClockFreq+0x3a>
 801043e:	e076      	b.n	801052e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010440:	4b44      	ldr	r3, [pc, #272]	@ (8010554 <HAL_RCC_GetSysClockFreq+0x138>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2210      	movs	r2, #16
 8010446:	4013      	ands	r3, r2
 8010448:	d002      	beq.n	8010450 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801044a:	4b43      	ldr	r3, [pc, #268]	@ (8010558 <HAL_RCC_GetSysClockFreq+0x13c>)
 801044c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801044e:	e07c      	b.n	801054a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8010450:	4b42      	ldr	r3, [pc, #264]	@ (801055c <HAL_RCC_GetSysClockFreq+0x140>)
 8010452:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010454:	e079      	b.n	801054a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010456:	4b42      	ldr	r3, [pc, #264]	@ (8010560 <HAL_RCC_GetSysClockFreq+0x144>)
 8010458:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801045a:	e076      	b.n	801054a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801045c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801045e:	0c9a      	lsrs	r2, r3, #18
 8010460:	230f      	movs	r3, #15
 8010462:	401a      	ands	r2, r3
 8010464:	4b3f      	ldr	r3, [pc, #252]	@ (8010564 <HAL_RCC_GetSysClockFreq+0x148>)
 8010466:	5c9b      	ldrb	r3, [r3, r2]
 8010468:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801046a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046c:	0d9a      	lsrs	r2, r3, #22
 801046e:	2303      	movs	r3, #3
 8010470:	4013      	ands	r3, r2
 8010472:	3301      	adds	r3, #1
 8010474:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010476:	4b37      	ldr	r3, [pc, #220]	@ (8010554 <HAL_RCC_GetSysClockFreq+0x138>)
 8010478:	68da      	ldr	r2, [r3, #12]
 801047a:	2380      	movs	r3, #128	@ 0x80
 801047c:	025b      	lsls	r3, r3, #9
 801047e:	4013      	ands	r3, r2
 8010480:	d01a      	beq.n	80104b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010484:	61bb      	str	r3, [r7, #24]
 8010486:	2300      	movs	r3, #0
 8010488:	61fb      	str	r3, [r7, #28]
 801048a:	4a35      	ldr	r2, [pc, #212]	@ (8010560 <HAL_RCC_GetSysClockFreq+0x144>)
 801048c:	2300      	movs	r3, #0
 801048e:	69b8      	ldr	r0, [r7, #24]
 8010490:	69f9      	ldr	r1, [r7, #28]
 8010492:	f7f0 f863 	bl	800055c <__aeabi_lmul>
 8010496:	0002      	movs	r2, r0
 8010498:	000b      	movs	r3, r1
 801049a:	0010      	movs	r0, r2
 801049c:	0019      	movs	r1, r3
 801049e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a0:	613b      	str	r3, [r7, #16]
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
 80104a6:	693a      	ldr	r2, [r7, #16]
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	f7f0 f837 	bl	800051c <__aeabi_uldivmod>
 80104ae:	0002      	movs	r2, r0
 80104b0:	000b      	movs	r3, r1
 80104b2:	0013      	movs	r3, r2
 80104b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80104b6:	e037      	b.n	8010528 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80104b8:	4b26      	ldr	r3, [pc, #152]	@ (8010554 <HAL_RCC_GetSysClockFreq+0x138>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2210      	movs	r2, #16
 80104be:	4013      	ands	r3, r2
 80104c0:	d01a      	beq.n	80104f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80104c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c4:	60bb      	str	r3, [r7, #8]
 80104c6:	2300      	movs	r3, #0
 80104c8:	60fb      	str	r3, [r7, #12]
 80104ca:	4a23      	ldr	r2, [pc, #140]	@ (8010558 <HAL_RCC_GetSysClockFreq+0x13c>)
 80104cc:	2300      	movs	r3, #0
 80104ce:	68b8      	ldr	r0, [r7, #8]
 80104d0:	68f9      	ldr	r1, [r7, #12]
 80104d2:	f7f0 f843 	bl	800055c <__aeabi_lmul>
 80104d6:	0002      	movs	r2, r0
 80104d8:	000b      	movs	r3, r1
 80104da:	0010      	movs	r0, r2
 80104dc:	0019      	movs	r1, r3
 80104de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e0:	603b      	str	r3, [r7, #0]
 80104e2:	2300      	movs	r3, #0
 80104e4:	607b      	str	r3, [r7, #4]
 80104e6:	683a      	ldr	r2, [r7, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f7f0 f817 	bl	800051c <__aeabi_uldivmod>
 80104ee:	0002      	movs	r2, r0
 80104f0:	000b      	movs	r3, r1
 80104f2:	0013      	movs	r3, r2
 80104f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80104f6:	e017      	b.n	8010528 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80104f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104fa:	0018      	movs	r0, r3
 80104fc:	2300      	movs	r3, #0
 80104fe:	0019      	movs	r1, r3
 8010500:	4a16      	ldr	r2, [pc, #88]	@ (801055c <HAL_RCC_GetSysClockFreq+0x140>)
 8010502:	2300      	movs	r3, #0
 8010504:	f7f0 f82a 	bl	800055c <__aeabi_lmul>
 8010508:	0002      	movs	r2, r0
 801050a:	000b      	movs	r3, r1
 801050c:	0010      	movs	r0, r2
 801050e:	0019      	movs	r1, r3
 8010510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010512:	001c      	movs	r4, r3
 8010514:	2300      	movs	r3, #0
 8010516:	001d      	movs	r5, r3
 8010518:	0022      	movs	r2, r4
 801051a:	002b      	movs	r3, r5
 801051c:	f7ef fffe 	bl	800051c <__aeabi_uldivmod>
 8010520:	0002      	movs	r2, r0
 8010522:	000b      	movs	r3, r1
 8010524:	0013      	movs	r3, r2
 8010526:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8010528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801052a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801052c:	e00d      	b.n	801054a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801052e:	4b09      	ldr	r3, [pc, #36]	@ (8010554 <HAL_RCC_GetSysClockFreq+0x138>)
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	0b5b      	lsrs	r3, r3, #13
 8010534:	2207      	movs	r2, #7
 8010536:	4013      	ands	r3, r2
 8010538:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801053a:	6a3b      	ldr	r3, [r7, #32]
 801053c:	3301      	adds	r3, #1
 801053e:	2280      	movs	r2, #128	@ 0x80
 8010540:	0212      	lsls	r2, r2, #8
 8010542:	409a      	lsls	r2, r3
 8010544:	0013      	movs	r3, r2
 8010546:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010548:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801054a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801054c:	0018      	movs	r0, r3
 801054e:	46bd      	mov	sp, r7
 8010550:	b00e      	add	sp, #56	@ 0x38
 8010552:	bdb0      	pop	{r4, r5, r7, pc}
 8010554:	40021000 	.word	0x40021000
 8010558:	003d0900 	.word	0x003d0900
 801055c:	00f42400 	.word	0x00f42400
 8010560:	007a1200 	.word	0x007a1200
 8010564:	0801bca8 	.word	0x0801bca8

08010568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801056c:	4b02      	ldr	r3, [pc, #8]	@ (8010578 <HAL_RCC_GetHCLKFreq+0x10>)
 801056e:	681b      	ldr	r3, [r3, #0]
}
 8010570:	0018      	movs	r0, r3
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	46c0      	nop			@ (mov r8, r8)
 8010578:	20000058 	.word	0x20000058

0801057c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010580:	f7ff fff2 	bl	8010568 <HAL_RCC_GetHCLKFreq>
 8010584:	0001      	movs	r1, r0
 8010586:	4b06      	ldr	r3, [pc, #24]	@ (80105a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010588:	68db      	ldr	r3, [r3, #12]
 801058a:	0a1b      	lsrs	r3, r3, #8
 801058c:	2207      	movs	r2, #7
 801058e:	4013      	ands	r3, r2
 8010590:	4a04      	ldr	r2, [pc, #16]	@ (80105a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010592:	5cd3      	ldrb	r3, [r2, r3]
 8010594:	40d9      	lsrs	r1, r3
 8010596:	000b      	movs	r3, r1
}
 8010598:	0018      	movs	r0, r3
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	46c0      	nop			@ (mov r8, r8)
 80105a0:	40021000 	.word	0x40021000
 80105a4:	0801bca0 	.word	0x0801bca0

080105a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80105ac:	f7ff ffdc 	bl	8010568 <HAL_RCC_GetHCLKFreq>
 80105b0:	0001      	movs	r1, r0
 80105b2:	4b06      	ldr	r3, [pc, #24]	@ (80105cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	0adb      	lsrs	r3, r3, #11
 80105b8:	2207      	movs	r2, #7
 80105ba:	4013      	ands	r3, r2
 80105bc:	4a04      	ldr	r2, [pc, #16]	@ (80105d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80105be:	5cd3      	ldrb	r3, [r2, r3]
 80105c0:	40d9      	lsrs	r1, r3
 80105c2:	000b      	movs	r3, r1
}
 80105c4:	0018      	movs	r0, r3
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	46c0      	nop			@ (mov r8, r8)
 80105cc:	40021000 	.word	0x40021000
 80105d0:	0801bca0 	.word	0x0801bca0

080105d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b086      	sub	sp, #24
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80105dc:	2017      	movs	r0, #23
 80105de:	183b      	adds	r3, r7, r0
 80105e0:	2200      	movs	r2, #0
 80105e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2220      	movs	r2, #32
 80105ea:	4013      	ands	r3, r2
 80105ec:	d100      	bne.n	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80105ee:	e0c7      	b.n	8010780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80105f0:	4b9b      	ldr	r3, [pc, #620]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105f4:	2380      	movs	r3, #128	@ 0x80
 80105f6:	055b      	lsls	r3, r3, #21
 80105f8:	4013      	ands	r3, r2
 80105fa:	d109      	bne.n	8010610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80105fc:	4b98      	ldr	r3, [pc, #608]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010600:	4b97      	ldr	r3, [pc, #604]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010602:	2180      	movs	r1, #128	@ 0x80
 8010604:	0549      	lsls	r1, r1, #21
 8010606:	430a      	orrs	r2, r1
 8010608:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801060a:	183b      	adds	r3, r7, r0
 801060c:	2201      	movs	r2, #1
 801060e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010610:	4b94      	ldr	r3, [pc, #592]	@ (8010864 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	2380      	movs	r3, #128	@ 0x80
 8010616:	005b      	lsls	r3, r3, #1
 8010618:	4013      	ands	r3, r2
 801061a:	d11a      	bne.n	8010652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801061c:	4b91      	ldr	r3, [pc, #580]	@ (8010864 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	4b90      	ldr	r3, [pc, #576]	@ (8010864 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010622:	2180      	movs	r1, #128	@ 0x80
 8010624:	0049      	lsls	r1, r1, #1
 8010626:	430a      	orrs	r2, r1
 8010628:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801062a:	f7f9 fc61 	bl	8009ef0 <HAL_GetTick>
 801062e:	0003      	movs	r3, r0
 8010630:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010632:	e008      	b.n	8010646 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010634:	f7f9 fc5c 	bl	8009ef0 <HAL_GetTick>
 8010638:	0002      	movs	r2, r0
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	2b64      	cmp	r3, #100	@ 0x64
 8010640:	d901      	bls.n	8010646 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8010642:	2303      	movs	r3, #3
 8010644:	e107      	b.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010646:	4b87      	ldr	r3, [pc, #540]	@ (8010864 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	2380      	movs	r3, #128	@ 0x80
 801064c:	005b      	lsls	r3, r3, #1
 801064e:	4013      	ands	r3, r2
 8010650:	d0f0      	beq.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8010652:	4b83      	ldr	r3, [pc, #524]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	23c0      	movs	r3, #192	@ 0xc0
 8010658:	039b      	lsls	r3, r3, #14
 801065a:	4013      	ands	r3, r2
 801065c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	685a      	ldr	r2, [r3, #4]
 8010662:	23c0      	movs	r3, #192	@ 0xc0
 8010664:	039b      	lsls	r3, r3, #14
 8010666:	4013      	ands	r3, r2
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	429a      	cmp	r2, r3
 801066c:	d013      	beq.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	685a      	ldr	r2, [r3, #4]
 8010672:	23c0      	movs	r3, #192	@ 0xc0
 8010674:	029b      	lsls	r3, r3, #10
 8010676:	401a      	ands	r2, r3
 8010678:	23c0      	movs	r3, #192	@ 0xc0
 801067a:	029b      	lsls	r3, r3, #10
 801067c:	429a      	cmp	r2, r3
 801067e:	d10a      	bne.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010680:	4b77      	ldr	r3, [pc, #476]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	2380      	movs	r3, #128	@ 0x80
 8010686:	029b      	lsls	r3, r3, #10
 8010688:	401a      	ands	r2, r3
 801068a:	2380      	movs	r3, #128	@ 0x80
 801068c:	029b      	lsls	r3, r3, #10
 801068e:	429a      	cmp	r2, r3
 8010690:	d101      	bne.n	8010696 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8010692:	2301      	movs	r3, #1
 8010694:	e0df      	b.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8010696:	4b72      	ldr	r3, [pc, #456]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801069a:	23c0      	movs	r3, #192	@ 0xc0
 801069c:	029b      	lsls	r3, r3, #10
 801069e:	4013      	ands	r3, r2
 80106a0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d03b      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	685a      	ldr	r2, [r3, #4]
 80106ac:	23c0      	movs	r3, #192	@ 0xc0
 80106ae:	029b      	lsls	r3, r3, #10
 80106b0:	4013      	ands	r3, r2
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d033      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	2220      	movs	r2, #32
 80106be:	4013      	ands	r3, r2
 80106c0:	d02e      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80106c2:	4b67      	ldr	r3, [pc, #412]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106c6:	4a68      	ldr	r2, [pc, #416]	@ (8010868 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80106c8:	4013      	ands	r3, r2
 80106ca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80106cc:	4b64      	ldr	r3, [pc, #400]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106d0:	4b63      	ldr	r3, [pc, #396]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106d2:	2180      	movs	r1, #128	@ 0x80
 80106d4:	0309      	lsls	r1, r1, #12
 80106d6:	430a      	orrs	r2, r1
 80106d8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80106da:	4b61      	ldr	r3, [pc, #388]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80106de:	4b60      	ldr	r3, [pc, #384]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106e0:	4962      	ldr	r1, [pc, #392]	@ (801086c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80106e2:	400a      	ands	r2, r1
 80106e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80106e6:	4b5e      	ldr	r3, [pc, #376]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80106e8:	68fa      	ldr	r2, [r7, #12]
 80106ea:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	2380      	movs	r3, #128	@ 0x80
 80106f0:	005b      	lsls	r3, r3, #1
 80106f2:	4013      	ands	r3, r2
 80106f4:	d014      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106f6:	f7f9 fbfb 	bl	8009ef0 <HAL_GetTick>
 80106fa:	0003      	movs	r3, r0
 80106fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80106fe:	e009      	b.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010700:	f7f9 fbf6 	bl	8009ef0 <HAL_GetTick>
 8010704:	0002      	movs	r2, r0
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	1ad3      	subs	r3, r2, r3
 801070a:	4a59      	ldr	r2, [pc, #356]	@ (8010870 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d901      	bls.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010710:	2303      	movs	r3, #3
 8010712:	e0a0      	b.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010714:	4b52      	ldr	r3, [pc, #328]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010716:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010718:	2380      	movs	r3, #128	@ 0x80
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4013      	ands	r3, r2
 801071e:	d0ef      	beq.n	8010700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2220      	movs	r2, #32
 8010726:	4013      	ands	r3, r2
 8010728:	d01f      	beq.n	801076a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	685a      	ldr	r2, [r3, #4]
 801072e:	23c0      	movs	r3, #192	@ 0xc0
 8010730:	029b      	lsls	r3, r3, #10
 8010732:	401a      	ands	r2, r3
 8010734:	23c0      	movs	r3, #192	@ 0xc0
 8010736:	029b      	lsls	r3, r3, #10
 8010738:	429a      	cmp	r2, r3
 801073a:	d10c      	bne.n	8010756 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801073c:	4b48      	ldr	r3, [pc, #288]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	4a4c      	ldr	r2, [pc, #304]	@ (8010874 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8010742:	4013      	ands	r3, r2
 8010744:	0019      	movs	r1, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	685a      	ldr	r2, [r3, #4]
 801074a:	23c0      	movs	r3, #192	@ 0xc0
 801074c:	039b      	lsls	r3, r3, #14
 801074e:	401a      	ands	r2, r3
 8010750:	4b43      	ldr	r3, [pc, #268]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010752:	430a      	orrs	r2, r1
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	4b42      	ldr	r3, [pc, #264]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010758:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	685a      	ldr	r2, [r3, #4]
 801075e:	23c0      	movs	r3, #192	@ 0xc0
 8010760:	029b      	lsls	r3, r3, #10
 8010762:	401a      	ands	r2, r3
 8010764:	4b3e      	ldr	r3, [pc, #248]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010766:	430a      	orrs	r2, r1
 8010768:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801076a:	2317      	movs	r3, #23
 801076c:	18fb      	adds	r3, r7, r3
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d105      	bne.n	8010780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010774:	4b3a      	ldr	r3, [pc, #232]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010778:	4b39      	ldr	r3, [pc, #228]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801077a:	493f      	ldr	r1, [pc, #252]	@ (8010878 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801077c:	400a      	ands	r2, r1
 801077e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2201      	movs	r2, #1
 8010786:	4013      	ands	r3, r2
 8010788:	d009      	beq.n	801079e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801078a:	4b35      	ldr	r3, [pc, #212]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801078e:	2203      	movs	r2, #3
 8010790:	4393      	bics	r3, r2
 8010792:	0019      	movs	r1, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	689a      	ldr	r2, [r3, #8]
 8010798:	4b31      	ldr	r3, [pc, #196]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801079a:	430a      	orrs	r2, r1
 801079c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2202      	movs	r2, #2
 80107a4:	4013      	ands	r3, r2
 80107a6:	d009      	beq.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80107a8:	4b2d      	ldr	r3, [pc, #180]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107ac:	220c      	movs	r2, #12
 80107ae:	4393      	bics	r3, r2
 80107b0:	0019      	movs	r1, r3
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	68da      	ldr	r2, [r3, #12]
 80107b6:	4b2a      	ldr	r3, [pc, #168]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107b8:	430a      	orrs	r2, r1
 80107ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2204      	movs	r2, #4
 80107c2:	4013      	ands	r3, r2
 80107c4:	d009      	beq.n	80107da <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80107c6:	4b26      	ldr	r3, [pc, #152]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107ca:	4a2c      	ldr	r2, [pc, #176]	@ (801087c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80107cc:	4013      	ands	r3, r2
 80107ce:	0019      	movs	r1, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	691a      	ldr	r2, [r3, #16]
 80107d4:	4b22      	ldr	r3, [pc, #136]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107d6:	430a      	orrs	r2, r1
 80107d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	2208      	movs	r2, #8
 80107e0:	4013      	ands	r3, r2
 80107e2:	d009      	beq.n	80107f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80107e4:	4b1e      	ldr	r3, [pc, #120]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107e8:	4a25      	ldr	r2, [pc, #148]	@ (8010880 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80107ea:	4013      	ands	r3, r2
 80107ec:	0019      	movs	r1, r3
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	695a      	ldr	r2, [r3, #20]
 80107f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80107f4:	430a      	orrs	r2, r1
 80107f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	2380      	movs	r3, #128	@ 0x80
 80107fe:	005b      	lsls	r3, r3, #1
 8010800:	4013      	ands	r3, r2
 8010802:	d009      	beq.n	8010818 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010804:	4b16      	ldr	r3, [pc, #88]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010808:	4a17      	ldr	r2, [pc, #92]	@ (8010868 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801080a:	4013      	ands	r3, r2
 801080c:	0019      	movs	r1, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	699a      	ldr	r2, [r3, #24]
 8010812:	4b13      	ldr	r3, [pc, #76]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010814:	430a      	orrs	r2, r1
 8010816:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2240      	movs	r2, #64	@ 0x40
 801081e:	4013      	ands	r3, r2
 8010820:	d009      	beq.n	8010836 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010822:	4b0f      	ldr	r3, [pc, #60]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010826:	4a17      	ldr	r2, [pc, #92]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8010828:	4013      	ands	r3, r2
 801082a:	0019      	movs	r1, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6a1a      	ldr	r2, [r3, #32]
 8010830:	4b0b      	ldr	r3, [pc, #44]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010832:	430a      	orrs	r2, r1
 8010834:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2280      	movs	r2, #128	@ 0x80
 801083c:	4013      	ands	r3, r2
 801083e:	d009      	beq.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010840:	4b07      	ldr	r3, [pc, #28]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010844:	4a10      	ldr	r2, [pc, #64]	@ (8010888 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8010846:	4013      	ands	r3, r2
 8010848:	0019      	movs	r1, r3
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	69da      	ldr	r2, [r3, #28]
 801084e:	4b04      	ldr	r3, [pc, #16]	@ (8010860 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010850:	430a      	orrs	r2, r1
 8010852:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010854:	2300      	movs	r3, #0
}
 8010856:	0018      	movs	r0, r3
 8010858:	46bd      	mov	sp, r7
 801085a:	b006      	add	sp, #24
 801085c:	bd80      	pop	{r7, pc}
 801085e:	46c0      	nop			@ (mov r8, r8)
 8010860:	40021000 	.word	0x40021000
 8010864:	40007000 	.word	0x40007000
 8010868:	fffcffff 	.word	0xfffcffff
 801086c:	fff7ffff 	.word	0xfff7ffff
 8010870:	00001388 	.word	0x00001388
 8010874:	ffcfffff 	.word	0xffcfffff
 8010878:	efffffff 	.word	0xefffffff
 801087c:	fffff3ff 	.word	0xfffff3ff
 8010880:	ffffcfff 	.word	0xffffcfff
 8010884:	fbffffff 	.word	0xfbffffff
 8010888:	fff3ffff 	.word	0xfff3ffff

0801088c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801088c:	b5b0      	push	{r4, r5, r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010894:	230f      	movs	r3, #15
 8010896:	18fb      	adds	r3, r7, r3
 8010898:	2201      	movs	r2, #1
 801089a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	e088      	b.n	80109b8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2221      	movs	r2, #33	@ 0x21
 80108aa:	5c9b      	ldrb	r3, [r3, r2]
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d107      	bne.n	80108c2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2220      	movs	r2, #32
 80108b6:	2100      	movs	r1, #0
 80108b8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	0018      	movs	r0, r3
 80108be:	f7f6 fcb1 	bl	8007224 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2221      	movs	r2, #33	@ 0x21
 80108c6:	2102      	movs	r1, #2
 80108c8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	2210      	movs	r2, #16
 80108d2:	4013      	ands	r3, r2
 80108d4:	2b10      	cmp	r3, #16
 80108d6:	d05f      	beq.n	8010998 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	22ca      	movs	r2, #202	@ 0xca
 80108de:	625a      	str	r2, [r3, #36]	@ 0x24
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2253      	movs	r2, #83	@ 0x53
 80108e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80108e8:	250f      	movs	r5, #15
 80108ea:	197c      	adds	r4, r7, r5
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	0018      	movs	r0, r3
 80108f0:	f000 f93a 	bl	8010b68 <RTC_EnterInitMode>
 80108f4:	0003      	movs	r3, r0
 80108f6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80108f8:	0028      	movs	r0, r5
 80108fa:	183b      	adds	r3, r7, r0
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d12c      	bne.n	801095c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	689a      	ldr	r2, [r3, #8]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	492c      	ldr	r1, [pc, #176]	@ (80109c0 <HAL_RTC_Init+0x134>)
 801090e:	400a      	ands	r2, r1
 8010910:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	6899      	ldr	r1, [r3, #8]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	685a      	ldr	r2, [r3, #4]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	691b      	ldr	r3, [r3, #16]
 8010920:	431a      	orrs	r2, r3
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	699b      	ldr	r3, [r3, #24]
 8010926:	431a      	orrs	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	430a      	orrs	r2, r1
 801092e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	68d2      	ldr	r2, [r2, #12]
 8010938:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	6919      	ldr	r1, [r3, #16]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	041a      	lsls	r2, r3, #16
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	430a      	orrs	r2, r1
 801094c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801094e:	183c      	adds	r4, r7, r0
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	0018      	movs	r0, r3
 8010954:	f000 f94c 	bl	8010bf0 <RTC_ExitInitMode>
 8010958:	0003      	movs	r3, r0
 801095a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801095c:	230f      	movs	r3, #15
 801095e:	18fb      	adds	r3, r7, r3
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d113      	bne.n	801098e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2103      	movs	r1, #3
 8010972:	438a      	bics	r2, r1
 8010974:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	69da      	ldr	r2, [r3, #28]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	695b      	ldr	r3, [r3, #20]
 8010984:	431a      	orrs	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	430a      	orrs	r2, r1
 801098c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	22ff      	movs	r2, #255	@ 0xff
 8010994:	625a      	str	r2, [r3, #36]	@ 0x24
 8010996:	e003      	b.n	80109a0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010998:	230f      	movs	r3, #15
 801099a:	18fb      	adds	r3, r7, r3
 801099c:	2200      	movs	r2, #0
 801099e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80109a0:	230f      	movs	r3, #15
 80109a2:	18fb      	adds	r3, r7, r3
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d103      	bne.n	80109b2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2221      	movs	r2, #33	@ 0x21
 80109ae:	2101      	movs	r1, #1
 80109b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80109b2:	230f      	movs	r3, #15
 80109b4:	18fb      	adds	r3, r7, r3
 80109b6:	781b      	ldrb	r3, [r3, #0]
}
 80109b8:	0018      	movs	r0, r3
 80109ba:	46bd      	mov	sp, r7
 80109bc:	b004      	add	sp, #16
 80109be:	bdb0      	pop	{r4, r5, r7, pc}
 80109c0:	ff8fffbf 	.word	0xff8fffbf

080109c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80109c4:	b5b0      	push	{r4, r5, r7, lr}
 80109c6:	b086      	sub	sp, #24
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80109d0:	2300      	movs	r3, #0
 80109d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2220      	movs	r2, #32
 80109d8:	5c9b      	ldrb	r3, [r3, r2]
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d101      	bne.n	80109e2 <HAL_RTC_SetTime+0x1e>
 80109de:	2302      	movs	r3, #2
 80109e0:	e092      	b.n	8010b08 <HAL_RTC_SetTime+0x144>
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2220      	movs	r2, #32
 80109e6:	2101      	movs	r1, #1
 80109e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2221      	movs	r2, #33	@ 0x21
 80109ee:	2102      	movs	r1, #2
 80109f0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d125      	bne.n	8010a44 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	689b      	ldr	r3, [r3, #8]
 80109fe:	2240      	movs	r2, #64	@ 0x40
 8010a00:	4013      	ands	r3, r2
 8010a02:	d102      	bne.n	8010a0a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	2200      	movs	r2, #0
 8010a08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	0018      	movs	r0, r3
 8010a10:	f000 f918 	bl	8010c44 <RTC_ByteToBcd2>
 8010a14:	0003      	movs	r3, r0
 8010a16:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	785b      	ldrb	r3, [r3, #1]
 8010a1c:	0018      	movs	r0, r3
 8010a1e:	f000 f911 	bl	8010c44 <RTC_ByteToBcd2>
 8010a22:	0003      	movs	r3, r0
 8010a24:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a26:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	789b      	ldrb	r3, [r3, #2]
 8010a2c:	0018      	movs	r0, r3
 8010a2e:	f000 f909 	bl	8010c44 <RTC_ByteToBcd2>
 8010a32:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010a34:	0022      	movs	r2, r4
 8010a36:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	78db      	ldrb	r3, [r3, #3]
 8010a3c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	617b      	str	r3, [r7, #20]
 8010a42:	e017      	b.n	8010a74 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	2240      	movs	r2, #64	@ 0x40
 8010a4c:	4013      	ands	r3, r2
 8010a4e:	d102      	bne.n	8010a56 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2200      	movs	r2, #0
 8010a54:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	785b      	ldrb	r3, [r3, #1]
 8010a60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010a62:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8010a64:	68ba      	ldr	r2, [r7, #8]
 8010a66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010a68:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	78db      	ldrb	r3, [r3, #3]
 8010a6e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010a70:	4313      	orrs	r3, r2
 8010a72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	22ca      	movs	r2, #202	@ 0xca
 8010a7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2253      	movs	r2, #83	@ 0x53
 8010a82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010a84:	2513      	movs	r5, #19
 8010a86:	197c      	adds	r4, r7, r5
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	0018      	movs	r0, r3
 8010a8c:	f000 f86c 	bl	8010b68 <RTC_EnterInitMode>
 8010a90:	0003      	movs	r3, r0
 8010a92:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010a94:	0028      	movs	r0, r5
 8010a96:	183b      	adds	r3, r7, r0
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d120      	bne.n	8010ae0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	697a      	ldr	r2, [r7, #20]
 8010aa4:	491a      	ldr	r1, [pc, #104]	@ (8010b10 <HAL_RTC_SetTime+0x14c>)
 8010aa6:	400a      	ands	r2, r1
 8010aa8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	689a      	ldr	r2, [r3, #8]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4917      	ldr	r1, [pc, #92]	@ (8010b14 <HAL_RTC_SetTime+0x150>)
 8010ab6:	400a      	ands	r2, r1
 8010ab8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	6899      	ldr	r1, [r3, #8]
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	68da      	ldr	r2, [r3, #12]
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	691b      	ldr	r3, [r3, #16]
 8010ac8:	431a      	orrs	r2, r3
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	430a      	orrs	r2, r1
 8010ad0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010ad2:	183c      	adds	r4, r7, r0
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	0018      	movs	r0, r3
 8010ad8:	f000 f88a 	bl	8010bf0 <RTC_ExitInitMode>
 8010adc:	0003      	movs	r3, r0
 8010ade:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8010ae0:	2313      	movs	r3, #19
 8010ae2:	18fb      	adds	r3, r7, r3
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d103      	bne.n	8010af2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2221      	movs	r2, #33	@ 0x21
 8010aee:	2101      	movs	r1, #1
 8010af0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	22ff      	movs	r2, #255	@ 0xff
 8010af8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2220      	movs	r2, #32
 8010afe:	2100      	movs	r1, #0
 8010b00:	5499      	strb	r1, [r3, r2]

  return status;
 8010b02:	2313      	movs	r3, #19
 8010b04:	18fb      	adds	r3, r7, r3
 8010b06:	781b      	ldrb	r3, [r3, #0]
}
 8010b08:	0018      	movs	r0, r3
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	b006      	add	sp, #24
 8010b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b10:	007f7f7f 	.word	0x007f7f7f
 8010b14:	fffbffff 	.word	0xfffbffff

08010b18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010b20:	2300      	movs	r3, #0
 8010b22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4a0e      	ldr	r2, [pc, #56]	@ (8010b64 <HAL_RTC_WaitForSynchro+0x4c>)
 8010b2a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010b2c:	f7f9 f9e0 	bl	8009ef0 <HAL_GetTick>
 8010b30:	0003      	movs	r3, r0
 8010b32:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010b34:	e00a      	b.n	8010b4c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010b36:	f7f9 f9db 	bl	8009ef0 <HAL_GetTick>
 8010b3a:	0002      	movs	r2, r0
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	1ad2      	subs	r2, r2, r3
 8010b40:	23fa      	movs	r3, #250	@ 0xfa
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d901      	bls.n	8010b4c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010b48:	2303      	movs	r3, #3
 8010b4a:	e006      	b.n	8010b5a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	2220      	movs	r2, #32
 8010b54:	4013      	ands	r3, r2
 8010b56:	d0ee      	beq.n	8010b36 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	0018      	movs	r0, r3
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	b004      	add	sp, #16
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	46c0      	nop			@ (mov r8, r8)
 8010b64:	0001ff5f 	.word	0x0001ff5f

08010b68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010b70:	2300      	movs	r3, #0
 8010b72:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010b74:	230f      	movs	r3, #15
 8010b76:	18fb      	adds	r3, r7, r3
 8010b78:	2200      	movs	r2, #0
 8010b7a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	2240      	movs	r2, #64	@ 0x40
 8010b84:	4013      	ands	r3, r2
 8010b86:	d12c      	bne.n	8010be2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	68da      	ldr	r2, [r3, #12]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	2180      	movs	r1, #128	@ 0x80
 8010b94:	430a      	orrs	r2, r1
 8010b96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010b98:	f7f9 f9aa 	bl	8009ef0 <HAL_GetTick>
 8010b9c:	0003      	movs	r3, r0
 8010b9e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010ba0:	e014      	b.n	8010bcc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010ba2:	f7f9 f9a5 	bl	8009ef0 <HAL_GetTick>
 8010ba6:	0002      	movs	r2, r0
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	1ad2      	subs	r2, r2, r3
 8010bac:	200f      	movs	r0, #15
 8010bae:	183b      	adds	r3, r7, r0
 8010bb0:	1839      	adds	r1, r7, r0
 8010bb2:	7809      	ldrb	r1, [r1, #0]
 8010bb4:	7019      	strb	r1, [r3, #0]
 8010bb6:	23fa      	movs	r3, #250	@ 0xfa
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d906      	bls.n	8010bcc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2221      	movs	r2, #33	@ 0x21
 8010bc2:	2104      	movs	r1, #4
 8010bc4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8010bc6:	183b      	adds	r3, r7, r0
 8010bc8:	2201      	movs	r2, #1
 8010bca:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	2240      	movs	r2, #64	@ 0x40
 8010bd4:	4013      	ands	r3, r2
 8010bd6:	d104      	bne.n	8010be2 <RTC_EnterInitMode+0x7a>
 8010bd8:	230f      	movs	r3, #15
 8010bda:	18fb      	adds	r3, r7, r3
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d1df      	bne.n	8010ba2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8010be2:	230f      	movs	r3, #15
 8010be4:	18fb      	adds	r3, r7, r3
 8010be6:	781b      	ldrb	r3, [r3, #0]
}
 8010be8:	0018      	movs	r0, r3
 8010bea:	46bd      	mov	sp, r7
 8010bec:	b004      	add	sp, #16
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010bf8:	240f      	movs	r4, #15
 8010bfa:	193b      	adds	r3, r7, r4
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	68da      	ldr	r2, [r3, #12]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2180      	movs	r1, #128	@ 0x80
 8010c0c:	438a      	bics	r2, r1
 8010c0e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	689b      	ldr	r3, [r3, #8]
 8010c16:	2220      	movs	r2, #32
 8010c18:	4013      	ands	r3, r2
 8010c1a:	d10c      	bne.n	8010c36 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	0018      	movs	r0, r3
 8010c20:	f7ff ff7a 	bl	8010b18 <HAL_RTC_WaitForSynchro>
 8010c24:	1e03      	subs	r3, r0, #0
 8010c26:	d006      	beq.n	8010c36 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2221      	movs	r2, #33	@ 0x21
 8010c2c:	2104      	movs	r1, #4
 8010c2e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8010c30:	193b      	adds	r3, r7, r4
 8010c32:	2201      	movs	r2, #1
 8010c34:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010c36:	230f      	movs	r3, #15
 8010c38:	18fb      	adds	r3, r7, r3
 8010c3a:	781b      	ldrb	r3, [r3, #0]
}
 8010c3c:	0018      	movs	r0, r3
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	b005      	add	sp, #20
 8010c42:	bd90      	pop	{r4, r7, pc}

08010c44 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	0002      	movs	r2, r0
 8010c4c:	1dfb      	adds	r3, r7, #7
 8010c4e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8010c50:	2300      	movs	r3, #0
 8010c52:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8010c54:	e007      	b.n	8010c66 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8010c5c:	1dfb      	adds	r3, r7, #7
 8010c5e:	1dfa      	adds	r2, r7, #7
 8010c60:	7812      	ldrb	r2, [r2, #0]
 8010c62:	3a0a      	subs	r2, #10
 8010c64:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8010c66:	1dfb      	adds	r3, r7, #7
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	2b09      	cmp	r3, #9
 8010c6c:	d8f3      	bhi.n	8010c56 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	b2db      	uxtb	r3, r3
 8010c72:	011b      	lsls	r3, r3, #4
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	1dfb      	adds	r3, r7, #7
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	b2db      	uxtb	r3, r3
}
 8010c7e:	0018      	movs	r0, r3
 8010c80:	46bd      	mov	sp, r7
 8010c82:	b004      	add	sp, #16
 8010c84:	bd80      	pop	{r7, pc}
	...

08010c88 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b086      	sub	sp, #24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8010c94:	2300      	movs	r3, #0
 8010c96:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2220      	movs	r2, #32
 8010c9c:	5c9b      	ldrb	r3, [r3, r2]
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d101      	bne.n	8010ca6 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	e096      	b.n	8010dd4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2220      	movs	r2, #32
 8010caa:	2101      	movs	r1, #1
 8010cac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2221      	movs	r2, #33	@ 0x21
 8010cb2:	2102      	movs	r1, #2
 8010cb4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	22ca      	movs	r2, #202	@ 0xca
 8010cbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2253      	movs	r2, #83	@ 0x53
 8010cc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	689a      	ldr	r2, [r3, #8]
 8010ccc:	2380      	movs	r3, #128	@ 0x80
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	4013      	ands	r3, r2
 8010cd2:	d021      	beq.n	8010d18 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8010cd4:	f7f9 f90c 	bl	8009ef0 <HAL_GetTick>
 8010cd8:	0003      	movs	r3, r0
 8010cda:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8010cdc:	e016      	b.n	8010d0c <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010cde:	f7f9 f907 	bl	8009ef0 <HAL_GetTick>
 8010ce2:	0002      	movs	r2, r0
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	1ad2      	subs	r2, r2, r3
 8010ce8:	23fa      	movs	r3, #250	@ 0xfa
 8010cea:	009b      	lsls	r3, r3, #2
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d90d      	bls.n	8010d0c <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	22ff      	movs	r2, #255	@ 0xff
 8010cf6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2221      	movs	r2, #33	@ 0x21
 8010cfc:	2103      	movs	r1, #3
 8010cfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2220      	movs	r2, #32
 8010d04:	2100      	movs	r1, #0
 8010d06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8010d08:	2303      	movs	r3, #3
 8010d0a:	e063      	b.n	8010dd4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	2204      	movs	r2, #4
 8010d14:	4013      	ands	r3, r2
 8010d16:	d1e2      	bne.n	8010cde <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	689a      	ldr	r2, [r3, #8]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	492e      	ldr	r1, [pc, #184]	@ (8010ddc <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8010d24:	400a      	ands	r2, r1
 8010d26:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	22ff      	movs	r2, #255	@ 0xff
 8010d30:	401a      	ands	r2, r3
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	492a      	ldr	r1, [pc, #168]	@ (8010de0 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8010d38:	430a      	orrs	r2, r1
 8010d3a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010d3c:	f7f9 f8d8 	bl	8009ef0 <HAL_GetTick>
 8010d40:	0003      	movs	r3, r0
 8010d42:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8010d44:	e016      	b.n	8010d74 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010d46:	f7f9 f8d3 	bl	8009ef0 <HAL_GetTick>
 8010d4a:	0002      	movs	r2, r0
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	1ad2      	subs	r2, r2, r3
 8010d50:	23fa      	movs	r3, #250	@ 0xfa
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d90d      	bls.n	8010d74 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	22ff      	movs	r2, #255	@ 0xff
 8010d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2221      	movs	r2, #33	@ 0x21
 8010d64:	2103      	movs	r1, #3
 8010d66:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8010d70:	2303      	movs	r3, #3
 8010d72:	e02f      	b.n	8010dd4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	2204      	movs	r2, #4
 8010d7c:	4013      	ands	r3, r2
 8010d7e:	d0e2      	beq.n	8010d46 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	689a      	ldr	r2, [r3, #8]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2107      	movs	r1, #7
 8010d8c:	438a      	bics	r2, r1
 8010d8e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	6899      	ldr	r1, [r3, #8]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	430a      	orrs	r2, r1
 8010d9e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	68ba      	ldr	r2, [r7, #8]
 8010da6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	689a      	ldr	r2, [r3, #8]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2180      	movs	r1, #128	@ 0x80
 8010db4:	00c9      	lsls	r1, r1, #3
 8010db6:	430a      	orrs	r2, r1
 8010db8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	22ff      	movs	r2, #255	@ 0xff
 8010dc0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2221      	movs	r2, #33	@ 0x21
 8010dc6:	2101      	movs	r1, #1
 8010dc8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	2220      	movs	r2, #32
 8010dce:	2100      	movs	r1, #0
 8010dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010dd2:	2300      	movs	r3, #0
}
 8010dd4:	0018      	movs	r0, r3
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	b006      	add	sp, #24
 8010dda:	bd80      	pop	{r7, pc}
 8010ddc:	fffffbff 	.word	0xfffffbff
 8010de0:	fffffb7f 	.word	0xfffffb7f

08010de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d101      	bne.n	8010df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010df2:	2301      	movs	r3, #1
 8010df4:	e032      	b.n	8010e5c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2239      	movs	r2, #57	@ 0x39
 8010dfa:	5c9b      	ldrb	r3, [r3, r2]
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d107      	bne.n	8010e12 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2238      	movs	r2, #56	@ 0x38
 8010e06:	2100      	movs	r1, #0
 8010e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	0018      	movs	r0, r3
 8010e0e:	f7f8 fa27 	bl	8009260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2239      	movs	r2, #57	@ 0x39
 8010e16:	2102      	movs	r1, #2
 8010e18:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681a      	ldr	r2, [r3, #0]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	3304      	adds	r3, #4
 8010e22:	0019      	movs	r1, r3
 8010e24:	0010      	movs	r0, r2
 8010e26:	f000 f975 	bl	8011114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	223e      	movs	r2, #62	@ 0x3e
 8010e2e:	2101      	movs	r1, #1
 8010e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	223a      	movs	r2, #58	@ 0x3a
 8010e36:	2101      	movs	r1, #1
 8010e38:	5499      	strb	r1, [r3, r2]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	223b      	movs	r2, #59	@ 0x3b
 8010e3e:	2101      	movs	r1, #1
 8010e40:	5499      	strb	r1, [r3, r2]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	223c      	movs	r2, #60	@ 0x3c
 8010e46:	2101      	movs	r1, #1
 8010e48:	5499      	strb	r1, [r3, r2]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	223d      	movs	r2, #61	@ 0x3d
 8010e4e:	2101      	movs	r1, #1
 8010e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2239      	movs	r2, #57	@ 0x39
 8010e56:	2101      	movs	r1, #1
 8010e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	0018      	movs	r0, r3
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	b002      	add	sp, #8
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d108      	bne.n	8010e86 <HAL_TIM_PWM_Start+0x22>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	223a      	movs	r2, #58	@ 0x3a
 8010e78:	5c9b      	ldrb	r3, [r3, r2]
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	1e5a      	subs	r2, r3, #1
 8010e80:	4193      	sbcs	r3, r2
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	e01f      	b.n	8010ec6 <HAL_TIM_PWM_Start+0x62>
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	2b04      	cmp	r3, #4
 8010e8a:	d108      	bne.n	8010e9e <HAL_TIM_PWM_Start+0x3a>
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	223b      	movs	r2, #59	@ 0x3b
 8010e90:	5c9b      	ldrb	r3, [r3, r2]
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	3b01      	subs	r3, #1
 8010e96:	1e5a      	subs	r2, r3, #1
 8010e98:	4193      	sbcs	r3, r2
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	e013      	b.n	8010ec6 <HAL_TIM_PWM_Start+0x62>
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	2b08      	cmp	r3, #8
 8010ea2:	d108      	bne.n	8010eb6 <HAL_TIM_PWM_Start+0x52>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	223c      	movs	r2, #60	@ 0x3c
 8010ea8:	5c9b      	ldrb	r3, [r3, r2]
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	3b01      	subs	r3, #1
 8010eae:	1e5a      	subs	r2, r3, #1
 8010eb0:	4193      	sbcs	r3, r2
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	e007      	b.n	8010ec6 <HAL_TIM_PWM_Start+0x62>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	223d      	movs	r2, #61	@ 0x3d
 8010eba:	5c9b      	ldrb	r3, [r3, r2]
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	1e5a      	subs	r2, r3, #1
 8010ec2:	4193      	sbcs	r3, r2
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d001      	beq.n	8010ece <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	e052      	b.n	8010f74 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d104      	bne.n	8010ede <HAL_TIM_PWM_Start+0x7a>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	223a      	movs	r2, #58	@ 0x3a
 8010ed8:	2102      	movs	r1, #2
 8010eda:	5499      	strb	r1, [r3, r2]
 8010edc:	e013      	b.n	8010f06 <HAL_TIM_PWM_Start+0xa2>
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	2b04      	cmp	r3, #4
 8010ee2:	d104      	bne.n	8010eee <HAL_TIM_PWM_Start+0x8a>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	223b      	movs	r2, #59	@ 0x3b
 8010ee8:	2102      	movs	r1, #2
 8010eea:	5499      	strb	r1, [r3, r2]
 8010eec:	e00b      	b.n	8010f06 <HAL_TIM_PWM_Start+0xa2>
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	2b08      	cmp	r3, #8
 8010ef2:	d104      	bne.n	8010efe <HAL_TIM_PWM_Start+0x9a>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	223c      	movs	r2, #60	@ 0x3c
 8010ef8:	2102      	movs	r1, #2
 8010efa:	5499      	strb	r1, [r3, r2]
 8010efc:	e003      	b.n	8010f06 <HAL_TIM_PWM_Start+0xa2>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	223d      	movs	r2, #61	@ 0x3d
 8010f02:	2102      	movs	r1, #2
 8010f04:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	6839      	ldr	r1, [r7, #0]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	0018      	movs	r0, r3
 8010f10:	f000 fa62 	bl	80113d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	2380      	movs	r3, #128	@ 0x80
 8010f1a:	05db      	lsls	r3, r3, #23
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d00e      	beq.n	8010f3e <HAL_TIM_PWM_Start+0xda>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	4a15      	ldr	r2, [pc, #84]	@ (8010f7c <HAL_TIM_PWM_Start+0x118>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d009      	beq.n	8010f3e <HAL_TIM_PWM_Start+0xda>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4a14      	ldr	r2, [pc, #80]	@ (8010f80 <HAL_TIM_PWM_Start+0x11c>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d004      	beq.n	8010f3e <HAL_TIM_PWM_Start+0xda>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a12      	ldr	r2, [pc, #72]	@ (8010f84 <HAL_TIM_PWM_Start+0x120>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d111      	bne.n	8010f62 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	2207      	movs	r2, #7
 8010f46:	4013      	ands	r3, r2
 8010f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2b06      	cmp	r3, #6
 8010f4e:	d010      	beq.n	8010f72 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2101      	movs	r1, #1
 8010f5c:	430a      	orrs	r2, r1
 8010f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f60:	e007      	b.n	8010f72 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	681a      	ldr	r2, [r3, #0]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	2101      	movs	r1, #1
 8010f6e:	430a      	orrs	r2, r1
 8010f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010f72:	2300      	movs	r3, #0
}
 8010f74:	0018      	movs	r0, r3
 8010f76:	46bd      	mov	sp, r7
 8010f78:	b004      	add	sp, #16
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	40000400 	.word	0x40000400
 8010f80:	40010800 	.word	0x40010800
 8010f84:	40011400 	.word	0x40011400

08010f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010f94:	2317      	movs	r3, #23
 8010f96:	18fb      	adds	r3, r7, r3
 8010f98:	2200      	movs	r2, #0
 8010f9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2238      	movs	r2, #56	@ 0x38
 8010fa0:	5c9b      	ldrb	r3, [r3, r2]
 8010fa2:	2b01      	cmp	r3, #1
 8010fa4:	d101      	bne.n	8010faa <HAL_TIM_PWM_ConfigChannel+0x22>
 8010fa6:	2302      	movs	r3, #2
 8010fa8:	e0ad      	b.n	8011106 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2238      	movs	r2, #56	@ 0x38
 8010fae:	2101      	movs	r1, #1
 8010fb0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2b0c      	cmp	r3, #12
 8010fb6:	d100      	bne.n	8010fba <HAL_TIM_PWM_ConfigChannel+0x32>
 8010fb8:	e076      	b.n	80110a8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b0c      	cmp	r3, #12
 8010fbe:	d900      	bls.n	8010fc2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8010fc0:	e095      	b.n	80110ee <HAL_TIM_PWM_ConfigChannel+0x166>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2b08      	cmp	r3, #8
 8010fc6:	d04e      	beq.n	8011066 <HAL_TIM_PWM_ConfigChannel+0xde>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2b08      	cmp	r3, #8
 8010fcc:	d900      	bls.n	8010fd0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8010fce:	e08e      	b.n	80110ee <HAL_TIM_PWM_ConfigChannel+0x166>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d003      	beq.n	8010fde <HAL_TIM_PWM_ConfigChannel+0x56>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2b04      	cmp	r3, #4
 8010fda:	d021      	beq.n	8011020 <HAL_TIM_PWM_ConfigChannel+0x98>
 8010fdc:	e087      	b.n	80110ee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	0011      	movs	r1, r2
 8010fe6:	0018      	movs	r0, r3
 8010fe8:	f000 f8f2 	bl	80111d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	699a      	ldr	r2, [r3, #24]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2108      	movs	r1, #8
 8010ff8:	430a      	orrs	r2, r1
 8010ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	699a      	ldr	r2, [r3, #24]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	2104      	movs	r1, #4
 8011008:	438a      	bics	r2, r1
 801100a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	6999      	ldr	r1, [r3, #24]
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	68da      	ldr	r2, [r3, #12]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	430a      	orrs	r2, r1
 801101c:	619a      	str	r2, [r3, #24]
      break;
 801101e:	e06b      	b.n	80110f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	68ba      	ldr	r2, [r7, #8]
 8011026:	0011      	movs	r1, r2
 8011028:	0018      	movs	r0, r3
 801102a:	f000 f90d 	bl	8011248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	699a      	ldr	r2, [r3, #24]
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2180      	movs	r1, #128	@ 0x80
 801103a:	0109      	lsls	r1, r1, #4
 801103c:	430a      	orrs	r2, r1
 801103e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	699a      	ldr	r2, [r3, #24]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4931      	ldr	r1, [pc, #196]	@ (8011110 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801104c:	400a      	ands	r2, r1
 801104e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	6999      	ldr	r1, [r3, #24]
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	021a      	lsls	r2, r3, #8
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	430a      	orrs	r2, r1
 8011062:	619a      	str	r2, [r3, #24]
      break;
 8011064:	e048      	b.n	80110f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	0011      	movs	r1, r2
 801106e:	0018      	movs	r0, r3
 8011070:	f000 f92c 	bl	80112cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	69da      	ldr	r2, [r3, #28]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	2108      	movs	r1, #8
 8011080:	430a      	orrs	r2, r1
 8011082:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	69da      	ldr	r2, [r3, #28]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2104      	movs	r1, #4
 8011090:	438a      	bics	r2, r1
 8011092:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	69d9      	ldr	r1, [r3, #28]
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	68da      	ldr	r2, [r3, #12]
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	430a      	orrs	r2, r1
 80110a4:	61da      	str	r2, [r3, #28]
      break;
 80110a6:	e027      	b.n	80110f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	0011      	movs	r1, r2
 80110b0:	0018      	movs	r0, r3
 80110b2:	f000 f94b 	bl	801134c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	69da      	ldr	r2, [r3, #28]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2180      	movs	r1, #128	@ 0x80
 80110c2:	0109      	lsls	r1, r1, #4
 80110c4:	430a      	orrs	r2, r1
 80110c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	69da      	ldr	r2, [r3, #28]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	490f      	ldr	r1, [pc, #60]	@ (8011110 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80110d4:	400a      	ands	r2, r1
 80110d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	69d9      	ldr	r1, [r3, #28]
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	021a      	lsls	r2, r3, #8
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	430a      	orrs	r2, r1
 80110ea:	61da      	str	r2, [r3, #28]
      break;
 80110ec:	e004      	b.n	80110f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80110ee:	2317      	movs	r3, #23
 80110f0:	18fb      	adds	r3, r7, r3
 80110f2:	2201      	movs	r2, #1
 80110f4:	701a      	strb	r2, [r3, #0]
      break;
 80110f6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2238      	movs	r2, #56	@ 0x38
 80110fc:	2100      	movs	r1, #0
 80110fe:	5499      	strb	r1, [r3, r2]

  return status;
 8011100:	2317      	movs	r3, #23
 8011102:	18fb      	adds	r3, r7, r3
 8011104:	781b      	ldrb	r3, [r3, #0]
}
 8011106:	0018      	movs	r0, r3
 8011108:	46bd      	mov	sp, r7
 801110a:	b006      	add	sp, #24
 801110c:	bd80      	pop	{r7, pc}
 801110e:	46c0      	nop			@ (mov r8, r8)
 8011110:	fffffbff 	.word	0xfffffbff

08011114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	2380      	movs	r3, #128	@ 0x80
 8011128:	05db      	lsls	r3, r3, #23
 801112a:	429a      	cmp	r2, r3
 801112c:	d00b      	beq.n	8011146 <TIM_Base_SetConfig+0x32>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4a23      	ldr	r2, [pc, #140]	@ (80111c0 <TIM_Base_SetConfig+0xac>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d007      	beq.n	8011146 <TIM_Base_SetConfig+0x32>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4a22      	ldr	r2, [pc, #136]	@ (80111c4 <TIM_Base_SetConfig+0xb0>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d003      	beq.n	8011146 <TIM_Base_SetConfig+0x32>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	4a21      	ldr	r2, [pc, #132]	@ (80111c8 <TIM_Base_SetConfig+0xb4>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d108      	bne.n	8011158 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2270      	movs	r2, #112	@ 0x70
 801114a:	4393      	bics	r3, r2
 801114c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	4313      	orrs	r3, r2
 8011156:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	2380      	movs	r3, #128	@ 0x80
 801115c:	05db      	lsls	r3, r3, #23
 801115e:	429a      	cmp	r2, r3
 8011160:	d00b      	beq.n	801117a <TIM_Base_SetConfig+0x66>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4a16      	ldr	r2, [pc, #88]	@ (80111c0 <TIM_Base_SetConfig+0xac>)
 8011166:	4293      	cmp	r3, r2
 8011168:	d007      	beq.n	801117a <TIM_Base_SetConfig+0x66>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4a15      	ldr	r2, [pc, #84]	@ (80111c4 <TIM_Base_SetConfig+0xb0>)
 801116e:	4293      	cmp	r3, r2
 8011170:	d003      	beq.n	801117a <TIM_Base_SetConfig+0x66>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4a14      	ldr	r2, [pc, #80]	@ (80111c8 <TIM_Base_SetConfig+0xb4>)
 8011176:	4293      	cmp	r3, r2
 8011178:	d108      	bne.n	801118c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	4a13      	ldr	r2, [pc, #76]	@ (80111cc <TIM_Base_SetConfig+0xb8>)
 801117e:	4013      	ands	r3, r2
 8011180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	68fa      	ldr	r2, [r7, #12]
 8011188:	4313      	orrs	r3, r2
 801118a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2280      	movs	r2, #128	@ 0x80
 8011190:	4393      	bics	r3, r2
 8011192:	001a      	movs	r2, r3
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	4313      	orrs	r3, r2
 801119a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	689a      	ldr	r2, [r3, #8]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	681a      	ldr	r2, [r3, #0]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2201      	movs	r2, #1
 80111b6:	615a      	str	r2, [r3, #20]
}
 80111b8:	46c0      	nop			@ (mov r8, r8)
 80111ba:	46bd      	mov	sp, r7
 80111bc:	b004      	add	sp, #16
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	40000400 	.word	0x40000400
 80111c4:	40010800 	.word	0x40010800
 80111c8:	40011400 	.word	0x40011400
 80111cc:	fffffcff 	.word	0xfffffcff

080111d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a1b      	ldr	r3, [r3, #32]
 80111de:	2201      	movs	r2, #1
 80111e0:	4393      	bics	r3, r2
 80111e2:	001a      	movs	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6a1b      	ldr	r3, [r3, #32]
 80111ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	699b      	ldr	r3, [r3, #24]
 80111f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2270      	movs	r2, #112	@ 0x70
 80111fe:	4393      	bics	r3, r2
 8011200:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2203      	movs	r2, #3
 8011206:	4393      	bics	r3, r2
 8011208:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	4313      	orrs	r3, r2
 8011212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	2202      	movs	r2, #2
 8011218:	4393      	bics	r3, r2
 801121a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	689b      	ldr	r3, [r3, #8]
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	4313      	orrs	r3, r2
 8011224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	693a      	ldr	r2, [r7, #16]
 801122a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	685a      	ldr	r2, [r3, #4]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	697a      	ldr	r2, [r7, #20]
 801123e:	621a      	str	r2, [r3, #32]
}
 8011240:	46c0      	nop			@ (mov r8, r8)
 8011242:	46bd      	mov	sp, r7
 8011244:	b006      	add	sp, #24
 8011246:	bd80      	pop	{r7, pc}

08011248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b086      	sub	sp, #24
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	2210      	movs	r2, #16
 8011258:	4393      	bics	r3, r2
 801125a:	001a      	movs	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6a1b      	ldr	r3, [r3, #32]
 8011264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	699b      	ldr	r3, [r3, #24]
 8011270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	4a13      	ldr	r2, [pc, #76]	@ (80112c4 <TIM_OC2_SetConfig+0x7c>)
 8011276:	4013      	ands	r3, r2
 8011278:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	4a12      	ldr	r2, [pc, #72]	@ (80112c8 <TIM_OC2_SetConfig+0x80>)
 801127e:	4013      	ands	r3, r2
 8011280:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	021b      	lsls	r3, r3, #8
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	4313      	orrs	r3, r2
 801128c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	2220      	movs	r2, #32
 8011292:	4393      	bics	r3, r2
 8011294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	011b      	lsls	r3, r3, #4
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	4313      	orrs	r3, r2
 80112a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	693a      	ldr	r2, [r7, #16]
 80112a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	685a      	ldr	r2, [r3, #4]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	697a      	ldr	r2, [r7, #20]
 80112ba:	621a      	str	r2, [r3, #32]
}
 80112bc:	46c0      	nop			@ (mov r8, r8)
 80112be:	46bd      	mov	sp, r7
 80112c0:	b006      	add	sp, #24
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	ffff8fff 	.word	0xffff8fff
 80112c8:	fffffcff 	.word	0xfffffcff

080112cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6a1b      	ldr	r3, [r3, #32]
 80112da:	4a1a      	ldr	r2, [pc, #104]	@ (8011344 <TIM_OC3_SetConfig+0x78>)
 80112dc:	401a      	ands	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a1b      	ldr	r3, [r3, #32]
 80112e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	69db      	ldr	r3, [r3, #28]
 80112f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	2270      	movs	r2, #112	@ 0x70
 80112f8:	4393      	bics	r3, r2
 80112fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2203      	movs	r2, #3
 8011300:	4393      	bics	r3, r2
 8011302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	68fa      	ldr	r2, [r7, #12]
 801130a:	4313      	orrs	r3, r2
 801130c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	4a0d      	ldr	r2, [pc, #52]	@ (8011348 <TIM_OC3_SetConfig+0x7c>)
 8011312:	4013      	ands	r3, r2
 8011314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	689b      	ldr	r3, [r3, #8]
 801131a:	021b      	lsls	r3, r3, #8
 801131c:	697a      	ldr	r2, [r7, #20]
 801131e:	4313      	orrs	r3, r2
 8011320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	693a      	ldr	r2, [r7, #16]
 8011326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68fa      	ldr	r2, [r7, #12]
 801132c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	685a      	ldr	r2, [r3, #4]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	697a      	ldr	r2, [r7, #20]
 801133a:	621a      	str	r2, [r3, #32]
}
 801133c:	46c0      	nop			@ (mov r8, r8)
 801133e:	46bd      	mov	sp, r7
 8011340:	b006      	add	sp, #24
 8011342:	bd80      	pop	{r7, pc}
 8011344:	fffffeff 	.word	0xfffffeff
 8011348:	fffffdff 	.word	0xfffffdff

0801134c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b086      	sub	sp, #24
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6a1b      	ldr	r3, [r3, #32]
 801135a:	4a1b      	ldr	r2, [pc, #108]	@ (80113c8 <TIM_OC4_SetConfig+0x7c>)
 801135c:	401a      	ands	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6a1b      	ldr	r3, [r3, #32]
 8011366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	69db      	ldr	r3, [r3, #28]
 8011372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	4a15      	ldr	r2, [pc, #84]	@ (80113cc <TIM_OC4_SetConfig+0x80>)
 8011378:	4013      	ands	r3, r2
 801137a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	4a14      	ldr	r2, [pc, #80]	@ (80113d0 <TIM_OC4_SetConfig+0x84>)
 8011380:	4013      	ands	r3, r2
 8011382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	021b      	lsls	r3, r3, #8
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	4313      	orrs	r3, r2
 801138e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	4a10      	ldr	r2, [pc, #64]	@ (80113d4 <TIM_OC4_SetConfig+0x88>)
 8011394:	4013      	ands	r3, r2
 8011396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	031b      	lsls	r3, r3, #12
 801139e:	697a      	ldr	r2, [r7, #20]
 80113a0:	4313      	orrs	r3, r2
 80113a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	693a      	ldr	r2, [r7, #16]
 80113a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	68fa      	ldr	r2, [r7, #12]
 80113ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	685a      	ldr	r2, [r3, #4]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	697a      	ldr	r2, [r7, #20]
 80113bc:	621a      	str	r2, [r3, #32]
}
 80113be:	46c0      	nop			@ (mov r8, r8)
 80113c0:	46bd      	mov	sp, r7
 80113c2:	b006      	add	sp, #24
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	46c0      	nop			@ (mov r8, r8)
 80113c8:	ffffefff 	.word	0xffffefff
 80113cc:	ffff8fff 	.word	0xffff8fff
 80113d0:	fffffcff 	.word	0xfffffcff
 80113d4:	ffffdfff 	.word	0xffffdfff

080113d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b086      	sub	sp, #24
 80113dc:	af00      	add	r7, sp, #0
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	221f      	movs	r2, #31
 80113e8:	4013      	ands	r3, r2
 80113ea:	2201      	movs	r2, #1
 80113ec:	409a      	lsls	r2, r3
 80113ee:	0013      	movs	r3, r2
 80113f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6a1b      	ldr	r3, [r3, #32]
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	43d2      	mvns	r2, r2
 80113fa:	401a      	ands	r2, r3
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	6a1a      	ldr	r2, [r3, #32]
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	211f      	movs	r1, #31
 8011408:	400b      	ands	r3, r1
 801140a:	6879      	ldr	r1, [r7, #4]
 801140c:	4099      	lsls	r1, r3
 801140e:	000b      	movs	r3, r1
 8011410:	431a      	orrs	r2, r3
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	621a      	str	r2, [r3, #32]
}
 8011416:	46c0      	nop			@ (mov r8, r8)
 8011418:	46bd      	mov	sp, r7
 801141a:	b006      	add	sp, #24
 801141c:	bd80      	pop	{r7, pc}
	...

08011420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2238      	movs	r2, #56	@ 0x38
 801142e:	5c9b      	ldrb	r3, [r3, r2]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d101      	bne.n	8011438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011434:	2302      	movs	r3, #2
 8011436:	e047      	b.n	80114c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2238      	movs	r2, #56	@ 0x38
 801143c:	2101      	movs	r1, #1
 801143e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2239      	movs	r2, #57	@ 0x39
 8011444:	2102      	movs	r1, #2
 8011446:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	689b      	ldr	r3, [r3, #8]
 8011456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2270      	movs	r2, #112	@ 0x70
 801145c:	4393      	bics	r3, r2
 801145e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	68fa      	ldr	r2, [r7, #12]
 8011466:	4313      	orrs	r3, r2
 8011468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	68fa      	ldr	r2, [r7, #12]
 8011470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	2380      	movs	r3, #128	@ 0x80
 8011478:	05db      	lsls	r3, r3, #23
 801147a:	429a      	cmp	r2, r3
 801147c:	d00e      	beq.n	801149c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4a13      	ldr	r2, [pc, #76]	@ (80114d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d009      	beq.n	801149c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a11      	ldr	r2, [pc, #68]	@ (80114d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d004      	beq.n	801149c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	4a10      	ldr	r2, [pc, #64]	@ (80114d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d10c      	bne.n	80114b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	2280      	movs	r2, #128	@ 0x80
 80114a0:	4393      	bics	r3, r2
 80114a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	4313      	orrs	r3, r2
 80114ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2239      	movs	r2, #57	@ 0x39
 80114ba:	2101      	movs	r1, #1
 80114bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2238      	movs	r2, #56	@ 0x38
 80114c2:	2100      	movs	r1, #0
 80114c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80114c6:	2300      	movs	r3, #0
}
 80114c8:	0018      	movs	r0, r3
 80114ca:	46bd      	mov	sp, r7
 80114cc:	b004      	add	sp, #16
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	40000400 	.word	0x40000400
 80114d4:	40010800 	.word	0x40010800
 80114d8:	40011400 	.word	0x40011400

080114dc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2238      	movs	r2, #56	@ 0x38
 80114ea:	5c9b      	ldrb	r3, [r3, r2]
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d101      	bne.n	80114f4 <HAL_TIMEx_RemapConfig+0x18>
 80114f0:	2302      	movs	r3, #2
 80114f2:	e00c      	b.n	801150e <HAL_TIMEx_RemapConfig+0x32>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2238      	movs	r2, #56	@ 0x38
 80114f8:	2101      	movs	r1, #1
 80114fa:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	683a      	ldr	r2, [r7, #0]
 8011502:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2238      	movs	r2, #56	@ 0x38
 8011508:	2100      	movs	r1, #0
 801150a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801150c:	2300      	movs	r3, #0
}
 801150e:	0018      	movs	r0, r3
 8011510:	46bd      	mov	sp, r7
 8011512:	b002      	add	sp, #8
 8011514:	bd80      	pop	{r7, pc}
	...

08011518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d101      	bne.n	801152a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011526:	2301      	movs	r3, #1
 8011528:	e053      	b.n	80115d2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801152e:	2b00      	cmp	r3, #0
 8011530:	d116      	bne.n	8011560 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2278      	movs	r2, #120	@ 0x78
 8011536:	2100      	movs	r1, #0
 8011538:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	0018      	movs	r0, r3
 801153e:	f000 fd07 	bl	8011f50 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	22b0      	movs	r2, #176	@ 0xb0
 8011546:	589b      	ldr	r3, [r3, r2]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d103      	bne.n	8011554 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	21b0      	movs	r1, #176	@ 0xb0
 8011550:	4a22      	ldr	r2, [pc, #136]	@ (80115dc <HAL_UART_Init+0xc4>)
 8011552:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	22b0      	movs	r2, #176	@ 0xb0
 8011558:	589b      	ldr	r3, [r3, r2]
 801155a:	687a      	ldr	r2, [r7, #4]
 801155c:	0010      	movs	r0, r2
 801155e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2224      	movs	r2, #36	@ 0x24
 8011564:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2101      	movs	r1, #1
 8011572:	438a      	bics	r2, r1
 8011574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	0018      	movs	r0, r3
 801157a:	f000 fd2d 	bl	8011fd8 <UART_SetConfig>
 801157e:	0003      	movs	r3, r0
 8011580:	2b01      	cmp	r3, #1
 8011582:	d101      	bne.n	8011588 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8011584:	2301      	movs	r3, #1
 8011586:	e024      	b.n	80115d2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801158c:	2b00      	cmp	r3, #0
 801158e:	d003      	beq.n	8011598 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	0018      	movs	r0, r3
 8011594:	f000 ffbe 	bl	8012514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	685a      	ldr	r2, [r3, #4]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	490f      	ldr	r1, [pc, #60]	@ (80115e0 <HAL_UART_Init+0xc8>)
 80115a4:	400a      	ands	r2, r1
 80115a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	689a      	ldr	r2, [r3, #8]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	212a      	movs	r1, #42	@ 0x2a
 80115b4:	438a      	bics	r2, r1
 80115b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2101      	movs	r1, #1
 80115c4:	430a      	orrs	r2, r1
 80115c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	0018      	movs	r0, r3
 80115cc:	f001 f856 	bl	801267c <UART_CheckIdleState>
 80115d0:	0003      	movs	r3, r0
}
 80115d2:	0018      	movs	r0, r3
 80115d4:	46bd      	mov	sp, r7
 80115d6:	b002      	add	sp, #8
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	46c0      	nop			@ (mov r8, r8)
 80115dc:	080094ad 	.word	0x080094ad
 80115e0:	ffffb7ff 	.word	0xffffb7ff

080115e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b08a      	sub	sp, #40	@ 0x28
 80115e8:	af02      	add	r7, sp, #8
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	603b      	str	r3, [r7, #0]
 80115f0:	1dbb      	adds	r3, r7, #6
 80115f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80115f8:	2b20      	cmp	r3, #32
 80115fa:	d000      	beq.n	80115fe <HAL_UART_Transmit+0x1a>
 80115fc:	e08c      	b.n	8011718 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d003      	beq.n	801160c <HAL_UART_Transmit+0x28>
 8011604:	1dbb      	adds	r3, r7, #6
 8011606:	881b      	ldrh	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d101      	bne.n	8011610 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	e084      	b.n	801171a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	689a      	ldr	r2, [r3, #8]
 8011614:	2380      	movs	r3, #128	@ 0x80
 8011616:	015b      	lsls	r3, r3, #5
 8011618:	429a      	cmp	r2, r3
 801161a:	d109      	bne.n	8011630 <HAL_UART_Transmit+0x4c>
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d105      	bne.n	8011630 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	2201      	movs	r2, #1
 8011628:	4013      	ands	r3, r2
 801162a:	d001      	beq.n	8011630 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801162c:	2301      	movs	r3, #1
 801162e:	e074      	b.n	801171a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2284      	movs	r2, #132	@ 0x84
 8011634:	2100      	movs	r1, #0
 8011636:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2221      	movs	r2, #33	@ 0x21
 801163c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801163e:	f7f8 fc57 	bl	8009ef0 <HAL_GetTick>
 8011642:	0003      	movs	r3, r0
 8011644:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	1dba      	adds	r2, r7, #6
 801164a:	2150      	movs	r1, #80	@ 0x50
 801164c:	8812      	ldrh	r2, [r2, #0]
 801164e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	1dba      	adds	r2, r7, #6
 8011654:	2152      	movs	r1, #82	@ 0x52
 8011656:	8812      	ldrh	r2, [r2, #0]
 8011658:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	689a      	ldr	r2, [r3, #8]
 801165e:	2380      	movs	r3, #128	@ 0x80
 8011660:	015b      	lsls	r3, r3, #5
 8011662:	429a      	cmp	r2, r3
 8011664:	d108      	bne.n	8011678 <HAL_UART_Transmit+0x94>
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	691b      	ldr	r3, [r3, #16]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d104      	bne.n	8011678 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801166e:	2300      	movs	r3, #0
 8011670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	61bb      	str	r3, [r7, #24]
 8011676:	e003      	b.n	8011680 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801167c:	2300      	movs	r3, #0
 801167e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011680:	e02f      	b.n	80116e2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011682:	697a      	ldr	r2, [r7, #20]
 8011684:	68f8      	ldr	r0, [r7, #12]
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	0013      	movs	r3, r2
 801168c:	2200      	movs	r2, #0
 801168e:	2180      	movs	r1, #128	@ 0x80
 8011690:	f001 f89c 	bl	80127cc <UART_WaitOnFlagUntilTimeout>
 8011694:	1e03      	subs	r3, r0, #0
 8011696:	d004      	beq.n	80116a2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2220      	movs	r2, #32
 801169c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801169e:	2303      	movs	r3, #3
 80116a0:	e03b      	b.n	801171a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10b      	bne.n	80116c0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	881b      	ldrh	r3, [r3, #0]
 80116ac:	001a      	movs	r2, r3
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	05d2      	lsls	r2, r2, #23
 80116b4:	0dd2      	lsrs	r2, r2, #23
 80116b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	3302      	adds	r3, #2
 80116bc:	61bb      	str	r3, [r7, #24]
 80116be:	e007      	b.n	80116d0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	781a      	ldrb	r2, [r3, #0]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80116ca:	69fb      	ldr	r3, [r7, #28]
 80116cc:	3301      	adds	r3, #1
 80116ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2252      	movs	r2, #82	@ 0x52
 80116d4:	5a9b      	ldrh	r3, [r3, r2]
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	3b01      	subs	r3, #1
 80116da:	b299      	uxth	r1, r3
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2252      	movs	r2, #82	@ 0x52
 80116e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2252      	movs	r2, #82	@ 0x52
 80116e6:	5a9b      	ldrh	r3, [r3, r2]
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1c9      	bne.n	8011682 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80116ee:	697a      	ldr	r2, [r7, #20]
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	0013      	movs	r3, r2
 80116f8:	2200      	movs	r2, #0
 80116fa:	2140      	movs	r1, #64	@ 0x40
 80116fc:	f001 f866 	bl	80127cc <UART_WaitOnFlagUntilTimeout>
 8011700:	1e03      	subs	r3, r0, #0
 8011702:	d004      	beq.n	801170e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2220      	movs	r2, #32
 8011708:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801170a:	2303      	movs	r3, #3
 801170c:	e005      	b.n	801171a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2220      	movs	r2, #32
 8011712:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011714:	2300      	movs	r3, #0
 8011716:	e000      	b.n	801171a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011718:	2302      	movs	r3, #2
  }
}
 801171a:	0018      	movs	r0, r3
 801171c:	46bd      	mov	sp, r7
 801171e:	b008      	add	sp, #32
 8011720:	bd80      	pop	{r7, pc}
	...

08011724 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b088      	sub	sp, #32
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	1dbb      	adds	r3, r7, #6
 8011730:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011736:	2b20      	cmp	r3, #32
 8011738:	d000      	beq.n	801173c <HAL_UART_Transmit_DMA+0x18>
 801173a:	e077      	b.n	801182c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d003      	beq.n	801174a <HAL_UART_Transmit_DMA+0x26>
 8011742:	1dbb      	adds	r3, r7, #6
 8011744:	881b      	ldrh	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d101      	bne.n	801174e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801174a:	2301      	movs	r3, #1
 801174c:	e06f      	b.n	801182e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	689a      	ldr	r2, [r3, #8]
 8011752:	2380      	movs	r3, #128	@ 0x80
 8011754:	015b      	lsls	r3, r3, #5
 8011756:	429a      	cmp	r2, r3
 8011758:	d109      	bne.n	801176e <HAL_UART_Transmit_DMA+0x4a>
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d105      	bne.n	801176e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	2201      	movs	r2, #1
 8011766:	4013      	ands	r3, r2
 8011768:	d001      	beq.n	801176e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	e05f      	b.n	801182e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	1dba      	adds	r2, r7, #6
 8011778:	2150      	movs	r1, #80	@ 0x50
 801177a:	8812      	ldrh	r2, [r2, #0]
 801177c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	1dba      	adds	r2, r7, #6
 8011782:	2152      	movs	r1, #82	@ 0x52
 8011784:	8812      	ldrh	r2, [r2, #0]
 8011786:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2284      	movs	r2, #132	@ 0x84
 801178c:	2100      	movs	r1, #0
 801178e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2221      	movs	r2, #33	@ 0x21
 8011794:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801179a:	2b00      	cmp	r3, #0
 801179c:	d027      	beq.n	80117ee <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117a2:	4a25      	ldr	r2, [pc, #148]	@ (8011838 <HAL_UART_Transmit_DMA+0x114>)
 80117a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117aa:	4a24      	ldr	r2, [pc, #144]	@ (801183c <HAL_UART_Transmit_DMA+0x118>)
 80117ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117b2:	4a23      	ldr	r2, [pc, #140]	@ (8011840 <HAL_UART_Transmit_DMA+0x11c>)
 80117b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117ba:	2200      	movs	r2, #0
 80117bc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80117c6:	0019      	movs	r1, r3
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3328      	adds	r3, #40	@ 0x28
 80117ce:	001a      	movs	r2, r3
 80117d0:	1dbb      	adds	r3, r7, #6
 80117d2:	881b      	ldrh	r3, [r3, #0]
 80117d4:	f7f9 f90a 	bl	800a9ec <HAL_DMA_Start_IT>
 80117d8:	1e03      	subs	r3, r0, #0
 80117da:	d008      	beq.n	80117ee <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2284      	movs	r2, #132	@ 0x84
 80117e0:	2110      	movs	r1, #16
 80117e2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2220      	movs	r2, #32
 80117e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80117ea:	2301      	movs	r3, #1
 80117ec:	e01f      	b.n	801182e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2240      	movs	r2, #64	@ 0x40
 80117f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117f6:	f3ef 8310 	mrs	r3, PRIMASK
 80117fa:	613b      	str	r3, [r7, #16]
  return(result);
 80117fc:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80117fe:	61fb      	str	r3, [r7, #28]
 8011800:	2301      	movs	r3, #1
 8011802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	f383 8810 	msr	PRIMASK, r3
}
 801180a:	46c0      	nop			@ (mov r8, r8)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	689a      	ldr	r2, [r3, #8]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2180      	movs	r1, #128	@ 0x80
 8011818:	430a      	orrs	r2, r1
 801181a:	609a      	str	r2, [r3, #8]
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	f383 8810 	msr	PRIMASK, r3
}
 8011826:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011828:	2300      	movs	r3, #0
 801182a:	e000      	b.n	801182e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801182c:	2302      	movs	r3, #2
  }
}
 801182e:	0018      	movs	r0, r3
 8011830:	46bd      	mov	sp, r7
 8011832:	b008      	add	sp, #32
 8011834:	bd80      	pop	{r7, pc}
 8011836:	46c0      	nop			@ (mov r8, r8)
 8011838:	08012af1 	.word	0x08012af1
 801183c:	08012b8d 	.word	0x08012b8d
 8011840:	08012d2d 	.word	0x08012d2d

08011844 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b088      	sub	sp, #32
 8011848:	af00      	add	r7, sp, #0
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	1dbb      	adds	r3, r7, #6
 8011850:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	2280      	movs	r2, #128	@ 0x80
 8011856:	589b      	ldr	r3, [r3, r2]
 8011858:	2b20      	cmp	r3, #32
 801185a:	d14a      	bne.n	80118f2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d003      	beq.n	801186a <HAL_UART_Receive_DMA+0x26>
 8011862:	1dbb      	adds	r3, r7, #6
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d101      	bne.n	801186e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801186a:	2301      	movs	r3, #1
 801186c:	e042      	b.n	80118f4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	689a      	ldr	r2, [r3, #8]
 8011872:	2380      	movs	r3, #128	@ 0x80
 8011874:	015b      	lsls	r3, r3, #5
 8011876:	429a      	cmp	r2, r3
 8011878:	d109      	bne.n	801188e <HAL_UART_Receive_DMA+0x4a>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d105      	bne.n	801188e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	2201      	movs	r2, #1
 8011886:	4013      	ands	r3, r2
 8011888:	d001      	beq.n	801188e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801188a:	2301      	movs	r3, #1
 801188c:	e032      	b.n	80118f4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2200      	movs	r2, #0
 8011892:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a18      	ldr	r2, [pc, #96]	@ (80118fc <HAL_UART_Receive_DMA+0xb8>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d020      	beq.n	80118e0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	685a      	ldr	r2, [r3, #4]
 80118a4:	2380      	movs	r3, #128	@ 0x80
 80118a6:	041b      	lsls	r3, r3, #16
 80118a8:	4013      	ands	r3, r2
 80118aa:	d019      	beq.n	80118e0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118ac:	f3ef 8310 	mrs	r3, PRIMASK
 80118b0:	613b      	str	r3, [r7, #16]
  return(result);
 80118b2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80118b4:	61fb      	str	r3, [r7, #28]
 80118b6:	2301      	movs	r3, #1
 80118b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	f383 8810 	msr	PRIMASK, r3
}
 80118c0:	46c0      	nop			@ (mov r8, r8)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2180      	movs	r1, #128	@ 0x80
 80118ce:	04c9      	lsls	r1, r1, #19
 80118d0:	430a      	orrs	r2, r1
 80118d2:	601a      	str	r2, [r3, #0]
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	f383 8810 	msr	PRIMASK, r3
}
 80118de:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80118e0:	1dbb      	adds	r3, r7, #6
 80118e2:	881a      	ldrh	r2, [r3, #0]
 80118e4:	68b9      	ldr	r1, [r7, #8]
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	0018      	movs	r0, r3
 80118ea:	f000 ffd9 	bl	80128a0 <UART_Start_Receive_DMA>
 80118ee:	0003      	movs	r3, r0
 80118f0:	e000      	b.n	80118f4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80118f2:	2302      	movs	r3, #2
  }
}
 80118f4:	0018      	movs	r0, r3
 80118f6:	46bd      	mov	sp, r7
 80118f8:	b008      	add	sp, #32
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	40004800 	.word	0x40004800

08011900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011900:	b590      	push	{r4, r7, lr}
 8011902:	b0ab      	sub	sp, #172	@ 0xac
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	22a4      	movs	r2, #164	@ 0xa4
 8011910:	18b9      	adds	r1, r7, r2
 8011912:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	20a0      	movs	r0, #160	@ 0xa0
 801191c:	1839      	adds	r1, r7, r0
 801191e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	689b      	ldr	r3, [r3, #8]
 8011926:	219c      	movs	r1, #156	@ 0x9c
 8011928:	1879      	adds	r1, r7, r1
 801192a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801192c:	0011      	movs	r1, r2
 801192e:	18bb      	adds	r3, r7, r2
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4a9c      	ldr	r2, [pc, #624]	@ (8011ba4 <HAL_UART_IRQHandler+0x2a4>)
 8011934:	4013      	ands	r3, r2
 8011936:	2298      	movs	r2, #152	@ 0x98
 8011938:	18bc      	adds	r4, r7, r2
 801193a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801193c:	18bb      	adds	r3, r7, r2
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d114      	bne.n	801196e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011944:	187b      	adds	r3, r7, r1
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2220      	movs	r2, #32
 801194a:	4013      	ands	r3, r2
 801194c:	d00f      	beq.n	801196e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801194e:	183b      	adds	r3, r7, r0
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2220      	movs	r2, #32
 8011954:	4013      	ands	r3, r2
 8011956:	d00a      	beq.n	801196e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801195c:	2b00      	cmp	r3, #0
 801195e:	d100      	bne.n	8011962 <HAL_UART_IRQHandler+0x62>
 8011960:	e2aa      	b.n	8011eb8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	0010      	movs	r0, r2
 801196a:	4798      	blx	r3
      }
      return;
 801196c:	e2a4      	b.n	8011eb8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801196e:	2398      	movs	r3, #152	@ 0x98
 8011970:	18fb      	adds	r3, r7, r3
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d100      	bne.n	801197a <HAL_UART_IRQHandler+0x7a>
 8011978:	e11a      	b.n	8011bb0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801197a:	239c      	movs	r3, #156	@ 0x9c
 801197c:	18fb      	adds	r3, r7, r3
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2201      	movs	r2, #1
 8011982:	4013      	ands	r3, r2
 8011984:	d106      	bne.n	8011994 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011986:	23a0      	movs	r3, #160	@ 0xa0
 8011988:	18fb      	adds	r3, r7, r3
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	4a86      	ldr	r2, [pc, #536]	@ (8011ba8 <HAL_UART_IRQHandler+0x2a8>)
 801198e:	4013      	ands	r3, r2
 8011990:	d100      	bne.n	8011994 <HAL_UART_IRQHandler+0x94>
 8011992:	e10d      	b.n	8011bb0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011994:	23a4      	movs	r3, #164	@ 0xa4
 8011996:	18fb      	adds	r3, r7, r3
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2201      	movs	r2, #1
 801199c:	4013      	ands	r3, r2
 801199e:	d012      	beq.n	80119c6 <HAL_UART_IRQHandler+0xc6>
 80119a0:	23a0      	movs	r3, #160	@ 0xa0
 80119a2:	18fb      	adds	r3, r7, r3
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	2380      	movs	r3, #128	@ 0x80
 80119a8:	005b      	lsls	r3, r3, #1
 80119aa:	4013      	ands	r3, r2
 80119ac:	d00b      	beq.n	80119c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	2201      	movs	r2, #1
 80119b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2284      	movs	r2, #132	@ 0x84
 80119ba:	589b      	ldr	r3, [r3, r2]
 80119bc:	2201      	movs	r2, #1
 80119be:	431a      	orrs	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2184      	movs	r1, #132	@ 0x84
 80119c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80119c6:	23a4      	movs	r3, #164	@ 0xa4
 80119c8:	18fb      	adds	r3, r7, r3
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2202      	movs	r2, #2
 80119ce:	4013      	ands	r3, r2
 80119d0:	d011      	beq.n	80119f6 <HAL_UART_IRQHandler+0xf6>
 80119d2:	239c      	movs	r3, #156	@ 0x9c
 80119d4:	18fb      	adds	r3, r7, r3
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2201      	movs	r2, #1
 80119da:	4013      	ands	r3, r2
 80119dc:	d00b      	beq.n	80119f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2202      	movs	r2, #2
 80119e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2284      	movs	r2, #132	@ 0x84
 80119ea:	589b      	ldr	r3, [r3, r2]
 80119ec:	2204      	movs	r2, #4
 80119ee:	431a      	orrs	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2184      	movs	r1, #132	@ 0x84
 80119f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80119f6:	23a4      	movs	r3, #164	@ 0xa4
 80119f8:	18fb      	adds	r3, r7, r3
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2204      	movs	r2, #4
 80119fe:	4013      	ands	r3, r2
 8011a00:	d011      	beq.n	8011a26 <HAL_UART_IRQHandler+0x126>
 8011a02:	239c      	movs	r3, #156	@ 0x9c
 8011a04:	18fb      	adds	r3, r7, r3
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2201      	movs	r2, #1
 8011a0a:	4013      	ands	r3, r2
 8011a0c:	d00b      	beq.n	8011a26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2204      	movs	r2, #4
 8011a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2284      	movs	r2, #132	@ 0x84
 8011a1a:	589b      	ldr	r3, [r3, r2]
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	431a      	orrs	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2184      	movs	r1, #132	@ 0x84
 8011a24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011a26:	23a4      	movs	r3, #164	@ 0xa4
 8011a28:	18fb      	adds	r3, r7, r3
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2208      	movs	r2, #8
 8011a2e:	4013      	ands	r3, r2
 8011a30:	d017      	beq.n	8011a62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011a32:	23a0      	movs	r3, #160	@ 0xa0
 8011a34:	18fb      	adds	r3, r7, r3
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2220      	movs	r2, #32
 8011a3a:	4013      	ands	r3, r2
 8011a3c:	d105      	bne.n	8011a4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011a3e:	239c      	movs	r3, #156	@ 0x9c
 8011a40:	18fb      	adds	r3, r7, r3
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	2201      	movs	r2, #1
 8011a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011a48:	d00b      	beq.n	8011a62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2208      	movs	r2, #8
 8011a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2284      	movs	r2, #132	@ 0x84
 8011a56:	589b      	ldr	r3, [r3, r2]
 8011a58:	2208      	movs	r2, #8
 8011a5a:	431a      	orrs	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2184      	movs	r1, #132	@ 0x84
 8011a60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011a62:	23a4      	movs	r3, #164	@ 0xa4
 8011a64:	18fb      	adds	r3, r7, r3
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	2380      	movs	r3, #128	@ 0x80
 8011a6a:	011b      	lsls	r3, r3, #4
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	d013      	beq.n	8011a98 <HAL_UART_IRQHandler+0x198>
 8011a70:	23a0      	movs	r3, #160	@ 0xa0
 8011a72:	18fb      	adds	r3, r7, r3
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	2380      	movs	r3, #128	@ 0x80
 8011a78:	04db      	lsls	r3, r3, #19
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	d00c      	beq.n	8011a98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2280      	movs	r2, #128	@ 0x80
 8011a84:	0112      	lsls	r2, r2, #4
 8011a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2284      	movs	r2, #132	@ 0x84
 8011a8c:	589b      	ldr	r3, [r3, r2]
 8011a8e:	2220      	movs	r2, #32
 8011a90:	431a      	orrs	r2, r3
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2184      	movs	r1, #132	@ 0x84
 8011a96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2284      	movs	r2, #132	@ 0x84
 8011a9c:	589b      	ldr	r3, [r3, r2]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d100      	bne.n	8011aa4 <HAL_UART_IRQHandler+0x1a4>
 8011aa2:	e20b      	b.n	8011ebc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011aa4:	23a4      	movs	r3, #164	@ 0xa4
 8011aa6:	18fb      	adds	r3, r7, r3
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2220      	movs	r2, #32
 8011aac:	4013      	ands	r3, r2
 8011aae:	d00e      	beq.n	8011ace <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011ab0:	23a0      	movs	r3, #160	@ 0xa0
 8011ab2:	18fb      	adds	r3, r7, r3
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2220      	movs	r2, #32
 8011ab8:	4013      	ands	r3, r2
 8011aba:	d008      	beq.n	8011ace <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d004      	beq.n	8011ace <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	0010      	movs	r0, r2
 8011acc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2284      	movs	r2, #132	@ 0x84
 8011ad2:	589b      	ldr	r3, [r3, r2]
 8011ad4:	2194      	movs	r1, #148	@ 0x94
 8011ad6:	187a      	adds	r2, r7, r1
 8011ad8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	689b      	ldr	r3, [r3, #8]
 8011ae0:	2240      	movs	r2, #64	@ 0x40
 8011ae2:	4013      	ands	r3, r2
 8011ae4:	2b40      	cmp	r3, #64	@ 0x40
 8011ae6:	d004      	beq.n	8011af2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011ae8:	187b      	adds	r3, r7, r1
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2228      	movs	r2, #40	@ 0x28
 8011aee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011af0:	d04b      	beq.n	8011b8a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	0018      	movs	r0, r3
 8011af6:	f000 ff97 	bl	8012a28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	689b      	ldr	r3, [r3, #8]
 8011b00:	2240      	movs	r2, #64	@ 0x40
 8011b02:	4013      	ands	r3, r2
 8011b04:	2b40      	cmp	r3, #64	@ 0x40
 8011b06:	d139      	bne.n	8011b7c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b08:	f3ef 8310 	mrs	r3, PRIMASK
 8011b0c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8011b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b10:	2090      	movs	r0, #144	@ 0x90
 8011b12:	183a      	adds	r2, r7, r0
 8011b14:	6013      	str	r3, [r2, #0]
 8011b16:	2301      	movs	r3, #1
 8011b18:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b1c:	f383 8810 	msr	PRIMASK, r3
}
 8011b20:	46c0      	nop			@ (mov r8, r8)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	689a      	ldr	r2, [r3, #8]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	2140      	movs	r1, #64	@ 0x40
 8011b2e:	438a      	bics	r2, r1
 8011b30:	609a      	str	r2, [r3, #8]
 8011b32:	183b      	adds	r3, r7, r0
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b3a:	f383 8810 	msr	PRIMASK, r3
}
 8011b3e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d012      	beq.n	8011b6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b4c:	4a17      	ldr	r2, [pc, #92]	@ (8011bac <HAL_UART_IRQHandler+0x2ac>)
 8011b4e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b54:	0018      	movs	r0, r3
 8011b56:	f7f8 ffef 	bl	800ab38 <HAL_DMA_Abort_IT>
 8011b5a:	1e03      	subs	r3, r0, #0
 8011b5c:	d020      	beq.n	8011ba0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b68:	0018      	movs	r0, r3
 8011b6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b6c:	e018      	b.n	8011ba0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2298      	movs	r2, #152	@ 0x98
 8011b72:	589b      	ldr	r3, [r3, r2]
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	0010      	movs	r0, r2
 8011b78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b7a:	e011      	b.n	8011ba0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2298      	movs	r2, #152	@ 0x98
 8011b80:	589b      	ldr	r3, [r3, r2]
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	0010      	movs	r0, r2
 8011b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b88:	e00a      	b.n	8011ba0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2298      	movs	r2, #152	@ 0x98
 8011b8e:	589b      	ldr	r3, [r3, r2]
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	0010      	movs	r0, r2
 8011b94:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2284      	movs	r2, #132	@ 0x84
 8011b9a:	2100      	movs	r1, #0
 8011b9c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8011b9e:	e18d      	b.n	8011ebc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ba0:	46c0      	nop			@ (mov r8, r8)
    return;
 8011ba2:	e18b      	b.n	8011ebc <HAL_UART_IRQHandler+0x5bc>
 8011ba4:	0000080f 	.word	0x0000080f
 8011ba8:	04000120 	.word	0x04000120
 8011bac:	08012db5 	.word	0x08012db5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011bb4:	2b01      	cmp	r3, #1
 8011bb6:	d000      	beq.n	8011bba <HAL_UART_IRQHandler+0x2ba>
 8011bb8:	e13d      	b.n	8011e36 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011bba:	23a4      	movs	r3, #164	@ 0xa4
 8011bbc:	18fb      	adds	r3, r7, r3
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2210      	movs	r2, #16
 8011bc2:	4013      	ands	r3, r2
 8011bc4:	d100      	bne.n	8011bc8 <HAL_UART_IRQHandler+0x2c8>
 8011bc6:	e136      	b.n	8011e36 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011bc8:	23a0      	movs	r3, #160	@ 0xa0
 8011bca:	18fb      	adds	r3, r7, r3
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2210      	movs	r2, #16
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	d100      	bne.n	8011bd6 <HAL_UART_IRQHandler+0x2d6>
 8011bd4:	e12f      	b.n	8011e36 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2210      	movs	r2, #16
 8011bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	2240      	movs	r2, #64	@ 0x40
 8011be6:	4013      	ands	r3, r2
 8011be8:	2b40      	cmp	r3, #64	@ 0x40
 8011bea:	d000      	beq.n	8011bee <HAL_UART_IRQHandler+0x2ee>
 8011bec:	e0a2      	b.n	8011d34 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	685a      	ldr	r2, [r3, #4]
 8011bf6:	217e      	movs	r1, #126	@ 0x7e
 8011bf8:	187b      	adds	r3, r7, r1
 8011bfa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8011bfc:	187b      	adds	r3, r7, r1
 8011bfe:	881b      	ldrh	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d100      	bne.n	8011c06 <HAL_UART_IRQHandler+0x306>
 8011c04:	e15c      	b.n	8011ec0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2258      	movs	r2, #88	@ 0x58
 8011c0a:	5a9b      	ldrh	r3, [r3, r2]
 8011c0c:	187a      	adds	r2, r7, r1
 8011c0e:	8812      	ldrh	r2, [r2, #0]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d300      	bcc.n	8011c16 <HAL_UART_IRQHandler+0x316>
 8011c14:	e154      	b.n	8011ec0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	187a      	adds	r2, r7, r1
 8011c1a:	215a      	movs	r1, #90	@ 0x5a
 8011c1c:	8812      	ldrh	r2, [r2, #0]
 8011c1e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	2220      	movs	r2, #32
 8011c2a:	4013      	ands	r3, r2
 8011c2c:	d16f      	bne.n	8011d0e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8011c32:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011c38:	2301      	movs	r3, #1
 8011c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c3e:	f383 8810 	msr	PRIMASK, r3
}
 8011c42:	46c0      	nop			@ (mov r8, r8)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	49a0      	ldr	r1, [pc, #640]	@ (8011ed0 <HAL_UART_IRQHandler+0x5d0>)
 8011c50:	400a      	ands	r2, r1
 8011c52:	601a      	str	r2, [r3, #0]
 8011c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c5a:	f383 8810 	msr	PRIMASK, r3
}
 8011c5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c60:	f3ef 8310 	mrs	r3, PRIMASK
 8011c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8011c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c68:	677b      	str	r3, [r7, #116]	@ 0x74
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c70:	f383 8810 	msr	PRIMASK, r3
}
 8011c74:	46c0      	nop			@ (mov r8, r8)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	689a      	ldr	r2, [r3, #8]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2101      	movs	r1, #1
 8011c82:	438a      	bics	r2, r1
 8011c84:	609a      	str	r2, [r3, #8]
 8011c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011c88:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c8c:	f383 8810 	msr	PRIMASK, r3
}
 8011c90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c92:	f3ef 8310 	mrs	r3, PRIMASK
 8011c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8011c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ca2:	f383 8810 	msr	PRIMASK, r3
}
 8011ca6:	46c0      	nop			@ (mov r8, r8)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	689a      	ldr	r2, [r3, #8]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2140      	movs	r1, #64	@ 0x40
 8011cb4:	438a      	bics	r2, r1
 8011cb6:	609a      	str	r2, [r3, #8]
 8011cb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011cba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cbe:	f383 8810 	msr	PRIMASK, r3
}
 8011cc2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2280      	movs	r2, #128	@ 0x80
 8011cc8:	2120      	movs	r1, #32
 8011cca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8011cd6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8011cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011cdc:	2301      	movs	r3, #1
 8011cde:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ce2:	f383 8810 	msr	PRIMASK, r3
}
 8011ce6:	46c0      	nop			@ (mov r8, r8)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	681a      	ldr	r2, [r3, #0]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2110      	movs	r1, #16
 8011cf4:	438a      	bics	r2, r1
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011cfe:	f383 8810 	msr	PRIMASK, r3
}
 8011d02:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d08:	0018      	movs	r0, r3
 8011d0a:	f7f8 fed5 	bl	800aab8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2202      	movs	r2, #2
 8011d12:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	22ac      	movs	r2, #172	@ 0xac
 8011d18:	589b      	ldr	r3, [r3, r2]
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	2158      	movs	r1, #88	@ 0x58
 8011d1e:	5a51      	ldrh	r1, [r2, r1]
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	205a      	movs	r0, #90	@ 0x5a
 8011d24:	5a12      	ldrh	r2, [r2, r0]
 8011d26:	b292      	uxth	r2, r2
 8011d28:	1a8a      	subs	r2, r1, r2
 8011d2a:	b291      	uxth	r1, r2
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	0010      	movs	r0, r2
 8011d30:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011d32:	e0c5      	b.n	8011ec0 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2258      	movs	r2, #88	@ 0x58
 8011d38:	5a99      	ldrh	r1, [r3, r2]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	225a      	movs	r2, #90	@ 0x5a
 8011d3e:	5a9b      	ldrh	r3, [r3, r2]
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	208e      	movs	r0, #142	@ 0x8e
 8011d44:	183b      	adds	r3, r7, r0
 8011d46:	1a8a      	subs	r2, r1, r2
 8011d48:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	225a      	movs	r2, #90	@ 0x5a
 8011d4e:	5a9b      	ldrh	r3, [r3, r2]
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d100      	bne.n	8011d58 <HAL_UART_IRQHandler+0x458>
 8011d56:	e0b5      	b.n	8011ec4 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8011d58:	183b      	adds	r3, r7, r0
 8011d5a:	881b      	ldrh	r3, [r3, #0]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d100      	bne.n	8011d62 <HAL_UART_IRQHandler+0x462>
 8011d60:	e0b0      	b.n	8011ec4 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d62:	f3ef 8310 	mrs	r3, PRIMASK
 8011d66:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d68:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011d6a:	2488      	movs	r4, #136	@ 0x88
 8011d6c:	193a      	adds	r2, r7, r4
 8011d6e:	6013      	str	r3, [r2, #0]
 8011d70:	2301      	movs	r3, #1
 8011d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	f383 8810 	msr	PRIMASK, r3
}
 8011d7a:	46c0      	nop			@ (mov r8, r8)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	4953      	ldr	r1, [pc, #332]	@ (8011ed4 <HAL_UART_IRQHandler+0x5d4>)
 8011d88:	400a      	ands	r2, r1
 8011d8a:	601a      	str	r2, [r3, #0]
 8011d8c:	193b      	adds	r3, r7, r4
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	f383 8810 	msr	PRIMASK, r3
}
 8011d98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8011d9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8011da0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011da2:	2484      	movs	r4, #132	@ 0x84
 8011da4:	193a      	adds	r2, r7, r4
 8011da6:	6013      	str	r3, [r2, #0]
 8011da8:	2301      	movs	r3, #1
 8011daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dac:	69fb      	ldr	r3, [r7, #28]
 8011dae:	f383 8810 	msr	PRIMASK, r3
}
 8011db2:	46c0      	nop			@ (mov r8, r8)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	689a      	ldr	r2, [r3, #8]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2101      	movs	r1, #1
 8011dc0:	438a      	bics	r2, r1
 8011dc2:	609a      	str	r2, [r3, #8]
 8011dc4:	193b      	adds	r3, r7, r4
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dca:	6a3b      	ldr	r3, [r7, #32]
 8011dcc:	f383 8810 	msr	PRIMASK, r3
}
 8011dd0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2280      	movs	r2, #128	@ 0x80
 8011dd6:	2120      	movs	r1, #32
 8011dd8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2200      	movs	r2, #0
 8011de4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011de6:	f3ef 8310 	mrs	r3, PRIMASK
 8011dea:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8011dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011dee:	2480      	movs	r4, #128	@ 0x80
 8011df0:	193a      	adds	r2, r7, r4
 8011df2:	6013      	str	r3, [r2, #0]
 8011df4:	2301      	movs	r3, #1
 8011df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dfa:	f383 8810 	msr	PRIMASK, r3
}
 8011dfe:	46c0      	nop			@ (mov r8, r8)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	2110      	movs	r1, #16
 8011e0c:	438a      	bics	r2, r1
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	193b      	adds	r3, r7, r4
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e18:	f383 8810 	msr	PRIMASK, r3
}
 8011e1c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2202      	movs	r2, #2
 8011e22:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	22ac      	movs	r2, #172	@ 0xac
 8011e28:	589b      	ldr	r3, [r3, r2]
 8011e2a:	183a      	adds	r2, r7, r0
 8011e2c:	8811      	ldrh	r1, [r2, #0]
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	0010      	movs	r0, r2
 8011e32:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011e34:	e046      	b.n	8011ec4 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011e36:	23a4      	movs	r3, #164	@ 0xa4
 8011e38:	18fb      	adds	r3, r7, r3
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	2380      	movs	r3, #128	@ 0x80
 8011e3e:	035b      	lsls	r3, r3, #13
 8011e40:	4013      	ands	r3, r2
 8011e42:	d012      	beq.n	8011e6a <HAL_UART_IRQHandler+0x56a>
 8011e44:	239c      	movs	r3, #156	@ 0x9c
 8011e46:	18fb      	adds	r3, r7, r3
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	2380      	movs	r3, #128	@ 0x80
 8011e4c:	03db      	lsls	r3, r3, #15
 8011e4e:	4013      	ands	r3, r2
 8011e50:	d00b      	beq.n	8011e6a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	2280      	movs	r2, #128	@ 0x80
 8011e58:	0352      	lsls	r2, r2, #13
 8011e5a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	22a8      	movs	r2, #168	@ 0xa8
 8011e60:	589b      	ldr	r3, [r3, r2]
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	0010      	movs	r0, r2
 8011e66:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011e68:	e02f      	b.n	8011eca <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011e6a:	23a4      	movs	r3, #164	@ 0xa4
 8011e6c:	18fb      	adds	r3, r7, r3
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2280      	movs	r2, #128	@ 0x80
 8011e72:	4013      	ands	r3, r2
 8011e74:	d00f      	beq.n	8011e96 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011e76:	23a0      	movs	r3, #160	@ 0xa0
 8011e78:	18fb      	adds	r3, r7, r3
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	2280      	movs	r2, #128	@ 0x80
 8011e7e:	4013      	ands	r3, r2
 8011e80:	d009      	beq.n	8011e96 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d01e      	beq.n	8011ec8 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	0010      	movs	r0, r2
 8011e92:	4798      	blx	r3
    }
    return;
 8011e94:	e018      	b.n	8011ec8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011e96:	23a4      	movs	r3, #164	@ 0xa4
 8011e98:	18fb      	adds	r3, r7, r3
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	2240      	movs	r2, #64	@ 0x40
 8011e9e:	4013      	ands	r3, r2
 8011ea0:	d013      	beq.n	8011eca <HAL_UART_IRQHandler+0x5ca>
 8011ea2:	23a0      	movs	r3, #160	@ 0xa0
 8011ea4:	18fb      	adds	r3, r7, r3
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2240      	movs	r2, #64	@ 0x40
 8011eaa:	4013      	ands	r3, r2
 8011eac:	d00d      	beq.n	8011eca <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	0018      	movs	r0, r3
 8011eb2:	f000 ff98 	bl	8012de6 <UART_EndTransmit_IT>
    return;
 8011eb6:	e008      	b.n	8011eca <HAL_UART_IRQHandler+0x5ca>
      return;
 8011eb8:	46c0      	nop			@ (mov r8, r8)
 8011eba:	e006      	b.n	8011eca <HAL_UART_IRQHandler+0x5ca>
    return;
 8011ebc:	46c0      	nop			@ (mov r8, r8)
 8011ebe:	e004      	b.n	8011eca <HAL_UART_IRQHandler+0x5ca>
      return;
 8011ec0:	46c0      	nop			@ (mov r8, r8)
 8011ec2:	e002      	b.n	8011eca <HAL_UART_IRQHandler+0x5ca>
      return;
 8011ec4:	46c0      	nop			@ (mov r8, r8)
 8011ec6:	e000      	b.n	8011eca <HAL_UART_IRQHandler+0x5ca>
    return;
 8011ec8:	46c0      	nop			@ (mov r8, r8)
  }

}
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	b02b      	add	sp, #172	@ 0xac
 8011ece:	bd90      	pop	{r4, r7, pc}
 8011ed0:	fffffeff 	.word	0xfffffeff
 8011ed4:	fffffedf 	.word	0xfffffedf

08011ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011ee0:	46c0      	nop			@ (mov r8, r8)
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	b002      	add	sp, #8
 8011ee6:	bd80      	pop	{r7, pc}

08011ee8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011ef0:	46c0      	nop			@ (mov r8, r8)
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	b002      	add	sp, #8
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011f00:	46c0      	nop			@ (mov r8, r8)
 8011f02:	46bd      	mov	sp, r7
 8011f04:	b002      	add	sp, #8
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011f10:	46c0      	nop			@ (mov r8, r8)
 8011f12:	46bd      	mov	sp, r7
 8011f14:	b002      	add	sp, #8
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8011f20:	46c0      	nop			@ (mov r8, r8)
 8011f22:	46bd      	mov	sp, r7
 8011f24:	b002      	add	sp, #8
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8011f30:	46c0      	nop			@ (mov r8, r8)
 8011f32:	46bd      	mov	sp, r7
 8011f34:	b002      	add	sp, #8
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	000a      	movs	r2, r1
 8011f42:	1cbb      	adds	r3, r7, #2
 8011f44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011f46:	46c0      	nop			@ (mov r8, r8)
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	b002      	add	sp, #8
 8011f4c:	bd80      	pop	{r7, pc}
	...

08011f50 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2188      	movs	r1, #136	@ 0x88
 8011f5c:	4a14      	ldr	r2, [pc, #80]	@ (8011fb0 <UART_InitCallbacksToDefault+0x60>)
 8011f5e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	218c      	movs	r1, #140	@ 0x8c
 8011f64:	4a13      	ldr	r2, [pc, #76]	@ (8011fb4 <UART_InitCallbacksToDefault+0x64>)
 8011f66:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2190      	movs	r1, #144	@ 0x90
 8011f6c:	4a12      	ldr	r2, [pc, #72]	@ (8011fb8 <UART_InitCallbacksToDefault+0x68>)
 8011f6e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2194      	movs	r1, #148	@ 0x94
 8011f74:	4a11      	ldr	r2, [pc, #68]	@ (8011fbc <UART_InitCallbacksToDefault+0x6c>)
 8011f76:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2198      	movs	r1, #152	@ 0x98
 8011f7c:	4a10      	ldr	r2, [pc, #64]	@ (8011fc0 <UART_InitCallbacksToDefault+0x70>)
 8011f7e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	219c      	movs	r1, #156	@ 0x9c
 8011f84:	4a0f      	ldr	r2, [pc, #60]	@ (8011fc4 <UART_InitCallbacksToDefault+0x74>)
 8011f86:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	21a0      	movs	r1, #160	@ 0xa0
 8011f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8011fc8 <UART_InitCallbacksToDefault+0x78>)
 8011f8e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	21a4      	movs	r1, #164	@ 0xa4
 8011f94:	4a0d      	ldr	r2, [pc, #52]	@ (8011fcc <UART_InitCallbacksToDefault+0x7c>)
 8011f96:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	21a8      	movs	r1, #168	@ 0xa8
 8011f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8011fd0 <UART_InitCallbacksToDefault+0x80>)
 8011f9e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	21ac      	movs	r1, #172	@ 0xac
 8011fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8011fd4 <UART_InitCallbacksToDefault+0x84>)
 8011fa6:	505a      	str	r2, [r3, r1]

}
 8011fa8:	46c0      	nop			@ (mov r8, r8)
 8011faa:	46bd      	mov	sp, r7
 8011fac:	b002      	add	sp, #8
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	08011ee9 	.word	0x08011ee9
 8011fb4:	08011ed9 	.word	0x08011ed9
 8011fb8:	08011ef9 	.word	0x08011ef9
 8011fbc:	08003839 	.word	0x08003839
 8011fc0:	08003875 	.word	0x08003875
 8011fc4:	08011f09 	.word	0x08011f09
 8011fc8:	08011f19 	.word	0x08011f19
 8011fcc:	08011f29 	.word	0x08011f29
 8011fd0:	08012e41 	.word	0x08012e41
 8011fd4:	08011f39 	.word	0x08011f39

08011fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011fd8:	b5b0      	push	{r4, r5, r7, lr}
 8011fda:	b08e      	sub	sp, #56	@ 0x38
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011fe0:	231a      	movs	r3, #26
 8011fe2:	2218      	movs	r2, #24
 8011fe4:	189b      	adds	r3, r3, r2
 8011fe6:	19db      	adds	r3, r3, r7
 8011fe8:	2200      	movs	r2, #0
 8011fea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	689a      	ldr	r2, [r3, #8]
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	691b      	ldr	r3, [r3, #16]
 8011ff4:	431a      	orrs	r2, r3
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	695b      	ldr	r3, [r3, #20]
 8011ffa:	431a      	orrs	r2, r3
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	69db      	ldr	r3, [r3, #28]
 8012000:	4313      	orrs	r3, r2
 8012002:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4ac3      	ldr	r2, [pc, #780]	@ (8012318 <UART_SetConfig+0x340>)
 801200c:	4013      	ands	r3, r2
 801200e:	0019      	movs	r1, r3
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012016:	430a      	orrs	r2, r1
 8012018:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	4abe      	ldr	r2, [pc, #760]	@ (801231c <UART_SetConfig+0x344>)
 8012022:	4013      	ands	r3, r2
 8012024:	0019      	movs	r1, r3
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	68da      	ldr	r2, [r3, #12]
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	430a      	orrs	r2, r1
 8012030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	699b      	ldr	r3, [r3, #24]
 8012036:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4ab8      	ldr	r2, [pc, #736]	@ (8012320 <UART_SetConfig+0x348>)
 801203e:	4293      	cmp	r3, r2
 8012040:	d004      	beq.n	801204c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012042:	69fb      	ldr	r3, [r7, #28]
 8012044:	6a1b      	ldr	r3, [r3, #32]
 8012046:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012048:	4313      	orrs	r3, r2
 801204a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	689b      	ldr	r3, [r3, #8]
 8012052:	4ab4      	ldr	r2, [pc, #720]	@ (8012324 <UART_SetConfig+0x34c>)
 8012054:	4013      	ands	r3, r2
 8012056:	0019      	movs	r1, r3
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801205e:	430a      	orrs	r2, r1
 8012060:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4ab0      	ldr	r2, [pc, #704]	@ (8012328 <UART_SetConfig+0x350>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d131      	bne.n	80120d0 <UART_SetConfig+0xf8>
 801206c:	4baf      	ldr	r3, [pc, #700]	@ (801232c <UART_SetConfig+0x354>)
 801206e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012070:	2203      	movs	r2, #3
 8012072:	4013      	ands	r3, r2
 8012074:	2b03      	cmp	r3, #3
 8012076:	d01d      	beq.n	80120b4 <UART_SetConfig+0xdc>
 8012078:	d823      	bhi.n	80120c2 <UART_SetConfig+0xea>
 801207a:	2b02      	cmp	r3, #2
 801207c:	d00c      	beq.n	8012098 <UART_SetConfig+0xc0>
 801207e:	d820      	bhi.n	80120c2 <UART_SetConfig+0xea>
 8012080:	2b00      	cmp	r3, #0
 8012082:	d002      	beq.n	801208a <UART_SetConfig+0xb2>
 8012084:	2b01      	cmp	r3, #1
 8012086:	d00e      	beq.n	80120a6 <UART_SetConfig+0xce>
 8012088:	e01b      	b.n	80120c2 <UART_SetConfig+0xea>
 801208a:	231b      	movs	r3, #27
 801208c:	2218      	movs	r2, #24
 801208e:	189b      	adds	r3, r3, r2
 8012090:	19db      	adds	r3, r3, r7
 8012092:	2201      	movs	r2, #1
 8012094:	701a      	strb	r2, [r3, #0]
 8012096:	e0b4      	b.n	8012202 <UART_SetConfig+0x22a>
 8012098:	231b      	movs	r3, #27
 801209a:	2218      	movs	r2, #24
 801209c:	189b      	adds	r3, r3, r2
 801209e:	19db      	adds	r3, r3, r7
 80120a0:	2202      	movs	r2, #2
 80120a2:	701a      	strb	r2, [r3, #0]
 80120a4:	e0ad      	b.n	8012202 <UART_SetConfig+0x22a>
 80120a6:	231b      	movs	r3, #27
 80120a8:	2218      	movs	r2, #24
 80120aa:	189b      	adds	r3, r3, r2
 80120ac:	19db      	adds	r3, r3, r7
 80120ae:	2204      	movs	r2, #4
 80120b0:	701a      	strb	r2, [r3, #0]
 80120b2:	e0a6      	b.n	8012202 <UART_SetConfig+0x22a>
 80120b4:	231b      	movs	r3, #27
 80120b6:	2218      	movs	r2, #24
 80120b8:	189b      	adds	r3, r3, r2
 80120ba:	19db      	adds	r3, r3, r7
 80120bc:	2208      	movs	r2, #8
 80120be:	701a      	strb	r2, [r3, #0]
 80120c0:	e09f      	b.n	8012202 <UART_SetConfig+0x22a>
 80120c2:	231b      	movs	r3, #27
 80120c4:	2218      	movs	r2, #24
 80120c6:	189b      	adds	r3, r3, r2
 80120c8:	19db      	adds	r3, r3, r7
 80120ca:	2210      	movs	r2, #16
 80120cc:	701a      	strb	r2, [r3, #0]
 80120ce:	e098      	b.n	8012202 <UART_SetConfig+0x22a>
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4a96      	ldr	r2, [pc, #600]	@ (8012330 <UART_SetConfig+0x358>)
 80120d6:	4293      	cmp	r3, r2
 80120d8:	d131      	bne.n	801213e <UART_SetConfig+0x166>
 80120da:	4b94      	ldr	r3, [pc, #592]	@ (801232c <UART_SetConfig+0x354>)
 80120dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120de:	220c      	movs	r2, #12
 80120e0:	4013      	ands	r3, r2
 80120e2:	2b0c      	cmp	r3, #12
 80120e4:	d01d      	beq.n	8012122 <UART_SetConfig+0x14a>
 80120e6:	d823      	bhi.n	8012130 <UART_SetConfig+0x158>
 80120e8:	2b08      	cmp	r3, #8
 80120ea:	d00c      	beq.n	8012106 <UART_SetConfig+0x12e>
 80120ec:	d820      	bhi.n	8012130 <UART_SetConfig+0x158>
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d002      	beq.n	80120f8 <UART_SetConfig+0x120>
 80120f2:	2b04      	cmp	r3, #4
 80120f4:	d00e      	beq.n	8012114 <UART_SetConfig+0x13c>
 80120f6:	e01b      	b.n	8012130 <UART_SetConfig+0x158>
 80120f8:	231b      	movs	r3, #27
 80120fa:	2218      	movs	r2, #24
 80120fc:	189b      	adds	r3, r3, r2
 80120fe:	19db      	adds	r3, r3, r7
 8012100:	2200      	movs	r2, #0
 8012102:	701a      	strb	r2, [r3, #0]
 8012104:	e07d      	b.n	8012202 <UART_SetConfig+0x22a>
 8012106:	231b      	movs	r3, #27
 8012108:	2218      	movs	r2, #24
 801210a:	189b      	adds	r3, r3, r2
 801210c:	19db      	adds	r3, r3, r7
 801210e:	2202      	movs	r2, #2
 8012110:	701a      	strb	r2, [r3, #0]
 8012112:	e076      	b.n	8012202 <UART_SetConfig+0x22a>
 8012114:	231b      	movs	r3, #27
 8012116:	2218      	movs	r2, #24
 8012118:	189b      	adds	r3, r3, r2
 801211a:	19db      	adds	r3, r3, r7
 801211c:	2204      	movs	r2, #4
 801211e:	701a      	strb	r2, [r3, #0]
 8012120:	e06f      	b.n	8012202 <UART_SetConfig+0x22a>
 8012122:	231b      	movs	r3, #27
 8012124:	2218      	movs	r2, #24
 8012126:	189b      	adds	r3, r3, r2
 8012128:	19db      	adds	r3, r3, r7
 801212a:	2208      	movs	r2, #8
 801212c:	701a      	strb	r2, [r3, #0]
 801212e:	e068      	b.n	8012202 <UART_SetConfig+0x22a>
 8012130:	231b      	movs	r3, #27
 8012132:	2218      	movs	r2, #24
 8012134:	189b      	adds	r3, r3, r2
 8012136:	19db      	adds	r3, r3, r7
 8012138:	2210      	movs	r2, #16
 801213a:	701a      	strb	r2, [r3, #0]
 801213c:	e061      	b.n	8012202 <UART_SetConfig+0x22a>
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	4a7c      	ldr	r2, [pc, #496]	@ (8012334 <UART_SetConfig+0x35c>)
 8012144:	4293      	cmp	r3, r2
 8012146:	d106      	bne.n	8012156 <UART_SetConfig+0x17e>
 8012148:	231b      	movs	r3, #27
 801214a:	2218      	movs	r2, #24
 801214c:	189b      	adds	r3, r3, r2
 801214e:	19db      	adds	r3, r3, r7
 8012150:	2200      	movs	r2, #0
 8012152:	701a      	strb	r2, [r3, #0]
 8012154:	e055      	b.n	8012202 <UART_SetConfig+0x22a>
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4a77      	ldr	r2, [pc, #476]	@ (8012338 <UART_SetConfig+0x360>)
 801215c:	4293      	cmp	r3, r2
 801215e:	d106      	bne.n	801216e <UART_SetConfig+0x196>
 8012160:	231b      	movs	r3, #27
 8012162:	2218      	movs	r2, #24
 8012164:	189b      	adds	r3, r3, r2
 8012166:	19db      	adds	r3, r3, r7
 8012168:	2200      	movs	r2, #0
 801216a:	701a      	strb	r2, [r3, #0]
 801216c:	e049      	b.n	8012202 <UART_SetConfig+0x22a>
 801216e:	69fb      	ldr	r3, [r7, #28]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	4a6b      	ldr	r2, [pc, #428]	@ (8012320 <UART_SetConfig+0x348>)
 8012174:	4293      	cmp	r3, r2
 8012176:	d13e      	bne.n	80121f6 <UART_SetConfig+0x21e>
 8012178:	4b6c      	ldr	r3, [pc, #432]	@ (801232c <UART_SetConfig+0x354>)
 801217a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801217c:	23c0      	movs	r3, #192	@ 0xc0
 801217e:	011b      	lsls	r3, r3, #4
 8012180:	4013      	ands	r3, r2
 8012182:	22c0      	movs	r2, #192	@ 0xc0
 8012184:	0112      	lsls	r2, r2, #4
 8012186:	4293      	cmp	r3, r2
 8012188:	d027      	beq.n	80121da <UART_SetConfig+0x202>
 801218a:	22c0      	movs	r2, #192	@ 0xc0
 801218c:	0112      	lsls	r2, r2, #4
 801218e:	4293      	cmp	r3, r2
 8012190:	d82a      	bhi.n	80121e8 <UART_SetConfig+0x210>
 8012192:	2280      	movs	r2, #128	@ 0x80
 8012194:	0112      	lsls	r2, r2, #4
 8012196:	4293      	cmp	r3, r2
 8012198:	d011      	beq.n	80121be <UART_SetConfig+0x1e6>
 801219a:	2280      	movs	r2, #128	@ 0x80
 801219c:	0112      	lsls	r2, r2, #4
 801219e:	4293      	cmp	r3, r2
 80121a0:	d822      	bhi.n	80121e8 <UART_SetConfig+0x210>
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d004      	beq.n	80121b0 <UART_SetConfig+0x1d8>
 80121a6:	2280      	movs	r2, #128	@ 0x80
 80121a8:	00d2      	lsls	r2, r2, #3
 80121aa:	4293      	cmp	r3, r2
 80121ac:	d00e      	beq.n	80121cc <UART_SetConfig+0x1f4>
 80121ae:	e01b      	b.n	80121e8 <UART_SetConfig+0x210>
 80121b0:	231b      	movs	r3, #27
 80121b2:	2218      	movs	r2, #24
 80121b4:	189b      	adds	r3, r3, r2
 80121b6:	19db      	adds	r3, r3, r7
 80121b8:	2200      	movs	r2, #0
 80121ba:	701a      	strb	r2, [r3, #0]
 80121bc:	e021      	b.n	8012202 <UART_SetConfig+0x22a>
 80121be:	231b      	movs	r3, #27
 80121c0:	2218      	movs	r2, #24
 80121c2:	189b      	adds	r3, r3, r2
 80121c4:	19db      	adds	r3, r3, r7
 80121c6:	2202      	movs	r2, #2
 80121c8:	701a      	strb	r2, [r3, #0]
 80121ca:	e01a      	b.n	8012202 <UART_SetConfig+0x22a>
 80121cc:	231b      	movs	r3, #27
 80121ce:	2218      	movs	r2, #24
 80121d0:	189b      	adds	r3, r3, r2
 80121d2:	19db      	adds	r3, r3, r7
 80121d4:	2204      	movs	r2, #4
 80121d6:	701a      	strb	r2, [r3, #0]
 80121d8:	e013      	b.n	8012202 <UART_SetConfig+0x22a>
 80121da:	231b      	movs	r3, #27
 80121dc:	2218      	movs	r2, #24
 80121de:	189b      	adds	r3, r3, r2
 80121e0:	19db      	adds	r3, r3, r7
 80121e2:	2208      	movs	r2, #8
 80121e4:	701a      	strb	r2, [r3, #0]
 80121e6:	e00c      	b.n	8012202 <UART_SetConfig+0x22a>
 80121e8:	231b      	movs	r3, #27
 80121ea:	2218      	movs	r2, #24
 80121ec:	189b      	adds	r3, r3, r2
 80121ee:	19db      	adds	r3, r3, r7
 80121f0:	2210      	movs	r2, #16
 80121f2:	701a      	strb	r2, [r3, #0]
 80121f4:	e005      	b.n	8012202 <UART_SetConfig+0x22a>
 80121f6:	231b      	movs	r3, #27
 80121f8:	2218      	movs	r2, #24
 80121fa:	189b      	adds	r3, r3, r2
 80121fc:	19db      	adds	r3, r3, r7
 80121fe:	2210      	movs	r2, #16
 8012200:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4a46      	ldr	r2, [pc, #280]	@ (8012320 <UART_SetConfig+0x348>)
 8012208:	4293      	cmp	r3, r2
 801220a:	d000      	beq.n	801220e <UART_SetConfig+0x236>
 801220c:	e09a      	b.n	8012344 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801220e:	231b      	movs	r3, #27
 8012210:	2218      	movs	r2, #24
 8012212:	189b      	adds	r3, r3, r2
 8012214:	19db      	adds	r3, r3, r7
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	2b08      	cmp	r3, #8
 801221a:	d01d      	beq.n	8012258 <UART_SetConfig+0x280>
 801221c:	dc20      	bgt.n	8012260 <UART_SetConfig+0x288>
 801221e:	2b04      	cmp	r3, #4
 8012220:	d015      	beq.n	801224e <UART_SetConfig+0x276>
 8012222:	dc1d      	bgt.n	8012260 <UART_SetConfig+0x288>
 8012224:	2b00      	cmp	r3, #0
 8012226:	d002      	beq.n	801222e <UART_SetConfig+0x256>
 8012228:	2b02      	cmp	r3, #2
 801222a:	d005      	beq.n	8012238 <UART_SetConfig+0x260>
 801222c:	e018      	b.n	8012260 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801222e:	f7fe f9a5 	bl	801057c <HAL_RCC_GetPCLK1Freq>
 8012232:	0003      	movs	r3, r0
 8012234:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012236:	e01c      	b.n	8012272 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012238:	4b3c      	ldr	r3, [pc, #240]	@ (801232c <UART_SetConfig+0x354>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2210      	movs	r2, #16
 801223e:	4013      	ands	r3, r2
 8012240:	d002      	beq.n	8012248 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012242:	4b3e      	ldr	r3, [pc, #248]	@ (801233c <UART_SetConfig+0x364>)
 8012244:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012246:	e014      	b.n	8012272 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8012248:	4b3d      	ldr	r3, [pc, #244]	@ (8012340 <UART_SetConfig+0x368>)
 801224a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801224c:	e011      	b.n	8012272 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801224e:	f7fe f8e5 	bl	801041c <HAL_RCC_GetSysClockFreq>
 8012252:	0003      	movs	r3, r0
 8012254:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012256:	e00c      	b.n	8012272 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012258:	2380      	movs	r3, #128	@ 0x80
 801225a:	021b      	lsls	r3, r3, #8
 801225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801225e:	e008      	b.n	8012272 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8012260:	2300      	movs	r3, #0
 8012262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012264:	231a      	movs	r3, #26
 8012266:	2218      	movs	r2, #24
 8012268:	189b      	adds	r3, r3, r2
 801226a:	19db      	adds	r3, r3, r7
 801226c:	2201      	movs	r2, #1
 801226e:	701a      	strb	r2, [r3, #0]
        break;
 8012270:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012274:	2b00      	cmp	r3, #0
 8012276:	d100      	bne.n	801227a <UART_SetConfig+0x2a2>
 8012278:	e133      	b.n	80124e2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	685a      	ldr	r2, [r3, #4]
 801227e:	0013      	movs	r3, r2
 8012280:	005b      	lsls	r3, r3, #1
 8012282:	189b      	adds	r3, r3, r2
 8012284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012286:	429a      	cmp	r2, r3
 8012288:	d305      	bcc.n	8012296 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801228a:	69fb      	ldr	r3, [r7, #28]
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8012290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012292:	429a      	cmp	r2, r3
 8012294:	d906      	bls.n	80122a4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8012296:	231a      	movs	r3, #26
 8012298:	2218      	movs	r2, #24
 801229a:	189b      	adds	r3, r3, r2
 801229c:	19db      	adds	r3, r3, r7
 801229e:	2201      	movs	r2, #1
 80122a0:	701a      	strb	r2, [r3, #0]
 80122a2:	e11e      	b.n	80124e2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80122a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a6:	613b      	str	r3, [r7, #16]
 80122a8:	2300      	movs	r3, #0
 80122aa:	617b      	str	r3, [r7, #20]
 80122ac:	6939      	ldr	r1, [r7, #16]
 80122ae:	697a      	ldr	r2, [r7, #20]
 80122b0:	000b      	movs	r3, r1
 80122b2:	0e1b      	lsrs	r3, r3, #24
 80122b4:	0010      	movs	r0, r2
 80122b6:	0205      	lsls	r5, r0, #8
 80122b8:	431d      	orrs	r5, r3
 80122ba:	000b      	movs	r3, r1
 80122bc:	021c      	lsls	r4, r3, #8
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	085b      	lsrs	r3, r3, #1
 80122c4:	60bb      	str	r3, [r7, #8]
 80122c6:	2300      	movs	r3, #0
 80122c8:	60fb      	str	r3, [r7, #12]
 80122ca:	68b8      	ldr	r0, [r7, #8]
 80122cc:	68f9      	ldr	r1, [r7, #12]
 80122ce:	1900      	adds	r0, r0, r4
 80122d0:	4169      	adcs	r1, r5
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	603b      	str	r3, [r7, #0]
 80122d8:	2300      	movs	r3, #0
 80122da:	607b      	str	r3, [r7, #4]
 80122dc:	683a      	ldr	r2, [r7, #0]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f7ee f91c 	bl	800051c <__aeabi_uldivmod>
 80122e4:	0002      	movs	r2, r0
 80122e6:	000b      	movs	r3, r1
 80122e8:	0013      	movs	r3, r2
 80122ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80122ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122ee:	23c0      	movs	r3, #192	@ 0xc0
 80122f0:	009b      	lsls	r3, r3, #2
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d309      	bcc.n	801230a <UART_SetConfig+0x332>
 80122f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122f8:	2380      	movs	r3, #128	@ 0x80
 80122fa:	035b      	lsls	r3, r3, #13
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d204      	bcs.n	801230a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012306:	60da      	str	r2, [r3, #12]
 8012308:	e0eb      	b.n	80124e2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801230a:	231a      	movs	r3, #26
 801230c:	2218      	movs	r2, #24
 801230e:	189b      	adds	r3, r3, r2
 8012310:	19db      	adds	r3, r3, r7
 8012312:	2201      	movs	r2, #1
 8012314:	701a      	strb	r2, [r3, #0]
 8012316:	e0e4      	b.n	80124e2 <UART_SetConfig+0x50a>
 8012318:	efff69f3 	.word	0xefff69f3
 801231c:	ffffcfff 	.word	0xffffcfff
 8012320:	40004800 	.word	0x40004800
 8012324:	fffff4ff 	.word	0xfffff4ff
 8012328:	40013800 	.word	0x40013800
 801232c:	40021000 	.word	0x40021000
 8012330:	40004400 	.word	0x40004400
 8012334:	40004c00 	.word	0x40004c00
 8012338:	40005000 	.word	0x40005000
 801233c:	003d0900 	.word	0x003d0900
 8012340:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	69da      	ldr	r2, [r3, #28]
 8012348:	2380      	movs	r3, #128	@ 0x80
 801234a:	021b      	lsls	r3, r3, #8
 801234c:	429a      	cmp	r2, r3
 801234e:	d000      	beq.n	8012352 <UART_SetConfig+0x37a>
 8012350:	e070      	b.n	8012434 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8012352:	231b      	movs	r3, #27
 8012354:	2218      	movs	r2, #24
 8012356:	189b      	adds	r3, r3, r2
 8012358:	19db      	adds	r3, r3, r7
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	2b08      	cmp	r3, #8
 801235e:	d822      	bhi.n	80123a6 <UART_SetConfig+0x3ce>
 8012360:	009a      	lsls	r2, r3, #2
 8012362:	4b67      	ldr	r3, [pc, #412]	@ (8012500 <UART_SetConfig+0x528>)
 8012364:	18d3      	adds	r3, r2, r3
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801236a:	f7fe f907 	bl	801057c <HAL_RCC_GetPCLK1Freq>
 801236e:	0003      	movs	r3, r0
 8012370:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012372:	e021      	b.n	80123b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012374:	f7fe f918 	bl	80105a8 <HAL_RCC_GetPCLK2Freq>
 8012378:	0003      	movs	r3, r0
 801237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801237c:	e01c      	b.n	80123b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801237e:	4b61      	ldr	r3, [pc, #388]	@ (8012504 <UART_SetConfig+0x52c>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2210      	movs	r2, #16
 8012384:	4013      	ands	r3, r2
 8012386:	d002      	beq.n	801238e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012388:	4b5f      	ldr	r3, [pc, #380]	@ (8012508 <UART_SetConfig+0x530>)
 801238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801238c:	e014      	b.n	80123b8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801238e:	4b5f      	ldr	r3, [pc, #380]	@ (801250c <UART_SetConfig+0x534>)
 8012390:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012392:	e011      	b.n	80123b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012394:	f7fe f842 	bl	801041c <HAL_RCC_GetSysClockFreq>
 8012398:	0003      	movs	r3, r0
 801239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801239c:	e00c      	b.n	80123b8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801239e:	2380      	movs	r3, #128	@ 0x80
 80123a0:	021b      	lsls	r3, r3, #8
 80123a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80123a4:	e008      	b.n	80123b8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80123a6:	2300      	movs	r3, #0
 80123a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80123aa:	231a      	movs	r3, #26
 80123ac:	2218      	movs	r2, #24
 80123ae:	189b      	adds	r3, r3, r2
 80123b0:	19db      	adds	r3, r3, r7
 80123b2:	2201      	movs	r2, #1
 80123b4:	701a      	strb	r2, [r3, #0]
        break;
 80123b6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80123b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d100      	bne.n	80123c0 <UART_SetConfig+0x3e8>
 80123be:	e090      	b.n	80124e2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80123c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123c2:	005a      	lsls	r2, r3, #1
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	085b      	lsrs	r3, r3, #1
 80123ca:	18d2      	adds	r2, r2, r3
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	0019      	movs	r1, r3
 80123d2:	0010      	movs	r0, r2
 80123d4:	f7ed feb4 	bl	8000140 <__udivsi3>
 80123d8:	0003      	movs	r3, r0
 80123da:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80123dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123de:	2b0f      	cmp	r3, #15
 80123e0:	d921      	bls.n	8012426 <UART_SetConfig+0x44e>
 80123e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123e4:	2380      	movs	r3, #128	@ 0x80
 80123e6:	025b      	lsls	r3, r3, #9
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d21c      	bcs.n	8012426 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80123ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	200e      	movs	r0, #14
 80123f2:	2418      	movs	r4, #24
 80123f4:	1903      	adds	r3, r0, r4
 80123f6:	19db      	adds	r3, r3, r7
 80123f8:	210f      	movs	r1, #15
 80123fa:	438a      	bics	r2, r1
 80123fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80123fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012400:	085b      	lsrs	r3, r3, #1
 8012402:	b29b      	uxth	r3, r3
 8012404:	2207      	movs	r2, #7
 8012406:	4013      	ands	r3, r2
 8012408:	b299      	uxth	r1, r3
 801240a:	1903      	adds	r3, r0, r4
 801240c:	19db      	adds	r3, r3, r7
 801240e:	1902      	adds	r2, r0, r4
 8012410:	19d2      	adds	r2, r2, r7
 8012412:	8812      	ldrh	r2, [r2, #0]
 8012414:	430a      	orrs	r2, r1
 8012416:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	1902      	adds	r2, r0, r4
 801241e:	19d2      	adds	r2, r2, r7
 8012420:	8812      	ldrh	r2, [r2, #0]
 8012422:	60da      	str	r2, [r3, #12]
 8012424:	e05d      	b.n	80124e2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8012426:	231a      	movs	r3, #26
 8012428:	2218      	movs	r2, #24
 801242a:	189b      	adds	r3, r3, r2
 801242c:	19db      	adds	r3, r3, r7
 801242e:	2201      	movs	r2, #1
 8012430:	701a      	strb	r2, [r3, #0]
 8012432:	e056      	b.n	80124e2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012434:	231b      	movs	r3, #27
 8012436:	2218      	movs	r2, #24
 8012438:	189b      	adds	r3, r3, r2
 801243a:	19db      	adds	r3, r3, r7
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	2b08      	cmp	r3, #8
 8012440:	d822      	bhi.n	8012488 <UART_SetConfig+0x4b0>
 8012442:	009a      	lsls	r2, r3, #2
 8012444:	4b32      	ldr	r3, [pc, #200]	@ (8012510 <UART_SetConfig+0x538>)
 8012446:	18d3      	adds	r3, r2, r3
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801244c:	f7fe f896 	bl	801057c <HAL_RCC_GetPCLK1Freq>
 8012450:	0003      	movs	r3, r0
 8012452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012454:	e021      	b.n	801249a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012456:	f7fe f8a7 	bl	80105a8 <HAL_RCC_GetPCLK2Freq>
 801245a:	0003      	movs	r3, r0
 801245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801245e:	e01c      	b.n	801249a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012460:	4b28      	ldr	r3, [pc, #160]	@ (8012504 <UART_SetConfig+0x52c>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2210      	movs	r2, #16
 8012466:	4013      	ands	r3, r2
 8012468:	d002      	beq.n	8012470 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801246a:	4b27      	ldr	r3, [pc, #156]	@ (8012508 <UART_SetConfig+0x530>)
 801246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801246e:	e014      	b.n	801249a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8012470:	4b26      	ldr	r3, [pc, #152]	@ (801250c <UART_SetConfig+0x534>)
 8012472:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012474:	e011      	b.n	801249a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012476:	f7fd ffd1 	bl	801041c <HAL_RCC_GetSysClockFreq>
 801247a:	0003      	movs	r3, r0
 801247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801247e:	e00c      	b.n	801249a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012480:	2380      	movs	r3, #128	@ 0x80
 8012482:	021b      	lsls	r3, r3, #8
 8012484:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012486:	e008      	b.n	801249a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8012488:	2300      	movs	r3, #0
 801248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801248c:	231a      	movs	r3, #26
 801248e:	2218      	movs	r2, #24
 8012490:	189b      	adds	r3, r3, r2
 8012492:	19db      	adds	r3, r3, r7
 8012494:	2201      	movs	r2, #1
 8012496:	701a      	strb	r2, [r3, #0]
        break;
 8012498:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801249a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801249c:	2b00      	cmp	r3, #0
 801249e:	d020      	beq.n	80124e2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	085a      	lsrs	r2, r3, #1
 80124a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124a8:	18d2      	adds	r2, r2, r3
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	0019      	movs	r1, r3
 80124b0:	0010      	movs	r0, r2
 80124b2:	f7ed fe45 	bl	8000140 <__udivsi3>
 80124b6:	0003      	movs	r3, r0
 80124b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80124ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124bc:	2b0f      	cmp	r3, #15
 80124be:	d90a      	bls.n	80124d6 <UART_SetConfig+0x4fe>
 80124c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80124c2:	2380      	movs	r3, #128	@ 0x80
 80124c4:	025b      	lsls	r3, r3, #9
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d205      	bcs.n	80124d6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80124ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	60da      	str	r2, [r3, #12]
 80124d4:	e005      	b.n	80124e2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80124d6:	231a      	movs	r3, #26
 80124d8:	2218      	movs	r2, #24
 80124da:	189b      	adds	r3, r3, r2
 80124dc:	19db      	adds	r3, r3, r7
 80124de:	2201      	movs	r2, #1
 80124e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80124e2:	69fb      	ldr	r3, [r7, #28]
 80124e4:	2200      	movs	r2, #0
 80124e6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	2200      	movs	r2, #0
 80124ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80124ee:	231a      	movs	r3, #26
 80124f0:	2218      	movs	r2, #24
 80124f2:	189b      	adds	r3, r3, r2
 80124f4:	19db      	adds	r3, r3, r7
 80124f6:	781b      	ldrb	r3, [r3, #0]
}
 80124f8:	0018      	movs	r0, r3
 80124fa:	46bd      	mov	sp, r7
 80124fc:	b00e      	add	sp, #56	@ 0x38
 80124fe:	bdb0      	pop	{r4, r5, r7, pc}
 8012500:	0801bcb4 	.word	0x0801bcb4
 8012504:	40021000 	.word	0x40021000
 8012508:	003d0900 	.word	0x003d0900
 801250c:	00f42400 	.word	0x00f42400
 8012510:	0801bcd8 	.word	0x0801bcd8

08012514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012520:	2201      	movs	r2, #1
 8012522:	4013      	ands	r3, r2
 8012524:	d00b      	beq.n	801253e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	4a4a      	ldr	r2, [pc, #296]	@ (8012658 <UART_AdvFeatureConfig+0x144>)
 801252e:	4013      	ands	r3, r2
 8012530:	0019      	movs	r1, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	430a      	orrs	r2, r1
 801253c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012542:	2202      	movs	r2, #2
 8012544:	4013      	ands	r3, r2
 8012546:	d00b      	beq.n	8012560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4a43      	ldr	r2, [pc, #268]	@ (801265c <UART_AdvFeatureConfig+0x148>)
 8012550:	4013      	ands	r3, r2
 8012552:	0019      	movs	r1, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	430a      	orrs	r2, r1
 801255e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012564:	2204      	movs	r2, #4
 8012566:	4013      	ands	r3, r2
 8012568:	d00b      	beq.n	8012582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	4a3b      	ldr	r2, [pc, #236]	@ (8012660 <UART_AdvFeatureConfig+0x14c>)
 8012572:	4013      	ands	r3, r2
 8012574:	0019      	movs	r1, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	430a      	orrs	r2, r1
 8012580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012586:	2208      	movs	r2, #8
 8012588:	4013      	ands	r3, r2
 801258a:	d00b      	beq.n	80125a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	4a34      	ldr	r2, [pc, #208]	@ (8012664 <UART_AdvFeatureConfig+0x150>)
 8012594:	4013      	ands	r3, r2
 8012596:	0019      	movs	r1, r3
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	430a      	orrs	r2, r1
 80125a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125a8:	2210      	movs	r2, #16
 80125aa:	4013      	ands	r3, r2
 80125ac:	d00b      	beq.n	80125c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	689b      	ldr	r3, [r3, #8]
 80125b4:	4a2c      	ldr	r2, [pc, #176]	@ (8012668 <UART_AdvFeatureConfig+0x154>)
 80125b6:	4013      	ands	r3, r2
 80125b8:	0019      	movs	r1, r3
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	430a      	orrs	r2, r1
 80125c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125ca:	2220      	movs	r2, #32
 80125cc:	4013      	ands	r3, r2
 80125ce:	d00b      	beq.n	80125e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	4a25      	ldr	r2, [pc, #148]	@ (801266c <UART_AdvFeatureConfig+0x158>)
 80125d8:	4013      	ands	r3, r2
 80125da:	0019      	movs	r1, r3
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	430a      	orrs	r2, r1
 80125e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125ec:	2240      	movs	r2, #64	@ 0x40
 80125ee:	4013      	ands	r3, r2
 80125f0:	d01d      	beq.n	801262e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	4a1d      	ldr	r2, [pc, #116]	@ (8012670 <UART_AdvFeatureConfig+0x15c>)
 80125fa:	4013      	ands	r3, r2
 80125fc:	0019      	movs	r1, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	430a      	orrs	r2, r1
 8012608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801260e:	2380      	movs	r3, #128	@ 0x80
 8012610:	035b      	lsls	r3, r3, #13
 8012612:	429a      	cmp	r2, r3
 8012614:	d10b      	bne.n	801262e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	4a15      	ldr	r2, [pc, #84]	@ (8012674 <UART_AdvFeatureConfig+0x160>)
 801261e:	4013      	ands	r3, r2
 8012620:	0019      	movs	r1, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	430a      	orrs	r2, r1
 801262c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012632:	2280      	movs	r2, #128	@ 0x80
 8012634:	4013      	ands	r3, r2
 8012636:	d00b      	beq.n	8012650 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	4a0e      	ldr	r2, [pc, #56]	@ (8012678 <UART_AdvFeatureConfig+0x164>)
 8012640:	4013      	ands	r3, r2
 8012642:	0019      	movs	r1, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	430a      	orrs	r2, r1
 801264e:	605a      	str	r2, [r3, #4]
  }
}
 8012650:	46c0      	nop			@ (mov r8, r8)
 8012652:	46bd      	mov	sp, r7
 8012654:	b002      	add	sp, #8
 8012656:	bd80      	pop	{r7, pc}
 8012658:	fffdffff 	.word	0xfffdffff
 801265c:	fffeffff 	.word	0xfffeffff
 8012660:	fffbffff 	.word	0xfffbffff
 8012664:	ffff7fff 	.word	0xffff7fff
 8012668:	ffffefff 	.word	0xffffefff
 801266c:	ffffdfff 	.word	0xffffdfff
 8012670:	ffefffff 	.word	0xffefffff
 8012674:	ff9fffff 	.word	0xff9fffff
 8012678:	fff7ffff 	.word	0xfff7ffff

0801267c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b092      	sub	sp, #72	@ 0x48
 8012680:	af02      	add	r7, sp, #8
 8012682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2284      	movs	r2, #132	@ 0x84
 8012688:	2100      	movs	r1, #0
 801268a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801268c:	f7f7 fc30 	bl	8009ef0 <HAL_GetTick>
 8012690:	0003      	movs	r3, r0
 8012692:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	2208      	movs	r2, #8
 801269c:	4013      	ands	r3, r2
 801269e:	2b08      	cmp	r3, #8
 80126a0:	d12c      	bne.n	80126fc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80126a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126a4:	2280      	movs	r2, #128	@ 0x80
 80126a6:	0391      	lsls	r1, r2, #14
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	4a46      	ldr	r2, [pc, #280]	@ (80127c4 <UART_CheckIdleState+0x148>)
 80126ac:	9200      	str	r2, [sp, #0]
 80126ae:	2200      	movs	r2, #0
 80126b0:	f000 f88c 	bl	80127cc <UART_WaitOnFlagUntilTimeout>
 80126b4:	1e03      	subs	r3, r0, #0
 80126b6:	d021      	beq.n	80126fc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126b8:	f3ef 8310 	mrs	r3, PRIMASK
 80126bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80126be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80126c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126c2:	2301      	movs	r3, #1
 80126c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126c8:	f383 8810 	msr	PRIMASK, r3
}
 80126cc:	46c0      	nop			@ (mov r8, r8)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2180      	movs	r1, #128	@ 0x80
 80126da:	438a      	bics	r2, r1
 80126dc:	601a      	str	r2, [r3, #0]
 80126de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e4:	f383 8810 	msr	PRIMASK, r3
}
 80126e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	2220      	movs	r2, #32
 80126ee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2278      	movs	r2, #120	@ 0x78
 80126f4:	2100      	movs	r1, #0
 80126f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80126f8:	2303      	movs	r3, #3
 80126fa:	e05f      	b.n	80127bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2204      	movs	r2, #4
 8012704:	4013      	ands	r3, r2
 8012706:	2b04      	cmp	r3, #4
 8012708:	d146      	bne.n	8012798 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801270a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801270c:	2280      	movs	r2, #128	@ 0x80
 801270e:	03d1      	lsls	r1, r2, #15
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	4a2c      	ldr	r2, [pc, #176]	@ (80127c4 <UART_CheckIdleState+0x148>)
 8012714:	9200      	str	r2, [sp, #0]
 8012716:	2200      	movs	r2, #0
 8012718:	f000 f858 	bl	80127cc <UART_WaitOnFlagUntilTimeout>
 801271c:	1e03      	subs	r3, r0, #0
 801271e:	d03b      	beq.n	8012798 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012720:	f3ef 8310 	mrs	r3, PRIMASK
 8012724:	60fb      	str	r3, [r7, #12]
  return(result);
 8012726:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012728:	637b      	str	r3, [r7, #52]	@ 0x34
 801272a:	2301      	movs	r3, #1
 801272c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	f383 8810 	msr	PRIMASK, r3
}
 8012734:	46c0      	nop			@ (mov r8, r8)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	4921      	ldr	r1, [pc, #132]	@ (80127c8 <UART_CheckIdleState+0x14c>)
 8012742:	400a      	ands	r2, r1
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	f383 8810 	msr	PRIMASK, r3
}
 8012750:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012752:	f3ef 8310 	mrs	r3, PRIMASK
 8012756:	61bb      	str	r3, [r7, #24]
  return(result);
 8012758:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801275a:	633b      	str	r3, [r7, #48]	@ 0x30
 801275c:	2301      	movs	r3, #1
 801275e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	f383 8810 	msr	PRIMASK, r3
}
 8012766:	46c0      	nop			@ (mov r8, r8)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	689a      	ldr	r2, [r3, #8]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2101      	movs	r1, #1
 8012774:	438a      	bics	r2, r1
 8012776:	609a      	str	r2, [r3, #8]
 8012778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801277c:	6a3b      	ldr	r3, [r7, #32]
 801277e:	f383 8810 	msr	PRIMASK, r3
}
 8012782:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2280      	movs	r2, #128	@ 0x80
 8012788:	2120      	movs	r1, #32
 801278a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2278      	movs	r2, #120	@ 0x78
 8012790:	2100      	movs	r1, #0
 8012792:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012794:	2303      	movs	r3, #3
 8012796:	e011      	b.n	80127bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2220      	movs	r2, #32
 801279c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2280      	movs	r2, #128	@ 0x80
 80127a2:	2120      	movs	r1, #32
 80127a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2200      	movs	r2, #0
 80127aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2278      	movs	r2, #120	@ 0x78
 80127b6:	2100      	movs	r1, #0
 80127b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80127ba:	2300      	movs	r3, #0
}
 80127bc:	0018      	movs	r0, r3
 80127be:	46bd      	mov	sp, r7
 80127c0:	b010      	add	sp, #64	@ 0x40
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	01ffffff 	.word	0x01ffffff
 80127c8:	fffffedf 	.word	0xfffffedf

080127cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	60b9      	str	r1, [r7, #8]
 80127d6:	603b      	str	r3, [r7, #0]
 80127d8:	1dfb      	adds	r3, r7, #7
 80127da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80127dc:	e04b      	b.n	8012876 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	3301      	adds	r3, #1
 80127e2:	d048      	beq.n	8012876 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127e4:	f7f7 fb84 	bl	8009ef0 <HAL_GetTick>
 80127e8:	0002      	movs	r2, r0
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	1ad3      	subs	r3, r2, r3
 80127ee:	69ba      	ldr	r2, [r7, #24]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d302      	bcc.n	80127fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d101      	bne.n	80127fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80127fa:	2303      	movs	r3, #3
 80127fc:	e04b      	b.n	8012896 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	2204      	movs	r2, #4
 8012806:	4013      	ands	r3, r2
 8012808:	d035      	beq.n	8012876 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	69db      	ldr	r3, [r3, #28]
 8012810:	2208      	movs	r2, #8
 8012812:	4013      	ands	r3, r2
 8012814:	2b08      	cmp	r3, #8
 8012816:	d111      	bne.n	801283c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	2208      	movs	r2, #8
 801281e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	0018      	movs	r0, r3
 8012824:	f000 f900 	bl	8012a28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2284      	movs	r2, #132	@ 0x84
 801282c:	2108      	movs	r1, #8
 801282e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2278      	movs	r2, #120	@ 0x78
 8012834:	2100      	movs	r1, #0
 8012836:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012838:	2301      	movs	r3, #1
 801283a:	e02c      	b.n	8012896 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	69da      	ldr	r2, [r3, #28]
 8012842:	2380      	movs	r3, #128	@ 0x80
 8012844:	011b      	lsls	r3, r3, #4
 8012846:	401a      	ands	r2, r3
 8012848:	2380      	movs	r3, #128	@ 0x80
 801284a:	011b      	lsls	r3, r3, #4
 801284c:	429a      	cmp	r2, r3
 801284e:	d112      	bne.n	8012876 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2280      	movs	r2, #128	@ 0x80
 8012856:	0112      	lsls	r2, r2, #4
 8012858:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	0018      	movs	r0, r3
 801285e:	f000 f8e3 	bl	8012a28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2284      	movs	r2, #132	@ 0x84
 8012866:	2120      	movs	r1, #32
 8012868:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2278      	movs	r2, #120	@ 0x78
 801286e:	2100      	movs	r1, #0
 8012870:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8012872:	2303      	movs	r3, #3
 8012874:	e00f      	b.n	8012896 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	69db      	ldr	r3, [r3, #28]
 801287c:	68ba      	ldr	r2, [r7, #8]
 801287e:	4013      	ands	r3, r2
 8012880:	68ba      	ldr	r2, [r7, #8]
 8012882:	1ad3      	subs	r3, r2, r3
 8012884:	425a      	negs	r2, r3
 8012886:	4153      	adcs	r3, r2
 8012888:	b2db      	uxtb	r3, r3
 801288a:	001a      	movs	r2, r3
 801288c:	1dfb      	adds	r3, r7, #7
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	429a      	cmp	r2, r3
 8012892:	d0a4      	beq.n	80127de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012894:	2300      	movs	r3, #0
}
 8012896:	0018      	movs	r0, r3
 8012898:	46bd      	mov	sp, r7
 801289a:	b004      	add	sp, #16
 801289c:	bd80      	pop	{r7, pc}
	...

080128a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b090      	sub	sp, #64	@ 0x40
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	60f8      	str	r0, [r7, #12]
 80128a8:	60b9      	str	r1, [r7, #8]
 80128aa:	1dbb      	adds	r3, r7, #6
 80128ac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	68ba      	ldr	r2, [r7, #8]
 80128b2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	1dba      	adds	r2, r7, #6
 80128b8:	2158      	movs	r1, #88	@ 0x58
 80128ba:	8812      	ldrh	r2, [r2, #0]
 80128bc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	2284      	movs	r2, #132	@ 0x84
 80128c2:	2100      	movs	r1, #0
 80128c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2280      	movs	r2, #128	@ 0x80
 80128ca:	2122      	movs	r1, #34	@ 0x22
 80128cc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d028      	beq.n	8012928 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128da:	4a3e      	ldr	r2, [pc, #248]	@ (80129d4 <UART_Start_Receive_DMA+0x134>)
 80128dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128e2:	4a3d      	ldr	r2, [pc, #244]	@ (80129d8 <UART_Start_Receive_DMA+0x138>)
 80128e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128ea:	4a3c      	ldr	r2, [pc, #240]	@ (80129dc <UART_Start_Receive_DMA+0x13c>)
 80128ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128f2:	2200      	movs	r2, #0
 80128f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	3324      	adds	r3, #36	@ 0x24
 8012900:	0019      	movs	r1, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012906:	001a      	movs	r2, r3
 8012908:	1dbb      	adds	r3, r7, #6
 801290a:	881b      	ldrh	r3, [r3, #0]
 801290c:	f7f8 f86e 	bl	800a9ec <HAL_DMA_Start_IT>
 8012910:	1e03      	subs	r3, r0, #0
 8012912:	d009      	beq.n	8012928 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2284      	movs	r2, #132	@ 0x84
 8012918:	2110      	movs	r1, #16
 801291a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2280      	movs	r2, #128	@ 0x80
 8012920:	2120      	movs	r1, #32
 8012922:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8012924:	2301      	movs	r3, #1
 8012926:	e050      	b.n	80129ca <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	691b      	ldr	r3, [r3, #16]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d019      	beq.n	8012964 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012930:	f3ef 8310 	mrs	r3, PRIMASK
 8012934:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8012936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801293a:	2301      	movs	r3, #1
 801293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012940:	f383 8810 	msr	PRIMASK, r3
}
 8012944:	46c0      	nop			@ (mov r8, r8)
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	681a      	ldr	r2, [r3, #0]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2180      	movs	r1, #128	@ 0x80
 8012952:	0049      	lsls	r1, r1, #1
 8012954:	430a      	orrs	r2, r1
 8012956:	601a      	str	r2, [r3, #0]
 8012958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801295a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801295e:	f383 8810 	msr	PRIMASK, r3
}
 8012962:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012964:	f3ef 8310 	mrs	r3, PRIMASK
 8012968:	613b      	str	r3, [r7, #16]
  return(result);
 801296a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801296c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801296e:	2301      	movs	r3, #1
 8012970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	f383 8810 	msr	PRIMASK, r3
}
 8012978:	46c0      	nop			@ (mov r8, r8)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	689a      	ldr	r2, [r3, #8]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2101      	movs	r1, #1
 8012986:	430a      	orrs	r2, r1
 8012988:	609a      	str	r2, [r3, #8]
 801298a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801298c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801298e:	69bb      	ldr	r3, [r7, #24]
 8012990:	f383 8810 	msr	PRIMASK, r3
}
 8012994:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012996:	f3ef 8310 	mrs	r3, PRIMASK
 801299a:	61fb      	str	r3, [r7, #28]
  return(result);
 801299c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801299e:	637b      	str	r3, [r7, #52]	@ 0x34
 80129a0:	2301      	movs	r3, #1
 80129a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129a4:	6a3b      	ldr	r3, [r7, #32]
 80129a6:	f383 8810 	msr	PRIMASK, r3
}
 80129aa:	46c0      	nop			@ (mov r8, r8)
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	689a      	ldr	r2, [r3, #8]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	2140      	movs	r1, #64	@ 0x40
 80129b8:	430a      	orrs	r2, r1
 80129ba:	609a      	str	r2, [r3, #8]
 80129bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c2:	f383 8810 	msr	PRIMASK, r3
}
 80129c6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	0018      	movs	r0, r3
 80129cc:	46bd      	mov	sp, r7
 80129ce:	b010      	add	sp, #64	@ 0x40
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	46c0      	nop			@ (mov r8, r8)
 80129d4:	08012bb1 	.word	0x08012bb1
 80129d8:	08012ce5 	.word	0x08012ce5
 80129dc:	08012d2d 	.word	0x08012d2d

080129e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129e8:	f3ef 8310 	mrs	r3, PRIMASK
 80129ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80129ee:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80129f0:	617b      	str	r3, [r7, #20]
 80129f2:	2301      	movs	r3, #1
 80129f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	f383 8810 	msr	PRIMASK, r3
}
 80129fc:	46c0      	nop			@ (mov r8, r8)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	21c0      	movs	r1, #192	@ 0xc0
 8012a0a:	438a      	bics	r2, r1
 8012a0c:	601a      	str	r2, [r3, #0]
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	f383 8810 	msr	PRIMASK, r3
}
 8012a18:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2220      	movs	r2, #32
 8012a1e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012a20:	46c0      	nop			@ (mov r8, r8)
 8012a22:	46bd      	mov	sp, r7
 8012a24:	b006      	add	sp, #24
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b08e      	sub	sp, #56	@ 0x38
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a30:	f3ef 8310 	mrs	r3, PRIMASK
 8012a34:	617b      	str	r3, [r7, #20]
  return(result);
 8012a36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	f383 8810 	msr	PRIMASK, r3
}
 8012a44:	46c0      	nop			@ (mov r8, r8)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4926      	ldr	r1, [pc, #152]	@ (8012aec <UART_EndRxTransfer+0xc4>)
 8012a52:	400a      	ands	r2, r1
 8012a54:	601a      	str	r2, [r3, #0]
 8012a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	f383 8810 	msr	PRIMASK, r3
}
 8012a60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a62:	f3ef 8310 	mrs	r3, PRIMASK
 8012a66:	623b      	str	r3, [r7, #32]
  return(result);
 8012a68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a72:	f383 8810 	msr	PRIMASK, r3
}
 8012a76:	46c0      	nop			@ (mov r8, r8)
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	689a      	ldr	r2, [r3, #8]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2101      	movs	r1, #1
 8012a84:	438a      	bics	r2, r1
 8012a86:	609a      	str	r2, [r3, #8]
 8012a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a8e:	f383 8810 	msr	PRIMASK, r3
}
 8012a92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d118      	bne.n	8012ace <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8012aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012aa2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f383 8810 	msr	PRIMASK, r3
}
 8012ab0:	46c0      	nop			@ (mov r8, r8)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	2110      	movs	r1, #16
 8012abe:	438a      	bics	r2, r1
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	f383 8810 	msr	PRIMASK, r3
}
 8012acc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2280      	movs	r2, #128	@ 0x80
 8012ad2:	2120      	movs	r1, #32
 8012ad4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012ae2:	46c0      	nop			@ (mov r8, r8)
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	b00e      	add	sp, #56	@ 0x38
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	46c0      	nop			@ (mov r8, r8)
 8012aec:	fffffedf 	.word	0xfffffedf

08012af0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08c      	sub	sp, #48	@ 0x30
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012afc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2220      	movs	r2, #32
 8012b06:	4013      	ands	r3, r2
 8012b08:	d135      	bne.n	8012b76 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8012b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b0c:	2252      	movs	r2, #82	@ 0x52
 8012b0e:	2100      	movs	r1, #0
 8012b10:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b12:	f3ef 8310 	mrs	r3, PRIMASK
 8012b16:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b18:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	f383 8810 	msr	PRIMASK, r3
}
 8012b26:	46c0      	nop			@ (mov r8, r8)
 8012b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	689a      	ldr	r2, [r3, #8]
 8012b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2180      	movs	r1, #128	@ 0x80
 8012b34:	438a      	bics	r2, r1
 8012b36:	609a      	str	r2, [r3, #8]
 8012b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	f383 8810 	msr	PRIMASK, r3
}
 8012b42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b44:	f3ef 8310 	mrs	r3, PRIMASK
 8012b48:	61bb      	str	r3, [r7, #24]
  return(result);
 8012b4a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b4e:	2301      	movs	r3, #1
 8012b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b52:	69fb      	ldr	r3, [r7, #28]
 8012b54:	f383 8810 	msr	PRIMASK, r3
}
 8012b58:	46c0      	nop			@ (mov r8, r8)
 8012b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2140      	movs	r1, #64	@ 0x40
 8012b66:	430a      	orrs	r2, r1
 8012b68:	601a      	str	r2, [r3, #0]
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b6e:	6a3b      	ldr	r3, [r7, #32]
 8012b70:	f383 8810 	msr	PRIMASK, r3
}
 8012b74:	e006      	b.n	8012b84 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8012b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b78:	228c      	movs	r2, #140	@ 0x8c
 8012b7a:	589b      	ldr	r3, [r3, r2]
 8012b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b7e:	0010      	movs	r0, r2
 8012b80:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012b82:	46c0      	nop			@ (mov r8, r8)
 8012b84:	46c0      	nop			@ (mov r8, r8)
 8012b86:	46bd      	mov	sp, r7
 8012b88:	b00c      	add	sp, #48	@ 0x30
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b084      	sub	sp, #16
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b98:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2288      	movs	r2, #136	@ 0x88
 8012b9e:	589b      	ldr	r3, [r3, r2]
 8012ba0:	68fa      	ldr	r2, [r7, #12]
 8012ba2:	0010      	movs	r0, r2
 8012ba4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ba6:	46c0      	nop			@ (mov r8, r8)
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	b004      	add	sp, #16
 8012bac:	bd80      	pop	{r7, pc}
	...

08012bb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b094      	sub	sp, #80	@ 0x50
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2220      	movs	r2, #32
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	d16f      	bne.n	8012caa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8012bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bcc:	225a      	movs	r2, #90	@ 0x5a
 8012bce:	2100      	movs	r1, #0
 8012bd0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8012bd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8012bd8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012bdc:	2301      	movs	r3, #1
 8012bde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	f383 8810 	msr	PRIMASK, r3
}
 8012be6:	46c0      	nop			@ (mov r8, r8)
 8012be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	681a      	ldr	r2, [r3, #0]
 8012bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	493b      	ldr	r1, [pc, #236]	@ (8012ce0 <UART_DMAReceiveCplt+0x130>)
 8012bf4:	400a      	ands	r2, r1
 8012bf6:	601a      	str	r2, [r3, #0]
 8012bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012bfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bfc:	6a3b      	ldr	r3, [r7, #32]
 8012bfe:	f383 8810 	msr	PRIMASK, r3
}
 8012c02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c04:	f3ef 8310 	mrs	r3, PRIMASK
 8012c08:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012c0e:	2301      	movs	r3, #1
 8012c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c14:	f383 8810 	msr	PRIMASK, r3
}
 8012c18:	46c0      	nop			@ (mov r8, r8)
 8012c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	689a      	ldr	r2, [r3, #8]
 8012c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2101      	movs	r1, #1
 8012c26:	438a      	bics	r2, r1
 8012c28:	609a      	str	r2, [r3, #8]
 8012c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c30:	f383 8810 	msr	PRIMASK, r3
}
 8012c34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c36:	f3ef 8310 	mrs	r3, PRIMASK
 8012c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012c3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012c40:	2301      	movs	r3, #1
 8012c42:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c46:	f383 8810 	msr	PRIMASK, r3
}
 8012c4a:	46c0      	nop			@ (mov r8, r8)
 8012c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	689a      	ldr	r2, [r3, #8]
 8012c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2140      	movs	r1, #64	@ 0x40
 8012c58:	438a      	bics	r2, r1
 8012c5a:	609a      	str	r2, [r3, #8]
 8012c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c62:	f383 8810 	msr	PRIMASK, r3
}
 8012c66:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c6a:	2280      	movs	r2, #128	@ 0x80
 8012c6c:	2120      	movs	r1, #32
 8012c6e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d118      	bne.n	8012caa <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c78:	f3ef 8310 	mrs	r3, PRIMASK
 8012c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c7e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c82:	2301      	movs	r3, #1
 8012c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	f383 8810 	msr	PRIMASK, r3
}
 8012c8c:	46c0      	nop			@ (mov r8, r8)
 8012c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2110      	movs	r1, #16
 8012c9a:	438a      	bics	r2, r1
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	f383 8810 	msr	PRIMASK, r3
}
 8012ca8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cac:	2200      	movs	r2, #0
 8012cae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d109      	bne.n	8012ccc <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8012cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cba:	22ac      	movs	r2, #172	@ 0xac
 8012cbc:	589b      	ldr	r3, [r3, r2]
 8012cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012cc0:	2158      	movs	r1, #88	@ 0x58
 8012cc2:	5a51      	ldrh	r1, [r2, r1]
 8012cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012cc6:	0010      	movs	r0, r2
 8012cc8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012cca:	e005      	b.n	8012cd8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8012ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cce:	2294      	movs	r2, #148	@ 0x94
 8012cd0:	589b      	ldr	r3, [r3, r2]
 8012cd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012cd4:	0010      	movs	r0, r2
 8012cd6:	4798      	blx	r3
}
 8012cd8:	46c0      	nop			@ (mov r8, r8)
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	b014      	add	sp, #80	@ 0x50
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	fffffeff 	.word	0xfffffeff

08012ce4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012cf0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	d10b      	bne.n	8012d18 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	22ac      	movs	r2, #172	@ 0xac
 8012d04:	589b      	ldr	r3, [r3, r2]
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	2158      	movs	r1, #88	@ 0x58
 8012d0a:	5a52      	ldrh	r2, [r2, r1]
 8012d0c:	0852      	lsrs	r2, r2, #1
 8012d0e:	b291      	uxth	r1, r2
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	0010      	movs	r0, r2
 8012d14:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012d16:	e005      	b.n	8012d24 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2290      	movs	r2, #144	@ 0x90
 8012d1c:	589b      	ldr	r3, [r3, r2]
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	0010      	movs	r0, r2
 8012d22:	4798      	blx	r3
}
 8012d24:	46c0      	nop			@ (mov r8, r8)
 8012d26:	46bd      	mov	sp, r7
 8012d28:	b004      	add	sp, #16
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b086      	sub	sp, #24
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012d3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2280      	movs	r2, #128	@ 0x80
 8012d44:	589b      	ldr	r3, [r3, r2]
 8012d46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	689b      	ldr	r3, [r3, #8]
 8012d4e:	2280      	movs	r2, #128	@ 0x80
 8012d50:	4013      	ands	r3, r2
 8012d52:	2b80      	cmp	r3, #128	@ 0x80
 8012d54:	d10a      	bne.n	8012d6c <UART_DMAError+0x40>
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	2b21      	cmp	r3, #33	@ 0x21
 8012d5a:	d107      	bne.n	8012d6c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012d5c:	697b      	ldr	r3, [r7, #20]
 8012d5e:	2252      	movs	r2, #82	@ 0x52
 8012d60:	2100      	movs	r1, #0
 8012d62:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	0018      	movs	r0, r3
 8012d68:	f7ff fe3a 	bl	80129e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	689b      	ldr	r3, [r3, #8]
 8012d72:	2240      	movs	r2, #64	@ 0x40
 8012d74:	4013      	ands	r3, r2
 8012d76:	2b40      	cmp	r3, #64	@ 0x40
 8012d78:	d10a      	bne.n	8012d90 <UART_DMAError+0x64>
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b22      	cmp	r3, #34	@ 0x22
 8012d7e:	d107      	bne.n	8012d90 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	225a      	movs	r2, #90	@ 0x5a
 8012d84:	2100      	movs	r1, #0
 8012d86:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	0018      	movs	r0, r3
 8012d8c:	f7ff fe4c 	bl	8012a28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	2284      	movs	r2, #132	@ 0x84
 8012d94:	589b      	ldr	r3, [r3, r2]
 8012d96:	2210      	movs	r2, #16
 8012d98:	431a      	orrs	r2, r3
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	2184      	movs	r1, #132	@ 0x84
 8012d9e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	2298      	movs	r2, #152	@ 0x98
 8012da4:	589b      	ldr	r3, [r3, r2]
 8012da6:	697a      	ldr	r2, [r7, #20]
 8012da8:	0010      	movs	r0, r2
 8012daa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012dac:	46c0      	nop			@ (mov r8, r8)
 8012dae:	46bd      	mov	sp, r7
 8012db0:	b006      	add	sp, #24
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	225a      	movs	r2, #90	@ 0x5a
 8012dc6:	2100      	movs	r1, #0
 8012dc8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2252      	movs	r2, #82	@ 0x52
 8012dce:	2100      	movs	r1, #0
 8012dd0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2298      	movs	r2, #152	@ 0x98
 8012dd6:	589b      	ldr	r3, [r3, r2]
 8012dd8:	68fa      	ldr	r2, [r7, #12]
 8012dda:	0010      	movs	r0, r2
 8012ddc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012dde:	46c0      	nop			@ (mov r8, r8)
 8012de0:	46bd      	mov	sp, r7
 8012de2:	b004      	add	sp, #16
 8012de4:	bd80      	pop	{r7, pc}

08012de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012de6:	b580      	push	{r7, lr}
 8012de8:	b086      	sub	sp, #24
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dee:	f3ef 8310 	mrs	r3, PRIMASK
 8012df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8012df4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012df6:	617b      	str	r3, [r7, #20]
 8012df8:	2301      	movs	r3, #1
 8012dfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f383 8810 	msr	PRIMASK, r3
}
 8012e02:	46c0      	nop			@ (mov r8, r8)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2140      	movs	r1, #64	@ 0x40
 8012e10:	438a      	bics	r2, r1
 8012e12:	601a      	str	r2, [r3, #0]
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	f383 8810 	msr	PRIMASK, r3
}
 8012e1e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2220      	movs	r2, #32
 8012e24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	228c      	movs	r2, #140	@ 0x8c
 8012e30:	589b      	ldr	r3, [r3, r2]
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	0010      	movs	r0, r2
 8012e36:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012e38:	46c0      	nop			@ (mov r8, r8)
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	b006      	add	sp, #24
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012e48:	46c0      	nop			@ (mov r8, r8)
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	b002      	add	sp, #8
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2244      	movs	r2, #68	@ 0x44
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012e60:	4b05      	ldr	r3, [pc, #20]	@ (8012e78 <USB_EnableGlobalInt+0x28>)
 8012e62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	b299      	uxth	r1, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2240      	movs	r2, #64	@ 0x40
 8012e6c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012e6e:	2300      	movs	r3, #0
}
 8012e70:	0018      	movs	r0, r3
 8012e72:	46bd      	mov	sp, r7
 8012e74:	b004      	add	sp, #16
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	0000bf80 	.word	0x0000bf80

08012e7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012e84:	4b09      	ldr	r3, [pc, #36]	@ (8012eac <USB_DisableGlobalInt+0x30>)
 8012e86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2240      	movs	r2, #64	@ 0x40
 8012e8c:	5a9b      	ldrh	r3, [r3, r2]
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	68fa      	ldr	r2, [r7, #12]
 8012e92:	b292      	uxth	r2, r2
 8012e94:	43d2      	mvns	r2, r2
 8012e96:	b292      	uxth	r2, r2
 8012e98:	4013      	ands	r3, r2
 8012e9a:	b299      	uxth	r1, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2240      	movs	r2, #64	@ 0x40
 8012ea0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012ea2:	2300      	movs	r3, #0
}
 8012ea4:	0018      	movs	r0, r3
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	b004      	add	sp, #16
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	0000bf80 	.word	0x0000bf80

08012eb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012eb0:	b084      	sub	sp, #16
 8012eb2:	b590      	push	{r4, r7, lr}
 8012eb4:	b083      	sub	sp, #12
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
 8012eba:	2004      	movs	r0, #4
 8012ebc:	2410      	movs	r4, #16
 8012ebe:	1900      	adds	r0, r0, r4
 8012ec0:	2408      	movs	r4, #8
 8012ec2:	46a4      	mov	ip, r4
 8012ec4:	44bc      	add	ip, r7
 8012ec6:	4460      	add	r0, ip
 8012ec8:	6001      	str	r1, [r0, #0]
 8012eca:	6042      	str	r2, [r0, #4]
 8012ecc:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2240      	movs	r2, #64	@ 0x40
 8012ed2:	2101      	movs	r1, #1
 8012ed4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2240      	movs	r2, #64	@ 0x40
 8012eda:	2100      	movs	r1, #0
 8012edc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2244      	movs	r2, #68	@ 0x44
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2250      	movs	r2, #80	@ 0x50
 8012eea:	2100      	movs	r1, #0
 8012eec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012eee:	2300      	movs	r3, #0
}
 8012ef0:	0018      	movs	r0, r3
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	b003      	add	sp, #12
 8012ef6:	bc90      	pop	{r4, r7}
 8012ef8:	bc08      	pop	{r3}
 8012efa:	b004      	add	sp, #16
 8012efc:	4718      	bx	r3
	...

08012f00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b09c      	sub	sp, #112	@ 0x70
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012f0a:	236f      	movs	r3, #111	@ 0x6f
 8012f0c:	18fb      	adds	r3, r7, r3
 8012f0e:	2200      	movs	r2, #0
 8012f10:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	18d3      	adds	r3, r2, r3
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	236c      	movs	r3, #108	@ 0x6c
 8012f22:	18fb      	adds	r3, r7, r3
 8012f24:	49a3      	ldr	r1, [pc, #652]	@ (80131b4 <USB_ActivateEndpoint+0x2b4>)
 8012f26:	400a      	ands	r2, r1
 8012f28:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	78db      	ldrb	r3, [r3, #3]
 8012f2e:	2b03      	cmp	r3, #3
 8012f30:	d017      	beq.n	8012f62 <USB_ActivateEndpoint+0x62>
 8012f32:	dc28      	bgt.n	8012f86 <USB_ActivateEndpoint+0x86>
 8012f34:	2b02      	cmp	r3, #2
 8012f36:	d00e      	beq.n	8012f56 <USB_ActivateEndpoint+0x56>
 8012f38:	dc25      	bgt.n	8012f86 <USB_ActivateEndpoint+0x86>
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d002      	beq.n	8012f44 <USB_ActivateEndpoint+0x44>
 8012f3e:	2b01      	cmp	r3, #1
 8012f40:	d018      	beq.n	8012f74 <USB_ActivateEndpoint+0x74>
 8012f42:	e020      	b.n	8012f86 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012f44:	226c      	movs	r2, #108	@ 0x6c
 8012f46:	18bb      	adds	r3, r7, r2
 8012f48:	18ba      	adds	r2, r7, r2
 8012f4a:	8812      	ldrh	r2, [r2, #0]
 8012f4c:	2180      	movs	r1, #128	@ 0x80
 8012f4e:	0089      	lsls	r1, r1, #2
 8012f50:	430a      	orrs	r2, r1
 8012f52:	801a      	strh	r2, [r3, #0]
      break;
 8012f54:	e01c      	b.n	8012f90 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8012f56:	226c      	movs	r2, #108	@ 0x6c
 8012f58:	18bb      	adds	r3, r7, r2
 8012f5a:	18ba      	adds	r2, r7, r2
 8012f5c:	8812      	ldrh	r2, [r2, #0]
 8012f5e:	801a      	strh	r2, [r3, #0]
      break;
 8012f60:	e016      	b.n	8012f90 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012f62:	226c      	movs	r2, #108	@ 0x6c
 8012f64:	18bb      	adds	r3, r7, r2
 8012f66:	18ba      	adds	r2, r7, r2
 8012f68:	8812      	ldrh	r2, [r2, #0]
 8012f6a:	21c0      	movs	r1, #192	@ 0xc0
 8012f6c:	00c9      	lsls	r1, r1, #3
 8012f6e:	430a      	orrs	r2, r1
 8012f70:	801a      	strh	r2, [r3, #0]
      break;
 8012f72:	e00d      	b.n	8012f90 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012f74:	226c      	movs	r2, #108	@ 0x6c
 8012f76:	18bb      	adds	r3, r7, r2
 8012f78:	18ba      	adds	r2, r7, r2
 8012f7a:	8812      	ldrh	r2, [r2, #0]
 8012f7c:	2180      	movs	r1, #128	@ 0x80
 8012f7e:	00c9      	lsls	r1, r1, #3
 8012f80:	430a      	orrs	r2, r1
 8012f82:	801a      	strh	r2, [r3, #0]
      break;
 8012f84:	e004      	b.n	8012f90 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8012f86:	236f      	movs	r3, #111	@ 0x6f
 8012f88:	18fb      	adds	r3, r7, r3
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	701a      	strb	r2, [r3, #0]
      break;
 8012f8e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	18d3      	adds	r3, r2, r3
 8012f9a:	226c      	movs	r2, #108	@ 0x6c
 8012f9c:	18ba      	adds	r2, r7, r2
 8012f9e:	8812      	ldrh	r2, [r2, #0]
 8012fa0:	4985      	ldr	r1, [pc, #532]	@ (80131b8 <USB_ActivateEndpoint+0x2b8>)
 8012fa2:	430a      	orrs	r2, r1
 8012fa4:	b292      	uxth	r2, r2
 8012fa6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	18d3      	adds	r3, r2, r3
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	b21b      	sxth	r3, r3
 8012fb8:	4a80      	ldr	r2, [pc, #512]	@ (80131bc <USB_ActivateEndpoint+0x2bc>)
 8012fba:	4013      	ands	r3, r2
 8012fbc:	b21a      	sxth	r2, r3
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	b21b      	sxth	r3, r3
 8012fc4:	4313      	orrs	r3, r2
 8012fc6:	b21a      	sxth	r2, r3
 8012fc8:	2166      	movs	r1, #102	@ 0x66
 8012fca:	187b      	adds	r3, r7, r1
 8012fcc:	801a      	strh	r2, [r3, #0]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	18d3      	adds	r3, r2, r3
 8012fd8:	187a      	adds	r2, r7, r1
 8012fda:	8812      	ldrh	r2, [r2, #0]
 8012fdc:	4976      	ldr	r1, [pc, #472]	@ (80131b8 <USB_ActivateEndpoint+0x2b8>)
 8012fde:	430a      	orrs	r2, r1
 8012fe0:	b292      	uxth	r2, r2
 8012fe2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	7b1b      	ldrb	r3, [r3, #12]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d000      	beq.n	8012fee <USB_ActivateEndpoint+0xee>
 8012fec:	e178      	b.n	80132e0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	785b      	ldrb	r3, [r3, #1]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d100      	bne.n	8012ff8 <USB_ActivateEndpoint+0xf8>
 8012ff6:	e07a      	b.n	80130ee <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	61bb      	str	r3, [r7, #24]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2250      	movs	r2, #80	@ 0x50
 8013000:	5a9b      	ldrh	r3, [r3, r2]
 8013002:	b29b      	uxth	r3, r3
 8013004:	001a      	movs	r2, r3
 8013006:	69bb      	ldr	r3, [r7, #24]
 8013008:	189b      	adds	r3, r3, r2
 801300a:	61bb      	str	r3, [r7, #24]
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	00da      	lsls	r2, r3, #3
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	18d3      	adds	r3, r2, r3
 8013016:	2280      	movs	r2, #128	@ 0x80
 8013018:	00d2      	lsls	r2, r2, #3
 801301a:	4694      	mov	ip, r2
 801301c:	4463      	add	r3, ip
 801301e:	617b      	str	r3, [r7, #20]
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	88db      	ldrh	r3, [r3, #6]
 8013024:	085b      	lsrs	r3, r3, #1
 8013026:	b29b      	uxth	r3, r3
 8013028:	18db      	adds	r3, r3, r3
 801302a:	b29a      	uxth	r2, r3
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	009b      	lsls	r3, r3, #2
 8013038:	18d2      	adds	r2, r2, r3
 801303a:	2112      	movs	r1, #18
 801303c:	187b      	adds	r3, r7, r1
 801303e:	8812      	ldrh	r2, [r2, #0]
 8013040:	801a      	strh	r2, [r3, #0]
 8013042:	187b      	adds	r3, r7, r1
 8013044:	881b      	ldrh	r3, [r3, #0]
 8013046:	2240      	movs	r2, #64	@ 0x40
 8013048:	4013      	ands	r3, r2
 801304a:	d016      	beq.n	801307a <USB_ActivateEndpoint+0x17a>
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	009b      	lsls	r3, r3, #2
 8013054:	18d3      	adds	r3, r2, r3
 8013056:	881b      	ldrh	r3, [r3, #0]
 8013058:	b29a      	uxth	r2, r3
 801305a:	2010      	movs	r0, #16
 801305c:	183b      	adds	r3, r7, r0
 801305e:	4957      	ldr	r1, [pc, #348]	@ (80131bc <USB_ActivateEndpoint+0x2bc>)
 8013060:	400a      	ands	r2, r1
 8013062:	801a      	strh	r2, [r3, #0]
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	009b      	lsls	r3, r3, #2
 801306c:	18d3      	adds	r3, r2, r3
 801306e:	183a      	adds	r2, r7, r0
 8013070:	8812      	ldrh	r2, [r2, #0]
 8013072:	4953      	ldr	r1, [pc, #332]	@ (80131c0 <USB_ActivateEndpoint+0x2c0>)
 8013074:	430a      	orrs	r2, r1
 8013076:	b292      	uxth	r2, r2
 8013078:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	78db      	ldrb	r3, [r3, #3]
 801307e:	2b01      	cmp	r3, #1
 8013080:	d01d      	beq.n	80130be <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	18d3      	adds	r3, r2, r3
 801308c:	881b      	ldrh	r3, [r3, #0]
 801308e:	b29a      	uxth	r2, r3
 8013090:	200c      	movs	r0, #12
 8013092:	183b      	adds	r3, r7, r0
 8013094:	494b      	ldr	r1, [pc, #300]	@ (80131c4 <USB_ActivateEndpoint+0x2c4>)
 8013096:	400a      	ands	r2, r1
 8013098:	801a      	strh	r2, [r3, #0]
 801309a:	183b      	adds	r3, r7, r0
 801309c:	183a      	adds	r2, r7, r0
 801309e:	8812      	ldrh	r2, [r2, #0]
 80130a0:	2120      	movs	r1, #32
 80130a2:	404a      	eors	r2, r1
 80130a4:	801a      	strh	r2, [r3, #0]
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	18d3      	adds	r3, r2, r3
 80130b0:	183a      	adds	r2, r7, r0
 80130b2:	8812      	ldrh	r2, [r2, #0]
 80130b4:	4940      	ldr	r1, [pc, #256]	@ (80131b8 <USB_ActivateEndpoint+0x2b8>)
 80130b6:	430a      	orrs	r2, r1
 80130b8:	b292      	uxth	r2, r2
 80130ba:	801a      	strh	r2, [r3, #0]
 80130bc:	e2b4      	b.n	8013628 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	18d3      	adds	r3, r2, r3
 80130c8:	881b      	ldrh	r3, [r3, #0]
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	200e      	movs	r0, #14
 80130ce:	183b      	adds	r3, r7, r0
 80130d0:	493c      	ldr	r1, [pc, #240]	@ (80131c4 <USB_ActivateEndpoint+0x2c4>)
 80130d2:	400a      	ands	r2, r1
 80130d4:	801a      	strh	r2, [r3, #0]
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	009b      	lsls	r3, r3, #2
 80130de:	18d3      	adds	r3, r2, r3
 80130e0:	183a      	adds	r2, r7, r0
 80130e2:	8812      	ldrh	r2, [r2, #0]
 80130e4:	4934      	ldr	r1, [pc, #208]	@ (80131b8 <USB_ActivateEndpoint+0x2b8>)
 80130e6:	430a      	orrs	r2, r1
 80130e8:	b292      	uxth	r2, r2
 80130ea:	801a      	strh	r2, [r3, #0]
 80130ec:	e29c      	b.n	8013628 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2250      	movs	r2, #80	@ 0x50
 80130f6:	5a9b      	ldrh	r3, [r3, r2]
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	001a      	movs	r2, r3
 80130fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130fe:	189b      	adds	r3, r3, r2
 8013100:	633b      	str	r3, [r7, #48]	@ 0x30
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	00da      	lsls	r2, r3, #3
 8013108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801310a:	18d3      	adds	r3, r2, r3
 801310c:	4a2e      	ldr	r2, [pc, #184]	@ (80131c8 <USB_ActivateEndpoint+0x2c8>)
 801310e:	4694      	mov	ip, r2
 8013110:	4463      	add	r3, ip
 8013112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	88db      	ldrh	r3, [r3, #6]
 8013118:	085b      	lsrs	r3, r3, #1
 801311a:	b29b      	uxth	r3, r3
 801311c:	18db      	adds	r3, r3, r3
 801311e:	b29a      	uxth	r2, r3
 8013120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013122:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2250      	movs	r2, #80	@ 0x50
 801312c:	5a9b      	ldrh	r3, [r3, r2]
 801312e:	b29b      	uxth	r3, r3
 8013130:	001a      	movs	r2, r3
 8013132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013134:	189b      	adds	r3, r3, r2
 8013136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	00da      	lsls	r2, r3, #3
 801313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013140:	18d3      	adds	r3, r2, r3
 8013142:	4a22      	ldr	r2, [pc, #136]	@ (80131cc <USB_ActivateEndpoint+0x2cc>)
 8013144:	4694      	mov	ip, r2
 8013146:	4463      	add	r3, ip
 8013148:	627b      	str	r3, [r7, #36]	@ 0x24
 801314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801314c:	881b      	ldrh	r3, [r3, #0]
 801314e:	b29b      	uxth	r3, r3
 8013150:	059b      	lsls	r3, r3, #22
 8013152:	0d9b      	lsrs	r3, r3, #22
 8013154:	b29a      	uxth	r2, r3
 8013156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013158:	801a      	strh	r2, [r3, #0]
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013160:	d91a      	bls.n	8013198 <USB_ActivateEndpoint+0x298>
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	691b      	ldr	r3, [r3, #16]
 8013166:	095b      	lsrs	r3, r3, #5
 8013168:	66bb      	str	r3, [r7, #104]	@ 0x68
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	691b      	ldr	r3, [r3, #16]
 801316e:	221f      	movs	r2, #31
 8013170:	4013      	ands	r3, r2
 8013172:	d102      	bne.n	801317a <USB_ActivateEndpoint+0x27a>
 8013174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013176:	3b01      	subs	r3, #1
 8013178:	66bb      	str	r3, [r7, #104]	@ 0x68
 801317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	b29a      	uxth	r2, r3
 8013180:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013182:	b29b      	uxth	r3, r3
 8013184:	029b      	lsls	r3, r3, #10
 8013186:	b29b      	uxth	r3, r3
 8013188:	4313      	orrs	r3, r2
 801318a:	b29b      	uxth	r3, r3
 801318c:	4a10      	ldr	r2, [pc, #64]	@ (80131d0 <USB_ActivateEndpoint+0x2d0>)
 801318e:	4313      	orrs	r3, r2
 8013190:	b29a      	uxth	r2, r3
 8013192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013194:	801a      	strh	r2, [r3, #0]
 8013196:	e034      	b.n	8013202 <USB_ActivateEndpoint+0x302>
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	691b      	ldr	r3, [r3, #16]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d119      	bne.n	80131d4 <USB_ActivateEndpoint+0x2d4>
 80131a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a2:	881b      	ldrh	r3, [r3, #0]
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	4a0a      	ldr	r2, [pc, #40]	@ (80131d0 <USB_ActivateEndpoint+0x2d0>)
 80131a8:	4313      	orrs	r3, r2
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ae:	801a      	strh	r2, [r3, #0]
 80131b0:	e027      	b.n	8013202 <USB_ActivateEndpoint+0x302>
 80131b2:	46c0      	nop			@ (mov r8, r8)
 80131b4:	ffff898f 	.word	0xffff898f
 80131b8:	ffff8080 	.word	0xffff8080
 80131bc:	ffff8f8f 	.word	0xffff8f8f
 80131c0:	ffff80c0 	.word	0xffff80c0
 80131c4:	ffff8fbf 	.word	0xffff8fbf
 80131c8:	00000404 	.word	0x00000404
 80131cc:	00000406 	.word	0x00000406
 80131d0:	ffff8000 	.word	0xffff8000
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	691b      	ldr	r3, [r3, #16]
 80131d8:	085b      	lsrs	r3, r3, #1
 80131da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	691b      	ldr	r3, [r3, #16]
 80131e0:	2201      	movs	r2, #1
 80131e2:	4013      	ands	r3, r2
 80131e4:	d002      	beq.n	80131ec <USB_ActivateEndpoint+0x2ec>
 80131e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80131e8:	3301      	adds	r3, #1
 80131ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80131ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ee:	881b      	ldrh	r3, [r3, #0]
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	029b      	lsls	r3, r3, #10
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	4313      	orrs	r3, r2
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013200:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	18d2      	adds	r2, r2, r3
 801320c:	2122      	movs	r1, #34	@ 0x22
 801320e:	187b      	adds	r3, r7, r1
 8013210:	8812      	ldrh	r2, [r2, #0]
 8013212:	801a      	strh	r2, [r3, #0]
 8013214:	187b      	adds	r3, r7, r1
 8013216:	881a      	ldrh	r2, [r3, #0]
 8013218:	2380      	movs	r3, #128	@ 0x80
 801321a:	01db      	lsls	r3, r3, #7
 801321c:	4013      	ands	r3, r2
 801321e:	d016      	beq.n	801324e <USB_ActivateEndpoint+0x34e>
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	009b      	lsls	r3, r3, #2
 8013228:	18d3      	adds	r3, r2, r3
 801322a:	881b      	ldrh	r3, [r3, #0]
 801322c:	b29a      	uxth	r2, r3
 801322e:	2020      	movs	r0, #32
 8013230:	183b      	adds	r3, r7, r0
 8013232:	49dd      	ldr	r1, [pc, #884]	@ (80135a8 <USB_ActivateEndpoint+0x6a8>)
 8013234:	400a      	ands	r2, r1
 8013236:	801a      	strh	r2, [r3, #0]
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	18d3      	adds	r3, r2, r3
 8013242:	183a      	adds	r2, r7, r0
 8013244:	8812      	ldrh	r2, [r2, #0]
 8013246:	49d9      	ldr	r1, [pc, #868]	@ (80135ac <USB_ActivateEndpoint+0x6ac>)
 8013248:	430a      	orrs	r2, r1
 801324a:	b292      	uxth	r2, r2
 801324c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d125      	bne.n	80132a2 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	18d3      	adds	r3, r2, r3
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	b29a      	uxth	r2, r3
 8013264:	201c      	movs	r0, #28
 8013266:	183b      	adds	r3, r7, r0
 8013268:	49d1      	ldr	r1, [pc, #836]	@ (80135b0 <USB_ActivateEndpoint+0x6b0>)
 801326a:	400a      	ands	r2, r1
 801326c:	801a      	strh	r2, [r3, #0]
 801326e:	183b      	adds	r3, r7, r0
 8013270:	183a      	adds	r2, r7, r0
 8013272:	8812      	ldrh	r2, [r2, #0]
 8013274:	2180      	movs	r1, #128	@ 0x80
 8013276:	0149      	lsls	r1, r1, #5
 8013278:	404a      	eors	r2, r1
 801327a:	801a      	strh	r2, [r3, #0]
 801327c:	183b      	adds	r3, r7, r0
 801327e:	183a      	adds	r2, r7, r0
 8013280:	8812      	ldrh	r2, [r2, #0]
 8013282:	2180      	movs	r1, #128	@ 0x80
 8013284:	0189      	lsls	r1, r1, #6
 8013286:	404a      	eors	r2, r1
 8013288:	801a      	strh	r2, [r3, #0]
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	009b      	lsls	r3, r3, #2
 8013292:	18d3      	adds	r3, r2, r3
 8013294:	183a      	adds	r2, r7, r0
 8013296:	8812      	ldrh	r2, [r2, #0]
 8013298:	49c6      	ldr	r1, [pc, #792]	@ (80135b4 <USB_ActivateEndpoint+0x6b4>)
 801329a:	430a      	orrs	r2, r1
 801329c:	b292      	uxth	r2, r2
 801329e:	801a      	strh	r2, [r3, #0]
 80132a0:	e1c2      	b.n	8013628 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	18d3      	adds	r3, r2, r3
 80132ac:	881b      	ldrh	r3, [r3, #0]
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	201e      	movs	r0, #30
 80132b2:	183b      	adds	r3, r7, r0
 80132b4:	49be      	ldr	r1, [pc, #760]	@ (80135b0 <USB_ActivateEndpoint+0x6b0>)
 80132b6:	400a      	ands	r2, r1
 80132b8:	801a      	strh	r2, [r3, #0]
 80132ba:	183b      	adds	r3, r7, r0
 80132bc:	183a      	adds	r2, r7, r0
 80132be:	8812      	ldrh	r2, [r2, #0]
 80132c0:	2180      	movs	r1, #128	@ 0x80
 80132c2:	0189      	lsls	r1, r1, #6
 80132c4:	404a      	eors	r2, r1
 80132c6:	801a      	strh	r2, [r3, #0]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	18d3      	adds	r3, r2, r3
 80132d2:	183a      	adds	r2, r7, r0
 80132d4:	8812      	ldrh	r2, [r2, #0]
 80132d6:	49b7      	ldr	r1, [pc, #732]	@ (80135b4 <USB_ActivateEndpoint+0x6b4>)
 80132d8:	430a      	orrs	r2, r1
 80132da:	b292      	uxth	r2, r2
 80132dc:	801a      	strh	r2, [r3, #0]
 80132de:	e1a3      	b.n	8013628 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	78db      	ldrb	r3, [r3, #3]
 80132e4:	2b02      	cmp	r3, #2
 80132e6:	d117      	bne.n	8013318 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	18d3      	adds	r3, r2, r3
 80132f2:	881b      	ldrh	r3, [r3, #0]
 80132f4:	b29a      	uxth	r2, r3
 80132f6:	2062      	movs	r0, #98	@ 0x62
 80132f8:	183b      	adds	r3, r7, r0
 80132fa:	49ab      	ldr	r1, [pc, #684]	@ (80135a8 <USB_ActivateEndpoint+0x6a8>)
 80132fc:	400a      	ands	r2, r1
 80132fe:	801a      	strh	r2, [r3, #0]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	18d3      	adds	r3, r2, r3
 801330a:	183a      	adds	r2, r7, r0
 801330c:	8812      	ldrh	r2, [r2, #0]
 801330e:	49aa      	ldr	r1, [pc, #680]	@ (80135b8 <USB_ActivateEndpoint+0x6b8>)
 8013310:	430a      	orrs	r2, r1
 8013312:	b292      	uxth	r2, r2
 8013314:	801a      	strh	r2, [r3, #0]
 8013316:	e016      	b.n	8013346 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	18d3      	adds	r3, r2, r3
 8013322:	881b      	ldrh	r3, [r3, #0]
 8013324:	b29a      	uxth	r2, r3
 8013326:	2064      	movs	r0, #100	@ 0x64
 8013328:	183b      	adds	r3, r7, r0
 801332a:	49a4      	ldr	r1, [pc, #656]	@ (80135bc <USB_ActivateEndpoint+0x6bc>)
 801332c:	400a      	ands	r2, r1
 801332e:	801a      	strh	r2, [r3, #0]
 8013330:	687a      	ldr	r2, [r7, #4]
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	18d3      	adds	r3, r2, r3
 801333a:	183a      	adds	r2, r7, r0
 801333c:	8812      	ldrh	r2, [r2, #0]
 801333e:	499d      	ldr	r1, [pc, #628]	@ (80135b4 <USB_ActivateEndpoint+0x6b4>)
 8013340:	430a      	orrs	r2, r1
 8013342:	b292      	uxth	r2, r2
 8013344:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2250      	movs	r2, #80	@ 0x50
 801334e:	5a9b      	ldrh	r3, [r3, r2]
 8013350:	b29b      	uxth	r3, r3
 8013352:	001a      	movs	r2, r3
 8013354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013356:	189b      	adds	r3, r3, r2
 8013358:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	00da      	lsls	r2, r3, #3
 8013360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013362:	18d3      	adds	r3, r2, r3
 8013364:	2280      	movs	r2, #128	@ 0x80
 8013366:	00d2      	lsls	r2, r2, #3
 8013368:	4694      	mov	ip, r2
 801336a:	4463      	add	r3, ip
 801336c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	891b      	ldrh	r3, [r3, #8]
 8013372:	085b      	lsrs	r3, r3, #1
 8013374:	b29b      	uxth	r3, r3
 8013376:	18db      	adds	r3, r3, r3
 8013378:	b29a      	uxth	r2, r3
 801337a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801337c:	801a      	strh	r2, [r3, #0]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	657b      	str	r3, [r7, #84]	@ 0x54
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	2250      	movs	r2, #80	@ 0x50
 8013386:	5a9b      	ldrh	r3, [r3, r2]
 8013388:	b29b      	uxth	r3, r3
 801338a:	001a      	movs	r2, r3
 801338c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338e:	189b      	adds	r3, r3, r2
 8013390:	657b      	str	r3, [r7, #84]	@ 0x54
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	00da      	lsls	r2, r3, #3
 8013398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801339a:	18d3      	adds	r3, r2, r3
 801339c:	4a88      	ldr	r2, [pc, #544]	@ (80135c0 <USB_ActivateEndpoint+0x6c0>)
 801339e:	4694      	mov	ip, r2
 80133a0:	4463      	add	r3, ip
 80133a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	895b      	ldrh	r3, [r3, #10]
 80133a8:	085b      	lsrs	r3, r3, #1
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	18db      	adds	r3, r3, r3
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80133b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	785b      	ldrb	r3, [r3, #1]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d000      	beq.n	80133be <USB_ActivateEndpoint+0x4be>
 80133bc:	e087      	b.n	80134ce <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	18d2      	adds	r2, r2, r3
 80133c8:	2140      	movs	r1, #64	@ 0x40
 80133ca:	187b      	adds	r3, r7, r1
 80133cc:	8812      	ldrh	r2, [r2, #0]
 80133ce:	801a      	strh	r2, [r3, #0]
 80133d0:	187b      	adds	r3, r7, r1
 80133d2:	881a      	ldrh	r2, [r3, #0]
 80133d4:	2380      	movs	r3, #128	@ 0x80
 80133d6:	01db      	lsls	r3, r3, #7
 80133d8:	4013      	ands	r3, r2
 80133da:	d016      	beq.n	801340a <USB_ActivateEndpoint+0x50a>
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	009b      	lsls	r3, r3, #2
 80133e4:	18d3      	adds	r3, r2, r3
 80133e6:	881b      	ldrh	r3, [r3, #0]
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	203e      	movs	r0, #62	@ 0x3e
 80133ec:	183b      	adds	r3, r7, r0
 80133ee:	496e      	ldr	r1, [pc, #440]	@ (80135a8 <USB_ActivateEndpoint+0x6a8>)
 80133f0:	400a      	ands	r2, r1
 80133f2:	801a      	strh	r2, [r3, #0]
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	18d3      	adds	r3, r2, r3
 80133fe:	183a      	adds	r2, r7, r0
 8013400:	8812      	ldrh	r2, [r2, #0]
 8013402:	496a      	ldr	r1, [pc, #424]	@ (80135ac <USB_ActivateEndpoint+0x6ac>)
 8013404:	430a      	orrs	r2, r1
 8013406:	b292      	uxth	r2, r2
 8013408:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	18d2      	adds	r2, r2, r3
 8013414:	213c      	movs	r1, #60	@ 0x3c
 8013416:	187b      	adds	r3, r7, r1
 8013418:	8812      	ldrh	r2, [r2, #0]
 801341a:	801a      	strh	r2, [r3, #0]
 801341c:	187b      	adds	r3, r7, r1
 801341e:	881b      	ldrh	r3, [r3, #0]
 8013420:	2240      	movs	r2, #64	@ 0x40
 8013422:	4013      	ands	r3, r2
 8013424:	d016      	beq.n	8013454 <USB_ActivateEndpoint+0x554>
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	18d3      	adds	r3, r2, r3
 8013430:	881b      	ldrh	r3, [r3, #0]
 8013432:	b29a      	uxth	r2, r3
 8013434:	203a      	movs	r0, #58	@ 0x3a
 8013436:	183b      	adds	r3, r7, r0
 8013438:	495b      	ldr	r1, [pc, #364]	@ (80135a8 <USB_ActivateEndpoint+0x6a8>)
 801343a:	400a      	ands	r2, r1
 801343c:	801a      	strh	r2, [r3, #0]
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	18d3      	adds	r3, r2, r3
 8013448:	183a      	adds	r2, r7, r0
 801344a:	8812      	ldrh	r2, [r2, #0]
 801344c:	495d      	ldr	r1, [pc, #372]	@ (80135c4 <USB_ActivateEndpoint+0x6c4>)
 801344e:	430a      	orrs	r2, r1
 8013450:	b292      	uxth	r2, r2
 8013452:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013454:	687a      	ldr	r2, [r7, #4]
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	009b      	lsls	r3, r3, #2
 801345c:	18d3      	adds	r3, r2, r3
 801345e:	881b      	ldrh	r3, [r3, #0]
 8013460:	b29a      	uxth	r2, r3
 8013462:	2038      	movs	r0, #56	@ 0x38
 8013464:	183b      	adds	r3, r7, r0
 8013466:	4952      	ldr	r1, [pc, #328]	@ (80135b0 <USB_ActivateEndpoint+0x6b0>)
 8013468:	400a      	ands	r2, r1
 801346a:	801a      	strh	r2, [r3, #0]
 801346c:	183b      	adds	r3, r7, r0
 801346e:	183a      	adds	r2, r7, r0
 8013470:	8812      	ldrh	r2, [r2, #0]
 8013472:	2180      	movs	r1, #128	@ 0x80
 8013474:	0149      	lsls	r1, r1, #5
 8013476:	404a      	eors	r2, r1
 8013478:	801a      	strh	r2, [r3, #0]
 801347a:	183b      	adds	r3, r7, r0
 801347c:	183a      	adds	r2, r7, r0
 801347e:	8812      	ldrh	r2, [r2, #0]
 8013480:	2180      	movs	r1, #128	@ 0x80
 8013482:	0189      	lsls	r1, r1, #6
 8013484:	404a      	eors	r2, r1
 8013486:	801a      	strh	r2, [r3, #0]
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	18d3      	adds	r3, r2, r3
 8013492:	183a      	adds	r2, r7, r0
 8013494:	8812      	ldrh	r2, [r2, #0]
 8013496:	4947      	ldr	r1, [pc, #284]	@ (80135b4 <USB_ActivateEndpoint+0x6b4>)
 8013498:	430a      	orrs	r2, r1
 801349a:	b292      	uxth	r2, r2
 801349c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	18d3      	adds	r3, r2, r3
 80134a8:	881b      	ldrh	r3, [r3, #0]
 80134aa:	b29a      	uxth	r2, r3
 80134ac:	2036      	movs	r0, #54	@ 0x36
 80134ae:	183b      	adds	r3, r7, r0
 80134b0:	4945      	ldr	r1, [pc, #276]	@ (80135c8 <USB_ActivateEndpoint+0x6c8>)
 80134b2:	400a      	ands	r2, r1
 80134b4:	801a      	strh	r2, [r3, #0]
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	18d3      	adds	r3, r2, r3
 80134c0:	183a      	adds	r2, r7, r0
 80134c2:	8812      	ldrh	r2, [r2, #0]
 80134c4:	493b      	ldr	r1, [pc, #236]	@ (80135b4 <USB_ActivateEndpoint+0x6b4>)
 80134c6:	430a      	orrs	r2, r1
 80134c8:	b292      	uxth	r2, r2
 80134ca:	801a      	strh	r2, [r3, #0]
 80134cc:	e0ac      	b.n	8013628 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	18d2      	adds	r2, r2, r3
 80134d8:	214e      	movs	r1, #78	@ 0x4e
 80134da:	187b      	adds	r3, r7, r1
 80134dc:	8812      	ldrh	r2, [r2, #0]
 80134de:	801a      	strh	r2, [r3, #0]
 80134e0:	187b      	adds	r3, r7, r1
 80134e2:	881a      	ldrh	r2, [r3, #0]
 80134e4:	2380      	movs	r3, #128	@ 0x80
 80134e6:	01db      	lsls	r3, r3, #7
 80134e8:	4013      	ands	r3, r2
 80134ea:	d016      	beq.n	801351a <USB_ActivateEndpoint+0x61a>
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	009b      	lsls	r3, r3, #2
 80134f4:	18d3      	adds	r3, r2, r3
 80134f6:	881b      	ldrh	r3, [r3, #0]
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	204c      	movs	r0, #76	@ 0x4c
 80134fc:	183b      	adds	r3, r7, r0
 80134fe:	492a      	ldr	r1, [pc, #168]	@ (80135a8 <USB_ActivateEndpoint+0x6a8>)
 8013500:	400a      	ands	r2, r1
 8013502:	801a      	strh	r2, [r3, #0]
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	18d3      	adds	r3, r2, r3
 801350e:	183a      	adds	r2, r7, r0
 8013510:	8812      	ldrh	r2, [r2, #0]
 8013512:	4926      	ldr	r1, [pc, #152]	@ (80135ac <USB_ActivateEndpoint+0x6ac>)
 8013514:	430a      	orrs	r2, r1
 8013516:	b292      	uxth	r2, r2
 8013518:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	009b      	lsls	r3, r3, #2
 8013522:	18d2      	adds	r2, r2, r3
 8013524:	214a      	movs	r1, #74	@ 0x4a
 8013526:	187b      	adds	r3, r7, r1
 8013528:	8812      	ldrh	r2, [r2, #0]
 801352a:	801a      	strh	r2, [r3, #0]
 801352c:	187b      	adds	r3, r7, r1
 801352e:	881b      	ldrh	r3, [r3, #0]
 8013530:	2240      	movs	r2, #64	@ 0x40
 8013532:	4013      	ands	r3, r2
 8013534:	d016      	beq.n	8013564 <USB_ActivateEndpoint+0x664>
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	18d3      	adds	r3, r2, r3
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	b29a      	uxth	r2, r3
 8013544:	2048      	movs	r0, #72	@ 0x48
 8013546:	183b      	adds	r3, r7, r0
 8013548:	4917      	ldr	r1, [pc, #92]	@ (80135a8 <USB_ActivateEndpoint+0x6a8>)
 801354a:	400a      	ands	r2, r1
 801354c:	801a      	strh	r2, [r3, #0]
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	18d3      	adds	r3, r2, r3
 8013558:	183a      	adds	r2, r7, r0
 801355a:	8812      	ldrh	r2, [r2, #0]
 801355c:	4919      	ldr	r1, [pc, #100]	@ (80135c4 <USB_ActivateEndpoint+0x6c4>)
 801355e:	430a      	orrs	r2, r1
 8013560:	b292      	uxth	r2, r2
 8013562:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	78db      	ldrb	r3, [r3, #3]
 8013568:	2b01      	cmp	r3, #1
 801356a:	d02f      	beq.n	80135cc <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	781b      	ldrb	r3, [r3, #0]
 8013572:	009b      	lsls	r3, r3, #2
 8013574:	18d3      	adds	r3, r2, r3
 8013576:	881b      	ldrh	r3, [r3, #0]
 8013578:	b29a      	uxth	r2, r3
 801357a:	2044      	movs	r0, #68	@ 0x44
 801357c:	183b      	adds	r3, r7, r0
 801357e:	4912      	ldr	r1, [pc, #72]	@ (80135c8 <USB_ActivateEndpoint+0x6c8>)
 8013580:	400a      	ands	r2, r1
 8013582:	801a      	strh	r2, [r3, #0]
 8013584:	183b      	adds	r3, r7, r0
 8013586:	183a      	adds	r2, r7, r0
 8013588:	8812      	ldrh	r2, [r2, #0]
 801358a:	2120      	movs	r1, #32
 801358c:	404a      	eors	r2, r1
 801358e:	801a      	strh	r2, [r3, #0]
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	009b      	lsls	r3, r3, #2
 8013598:	18d3      	adds	r3, r2, r3
 801359a:	183a      	adds	r2, r7, r0
 801359c:	8812      	ldrh	r2, [r2, #0]
 801359e:	4905      	ldr	r1, [pc, #20]	@ (80135b4 <USB_ActivateEndpoint+0x6b4>)
 80135a0:	430a      	orrs	r2, r1
 80135a2:	b292      	uxth	r2, r2
 80135a4:	801a      	strh	r2, [r3, #0]
 80135a6:	e028      	b.n	80135fa <USB_ActivateEndpoint+0x6fa>
 80135a8:	ffff8f8f 	.word	0xffff8f8f
 80135ac:	ffffc080 	.word	0xffffc080
 80135b0:	ffffbf8f 	.word	0xffffbf8f
 80135b4:	ffff8080 	.word	0xffff8080
 80135b8:	ffff8180 	.word	0xffff8180
 80135bc:	ffff8e8f 	.word	0xffff8e8f
 80135c0:	00000404 	.word	0x00000404
 80135c4:	ffff80c0 	.word	0xffff80c0
 80135c8:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	009b      	lsls	r3, r3, #2
 80135d4:	18d3      	adds	r3, r2, r3
 80135d6:	881b      	ldrh	r3, [r3, #0]
 80135d8:	b29a      	uxth	r2, r3
 80135da:	2046      	movs	r0, #70	@ 0x46
 80135dc:	183b      	adds	r3, r7, r0
 80135de:	4916      	ldr	r1, [pc, #88]	@ (8013638 <USB_ActivateEndpoint+0x738>)
 80135e0:	400a      	ands	r2, r1
 80135e2:	801a      	strh	r2, [r3, #0]
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	009b      	lsls	r3, r3, #2
 80135ec:	18d3      	adds	r3, r2, r3
 80135ee:	183a      	adds	r2, r7, r0
 80135f0:	8812      	ldrh	r2, [r2, #0]
 80135f2:	4912      	ldr	r1, [pc, #72]	@ (801363c <USB_ActivateEndpoint+0x73c>)
 80135f4:	430a      	orrs	r2, r1
 80135f6:	b292      	uxth	r2, r2
 80135f8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	009b      	lsls	r3, r3, #2
 8013602:	18d3      	adds	r3, r2, r3
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	b29a      	uxth	r2, r3
 8013608:	2042      	movs	r0, #66	@ 0x42
 801360a:	183b      	adds	r3, r7, r0
 801360c:	490c      	ldr	r1, [pc, #48]	@ (8013640 <USB_ActivateEndpoint+0x740>)
 801360e:	400a      	ands	r2, r1
 8013610:	801a      	strh	r2, [r3, #0]
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	009b      	lsls	r3, r3, #2
 801361a:	18d3      	adds	r3, r2, r3
 801361c:	183a      	adds	r2, r7, r0
 801361e:	8812      	ldrh	r2, [r2, #0]
 8013620:	4906      	ldr	r1, [pc, #24]	@ (801363c <USB_ActivateEndpoint+0x73c>)
 8013622:	430a      	orrs	r2, r1
 8013624:	b292      	uxth	r2, r2
 8013626:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8013628:	236f      	movs	r3, #111	@ 0x6f
 801362a:	18fb      	adds	r3, r7, r3
 801362c:	781b      	ldrb	r3, [r3, #0]
}
 801362e:	0018      	movs	r0, r3
 8013630:	46bd      	mov	sp, r7
 8013632:	b01c      	add	sp, #112	@ 0x70
 8013634:	bd80      	pop	{r7, pc}
 8013636:	46c0      	nop			@ (mov r8, r8)
 8013638:	ffff8fbf 	.word	0xffff8fbf
 801363c:	ffff8080 	.word	0xffff8080
 8013640:	ffffbf8f 	.word	0xffffbf8f

08013644 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b08c      	sub	sp, #48	@ 0x30
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	7b1b      	ldrb	r3, [r3, #12]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d000      	beq.n	8013658 <USB_DeactivateEndpoint+0x14>
 8013656:	e07e      	b.n	8013756 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	785b      	ldrb	r3, [r3, #1]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d03c      	beq.n	80136da <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	18d2      	adds	r2, r2, r3
 801366a:	210c      	movs	r1, #12
 801366c:	187b      	adds	r3, r7, r1
 801366e:	8812      	ldrh	r2, [r2, #0]
 8013670:	801a      	strh	r2, [r3, #0]
 8013672:	187b      	adds	r3, r7, r1
 8013674:	881b      	ldrh	r3, [r3, #0]
 8013676:	2240      	movs	r2, #64	@ 0x40
 8013678:	4013      	ands	r3, r2
 801367a:	d016      	beq.n	80136aa <USB_DeactivateEndpoint+0x66>
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	009b      	lsls	r3, r3, #2
 8013684:	18d3      	adds	r3, r2, r3
 8013686:	881b      	ldrh	r3, [r3, #0]
 8013688:	b29a      	uxth	r2, r3
 801368a:	200a      	movs	r0, #10
 801368c:	183b      	adds	r3, r7, r0
 801368e:	49c7      	ldr	r1, [pc, #796]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 8013690:	400a      	ands	r2, r1
 8013692:	801a      	strh	r2, [r3, #0]
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	18d3      	adds	r3, r2, r3
 801369e:	183a      	adds	r2, r7, r0
 80136a0:	8812      	ldrh	r2, [r2, #0]
 80136a2:	49c3      	ldr	r1, [pc, #780]	@ (80139b0 <USB_DeactivateEndpoint+0x36c>)
 80136a4:	430a      	orrs	r2, r1
 80136a6:	b292      	uxth	r2, r2
 80136a8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	18d3      	adds	r3, r2, r3
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	b29a      	uxth	r2, r3
 80136b8:	2008      	movs	r0, #8
 80136ba:	183b      	adds	r3, r7, r0
 80136bc:	49bd      	ldr	r1, [pc, #756]	@ (80139b4 <USB_DeactivateEndpoint+0x370>)
 80136be:	400a      	ands	r2, r1
 80136c0:	801a      	strh	r2, [r3, #0]
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	009b      	lsls	r3, r3, #2
 80136ca:	18d3      	adds	r3, r2, r3
 80136cc:	183a      	adds	r2, r7, r0
 80136ce:	8812      	ldrh	r2, [r2, #0]
 80136d0:	49b9      	ldr	r1, [pc, #740]	@ (80139b8 <USB_DeactivateEndpoint+0x374>)
 80136d2:	430a      	orrs	r2, r1
 80136d4:	b292      	uxth	r2, r2
 80136d6:	801a      	strh	r2, [r3, #0]
 80136d8:	e163      	b.n	80139a2 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	18d2      	adds	r2, r2, r3
 80136e4:	2112      	movs	r1, #18
 80136e6:	187b      	adds	r3, r7, r1
 80136e8:	8812      	ldrh	r2, [r2, #0]
 80136ea:	801a      	strh	r2, [r3, #0]
 80136ec:	187b      	adds	r3, r7, r1
 80136ee:	881a      	ldrh	r2, [r3, #0]
 80136f0:	2380      	movs	r3, #128	@ 0x80
 80136f2:	01db      	lsls	r3, r3, #7
 80136f4:	4013      	ands	r3, r2
 80136f6:	d016      	beq.n	8013726 <USB_DeactivateEndpoint+0xe2>
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	18d3      	adds	r3, r2, r3
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	b29a      	uxth	r2, r3
 8013706:	2010      	movs	r0, #16
 8013708:	183b      	adds	r3, r7, r0
 801370a:	49a8      	ldr	r1, [pc, #672]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 801370c:	400a      	ands	r2, r1
 801370e:	801a      	strh	r2, [r3, #0]
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	18d3      	adds	r3, r2, r3
 801371a:	183a      	adds	r2, r7, r0
 801371c:	8812      	ldrh	r2, [r2, #0]
 801371e:	49a7      	ldr	r1, [pc, #668]	@ (80139bc <USB_DeactivateEndpoint+0x378>)
 8013720:	430a      	orrs	r2, r1
 8013722:	b292      	uxth	r2, r2
 8013724:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	009b      	lsls	r3, r3, #2
 801372e:	18d3      	adds	r3, r2, r3
 8013730:	881b      	ldrh	r3, [r3, #0]
 8013732:	b29a      	uxth	r2, r3
 8013734:	200e      	movs	r0, #14
 8013736:	183b      	adds	r3, r7, r0
 8013738:	49a1      	ldr	r1, [pc, #644]	@ (80139c0 <USB_DeactivateEndpoint+0x37c>)
 801373a:	400a      	ands	r2, r1
 801373c:	801a      	strh	r2, [r3, #0]
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	009b      	lsls	r3, r3, #2
 8013746:	18d3      	adds	r3, r2, r3
 8013748:	183a      	adds	r2, r7, r0
 801374a:	8812      	ldrh	r2, [r2, #0]
 801374c:	499a      	ldr	r1, [pc, #616]	@ (80139b8 <USB_DeactivateEndpoint+0x374>)
 801374e:	430a      	orrs	r2, r1
 8013750:	b292      	uxth	r2, r2
 8013752:	801a      	strh	r2, [r3, #0]
 8013754:	e125      	b.n	80139a2 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	785b      	ldrb	r3, [r3, #1]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d000      	beq.n	8013760 <USB_DeactivateEndpoint+0x11c>
 801375e:	e090      	b.n	8013882 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013760:	687a      	ldr	r2, [r7, #4]
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	18d2      	adds	r2, r2, r3
 801376a:	2120      	movs	r1, #32
 801376c:	187b      	adds	r3, r7, r1
 801376e:	8812      	ldrh	r2, [r2, #0]
 8013770:	801a      	strh	r2, [r3, #0]
 8013772:	187b      	adds	r3, r7, r1
 8013774:	881a      	ldrh	r2, [r3, #0]
 8013776:	2380      	movs	r3, #128	@ 0x80
 8013778:	01db      	lsls	r3, r3, #7
 801377a:	4013      	ands	r3, r2
 801377c:	d016      	beq.n	80137ac <USB_DeactivateEndpoint+0x168>
 801377e:	687a      	ldr	r2, [r7, #4]
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	009b      	lsls	r3, r3, #2
 8013786:	18d3      	adds	r3, r2, r3
 8013788:	881b      	ldrh	r3, [r3, #0]
 801378a:	b29a      	uxth	r2, r3
 801378c:	201e      	movs	r0, #30
 801378e:	183b      	adds	r3, r7, r0
 8013790:	4986      	ldr	r1, [pc, #536]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 8013792:	400a      	ands	r2, r1
 8013794:	801a      	strh	r2, [r3, #0]
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	18d3      	adds	r3, r2, r3
 80137a0:	183a      	adds	r2, r7, r0
 80137a2:	8812      	ldrh	r2, [r2, #0]
 80137a4:	4985      	ldr	r1, [pc, #532]	@ (80139bc <USB_DeactivateEndpoint+0x378>)
 80137a6:	430a      	orrs	r2, r1
 80137a8:	b292      	uxth	r2, r2
 80137aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	18d2      	adds	r2, r2, r3
 80137b6:	211c      	movs	r1, #28
 80137b8:	187b      	adds	r3, r7, r1
 80137ba:	8812      	ldrh	r2, [r2, #0]
 80137bc:	801a      	strh	r2, [r3, #0]
 80137be:	187b      	adds	r3, r7, r1
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	2240      	movs	r2, #64	@ 0x40
 80137c4:	4013      	ands	r3, r2
 80137c6:	d016      	beq.n	80137f6 <USB_DeactivateEndpoint+0x1b2>
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	18d3      	adds	r3, r2, r3
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	b29a      	uxth	r2, r3
 80137d6:	201a      	movs	r0, #26
 80137d8:	183b      	adds	r3, r7, r0
 80137da:	4974      	ldr	r1, [pc, #464]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 80137dc:	400a      	ands	r2, r1
 80137de:	801a      	strh	r2, [r3, #0]
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	18d3      	adds	r3, r2, r3
 80137ea:	183a      	adds	r2, r7, r0
 80137ec:	8812      	ldrh	r2, [r2, #0]
 80137ee:	4970      	ldr	r1, [pc, #448]	@ (80139b0 <USB_DeactivateEndpoint+0x36c>)
 80137f0:	430a      	orrs	r2, r1
 80137f2:	b292      	uxth	r2, r2
 80137f4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80137f6:	687a      	ldr	r2, [r7, #4]
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	18d3      	adds	r3, r2, r3
 8013800:	881b      	ldrh	r3, [r3, #0]
 8013802:	b29a      	uxth	r2, r3
 8013804:	2018      	movs	r0, #24
 8013806:	183b      	adds	r3, r7, r0
 8013808:	4968      	ldr	r1, [pc, #416]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 801380a:	400a      	ands	r2, r1
 801380c:	801a      	strh	r2, [r3, #0]
 801380e:	687a      	ldr	r2, [r7, #4]
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	18d3      	adds	r3, r2, r3
 8013818:	183a      	adds	r2, r7, r0
 801381a:	8812      	ldrh	r2, [r2, #0]
 801381c:	4964      	ldr	r1, [pc, #400]	@ (80139b0 <USB_DeactivateEndpoint+0x36c>)
 801381e:	430a      	orrs	r2, r1
 8013820:	b292      	uxth	r2, r2
 8013822:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013824:	687a      	ldr	r2, [r7, #4]
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	781b      	ldrb	r3, [r3, #0]
 801382a:	009b      	lsls	r3, r3, #2
 801382c:	18d3      	adds	r3, r2, r3
 801382e:	881b      	ldrh	r3, [r3, #0]
 8013830:	b29a      	uxth	r2, r3
 8013832:	2016      	movs	r0, #22
 8013834:	183b      	adds	r3, r7, r0
 8013836:	4962      	ldr	r1, [pc, #392]	@ (80139c0 <USB_DeactivateEndpoint+0x37c>)
 8013838:	400a      	ands	r2, r1
 801383a:	801a      	strh	r2, [r3, #0]
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	18d3      	adds	r3, r2, r3
 8013846:	183a      	adds	r2, r7, r0
 8013848:	8812      	ldrh	r2, [r2, #0]
 801384a:	495b      	ldr	r1, [pc, #364]	@ (80139b8 <USB_DeactivateEndpoint+0x374>)
 801384c:	430a      	orrs	r2, r1
 801384e:	b292      	uxth	r2, r2
 8013850:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	18d3      	adds	r3, r2, r3
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	b29a      	uxth	r2, r3
 8013860:	2014      	movs	r0, #20
 8013862:	183b      	adds	r3, r7, r0
 8013864:	4953      	ldr	r1, [pc, #332]	@ (80139b4 <USB_DeactivateEndpoint+0x370>)
 8013866:	400a      	ands	r2, r1
 8013868:	801a      	strh	r2, [r3, #0]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	18d3      	adds	r3, r2, r3
 8013874:	183a      	adds	r2, r7, r0
 8013876:	8812      	ldrh	r2, [r2, #0]
 8013878:	494f      	ldr	r1, [pc, #316]	@ (80139b8 <USB_DeactivateEndpoint+0x374>)
 801387a:	430a      	orrs	r2, r1
 801387c:	b292      	uxth	r2, r2
 801387e:	801a      	strh	r2, [r3, #0]
 8013880:	e08f      	b.n	80139a2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	009b      	lsls	r3, r3, #2
 801388a:	18d2      	adds	r2, r2, r3
 801388c:	212e      	movs	r1, #46	@ 0x2e
 801388e:	187b      	adds	r3, r7, r1
 8013890:	8812      	ldrh	r2, [r2, #0]
 8013892:	801a      	strh	r2, [r3, #0]
 8013894:	187b      	adds	r3, r7, r1
 8013896:	881a      	ldrh	r2, [r3, #0]
 8013898:	2380      	movs	r3, #128	@ 0x80
 801389a:	01db      	lsls	r3, r3, #7
 801389c:	4013      	ands	r3, r2
 801389e:	d016      	beq.n	80138ce <USB_DeactivateEndpoint+0x28a>
 80138a0:	687a      	ldr	r2, [r7, #4]
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	009b      	lsls	r3, r3, #2
 80138a8:	18d3      	adds	r3, r2, r3
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	b29a      	uxth	r2, r3
 80138ae:	202c      	movs	r0, #44	@ 0x2c
 80138b0:	183b      	adds	r3, r7, r0
 80138b2:	493e      	ldr	r1, [pc, #248]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 80138b4:	400a      	ands	r2, r1
 80138b6:	801a      	strh	r2, [r3, #0]
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	18d3      	adds	r3, r2, r3
 80138c2:	183a      	adds	r2, r7, r0
 80138c4:	8812      	ldrh	r2, [r2, #0]
 80138c6:	493d      	ldr	r1, [pc, #244]	@ (80139bc <USB_DeactivateEndpoint+0x378>)
 80138c8:	430a      	orrs	r2, r1
 80138ca:	b292      	uxth	r2, r2
 80138cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	009b      	lsls	r3, r3, #2
 80138d6:	18d2      	adds	r2, r2, r3
 80138d8:	212a      	movs	r1, #42	@ 0x2a
 80138da:	187b      	adds	r3, r7, r1
 80138dc:	8812      	ldrh	r2, [r2, #0]
 80138de:	801a      	strh	r2, [r3, #0]
 80138e0:	187b      	adds	r3, r7, r1
 80138e2:	881b      	ldrh	r3, [r3, #0]
 80138e4:	2240      	movs	r2, #64	@ 0x40
 80138e6:	4013      	ands	r3, r2
 80138e8:	d016      	beq.n	8013918 <USB_DeactivateEndpoint+0x2d4>
 80138ea:	687a      	ldr	r2, [r7, #4]
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	18d3      	adds	r3, r2, r3
 80138f4:	881b      	ldrh	r3, [r3, #0]
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	2028      	movs	r0, #40	@ 0x28
 80138fa:	183b      	adds	r3, r7, r0
 80138fc:	492b      	ldr	r1, [pc, #172]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 80138fe:	400a      	ands	r2, r1
 8013900:	801a      	strh	r2, [r3, #0]
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	18d3      	adds	r3, r2, r3
 801390c:	183a      	adds	r2, r7, r0
 801390e:	8812      	ldrh	r2, [r2, #0]
 8013910:	4927      	ldr	r1, [pc, #156]	@ (80139b0 <USB_DeactivateEndpoint+0x36c>)
 8013912:	430a      	orrs	r2, r1
 8013914:	b292      	uxth	r2, r2
 8013916:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	781b      	ldrb	r3, [r3, #0]
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	18d3      	adds	r3, r2, r3
 8013922:	881b      	ldrh	r3, [r3, #0]
 8013924:	b29a      	uxth	r2, r3
 8013926:	2026      	movs	r0, #38	@ 0x26
 8013928:	183b      	adds	r3, r7, r0
 801392a:	4920      	ldr	r1, [pc, #128]	@ (80139ac <USB_DeactivateEndpoint+0x368>)
 801392c:	400a      	ands	r2, r1
 801392e:	801a      	strh	r2, [r3, #0]
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	18d3      	adds	r3, r2, r3
 801393a:	183a      	adds	r2, r7, r0
 801393c:	8812      	ldrh	r2, [r2, #0]
 801393e:	491f      	ldr	r1, [pc, #124]	@ (80139bc <USB_DeactivateEndpoint+0x378>)
 8013940:	430a      	orrs	r2, r1
 8013942:	b292      	uxth	r2, r2
 8013944:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	18d3      	adds	r3, r2, r3
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	b29a      	uxth	r2, r3
 8013954:	2024      	movs	r0, #36	@ 0x24
 8013956:	183b      	adds	r3, r7, r0
 8013958:	4916      	ldr	r1, [pc, #88]	@ (80139b4 <USB_DeactivateEndpoint+0x370>)
 801395a:	400a      	ands	r2, r1
 801395c:	801a      	strh	r2, [r3, #0]
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	18d3      	adds	r3, r2, r3
 8013968:	183a      	adds	r2, r7, r0
 801396a:	8812      	ldrh	r2, [r2, #0]
 801396c:	4912      	ldr	r1, [pc, #72]	@ (80139b8 <USB_DeactivateEndpoint+0x374>)
 801396e:	430a      	orrs	r2, r1
 8013970:	b292      	uxth	r2, r2
 8013972:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	18d3      	adds	r3, r2, r3
 801397e:	881b      	ldrh	r3, [r3, #0]
 8013980:	b29a      	uxth	r2, r3
 8013982:	2022      	movs	r0, #34	@ 0x22
 8013984:	183b      	adds	r3, r7, r0
 8013986:	490e      	ldr	r1, [pc, #56]	@ (80139c0 <USB_DeactivateEndpoint+0x37c>)
 8013988:	400a      	ands	r2, r1
 801398a:	801a      	strh	r2, [r3, #0]
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	18d3      	adds	r3, r2, r3
 8013996:	183a      	adds	r2, r7, r0
 8013998:	8812      	ldrh	r2, [r2, #0]
 801399a:	4907      	ldr	r1, [pc, #28]	@ (80139b8 <USB_DeactivateEndpoint+0x374>)
 801399c:	430a      	orrs	r2, r1
 801399e:	b292      	uxth	r2, r2
 80139a0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80139a2:	2300      	movs	r3, #0
}
 80139a4:	0018      	movs	r0, r3
 80139a6:	46bd      	mov	sp, r7
 80139a8:	b00c      	add	sp, #48	@ 0x30
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	ffff8f8f 	.word	0xffff8f8f
 80139b0:	ffff80c0 	.word	0xffff80c0
 80139b4:	ffff8fbf 	.word	0xffff8fbf
 80139b8:	ffff8080 	.word	0xffff8080
 80139bc:	ffffc080 	.word	0xffffc080
 80139c0:	ffffbf8f 	.word	0xffffbf8f

080139c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80139c4:	b590      	push	{r4, r7, lr}
 80139c6:	b0c3      	sub	sp, #268	@ 0x10c
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	785b      	ldrb	r3, [r3, #1]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d001      	beq.n	80139da <USB_EPStartXfer+0x16>
 80139d6:	f000 fd2d 	bl	8014434 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	699a      	ldr	r2, [r3, #24]
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	691b      	ldr	r3, [r3, #16]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d905      	bls.n	80139f2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	691b      	ldr	r3, [r3, #16]
 80139ea:	1d7a      	adds	r2, r7, #5
 80139ec:	32ff      	adds	r2, #255	@ 0xff
 80139ee:	6013      	str	r3, [r2, #0]
 80139f0:	e004      	b.n	80139fc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	699b      	ldr	r3, [r3, #24]
 80139f6:	1d7a      	adds	r2, r7, #5
 80139f8:	32ff      	adds	r2, #255	@ 0xff
 80139fa:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	7b1b      	ldrb	r3, [r3, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d125      	bne.n	8013a50 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	6959      	ldr	r1, [r3, #20]
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	88da      	ldrh	r2, [r3, #6]
 8013a0c:	1d7b      	adds	r3, r7, #5
 8013a0e:	33ff      	adds	r3, #255	@ 0xff
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	b29b      	uxth	r3, r3
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f001 fa47 	bl	8014ea8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	613b      	str	r3, [r7, #16]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2250      	movs	r2, #80	@ 0x50
 8013a22:	5a9b      	ldrh	r3, [r3, r2]
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	001a      	movs	r2, r3
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	189b      	adds	r3, r3, r2
 8013a2c:	613b      	str	r3, [r7, #16]
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	00da      	lsls	r2, r3, #3
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	18d3      	adds	r3, r2, r3
 8013a38:	4ad7      	ldr	r2, [pc, #860]	@ (8013d98 <USB_EPStartXfer+0x3d4>)
 8013a3a:	4694      	mov	ip, r2
 8013a3c:	4463      	add	r3, ip
 8013a3e:	60fb      	str	r3, [r7, #12]
 8013a40:	1d7b      	adds	r3, r7, #5
 8013a42:	33ff      	adds	r3, #255	@ 0xff
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	801a      	strh	r2, [r3, #0]
 8013a4c:	f000 fccd 	bl	80143ea <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	78db      	ldrb	r3, [r3, #3]
 8013a54:	2b02      	cmp	r3, #2
 8013a56:	d000      	beq.n	8013a5a <USB_EPStartXfer+0x96>
 8013a58:	e362      	b.n	8014120 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	6a1a      	ldr	r2, [r3, #32]
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	691b      	ldr	r3, [r3, #16]
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d800      	bhi.n	8013a68 <USB_EPStartXfer+0xa4>
 8013a66:	e309      	b.n	801407c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013a68:	687a      	ldr	r2, [r7, #4]
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	18d3      	adds	r3, r2, r3
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	b29a      	uxth	r2, r3
 8013a76:	2056      	movs	r0, #86	@ 0x56
 8013a78:	183b      	adds	r3, r7, r0
 8013a7a:	49c8      	ldr	r1, [pc, #800]	@ (8013d9c <USB_EPStartXfer+0x3d8>)
 8013a7c:	400a      	ands	r2, r1
 8013a7e:	801a      	strh	r2, [r3, #0]
 8013a80:	687a      	ldr	r2, [r7, #4]
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	009b      	lsls	r3, r3, #2
 8013a88:	18d3      	adds	r3, r2, r3
 8013a8a:	183a      	adds	r2, r7, r0
 8013a8c:	8812      	ldrh	r2, [r2, #0]
 8013a8e:	49c4      	ldr	r1, [pc, #784]	@ (8013da0 <USB_EPStartXfer+0x3dc>)
 8013a90:	430a      	orrs	r2, r1
 8013a92:	b292      	uxth	r2, r2
 8013a94:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	6a1a      	ldr	r2, [r3, #32]
 8013a9a:	1d7b      	adds	r3, r7, #5
 8013a9c:	33ff      	adds	r3, #255	@ 0xff
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	1ad2      	subs	r2, r2, r3
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013aa6:	687a      	ldr	r2, [r7, #4]
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	18d3      	adds	r3, r2, r3
 8013ab0:	881b      	ldrh	r3, [r3, #0]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	001a      	movs	r2, r3
 8013ab6:	2340      	movs	r3, #64	@ 0x40
 8013ab8:	4013      	ands	r3, r2
 8013aba:	d100      	bne.n	8013abe <USB_EPStartXfer+0xfa>
 8013abc:	e176      	b.n	8013dac <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	785b      	ldrb	r3, [r3, #1]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d000      	beq.n	8013acc <USB_EPStartXfer+0x108>
 8013aca:	e074      	b.n	8013bb6 <USB_EPStartXfer+0x1f2>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2250      	movs	r2, #80	@ 0x50
 8013ad4:	5a9b      	ldrh	r3, [r3, r2]
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	001a      	movs	r2, r3
 8013ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013adc:	189b      	adds	r3, r3, r2
 8013ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	00da      	lsls	r2, r3, #3
 8013ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ae8:	18d3      	adds	r3, r2, r3
 8013aea:	4aae      	ldr	r2, [pc, #696]	@ (8013da4 <USB_EPStartXfer+0x3e0>)
 8013aec:	4694      	mov	ip, r2
 8013aee:	4463      	add	r3, ip
 8013af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8013af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	059b      	lsls	r3, r3, #22
 8013afa:	0d9b      	lsrs	r3, r3, #22
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b00:	801a      	strh	r2, [r3, #0]
 8013b02:	1d7b      	adds	r3, r7, #5
 8013b04:	33ff      	adds	r3, #255	@ 0xff
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	2b3e      	cmp	r3, #62	@ 0x3e
 8013b0a:	d924      	bls.n	8013b56 <USB_EPStartXfer+0x192>
 8013b0c:	1d7b      	adds	r3, r7, #5
 8013b0e:	33ff      	adds	r3, #255	@ 0xff
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	095b      	lsrs	r3, r3, #5
 8013b14:	1c7a      	adds	r2, r7, #1
 8013b16:	32ff      	adds	r2, #255	@ 0xff
 8013b18:	6013      	str	r3, [r2, #0]
 8013b1a:	1d7b      	adds	r3, r7, #5
 8013b1c:	33ff      	adds	r3, #255	@ 0xff
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	221f      	movs	r2, #31
 8013b22:	4013      	ands	r3, r2
 8013b24:	d106      	bne.n	8013b34 <USB_EPStartXfer+0x170>
 8013b26:	1c7b      	adds	r3, r7, #1
 8013b28:	33ff      	adds	r3, #255	@ 0xff
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	3b01      	subs	r3, #1
 8013b2e:	1c7a      	adds	r2, r7, #1
 8013b30:	32ff      	adds	r2, #255	@ 0xff
 8013b32:	6013      	str	r3, [r2, #0]
 8013b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b36:	881b      	ldrh	r3, [r3, #0]
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	1c7b      	adds	r3, r7, #1
 8013b3c:	33ff      	adds	r3, #255	@ 0xff
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	029b      	lsls	r3, r3, #10
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	4313      	orrs	r3, r2
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	4a97      	ldr	r2, [pc, #604]	@ (8013da8 <USB_EPStartXfer+0x3e4>)
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b52:	801a      	strh	r2, [r3, #0]
 8013b54:	e04a      	b.n	8013bec <USB_EPStartXfer+0x228>
 8013b56:	1d7b      	adds	r3, r7, #5
 8013b58:	33ff      	adds	r3, #255	@ 0xff
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d108      	bne.n	8013b72 <USB_EPStartXfer+0x1ae>
 8013b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b62:	881b      	ldrh	r3, [r3, #0]
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	4a90      	ldr	r2, [pc, #576]	@ (8013da8 <USB_EPStartXfer+0x3e4>)
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	b29a      	uxth	r2, r3
 8013b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b6e:	801a      	strh	r2, [r3, #0]
 8013b70:	e03c      	b.n	8013bec <USB_EPStartXfer+0x228>
 8013b72:	1d7b      	adds	r3, r7, #5
 8013b74:	33ff      	adds	r3, #255	@ 0xff
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	085b      	lsrs	r3, r3, #1
 8013b7a:	1c7a      	adds	r2, r7, #1
 8013b7c:	32ff      	adds	r2, #255	@ 0xff
 8013b7e:	6013      	str	r3, [r2, #0]
 8013b80:	1d7b      	adds	r3, r7, #5
 8013b82:	33ff      	adds	r3, #255	@ 0xff
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2201      	movs	r2, #1
 8013b88:	4013      	ands	r3, r2
 8013b8a:	d006      	beq.n	8013b9a <USB_EPStartXfer+0x1d6>
 8013b8c:	1c7b      	adds	r3, r7, #1
 8013b8e:	33ff      	adds	r3, #255	@ 0xff
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	3301      	adds	r3, #1
 8013b94:	1c7a      	adds	r2, r7, #1
 8013b96:	32ff      	adds	r2, #255	@ 0xff
 8013b98:	6013      	str	r3, [r2, #0]
 8013b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b9c:	881b      	ldrh	r3, [r3, #0]
 8013b9e:	b29a      	uxth	r2, r3
 8013ba0:	1c7b      	adds	r3, r7, #1
 8013ba2:	33ff      	adds	r3, #255	@ 0xff
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	029b      	lsls	r3, r3, #10
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	4313      	orrs	r3, r2
 8013bae:	b29a      	uxth	r2, r3
 8013bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb2:	801a      	strh	r2, [r3, #0]
 8013bb4:	e01a      	b.n	8013bec <USB_EPStartXfer+0x228>
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	785b      	ldrb	r3, [r3, #1]
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	d116      	bne.n	8013bec <USB_EPStartXfer+0x228>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2250      	movs	r2, #80	@ 0x50
 8013bc2:	5a9b      	ldrh	r3, [r3, r2]
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	001a      	movs	r2, r3
 8013bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bca:	189b      	adds	r3, r3, r2
 8013bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	00da      	lsls	r2, r3, #3
 8013bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bd6:	18d3      	adds	r3, r2, r3
 8013bd8:	4a72      	ldr	r2, [pc, #456]	@ (8013da4 <USB_EPStartXfer+0x3e0>)
 8013bda:	4694      	mov	ip, r2
 8013bdc:	4463      	add	r3, ip
 8013bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013be0:	1d7b      	adds	r3, r7, #5
 8013be2:	33ff      	adds	r3, #255	@ 0xff
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	b29a      	uxth	r2, r3
 8013be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013bec:	2076      	movs	r0, #118	@ 0x76
 8013bee:	183b      	adds	r3, r7, r0
 8013bf0:	683a      	ldr	r2, [r7, #0]
 8013bf2:	8952      	ldrh	r2, [r2, #10]
 8013bf4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	6959      	ldr	r1, [r3, #20]
 8013bfa:	1d7b      	adds	r3, r7, #5
 8013bfc:	33ff      	adds	r3, #255	@ 0xff
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	b29c      	uxth	r4, r3
 8013c02:	183b      	adds	r3, r7, r0
 8013c04:	881a      	ldrh	r2, [r3, #0]
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	0023      	movs	r3, r4
 8013c0a:	f001 f94d 	bl	8014ea8 <USB_WritePMA>
            ep->xfer_buff += len;
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	695a      	ldr	r2, [r3, #20]
 8013c12:	1d7b      	adds	r3, r7, #5
 8013c14:	33ff      	adds	r3, #255	@ 0xff
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	18d2      	adds	r2, r2, r3
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	6a1a      	ldr	r2, [r3, #32]
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	691b      	ldr	r3, [r3, #16]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d908      	bls.n	8013c3c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	6a1a      	ldr	r2, [r3, #32]
 8013c2e:	1d7b      	adds	r3, r7, #5
 8013c30:	33ff      	adds	r3, #255	@ 0xff
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	1ad2      	subs	r2, r2, r3
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	621a      	str	r2, [r3, #32]
 8013c3a:	e007      	b.n	8013c4c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	6a1b      	ldr	r3, [r3, #32]
 8013c40:	1d7a      	adds	r2, r7, #5
 8013c42:	32ff      	adds	r2, #255	@ 0xff
 8013c44:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	785b      	ldrb	r3, [r3, #1]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d000      	beq.n	8013c56 <USB_EPStartXfer+0x292>
 8013c54:	e070      	b.n	8013d38 <USB_EPStartXfer+0x374>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	61bb      	str	r3, [r7, #24]
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2250      	movs	r2, #80	@ 0x50
 8013c5e:	5a9b      	ldrh	r3, [r3, r2]
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	001a      	movs	r2, r3
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	189b      	adds	r3, r3, r2
 8013c68:	61bb      	str	r3, [r7, #24]
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	00da      	lsls	r2, r3, #3
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	18d3      	adds	r3, r2, r3
 8013c74:	4a48      	ldr	r2, [pc, #288]	@ (8013d98 <USB_EPStartXfer+0x3d4>)
 8013c76:	4694      	mov	ip, r2
 8013c78:	4463      	add	r3, ip
 8013c7a:	617b      	str	r3, [r7, #20]
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	881b      	ldrh	r3, [r3, #0]
 8013c80:	b29b      	uxth	r3, r3
 8013c82:	059b      	lsls	r3, r3, #22
 8013c84:	0d9b      	lsrs	r3, r3, #22
 8013c86:	b29a      	uxth	r2, r3
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	801a      	strh	r2, [r3, #0]
 8013c8c:	1d7b      	adds	r3, r7, #5
 8013c8e:	33ff      	adds	r3, #255	@ 0xff
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	2b3e      	cmp	r3, #62	@ 0x3e
 8013c94:	d922      	bls.n	8013cdc <USB_EPStartXfer+0x318>
 8013c96:	1d7b      	adds	r3, r7, #5
 8013c98:	33ff      	adds	r3, #255	@ 0xff
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	095b      	lsrs	r3, r3, #5
 8013c9e:	21fc      	movs	r1, #252	@ 0xfc
 8013ca0:	187a      	adds	r2, r7, r1
 8013ca2:	6013      	str	r3, [r2, #0]
 8013ca4:	1d7b      	adds	r3, r7, #5
 8013ca6:	33ff      	adds	r3, #255	@ 0xff
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	221f      	movs	r2, #31
 8013cac:	4013      	ands	r3, r2
 8013cae:	d104      	bne.n	8013cba <USB_EPStartXfer+0x2f6>
 8013cb0:	187b      	adds	r3, r7, r1
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	3b01      	subs	r3, #1
 8013cb6:	187a      	adds	r2, r7, r1
 8013cb8:	6013      	str	r3, [r2, #0]
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	881b      	ldrh	r3, [r3, #0]
 8013cbe:	b29a      	uxth	r2, r3
 8013cc0:	23fc      	movs	r3, #252	@ 0xfc
 8013cc2:	18fb      	adds	r3, r7, r3
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	029b      	lsls	r3, r3, #10
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	4313      	orrs	r3, r2
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	4a35      	ldr	r2, [pc, #212]	@ (8013da8 <USB_EPStartXfer+0x3e4>)
 8013cd2:	4313      	orrs	r3, r2
 8013cd4:	b29a      	uxth	r2, r3
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	801a      	strh	r2, [r3, #0]
 8013cda:	e04a      	b.n	8013d72 <USB_EPStartXfer+0x3ae>
 8013cdc:	1d7b      	adds	r3, r7, #5
 8013cde:	33ff      	adds	r3, #255	@ 0xff
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d108      	bne.n	8013cf8 <USB_EPStartXfer+0x334>
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	881b      	ldrh	r3, [r3, #0]
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	4a2e      	ldr	r2, [pc, #184]	@ (8013da8 <USB_EPStartXfer+0x3e4>)
 8013cee:	4313      	orrs	r3, r2
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	801a      	strh	r2, [r3, #0]
 8013cf6:	e03c      	b.n	8013d72 <USB_EPStartXfer+0x3ae>
 8013cf8:	1d7b      	adds	r3, r7, #5
 8013cfa:	33ff      	adds	r3, #255	@ 0xff
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	085b      	lsrs	r3, r3, #1
 8013d00:	21fc      	movs	r1, #252	@ 0xfc
 8013d02:	187a      	adds	r2, r7, r1
 8013d04:	6013      	str	r3, [r2, #0]
 8013d06:	1d7b      	adds	r3, r7, #5
 8013d08:	33ff      	adds	r3, #255	@ 0xff
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	4013      	ands	r3, r2
 8013d10:	d004      	beq.n	8013d1c <USB_EPStartXfer+0x358>
 8013d12:	187b      	adds	r3, r7, r1
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	3301      	adds	r3, #1
 8013d18:	187a      	adds	r2, r7, r1
 8013d1a:	6013      	str	r3, [r2, #0]
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	881b      	ldrh	r3, [r3, #0]
 8013d20:	b29a      	uxth	r2, r3
 8013d22:	23fc      	movs	r3, #252	@ 0xfc
 8013d24:	18fb      	adds	r3, r7, r3
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	029b      	lsls	r3, r3, #10
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	4313      	orrs	r3, r2
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	801a      	strh	r2, [r3, #0]
 8013d36:	e01c      	b.n	8013d72 <USB_EPStartXfer+0x3ae>
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	785b      	ldrb	r3, [r3, #1]
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	d118      	bne.n	8013d72 <USB_EPStartXfer+0x3ae>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	623b      	str	r3, [r7, #32]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2250      	movs	r2, #80	@ 0x50
 8013d48:	5a9b      	ldrh	r3, [r3, r2]
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	001a      	movs	r2, r3
 8013d4e:	6a3b      	ldr	r3, [r7, #32]
 8013d50:	189b      	adds	r3, r3, r2
 8013d52:	623b      	str	r3, [r7, #32]
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	00da      	lsls	r2, r3, #3
 8013d5a:	6a3b      	ldr	r3, [r7, #32]
 8013d5c:	18d3      	adds	r3, r2, r3
 8013d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8013d98 <USB_EPStartXfer+0x3d4>)
 8013d60:	4694      	mov	ip, r2
 8013d62:	4463      	add	r3, ip
 8013d64:	61fb      	str	r3, [r7, #28]
 8013d66:	1d7b      	adds	r3, r7, #5
 8013d68:	33ff      	adds	r3, #255	@ 0xff
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	69fb      	ldr	r3, [r7, #28]
 8013d70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013d72:	2076      	movs	r0, #118	@ 0x76
 8013d74:	183b      	adds	r3, r7, r0
 8013d76:	683a      	ldr	r2, [r7, #0]
 8013d78:	8912      	ldrh	r2, [r2, #8]
 8013d7a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	6959      	ldr	r1, [r3, #20]
 8013d80:	1d7b      	adds	r3, r7, #5
 8013d82:	33ff      	adds	r3, #255	@ 0xff
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	b29c      	uxth	r4, r3
 8013d88:	183b      	adds	r3, r7, r0
 8013d8a:	881a      	ldrh	r2, [r3, #0]
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	0023      	movs	r3, r4
 8013d90:	f001 f88a 	bl	8014ea8 <USB_WritePMA>
 8013d94:	e329      	b.n	80143ea <USB_EPStartXfer+0xa26>
 8013d96:	46c0      	nop			@ (mov r8, r8)
 8013d98:	00000402 	.word	0x00000402
 8013d9c:	ffff8f8f 	.word	0xffff8f8f
 8013da0:	ffff8180 	.word	0xffff8180
 8013da4:	00000406 	.word	0x00000406
 8013da8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	785b      	ldrb	r3, [r3, #1]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d000      	beq.n	8013db6 <USB_EPStartXfer+0x3f2>
 8013db4:	e070      	b.n	8013e98 <USB_EPStartXfer+0x4d4>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2250      	movs	r2, #80	@ 0x50
 8013dbe:	5a9b      	ldrh	r3, [r3, r2]
 8013dc0:	b29b      	uxth	r3, r3
 8013dc2:	001a      	movs	r2, r3
 8013dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dc6:	189b      	adds	r3, r3, r2
 8013dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	00da      	lsls	r2, r3, #3
 8013dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dd2:	18d3      	adds	r3, r2, r3
 8013dd4:	4acd      	ldr	r2, [pc, #820]	@ (801410c <USB_EPStartXfer+0x748>)
 8013dd6:	4694      	mov	ip, r2
 8013dd8:	4463      	add	r3, ip
 8013dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dde:	881b      	ldrh	r3, [r3, #0]
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	059b      	lsls	r3, r3, #22
 8013de4:	0d9b      	lsrs	r3, r3, #22
 8013de6:	b29a      	uxth	r2, r3
 8013de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dea:	801a      	strh	r2, [r3, #0]
 8013dec:	1d7b      	adds	r3, r7, #5
 8013dee:	33ff      	adds	r3, #255	@ 0xff
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	2b3e      	cmp	r3, #62	@ 0x3e
 8013df4:	d922      	bls.n	8013e3c <USB_EPStartXfer+0x478>
 8013df6:	1d7b      	adds	r3, r7, #5
 8013df8:	33ff      	adds	r3, #255	@ 0xff
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	095b      	lsrs	r3, r3, #5
 8013dfe:	21f8      	movs	r1, #248	@ 0xf8
 8013e00:	187a      	adds	r2, r7, r1
 8013e02:	6013      	str	r3, [r2, #0]
 8013e04:	1d7b      	adds	r3, r7, #5
 8013e06:	33ff      	adds	r3, #255	@ 0xff
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	221f      	movs	r2, #31
 8013e0c:	4013      	ands	r3, r2
 8013e0e:	d104      	bne.n	8013e1a <USB_EPStartXfer+0x456>
 8013e10:	187b      	adds	r3, r7, r1
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	3b01      	subs	r3, #1
 8013e16:	187a      	adds	r2, r7, r1
 8013e18:	6013      	str	r3, [r2, #0]
 8013e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e1c:	881b      	ldrh	r3, [r3, #0]
 8013e1e:	b29a      	uxth	r2, r3
 8013e20:	23f8      	movs	r3, #248	@ 0xf8
 8013e22:	18fb      	adds	r3, r7, r3
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	029b      	lsls	r3, r3, #10
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	4313      	orrs	r3, r2
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	4ab7      	ldr	r2, [pc, #732]	@ (8014110 <USB_EPStartXfer+0x74c>)
 8013e32:	4313      	orrs	r3, r2
 8013e34:	b29a      	uxth	r2, r3
 8013e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e38:	801a      	strh	r2, [r3, #0]
 8013e3a:	e04a      	b.n	8013ed2 <USB_EPStartXfer+0x50e>
 8013e3c:	1d7b      	adds	r3, r7, #5
 8013e3e:	33ff      	adds	r3, #255	@ 0xff
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d108      	bne.n	8013e58 <USB_EPStartXfer+0x494>
 8013e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e48:	881b      	ldrh	r3, [r3, #0]
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	4ab0      	ldr	r2, [pc, #704]	@ (8014110 <USB_EPStartXfer+0x74c>)
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e54:	801a      	strh	r2, [r3, #0]
 8013e56:	e03c      	b.n	8013ed2 <USB_EPStartXfer+0x50e>
 8013e58:	1d7b      	adds	r3, r7, #5
 8013e5a:	33ff      	adds	r3, #255	@ 0xff
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	085b      	lsrs	r3, r3, #1
 8013e60:	21f8      	movs	r1, #248	@ 0xf8
 8013e62:	187a      	adds	r2, r7, r1
 8013e64:	6013      	str	r3, [r2, #0]
 8013e66:	1d7b      	adds	r3, r7, #5
 8013e68:	33ff      	adds	r3, #255	@ 0xff
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	4013      	ands	r3, r2
 8013e70:	d004      	beq.n	8013e7c <USB_EPStartXfer+0x4b8>
 8013e72:	187b      	adds	r3, r7, r1
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	3301      	adds	r3, #1
 8013e78:	187a      	adds	r2, r7, r1
 8013e7a:	6013      	str	r3, [r2, #0]
 8013e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	23f8      	movs	r3, #248	@ 0xf8
 8013e84:	18fb      	adds	r3, r7, r3
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	029b      	lsls	r3, r3, #10
 8013e8c:	b29b      	uxth	r3, r3
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e94:	801a      	strh	r2, [r3, #0]
 8013e96:	e01c      	b.n	8013ed2 <USB_EPStartXfer+0x50e>
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	785b      	ldrb	r3, [r3, #1]
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d118      	bne.n	8013ed2 <USB_EPStartXfer+0x50e>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2250      	movs	r2, #80	@ 0x50
 8013ea8:	5a9b      	ldrh	r3, [r3, r2]
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	001a      	movs	r2, r3
 8013eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013eb0:	189b      	adds	r3, r3, r2
 8013eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	00da      	lsls	r2, r3, #3
 8013eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ebc:	18d3      	adds	r3, r2, r3
 8013ebe:	4a93      	ldr	r2, [pc, #588]	@ (801410c <USB_EPStartXfer+0x748>)
 8013ec0:	4694      	mov	ip, r2
 8013ec2:	4463      	add	r3, ip
 8013ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ec6:	1d7b      	adds	r3, r7, #5
 8013ec8:	33ff      	adds	r3, #255	@ 0xff
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	b29a      	uxth	r2, r3
 8013ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ed0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013ed2:	2076      	movs	r0, #118	@ 0x76
 8013ed4:	183b      	adds	r3, r7, r0
 8013ed6:	683a      	ldr	r2, [r7, #0]
 8013ed8:	8912      	ldrh	r2, [r2, #8]
 8013eda:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	6959      	ldr	r1, [r3, #20]
 8013ee0:	1d7b      	adds	r3, r7, #5
 8013ee2:	33ff      	adds	r3, #255	@ 0xff
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	b29c      	uxth	r4, r3
 8013ee8:	183b      	adds	r3, r7, r0
 8013eea:	881a      	ldrh	r2, [r3, #0]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	0023      	movs	r3, r4
 8013ef0:	f000 ffda 	bl	8014ea8 <USB_WritePMA>
            ep->xfer_buff += len;
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	695a      	ldr	r2, [r3, #20]
 8013ef8:	1d7b      	adds	r3, r7, #5
 8013efa:	33ff      	adds	r3, #255	@ 0xff
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	18d2      	adds	r2, r2, r3
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	6a1a      	ldr	r2, [r3, #32]
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	691b      	ldr	r3, [r3, #16]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d908      	bls.n	8013f22 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	6a1a      	ldr	r2, [r3, #32]
 8013f14:	1d7b      	adds	r3, r7, #5
 8013f16:	33ff      	adds	r3, #255	@ 0xff
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	1ad2      	subs	r2, r2, r3
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	621a      	str	r2, [r3, #32]
 8013f20:	e007      	b.n	8013f32 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	6a1b      	ldr	r3, [r3, #32]
 8013f26:	1d7a      	adds	r2, r7, #5
 8013f28:	32ff      	adds	r2, #255	@ 0xff
 8013f2a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	785b      	ldrb	r3, [r3, #1]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d000      	beq.n	8013f40 <USB_EPStartXfer+0x57c>
 8013f3e:	e070      	b.n	8014022 <USB_EPStartXfer+0x65e>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2250      	movs	r2, #80	@ 0x50
 8013f48:	5a9b      	ldrh	r3, [r3, r2]
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	001a      	movs	r2, r3
 8013f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f50:	189b      	adds	r3, r3, r2
 8013f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	00da      	lsls	r2, r3, #3
 8013f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f5c:	18d3      	adds	r3, r2, r3
 8013f5e:	4a6d      	ldr	r2, [pc, #436]	@ (8014114 <USB_EPStartXfer+0x750>)
 8013f60:	4694      	mov	ip, r2
 8013f62:	4463      	add	r3, ip
 8013f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f68:	881b      	ldrh	r3, [r3, #0]
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	059b      	lsls	r3, r3, #22
 8013f6e:	0d9b      	lsrs	r3, r3, #22
 8013f70:	b29a      	uxth	r2, r3
 8013f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f74:	801a      	strh	r2, [r3, #0]
 8013f76:	1d7b      	adds	r3, r7, #5
 8013f78:	33ff      	adds	r3, #255	@ 0xff
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f7e:	d922      	bls.n	8013fc6 <USB_EPStartXfer+0x602>
 8013f80:	1d7b      	adds	r3, r7, #5
 8013f82:	33ff      	adds	r3, #255	@ 0xff
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	095b      	lsrs	r3, r3, #5
 8013f88:	21f4      	movs	r1, #244	@ 0xf4
 8013f8a:	187a      	adds	r2, r7, r1
 8013f8c:	6013      	str	r3, [r2, #0]
 8013f8e:	1d7b      	adds	r3, r7, #5
 8013f90:	33ff      	adds	r3, #255	@ 0xff
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	221f      	movs	r2, #31
 8013f96:	4013      	ands	r3, r2
 8013f98:	d104      	bne.n	8013fa4 <USB_EPStartXfer+0x5e0>
 8013f9a:	187b      	adds	r3, r7, r1
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	187a      	adds	r2, r7, r1
 8013fa2:	6013      	str	r3, [r2, #0]
 8013fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fa6:	881b      	ldrh	r3, [r3, #0]
 8013fa8:	b29a      	uxth	r2, r3
 8013faa:	23f4      	movs	r3, #244	@ 0xf4
 8013fac:	18fb      	adds	r3, r7, r3
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	b29b      	uxth	r3, r3
 8013fb2:	029b      	lsls	r3, r3, #10
 8013fb4:	b29b      	uxth	r3, r3
 8013fb6:	4313      	orrs	r3, r2
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	4a55      	ldr	r2, [pc, #340]	@ (8014110 <USB_EPStartXfer+0x74c>)
 8013fbc:	4313      	orrs	r3, r2
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fc2:	801a      	strh	r2, [r3, #0]
 8013fc4:	e048      	b.n	8014058 <USB_EPStartXfer+0x694>
 8013fc6:	1d7b      	adds	r3, r7, #5
 8013fc8:	33ff      	adds	r3, #255	@ 0xff
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d108      	bne.n	8013fe2 <USB_EPStartXfer+0x61e>
 8013fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fd2:	881b      	ldrh	r3, [r3, #0]
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8014110 <USB_EPStartXfer+0x74c>)
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fde:	801a      	strh	r2, [r3, #0]
 8013fe0:	e03a      	b.n	8014058 <USB_EPStartXfer+0x694>
 8013fe2:	1d7b      	adds	r3, r7, #5
 8013fe4:	33ff      	adds	r3, #255	@ 0xff
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	085b      	lsrs	r3, r3, #1
 8013fea:	21f4      	movs	r1, #244	@ 0xf4
 8013fec:	187a      	adds	r2, r7, r1
 8013fee:	6013      	str	r3, [r2, #0]
 8013ff0:	1d7b      	adds	r3, r7, #5
 8013ff2:	33ff      	adds	r3, #255	@ 0xff
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	4013      	ands	r3, r2
 8013ffa:	d004      	beq.n	8014006 <USB_EPStartXfer+0x642>
 8013ffc:	187b      	adds	r3, r7, r1
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	3301      	adds	r3, #1
 8014002:	187a      	adds	r2, r7, r1
 8014004:	6013      	str	r3, [r2, #0]
 8014006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014008:	881b      	ldrh	r3, [r3, #0]
 801400a:	b29a      	uxth	r2, r3
 801400c:	23f4      	movs	r3, #244	@ 0xf4
 801400e:	18fb      	adds	r3, r7, r3
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	b29b      	uxth	r3, r3
 8014014:	029b      	lsls	r3, r3, #10
 8014016:	b29b      	uxth	r3, r3
 8014018:	4313      	orrs	r3, r2
 801401a:	b29a      	uxth	r2, r3
 801401c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801401e:	801a      	strh	r2, [r3, #0]
 8014020:	e01a      	b.n	8014058 <USB_EPStartXfer+0x694>
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	785b      	ldrb	r3, [r3, #1]
 8014026:	2b01      	cmp	r3, #1
 8014028:	d116      	bne.n	8014058 <USB_EPStartXfer+0x694>
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2250      	movs	r2, #80	@ 0x50
 801402e:	5a9b      	ldrh	r3, [r3, r2]
 8014030:	b29b      	uxth	r3, r3
 8014032:	001a      	movs	r2, r3
 8014034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014036:	189b      	adds	r3, r3, r2
 8014038:	643b      	str	r3, [r7, #64]	@ 0x40
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	00da      	lsls	r2, r3, #3
 8014040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014042:	18d3      	adds	r3, r2, r3
 8014044:	4a33      	ldr	r2, [pc, #204]	@ (8014114 <USB_EPStartXfer+0x750>)
 8014046:	4694      	mov	ip, r2
 8014048:	4463      	add	r3, ip
 801404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801404c:	1d7b      	adds	r3, r7, #5
 801404e:	33ff      	adds	r3, #255	@ 0xff
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	b29a      	uxth	r2, r3
 8014054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014056:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8014058:	2076      	movs	r0, #118	@ 0x76
 801405a:	183b      	adds	r3, r7, r0
 801405c:	683a      	ldr	r2, [r7, #0]
 801405e:	8952      	ldrh	r2, [r2, #10]
 8014060:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	6959      	ldr	r1, [r3, #20]
 8014066:	1d7b      	adds	r3, r7, #5
 8014068:	33ff      	adds	r3, #255	@ 0xff
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	b29c      	uxth	r4, r3
 801406e:	183b      	adds	r3, r7, r0
 8014070:	881a      	ldrh	r2, [r3, #0]
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	0023      	movs	r3, r4
 8014076:	f000 ff17 	bl	8014ea8 <USB_WritePMA>
 801407a:	e1b6      	b.n	80143ea <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	6a1b      	ldr	r3, [r3, #32]
 8014080:	1d7a      	adds	r2, r7, #5
 8014082:	32ff      	adds	r2, #255	@ 0xff
 8014084:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	009b      	lsls	r3, r3, #2
 801408e:	18d3      	adds	r3, r2, r3
 8014090:	881b      	ldrh	r3, [r3, #0]
 8014092:	b29a      	uxth	r2, r3
 8014094:	2062      	movs	r0, #98	@ 0x62
 8014096:	183b      	adds	r3, r7, r0
 8014098:	491f      	ldr	r1, [pc, #124]	@ (8014118 <USB_EPStartXfer+0x754>)
 801409a:	400a      	ands	r2, r1
 801409c:	801a      	strh	r2, [r3, #0]
 801409e:	687a      	ldr	r2, [r7, #4]
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	18d3      	adds	r3, r2, r3
 80140a8:	183a      	adds	r2, r7, r0
 80140aa:	8812      	ldrh	r2, [r2, #0]
 80140ac:	491b      	ldr	r1, [pc, #108]	@ (801411c <USB_EPStartXfer+0x758>)
 80140ae:	430a      	orrs	r2, r1
 80140b0:	b292      	uxth	r2, r2
 80140b2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2250      	movs	r2, #80	@ 0x50
 80140bc:	5a9b      	ldrh	r3, [r3, r2]
 80140be:	b29b      	uxth	r3, r3
 80140c0:	001a      	movs	r2, r3
 80140c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140c4:	189b      	adds	r3, r3, r2
 80140c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	00da      	lsls	r2, r3, #3
 80140ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140d0:	18d3      	adds	r3, r2, r3
 80140d2:	4a0e      	ldr	r2, [pc, #56]	@ (801410c <USB_EPStartXfer+0x748>)
 80140d4:	4694      	mov	ip, r2
 80140d6:	4463      	add	r3, ip
 80140d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80140da:	1d7b      	adds	r3, r7, #5
 80140dc:	33ff      	adds	r3, #255	@ 0xff
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80140e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80140e6:	2076      	movs	r0, #118	@ 0x76
 80140e8:	183b      	adds	r3, r7, r0
 80140ea:	683a      	ldr	r2, [r7, #0]
 80140ec:	8912      	ldrh	r2, [r2, #8]
 80140ee:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	6959      	ldr	r1, [r3, #20]
 80140f4:	1d7b      	adds	r3, r7, #5
 80140f6:	33ff      	adds	r3, #255	@ 0xff
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	b29c      	uxth	r4, r3
 80140fc:	183b      	adds	r3, r7, r0
 80140fe:	881a      	ldrh	r2, [r3, #0]
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	0023      	movs	r3, r4
 8014104:	f000 fed0 	bl	8014ea8 <USB_WritePMA>
 8014108:	e16f      	b.n	80143ea <USB_EPStartXfer+0xa26>
 801410a:	46c0      	nop			@ (mov r8, r8)
 801410c:	00000402 	.word	0x00000402
 8014110:	ffff8000 	.word	0xffff8000
 8014114:	00000406 	.word	0x00000406
 8014118:	ffff8e8f 	.word	0xffff8e8f
 801411c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	6a1a      	ldr	r2, [r3, #32]
 8014124:	1d7b      	adds	r3, r7, #5
 8014126:	33ff      	adds	r3, #255	@ 0xff
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	1ad2      	subs	r2, r2, r3
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	009b      	lsls	r3, r3, #2
 8014138:	18d3      	adds	r3, r2, r3
 801413a:	881b      	ldrh	r3, [r3, #0]
 801413c:	b29b      	uxth	r3, r3
 801413e:	001a      	movs	r2, r3
 8014140:	2340      	movs	r3, #64	@ 0x40
 8014142:	4013      	ands	r3, r2
 8014144:	d100      	bne.n	8014148 <USB_EPStartXfer+0x784>
 8014146:	e0a4      	b.n	8014292 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	673b      	str	r3, [r7, #112]	@ 0x70
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	785b      	ldrb	r3, [r3, #1]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d000      	beq.n	8014156 <USB_EPStartXfer+0x792>
 8014154:	e070      	b.n	8014238 <USB_EPStartXfer+0x874>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	66bb      	str	r3, [r7, #104]	@ 0x68
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2250      	movs	r2, #80	@ 0x50
 801415e:	5a9b      	ldrh	r3, [r3, r2]
 8014160:	b29b      	uxth	r3, r3
 8014162:	001a      	movs	r2, r3
 8014164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014166:	189b      	adds	r3, r3, r2
 8014168:	66bb      	str	r3, [r7, #104]	@ 0x68
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	00da      	lsls	r2, r3, #3
 8014170:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014172:	18d3      	adds	r3, r2, r3
 8014174:	4abc      	ldr	r2, [pc, #752]	@ (8014468 <USB_EPStartXfer+0xaa4>)
 8014176:	4694      	mov	ip, r2
 8014178:	4463      	add	r3, ip
 801417a:	667b      	str	r3, [r7, #100]	@ 0x64
 801417c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801417e:	881b      	ldrh	r3, [r3, #0]
 8014180:	b29b      	uxth	r3, r3
 8014182:	059b      	lsls	r3, r3, #22
 8014184:	0d9b      	lsrs	r3, r3, #22
 8014186:	b29a      	uxth	r2, r3
 8014188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801418a:	801a      	strh	r2, [r3, #0]
 801418c:	1d7b      	adds	r3, r7, #5
 801418e:	33ff      	adds	r3, #255	@ 0xff
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	2b3e      	cmp	r3, #62	@ 0x3e
 8014194:	d922      	bls.n	80141dc <USB_EPStartXfer+0x818>
 8014196:	1d7b      	adds	r3, r7, #5
 8014198:	33ff      	adds	r3, #255	@ 0xff
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	095b      	lsrs	r3, r3, #5
 801419e:	21f0      	movs	r1, #240	@ 0xf0
 80141a0:	187a      	adds	r2, r7, r1
 80141a2:	6013      	str	r3, [r2, #0]
 80141a4:	1d7b      	adds	r3, r7, #5
 80141a6:	33ff      	adds	r3, #255	@ 0xff
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	221f      	movs	r2, #31
 80141ac:	4013      	ands	r3, r2
 80141ae:	d104      	bne.n	80141ba <USB_EPStartXfer+0x7f6>
 80141b0:	187b      	adds	r3, r7, r1
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	3b01      	subs	r3, #1
 80141b6:	187a      	adds	r2, r7, r1
 80141b8:	6013      	str	r3, [r2, #0]
 80141ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	b29a      	uxth	r2, r3
 80141c0:	23f0      	movs	r3, #240	@ 0xf0
 80141c2:	18fb      	adds	r3, r7, r3
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	029b      	lsls	r3, r3, #10
 80141ca:	b29b      	uxth	r3, r3
 80141cc:	4313      	orrs	r3, r2
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	4aa6      	ldr	r2, [pc, #664]	@ (801446c <USB_EPStartXfer+0xaa8>)
 80141d2:	4313      	orrs	r3, r2
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80141d8:	801a      	strh	r2, [r3, #0]
 80141da:	e048      	b.n	801426e <USB_EPStartXfer+0x8aa>
 80141dc:	1d7b      	adds	r3, r7, #5
 80141de:	33ff      	adds	r3, #255	@ 0xff
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d108      	bne.n	80141f8 <USB_EPStartXfer+0x834>
 80141e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80141e8:	881b      	ldrh	r3, [r3, #0]
 80141ea:	b29b      	uxth	r3, r3
 80141ec:	4a9f      	ldr	r2, [pc, #636]	@ (801446c <USB_EPStartXfer+0xaa8>)
 80141ee:	4313      	orrs	r3, r2
 80141f0:	b29a      	uxth	r2, r3
 80141f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80141f4:	801a      	strh	r2, [r3, #0]
 80141f6:	e03a      	b.n	801426e <USB_EPStartXfer+0x8aa>
 80141f8:	1d7b      	adds	r3, r7, #5
 80141fa:	33ff      	adds	r3, #255	@ 0xff
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	085b      	lsrs	r3, r3, #1
 8014200:	21f0      	movs	r1, #240	@ 0xf0
 8014202:	187a      	adds	r2, r7, r1
 8014204:	6013      	str	r3, [r2, #0]
 8014206:	1d7b      	adds	r3, r7, #5
 8014208:	33ff      	adds	r3, #255	@ 0xff
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2201      	movs	r2, #1
 801420e:	4013      	ands	r3, r2
 8014210:	d004      	beq.n	801421c <USB_EPStartXfer+0x858>
 8014212:	187b      	adds	r3, r7, r1
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	3301      	adds	r3, #1
 8014218:	187a      	adds	r2, r7, r1
 801421a:	6013      	str	r3, [r2, #0]
 801421c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	b29a      	uxth	r2, r3
 8014222:	23f0      	movs	r3, #240	@ 0xf0
 8014224:	18fb      	adds	r3, r7, r3
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	b29b      	uxth	r3, r3
 801422a:	029b      	lsls	r3, r3, #10
 801422c:	b29b      	uxth	r3, r3
 801422e:	4313      	orrs	r3, r2
 8014230:	b29a      	uxth	r2, r3
 8014232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014234:	801a      	strh	r2, [r3, #0]
 8014236:	e01a      	b.n	801426e <USB_EPStartXfer+0x8aa>
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	785b      	ldrb	r3, [r3, #1]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d116      	bne.n	801426e <USB_EPStartXfer+0x8aa>
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2250      	movs	r2, #80	@ 0x50
 8014244:	5a9b      	ldrh	r3, [r3, r2]
 8014246:	b29b      	uxth	r3, r3
 8014248:	001a      	movs	r2, r3
 801424a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801424c:	189b      	adds	r3, r3, r2
 801424e:	673b      	str	r3, [r7, #112]	@ 0x70
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	00da      	lsls	r2, r3, #3
 8014256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014258:	18d3      	adds	r3, r2, r3
 801425a:	4a83      	ldr	r2, [pc, #524]	@ (8014468 <USB_EPStartXfer+0xaa4>)
 801425c:	4694      	mov	ip, r2
 801425e:	4463      	add	r3, ip
 8014260:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014262:	1d7b      	adds	r3, r7, #5
 8014264:	33ff      	adds	r3, #255	@ 0xff
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	b29a      	uxth	r2, r3
 801426a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801426c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801426e:	2076      	movs	r0, #118	@ 0x76
 8014270:	183b      	adds	r3, r7, r0
 8014272:	683a      	ldr	r2, [r7, #0]
 8014274:	8952      	ldrh	r2, [r2, #10]
 8014276:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	6959      	ldr	r1, [r3, #20]
 801427c:	1d7b      	adds	r3, r7, #5
 801427e:	33ff      	adds	r3, #255	@ 0xff
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	b29c      	uxth	r4, r3
 8014284:	183b      	adds	r3, r7, r0
 8014286:	881a      	ldrh	r2, [r3, #0]
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	0023      	movs	r3, r4
 801428c:	f000 fe0c 	bl	8014ea8 <USB_WritePMA>
 8014290:	e0ab      	b.n	80143ea <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	785b      	ldrb	r3, [r3, #1]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d000      	beq.n	801429c <USB_EPStartXfer+0x8d8>
 801429a:	e070      	b.n	801437e <USB_EPStartXfer+0x9ba>
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2250      	movs	r2, #80	@ 0x50
 80142a4:	5a9b      	ldrh	r3, [r3, r2]
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	001a      	movs	r2, r3
 80142aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142ac:	189b      	adds	r3, r3, r2
 80142ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	00da      	lsls	r2, r3, #3
 80142b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142b8:	18d3      	adds	r3, r2, r3
 80142ba:	4a6d      	ldr	r2, [pc, #436]	@ (8014470 <USB_EPStartXfer+0xaac>)
 80142bc:	4694      	mov	ip, r2
 80142be:	4463      	add	r3, ip
 80142c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80142c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80142c4:	881b      	ldrh	r3, [r3, #0]
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	059b      	lsls	r3, r3, #22
 80142ca:	0d9b      	lsrs	r3, r3, #22
 80142cc:	b29a      	uxth	r2, r3
 80142ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80142d0:	801a      	strh	r2, [r3, #0]
 80142d2:	1d7b      	adds	r3, r7, #5
 80142d4:	33ff      	adds	r3, #255	@ 0xff
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80142da:	d922      	bls.n	8014322 <USB_EPStartXfer+0x95e>
 80142dc:	1d7b      	adds	r3, r7, #5
 80142de:	33ff      	adds	r3, #255	@ 0xff
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	095b      	lsrs	r3, r3, #5
 80142e4:	21ec      	movs	r1, #236	@ 0xec
 80142e6:	187a      	adds	r2, r7, r1
 80142e8:	6013      	str	r3, [r2, #0]
 80142ea:	1d7b      	adds	r3, r7, #5
 80142ec:	33ff      	adds	r3, #255	@ 0xff
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	221f      	movs	r2, #31
 80142f2:	4013      	ands	r3, r2
 80142f4:	d104      	bne.n	8014300 <USB_EPStartXfer+0x93c>
 80142f6:	187b      	adds	r3, r7, r1
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	3b01      	subs	r3, #1
 80142fc:	187a      	adds	r2, r7, r1
 80142fe:	6013      	str	r3, [r2, #0]
 8014300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014302:	881b      	ldrh	r3, [r3, #0]
 8014304:	b29a      	uxth	r2, r3
 8014306:	23ec      	movs	r3, #236	@ 0xec
 8014308:	18fb      	adds	r3, r7, r3
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	b29b      	uxth	r3, r3
 801430e:	029b      	lsls	r3, r3, #10
 8014310:	b29b      	uxth	r3, r3
 8014312:	4313      	orrs	r3, r2
 8014314:	b29b      	uxth	r3, r3
 8014316:	4a55      	ldr	r2, [pc, #340]	@ (801446c <USB_EPStartXfer+0xaa8>)
 8014318:	4313      	orrs	r3, r2
 801431a:	b29a      	uxth	r2, r3
 801431c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801431e:	801a      	strh	r2, [r3, #0]
 8014320:	e052      	b.n	80143c8 <USB_EPStartXfer+0xa04>
 8014322:	1d7b      	adds	r3, r7, #5
 8014324:	33ff      	adds	r3, #255	@ 0xff
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d108      	bne.n	801433e <USB_EPStartXfer+0x97a>
 801432c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801432e:	881b      	ldrh	r3, [r3, #0]
 8014330:	b29b      	uxth	r3, r3
 8014332:	4a4e      	ldr	r2, [pc, #312]	@ (801446c <USB_EPStartXfer+0xaa8>)
 8014334:	4313      	orrs	r3, r2
 8014336:	b29a      	uxth	r2, r3
 8014338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801433a:	801a      	strh	r2, [r3, #0]
 801433c:	e044      	b.n	80143c8 <USB_EPStartXfer+0xa04>
 801433e:	1d7b      	adds	r3, r7, #5
 8014340:	33ff      	adds	r3, #255	@ 0xff
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	085b      	lsrs	r3, r3, #1
 8014346:	21ec      	movs	r1, #236	@ 0xec
 8014348:	187a      	adds	r2, r7, r1
 801434a:	6013      	str	r3, [r2, #0]
 801434c:	1d7b      	adds	r3, r7, #5
 801434e:	33ff      	adds	r3, #255	@ 0xff
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2201      	movs	r2, #1
 8014354:	4013      	ands	r3, r2
 8014356:	d004      	beq.n	8014362 <USB_EPStartXfer+0x99e>
 8014358:	187b      	adds	r3, r7, r1
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	3301      	adds	r3, #1
 801435e:	187a      	adds	r2, r7, r1
 8014360:	6013      	str	r3, [r2, #0]
 8014362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014364:	881b      	ldrh	r3, [r3, #0]
 8014366:	b29a      	uxth	r2, r3
 8014368:	23ec      	movs	r3, #236	@ 0xec
 801436a:	18fb      	adds	r3, r7, r3
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	b29b      	uxth	r3, r3
 8014370:	029b      	lsls	r3, r3, #10
 8014372:	b29b      	uxth	r3, r3
 8014374:	4313      	orrs	r3, r2
 8014376:	b29a      	uxth	r2, r3
 8014378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801437a:	801a      	strh	r2, [r3, #0]
 801437c:	e024      	b.n	80143c8 <USB_EPStartXfer+0xa04>
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	785b      	ldrb	r3, [r3, #1]
 8014382:	2b01      	cmp	r3, #1
 8014384:	d120      	bne.n	80143c8 <USB_EPStartXfer+0xa04>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2184      	movs	r1, #132	@ 0x84
 801438a:	187a      	adds	r2, r7, r1
 801438c:	6013      	str	r3, [r2, #0]
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2250      	movs	r2, #80	@ 0x50
 8014392:	5a9b      	ldrh	r3, [r3, r2]
 8014394:	b29b      	uxth	r3, r3
 8014396:	001a      	movs	r2, r3
 8014398:	187b      	adds	r3, r7, r1
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	189b      	adds	r3, r3, r2
 801439e:	187a      	adds	r2, r7, r1
 80143a0:	6013      	str	r3, [r2, #0]
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	00da      	lsls	r2, r3, #3
 80143a8:	187b      	adds	r3, r7, r1
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	18d3      	adds	r3, r2, r3
 80143ae:	4a30      	ldr	r2, [pc, #192]	@ (8014470 <USB_EPStartXfer+0xaac>)
 80143b0:	4694      	mov	ip, r2
 80143b2:	4463      	add	r3, ip
 80143b4:	2180      	movs	r1, #128	@ 0x80
 80143b6:	187a      	adds	r2, r7, r1
 80143b8:	6013      	str	r3, [r2, #0]
 80143ba:	1d7b      	adds	r3, r7, #5
 80143bc:	33ff      	adds	r3, #255	@ 0xff
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	b29a      	uxth	r2, r3
 80143c2:	187b      	adds	r3, r7, r1
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80143c8:	2076      	movs	r0, #118	@ 0x76
 80143ca:	183b      	adds	r3, r7, r0
 80143cc:	683a      	ldr	r2, [r7, #0]
 80143ce:	8912      	ldrh	r2, [r2, #8]
 80143d0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	6959      	ldr	r1, [r3, #20]
 80143d6:	1d7b      	adds	r3, r7, #5
 80143d8:	33ff      	adds	r3, #255	@ 0xff
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	b29c      	uxth	r4, r3
 80143de:	183b      	adds	r3, r7, r0
 80143e0:	881a      	ldrh	r2, [r3, #0]
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	0023      	movs	r3, r4
 80143e6:	f000 fd5f 	bl	8014ea8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	18d3      	adds	r3, r2, r3
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	200a      	movs	r0, #10
 80143fa:	183b      	adds	r3, r7, r0
 80143fc:	491d      	ldr	r1, [pc, #116]	@ (8014474 <USB_EPStartXfer+0xab0>)
 80143fe:	400a      	ands	r2, r1
 8014400:	801a      	strh	r2, [r3, #0]
 8014402:	183b      	adds	r3, r7, r0
 8014404:	183a      	adds	r2, r7, r0
 8014406:	8812      	ldrh	r2, [r2, #0]
 8014408:	2110      	movs	r1, #16
 801440a:	404a      	eors	r2, r1
 801440c:	801a      	strh	r2, [r3, #0]
 801440e:	183b      	adds	r3, r7, r0
 8014410:	183a      	adds	r2, r7, r0
 8014412:	8812      	ldrh	r2, [r2, #0]
 8014414:	2120      	movs	r1, #32
 8014416:	404a      	eors	r2, r1
 8014418:	801a      	strh	r2, [r3, #0]
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	009b      	lsls	r3, r3, #2
 8014422:	18d3      	adds	r3, r2, r3
 8014424:	183a      	adds	r2, r7, r0
 8014426:	8812      	ldrh	r2, [r2, #0]
 8014428:	4913      	ldr	r1, [pc, #76]	@ (8014478 <USB_EPStartXfer+0xab4>)
 801442a:	430a      	orrs	r2, r1
 801442c:	b292      	uxth	r2, r2
 801442e:	801a      	strh	r2, [r3, #0]
 8014430:	f000 fbf4 	bl	8014c1c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	7b1b      	ldrb	r3, [r3, #12]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d000      	beq.n	801443e <USB_EPStartXfer+0xa7a>
 801443c:	e0a9      	b.n	8014592 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	699a      	ldr	r2, [r3, #24]
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	691b      	ldr	r3, [r3, #16]
 8014446:	429a      	cmp	r2, r3
 8014448:	d918      	bls.n	801447c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	691b      	ldr	r3, [r3, #16]
 801444e:	1d7a      	adds	r2, r7, #5
 8014450:	32ff      	adds	r2, #255	@ 0xff
 8014452:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	699a      	ldr	r2, [r3, #24]
 8014458:	1d7b      	adds	r3, r7, #5
 801445a:	33ff      	adds	r3, #255	@ 0xff
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	1ad2      	subs	r2, r2, r3
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	619a      	str	r2, [r3, #24]
 8014464:	e012      	b.n	801448c <USB_EPStartXfer+0xac8>
 8014466:	46c0      	nop			@ (mov r8, r8)
 8014468:	00000406 	.word	0x00000406
 801446c:	ffff8000 	.word	0xffff8000
 8014470:	00000402 	.word	0x00000402
 8014474:	ffff8fbf 	.word	0xffff8fbf
 8014478:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	699b      	ldr	r3, [r3, #24]
 8014480:	1d7a      	adds	r2, r7, #5
 8014482:	32ff      	adds	r2, #255	@ 0xff
 8014484:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	2200      	movs	r2, #0
 801448a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2190      	movs	r1, #144	@ 0x90
 8014490:	187a      	adds	r2, r7, r1
 8014492:	6013      	str	r3, [r2, #0]
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2250      	movs	r2, #80	@ 0x50
 8014498:	5a9b      	ldrh	r3, [r3, r2]
 801449a:	b29b      	uxth	r3, r3
 801449c:	001a      	movs	r2, r3
 801449e:	187b      	adds	r3, r7, r1
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	189b      	adds	r3, r3, r2
 80144a4:	187a      	adds	r2, r7, r1
 80144a6:	6013      	str	r3, [r2, #0]
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	00da      	lsls	r2, r3, #3
 80144ae:	187b      	adds	r3, r7, r1
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	18d3      	adds	r3, r2, r3
 80144b4:	4acf      	ldr	r2, [pc, #828]	@ (80147f4 <USB_EPStartXfer+0xe30>)
 80144b6:	4694      	mov	ip, r2
 80144b8:	4463      	add	r3, ip
 80144ba:	218c      	movs	r1, #140	@ 0x8c
 80144bc:	187a      	adds	r2, r7, r1
 80144be:	6013      	str	r3, [r2, #0]
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	881b      	ldrh	r3, [r3, #0]
 80144c6:	b29b      	uxth	r3, r3
 80144c8:	059b      	lsls	r3, r3, #22
 80144ca:	0d9b      	lsrs	r3, r3, #22
 80144cc:	b29a      	uxth	r2, r3
 80144ce:	187b      	adds	r3, r7, r1
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	801a      	strh	r2, [r3, #0]
 80144d4:	1d7b      	adds	r3, r7, #5
 80144d6:	33ff      	adds	r3, #255	@ 0xff
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b3e      	cmp	r3, #62	@ 0x3e
 80144dc:	d925      	bls.n	801452a <USB_EPStartXfer+0xb66>
 80144de:	1d7b      	adds	r3, r7, #5
 80144e0:	33ff      	adds	r3, #255	@ 0xff
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	095b      	lsrs	r3, r3, #5
 80144e6:	21e8      	movs	r1, #232	@ 0xe8
 80144e8:	187a      	adds	r2, r7, r1
 80144ea:	6013      	str	r3, [r2, #0]
 80144ec:	1d7b      	adds	r3, r7, #5
 80144ee:	33ff      	adds	r3, #255	@ 0xff
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	221f      	movs	r2, #31
 80144f4:	4013      	ands	r3, r2
 80144f6:	d104      	bne.n	8014502 <USB_EPStartXfer+0xb3e>
 80144f8:	187b      	adds	r3, r7, r1
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	3b01      	subs	r3, #1
 80144fe:	187a      	adds	r2, r7, r1
 8014500:	6013      	str	r3, [r2, #0]
 8014502:	218c      	movs	r1, #140	@ 0x8c
 8014504:	187b      	adds	r3, r7, r1
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	b29a      	uxth	r2, r3
 801450c:	23e8      	movs	r3, #232	@ 0xe8
 801450e:	18fb      	adds	r3, r7, r3
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	b29b      	uxth	r3, r3
 8014514:	029b      	lsls	r3, r3, #10
 8014516:	b29b      	uxth	r3, r3
 8014518:	4313      	orrs	r3, r2
 801451a:	b29b      	uxth	r3, r3
 801451c:	4ab6      	ldr	r2, [pc, #728]	@ (80147f8 <USB_EPStartXfer+0xe34>)
 801451e:	4313      	orrs	r3, r2
 8014520:	b29a      	uxth	r2, r3
 8014522:	187b      	adds	r3, r7, r1
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	801a      	strh	r2, [r3, #0]
 8014528:	e353      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
 801452a:	1d7b      	adds	r3, r7, #5
 801452c:	33ff      	adds	r3, #255	@ 0xff
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d10b      	bne.n	801454c <USB_EPStartXfer+0xb88>
 8014534:	218c      	movs	r1, #140	@ 0x8c
 8014536:	187b      	adds	r3, r7, r1
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	881b      	ldrh	r3, [r3, #0]
 801453c:	b29b      	uxth	r3, r3
 801453e:	4aae      	ldr	r2, [pc, #696]	@ (80147f8 <USB_EPStartXfer+0xe34>)
 8014540:	4313      	orrs	r3, r2
 8014542:	b29a      	uxth	r2, r3
 8014544:	187b      	adds	r3, r7, r1
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	801a      	strh	r2, [r3, #0]
 801454a:	e342      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
 801454c:	1d7b      	adds	r3, r7, #5
 801454e:	33ff      	adds	r3, #255	@ 0xff
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	085b      	lsrs	r3, r3, #1
 8014554:	21e8      	movs	r1, #232	@ 0xe8
 8014556:	187a      	adds	r2, r7, r1
 8014558:	6013      	str	r3, [r2, #0]
 801455a:	1d7b      	adds	r3, r7, #5
 801455c:	33ff      	adds	r3, #255	@ 0xff
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2201      	movs	r2, #1
 8014562:	4013      	ands	r3, r2
 8014564:	d004      	beq.n	8014570 <USB_EPStartXfer+0xbac>
 8014566:	187b      	adds	r3, r7, r1
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	3301      	adds	r3, #1
 801456c:	187a      	adds	r2, r7, r1
 801456e:	6013      	str	r3, [r2, #0]
 8014570:	218c      	movs	r1, #140	@ 0x8c
 8014572:	187b      	adds	r3, r7, r1
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	b29a      	uxth	r2, r3
 801457a:	23e8      	movs	r3, #232	@ 0xe8
 801457c:	18fb      	adds	r3, r7, r3
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	b29b      	uxth	r3, r3
 8014582:	029b      	lsls	r3, r3, #10
 8014584:	b29b      	uxth	r3, r3
 8014586:	4313      	orrs	r3, r2
 8014588:	b29a      	uxth	r2, r3
 801458a:	187b      	adds	r3, r7, r1
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	801a      	strh	r2, [r3, #0]
 8014590:	e31f      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	78db      	ldrb	r3, [r3, #3]
 8014596:	2b02      	cmp	r3, #2
 8014598:	d000      	beq.n	801459c <USB_EPStartXfer+0xbd8>
 801459a:	e191      	b.n	80148c0 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	785b      	ldrb	r3, [r3, #1]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d000      	beq.n	80145a6 <USB_EPStartXfer+0xbe2>
 80145a4:	e07c      	b.n	80146a0 <USB_EPStartXfer+0xcdc>
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	21ac      	movs	r1, #172	@ 0xac
 80145aa:	187a      	adds	r2, r7, r1
 80145ac:	6013      	str	r3, [r2, #0]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2250      	movs	r2, #80	@ 0x50
 80145b2:	5a9b      	ldrh	r3, [r3, r2]
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	001a      	movs	r2, r3
 80145b8:	187b      	adds	r3, r7, r1
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	189b      	adds	r3, r3, r2
 80145be:	187a      	adds	r2, r7, r1
 80145c0:	6013      	str	r3, [r2, #0]
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	00da      	lsls	r2, r3, #3
 80145c8:	187b      	adds	r3, r7, r1
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	18d3      	adds	r3, r2, r3
 80145ce:	4a8b      	ldr	r2, [pc, #556]	@ (80147fc <USB_EPStartXfer+0xe38>)
 80145d0:	4694      	mov	ip, r2
 80145d2:	4463      	add	r3, ip
 80145d4:	21a8      	movs	r1, #168	@ 0xa8
 80145d6:	187a      	adds	r2, r7, r1
 80145d8:	6013      	str	r3, [r2, #0]
 80145da:	187b      	adds	r3, r7, r1
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	881b      	ldrh	r3, [r3, #0]
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	059b      	lsls	r3, r3, #22
 80145e4:	0d9b      	lsrs	r3, r3, #22
 80145e6:	b29a      	uxth	r2, r3
 80145e8:	187b      	adds	r3, r7, r1
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	801a      	strh	r2, [r3, #0]
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	691b      	ldr	r3, [r3, #16]
 80145f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80145f4:	d923      	bls.n	801463e <USB_EPStartXfer+0xc7a>
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	691b      	ldr	r3, [r3, #16]
 80145fa:	095b      	lsrs	r3, r3, #5
 80145fc:	21e4      	movs	r1, #228	@ 0xe4
 80145fe:	187a      	adds	r2, r7, r1
 8014600:	6013      	str	r3, [r2, #0]
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	691b      	ldr	r3, [r3, #16]
 8014606:	221f      	movs	r2, #31
 8014608:	4013      	ands	r3, r2
 801460a:	d104      	bne.n	8014616 <USB_EPStartXfer+0xc52>
 801460c:	187b      	adds	r3, r7, r1
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	3b01      	subs	r3, #1
 8014612:	187a      	adds	r2, r7, r1
 8014614:	6013      	str	r3, [r2, #0]
 8014616:	21a8      	movs	r1, #168	@ 0xa8
 8014618:	187b      	adds	r3, r7, r1
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	881b      	ldrh	r3, [r3, #0]
 801461e:	b29a      	uxth	r2, r3
 8014620:	23e4      	movs	r3, #228	@ 0xe4
 8014622:	18fb      	adds	r3, r7, r3
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	b29b      	uxth	r3, r3
 8014628:	029b      	lsls	r3, r3, #10
 801462a:	b29b      	uxth	r3, r3
 801462c:	4313      	orrs	r3, r2
 801462e:	b29b      	uxth	r3, r3
 8014630:	4a71      	ldr	r2, [pc, #452]	@ (80147f8 <USB_EPStartXfer+0xe34>)
 8014632:	4313      	orrs	r3, r2
 8014634:	b29a      	uxth	r2, r3
 8014636:	187b      	adds	r3, r7, r1
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	801a      	strh	r2, [r3, #0]
 801463c:	e054      	b.n	80146e8 <USB_EPStartXfer+0xd24>
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	691b      	ldr	r3, [r3, #16]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d10b      	bne.n	801465e <USB_EPStartXfer+0xc9a>
 8014646:	21a8      	movs	r1, #168	@ 0xa8
 8014648:	187b      	adds	r3, r7, r1
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	881b      	ldrh	r3, [r3, #0]
 801464e:	b29b      	uxth	r3, r3
 8014650:	4a69      	ldr	r2, [pc, #420]	@ (80147f8 <USB_EPStartXfer+0xe34>)
 8014652:	4313      	orrs	r3, r2
 8014654:	b29a      	uxth	r2, r3
 8014656:	187b      	adds	r3, r7, r1
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	801a      	strh	r2, [r3, #0]
 801465c:	e044      	b.n	80146e8 <USB_EPStartXfer+0xd24>
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	691b      	ldr	r3, [r3, #16]
 8014662:	085b      	lsrs	r3, r3, #1
 8014664:	21e4      	movs	r1, #228	@ 0xe4
 8014666:	187a      	adds	r2, r7, r1
 8014668:	6013      	str	r3, [r2, #0]
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	2201      	movs	r2, #1
 8014670:	4013      	ands	r3, r2
 8014672:	d004      	beq.n	801467e <USB_EPStartXfer+0xcba>
 8014674:	187b      	adds	r3, r7, r1
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	3301      	adds	r3, #1
 801467a:	187a      	adds	r2, r7, r1
 801467c:	6013      	str	r3, [r2, #0]
 801467e:	21a8      	movs	r1, #168	@ 0xa8
 8014680:	187b      	adds	r3, r7, r1
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	881b      	ldrh	r3, [r3, #0]
 8014686:	b29a      	uxth	r2, r3
 8014688:	23e4      	movs	r3, #228	@ 0xe4
 801468a:	18fb      	adds	r3, r7, r3
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	b29b      	uxth	r3, r3
 8014690:	029b      	lsls	r3, r3, #10
 8014692:	b29b      	uxth	r3, r3
 8014694:	4313      	orrs	r3, r2
 8014696:	b29a      	uxth	r2, r3
 8014698:	187b      	adds	r3, r7, r1
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	801a      	strh	r2, [r3, #0]
 801469e:	e023      	b.n	80146e8 <USB_EPStartXfer+0xd24>
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	785b      	ldrb	r3, [r3, #1]
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d11f      	bne.n	80146e8 <USB_EPStartXfer+0xd24>
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	21b4      	movs	r1, #180	@ 0xb4
 80146ac:	187a      	adds	r2, r7, r1
 80146ae:	6013      	str	r3, [r2, #0]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2250      	movs	r2, #80	@ 0x50
 80146b4:	5a9b      	ldrh	r3, [r3, r2]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	001a      	movs	r2, r3
 80146ba:	187b      	adds	r3, r7, r1
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	189b      	adds	r3, r3, r2
 80146c0:	187a      	adds	r2, r7, r1
 80146c2:	6013      	str	r3, [r2, #0]
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	00da      	lsls	r2, r3, #3
 80146ca:	187b      	adds	r3, r7, r1
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	18d3      	adds	r3, r2, r3
 80146d0:	4a4a      	ldr	r2, [pc, #296]	@ (80147fc <USB_EPStartXfer+0xe38>)
 80146d2:	4694      	mov	ip, r2
 80146d4:	4463      	add	r3, ip
 80146d6:	21b0      	movs	r1, #176	@ 0xb0
 80146d8:	187a      	adds	r2, r7, r1
 80146da:	6013      	str	r3, [r2, #0]
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	691b      	ldr	r3, [r3, #16]
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	187b      	adds	r3, r7, r1
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	801a      	strh	r2, [r3, #0]
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	22a4      	movs	r2, #164	@ 0xa4
 80146ec:	18ba      	adds	r2, r7, r2
 80146ee:	6013      	str	r3, [r2, #0]
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	785b      	ldrb	r3, [r3, #1]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d000      	beq.n	80146fa <USB_EPStartXfer+0xd36>
 80146f8:	e082      	b.n	8014800 <USB_EPStartXfer+0xe3c>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	219c      	movs	r1, #156	@ 0x9c
 80146fe:	187a      	adds	r2, r7, r1
 8014700:	6013      	str	r3, [r2, #0]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2250      	movs	r2, #80	@ 0x50
 8014706:	5a9b      	ldrh	r3, [r3, r2]
 8014708:	b29b      	uxth	r3, r3
 801470a:	001a      	movs	r2, r3
 801470c:	187b      	adds	r3, r7, r1
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	189b      	adds	r3, r3, r2
 8014712:	187a      	adds	r2, r7, r1
 8014714:	6013      	str	r3, [r2, #0]
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	00da      	lsls	r2, r3, #3
 801471c:	187b      	adds	r3, r7, r1
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	18d3      	adds	r3, r2, r3
 8014722:	4a34      	ldr	r2, [pc, #208]	@ (80147f4 <USB_EPStartXfer+0xe30>)
 8014724:	4694      	mov	ip, r2
 8014726:	4463      	add	r3, ip
 8014728:	2198      	movs	r1, #152	@ 0x98
 801472a:	187a      	adds	r2, r7, r1
 801472c:	6013      	str	r3, [r2, #0]
 801472e:	187b      	adds	r3, r7, r1
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	881b      	ldrh	r3, [r3, #0]
 8014734:	b29b      	uxth	r3, r3
 8014736:	059b      	lsls	r3, r3, #22
 8014738:	0d9b      	lsrs	r3, r3, #22
 801473a:	b29a      	uxth	r2, r3
 801473c:	187b      	adds	r3, r7, r1
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	801a      	strh	r2, [r3, #0]
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	691b      	ldr	r3, [r3, #16]
 8014746:	2b3e      	cmp	r3, #62	@ 0x3e
 8014748:	d923      	bls.n	8014792 <USB_EPStartXfer+0xdce>
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	691b      	ldr	r3, [r3, #16]
 801474e:	095b      	lsrs	r3, r3, #5
 8014750:	21e0      	movs	r1, #224	@ 0xe0
 8014752:	187a      	adds	r2, r7, r1
 8014754:	6013      	str	r3, [r2, #0]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	691b      	ldr	r3, [r3, #16]
 801475a:	221f      	movs	r2, #31
 801475c:	4013      	ands	r3, r2
 801475e:	d104      	bne.n	801476a <USB_EPStartXfer+0xda6>
 8014760:	187b      	adds	r3, r7, r1
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	3b01      	subs	r3, #1
 8014766:	187a      	adds	r2, r7, r1
 8014768:	6013      	str	r3, [r2, #0]
 801476a:	2198      	movs	r1, #152	@ 0x98
 801476c:	187b      	adds	r3, r7, r1
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	881b      	ldrh	r3, [r3, #0]
 8014772:	b29a      	uxth	r2, r3
 8014774:	23e0      	movs	r3, #224	@ 0xe0
 8014776:	18fb      	adds	r3, r7, r3
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	b29b      	uxth	r3, r3
 801477c:	029b      	lsls	r3, r3, #10
 801477e:	b29b      	uxth	r3, r3
 8014780:	4313      	orrs	r3, r2
 8014782:	b29b      	uxth	r3, r3
 8014784:	4a1c      	ldr	r2, [pc, #112]	@ (80147f8 <USB_EPStartXfer+0xe34>)
 8014786:	4313      	orrs	r3, r2
 8014788:	b29a      	uxth	r2, r3
 801478a:	187b      	adds	r3, r7, r1
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	801a      	strh	r2, [r3, #0]
 8014790:	e057      	b.n	8014842 <USB_EPStartXfer+0xe7e>
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	691b      	ldr	r3, [r3, #16]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d10b      	bne.n	80147b2 <USB_EPStartXfer+0xdee>
 801479a:	2198      	movs	r1, #152	@ 0x98
 801479c:	187b      	adds	r3, r7, r1
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	4a14      	ldr	r2, [pc, #80]	@ (80147f8 <USB_EPStartXfer+0xe34>)
 80147a6:	4313      	orrs	r3, r2
 80147a8:	b29a      	uxth	r2, r3
 80147aa:	187b      	adds	r3, r7, r1
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	801a      	strh	r2, [r3, #0]
 80147b0:	e047      	b.n	8014842 <USB_EPStartXfer+0xe7e>
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	691b      	ldr	r3, [r3, #16]
 80147b6:	085b      	lsrs	r3, r3, #1
 80147b8:	21e0      	movs	r1, #224	@ 0xe0
 80147ba:	187a      	adds	r2, r7, r1
 80147bc:	6013      	str	r3, [r2, #0]
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	691b      	ldr	r3, [r3, #16]
 80147c2:	2201      	movs	r2, #1
 80147c4:	4013      	ands	r3, r2
 80147c6:	d004      	beq.n	80147d2 <USB_EPStartXfer+0xe0e>
 80147c8:	187b      	adds	r3, r7, r1
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	3301      	adds	r3, #1
 80147ce:	187a      	adds	r2, r7, r1
 80147d0:	6013      	str	r3, [r2, #0]
 80147d2:	2198      	movs	r1, #152	@ 0x98
 80147d4:	187b      	adds	r3, r7, r1
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	b29a      	uxth	r2, r3
 80147dc:	23e0      	movs	r3, #224	@ 0xe0
 80147de:	18fb      	adds	r3, r7, r3
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	b29b      	uxth	r3, r3
 80147e4:	029b      	lsls	r3, r3, #10
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	4313      	orrs	r3, r2
 80147ea:	b29a      	uxth	r2, r3
 80147ec:	187b      	adds	r3, r7, r1
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	801a      	strh	r2, [r3, #0]
 80147f2:	e026      	b.n	8014842 <USB_EPStartXfer+0xe7e>
 80147f4:	00000406 	.word	0x00000406
 80147f8:	ffff8000 	.word	0xffff8000
 80147fc:	00000402 	.word	0x00000402
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	785b      	ldrb	r3, [r3, #1]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d11c      	bne.n	8014842 <USB_EPStartXfer+0xe7e>
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2250      	movs	r2, #80	@ 0x50
 801480c:	5a9b      	ldrh	r3, [r3, r2]
 801480e:	b29b      	uxth	r3, r3
 8014810:	001a      	movs	r2, r3
 8014812:	21a4      	movs	r1, #164	@ 0xa4
 8014814:	187b      	adds	r3, r7, r1
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	189b      	adds	r3, r3, r2
 801481a:	187a      	adds	r2, r7, r1
 801481c:	6013      	str	r3, [r2, #0]
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	00da      	lsls	r2, r3, #3
 8014824:	187b      	adds	r3, r7, r1
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	18d3      	adds	r3, r2, r3
 801482a:	4ad2      	ldr	r2, [pc, #840]	@ (8014b74 <USB_EPStartXfer+0x11b0>)
 801482c:	4694      	mov	ip, r2
 801482e:	4463      	add	r3, ip
 8014830:	21a0      	movs	r1, #160	@ 0xa0
 8014832:	187a      	adds	r2, r7, r1
 8014834:	6013      	str	r3, [r2, #0]
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	691b      	ldr	r3, [r3, #16]
 801483a:	b29a      	uxth	r2, r3
 801483c:	187b      	adds	r3, r7, r1
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	69db      	ldr	r3, [r3, #28]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d100      	bne.n	801484c <USB_EPStartXfer+0xe88>
 801484a:	e1c2      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	781b      	ldrb	r3, [r3, #0]
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	18d2      	adds	r2, r2, r3
 8014856:	2196      	movs	r1, #150	@ 0x96
 8014858:	187b      	adds	r3, r7, r1
 801485a:	8812      	ldrh	r2, [r2, #0]
 801485c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801485e:	187b      	adds	r3, r7, r1
 8014860:	881a      	ldrh	r2, [r3, #0]
 8014862:	2380      	movs	r3, #128	@ 0x80
 8014864:	01db      	lsls	r3, r3, #7
 8014866:	4013      	ands	r3, r2
 8014868:	d004      	beq.n	8014874 <USB_EPStartXfer+0xeb0>
 801486a:	187b      	adds	r3, r7, r1
 801486c:	881b      	ldrh	r3, [r3, #0]
 801486e:	2240      	movs	r2, #64	@ 0x40
 8014870:	4013      	ands	r3, r2
 8014872:	d10d      	bne.n	8014890 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014874:	2196      	movs	r1, #150	@ 0x96
 8014876:	187b      	adds	r3, r7, r1
 8014878:	881a      	ldrh	r2, [r3, #0]
 801487a:	2380      	movs	r3, #128	@ 0x80
 801487c:	01db      	lsls	r3, r3, #7
 801487e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014880:	d000      	beq.n	8014884 <USB_EPStartXfer+0xec0>
 8014882:	e1a6      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014884:	187b      	adds	r3, r7, r1
 8014886:	881b      	ldrh	r3, [r3, #0]
 8014888:	2240      	movs	r2, #64	@ 0x40
 801488a:	4013      	ands	r3, r2
 801488c:	d000      	beq.n	8014890 <USB_EPStartXfer+0xecc>
 801488e:	e1a0      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	781b      	ldrb	r3, [r3, #0]
 8014896:	009b      	lsls	r3, r3, #2
 8014898:	18d3      	adds	r3, r2, r3
 801489a:	881b      	ldrh	r3, [r3, #0]
 801489c:	b29a      	uxth	r2, r3
 801489e:	2094      	movs	r0, #148	@ 0x94
 80148a0:	183b      	adds	r3, r7, r0
 80148a2:	49b5      	ldr	r1, [pc, #724]	@ (8014b78 <USB_EPStartXfer+0x11b4>)
 80148a4:	400a      	ands	r2, r1
 80148a6:	801a      	strh	r2, [r3, #0]
 80148a8:	687a      	ldr	r2, [r7, #4]
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	18d3      	adds	r3, r2, r3
 80148b2:	183a      	adds	r2, r7, r0
 80148b4:	8812      	ldrh	r2, [r2, #0]
 80148b6:	49b1      	ldr	r1, [pc, #708]	@ (8014b7c <USB_EPStartXfer+0x11b8>)
 80148b8:	430a      	orrs	r2, r1
 80148ba:	b292      	uxth	r2, r2
 80148bc:	801a      	strh	r2, [r3, #0]
 80148be:	e188      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	78db      	ldrb	r3, [r3, #3]
 80148c4:	2b01      	cmp	r3, #1
 80148c6:	d000      	beq.n	80148ca <USB_EPStartXfer+0xf06>
 80148c8:	e181      	b.n	8014bce <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	699a      	ldr	r2, [r3, #24]
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	691b      	ldr	r3, [r3, #16]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d90d      	bls.n	80148f2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	691b      	ldr	r3, [r3, #16]
 80148da:	1d7a      	adds	r2, r7, #5
 80148dc:	32ff      	adds	r2, #255	@ 0xff
 80148de:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	699a      	ldr	r2, [r3, #24]
 80148e4:	1d7b      	adds	r3, r7, #5
 80148e6:	33ff      	adds	r3, #255	@ 0xff
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	1ad2      	subs	r2, r2, r3
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	619a      	str	r2, [r3, #24]
 80148f0:	e007      	b.n	8014902 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	699b      	ldr	r3, [r3, #24]
 80148f6:	1d7a      	adds	r2, r7, #5
 80148f8:	32ff      	adds	r2, #255	@ 0xff
 80148fa:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	2200      	movs	r2, #0
 8014900:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	785b      	ldrb	r3, [r3, #1]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d000      	beq.n	801490c <USB_EPStartXfer+0xf48>
 801490a:	e082      	b.n	8014a12 <USB_EPStartXfer+0x104e>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	21cc      	movs	r1, #204	@ 0xcc
 8014910:	187a      	adds	r2, r7, r1
 8014912:	6013      	str	r3, [r2, #0]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2250      	movs	r2, #80	@ 0x50
 8014918:	5a9b      	ldrh	r3, [r3, r2]
 801491a:	b29b      	uxth	r3, r3
 801491c:	001a      	movs	r2, r3
 801491e:	187b      	adds	r3, r7, r1
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	189b      	adds	r3, r3, r2
 8014924:	187a      	adds	r2, r7, r1
 8014926:	6013      	str	r3, [r2, #0]
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	00da      	lsls	r2, r3, #3
 801492e:	187b      	adds	r3, r7, r1
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	18d3      	adds	r3, r2, r3
 8014934:	4a92      	ldr	r2, [pc, #584]	@ (8014b80 <USB_EPStartXfer+0x11bc>)
 8014936:	4694      	mov	ip, r2
 8014938:	4463      	add	r3, ip
 801493a:	21c8      	movs	r1, #200	@ 0xc8
 801493c:	187a      	adds	r2, r7, r1
 801493e:	6013      	str	r3, [r2, #0]
 8014940:	187b      	adds	r3, r7, r1
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	881b      	ldrh	r3, [r3, #0]
 8014946:	b29b      	uxth	r3, r3
 8014948:	059b      	lsls	r3, r3, #22
 801494a:	0d9b      	lsrs	r3, r3, #22
 801494c:	b29a      	uxth	r2, r3
 801494e:	187b      	adds	r3, r7, r1
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	801a      	strh	r2, [r3, #0]
 8014954:	1d7b      	adds	r3, r7, #5
 8014956:	33ff      	adds	r3, #255	@ 0xff
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	2b3e      	cmp	r3, #62	@ 0x3e
 801495c:	d925      	bls.n	80149aa <USB_EPStartXfer+0xfe6>
 801495e:	1d7b      	adds	r3, r7, #5
 8014960:	33ff      	adds	r3, #255	@ 0xff
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	095b      	lsrs	r3, r3, #5
 8014966:	21dc      	movs	r1, #220	@ 0xdc
 8014968:	187a      	adds	r2, r7, r1
 801496a:	6013      	str	r3, [r2, #0]
 801496c:	1d7b      	adds	r3, r7, #5
 801496e:	33ff      	adds	r3, #255	@ 0xff
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	221f      	movs	r2, #31
 8014974:	4013      	ands	r3, r2
 8014976:	d104      	bne.n	8014982 <USB_EPStartXfer+0xfbe>
 8014978:	187b      	adds	r3, r7, r1
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	3b01      	subs	r3, #1
 801497e:	187a      	adds	r2, r7, r1
 8014980:	6013      	str	r3, [r2, #0]
 8014982:	21c8      	movs	r1, #200	@ 0xc8
 8014984:	187b      	adds	r3, r7, r1
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	881b      	ldrh	r3, [r3, #0]
 801498a:	b29a      	uxth	r2, r3
 801498c:	23dc      	movs	r3, #220	@ 0xdc
 801498e:	18fb      	adds	r3, r7, r3
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	b29b      	uxth	r3, r3
 8014994:	029b      	lsls	r3, r3, #10
 8014996:	b29b      	uxth	r3, r3
 8014998:	4313      	orrs	r3, r2
 801499a:	b29b      	uxth	r3, r3
 801499c:	4a79      	ldr	r2, [pc, #484]	@ (8014b84 <USB_EPStartXfer+0x11c0>)
 801499e:	4313      	orrs	r3, r2
 80149a0:	b29a      	uxth	r2, r3
 80149a2:	187b      	adds	r3, r7, r1
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	801a      	strh	r2, [r3, #0]
 80149a8:	e058      	b.n	8014a5c <USB_EPStartXfer+0x1098>
 80149aa:	1d7b      	adds	r3, r7, #5
 80149ac:	33ff      	adds	r3, #255	@ 0xff
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d10b      	bne.n	80149cc <USB_EPStartXfer+0x1008>
 80149b4:	21c8      	movs	r1, #200	@ 0xc8
 80149b6:	187b      	adds	r3, r7, r1
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	881b      	ldrh	r3, [r3, #0]
 80149bc:	b29b      	uxth	r3, r3
 80149be:	4a71      	ldr	r2, [pc, #452]	@ (8014b84 <USB_EPStartXfer+0x11c0>)
 80149c0:	4313      	orrs	r3, r2
 80149c2:	b29a      	uxth	r2, r3
 80149c4:	187b      	adds	r3, r7, r1
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	801a      	strh	r2, [r3, #0]
 80149ca:	e047      	b.n	8014a5c <USB_EPStartXfer+0x1098>
 80149cc:	1d7b      	adds	r3, r7, #5
 80149ce:	33ff      	adds	r3, #255	@ 0xff
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	085b      	lsrs	r3, r3, #1
 80149d4:	21dc      	movs	r1, #220	@ 0xdc
 80149d6:	187a      	adds	r2, r7, r1
 80149d8:	6013      	str	r3, [r2, #0]
 80149da:	1d7b      	adds	r3, r7, #5
 80149dc:	33ff      	adds	r3, #255	@ 0xff
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	2201      	movs	r2, #1
 80149e2:	4013      	ands	r3, r2
 80149e4:	d004      	beq.n	80149f0 <USB_EPStartXfer+0x102c>
 80149e6:	187b      	adds	r3, r7, r1
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	3301      	adds	r3, #1
 80149ec:	187a      	adds	r2, r7, r1
 80149ee:	6013      	str	r3, [r2, #0]
 80149f0:	21c8      	movs	r1, #200	@ 0xc8
 80149f2:	187b      	adds	r3, r7, r1
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	23dc      	movs	r3, #220	@ 0xdc
 80149fc:	18fb      	adds	r3, r7, r3
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	029b      	lsls	r3, r3, #10
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	4313      	orrs	r3, r2
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	187b      	adds	r3, r7, r1
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	801a      	strh	r2, [r3, #0]
 8014a10:	e024      	b.n	8014a5c <USB_EPStartXfer+0x1098>
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	785b      	ldrb	r3, [r3, #1]
 8014a16:	2b01      	cmp	r3, #1
 8014a18:	d120      	bne.n	8014a5c <USB_EPStartXfer+0x1098>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	21d4      	movs	r1, #212	@ 0xd4
 8014a1e:	187a      	adds	r2, r7, r1
 8014a20:	6013      	str	r3, [r2, #0]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2250      	movs	r2, #80	@ 0x50
 8014a26:	5a9b      	ldrh	r3, [r3, r2]
 8014a28:	b29b      	uxth	r3, r3
 8014a2a:	001a      	movs	r2, r3
 8014a2c:	187b      	adds	r3, r7, r1
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	189b      	adds	r3, r3, r2
 8014a32:	187a      	adds	r2, r7, r1
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	00da      	lsls	r2, r3, #3
 8014a3c:	187b      	adds	r3, r7, r1
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	18d3      	adds	r3, r2, r3
 8014a42:	4a4f      	ldr	r2, [pc, #316]	@ (8014b80 <USB_EPStartXfer+0x11bc>)
 8014a44:	4694      	mov	ip, r2
 8014a46:	4463      	add	r3, ip
 8014a48:	21d0      	movs	r1, #208	@ 0xd0
 8014a4a:	187a      	adds	r2, r7, r1
 8014a4c:	6013      	str	r3, [r2, #0]
 8014a4e:	1d7b      	adds	r3, r7, #5
 8014a50:	33ff      	adds	r3, #255	@ 0xff
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	187b      	adds	r3, r7, r1
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	801a      	strh	r2, [r3, #0]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	22c4      	movs	r2, #196	@ 0xc4
 8014a60:	18ba      	adds	r2, r7, r2
 8014a62:	6013      	str	r3, [r2, #0]
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	785b      	ldrb	r3, [r3, #1]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d000      	beq.n	8014a6e <USB_EPStartXfer+0x10aa>
 8014a6c:	e08c      	b.n	8014b88 <USB_EPStartXfer+0x11c4>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	21bc      	movs	r1, #188	@ 0xbc
 8014a72:	187a      	adds	r2, r7, r1
 8014a74:	6013      	str	r3, [r2, #0]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2250      	movs	r2, #80	@ 0x50
 8014a7a:	5a9b      	ldrh	r3, [r3, r2]
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	001a      	movs	r2, r3
 8014a80:	187b      	adds	r3, r7, r1
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	189b      	adds	r3, r3, r2
 8014a86:	187a      	adds	r2, r7, r1
 8014a88:	6013      	str	r3, [r2, #0]
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	00da      	lsls	r2, r3, #3
 8014a90:	187b      	adds	r3, r7, r1
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	18d3      	adds	r3, r2, r3
 8014a96:	4a37      	ldr	r2, [pc, #220]	@ (8014b74 <USB_EPStartXfer+0x11b0>)
 8014a98:	4694      	mov	ip, r2
 8014a9a:	4463      	add	r3, ip
 8014a9c:	21b8      	movs	r1, #184	@ 0xb8
 8014a9e:	187a      	adds	r2, r7, r1
 8014aa0:	6013      	str	r3, [r2, #0]
 8014aa2:	187b      	adds	r3, r7, r1
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	881b      	ldrh	r3, [r3, #0]
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	059b      	lsls	r3, r3, #22
 8014aac:	0d9b      	lsrs	r3, r3, #22
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	187b      	adds	r3, r7, r1
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	801a      	strh	r2, [r3, #0]
 8014ab6:	1d7b      	adds	r3, r7, #5
 8014ab8:	33ff      	adds	r3, #255	@ 0xff
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2b3e      	cmp	r3, #62	@ 0x3e
 8014abe:	d925      	bls.n	8014b0c <USB_EPStartXfer+0x1148>
 8014ac0:	1d7b      	adds	r3, r7, #5
 8014ac2:	33ff      	adds	r3, #255	@ 0xff
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	095b      	lsrs	r3, r3, #5
 8014ac8:	21d8      	movs	r1, #216	@ 0xd8
 8014aca:	187a      	adds	r2, r7, r1
 8014acc:	6013      	str	r3, [r2, #0]
 8014ace:	1d7b      	adds	r3, r7, #5
 8014ad0:	33ff      	adds	r3, #255	@ 0xff
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	221f      	movs	r2, #31
 8014ad6:	4013      	ands	r3, r2
 8014ad8:	d104      	bne.n	8014ae4 <USB_EPStartXfer+0x1120>
 8014ada:	187b      	adds	r3, r7, r1
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	3b01      	subs	r3, #1
 8014ae0:	187a      	adds	r2, r7, r1
 8014ae2:	6013      	str	r3, [r2, #0]
 8014ae4:	21b8      	movs	r1, #184	@ 0xb8
 8014ae6:	187b      	adds	r3, r7, r1
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	881b      	ldrh	r3, [r3, #0]
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	23d8      	movs	r3, #216	@ 0xd8
 8014af0:	18fb      	adds	r3, r7, r3
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	029b      	lsls	r3, r3, #10
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	4313      	orrs	r3, r2
 8014afc:	b29b      	uxth	r3, r3
 8014afe:	4a21      	ldr	r2, [pc, #132]	@ (8014b84 <USB_EPStartXfer+0x11c0>)
 8014b00:	4313      	orrs	r3, r2
 8014b02:	b29a      	uxth	r2, r3
 8014b04:	187b      	adds	r3, r7, r1
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	801a      	strh	r2, [r3, #0]
 8014b0a:	e062      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
 8014b0c:	1d7b      	adds	r3, r7, #5
 8014b0e:	33ff      	adds	r3, #255	@ 0xff
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d10b      	bne.n	8014b2e <USB_EPStartXfer+0x116a>
 8014b16:	21b8      	movs	r1, #184	@ 0xb8
 8014b18:	187b      	adds	r3, r7, r1
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	881b      	ldrh	r3, [r3, #0]
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	4a18      	ldr	r2, [pc, #96]	@ (8014b84 <USB_EPStartXfer+0x11c0>)
 8014b22:	4313      	orrs	r3, r2
 8014b24:	b29a      	uxth	r2, r3
 8014b26:	187b      	adds	r3, r7, r1
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	801a      	strh	r2, [r3, #0]
 8014b2c:	e051      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
 8014b2e:	1d7b      	adds	r3, r7, #5
 8014b30:	33ff      	adds	r3, #255	@ 0xff
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	085b      	lsrs	r3, r3, #1
 8014b36:	21d8      	movs	r1, #216	@ 0xd8
 8014b38:	187a      	adds	r2, r7, r1
 8014b3a:	6013      	str	r3, [r2, #0]
 8014b3c:	1d7b      	adds	r3, r7, #5
 8014b3e:	33ff      	adds	r3, #255	@ 0xff
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	2201      	movs	r2, #1
 8014b44:	4013      	ands	r3, r2
 8014b46:	d004      	beq.n	8014b52 <USB_EPStartXfer+0x118e>
 8014b48:	187b      	adds	r3, r7, r1
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	187a      	adds	r2, r7, r1
 8014b50:	6013      	str	r3, [r2, #0]
 8014b52:	21b8      	movs	r1, #184	@ 0xb8
 8014b54:	187b      	adds	r3, r7, r1
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	881b      	ldrh	r3, [r3, #0]
 8014b5a:	b29a      	uxth	r2, r3
 8014b5c:	23d8      	movs	r3, #216	@ 0xd8
 8014b5e:	18fb      	adds	r3, r7, r3
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	029b      	lsls	r3, r3, #10
 8014b66:	b29b      	uxth	r3, r3
 8014b68:	4313      	orrs	r3, r2
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	187b      	adds	r3, r7, r1
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	801a      	strh	r2, [r3, #0]
 8014b72:	e02e      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
 8014b74:	00000406 	.word	0x00000406
 8014b78:	ffff8f8f 	.word	0xffff8f8f
 8014b7c:	ffff80c0 	.word	0xffff80c0
 8014b80:	00000402 	.word	0x00000402
 8014b84:	ffff8000 	.word	0xffff8000
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	785b      	ldrb	r3, [r3, #1]
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d120      	bne.n	8014bd2 <USB_EPStartXfer+0x120e>
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2250      	movs	r2, #80	@ 0x50
 8014b94:	5a9b      	ldrh	r3, [r3, r2]
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	001a      	movs	r2, r3
 8014b9a:	21c4      	movs	r1, #196	@ 0xc4
 8014b9c:	187b      	adds	r3, r7, r1
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	189b      	adds	r3, r3, r2
 8014ba2:	187a      	adds	r2, r7, r1
 8014ba4:	6013      	str	r3, [r2, #0]
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	00da      	lsls	r2, r3, #3
 8014bac:	187b      	adds	r3, r7, r1
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	18d3      	adds	r3, r2, r3
 8014bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8014c28 <USB_EPStartXfer+0x1264>)
 8014bb4:	4694      	mov	ip, r2
 8014bb6:	4463      	add	r3, ip
 8014bb8:	21c0      	movs	r1, #192	@ 0xc0
 8014bba:	187a      	adds	r2, r7, r1
 8014bbc:	6013      	str	r3, [r2, #0]
 8014bbe:	1d7b      	adds	r3, r7, #5
 8014bc0:	33ff      	adds	r3, #255	@ 0xff
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	b29a      	uxth	r2, r3
 8014bc6:	187b      	adds	r3, r7, r1
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	801a      	strh	r2, [r3, #0]
 8014bcc:	e001      	b.n	8014bd2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	e025      	b.n	8014c1e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	009b      	lsls	r3, r3, #2
 8014bda:	18d3      	adds	r3, r2, r3
 8014bdc:	881b      	ldrh	r3, [r3, #0]
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	208a      	movs	r0, #138	@ 0x8a
 8014be2:	183b      	adds	r3, r7, r0
 8014be4:	4911      	ldr	r1, [pc, #68]	@ (8014c2c <USB_EPStartXfer+0x1268>)
 8014be6:	400a      	ands	r2, r1
 8014be8:	801a      	strh	r2, [r3, #0]
 8014bea:	183b      	adds	r3, r7, r0
 8014bec:	183a      	adds	r2, r7, r0
 8014bee:	8812      	ldrh	r2, [r2, #0]
 8014bf0:	2180      	movs	r1, #128	@ 0x80
 8014bf2:	0149      	lsls	r1, r1, #5
 8014bf4:	404a      	eors	r2, r1
 8014bf6:	801a      	strh	r2, [r3, #0]
 8014bf8:	183b      	adds	r3, r7, r0
 8014bfa:	183a      	adds	r2, r7, r0
 8014bfc:	8812      	ldrh	r2, [r2, #0]
 8014bfe:	2180      	movs	r1, #128	@ 0x80
 8014c00:	0189      	lsls	r1, r1, #6
 8014c02:	404a      	eors	r2, r1
 8014c04:	801a      	strh	r2, [r3, #0]
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	009b      	lsls	r3, r3, #2
 8014c0e:	18d3      	adds	r3, r2, r3
 8014c10:	183a      	adds	r2, r7, r0
 8014c12:	8812      	ldrh	r2, [r2, #0]
 8014c14:	4906      	ldr	r1, [pc, #24]	@ (8014c30 <USB_EPStartXfer+0x126c>)
 8014c16:	430a      	orrs	r2, r1
 8014c18:	b292      	uxth	r2, r2
 8014c1a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	0018      	movs	r0, r3
 8014c20:	46bd      	mov	sp, r7
 8014c22:	b043      	add	sp, #268	@ 0x10c
 8014c24:	bd90      	pop	{r4, r7, pc}
 8014c26:	46c0      	nop			@ (mov r8, r8)
 8014c28:	00000406 	.word	0x00000406
 8014c2c:	ffffbf8f 	.word	0xffffbf8f
 8014c30:	ffff8080 	.word	0xffff8080

08014c34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b084      	sub	sp, #16
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	785b      	ldrb	r3, [r3, #1]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d01d      	beq.n	8014c82 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	009b      	lsls	r3, r3, #2
 8014c4e:	18d3      	adds	r3, r2, r3
 8014c50:	881b      	ldrh	r3, [r3, #0]
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	200c      	movs	r0, #12
 8014c56:	183b      	adds	r3, r7, r0
 8014c58:	491b      	ldr	r1, [pc, #108]	@ (8014cc8 <USB_EPSetStall+0x94>)
 8014c5a:	400a      	ands	r2, r1
 8014c5c:	801a      	strh	r2, [r3, #0]
 8014c5e:	183b      	adds	r3, r7, r0
 8014c60:	183a      	adds	r2, r7, r0
 8014c62:	8812      	ldrh	r2, [r2, #0]
 8014c64:	2110      	movs	r1, #16
 8014c66:	404a      	eors	r2, r1
 8014c68:	801a      	strh	r2, [r3, #0]
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	18d3      	adds	r3, r2, r3
 8014c74:	183a      	adds	r2, r7, r0
 8014c76:	8812      	ldrh	r2, [r2, #0]
 8014c78:	4914      	ldr	r1, [pc, #80]	@ (8014ccc <USB_EPSetStall+0x98>)
 8014c7a:	430a      	orrs	r2, r1
 8014c7c:	b292      	uxth	r2, r2
 8014c7e:	801a      	strh	r2, [r3, #0]
 8014c80:	e01d      	b.n	8014cbe <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	18d3      	adds	r3, r2, r3
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	200e      	movs	r0, #14
 8014c92:	183b      	adds	r3, r7, r0
 8014c94:	490e      	ldr	r1, [pc, #56]	@ (8014cd0 <USB_EPSetStall+0x9c>)
 8014c96:	400a      	ands	r2, r1
 8014c98:	801a      	strh	r2, [r3, #0]
 8014c9a:	183b      	adds	r3, r7, r0
 8014c9c:	183a      	adds	r2, r7, r0
 8014c9e:	8812      	ldrh	r2, [r2, #0]
 8014ca0:	2180      	movs	r1, #128	@ 0x80
 8014ca2:	0149      	lsls	r1, r1, #5
 8014ca4:	404a      	eors	r2, r1
 8014ca6:	801a      	strh	r2, [r3, #0]
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	009b      	lsls	r3, r3, #2
 8014cb0:	18d3      	adds	r3, r2, r3
 8014cb2:	183a      	adds	r2, r7, r0
 8014cb4:	8812      	ldrh	r2, [r2, #0]
 8014cb6:	4905      	ldr	r1, [pc, #20]	@ (8014ccc <USB_EPSetStall+0x98>)
 8014cb8:	430a      	orrs	r2, r1
 8014cba:	b292      	uxth	r2, r2
 8014cbc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014cbe:	2300      	movs	r3, #0
}
 8014cc0:	0018      	movs	r0, r3
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	b004      	add	sp, #16
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	ffff8fbf 	.word	0xffff8fbf
 8014ccc:	ffff8080 	.word	0xffff8080
 8014cd0:	ffffbf8f 	.word	0xffffbf8f

08014cd4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b086      	sub	sp, #24
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
 8014cdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	7b1b      	ldrb	r3, [r3, #12]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d000      	beq.n	8014ce8 <USB_EPClearStall+0x14>
 8014ce6:	e095      	b.n	8014e14 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	785b      	ldrb	r3, [r3, #1]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d046      	beq.n	8014d7e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	009b      	lsls	r3, r3, #2
 8014cf8:	18d2      	adds	r2, r2, r3
 8014cfa:	2110      	movs	r1, #16
 8014cfc:	187b      	adds	r3, r7, r1
 8014cfe:	8812      	ldrh	r2, [r2, #0]
 8014d00:	801a      	strh	r2, [r3, #0]
 8014d02:	187b      	adds	r3, r7, r1
 8014d04:	881b      	ldrh	r3, [r3, #0]
 8014d06:	2240      	movs	r2, #64	@ 0x40
 8014d08:	4013      	ands	r3, r2
 8014d0a:	d016      	beq.n	8014d3a <USB_EPClearStall+0x66>
 8014d0c:	687a      	ldr	r2, [r7, #4]
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	009b      	lsls	r3, r3, #2
 8014d14:	18d3      	adds	r3, r2, r3
 8014d16:	881b      	ldrh	r3, [r3, #0]
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	200e      	movs	r0, #14
 8014d1c:	183b      	adds	r3, r7, r0
 8014d1e:	4940      	ldr	r1, [pc, #256]	@ (8014e20 <USB_EPClearStall+0x14c>)
 8014d20:	400a      	ands	r2, r1
 8014d22:	801a      	strh	r2, [r3, #0]
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	18d3      	adds	r3, r2, r3
 8014d2e:	183a      	adds	r2, r7, r0
 8014d30:	8812      	ldrh	r2, [r2, #0]
 8014d32:	493c      	ldr	r1, [pc, #240]	@ (8014e24 <USB_EPClearStall+0x150>)
 8014d34:	430a      	orrs	r2, r1
 8014d36:	b292      	uxth	r2, r2
 8014d38:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	78db      	ldrb	r3, [r3, #3]
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d068      	beq.n	8014e14 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	781b      	ldrb	r3, [r3, #0]
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	18d3      	adds	r3, r2, r3
 8014d4c:	881b      	ldrh	r3, [r3, #0]
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	200c      	movs	r0, #12
 8014d52:	183b      	adds	r3, r7, r0
 8014d54:	4934      	ldr	r1, [pc, #208]	@ (8014e28 <USB_EPClearStall+0x154>)
 8014d56:	400a      	ands	r2, r1
 8014d58:	801a      	strh	r2, [r3, #0]
 8014d5a:	183b      	adds	r3, r7, r0
 8014d5c:	183a      	adds	r2, r7, r0
 8014d5e:	8812      	ldrh	r2, [r2, #0]
 8014d60:	2120      	movs	r1, #32
 8014d62:	404a      	eors	r2, r1
 8014d64:	801a      	strh	r2, [r3, #0]
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	781b      	ldrb	r3, [r3, #0]
 8014d6c:	009b      	lsls	r3, r3, #2
 8014d6e:	18d3      	adds	r3, r2, r3
 8014d70:	183a      	adds	r2, r7, r0
 8014d72:	8812      	ldrh	r2, [r2, #0]
 8014d74:	492d      	ldr	r1, [pc, #180]	@ (8014e2c <USB_EPClearStall+0x158>)
 8014d76:	430a      	orrs	r2, r1
 8014d78:	b292      	uxth	r2, r2
 8014d7a:	801a      	strh	r2, [r3, #0]
 8014d7c:	e04a      	b.n	8014e14 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	009b      	lsls	r3, r3, #2
 8014d86:	18d2      	adds	r2, r2, r3
 8014d88:	2116      	movs	r1, #22
 8014d8a:	187b      	adds	r3, r7, r1
 8014d8c:	8812      	ldrh	r2, [r2, #0]
 8014d8e:	801a      	strh	r2, [r3, #0]
 8014d90:	187b      	adds	r3, r7, r1
 8014d92:	881a      	ldrh	r2, [r3, #0]
 8014d94:	2380      	movs	r3, #128	@ 0x80
 8014d96:	01db      	lsls	r3, r3, #7
 8014d98:	4013      	ands	r3, r2
 8014d9a:	d016      	beq.n	8014dca <USB_EPClearStall+0xf6>
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	781b      	ldrb	r3, [r3, #0]
 8014da2:	009b      	lsls	r3, r3, #2
 8014da4:	18d3      	adds	r3, r2, r3
 8014da6:	881b      	ldrh	r3, [r3, #0]
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	2014      	movs	r0, #20
 8014dac:	183b      	adds	r3, r7, r0
 8014dae:	491c      	ldr	r1, [pc, #112]	@ (8014e20 <USB_EPClearStall+0x14c>)
 8014db0:	400a      	ands	r2, r1
 8014db2:	801a      	strh	r2, [r3, #0]
 8014db4:	687a      	ldr	r2, [r7, #4]
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	009b      	lsls	r3, r3, #2
 8014dbc:	18d3      	adds	r3, r2, r3
 8014dbe:	183a      	adds	r2, r7, r0
 8014dc0:	8812      	ldrh	r2, [r2, #0]
 8014dc2:	491b      	ldr	r1, [pc, #108]	@ (8014e30 <USB_EPClearStall+0x15c>)
 8014dc4:	430a      	orrs	r2, r1
 8014dc6:	b292      	uxth	r2, r2
 8014dc8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014dca:	687a      	ldr	r2, [r7, #4]
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	781b      	ldrb	r3, [r3, #0]
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	18d3      	adds	r3, r2, r3
 8014dd4:	881b      	ldrh	r3, [r3, #0]
 8014dd6:	b29a      	uxth	r2, r3
 8014dd8:	2012      	movs	r0, #18
 8014dda:	183b      	adds	r3, r7, r0
 8014ddc:	4915      	ldr	r1, [pc, #84]	@ (8014e34 <USB_EPClearStall+0x160>)
 8014dde:	400a      	ands	r2, r1
 8014de0:	801a      	strh	r2, [r3, #0]
 8014de2:	183b      	adds	r3, r7, r0
 8014de4:	183a      	adds	r2, r7, r0
 8014de6:	8812      	ldrh	r2, [r2, #0]
 8014de8:	2180      	movs	r1, #128	@ 0x80
 8014dea:	0149      	lsls	r1, r1, #5
 8014dec:	404a      	eors	r2, r1
 8014dee:	801a      	strh	r2, [r3, #0]
 8014df0:	183b      	adds	r3, r7, r0
 8014df2:	183a      	adds	r2, r7, r0
 8014df4:	8812      	ldrh	r2, [r2, #0]
 8014df6:	2180      	movs	r1, #128	@ 0x80
 8014df8:	0189      	lsls	r1, r1, #6
 8014dfa:	404a      	eors	r2, r1
 8014dfc:	801a      	strh	r2, [r3, #0]
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	781b      	ldrb	r3, [r3, #0]
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	18d3      	adds	r3, r2, r3
 8014e08:	183a      	adds	r2, r7, r0
 8014e0a:	8812      	ldrh	r2, [r2, #0]
 8014e0c:	4907      	ldr	r1, [pc, #28]	@ (8014e2c <USB_EPClearStall+0x158>)
 8014e0e:	430a      	orrs	r2, r1
 8014e10:	b292      	uxth	r2, r2
 8014e12:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8014e14:	2300      	movs	r3, #0
}
 8014e16:	0018      	movs	r0, r3
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	b006      	add	sp, #24
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	46c0      	nop			@ (mov r8, r8)
 8014e20:	ffff8f8f 	.word	0xffff8f8f
 8014e24:	ffff80c0 	.word	0xffff80c0
 8014e28:	ffff8fbf 	.word	0xffff8fbf
 8014e2c:	ffff8080 	.word	0xffff8080
 8014e30:	ffffc080 	.word	0xffffc080
 8014e34:	ffffbf8f 	.word	0xffffbf8f

08014e38 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	000a      	movs	r2, r1
 8014e42:	1cfb      	adds	r3, r7, #3
 8014e44:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8014e46:	1cfb      	adds	r3, r7, #3
 8014e48:	781b      	ldrb	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d103      	bne.n	8014e56 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	224c      	movs	r2, #76	@ 0x4c
 8014e52:	2180      	movs	r1, #128	@ 0x80
 8014e54:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8014e56:	2300      	movs	r3, #0
}
 8014e58:	0018      	movs	r0, r3
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	b002      	add	sp, #8
 8014e5e:	bd80      	pop	{r7, pc}

08014e60 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2258      	movs	r2, #88	@ 0x58
 8014e6c:	5a9b      	ldrh	r3, [r3, r2]
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	4a05      	ldr	r2, [pc, #20]	@ (8014e88 <USB_DevConnect+0x28>)
 8014e72:	4313      	orrs	r3, r2
 8014e74:	b299      	uxth	r1, r3
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2258      	movs	r2, #88	@ 0x58
 8014e7a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014e7c:	2300      	movs	r3, #0
}
 8014e7e:	0018      	movs	r0, r3
 8014e80:	46bd      	mov	sp, r7
 8014e82:	b002      	add	sp, #8
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	46c0      	nop			@ (mov r8, r8)
 8014e88:	ffff8000 	.word	0xffff8000

08014e8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b084      	sub	sp, #16
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2244      	movs	r2, #68	@ 0x44
 8014e98:	5a9b      	ldrh	r3, [r3, r2]
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
}
 8014ea0:	0018      	movs	r0, r3
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	b004      	add	sp, #16
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08a      	sub	sp, #40	@ 0x28
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	0019      	movs	r1, r3
 8014eb4:	1dbb      	adds	r3, r7, #6
 8014eb6:	801a      	strh	r2, [r3, #0]
 8014eb8:	1d3b      	adds	r3, r7, #4
 8014eba:	1c0a      	adds	r2, r1, #0
 8014ebc:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014ebe:	1d3b      	adds	r3, r7, #4
 8014ec0:	881b      	ldrh	r3, [r3, #0]
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	085b      	lsrs	r3, r3, #1
 8014ec6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014ed0:	1dbb      	adds	r3, r7, #6
 8014ed2:	881a      	ldrh	r2, [r3, #0]
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	18d3      	adds	r3, r2, r3
 8014ed8:	2280      	movs	r2, #128	@ 0x80
 8014eda:	00d2      	lsls	r2, r2, #3
 8014edc:	4694      	mov	ip, r2
 8014ede:	4463      	add	r3, ip
 8014ee0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ee6:	e020      	b.n	8014f2a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8014ee8:	69fb      	ldr	r3, [r7, #28]
 8014eea:	781a      	ldrb	r2, [r3, #0]
 8014eec:	2112      	movs	r1, #18
 8014eee:	187b      	adds	r3, r7, r1
 8014ef0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8014ef2:	69fb      	ldr	r3, [r7, #28]
 8014ef4:	3301      	adds	r3, #1
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	021b      	lsls	r3, r3, #8
 8014efa:	b21a      	sxth	r2, r3
 8014efc:	187b      	adds	r3, r7, r1
 8014efe:	2000      	movs	r0, #0
 8014f00:	5e1b      	ldrsh	r3, [r3, r0]
 8014f02:	4313      	orrs	r3, r2
 8014f04:	b21a      	sxth	r2, r3
 8014f06:	187b      	adds	r3, r7, r1
 8014f08:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8014f0a:	6a3b      	ldr	r3, [r7, #32]
 8014f0c:	187a      	adds	r2, r7, r1
 8014f0e:	8812      	ldrh	r2, [r2, #0]
 8014f10:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014f12:	6a3b      	ldr	r3, [r7, #32]
 8014f14:	3302      	adds	r3, #2
 8014f16:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8014f18:	69fb      	ldr	r3, [r7, #28]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8014f1e:	69fb      	ldr	r3, [r7, #28]
 8014f20:	3301      	adds	r3, #1
 8014f22:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f26:	3b01      	subs	r3, #1
 8014f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d1db      	bne.n	8014ee8 <USB_WritePMA+0x40>
  }
}
 8014f30:	46c0      	nop			@ (mov r8, r8)
 8014f32:	46c0      	nop			@ (mov r8, r8)
 8014f34:	46bd      	mov	sp, r7
 8014f36:	b00a      	add	sp, #40	@ 0x28
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014f3a:	b580      	push	{r7, lr}
 8014f3c:	b08a      	sub	sp, #40	@ 0x28
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	60f8      	str	r0, [r7, #12]
 8014f42:	60b9      	str	r1, [r7, #8]
 8014f44:	0019      	movs	r1, r3
 8014f46:	1dbb      	adds	r3, r7, #6
 8014f48:	801a      	strh	r2, [r3, #0]
 8014f4a:	1d3b      	adds	r3, r7, #4
 8014f4c:	1c0a      	adds	r2, r1, #0
 8014f4e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8014f50:	1d3b      	adds	r3, r7, #4
 8014f52:	881b      	ldrh	r3, [r3, #0]
 8014f54:	085b      	lsrs	r3, r3, #1
 8014f56:	b29b      	uxth	r3, r3
 8014f58:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014f62:	1dbb      	adds	r3, r7, #6
 8014f64:	881a      	ldrh	r2, [r3, #0]
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	18d3      	adds	r3, r2, r3
 8014f6a:	2280      	movs	r2, #128	@ 0x80
 8014f6c:	00d2      	lsls	r2, r2, #3
 8014f6e:	4694      	mov	ip, r2
 8014f70:	4463      	add	r3, ip
 8014f72:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014f74:	69bb      	ldr	r3, [r7, #24]
 8014f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f78:	e018      	b.n	8014fac <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8014f7a:	6a3b      	ldr	r3, [r7, #32]
 8014f7c:	881b      	ldrh	r3, [r3, #0]
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014f82:	6a3b      	ldr	r3, [r7, #32]
 8014f84:	3302      	adds	r3, #2
 8014f86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	b2da      	uxtb	r2, r3
 8014f8c:	69fb      	ldr	r3, [r7, #28]
 8014f8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	3301      	adds	r3, #1
 8014f94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	0a1b      	lsrs	r3, r3, #8
 8014f9a:	b2da      	uxtb	r2, r3
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014fa0:	69fb      	ldr	r3, [r7, #28]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa8:	3b01      	subs	r3, #1
 8014faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8014fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d1e3      	bne.n	8014f7a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8014fb2:	1d3b      	adds	r3, r7, #4
 8014fb4:	881b      	ldrh	r3, [r3, #0]
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	4013      	ands	r3, r2
 8014fba:	b29b      	uxth	r3, r3
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d007      	beq.n	8014fd0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8014fc0:	6a3b      	ldr	r3, [r7, #32]
 8014fc2:	881b      	ldrh	r3, [r3, #0]
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	b2da      	uxtb	r2, r3
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	701a      	strb	r2, [r3, #0]
  }
}
 8014fd0:	46c0      	nop			@ (mov r8, r8)
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	b00a      	add	sp, #40	@ 0x28
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	000a      	movs	r2, r1
 8014fe2:	1cfb      	adds	r3, r7, #3
 8014fe4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014fe6:	230f      	movs	r3, #15
 8014fe8:	18fb      	adds	r3, r7, r3
 8014fea:	2200      	movs	r2, #0
 8014fec:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	7c1b      	ldrb	r3, [r3, #16]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d116      	bne.n	8015024 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014ff6:	2380      	movs	r3, #128	@ 0x80
 8014ff8:	009b      	lsls	r3, r3, #2
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	2202      	movs	r2, #2
 8014ffe:	2181      	movs	r1, #129	@ 0x81
 8015000:	f002 f8eb 	bl	80171da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2201      	movs	r2, #1
 8015008:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801500a:	2380      	movs	r3, #128	@ 0x80
 801500c:	009b      	lsls	r3, r3, #2
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	2202      	movs	r2, #2
 8015012:	2101      	movs	r1, #1
 8015014:	f002 f8e1 	bl	80171da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015018:	687a      	ldr	r2, [r7, #4]
 801501a:	23b6      	movs	r3, #182	@ 0xb6
 801501c:	005b      	lsls	r3, r3, #1
 801501e:	2101      	movs	r1, #1
 8015020:	50d1      	str	r1, [r2, r3]
 8015022:	e013      	b.n	801504c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	2340      	movs	r3, #64	@ 0x40
 8015028:	2202      	movs	r2, #2
 801502a:	2181      	movs	r1, #129	@ 0x81
 801502c:	f002 f8d5 	bl	80171da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2201      	movs	r2, #1
 8015034:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	2340      	movs	r3, #64	@ 0x40
 801503a:	2202      	movs	r2, #2
 801503c:	2101      	movs	r1, #1
 801503e:	f002 f8cc 	bl	80171da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015042:	687a      	ldr	r2, [r7, #4]
 8015044:	23b6      	movs	r3, #182	@ 0xb6
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	2101      	movs	r1, #1
 801504a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	2308      	movs	r3, #8
 8015050:	2203      	movs	r2, #3
 8015052:	2182      	movs	r1, #130	@ 0x82
 8015054:	f002 f8c1 	bl	80171da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801505e:	2387      	movs	r3, #135	@ 0x87
 8015060:	009b      	lsls	r3, r3, #2
 8015062:	0018      	movs	r0, r3
 8015064:	f002 fa52 	bl	801750c <USBD_static_malloc>
 8015068:	0001      	movs	r1, r0
 801506a:	687a      	ldr	r2, [r7, #4]
 801506c:	23ae      	movs	r3, #174	@ 0xae
 801506e:	009b      	lsls	r3, r3, #2
 8015070:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8015072:	687a      	ldr	r2, [r7, #4]
 8015074:	23ae      	movs	r3, #174	@ 0xae
 8015076:	009b      	lsls	r3, r3, #2
 8015078:	58d3      	ldr	r3, [r2, r3]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d104      	bne.n	8015088 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801507e:	230f      	movs	r3, #15
 8015080:	18fb      	adds	r3, r7, r3
 8015082:	2201      	movs	r2, #1
 8015084:	701a      	strb	r2, [r3, #0]
 8015086:	e02c      	b.n	80150e2 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015088:	687a      	ldr	r2, [r7, #4]
 801508a:	23ae      	movs	r3, #174	@ 0xae
 801508c:	009b      	lsls	r3, r3, #2
 801508e:	58d3      	ldr	r3, [r2, r3]
 8015090:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015092:	687a      	ldr	r2, [r7, #4]
 8015094:	23af      	movs	r3, #175	@ 0xaf
 8015096:	009b      	lsls	r3, r3, #2
 8015098:	58d3      	ldr	r3, [r2, r3]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801509e:	68ba      	ldr	r2, [r7, #8]
 80150a0:	2385      	movs	r3, #133	@ 0x85
 80150a2:	009b      	lsls	r3, r3, #2
 80150a4:	2100      	movs	r1, #0
 80150a6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80150a8:	68ba      	ldr	r2, [r7, #8]
 80150aa:	2386      	movs	r3, #134	@ 0x86
 80150ac:	009b      	lsls	r3, r3, #2
 80150ae:	2100      	movs	r1, #0
 80150b0:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	7c1b      	ldrb	r3, [r3, #16]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d10a      	bne.n	80150d0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80150ba:	68ba      	ldr	r2, [r7, #8]
 80150bc:	2381      	movs	r3, #129	@ 0x81
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	58d2      	ldr	r2, [r2, r3]
 80150c2:	2380      	movs	r3, #128	@ 0x80
 80150c4:	009b      	lsls	r3, r3, #2
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	2101      	movs	r1, #1
 80150ca:	f002 f9d1 	bl	8017470 <USBD_LL_PrepareReceive>
 80150ce:	e008      	b.n	80150e2 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80150d0:	68ba      	ldr	r2, [r7, #8]
 80150d2:	2381      	movs	r3, #129	@ 0x81
 80150d4:	009b      	lsls	r3, r3, #2
 80150d6:	58d2      	ldr	r2, [r2, r3]
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	2340      	movs	r3, #64	@ 0x40
 80150dc:	2101      	movs	r1, #1
 80150de:	f002 f9c7 	bl	8017470 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80150e2:	230f      	movs	r3, #15
 80150e4:	18fb      	adds	r3, r7, r3
 80150e6:	781b      	ldrb	r3, [r3, #0]
}
 80150e8:	0018      	movs	r0, r3
 80150ea:	46bd      	mov	sp, r7
 80150ec:	b004      	add	sp, #16
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	000a      	movs	r2, r1
 80150fa:	1cfb      	adds	r3, r7, #3
 80150fc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80150fe:	230f      	movs	r3, #15
 8015100:	18fb      	adds	r3, r7, r3
 8015102:	2200      	movs	r2, #0
 8015104:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2181      	movs	r1, #129	@ 0x81
 801510a:	0018      	movs	r0, r3
 801510c:	f002 f89c 	bl	8017248 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2200      	movs	r2, #0
 8015114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2101      	movs	r1, #1
 801511a:	0018      	movs	r0, r3
 801511c:	f002 f894 	bl	8017248 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8015120:	687a      	ldr	r2, [r7, #4]
 8015122:	23b6      	movs	r3, #182	@ 0xb6
 8015124:	005b      	lsls	r3, r3, #1
 8015126:	2100      	movs	r1, #0
 8015128:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2182      	movs	r1, #130	@ 0x82
 801512e:	0018      	movs	r0, r3
 8015130:	f002 f88a 	bl	8017248 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2200      	movs	r2, #0
 8015138:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	23ae      	movs	r3, #174	@ 0xae
 801513e:	009b      	lsls	r3, r3, #2
 8015140:	58d3      	ldr	r3, [r2, r3]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d011      	beq.n	801516a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	23af      	movs	r3, #175	@ 0xaf
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	58d3      	ldr	r3, [r2, r3]
 801514e:	685b      	ldr	r3, [r3, #4]
 8015150:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	23ae      	movs	r3, #174	@ 0xae
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	58d3      	ldr	r3, [r2, r3]
 801515a:	0018      	movs	r0, r3
 801515c:	f002 f9e2 	bl	8017524 <USBD_static_free>
    pdev->pClassData = NULL;
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	23ae      	movs	r3, #174	@ 0xae
 8015164:	009b      	lsls	r3, r3, #2
 8015166:	2100      	movs	r1, #0
 8015168:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801516a:	230f      	movs	r3, #15
 801516c:	18fb      	adds	r3, r7, r3
 801516e:	781b      	ldrb	r3, [r3, #0]
}
 8015170:	0018      	movs	r0, r3
 8015172:	46bd      	mov	sp, r7
 8015174:	b004      	add	sp, #16
 8015176:	bd80      	pop	{r7, pc}

08015178 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b086      	sub	sp, #24
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	23ae      	movs	r3, #174	@ 0xae
 8015186:	009b      	lsls	r3, r3, #2
 8015188:	58d3      	ldr	r3, [r2, r3]
 801518a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801518c:	230f      	movs	r3, #15
 801518e:	18fb      	adds	r3, r7, r3
 8015190:	2200      	movs	r2, #0
 8015192:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8015194:	230c      	movs	r3, #12
 8015196:	18fb      	adds	r3, r7, r3
 8015198:	2200      	movs	r2, #0
 801519a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801519c:	2317      	movs	r3, #23
 801519e:	18fb      	adds	r3, r7, r3
 80151a0:	2200      	movs	r2, #0
 80151a2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	781b      	ldrb	r3, [r3, #0]
 80151a8:	001a      	movs	r2, r3
 80151aa:	2360      	movs	r3, #96	@ 0x60
 80151ac:	4013      	ands	r3, r2
 80151ae:	d03d      	beq.n	801522c <USBD_CDC_Setup+0xb4>
 80151b0:	2b20      	cmp	r3, #32
 80151b2:	d000      	beq.n	80151b6 <USBD_CDC_Setup+0x3e>
 80151b4:	e094      	b.n	80152e0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	88db      	ldrh	r3, [r3, #6]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d02b      	beq.n	8015216 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	b25b      	sxtb	r3, r3
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	da12      	bge.n	80151ee <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	23af      	movs	r3, #175	@ 0xaf
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	58d3      	ldr	r3, [r2, r3]
 80151d0:	689b      	ldr	r3, [r3, #8]
 80151d2:	683a      	ldr	r2, [r7, #0]
 80151d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80151d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80151d8:	683a      	ldr	r2, [r7, #0]
 80151da:	88d2      	ldrh	r2, [r2, #6]
 80151dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80151de:	6939      	ldr	r1, [r7, #16]
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	88da      	ldrh	r2, [r3, #6]
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	0018      	movs	r0, r3
 80151e8:	f001 fbaf 	bl	801694a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80151ec:	e083      	b.n	80152f6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	7859      	ldrb	r1, [r3, #1]
 80151f2:	693a      	ldr	r2, [r7, #16]
 80151f4:	2380      	movs	r3, #128	@ 0x80
 80151f6:	009b      	lsls	r3, r3, #2
 80151f8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	88db      	ldrh	r3, [r3, #6]
 80151fe:	b2d9      	uxtb	r1, r3
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	4a40      	ldr	r2, [pc, #256]	@ (8015304 <USBD_CDC_Setup+0x18c>)
 8015204:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8015206:	6939      	ldr	r1, [r7, #16]
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	88da      	ldrh	r2, [r3, #6]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	0018      	movs	r0, r3
 8015210:	f001 fbce 	bl	80169b0 <USBD_CtlPrepareRx>
      break;
 8015214:	e06f      	b.n	80152f6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015216:	687a      	ldr	r2, [r7, #4]
 8015218:	23af      	movs	r3, #175	@ 0xaf
 801521a:	009b      	lsls	r3, r3, #2
 801521c:	58d3      	ldr	r3, [r2, r3]
 801521e:	689b      	ldr	r3, [r3, #8]
 8015220:	683a      	ldr	r2, [r7, #0]
 8015222:	7850      	ldrb	r0, [r2, #1]
 8015224:	6839      	ldr	r1, [r7, #0]
 8015226:	2200      	movs	r2, #0
 8015228:	4798      	blx	r3
      break;
 801522a:	e064      	b.n	80152f6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	785b      	ldrb	r3, [r3, #1]
 8015230:	2b0b      	cmp	r3, #11
 8015232:	d037      	beq.n	80152a4 <USBD_CDC_Setup+0x12c>
 8015234:	dc47      	bgt.n	80152c6 <USBD_CDC_Setup+0x14e>
 8015236:	2b00      	cmp	r3, #0
 8015238:	d002      	beq.n	8015240 <USBD_CDC_Setup+0xc8>
 801523a:	2b0a      	cmp	r3, #10
 801523c:	d019      	beq.n	8015272 <USBD_CDC_Setup+0xfa>
 801523e:	e042      	b.n	80152c6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	23a7      	movs	r3, #167	@ 0xa7
 8015244:	009b      	lsls	r3, r3, #2
 8015246:	5cd3      	ldrb	r3, [r2, r3]
 8015248:	2b03      	cmp	r3, #3
 801524a:	d107      	bne.n	801525c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801524c:	230c      	movs	r3, #12
 801524e:	18f9      	adds	r1, r7, r3
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2202      	movs	r2, #2
 8015254:	0018      	movs	r0, r3
 8015256:	f001 fb78 	bl	801694a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801525a:	e040      	b.n	80152de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801525c:	683a      	ldr	r2, [r7, #0]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	0011      	movs	r1, r2
 8015262:	0018      	movs	r0, r3
 8015264:	f001 faf3 	bl	801684e <USBD_CtlError>
            ret = USBD_FAIL;
 8015268:	2317      	movs	r3, #23
 801526a:	18fb      	adds	r3, r7, r3
 801526c:	2202      	movs	r2, #2
 801526e:	701a      	strb	r2, [r3, #0]
          break;
 8015270:	e035      	b.n	80152de <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015272:	687a      	ldr	r2, [r7, #4]
 8015274:	23a7      	movs	r3, #167	@ 0xa7
 8015276:	009b      	lsls	r3, r3, #2
 8015278:	5cd3      	ldrb	r3, [r2, r3]
 801527a:	2b03      	cmp	r3, #3
 801527c:	d107      	bne.n	801528e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801527e:	230f      	movs	r3, #15
 8015280:	18f9      	adds	r1, r7, r3
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2201      	movs	r2, #1
 8015286:	0018      	movs	r0, r3
 8015288:	f001 fb5f 	bl	801694a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801528c:	e027      	b.n	80152de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801528e:	683a      	ldr	r2, [r7, #0]
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	0011      	movs	r1, r2
 8015294:	0018      	movs	r0, r3
 8015296:	f001 fada 	bl	801684e <USBD_CtlError>
            ret = USBD_FAIL;
 801529a:	2317      	movs	r3, #23
 801529c:	18fb      	adds	r3, r7, r3
 801529e:	2202      	movs	r2, #2
 80152a0:	701a      	strb	r2, [r3, #0]
          break;
 80152a2:	e01c      	b.n	80152de <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	23a7      	movs	r3, #167	@ 0xa7
 80152a8:	009b      	lsls	r3, r3, #2
 80152aa:	5cd3      	ldrb	r3, [r2, r3]
 80152ac:	2b03      	cmp	r3, #3
 80152ae:	d015      	beq.n	80152dc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80152b0:	683a      	ldr	r2, [r7, #0]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	0011      	movs	r1, r2
 80152b6:	0018      	movs	r0, r3
 80152b8:	f001 fac9 	bl	801684e <USBD_CtlError>
            ret = USBD_FAIL;
 80152bc:	2317      	movs	r3, #23
 80152be:	18fb      	adds	r3, r7, r3
 80152c0:	2202      	movs	r2, #2
 80152c2:	701a      	strb	r2, [r3, #0]
          }
          break;
 80152c4:	e00a      	b.n	80152dc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80152c6:	683a      	ldr	r2, [r7, #0]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	0011      	movs	r1, r2
 80152cc:	0018      	movs	r0, r3
 80152ce:	f001 fabe 	bl	801684e <USBD_CtlError>
          ret = USBD_FAIL;
 80152d2:	2317      	movs	r3, #23
 80152d4:	18fb      	adds	r3, r7, r3
 80152d6:	2202      	movs	r2, #2
 80152d8:	701a      	strb	r2, [r3, #0]
          break;
 80152da:	e000      	b.n	80152de <USBD_CDC_Setup+0x166>
          break;
 80152dc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80152de:	e00a      	b.n	80152f6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80152e0:	683a      	ldr	r2, [r7, #0]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	0011      	movs	r1, r2
 80152e6:	0018      	movs	r0, r3
 80152e8:	f001 fab1 	bl	801684e <USBD_CtlError>
      ret = USBD_FAIL;
 80152ec:	2317      	movs	r3, #23
 80152ee:	18fb      	adds	r3, r7, r3
 80152f0:	2202      	movs	r2, #2
 80152f2:	701a      	strb	r2, [r3, #0]
      break;
 80152f4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80152f6:	2317      	movs	r3, #23
 80152f8:	18fb      	adds	r3, r7, r3
 80152fa:	781b      	ldrb	r3, [r3, #0]
}
 80152fc:	0018      	movs	r0, r3
 80152fe:	46bd      	mov	sp, r7
 8015300:	b006      	add	sp, #24
 8015302:	bd80      	pop	{r7, pc}
 8015304:	00000201 	.word	0x00000201

08015308 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	000a      	movs	r2, r1
 8015312:	1cfb      	adds	r3, r7, #3
 8015314:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	23ae      	movs	r3, #174	@ 0xae
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	58d3      	ldr	r3, [r2, r3]
 801531e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	23b0      	movs	r3, #176	@ 0xb0
 8015324:	009b      	lsls	r3, r3, #2
 8015326:	58d3      	ldr	r3, [r2, r3]
 8015328:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	23ae      	movs	r3, #174	@ 0xae
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	58d3      	ldr	r3, [r2, r3]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d03e      	beq.n	80153b4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8015336:	1cfb      	adds	r3, r7, #3
 8015338:	781a      	ldrb	r2, [r3, #0]
 801533a:	6879      	ldr	r1, [r7, #4]
 801533c:	0013      	movs	r3, r2
 801533e:	009b      	lsls	r3, r3, #2
 8015340:	189b      	adds	r3, r3, r2
 8015342:	009b      	lsls	r3, r3, #2
 8015344:	18cb      	adds	r3, r1, r3
 8015346:	331c      	adds	r3, #28
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d02b      	beq.n	80153a6 <USBD_CDC_DataIn+0x9e>
 801534e:	1cfb      	adds	r3, r7, #3
 8015350:	781a      	ldrb	r2, [r3, #0]
 8015352:	6879      	ldr	r1, [r7, #4]
 8015354:	0013      	movs	r3, r2
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	189b      	adds	r3, r3, r2
 801535a:	009b      	lsls	r3, r3, #2
 801535c:	18cb      	adds	r3, r1, r3
 801535e:	331c      	adds	r3, #28
 8015360:	6818      	ldr	r0, [r3, #0]
 8015362:	1cfb      	adds	r3, r7, #3
 8015364:	781a      	ldrb	r2, [r3, #0]
 8015366:	68b9      	ldr	r1, [r7, #8]
 8015368:	0013      	movs	r3, r2
 801536a:	009b      	lsls	r3, r3, #2
 801536c:	189b      	adds	r3, r3, r2
 801536e:	00db      	lsls	r3, r3, #3
 8015370:	18cb      	adds	r3, r1, r3
 8015372:	3338      	adds	r3, #56	@ 0x38
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	0019      	movs	r1, r3
 8015378:	f7ea ff68 	bl	800024c <__aeabi_uidivmod>
 801537c:	1e0b      	subs	r3, r1, #0
 801537e:	d112      	bne.n	80153a6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8015380:	1cfb      	adds	r3, r7, #3
 8015382:	781a      	ldrb	r2, [r3, #0]
 8015384:	6879      	ldr	r1, [r7, #4]
 8015386:	0013      	movs	r3, r2
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	189b      	adds	r3, r3, r2
 801538c:	009b      	lsls	r3, r3, #2
 801538e:	18cb      	adds	r3, r1, r3
 8015390:	331c      	adds	r3, #28
 8015392:	2200      	movs	r2, #0
 8015394:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015396:	1cfb      	adds	r3, r7, #3
 8015398:	7819      	ldrb	r1, [r3, #0]
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	2300      	movs	r3, #0
 801539e:	2200      	movs	r2, #0
 80153a0:	f002 f82f 	bl	8017402 <USBD_LL_Transmit>
 80153a4:	e004      	b.n	80153b0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80153a6:	68fa      	ldr	r2, [r7, #12]
 80153a8:	2385      	movs	r3, #133	@ 0x85
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	2100      	movs	r1, #0
 80153ae:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80153b0:	2300      	movs	r3, #0
 80153b2:	e000      	b.n	80153b6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80153b4:	2302      	movs	r3, #2
  }
}
 80153b6:	0018      	movs	r0, r3
 80153b8:	46bd      	mov	sp, r7
 80153ba:	b004      	add	sp, #16
 80153bc:	bd80      	pop	{r7, pc}

080153be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80153be:	b580      	push	{r7, lr}
 80153c0:	b084      	sub	sp, #16
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
 80153c6:	000a      	movs	r2, r1
 80153c8:	1cfb      	adds	r3, r7, #3
 80153ca:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	23ae      	movs	r3, #174	@ 0xae
 80153d0:	009b      	lsls	r3, r3, #2
 80153d2:	58d3      	ldr	r3, [r2, r3]
 80153d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80153d6:	1cfb      	adds	r3, r7, #3
 80153d8:	781a      	ldrb	r2, [r3, #0]
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	0011      	movs	r1, r2
 80153de:	0018      	movs	r0, r3
 80153e0:	f002 f87d 	bl	80174de <USBD_LL_GetRxDataSize>
 80153e4:	0001      	movs	r1, r0
 80153e6:	68fa      	ldr	r2, [r7, #12]
 80153e8:	2383      	movs	r3, #131	@ 0x83
 80153ea:	009b      	lsls	r3, r3, #2
 80153ec:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	23ae      	movs	r3, #174	@ 0xae
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	58d3      	ldr	r3, [r2, r3]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d011      	beq.n	801541e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	23af      	movs	r3, #175	@ 0xaf
 80153fe:	009b      	lsls	r3, r3, #2
 8015400:	58d3      	ldr	r3, [r2, r3]
 8015402:	68da      	ldr	r2, [r3, #12]
 8015404:	68f9      	ldr	r1, [r7, #12]
 8015406:	2381      	movs	r3, #129	@ 0x81
 8015408:	009b      	lsls	r3, r3, #2
 801540a:	58c8      	ldr	r0, [r1, r3]
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2183      	movs	r1, #131	@ 0x83
 8015410:	0089      	lsls	r1, r1, #2
 8015412:	468c      	mov	ip, r1
 8015414:	4463      	add	r3, ip
 8015416:	0019      	movs	r1, r3
 8015418:	4790      	blx	r2

    return USBD_OK;
 801541a:	2300      	movs	r3, #0
 801541c:	e000      	b.n	8015420 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801541e:	2302      	movs	r3, #2
  }
}
 8015420:	0018      	movs	r0, r3
 8015422:	46bd      	mov	sp, r7
 8015424:	b004      	add	sp, #16
 8015426:	bd80      	pop	{r7, pc}

08015428 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015428:	b590      	push	{r4, r7, lr}
 801542a:	b085      	sub	sp, #20
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015430:	687a      	ldr	r2, [r7, #4]
 8015432:	23ae      	movs	r3, #174	@ 0xae
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	58d3      	ldr	r3, [r2, r3]
 8015438:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	23af      	movs	r3, #175	@ 0xaf
 801543e:	009b      	lsls	r3, r3, #2
 8015440:	58d3      	ldr	r3, [r2, r3]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d018      	beq.n	8015478 <USBD_CDC_EP0_RxReady+0x50>
 8015446:	68fa      	ldr	r2, [r7, #12]
 8015448:	2380      	movs	r3, #128	@ 0x80
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	5cd3      	ldrb	r3, [r2, r3]
 801544e:	2bff      	cmp	r3, #255	@ 0xff
 8015450:	d012      	beq.n	8015478 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	23af      	movs	r3, #175	@ 0xaf
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	58d3      	ldr	r3, [r2, r3]
 801545a:	689b      	ldr	r3, [r3, #8]
 801545c:	68f9      	ldr	r1, [r7, #12]
 801545e:	2280      	movs	r2, #128	@ 0x80
 8015460:	0092      	lsls	r2, r2, #2
 8015462:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8015464:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8015466:	68fa      	ldr	r2, [r7, #12]
 8015468:	4c06      	ldr	r4, [pc, #24]	@ (8015484 <USBD_CDC_EP0_RxReady+0x5c>)
 801546a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801546c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801546e:	68fa      	ldr	r2, [r7, #12]
 8015470:	2380      	movs	r3, #128	@ 0x80
 8015472:	009b      	lsls	r3, r3, #2
 8015474:	21ff      	movs	r1, #255	@ 0xff
 8015476:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8015478:	2300      	movs	r3, #0
}
 801547a:	0018      	movs	r0, r3
 801547c:	46bd      	mov	sp, r7
 801547e:	b005      	add	sp, #20
 8015480:	bd90      	pop	{r4, r7, pc}
 8015482:	46c0      	nop			@ (mov r8, r8)
 8015484:	00000201 	.word	0x00000201

08015488 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2243      	movs	r2, #67	@ 0x43
 8015494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8015496:	4b02      	ldr	r3, [pc, #8]	@ (80154a0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8015498:	0018      	movs	r0, r3
 801549a:	46bd      	mov	sp, r7
 801549c:	b002      	add	sp, #8
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	200000fc 	.word	0x200000fc

080154a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b082      	sub	sp, #8
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2243      	movs	r2, #67	@ 0x43
 80154b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80154b2:	4b02      	ldr	r3, [pc, #8]	@ (80154bc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80154b4:	0018      	movs	r0, r3
 80154b6:	46bd      	mov	sp, r7
 80154b8:	b002      	add	sp, #8
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	200000b8 	.word	0x200000b8

080154c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b082      	sub	sp, #8
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2243      	movs	r2, #67	@ 0x43
 80154cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80154ce:	4b02      	ldr	r3, [pc, #8]	@ (80154d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80154d0:	0018      	movs	r0, r3
 80154d2:	46bd      	mov	sp, r7
 80154d4:	b002      	add	sp, #8
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	20000140 	.word	0x20000140

080154dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b082      	sub	sp, #8
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	220a      	movs	r2, #10
 80154e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80154ea:	4b02      	ldr	r3, [pc, #8]	@ (80154f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80154ec:	0018      	movs	r0, r3
 80154ee:	46bd      	mov	sp, r7
 80154f0:	b002      	add	sp, #8
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	20000074 	.word	0x20000074

080154f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
 8015500:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8015502:	200f      	movs	r0, #15
 8015504:	183b      	adds	r3, r7, r0
 8015506:	2202      	movs	r2, #2
 8015508:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d007      	beq.n	8015520 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8015510:	687a      	ldr	r2, [r7, #4]
 8015512:	23af      	movs	r3, #175	@ 0xaf
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	6839      	ldr	r1, [r7, #0]
 8015518:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801551a:	183b      	adds	r3, r7, r0
 801551c:	2200      	movs	r2, #0
 801551e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8015520:	230f      	movs	r3, #15
 8015522:	18fb      	adds	r3, r7, r3
 8015524:	781b      	ldrb	r3, [r3, #0]
}
 8015526:	0018      	movs	r0, r3
 8015528:	46bd      	mov	sp, r7
 801552a:	b004      	add	sp, #16
 801552c:	bd80      	pop	{r7, pc}

0801552e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801552e:	b580      	push	{r7, lr}
 8015530:	b086      	sub	sp, #24
 8015532:	af00      	add	r7, sp, #0
 8015534:	60f8      	str	r0, [r7, #12]
 8015536:	60b9      	str	r1, [r7, #8]
 8015538:	1dbb      	adds	r3, r7, #6
 801553a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801553c:	68fa      	ldr	r2, [r7, #12]
 801553e:	23ae      	movs	r3, #174	@ 0xae
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	58d3      	ldr	r3, [r2, r3]
 8015544:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8015546:	697a      	ldr	r2, [r7, #20]
 8015548:	2382      	movs	r3, #130	@ 0x82
 801554a:	009b      	lsls	r3, r3, #2
 801554c:	68b9      	ldr	r1, [r7, #8]
 801554e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8015550:	1dbb      	adds	r3, r7, #6
 8015552:	8819      	ldrh	r1, [r3, #0]
 8015554:	697a      	ldr	r2, [r7, #20]
 8015556:	2384      	movs	r3, #132	@ 0x84
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801555c:	2300      	movs	r3, #0
}
 801555e:	0018      	movs	r0, r3
 8015560:	46bd      	mov	sp, r7
 8015562:	b006      	add	sp, #24
 8015564:	bd80      	pop	{r7, pc}

08015566 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8015566:	b580      	push	{r7, lr}
 8015568:	b084      	sub	sp, #16
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
 801556e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015570:	687a      	ldr	r2, [r7, #4]
 8015572:	23ae      	movs	r3, #174	@ 0xae
 8015574:	009b      	lsls	r3, r3, #2
 8015576:	58d3      	ldr	r3, [r2, r3]
 8015578:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801557a:	68fa      	ldr	r2, [r7, #12]
 801557c:	2381      	movs	r3, #129	@ 0x81
 801557e:	009b      	lsls	r3, r3, #2
 8015580:	6839      	ldr	r1, [r7, #0]
 8015582:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015584:	2300      	movs	r3, #0
}
 8015586:	0018      	movs	r0, r3
 8015588:	46bd      	mov	sp, r7
 801558a:	b004      	add	sp, #16
 801558c:	bd80      	pop	{r7, pc}

0801558e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b084      	sub	sp, #16
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015596:	687a      	ldr	r2, [r7, #4]
 8015598:	23ae      	movs	r3, #174	@ 0xae
 801559a:	009b      	lsls	r3, r3, #2
 801559c:	58d3      	ldr	r3, [r2, r3]
 801559e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	23ae      	movs	r3, #174	@ 0xae
 80155a4:	009b      	lsls	r3, r3, #2
 80155a6:	58d3      	ldr	r3, [r2, r3]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d022      	beq.n	80155f2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80155ac:	68fa      	ldr	r2, [r7, #12]
 80155ae:	2385      	movs	r3, #133	@ 0x85
 80155b0:	009b      	lsls	r3, r3, #2
 80155b2:	58d3      	ldr	r3, [r2, r3]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d11a      	bne.n	80155ee <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80155b8:	68fa      	ldr	r2, [r7, #12]
 80155ba:	2385      	movs	r3, #133	@ 0x85
 80155bc:	009b      	lsls	r3, r3, #2
 80155be:	2101      	movs	r1, #1
 80155c0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80155c2:	68fa      	ldr	r2, [r7, #12]
 80155c4:	2384      	movs	r3, #132	@ 0x84
 80155c6:	009b      	lsls	r3, r3, #2
 80155c8:	58d2      	ldr	r2, [r2, r3]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80155ce:	68fa      	ldr	r2, [r7, #12]
 80155d0:	2382      	movs	r3, #130	@ 0x82
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80155d6:	68fa      	ldr	r2, [r7, #12]
 80155d8:	2384      	movs	r3, #132	@ 0x84
 80155da:	009b      	lsls	r3, r3, #2
 80155dc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80155de:	b29b      	uxth	r3, r3
 80155e0:	6878      	ldr	r0, [r7, #4]
 80155e2:	000a      	movs	r2, r1
 80155e4:	2181      	movs	r1, #129	@ 0x81
 80155e6:	f001 ff0c 	bl	8017402 <USBD_LL_Transmit>

      return USBD_OK;
 80155ea:	2300      	movs	r3, #0
 80155ec:	e002      	b.n	80155f4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80155ee:	2301      	movs	r3, #1
 80155f0:	e000      	b.n	80155f4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80155f2:	2302      	movs	r3, #2
  }
}
 80155f4:	0018      	movs	r0, r3
 80155f6:	46bd      	mov	sp, r7
 80155f8:	b004      	add	sp, #16
 80155fa:	bd80      	pop	{r7, pc}

080155fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b084      	sub	sp, #16
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015604:	687a      	ldr	r2, [r7, #4]
 8015606:	23ae      	movs	r3, #174	@ 0xae
 8015608:	009b      	lsls	r3, r3, #2
 801560a:	58d3      	ldr	r3, [r2, r3]
 801560c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	23ae      	movs	r3, #174	@ 0xae
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	58d3      	ldr	r3, [r2, r3]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d019      	beq.n	801564e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	7c1b      	ldrb	r3, [r3, #16]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d10a      	bne.n	8015638 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015622:	68fa      	ldr	r2, [r7, #12]
 8015624:	2381      	movs	r3, #129	@ 0x81
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	58d2      	ldr	r2, [r2, r3]
 801562a:	2380      	movs	r3, #128	@ 0x80
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	2101      	movs	r1, #1
 8015632:	f001 ff1d 	bl	8017470 <USBD_LL_PrepareReceive>
 8015636:	e008      	b.n	801564a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015638:	68fa      	ldr	r2, [r7, #12]
 801563a:	2381      	movs	r3, #129	@ 0x81
 801563c:	009b      	lsls	r3, r3, #2
 801563e:	58d2      	ldr	r2, [r2, r3]
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	2340      	movs	r3, #64	@ 0x40
 8015644:	2101      	movs	r1, #1
 8015646:	f001 ff13 	bl	8017470 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801564a:	2300      	movs	r3, #0
 801564c:	e000      	b.n	8015650 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801564e:	2302      	movs	r3, #2
  }
}
 8015650:	0018      	movs	r0, r3
 8015652:	46bd      	mov	sp, r7
 8015654:	b004      	add	sp, #16
 8015656:	bd80      	pop	{r7, pc}

08015658 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	60f8      	str	r0, [r7, #12]
 8015660:	60b9      	str	r1, [r7, #8]
 8015662:	1dfb      	adds	r3, r7, #7
 8015664:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d101      	bne.n	8015670 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801566c:	2302      	movs	r3, #2
 801566e:	e020      	b.n	80156b2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8015670:	68fa      	ldr	r2, [r7, #12]
 8015672:	23ad      	movs	r3, #173	@ 0xad
 8015674:	009b      	lsls	r3, r3, #2
 8015676:	58d3      	ldr	r3, [r2, r3]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d004      	beq.n	8015686 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801567c:	68fa      	ldr	r2, [r7, #12]
 801567e:	23ad      	movs	r3, #173	@ 0xad
 8015680:	009b      	lsls	r3, r3, #2
 8015682:	2100      	movs	r1, #0
 8015684:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d004      	beq.n	8015696 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801568c:	68fa      	ldr	r2, [r7, #12]
 801568e:	23ac      	movs	r3, #172	@ 0xac
 8015690:	009b      	lsls	r3, r3, #2
 8015692:	68b9      	ldr	r1, [r7, #8]
 8015694:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015696:	68fa      	ldr	r2, [r7, #12]
 8015698:	23a7      	movs	r3, #167	@ 0xa7
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	2101      	movs	r1, #1
 801569e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	1dfa      	adds	r2, r7, #7
 80156a4:	7812      	ldrb	r2, [r2, #0]
 80156a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	0018      	movs	r0, r3
 80156ac:	f001 fd0c 	bl	80170c8 <USBD_LL_Init>

  return USBD_OK;
 80156b0:	2300      	movs	r3, #0
}
 80156b2:	0018      	movs	r0, r3
 80156b4:	46bd      	mov	sp, r7
 80156b6:	b004      	add	sp, #16
 80156b8:	bd80      	pop	{r7, pc}

080156ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80156ba:	b580      	push	{r7, lr}
 80156bc:	b084      	sub	sp, #16
 80156be:	af00      	add	r7, sp, #0
 80156c0:	6078      	str	r0, [r7, #4]
 80156c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80156c4:	200f      	movs	r0, #15
 80156c6:	183b      	adds	r3, r7, r0
 80156c8:	2200      	movs	r2, #0
 80156ca:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d008      	beq.n	80156e4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	23ad      	movs	r3, #173	@ 0xad
 80156d6:	009b      	lsls	r3, r3, #2
 80156d8:	6839      	ldr	r1, [r7, #0]
 80156da:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80156dc:	183b      	adds	r3, r7, r0
 80156de:	2200      	movs	r2, #0
 80156e0:	701a      	strb	r2, [r3, #0]
 80156e2:	e003      	b.n	80156ec <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80156e4:	230f      	movs	r3, #15
 80156e6:	18fb      	adds	r3, r7, r3
 80156e8:	2202      	movs	r2, #2
 80156ea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80156ec:	230f      	movs	r3, #15
 80156ee:	18fb      	adds	r3, r7, r3
 80156f0:	781b      	ldrb	r3, [r3, #0]
}
 80156f2:	0018      	movs	r0, r3
 80156f4:	46bd      	mov	sp, r7
 80156f6:	b004      	add	sp, #16
 80156f8:	bd80      	pop	{r7, pc}

080156fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80156fa:	b580      	push	{r7, lr}
 80156fc:	b082      	sub	sp, #8
 80156fe:	af00      	add	r7, sp, #0
 8015700:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	0018      	movs	r0, r3
 8015706:	f001 fd43 	bl	8017190 <USBD_LL_Start>

  return USBD_OK;
 801570a:	2300      	movs	r3, #0
}
 801570c:	0018      	movs	r0, r3
 801570e:	46bd      	mov	sp, r7
 8015710:	b002      	add	sp, #8
 8015712:	bd80      	pop	{r7, pc}

08015714 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801571c:	2300      	movs	r3, #0
}
 801571e:	0018      	movs	r0, r3
 8015720:	46bd      	mov	sp, r7
 8015722:	b002      	add	sp, #8
 8015724:	bd80      	pop	{r7, pc}

08015726 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015726:	b590      	push	{r4, r7, lr}
 8015728:	b085      	sub	sp, #20
 801572a:	af00      	add	r7, sp, #0
 801572c:	6078      	str	r0, [r7, #4]
 801572e:	000a      	movs	r2, r1
 8015730:	1cfb      	adds	r3, r7, #3
 8015732:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015734:	240f      	movs	r4, #15
 8015736:	193b      	adds	r3, r7, r4
 8015738:	2202      	movs	r2, #2
 801573a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801573c:	687a      	ldr	r2, [r7, #4]
 801573e:	23ad      	movs	r3, #173	@ 0xad
 8015740:	009b      	lsls	r3, r3, #2
 8015742:	58d3      	ldr	r3, [r2, r3]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d00e      	beq.n	8015766 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	23ad      	movs	r3, #173	@ 0xad
 801574c:	009b      	lsls	r3, r3, #2
 801574e:	58d3      	ldr	r3, [r2, r3]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	1cfa      	adds	r2, r7, #3
 8015754:	7811      	ldrb	r1, [r2, #0]
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	0010      	movs	r0, r2
 801575a:	4798      	blx	r3
 801575c:	1e03      	subs	r3, r0, #0
 801575e:	d102      	bne.n	8015766 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8015760:	193b      	adds	r3, r7, r4
 8015762:	2200      	movs	r2, #0
 8015764:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8015766:	230f      	movs	r3, #15
 8015768:	18fb      	adds	r3, r7, r3
 801576a:	781b      	ldrb	r3, [r3, #0]
}
 801576c:	0018      	movs	r0, r3
 801576e:	46bd      	mov	sp, r7
 8015770:	b005      	add	sp, #20
 8015772:	bd90      	pop	{r4, r7, pc}

08015774 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	000a      	movs	r2, r1
 801577e:	1cfb      	adds	r3, r7, #3
 8015780:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	23ad      	movs	r3, #173	@ 0xad
 8015786:	009b      	lsls	r3, r3, #2
 8015788:	58d3      	ldr	r3, [r2, r3]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	1cfa      	adds	r2, r7, #3
 801578e:	7811      	ldrb	r1, [r2, #0]
 8015790:	687a      	ldr	r2, [r7, #4]
 8015792:	0010      	movs	r0, r2
 8015794:	4798      	blx	r3

  return USBD_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	0018      	movs	r0, r3
 801579a:	46bd      	mov	sp, r7
 801579c:	b002      	add	sp, #8
 801579e:	bd80      	pop	{r7, pc}

080157a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
 80157a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	22aa      	movs	r2, #170	@ 0xaa
 80157ae:	0092      	lsls	r2, r2, #2
 80157b0:	4694      	mov	ip, r2
 80157b2:	4463      	add	r3, ip
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	0011      	movs	r1, r2
 80157b8:	0018      	movs	r0, r3
 80157ba:	f001 f810 	bl	80167de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80157be:	687a      	ldr	r2, [r7, #4]
 80157c0:	23a5      	movs	r3, #165	@ 0xa5
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	2101      	movs	r1, #1
 80157c6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	4a23      	ldr	r2, [pc, #140]	@ (8015858 <USBD_LL_SetupStage+0xb8>)
 80157cc:	5a9b      	ldrh	r3, [r3, r2]
 80157ce:	0019      	movs	r1, r3
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	23a6      	movs	r3, #166	@ 0xa6
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80157d8:	687a      	ldr	r2, [r7, #4]
 80157da:	23aa      	movs	r3, #170	@ 0xaa
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	5cd3      	ldrb	r3, [r2, r3]
 80157e0:	001a      	movs	r2, r3
 80157e2:	231f      	movs	r3, #31
 80157e4:	4013      	ands	r3, r2
 80157e6:	2b02      	cmp	r3, #2
 80157e8:	d019      	beq.n	801581e <USBD_LL_SetupStage+0x7e>
 80157ea:	d822      	bhi.n	8015832 <USBD_LL_SetupStage+0x92>
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d002      	beq.n	80157f6 <USBD_LL_SetupStage+0x56>
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	d00a      	beq.n	801580a <USBD_LL_SetupStage+0x6a>
 80157f4:	e01d      	b.n	8015832 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	22aa      	movs	r2, #170	@ 0xaa
 80157fa:	0092      	lsls	r2, r2, #2
 80157fc:	189a      	adds	r2, r3, r2
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	0011      	movs	r1, r2
 8015802:	0018      	movs	r0, r3
 8015804:	f000 fa10 	bl	8015c28 <USBD_StdDevReq>
      break;
 8015808:	e020      	b.n	801584c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	22aa      	movs	r2, #170	@ 0xaa
 801580e:	0092      	lsls	r2, r2, #2
 8015810:	189a      	adds	r2, r3, r2
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	0011      	movs	r1, r2
 8015816:	0018      	movs	r0, r3
 8015818:	f000 fa78 	bl	8015d0c <USBD_StdItfReq>
      break;
 801581c:	e016      	b.n	801584c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	22aa      	movs	r2, #170	@ 0xaa
 8015822:	0092      	lsls	r2, r2, #2
 8015824:	189a      	adds	r2, r3, r2
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	0011      	movs	r1, r2
 801582a:	0018      	movs	r0, r3
 801582c:	f000 fac5 	bl	8015dba <USBD_StdEPReq>
      break;
 8015830:	e00c      	b.n	801584c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	23aa      	movs	r3, #170	@ 0xaa
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	5cd3      	ldrb	r3, [r2, r3]
 801583a:	227f      	movs	r2, #127	@ 0x7f
 801583c:	4393      	bics	r3, r2
 801583e:	b2da      	uxtb	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	0011      	movs	r1, r2
 8015844:	0018      	movs	r0, r3
 8015846:	f001 fd2a 	bl	801729e <USBD_LL_StallEP>
      break;
 801584a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801584c:	2300      	movs	r3, #0
}
 801584e:	0018      	movs	r0, r3
 8015850:	46bd      	mov	sp, r7
 8015852:	b002      	add	sp, #8
 8015854:	bd80      	pop	{r7, pc}
 8015856:	46c0      	nop			@ (mov r8, r8)
 8015858:	000002ae 	.word	0x000002ae

0801585c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b086      	sub	sp, #24
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	607a      	str	r2, [r7, #4]
 8015866:	200b      	movs	r0, #11
 8015868:	183b      	adds	r3, r7, r0
 801586a:	1c0a      	adds	r2, r1, #0
 801586c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801586e:	183b      	adds	r3, r7, r0
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d154      	bne.n	8015920 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	3355      	adds	r3, #85	@ 0x55
 801587a:	33ff      	adds	r3, #255	@ 0xff
 801587c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	23a5      	movs	r3, #165	@ 0xa5
 8015882:	009b      	lsls	r3, r3, #2
 8015884:	58d3      	ldr	r3, [r2, r3]
 8015886:	2b03      	cmp	r3, #3
 8015888:	d139      	bne.n	80158fe <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	68da      	ldr	r2, [r3, #12]
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	691b      	ldr	r3, [r3, #16]
 8015892:	429a      	cmp	r2, r3
 8015894:	d919      	bls.n	80158ca <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	68da      	ldr	r2, [r3, #12]
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	691b      	ldr	r3, [r3, #16]
 801589e:	1ad2      	subs	r2, r2, r3
 80158a0:	697b      	ldr	r3, [r7, #20]
 80158a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80158a4:	697b      	ldr	r3, [r7, #20]
 80158a6:	68da      	ldr	r2, [r3, #12]
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d203      	bcs.n	80158b8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	e002      	b.n	80158be <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80158bc:	b29b      	uxth	r3, r3
 80158be:	6879      	ldr	r1, [r7, #4]
 80158c0:	68f8      	ldr	r0, [r7, #12]
 80158c2:	001a      	movs	r2, r3
 80158c4:	f001 f898 	bl	80169f8 <USBD_CtlContinueRx>
 80158c8:	e045      	b.n	8015956 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80158ca:	68fa      	ldr	r2, [r7, #12]
 80158cc:	23ad      	movs	r3, #173	@ 0xad
 80158ce:	009b      	lsls	r3, r3, #2
 80158d0:	58d3      	ldr	r3, [r2, r3]
 80158d2:	691b      	ldr	r3, [r3, #16]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d00d      	beq.n	80158f4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80158d8:	68fa      	ldr	r2, [r7, #12]
 80158da:	23a7      	movs	r3, #167	@ 0xa7
 80158dc:	009b      	lsls	r3, r3, #2
 80158de:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80158e0:	2b03      	cmp	r3, #3
 80158e2:	d107      	bne.n	80158f4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80158e4:	68fa      	ldr	r2, [r7, #12]
 80158e6:	23ad      	movs	r3, #173	@ 0xad
 80158e8:	009b      	lsls	r3, r3, #2
 80158ea:	58d3      	ldr	r3, [r2, r3]
 80158ec:	691b      	ldr	r3, [r3, #16]
 80158ee:	68fa      	ldr	r2, [r7, #12]
 80158f0:	0010      	movs	r0, r2
 80158f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	0018      	movs	r0, r3
 80158f8:	f001 f891 	bl	8016a1e <USBD_CtlSendStatus>
 80158fc:	e02b      	b.n	8015956 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80158fe:	68fa      	ldr	r2, [r7, #12]
 8015900:	23a5      	movs	r3, #165	@ 0xa5
 8015902:	009b      	lsls	r3, r3, #2
 8015904:	58d3      	ldr	r3, [r2, r3]
 8015906:	2b05      	cmp	r3, #5
 8015908:	d125      	bne.n	8015956 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801590a:	68fa      	ldr	r2, [r7, #12]
 801590c:	23a5      	movs	r3, #165	@ 0xa5
 801590e:	009b      	lsls	r3, r3, #2
 8015910:	2100      	movs	r1, #0
 8015912:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	2100      	movs	r1, #0
 8015918:	0018      	movs	r0, r3
 801591a:	f001 fcc0 	bl	801729e <USBD_LL_StallEP>
 801591e:	e01a      	b.n	8015956 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015920:	68fa      	ldr	r2, [r7, #12]
 8015922:	23ad      	movs	r3, #173	@ 0xad
 8015924:	009b      	lsls	r3, r3, #2
 8015926:	58d3      	ldr	r3, [r2, r3]
 8015928:	699b      	ldr	r3, [r3, #24]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d011      	beq.n	8015952 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801592e:	68fa      	ldr	r2, [r7, #12]
 8015930:	23a7      	movs	r3, #167	@ 0xa7
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8015936:	2b03      	cmp	r3, #3
 8015938:	d10b      	bne.n	8015952 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801593a:	68fa      	ldr	r2, [r7, #12]
 801593c:	23ad      	movs	r3, #173	@ 0xad
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	58d3      	ldr	r3, [r2, r3]
 8015942:	699b      	ldr	r3, [r3, #24]
 8015944:	220b      	movs	r2, #11
 8015946:	18ba      	adds	r2, r7, r2
 8015948:	7811      	ldrb	r1, [r2, #0]
 801594a:	68fa      	ldr	r2, [r7, #12]
 801594c:	0010      	movs	r0, r2
 801594e:	4798      	blx	r3
 8015950:	e001      	b.n	8015956 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015952:	2302      	movs	r3, #2
 8015954:	e000      	b.n	8015958 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015956:	2300      	movs	r3, #0
}
 8015958:	0018      	movs	r0, r3
 801595a:	46bd      	mov	sp, r7
 801595c:	b006      	add	sp, #24
 801595e:	bd80      	pop	{r7, pc}

08015960 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b086      	sub	sp, #24
 8015964:	af00      	add	r7, sp, #0
 8015966:	60f8      	str	r0, [r7, #12]
 8015968:	607a      	str	r2, [r7, #4]
 801596a:	200b      	movs	r0, #11
 801596c:	183b      	adds	r3, r7, r0
 801596e:	1c0a      	adds	r2, r1, #0
 8015970:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015972:	183b      	adds	r3, r7, r0
 8015974:	781b      	ldrb	r3, [r3, #0]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d000      	beq.n	801597c <USBD_LL_DataInStage+0x1c>
 801597a:	e08e      	b.n	8015a9a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	3314      	adds	r3, #20
 8015980:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015982:	68fa      	ldr	r2, [r7, #12]
 8015984:	23a5      	movs	r3, #165	@ 0xa5
 8015986:	009b      	lsls	r3, r3, #2
 8015988:	58d3      	ldr	r3, [r2, r3]
 801598a:	2b02      	cmp	r3, #2
 801598c:	d164      	bne.n	8015a58 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	68da      	ldr	r2, [r3, #12]
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	691b      	ldr	r3, [r3, #16]
 8015996:	429a      	cmp	r2, r3
 8015998:	d915      	bls.n	80159c6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	68da      	ldr	r2, [r3, #12]
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	691b      	ldr	r3, [r3, #16]
 80159a2:	1ad2      	subs	r2, r2, r3
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	68db      	ldr	r3, [r3, #12]
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	6879      	ldr	r1, [r7, #4]
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	0018      	movs	r0, r3
 80159b4:	f000 ffe9 	bl	801698a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	2300      	movs	r3, #0
 80159bc:	2200      	movs	r2, #0
 80159be:	2100      	movs	r1, #0
 80159c0:	f001 fd56 	bl	8017470 <USBD_LL_PrepareReceive>
 80159c4:	e059      	b.n	8015a7a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	689a      	ldr	r2, [r3, #8]
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	691b      	ldr	r3, [r3, #16]
 80159ce:	0019      	movs	r1, r3
 80159d0:	0010      	movs	r0, r2
 80159d2:	f7ea fc3b 	bl	800024c <__aeabi_uidivmod>
 80159d6:	1e0b      	subs	r3, r1, #0
 80159d8:	d11f      	bne.n	8015a1a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	689a      	ldr	r2, [r3, #8]
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d319      	bcc.n	8015a1a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	689a      	ldr	r2, [r3, #8]
 80159ea:	68f9      	ldr	r1, [r7, #12]
 80159ec:	23a6      	movs	r3, #166	@ 0xa6
 80159ee:	009b      	lsls	r3, r3, #2
 80159f0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d211      	bcs.n	8015a1a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	2200      	movs	r2, #0
 80159fa:	2100      	movs	r1, #0
 80159fc:	0018      	movs	r0, r3
 80159fe:	f000 ffc4 	bl	801698a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015a02:	68fa      	ldr	r2, [r7, #12]
 8015a04:	23a6      	movs	r3, #166	@ 0xa6
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	2100      	movs	r1, #0
 8015a0a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015a0c:	68f8      	ldr	r0, [r7, #12]
 8015a0e:	2300      	movs	r3, #0
 8015a10:	2200      	movs	r2, #0
 8015a12:	2100      	movs	r1, #0
 8015a14:	f001 fd2c 	bl	8017470 <USBD_LL_PrepareReceive>
 8015a18:	e02f      	b.n	8015a7a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015a1a:	68fa      	ldr	r2, [r7, #12]
 8015a1c:	23ad      	movs	r3, #173	@ 0xad
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	58d3      	ldr	r3, [r2, r3]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d00d      	beq.n	8015a44 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015a28:	68fa      	ldr	r2, [r7, #12]
 8015a2a:	23a7      	movs	r3, #167	@ 0xa7
 8015a2c:	009b      	lsls	r3, r3, #2
 8015a2e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015a30:	2b03      	cmp	r3, #3
 8015a32:	d107      	bne.n	8015a44 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015a34:	68fa      	ldr	r2, [r7, #12]
 8015a36:	23ad      	movs	r3, #173	@ 0xad
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	58d3      	ldr	r3, [r2, r3]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	68fa      	ldr	r2, [r7, #12]
 8015a40:	0010      	movs	r0, r2
 8015a42:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2180      	movs	r1, #128	@ 0x80
 8015a48:	0018      	movs	r0, r3
 8015a4a:	f001 fc28 	bl	801729e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	0018      	movs	r0, r3
 8015a52:	f000 fff8 	bl	8016a46 <USBD_CtlReceiveStatus>
 8015a56:	e010      	b.n	8015a7a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015a58:	68fa      	ldr	r2, [r7, #12]
 8015a5a:	23a5      	movs	r3, #165	@ 0xa5
 8015a5c:	009b      	lsls	r3, r3, #2
 8015a5e:	58d3      	ldr	r3, [r2, r3]
 8015a60:	2b04      	cmp	r3, #4
 8015a62:	d005      	beq.n	8015a70 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8015a64:	68fa      	ldr	r2, [r7, #12]
 8015a66:	23a5      	movs	r3, #165	@ 0xa5
 8015a68:	009b      	lsls	r3, r3, #2
 8015a6a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d104      	bne.n	8015a7a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	2180      	movs	r1, #128	@ 0x80
 8015a74:	0018      	movs	r0, r3
 8015a76:	f001 fc12 	bl	801729e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8015a7a:	68fa      	ldr	r2, [r7, #12]
 8015a7c:	23a8      	movs	r3, #168	@ 0xa8
 8015a7e:	009b      	lsls	r3, r3, #2
 8015a80:	5cd3      	ldrb	r3, [r2, r3]
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d124      	bne.n	8015ad0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	0018      	movs	r0, r3
 8015a8a:	f7ff fe43 	bl	8015714 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015a8e:	68fa      	ldr	r2, [r7, #12]
 8015a90:	23a8      	movs	r3, #168	@ 0xa8
 8015a92:	009b      	lsls	r3, r3, #2
 8015a94:	2100      	movs	r1, #0
 8015a96:	54d1      	strb	r1, [r2, r3]
 8015a98:	e01a      	b.n	8015ad0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015a9a:	68fa      	ldr	r2, [r7, #12]
 8015a9c:	23ad      	movs	r3, #173	@ 0xad
 8015a9e:	009b      	lsls	r3, r3, #2
 8015aa0:	58d3      	ldr	r3, [r2, r3]
 8015aa2:	695b      	ldr	r3, [r3, #20]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d011      	beq.n	8015acc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015aa8:	68fa      	ldr	r2, [r7, #12]
 8015aaa:	23a7      	movs	r3, #167	@ 0xa7
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8015ab0:	2b03      	cmp	r3, #3
 8015ab2:	d10b      	bne.n	8015acc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8015ab4:	68fa      	ldr	r2, [r7, #12]
 8015ab6:	23ad      	movs	r3, #173	@ 0xad
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	58d3      	ldr	r3, [r2, r3]
 8015abc:	695b      	ldr	r3, [r3, #20]
 8015abe:	220b      	movs	r2, #11
 8015ac0:	18ba      	adds	r2, r7, r2
 8015ac2:	7811      	ldrb	r1, [r2, #0]
 8015ac4:	68fa      	ldr	r2, [r7, #12]
 8015ac6:	0010      	movs	r0, r2
 8015ac8:	4798      	blx	r3
 8015aca:	e001      	b.n	8015ad0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015acc:	2302      	movs	r3, #2
 8015ace:	e000      	b.n	8015ad2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8015ad0:	2300      	movs	r3, #0
}
 8015ad2:	0018      	movs	r0, r3
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	b006      	add	sp, #24
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b082      	sub	sp, #8
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	2340      	movs	r3, #64	@ 0x40
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	2100      	movs	r1, #0
 8015aea:	f001 fb76 	bl	80171da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	23ac      	movs	r3, #172	@ 0xac
 8015af2:	005b      	lsls	r3, r3, #1
 8015af4:	2101      	movs	r1, #1
 8015af6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	23b2      	movs	r3, #178	@ 0xb2
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	2140      	movs	r1, #64	@ 0x40
 8015b00:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b02:	6878      	ldr	r0, [r7, #4]
 8015b04:	2340      	movs	r3, #64	@ 0x40
 8015b06:	2200      	movs	r2, #0
 8015b08:	2180      	movs	r1, #128	@ 0x80
 8015b0a:	f001 fb66 	bl	80171da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2201      	movs	r2, #1
 8015b12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2240      	movs	r2, #64	@ 0x40
 8015b18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015b1a:	687a      	ldr	r2, [r7, #4]
 8015b1c:	23a7      	movs	r3, #167	@ 0xa7
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	2101      	movs	r1, #1
 8015b22:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	23a5      	movs	r3, #165	@ 0xa5
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	2100      	movs	r1, #0
 8015b2c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2200      	movs	r2, #0
 8015b32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015b34:	687a      	ldr	r2, [r7, #4]
 8015b36:	23a9      	movs	r3, #169	@ 0xa9
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	23ae      	movs	r3, #174	@ 0xae
 8015b42:	009b      	lsls	r3, r3, #2
 8015b44:	58d3      	ldr	r3, [r2, r3]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d00a      	beq.n	8015b60 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015b4a:	687a      	ldr	r2, [r7, #4]
 8015b4c:	23ad      	movs	r3, #173	@ 0xad
 8015b4e:	009b      	lsls	r3, r3, #2
 8015b50:	58d3      	ldr	r3, [r2, r3]
 8015b52:	685a      	ldr	r2, [r3, #4]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	b2d9      	uxtb	r1, r3
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	0018      	movs	r0, r3
 8015b5e:	4790      	blx	r2
  }

  return USBD_OK;
 8015b60:	2300      	movs	r3, #0
}
 8015b62:	0018      	movs	r0, r3
 8015b64:	46bd      	mov	sp, r7
 8015b66:	b002      	add	sp, #8
 8015b68:	bd80      	pop	{r7, pc}

08015b6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015b6a:	b580      	push	{r7, lr}
 8015b6c:	b082      	sub	sp, #8
 8015b6e:	af00      	add	r7, sp, #0
 8015b70:	6078      	str	r0, [r7, #4]
 8015b72:	000a      	movs	r2, r1
 8015b74:	1cfb      	adds	r3, r7, #3
 8015b76:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	1cfa      	adds	r2, r7, #3
 8015b7c:	7812      	ldrb	r2, [r2, #0]
 8015b7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	0018      	movs	r0, r3
 8015b84:	46bd      	mov	sp, r7
 8015b86:	b002      	add	sp, #8
 8015b88:	bd80      	pop	{r7, pc}
	...

08015b8c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	23a7      	movs	r3, #167	@ 0xa7
 8015b98:	009b      	lsls	r3, r3, #2
 8015b9a:	5cd1      	ldrb	r1, [r2, r3]
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	4a06      	ldr	r2, [pc, #24]	@ (8015bb8 <USBD_LL_Suspend+0x2c>)
 8015ba0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	23a7      	movs	r3, #167	@ 0xa7
 8015ba6:	009b      	lsls	r3, r3, #2
 8015ba8:	2104      	movs	r1, #4
 8015baa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015bac:	2300      	movs	r3, #0
}
 8015bae:	0018      	movs	r0, r3
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	b002      	add	sp, #8
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	46c0      	nop			@ (mov r8, r8)
 8015bb8:	0000029d 	.word	0x0000029d

08015bbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015bc4:	687a      	ldr	r2, [r7, #4]
 8015bc6:	23a7      	movs	r3, #167	@ 0xa7
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	5cd3      	ldrb	r3, [r2, r3]
 8015bcc:	2b04      	cmp	r3, #4
 8015bce:	d106      	bne.n	8015bde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	4a05      	ldr	r2, [pc, #20]	@ (8015be8 <USBD_LL_Resume+0x2c>)
 8015bd4:	5c99      	ldrb	r1, [r3, r2]
 8015bd6:	687a      	ldr	r2, [r7, #4]
 8015bd8:	23a7      	movs	r3, #167	@ 0xa7
 8015bda:	009b      	lsls	r3, r3, #2
 8015bdc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8015bde:	2300      	movs	r3, #0
}
 8015be0:	0018      	movs	r0, r3
 8015be2:	46bd      	mov	sp, r7
 8015be4:	b002      	add	sp, #8
 8015be6:	bd80      	pop	{r7, pc}
 8015be8:	0000029d 	.word	0x0000029d

08015bec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b082      	sub	sp, #8
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bf4:	687a      	ldr	r2, [r7, #4]
 8015bf6:	23a7      	movs	r3, #167	@ 0xa7
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	5cd3      	ldrb	r3, [r2, r3]
 8015bfc:	2b03      	cmp	r3, #3
 8015bfe:	d10e      	bne.n	8015c1e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8015c00:	687a      	ldr	r2, [r7, #4]
 8015c02:	23ad      	movs	r3, #173	@ 0xad
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	58d3      	ldr	r3, [r2, r3]
 8015c08:	69db      	ldr	r3, [r3, #28]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d007      	beq.n	8015c1e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	23ad      	movs	r3, #173	@ 0xad
 8015c12:	009b      	lsls	r3, r3, #2
 8015c14:	58d3      	ldr	r3, [r2, r3]
 8015c16:	69db      	ldr	r3, [r3, #28]
 8015c18:	687a      	ldr	r2, [r7, #4]
 8015c1a:	0010      	movs	r0, r2
 8015c1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c1e:	2300      	movs	r3, #0
}
 8015c20:	0018      	movs	r0, r3
 8015c22:	46bd      	mov	sp, r7
 8015c24:	b002      	add	sp, #8
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c32:	230f      	movs	r3, #15
 8015c34:	18fb      	adds	r3, r7, r3
 8015c36:	2200      	movs	r2, #0
 8015c38:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	781b      	ldrb	r3, [r3, #0]
 8015c3e:	001a      	movs	r2, r3
 8015c40:	2360      	movs	r3, #96	@ 0x60
 8015c42:	4013      	ands	r3, r2
 8015c44:	2b40      	cmp	r3, #64	@ 0x40
 8015c46:	d004      	beq.n	8015c52 <USBD_StdDevReq+0x2a>
 8015c48:	d84f      	bhi.n	8015cea <USBD_StdDevReq+0xc2>
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d00b      	beq.n	8015c66 <USBD_StdDevReq+0x3e>
 8015c4e:	2b20      	cmp	r3, #32
 8015c50:	d14b      	bne.n	8015cea <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	23ad      	movs	r3, #173	@ 0xad
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	58d3      	ldr	r3, [r2, r3]
 8015c5a:	689b      	ldr	r3, [r3, #8]
 8015c5c:	6839      	ldr	r1, [r7, #0]
 8015c5e:	687a      	ldr	r2, [r7, #4]
 8015c60:	0010      	movs	r0, r2
 8015c62:	4798      	blx	r3
      break;
 8015c64:	e048      	b.n	8015cf8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	785b      	ldrb	r3, [r3, #1]
 8015c6a:	2b09      	cmp	r3, #9
 8015c6c:	d835      	bhi.n	8015cda <USBD_StdDevReq+0xb2>
 8015c6e:	009a      	lsls	r2, r3, #2
 8015c70:	4b25      	ldr	r3, [pc, #148]	@ (8015d08 <USBD_StdDevReq+0xe0>)
 8015c72:	18d3      	adds	r3, r2, r3
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015c78:	683a      	ldr	r2, [r7, #0]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	0011      	movs	r1, r2
 8015c7e:	0018      	movs	r0, r3
 8015c80:	f000 fa52 	bl	8016128 <USBD_GetDescriptor>
          break;
 8015c84:	e030      	b.n	8015ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015c86:	683a      	ldr	r2, [r7, #0]
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	0011      	movs	r1, r2
 8015c8c:	0018      	movs	r0, r3
 8015c8e:	f000 fbfd 	bl	801648c <USBD_SetAddress>
          break;
 8015c92:	e029      	b.n	8015ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8015c94:	683a      	ldr	r2, [r7, #0]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	0011      	movs	r1, r2
 8015c9a:	0018      	movs	r0, r3
 8015c9c:	f000 fc4a 	bl	8016534 <USBD_SetConfig>
          break;
 8015ca0:	e022      	b.n	8015ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015ca2:	683a      	ldr	r2, [r7, #0]
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	0011      	movs	r1, r2
 8015ca8:	0018      	movs	r0, r3
 8015caa:	f000 fce7 	bl	801667c <USBD_GetConfig>
          break;
 8015cae:	e01b      	b.n	8015ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015cb0:	683a      	ldr	r2, [r7, #0]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	0011      	movs	r1, r2
 8015cb6:	0018      	movs	r0, r3
 8015cb8:	f000 fd1b 	bl	80166f2 <USBD_GetStatus>
          break;
 8015cbc:	e014      	b.n	8015ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015cbe:	683a      	ldr	r2, [r7, #0]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	0011      	movs	r1, r2
 8015cc4:	0018      	movs	r0, r3
 8015cc6:	f000 fd4e 	bl	8016766 <USBD_SetFeature>
          break;
 8015cca:	e00d      	b.n	8015ce8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015ccc:	683a      	ldr	r2, [r7, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	0011      	movs	r1, r2
 8015cd2:	0018      	movs	r0, r3
 8015cd4:	f000 fd5d 	bl	8016792 <USBD_ClrFeature>
          break;
 8015cd8:	e006      	b.n	8015ce8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015cda:	683a      	ldr	r2, [r7, #0]
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	0011      	movs	r1, r2
 8015ce0:	0018      	movs	r0, r3
 8015ce2:	f000 fdb4 	bl	801684e <USBD_CtlError>
          break;
 8015ce6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015ce8:	e006      	b.n	8015cf8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015cea:	683a      	ldr	r2, [r7, #0]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	0011      	movs	r1, r2
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	f000 fdac 	bl	801684e <USBD_CtlError>
      break;
 8015cf6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015cf8:	230f      	movs	r3, #15
 8015cfa:	18fb      	adds	r3, r7, r3
 8015cfc:	781b      	ldrb	r3, [r3, #0]
}
 8015cfe:	0018      	movs	r0, r3
 8015d00:	46bd      	mov	sp, r7
 8015d02:	b004      	add	sp, #16
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	46c0      	nop			@ (mov r8, r8)
 8015d08:	0801bcfc 	.word	0x0801bcfc

08015d0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8015d0c:	b5b0      	push	{r4, r5, r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d16:	230f      	movs	r3, #15
 8015d18:	18fb      	adds	r3, r7, r3
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	001a      	movs	r2, r3
 8015d24:	2360      	movs	r3, #96	@ 0x60
 8015d26:	4013      	ands	r3, r2
 8015d28:	2b40      	cmp	r3, #64	@ 0x40
 8015d2a:	d004      	beq.n	8015d36 <USBD_StdItfReq+0x2a>
 8015d2c:	d839      	bhi.n	8015da2 <USBD_StdItfReq+0x96>
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d001      	beq.n	8015d36 <USBD_StdItfReq+0x2a>
 8015d32:	2b20      	cmp	r3, #32
 8015d34:	d135      	bne.n	8015da2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	23a7      	movs	r3, #167	@ 0xa7
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	5cd3      	ldrb	r3, [r2, r3]
 8015d3e:	3b01      	subs	r3, #1
 8015d40:	2b02      	cmp	r3, #2
 8015d42:	d825      	bhi.n	8015d90 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	889b      	ldrh	r3, [r3, #4]
 8015d48:	b2db      	uxtb	r3, r3
 8015d4a:	2b01      	cmp	r3, #1
 8015d4c:	d819      	bhi.n	8015d82 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015d4e:	687a      	ldr	r2, [r7, #4]
 8015d50:	23ad      	movs	r3, #173	@ 0xad
 8015d52:	009b      	lsls	r3, r3, #2
 8015d54:	58d3      	ldr	r3, [r2, r3]
 8015d56:	689b      	ldr	r3, [r3, #8]
 8015d58:	250f      	movs	r5, #15
 8015d5a:	197c      	adds	r4, r7, r5
 8015d5c:	6839      	ldr	r1, [r7, #0]
 8015d5e:	687a      	ldr	r2, [r7, #4]
 8015d60:	0010      	movs	r0, r2
 8015d62:	4798      	blx	r3
 8015d64:	0003      	movs	r3, r0
 8015d66:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	88db      	ldrh	r3, [r3, #6]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d116      	bne.n	8015d9e <USBD_StdItfReq+0x92>
 8015d70:	197b      	adds	r3, r7, r5
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d112      	bne.n	8015d9e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	0018      	movs	r0, r3
 8015d7c:	f000 fe4f 	bl	8016a1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015d80:	e00d      	b.n	8015d9e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8015d82:	683a      	ldr	r2, [r7, #0]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	0011      	movs	r1, r2
 8015d88:	0018      	movs	r0, r3
 8015d8a:	f000 fd60 	bl	801684e <USBD_CtlError>
          break;
 8015d8e:	e006      	b.n	8015d9e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8015d90:	683a      	ldr	r2, [r7, #0]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	0011      	movs	r1, r2
 8015d96:	0018      	movs	r0, r3
 8015d98:	f000 fd59 	bl	801684e <USBD_CtlError>
          break;
 8015d9c:	e000      	b.n	8015da0 <USBD_StdItfReq+0x94>
          break;
 8015d9e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015da0:	e006      	b.n	8015db0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8015da2:	683a      	ldr	r2, [r7, #0]
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	0011      	movs	r1, r2
 8015da8:	0018      	movs	r0, r3
 8015daa:	f000 fd50 	bl	801684e <USBD_CtlError>
      break;
 8015dae:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015db0:	2300      	movs	r3, #0
}
 8015db2:	0018      	movs	r0, r3
 8015db4:	46bd      	mov	sp, r7
 8015db6:	b004      	add	sp, #16
 8015db8:	bdb0      	pop	{r4, r5, r7, pc}

08015dba <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8015dba:	b5b0      	push	{r4, r5, r7, lr}
 8015dbc:	b084      	sub	sp, #16
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	6078      	str	r0, [r7, #4]
 8015dc2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015dc4:	230f      	movs	r3, #15
 8015dc6:	18fb      	adds	r3, r7, r3
 8015dc8:	2200      	movs	r2, #0
 8015dca:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	889a      	ldrh	r2, [r3, #4]
 8015dd0:	230e      	movs	r3, #14
 8015dd2:	18fb      	adds	r3, r7, r3
 8015dd4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	001a      	movs	r2, r3
 8015ddc:	2360      	movs	r3, #96	@ 0x60
 8015dde:	4013      	ands	r3, r2
 8015de0:	2b40      	cmp	r3, #64	@ 0x40
 8015de2:	d006      	beq.n	8015df2 <USBD_StdEPReq+0x38>
 8015de4:	d900      	bls.n	8015de8 <USBD_StdEPReq+0x2e>
 8015de6:	e190      	b.n	801610a <USBD_StdEPReq+0x350>
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d00c      	beq.n	8015e06 <USBD_StdEPReq+0x4c>
 8015dec:	2b20      	cmp	r3, #32
 8015dee:	d000      	beq.n	8015df2 <USBD_StdEPReq+0x38>
 8015df0:	e18b      	b.n	801610a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	23ad      	movs	r3, #173	@ 0xad
 8015df6:	009b      	lsls	r3, r3, #2
 8015df8:	58d3      	ldr	r3, [r2, r3]
 8015dfa:	689b      	ldr	r3, [r3, #8]
 8015dfc:	6839      	ldr	r1, [r7, #0]
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	0010      	movs	r0, r2
 8015e02:	4798      	blx	r3
      break;
 8015e04:	e188      	b.n	8016118 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	781b      	ldrb	r3, [r3, #0]
 8015e0a:	001a      	movs	r2, r3
 8015e0c:	2360      	movs	r3, #96	@ 0x60
 8015e0e:	4013      	ands	r3, r2
 8015e10:	2b20      	cmp	r3, #32
 8015e12:	d10f      	bne.n	8015e34 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015e14:	687a      	ldr	r2, [r7, #4]
 8015e16:	23ad      	movs	r3, #173	@ 0xad
 8015e18:	009b      	lsls	r3, r3, #2
 8015e1a:	58d3      	ldr	r3, [r2, r3]
 8015e1c:	689b      	ldr	r3, [r3, #8]
 8015e1e:	250f      	movs	r5, #15
 8015e20:	197c      	adds	r4, r7, r5
 8015e22:	6839      	ldr	r1, [r7, #0]
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	0010      	movs	r0, r2
 8015e28:	4798      	blx	r3
 8015e2a:	0003      	movs	r3, r0
 8015e2c:	7023      	strb	r3, [r4, #0]

        return ret;
 8015e2e:	197b      	adds	r3, r7, r5
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	e174      	b.n	801611e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	785b      	ldrb	r3, [r3, #1]
 8015e38:	2b03      	cmp	r3, #3
 8015e3a:	d007      	beq.n	8015e4c <USBD_StdEPReq+0x92>
 8015e3c:	dd00      	ble.n	8015e40 <USBD_StdEPReq+0x86>
 8015e3e:	e15c      	b.n	80160fa <USBD_StdEPReq+0x340>
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d100      	bne.n	8015e46 <USBD_StdEPReq+0x8c>
 8015e44:	e092      	b.n	8015f6c <USBD_StdEPReq+0x1b2>
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d04b      	beq.n	8015ee2 <USBD_StdEPReq+0x128>
 8015e4a:	e156      	b.n	80160fa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015e4c:	687a      	ldr	r2, [r7, #4]
 8015e4e:	23a7      	movs	r3, #167	@ 0xa7
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	5cd3      	ldrb	r3, [r2, r3]
 8015e54:	2b02      	cmp	r3, #2
 8015e56:	d002      	beq.n	8015e5e <USBD_StdEPReq+0xa4>
 8015e58:	2b03      	cmp	r3, #3
 8015e5a:	d01d      	beq.n	8015e98 <USBD_StdEPReq+0xde>
 8015e5c:	e039      	b.n	8015ed2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e5e:	220e      	movs	r2, #14
 8015e60:	18bb      	adds	r3, r7, r2
 8015e62:	781b      	ldrb	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d010      	beq.n	8015e8a <USBD_StdEPReq+0xd0>
 8015e68:	18bb      	adds	r3, r7, r2
 8015e6a:	781b      	ldrb	r3, [r3, #0]
 8015e6c:	2b80      	cmp	r3, #128	@ 0x80
 8015e6e:	d00c      	beq.n	8015e8a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015e70:	18bb      	adds	r3, r7, r2
 8015e72:	781a      	ldrb	r2, [r3, #0]
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	0011      	movs	r1, r2
 8015e78:	0018      	movs	r0, r3
 8015e7a:	f001 fa10 	bl	801729e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2180      	movs	r1, #128	@ 0x80
 8015e82:	0018      	movs	r0, r3
 8015e84:	f001 fa0b 	bl	801729e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015e88:	e02a      	b.n	8015ee0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8015e8a:	683a      	ldr	r2, [r7, #0]
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	0011      	movs	r1, r2
 8015e90:	0018      	movs	r0, r3
 8015e92:	f000 fcdc 	bl	801684e <USBD_CtlError>
              break;
 8015e96:	e023      	b.n	8015ee0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	885b      	ldrh	r3, [r3, #2]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d113      	bne.n	8015ec8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8015ea0:	220e      	movs	r2, #14
 8015ea2:	18bb      	adds	r3, r7, r2
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d00e      	beq.n	8015ec8 <USBD_StdEPReq+0x10e>
 8015eaa:	18bb      	adds	r3, r7, r2
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	2b80      	cmp	r3, #128	@ 0x80
 8015eb0:	d00a      	beq.n	8015ec8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	88db      	ldrh	r3, [r3, #6]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d106      	bne.n	8015ec8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8015eba:	18bb      	adds	r3, r7, r2
 8015ebc:	781a      	ldrb	r2, [r3, #0]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	0011      	movs	r1, r2
 8015ec2:	0018      	movs	r0, r3
 8015ec4:	f001 f9eb 	bl	801729e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	0018      	movs	r0, r3
 8015ecc:	f000 fda7 	bl	8016a1e <USBD_CtlSendStatus>

              break;
 8015ed0:	e006      	b.n	8015ee0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8015ed2:	683a      	ldr	r2, [r7, #0]
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	0011      	movs	r1, r2
 8015ed8:	0018      	movs	r0, r3
 8015eda:	f000 fcb8 	bl	801684e <USBD_CtlError>
              break;
 8015ede:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015ee0:	e112      	b.n	8016108 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ee2:	687a      	ldr	r2, [r7, #4]
 8015ee4:	23a7      	movs	r3, #167	@ 0xa7
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	5cd3      	ldrb	r3, [r2, r3]
 8015eea:	2b02      	cmp	r3, #2
 8015eec:	d002      	beq.n	8015ef4 <USBD_StdEPReq+0x13a>
 8015eee:	2b03      	cmp	r3, #3
 8015ef0:	d01d      	beq.n	8015f2e <USBD_StdEPReq+0x174>
 8015ef2:	e032      	b.n	8015f5a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ef4:	220e      	movs	r2, #14
 8015ef6:	18bb      	adds	r3, r7, r2
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d010      	beq.n	8015f20 <USBD_StdEPReq+0x166>
 8015efe:	18bb      	adds	r3, r7, r2
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	2b80      	cmp	r3, #128	@ 0x80
 8015f04:	d00c      	beq.n	8015f20 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015f06:	18bb      	adds	r3, r7, r2
 8015f08:	781a      	ldrb	r2, [r3, #0]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	0011      	movs	r1, r2
 8015f0e:	0018      	movs	r0, r3
 8015f10:	f001 f9c5 	bl	801729e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2180      	movs	r1, #128	@ 0x80
 8015f18:	0018      	movs	r0, r3
 8015f1a:	f001 f9c0 	bl	801729e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015f1e:	e024      	b.n	8015f6a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8015f20:	683a      	ldr	r2, [r7, #0]
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	0011      	movs	r1, r2
 8015f26:	0018      	movs	r0, r3
 8015f28:	f000 fc91 	bl	801684e <USBD_CtlError>
              break;
 8015f2c:	e01d      	b.n	8015f6a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	885b      	ldrh	r3, [r3, #2]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d118      	bne.n	8015f68 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015f36:	210e      	movs	r1, #14
 8015f38:	187b      	adds	r3, r7, r1
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	227f      	movs	r2, #127	@ 0x7f
 8015f3e:	4013      	ands	r3, r2
 8015f40:	d006      	beq.n	8015f50 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8015f42:	187b      	adds	r3, r7, r1
 8015f44:	781a      	ldrb	r2, [r3, #0]
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	0011      	movs	r1, r2
 8015f4a:	0018      	movs	r0, r3
 8015f4c:	f001 f9d2 	bl	80172f4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	0018      	movs	r0, r3
 8015f54:	f000 fd63 	bl	8016a1e <USBD_CtlSendStatus>
              }
              break;
 8015f58:	e006      	b.n	8015f68 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8015f5a:	683a      	ldr	r2, [r7, #0]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	0011      	movs	r1, r2
 8015f60:	0018      	movs	r0, r3
 8015f62:	f000 fc74 	bl	801684e <USBD_CtlError>
              break;
 8015f66:	e000      	b.n	8015f6a <USBD_StdEPReq+0x1b0>
              break;
 8015f68:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015f6a:	e0cd      	b.n	8016108 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	23a7      	movs	r3, #167	@ 0xa7
 8015f70:	009b      	lsls	r3, r3, #2
 8015f72:	5cd3      	ldrb	r3, [r2, r3]
 8015f74:	2b02      	cmp	r3, #2
 8015f76:	d002      	beq.n	8015f7e <USBD_StdEPReq+0x1c4>
 8015f78:	2b03      	cmp	r3, #3
 8015f7a:	d03c      	beq.n	8015ff6 <USBD_StdEPReq+0x23c>
 8015f7c:	e0b5      	b.n	80160ea <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f7e:	220e      	movs	r2, #14
 8015f80:	18bb      	adds	r3, r7, r2
 8015f82:	781b      	ldrb	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d00a      	beq.n	8015f9e <USBD_StdEPReq+0x1e4>
 8015f88:	18bb      	adds	r3, r7, r2
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	2b80      	cmp	r3, #128	@ 0x80
 8015f8e:	d006      	beq.n	8015f9e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8015f90:	683a      	ldr	r2, [r7, #0]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	0011      	movs	r1, r2
 8015f96:	0018      	movs	r0, r3
 8015f98:	f000 fc59 	bl	801684e <USBD_CtlError>
                break;
 8015f9c:	e0ac      	b.n	80160f8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f9e:	220e      	movs	r2, #14
 8015fa0:	18bb      	adds	r3, r7, r2
 8015fa2:	781b      	ldrb	r3, [r3, #0]
 8015fa4:	b25b      	sxtb	r3, r3
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	da0c      	bge.n	8015fc4 <USBD_StdEPReq+0x20a>
 8015faa:	18bb      	adds	r3, r7, r2
 8015fac:	781b      	ldrb	r3, [r3, #0]
 8015fae:	227f      	movs	r2, #127	@ 0x7f
 8015fb0:	401a      	ands	r2, r3
 8015fb2:	0013      	movs	r3, r2
 8015fb4:	009b      	lsls	r3, r3, #2
 8015fb6:	189b      	adds	r3, r3, r2
 8015fb8:	009b      	lsls	r3, r3, #2
 8015fba:	3310      	adds	r3, #16
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	18d3      	adds	r3, r2, r3
 8015fc0:	3304      	adds	r3, #4
 8015fc2:	e00d      	b.n	8015fe0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015fc4:	230e      	movs	r3, #14
 8015fc6:	18fb      	adds	r3, r7, r3
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	227f      	movs	r2, #127	@ 0x7f
 8015fcc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fce:	0013      	movs	r3, r2
 8015fd0:	009b      	lsls	r3, r3, #2
 8015fd2:	189b      	adds	r3, r3, r2
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	3351      	adds	r3, #81	@ 0x51
 8015fd8:	33ff      	adds	r3, #255	@ 0xff
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	18d3      	adds	r3, r2, r3
 8015fde:	3304      	adds	r3, #4
 8015fe0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015fe8:	68b9      	ldr	r1, [r7, #8]
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2202      	movs	r2, #2
 8015fee:	0018      	movs	r0, r3
 8015ff0:	f000 fcab 	bl	801694a <USBD_CtlSendData>
              break;
 8015ff4:	e080      	b.n	80160f8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015ff6:	220e      	movs	r2, #14
 8015ff8:	18bb      	adds	r3, r7, r2
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	b25b      	sxtb	r3, r3
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	da14      	bge.n	801602c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016002:	18bb      	adds	r3, r7, r2
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	220f      	movs	r2, #15
 8016008:	401a      	ands	r2, r3
 801600a:	6879      	ldr	r1, [r7, #4]
 801600c:	0013      	movs	r3, r2
 801600e:	009b      	lsls	r3, r3, #2
 8016010:	189b      	adds	r3, r3, r2
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	18cb      	adds	r3, r1, r3
 8016016:	3318      	adds	r3, #24
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d11e      	bne.n	801605c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801601e:	683a      	ldr	r2, [r7, #0]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	0011      	movs	r1, r2
 8016024:	0018      	movs	r0, r3
 8016026:	f000 fc12 	bl	801684e <USBD_CtlError>
                  break;
 801602a:	e065      	b.n	80160f8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801602c:	230e      	movs	r3, #14
 801602e:	18fb      	adds	r3, r7, r3
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	220f      	movs	r2, #15
 8016034:	401a      	ands	r2, r3
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	23ac      	movs	r3, #172	@ 0xac
 801603a:	0059      	lsls	r1, r3, #1
 801603c:	0013      	movs	r3, r2
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	189b      	adds	r3, r3, r2
 8016042:	009b      	lsls	r3, r3, #2
 8016044:	18c3      	adds	r3, r0, r3
 8016046:	185b      	adds	r3, r3, r1
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d106      	bne.n	801605c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801604e:	683a      	ldr	r2, [r7, #0]
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	0011      	movs	r1, r2
 8016054:	0018      	movs	r0, r3
 8016056:	f000 fbfa 	bl	801684e <USBD_CtlError>
                  break;
 801605a:	e04d      	b.n	80160f8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801605c:	220e      	movs	r2, #14
 801605e:	18bb      	adds	r3, r7, r2
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	b25b      	sxtb	r3, r3
 8016064:	2b00      	cmp	r3, #0
 8016066:	da0c      	bge.n	8016082 <USBD_StdEPReq+0x2c8>
 8016068:	18bb      	adds	r3, r7, r2
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	227f      	movs	r2, #127	@ 0x7f
 801606e:	401a      	ands	r2, r3
 8016070:	0013      	movs	r3, r2
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	189b      	adds	r3, r3, r2
 8016076:	009b      	lsls	r3, r3, #2
 8016078:	3310      	adds	r3, #16
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	18d3      	adds	r3, r2, r3
 801607e:	3304      	adds	r3, #4
 8016080:	e00d      	b.n	801609e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016082:	230e      	movs	r3, #14
 8016084:	18fb      	adds	r3, r7, r3
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	227f      	movs	r2, #127	@ 0x7f
 801608a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801608c:	0013      	movs	r3, r2
 801608e:	009b      	lsls	r3, r3, #2
 8016090:	189b      	adds	r3, r3, r2
 8016092:	009b      	lsls	r3, r3, #2
 8016094:	3351      	adds	r3, #81	@ 0x51
 8016096:	33ff      	adds	r3, #255	@ 0xff
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	18d3      	adds	r3, r2, r3
 801609c:	3304      	adds	r3, #4
 801609e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80160a0:	220e      	movs	r2, #14
 80160a2:	18bb      	adds	r3, r7, r2
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d003      	beq.n	80160b2 <USBD_StdEPReq+0x2f8>
 80160aa:	18bb      	adds	r3, r7, r2
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	2b80      	cmp	r3, #128	@ 0x80
 80160b0:	d103      	bne.n	80160ba <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	2200      	movs	r2, #0
 80160b6:	601a      	str	r2, [r3, #0]
 80160b8:	e010      	b.n	80160dc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80160ba:	230e      	movs	r3, #14
 80160bc:	18fb      	adds	r3, r7, r3
 80160be:	781a      	ldrb	r2, [r3, #0]
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	0011      	movs	r1, r2
 80160c4:	0018      	movs	r0, r3
 80160c6:	f001 f940 	bl	801734a <USBD_LL_IsStallEP>
 80160ca:	1e03      	subs	r3, r0, #0
 80160cc:	d003      	beq.n	80160d6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80160ce:	68bb      	ldr	r3, [r7, #8]
 80160d0:	2201      	movs	r2, #1
 80160d2:	601a      	str	r2, [r3, #0]
 80160d4:	e002      	b.n	80160dc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	2200      	movs	r2, #0
 80160da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80160dc:	68b9      	ldr	r1, [r7, #8]
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2202      	movs	r2, #2
 80160e2:	0018      	movs	r0, r3
 80160e4:	f000 fc31 	bl	801694a <USBD_CtlSendData>
              break;
 80160e8:	e006      	b.n	80160f8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80160ea:	683a      	ldr	r2, [r7, #0]
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	0011      	movs	r1, r2
 80160f0:	0018      	movs	r0, r3
 80160f2:	f000 fbac 	bl	801684e <USBD_CtlError>
              break;
 80160f6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80160f8:	e006      	b.n	8016108 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80160fa:	683a      	ldr	r2, [r7, #0]
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	0011      	movs	r1, r2
 8016100:	0018      	movs	r0, r3
 8016102:	f000 fba4 	bl	801684e <USBD_CtlError>
          break;
 8016106:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016108:	e006      	b.n	8016118 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801610a:	683a      	ldr	r2, [r7, #0]
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	0011      	movs	r1, r2
 8016110:	0018      	movs	r0, r3
 8016112:	f000 fb9c 	bl	801684e <USBD_CtlError>
      break;
 8016116:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8016118:	230f      	movs	r3, #15
 801611a:	18fb      	adds	r3, r7, r3
 801611c:	781b      	ldrb	r3, [r3, #0]
}
 801611e:	0018      	movs	r0, r3
 8016120:	46bd      	mov	sp, r7
 8016122:	b004      	add	sp, #16
 8016124:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016128 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b084      	sub	sp, #16
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016132:	2308      	movs	r3, #8
 8016134:	18fb      	adds	r3, r7, r3
 8016136:	2200      	movs	r2, #0
 8016138:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801613a:	2300      	movs	r3, #0
 801613c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801613e:	230b      	movs	r3, #11
 8016140:	18fb      	adds	r3, r7, r3
 8016142:	2200      	movs	r2, #0
 8016144:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	885b      	ldrh	r3, [r3, #2]
 801614a:	0a1b      	lsrs	r3, r3, #8
 801614c:	b29b      	uxth	r3, r3
 801614e:	2b07      	cmp	r3, #7
 8016150:	d900      	bls.n	8016154 <USBD_GetDescriptor+0x2c>
 8016152:	e159      	b.n	8016408 <USBD_GetDescriptor+0x2e0>
 8016154:	009a      	lsls	r2, r3, #2
 8016156:	4bcb      	ldr	r3, [pc, #812]	@ (8016484 <USBD_GetDescriptor+0x35c>)
 8016158:	18d3      	adds	r3, r2, r3
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801615e:	687a      	ldr	r2, [r7, #4]
 8016160:	23ac      	movs	r3, #172	@ 0xac
 8016162:	009b      	lsls	r3, r3, #2
 8016164:	58d3      	ldr	r3, [r2, r3]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	7c12      	ldrb	r2, [r2, #16]
 801616c:	2108      	movs	r1, #8
 801616e:	1879      	adds	r1, r7, r1
 8016170:	0010      	movs	r0, r2
 8016172:	4798      	blx	r3
 8016174:	0003      	movs	r3, r0
 8016176:	60fb      	str	r3, [r7, #12]
      break;
 8016178:	e153      	b.n	8016422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	7c1b      	ldrb	r3, [r3, #16]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d10f      	bne.n	80161a2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016182:	687a      	ldr	r2, [r7, #4]
 8016184:	23ad      	movs	r3, #173	@ 0xad
 8016186:	009b      	lsls	r3, r3, #2
 8016188:	58d3      	ldr	r3, [r2, r3]
 801618a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801618c:	2208      	movs	r2, #8
 801618e:	18ba      	adds	r2, r7, r2
 8016190:	0010      	movs	r0, r2
 8016192:	4798      	blx	r3
 8016194:	0003      	movs	r3, r0
 8016196:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	3301      	adds	r3, #1
 801619c:	2202      	movs	r2, #2
 801619e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80161a0:	e13f      	b.n	8016422 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80161a2:	687a      	ldr	r2, [r7, #4]
 80161a4:	23ad      	movs	r3, #173	@ 0xad
 80161a6:	009b      	lsls	r3, r3, #2
 80161a8:	58d3      	ldr	r3, [r2, r3]
 80161aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161ac:	2208      	movs	r2, #8
 80161ae:	18ba      	adds	r2, r7, r2
 80161b0:	0010      	movs	r0, r2
 80161b2:	4798      	blx	r3
 80161b4:	0003      	movs	r3, r0
 80161b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	3301      	adds	r3, #1
 80161bc:	2202      	movs	r2, #2
 80161be:	701a      	strb	r2, [r3, #0]
      break;
 80161c0:	e12f      	b.n	8016422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	885b      	ldrh	r3, [r3, #2]
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	2b05      	cmp	r3, #5
 80161ca:	d900      	bls.n	80161ce <USBD_GetDescriptor+0xa6>
 80161cc:	e0d0      	b.n	8016370 <USBD_GetDescriptor+0x248>
 80161ce:	009a      	lsls	r2, r3, #2
 80161d0:	4bad      	ldr	r3, [pc, #692]	@ (8016488 <USBD_GetDescriptor+0x360>)
 80161d2:	18d3      	adds	r3, r2, r3
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	23ac      	movs	r3, #172	@ 0xac
 80161dc:	009b      	lsls	r3, r3, #2
 80161de:	58d3      	ldr	r3, [r2, r3]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00d      	beq.n	8016202 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80161e6:	687a      	ldr	r2, [r7, #4]
 80161e8:	23ac      	movs	r3, #172	@ 0xac
 80161ea:	009b      	lsls	r3, r3, #2
 80161ec:	58d3      	ldr	r3, [r2, r3]
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	687a      	ldr	r2, [r7, #4]
 80161f2:	7c12      	ldrb	r2, [r2, #16]
 80161f4:	2108      	movs	r1, #8
 80161f6:	1879      	adds	r1, r7, r1
 80161f8:	0010      	movs	r0, r2
 80161fa:	4798      	blx	r3
 80161fc:	0003      	movs	r3, r0
 80161fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016200:	e0c3      	b.n	801638a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016202:	683a      	ldr	r2, [r7, #0]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	0011      	movs	r1, r2
 8016208:	0018      	movs	r0, r3
 801620a:	f000 fb20 	bl	801684e <USBD_CtlError>
            err++;
 801620e:	210b      	movs	r1, #11
 8016210:	187b      	adds	r3, r7, r1
 8016212:	781a      	ldrb	r2, [r3, #0]
 8016214:	187b      	adds	r3, r7, r1
 8016216:	3201      	adds	r2, #1
 8016218:	701a      	strb	r2, [r3, #0]
          break;
 801621a:	e0b6      	b.n	801638a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801621c:	687a      	ldr	r2, [r7, #4]
 801621e:	23ac      	movs	r3, #172	@ 0xac
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	58d3      	ldr	r3, [r2, r3]
 8016224:	689b      	ldr	r3, [r3, #8]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00d      	beq.n	8016246 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	23ac      	movs	r3, #172	@ 0xac
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	58d3      	ldr	r3, [r2, r3]
 8016232:	689b      	ldr	r3, [r3, #8]
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	7c12      	ldrb	r2, [r2, #16]
 8016238:	2108      	movs	r1, #8
 801623a:	1879      	adds	r1, r7, r1
 801623c:	0010      	movs	r0, r2
 801623e:	4798      	blx	r3
 8016240:	0003      	movs	r3, r0
 8016242:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016244:	e0a1      	b.n	801638a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016246:	683a      	ldr	r2, [r7, #0]
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	0011      	movs	r1, r2
 801624c:	0018      	movs	r0, r3
 801624e:	f000 fafe 	bl	801684e <USBD_CtlError>
            err++;
 8016252:	210b      	movs	r1, #11
 8016254:	187b      	adds	r3, r7, r1
 8016256:	781a      	ldrb	r2, [r3, #0]
 8016258:	187b      	adds	r3, r7, r1
 801625a:	3201      	adds	r2, #1
 801625c:	701a      	strb	r2, [r3, #0]
          break;
 801625e:	e094      	b.n	801638a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016260:	687a      	ldr	r2, [r7, #4]
 8016262:	23ac      	movs	r3, #172	@ 0xac
 8016264:	009b      	lsls	r3, r3, #2
 8016266:	58d3      	ldr	r3, [r2, r3]
 8016268:	68db      	ldr	r3, [r3, #12]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d00d      	beq.n	801628a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	23ac      	movs	r3, #172	@ 0xac
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	58d3      	ldr	r3, [r2, r3]
 8016276:	68db      	ldr	r3, [r3, #12]
 8016278:	687a      	ldr	r2, [r7, #4]
 801627a:	7c12      	ldrb	r2, [r2, #16]
 801627c:	2108      	movs	r1, #8
 801627e:	1879      	adds	r1, r7, r1
 8016280:	0010      	movs	r0, r2
 8016282:	4798      	blx	r3
 8016284:	0003      	movs	r3, r0
 8016286:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016288:	e07f      	b.n	801638a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801628a:	683a      	ldr	r2, [r7, #0]
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	0011      	movs	r1, r2
 8016290:	0018      	movs	r0, r3
 8016292:	f000 fadc 	bl	801684e <USBD_CtlError>
            err++;
 8016296:	210b      	movs	r1, #11
 8016298:	187b      	adds	r3, r7, r1
 801629a:	781a      	ldrb	r2, [r3, #0]
 801629c:	187b      	adds	r3, r7, r1
 801629e:	3201      	adds	r2, #1
 80162a0:	701a      	strb	r2, [r3, #0]
          break;
 80162a2:	e072      	b.n	801638a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80162a4:	687a      	ldr	r2, [r7, #4]
 80162a6:	23ac      	movs	r3, #172	@ 0xac
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	58d3      	ldr	r3, [r2, r3]
 80162ac:	691b      	ldr	r3, [r3, #16]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d00d      	beq.n	80162ce <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	23ac      	movs	r3, #172	@ 0xac
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	58d3      	ldr	r3, [r2, r3]
 80162ba:	691b      	ldr	r3, [r3, #16]
 80162bc:	687a      	ldr	r2, [r7, #4]
 80162be:	7c12      	ldrb	r2, [r2, #16]
 80162c0:	2108      	movs	r1, #8
 80162c2:	1879      	adds	r1, r7, r1
 80162c4:	0010      	movs	r0, r2
 80162c6:	4798      	blx	r3
 80162c8:	0003      	movs	r3, r0
 80162ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162cc:	e05d      	b.n	801638a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80162ce:	683a      	ldr	r2, [r7, #0]
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	0011      	movs	r1, r2
 80162d4:	0018      	movs	r0, r3
 80162d6:	f000 faba 	bl	801684e <USBD_CtlError>
            err++;
 80162da:	210b      	movs	r1, #11
 80162dc:	187b      	adds	r3, r7, r1
 80162de:	781a      	ldrb	r2, [r3, #0]
 80162e0:	187b      	adds	r3, r7, r1
 80162e2:	3201      	adds	r2, #1
 80162e4:	701a      	strb	r2, [r3, #0]
          break;
 80162e6:	e050      	b.n	801638a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80162e8:	687a      	ldr	r2, [r7, #4]
 80162ea:	23ac      	movs	r3, #172	@ 0xac
 80162ec:	009b      	lsls	r3, r3, #2
 80162ee:	58d3      	ldr	r3, [r2, r3]
 80162f0:	695b      	ldr	r3, [r3, #20]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d00d      	beq.n	8016312 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80162f6:	687a      	ldr	r2, [r7, #4]
 80162f8:	23ac      	movs	r3, #172	@ 0xac
 80162fa:	009b      	lsls	r3, r3, #2
 80162fc:	58d3      	ldr	r3, [r2, r3]
 80162fe:	695b      	ldr	r3, [r3, #20]
 8016300:	687a      	ldr	r2, [r7, #4]
 8016302:	7c12      	ldrb	r2, [r2, #16]
 8016304:	2108      	movs	r1, #8
 8016306:	1879      	adds	r1, r7, r1
 8016308:	0010      	movs	r0, r2
 801630a:	4798      	blx	r3
 801630c:	0003      	movs	r3, r0
 801630e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016310:	e03b      	b.n	801638a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016312:	683a      	ldr	r2, [r7, #0]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	0011      	movs	r1, r2
 8016318:	0018      	movs	r0, r3
 801631a:	f000 fa98 	bl	801684e <USBD_CtlError>
            err++;
 801631e:	210b      	movs	r1, #11
 8016320:	187b      	adds	r3, r7, r1
 8016322:	781a      	ldrb	r2, [r3, #0]
 8016324:	187b      	adds	r3, r7, r1
 8016326:	3201      	adds	r2, #1
 8016328:	701a      	strb	r2, [r3, #0]
          break;
 801632a:	e02e      	b.n	801638a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801632c:	687a      	ldr	r2, [r7, #4]
 801632e:	23ac      	movs	r3, #172	@ 0xac
 8016330:	009b      	lsls	r3, r3, #2
 8016332:	58d3      	ldr	r3, [r2, r3]
 8016334:	699b      	ldr	r3, [r3, #24]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d00d      	beq.n	8016356 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	23ac      	movs	r3, #172	@ 0xac
 801633e:	009b      	lsls	r3, r3, #2
 8016340:	58d3      	ldr	r3, [r2, r3]
 8016342:	699b      	ldr	r3, [r3, #24]
 8016344:	687a      	ldr	r2, [r7, #4]
 8016346:	7c12      	ldrb	r2, [r2, #16]
 8016348:	2108      	movs	r1, #8
 801634a:	1879      	adds	r1, r7, r1
 801634c:	0010      	movs	r0, r2
 801634e:	4798      	blx	r3
 8016350:	0003      	movs	r3, r0
 8016352:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016354:	e019      	b.n	801638a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016356:	683a      	ldr	r2, [r7, #0]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	0011      	movs	r1, r2
 801635c:	0018      	movs	r0, r3
 801635e:	f000 fa76 	bl	801684e <USBD_CtlError>
            err++;
 8016362:	210b      	movs	r1, #11
 8016364:	187b      	adds	r3, r7, r1
 8016366:	781a      	ldrb	r2, [r3, #0]
 8016368:	187b      	adds	r3, r7, r1
 801636a:	3201      	adds	r2, #1
 801636c:	701a      	strb	r2, [r3, #0]
          break;
 801636e:	e00c      	b.n	801638a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8016370:	683a      	ldr	r2, [r7, #0]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	0011      	movs	r1, r2
 8016376:	0018      	movs	r0, r3
 8016378:	f000 fa69 	bl	801684e <USBD_CtlError>
          err++;
 801637c:	210b      	movs	r1, #11
 801637e:	187b      	adds	r3, r7, r1
 8016380:	781a      	ldrb	r2, [r3, #0]
 8016382:	187b      	adds	r3, r7, r1
 8016384:	3201      	adds	r2, #1
 8016386:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8016388:	e04b      	b.n	8016422 <USBD_GetDescriptor+0x2fa>
 801638a:	e04a      	b.n	8016422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	7c1b      	ldrb	r3, [r3, #16]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d10b      	bne.n	80163ac <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016394:	687a      	ldr	r2, [r7, #4]
 8016396:	23ad      	movs	r3, #173	@ 0xad
 8016398:	009b      	lsls	r3, r3, #2
 801639a:	58d3      	ldr	r3, [r2, r3]
 801639c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801639e:	2208      	movs	r2, #8
 80163a0:	18ba      	adds	r2, r7, r2
 80163a2:	0010      	movs	r0, r2
 80163a4:	4798      	blx	r3
 80163a6:	0003      	movs	r3, r0
 80163a8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80163aa:	e03a      	b.n	8016422 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80163ac:	683a      	ldr	r2, [r7, #0]
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	0011      	movs	r1, r2
 80163b2:	0018      	movs	r0, r3
 80163b4:	f000 fa4b 	bl	801684e <USBD_CtlError>
        err++;
 80163b8:	210b      	movs	r1, #11
 80163ba:	187b      	adds	r3, r7, r1
 80163bc:	781a      	ldrb	r2, [r3, #0]
 80163be:	187b      	adds	r3, r7, r1
 80163c0:	3201      	adds	r2, #1
 80163c2:	701a      	strb	r2, [r3, #0]
      break;
 80163c4:	e02d      	b.n	8016422 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	7c1b      	ldrb	r3, [r3, #16]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d10f      	bne.n	80163ee <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80163ce:	687a      	ldr	r2, [r7, #4]
 80163d0:	23ad      	movs	r3, #173	@ 0xad
 80163d2:	009b      	lsls	r3, r3, #2
 80163d4:	58d3      	ldr	r3, [r2, r3]
 80163d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163d8:	2208      	movs	r2, #8
 80163da:	18ba      	adds	r2, r7, r2
 80163dc:	0010      	movs	r0, r2
 80163de:	4798      	blx	r3
 80163e0:	0003      	movs	r3, r0
 80163e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	3301      	adds	r3, #1
 80163e8:	2207      	movs	r2, #7
 80163ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80163ec:	e019      	b.n	8016422 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80163ee:	683a      	ldr	r2, [r7, #0]
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	0011      	movs	r1, r2
 80163f4:	0018      	movs	r0, r3
 80163f6:	f000 fa2a 	bl	801684e <USBD_CtlError>
        err++;
 80163fa:	210b      	movs	r1, #11
 80163fc:	187b      	adds	r3, r7, r1
 80163fe:	781a      	ldrb	r2, [r3, #0]
 8016400:	187b      	adds	r3, r7, r1
 8016402:	3201      	adds	r2, #1
 8016404:	701a      	strb	r2, [r3, #0]
      break;
 8016406:	e00c      	b.n	8016422 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8016408:	683a      	ldr	r2, [r7, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	0011      	movs	r1, r2
 801640e:	0018      	movs	r0, r3
 8016410:	f000 fa1d 	bl	801684e <USBD_CtlError>
      err++;
 8016414:	210b      	movs	r1, #11
 8016416:	187b      	adds	r3, r7, r1
 8016418:	781a      	ldrb	r2, [r3, #0]
 801641a:	187b      	adds	r3, r7, r1
 801641c:	3201      	adds	r2, #1
 801641e:	701a      	strb	r2, [r3, #0]
      break;
 8016420:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8016422:	230b      	movs	r3, #11
 8016424:	18fb      	adds	r3, r7, r3
 8016426:	781b      	ldrb	r3, [r3, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d127      	bne.n	801647c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801642c:	2108      	movs	r1, #8
 801642e:	187b      	adds	r3, r7, r1
 8016430:	881b      	ldrh	r3, [r3, #0]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d019      	beq.n	801646a <USBD_GetDescriptor+0x342>
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	88db      	ldrh	r3, [r3, #6]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d015      	beq.n	801646a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	88da      	ldrh	r2, [r3, #6]
 8016442:	187b      	adds	r3, r7, r1
 8016444:	881b      	ldrh	r3, [r3, #0]
 8016446:	1c18      	adds	r0, r3, #0
 8016448:	1c11      	adds	r1, r2, #0
 801644a:	b28a      	uxth	r2, r1
 801644c:	b283      	uxth	r3, r0
 801644e:	429a      	cmp	r2, r3
 8016450:	d900      	bls.n	8016454 <USBD_GetDescriptor+0x32c>
 8016452:	1c01      	adds	r1, r0, #0
 8016454:	b28a      	uxth	r2, r1
 8016456:	2108      	movs	r1, #8
 8016458:	187b      	adds	r3, r7, r1
 801645a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801645c:	187b      	adds	r3, r7, r1
 801645e:	881a      	ldrh	r2, [r3, #0]
 8016460:	68f9      	ldr	r1, [r7, #12]
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	0018      	movs	r0, r3
 8016466:	f000 fa70 	bl	801694a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	88db      	ldrh	r3, [r3, #6]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d105      	bne.n	801647e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	0018      	movs	r0, r3
 8016476:	f000 fad2 	bl	8016a1e <USBD_CtlSendStatus>
 801647a:	e000      	b.n	801647e <USBD_GetDescriptor+0x356>
    return;
 801647c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801647e:	46bd      	mov	sp, r7
 8016480:	b004      	add	sp, #16
 8016482:	bd80      	pop	{r7, pc}
 8016484:	0801bd24 	.word	0x0801bd24
 8016488:	0801bd44 	.word	0x0801bd44

0801648c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801648c:	b590      	push	{r4, r7, lr}
 801648e:	b085      	sub	sp, #20
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	889b      	ldrh	r3, [r3, #4]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d13d      	bne.n	801651a <USBD_SetAddress+0x8e>
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	88db      	ldrh	r3, [r3, #6]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d139      	bne.n	801651a <USBD_SetAddress+0x8e>
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	885b      	ldrh	r3, [r3, #2]
 80164aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80164ac:	d835      	bhi.n	801651a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	885b      	ldrh	r3, [r3, #2]
 80164b2:	b2da      	uxtb	r2, r3
 80164b4:	230f      	movs	r3, #15
 80164b6:	18fb      	adds	r3, r7, r3
 80164b8:	217f      	movs	r1, #127	@ 0x7f
 80164ba:	400a      	ands	r2, r1
 80164bc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	23a7      	movs	r3, #167	@ 0xa7
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	5cd3      	ldrb	r3, [r2, r3]
 80164c6:	2b03      	cmp	r3, #3
 80164c8:	d106      	bne.n	80164d8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80164ca:	683a      	ldr	r2, [r7, #0]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	0011      	movs	r1, r2
 80164d0:	0018      	movs	r0, r3
 80164d2:	f000 f9bc 	bl	801684e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164d6:	e027      	b.n	8016528 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	240f      	movs	r4, #15
 80164dc:	193a      	adds	r2, r7, r4
 80164de:	4914      	ldr	r1, [pc, #80]	@ (8016530 <USBD_SetAddress+0xa4>)
 80164e0:	7812      	ldrb	r2, [r2, #0]
 80164e2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80164e4:	193b      	adds	r3, r7, r4
 80164e6:	781a      	ldrb	r2, [r3, #0]
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	0011      	movs	r1, r2
 80164ec:	0018      	movs	r0, r3
 80164ee:	f000 ff5d 	bl	80173ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	0018      	movs	r0, r3
 80164f6:	f000 fa92 	bl	8016a1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80164fa:	193b      	adds	r3, r7, r4
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d005      	beq.n	801650e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016502:	687a      	ldr	r2, [r7, #4]
 8016504:	23a7      	movs	r3, #167	@ 0xa7
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	2102      	movs	r1, #2
 801650a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801650c:	e00c      	b.n	8016528 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	23a7      	movs	r3, #167	@ 0xa7
 8016512:	009b      	lsls	r3, r3, #2
 8016514:	2101      	movs	r1, #1
 8016516:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016518:	e006      	b.n	8016528 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801651a:	683a      	ldr	r2, [r7, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	0011      	movs	r1, r2
 8016520:	0018      	movs	r0, r3
 8016522:	f000 f994 	bl	801684e <USBD_CtlError>
  }
}
 8016526:	46c0      	nop			@ (mov r8, r8)
 8016528:	46c0      	nop			@ (mov r8, r8)
 801652a:	46bd      	mov	sp, r7
 801652c:	b005      	add	sp, #20
 801652e:	bd90      	pop	{r4, r7, pc}
 8016530:	0000029e 	.word	0x0000029e

08016534 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b082      	sub	sp, #8
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
 801653c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	885b      	ldrh	r3, [r3, #2]
 8016542:	b2da      	uxtb	r2, r3
 8016544:	4b4c      	ldr	r3, [pc, #304]	@ (8016678 <USBD_SetConfig+0x144>)
 8016546:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016548:	4b4b      	ldr	r3, [pc, #300]	@ (8016678 <USBD_SetConfig+0x144>)
 801654a:	781b      	ldrb	r3, [r3, #0]
 801654c:	2b01      	cmp	r3, #1
 801654e:	d906      	bls.n	801655e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8016550:	683a      	ldr	r2, [r7, #0]
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	0011      	movs	r1, r2
 8016556:	0018      	movs	r0, r3
 8016558:	f000 f979 	bl	801684e <USBD_CtlError>
 801655c:	e088      	b.n	8016670 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801655e:	687a      	ldr	r2, [r7, #4]
 8016560:	23a7      	movs	r3, #167	@ 0xa7
 8016562:	009b      	lsls	r3, r3, #2
 8016564:	5cd3      	ldrb	r3, [r2, r3]
 8016566:	2b02      	cmp	r3, #2
 8016568:	d002      	beq.n	8016570 <USBD_SetConfig+0x3c>
 801656a:	2b03      	cmp	r3, #3
 801656c:	d029      	beq.n	80165c2 <USBD_SetConfig+0x8e>
 801656e:	e071      	b.n	8016654 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8016570:	4b41      	ldr	r3, [pc, #260]	@ (8016678 <USBD_SetConfig+0x144>)
 8016572:	781b      	ldrb	r3, [r3, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d01f      	beq.n	80165b8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8016578:	4b3f      	ldr	r3, [pc, #252]	@ (8016678 <USBD_SetConfig+0x144>)
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	001a      	movs	r2, r3
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	23a7      	movs	r3, #167	@ 0xa7
 8016586:	009b      	lsls	r3, r3, #2
 8016588:	2103      	movs	r1, #3
 801658a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801658c:	4b3a      	ldr	r3, [pc, #232]	@ (8016678 <USBD_SetConfig+0x144>)
 801658e:	781a      	ldrb	r2, [r3, #0]
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	0011      	movs	r1, r2
 8016594:	0018      	movs	r0, r3
 8016596:	f7ff f8c6 	bl	8015726 <USBD_SetClassConfig>
 801659a:	0003      	movs	r3, r0
 801659c:	2b02      	cmp	r3, #2
 801659e:	d106      	bne.n	80165ae <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80165a0:	683a      	ldr	r2, [r7, #0]
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	0011      	movs	r1, r2
 80165a6:	0018      	movs	r0, r3
 80165a8:	f000 f951 	bl	801684e <USBD_CtlError>
            return;
 80165ac:	e060      	b.n	8016670 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	0018      	movs	r0, r3
 80165b2:	f000 fa34 	bl	8016a1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80165b6:	e05b      	b.n	8016670 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	0018      	movs	r0, r3
 80165bc:	f000 fa2f 	bl	8016a1e <USBD_CtlSendStatus>
        break;
 80165c0:	e056      	b.n	8016670 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80165c2:	4b2d      	ldr	r3, [pc, #180]	@ (8016678 <USBD_SetConfig+0x144>)
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d115      	bne.n	80165f6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	23a7      	movs	r3, #167	@ 0xa7
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	2102      	movs	r1, #2
 80165d2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80165d4:	4b28      	ldr	r3, [pc, #160]	@ (8016678 <USBD_SetConfig+0x144>)
 80165d6:	781b      	ldrb	r3, [r3, #0]
 80165d8:	001a      	movs	r2, r3
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80165de:	4b26      	ldr	r3, [pc, #152]	@ (8016678 <USBD_SetConfig+0x144>)
 80165e0:	781a      	ldrb	r2, [r3, #0]
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	0011      	movs	r1, r2
 80165e6:	0018      	movs	r0, r3
 80165e8:	f7ff f8c4 	bl	8015774 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	0018      	movs	r0, r3
 80165f0:	f000 fa15 	bl	8016a1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80165f4:	e03c      	b.n	8016670 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80165f6:	4b20      	ldr	r3, [pc, #128]	@ (8016678 <USBD_SetConfig+0x144>)
 80165f8:	781b      	ldrb	r3, [r3, #0]
 80165fa:	001a      	movs	r2, r3
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	685b      	ldr	r3, [r3, #4]
 8016600:	429a      	cmp	r2, r3
 8016602:	d022      	beq.n	801664a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	685b      	ldr	r3, [r3, #4]
 8016608:	b2da      	uxtb	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	0011      	movs	r1, r2
 801660e:	0018      	movs	r0, r3
 8016610:	f7ff f8b0 	bl	8015774 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8016614:	4b18      	ldr	r3, [pc, #96]	@ (8016678 <USBD_SetConfig+0x144>)
 8016616:	781b      	ldrb	r3, [r3, #0]
 8016618:	001a      	movs	r2, r3
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801661e:	4b16      	ldr	r3, [pc, #88]	@ (8016678 <USBD_SetConfig+0x144>)
 8016620:	781a      	ldrb	r2, [r3, #0]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	0011      	movs	r1, r2
 8016626:	0018      	movs	r0, r3
 8016628:	f7ff f87d 	bl	8015726 <USBD_SetClassConfig>
 801662c:	0003      	movs	r3, r0
 801662e:	2b02      	cmp	r3, #2
 8016630:	d106      	bne.n	8016640 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8016632:	683a      	ldr	r2, [r7, #0]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	0011      	movs	r1, r2
 8016638:	0018      	movs	r0, r3
 801663a:	f000 f908 	bl	801684e <USBD_CtlError>
            return;
 801663e:	e017      	b.n	8016670 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	0018      	movs	r0, r3
 8016644:	f000 f9eb 	bl	8016a1e <USBD_CtlSendStatus>
        break;
 8016648:	e012      	b.n	8016670 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	0018      	movs	r0, r3
 801664e:	f000 f9e6 	bl	8016a1e <USBD_CtlSendStatus>
        break;
 8016652:	e00d      	b.n	8016670 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016654:	683a      	ldr	r2, [r7, #0]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	0011      	movs	r1, r2
 801665a:	0018      	movs	r0, r3
 801665c:	f000 f8f7 	bl	801684e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8016660:	4b05      	ldr	r3, [pc, #20]	@ (8016678 <USBD_SetConfig+0x144>)
 8016662:	781a      	ldrb	r2, [r3, #0]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	0011      	movs	r1, r2
 8016668:	0018      	movs	r0, r3
 801666a:	f7ff f883 	bl	8015774 <USBD_ClrClassConfig>
        break;
 801666e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8016670:	46bd      	mov	sp, r7
 8016672:	b002      	add	sp, #8
 8016674:	bd80      	pop	{r7, pc}
 8016676:	46c0      	nop			@ (mov r8, r8)
 8016678:	20002c28 	.word	0x20002c28

0801667c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	88db      	ldrh	r3, [r3, #6]
 801668a:	2b01      	cmp	r3, #1
 801668c:	d006      	beq.n	801669c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801668e:	683a      	ldr	r2, [r7, #0]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	0011      	movs	r1, r2
 8016694:	0018      	movs	r0, r3
 8016696:	f000 f8da 	bl	801684e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801669a:	e026      	b.n	80166ea <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801669c:	687a      	ldr	r2, [r7, #4]
 801669e:	23a7      	movs	r3, #167	@ 0xa7
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	5cd3      	ldrb	r3, [r2, r3]
 80166a4:	2b02      	cmp	r3, #2
 80166a6:	dc02      	bgt.n	80166ae <USBD_GetConfig+0x32>
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	dc03      	bgt.n	80166b4 <USBD_GetConfig+0x38>
 80166ac:	e016      	b.n	80166dc <USBD_GetConfig+0x60>
 80166ae:	2b03      	cmp	r3, #3
 80166b0:	d00c      	beq.n	80166cc <USBD_GetConfig+0x50>
 80166b2:	e013      	b.n	80166dc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2200      	movs	r2, #0
 80166b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	3308      	adds	r3, #8
 80166be:	0019      	movs	r1, r3
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2201      	movs	r2, #1
 80166c4:	0018      	movs	r0, r3
 80166c6:	f000 f940 	bl	801694a <USBD_CtlSendData>
        break;
 80166ca:	e00e      	b.n	80166ea <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	1d19      	adds	r1, r3, #4
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2201      	movs	r2, #1
 80166d4:	0018      	movs	r0, r3
 80166d6:	f000 f938 	bl	801694a <USBD_CtlSendData>
        break;
 80166da:	e006      	b.n	80166ea <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80166dc:	683a      	ldr	r2, [r7, #0]
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	0011      	movs	r1, r2
 80166e2:	0018      	movs	r0, r3
 80166e4:	f000 f8b3 	bl	801684e <USBD_CtlError>
        break;
 80166e8:	46c0      	nop			@ (mov r8, r8)
}
 80166ea:	46c0      	nop			@ (mov r8, r8)
 80166ec:	46bd      	mov	sp, r7
 80166ee:	b002      	add	sp, #8
 80166f0:	bd80      	pop	{r7, pc}

080166f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166f2:	b580      	push	{r7, lr}
 80166f4:	b082      	sub	sp, #8
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]
 80166fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	23a7      	movs	r3, #167	@ 0xa7
 8016700:	009b      	lsls	r3, r3, #2
 8016702:	5cd3      	ldrb	r3, [r2, r3]
 8016704:	3b01      	subs	r3, #1
 8016706:	2b02      	cmp	r3, #2
 8016708:	d822      	bhi.n	8016750 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	88db      	ldrh	r3, [r3, #6]
 801670e:	2b02      	cmp	r3, #2
 8016710:	d006      	beq.n	8016720 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8016712:	683a      	ldr	r2, [r7, #0]
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	0011      	movs	r1, r2
 8016718:	0018      	movs	r0, r3
 801671a:	f000 f898 	bl	801684e <USBD_CtlError>
        break;
 801671e:	e01e      	b.n	801675e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2201      	movs	r2, #1
 8016724:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8016726:	687a      	ldr	r2, [r7, #4]
 8016728:	23a9      	movs	r3, #169	@ 0xa9
 801672a:	009b      	lsls	r3, r3, #2
 801672c:	58d3      	ldr	r3, [r2, r3]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d005      	beq.n	801673e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	68db      	ldr	r3, [r3, #12]
 8016736:	2202      	movs	r2, #2
 8016738:	431a      	orrs	r2, r3
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	330c      	adds	r3, #12
 8016742:	0019      	movs	r1, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2202      	movs	r2, #2
 8016748:	0018      	movs	r0, r3
 801674a:	f000 f8fe 	bl	801694a <USBD_CtlSendData>
      break;
 801674e:	e006      	b.n	801675e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016750:	683a      	ldr	r2, [r7, #0]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	0011      	movs	r1, r2
 8016756:	0018      	movs	r0, r3
 8016758:	f000 f879 	bl	801684e <USBD_CtlError>
      break;
 801675c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801675e:	46c0      	nop			@ (mov r8, r8)
 8016760:	46bd      	mov	sp, r7
 8016762:	b002      	add	sp, #8
 8016764:	bd80      	pop	{r7, pc}

08016766 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016766:	b580      	push	{r7, lr}
 8016768:	b082      	sub	sp, #8
 801676a:	af00      	add	r7, sp, #0
 801676c:	6078      	str	r0, [r7, #4]
 801676e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	885b      	ldrh	r3, [r3, #2]
 8016774:	2b01      	cmp	r3, #1
 8016776:	d108      	bne.n	801678a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8016778:	687a      	ldr	r2, [r7, #4]
 801677a:	23a9      	movs	r3, #169	@ 0xa9
 801677c:	009b      	lsls	r3, r3, #2
 801677e:	2101      	movs	r1, #1
 8016780:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	0018      	movs	r0, r3
 8016786:	f000 f94a 	bl	8016a1e <USBD_CtlSendStatus>
  }
}
 801678a:	46c0      	nop			@ (mov r8, r8)
 801678c:	46bd      	mov	sp, r7
 801678e:	b002      	add	sp, #8
 8016790:	bd80      	pop	{r7, pc}

08016792 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016792:	b580      	push	{r7, lr}
 8016794:	b082      	sub	sp, #8
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
 801679a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801679c:	687a      	ldr	r2, [r7, #4]
 801679e:	23a7      	movs	r3, #167	@ 0xa7
 80167a0:	009b      	lsls	r3, r3, #2
 80167a2:	5cd3      	ldrb	r3, [r2, r3]
 80167a4:	3b01      	subs	r3, #1
 80167a6:	2b02      	cmp	r3, #2
 80167a8:	d80d      	bhi.n	80167c6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	885b      	ldrh	r3, [r3, #2]
 80167ae:	2b01      	cmp	r3, #1
 80167b0:	d110      	bne.n	80167d4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	23a9      	movs	r3, #169	@ 0xa9
 80167b6:	009b      	lsls	r3, r3, #2
 80167b8:	2100      	movs	r1, #0
 80167ba:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	0018      	movs	r0, r3
 80167c0:	f000 f92d 	bl	8016a1e <USBD_CtlSendStatus>
      }
      break;
 80167c4:	e006      	b.n	80167d4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80167c6:	683a      	ldr	r2, [r7, #0]
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	0011      	movs	r1, r2
 80167cc:	0018      	movs	r0, r3
 80167ce:	f000 f83e 	bl	801684e <USBD_CtlError>
      break;
 80167d2:	e000      	b.n	80167d6 <USBD_ClrFeature+0x44>
      break;
 80167d4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80167d6:	46c0      	nop			@ (mov r8, r8)
 80167d8:	46bd      	mov	sp, r7
 80167da:	b002      	add	sp, #8
 80167dc:	bd80      	pop	{r7, pc}

080167de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80167de:	b580      	push	{r7, lr}
 80167e0:	b082      	sub	sp, #8
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
 80167e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	781a      	ldrb	r2, [r3, #0]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80167f0:	683b      	ldr	r3, [r7, #0]
 80167f2:	785a      	ldrb	r2, [r3, #1]
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	3302      	adds	r3, #2
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	001a      	movs	r2, r3
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	3303      	adds	r3, #3
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	021b      	lsls	r3, r3, #8
 8016808:	b29b      	uxth	r3, r3
 801680a:	18d3      	adds	r3, r2, r3
 801680c:	b29a      	uxth	r2, r3
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	3304      	adds	r3, #4
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	001a      	movs	r2, r3
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	3305      	adds	r3, #5
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	021b      	lsls	r3, r3, #8
 8016822:	b29b      	uxth	r3, r3
 8016824:	18d3      	adds	r3, r2, r3
 8016826:	b29a      	uxth	r2, r3
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	3306      	adds	r3, #6
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	001a      	movs	r2, r3
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	3307      	adds	r3, #7
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	021b      	lsls	r3, r3, #8
 801683c:	b29b      	uxth	r3, r3
 801683e:	18d3      	adds	r3, r2, r3
 8016840:	b29a      	uxth	r2, r3
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	80da      	strh	r2, [r3, #6]

}
 8016846:	46c0      	nop			@ (mov r8, r8)
 8016848:	46bd      	mov	sp, r7
 801684a:	b002      	add	sp, #8
 801684c:	bd80      	pop	{r7, pc}

0801684e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801684e:	b580      	push	{r7, lr}
 8016850:	b082      	sub	sp, #8
 8016852:	af00      	add	r7, sp, #0
 8016854:	6078      	str	r0, [r7, #4]
 8016856:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2180      	movs	r1, #128	@ 0x80
 801685c:	0018      	movs	r0, r3
 801685e:	f000 fd1e 	bl	801729e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2100      	movs	r1, #0
 8016866:	0018      	movs	r0, r3
 8016868:	f000 fd19 	bl	801729e <USBD_LL_StallEP>
}
 801686c:	46c0      	nop			@ (mov r8, r8)
 801686e:	46bd      	mov	sp, r7
 8016870:	b002      	add	sp, #8
 8016872:	bd80      	pop	{r7, pc}

08016874 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016874:	b590      	push	{r4, r7, lr}
 8016876:	b087      	sub	sp, #28
 8016878:	af00      	add	r7, sp, #0
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016880:	2417      	movs	r4, #23
 8016882:	193b      	adds	r3, r7, r4
 8016884:	2200      	movs	r2, #0
 8016886:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d03c      	beq.n	8016908 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	0018      	movs	r0, r3
 8016892:	f000 f83d 	bl	8016910 <USBD_GetLen>
 8016896:	0003      	movs	r3, r0
 8016898:	3301      	adds	r3, #1
 801689a:	b29b      	uxth	r3, r3
 801689c:	18db      	adds	r3, r3, r3
 801689e:	b29a      	uxth	r2, r3
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80168a4:	193b      	adds	r3, r7, r4
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	193a      	adds	r2, r7, r4
 80168aa:	1c59      	adds	r1, r3, #1
 80168ac:	7011      	strb	r1, [r2, #0]
 80168ae:	001a      	movs	r2, r3
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	189b      	adds	r3, r3, r2
 80168b4:	687a      	ldr	r2, [r7, #4]
 80168b6:	7812      	ldrb	r2, [r2, #0]
 80168b8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80168ba:	193b      	adds	r3, r7, r4
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	193a      	adds	r2, r7, r4
 80168c0:	1c59      	adds	r1, r3, #1
 80168c2:	7011      	strb	r1, [r2, #0]
 80168c4:	001a      	movs	r2, r3
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	189b      	adds	r3, r3, r2
 80168ca:	2203      	movs	r2, #3
 80168cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80168ce:	e017      	b.n	8016900 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	1c5a      	adds	r2, r3, #1
 80168d4:	60fa      	str	r2, [r7, #12]
 80168d6:	2417      	movs	r4, #23
 80168d8:	193a      	adds	r2, r7, r4
 80168da:	7812      	ldrb	r2, [r2, #0]
 80168dc:	1939      	adds	r1, r7, r4
 80168de:	1c50      	adds	r0, r2, #1
 80168e0:	7008      	strb	r0, [r1, #0]
 80168e2:	0011      	movs	r1, r2
 80168e4:	68ba      	ldr	r2, [r7, #8]
 80168e6:	1852      	adds	r2, r2, r1
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80168ec:	193b      	adds	r3, r7, r4
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	193a      	adds	r2, r7, r4
 80168f2:	1c59      	adds	r1, r3, #1
 80168f4:	7011      	strb	r1, [r2, #0]
 80168f6:	001a      	movs	r2, r3
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	189b      	adds	r3, r3, r2
 80168fc:	2200      	movs	r2, #0
 80168fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d1e3      	bne.n	80168d0 <USBD_GetString+0x5c>
    }
  }
}
 8016908:	46c0      	nop			@ (mov r8, r8)
 801690a:	46bd      	mov	sp, r7
 801690c:	b007      	add	sp, #28
 801690e:	bd90      	pop	{r4, r7, pc}

08016910 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016918:	230f      	movs	r3, #15
 801691a:	18fb      	adds	r3, r7, r3
 801691c:	2200      	movs	r2, #0
 801691e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8016920:	e008      	b.n	8016934 <USBD_GetLen+0x24>
  {
    len++;
 8016922:	210f      	movs	r1, #15
 8016924:	187b      	adds	r3, r7, r1
 8016926:	781a      	ldrb	r2, [r3, #0]
 8016928:	187b      	adds	r3, r7, r1
 801692a:	3201      	adds	r2, #1
 801692c:	701a      	strb	r2, [r3, #0]
    buf++;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	3301      	adds	r3, #1
 8016932:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d1f2      	bne.n	8016922 <USBD_GetLen+0x12>
  }

  return len;
 801693c:	230f      	movs	r3, #15
 801693e:	18fb      	adds	r3, r7, r3
 8016940:	781b      	ldrb	r3, [r3, #0]
}
 8016942:	0018      	movs	r0, r3
 8016944:	46bd      	mov	sp, r7
 8016946:	b004      	add	sp, #16
 8016948:	bd80      	pop	{r7, pc}

0801694a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801694a:	b580      	push	{r7, lr}
 801694c:	b084      	sub	sp, #16
 801694e:	af00      	add	r7, sp, #0
 8016950:	60f8      	str	r0, [r7, #12]
 8016952:	60b9      	str	r1, [r7, #8]
 8016954:	1dbb      	adds	r3, r7, #6
 8016956:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016958:	68fa      	ldr	r2, [r7, #12]
 801695a:	23a5      	movs	r3, #165	@ 0xa5
 801695c:	009b      	lsls	r3, r3, #2
 801695e:	2102      	movs	r1, #2
 8016960:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8016962:	1dbb      	adds	r3, r7, #6
 8016964:	881a      	ldrh	r2, [r3, #0]
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801696a:	1dbb      	adds	r3, r7, #6
 801696c:	881a      	ldrh	r2, [r3, #0]
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016972:	1dbb      	adds	r3, r7, #6
 8016974:	881b      	ldrh	r3, [r3, #0]
 8016976:	68ba      	ldr	r2, [r7, #8]
 8016978:	68f8      	ldr	r0, [r7, #12]
 801697a:	2100      	movs	r1, #0
 801697c:	f000 fd41 	bl	8017402 <USBD_LL_Transmit>

  return USBD_OK;
 8016980:	2300      	movs	r3, #0
}
 8016982:	0018      	movs	r0, r3
 8016984:	46bd      	mov	sp, r7
 8016986:	b004      	add	sp, #16
 8016988:	bd80      	pop	{r7, pc}

0801698a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801698a:	b580      	push	{r7, lr}
 801698c:	b084      	sub	sp, #16
 801698e:	af00      	add	r7, sp, #0
 8016990:	60f8      	str	r0, [r7, #12]
 8016992:	60b9      	str	r1, [r7, #8]
 8016994:	1dbb      	adds	r3, r7, #6
 8016996:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016998:	1dbb      	adds	r3, r7, #6
 801699a:	881b      	ldrh	r3, [r3, #0]
 801699c:	68ba      	ldr	r2, [r7, #8]
 801699e:	68f8      	ldr	r0, [r7, #12]
 80169a0:	2100      	movs	r1, #0
 80169a2:	f000 fd2e 	bl	8017402 <USBD_LL_Transmit>

  return USBD_OK;
 80169a6:	2300      	movs	r3, #0
}
 80169a8:	0018      	movs	r0, r3
 80169aa:	46bd      	mov	sp, r7
 80169ac:	b004      	add	sp, #16
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b084      	sub	sp, #16
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	1dbb      	adds	r3, r7, #6
 80169bc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80169be:	68fa      	ldr	r2, [r7, #12]
 80169c0:	23a5      	movs	r3, #165	@ 0xa5
 80169c2:	009b      	lsls	r3, r3, #2
 80169c4:	2103      	movs	r1, #3
 80169c6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80169c8:	1dbb      	adds	r3, r7, #6
 80169ca:	8819      	ldrh	r1, [r3, #0]
 80169cc:	68fa      	ldr	r2, [r7, #12]
 80169ce:	23ae      	movs	r3, #174	@ 0xae
 80169d0:	005b      	lsls	r3, r3, #1
 80169d2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80169d4:	1dbb      	adds	r3, r7, #6
 80169d6:	8819      	ldrh	r1, [r3, #0]
 80169d8:	68fa      	ldr	r2, [r7, #12]
 80169da:	23b0      	movs	r3, #176	@ 0xb0
 80169dc:	005b      	lsls	r3, r3, #1
 80169de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80169e0:	1dbb      	adds	r3, r7, #6
 80169e2:	881b      	ldrh	r3, [r3, #0]
 80169e4:	68ba      	ldr	r2, [r7, #8]
 80169e6:	68f8      	ldr	r0, [r7, #12]
 80169e8:	2100      	movs	r1, #0
 80169ea:	f000 fd41 	bl	8017470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80169ee:	2300      	movs	r3, #0
}
 80169f0:	0018      	movs	r0, r3
 80169f2:	46bd      	mov	sp, r7
 80169f4:	b004      	add	sp, #16
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b084      	sub	sp, #16
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60f8      	str	r0, [r7, #12]
 8016a00:	60b9      	str	r1, [r7, #8]
 8016a02:	1dbb      	adds	r3, r7, #6
 8016a04:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016a06:	1dbb      	adds	r3, r7, #6
 8016a08:	881b      	ldrh	r3, [r3, #0]
 8016a0a:	68ba      	ldr	r2, [r7, #8]
 8016a0c:	68f8      	ldr	r0, [r7, #12]
 8016a0e:	2100      	movs	r1, #0
 8016a10:	f000 fd2e 	bl	8017470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016a14:	2300      	movs	r3, #0
}
 8016a16:	0018      	movs	r0, r3
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	b004      	add	sp, #16
 8016a1c:	bd80      	pop	{r7, pc}

08016a1e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016a1e:	b580      	push	{r7, lr}
 8016a20:	b082      	sub	sp, #8
 8016a22:	af00      	add	r7, sp, #0
 8016a24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016a26:	687a      	ldr	r2, [r7, #4]
 8016a28:	23a5      	movs	r3, #165	@ 0xa5
 8016a2a:	009b      	lsls	r3, r3, #2
 8016a2c:	2104      	movs	r1, #4
 8016a2e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	2300      	movs	r3, #0
 8016a34:	2200      	movs	r2, #0
 8016a36:	2100      	movs	r1, #0
 8016a38:	f000 fce3 	bl	8017402 <USBD_LL_Transmit>

  return USBD_OK;
 8016a3c:	2300      	movs	r3, #0
}
 8016a3e:	0018      	movs	r0, r3
 8016a40:	46bd      	mov	sp, r7
 8016a42:	b002      	add	sp, #8
 8016a44:	bd80      	pop	{r7, pc}

08016a46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016a46:	b580      	push	{r7, lr}
 8016a48:	b082      	sub	sp, #8
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016a4e:	687a      	ldr	r2, [r7, #4]
 8016a50:	23a5      	movs	r3, #165	@ 0xa5
 8016a52:	009b      	lsls	r3, r3, #2
 8016a54:	2105      	movs	r1, #5
 8016a56:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	2100      	movs	r1, #0
 8016a60:	f000 fd06 	bl	8017470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016a64:	2300      	movs	r3, #0
}
 8016a66:	0018      	movs	r0, r3
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	b002      	add	sp, #8
 8016a6c:	bd80      	pop	{r7, pc}
	...

08016a70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016a74:	4914      	ldr	r1, [pc, #80]	@ (8016ac8 <MX_USB_DEVICE_Init+0x58>)
 8016a76:	4b15      	ldr	r3, [pc, #84]	@ (8016acc <MX_USB_DEVICE_Init+0x5c>)
 8016a78:	2200      	movs	r2, #0
 8016a7a:	0018      	movs	r0, r3
 8016a7c:	f7fe fdec 	bl	8015658 <USBD_Init>
 8016a80:	1e03      	subs	r3, r0, #0
 8016a82:	d001      	beq.n	8016a88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016a84:	f7ef fc7e 	bl	8006384 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016a88:	4a11      	ldr	r2, [pc, #68]	@ (8016ad0 <MX_USB_DEVICE_Init+0x60>)
 8016a8a:	4b10      	ldr	r3, [pc, #64]	@ (8016acc <MX_USB_DEVICE_Init+0x5c>)
 8016a8c:	0011      	movs	r1, r2
 8016a8e:	0018      	movs	r0, r3
 8016a90:	f7fe fe13 	bl	80156ba <USBD_RegisterClass>
 8016a94:	1e03      	subs	r3, r0, #0
 8016a96:	d001      	beq.n	8016a9c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8016a98:	f7ef fc74 	bl	8006384 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8016ad4 <MX_USB_DEVICE_Init+0x64>)
 8016a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8016acc <MX_USB_DEVICE_Init+0x5c>)
 8016aa0:	0011      	movs	r1, r2
 8016aa2:	0018      	movs	r0, r3
 8016aa4:	f7fe fd28 	bl	80154f8 <USBD_CDC_RegisterInterface>
 8016aa8:	1e03      	subs	r3, r0, #0
 8016aaa:	d001      	beq.n	8016ab0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8016aac:	f7ef fc6a 	bl	8006384 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016ab0:	4b06      	ldr	r3, [pc, #24]	@ (8016acc <MX_USB_DEVICE_Init+0x5c>)
 8016ab2:	0018      	movs	r0, r3
 8016ab4:	f7fe fe21 	bl	80156fa <USBD_Start>
 8016ab8:	1e03      	subs	r3, r0, #0
 8016aba:	d001      	beq.n	8016ac0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8016abc:	f7ef fc62 	bl	8006384 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016ac0:	46c0      	nop			@ (mov r8, r8)
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	46c0      	nop			@ (mov r8, r8)
 8016ac8:	20000194 	.word	0x20000194
 8016acc:	20002c2c 	.word	0x20002c2c
 8016ad0:	20000080 	.word	0x20000080
 8016ad4:	20000184 	.word	0x20000184

08016ad8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016adc:	4907      	ldr	r1, [pc, #28]	@ (8016afc <CDC_Init_FS+0x24>)
 8016ade:	4b08      	ldr	r3, [pc, #32]	@ (8016b00 <CDC_Init_FS+0x28>)
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	0018      	movs	r0, r3
 8016ae4:	f7fe fd23 	bl	801552e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016ae8:	4a06      	ldr	r2, [pc, #24]	@ (8016b04 <CDC_Init_FS+0x2c>)
 8016aea:	4b05      	ldr	r3, [pc, #20]	@ (8016b00 <CDC_Init_FS+0x28>)
 8016aec:	0011      	movs	r1, r2
 8016aee:	0018      	movs	r0, r3
 8016af0:	f7fe fd39 	bl	8015566 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016af4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016af6:	0018      	movs	r0, r3
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}
 8016afc:	200033b0 	.word	0x200033b0
 8016b00:	20002c2c 	.word	0x20002c2c
 8016b04:	20002fb0 	.word	0x20002fb0

08016b08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016b0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016b0e:	0018      	movs	r0, r3
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6039      	str	r1, [r7, #0]
 8016b1c:	0011      	movs	r1, r2
 8016b1e:	1dfb      	adds	r3, r7, #7
 8016b20:	1c02      	adds	r2, r0, #0
 8016b22:	701a      	strb	r2, [r3, #0]
 8016b24:	1d3b      	adds	r3, r7, #4
 8016b26:	1c0a      	adds	r2, r1, #0
 8016b28:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016b2a:	1dfb      	adds	r3, r7, #7
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	2b23      	cmp	r3, #35	@ 0x23
 8016b30:	d804      	bhi.n	8016b3c <CDC_Control_FS+0x28>
 8016b32:	009a      	lsls	r2, r3, #2
 8016b34:	4b04      	ldr	r3, [pc, #16]	@ (8016b48 <CDC_Control_FS+0x34>)
 8016b36:	18d3      	adds	r3, r2, r3
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016b3c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8016b3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016b40:	0018      	movs	r0, r3
 8016b42:	46bd      	mov	sp, r7
 8016b44:	b002      	add	sp, #8
 8016b46:	bd80      	pop	{r7, pc}
 8016b48:	0801bd5c 	.word	0x0801bd5c

08016b4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016b56:	4b12      	ldr	r3, [pc, #72]	@ (8016ba0 <CDC_Receive_FS+0x54>)
 8016b58:	781b      	ldrb	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d013      	beq.n	8016b86 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	b29a      	uxth	r2, r3
 8016b64:	2301      	movs	r3, #1
 8016b66:	425b      	negs	r3, r3
 8016b68:	6879      	ldr	r1, [r7, #4]
 8016b6a:	480e      	ldr	r0, [pc, #56]	@ (8016ba4 <CDC_Receive_FS+0x58>)
 8016b6c:	f7fa fd3a 	bl	80115e4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016b70:	687a      	ldr	r2, [r7, #4]
 8016b72:	4b0d      	ldr	r3, [pc, #52]	@ (8016ba8 <CDC_Receive_FS+0x5c>)
 8016b74:	0011      	movs	r1, r2
 8016b76:	0018      	movs	r0, r3
 8016b78:	f7fe fcf5 	bl	8015566 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8016ba8 <CDC_Receive_FS+0x5c>)
 8016b7e:	0018      	movs	r0, r3
 8016b80:	f7fe fd3c 	bl	80155fc <USBD_CDC_ReceivePacket>
 8016b84:	e006      	b.n	8016b94 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	4b08      	ldr	r3, [pc, #32]	@ (8016bac <CDC_Receive_FS+0x60>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	18d2      	adds	r2, r2, r3
 8016b90:	4b06      	ldr	r3, [pc, #24]	@ (8016bac <CDC_Receive_FS+0x60>)
 8016b92:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8016b94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016b96:	0018      	movs	r0, r3
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	b002      	add	sp, #8
 8016b9c:	bd80      	pop	{r7, pc}
 8016b9e:	46c0      	nop			@ (mov r8, r8)
 8016ba0:	20002ef0 	.word	0x20002ef0
 8016ba4:	20002ef4 	.word	0x20002ef4
 8016ba8:	20002c2c 	.word	0x20002c2c
 8016bac:	20002fac 	.word	0x20002fac

08016bb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016bb0:	b5b0      	push	{r4, r5, r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	000a      	movs	r2, r1
 8016bba:	1cbb      	adds	r3, r7, #2
 8016bbc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8016bbe:	230f      	movs	r3, #15
 8016bc0:	18fb      	adds	r3, r7, r3
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016bc6:	4a11      	ldr	r2, [pc, #68]	@ (8016c0c <CDC_Transmit_FS+0x5c>)
 8016bc8:	23ae      	movs	r3, #174	@ 0xae
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	58d3      	ldr	r3, [r2, r3]
 8016bce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016bd0:	68ba      	ldr	r2, [r7, #8]
 8016bd2:	2385      	movs	r3, #133	@ 0x85
 8016bd4:	009b      	lsls	r3, r3, #2
 8016bd6:	58d3      	ldr	r3, [r2, r3]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d001      	beq.n	8016be0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8016bdc:	2301      	movs	r3, #1
 8016bde:	e010      	b.n	8016c02 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016be0:	1cbb      	adds	r3, r7, #2
 8016be2:	881a      	ldrh	r2, [r3, #0]
 8016be4:	6879      	ldr	r1, [r7, #4]
 8016be6:	4b09      	ldr	r3, [pc, #36]	@ (8016c0c <CDC_Transmit_FS+0x5c>)
 8016be8:	0018      	movs	r0, r3
 8016bea:	f7fe fca0 	bl	801552e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016bee:	250f      	movs	r5, #15
 8016bf0:	197c      	adds	r4, r7, r5
 8016bf2:	4b06      	ldr	r3, [pc, #24]	@ (8016c0c <CDC_Transmit_FS+0x5c>)
 8016bf4:	0018      	movs	r0, r3
 8016bf6:	f7fe fcca 	bl	801558e <USBD_CDC_TransmitPacket>
 8016bfa:	0003      	movs	r3, r0
 8016bfc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8016bfe:	197b      	adds	r3, r7, r5
 8016c00:	781b      	ldrb	r3, [r3, #0]
}
 8016c02:	0018      	movs	r0, r3
 8016c04:	46bd      	mov	sp, r7
 8016c06:	b004      	add	sp, #16
 8016c08:	bdb0      	pop	{r4, r5, r7, pc}
 8016c0a:	46c0      	nop			@ (mov r8, r8)
 8016c0c:	20002c2c 	.word	0x20002c2c

08016c10 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8016c10:	b580      	push	{r7, lr}
 8016c12:	af00      	add	r7, sp, #0
  ESPProg = true;
 8016c14:	4b02      	ldr	r3, [pc, #8]	@ (8016c20 <EnableESPProg+0x10>)
 8016c16:	2201      	movs	r2, #1
 8016c18:	701a      	strb	r2, [r3, #0]
}
 8016c1a:	46c0      	nop			@ (mov r8, r8)
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}
 8016c20:	20002ef0 	.word	0x20002ef0

08016c24 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8016c28:	4b01      	ldr	r3, [pc, #4]	@ (8016c30 <GetUsbRxPointer+0xc>)
}
 8016c2a:	0018      	movs	r0, r3
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}
 8016c30:	20002fb0 	.word	0x20002fb0

08016c34 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8016c38:	4b07      	ldr	r3, [pc, #28]	@ (8016c58 <ResetUsbRxDataSize+0x24>)
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8016c3e:	4a07      	ldr	r2, [pc, #28]	@ (8016c5c <ResetUsbRxDataSize+0x28>)
 8016c40:	4b07      	ldr	r3, [pc, #28]	@ (8016c60 <ResetUsbRxDataSize+0x2c>)
 8016c42:	0011      	movs	r1, r2
 8016c44:	0018      	movs	r0, r3
 8016c46:	f7fe fc8e 	bl	8015566 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016c4a:	4b05      	ldr	r3, [pc, #20]	@ (8016c60 <ResetUsbRxDataSize+0x2c>)
 8016c4c:	0018      	movs	r0, r3
 8016c4e:	f7fe fcd5 	bl	80155fc <USBD_CDC_ReceivePacket>
}
 8016c52:	46c0      	nop			@ (mov r8, r8)
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}
 8016c58:	20002fac 	.word	0x20002fac
 8016c5c:	20002fb0 	.word	0x20002fb0
 8016c60:	20002c2c 	.word	0x20002c2c

08016c64 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8016c68:	4b02      	ldr	r3, [pc, #8]	@ (8016c74 <GetUsbRxDataSize+0x10>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
}
 8016c6c:	0018      	movs	r0, r3
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	46c0      	nop			@ (mov r8, r8)
 8016c74:	20002fac 	.word	0x20002fac

08016c78 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8016c80:	687a      	ldr	r2, [r7, #4]
 8016c82:	4b07      	ldr	r3, [pc, #28]	@ (8016ca0 <GetUsbRxNextChunk+0x28>)
 8016c84:	18d2      	adds	r2, r2, r3
 8016c86:	4b07      	ldr	r3, [pc, #28]	@ (8016ca4 <GetUsbRxNextChunk+0x2c>)
 8016c88:	0011      	movs	r1, r2
 8016c8a:	0018      	movs	r0, r3
 8016c8c:	f7fe fc6b 	bl	8015566 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016c90:	4b04      	ldr	r3, [pc, #16]	@ (8016ca4 <GetUsbRxNextChunk+0x2c>)
 8016c92:	0018      	movs	r0, r3
 8016c94:	f7fe fcb2 	bl	80155fc <USBD_CDC_ReceivePacket>
}
 8016c98:	46c0      	nop			@ (mov r8, r8)
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	b002      	add	sp, #8
 8016c9e:	bd80      	pop	{r7, pc}
 8016ca0:	20002fb0 	.word	0x20002fb0
 8016ca4:	20002c2c 	.word	0x20002c2c

08016ca8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b082      	sub	sp, #8
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	0002      	movs	r2, r0
 8016cb0:	6039      	str	r1, [r7, #0]
 8016cb2:	1dfb      	adds	r3, r7, #7
 8016cb4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	2212      	movs	r2, #18
 8016cba:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016cbc:	4b02      	ldr	r3, [pc, #8]	@ (8016cc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016cbe:	0018      	movs	r0, r3
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	b002      	add	sp, #8
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	46c0      	nop			@ (mov r8, r8)
 8016cc8:	200001b0 	.word	0x200001b0

08016ccc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	0002      	movs	r2, r0
 8016cd4:	6039      	str	r1, [r7, #0]
 8016cd6:	1dfb      	adds	r3, r7, #7
 8016cd8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	2204      	movs	r2, #4
 8016cde:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016ce0:	4b02      	ldr	r3, [pc, #8]	@ (8016cec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016ce2:	0018      	movs	r0, r3
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	b002      	add	sp, #8
 8016ce8:	bd80      	pop	{r7, pc}
 8016cea:	46c0      	nop			@ (mov r8, r8)
 8016cec:	200001c4 	.word	0x200001c4

08016cf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b082      	sub	sp, #8
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	0002      	movs	r2, r0
 8016cf8:	6039      	str	r1, [r7, #0]
 8016cfa:	1dfb      	adds	r3, r7, #7
 8016cfc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8016cfe:	1dfb      	adds	r3, r7, #7
 8016d00:	781b      	ldrb	r3, [r3, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d106      	bne.n	8016d14 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d06:	683a      	ldr	r2, [r7, #0]
 8016d08:	4908      	ldr	r1, [pc, #32]	@ (8016d2c <USBD_FS_ProductStrDescriptor+0x3c>)
 8016d0a:	4b09      	ldr	r3, [pc, #36]	@ (8016d30 <USBD_FS_ProductStrDescriptor+0x40>)
 8016d0c:	0018      	movs	r0, r3
 8016d0e:	f7ff fdb1 	bl	8016874 <USBD_GetString>
 8016d12:	e005      	b.n	8016d20 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d14:	683a      	ldr	r2, [r7, #0]
 8016d16:	4905      	ldr	r1, [pc, #20]	@ (8016d2c <USBD_FS_ProductStrDescriptor+0x3c>)
 8016d18:	4b05      	ldr	r3, [pc, #20]	@ (8016d30 <USBD_FS_ProductStrDescriptor+0x40>)
 8016d1a:	0018      	movs	r0, r3
 8016d1c:	f7ff fdaa 	bl	8016874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016d20:	4b02      	ldr	r3, [pc, #8]	@ (8016d2c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8016d22:	0018      	movs	r0, r3
 8016d24:	46bd      	mov	sp, r7
 8016d26:	b002      	add	sp, #8
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	46c0      	nop			@ (mov r8, r8)
 8016d2c:	200037b0 	.word	0x200037b0
 8016d30:	0801ba20 	.word	0x0801ba20

08016d34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	0002      	movs	r2, r0
 8016d3c:	6039      	str	r1, [r7, #0]
 8016d3e:	1dfb      	adds	r3, r7, #7
 8016d40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016d42:	683a      	ldr	r2, [r7, #0]
 8016d44:	4904      	ldr	r1, [pc, #16]	@ (8016d58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016d46:	4b05      	ldr	r3, [pc, #20]	@ (8016d5c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8016d48:	0018      	movs	r0, r3
 8016d4a:	f7ff fd93 	bl	8016874 <USBD_GetString>
  return USBD_StrDesc;
 8016d4e:	4b02      	ldr	r3, [pc, #8]	@ (8016d58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8016d50:	0018      	movs	r0, r3
 8016d52:	46bd      	mov	sp, r7
 8016d54:	b002      	add	sp, #8
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	200037b0 	.word	0x200037b0
 8016d5c:	0801ba38 	.word	0x0801ba38

08016d60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b082      	sub	sp, #8
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	0002      	movs	r2, r0
 8016d68:	6039      	str	r1, [r7, #0]
 8016d6a:	1dfb      	adds	r3, r7, #7
 8016d6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	221a      	movs	r2, #26
 8016d72:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016d74:	f000 f84c 	bl	8016e10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016d78:	4b02      	ldr	r3, [pc, #8]	@ (8016d84 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8016d7a:	0018      	movs	r0, r3
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	b002      	add	sp, #8
 8016d80:	bd80      	pop	{r7, pc}
 8016d82:	46c0      	nop			@ (mov r8, r8)
 8016d84:	200001c8 	.word	0x200001c8

08016d88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b082      	sub	sp, #8
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	0002      	movs	r2, r0
 8016d90:	6039      	str	r1, [r7, #0]
 8016d92:	1dfb      	adds	r3, r7, #7
 8016d94:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8016d96:	1dfb      	adds	r3, r7, #7
 8016d98:	781b      	ldrb	r3, [r3, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d106      	bne.n	8016dac <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016d9e:	683a      	ldr	r2, [r7, #0]
 8016da0:	4908      	ldr	r1, [pc, #32]	@ (8016dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016da2:	4b09      	ldr	r3, [pc, #36]	@ (8016dc8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016da4:	0018      	movs	r0, r3
 8016da6:	f7ff fd65 	bl	8016874 <USBD_GetString>
 8016daa:	e005      	b.n	8016db8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016dac:	683a      	ldr	r2, [r7, #0]
 8016dae:	4905      	ldr	r1, [pc, #20]	@ (8016dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016db0:	4b05      	ldr	r3, [pc, #20]	@ (8016dc8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016db2:	0018      	movs	r0, r3
 8016db4:	f7ff fd5e 	bl	8016874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016db8:	4b02      	ldr	r3, [pc, #8]	@ (8016dc4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8016dba:	0018      	movs	r0, r3
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	b002      	add	sp, #8
 8016dc0:	bd80      	pop	{r7, pc}
 8016dc2:	46c0      	nop			@ (mov r8, r8)
 8016dc4:	200037b0 	.word	0x200037b0
 8016dc8:	0801ba4c 	.word	0x0801ba4c

08016dcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	0002      	movs	r2, r0
 8016dd4:	6039      	str	r1, [r7, #0]
 8016dd6:	1dfb      	adds	r3, r7, #7
 8016dd8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8016dda:	1dfb      	adds	r3, r7, #7
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d106      	bne.n	8016df0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016de2:	683a      	ldr	r2, [r7, #0]
 8016de4:	4908      	ldr	r1, [pc, #32]	@ (8016e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016de6:	4b09      	ldr	r3, [pc, #36]	@ (8016e0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016de8:	0018      	movs	r0, r3
 8016dea:	f7ff fd43 	bl	8016874 <USBD_GetString>
 8016dee:	e005      	b.n	8016dfc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016df0:	683a      	ldr	r2, [r7, #0]
 8016df2:	4905      	ldr	r1, [pc, #20]	@ (8016e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016df4:	4b05      	ldr	r3, [pc, #20]	@ (8016e0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016df6:	0018      	movs	r0, r3
 8016df8:	f7ff fd3c 	bl	8016874 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016dfc:	4b02      	ldr	r3, [pc, #8]	@ (8016e08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8016dfe:	0018      	movs	r0, r3
 8016e00:	46bd      	mov	sp, r7
 8016e02:	b002      	add	sp, #8
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	46c0      	nop			@ (mov r8, r8)
 8016e08:	200037b0 	.word	0x200037b0
 8016e0c:	0801ba58 	.word	0x0801ba58

08016e10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b084      	sub	sp, #16
 8016e14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016e16:	4b10      	ldr	r3, [pc, #64]	@ (8016e58 <Get_SerialNum+0x48>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8016e5c <Get_SerialNum+0x4c>)
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016e22:	4b0f      	ldr	r3, [pc, #60]	@ (8016e60 <Get_SerialNum+0x50>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016e28:	68fa      	ldr	r2, [r7, #12]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	18d3      	adds	r3, r2, r3
 8016e2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d00b      	beq.n	8016e4e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016e36:	490b      	ldr	r1, [pc, #44]	@ (8016e64 <Get_SerialNum+0x54>)
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	2208      	movs	r2, #8
 8016e3c:	0018      	movs	r0, r3
 8016e3e:	f000 f815 	bl	8016e6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016e42:	4909      	ldr	r1, [pc, #36]	@ (8016e68 <Get_SerialNum+0x58>)
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	2204      	movs	r2, #4
 8016e48:	0018      	movs	r0, r3
 8016e4a:	f000 f80f 	bl	8016e6c <IntToUnicode>
  }
}
 8016e4e:	46c0      	nop			@ (mov r8, r8)
 8016e50:	46bd      	mov	sp, r7
 8016e52:	b004      	add	sp, #16
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	46c0      	nop			@ (mov r8, r8)
 8016e58:	1ff80050 	.word	0x1ff80050
 8016e5c:	1ff80054 	.word	0x1ff80054
 8016e60:	1ff80058 	.word	0x1ff80058
 8016e64:	200001ca 	.word	0x200001ca
 8016e68:	200001da 	.word	0x200001da

08016e6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b086      	sub	sp, #24
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	60f8      	str	r0, [r7, #12]
 8016e74:	60b9      	str	r1, [r7, #8]
 8016e76:	1dfb      	adds	r3, r7, #7
 8016e78:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8016e7a:	2117      	movs	r1, #23
 8016e7c:	187b      	adds	r3, r7, r1
 8016e7e:	2200      	movs	r2, #0
 8016e80:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8016e82:	187b      	adds	r3, r7, r1
 8016e84:	2200      	movs	r2, #0
 8016e86:	701a      	strb	r2, [r3, #0]
 8016e88:	e02f      	b.n	8016eea <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	0f1b      	lsrs	r3, r3, #28
 8016e8e:	2b09      	cmp	r3, #9
 8016e90:	d80d      	bhi.n	8016eae <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	0f1b      	lsrs	r3, r3, #28
 8016e96:	b2da      	uxtb	r2, r3
 8016e98:	2317      	movs	r3, #23
 8016e9a:	18fb      	adds	r3, r7, r3
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	005b      	lsls	r3, r3, #1
 8016ea0:	0019      	movs	r1, r3
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	185b      	adds	r3, r3, r1
 8016ea6:	3230      	adds	r2, #48	@ 0x30
 8016ea8:	b2d2      	uxtb	r2, r2
 8016eaa:	701a      	strb	r2, [r3, #0]
 8016eac:	e00c      	b.n	8016ec8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	0f1b      	lsrs	r3, r3, #28
 8016eb2:	b2da      	uxtb	r2, r3
 8016eb4:	2317      	movs	r3, #23
 8016eb6:	18fb      	adds	r3, r7, r3
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	005b      	lsls	r3, r3, #1
 8016ebc:	0019      	movs	r1, r3
 8016ebe:	68bb      	ldr	r3, [r7, #8]
 8016ec0:	185b      	adds	r3, r3, r1
 8016ec2:	3237      	adds	r2, #55	@ 0x37
 8016ec4:	b2d2      	uxtb	r2, r2
 8016ec6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	011b      	lsls	r3, r3, #4
 8016ecc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016ece:	2117      	movs	r1, #23
 8016ed0:	187b      	adds	r3, r7, r1
 8016ed2:	781b      	ldrb	r3, [r3, #0]
 8016ed4:	005b      	lsls	r3, r3, #1
 8016ed6:	3301      	adds	r3, #1
 8016ed8:	68ba      	ldr	r2, [r7, #8]
 8016eda:	18d3      	adds	r3, r2, r3
 8016edc:	2200      	movs	r2, #0
 8016ede:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016ee0:	187b      	adds	r3, r7, r1
 8016ee2:	781a      	ldrb	r2, [r3, #0]
 8016ee4:	187b      	adds	r3, r7, r1
 8016ee6:	3201      	adds	r2, #1
 8016ee8:	701a      	strb	r2, [r3, #0]
 8016eea:	2317      	movs	r3, #23
 8016eec:	18fa      	adds	r2, r7, r3
 8016eee:	1dfb      	adds	r3, r7, #7
 8016ef0:	7812      	ldrb	r2, [r2, #0]
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d3c8      	bcc.n	8016e8a <IntToUnicode+0x1e>
  }
}
 8016ef8:	46c0      	nop			@ (mov r8, r8)
 8016efa:	46c0      	nop			@ (mov r8, r8)
 8016efc:	46bd      	mov	sp, r7
 8016efe:	b006      	add	sp, #24
 8016f00:	bd80      	pop	{r7, pc}
	...

08016f04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b082      	sub	sp, #8
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	4a0a      	ldr	r2, [pc, #40]	@ (8016f3c <HAL_PCD_MspInit+0x38>)
 8016f12:	4293      	cmp	r3, r2
 8016f14:	d10e      	bne.n	8016f34 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016f16:	4b0a      	ldr	r3, [pc, #40]	@ (8016f40 <HAL_PCD_MspInit+0x3c>)
 8016f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016f1a:	4b09      	ldr	r3, [pc, #36]	@ (8016f40 <HAL_PCD_MspInit+0x3c>)
 8016f1c:	2180      	movs	r1, #128	@ 0x80
 8016f1e:	0409      	lsls	r1, r1, #16
 8016f20:	430a      	orrs	r2, r1
 8016f22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8016f24:	2200      	movs	r2, #0
 8016f26:	2100      	movs	r1, #0
 8016f28:	201f      	movs	r0, #31
 8016f2a:	f7f3 fc57 	bl	800a7dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8016f2e:	201f      	movs	r0, #31
 8016f30:	f7f3 fc69 	bl	800a806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016f34:	46c0      	nop			@ (mov r8, r8)
 8016f36:	46bd      	mov	sp, r7
 8016f38:	b002      	add	sp, #8
 8016f3a:	bd80      	pop	{r7, pc}
 8016f3c:	40005c00 	.word	0x40005c00
 8016f40:	40021000 	.word	0x40021000

08016f44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b082      	sub	sp, #8
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016f4c:	687a      	ldr	r2, [r7, #4]
 8016f4e:	23bc      	movs	r3, #188	@ 0xbc
 8016f50:	009b      	lsls	r3, r3, #2
 8016f52:	58d2      	ldr	r2, [r2, r3]
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	21ac      	movs	r1, #172	@ 0xac
 8016f58:	0089      	lsls	r1, r1, #2
 8016f5a:	468c      	mov	ip, r1
 8016f5c:	4463      	add	r3, ip
 8016f5e:	0019      	movs	r1, r3
 8016f60:	0010      	movs	r0, r2
 8016f62:	f7fe fc1d 	bl	80157a0 <USBD_LL_SetupStage>
}
 8016f66:	46c0      	nop			@ (mov r8, r8)
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	b002      	add	sp, #8
 8016f6c:	bd80      	pop	{r7, pc}

08016f6e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f6e:	b590      	push	{r4, r7, lr}
 8016f70:	b083      	sub	sp, #12
 8016f72:	af00      	add	r7, sp, #0
 8016f74:	6078      	str	r0, [r7, #4]
 8016f76:	000a      	movs	r2, r1
 8016f78:	1cfb      	adds	r3, r7, #3
 8016f7a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016f7c:	687a      	ldr	r2, [r7, #4]
 8016f7e:	23bc      	movs	r3, #188	@ 0xbc
 8016f80:	009b      	lsls	r3, r3, #2
 8016f82:	58d4      	ldr	r4, [r2, r3]
 8016f84:	1cfb      	adds	r3, r7, #3
 8016f86:	781a      	ldrb	r2, [r3, #0]
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	23be      	movs	r3, #190	@ 0xbe
 8016f8c:	0059      	lsls	r1, r3, #1
 8016f8e:	0013      	movs	r3, r2
 8016f90:	009b      	lsls	r3, r3, #2
 8016f92:	189b      	adds	r3, r3, r2
 8016f94:	00db      	lsls	r3, r3, #3
 8016f96:	18c3      	adds	r3, r0, r3
 8016f98:	185b      	adds	r3, r3, r1
 8016f9a:	681a      	ldr	r2, [r3, #0]
 8016f9c:	1cfb      	adds	r3, r7, #3
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	0019      	movs	r1, r3
 8016fa2:	0020      	movs	r0, r4
 8016fa4:	f7fe fc5a 	bl	801585c <USBD_LL_DataOutStage>
}
 8016fa8:	46c0      	nop			@ (mov r8, r8)
 8016faa:	46bd      	mov	sp, r7
 8016fac:	b003      	add	sp, #12
 8016fae:	bd90      	pop	{r4, r7, pc}

08016fb0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	000a      	movs	r2, r1
 8016fba:	1cfb      	adds	r3, r7, #3
 8016fbc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016fbe:	687a      	ldr	r2, [r7, #4]
 8016fc0:	23bc      	movs	r3, #188	@ 0xbc
 8016fc2:	009b      	lsls	r3, r3, #2
 8016fc4:	58d0      	ldr	r0, [r2, r3]
 8016fc6:	1cfb      	adds	r3, r7, #3
 8016fc8:	781a      	ldrb	r2, [r3, #0]
 8016fca:	6879      	ldr	r1, [r7, #4]
 8016fcc:	0013      	movs	r3, r2
 8016fce:	009b      	lsls	r3, r3, #2
 8016fd0:	189b      	adds	r3, r3, r2
 8016fd2:	00db      	lsls	r3, r3, #3
 8016fd4:	18cb      	adds	r3, r1, r3
 8016fd6:	333c      	adds	r3, #60	@ 0x3c
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	1cfb      	adds	r3, r7, #3
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	0019      	movs	r1, r3
 8016fe0:	f7fe fcbe 	bl	8015960 <USBD_LL_DataInStage>
}
 8016fe4:	46c0      	nop			@ (mov r8, r8)
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	b002      	add	sp, #8
 8016fea:	bd80      	pop	{r7, pc}

08016fec <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ff4:	687a      	ldr	r2, [r7, #4]
 8016ff6:	23bc      	movs	r3, #188	@ 0xbc
 8016ff8:	009b      	lsls	r3, r3, #2
 8016ffa:	58d3      	ldr	r3, [r2, r3]
 8016ffc:	0018      	movs	r0, r3
 8016ffe:	f7fe fdf5 	bl	8015bec <USBD_LL_SOF>
}
 8017002:	46c0      	nop			@ (mov r8, r8)
 8017004:	46bd      	mov	sp, r7
 8017006:	b002      	add	sp, #8
 8017008:	bd80      	pop	{r7, pc}

0801700a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801700a:	b580      	push	{r7, lr}
 801700c:	b084      	sub	sp, #16
 801700e:	af00      	add	r7, sp, #0
 8017010:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017012:	230f      	movs	r3, #15
 8017014:	18fb      	adds	r3, r7, r3
 8017016:	2201      	movs	r2, #1
 8017018:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	689b      	ldr	r3, [r3, #8]
 801701e:	2b02      	cmp	r3, #2
 8017020:	d001      	beq.n	8017026 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8017022:	f7ef f9af 	bl	8006384 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	23bc      	movs	r3, #188	@ 0xbc
 801702a:	009b      	lsls	r3, r3, #2
 801702c:	58d2      	ldr	r2, [r2, r3]
 801702e:	230f      	movs	r3, #15
 8017030:	18fb      	adds	r3, r7, r3
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	0019      	movs	r1, r3
 8017036:	0010      	movs	r0, r2
 8017038:	f7fe fd97 	bl	8015b6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801703c:	687a      	ldr	r2, [r7, #4]
 801703e:	23bc      	movs	r3, #188	@ 0xbc
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	58d3      	ldr	r3, [r2, r3]
 8017044:	0018      	movs	r0, r3
 8017046:	f7fe fd48 	bl	8015ada <USBD_LL_Reset>
}
 801704a:	46c0      	nop			@ (mov r8, r8)
 801704c:	46bd      	mov	sp, r7
 801704e:	b004      	add	sp, #16
 8017050:	bd80      	pop	{r7, pc}
	...

08017054 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b082      	sub	sp, #8
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	23bc      	movs	r3, #188	@ 0xbc
 8017060:	009b      	lsls	r3, r3, #2
 8017062:	58d3      	ldr	r3, [r2, r3]
 8017064:	0018      	movs	r0, r3
 8017066:	f7fe fd91 	bl	8015b8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	699b      	ldr	r3, [r3, #24]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d005      	beq.n	801707e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017072:	4b05      	ldr	r3, [pc, #20]	@ (8017088 <HAL_PCD_SuspendCallback+0x34>)
 8017074:	691a      	ldr	r2, [r3, #16]
 8017076:	4b04      	ldr	r3, [pc, #16]	@ (8017088 <HAL_PCD_SuspendCallback+0x34>)
 8017078:	2106      	movs	r1, #6
 801707a:	430a      	orrs	r2, r1
 801707c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801707e:	46c0      	nop			@ (mov r8, r8)
 8017080:	46bd      	mov	sp, r7
 8017082:	b002      	add	sp, #8
 8017084:	bd80      	pop	{r7, pc}
 8017086:	46c0      	nop			@ (mov r8, r8)
 8017088:	e000ed00 	.word	0xe000ed00

0801708c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b082      	sub	sp, #8
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	699b      	ldr	r3, [r3, #24]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d007      	beq.n	80170ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801709c:	4b09      	ldr	r3, [pc, #36]	@ (80170c4 <HAL_PCD_ResumeCallback+0x38>)
 801709e:	691a      	ldr	r2, [r3, #16]
 80170a0:	4b08      	ldr	r3, [pc, #32]	@ (80170c4 <HAL_PCD_ResumeCallback+0x38>)
 80170a2:	2106      	movs	r1, #6
 80170a4:	438a      	bics	r2, r1
 80170a6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80170a8:	f000 fa44 	bl	8017534 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80170ac:	687a      	ldr	r2, [r7, #4]
 80170ae:	23bc      	movs	r3, #188	@ 0xbc
 80170b0:	009b      	lsls	r3, r3, #2
 80170b2:	58d3      	ldr	r3, [r2, r3]
 80170b4:	0018      	movs	r0, r3
 80170b6:	f7fe fd81 	bl	8015bbc <USBD_LL_Resume>
}
 80170ba:	46c0      	nop			@ (mov r8, r8)
 80170bc:	46bd      	mov	sp, r7
 80170be:	b002      	add	sp, #8
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	46c0      	nop			@ (mov r8, r8)
 80170c4:	e000ed00 	.word	0xe000ed00

080170c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b082      	sub	sp, #8
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80170d0:	4a2d      	ldr	r2, [pc, #180]	@ (8017188 <USBD_LL_Init+0xc0>)
 80170d2:	23bc      	movs	r3, #188	@ 0xbc
 80170d4:	009b      	lsls	r3, r3, #2
 80170d6:	6879      	ldr	r1, [r7, #4]
 80170d8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80170da:	687a      	ldr	r2, [r7, #4]
 80170dc:	23b0      	movs	r3, #176	@ 0xb0
 80170de:	009b      	lsls	r3, r3, #2
 80170e0:	4929      	ldr	r1, [pc, #164]	@ (8017188 <USBD_LL_Init+0xc0>)
 80170e2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80170e4:	4b28      	ldr	r3, [pc, #160]	@ (8017188 <USBD_LL_Init+0xc0>)
 80170e6:	4a29      	ldr	r2, [pc, #164]	@ (801718c <USBD_LL_Init+0xc4>)
 80170e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80170ea:	4b27      	ldr	r3, [pc, #156]	@ (8017188 <USBD_LL_Init+0xc0>)
 80170ec:	2208      	movs	r2, #8
 80170ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80170f0:	4b25      	ldr	r3, [pc, #148]	@ (8017188 <USBD_LL_Init+0xc0>)
 80170f2:	2202      	movs	r2, #2
 80170f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80170f6:	4b24      	ldr	r3, [pc, #144]	@ (8017188 <USBD_LL_Init+0xc0>)
 80170f8:	2202      	movs	r2, #2
 80170fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80170fc:	4b22      	ldr	r3, [pc, #136]	@ (8017188 <USBD_LL_Init+0xc0>)
 80170fe:	2200      	movs	r2, #0
 8017100:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017102:	4b21      	ldr	r3, [pc, #132]	@ (8017188 <USBD_LL_Init+0xc0>)
 8017104:	2200      	movs	r2, #0
 8017106:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017108:	4b1f      	ldr	r3, [pc, #124]	@ (8017188 <USBD_LL_Init+0xc0>)
 801710a:	2200      	movs	r2, #0
 801710c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801710e:	4b1e      	ldr	r3, [pc, #120]	@ (8017188 <USBD_LL_Init+0xc0>)
 8017110:	0018      	movs	r0, r3
 8017112:	f7f6 fe07 	bl	800dd24 <HAL_PCD_Init>
 8017116:	1e03      	subs	r3, r0, #0
 8017118:	d001      	beq.n	801711e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801711a:	f7ef f933 	bl	8006384 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801711e:	687a      	ldr	r2, [r7, #4]
 8017120:	23b0      	movs	r3, #176	@ 0xb0
 8017122:	009b      	lsls	r3, r3, #2
 8017124:	58d0      	ldr	r0, [r2, r3]
 8017126:	2318      	movs	r3, #24
 8017128:	2200      	movs	r2, #0
 801712a:	2100      	movs	r1, #0
 801712c:	f7f8 fbc8 	bl	800f8c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017130:	687a      	ldr	r2, [r7, #4]
 8017132:	23b0      	movs	r3, #176	@ 0xb0
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	58d0      	ldr	r0, [r2, r3]
 8017138:	2358      	movs	r3, #88	@ 0x58
 801713a:	2200      	movs	r2, #0
 801713c:	2180      	movs	r1, #128	@ 0x80
 801713e:	f7f8 fbbf 	bl	800f8c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8017142:	687a      	ldr	r2, [r7, #4]
 8017144:	23b0      	movs	r3, #176	@ 0xb0
 8017146:	009b      	lsls	r3, r3, #2
 8017148:	58d0      	ldr	r0, [r2, r3]
 801714a:	23c0      	movs	r3, #192	@ 0xc0
 801714c:	2200      	movs	r2, #0
 801714e:	2181      	movs	r1, #129	@ 0x81
 8017150:	f7f8 fbb6 	bl	800f8c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	23b0      	movs	r3, #176	@ 0xb0
 8017158:	009b      	lsls	r3, r3, #2
 801715a:	58d0      	ldr	r0, [r2, r3]
 801715c:	2388      	movs	r3, #136	@ 0x88
 801715e:	005b      	lsls	r3, r3, #1
 8017160:	2200      	movs	r2, #0
 8017162:	2101      	movs	r1, #1
 8017164:	f7f8 fbac 	bl	800f8c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8017168:	687a      	ldr	r2, [r7, #4]
 801716a:	23b0      	movs	r3, #176	@ 0xb0
 801716c:	009b      	lsls	r3, r3, #2
 801716e:	58d0      	ldr	r0, [r2, r3]
 8017170:	2380      	movs	r3, #128	@ 0x80
 8017172:	005b      	lsls	r3, r3, #1
 8017174:	2200      	movs	r2, #0
 8017176:	2182      	movs	r1, #130	@ 0x82
 8017178:	f7f8 fba2 	bl	800f8c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801717c:	2300      	movs	r3, #0
}
 801717e:	0018      	movs	r0, r3
 8017180:	46bd      	mov	sp, r7
 8017182:	b002      	add	sp, #8
 8017184:	bd80      	pop	{r7, pc}
 8017186:	46c0      	nop			@ (mov r8, r8)
 8017188:	200039b0 	.word	0x200039b0
 801718c:	40005c00 	.word	0x40005c00

08017190 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017192:	b085      	sub	sp, #20
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017198:	210f      	movs	r1, #15
 801719a:	187b      	adds	r3, r7, r1
 801719c:	2200      	movs	r2, #0
 801719e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171a0:	260e      	movs	r6, #14
 80171a2:	19bb      	adds	r3, r7, r6
 80171a4:	2200      	movs	r2, #0
 80171a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80171a8:	687a      	ldr	r2, [r7, #4]
 80171aa:	23b0      	movs	r3, #176	@ 0xb0
 80171ac:	009b      	lsls	r3, r3, #2
 80171ae:	58d3      	ldr	r3, [r2, r3]
 80171b0:	000d      	movs	r5, r1
 80171b2:	187c      	adds	r4, r7, r1
 80171b4:	0018      	movs	r0, r3
 80171b6:	f7f6 feb5 	bl	800df24 <HAL_PCD_Start>
 80171ba:	0003      	movs	r3, r0
 80171bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171be:	19bc      	adds	r4, r7, r6
 80171c0:	197b      	adds	r3, r7, r5
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	0018      	movs	r0, r3
 80171c6:	f000 f9bc 	bl	8017542 <USBD_Get_USB_Status>
 80171ca:	0003      	movs	r3, r0
 80171cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80171ce:	19bb      	adds	r3, r7, r6
 80171d0:	781b      	ldrb	r3, [r3, #0]
}
 80171d2:	0018      	movs	r0, r3
 80171d4:	46bd      	mov	sp, r7
 80171d6:	b005      	add	sp, #20
 80171d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080171da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80171da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171dc:	b085      	sub	sp, #20
 80171de:	af00      	add	r7, sp, #0
 80171e0:	6078      	str	r0, [r7, #4]
 80171e2:	000c      	movs	r4, r1
 80171e4:	0010      	movs	r0, r2
 80171e6:	0019      	movs	r1, r3
 80171e8:	1cfb      	adds	r3, r7, #3
 80171ea:	1c22      	adds	r2, r4, #0
 80171ec:	701a      	strb	r2, [r3, #0]
 80171ee:	1cbb      	adds	r3, r7, #2
 80171f0:	1c02      	adds	r2, r0, #0
 80171f2:	701a      	strb	r2, [r3, #0]
 80171f4:	003b      	movs	r3, r7
 80171f6:	1c0a      	adds	r2, r1, #0
 80171f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171fa:	260f      	movs	r6, #15
 80171fc:	19bb      	adds	r3, r7, r6
 80171fe:	2200      	movs	r2, #0
 8017200:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017202:	250e      	movs	r5, #14
 8017204:	197b      	adds	r3, r7, r5
 8017206:	2200      	movs	r2, #0
 8017208:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801720a:	687a      	ldr	r2, [r7, #4]
 801720c:	23b0      	movs	r3, #176	@ 0xb0
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	58d0      	ldr	r0, [r2, r3]
 8017212:	19bc      	adds	r4, r7, r6
 8017214:	1cbb      	adds	r3, r7, #2
 8017216:	781d      	ldrb	r5, [r3, #0]
 8017218:	003b      	movs	r3, r7
 801721a:	881a      	ldrh	r2, [r3, #0]
 801721c:	1cfb      	adds	r3, r7, #3
 801721e:	7819      	ldrb	r1, [r3, #0]
 8017220:	002b      	movs	r3, r5
 8017222:	f7f7 f814 	bl	800e24e <HAL_PCD_EP_Open>
 8017226:	0003      	movs	r3, r0
 8017228:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801722a:	250e      	movs	r5, #14
 801722c:	197c      	adds	r4, r7, r5
 801722e:	19bb      	adds	r3, r7, r6
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	0018      	movs	r0, r3
 8017234:	f000 f985 	bl	8017542 <USBD_Get_USB_Status>
 8017238:	0003      	movs	r3, r0
 801723a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801723c:	197b      	adds	r3, r7, r5
 801723e:	781b      	ldrb	r3, [r3, #0]
}
 8017240:	0018      	movs	r0, r3
 8017242:	46bd      	mov	sp, r7
 8017244:	b005      	add	sp, #20
 8017246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017248 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801724a:	b085      	sub	sp, #20
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	000a      	movs	r2, r1
 8017252:	1cfb      	adds	r3, r7, #3
 8017254:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017256:	210f      	movs	r1, #15
 8017258:	187b      	adds	r3, r7, r1
 801725a:	2200      	movs	r2, #0
 801725c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801725e:	260e      	movs	r6, #14
 8017260:	19bb      	adds	r3, r7, r6
 8017262:	2200      	movs	r2, #0
 8017264:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017266:	687a      	ldr	r2, [r7, #4]
 8017268:	23b0      	movs	r3, #176	@ 0xb0
 801726a:	009b      	lsls	r3, r3, #2
 801726c:	58d2      	ldr	r2, [r2, r3]
 801726e:	000d      	movs	r5, r1
 8017270:	187c      	adds	r4, r7, r1
 8017272:	1cfb      	adds	r3, r7, #3
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	0019      	movs	r1, r3
 8017278:	0010      	movs	r0, r2
 801727a:	f7f7 f857 	bl	800e32c <HAL_PCD_EP_Close>
 801727e:	0003      	movs	r3, r0
 8017280:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017282:	19bc      	adds	r4, r7, r6
 8017284:	197b      	adds	r3, r7, r5
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	0018      	movs	r0, r3
 801728a:	f000 f95a 	bl	8017542 <USBD_Get_USB_Status>
 801728e:	0003      	movs	r3, r0
 8017290:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017292:	19bb      	adds	r3, r7, r6
 8017294:	781b      	ldrb	r3, [r3, #0]
}
 8017296:	0018      	movs	r0, r3
 8017298:	46bd      	mov	sp, r7
 801729a:	b005      	add	sp, #20
 801729c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801729e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801729e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172a0:	b085      	sub	sp, #20
 80172a2:	af00      	add	r7, sp, #0
 80172a4:	6078      	str	r0, [r7, #4]
 80172a6:	000a      	movs	r2, r1
 80172a8:	1cfb      	adds	r3, r7, #3
 80172aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172ac:	210f      	movs	r1, #15
 80172ae:	187b      	adds	r3, r7, r1
 80172b0:	2200      	movs	r2, #0
 80172b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172b4:	260e      	movs	r6, #14
 80172b6:	19bb      	adds	r3, r7, r6
 80172b8:	2200      	movs	r2, #0
 80172ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80172bc:	687a      	ldr	r2, [r7, #4]
 80172be:	23b0      	movs	r3, #176	@ 0xb0
 80172c0:	009b      	lsls	r3, r3, #2
 80172c2:	58d2      	ldr	r2, [r2, r3]
 80172c4:	000d      	movs	r5, r1
 80172c6:	187c      	adds	r4, r7, r1
 80172c8:	1cfb      	adds	r3, r7, #3
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	0019      	movs	r1, r3
 80172ce:	0010      	movs	r0, r2
 80172d0:	f7f7 f909 	bl	800e4e6 <HAL_PCD_EP_SetStall>
 80172d4:	0003      	movs	r3, r0
 80172d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172d8:	19bc      	adds	r4, r7, r6
 80172da:	197b      	adds	r3, r7, r5
 80172dc:	781b      	ldrb	r3, [r3, #0]
 80172de:	0018      	movs	r0, r3
 80172e0:	f000 f92f 	bl	8017542 <USBD_Get_USB_Status>
 80172e4:	0003      	movs	r3, r0
 80172e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80172e8:	19bb      	adds	r3, r7, r6
 80172ea:	781b      	ldrb	r3, [r3, #0]
}
 80172ec:	0018      	movs	r0, r3
 80172ee:	46bd      	mov	sp, r7
 80172f0:	b005      	add	sp, #20
 80172f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080172f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80172f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172f6:	b085      	sub	sp, #20
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
 80172fc:	000a      	movs	r2, r1
 80172fe:	1cfb      	adds	r3, r7, #3
 8017300:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017302:	210f      	movs	r1, #15
 8017304:	187b      	adds	r3, r7, r1
 8017306:	2200      	movs	r2, #0
 8017308:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801730a:	260e      	movs	r6, #14
 801730c:	19bb      	adds	r3, r7, r6
 801730e:	2200      	movs	r2, #0
 8017310:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017312:	687a      	ldr	r2, [r7, #4]
 8017314:	23b0      	movs	r3, #176	@ 0xb0
 8017316:	009b      	lsls	r3, r3, #2
 8017318:	58d2      	ldr	r2, [r2, r3]
 801731a:	000d      	movs	r5, r1
 801731c:	187c      	adds	r4, r7, r1
 801731e:	1cfb      	adds	r3, r7, #3
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	0019      	movs	r1, r3
 8017324:	0010      	movs	r0, r2
 8017326:	f7f7 f93a 	bl	800e59e <HAL_PCD_EP_ClrStall>
 801732a:	0003      	movs	r3, r0
 801732c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801732e:	19bc      	adds	r4, r7, r6
 8017330:	197b      	adds	r3, r7, r5
 8017332:	781b      	ldrb	r3, [r3, #0]
 8017334:	0018      	movs	r0, r3
 8017336:	f000 f904 	bl	8017542 <USBD_Get_USB_Status>
 801733a:	0003      	movs	r3, r0
 801733c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801733e:	19bb      	adds	r3, r7, r6
 8017340:	781b      	ldrb	r3, [r3, #0]
}
 8017342:	0018      	movs	r0, r3
 8017344:	46bd      	mov	sp, r7
 8017346:	b005      	add	sp, #20
 8017348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801734a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801734a:	b580      	push	{r7, lr}
 801734c:	b084      	sub	sp, #16
 801734e:	af00      	add	r7, sp, #0
 8017350:	6078      	str	r0, [r7, #4]
 8017352:	000a      	movs	r2, r1
 8017354:	1cfb      	adds	r3, r7, #3
 8017356:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017358:	687a      	ldr	r2, [r7, #4]
 801735a:	23b0      	movs	r3, #176	@ 0xb0
 801735c:	009b      	lsls	r3, r3, #2
 801735e:	58d3      	ldr	r3, [r2, r3]
 8017360:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017362:	1cfb      	adds	r3, r7, #3
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	b25b      	sxtb	r3, r3
 8017368:	2b00      	cmp	r3, #0
 801736a:	da0d      	bge.n	8017388 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801736c:	1cfb      	adds	r3, r7, #3
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	227f      	movs	r2, #127	@ 0x7f
 8017372:	4013      	ands	r3, r2
 8017374:	68f9      	ldr	r1, [r7, #12]
 8017376:	1c5a      	adds	r2, r3, #1
 8017378:	0013      	movs	r3, r2
 801737a:	009b      	lsls	r3, r3, #2
 801737c:	189b      	adds	r3, r3, r2
 801737e:	00db      	lsls	r3, r3, #3
 8017380:	18cb      	adds	r3, r1, r3
 8017382:	3302      	adds	r3, #2
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	e00d      	b.n	80173a4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017388:	1cfb      	adds	r3, r7, #3
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	227f      	movs	r2, #127	@ 0x7f
 801738e:	401a      	ands	r2, r3
 8017390:	68f8      	ldr	r0, [r7, #12]
 8017392:	23b5      	movs	r3, #181	@ 0xb5
 8017394:	0059      	lsls	r1, r3, #1
 8017396:	0013      	movs	r3, r2
 8017398:	009b      	lsls	r3, r3, #2
 801739a:	189b      	adds	r3, r3, r2
 801739c:	00db      	lsls	r3, r3, #3
 801739e:	18c3      	adds	r3, r0, r3
 80173a0:	185b      	adds	r3, r3, r1
 80173a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80173a4:	0018      	movs	r0, r3
 80173a6:	46bd      	mov	sp, r7
 80173a8:	b004      	add	sp, #16
 80173aa:	bd80      	pop	{r7, pc}

080173ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80173ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173ae:	b085      	sub	sp, #20
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
 80173b4:	000a      	movs	r2, r1
 80173b6:	1cfb      	adds	r3, r7, #3
 80173b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173ba:	210f      	movs	r1, #15
 80173bc:	187b      	adds	r3, r7, r1
 80173be:	2200      	movs	r2, #0
 80173c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173c2:	260e      	movs	r6, #14
 80173c4:	19bb      	adds	r3, r7, r6
 80173c6:	2200      	movs	r2, #0
 80173c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80173ca:	687a      	ldr	r2, [r7, #4]
 80173cc:	23b0      	movs	r3, #176	@ 0xb0
 80173ce:	009b      	lsls	r3, r3, #2
 80173d0:	58d2      	ldr	r2, [r2, r3]
 80173d2:	000d      	movs	r5, r1
 80173d4:	187c      	adds	r4, r7, r1
 80173d6:	1cfb      	adds	r3, r7, #3
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	0019      	movs	r1, r3
 80173dc:	0010      	movs	r0, r2
 80173de:	f7f6 ff0b 	bl	800e1f8 <HAL_PCD_SetAddress>
 80173e2:	0003      	movs	r3, r0
 80173e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173e6:	19bc      	adds	r4, r7, r6
 80173e8:	197b      	adds	r3, r7, r5
 80173ea:	781b      	ldrb	r3, [r3, #0]
 80173ec:	0018      	movs	r0, r3
 80173ee:	f000 f8a8 	bl	8017542 <USBD_Get_USB_Status>
 80173f2:	0003      	movs	r3, r0
 80173f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80173f6:	19bb      	adds	r3, r7, r6
 80173f8:	781b      	ldrb	r3, [r3, #0]
}
 80173fa:	0018      	movs	r0, r3
 80173fc:	46bd      	mov	sp, r7
 80173fe:	b005      	add	sp, #20
 8017400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017402 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017404:	b087      	sub	sp, #28
 8017406:	af00      	add	r7, sp, #0
 8017408:	60f8      	str	r0, [r7, #12]
 801740a:	0008      	movs	r0, r1
 801740c:	607a      	str	r2, [r7, #4]
 801740e:	0019      	movs	r1, r3
 8017410:	230b      	movs	r3, #11
 8017412:	18fb      	adds	r3, r7, r3
 8017414:	1c02      	adds	r2, r0, #0
 8017416:	701a      	strb	r2, [r3, #0]
 8017418:	2408      	movs	r4, #8
 801741a:	193b      	adds	r3, r7, r4
 801741c:	1c0a      	adds	r2, r1, #0
 801741e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017420:	2117      	movs	r1, #23
 8017422:	187b      	adds	r3, r7, r1
 8017424:	2200      	movs	r2, #0
 8017426:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017428:	2516      	movs	r5, #22
 801742a:	197b      	adds	r3, r7, r5
 801742c:	2200      	movs	r2, #0
 801742e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017430:	68fa      	ldr	r2, [r7, #12]
 8017432:	23b0      	movs	r3, #176	@ 0xb0
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	58d0      	ldr	r0, [r2, r3]
 8017438:	193b      	adds	r3, r7, r4
 801743a:	881d      	ldrh	r5, [r3, #0]
 801743c:	000e      	movs	r6, r1
 801743e:	187c      	adds	r4, r7, r1
 8017440:	687a      	ldr	r2, [r7, #4]
 8017442:	230b      	movs	r3, #11
 8017444:	18fb      	adds	r3, r7, r3
 8017446:	7819      	ldrb	r1, [r3, #0]
 8017448:	002b      	movs	r3, r5
 801744a:	f7f7 f810 	bl	800e46e <HAL_PCD_EP_Transmit>
 801744e:	0003      	movs	r3, r0
 8017450:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017452:	2516      	movs	r5, #22
 8017454:	197c      	adds	r4, r7, r5
 8017456:	19bb      	adds	r3, r7, r6
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	0018      	movs	r0, r3
 801745c:	f000 f871 	bl	8017542 <USBD_Get_USB_Status>
 8017460:	0003      	movs	r3, r0
 8017462:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017464:	197b      	adds	r3, r7, r5
 8017466:	781b      	ldrb	r3, [r3, #0]
}
 8017468:	0018      	movs	r0, r3
 801746a:	46bd      	mov	sp, r7
 801746c:	b007      	add	sp, #28
 801746e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017470 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017472:	b087      	sub	sp, #28
 8017474:	af00      	add	r7, sp, #0
 8017476:	60f8      	str	r0, [r7, #12]
 8017478:	0008      	movs	r0, r1
 801747a:	607a      	str	r2, [r7, #4]
 801747c:	0019      	movs	r1, r3
 801747e:	230b      	movs	r3, #11
 8017480:	18fb      	adds	r3, r7, r3
 8017482:	1c02      	adds	r2, r0, #0
 8017484:	701a      	strb	r2, [r3, #0]
 8017486:	2408      	movs	r4, #8
 8017488:	193b      	adds	r3, r7, r4
 801748a:	1c0a      	adds	r2, r1, #0
 801748c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801748e:	2117      	movs	r1, #23
 8017490:	187b      	adds	r3, r7, r1
 8017492:	2200      	movs	r2, #0
 8017494:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017496:	2516      	movs	r5, #22
 8017498:	197b      	adds	r3, r7, r5
 801749a:	2200      	movs	r2, #0
 801749c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801749e:	68fa      	ldr	r2, [r7, #12]
 80174a0:	23b0      	movs	r3, #176	@ 0xb0
 80174a2:	009b      	lsls	r3, r3, #2
 80174a4:	58d0      	ldr	r0, [r2, r3]
 80174a6:	193b      	adds	r3, r7, r4
 80174a8:	881d      	ldrh	r5, [r3, #0]
 80174aa:	000e      	movs	r6, r1
 80174ac:	187c      	adds	r4, r7, r1
 80174ae:	687a      	ldr	r2, [r7, #4]
 80174b0:	230b      	movs	r3, #11
 80174b2:	18fb      	adds	r3, r7, r3
 80174b4:	7819      	ldrb	r1, [r3, #0]
 80174b6:	002b      	movs	r3, r5
 80174b8:	f7f6 ff89 	bl	800e3ce <HAL_PCD_EP_Receive>
 80174bc:	0003      	movs	r3, r0
 80174be:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174c0:	2516      	movs	r5, #22
 80174c2:	197c      	adds	r4, r7, r5
 80174c4:	19bb      	adds	r3, r7, r6
 80174c6:	781b      	ldrb	r3, [r3, #0]
 80174c8:	0018      	movs	r0, r3
 80174ca:	f000 f83a 	bl	8017542 <USBD_Get_USB_Status>
 80174ce:	0003      	movs	r3, r0
 80174d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80174d2:	197b      	adds	r3, r7, r5
 80174d4:	781b      	ldrb	r3, [r3, #0]
}
 80174d6:	0018      	movs	r0, r3
 80174d8:	46bd      	mov	sp, r7
 80174da:	b007      	add	sp, #28
 80174dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080174de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174de:	b580      	push	{r7, lr}
 80174e0:	b082      	sub	sp, #8
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	6078      	str	r0, [r7, #4]
 80174e6:	000a      	movs	r2, r1
 80174e8:	1cfb      	adds	r3, r7, #3
 80174ea:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80174ec:	687a      	ldr	r2, [r7, #4]
 80174ee:	23b0      	movs	r3, #176	@ 0xb0
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	58d2      	ldr	r2, [r2, r3]
 80174f4:	1cfb      	adds	r3, r7, #3
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	0019      	movs	r1, r3
 80174fa:	0010      	movs	r0, r2
 80174fc:	f7f6 ff9e 	bl	800e43c <HAL_PCD_EP_GetRxCount>
 8017500:	0003      	movs	r3, r0
}
 8017502:	0018      	movs	r0, r3
 8017504:	46bd      	mov	sp, r7
 8017506:	b002      	add	sp, #8
 8017508:	bd80      	pop	{r7, pc}
	...

0801750c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b082      	sub	sp, #8
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017514:	4b02      	ldr	r3, [pc, #8]	@ (8017520 <USBD_static_malloc+0x14>)
}
 8017516:	0018      	movs	r0, r3
 8017518:	46bd      	mov	sp, r7
 801751a:	b002      	add	sp, #8
 801751c:	bd80      	pop	{r7, pc}
 801751e:	46c0      	nop			@ (mov r8, r8)
 8017520:	20003ca4 	.word	0x20003ca4

08017524 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b082      	sub	sp, #8
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]

}
 801752c:	46c0      	nop			@ (mov r8, r8)
 801752e:	46bd      	mov	sp, r7
 8017530:	b002      	add	sp, #8
 8017532:	bd80      	pop	{r7, pc}

08017534 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017538:	f7ee fe9e 	bl	8006278 <SystemClock_Config>
}
 801753c:	46c0      	nop			@ (mov r8, r8)
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}

08017542 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017542:	b580      	push	{r7, lr}
 8017544:	b084      	sub	sp, #16
 8017546:	af00      	add	r7, sp, #0
 8017548:	0002      	movs	r2, r0
 801754a:	1dfb      	adds	r3, r7, #7
 801754c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801754e:	230f      	movs	r3, #15
 8017550:	18fb      	adds	r3, r7, r3
 8017552:	2200      	movs	r2, #0
 8017554:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8017556:	1dfb      	adds	r3, r7, #7
 8017558:	781b      	ldrb	r3, [r3, #0]
 801755a:	2b03      	cmp	r3, #3
 801755c:	d017      	beq.n	801758e <USBD_Get_USB_Status+0x4c>
 801755e:	dc1b      	bgt.n	8017598 <USBD_Get_USB_Status+0x56>
 8017560:	2b02      	cmp	r3, #2
 8017562:	d00f      	beq.n	8017584 <USBD_Get_USB_Status+0x42>
 8017564:	dc18      	bgt.n	8017598 <USBD_Get_USB_Status+0x56>
 8017566:	2b00      	cmp	r3, #0
 8017568:	d002      	beq.n	8017570 <USBD_Get_USB_Status+0x2e>
 801756a:	2b01      	cmp	r3, #1
 801756c:	d005      	beq.n	801757a <USBD_Get_USB_Status+0x38>
 801756e:	e013      	b.n	8017598 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017570:	230f      	movs	r3, #15
 8017572:	18fb      	adds	r3, r7, r3
 8017574:	2200      	movs	r2, #0
 8017576:	701a      	strb	r2, [r3, #0]
    break;
 8017578:	e013      	b.n	80175a2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801757a:	230f      	movs	r3, #15
 801757c:	18fb      	adds	r3, r7, r3
 801757e:	2202      	movs	r2, #2
 8017580:	701a      	strb	r2, [r3, #0]
    break;
 8017582:	e00e      	b.n	80175a2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017584:	230f      	movs	r3, #15
 8017586:	18fb      	adds	r3, r7, r3
 8017588:	2201      	movs	r2, #1
 801758a:	701a      	strb	r2, [r3, #0]
    break;
 801758c:	e009      	b.n	80175a2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801758e:	230f      	movs	r3, #15
 8017590:	18fb      	adds	r3, r7, r3
 8017592:	2202      	movs	r2, #2
 8017594:	701a      	strb	r2, [r3, #0]
    break;
 8017596:	e004      	b.n	80175a2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8017598:	230f      	movs	r3, #15
 801759a:	18fb      	adds	r3, r7, r3
 801759c:	2202      	movs	r2, #2
 801759e:	701a      	strb	r2, [r3, #0]
    break;
 80175a0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80175a2:	230f      	movs	r3, #15
 80175a4:	18fb      	adds	r3, r7, r3
 80175a6:	781b      	ldrb	r3, [r3, #0]
}
 80175a8:	0018      	movs	r0, r3
 80175aa:	46bd      	mov	sp, r7
 80175ac:	b004      	add	sp, #16
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <__cvt>:
 80175b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175b2:	001f      	movs	r7, r3
 80175b4:	2300      	movs	r3, #0
 80175b6:	0016      	movs	r6, r2
 80175b8:	b08b      	sub	sp, #44	@ 0x2c
 80175ba:	429f      	cmp	r7, r3
 80175bc:	da04      	bge.n	80175c8 <__cvt+0x18>
 80175be:	2180      	movs	r1, #128	@ 0x80
 80175c0:	0609      	lsls	r1, r1, #24
 80175c2:	187b      	adds	r3, r7, r1
 80175c4:	001f      	movs	r7, r3
 80175c6:	232d      	movs	r3, #45	@ 0x2d
 80175c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80175ca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80175cc:	7013      	strb	r3, [r2, #0]
 80175ce:	2320      	movs	r3, #32
 80175d0:	2203      	movs	r2, #3
 80175d2:	439d      	bics	r5, r3
 80175d4:	2d46      	cmp	r5, #70	@ 0x46
 80175d6:	d007      	beq.n	80175e8 <__cvt+0x38>
 80175d8:	002b      	movs	r3, r5
 80175da:	3b45      	subs	r3, #69	@ 0x45
 80175dc:	4259      	negs	r1, r3
 80175de:	414b      	adcs	r3, r1
 80175e0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80175e2:	3a01      	subs	r2, #1
 80175e4:	18cb      	adds	r3, r1, r3
 80175e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80175e8:	ab09      	add	r3, sp, #36	@ 0x24
 80175ea:	9304      	str	r3, [sp, #16]
 80175ec:	ab08      	add	r3, sp, #32
 80175ee:	9303      	str	r3, [sp, #12]
 80175f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175f2:	9200      	str	r2, [sp, #0]
 80175f4:	9302      	str	r3, [sp, #8]
 80175f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80175f8:	0032      	movs	r2, r6
 80175fa:	9301      	str	r3, [sp, #4]
 80175fc:	003b      	movs	r3, r7
 80175fe:	f000 ff13 	bl	8018428 <_dtoa_r>
 8017602:	0004      	movs	r4, r0
 8017604:	2d47      	cmp	r5, #71	@ 0x47
 8017606:	d11b      	bne.n	8017640 <__cvt+0x90>
 8017608:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801760a:	07db      	lsls	r3, r3, #31
 801760c:	d511      	bpl.n	8017632 <__cvt+0x82>
 801760e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017610:	18c3      	adds	r3, r0, r3
 8017612:	9307      	str	r3, [sp, #28]
 8017614:	2200      	movs	r2, #0
 8017616:	2300      	movs	r3, #0
 8017618:	0030      	movs	r0, r6
 801761a:	0039      	movs	r1, r7
 801761c:	f7e8 ff16 	bl	800044c <__aeabi_dcmpeq>
 8017620:	2800      	cmp	r0, #0
 8017622:	d001      	beq.n	8017628 <__cvt+0x78>
 8017624:	9b07      	ldr	r3, [sp, #28]
 8017626:	9309      	str	r3, [sp, #36]	@ 0x24
 8017628:	2230      	movs	r2, #48	@ 0x30
 801762a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801762c:	9907      	ldr	r1, [sp, #28]
 801762e:	428b      	cmp	r3, r1
 8017630:	d320      	bcc.n	8017674 <__cvt+0xc4>
 8017632:	0020      	movs	r0, r4
 8017634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017636:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017638:	1b1b      	subs	r3, r3, r4
 801763a:	6013      	str	r3, [r2, #0]
 801763c:	b00b      	add	sp, #44	@ 0x2c
 801763e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017640:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017642:	18c3      	adds	r3, r0, r3
 8017644:	9307      	str	r3, [sp, #28]
 8017646:	2d46      	cmp	r5, #70	@ 0x46
 8017648:	d1e4      	bne.n	8017614 <__cvt+0x64>
 801764a:	7803      	ldrb	r3, [r0, #0]
 801764c:	2b30      	cmp	r3, #48	@ 0x30
 801764e:	d10c      	bne.n	801766a <__cvt+0xba>
 8017650:	2200      	movs	r2, #0
 8017652:	2300      	movs	r3, #0
 8017654:	0030      	movs	r0, r6
 8017656:	0039      	movs	r1, r7
 8017658:	f7e8 fef8 	bl	800044c <__aeabi_dcmpeq>
 801765c:	2800      	cmp	r0, #0
 801765e:	d104      	bne.n	801766a <__cvt+0xba>
 8017660:	2301      	movs	r3, #1
 8017662:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017664:	1a9b      	subs	r3, r3, r2
 8017666:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017668:	6013      	str	r3, [r2, #0]
 801766a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801766c:	9a07      	ldr	r2, [sp, #28]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	18d3      	adds	r3, r2, r3
 8017672:	e7ce      	b.n	8017612 <__cvt+0x62>
 8017674:	1c59      	adds	r1, r3, #1
 8017676:	9109      	str	r1, [sp, #36]	@ 0x24
 8017678:	701a      	strb	r2, [r3, #0]
 801767a:	e7d6      	b.n	801762a <__cvt+0x7a>

0801767c <__exponent>:
 801767c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801767e:	232b      	movs	r3, #43	@ 0x2b
 8017680:	0005      	movs	r5, r0
 8017682:	000c      	movs	r4, r1
 8017684:	b085      	sub	sp, #20
 8017686:	7002      	strb	r2, [r0, #0]
 8017688:	2900      	cmp	r1, #0
 801768a:	da01      	bge.n	8017690 <__exponent+0x14>
 801768c:	424c      	negs	r4, r1
 801768e:	3302      	adds	r3, #2
 8017690:	706b      	strb	r3, [r5, #1]
 8017692:	2c09      	cmp	r4, #9
 8017694:	dd2c      	ble.n	80176f0 <__exponent+0x74>
 8017696:	ab02      	add	r3, sp, #8
 8017698:	1dde      	adds	r6, r3, #7
 801769a:	0020      	movs	r0, r4
 801769c:	210a      	movs	r1, #10
 801769e:	f7e8 febf 	bl	8000420 <__aeabi_idivmod>
 80176a2:	0037      	movs	r7, r6
 80176a4:	3130      	adds	r1, #48	@ 0x30
 80176a6:	3e01      	subs	r6, #1
 80176a8:	0020      	movs	r0, r4
 80176aa:	7031      	strb	r1, [r6, #0]
 80176ac:	210a      	movs	r1, #10
 80176ae:	9401      	str	r4, [sp, #4]
 80176b0:	f7e8 fdd0 	bl	8000254 <__divsi3>
 80176b4:	9b01      	ldr	r3, [sp, #4]
 80176b6:	0004      	movs	r4, r0
 80176b8:	2b63      	cmp	r3, #99	@ 0x63
 80176ba:	dcee      	bgt.n	801769a <__exponent+0x1e>
 80176bc:	1eba      	subs	r2, r7, #2
 80176be:	1ca8      	adds	r0, r5, #2
 80176c0:	0001      	movs	r1, r0
 80176c2:	0013      	movs	r3, r2
 80176c4:	3430      	adds	r4, #48	@ 0x30
 80176c6:	7014      	strb	r4, [r2, #0]
 80176c8:	ac02      	add	r4, sp, #8
 80176ca:	3407      	adds	r4, #7
 80176cc:	429c      	cmp	r4, r3
 80176ce:	d80a      	bhi.n	80176e6 <__exponent+0x6a>
 80176d0:	2300      	movs	r3, #0
 80176d2:	42a2      	cmp	r2, r4
 80176d4:	d803      	bhi.n	80176de <__exponent+0x62>
 80176d6:	3309      	adds	r3, #9
 80176d8:	aa02      	add	r2, sp, #8
 80176da:	189b      	adds	r3, r3, r2
 80176dc:	1bdb      	subs	r3, r3, r7
 80176de:	18c0      	adds	r0, r0, r3
 80176e0:	1b40      	subs	r0, r0, r5
 80176e2:	b005      	add	sp, #20
 80176e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176e6:	781c      	ldrb	r4, [r3, #0]
 80176e8:	3301      	adds	r3, #1
 80176ea:	700c      	strb	r4, [r1, #0]
 80176ec:	3101      	adds	r1, #1
 80176ee:	e7eb      	b.n	80176c8 <__exponent+0x4c>
 80176f0:	2330      	movs	r3, #48	@ 0x30
 80176f2:	18e4      	adds	r4, r4, r3
 80176f4:	70ab      	strb	r3, [r5, #2]
 80176f6:	1d28      	adds	r0, r5, #4
 80176f8:	70ec      	strb	r4, [r5, #3]
 80176fa:	e7f1      	b.n	80176e0 <__exponent+0x64>

080176fc <_printf_float>:
 80176fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176fe:	b097      	sub	sp, #92	@ 0x5c
 8017700:	000d      	movs	r5, r1
 8017702:	920a      	str	r2, [sp, #40]	@ 0x28
 8017704:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017708:	9009      	str	r0, [sp, #36]	@ 0x24
 801770a:	f000 fd6b 	bl	80181e4 <_localeconv_r>
 801770e:	6803      	ldr	r3, [r0, #0]
 8017710:	0018      	movs	r0, r3
 8017712:	930d      	str	r3, [sp, #52]	@ 0x34
 8017714:	f7e8 fcf8 	bl	8000108 <strlen>
 8017718:	2300      	movs	r3, #0
 801771a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801771c:	9314      	str	r3, [sp, #80]	@ 0x50
 801771e:	7e2b      	ldrb	r3, [r5, #24]
 8017720:	2207      	movs	r2, #7
 8017722:	930c      	str	r3, [sp, #48]	@ 0x30
 8017724:	682b      	ldr	r3, [r5, #0]
 8017726:	930e      	str	r3, [sp, #56]	@ 0x38
 8017728:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801772a:	6823      	ldr	r3, [r4, #0]
 801772c:	05c9      	lsls	r1, r1, #23
 801772e:	d545      	bpl.n	80177bc <_printf_float+0xc0>
 8017730:	189b      	adds	r3, r3, r2
 8017732:	4393      	bics	r3, r2
 8017734:	001a      	movs	r2, r3
 8017736:	3208      	adds	r2, #8
 8017738:	6022      	str	r2, [r4, #0]
 801773a:	2201      	movs	r2, #1
 801773c:	681e      	ldr	r6, [r3, #0]
 801773e:	685f      	ldr	r7, [r3, #4]
 8017740:	007b      	lsls	r3, r7, #1
 8017742:	085b      	lsrs	r3, r3, #1
 8017744:	9311      	str	r3, [sp, #68]	@ 0x44
 8017746:	9610      	str	r6, [sp, #64]	@ 0x40
 8017748:	64ae      	str	r6, [r5, #72]	@ 0x48
 801774a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801774c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801774e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017750:	4ba7      	ldr	r3, [pc, #668]	@ (80179f0 <_printf_float+0x2f4>)
 8017752:	4252      	negs	r2, r2
 8017754:	f7eb fd54 	bl	8003200 <__aeabi_dcmpun>
 8017758:	2800      	cmp	r0, #0
 801775a:	d131      	bne.n	80177c0 <_printf_float+0xc4>
 801775c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801775e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017760:	2201      	movs	r2, #1
 8017762:	4ba3      	ldr	r3, [pc, #652]	@ (80179f0 <_printf_float+0x2f4>)
 8017764:	4252      	negs	r2, r2
 8017766:	f7e8 fe81 	bl	800046c <__aeabi_dcmple>
 801776a:	2800      	cmp	r0, #0
 801776c:	d128      	bne.n	80177c0 <_printf_float+0xc4>
 801776e:	2200      	movs	r2, #0
 8017770:	2300      	movs	r3, #0
 8017772:	0030      	movs	r0, r6
 8017774:	0039      	movs	r1, r7
 8017776:	f7e8 fe6f 	bl	8000458 <__aeabi_dcmplt>
 801777a:	2800      	cmp	r0, #0
 801777c:	d003      	beq.n	8017786 <_printf_float+0x8a>
 801777e:	002b      	movs	r3, r5
 8017780:	222d      	movs	r2, #45	@ 0x2d
 8017782:	3343      	adds	r3, #67	@ 0x43
 8017784:	701a      	strb	r2, [r3, #0]
 8017786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017788:	4f9a      	ldr	r7, [pc, #616]	@ (80179f4 <_printf_float+0x2f8>)
 801778a:	2b47      	cmp	r3, #71	@ 0x47
 801778c:	d900      	bls.n	8017790 <_printf_float+0x94>
 801778e:	4f9a      	ldr	r7, [pc, #616]	@ (80179f8 <_printf_float+0x2fc>)
 8017790:	2303      	movs	r3, #3
 8017792:	2400      	movs	r4, #0
 8017794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017796:	612b      	str	r3, [r5, #16]
 8017798:	3301      	adds	r3, #1
 801779a:	439a      	bics	r2, r3
 801779c:	602a      	str	r2, [r5, #0]
 801779e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80177a0:	0029      	movs	r1, r5
 80177a2:	9300      	str	r3, [sp, #0]
 80177a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177a8:	aa15      	add	r2, sp, #84	@ 0x54
 80177aa:	f000 f9e5 	bl	8017b78 <_printf_common>
 80177ae:	3001      	adds	r0, #1
 80177b0:	d000      	beq.n	80177b4 <_printf_float+0xb8>
 80177b2:	e09f      	b.n	80178f4 <_printf_float+0x1f8>
 80177b4:	2001      	movs	r0, #1
 80177b6:	4240      	negs	r0, r0
 80177b8:	b017      	add	sp, #92	@ 0x5c
 80177ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177bc:	3307      	adds	r3, #7
 80177be:	e7b8      	b.n	8017732 <_printf_float+0x36>
 80177c0:	0032      	movs	r2, r6
 80177c2:	003b      	movs	r3, r7
 80177c4:	0030      	movs	r0, r6
 80177c6:	0039      	movs	r1, r7
 80177c8:	f7eb fd1a 	bl	8003200 <__aeabi_dcmpun>
 80177cc:	2800      	cmp	r0, #0
 80177ce:	d00b      	beq.n	80177e8 <_printf_float+0xec>
 80177d0:	2f00      	cmp	r7, #0
 80177d2:	da03      	bge.n	80177dc <_printf_float+0xe0>
 80177d4:	002b      	movs	r3, r5
 80177d6:	222d      	movs	r2, #45	@ 0x2d
 80177d8:	3343      	adds	r3, #67	@ 0x43
 80177da:	701a      	strb	r2, [r3, #0]
 80177dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177de:	4f87      	ldr	r7, [pc, #540]	@ (80179fc <_printf_float+0x300>)
 80177e0:	2b47      	cmp	r3, #71	@ 0x47
 80177e2:	d9d5      	bls.n	8017790 <_printf_float+0x94>
 80177e4:	4f86      	ldr	r7, [pc, #536]	@ (8017a00 <_printf_float+0x304>)
 80177e6:	e7d3      	b.n	8017790 <_printf_float+0x94>
 80177e8:	2220      	movs	r2, #32
 80177ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80177ec:	686b      	ldr	r3, [r5, #4]
 80177ee:	4394      	bics	r4, r2
 80177f0:	1c5a      	adds	r2, r3, #1
 80177f2:	d146      	bne.n	8017882 <_printf_float+0x186>
 80177f4:	3307      	adds	r3, #7
 80177f6:	606b      	str	r3, [r5, #4]
 80177f8:	2380      	movs	r3, #128	@ 0x80
 80177fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80177fc:	00db      	lsls	r3, r3, #3
 80177fe:	4313      	orrs	r3, r2
 8017800:	2200      	movs	r2, #0
 8017802:	602b      	str	r3, [r5, #0]
 8017804:	9206      	str	r2, [sp, #24]
 8017806:	aa14      	add	r2, sp, #80	@ 0x50
 8017808:	9205      	str	r2, [sp, #20]
 801780a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801780c:	a90a      	add	r1, sp, #40	@ 0x28
 801780e:	9204      	str	r2, [sp, #16]
 8017810:	aa13      	add	r2, sp, #76	@ 0x4c
 8017812:	9203      	str	r2, [sp, #12]
 8017814:	2223      	movs	r2, #35	@ 0x23
 8017816:	1852      	adds	r2, r2, r1
 8017818:	9202      	str	r2, [sp, #8]
 801781a:	9301      	str	r3, [sp, #4]
 801781c:	686b      	ldr	r3, [r5, #4]
 801781e:	0032      	movs	r2, r6
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017824:	003b      	movs	r3, r7
 8017826:	f7ff fec3 	bl	80175b0 <__cvt>
 801782a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801782c:	0007      	movs	r7, r0
 801782e:	2c47      	cmp	r4, #71	@ 0x47
 8017830:	d12d      	bne.n	801788e <_printf_float+0x192>
 8017832:	1cd3      	adds	r3, r2, #3
 8017834:	db02      	blt.n	801783c <_printf_float+0x140>
 8017836:	686b      	ldr	r3, [r5, #4]
 8017838:	429a      	cmp	r2, r3
 801783a:	dd48      	ble.n	80178ce <_printf_float+0x1d2>
 801783c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801783e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017840:	3b02      	subs	r3, #2
 8017842:	b2db      	uxtb	r3, r3
 8017844:	930c      	str	r3, [sp, #48]	@ 0x30
 8017846:	0028      	movs	r0, r5
 8017848:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801784a:	3901      	subs	r1, #1
 801784c:	3050      	adds	r0, #80	@ 0x50
 801784e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017850:	f7ff ff14 	bl	801767c <__exponent>
 8017854:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017856:	0004      	movs	r4, r0
 8017858:	1813      	adds	r3, r2, r0
 801785a:	612b      	str	r3, [r5, #16]
 801785c:	2a01      	cmp	r2, #1
 801785e:	dc02      	bgt.n	8017866 <_printf_float+0x16a>
 8017860:	682a      	ldr	r2, [r5, #0]
 8017862:	07d2      	lsls	r2, r2, #31
 8017864:	d501      	bpl.n	801786a <_printf_float+0x16e>
 8017866:	3301      	adds	r3, #1
 8017868:	612b      	str	r3, [r5, #16]
 801786a:	2323      	movs	r3, #35	@ 0x23
 801786c:	aa0a      	add	r2, sp, #40	@ 0x28
 801786e:	189b      	adds	r3, r3, r2
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d100      	bne.n	8017878 <_printf_float+0x17c>
 8017876:	e792      	b.n	801779e <_printf_float+0xa2>
 8017878:	002b      	movs	r3, r5
 801787a:	222d      	movs	r2, #45	@ 0x2d
 801787c:	3343      	adds	r3, #67	@ 0x43
 801787e:	701a      	strb	r2, [r3, #0]
 8017880:	e78d      	b.n	801779e <_printf_float+0xa2>
 8017882:	2c47      	cmp	r4, #71	@ 0x47
 8017884:	d1b8      	bne.n	80177f8 <_printf_float+0xfc>
 8017886:	2b00      	cmp	r3, #0
 8017888:	d1b6      	bne.n	80177f8 <_printf_float+0xfc>
 801788a:	3301      	adds	r3, #1
 801788c:	e7b3      	b.n	80177f6 <_printf_float+0xfa>
 801788e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017890:	0011      	movs	r1, r2
 8017892:	2b65      	cmp	r3, #101	@ 0x65
 8017894:	d9d7      	bls.n	8017846 <_printf_float+0x14a>
 8017896:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017898:	2b66      	cmp	r3, #102	@ 0x66
 801789a:	d11a      	bne.n	80178d2 <_printf_float+0x1d6>
 801789c:	686b      	ldr	r3, [r5, #4]
 801789e:	2a00      	cmp	r2, #0
 80178a0:	dd09      	ble.n	80178b6 <_printf_float+0x1ba>
 80178a2:	612a      	str	r2, [r5, #16]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d102      	bne.n	80178ae <_printf_float+0x1b2>
 80178a8:	6829      	ldr	r1, [r5, #0]
 80178aa:	07c9      	lsls	r1, r1, #31
 80178ac:	d50b      	bpl.n	80178c6 <_printf_float+0x1ca>
 80178ae:	3301      	adds	r3, #1
 80178b0:	189b      	adds	r3, r3, r2
 80178b2:	612b      	str	r3, [r5, #16]
 80178b4:	e007      	b.n	80178c6 <_printf_float+0x1ca>
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d103      	bne.n	80178c2 <_printf_float+0x1c6>
 80178ba:	2201      	movs	r2, #1
 80178bc:	6829      	ldr	r1, [r5, #0]
 80178be:	4211      	tst	r1, r2
 80178c0:	d000      	beq.n	80178c4 <_printf_float+0x1c8>
 80178c2:	1c9a      	adds	r2, r3, #2
 80178c4:	612a      	str	r2, [r5, #16]
 80178c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80178c8:	2400      	movs	r4, #0
 80178ca:	65ab      	str	r3, [r5, #88]	@ 0x58
 80178cc:	e7cd      	b.n	801786a <_printf_float+0x16e>
 80178ce:	2367      	movs	r3, #103	@ 0x67
 80178d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80178d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80178d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80178d6:	4299      	cmp	r1, r3
 80178d8:	db06      	blt.n	80178e8 <_printf_float+0x1ec>
 80178da:	682b      	ldr	r3, [r5, #0]
 80178dc:	6129      	str	r1, [r5, #16]
 80178de:	07db      	lsls	r3, r3, #31
 80178e0:	d5f1      	bpl.n	80178c6 <_printf_float+0x1ca>
 80178e2:	3101      	adds	r1, #1
 80178e4:	6129      	str	r1, [r5, #16]
 80178e6:	e7ee      	b.n	80178c6 <_printf_float+0x1ca>
 80178e8:	2201      	movs	r2, #1
 80178ea:	2900      	cmp	r1, #0
 80178ec:	dce0      	bgt.n	80178b0 <_printf_float+0x1b4>
 80178ee:	1892      	adds	r2, r2, r2
 80178f0:	1a52      	subs	r2, r2, r1
 80178f2:	e7dd      	b.n	80178b0 <_printf_float+0x1b4>
 80178f4:	682a      	ldr	r2, [r5, #0]
 80178f6:	0553      	lsls	r3, r2, #21
 80178f8:	d408      	bmi.n	801790c <_printf_float+0x210>
 80178fa:	692b      	ldr	r3, [r5, #16]
 80178fc:	003a      	movs	r2, r7
 80178fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017900:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017902:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017904:	47a0      	blx	r4
 8017906:	3001      	adds	r0, #1
 8017908:	d129      	bne.n	801795e <_printf_float+0x262>
 801790a:	e753      	b.n	80177b4 <_printf_float+0xb8>
 801790c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801790e:	2b65      	cmp	r3, #101	@ 0x65
 8017910:	d800      	bhi.n	8017914 <_printf_float+0x218>
 8017912:	e0da      	b.n	8017aca <_printf_float+0x3ce>
 8017914:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017916:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017918:	2200      	movs	r2, #0
 801791a:	2300      	movs	r3, #0
 801791c:	f7e8 fd96 	bl	800044c <__aeabi_dcmpeq>
 8017920:	2800      	cmp	r0, #0
 8017922:	d033      	beq.n	801798c <_printf_float+0x290>
 8017924:	2301      	movs	r3, #1
 8017926:	4a37      	ldr	r2, [pc, #220]	@ (8017a04 <_printf_float+0x308>)
 8017928:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801792a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801792c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801792e:	47a0      	blx	r4
 8017930:	3001      	adds	r0, #1
 8017932:	d100      	bne.n	8017936 <_printf_float+0x23a>
 8017934:	e73e      	b.n	80177b4 <_printf_float+0xb8>
 8017936:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017938:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801793a:	42b3      	cmp	r3, r6
 801793c:	db02      	blt.n	8017944 <_printf_float+0x248>
 801793e:	682b      	ldr	r3, [r5, #0]
 8017940:	07db      	lsls	r3, r3, #31
 8017942:	d50c      	bpl.n	801795e <_printf_float+0x262>
 8017944:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017948:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801794a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801794c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801794e:	47a0      	blx	r4
 8017950:	2400      	movs	r4, #0
 8017952:	3001      	adds	r0, #1
 8017954:	d100      	bne.n	8017958 <_printf_float+0x25c>
 8017956:	e72d      	b.n	80177b4 <_printf_float+0xb8>
 8017958:	1e73      	subs	r3, r6, #1
 801795a:	42a3      	cmp	r3, r4
 801795c:	dc0a      	bgt.n	8017974 <_printf_float+0x278>
 801795e:	682b      	ldr	r3, [r5, #0]
 8017960:	079b      	lsls	r3, r3, #30
 8017962:	d500      	bpl.n	8017966 <_printf_float+0x26a>
 8017964:	e105      	b.n	8017b72 <_printf_float+0x476>
 8017966:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017968:	68e8      	ldr	r0, [r5, #12]
 801796a:	4298      	cmp	r0, r3
 801796c:	db00      	blt.n	8017970 <_printf_float+0x274>
 801796e:	e723      	b.n	80177b8 <_printf_float+0xbc>
 8017970:	0018      	movs	r0, r3
 8017972:	e721      	b.n	80177b8 <_printf_float+0xbc>
 8017974:	002a      	movs	r2, r5
 8017976:	2301      	movs	r3, #1
 8017978:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801797a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801797c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801797e:	321a      	adds	r2, #26
 8017980:	47b8      	blx	r7
 8017982:	3001      	adds	r0, #1
 8017984:	d100      	bne.n	8017988 <_printf_float+0x28c>
 8017986:	e715      	b.n	80177b4 <_printf_float+0xb8>
 8017988:	3401      	adds	r4, #1
 801798a:	e7e5      	b.n	8017958 <_printf_float+0x25c>
 801798c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801798e:	2b00      	cmp	r3, #0
 8017990:	dc3a      	bgt.n	8017a08 <_printf_float+0x30c>
 8017992:	2301      	movs	r3, #1
 8017994:	4a1b      	ldr	r2, [pc, #108]	@ (8017a04 <_printf_float+0x308>)
 8017996:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017998:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801799a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801799c:	47a0      	blx	r4
 801799e:	3001      	adds	r0, #1
 80179a0:	d100      	bne.n	80179a4 <_printf_float+0x2a8>
 80179a2:	e707      	b.n	80177b4 <_printf_float+0xb8>
 80179a4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80179a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80179a8:	4333      	orrs	r3, r6
 80179aa:	d102      	bne.n	80179b2 <_printf_float+0x2b6>
 80179ac:	682b      	ldr	r3, [r5, #0]
 80179ae:	07db      	lsls	r3, r3, #31
 80179b0:	d5d5      	bpl.n	801795e <_printf_float+0x262>
 80179b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80179b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80179b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80179b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80179bc:	47a0      	blx	r4
 80179be:	2300      	movs	r3, #0
 80179c0:	3001      	adds	r0, #1
 80179c2:	d100      	bne.n	80179c6 <_printf_float+0x2ca>
 80179c4:	e6f6      	b.n	80177b4 <_printf_float+0xb8>
 80179c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80179c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80179ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80179cc:	425b      	negs	r3, r3
 80179ce:	4293      	cmp	r3, r2
 80179d0:	dc01      	bgt.n	80179d6 <_printf_float+0x2da>
 80179d2:	0033      	movs	r3, r6
 80179d4:	e792      	b.n	80178fc <_printf_float+0x200>
 80179d6:	002a      	movs	r2, r5
 80179d8:	2301      	movs	r3, #1
 80179da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80179dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80179e0:	321a      	adds	r2, #26
 80179e2:	47a0      	blx	r4
 80179e4:	3001      	adds	r0, #1
 80179e6:	d100      	bne.n	80179ea <_printf_float+0x2ee>
 80179e8:	e6e4      	b.n	80177b4 <_printf_float+0xb8>
 80179ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80179ec:	3301      	adds	r3, #1
 80179ee:	e7ea      	b.n	80179c6 <_printf_float+0x2ca>
 80179f0:	7fefffff 	.word	0x7fefffff
 80179f4:	0801bdec 	.word	0x0801bdec
 80179f8:	0801bdf0 	.word	0x0801bdf0
 80179fc:	0801bdf4 	.word	0x0801bdf4
 8017a00:	0801bdf8 	.word	0x0801bdf8
 8017a04:	0801bdfc 	.word	0x0801bdfc
 8017a08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017a0a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017a0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8017a0e:	429e      	cmp	r6, r3
 8017a10:	dd00      	ble.n	8017a14 <_printf_float+0x318>
 8017a12:	001e      	movs	r6, r3
 8017a14:	2e00      	cmp	r6, #0
 8017a16:	dc31      	bgt.n	8017a7c <_printf_float+0x380>
 8017a18:	43f3      	mvns	r3, r6
 8017a1a:	2400      	movs	r4, #0
 8017a1c:	17db      	asrs	r3, r3, #31
 8017a1e:	4033      	ands	r3, r6
 8017a20:	930e      	str	r3, [sp, #56]	@ 0x38
 8017a22:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017a24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a26:	1af3      	subs	r3, r6, r3
 8017a28:	42a3      	cmp	r3, r4
 8017a2a:	dc30      	bgt.n	8017a8e <_printf_float+0x392>
 8017a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017a30:	429a      	cmp	r2, r3
 8017a32:	dc38      	bgt.n	8017aa6 <_printf_float+0x3aa>
 8017a34:	682b      	ldr	r3, [r5, #0]
 8017a36:	07db      	lsls	r3, r3, #31
 8017a38:	d435      	bmi.n	8017aa6 <_printf_float+0x3aa>
 8017a3a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017a3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017a40:	1b9b      	subs	r3, r3, r6
 8017a42:	1b14      	subs	r4, r2, r4
 8017a44:	429c      	cmp	r4, r3
 8017a46:	dd00      	ble.n	8017a4a <_printf_float+0x34e>
 8017a48:	001c      	movs	r4, r3
 8017a4a:	2c00      	cmp	r4, #0
 8017a4c:	dc34      	bgt.n	8017ab8 <_printf_float+0x3bc>
 8017a4e:	43e3      	mvns	r3, r4
 8017a50:	2600      	movs	r6, #0
 8017a52:	17db      	asrs	r3, r3, #31
 8017a54:	401c      	ands	r4, r3
 8017a56:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017a5a:	1ad3      	subs	r3, r2, r3
 8017a5c:	1b1b      	subs	r3, r3, r4
 8017a5e:	42b3      	cmp	r3, r6
 8017a60:	dc00      	bgt.n	8017a64 <_printf_float+0x368>
 8017a62:	e77c      	b.n	801795e <_printf_float+0x262>
 8017a64:	002a      	movs	r2, r5
 8017a66:	2301      	movs	r3, #1
 8017a68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a6c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017a6e:	321a      	adds	r2, #26
 8017a70:	47b8      	blx	r7
 8017a72:	3001      	adds	r0, #1
 8017a74:	d100      	bne.n	8017a78 <_printf_float+0x37c>
 8017a76:	e69d      	b.n	80177b4 <_printf_float+0xb8>
 8017a78:	3601      	adds	r6, #1
 8017a7a:	e7ec      	b.n	8017a56 <_printf_float+0x35a>
 8017a7c:	0033      	movs	r3, r6
 8017a7e:	003a      	movs	r2, r7
 8017a80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017a86:	47a0      	blx	r4
 8017a88:	3001      	adds	r0, #1
 8017a8a:	d1c5      	bne.n	8017a18 <_printf_float+0x31c>
 8017a8c:	e692      	b.n	80177b4 <_printf_float+0xb8>
 8017a8e:	002a      	movs	r2, r5
 8017a90:	2301      	movs	r3, #1
 8017a92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017a94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a96:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017a98:	321a      	adds	r2, #26
 8017a9a:	47b0      	blx	r6
 8017a9c:	3001      	adds	r0, #1
 8017a9e:	d100      	bne.n	8017aa2 <_printf_float+0x3a6>
 8017aa0:	e688      	b.n	80177b4 <_printf_float+0xb8>
 8017aa2:	3401      	adds	r4, #1
 8017aa4:	e7bd      	b.n	8017a22 <_printf_float+0x326>
 8017aa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017aa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017aaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017aac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017aae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017ab0:	47a0      	blx	r4
 8017ab2:	3001      	adds	r0, #1
 8017ab4:	d1c1      	bne.n	8017a3a <_printf_float+0x33e>
 8017ab6:	e67d      	b.n	80177b4 <_printf_float+0xb8>
 8017ab8:	19ba      	adds	r2, r7, r6
 8017aba:	0023      	movs	r3, r4
 8017abc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ac0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017ac2:	47b0      	blx	r6
 8017ac4:	3001      	adds	r0, #1
 8017ac6:	d1c2      	bne.n	8017a4e <_printf_float+0x352>
 8017ac8:	e674      	b.n	80177b4 <_printf_float+0xb8>
 8017aca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017acc:	930c      	str	r3, [sp, #48]	@ 0x30
 8017ace:	2b01      	cmp	r3, #1
 8017ad0:	dc02      	bgt.n	8017ad8 <_printf_float+0x3dc>
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	421a      	tst	r2, r3
 8017ad6:	d039      	beq.n	8017b4c <_printf_float+0x450>
 8017ad8:	2301      	movs	r3, #1
 8017ada:	003a      	movs	r2, r7
 8017adc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ae0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017ae2:	47b0      	blx	r6
 8017ae4:	3001      	adds	r0, #1
 8017ae6:	d100      	bne.n	8017aea <_printf_float+0x3ee>
 8017ae8:	e664      	b.n	80177b4 <_printf_float+0xb8>
 8017aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017aec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017aee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017af0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017af2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017af4:	47b0      	blx	r6
 8017af6:	3001      	adds	r0, #1
 8017af8:	d100      	bne.n	8017afc <_printf_float+0x400>
 8017afa:	e65b      	b.n	80177b4 <_printf_float+0xb8>
 8017afc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017afe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b02:	2200      	movs	r2, #0
 8017b04:	3b01      	subs	r3, #1
 8017b06:	930c      	str	r3, [sp, #48]	@ 0x30
 8017b08:	2300      	movs	r3, #0
 8017b0a:	f7e8 fc9f 	bl	800044c <__aeabi_dcmpeq>
 8017b0e:	2800      	cmp	r0, #0
 8017b10:	d11a      	bne.n	8017b48 <_printf_float+0x44c>
 8017b12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b14:	1c7a      	adds	r2, r7, #1
 8017b16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017b18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017b1a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017b1c:	47b0      	blx	r6
 8017b1e:	3001      	adds	r0, #1
 8017b20:	d10e      	bne.n	8017b40 <_printf_float+0x444>
 8017b22:	e647      	b.n	80177b4 <_printf_float+0xb8>
 8017b24:	002a      	movs	r2, r5
 8017b26:	2301      	movs	r3, #1
 8017b28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017b2c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017b2e:	321a      	adds	r2, #26
 8017b30:	47b8      	blx	r7
 8017b32:	3001      	adds	r0, #1
 8017b34:	d100      	bne.n	8017b38 <_printf_float+0x43c>
 8017b36:	e63d      	b.n	80177b4 <_printf_float+0xb8>
 8017b38:	3601      	adds	r6, #1
 8017b3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b3c:	429e      	cmp	r6, r3
 8017b3e:	dbf1      	blt.n	8017b24 <_printf_float+0x428>
 8017b40:	002a      	movs	r2, r5
 8017b42:	0023      	movs	r3, r4
 8017b44:	3250      	adds	r2, #80	@ 0x50
 8017b46:	e6da      	b.n	80178fe <_printf_float+0x202>
 8017b48:	2600      	movs	r6, #0
 8017b4a:	e7f6      	b.n	8017b3a <_printf_float+0x43e>
 8017b4c:	003a      	movs	r2, r7
 8017b4e:	e7e2      	b.n	8017b16 <_printf_float+0x41a>
 8017b50:	002a      	movs	r2, r5
 8017b52:	2301      	movs	r3, #1
 8017b54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017b58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017b5a:	3219      	adds	r2, #25
 8017b5c:	47b0      	blx	r6
 8017b5e:	3001      	adds	r0, #1
 8017b60:	d100      	bne.n	8017b64 <_printf_float+0x468>
 8017b62:	e627      	b.n	80177b4 <_printf_float+0xb8>
 8017b64:	3401      	adds	r4, #1
 8017b66:	68eb      	ldr	r3, [r5, #12]
 8017b68:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017b6a:	1a9b      	subs	r3, r3, r2
 8017b6c:	42a3      	cmp	r3, r4
 8017b6e:	dcef      	bgt.n	8017b50 <_printf_float+0x454>
 8017b70:	e6f9      	b.n	8017966 <_printf_float+0x26a>
 8017b72:	2400      	movs	r4, #0
 8017b74:	e7f7      	b.n	8017b66 <_printf_float+0x46a>
 8017b76:	46c0      	nop			@ (mov r8, r8)

08017b78 <_printf_common>:
 8017b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b7a:	0016      	movs	r6, r2
 8017b7c:	9301      	str	r3, [sp, #4]
 8017b7e:	688a      	ldr	r2, [r1, #8]
 8017b80:	690b      	ldr	r3, [r1, #16]
 8017b82:	000c      	movs	r4, r1
 8017b84:	9000      	str	r0, [sp, #0]
 8017b86:	4293      	cmp	r3, r2
 8017b88:	da00      	bge.n	8017b8c <_printf_common+0x14>
 8017b8a:	0013      	movs	r3, r2
 8017b8c:	0022      	movs	r2, r4
 8017b8e:	6033      	str	r3, [r6, #0]
 8017b90:	3243      	adds	r2, #67	@ 0x43
 8017b92:	7812      	ldrb	r2, [r2, #0]
 8017b94:	2a00      	cmp	r2, #0
 8017b96:	d001      	beq.n	8017b9c <_printf_common+0x24>
 8017b98:	3301      	adds	r3, #1
 8017b9a:	6033      	str	r3, [r6, #0]
 8017b9c:	6823      	ldr	r3, [r4, #0]
 8017b9e:	069b      	lsls	r3, r3, #26
 8017ba0:	d502      	bpl.n	8017ba8 <_printf_common+0x30>
 8017ba2:	6833      	ldr	r3, [r6, #0]
 8017ba4:	3302      	adds	r3, #2
 8017ba6:	6033      	str	r3, [r6, #0]
 8017ba8:	6822      	ldr	r2, [r4, #0]
 8017baa:	2306      	movs	r3, #6
 8017bac:	0015      	movs	r5, r2
 8017bae:	401d      	ands	r5, r3
 8017bb0:	421a      	tst	r2, r3
 8017bb2:	d027      	beq.n	8017c04 <_printf_common+0x8c>
 8017bb4:	0023      	movs	r3, r4
 8017bb6:	3343      	adds	r3, #67	@ 0x43
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	1e5a      	subs	r2, r3, #1
 8017bbc:	4193      	sbcs	r3, r2
 8017bbe:	6822      	ldr	r2, [r4, #0]
 8017bc0:	0692      	lsls	r2, r2, #26
 8017bc2:	d430      	bmi.n	8017c26 <_printf_common+0xae>
 8017bc4:	0022      	movs	r2, r4
 8017bc6:	9901      	ldr	r1, [sp, #4]
 8017bc8:	9800      	ldr	r0, [sp, #0]
 8017bca:	9d08      	ldr	r5, [sp, #32]
 8017bcc:	3243      	adds	r2, #67	@ 0x43
 8017bce:	47a8      	blx	r5
 8017bd0:	3001      	adds	r0, #1
 8017bd2:	d025      	beq.n	8017c20 <_printf_common+0xa8>
 8017bd4:	2206      	movs	r2, #6
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	2500      	movs	r5, #0
 8017bda:	4013      	ands	r3, r2
 8017bdc:	2b04      	cmp	r3, #4
 8017bde:	d105      	bne.n	8017bec <_printf_common+0x74>
 8017be0:	6833      	ldr	r3, [r6, #0]
 8017be2:	68e5      	ldr	r5, [r4, #12]
 8017be4:	1aed      	subs	r5, r5, r3
 8017be6:	43eb      	mvns	r3, r5
 8017be8:	17db      	asrs	r3, r3, #31
 8017bea:	401d      	ands	r5, r3
 8017bec:	68a3      	ldr	r3, [r4, #8]
 8017bee:	6922      	ldr	r2, [r4, #16]
 8017bf0:	4293      	cmp	r3, r2
 8017bf2:	dd01      	ble.n	8017bf8 <_printf_common+0x80>
 8017bf4:	1a9b      	subs	r3, r3, r2
 8017bf6:	18ed      	adds	r5, r5, r3
 8017bf8:	2600      	movs	r6, #0
 8017bfa:	42b5      	cmp	r5, r6
 8017bfc:	d120      	bne.n	8017c40 <_printf_common+0xc8>
 8017bfe:	2000      	movs	r0, #0
 8017c00:	e010      	b.n	8017c24 <_printf_common+0xac>
 8017c02:	3501      	adds	r5, #1
 8017c04:	68e3      	ldr	r3, [r4, #12]
 8017c06:	6832      	ldr	r2, [r6, #0]
 8017c08:	1a9b      	subs	r3, r3, r2
 8017c0a:	42ab      	cmp	r3, r5
 8017c0c:	ddd2      	ble.n	8017bb4 <_printf_common+0x3c>
 8017c0e:	0022      	movs	r2, r4
 8017c10:	2301      	movs	r3, #1
 8017c12:	9901      	ldr	r1, [sp, #4]
 8017c14:	9800      	ldr	r0, [sp, #0]
 8017c16:	9f08      	ldr	r7, [sp, #32]
 8017c18:	3219      	adds	r2, #25
 8017c1a:	47b8      	blx	r7
 8017c1c:	3001      	adds	r0, #1
 8017c1e:	d1f0      	bne.n	8017c02 <_printf_common+0x8a>
 8017c20:	2001      	movs	r0, #1
 8017c22:	4240      	negs	r0, r0
 8017c24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017c26:	2030      	movs	r0, #48	@ 0x30
 8017c28:	18e1      	adds	r1, r4, r3
 8017c2a:	3143      	adds	r1, #67	@ 0x43
 8017c2c:	7008      	strb	r0, [r1, #0]
 8017c2e:	0021      	movs	r1, r4
 8017c30:	1c5a      	adds	r2, r3, #1
 8017c32:	3145      	adds	r1, #69	@ 0x45
 8017c34:	7809      	ldrb	r1, [r1, #0]
 8017c36:	18a2      	adds	r2, r4, r2
 8017c38:	3243      	adds	r2, #67	@ 0x43
 8017c3a:	3302      	adds	r3, #2
 8017c3c:	7011      	strb	r1, [r2, #0]
 8017c3e:	e7c1      	b.n	8017bc4 <_printf_common+0x4c>
 8017c40:	0022      	movs	r2, r4
 8017c42:	2301      	movs	r3, #1
 8017c44:	9901      	ldr	r1, [sp, #4]
 8017c46:	9800      	ldr	r0, [sp, #0]
 8017c48:	9f08      	ldr	r7, [sp, #32]
 8017c4a:	321a      	adds	r2, #26
 8017c4c:	47b8      	blx	r7
 8017c4e:	3001      	adds	r0, #1
 8017c50:	d0e6      	beq.n	8017c20 <_printf_common+0xa8>
 8017c52:	3601      	adds	r6, #1
 8017c54:	e7d1      	b.n	8017bfa <_printf_common+0x82>
	...

08017c58 <_printf_i>:
 8017c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c5a:	b08b      	sub	sp, #44	@ 0x2c
 8017c5c:	9206      	str	r2, [sp, #24]
 8017c5e:	000a      	movs	r2, r1
 8017c60:	3243      	adds	r2, #67	@ 0x43
 8017c62:	9307      	str	r3, [sp, #28]
 8017c64:	9005      	str	r0, [sp, #20]
 8017c66:	9203      	str	r2, [sp, #12]
 8017c68:	7e0a      	ldrb	r2, [r1, #24]
 8017c6a:	000c      	movs	r4, r1
 8017c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017c6e:	2a78      	cmp	r2, #120	@ 0x78
 8017c70:	d809      	bhi.n	8017c86 <_printf_i+0x2e>
 8017c72:	2a62      	cmp	r2, #98	@ 0x62
 8017c74:	d80b      	bhi.n	8017c8e <_printf_i+0x36>
 8017c76:	2a00      	cmp	r2, #0
 8017c78:	d100      	bne.n	8017c7c <_printf_i+0x24>
 8017c7a:	e0bc      	b.n	8017df6 <_printf_i+0x19e>
 8017c7c:	497b      	ldr	r1, [pc, #492]	@ (8017e6c <_printf_i+0x214>)
 8017c7e:	9104      	str	r1, [sp, #16]
 8017c80:	2a58      	cmp	r2, #88	@ 0x58
 8017c82:	d100      	bne.n	8017c86 <_printf_i+0x2e>
 8017c84:	e090      	b.n	8017da8 <_printf_i+0x150>
 8017c86:	0025      	movs	r5, r4
 8017c88:	3542      	adds	r5, #66	@ 0x42
 8017c8a:	702a      	strb	r2, [r5, #0]
 8017c8c:	e022      	b.n	8017cd4 <_printf_i+0x7c>
 8017c8e:	0010      	movs	r0, r2
 8017c90:	3863      	subs	r0, #99	@ 0x63
 8017c92:	2815      	cmp	r0, #21
 8017c94:	d8f7      	bhi.n	8017c86 <_printf_i+0x2e>
 8017c96:	f7e8 fa49 	bl	800012c <__gnu_thumb1_case_shi>
 8017c9a:	0016      	.short	0x0016
 8017c9c:	fff6001f 	.word	0xfff6001f
 8017ca0:	fff6fff6 	.word	0xfff6fff6
 8017ca4:	001ffff6 	.word	0x001ffff6
 8017ca8:	fff6fff6 	.word	0xfff6fff6
 8017cac:	fff6fff6 	.word	0xfff6fff6
 8017cb0:	003600a1 	.word	0x003600a1
 8017cb4:	fff60080 	.word	0xfff60080
 8017cb8:	00b2fff6 	.word	0x00b2fff6
 8017cbc:	0036fff6 	.word	0x0036fff6
 8017cc0:	fff6fff6 	.word	0xfff6fff6
 8017cc4:	0084      	.short	0x0084
 8017cc6:	0025      	movs	r5, r4
 8017cc8:	681a      	ldr	r2, [r3, #0]
 8017cca:	3542      	adds	r5, #66	@ 0x42
 8017ccc:	1d11      	adds	r1, r2, #4
 8017cce:	6019      	str	r1, [r3, #0]
 8017cd0:	6813      	ldr	r3, [r2, #0]
 8017cd2:	702b      	strb	r3, [r5, #0]
 8017cd4:	2301      	movs	r3, #1
 8017cd6:	e0a0      	b.n	8017e1a <_printf_i+0x1c2>
 8017cd8:	6818      	ldr	r0, [r3, #0]
 8017cda:	6809      	ldr	r1, [r1, #0]
 8017cdc:	1d02      	adds	r2, r0, #4
 8017cde:	060d      	lsls	r5, r1, #24
 8017ce0:	d50b      	bpl.n	8017cfa <_printf_i+0xa2>
 8017ce2:	6806      	ldr	r6, [r0, #0]
 8017ce4:	601a      	str	r2, [r3, #0]
 8017ce6:	2e00      	cmp	r6, #0
 8017ce8:	da03      	bge.n	8017cf2 <_printf_i+0x9a>
 8017cea:	232d      	movs	r3, #45	@ 0x2d
 8017cec:	9a03      	ldr	r2, [sp, #12]
 8017cee:	4276      	negs	r6, r6
 8017cf0:	7013      	strb	r3, [r2, #0]
 8017cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8017e6c <_printf_i+0x214>)
 8017cf4:	270a      	movs	r7, #10
 8017cf6:	9304      	str	r3, [sp, #16]
 8017cf8:	e018      	b.n	8017d2c <_printf_i+0xd4>
 8017cfa:	6806      	ldr	r6, [r0, #0]
 8017cfc:	601a      	str	r2, [r3, #0]
 8017cfe:	0649      	lsls	r1, r1, #25
 8017d00:	d5f1      	bpl.n	8017ce6 <_printf_i+0x8e>
 8017d02:	b236      	sxth	r6, r6
 8017d04:	e7ef      	b.n	8017ce6 <_printf_i+0x8e>
 8017d06:	6808      	ldr	r0, [r1, #0]
 8017d08:	6819      	ldr	r1, [r3, #0]
 8017d0a:	c940      	ldmia	r1!, {r6}
 8017d0c:	0605      	lsls	r5, r0, #24
 8017d0e:	d402      	bmi.n	8017d16 <_printf_i+0xbe>
 8017d10:	0640      	lsls	r0, r0, #25
 8017d12:	d500      	bpl.n	8017d16 <_printf_i+0xbe>
 8017d14:	b2b6      	uxth	r6, r6
 8017d16:	6019      	str	r1, [r3, #0]
 8017d18:	4b54      	ldr	r3, [pc, #336]	@ (8017e6c <_printf_i+0x214>)
 8017d1a:	270a      	movs	r7, #10
 8017d1c:	9304      	str	r3, [sp, #16]
 8017d1e:	2a6f      	cmp	r2, #111	@ 0x6f
 8017d20:	d100      	bne.n	8017d24 <_printf_i+0xcc>
 8017d22:	3f02      	subs	r7, #2
 8017d24:	0023      	movs	r3, r4
 8017d26:	2200      	movs	r2, #0
 8017d28:	3343      	adds	r3, #67	@ 0x43
 8017d2a:	701a      	strb	r2, [r3, #0]
 8017d2c:	6863      	ldr	r3, [r4, #4]
 8017d2e:	60a3      	str	r3, [r4, #8]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	db03      	blt.n	8017d3c <_printf_i+0xe4>
 8017d34:	2104      	movs	r1, #4
 8017d36:	6822      	ldr	r2, [r4, #0]
 8017d38:	438a      	bics	r2, r1
 8017d3a:	6022      	str	r2, [r4, #0]
 8017d3c:	2e00      	cmp	r6, #0
 8017d3e:	d102      	bne.n	8017d46 <_printf_i+0xee>
 8017d40:	9d03      	ldr	r5, [sp, #12]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d00c      	beq.n	8017d60 <_printf_i+0x108>
 8017d46:	9d03      	ldr	r5, [sp, #12]
 8017d48:	0030      	movs	r0, r6
 8017d4a:	0039      	movs	r1, r7
 8017d4c:	f7e8 fa7e 	bl	800024c <__aeabi_uidivmod>
 8017d50:	9b04      	ldr	r3, [sp, #16]
 8017d52:	3d01      	subs	r5, #1
 8017d54:	5c5b      	ldrb	r3, [r3, r1]
 8017d56:	702b      	strb	r3, [r5, #0]
 8017d58:	0033      	movs	r3, r6
 8017d5a:	0006      	movs	r6, r0
 8017d5c:	429f      	cmp	r7, r3
 8017d5e:	d9f3      	bls.n	8017d48 <_printf_i+0xf0>
 8017d60:	2f08      	cmp	r7, #8
 8017d62:	d109      	bne.n	8017d78 <_printf_i+0x120>
 8017d64:	6823      	ldr	r3, [r4, #0]
 8017d66:	07db      	lsls	r3, r3, #31
 8017d68:	d506      	bpl.n	8017d78 <_printf_i+0x120>
 8017d6a:	6862      	ldr	r2, [r4, #4]
 8017d6c:	6923      	ldr	r3, [r4, #16]
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	dc02      	bgt.n	8017d78 <_printf_i+0x120>
 8017d72:	2330      	movs	r3, #48	@ 0x30
 8017d74:	3d01      	subs	r5, #1
 8017d76:	702b      	strb	r3, [r5, #0]
 8017d78:	9b03      	ldr	r3, [sp, #12]
 8017d7a:	1b5b      	subs	r3, r3, r5
 8017d7c:	6123      	str	r3, [r4, #16]
 8017d7e:	9b07      	ldr	r3, [sp, #28]
 8017d80:	0021      	movs	r1, r4
 8017d82:	9300      	str	r3, [sp, #0]
 8017d84:	9805      	ldr	r0, [sp, #20]
 8017d86:	9b06      	ldr	r3, [sp, #24]
 8017d88:	aa09      	add	r2, sp, #36	@ 0x24
 8017d8a:	f7ff fef5 	bl	8017b78 <_printf_common>
 8017d8e:	3001      	adds	r0, #1
 8017d90:	d148      	bne.n	8017e24 <_printf_i+0x1cc>
 8017d92:	2001      	movs	r0, #1
 8017d94:	4240      	negs	r0, r0
 8017d96:	b00b      	add	sp, #44	@ 0x2c
 8017d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d9a:	2220      	movs	r2, #32
 8017d9c:	6809      	ldr	r1, [r1, #0]
 8017d9e:	430a      	orrs	r2, r1
 8017da0:	6022      	str	r2, [r4, #0]
 8017da2:	2278      	movs	r2, #120	@ 0x78
 8017da4:	4932      	ldr	r1, [pc, #200]	@ (8017e70 <_printf_i+0x218>)
 8017da6:	9104      	str	r1, [sp, #16]
 8017da8:	0021      	movs	r1, r4
 8017daa:	3145      	adds	r1, #69	@ 0x45
 8017dac:	700a      	strb	r2, [r1, #0]
 8017dae:	6819      	ldr	r1, [r3, #0]
 8017db0:	6822      	ldr	r2, [r4, #0]
 8017db2:	c940      	ldmia	r1!, {r6}
 8017db4:	0610      	lsls	r0, r2, #24
 8017db6:	d402      	bmi.n	8017dbe <_printf_i+0x166>
 8017db8:	0650      	lsls	r0, r2, #25
 8017dba:	d500      	bpl.n	8017dbe <_printf_i+0x166>
 8017dbc:	b2b6      	uxth	r6, r6
 8017dbe:	6019      	str	r1, [r3, #0]
 8017dc0:	07d3      	lsls	r3, r2, #31
 8017dc2:	d502      	bpl.n	8017dca <_printf_i+0x172>
 8017dc4:	2320      	movs	r3, #32
 8017dc6:	4313      	orrs	r3, r2
 8017dc8:	6023      	str	r3, [r4, #0]
 8017dca:	2e00      	cmp	r6, #0
 8017dcc:	d001      	beq.n	8017dd2 <_printf_i+0x17a>
 8017dce:	2710      	movs	r7, #16
 8017dd0:	e7a8      	b.n	8017d24 <_printf_i+0xcc>
 8017dd2:	2220      	movs	r2, #32
 8017dd4:	6823      	ldr	r3, [r4, #0]
 8017dd6:	4393      	bics	r3, r2
 8017dd8:	6023      	str	r3, [r4, #0]
 8017dda:	e7f8      	b.n	8017dce <_printf_i+0x176>
 8017ddc:	681a      	ldr	r2, [r3, #0]
 8017dde:	680d      	ldr	r5, [r1, #0]
 8017de0:	1d10      	adds	r0, r2, #4
 8017de2:	6949      	ldr	r1, [r1, #20]
 8017de4:	6018      	str	r0, [r3, #0]
 8017de6:	6813      	ldr	r3, [r2, #0]
 8017de8:	062e      	lsls	r6, r5, #24
 8017dea:	d501      	bpl.n	8017df0 <_printf_i+0x198>
 8017dec:	6019      	str	r1, [r3, #0]
 8017dee:	e002      	b.n	8017df6 <_printf_i+0x19e>
 8017df0:	066d      	lsls	r5, r5, #25
 8017df2:	d5fb      	bpl.n	8017dec <_printf_i+0x194>
 8017df4:	8019      	strh	r1, [r3, #0]
 8017df6:	2300      	movs	r3, #0
 8017df8:	9d03      	ldr	r5, [sp, #12]
 8017dfa:	6123      	str	r3, [r4, #16]
 8017dfc:	e7bf      	b.n	8017d7e <_printf_i+0x126>
 8017dfe:	681a      	ldr	r2, [r3, #0]
 8017e00:	1d11      	adds	r1, r2, #4
 8017e02:	6019      	str	r1, [r3, #0]
 8017e04:	6815      	ldr	r5, [r2, #0]
 8017e06:	2100      	movs	r1, #0
 8017e08:	0028      	movs	r0, r5
 8017e0a:	6862      	ldr	r2, [r4, #4]
 8017e0c:	f000 fa69 	bl	80182e2 <memchr>
 8017e10:	2800      	cmp	r0, #0
 8017e12:	d001      	beq.n	8017e18 <_printf_i+0x1c0>
 8017e14:	1b40      	subs	r0, r0, r5
 8017e16:	6060      	str	r0, [r4, #4]
 8017e18:	6863      	ldr	r3, [r4, #4]
 8017e1a:	6123      	str	r3, [r4, #16]
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	9a03      	ldr	r2, [sp, #12]
 8017e20:	7013      	strb	r3, [r2, #0]
 8017e22:	e7ac      	b.n	8017d7e <_printf_i+0x126>
 8017e24:	002a      	movs	r2, r5
 8017e26:	6923      	ldr	r3, [r4, #16]
 8017e28:	9906      	ldr	r1, [sp, #24]
 8017e2a:	9805      	ldr	r0, [sp, #20]
 8017e2c:	9d07      	ldr	r5, [sp, #28]
 8017e2e:	47a8      	blx	r5
 8017e30:	3001      	adds	r0, #1
 8017e32:	d0ae      	beq.n	8017d92 <_printf_i+0x13a>
 8017e34:	6823      	ldr	r3, [r4, #0]
 8017e36:	079b      	lsls	r3, r3, #30
 8017e38:	d415      	bmi.n	8017e66 <_printf_i+0x20e>
 8017e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e3c:	68e0      	ldr	r0, [r4, #12]
 8017e3e:	4298      	cmp	r0, r3
 8017e40:	daa9      	bge.n	8017d96 <_printf_i+0x13e>
 8017e42:	0018      	movs	r0, r3
 8017e44:	e7a7      	b.n	8017d96 <_printf_i+0x13e>
 8017e46:	0022      	movs	r2, r4
 8017e48:	2301      	movs	r3, #1
 8017e4a:	9906      	ldr	r1, [sp, #24]
 8017e4c:	9805      	ldr	r0, [sp, #20]
 8017e4e:	9e07      	ldr	r6, [sp, #28]
 8017e50:	3219      	adds	r2, #25
 8017e52:	47b0      	blx	r6
 8017e54:	3001      	adds	r0, #1
 8017e56:	d09c      	beq.n	8017d92 <_printf_i+0x13a>
 8017e58:	3501      	adds	r5, #1
 8017e5a:	68e3      	ldr	r3, [r4, #12]
 8017e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e5e:	1a9b      	subs	r3, r3, r2
 8017e60:	42ab      	cmp	r3, r5
 8017e62:	dcf0      	bgt.n	8017e46 <_printf_i+0x1ee>
 8017e64:	e7e9      	b.n	8017e3a <_printf_i+0x1e2>
 8017e66:	2500      	movs	r5, #0
 8017e68:	e7f7      	b.n	8017e5a <_printf_i+0x202>
 8017e6a:	46c0      	nop			@ (mov r8, r8)
 8017e6c:	0801bdfe 	.word	0x0801bdfe
 8017e70:	0801be0f 	.word	0x0801be0f

08017e74 <std>:
 8017e74:	2300      	movs	r3, #0
 8017e76:	b510      	push	{r4, lr}
 8017e78:	0004      	movs	r4, r0
 8017e7a:	6003      	str	r3, [r0, #0]
 8017e7c:	6043      	str	r3, [r0, #4]
 8017e7e:	6083      	str	r3, [r0, #8]
 8017e80:	8181      	strh	r1, [r0, #12]
 8017e82:	6643      	str	r3, [r0, #100]	@ 0x64
 8017e84:	81c2      	strh	r2, [r0, #14]
 8017e86:	6103      	str	r3, [r0, #16]
 8017e88:	6143      	str	r3, [r0, #20]
 8017e8a:	6183      	str	r3, [r0, #24]
 8017e8c:	0019      	movs	r1, r3
 8017e8e:	2208      	movs	r2, #8
 8017e90:	305c      	adds	r0, #92	@ 0x5c
 8017e92:	f000 f967 	bl	8018164 <memset>
 8017e96:	4b0b      	ldr	r3, [pc, #44]	@ (8017ec4 <std+0x50>)
 8017e98:	6224      	str	r4, [r4, #32]
 8017e9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8017e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8017ec8 <std+0x54>)
 8017e9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8017ecc <std+0x58>)
 8017ea2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8017ed0 <std+0x5c>)
 8017ea6:	6323      	str	r3, [r4, #48]	@ 0x30
 8017ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8017ed4 <std+0x60>)
 8017eaa:	429c      	cmp	r4, r3
 8017eac:	d005      	beq.n	8017eba <std+0x46>
 8017eae:	4b0a      	ldr	r3, [pc, #40]	@ (8017ed8 <std+0x64>)
 8017eb0:	429c      	cmp	r4, r3
 8017eb2:	d002      	beq.n	8017eba <std+0x46>
 8017eb4:	4b09      	ldr	r3, [pc, #36]	@ (8017edc <std+0x68>)
 8017eb6:	429c      	cmp	r4, r3
 8017eb8:	d103      	bne.n	8017ec2 <std+0x4e>
 8017eba:	0020      	movs	r0, r4
 8017ebc:	3058      	adds	r0, #88	@ 0x58
 8017ebe:	f000 fa0d 	bl	80182dc <__retarget_lock_init_recursive>
 8017ec2:	bd10      	pop	{r4, pc}
 8017ec4:	0801805d 	.word	0x0801805d
 8017ec8:	08018085 	.word	0x08018085
 8017ecc:	080180bd 	.word	0x080180bd
 8017ed0:	080180e9 	.word	0x080180e9
 8017ed4:	20003ec4 	.word	0x20003ec4
 8017ed8:	20003f2c 	.word	0x20003f2c
 8017edc:	20003f94 	.word	0x20003f94

08017ee0 <stdio_exit_handler>:
 8017ee0:	b510      	push	{r4, lr}
 8017ee2:	4a03      	ldr	r2, [pc, #12]	@ (8017ef0 <stdio_exit_handler+0x10>)
 8017ee4:	4903      	ldr	r1, [pc, #12]	@ (8017ef4 <stdio_exit_handler+0x14>)
 8017ee6:	4804      	ldr	r0, [pc, #16]	@ (8017ef8 <stdio_exit_handler+0x18>)
 8017ee8:	f000 f86c 	bl	8017fc4 <_fwalk_sglue>
 8017eec:	bd10      	pop	{r4, pc}
 8017eee:	46c0      	nop			@ (mov r8, r8)
 8017ef0:	200001e4 	.word	0x200001e4
 8017ef4:	08019fb5 	.word	0x08019fb5
 8017ef8:	200001f4 	.word	0x200001f4

08017efc <cleanup_stdio>:
 8017efc:	6841      	ldr	r1, [r0, #4]
 8017efe:	4b0b      	ldr	r3, [pc, #44]	@ (8017f2c <cleanup_stdio+0x30>)
 8017f00:	b510      	push	{r4, lr}
 8017f02:	0004      	movs	r4, r0
 8017f04:	4299      	cmp	r1, r3
 8017f06:	d001      	beq.n	8017f0c <cleanup_stdio+0x10>
 8017f08:	f002 f854 	bl	8019fb4 <_fflush_r>
 8017f0c:	68a1      	ldr	r1, [r4, #8]
 8017f0e:	4b08      	ldr	r3, [pc, #32]	@ (8017f30 <cleanup_stdio+0x34>)
 8017f10:	4299      	cmp	r1, r3
 8017f12:	d002      	beq.n	8017f1a <cleanup_stdio+0x1e>
 8017f14:	0020      	movs	r0, r4
 8017f16:	f002 f84d 	bl	8019fb4 <_fflush_r>
 8017f1a:	68e1      	ldr	r1, [r4, #12]
 8017f1c:	4b05      	ldr	r3, [pc, #20]	@ (8017f34 <cleanup_stdio+0x38>)
 8017f1e:	4299      	cmp	r1, r3
 8017f20:	d002      	beq.n	8017f28 <cleanup_stdio+0x2c>
 8017f22:	0020      	movs	r0, r4
 8017f24:	f002 f846 	bl	8019fb4 <_fflush_r>
 8017f28:	bd10      	pop	{r4, pc}
 8017f2a:	46c0      	nop			@ (mov r8, r8)
 8017f2c:	20003ec4 	.word	0x20003ec4
 8017f30:	20003f2c 	.word	0x20003f2c
 8017f34:	20003f94 	.word	0x20003f94

08017f38 <global_stdio_init.part.0>:
 8017f38:	b510      	push	{r4, lr}
 8017f3a:	4b09      	ldr	r3, [pc, #36]	@ (8017f60 <global_stdio_init.part.0+0x28>)
 8017f3c:	4a09      	ldr	r2, [pc, #36]	@ (8017f64 <global_stdio_init.part.0+0x2c>)
 8017f3e:	2104      	movs	r1, #4
 8017f40:	601a      	str	r2, [r3, #0]
 8017f42:	4809      	ldr	r0, [pc, #36]	@ (8017f68 <global_stdio_init.part.0+0x30>)
 8017f44:	2200      	movs	r2, #0
 8017f46:	f7ff ff95 	bl	8017e74 <std>
 8017f4a:	2201      	movs	r2, #1
 8017f4c:	2109      	movs	r1, #9
 8017f4e:	4807      	ldr	r0, [pc, #28]	@ (8017f6c <global_stdio_init.part.0+0x34>)
 8017f50:	f7ff ff90 	bl	8017e74 <std>
 8017f54:	2202      	movs	r2, #2
 8017f56:	2112      	movs	r1, #18
 8017f58:	4805      	ldr	r0, [pc, #20]	@ (8017f70 <global_stdio_init.part.0+0x38>)
 8017f5a:	f7ff ff8b 	bl	8017e74 <std>
 8017f5e:	bd10      	pop	{r4, pc}
 8017f60:	20003ffc 	.word	0x20003ffc
 8017f64:	08017ee1 	.word	0x08017ee1
 8017f68:	20003ec4 	.word	0x20003ec4
 8017f6c:	20003f2c 	.word	0x20003f2c
 8017f70:	20003f94 	.word	0x20003f94

08017f74 <__sfp_lock_acquire>:
 8017f74:	b510      	push	{r4, lr}
 8017f76:	4802      	ldr	r0, [pc, #8]	@ (8017f80 <__sfp_lock_acquire+0xc>)
 8017f78:	f000 f9b1 	bl	80182de <__retarget_lock_acquire_recursive>
 8017f7c:	bd10      	pop	{r4, pc}
 8017f7e:	46c0      	nop			@ (mov r8, r8)
 8017f80:	20004005 	.word	0x20004005

08017f84 <__sfp_lock_release>:
 8017f84:	b510      	push	{r4, lr}
 8017f86:	4802      	ldr	r0, [pc, #8]	@ (8017f90 <__sfp_lock_release+0xc>)
 8017f88:	f000 f9aa 	bl	80182e0 <__retarget_lock_release_recursive>
 8017f8c:	bd10      	pop	{r4, pc}
 8017f8e:	46c0      	nop			@ (mov r8, r8)
 8017f90:	20004005 	.word	0x20004005

08017f94 <__sinit>:
 8017f94:	b510      	push	{r4, lr}
 8017f96:	0004      	movs	r4, r0
 8017f98:	f7ff ffec 	bl	8017f74 <__sfp_lock_acquire>
 8017f9c:	6a23      	ldr	r3, [r4, #32]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d002      	beq.n	8017fa8 <__sinit+0x14>
 8017fa2:	f7ff ffef 	bl	8017f84 <__sfp_lock_release>
 8017fa6:	bd10      	pop	{r4, pc}
 8017fa8:	4b04      	ldr	r3, [pc, #16]	@ (8017fbc <__sinit+0x28>)
 8017faa:	6223      	str	r3, [r4, #32]
 8017fac:	4b04      	ldr	r3, [pc, #16]	@ (8017fc0 <__sinit+0x2c>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d1f6      	bne.n	8017fa2 <__sinit+0xe>
 8017fb4:	f7ff ffc0 	bl	8017f38 <global_stdio_init.part.0>
 8017fb8:	e7f3      	b.n	8017fa2 <__sinit+0xe>
 8017fba:	46c0      	nop			@ (mov r8, r8)
 8017fbc:	08017efd 	.word	0x08017efd
 8017fc0:	20003ffc 	.word	0x20003ffc

08017fc4 <_fwalk_sglue>:
 8017fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fc6:	0014      	movs	r4, r2
 8017fc8:	2600      	movs	r6, #0
 8017fca:	9000      	str	r0, [sp, #0]
 8017fcc:	9101      	str	r1, [sp, #4]
 8017fce:	68a5      	ldr	r5, [r4, #8]
 8017fd0:	6867      	ldr	r7, [r4, #4]
 8017fd2:	3f01      	subs	r7, #1
 8017fd4:	d504      	bpl.n	8017fe0 <_fwalk_sglue+0x1c>
 8017fd6:	6824      	ldr	r4, [r4, #0]
 8017fd8:	2c00      	cmp	r4, #0
 8017fda:	d1f8      	bne.n	8017fce <_fwalk_sglue+0xa>
 8017fdc:	0030      	movs	r0, r6
 8017fde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017fe0:	89ab      	ldrh	r3, [r5, #12]
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	d908      	bls.n	8017ff8 <_fwalk_sglue+0x34>
 8017fe6:	220e      	movs	r2, #14
 8017fe8:	5eab      	ldrsh	r3, [r5, r2]
 8017fea:	3301      	adds	r3, #1
 8017fec:	d004      	beq.n	8017ff8 <_fwalk_sglue+0x34>
 8017fee:	0029      	movs	r1, r5
 8017ff0:	9800      	ldr	r0, [sp, #0]
 8017ff2:	9b01      	ldr	r3, [sp, #4]
 8017ff4:	4798      	blx	r3
 8017ff6:	4306      	orrs	r6, r0
 8017ff8:	3568      	adds	r5, #104	@ 0x68
 8017ffa:	e7ea      	b.n	8017fd2 <_fwalk_sglue+0xe>

08017ffc <iprintf>:
 8017ffc:	b40f      	push	{r0, r1, r2, r3}
 8017ffe:	b507      	push	{r0, r1, r2, lr}
 8018000:	4905      	ldr	r1, [pc, #20]	@ (8018018 <iprintf+0x1c>)
 8018002:	ab04      	add	r3, sp, #16
 8018004:	6808      	ldr	r0, [r1, #0]
 8018006:	cb04      	ldmia	r3!, {r2}
 8018008:	6881      	ldr	r1, [r0, #8]
 801800a:	9301      	str	r3, [sp, #4]
 801800c:	f001 fe30 	bl	8019c70 <_vfiprintf_r>
 8018010:	b003      	add	sp, #12
 8018012:	bc08      	pop	{r3}
 8018014:	b004      	add	sp, #16
 8018016:	4718      	bx	r3
 8018018:	200001f0 	.word	0x200001f0

0801801c <siprintf>:
 801801c:	b40e      	push	{r1, r2, r3}
 801801e:	b500      	push	{lr}
 8018020:	490b      	ldr	r1, [pc, #44]	@ (8018050 <siprintf+0x34>)
 8018022:	b09c      	sub	sp, #112	@ 0x70
 8018024:	ab1d      	add	r3, sp, #116	@ 0x74
 8018026:	9002      	str	r0, [sp, #8]
 8018028:	9006      	str	r0, [sp, #24]
 801802a:	9107      	str	r1, [sp, #28]
 801802c:	9104      	str	r1, [sp, #16]
 801802e:	4809      	ldr	r0, [pc, #36]	@ (8018054 <siprintf+0x38>)
 8018030:	4909      	ldr	r1, [pc, #36]	@ (8018058 <siprintf+0x3c>)
 8018032:	cb04      	ldmia	r3!, {r2}
 8018034:	9105      	str	r1, [sp, #20]
 8018036:	6800      	ldr	r0, [r0, #0]
 8018038:	a902      	add	r1, sp, #8
 801803a:	9301      	str	r3, [sp, #4]
 801803c:	f001 fcf2 	bl	8019a24 <_svfiprintf_r>
 8018040:	2200      	movs	r2, #0
 8018042:	9b02      	ldr	r3, [sp, #8]
 8018044:	701a      	strb	r2, [r3, #0]
 8018046:	b01c      	add	sp, #112	@ 0x70
 8018048:	bc08      	pop	{r3}
 801804a:	b003      	add	sp, #12
 801804c:	4718      	bx	r3
 801804e:	46c0      	nop			@ (mov r8, r8)
 8018050:	7fffffff 	.word	0x7fffffff
 8018054:	200001f0 	.word	0x200001f0
 8018058:	ffff0208 	.word	0xffff0208

0801805c <__sread>:
 801805c:	b570      	push	{r4, r5, r6, lr}
 801805e:	000c      	movs	r4, r1
 8018060:	250e      	movs	r5, #14
 8018062:	5f49      	ldrsh	r1, [r1, r5]
 8018064:	f000 f8e8 	bl	8018238 <_read_r>
 8018068:	2800      	cmp	r0, #0
 801806a:	db03      	blt.n	8018074 <__sread+0x18>
 801806c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801806e:	181b      	adds	r3, r3, r0
 8018070:	6563      	str	r3, [r4, #84]	@ 0x54
 8018072:	bd70      	pop	{r4, r5, r6, pc}
 8018074:	89a3      	ldrh	r3, [r4, #12]
 8018076:	4a02      	ldr	r2, [pc, #8]	@ (8018080 <__sread+0x24>)
 8018078:	4013      	ands	r3, r2
 801807a:	81a3      	strh	r3, [r4, #12]
 801807c:	e7f9      	b.n	8018072 <__sread+0x16>
 801807e:	46c0      	nop			@ (mov r8, r8)
 8018080:	ffffefff 	.word	0xffffefff

08018084 <__swrite>:
 8018084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018086:	001f      	movs	r7, r3
 8018088:	898b      	ldrh	r3, [r1, #12]
 801808a:	0005      	movs	r5, r0
 801808c:	000c      	movs	r4, r1
 801808e:	0016      	movs	r6, r2
 8018090:	05db      	lsls	r3, r3, #23
 8018092:	d505      	bpl.n	80180a0 <__swrite+0x1c>
 8018094:	230e      	movs	r3, #14
 8018096:	5ec9      	ldrsh	r1, [r1, r3]
 8018098:	2200      	movs	r2, #0
 801809a:	2302      	movs	r3, #2
 801809c:	f000 f8b8 	bl	8018210 <_lseek_r>
 80180a0:	89a3      	ldrh	r3, [r4, #12]
 80180a2:	4a05      	ldr	r2, [pc, #20]	@ (80180b8 <__swrite+0x34>)
 80180a4:	0028      	movs	r0, r5
 80180a6:	4013      	ands	r3, r2
 80180a8:	81a3      	strh	r3, [r4, #12]
 80180aa:	0032      	movs	r2, r6
 80180ac:	230e      	movs	r3, #14
 80180ae:	5ee1      	ldrsh	r1, [r4, r3]
 80180b0:	003b      	movs	r3, r7
 80180b2:	f000 f8d5 	bl	8018260 <_write_r>
 80180b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180b8:	ffffefff 	.word	0xffffefff

080180bc <__sseek>:
 80180bc:	b570      	push	{r4, r5, r6, lr}
 80180be:	000c      	movs	r4, r1
 80180c0:	250e      	movs	r5, #14
 80180c2:	5f49      	ldrsh	r1, [r1, r5]
 80180c4:	f000 f8a4 	bl	8018210 <_lseek_r>
 80180c8:	89a3      	ldrh	r3, [r4, #12]
 80180ca:	1c42      	adds	r2, r0, #1
 80180cc:	d103      	bne.n	80180d6 <__sseek+0x1a>
 80180ce:	4a05      	ldr	r2, [pc, #20]	@ (80180e4 <__sseek+0x28>)
 80180d0:	4013      	ands	r3, r2
 80180d2:	81a3      	strh	r3, [r4, #12]
 80180d4:	bd70      	pop	{r4, r5, r6, pc}
 80180d6:	2280      	movs	r2, #128	@ 0x80
 80180d8:	0152      	lsls	r2, r2, #5
 80180da:	4313      	orrs	r3, r2
 80180dc:	81a3      	strh	r3, [r4, #12]
 80180de:	6560      	str	r0, [r4, #84]	@ 0x54
 80180e0:	e7f8      	b.n	80180d4 <__sseek+0x18>
 80180e2:	46c0      	nop			@ (mov r8, r8)
 80180e4:	ffffefff 	.word	0xffffefff

080180e8 <__sclose>:
 80180e8:	b510      	push	{r4, lr}
 80180ea:	230e      	movs	r3, #14
 80180ec:	5ec9      	ldrsh	r1, [r1, r3]
 80180ee:	f000 f87d 	bl	80181ec <_close_r>
 80180f2:	bd10      	pop	{r4, pc}

080180f4 <_vsniprintf_r>:
 80180f4:	b530      	push	{r4, r5, lr}
 80180f6:	0014      	movs	r4, r2
 80180f8:	0005      	movs	r5, r0
 80180fa:	001a      	movs	r2, r3
 80180fc:	b09b      	sub	sp, #108	@ 0x6c
 80180fe:	2c00      	cmp	r4, #0
 8018100:	da05      	bge.n	801810e <_vsniprintf_r+0x1a>
 8018102:	238b      	movs	r3, #139	@ 0x8b
 8018104:	6003      	str	r3, [r0, #0]
 8018106:	2001      	movs	r0, #1
 8018108:	4240      	negs	r0, r0
 801810a:	b01b      	add	sp, #108	@ 0x6c
 801810c:	bd30      	pop	{r4, r5, pc}
 801810e:	2382      	movs	r3, #130	@ 0x82
 8018110:	4668      	mov	r0, sp
 8018112:	009b      	lsls	r3, r3, #2
 8018114:	8183      	strh	r3, [r0, #12]
 8018116:	2300      	movs	r3, #0
 8018118:	9100      	str	r1, [sp, #0]
 801811a:	9104      	str	r1, [sp, #16]
 801811c:	429c      	cmp	r4, r3
 801811e:	d000      	beq.n	8018122 <_vsniprintf_r+0x2e>
 8018120:	1e63      	subs	r3, r4, #1
 8018122:	9302      	str	r3, [sp, #8]
 8018124:	9305      	str	r3, [sp, #20]
 8018126:	2301      	movs	r3, #1
 8018128:	4669      	mov	r1, sp
 801812a:	425b      	negs	r3, r3
 801812c:	81cb      	strh	r3, [r1, #14]
 801812e:	0028      	movs	r0, r5
 8018130:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018132:	f001 fc77 	bl	8019a24 <_svfiprintf_r>
 8018136:	1c43      	adds	r3, r0, #1
 8018138:	da01      	bge.n	801813e <_vsniprintf_r+0x4a>
 801813a:	238b      	movs	r3, #139	@ 0x8b
 801813c:	602b      	str	r3, [r5, #0]
 801813e:	2c00      	cmp	r4, #0
 8018140:	d0e3      	beq.n	801810a <_vsniprintf_r+0x16>
 8018142:	2200      	movs	r2, #0
 8018144:	9b00      	ldr	r3, [sp, #0]
 8018146:	701a      	strb	r2, [r3, #0]
 8018148:	e7df      	b.n	801810a <_vsniprintf_r+0x16>
	...

0801814c <vsniprintf>:
 801814c:	b513      	push	{r0, r1, r4, lr}
 801814e:	4c04      	ldr	r4, [pc, #16]	@ (8018160 <vsniprintf+0x14>)
 8018150:	9300      	str	r3, [sp, #0]
 8018152:	0013      	movs	r3, r2
 8018154:	000a      	movs	r2, r1
 8018156:	0001      	movs	r1, r0
 8018158:	6820      	ldr	r0, [r4, #0]
 801815a:	f7ff ffcb 	bl	80180f4 <_vsniprintf_r>
 801815e:	bd16      	pop	{r1, r2, r4, pc}
 8018160:	200001f0 	.word	0x200001f0

08018164 <memset>:
 8018164:	0003      	movs	r3, r0
 8018166:	1882      	adds	r2, r0, r2
 8018168:	4293      	cmp	r3, r2
 801816a:	d100      	bne.n	801816e <memset+0xa>
 801816c:	4770      	bx	lr
 801816e:	7019      	strb	r1, [r3, #0]
 8018170:	3301      	adds	r3, #1
 8018172:	e7f9      	b.n	8018168 <memset+0x4>

08018174 <strchr>:
 8018174:	b2c9      	uxtb	r1, r1
 8018176:	7803      	ldrb	r3, [r0, #0]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d004      	beq.n	8018186 <strchr+0x12>
 801817c:	428b      	cmp	r3, r1
 801817e:	d100      	bne.n	8018182 <strchr+0xe>
 8018180:	4770      	bx	lr
 8018182:	3001      	adds	r0, #1
 8018184:	e7f7      	b.n	8018176 <strchr+0x2>
 8018186:	424b      	negs	r3, r1
 8018188:	4159      	adcs	r1, r3
 801818a:	4249      	negs	r1, r1
 801818c:	4008      	ands	r0, r1
 801818e:	e7f7      	b.n	8018180 <strchr+0xc>

08018190 <strncpy>:
 8018190:	0003      	movs	r3, r0
 8018192:	b530      	push	{r4, r5, lr}
 8018194:	001d      	movs	r5, r3
 8018196:	2a00      	cmp	r2, #0
 8018198:	d006      	beq.n	80181a8 <strncpy+0x18>
 801819a:	780c      	ldrb	r4, [r1, #0]
 801819c:	3a01      	subs	r2, #1
 801819e:	3301      	adds	r3, #1
 80181a0:	702c      	strb	r4, [r5, #0]
 80181a2:	3101      	adds	r1, #1
 80181a4:	2c00      	cmp	r4, #0
 80181a6:	d1f5      	bne.n	8018194 <strncpy+0x4>
 80181a8:	2100      	movs	r1, #0
 80181aa:	189a      	adds	r2, r3, r2
 80181ac:	4293      	cmp	r3, r2
 80181ae:	d100      	bne.n	80181b2 <strncpy+0x22>
 80181b0:	bd30      	pop	{r4, r5, pc}
 80181b2:	7019      	strb	r1, [r3, #0]
 80181b4:	3301      	adds	r3, #1
 80181b6:	e7f9      	b.n	80181ac <strncpy+0x1c>

080181b8 <strstr>:
 80181b8:	780a      	ldrb	r2, [r1, #0]
 80181ba:	b530      	push	{r4, r5, lr}
 80181bc:	2a00      	cmp	r2, #0
 80181be:	d10c      	bne.n	80181da <strstr+0x22>
 80181c0:	bd30      	pop	{r4, r5, pc}
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d108      	bne.n	80181d8 <strstr+0x20>
 80181c6:	2301      	movs	r3, #1
 80181c8:	5ccc      	ldrb	r4, [r1, r3]
 80181ca:	2c00      	cmp	r4, #0
 80181cc:	d0f8      	beq.n	80181c0 <strstr+0x8>
 80181ce:	5cc5      	ldrb	r5, [r0, r3]
 80181d0:	42a5      	cmp	r5, r4
 80181d2:	d101      	bne.n	80181d8 <strstr+0x20>
 80181d4:	3301      	adds	r3, #1
 80181d6:	e7f7      	b.n	80181c8 <strstr+0x10>
 80181d8:	3001      	adds	r0, #1
 80181da:	7803      	ldrb	r3, [r0, #0]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d1f0      	bne.n	80181c2 <strstr+0xa>
 80181e0:	0018      	movs	r0, r3
 80181e2:	e7ed      	b.n	80181c0 <strstr+0x8>

080181e4 <_localeconv_r>:
 80181e4:	4800      	ldr	r0, [pc, #0]	@ (80181e8 <_localeconv_r+0x4>)
 80181e6:	4770      	bx	lr
 80181e8:	20000330 	.word	0x20000330

080181ec <_close_r>:
 80181ec:	2300      	movs	r3, #0
 80181ee:	b570      	push	{r4, r5, r6, lr}
 80181f0:	4d06      	ldr	r5, [pc, #24]	@ (801820c <_close_r+0x20>)
 80181f2:	0004      	movs	r4, r0
 80181f4:	0008      	movs	r0, r1
 80181f6:	602b      	str	r3, [r5, #0]
 80181f8:	f7f0 fed8 	bl	8008fac <_close>
 80181fc:	1c43      	adds	r3, r0, #1
 80181fe:	d103      	bne.n	8018208 <_close_r+0x1c>
 8018200:	682b      	ldr	r3, [r5, #0]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d000      	beq.n	8018208 <_close_r+0x1c>
 8018206:	6023      	str	r3, [r4, #0]
 8018208:	bd70      	pop	{r4, r5, r6, pc}
 801820a:	46c0      	nop			@ (mov r8, r8)
 801820c:	20004000 	.word	0x20004000

08018210 <_lseek_r>:
 8018210:	b570      	push	{r4, r5, r6, lr}
 8018212:	0004      	movs	r4, r0
 8018214:	0008      	movs	r0, r1
 8018216:	0011      	movs	r1, r2
 8018218:	001a      	movs	r2, r3
 801821a:	2300      	movs	r3, #0
 801821c:	4d05      	ldr	r5, [pc, #20]	@ (8018234 <_lseek_r+0x24>)
 801821e:	602b      	str	r3, [r5, #0]
 8018220:	f7f0 fee5 	bl	8008fee <_lseek>
 8018224:	1c43      	adds	r3, r0, #1
 8018226:	d103      	bne.n	8018230 <_lseek_r+0x20>
 8018228:	682b      	ldr	r3, [r5, #0]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d000      	beq.n	8018230 <_lseek_r+0x20>
 801822e:	6023      	str	r3, [r4, #0]
 8018230:	bd70      	pop	{r4, r5, r6, pc}
 8018232:	46c0      	nop			@ (mov r8, r8)
 8018234:	20004000 	.word	0x20004000

08018238 <_read_r>:
 8018238:	b570      	push	{r4, r5, r6, lr}
 801823a:	0004      	movs	r4, r0
 801823c:	0008      	movs	r0, r1
 801823e:	0011      	movs	r1, r2
 8018240:	001a      	movs	r2, r3
 8018242:	2300      	movs	r3, #0
 8018244:	4d05      	ldr	r5, [pc, #20]	@ (801825c <_read_r+0x24>)
 8018246:	602b      	str	r3, [r5, #0]
 8018248:	f7f0 fe93 	bl	8008f72 <_read>
 801824c:	1c43      	adds	r3, r0, #1
 801824e:	d103      	bne.n	8018258 <_read_r+0x20>
 8018250:	682b      	ldr	r3, [r5, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d000      	beq.n	8018258 <_read_r+0x20>
 8018256:	6023      	str	r3, [r4, #0]
 8018258:	bd70      	pop	{r4, r5, r6, pc}
 801825a:	46c0      	nop			@ (mov r8, r8)
 801825c:	20004000 	.word	0x20004000

08018260 <_write_r>:
 8018260:	b570      	push	{r4, r5, r6, lr}
 8018262:	0004      	movs	r4, r0
 8018264:	0008      	movs	r0, r1
 8018266:	0011      	movs	r1, r2
 8018268:	001a      	movs	r2, r3
 801826a:	2300      	movs	r3, #0
 801826c:	4d05      	ldr	r5, [pc, #20]	@ (8018284 <_write_r+0x24>)
 801826e:	602b      	str	r3, [r5, #0]
 8018270:	f7f1 fb0a 	bl	8009888 <_write>
 8018274:	1c43      	adds	r3, r0, #1
 8018276:	d103      	bne.n	8018280 <_write_r+0x20>
 8018278:	682b      	ldr	r3, [r5, #0]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d000      	beq.n	8018280 <_write_r+0x20>
 801827e:	6023      	str	r3, [r4, #0]
 8018280:	bd70      	pop	{r4, r5, r6, pc}
 8018282:	46c0      	nop			@ (mov r8, r8)
 8018284:	20004000 	.word	0x20004000

08018288 <__errno>:
 8018288:	4b01      	ldr	r3, [pc, #4]	@ (8018290 <__errno+0x8>)
 801828a:	6818      	ldr	r0, [r3, #0]
 801828c:	4770      	bx	lr
 801828e:	46c0      	nop			@ (mov r8, r8)
 8018290:	200001f0 	.word	0x200001f0

08018294 <__libc_init_array>:
 8018294:	b570      	push	{r4, r5, r6, lr}
 8018296:	2600      	movs	r6, #0
 8018298:	4c0c      	ldr	r4, [pc, #48]	@ (80182cc <__libc_init_array+0x38>)
 801829a:	4d0d      	ldr	r5, [pc, #52]	@ (80182d0 <__libc_init_array+0x3c>)
 801829c:	1b64      	subs	r4, r4, r5
 801829e:	10a4      	asrs	r4, r4, #2
 80182a0:	42a6      	cmp	r6, r4
 80182a2:	d109      	bne.n	80182b8 <__libc_init_array+0x24>
 80182a4:	2600      	movs	r6, #0
 80182a6:	f002 fe57 	bl	801af58 <_init>
 80182aa:	4c0a      	ldr	r4, [pc, #40]	@ (80182d4 <__libc_init_array+0x40>)
 80182ac:	4d0a      	ldr	r5, [pc, #40]	@ (80182d8 <__libc_init_array+0x44>)
 80182ae:	1b64      	subs	r4, r4, r5
 80182b0:	10a4      	asrs	r4, r4, #2
 80182b2:	42a6      	cmp	r6, r4
 80182b4:	d105      	bne.n	80182c2 <__libc_init_array+0x2e>
 80182b6:	bd70      	pop	{r4, r5, r6, pc}
 80182b8:	00b3      	lsls	r3, r6, #2
 80182ba:	58eb      	ldr	r3, [r5, r3]
 80182bc:	4798      	blx	r3
 80182be:	3601      	adds	r6, #1
 80182c0:	e7ee      	b.n	80182a0 <__libc_init_array+0xc>
 80182c2:	00b3      	lsls	r3, r6, #2
 80182c4:	58eb      	ldr	r3, [r5, r3]
 80182c6:	4798      	blx	r3
 80182c8:	3601      	adds	r6, #1
 80182ca:	e7f2      	b.n	80182b2 <__libc_init_array+0x1e>
 80182cc:	0801c180 	.word	0x0801c180
 80182d0:	0801c180 	.word	0x0801c180
 80182d4:	0801c184 	.word	0x0801c184
 80182d8:	0801c180 	.word	0x0801c180

080182dc <__retarget_lock_init_recursive>:
 80182dc:	4770      	bx	lr

080182de <__retarget_lock_acquire_recursive>:
 80182de:	4770      	bx	lr

080182e0 <__retarget_lock_release_recursive>:
 80182e0:	4770      	bx	lr

080182e2 <memchr>:
 80182e2:	b2c9      	uxtb	r1, r1
 80182e4:	1882      	adds	r2, r0, r2
 80182e6:	4290      	cmp	r0, r2
 80182e8:	d101      	bne.n	80182ee <memchr+0xc>
 80182ea:	2000      	movs	r0, #0
 80182ec:	4770      	bx	lr
 80182ee:	7803      	ldrb	r3, [r0, #0]
 80182f0:	428b      	cmp	r3, r1
 80182f2:	d0fb      	beq.n	80182ec <memchr+0xa>
 80182f4:	3001      	adds	r0, #1
 80182f6:	e7f6      	b.n	80182e6 <memchr+0x4>

080182f8 <memcpy>:
 80182f8:	2300      	movs	r3, #0
 80182fa:	b510      	push	{r4, lr}
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d100      	bne.n	8018302 <memcpy+0xa>
 8018300:	bd10      	pop	{r4, pc}
 8018302:	5ccc      	ldrb	r4, [r1, r3]
 8018304:	54c4      	strb	r4, [r0, r3]
 8018306:	3301      	adds	r3, #1
 8018308:	e7f8      	b.n	80182fc <memcpy+0x4>

0801830a <quorem>:
 801830a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801830c:	6902      	ldr	r2, [r0, #16]
 801830e:	690f      	ldr	r7, [r1, #16]
 8018310:	b087      	sub	sp, #28
 8018312:	0006      	movs	r6, r0
 8018314:	000b      	movs	r3, r1
 8018316:	2000      	movs	r0, #0
 8018318:	9102      	str	r1, [sp, #8]
 801831a:	42ba      	cmp	r2, r7
 801831c:	db6d      	blt.n	80183fa <quorem+0xf0>
 801831e:	3f01      	subs	r7, #1
 8018320:	00bc      	lsls	r4, r7, #2
 8018322:	3314      	adds	r3, #20
 8018324:	9305      	str	r3, [sp, #20]
 8018326:	191b      	adds	r3, r3, r4
 8018328:	9303      	str	r3, [sp, #12]
 801832a:	0033      	movs	r3, r6
 801832c:	3314      	adds	r3, #20
 801832e:	191c      	adds	r4, r3, r4
 8018330:	9301      	str	r3, [sp, #4]
 8018332:	6823      	ldr	r3, [r4, #0]
 8018334:	9304      	str	r3, [sp, #16]
 8018336:	9b03      	ldr	r3, [sp, #12]
 8018338:	9804      	ldr	r0, [sp, #16]
 801833a:	681d      	ldr	r5, [r3, #0]
 801833c:	3501      	adds	r5, #1
 801833e:	0029      	movs	r1, r5
 8018340:	f7e7 fefe 	bl	8000140 <__udivsi3>
 8018344:	9b04      	ldr	r3, [sp, #16]
 8018346:	9000      	str	r0, [sp, #0]
 8018348:	42ab      	cmp	r3, r5
 801834a:	d32b      	bcc.n	80183a4 <quorem+0x9a>
 801834c:	9b05      	ldr	r3, [sp, #20]
 801834e:	9d01      	ldr	r5, [sp, #4]
 8018350:	469c      	mov	ip, r3
 8018352:	2300      	movs	r3, #0
 8018354:	9305      	str	r3, [sp, #20]
 8018356:	9304      	str	r3, [sp, #16]
 8018358:	4662      	mov	r2, ip
 801835a:	ca08      	ldmia	r2!, {r3}
 801835c:	6828      	ldr	r0, [r5, #0]
 801835e:	4694      	mov	ip, r2
 8018360:	9a00      	ldr	r2, [sp, #0]
 8018362:	b299      	uxth	r1, r3
 8018364:	4351      	muls	r1, r2
 8018366:	9a05      	ldr	r2, [sp, #20]
 8018368:	0c1b      	lsrs	r3, r3, #16
 801836a:	1889      	adds	r1, r1, r2
 801836c:	9a00      	ldr	r2, [sp, #0]
 801836e:	4353      	muls	r3, r2
 8018370:	0c0a      	lsrs	r2, r1, #16
 8018372:	189b      	adds	r3, r3, r2
 8018374:	0c1a      	lsrs	r2, r3, #16
 8018376:	b289      	uxth	r1, r1
 8018378:	9205      	str	r2, [sp, #20]
 801837a:	b282      	uxth	r2, r0
 801837c:	1a52      	subs	r2, r2, r1
 801837e:	9904      	ldr	r1, [sp, #16]
 8018380:	0c00      	lsrs	r0, r0, #16
 8018382:	1852      	adds	r2, r2, r1
 8018384:	b29b      	uxth	r3, r3
 8018386:	1411      	asrs	r1, r2, #16
 8018388:	1ac3      	subs	r3, r0, r3
 801838a:	185b      	adds	r3, r3, r1
 801838c:	1419      	asrs	r1, r3, #16
 801838e:	b292      	uxth	r2, r2
 8018390:	041b      	lsls	r3, r3, #16
 8018392:	431a      	orrs	r2, r3
 8018394:	9b03      	ldr	r3, [sp, #12]
 8018396:	9104      	str	r1, [sp, #16]
 8018398:	c504      	stmia	r5!, {r2}
 801839a:	4563      	cmp	r3, ip
 801839c:	d2dc      	bcs.n	8018358 <quorem+0x4e>
 801839e:	6823      	ldr	r3, [r4, #0]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d030      	beq.n	8018406 <quorem+0xfc>
 80183a4:	0030      	movs	r0, r6
 80183a6:	9902      	ldr	r1, [sp, #8]
 80183a8:	f001 f9c6 	bl	8019738 <__mcmp>
 80183ac:	2800      	cmp	r0, #0
 80183ae:	db23      	blt.n	80183f8 <quorem+0xee>
 80183b0:	0034      	movs	r4, r6
 80183b2:	2500      	movs	r5, #0
 80183b4:	9902      	ldr	r1, [sp, #8]
 80183b6:	3414      	adds	r4, #20
 80183b8:	3114      	adds	r1, #20
 80183ba:	6823      	ldr	r3, [r4, #0]
 80183bc:	c901      	ldmia	r1!, {r0}
 80183be:	9302      	str	r3, [sp, #8]
 80183c0:	466b      	mov	r3, sp
 80183c2:	891b      	ldrh	r3, [r3, #8]
 80183c4:	b282      	uxth	r2, r0
 80183c6:	1a9a      	subs	r2, r3, r2
 80183c8:	9b02      	ldr	r3, [sp, #8]
 80183ca:	1952      	adds	r2, r2, r5
 80183cc:	0c00      	lsrs	r0, r0, #16
 80183ce:	0c1b      	lsrs	r3, r3, #16
 80183d0:	1a1b      	subs	r3, r3, r0
 80183d2:	1410      	asrs	r0, r2, #16
 80183d4:	181b      	adds	r3, r3, r0
 80183d6:	141d      	asrs	r5, r3, #16
 80183d8:	b292      	uxth	r2, r2
 80183da:	041b      	lsls	r3, r3, #16
 80183dc:	431a      	orrs	r2, r3
 80183de:	9b03      	ldr	r3, [sp, #12]
 80183e0:	c404      	stmia	r4!, {r2}
 80183e2:	428b      	cmp	r3, r1
 80183e4:	d2e9      	bcs.n	80183ba <quorem+0xb0>
 80183e6:	9a01      	ldr	r2, [sp, #4]
 80183e8:	00bb      	lsls	r3, r7, #2
 80183ea:	18d3      	adds	r3, r2, r3
 80183ec:	681a      	ldr	r2, [r3, #0]
 80183ee:	2a00      	cmp	r2, #0
 80183f0:	d013      	beq.n	801841a <quorem+0x110>
 80183f2:	9b00      	ldr	r3, [sp, #0]
 80183f4:	3301      	adds	r3, #1
 80183f6:	9300      	str	r3, [sp, #0]
 80183f8:	9800      	ldr	r0, [sp, #0]
 80183fa:	b007      	add	sp, #28
 80183fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183fe:	6823      	ldr	r3, [r4, #0]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d104      	bne.n	801840e <quorem+0x104>
 8018404:	3f01      	subs	r7, #1
 8018406:	9b01      	ldr	r3, [sp, #4]
 8018408:	3c04      	subs	r4, #4
 801840a:	42a3      	cmp	r3, r4
 801840c:	d3f7      	bcc.n	80183fe <quorem+0xf4>
 801840e:	6137      	str	r7, [r6, #16]
 8018410:	e7c8      	b.n	80183a4 <quorem+0x9a>
 8018412:	681a      	ldr	r2, [r3, #0]
 8018414:	2a00      	cmp	r2, #0
 8018416:	d104      	bne.n	8018422 <quorem+0x118>
 8018418:	3f01      	subs	r7, #1
 801841a:	9a01      	ldr	r2, [sp, #4]
 801841c:	3b04      	subs	r3, #4
 801841e:	429a      	cmp	r2, r3
 8018420:	d3f7      	bcc.n	8018412 <quorem+0x108>
 8018422:	6137      	str	r7, [r6, #16]
 8018424:	e7e5      	b.n	80183f2 <quorem+0xe8>
	...

08018428 <_dtoa_r>:
 8018428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801842a:	0014      	movs	r4, r2
 801842c:	001d      	movs	r5, r3
 801842e:	69c6      	ldr	r6, [r0, #28]
 8018430:	b09d      	sub	sp, #116	@ 0x74
 8018432:	940a      	str	r4, [sp, #40]	@ 0x28
 8018434:	950b      	str	r5, [sp, #44]	@ 0x2c
 8018436:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8018438:	9003      	str	r0, [sp, #12]
 801843a:	2e00      	cmp	r6, #0
 801843c:	d10f      	bne.n	801845e <_dtoa_r+0x36>
 801843e:	2010      	movs	r0, #16
 8018440:	f000 fe30 	bl	80190a4 <malloc>
 8018444:	9b03      	ldr	r3, [sp, #12]
 8018446:	1e02      	subs	r2, r0, #0
 8018448:	61d8      	str	r0, [r3, #28]
 801844a:	d104      	bne.n	8018456 <_dtoa_r+0x2e>
 801844c:	21ef      	movs	r1, #239	@ 0xef
 801844e:	4bc7      	ldr	r3, [pc, #796]	@ (801876c <_dtoa_r+0x344>)
 8018450:	48c7      	ldr	r0, [pc, #796]	@ (8018770 <_dtoa_r+0x348>)
 8018452:	f001 fea1 	bl	801a198 <__assert_func>
 8018456:	6046      	str	r6, [r0, #4]
 8018458:	6086      	str	r6, [r0, #8]
 801845a:	6006      	str	r6, [r0, #0]
 801845c:	60c6      	str	r6, [r0, #12]
 801845e:	9b03      	ldr	r3, [sp, #12]
 8018460:	69db      	ldr	r3, [r3, #28]
 8018462:	6819      	ldr	r1, [r3, #0]
 8018464:	2900      	cmp	r1, #0
 8018466:	d00b      	beq.n	8018480 <_dtoa_r+0x58>
 8018468:	685a      	ldr	r2, [r3, #4]
 801846a:	2301      	movs	r3, #1
 801846c:	4093      	lsls	r3, r2
 801846e:	604a      	str	r2, [r1, #4]
 8018470:	608b      	str	r3, [r1, #8]
 8018472:	9803      	ldr	r0, [sp, #12]
 8018474:	f000 ff16 	bl	80192a4 <_Bfree>
 8018478:	2200      	movs	r2, #0
 801847a:	9b03      	ldr	r3, [sp, #12]
 801847c:	69db      	ldr	r3, [r3, #28]
 801847e:	601a      	str	r2, [r3, #0]
 8018480:	2d00      	cmp	r5, #0
 8018482:	da1e      	bge.n	80184c2 <_dtoa_r+0x9a>
 8018484:	2301      	movs	r3, #1
 8018486:	603b      	str	r3, [r7, #0]
 8018488:	006b      	lsls	r3, r5, #1
 801848a:	085b      	lsrs	r3, r3, #1
 801848c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801848e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018490:	4bb8      	ldr	r3, [pc, #736]	@ (8018774 <_dtoa_r+0x34c>)
 8018492:	4ab8      	ldr	r2, [pc, #736]	@ (8018774 <_dtoa_r+0x34c>)
 8018494:	403b      	ands	r3, r7
 8018496:	4293      	cmp	r3, r2
 8018498:	d116      	bne.n	80184c8 <_dtoa_r+0xa0>
 801849a:	4bb7      	ldr	r3, [pc, #732]	@ (8018778 <_dtoa_r+0x350>)
 801849c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801849e:	6013      	str	r3, [r2, #0]
 80184a0:	033b      	lsls	r3, r7, #12
 80184a2:	0b1b      	lsrs	r3, r3, #12
 80184a4:	4323      	orrs	r3, r4
 80184a6:	d101      	bne.n	80184ac <_dtoa_r+0x84>
 80184a8:	f000 fd83 	bl	8018fb2 <_dtoa_r+0xb8a>
 80184ac:	4bb3      	ldr	r3, [pc, #716]	@ (801877c <_dtoa_r+0x354>)
 80184ae:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80184b0:	9308      	str	r3, [sp, #32]
 80184b2:	2a00      	cmp	r2, #0
 80184b4:	d002      	beq.n	80184bc <_dtoa_r+0x94>
 80184b6:	4bb2      	ldr	r3, [pc, #712]	@ (8018780 <_dtoa_r+0x358>)
 80184b8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80184ba:	6013      	str	r3, [r2, #0]
 80184bc:	9808      	ldr	r0, [sp, #32]
 80184be:	b01d      	add	sp, #116	@ 0x74
 80184c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184c2:	2300      	movs	r3, #0
 80184c4:	603b      	str	r3, [r7, #0]
 80184c6:	e7e2      	b.n	801848e <_dtoa_r+0x66>
 80184c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80184ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80184cc:	9212      	str	r2, [sp, #72]	@ 0x48
 80184ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80184d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80184d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80184d4:	2200      	movs	r2, #0
 80184d6:	2300      	movs	r3, #0
 80184d8:	f7e7 ffb8 	bl	800044c <__aeabi_dcmpeq>
 80184dc:	1e06      	subs	r6, r0, #0
 80184de:	d00b      	beq.n	80184f8 <_dtoa_r+0xd0>
 80184e0:	2301      	movs	r3, #1
 80184e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80184e4:	6013      	str	r3, [r2, #0]
 80184e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d002      	beq.n	80184f2 <_dtoa_r+0xca>
 80184ec:	4ba5      	ldr	r3, [pc, #660]	@ (8018784 <_dtoa_r+0x35c>)
 80184ee:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80184f0:	6013      	str	r3, [r2, #0]
 80184f2:	4ba5      	ldr	r3, [pc, #660]	@ (8018788 <_dtoa_r+0x360>)
 80184f4:	9308      	str	r3, [sp, #32]
 80184f6:	e7e1      	b.n	80184bc <_dtoa_r+0x94>
 80184f8:	ab1a      	add	r3, sp, #104	@ 0x68
 80184fa:	9301      	str	r3, [sp, #4]
 80184fc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80184fe:	9300      	str	r3, [sp, #0]
 8018500:	9803      	ldr	r0, [sp, #12]
 8018502:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018504:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018506:	f001 f9cd 	bl	80198a4 <__d2b>
 801850a:	007a      	lsls	r2, r7, #1
 801850c:	9005      	str	r0, [sp, #20]
 801850e:	0d52      	lsrs	r2, r2, #21
 8018510:	d100      	bne.n	8018514 <_dtoa_r+0xec>
 8018512:	e07b      	b.n	801860c <_dtoa_r+0x1e4>
 8018514:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018516:	9618      	str	r6, [sp, #96]	@ 0x60
 8018518:	0319      	lsls	r1, r3, #12
 801851a:	4b9c      	ldr	r3, [pc, #624]	@ (801878c <_dtoa_r+0x364>)
 801851c:	0b09      	lsrs	r1, r1, #12
 801851e:	430b      	orrs	r3, r1
 8018520:	499b      	ldr	r1, [pc, #620]	@ (8018790 <_dtoa_r+0x368>)
 8018522:	1857      	adds	r7, r2, r1
 8018524:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018526:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018528:	0019      	movs	r1, r3
 801852a:	2200      	movs	r2, #0
 801852c:	4b99      	ldr	r3, [pc, #612]	@ (8018794 <_dtoa_r+0x36c>)
 801852e:	f7ea facb 	bl	8002ac8 <__aeabi_dsub>
 8018532:	4a99      	ldr	r2, [pc, #612]	@ (8018798 <_dtoa_r+0x370>)
 8018534:	4b99      	ldr	r3, [pc, #612]	@ (801879c <_dtoa_r+0x374>)
 8018536:	f7e9 ffff 	bl	8002538 <__aeabi_dmul>
 801853a:	4a99      	ldr	r2, [pc, #612]	@ (80187a0 <_dtoa_r+0x378>)
 801853c:	4b99      	ldr	r3, [pc, #612]	@ (80187a4 <_dtoa_r+0x37c>)
 801853e:	f7e9 f853 	bl	80015e8 <__aeabi_dadd>
 8018542:	0004      	movs	r4, r0
 8018544:	0038      	movs	r0, r7
 8018546:	000d      	movs	r5, r1
 8018548:	f7ea feb8 	bl	80032bc <__aeabi_i2d>
 801854c:	4a96      	ldr	r2, [pc, #600]	@ (80187a8 <_dtoa_r+0x380>)
 801854e:	4b97      	ldr	r3, [pc, #604]	@ (80187ac <_dtoa_r+0x384>)
 8018550:	f7e9 fff2 	bl	8002538 <__aeabi_dmul>
 8018554:	0002      	movs	r2, r0
 8018556:	000b      	movs	r3, r1
 8018558:	0020      	movs	r0, r4
 801855a:	0029      	movs	r1, r5
 801855c:	f7e9 f844 	bl	80015e8 <__aeabi_dadd>
 8018560:	0004      	movs	r4, r0
 8018562:	000d      	movs	r5, r1
 8018564:	f7ea fe6e 	bl	8003244 <__aeabi_d2iz>
 8018568:	2200      	movs	r2, #0
 801856a:	9004      	str	r0, [sp, #16]
 801856c:	2300      	movs	r3, #0
 801856e:	0020      	movs	r0, r4
 8018570:	0029      	movs	r1, r5
 8018572:	f7e7 ff71 	bl	8000458 <__aeabi_dcmplt>
 8018576:	2800      	cmp	r0, #0
 8018578:	d00b      	beq.n	8018592 <_dtoa_r+0x16a>
 801857a:	9804      	ldr	r0, [sp, #16]
 801857c:	f7ea fe9e 	bl	80032bc <__aeabi_i2d>
 8018580:	002b      	movs	r3, r5
 8018582:	0022      	movs	r2, r4
 8018584:	f7e7 ff62 	bl	800044c <__aeabi_dcmpeq>
 8018588:	4243      	negs	r3, r0
 801858a:	4158      	adcs	r0, r3
 801858c:	9b04      	ldr	r3, [sp, #16]
 801858e:	1a1b      	subs	r3, r3, r0
 8018590:	9304      	str	r3, [sp, #16]
 8018592:	2301      	movs	r3, #1
 8018594:	9315      	str	r3, [sp, #84]	@ 0x54
 8018596:	9b04      	ldr	r3, [sp, #16]
 8018598:	2b16      	cmp	r3, #22
 801859a:	d810      	bhi.n	80185be <_dtoa_r+0x196>
 801859c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801859e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80185a0:	9a04      	ldr	r2, [sp, #16]
 80185a2:	4b83      	ldr	r3, [pc, #524]	@ (80187b0 <_dtoa_r+0x388>)
 80185a4:	00d2      	lsls	r2, r2, #3
 80185a6:	189b      	adds	r3, r3, r2
 80185a8:	681a      	ldr	r2, [r3, #0]
 80185aa:	685b      	ldr	r3, [r3, #4]
 80185ac:	f7e7 ff54 	bl	8000458 <__aeabi_dcmplt>
 80185b0:	2800      	cmp	r0, #0
 80185b2:	d047      	beq.n	8018644 <_dtoa_r+0x21c>
 80185b4:	9b04      	ldr	r3, [sp, #16]
 80185b6:	3b01      	subs	r3, #1
 80185b8:	9304      	str	r3, [sp, #16]
 80185ba:	2300      	movs	r3, #0
 80185bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80185be:	2200      	movs	r2, #0
 80185c0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80185c2:	9206      	str	r2, [sp, #24]
 80185c4:	1bdb      	subs	r3, r3, r7
 80185c6:	1e5a      	subs	r2, r3, #1
 80185c8:	d53e      	bpl.n	8018648 <_dtoa_r+0x220>
 80185ca:	2201      	movs	r2, #1
 80185cc:	1ad3      	subs	r3, r2, r3
 80185ce:	9306      	str	r3, [sp, #24]
 80185d0:	2300      	movs	r3, #0
 80185d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80185d4:	9b04      	ldr	r3, [sp, #16]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	db38      	blt.n	801864c <_dtoa_r+0x224>
 80185da:	9a04      	ldr	r2, [sp, #16]
 80185dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80185de:	4694      	mov	ip, r2
 80185e0:	4463      	add	r3, ip
 80185e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80185e4:	2300      	movs	r3, #0
 80185e6:	9214      	str	r2, [sp, #80]	@ 0x50
 80185e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80185ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80185ec:	2401      	movs	r4, #1
 80185ee:	2b09      	cmp	r3, #9
 80185f0:	d867      	bhi.n	80186c2 <_dtoa_r+0x29a>
 80185f2:	2b05      	cmp	r3, #5
 80185f4:	dd02      	ble.n	80185fc <_dtoa_r+0x1d4>
 80185f6:	2400      	movs	r4, #0
 80185f8:	3b04      	subs	r3, #4
 80185fa:	9322      	str	r3, [sp, #136]	@ 0x88
 80185fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80185fe:	1e98      	subs	r0, r3, #2
 8018600:	2803      	cmp	r0, #3
 8018602:	d867      	bhi.n	80186d4 <_dtoa_r+0x2ac>
 8018604:	f7e7 fd88 	bl	8000118 <__gnu_thumb1_case_uqi>
 8018608:	5b383a2b 	.word	0x5b383a2b
 801860c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801860e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018610:	18f6      	adds	r6, r6, r3
 8018612:	4b68      	ldr	r3, [pc, #416]	@ (80187b4 <_dtoa_r+0x38c>)
 8018614:	18f2      	adds	r2, r6, r3
 8018616:	2a20      	cmp	r2, #32
 8018618:	dd0f      	ble.n	801863a <_dtoa_r+0x212>
 801861a:	2340      	movs	r3, #64	@ 0x40
 801861c:	1a9b      	subs	r3, r3, r2
 801861e:	409f      	lsls	r7, r3
 8018620:	4b65      	ldr	r3, [pc, #404]	@ (80187b8 <_dtoa_r+0x390>)
 8018622:	0038      	movs	r0, r7
 8018624:	18f3      	adds	r3, r6, r3
 8018626:	40dc      	lsrs	r4, r3
 8018628:	4320      	orrs	r0, r4
 801862a:	f7ea fe75 	bl	8003318 <__aeabi_ui2d>
 801862e:	2201      	movs	r2, #1
 8018630:	4b62      	ldr	r3, [pc, #392]	@ (80187bc <_dtoa_r+0x394>)
 8018632:	1e77      	subs	r7, r6, #1
 8018634:	18cb      	adds	r3, r1, r3
 8018636:	9218      	str	r2, [sp, #96]	@ 0x60
 8018638:	e776      	b.n	8018528 <_dtoa_r+0x100>
 801863a:	2320      	movs	r3, #32
 801863c:	0020      	movs	r0, r4
 801863e:	1a9b      	subs	r3, r3, r2
 8018640:	4098      	lsls	r0, r3
 8018642:	e7f2      	b.n	801862a <_dtoa_r+0x202>
 8018644:	9015      	str	r0, [sp, #84]	@ 0x54
 8018646:	e7ba      	b.n	80185be <_dtoa_r+0x196>
 8018648:	920d      	str	r2, [sp, #52]	@ 0x34
 801864a:	e7c3      	b.n	80185d4 <_dtoa_r+0x1ac>
 801864c:	9b06      	ldr	r3, [sp, #24]
 801864e:	9a04      	ldr	r2, [sp, #16]
 8018650:	1a9b      	subs	r3, r3, r2
 8018652:	9306      	str	r3, [sp, #24]
 8018654:	4253      	negs	r3, r2
 8018656:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018658:	2300      	movs	r3, #0
 801865a:	9314      	str	r3, [sp, #80]	@ 0x50
 801865c:	e7c5      	b.n	80185ea <_dtoa_r+0x1c2>
 801865e:	2300      	movs	r3, #0
 8018660:	9310      	str	r3, [sp, #64]	@ 0x40
 8018662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018664:	930e      	str	r3, [sp, #56]	@ 0x38
 8018666:	9309      	str	r3, [sp, #36]	@ 0x24
 8018668:	2b00      	cmp	r3, #0
 801866a:	dc13      	bgt.n	8018694 <_dtoa_r+0x26c>
 801866c:	2301      	movs	r3, #1
 801866e:	001a      	movs	r2, r3
 8018670:	930e      	str	r3, [sp, #56]	@ 0x38
 8018672:	9309      	str	r3, [sp, #36]	@ 0x24
 8018674:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018676:	e00d      	b.n	8018694 <_dtoa_r+0x26c>
 8018678:	2301      	movs	r3, #1
 801867a:	e7f1      	b.n	8018660 <_dtoa_r+0x238>
 801867c:	2300      	movs	r3, #0
 801867e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018680:	9310      	str	r3, [sp, #64]	@ 0x40
 8018682:	4694      	mov	ip, r2
 8018684:	9b04      	ldr	r3, [sp, #16]
 8018686:	4463      	add	r3, ip
 8018688:	930e      	str	r3, [sp, #56]	@ 0x38
 801868a:	3301      	adds	r3, #1
 801868c:	9309      	str	r3, [sp, #36]	@ 0x24
 801868e:	2b00      	cmp	r3, #0
 8018690:	dc00      	bgt.n	8018694 <_dtoa_r+0x26c>
 8018692:	2301      	movs	r3, #1
 8018694:	9a03      	ldr	r2, [sp, #12]
 8018696:	2100      	movs	r1, #0
 8018698:	69d0      	ldr	r0, [r2, #28]
 801869a:	2204      	movs	r2, #4
 801869c:	0015      	movs	r5, r2
 801869e:	3514      	adds	r5, #20
 80186a0:	429d      	cmp	r5, r3
 80186a2:	d91b      	bls.n	80186dc <_dtoa_r+0x2b4>
 80186a4:	6041      	str	r1, [r0, #4]
 80186a6:	9803      	ldr	r0, [sp, #12]
 80186a8:	f000 fdb8 	bl	801921c <_Balloc>
 80186ac:	9008      	str	r0, [sp, #32]
 80186ae:	2800      	cmp	r0, #0
 80186b0:	d117      	bne.n	80186e2 <_dtoa_r+0x2ba>
 80186b2:	21b0      	movs	r1, #176	@ 0xb0
 80186b4:	4b42      	ldr	r3, [pc, #264]	@ (80187c0 <_dtoa_r+0x398>)
 80186b6:	482e      	ldr	r0, [pc, #184]	@ (8018770 <_dtoa_r+0x348>)
 80186b8:	9a08      	ldr	r2, [sp, #32]
 80186ba:	31ff      	adds	r1, #255	@ 0xff
 80186bc:	e6c9      	b.n	8018452 <_dtoa_r+0x2a>
 80186be:	2301      	movs	r3, #1
 80186c0:	e7dd      	b.n	801867e <_dtoa_r+0x256>
 80186c2:	2300      	movs	r3, #0
 80186c4:	9410      	str	r4, [sp, #64]	@ 0x40
 80186c6:	9322      	str	r3, [sp, #136]	@ 0x88
 80186c8:	3b01      	subs	r3, #1
 80186ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80186cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80186ce:	2200      	movs	r2, #0
 80186d0:	3313      	adds	r3, #19
 80186d2:	e7cf      	b.n	8018674 <_dtoa_r+0x24c>
 80186d4:	2301      	movs	r3, #1
 80186d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80186d8:	3b02      	subs	r3, #2
 80186da:	e7f6      	b.n	80186ca <_dtoa_r+0x2a2>
 80186dc:	3101      	adds	r1, #1
 80186de:	0052      	lsls	r2, r2, #1
 80186e0:	e7dc      	b.n	801869c <_dtoa_r+0x274>
 80186e2:	9b03      	ldr	r3, [sp, #12]
 80186e4:	9a08      	ldr	r2, [sp, #32]
 80186e6:	69db      	ldr	r3, [r3, #28]
 80186e8:	601a      	str	r2, [r3, #0]
 80186ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186ec:	2b0e      	cmp	r3, #14
 80186ee:	d900      	bls.n	80186f2 <_dtoa_r+0x2ca>
 80186f0:	e0d9      	b.n	80188a6 <_dtoa_r+0x47e>
 80186f2:	2c00      	cmp	r4, #0
 80186f4:	d100      	bne.n	80186f8 <_dtoa_r+0x2d0>
 80186f6:	e0d6      	b.n	80188a6 <_dtoa_r+0x47e>
 80186f8:	9b04      	ldr	r3, [sp, #16]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	dd64      	ble.n	80187c8 <_dtoa_r+0x3a0>
 80186fe:	210f      	movs	r1, #15
 8018700:	9a04      	ldr	r2, [sp, #16]
 8018702:	4b2b      	ldr	r3, [pc, #172]	@ (80187b0 <_dtoa_r+0x388>)
 8018704:	400a      	ands	r2, r1
 8018706:	00d2      	lsls	r2, r2, #3
 8018708:	189b      	adds	r3, r3, r2
 801870a:	681e      	ldr	r6, [r3, #0]
 801870c:	685f      	ldr	r7, [r3, #4]
 801870e:	9b04      	ldr	r3, [sp, #16]
 8018710:	2402      	movs	r4, #2
 8018712:	111d      	asrs	r5, r3, #4
 8018714:	05db      	lsls	r3, r3, #23
 8018716:	d50a      	bpl.n	801872e <_dtoa_r+0x306>
 8018718:	4b2a      	ldr	r3, [pc, #168]	@ (80187c4 <_dtoa_r+0x39c>)
 801871a:	400d      	ands	r5, r1
 801871c:	6a1a      	ldr	r2, [r3, #32]
 801871e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018720:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018722:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018724:	f7e9 fac4 	bl	8001cb0 <__aeabi_ddiv>
 8018728:	900a      	str	r0, [sp, #40]	@ 0x28
 801872a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801872c:	3401      	adds	r4, #1
 801872e:	4b25      	ldr	r3, [pc, #148]	@ (80187c4 <_dtoa_r+0x39c>)
 8018730:	930c      	str	r3, [sp, #48]	@ 0x30
 8018732:	2d00      	cmp	r5, #0
 8018734:	d108      	bne.n	8018748 <_dtoa_r+0x320>
 8018736:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018738:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801873a:	0032      	movs	r2, r6
 801873c:	003b      	movs	r3, r7
 801873e:	f7e9 fab7 	bl	8001cb0 <__aeabi_ddiv>
 8018742:	900a      	str	r0, [sp, #40]	@ 0x28
 8018744:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018746:	e05a      	b.n	80187fe <_dtoa_r+0x3d6>
 8018748:	2301      	movs	r3, #1
 801874a:	421d      	tst	r5, r3
 801874c:	d009      	beq.n	8018762 <_dtoa_r+0x33a>
 801874e:	18e4      	adds	r4, r4, r3
 8018750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018752:	0030      	movs	r0, r6
 8018754:	681a      	ldr	r2, [r3, #0]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	0039      	movs	r1, r7
 801875a:	f7e9 feed 	bl	8002538 <__aeabi_dmul>
 801875e:	0006      	movs	r6, r0
 8018760:	000f      	movs	r7, r1
 8018762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018764:	106d      	asrs	r5, r5, #1
 8018766:	3308      	adds	r3, #8
 8018768:	e7e2      	b.n	8018730 <_dtoa_r+0x308>
 801876a:	46c0      	nop			@ (mov r8, r8)
 801876c:	0801be2d 	.word	0x0801be2d
 8018770:	0801be44 	.word	0x0801be44
 8018774:	7ff00000 	.word	0x7ff00000
 8018778:	0000270f 	.word	0x0000270f
 801877c:	0801be29 	.word	0x0801be29
 8018780:	0801be2c 	.word	0x0801be2c
 8018784:	0801bdfd 	.word	0x0801bdfd
 8018788:	0801bdfc 	.word	0x0801bdfc
 801878c:	3ff00000 	.word	0x3ff00000
 8018790:	fffffc01 	.word	0xfffffc01
 8018794:	3ff80000 	.word	0x3ff80000
 8018798:	636f4361 	.word	0x636f4361
 801879c:	3fd287a7 	.word	0x3fd287a7
 80187a0:	8b60c8b3 	.word	0x8b60c8b3
 80187a4:	3fc68a28 	.word	0x3fc68a28
 80187a8:	509f79fb 	.word	0x509f79fb
 80187ac:	3fd34413 	.word	0x3fd34413
 80187b0:	0801bf40 	.word	0x0801bf40
 80187b4:	00000432 	.word	0x00000432
 80187b8:	00000412 	.word	0x00000412
 80187bc:	fe100000 	.word	0xfe100000
 80187c0:	0801be9c 	.word	0x0801be9c
 80187c4:	0801bf18 	.word	0x0801bf18
 80187c8:	9b04      	ldr	r3, [sp, #16]
 80187ca:	2402      	movs	r4, #2
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d016      	beq.n	80187fe <_dtoa_r+0x3d6>
 80187d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80187d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80187d4:	220f      	movs	r2, #15
 80187d6:	425d      	negs	r5, r3
 80187d8:	402a      	ands	r2, r5
 80187da:	4bd7      	ldr	r3, [pc, #860]	@ (8018b38 <_dtoa_r+0x710>)
 80187dc:	00d2      	lsls	r2, r2, #3
 80187de:	189b      	adds	r3, r3, r2
 80187e0:	681a      	ldr	r2, [r3, #0]
 80187e2:	685b      	ldr	r3, [r3, #4]
 80187e4:	f7e9 fea8 	bl	8002538 <__aeabi_dmul>
 80187e8:	2701      	movs	r7, #1
 80187ea:	2300      	movs	r3, #0
 80187ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80187ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 80187f0:	4ed2      	ldr	r6, [pc, #840]	@ (8018b3c <_dtoa_r+0x714>)
 80187f2:	112d      	asrs	r5, r5, #4
 80187f4:	2d00      	cmp	r5, #0
 80187f6:	d000      	beq.n	80187fa <_dtoa_r+0x3d2>
 80187f8:	e0ba      	b.n	8018970 <_dtoa_r+0x548>
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d1a1      	bne.n	8018742 <_dtoa_r+0x31a>
 80187fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018800:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018802:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018804:	2b00      	cmp	r3, #0
 8018806:	d100      	bne.n	801880a <_dtoa_r+0x3e2>
 8018808:	e0bd      	b.n	8018986 <_dtoa_r+0x55e>
 801880a:	2200      	movs	r2, #0
 801880c:	0030      	movs	r0, r6
 801880e:	0039      	movs	r1, r7
 8018810:	4bcb      	ldr	r3, [pc, #812]	@ (8018b40 <_dtoa_r+0x718>)
 8018812:	f7e7 fe21 	bl	8000458 <__aeabi_dcmplt>
 8018816:	2800      	cmp	r0, #0
 8018818:	d100      	bne.n	801881c <_dtoa_r+0x3f4>
 801881a:	e0b4      	b.n	8018986 <_dtoa_r+0x55e>
 801881c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801881e:	2b00      	cmp	r3, #0
 8018820:	d100      	bne.n	8018824 <_dtoa_r+0x3fc>
 8018822:	e0b0      	b.n	8018986 <_dtoa_r+0x55e>
 8018824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018826:	2b00      	cmp	r3, #0
 8018828:	dd39      	ble.n	801889e <_dtoa_r+0x476>
 801882a:	9b04      	ldr	r3, [sp, #16]
 801882c:	2200      	movs	r2, #0
 801882e:	3b01      	subs	r3, #1
 8018830:	930c      	str	r3, [sp, #48]	@ 0x30
 8018832:	0030      	movs	r0, r6
 8018834:	4bc3      	ldr	r3, [pc, #780]	@ (8018b44 <_dtoa_r+0x71c>)
 8018836:	0039      	movs	r1, r7
 8018838:	f7e9 fe7e 	bl	8002538 <__aeabi_dmul>
 801883c:	900a      	str	r0, [sp, #40]	@ 0x28
 801883e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018842:	3401      	adds	r4, #1
 8018844:	0020      	movs	r0, r4
 8018846:	9311      	str	r3, [sp, #68]	@ 0x44
 8018848:	f7ea fd38 	bl	80032bc <__aeabi_i2d>
 801884c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801884e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018850:	f7e9 fe72 	bl	8002538 <__aeabi_dmul>
 8018854:	4bbc      	ldr	r3, [pc, #752]	@ (8018b48 <_dtoa_r+0x720>)
 8018856:	2200      	movs	r2, #0
 8018858:	f7e8 fec6 	bl	80015e8 <__aeabi_dadd>
 801885c:	4bbb      	ldr	r3, [pc, #748]	@ (8018b4c <_dtoa_r+0x724>)
 801885e:	0006      	movs	r6, r0
 8018860:	18cf      	adds	r7, r1, r3
 8018862:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018864:	2b00      	cmp	r3, #0
 8018866:	d000      	beq.n	801886a <_dtoa_r+0x442>
 8018868:	e091      	b.n	801898e <_dtoa_r+0x566>
 801886a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801886c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801886e:	2200      	movs	r2, #0
 8018870:	4bb7      	ldr	r3, [pc, #732]	@ (8018b50 <_dtoa_r+0x728>)
 8018872:	f7ea f929 	bl	8002ac8 <__aeabi_dsub>
 8018876:	0032      	movs	r2, r6
 8018878:	003b      	movs	r3, r7
 801887a:	0004      	movs	r4, r0
 801887c:	000d      	movs	r5, r1
 801887e:	f7e7 fdff 	bl	8000480 <__aeabi_dcmpgt>
 8018882:	2800      	cmp	r0, #0
 8018884:	d000      	beq.n	8018888 <_dtoa_r+0x460>
 8018886:	e29d      	b.n	8018dc4 <_dtoa_r+0x99c>
 8018888:	2180      	movs	r1, #128	@ 0x80
 801888a:	0609      	lsls	r1, r1, #24
 801888c:	187b      	adds	r3, r7, r1
 801888e:	0032      	movs	r2, r6
 8018890:	0020      	movs	r0, r4
 8018892:	0029      	movs	r1, r5
 8018894:	f7e7 fde0 	bl	8000458 <__aeabi_dcmplt>
 8018898:	2800      	cmp	r0, #0
 801889a:	d000      	beq.n	801889e <_dtoa_r+0x476>
 801889c:	e130      	b.n	8018b00 <_dtoa_r+0x6d8>
 801889e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80188a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80188a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80188a4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80188a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	da00      	bge.n	80188ae <_dtoa_r+0x486>
 80188ac:	e177      	b.n	8018b9e <_dtoa_r+0x776>
 80188ae:	9a04      	ldr	r2, [sp, #16]
 80188b0:	2a0e      	cmp	r2, #14
 80188b2:	dd00      	ble.n	80188b6 <_dtoa_r+0x48e>
 80188b4:	e173      	b.n	8018b9e <_dtoa_r+0x776>
 80188b6:	4ba0      	ldr	r3, [pc, #640]	@ (8018b38 <_dtoa_r+0x710>)
 80188b8:	00d2      	lsls	r2, r2, #3
 80188ba:	189b      	adds	r3, r3, r2
 80188bc:	685c      	ldr	r4, [r3, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	9306      	str	r3, [sp, #24]
 80188c2:	9407      	str	r4, [sp, #28]
 80188c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	da03      	bge.n	80188d2 <_dtoa_r+0x4aa>
 80188ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	dc00      	bgt.n	80188d2 <_dtoa_r+0x4aa>
 80188d0:	e106      	b.n	8018ae0 <_dtoa_r+0x6b8>
 80188d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80188d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80188d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188d8:	9d08      	ldr	r5, [sp, #32]
 80188da:	3b01      	subs	r3, #1
 80188dc:	195b      	adds	r3, r3, r5
 80188de:	930a      	str	r3, [sp, #40]	@ 0x28
 80188e0:	9a06      	ldr	r2, [sp, #24]
 80188e2:	9b07      	ldr	r3, [sp, #28]
 80188e4:	0030      	movs	r0, r6
 80188e6:	0039      	movs	r1, r7
 80188e8:	f7e9 f9e2 	bl	8001cb0 <__aeabi_ddiv>
 80188ec:	f7ea fcaa 	bl	8003244 <__aeabi_d2iz>
 80188f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80188f2:	f7ea fce3 	bl	80032bc <__aeabi_i2d>
 80188f6:	9a06      	ldr	r2, [sp, #24]
 80188f8:	9b07      	ldr	r3, [sp, #28]
 80188fa:	f7e9 fe1d 	bl	8002538 <__aeabi_dmul>
 80188fe:	0002      	movs	r2, r0
 8018900:	000b      	movs	r3, r1
 8018902:	0030      	movs	r0, r6
 8018904:	0039      	movs	r1, r7
 8018906:	f7ea f8df 	bl	8002ac8 <__aeabi_dsub>
 801890a:	002b      	movs	r3, r5
 801890c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801890e:	3501      	adds	r5, #1
 8018910:	3230      	adds	r2, #48	@ 0x30
 8018912:	701a      	strb	r2, [r3, #0]
 8018914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018916:	002c      	movs	r4, r5
 8018918:	429a      	cmp	r2, r3
 801891a:	d000      	beq.n	801891e <_dtoa_r+0x4f6>
 801891c:	e131      	b.n	8018b82 <_dtoa_r+0x75a>
 801891e:	0002      	movs	r2, r0
 8018920:	000b      	movs	r3, r1
 8018922:	f7e8 fe61 	bl	80015e8 <__aeabi_dadd>
 8018926:	9a06      	ldr	r2, [sp, #24]
 8018928:	9b07      	ldr	r3, [sp, #28]
 801892a:	0006      	movs	r6, r0
 801892c:	000f      	movs	r7, r1
 801892e:	f7e7 fda7 	bl	8000480 <__aeabi_dcmpgt>
 8018932:	2800      	cmp	r0, #0
 8018934:	d000      	beq.n	8018938 <_dtoa_r+0x510>
 8018936:	e10f      	b.n	8018b58 <_dtoa_r+0x730>
 8018938:	9a06      	ldr	r2, [sp, #24]
 801893a:	9b07      	ldr	r3, [sp, #28]
 801893c:	0030      	movs	r0, r6
 801893e:	0039      	movs	r1, r7
 8018940:	f7e7 fd84 	bl	800044c <__aeabi_dcmpeq>
 8018944:	2800      	cmp	r0, #0
 8018946:	d003      	beq.n	8018950 <_dtoa_r+0x528>
 8018948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801894a:	07dd      	lsls	r5, r3, #31
 801894c:	d500      	bpl.n	8018950 <_dtoa_r+0x528>
 801894e:	e103      	b.n	8018b58 <_dtoa_r+0x730>
 8018950:	9905      	ldr	r1, [sp, #20]
 8018952:	9803      	ldr	r0, [sp, #12]
 8018954:	f000 fca6 	bl	80192a4 <_Bfree>
 8018958:	2300      	movs	r3, #0
 801895a:	7023      	strb	r3, [r4, #0]
 801895c:	9b04      	ldr	r3, [sp, #16]
 801895e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018960:	3301      	adds	r3, #1
 8018962:	6013      	str	r3, [r2, #0]
 8018964:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018966:	2b00      	cmp	r3, #0
 8018968:	d100      	bne.n	801896c <_dtoa_r+0x544>
 801896a:	e5a7      	b.n	80184bc <_dtoa_r+0x94>
 801896c:	601c      	str	r4, [r3, #0]
 801896e:	e5a5      	b.n	80184bc <_dtoa_r+0x94>
 8018970:	423d      	tst	r5, r7
 8018972:	d005      	beq.n	8018980 <_dtoa_r+0x558>
 8018974:	6832      	ldr	r2, [r6, #0]
 8018976:	6873      	ldr	r3, [r6, #4]
 8018978:	f7e9 fdde 	bl	8002538 <__aeabi_dmul>
 801897c:	003b      	movs	r3, r7
 801897e:	3401      	adds	r4, #1
 8018980:	106d      	asrs	r5, r5, #1
 8018982:	3608      	adds	r6, #8
 8018984:	e736      	b.n	80187f4 <_dtoa_r+0x3cc>
 8018986:	9b04      	ldr	r3, [sp, #16]
 8018988:	930c      	str	r3, [sp, #48]	@ 0x30
 801898a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801898c:	e75a      	b.n	8018844 <_dtoa_r+0x41c>
 801898e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018990:	4b69      	ldr	r3, [pc, #420]	@ (8018b38 <_dtoa_r+0x710>)
 8018992:	3a01      	subs	r2, #1
 8018994:	00d2      	lsls	r2, r2, #3
 8018996:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018998:	189b      	adds	r3, r3, r2
 801899a:	681a      	ldr	r2, [r3, #0]
 801899c:	685b      	ldr	r3, [r3, #4]
 801899e:	2900      	cmp	r1, #0
 80189a0:	d04c      	beq.n	8018a3c <_dtoa_r+0x614>
 80189a2:	2000      	movs	r0, #0
 80189a4:	496b      	ldr	r1, [pc, #428]	@ (8018b54 <_dtoa_r+0x72c>)
 80189a6:	f7e9 f983 	bl	8001cb0 <__aeabi_ddiv>
 80189aa:	0032      	movs	r2, r6
 80189ac:	003b      	movs	r3, r7
 80189ae:	f7ea f88b 	bl	8002ac8 <__aeabi_dsub>
 80189b2:	9a08      	ldr	r2, [sp, #32]
 80189b4:	0006      	movs	r6, r0
 80189b6:	4694      	mov	ip, r2
 80189b8:	000f      	movs	r7, r1
 80189ba:	9b08      	ldr	r3, [sp, #32]
 80189bc:	9316      	str	r3, [sp, #88]	@ 0x58
 80189be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80189c0:	4463      	add	r3, ip
 80189c2:	9311      	str	r3, [sp, #68]	@ 0x44
 80189c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80189c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80189c8:	f7ea fc3c 	bl	8003244 <__aeabi_d2iz>
 80189cc:	0005      	movs	r5, r0
 80189ce:	f7ea fc75 	bl	80032bc <__aeabi_i2d>
 80189d2:	0002      	movs	r2, r0
 80189d4:	000b      	movs	r3, r1
 80189d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80189d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80189da:	f7ea f875 	bl	8002ac8 <__aeabi_dsub>
 80189de:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80189e0:	3530      	adds	r5, #48	@ 0x30
 80189e2:	1c5c      	adds	r4, r3, #1
 80189e4:	701d      	strb	r5, [r3, #0]
 80189e6:	0032      	movs	r2, r6
 80189e8:	003b      	movs	r3, r7
 80189ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80189ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80189ee:	f7e7 fd33 	bl	8000458 <__aeabi_dcmplt>
 80189f2:	2800      	cmp	r0, #0
 80189f4:	d16a      	bne.n	8018acc <_dtoa_r+0x6a4>
 80189f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80189f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80189fa:	2000      	movs	r0, #0
 80189fc:	4950      	ldr	r1, [pc, #320]	@ (8018b40 <_dtoa_r+0x718>)
 80189fe:	f7ea f863 	bl	8002ac8 <__aeabi_dsub>
 8018a02:	0032      	movs	r2, r6
 8018a04:	003b      	movs	r3, r7
 8018a06:	f7e7 fd27 	bl	8000458 <__aeabi_dcmplt>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	d000      	beq.n	8018a10 <_dtoa_r+0x5e8>
 8018a0e:	e0a5      	b.n	8018b5c <_dtoa_r+0x734>
 8018a10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018a12:	42a3      	cmp	r3, r4
 8018a14:	d100      	bne.n	8018a18 <_dtoa_r+0x5f0>
 8018a16:	e742      	b.n	801889e <_dtoa_r+0x476>
 8018a18:	2200      	movs	r2, #0
 8018a1a:	0030      	movs	r0, r6
 8018a1c:	0039      	movs	r1, r7
 8018a1e:	4b49      	ldr	r3, [pc, #292]	@ (8018b44 <_dtoa_r+0x71c>)
 8018a20:	f7e9 fd8a 	bl	8002538 <__aeabi_dmul>
 8018a24:	2200      	movs	r2, #0
 8018a26:	0006      	movs	r6, r0
 8018a28:	000f      	movs	r7, r1
 8018a2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018a2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018a2e:	4b45      	ldr	r3, [pc, #276]	@ (8018b44 <_dtoa_r+0x71c>)
 8018a30:	f7e9 fd82 	bl	8002538 <__aeabi_dmul>
 8018a34:	9416      	str	r4, [sp, #88]	@ 0x58
 8018a36:	900a      	str	r0, [sp, #40]	@ 0x28
 8018a38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018a3a:	e7c3      	b.n	80189c4 <_dtoa_r+0x59c>
 8018a3c:	0030      	movs	r0, r6
 8018a3e:	0039      	movs	r1, r7
 8018a40:	f7e9 fd7a 	bl	8002538 <__aeabi_dmul>
 8018a44:	9d08      	ldr	r5, [sp, #32]
 8018a46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018a48:	002b      	movs	r3, r5
 8018a4a:	4694      	mov	ip, r2
 8018a4c:	9016      	str	r0, [sp, #88]	@ 0x58
 8018a4e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018a50:	4463      	add	r3, ip
 8018a52:	9319      	str	r3, [sp, #100]	@ 0x64
 8018a54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018a56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018a58:	f7ea fbf4 	bl	8003244 <__aeabi_d2iz>
 8018a5c:	0004      	movs	r4, r0
 8018a5e:	f7ea fc2d 	bl	80032bc <__aeabi_i2d>
 8018a62:	000b      	movs	r3, r1
 8018a64:	0002      	movs	r2, r0
 8018a66:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018a6a:	f7ea f82d 	bl	8002ac8 <__aeabi_dsub>
 8018a6e:	3430      	adds	r4, #48	@ 0x30
 8018a70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a72:	702c      	strb	r4, [r5, #0]
 8018a74:	3501      	adds	r5, #1
 8018a76:	0006      	movs	r6, r0
 8018a78:	000f      	movs	r7, r1
 8018a7a:	42ab      	cmp	r3, r5
 8018a7c:	d129      	bne.n	8018ad2 <_dtoa_r+0x6aa>
 8018a7e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8018a80:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018a82:	9b08      	ldr	r3, [sp, #32]
 8018a84:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018a86:	469c      	mov	ip, r3
 8018a88:	2200      	movs	r2, #0
 8018a8a:	4b32      	ldr	r3, [pc, #200]	@ (8018b54 <_dtoa_r+0x72c>)
 8018a8c:	4464      	add	r4, ip
 8018a8e:	f7e8 fdab 	bl	80015e8 <__aeabi_dadd>
 8018a92:	0002      	movs	r2, r0
 8018a94:	000b      	movs	r3, r1
 8018a96:	0030      	movs	r0, r6
 8018a98:	0039      	movs	r1, r7
 8018a9a:	f7e7 fcf1 	bl	8000480 <__aeabi_dcmpgt>
 8018a9e:	2800      	cmp	r0, #0
 8018aa0:	d15c      	bne.n	8018b5c <_dtoa_r+0x734>
 8018aa2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018aa4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018aa6:	2000      	movs	r0, #0
 8018aa8:	492a      	ldr	r1, [pc, #168]	@ (8018b54 <_dtoa_r+0x72c>)
 8018aaa:	f7ea f80d 	bl	8002ac8 <__aeabi_dsub>
 8018aae:	0002      	movs	r2, r0
 8018ab0:	000b      	movs	r3, r1
 8018ab2:	0030      	movs	r0, r6
 8018ab4:	0039      	movs	r1, r7
 8018ab6:	f7e7 fccf 	bl	8000458 <__aeabi_dcmplt>
 8018aba:	2800      	cmp	r0, #0
 8018abc:	d100      	bne.n	8018ac0 <_dtoa_r+0x698>
 8018abe:	e6ee      	b.n	801889e <_dtoa_r+0x476>
 8018ac0:	0023      	movs	r3, r4
 8018ac2:	3c01      	subs	r4, #1
 8018ac4:	7822      	ldrb	r2, [r4, #0]
 8018ac6:	2a30      	cmp	r2, #48	@ 0x30
 8018ac8:	d0fa      	beq.n	8018ac0 <_dtoa_r+0x698>
 8018aca:	001c      	movs	r4, r3
 8018acc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ace:	9304      	str	r3, [sp, #16]
 8018ad0:	e73e      	b.n	8018950 <_dtoa_r+0x528>
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8018b44 <_dtoa_r+0x71c>)
 8018ad6:	f7e9 fd2f 	bl	8002538 <__aeabi_dmul>
 8018ada:	900a      	str	r0, [sp, #40]	@ 0x28
 8018adc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018ade:	e7b9      	b.n	8018a54 <_dtoa_r+0x62c>
 8018ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d10c      	bne.n	8018b00 <_dtoa_r+0x6d8>
 8018ae6:	9806      	ldr	r0, [sp, #24]
 8018ae8:	9907      	ldr	r1, [sp, #28]
 8018aea:	2200      	movs	r2, #0
 8018aec:	4b18      	ldr	r3, [pc, #96]	@ (8018b50 <_dtoa_r+0x728>)
 8018aee:	f7e9 fd23 	bl	8002538 <__aeabi_dmul>
 8018af2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018af4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018af6:	f7e7 fccd 	bl	8000494 <__aeabi_dcmpge>
 8018afa:	2800      	cmp	r0, #0
 8018afc:	d100      	bne.n	8018b00 <_dtoa_r+0x6d8>
 8018afe:	e164      	b.n	8018dca <_dtoa_r+0x9a2>
 8018b00:	2600      	movs	r6, #0
 8018b02:	0037      	movs	r7, r6
 8018b04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018b06:	9c08      	ldr	r4, [sp, #32]
 8018b08:	43db      	mvns	r3, r3
 8018b0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	9304      	str	r3, [sp, #16]
 8018b10:	0031      	movs	r1, r6
 8018b12:	9803      	ldr	r0, [sp, #12]
 8018b14:	f000 fbc6 	bl	80192a4 <_Bfree>
 8018b18:	2f00      	cmp	r7, #0
 8018b1a:	d0d7      	beq.n	8018acc <_dtoa_r+0x6a4>
 8018b1c:	9b04      	ldr	r3, [sp, #16]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d005      	beq.n	8018b2e <_dtoa_r+0x706>
 8018b22:	42bb      	cmp	r3, r7
 8018b24:	d003      	beq.n	8018b2e <_dtoa_r+0x706>
 8018b26:	0019      	movs	r1, r3
 8018b28:	9803      	ldr	r0, [sp, #12]
 8018b2a:	f000 fbbb 	bl	80192a4 <_Bfree>
 8018b2e:	0039      	movs	r1, r7
 8018b30:	9803      	ldr	r0, [sp, #12]
 8018b32:	f000 fbb7 	bl	80192a4 <_Bfree>
 8018b36:	e7c9      	b.n	8018acc <_dtoa_r+0x6a4>
 8018b38:	0801bf40 	.word	0x0801bf40
 8018b3c:	0801bf18 	.word	0x0801bf18
 8018b40:	3ff00000 	.word	0x3ff00000
 8018b44:	40240000 	.word	0x40240000
 8018b48:	401c0000 	.word	0x401c0000
 8018b4c:	fcc00000 	.word	0xfcc00000
 8018b50:	40140000 	.word	0x40140000
 8018b54:	3fe00000 	.word	0x3fe00000
 8018b58:	9b04      	ldr	r3, [sp, #16]
 8018b5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b5c:	0023      	movs	r3, r4
 8018b5e:	001c      	movs	r4, r3
 8018b60:	3b01      	subs	r3, #1
 8018b62:	781a      	ldrb	r2, [r3, #0]
 8018b64:	2a39      	cmp	r2, #57	@ 0x39
 8018b66:	d108      	bne.n	8018b7a <_dtoa_r+0x752>
 8018b68:	9a08      	ldr	r2, [sp, #32]
 8018b6a:	429a      	cmp	r2, r3
 8018b6c:	d1f7      	bne.n	8018b5e <_dtoa_r+0x736>
 8018b6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018b70:	9908      	ldr	r1, [sp, #32]
 8018b72:	3201      	adds	r2, #1
 8018b74:	920c      	str	r2, [sp, #48]	@ 0x30
 8018b76:	2230      	movs	r2, #48	@ 0x30
 8018b78:	700a      	strb	r2, [r1, #0]
 8018b7a:	781a      	ldrb	r2, [r3, #0]
 8018b7c:	3201      	adds	r2, #1
 8018b7e:	701a      	strb	r2, [r3, #0]
 8018b80:	e7a4      	b.n	8018acc <_dtoa_r+0x6a4>
 8018b82:	2200      	movs	r2, #0
 8018b84:	4bc6      	ldr	r3, [pc, #792]	@ (8018ea0 <_dtoa_r+0xa78>)
 8018b86:	f7e9 fcd7 	bl	8002538 <__aeabi_dmul>
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	0006      	movs	r6, r0
 8018b90:	000f      	movs	r7, r1
 8018b92:	f7e7 fc5b 	bl	800044c <__aeabi_dcmpeq>
 8018b96:	2800      	cmp	r0, #0
 8018b98:	d100      	bne.n	8018b9c <_dtoa_r+0x774>
 8018b9a:	e6a1      	b.n	80188e0 <_dtoa_r+0x4b8>
 8018b9c:	e6d8      	b.n	8018950 <_dtoa_r+0x528>
 8018b9e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018ba0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018ba2:	9c06      	ldr	r4, [sp, #24]
 8018ba4:	2f00      	cmp	r7, #0
 8018ba6:	d014      	beq.n	8018bd2 <_dtoa_r+0x7aa>
 8018ba8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018baa:	2a01      	cmp	r2, #1
 8018bac:	dd00      	ble.n	8018bb0 <_dtoa_r+0x788>
 8018bae:	e0c8      	b.n	8018d42 <_dtoa_r+0x91a>
 8018bb0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018bb2:	2a00      	cmp	r2, #0
 8018bb4:	d100      	bne.n	8018bb8 <_dtoa_r+0x790>
 8018bb6:	e0be      	b.n	8018d36 <_dtoa_r+0x90e>
 8018bb8:	4aba      	ldr	r2, [pc, #744]	@ (8018ea4 <_dtoa_r+0xa7c>)
 8018bba:	189b      	adds	r3, r3, r2
 8018bbc:	9a06      	ldr	r2, [sp, #24]
 8018bbe:	2101      	movs	r1, #1
 8018bc0:	18d2      	adds	r2, r2, r3
 8018bc2:	9206      	str	r2, [sp, #24]
 8018bc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018bc6:	9803      	ldr	r0, [sp, #12]
 8018bc8:	18d3      	adds	r3, r2, r3
 8018bca:	930d      	str	r3, [sp, #52]	@ 0x34
 8018bcc:	f000 fc22 	bl	8019414 <__i2b>
 8018bd0:	0007      	movs	r7, r0
 8018bd2:	2c00      	cmp	r4, #0
 8018bd4:	d00e      	beq.n	8018bf4 <_dtoa_r+0x7cc>
 8018bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	dd0b      	ble.n	8018bf4 <_dtoa_r+0x7cc>
 8018bdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018bde:	0023      	movs	r3, r4
 8018be0:	4294      	cmp	r4, r2
 8018be2:	dd00      	ble.n	8018be6 <_dtoa_r+0x7be>
 8018be4:	0013      	movs	r3, r2
 8018be6:	9a06      	ldr	r2, [sp, #24]
 8018be8:	1ae4      	subs	r4, r4, r3
 8018bea:	1ad2      	subs	r2, r2, r3
 8018bec:	9206      	str	r2, [sp, #24]
 8018bee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018bf0:	1ad3      	subs	r3, r2, r3
 8018bf2:	930d      	str	r3, [sp, #52]	@ 0x34
 8018bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d01f      	beq.n	8018c3a <_dtoa_r+0x812>
 8018bfa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d100      	bne.n	8018c02 <_dtoa_r+0x7da>
 8018c00:	e0b5      	b.n	8018d6e <_dtoa_r+0x946>
 8018c02:	2d00      	cmp	r5, #0
 8018c04:	d010      	beq.n	8018c28 <_dtoa_r+0x800>
 8018c06:	0039      	movs	r1, r7
 8018c08:	002a      	movs	r2, r5
 8018c0a:	9803      	ldr	r0, [sp, #12]
 8018c0c:	f000 fccc 	bl	80195a8 <__pow5mult>
 8018c10:	9a05      	ldr	r2, [sp, #20]
 8018c12:	0001      	movs	r1, r0
 8018c14:	0007      	movs	r7, r0
 8018c16:	9803      	ldr	r0, [sp, #12]
 8018c18:	f000 fc14 	bl	8019444 <__multiply>
 8018c1c:	0006      	movs	r6, r0
 8018c1e:	9905      	ldr	r1, [sp, #20]
 8018c20:	9803      	ldr	r0, [sp, #12]
 8018c22:	f000 fb3f 	bl	80192a4 <_Bfree>
 8018c26:	9605      	str	r6, [sp, #20]
 8018c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018c2a:	1b5a      	subs	r2, r3, r5
 8018c2c:	42ab      	cmp	r3, r5
 8018c2e:	d004      	beq.n	8018c3a <_dtoa_r+0x812>
 8018c30:	9905      	ldr	r1, [sp, #20]
 8018c32:	9803      	ldr	r0, [sp, #12]
 8018c34:	f000 fcb8 	bl	80195a8 <__pow5mult>
 8018c38:	9005      	str	r0, [sp, #20]
 8018c3a:	2101      	movs	r1, #1
 8018c3c:	9803      	ldr	r0, [sp, #12]
 8018c3e:	f000 fbe9 	bl	8019414 <__i2b>
 8018c42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018c44:	0006      	movs	r6, r0
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d100      	bne.n	8018c4c <_dtoa_r+0x824>
 8018c4a:	e1bc      	b.n	8018fc6 <_dtoa_r+0xb9e>
 8018c4c:	001a      	movs	r2, r3
 8018c4e:	0001      	movs	r1, r0
 8018c50:	9803      	ldr	r0, [sp, #12]
 8018c52:	f000 fca9 	bl	80195a8 <__pow5mult>
 8018c56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018c58:	0006      	movs	r6, r0
 8018c5a:	2500      	movs	r5, #0
 8018c5c:	2b01      	cmp	r3, #1
 8018c5e:	dc16      	bgt.n	8018c8e <_dtoa_r+0x866>
 8018c60:	2500      	movs	r5, #0
 8018c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c64:	42ab      	cmp	r3, r5
 8018c66:	d10e      	bne.n	8018c86 <_dtoa_r+0x85e>
 8018c68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c6a:	031b      	lsls	r3, r3, #12
 8018c6c:	42ab      	cmp	r3, r5
 8018c6e:	d10a      	bne.n	8018c86 <_dtoa_r+0x85e>
 8018c70:	4b8d      	ldr	r3, [pc, #564]	@ (8018ea8 <_dtoa_r+0xa80>)
 8018c72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018c74:	4213      	tst	r3, r2
 8018c76:	d006      	beq.n	8018c86 <_dtoa_r+0x85e>
 8018c78:	9b06      	ldr	r3, [sp, #24]
 8018c7a:	3501      	adds	r5, #1
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	9306      	str	r3, [sp, #24]
 8018c80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018c82:	3301      	adds	r3, #1
 8018c84:	930d      	str	r3, [sp, #52]	@ 0x34
 8018c86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018c88:	2001      	movs	r0, #1
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d008      	beq.n	8018ca0 <_dtoa_r+0x878>
 8018c8e:	6933      	ldr	r3, [r6, #16]
 8018c90:	3303      	adds	r3, #3
 8018c92:	009b      	lsls	r3, r3, #2
 8018c94:	18f3      	adds	r3, r6, r3
 8018c96:	6858      	ldr	r0, [r3, #4]
 8018c98:	f000 fb6c 	bl	8019374 <__hi0bits>
 8018c9c:	2320      	movs	r3, #32
 8018c9e:	1a18      	subs	r0, r3, r0
 8018ca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ca2:	1818      	adds	r0, r3, r0
 8018ca4:	0002      	movs	r2, r0
 8018ca6:	231f      	movs	r3, #31
 8018ca8:	401a      	ands	r2, r3
 8018caa:	4218      	tst	r0, r3
 8018cac:	d065      	beq.n	8018d7a <_dtoa_r+0x952>
 8018cae:	3301      	adds	r3, #1
 8018cb0:	1a9b      	subs	r3, r3, r2
 8018cb2:	2b04      	cmp	r3, #4
 8018cb4:	dd5d      	ble.n	8018d72 <_dtoa_r+0x94a>
 8018cb6:	231c      	movs	r3, #28
 8018cb8:	1a9b      	subs	r3, r3, r2
 8018cba:	9a06      	ldr	r2, [sp, #24]
 8018cbc:	18e4      	adds	r4, r4, r3
 8018cbe:	18d2      	adds	r2, r2, r3
 8018cc0:	9206      	str	r2, [sp, #24]
 8018cc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018cc4:	18d3      	adds	r3, r2, r3
 8018cc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8018cc8:	9b06      	ldr	r3, [sp, #24]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	dd05      	ble.n	8018cda <_dtoa_r+0x8b2>
 8018cce:	001a      	movs	r2, r3
 8018cd0:	9905      	ldr	r1, [sp, #20]
 8018cd2:	9803      	ldr	r0, [sp, #12]
 8018cd4:	f000 fcc4 	bl	8019660 <__lshift>
 8018cd8:	9005      	str	r0, [sp, #20]
 8018cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	dd05      	ble.n	8018cec <_dtoa_r+0x8c4>
 8018ce0:	0031      	movs	r1, r6
 8018ce2:	001a      	movs	r2, r3
 8018ce4:	9803      	ldr	r0, [sp, #12]
 8018ce6:	f000 fcbb 	bl	8019660 <__lshift>
 8018cea:	0006      	movs	r6, r0
 8018cec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d045      	beq.n	8018d7e <_dtoa_r+0x956>
 8018cf2:	0031      	movs	r1, r6
 8018cf4:	9805      	ldr	r0, [sp, #20]
 8018cf6:	f000 fd1f 	bl	8019738 <__mcmp>
 8018cfa:	2800      	cmp	r0, #0
 8018cfc:	da3f      	bge.n	8018d7e <_dtoa_r+0x956>
 8018cfe:	9b04      	ldr	r3, [sp, #16]
 8018d00:	220a      	movs	r2, #10
 8018d02:	3b01      	subs	r3, #1
 8018d04:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d06:	9905      	ldr	r1, [sp, #20]
 8018d08:	2300      	movs	r3, #0
 8018d0a:	9803      	ldr	r0, [sp, #12]
 8018d0c:	f000 faee 	bl	80192ec <__multadd>
 8018d10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018d12:	9005      	str	r0, [sp, #20]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d100      	bne.n	8018d1a <_dtoa_r+0x8f2>
 8018d18:	e15c      	b.n	8018fd4 <_dtoa_r+0xbac>
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	0039      	movs	r1, r7
 8018d1e:	220a      	movs	r2, #10
 8018d20:	9803      	ldr	r0, [sp, #12]
 8018d22:	f000 fae3 	bl	80192ec <__multadd>
 8018d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d28:	0007      	movs	r7, r0
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	dc55      	bgt.n	8018dda <_dtoa_r+0x9b2>
 8018d2e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018d30:	2b02      	cmp	r3, #2
 8018d32:	dc2d      	bgt.n	8018d90 <_dtoa_r+0x968>
 8018d34:	e051      	b.n	8018dda <_dtoa_r+0x9b2>
 8018d36:	2336      	movs	r3, #54	@ 0x36
 8018d38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018d3a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018d3c:	9c06      	ldr	r4, [sp, #24]
 8018d3e:	1a9b      	subs	r3, r3, r2
 8018d40:	e73c      	b.n	8018bbc <_dtoa_r+0x794>
 8018d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d44:	1e5d      	subs	r5, r3, #1
 8018d46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d48:	42ab      	cmp	r3, r5
 8018d4a:	db08      	blt.n	8018d5e <_dtoa_r+0x936>
 8018d4c:	1b5d      	subs	r5, r3, r5
 8018d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d50:	9c06      	ldr	r4, [sp, #24]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	db00      	blt.n	8018d58 <_dtoa_r+0x930>
 8018d56:	e731      	b.n	8018bbc <_dtoa_r+0x794>
 8018d58:	1ae4      	subs	r4, r4, r3
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	e72e      	b.n	8018bbc <_dtoa_r+0x794>
 8018d5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018d62:	1aeb      	subs	r3, r5, r3
 8018d64:	18d3      	adds	r3, r2, r3
 8018d66:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018d68:	9314      	str	r3, [sp, #80]	@ 0x50
 8018d6a:	2500      	movs	r5, #0
 8018d6c:	e7ef      	b.n	8018d4e <_dtoa_r+0x926>
 8018d6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018d70:	e75e      	b.n	8018c30 <_dtoa_r+0x808>
 8018d72:	2b04      	cmp	r3, #4
 8018d74:	d0a8      	beq.n	8018cc8 <_dtoa_r+0x8a0>
 8018d76:	331c      	adds	r3, #28
 8018d78:	e79f      	b.n	8018cba <_dtoa_r+0x892>
 8018d7a:	0013      	movs	r3, r2
 8018d7c:	e7fb      	b.n	8018d76 <_dtoa_r+0x94e>
 8018d7e:	9b04      	ldr	r3, [sp, #16]
 8018d80:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d84:	930e      	str	r3, [sp, #56]	@ 0x38
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	dc23      	bgt.n	8018dd2 <_dtoa_r+0x9aa>
 8018d8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018d8c:	2b02      	cmp	r3, #2
 8018d8e:	dd20      	ble.n	8018dd2 <_dtoa_r+0x9aa>
 8018d90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d000      	beq.n	8018d98 <_dtoa_r+0x970>
 8018d96:	e6b5      	b.n	8018b04 <_dtoa_r+0x6dc>
 8018d98:	0031      	movs	r1, r6
 8018d9a:	2205      	movs	r2, #5
 8018d9c:	9803      	ldr	r0, [sp, #12]
 8018d9e:	f000 faa5 	bl	80192ec <__multadd>
 8018da2:	0006      	movs	r6, r0
 8018da4:	0001      	movs	r1, r0
 8018da6:	9805      	ldr	r0, [sp, #20]
 8018da8:	f000 fcc6 	bl	8019738 <__mcmp>
 8018dac:	2800      	cmp	r0, #0
 8018dae:	dc00      	bgt.n	8018db2 <_dtoa_r+0x98a>
 8018db0:	e6a8      	b.n	8018b04 <_dtoa_r+0x6dc>
 8018db2:	9b08      	ldr	r3, [sp, #32]
 8018db4:	9a08      	ldr	r2, [sp, #32]
 8018db6:	1c5c      	adds	r4, r3, #1
 8018db8:	2331      	movs	r3, #49	@ 0x31
 8018dba:	7013      	strb	r3, [r2, #0]
 8018dbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018dbe:	3301      	adds	r3, #1
 8018dc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8018dc2:	e6a3      	b.n	8018b0c <_dtoa_r+0x6e4>
 8018dc4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018dc6:	0037      	movs	r7, r6
 8018dc8:	e7f3      	b.n	8018db2 <_dtoa_r+0x98a>
 8018dca:	9b04      	ldr	r3, [sp, #16]
 8018dcc:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8018dce:	930c      	str	r3, [sp, #48]	@ 0x30
 8018dd0:	e7f9      	b.n	8018dc6 <_dtoa_r+0x99e>
 8018dd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d100      	bne.n	8018dda <_dtoa_r+0x9b2>
 8018dd8:	e100      	b.n	8018fdc <_dtoa_r+0xbb4>
 8018dda:	2c00      	cmp	r4, #0
 8018ddc:	dd05      	ble.n	8018dea <_dtoa_r+0x9c2>
 8018dde:	0039      	movs	r1, r7
 8018de0:	0022      	movs	r2, r4
 8018de2:	9803      	ldr	r0, [sp, #12]
 8018de4:	f000 fc3c 	bl	8019660 <__lshift>
 8018de8:	0007      	movs	r7, r0
 8018dea:	0038      	movs	r0, r7
 8018dec:	2d00      	cmp	r5, #0
 8018dee:	d018      	beq.n	8018e22 <_dtoa_r+0x9fa>
 8018df0:	6879      	ldr	r1, [r7, #4]
 8018df2:	9803      	ldr	r0, [sp, #12]
 8018df4:	f000 fa12 	bl	801921c <_Balloc>
 8018df8:	1e04      	subs	r4, r0, #0
 8018dfa:	d105      	bne.n	8018e08 <_dtoa_r+0x9e0>
 8018dfc:	0022      	movs	r2, r4
 8018dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8018eac <_dtoa_r+0xa84>)
 8018e00:	482b      	ldr	r0, [pc, #172]	@ (8018eb0 <_dtoa_r+0xa88>)
 8018e02:	492c      	ldr	r1, [pc, #176]	@ (8018eb4 <_dtoa_r+0xa8c>)
 8018e04:	f7ff fb25 	bl	8018452 <_dtoa_r+0x2a>
 8018e08:	0039      	movs	r1, r7
 8018e0a:	693a      	ldr	r2, [r7, #16]
 8018e0c:	310c      	adds	r1, #12
 8018e0e:	3202      	adds	r2, #2
 8018e10:	0092      	lsls	r2, r2, #2
 8018e12:	300c      	adds	r0, #12
 8018e14:	f7ff fa70 	bl	80182f8 <memcpy>
 8018e18:	2201      	movs	r2, #1
 8018e1a:	0021      	movs	r1, r4
 8018e1c:	9803      	ldr	r0, [sp, #12]
 8018e1e:	f000 fc1f 	bl	8019660 <__lshift>
 8018e22:	9b08      	ldr	r3, [sp, #32]
 8018e24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018e26:	9306      	str	r3, [sp, #24]
 8018e28:	3b01      	subs	r3, #1
 8018e2a:	189b      	adds	r3, r3, r2
 8018e2c:	2201      	movs	r2, #1
 8018e2e:	9704      	str	r7, [sp, #16]
 8018e30:	0007      	movs	r7, r0
 8018e32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018e36:	4013      	ands	r3, r2
 8018e38:	930e      	str	r3, [sp, #56]	@ 0x38
 8018e3a:	0031      	movs	r1, r6
 8018e3c:	9805      	ldr	r0, [sp, #20]
 8018e3e:	f7ff fa64 	bl	801830a <quorem>
 8018e42:	9904      	ldr	r1, [sp, #16]
 8018e44:	0005      	movs	r5, r0
 8018e46:	900a      	str	r0, [sp, #40]	@ 0x28
 8018e48:	9805      	ldr	r0, [sp, #20]
 8018e4a:	f000 fc75 	bl	8019738 <__mcmp>
 8018e4e:	003a      	movs	r2, r7
 8018e50:	900d      	str	r0, [sp, #52]	@ 0x34
 8018e52:	0031      	movs	r1, r6
 8018e54:	9803      	ldr	r0, [sp, #12]
 8018e56:	f000 fc8b 	bl	8019770 <__mdiff>
 8018e5a:	2201      	movs	r2, #1
 8018e5c:	68c3      	ldr	r3, [r0, #12]
 8018e5e:	0004      	movs	r4, r0
 8018e60:	3530      	adds	r5, #48	@ 0x30
 8018e62:	9209      	str	r2, [sp, #36]	@ 0x24
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d104      	bne.n	8018e72 <_dtoa_r+0xa4a>
 8018e68:	0001      	movs	r1, r0
 8018e6a:	9805      	ldr	r0, [sp, #20]
 8018e6c:	f000 fc64 	bl	8019738 <__mcmp>
 8018e70:	9009      	str	r0, [sp, #36]	@ 0x24
 8018e72:	0021      	movs	r1, r4
 8018e74:	9803      	ldr	r0, [sp, #12]
 8018e76:	f000 fa15 	bl	80192a4 <_Bfree>
 8018e7a:	9b06      	ldr	r3, [sp, #24]
 8018e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e7e:	1c5c      	adds	r4, r3, #1
 8018e80:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018e82:	4313      	orrs	r3, r2
 8018e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018e86:	4313      	orrs	r3, r2
 8018e88:	d116      	bne.n	8018eb8 <_dtoa_r+0xa90>
 8018e8a:	2d39      	cmp	r5, #57	@ 0x39
 8018e8c:	d02f      	beq.n	8018eee <_dtoa_r+0xac6>
 8018e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	dd01      	ble.n	8018e98 <_dtoa_r+0xa70>
 8018e94:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018e96:	3531      	adds	r5, #49	@ 0x31
 8018e98:	9b06      	ldr	r3, [sp, #24]
 8018e9a:	701d      	strb	r5, [r3, #0]
 8018e9c:	e638      	b.n	8018b10 <_dtoa_r+0x6e8>
 8018e9e:	46c0      	nop			@ (mov r8, r8)
 8018ea0:	40240000 	.word	0x40240000
 8018ea4:	00000433 	.word	0x00000433
 8018ea8:	7ff00000 	.word	0x7ff00000
 8018eac:	0801be9c 	.word	0x0801be9c
 8018eb0:	0801be44 	.word	0x0801be44
 8018eb4:	000002ef 	.word	0x000002ef
 8018eb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	db04      	blt.n	8018ec8 <_dtoa_r+0xaa0>
 8018ebe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018ec0:	4313      	orrs	r3, r2
 8018ec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ec4:	4313      	orrs	r3, r2
 8018ec6:	d11e      	bne.n	8018f06 <_dtoa_r+0xade>
 8018ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	dde4      	ble.n	8018e98 <_dtoa_r+0xa70>
 8018ece:	9905      	ldr	r1, [sp, #20]
 8018ed0:	2201      	movs	r2, #1
 8018ed2:	9803      	ldr	r0, [sp, #12]
 8018ed4:	f000 fbc4 	bl	8019660 <__lshift>
 8018ed8:	0031      	movs	r1, r6
 8018eda:	9005      	str	r0, [sp, #20]
 8018edc:	f000 fc2c 	bl	8019738 <__mcmp>
 8018ee0:	2800      	cmp	r0, #0
 8018ee2:	dc02      	bgt.n	8018eea <_dtoa_r+0xac2>
 8018ee4:	d1d8      	bne.n	8018e98 <_dtoa_r+0xa70>
 8018ee6:	07eb      	lsls	r3, r5, #31
 8018ee8:	d5d6      	bpl.n	8018e98 <_dtoa_r+0xa70>
 8018eea:	2d39      	cmp	r5, #57	@ 0x39
 8018eec:	d1d2      	bne.n	8018e94 <_dtoa_r+0xa6c>
 8018eee:	2339      	movs	r3, #57	@ 0x39
 8018ef0:	9a06      	ldr	r2, [sp, #24]
 8018ef2:	7013      	strb	r3, [r2, #0]
 8018ef4:	0023      	movs	r3, r4
 8018ef6:	001c      	movs	r4, r3
 8018ef8:	3b01      	subs	r3, #1
 8018efa:	781a      	ldrb	r2, [r3, #0]
 8018efc:	2a39      	cmp	r2, #57	@ 0x39
 8018efe:	d04f      	beq.n	8018fa0 <_dtoa_r+0xb78>
 8018f00:	3201      	adds	r2, #1
 8018f02:	701a      	strb	r2, [r3, #0]
 8018f04:	e604      	b.n	8018b10 <_dtoa_r+0x6e8>
 8018f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	dd03      	ble.n	8018f14 <_dtoa_r+0xaec>
 8018f0c:	2d39      	cmp	r5, #57	@ 0x39
 8018f0e:	d0ee      	beq.n	8018eee <_dtoa_r+0xac6>
 8018f10:	3501      	adds	r5, #1
 8018f12:	e7c1      	b.n	8018e98 <_dtoa_r+0xa70>
 8018f14:	9b06      	ldr	r3, [sp, #24]
 8018f16:	9a06      	ldr	r2, [sp, #24]
 8018f18:	701d      	strb	r5, [r3, #0]
 8018f1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f1c:	4293      	cmp	r3, r2
 8018f1e:	d02a      	beq.n	8018f76 <_dtoa_r+0xb4e>
 8018f20:	2300      	movs	r3, #0
 8018f22:	220a      	movs	r2, #10
 8018f24:	9905      	ldr	r1, [sp, #20]
 8018f26:	9803      	ldr	r0, [sp, #12]
 8018f28:	f000 f9e0 	bl	80192ec <__multadd>
 8018f2c:	9b04      	ldr	r3, [sp, #16]
 8018f2e:	9005      	str	r0, [sp, #20]
 8018f30:	42bb      	cmp	r3, r7
 8018f32:	d109      	bne.n	8018f48 <_dtoa_r+0xb20>
 8018f34:	2300      	movs	r3, #0
 8018f36:	220a      	movs	r2, #10
 8018f38:	9904      	ldr	r1, [sp, #16]
 8018f3a:	9803      	ldr	r0, [sp, #12]
 8018f3c:	f000 f9d6 	bl	80192ec <__multadd>
 8018f40:	9004      	str	r0, [sp, #16]
 8018f42:	0007      	movs	r7, r0
 8018f44:	9406      	str	r4, [sp, #24]
 8018f46:	e778      	b.n	8018e3a <_dtoa_r+0xa12>
 8018f48:	9904      	ldr	r1, [sp, #16]
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	220a      	movs	r2, #10
 8018f4e:	9803      	ldr	r0, [sp, #12]
 8018f50:	f000 f9cc 	bl	80192ec <__multadd>
 8018f54:	2300      	movs	r3, #0
 8018f56:	9004      	str	r0, [sp, #16]
 8018f58:	220a      	movs	r2, #10
 8018f5a:	0039      	movs	r1, r7
 8018f5c:	9803      	ldr	r0, [sp, #12]
 8018f5e:	f000 f9c5 	bl	80192ec <__multadd>
 8018f62:	e7ee      	b.n	8018f42 <_dtoa_r+0xb1a>
 8018f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f66:	2401      	movs	r4, #1
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	dd00      	ble.n	8018f6e <_dtoa_r+0xb46>
 8018f6c:	001c      	movs	r4, r3
 8018f6e:	9b08      	ldr	r3, [sp, #32]
 8018f70:	191c      	adds	r4, r3, r4
 8018f72:	2300      	movs	r3, #0
 8018f74:	9304      	str	r3, [sp, #16]
 8018f76:	9905      	ldr	r1, [sp, #20]
 8018f78:	2201      	movs	r2, #1
 8018f7a:	9803      	ldr	r0, [sp, #12]
 8018f7c:	f000 fb70 	bl	8019660 <__lshift>
 8018f80:	0031      	movs	r1, r6
 8018f82:	9005      	str	r0, [sp, #20]
 8018f84:	f000 fbd8 	bl	8019738 <__mcmp>
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	dcb3      	bgt.n	8018ef4 <_dtoa_r+0xacc>
 8018f8c:	d101      	bne.n	8018f92 <_dtoa_r+0xb6a>
 8018f8e:	07ed      	lsls	r5, r5, #31
 8018f90:	d4b0      	bmi.n	8018ef4 <_dtoa_r+0xacc>
 8018f92:	0023      	movs	r3, r4
 8018f94:	001c      	movs	r4, r3
 8018f96:	3b01      	subs	r3, #1
 8018f98:	781a      	ldrb	r2, [r3, #0]
 8018f9a:	2a30      	cmp	r2, #48	@ 0x30
 8018f9c:	d0fa      	beq.n	8018f94 <_dtoa_r+0xb6c>
 8018f9e:	e5b7      	b.n	8018b10 <_dtoa_r+0x6e8>
 8018fa0:	9a08      	ldr	r2, [sp, #32]
 8018fa2:	429a      	cmp	r2, r3
 8018fa4:	d1a7      	bne.n	8018ef6 <_dtoa_r+0xace>
 8018fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018fa8:	3301      	adds	r3, #1
 8018faa:	930c      	str	r3, [sp, #48]	@ 0x30
 8018fac:	2331      	movs	r3, #49	@ 0x31
 8018fae:	7013      	strb	r3, [r2, #0]
 8018fb0:	e5ae      	b.n	8018b10 <_dtoa_r+0x6e8>
 8018fb2:	4b15      	ldr	r3, [pc, #84]	@ (8019008 <_dtoa_r+0xbe0>)
 8018fb4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018fb6:	9308      	str	r3, [sp, #32]
 8018fb8:	4b14      	ldr	r3, [pc, #80]	@ (801900c <_dtoa_r+0xbe4>)
 8018fba:	2a00      	cmp	r2, #0
 8018fbc:	d001      	beq.n	8018fc2 <_dtoa_r+0xb9a>
 8018fbe:	f7ff fa7b 	bl	80184b8 <_dtoa_r+0x90>
 8018fc2:	f7ff fa7b 	bl	80184bc <_dtoa_r+0x94>
 8018fc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018fc8:	2b01      	cmp	r3, #1
 8018fca:	dc00      	bgt.n	8018fce <_dtoa_r+0xba6>
 8018fcc:	e648      	b.n	8018c60 <_dtoa_r+0x838>
 8018fce:	2001      	movs	r0, #1
 8018fd0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018fd2:	e665      	b.n	8018ca0 <_dtoa_r+0x878>
 8018fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	dc00      	bgt.n	8018fdc <_dtoa_r+0xbb4>
 8018fda:	e6d6      	b.n	8018d8a <_dtoa_r+0x962>
 8018fdc:	2400      	movs	r4, #0
 8018fde:	0031      	movs	r1, r6
 8018fe0:	9805      	ldr	r0, [sp, #20]
 8018fe2:	f7ff f992 	bl	801830a <quorem>
 8018fe6:	9b08      	ldr	r3, [sp, #32]
 8018fe8:	3030      	adds	r0, #48	@ 0x30
 8018fea:	5518      	strb	r0, [r3, r4]
 8018fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fee:	3401      	adds	r4, #1
 8018ff0:	0005      	movs	r5, r0
 8018ff2:	429c      	cmp	r4, r3
 8018ff4:	dab6      	bge.n	8018f64 <_dtoa_r+0xb3c>
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	220a      	movs	r2, #10
 8018ffa:	9905      	ldr	r1, [sp, #20]
 8018ffc:	9803      	ldr	r0, [sp, #12]
 8018ffe:	f000 f975 	bl	80192ec <__multadd>
 8019002:	9005      	str	r0, [sp, #20]
 8019004:	e7eb      	b.n	8018fde <_dtoa_r+0xbb6>
 8019006:	46c0      	nop			@ (mov r8, r8)
 8019008:	0801be20 	.word	0x0801be20
 801900c:	0801be28 	.word	0x0801be28

08019010 <_free_r>:
 8019010:	b570      	push	{r4, r5, r6, lr}
 8019012:	0005      	movs	r5, r0
 8019014:	1e0c      	subs	r4, r1, #0
 8019016:	d010      	beq.n	801903a <_free_r+0x2a>
 8019018:	3c04      	subs	r4, #4
 801901a:	6823      	ldr	r3, [r4, #0]
 801901c:	2b00      	cmp	r3, #0
 801901e:	da00      	bge.n	8019022 <_free_r+0x12>
 8019020:	18e4      	adds	r4, r4, r3
 8019022:	0028      	movs	r0, r5
 8019024:	f000 f8ea 	bl	80191fc <__malloc_lock>
 8019028:	4a1d      	ldr	r2, [pc, #116]	@ (80190a0 <_free_r+0x90>)
 801902a:	6813      	ldr	r3, [r2, #0]
 801902c:	2b00      	cmp	r3, #0
 801902e:	d105      	bne.n	801903c <_free_r+0x2c>
 8019030:	6063      	str	r3, [r4, #4]
 8019032:	6014      	str	r4, [r2, #0]
 8019034:	0028      	movs	r0, r5
 8019036:	f000 f8e9 	bl	801920c <__malloc_unlock>
 801903a:	bd70      	pop	{r4, r5, r6, pc}
 801903c:	42a3      	cmp	r3, r4
 801903e:	d908      	bls.n	8019052 <_free_r+0x42>
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	1821      	adds	r1, r4, r0
 8019044:	428b      	cmp	r3, r1
 8019046:	d1f3      	bne.n	8019030 <_free_r+0x20>
 8019048:	6819      	ldr	r1, [r3, #0]
 801904a:	685b      	ldr	r3, [r3, #4]
 801904c:	1809      	adds	r1, r1, r0
 801904e:	6021      	str	r1, [r4, #0]
 8019050:	e7ee      	b.n	8019030 <_free_r+0x20>
 8019052:	001a      	movs	r2, r3
 8019054:	685b      	ldr	r3, [r3, #4]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d001      	beq.n	801905e <_free_r+0x4e>
 801905a:	42a3      	cmp	r3, r4
 801905c:	d9f9      	bls.n	8019052 <_free_r+0x42>
 801905e:	6811      	ldr	r1, [r2, #0]
 8019060:	1850      	adds	r0, r2, r1
 8019062:	42a0      	cmp	r0, r4
 8019064:	d10b      	bne.n	801907e <_free_r+0x6e>
 8019066:	6820      	ldr	r0, [r4, #0]
 8019068:	1809      	adds	r1, r1, r0
 801906a:	1850      	adds	r0, r2, r1
 801906c:	6011      	str	r1, [r2, #0]
 801906e:	4283      	cmp	r3, r0
 8019070:	d1e0      	bne.n	8019034 <_free_r+0x24>
 8019072:	6818      	ldr	r0, [r3, #0]
 8019074:	685b      	ldr	r3, [r3, #4]
 8019076:	1841      	adds	r1, r0, r1
 8019078:	6011      	str	r1, [r2, #0]
 801907a:	6053      	str	r3, [r2, #4]
 801907c:	e7da      	b.n	8019034 <_free_r+0x24>
 801907e:	42a0      	cmp	r0, r4
 8019080:	d902      	bls.n	8019088 <_free_r+0x78>
 8019082:	230c      	movs	r3, #12
 8019084:	602b      	str	r3, [r5, #0]
 8019086:	e7d5      	b.n	8019034 <_free_r+0x24>
 8019088:	6820      	ldr	r0, [r4, #0]
 801908a:	1821      	adds	r1, r4, r0
 801908c:	428b      	cmp	r3, r1
 801908e:	d103      	bne.n	8019098 <_free_r+0x88>
 8019090:	6819      	ldr	r1, [r3, #0]
 8019092:	685b      	ldr	r3, [r3, #4]
 8019094:	1809      	adds	r1, r1, r0
 8019096:	6021      	str	r1, [r4, #0]
 8019098:	6063      	str	r3, [r4, #4]
 801909a:	6054      	str	r4, [r2, #4]
 801909c:	e7ca      	b.n	8019034 <_free_r+0x24>
 801909e:	46c0      	nop			@ (mov r8, r8)
 80190a0:	2000400c 	.word	0x2000400c

080190a4 <malloc>:
 80190a4:	b510      	push	{r4, lr}
 80190a6:	4b03      	ldr	r3, [pc, #12]	@ (80190b4 <malloc+0x10>)
 80190a8:	0001      	movs	r1, r0
 80190aa:	6818      	ldr	r0, [r3, #0]
 80190ac:	f000 f826 	bl	80190fc <_malloc_r>
 80190b0:	bd10      	pop	{r4, pc}
 80190b2:	46c0      	nop			@ (mov r8, r8)
 80190b4:	200001f0 	.word	0x200001f0

080190b8 <sbrk_aligned>:
 80190b8:	b570      	push	{r4, r5, r6, lr}
 80190ba:	4e0f      	ldr	r6, [pc, #60]	@ (80190f8 <sbrk_aligned+0x40>)
 80190bc:	000d      	movs	r5, r1
 80190be:	6831      	ldr	r1, [r6, #0]
 80190c0:	0004      	movs	r4, r0
 80190c2:	2900      	cmp	r1, #0
 80190c4:	d102      	bne.n	80190cc <sbrk_aligned+0x14>
 80190c6:	f001 f855 	bl	801a174 <_sbrk_r>
 80190ca:	6030      	str	r0, [r6, #0]
 80190cc:	0029      	movs	r1, r5
 80190ce:	0020      	movs	r0, r4
 80190d0:	f001 f850 	bl	801a174 <_sbrk_r>
 80190d4:	1c43      	adds	r3, r0, #1
 80190d6:	d103      	bne.n	80190e0 <sbrk_aligned+0x28>
 80190d8:	2501      	movs	r5, #1
 80190da:	426d      	negs	r5, r5
 80190dc:	0028      	movs	r0, r5
 80190de:	bd70      	pop	{r4, r5, r6, pc}
 80190e0:	2303      	movs	r3, #3
 80190e2:	1cc5      	adds	r5, r0, #3
 80190e4:	439d      	bics	r5, r3
 80190e6:	42a8      	cmp	r0, r5
 80190e8:	d0f8      	beq.n	80190dc <sbrk_aligned+0x24>
 80190ea:	1a29      	subs	r1, r5, r0
 80190ec:	0020      	movs	r0, r4
 80190ee:	f001 f841 	bl	801a174 <_sbrk_r>
 80190f2:	3001      	adds	r0, #1
 80190f4:	d1f2      	bne.n	80190dc <sbrk_aligned+0x24>
 80190f6:	e7ef      	b.n	80190d8 <sbrk_aligned+0x20>
 80190f8:	20004008 	.word	0x20004008

080190fc <_malloc_r>:
 80190fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190fe:	2203      	movs	r2, #3
 8019100:	1ccb      	adds	r3, r1, #3
 8019102:	4393      	bics	r3, r2
 8019104:	3308      	adds	r3, #8
 8019106:	0005      	movs	r5, r0
 8019108:	001f      	movs	r7, r3
 801910a:	2b0c      	cmp	r3, #12
 801910c:	d234      	bcs.n	8019178 <_malloc_r+0x7c>
 801910e:	270c      	movs	r7, #12
 8019110:	42b9      	cmp	r1, r7
 8019112:	d833      	bhi.n	801917c <_malloc_r+0x80>
 8019114:	0028      	movs	r0, r5
 8019116:	f000 f871 	bl	80191fc <__malloc_lock>
 801911a:	4e37      	ldr	r6, [pc, #220]	@ (80191f8 <_malloc_r+0xfc>)
 801911c:	6833      	ldr	r3, [r6, #0]
 801911e:	001c      	movs	r4, r3
 8019120:	2c00      	cmp	r4, #0
 8019122:	d12f      	bne.n	8019184 <_malloc_r+0x88>
 8019124:	0039      	movs	r1, r7
 8019126:	0028      	movs	r0, r5
 8019128:	f7ff ffc6 	bl	80190b8 <sbrk_aligned>
 801912c:	0004      	movs	r4, r0
 801912e:	1c43      	adds	r3, r0, #1
 8019130:	d15f      	bne.n	80191f2 <_malloc_r+0xf6>
 8019132:	6834      	ldr	r4, [r6, #0]
 8019134:	9400      	str	r4, [sp, #0]
 8019136:	9b00      	ldr	r3, [sp, #0]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d14a      	bne.n	80191d2 <_malloc_r+0xd6>
 801913c:	2c00      	cmp	r4, #0
 801913e:	d052      	beq.n	80191e6 <_malloc_r+0xea>
 8019140:	6823      	ldr	r3, [r4, #0]
 8019142:	0028      	movs	r0, r5
 8019144:	18e3      	adds	r3, r4, r3
 8019146:	9900      	ldr	r1, [sp, #0]
 8019148:	9301      	str	r3, [sp, #4]
 801914a:	f001 f813 	bl	801a174 <_sbrk_r>
 801914e:	9b01      	ldr	r3, [sp, #4]
 8019150:	4283      	cmp	r3, r0
 8019152:	d148      	bne.n	80191e6 <_malloc_r+0xea>
 8019154:	6823      	ldr	r3, [r4, #0]
 8019156:	0028      	movs	r0, r5
 8019158:	1aff      	subs	r7, r7, r3
 801915a:	0039      	movs	r1, r7
 801915c:	f7ff ffac 	bl	80190b8 <sbrk_aligned>
 8019160:	3001      	adds	r0, #1
 8019162:	d040      	beq.n	80191e6 <_malloc_r+0xea>
 8019164:	6823      	ldr	r3, [r4, #0]
 8019166:	19db      	adds	r3, r3, r7
 8019168:	6023      	str	r3, [r4, #0]
 801916a:	6833      	ldr	r3, [r6, #0]
 801916c:	685a      	ldr	r2, [r3, #4]
 801916e:	2a00      	cmp	r2, #0
 8019170:	d133      	bne.n	80191da <_malloc_r+0xde>
 8019172:	9b00      	ldr	r3, [sp, #0]
 8019174:	6033      	str	r3, [r6, #0]
 8019176:	e019      	b.n	80191ac <_malloc_r+0xb0>
 8019178:	2b00      	cmp	r3, #0
 801917a:	dac9      	bge.n	8019110 <_malloc_r+0x14>
 801917c:	230c      	movs	r3, #12
 801917e:	602b      	str	r3, [r5, #0]
 8019180:	2000      	movs	r0, #0
 8019182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019184:	6821      	ldr	r1, [r4, #0]
 8019186:	1bc9      	subs	r1, r1, r7
 8019188:	d420      	bmi.n	80191cc <_malloc_r+0xd0>
 801918a:	290b      	cmp	r1, #11
 801918c:	d90a      	bls.n	80191a4 <_malloc_r+0xa8>
 801918e:	19e2      	adds	r2, r4, r7
 8019190:	6027      	str	r7, [r4, #0]
 8019192:	42a3      	cmp	r3, r4
 8019194:	d104      	bne.n	80191a0 <_malloc_r+0xa4>
 8019196:	6032      	str	r2, [r6, #0]
 8019198:	6863      	ldr	r3, [r4, #4]
 801919a:	6011      	str	r1, [r2, #0]
 801919c:	6053      	str	r3, [r2, #4]
 801919e:	e005      	b.n	80191ac <_malloc_r+0xb0>
 80191a0:	605a      	str	r2, [r3, #4]
 80191a2:	e7f9      	b.n	8019198 <_malloc_r+0x9c>
 80191a4:	6862      	ldr	r2, [r4, #4]
 80191a6:	42a3      	cmp	r3, r4
 80191a8:	d10e      	bne.n	80191c8 <_malloc_r+0xcc>
 80191aa:	6032      	str	r2, [r6, #0]
 80191ac:	0028      	movs	r0, r5
 80191ae:	f000 f82d 	bl	801920c <__malloc_unlock>
 80191b2:	0020      	movs	r0, r4
 80191b4:	2207      	movs	r2, #7
 80191b6:	300b      	adds	r0, #11
 80191b8:	1d23      	adds	r3, r4, #4
 80191ba:	4390      	bics	r0, r2
 80191bc:	1ac2      	subs	r2, r0, r3
 80191be:	4298      	cmp	r0, r3
 80191c0:	d0df      	beq.n	8019182 <_malloc_r+0x86>
 80191c2:	1a1b      	subs	r3, r3, r0
 80191c4:	50a3      	str	r3, [r4, r2]
 80191c6:	e7dc      	b.n	8019182 <_malloc_r+0x86>
 80191c8:	605a      	str	r2, [r3, #4]
 80191ca:	e7ef      	b.n	80191ac <_malloc_r+0xb0>
 80191cc:	0023      	movs	r3, r4
 80191ce:	6864      	ldr	r4, [r4, #4]
 80191d0:	e7a6      	b.n	8019120 <_malloc_r+0x24>
 80191d2:	9c00      	ldr	r4, [sp, #0]
 80191d4:	6863      	ldr	r3, [r4, #4]
 80191d6:	9300      	str	r3, [sp, #0]
 80191d8:	e7ad      	b.n	8019136 <_malloc_r+0x3a>
 80191da:	001a      	movs	r2, r3
 80191dc:	685b      	ldr	r3, [r3, #4]
 80191de:	42a3      	cmp	r3, r4
 80191e0:	d1fb      	bne.n	80191da <_malloc_r+0xde>
 80191e2:	2300      	movs	r3, #0
 80191e4:	e7da      	b.n	801919c <_malloc_r+0xa0>
 80191e6:	230c      	movs	r3, #12
 80191e8:	0028      	movs	r0, r5
 80191ea:	602b      	str	r3, [r5, #0]
 80191ec:	f000 f80e 	bl	801920c <__malloc_unlock>
 80191f0:	e7c6      	b.n	8019180 <_malloc_r+0x84>
 80191f2:	6007      	str	r7, [r0, #0]
 80191f4:	e7da      	b.n	80191ac <_malloc_r+0xb0>
 80191f6:	46c0      	nop			@ (mov r8, r8)
 80191f8:	2000400c 	.word	0x2000400c

080191fc <__malloc_lock>:
 80191fc:	b510      	push	{r4, lr}
 80191fe:	4802      	ldr	r0, [pc, #8]	@ (8019208 <__malloc_lock+0xc>)
 8019200:	f7ff f86d 	bl	80182de <__retarget_lock_acquire_recursive>
 8019204:	bd10      	pop	{r4, pc}
 8019206:	46c0      	nop			@ (mov r8, r8)
 8019208:	20004004 	.word	0x20004004

0801920c <__malloc_unlock>:
 801920c:	b510      	push	{r4, lr}
 801920e:	4802      	ldr	r0, [pc, #8]	@ (8019218 <__malloc_unlock+0xc>)
 8019210:	f7ff f866 	bl	80182e0 <__retarget_lock_release_recursive>
 8019214:	bd10      	pop	{r4, pc}
 8019216:	46c0      	nop			@ (mov r8, r8)
 8019218:	20004004 	.word	0x20004004

0801921c <_Balloc>:
 801921c:	b570      	push	{r4, r5, r6, lr}
 801921e:	69c5      	ldr	r5, [r0, #28]
 8019220:	0006      	movs	r6, r0
 8019222:	000c      	movs	r4, r1
 8019224:	2d00      	cmp	r5, #0
 8019226:	d10e      	bne.n	8019246 <_Balloc+0x2a>
 8019228:	2010      	movs	r0, #16
 801922a:	f7ff ff3b 	bl	80190a4 <malloc>
 801922e:	1e02      	subs	r2, r0, #0
 8019230:	61f0      	str	r0, [r6, #28]
 8019232:	d104      	bne.n	801923e <_Balloc+0x22>
 8019234:	216b      	movs	r1, #107	@ 0x6b
 8019236:	4b19      	ldr	r3, [pc, #100]	@ (801929c <_Balloc+0x80>)
 8019238:	4819      	ldr	r0, [pc, #100]	@ (80192a0 <_Balloc+0x84>)
 801923a:	f000 ffad 	bl	801a198 <__assert_func>
 801923e:	6045      	str	r5, [r0, #4]
 8019240:	6085      	str	r5, [r0, #8]
 8019242:	6005      	str	r5, [r0, #0]
 8019244:	60c5      	str	r5, [r0, #12]
 8019246:	69f5      	ldr	r5, [r6, #28]
 8019248:	68eb      	ldr	r3, [r5, #12]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d013      	beq.n	8019276 <_Balloc+0x5a>
 801924e:	69f3      	ldr	r3, [r6, #28]
 8019250:	00a2      	lsls	r2, r4, #2
 8019252:	68db      	ldr	r3, [r3, #12]
 8019254:	189b      	adds	r3, r3, r2
 8019256:	6818      	ldr	r0, [r3, #0]
 8019258:	2800      	cmp	r0, #0
 801925a:	d118      	bne.n	801928e <_Balloc+0x72>
 801925c:	2101      	movs	r1, #1
 801925e:	000d      	movs	r5, r1
 8019260:	40a5      	lsls	r5, r4
 8019262:	1d6a      	adds	r2, r5, #5
 8019264:	0030      	movs	r0, r6
 8019266:	0092      	lsls	r2, r2, #2
 8019268:	f000 ffb4 	bl	801a1d4 <_calloc_r>
 801926c:	2800      	cmp	r0, #0
 801926e:	d00c      	beq.n	801928a <_Balloc+0x6e>
 8019270:	6044      	str	r4, [r0, #4]
 8019272:	6085      	str	r5, [r0, #8]
 8019274:	e00d      	b.n	8019292 <_Balloc+0x76>
 8019276:	2221      	movs	r2, #33	@ 0x21
 8019278:	2104      	movs	r1, #4
 801927a:	0030      	movs	r0, r6
 801927c:	f000 ffaa 	bl	801a1d4 <_calloc_r>
 8019280:	69f3      	ldr	r3, [r6, #28]
 8019282:	60e8      	str	r0, [r5, #12]
 8019284:	68db      	ldr	r3, [r3, #12]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d1e1      	bne.n	801924e <_Balloc+0x32>
 801928a:	2000      	movs	r0, #0
 801928c:	bd70      	pop	{r4, r5, r6, pc}
 801928e:	6802      	ldr	r2, [r0, #0]
 8019290:	601a      	str	r2, [r3, #0]
 8019292:	2300      	movs	r3, #0
 8019294:	6103      	str	r3, [r0, #16]
 8019296:	60c3      	str	r3, [r0, #12]
 8019298:	e7f8      	b.n	801928c <_Balloc+0x70>
 801929a:	46c0      	nop			@ (mov r8, r8)
 801929c:	0801be2d 	.word	0x0801be2d
 80192a0:	0801bead 	.word	0x0801bead

080192a4 <_Bfree>:
 80192a4:	b570      	push	{r4, r5, r6, lr}
 80192a6:	69c6      	ldr	r6, [r0, #28]
 80192a8:	0005      	movs	r5, r0
 80192aa:	000c      	movs	r4, r1
 80192ac:	2e00      	cmp	r6, #0
 80192ae:	d10e      	bne.n	80192ce <_Bfree+0x2a>
 80192b0:	2010      	movs	r0, #16
 80192b2:	f7ff fef7 	bl	80190a4 <malloc>
 80192b6:	1e02      	subs	r2, r0, #0
 80192b8:	61e8      	str	r0, [r5, #28]
 80192ba:	d104      	bne.n	80192c6 <_Bfree+0x22>
 80192bc:	218f      	movs	r1, #143	@ 0x8f
 80192be:	4b09      	ldr	r3, [pc, #36]	@ (80192e4 <_Bfree+0x40>)
 80192c0:	4809      	ldr	r0, [pc, #36]	@ (80192e8 <_Bfree+0x44>)
 80192c2:	f000 ff69 	bl	801a198 <__assert_func>
 80192c6:	6046      	str	r6, [r0, #4]
 80192c8:	6086      	str	r6, [r0, #8]
 80192ca:	6006      	str	r6, [r0, #0]
 80192cc:	60c6      	str	r6, [r0, #12]
 80192ce:	2c00      	cmp	r4, #0
 80192d0:	d007      	beq.n	80192e2 <_Bfree+0x3e>
 80192d2:	69eb      	ldr	r3, [r5, #28]
 80192d4:	6862      	ldr	r2, [r4, #4]
 80192d6:	68db      	ldr	r3, [r3, #12]
 80192d8:	0092      	lsls	r2, r2, #2
 80192da:	189b      	adds	r3, r3, r2
 80192dc:	681a      	ldr	r2, [r3, #0]
 80192de:	6022      	str	r2, [r4, #0]
 80192e0:	601c      	str	r4, [r3, #0]
 80192e2:	bd70      	pop	{r4, r5, r6, pc}
 80192e4:	0801be2d 	.word	0x0801be2d
 80192e8:	0801bead 	.word	0x0801bead

080192ec <__multadd>:
 80192ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192ee:	000f      	movs	r7, r1
 80192f0:	9001      	str	r0, [sp, #4]
 80192f2:	000c      	movs	r4, r1
 80192f4:	001e      	movs	r6, r3
 80192f6:	2000      	movs	r0, #0
 80192f8:	690d      	ldr	r5, [r1, #16]
 80192fa:	3714      	adds	r7, #20
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	3001      	adds	r0, #1
 8019300:	b299      	uxth	r1, r3
 8019302:	4351      	muls	r1, r2
 8019304:	0c1b      	lsrs	r3, r3, #16
 8019306:	4353      	muls	r3, r2
 8019308:	1989      	adds	r1, r1, r6
 801930a:	0c0e      	lsrs	r6, r1, #16
 801930c:	199b      	adds	r3, r3, r6
 801930e:	0c1e      	lsrs	r6, r3, #16
 8019310:	b289      	uxth	r1, r1
 8019312:	041b      	lsls	r3, r3, #16
 8019314:	185b      	adds	r3, r3, r1
 8019316:	c708      	stmia	r7!, {r3}
 8019318:	4285      	cmp	r5, r0
 801931a:	dcef      	bgt.n	80192fc <__multadd+0x10>
 801931c:	2e00      	cmp	r6, #0
 801931e:	d022      	beq.n	8019366 <__multadd+0x7a>
 8019320:	68a3      	ldr	r3, [r4, #8]
 8019322:	42ab      	cmp	r3, r5
 8019324:	dc19      	bgt.n	801935a <__multadd+0x6e>
 8019326:	6861      	ldr	r1, [r4, #4]
 8019328:	9801      	ldr	r0, [sp, #4]
 801932a:	3101      	adds	r1, #1
 801932c:	f7ff ff76 	bl	801921c <_Balloc>
 8019330:	1e07      	subs	r7, r0, #0
 8019332:	d105      	bne.n	8019340 <__multadd+0x54>
 8019334:	003a      	movs	r2, r7
 8019336:	21ba      	movs	r1, #186	@ 0xba
 8019338:	4b0c      	ldr	r3, [pc, #48]	@ (801936c <__multadd+0x80>)
 801933a:	480d      	ldr	r0, [pc, #52]	@ (8019370 <__multadd+0x84>)
 801933c:	f000 ff2c 	bl	801a198 <__assert_func>
 8019340:	0021      	movs	r1, r4
 8019342:	6922      	ldr	r2, [r4, #16]
 8019344:	310c      	adds	r1, #12
 8019346:	3202      	adds	r2, #2
 8019348:	0092      	lsls	r2, r2, #2
 801934a:	300c      	adds	r0, #12
 801934c:	f7fe ffd4 	bl	80182f8 <memcpy>
 8019350:	0021      	movs	r1, r4
 8019352:	9801      	ldr	r0, [sp, #4]
 8019354:	f7ff ffa6 	bl	80192a4 <_Bfree>
 8019358:	003c      	movs	r4, r7
 801935a:	1d2b      	adds	r3, r5, #4
 801935c:	009b      	lsls	r3, r3, #2
 801935e:	18e3      	adds	r3, r4, r3
 8019360:	3501      	adds	r5, #1
 8019362:	605e      	str	r6, [r3, #4]
 8019364:	6125      	str	r5, [r4, #16]
 8019366:	0020      	movs	r0, r4
 8019368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801936a:	46c0      	nop			@ (mov r8, r8)
 801936c:	0801be9c 	.word	0x0801be9c
 8019370:	0801bead 	.word	0x0801bead

08019374 <__hi0bits>:
 8019374:	2280      	movs	r2, #128	@ 0x80
 8019376:	0003      	movs	r3, r0
 8019378:	0252      	lsls	r2, r2, #9
 801937a:	2000      	movs	r0, #0
 801937c:	4293      	cmp	r3, r2
 801937e:	d201      	bcs.n	8019384 <__hi0bits+0x10>
 8019380:	041b      	lsls	r3, r3, #16
 8019382:	3010      	adds	r0, #16
 8019384:	2280      	movs	r2, #128	@ 0x80
 8019386:	0452      	lsls	r2, r2, #17
 8019388:	4293      	cmp	r3, r2
 801938a:	d201      	bcs.n	8019390 <__hi0bits+0x1c>
 801938c:	3008      	adds	r0, #8
 801938e:	021b      	lsls	r3, r3, #8
 8019390:	2280      	movs	r2, #128	@ 0x80
 8019392:	0552      	lsls	r2, r2, #21
 8019394:	4293      	cmp	r3, r2
 8019396:	d201      	bcs.n	801939c <__hi0bits+0x28>
 8019398:	3004      	adds	r0, #4
 801939a:	011b      	lsls	r3, r3, #4
 801939c:	2280      	movs	r2, #128	@ 0x80
 801939e:	05d2      	lsls	r2, r2, #23
 80193a0:	4293      	cmp	r3, r2
 80193a2:	d201      	bcs.n	80193a8 <__hi0bits+0x34>
 80193a4:	3002      	adds	r0, #2
 80193a6:	009b      	lsls	r3, r3, #2
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	db03      	blt.n	80193b4 <__hi0bits+0x40>
 80193ac:	3001      	adds	r0, #1
 80193ae:	4213      	tst	r3, r2
 80193b0:	d100      	bne.n	80193b4 <__hi0bits+0x40>
 80193b2:	2020      	movs	r0, #32
 80193b4:	4770      	bx	lr

080193b6 <__lo0bits>:
 80193b6:	6803      	ldr	r3, [r0, #0]
 80193b8:	0001      	movs	r1, r0
 80193ba:	2207      	movs	r2, #7
 80193bc:	0018      	movs	r0, r3
 80193be:	4010      	ands	r0, r2
 80193c0:	4213      	tst	r3, r2
 80193c2:	d00d      	beq.n	80193e0 <__lo0bits+0x2a>
 80193c4:	3a06      	subs	r2, #6
 80193c6:	2000      	movs	r0, #0
 80193c8:	4213      	tst	r3, r2
 80193ca:	d105      	bne.n	80193d8 <__lo0bits+0x22>
 80193cc:	3002      	adds	r0, #2
 80193ce:	4203      	tst	r3, r0
 80193d0:	d003      	beq.n	80193da <__lo0bits+0x24>
 80193d2:	40d3      	lsrs	r3, r2
 80193d4:	0010      	movs	r0, r2
 80193d6:	600b      	str	r3, [r1, #0]
 80193d8:	4770      	bx	lr
 80193da:	089b      	lsrs	r3, r3, #2
 80193dc:	600b      	str	r3, [r1, #0]
 80193de:	e7fb      	b.n	80193d8 <__lo0bits+0x22>
 80193e0:	b29a      	uxth	r2, r3
 80193e2:	2a00      	cmp	r2, #0
 80193e4:	d101      	bne.n	80193ea <__lo0bits+0x34>
 80193e6:	2010      	movs	r0, #16
 80193e8:	0c1b      	lsrs	r3, r3, #16
 80193ea:	b2da      	uxtb	r2, r3
 80193ec:	2a00      	cmp	r2, #0
 80193ee:	d101      	bne.n	80193f4 <__lo0bits+0x3e>
 80193f0:	3008      	adds	r0, #8
 80193f2:	0a1b      	lsrs	r3, r3, #8
 80193f4:	071a      	lsls	r2, r3, #28
 80193f6:	d101      	bne.n	80193fc <__lo0bits+0x46>
 80193f8:	3004      	adds	r0, #4
 80193fa:	091b      	lsrs	r3, r3, #4
 80193fc:	079a      	lsls	r2, r3, #30
 80193fe:	d101      	bne.n	8019404 <__lo0bits+0x4e>
 8019400:	3002      	adds	r0, #2
 8019402:	089b      	lsrs	r3, r3, #2
 8019404:	07da      	lsls	r2, r3, #31
 8019406:	d4e9      	bmi.n	80193dc <__lo0bits+0x26>
 8019408:	3001      	adds	r0, #1
 801940a:	085b      	lsrs	r3, r3, #1
 801940c:	d1e6      	bne.n	80193dc <__lo0bits+0x26>
 801940e:	2020      	movs	r0, #32
 8019410:	e7e2      	b.n	80193d8 <__lo0bits+0x22>
	...

08019414 <__i2b>:
 8019414:	b510      	push	{r4, lr}
 8019416:	000c      	movs	r4, r1
 8019418:	2101      	movs	r1, #1
 801941a:	f7ff feff 	bl	801921c <_Balloc>
 801941e:	2800      	cmp	r0, #0
 8019420:	d107      	bne.n	8019432 <__i2b+0x1e>
 8019422:	2146      	movs	r1, #70	@ 0x46
 8019424:	4c05      	ldr	r4, [pc, #20]	@ (801943c <__i2b+0x28>)
 8019426:	0002      	movs	r2, r0
 8019428:	4b05      	ldr	r3, [pc, #20]	@ (8019440 <__i2b+0x2c>)
 801942a:	0020      	movs	r0, r4
 801942c:	31ff      	adds	r1, #255	@ 0xff
 801942e:	f000 feb3 	bl	801a198 <__assert_func>
 8019432:	2301      	movs	r3, #1
 8019434:	6144      	str	r4, [r0, #20]
 8019436:	6103      	str	r3, [r0, #16]
 8019438:	bd10      	pop	{r4, pc}
 801943a:	46c0      	nop			@ (mov r8, r8)
 801943c:	0801bead 	.word	0x0801bead
 8019440:	0801be9c 	.word	0x0801be9c

08019444 <__multiply>:
 8019444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019446:	0014      	movs	r4, r2
 8019448:	690a      	ldr	r2, [r1, #16]
 801944a:	6923      	ldr	r3, [r4, #16]
 801944c:	000d      	movs	r5, r1
 801944e:	b08b      	sub	sp, #44	@ 0x2c
 8019450:	429a      	cmp	r2, r3
 8019452:	db02      	blt.n	801945a <__multiply+0x16>
 8019454:	0023      	movs	r3, r4
 8019456:	000c      	movs	r4, r1
 8019458:	001d      	movs	r5, r3
 801945a:	6927      	ldr	r7, [r4, #16]
 801945c:	692e      	ldr	r6, [r5, #16]
 801945e:	6861      	ldr	r1, [r4, #4]
 8019460:	19bb      	adds	r3, r7, r6
 8019462:	9303      	str	r3, [sp, #12]
 8019464:	68a3      	ldr	r3, [r4, #8]
 8019466:	19ba      	adds	r2, r7, r6
 8019468:	4293      	cmp	r3, r2
 801946a:	da00      	bge.n	801946e <__multiply+0x2a>
 801946c:	3101      	adds	r1, #1
 801946e:	f7ff fed5 	bl	801921c <_Balloc>
 8019472:	9002      	str	r0, [sp, #8]
 8019474:	2800      	cmp	r0, #0
 8019476:	d106      	bne.n	8019486 <__multiply+0x42>
 8019478:	21b1      	movs	r1, #177	@ 0xb1
 801947a:	4b49      	ldr	r3, [pc, #292]	@ (80195a0 <__multiply+0x15c>)
 801947c:	4849      	ldr	r0, [pc, #292]	@ (80195a4 <__multiply+0x160>)
 801947e:	9a02      	ldr	r2, [sp, #8]
 8019480:	0049      	lsls	r1, r1, #1
 8019482:	f000 fe89 	bl	801a198 <__assert_func>
 8019486:	9b02      	ldr	r3, [sp, #8]
 8019488:	2200      	movs	r2, #0
 801948a:	3314      	adds	r3, #20
 801948c:	469c      	mov	ip, r3
 801948e:	19bb      	adds	r3, r7, r6
 8019490:	009b      	lsls	r3, r3, #2
 8019492:	4463      	add	r3, ip
 8019494:	9304      	str	r3, [sp, #16]
 8019496:	4663      	mov	r3, ip
 8019498:	9904      	ldr	r1, [sp, #16]
 801949a:	428b      	cmp	r3, r1
 801949c:	d32a      	bcc.n	80194f4 <__multiply+0xb0>
 801949e:	0023      	movs	r3, r4
 80194a0:	00bf      	lsls	r7, r7, #2
 80194a2:	3314      	adds	r3, #20
 80194a4:	3514      	adds	r5, #20
 80194a6:	9308      	str	r3, [sp, #32]
 80194a8:	00b6      	lsls	r6, r6, #2
 80194aa:	19db      	adds	r3, r3, r7
 80194ac:	9305      	str	r3, [sp, #20]
 80194ae:	19ab      	adds	r3, r5, r6
 80194b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80194b2:	2304      	movs	r3, #4
 80194b4:	9306      	str	r3, [sp, #24]
 80194b6:	0023      	movs	r3, r4
 80194b8:	9a05      	ldr	r2, [sp, #20]
 80194ba:	3315      	adds	r3, #21
 80194bc:	9501      	str	r5, [sp, #4]
 80194be:	429a      	cmp	r2, r3
 80194c0:	d305      	bcc.n	80194ce <__multiply+0x8a>
 80194c2:	1b13      	subs	r3, r2, r4
 80194c4:	3b15      	subs	r3, #21
 80194c6:	089b      	lsrs	r3, r3, #2
 80194c8:	3301      	adds	r3, #1
 80194ca:	009b      	lsls	r3, r3, #2
 80194cc:	9306      	str	r3, [sp, #24]
 80194ce:	9b01      	ldr	r3, [sp, #4]
 80194d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80194d2:	4293      	cmp	r3, r2
 80194d4:	d310      	bcc.n	80194f8 <__multiply+0xb4>
 80194d6:	9b03      	ldr	r3, [sp, #12]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	dd05      	ble.n	80194e8 <__multiply+0xa4>
 80194dc:	9b04      	ldr	r3, [sp, #16]
 80194de:	3b04      	subs	r3, #4
 80194e0:	9304      	str	r3, [sp, #16]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d056      	beq.n	8019596 <__multiply+0x152>
 80194e8:	9b02      	ldr	r3, [sp, #8]
 80194ea:	9a03      	ldr	r2, [sp, #12]
 80194ec:	0018      	movs	r0, r3
 80194ee:	611a      	str	r2, [r3, #16]
 80194f0:	b00b      	add	sp, #44	@ 0x2c
 80194f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194f4:	c304      	stmia	r3!, {r2}
 80194f6:	e7cf      	b.n	8019498 <__multiply+0x54>
 80194f8:	9b01      	ldr	r3, [sp, #4]
 80194fa:	6818      	ldr	r0, [r3, #0]
 80194fc:	b280      	uxth	r0, r0
 80194fe:	2800      	cmp	r0, #0
 8019500:	d01e      	beq.n	8019540 <__multiply+0xfc>
 8019502:	4667      	mov	r7, ip
 8019504:	2500      	movs	r5, #0
 8019506:	9e08      	ldr	r6, [sp, #32]
 8019508:	ce02      	ldmia	r6!, {r1}
 801950a:	683b      	ldr	r3, [r7, #0]
 801950c:	9307      	str	r3, [sp, #28]
 801950e:	b28b      	uxth	r3, r1
 8019510:	4343      	muls	r3, r0
 8019512:	001a      	movs	r2, r3
 8019514:	466b      	mov	r3, sp
 8019516:	0c09      	lsrs	r1, r1, #16
 8019518:	8b9b      	ldrh	r3, [r3, #28]
 801951a:	4341      	muls	r1, r0
 801951c:	18d3      	adds	r3, r2, r3
 801951e:	9a07      	ldr	r2, [sp, #28]
 8019520:	195b      	adds	r3, r3, r5
 8019522:	0c12      	lsrs	r2, r2, #16
 8019524:	1889      	adds	r1, r1, r2
 8019526:	0c1a      	lsrs	r2, r3, #16
 8019528:	188a      	adds	r2, r1, r2
 801952a:	b29b      	uxth	r3, r3
 801952c:	0c15      	lsrs	r5, r2, #16
 801952e:	0412      	lsls	r2, r2, #16
 8019530:	431a      	orrs	r2, r3
 8019532:	9b05      	ldr	r3, [sp, #20]
 8019534:	c704      	stmia	r7!, {r2}
 8019536:	42b3      	cmp	r3, r6
 8019538:	d8e6      	bhi.n	8019508 <__multiply+0xc4>
 801953a:	4663      	mov	r3, ip
 801953c:	9a06      	ldr	r2, [sp, #24]
 801953e:	509d      	str	r5, [r3, r2]
 8019540:	9b01      	ldr	r3, [sp, #4]
 8019542:	6818      	ldr	r0, [r3, #0]
 8019544:	0c00      	lsrs	r0, r0, #16
 8019546:	d020      	beq.n	801958a <__multiply+0x146>
 8019548:	4663      	mov	r3, ip
 801954a:	0025      	movs	r5, r4
 801954c:	4661      	mov	r1, ip
 801954e:	2700      	movs	r7, #0
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	3514      	adds	r5, #20
 8019554:	682a      	ldr	r2, [r5, #0]
 8019556:	680e      	ldr	r6, [r1, #0]
 8019558:	b292      	uxth	r2, r2
 801955a:	4342      	muls	r2, r0
 801955c:	0c36      	lsrs	r6, r6, #16
 801955e:	1992      	adds	r2, r2, r6
 8019560:	19d2      	adds	r2, r2, r7
 8019562:	0416      	lsls	r6, r2, #16
 8019564:	b29b      	uxth	r3, r3
 8019566:	431e      	orrs	r6, r3
 8019568:	600e      	str	r6, [r1, #0]
 801956a:	cd40      	ldmia	r5!, {r6}
 801956c:	684b      	ldr	r3, [r1, #4]
 801956e:	0c36      	lsrs	r6, r6, #16
 8019570:	4346      	muls	r6, r0
 8019572:	b29b      	uxth	r3, r3
 8019574:	0c12      	lsrs	r2, r2, #16
 8019576:	18f3      	adds	r3, r6, r3
 8019578:	189b      	adds	r3, r3, r2
 801957a:	9a05      	ldr	r2, [sp, #20]
 801957c:	0c1f      	lsrs	r7, r3, #16
 801957e:	3104      	adds	r1, #4
 8019580:	42aa      	cmp	r2, r5
 8019582:	d8e7      	bhi.n	8019554 <__multiply+0x110>
 8019584:	4662      	mov	r2, ip
 8019586:	9906      	ldr	r1, [sp, #24]
 8019588:	5053      	str	r3, [r2, r1]
 801958a:	9b01      	ldr	r3, [sp, #4]
 801958c:	3304      	adds	r3, #4
 801958e:	9301      	str	r3, [sp, #4]
 8019590:	2304      	movs	r3, #4
 8019592:	449c      	add	ip, r3
 8019594:	e79b      	b.n	80194ce <__multiply+0x8a>
 8019596:	9b03      	ldr	r3, [sp, #12]
 8019598:	3b01      	subs	r3, #1
 801959a:	9303      	str	r3, [sp, #12]
 801959c:	e79b      	b.n	80194d6 <__multiply+0x92>
 801959e:	46c0      	nop			@ (mov r8, r8)
 80195a0:	0801be9c 	.word	0x0801be9c
 80195a4:	0801bead 	.word	0x0801bead

080195a8 <__pow5mult>:
 80195a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195aa:	2303      	movs	r3, #3
 80195ac:	0015      	movs	r5, r2
 80195ae:	0007      	movs	r7, r0
 80195b0:	000e      	movs	r6, r1
 80195b2:	401a      	ands	r2, r3
 80195b4:	421d      	tst	r5, r3
 80195b6:	d008      	beq.n	80195ca <__pow5mult+0x22>
 80195b8:	4925      	ldr	r1, [pc, #148]	@ (8019650 <__pow5mult+0xa8>)
 80195ba:	3a01      	subs	r2, #1
 80195bc:	0092      	lsls	r2, r2, #2
 80195be:	5852      	ldr	r2, [r2, r1]
 80195c0:	2300      	movs	r3, #0
 80195c2:	0031      	movs	r1, r6
 80195c4:	f7ff fe92 	bl	80192ec <__multadd>
 80195c8:	0006      	movs	r6, r0
 80195ca:	10ad      	asrs	r5, r5, #2
 80195cc:	d03d      	beq.n	801964a <__pow5mult+0xa2>
 80195ce:	69fc      	ldr	r4, [r7, #28]
 80195d0:	2c00      	cmp	r4, #0
 80195d2:	d10f      	bne.n	80195f4 <__pow5mult+0x4c>
 80195d4:	2010      	movs	r0, #16
 80195d6:	f7ff fd65 	bl	80190a4 <malloc>
 80195da:	1e02      	subs	r2, r0, #0
 80195dc:	61f8      	str	r0, [r7, #28]
 80195de:	d105      	bne.n	80195ec <__pow5mult+0x44>
 80195e0:	21b4      	movs	r1, #180	@ 0xb4
 80195e2:	4b1c      	ldr	r3, [pc, #112]	@ (8019654 <__pow5mult+0xac>)
 80195e4:	481c      	ldr	r0, [pc, #112]	@ (8019658 <__pow5mult+0xb0>)
 80195e6:	31ff      	adds	r1, #255	@ 0xff
 80195e8:	f000 fdd6 	bl	801a198 <__assert_func>
 80195ec:	6044      	str	r4, [r0, #4]
 80195ee:	6084      	str	r4, [r0, #8]
 80195f0:	6004      	str	r4, [r0, #0]
 80195f2:	60c4      	str	r4, [r0, #12]
 80195f4:	69fb      	ldr	r3, [r7, #28]
 80195f6:	689c      	ldr	r4, [r3, #8]
 80195f8:	9301      	str	r3, [sp, #4]
 80195fa:	2c00      	cmp	r4, #0
 80195fc:	d108      	bne.n	8019610 <__pow5mult+0x68>
 80195fe:	0038      	movs	r0, r7
 8019600:	4916      	ldr	r1, [pc, #88]	@ (801965c <__pow5mult+0xb4>)
 8019602:	f7ff ff07 	bl	8019414 <__i2b>
 8019606:	9b01      	ldr	r3, [sp, #4]
 8019608:	0004      	movs	r4, r0
 801960a:	6098      	str	r0, [r3, #8]
 801960c:	2300      	movs	r3, #0
 801960e:	6003      	str	r3, [r0, #0]
 8019610:	2301      	movs	r3, #1
 8019612:	421d      	tst	r5, r3
 8019614:	d00a      	beq.n	801962c <__pow5mult+0x84>
 8019616:	0031      	movs	r1, r6
 8019618:	0022      	movs	r2, r4
 801961a:	0038      	movs	r0, r7
 801961c:	f7ff ff12 	bl	8019444 <__multiply>
 8019620:	0031      	movs	r1, r6
 8019622:	9001      	str	r0, [sp, #4]
 8019624:	0038      	movs	r0, r7
 8019626:	f7ff fe3d 	bl	80192a4 <_Bfree>
 801962a:	9e01      	ldr	r6, [sp, #4]
 801962c:	106d      	asrs	r5, r5, #1
 801962e:	d00c      	beq.n	801964a <__pow5mult+0xa2>
 8019630:	6820      	ldr	r0, [r4, #0]
 8019632:	2800      	cmp	r0, #0
 8019634:	d107      	bne.n	8019646 <__pow5mult+0x9e>
 8019636:	0022      	movs	r2, r4
 8019638:	0021      	movs	r1, r4
 801963a:	0038      	movs	r0, r7
 801963c:	f7ff ff02 	bl	8019444 <__multiply>
 8019640:	2300      	movs	r3, #0
 8019642:	6020      	str	r0, [r4, #0]
 8019644:	6003      	str	r3, [r0, #0]
 8019646:	0004      	movs	r4, r0
 8019648:	e7e2      	b.n	8019610 <__pow5mult+0x68>
 801964a:	0030      	movs	r0, r6
 801964c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801964e:	46c0      	nop			@ (mov r8, r8)
 8019650:	0801bf08 	.word	0x0801bf08
 8019654:	0801be2d 	.word	0x0801be2d
 8019658:	0801bead 	.word	0x0801bead
 801965c:	00000271 	.word	0x00000271

08019660 <__lshift>:
 8019660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019662:	000c      	movs	r4, r1
 8019664:	0016      	movs	r6, r2
 8019666:	6923      	ldr	r3, [r4, #16]
 8019668:	1157      	asrs	r7, r2, #5
 801966a:	b085      	sub	sp, #20
 801966c:	18fb      	adds	r3, r7, r3
 801966e:	9301      	str	r3, [sp, #4]
 8019670:	3301      	adds	r3, #1
 8019672:	9300      	str	r3, [sp, #0]
 8019674:	6849      	ldr	r1, [r1, #4]
 8019676:	68a3      	ldr	r3, [r4, #8]
 8019678:	9002      	str	r0, [sp, #8]
 801967a:	9a00      	ldr	r2, [sp, #0]
 801967c:	4293      	cmp	r3, r2
 801967e:	db10      	blt.n	80196a2 <__lshift+0x42>
 8019680:	9802      	ldr	r0, [sp, #8]
 8019682:	f7ff fdcb 	bl	801921c <_Balloc>
 8019686:	2300      	movs	r3, #0
 8019688:	0001      	movs	r1, r0
 801968a:	0005      	movs	r5, r0
 801968c:	001a      	movs	r2, r3
 801968e:	3114      	adds	r1, #20
 8019690:	4298      	cmp	r0, r3
 8019692:	d10c      	bne.n	80196ae <__lshift+0x4e>
 8019694:	21ef      	movs	r1, #239	@ 0xef
 8019696:	002a      	movs	r2, r5
 8019698:	4b25      	ldr	r3, [pc, #148]	@ (8019730 <__lshift+0xd0>)
 801969a:	4826      	ldr	r0, [pc, #152]	@ (8019734 <__lshift+0xd4>)
 801969c:	0049      	lsls	r1, r1, #1
 801969e:	f000 fd7b 	bl	801a198 <__assert_func>
 80196a2:	3101      	adds	r1, #1
 80196a4:	005b      	lsls	r3, r3, #1
 80196a6:	e7e8      	b.n	801967a <__lshift+0x1a>
 80196a8:	0098      	lsls	r0, r3, #2
 80196aa:	500a      	str	r2, [r1, r0]
 80196ac:	3301      	adds	r3, #1
 80196ae:	42bb      	cmp	r3, r7
 80196b0:	dbfa      	blt.n	80196a8 <__lshift+0x48>
 80196b2:	43fb      	mvns	r3, r7
 80196b4:	17db      	asrs	r3, r3, #31
 80196b6:	401f      	ands	r7, r3
 80196b8:	00bf      	lsls	r7, r7, #2
 80196ba:	0023      	movs	r3, r4
 80196bc:	201f      	movs	r0, #31
 80196be:	19c9      	adds	r1, r1, r7
 80196c0:	0037      	movs	r7, r6
 80196c2:	6922      	ldr	r2, [r4, #16]
 80196c4:	3314      	adds	r3, #20
 80196c6:	0092      	lsls	r2, r2, #2
 80196c8:	189a      	adds	r2, r3, r2
 80196ca:	4007      	ands	r7, r0
 80196cc:	4206      	tst	r6, r0
 80196ce:	d029      	beq.n	8019724 <__lshift+0xc4>
 80196d0:	3001      	adds	r0, #1
 80196d2:	1bc0      	subs	r0, r0, r7
 80196d4:	9003      	str	r0, [sp, #12]
 80196d6:	468c      	mov	ip, r1
 80196d8:	2000      	movs	r0, #0
 80196da:	681e      	ldr	r6, [r3, #0]
 80196dc:	40be      	lsls	r6, r7
 80196de:	4306      	orrs	r6, r0
 80196e0:	4660      	mov	r0, ip
 80196e2:	c040      	stmia	r0!, {r6}
 80196e4:	4684      	mov	ip, r0
 80196e6:	9e03      	ldr	r6, [sp, #12]
 80196e8:	cb01      	ldmia	r3!, {r0}
 80196ea:	40f0      	lsrs	r0, r6
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d8f4      	bhi.n	80196da <__lshift+0x7a>
 80196f0:	0026      	movs	r6, r4
 80196f2:	3615      	adds	r6, #21
 80196f4:	2304      	movs	r3, #4
 80196f6:	42b2      	cmp	r2, r6
 80196f8:	d304      	bcc.n	8019704 <__lshift+0xa4>
 80196fa:	1b13      	subs	r3, r2, r4
 80196fc:	3b15      	subs	r3, #21
 80196fe:	089b      	lsrs	r3, r3, #2
 8019700:	3301      	adds	r3, #1
 8019702:	009b      	lsls	r3, r3, #2
 8019704:	50c8      	str	r0, [r1, r3]
 8019706:	2800      	cmp	r0, #0
 8019708:	d002      	beq.n	8019710 <__lshift+0xb0>
 801970a:	9b01      	ldr	r3, [sp, #4]
 801970c:	3302      	adds	r3, #2
 801970e:	9300      	str	r3, [sp, #0]
 8019710:	9b00      	ldr	r3, [sp, #0]
 8019712:	9802      	ldr	r0, [sp, #8]
 8019714:	3b01      	subs	r3, #1
 8019716:	0021      	movs	r1, r4
 8019718:	612b      	str	r3, [r5, #16]
 801971a:	f7ff fdc3 	bl	80192a4 <_Bfree>
 801971e:	0028      	movs	r0, r5
 8019720:	b005      	add	sp, #20
 8019722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019724:	cb01      	ldmia	r3!, {r0}
 8019726:	c101      	stmia	r1!, {r0}
 8019728:	429a      	cmp	r2, r3
 801972a:	d8fb      	bhi.n	8019724 <__lshift+0xc4>
 801972c:	e7f0      	b.n	8019710 <__lshift+0xb0>
 801972e:	46c0      	nop			@ (mov r8, r8)
 8019730:	0801be9c 	.word	0x0801be9c
 8019734:	0801bead 	.word	0x0801bead

08019738 <__mcmp>:
 8019738:	b530      	push	{r4, r5, lr}
 801973a:	690b      	ldr	r3, [r1, #16]
 801973c:	6904      	ldr	r4, [r0, #16]
 801973e:	0002      	movs	r2, r0
 8019740:	1ae0      	subs	r0, r4, r3
 8019742:	429c      	cmp	r4, r3
 8019744:	d10f      	bne.n	8019766 <__mcmp+0x2e>
 8019746:	3214      	adds	r2, #20
 8019748:	009b      	lsls	r3, r3, #2
 801974a:	3114      	adds	r1, #20
 801974c:	0014      	movs	r4, r2
 801974e:	18c9      	adds	r1, r1, r3
 8019750:	18d2      	adds	r2, r2, r3
 8019752:	3a04      	subs	r2, #4
 8019754:	3904      	subs	r1, #4
 8019756:	6815      	ldr	r5, [r2, #0]
 8019758:	680b      	ldr	r3, [r1, #0]
 801975a:	429d      	cmp	r5, r3
 801975c:	d004      	beq.n	8019768 <__mcmp+0x30>
 801975e:	2001      	movs	r0, #1
 8019760:	429d      	cmp	r5, r3
 8019762:	d200      	bcs.n	8019766 <__mcmp+0x2e>
 8019764:	3802      	subs	r0, #2
 8019766:	bd30      	pop	{r4, r5, pc}
 8019768:	4294      	cmp	r4, r2
 801976a:	d3f2      	bcc.n	8019752 <__mcmp+0x1a>
 801976c:	e7fb      	b.n	8019766 <__mcmp+0x2e>
	...

08019770 <__mdiff>:
 8019770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019772:	000c      	movs	r4, r1
 8019774:	b087      	sub	sp, #28
 8019776:	9000      	str	r0, [sp, #0]
 8019778:	0011      	movs	r1, r2
 801977a:	0020      	movs	r0, r4
 801977c:	0017      	movs	r7, r2
 801977e:	f7ff ffdb 	bl	8019738 <__mcmp>
 8019782:	1e05      	subs	r5, r0, #0
 8019784:	d110      	bne.n	80197a8 <__mdiff+0x38>
 8019786:	0001      	movs	r1, r0
 8019788:	9800      	ldr	r0, [sp, #0]
 801978a:	f7ff fd47 	bl	801921c <_Balloc>
 801978e:	1e02      	subs	r2, r0, #0
 8019790:	d104      	bne.n	801979c <__mdiff+0x2c>
 8019792:	4b40      	ldr	r3, [pc, #256]	@ (8019894 <__mdiff+0x124>)
 8019794:	4840      	ldr	r0, [pc, #256]	@ (8019898 <__mdiff+0x128>)
 8019796:	4941      	ldr	r1, [pc, #260]	@ (801989c <__mdiff+0x12c>)
 8019798:	f000 fcfe 	bl	801a198 <__assert_func>
 801979c:	2301      	movs	r3, #1
 801979e:	6145      	str	r5, [r0, #20]
 80197a0:	6103      	str	r3, [r0, #16]
 80197a2:	0010      	movs	r0, r2
 80197a4:	b007      	add	sp, #28
 80197a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197a8:	2600      	movs	r6, #0
 80197aa:	42b0      	cmp	r0, r6
 80197ac:	da03      	bge.n	80197b6 <__mdiff+0x46>
 80197ae:	0023      	movs	r3, r4
 80197b0:	003c      	movs	r4, r7
 80197b2:	001f      	movs	r7, r3
 80197b4:	3601      	adds	r6, #1
 80197b6:	6861      	ldr	r1, [r4, #4]
 80197b8:	9800      	ldr	r0, [sp, #0]
 80197ba:	f7ff fd2f 	bl	801921c <_Balloc>
 80197be:	1e02      	subs	r2, r0, #0
 80197c0:	d103      	bne.n	80197ca <__mdiff+0x5a>
 80197c2:	4b34      	ldr	r3, [pc, #208]	@ (8019894 <__mdiff+0x124>)
 80197c4:	4834      	ldr	r0, [pc, #208]	@ (8019898 <__mdiff+0x128>)
 80197c6:	4936      	ldr	r1, [pc, #216]	@ (80198a0 <__mdiff+0x130>)
 80197c8:	e7e6      	b.n	8019798 <__mdiff+0x28>
 80197ca:	6923      	ldr	r3, [r4, #16]
 80197cc:	3414      	adds	r4, #20
 80197ce:	9300      	str	r3, [sp, #0]
 80197d0:	009b      	lsls	r3, r3, #2
 80197d2:	18e3      	adds	r3, r4, r3
 80197d4:	0021      	movs	r1, r4
 80197d6:	9401      	str	r4, [sp, #4]
 80197d8:	003c      	movs	r4, r7
 80197da:	9302      	str	r3, [sp, #8]
 80197dc:	693b      	ldr	r3, [r7, #16]
 80197de:	3414      	adds	r4, #20
 80197e0:	009b      	lsls	r3, r3, #2
 80197e2:	18e3      	adds	r3, r4, r3
 80197e4:	9303      	str	r3, [sp, #12]
 80197e6:	0003      	movs	r3, r0
 80197e8:	60c6      	str	r6, [r0, #12]
 80197ea:	468c      	mov	ip, r1
 80197ec:	2000      	movs	r0, #0
 80197ee:	3314      	adds	r3, #20
 80197f0:	9304      	str	r3, [sp, #16]
 80197f2:	9305      	str	r3, [sp, #20]
 80197f4:	4663      	mov	r3, ip
 80197f6:	cb20      	ldmia	r3!, {r5}
 80197f8:	b2a9      	uxth	r1, r5
 80197fa:	000e      	movs	r6, r1
 80197fc:	469c      	mov	ip, r3
 80197fe:	cc08      	ldmia	r4!, {r3}
 8019800:	0c2d      	lsrs	r5, r5, #16
 8019802:	b299      	uxth	r1, r3
 8019804:	1a71      	subs	r1, r6, r1
 8019806:	1809      	adds	r1, r1, r0
 8019808:	0c1b      	lsrs	r3, r3, #16
 801980a:	1408      	asrs	r0, r1, #16
 801980c:	1aeb      	subs	r3, r5, r3
 801980e:	181b      	adds	r3, r3, r0
 8019810:	1418      	asrs	r0, r3, #16
 8019812:	b289      	uxth	r1, r1
 8019814:	041b      	lsls	r3, r3, #16
 8019816:	4319      	orrs	r1, r3
 8019818:	9b05      	ldr	r3, [sp, #20]
 801981a:	c302      	stmia	r3!, {r1}
 801981c:	9305      	str	r3, [sp, #20]
 801981e:	9b03      	ldr	r3, [sp, #12]
 8019820:	42a3      	cmp	r3, r4
 8019822:	d8e7      	bhi.n	80197f4 <__mdiff+0x84>
 8019824:	0039      	movs	r1, r7
 8019826:	9c03      	ldr	r4, [sp, #12]
 8019828:	3115      	adds	r1, #21
 801982a:	2304      	movs	r3, #4
 801982c:	428c      	cmp	r4, r1
 801982e:	d304      	bcc.n	801983a <__mdiff+0xca>
 8019830:	1be3      	subs	r3, r4, r7
 8019832:	3b15      	subs	r3, #21
 8019834:	089b      	lsrs	r3, r3, #2
 8019836:	3301      	adds	r3, #1
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	9901      	ldr	r1, [sp, #4]
 801983c:	18cd      	adds	r5, r1, r3
 801983e:	9904      	ldr	r1, [sp, #16]
 8019840:	002e      	movs	r6, r5
 8019842:	18cb      	adds	r3, r1, r3
 8019844:	001f      	movs	r7, r3
 8019846:	9902      	ldr	r1, [sp, #8]
 8019848:	428e      	cmp	r6, r1
 801984a:	d311      	bcc.n	8019870 <__mdiff+0x100>
 801984c:	9c02      	ldr	r4, [sp, #8]
 801984e:	1ee9      	subs	r1, r5, #3
 8019850:	2000      	movs	r0, #0
 8019852:	428c      	cmp	r4, r1
 8019854:	d304      	bcc.n	8019860 <__mdiff+0xf0>
 8019856:	0021      	movs	r1, r4
 8019858:	3103      	adds	r1, #3
 801985a:	1b49      	subs	r1, r1, r5
 801985c:	0889      	lsrs	r1, r1, #2
 801985e:	0088      	lsls	r0, r1, #2
 8019860:	181b      	adds	r3, r3, r0
 8019862:	3b04      	subs	r3, #4
 8019864:	6819      	ldr	r1, [r3, #0]
 8019866:	2900      	cmp	r1, #0
 8019868:	d010      	beq.n	801988c <__mdiff+0x11c>
 801986a:	9b00      	ldr	r3, [sp, #0]
 801986c:	6113      	str	r3, [r2, #16]
 801986e:	e798      	b.n	80197a2 <__mdiff+0x32>
 8019870:	4684      	mov	ip, r0
 8019872:	ce02      	ldmia	r6!, {r1}
 8019874:	b288      	uxth	r0, r1
 8019876:	4460      	add	r0, ip
 8019878:	1400      	asrs	r0, r0, #16
 801987a:	0c0c      	lsrs	r4, r1, #16
 801987c:	1904      	adds	r4, r0, r4
 801987e:	4461      	add	r1, ip
 8019880:	1420      	asrs	r0, r4, #16
 8019882:	b289      	uxth	r1, r1
 8019884:	0424      	lsls	r4, r4, #16
 8019886:	4321      	orrs	r1, r4
 8019888:	c702      	stmia	r7!, {r1}
 801988a:	e7dc      	b.n	8019846 <__mdiff+0xd6>
 801988c:	9900      	ldr	r1, [sp, #0]
 801988e:	3901      	subs	r1, #1
 8019890:	9100      	str	r1, [sp, #0]
 8019892:	e7e6      	b.n	8019862 <__mdiff+0xf2>
 8019894:	0801be9c 	.word	0x0801be9c
 8019898:	0801bead 	.word	0x0801bead
 801989c:	00000237 	.word	0x00000237
 80198a0:	00000245 	.word	0x00000245

080198a4 <__d2b>:
 80198a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198a6:	2101      	movs	r1, #1
 80198a8:	0016      	movs	r6, r2
 80198aa:	001f      	movs	r7, r3
 80198ac:	f7ff fcb6 	bl	801921c <_Balloc>
 80198b0:	1e04      	subs	r4, r0, #0
 80198b2:	d105      	bne.n	80198c0 <__d2b+0x1c>
 80198b4:	0022      	movs	r2, r4
 80198b6:	4b25      	ldr	r3, [pc, #148]	@ (801994c <__d2b+0xa8>)
 80198b8:	4825      	ldr	r0, [pc, #148]	@ (8019950 <__d2b+0xac>)
 80198ba:	4926      	ldr	r1, [pc, #152]	@ (8019954 <__d2b+0xb0>)
 80198bc:	f000 fc6c 	bl	801a198 <__assert_func>
 80198c0:	033b      	lsls	r3, r7, #12
 80198c2:	007d      	lsls	r5, r7, #1
 80198c4:	0b1b      	lsrs	r3, r3, #12
 80198c6:	0d6d      	lsrs	r5, r5, #21
 80198c8:	d002      	beq.n	80198d0 <__d2b+0x2c>
 80198ca:	2280      	movs	r2, #128	@ 0x80
 80198cc:	0352      	lsls	r2, r2, #13
 80198ce:	4313      	orrs	r3, r2
 80198d0:	9301      	str	r3, [sp, #4]
 80198d2:	2e00      	cmp	r6, #0
 80198d4:	d025      	beq.n	8019922 <__d2b+0x7e>
 80198d6:	4668      	mov	r0, sp
 80198d8:	9600      	str	r6, [sp, #0]
 80198da:	f7ff fd6c 	bl	80193b6 <__lo0bits>
 80198de:	9b01      	ldr	r3, [sp, #4]
 80198e0:	9900      	ldr	r1, [sp, #0]
 80198e2:	2800      	cmp	r0, #0
 80198e4:	d01b      	beq.n	801991e <__d2b+0x7a>
 80198e6:	2220      	movs	r2, #32
 80198e8:	001e      	movs	r6, r3
 80198ea:	1a12      	subs	r2, r2, r0
 80198ec:	4096      	lsls	r6, r2
 80198ee:	0032      	movs	r2, r6
 80198f0:	40c3      	lsrs	r3, r0
 80198f2:	430a      	orrs	r2, r1
 80198f4:	6162      	str	r2, [r4, #20]
 80198f6:	9301      	str	r3, [sp, #4]
 80198f8:	9e01      	ldr	r6, [sp, #4]
 80198fa:	61a6      	str	r6, [r4, #24]
 80198fc:	1e73      	subs	r3, r6, #1
 80198fe:	419e      	sbcs	r6, r3
 8019900:	3601      	adds	r6, #1
 8019902:	6126      	str	r6, [r4, #16]
 8019904:	2d00      	cmp	r5, #0
 8019906:	d014      	beq.n	8019932 <__d2b+0x8e>
 8019908:	2635      	movs	r6, #53	@ 0x35
 801990a:	4b13      	ldr	r3, [pc, #76]	@ (8019958 <__d2b+0xb4>)
 801990c:	18ed      	adds	r5, r5, r3
 801990e:	9b08      	ldr	r3, [sp, #32]
 8019910:	182d      	adds	r5, r5, r0
 8019912:	601d      	str	r5, [r3, #0]
 8019914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019916:	1a36      	subs	r6, r6, r0
 8019918:	601e      	str	r6, [r3, #0]
 801991a:	0020      	movs	r0, r4
 801991c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801991e:	6161      	str	r1, [r4, #20]
 8019920:	e7ea      	b.n	80198f8 <__d2b+0x54>
 8019922:	a801      	add	r0, sp, #4
 8019924:	f7ff fd47 	bl	80193b6 <__lo0bits>
 8019928:	9b01      	ldr	r3, [sp, #4]
 801992a:	2601      	movs	r6, #1
 801992c:	6163      	str	r3, [r4, #20]
 801992e:	3020      	adds	r0, #32
 8019930:	e7e7      	b.n	8019902 <__d2b+0x5e>
 8019932:	4b0a      	ldr	r3, [pc, #40]	@ (801995c <__d2b+0xb8>)
 8019934:	18c0      	adds	r0, r0, r3
 8019936:	9b08      	ldr	r3, [sp, #32]
 8019938:	6018      	str	r0, [r3, #0]
 801993a:	4b09      	ldr	r3, [pc, #36]	@ (8019960 <__d2b+0xbc>)
 801993c:	18f3      	adds	r3, r6, r3
 801993e:	009b      	lsls	r3, r3, #2
 8019940:	18e3      	adds	r3, r4, r3
 8019942:	6958      	ldr	r0, [r3, #20]
 8019944:	f7ff fd16 	bl	8019374 <__hi0bits>
 8019948:	0176      	lsls	r6, r6, #5
 801994a:	e7e3      	b.n	8019914 <__d2b+0x70>
 801994c:	0801be9c 	.word	0x0801be9c
 8019950:	0801bead 	.word	0x0801bead
 8019954:	0000030f 	.word	0x0000030f
 8019958:	fffffbcd 	.word	0xfffffbcd
 801995c:	fffffbce 	.word	0xfffffbce
 8019960:	3fffffff 	.word	0x3fffffff

08019964 <__ssputs_r>:
 8019964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019966:	688e      	ldr	r6, [r1, #8]
 8019968:	b085      	sub	sp, #20
 801996a:	001f      	movs	r7, r3
 801996c:	000c      	movs	r4, r1
 801996e:	680b      	ldr	r3, [r1, #0]
 8019970:	9002      	str	r0, [sp, #8]
 8019972:	9203      	str	r2, [sp, #12]
 8019974:	42be      	cmp	r6, r7
 8019976:	d830      	bhi.n	80199da <__ssputs_r+0x76>
 8019978:	210c      	movs	r1, #12
 801997a:	5e62      	ldrsh	r2, [r4, r1]
 801997c:	2190      	movs	r1, #144	@ 0x90
 801997e:	00c9      	lsls	r1, r1, #3
 8019980:	420a      	tst	r2, r1
 8019982:	d028      	beq.n	80199d6 <__ssputs_r+0x72>
 8019984:	2003      	movs	r0, #3
 8019986:	6921      	ldr	r1, [r4, #16]
 8019988:	1a5b      	subs	r3, r3, r1
 801998a:	9301      	str	r3, [sp, #4]
 801998c:	6963      	ldr	r3, [r4, #20]
 801998e:	4343      	muls	r3, r0
 8019990:	9801      	ldr	r0, [sp, #4]
 8019992:	0fdd      	lsrs	r5, r3, #31
 8019994:	18ed      	adds	r5, r5, r3
 8019996:	1c7b      	adds	r3, r7, #1
 8019998:	181b      	adds	r3, r3, r0
 801999a:	106d      	asrs	r5, r5, #1
 801999c:	42ab      	cmp	r3, r5
 801999e:	d900      	bls.n	80199a2 <__ssputs_r+0x3e>
 80199a0:	001d      	movs	r5, r3
 80199a2:	0552      	lsls	r2, r2, #21
 80199a4:	d528      	bpl.n	80199f8 <__ssputs_r+0x94>
 80199a6:	0029      	movs	r1, r5
 80199a8:	9802      	ldr	r0, [sp, #8]
 80199aa:	f7ff fba7 	bl	80190fc <_malloc_r>
 80199ae:	1e06      	subs	r6, r0, #0
 80199b0:	d02c      	beq.n	8019a0c <__ssputs_r+0xa8>
 80199b2:	9a01      	ldr	r2, [sp, #4]
 80199b4:	6921      	ldr	r1, [r4, #16]
 80199b6:	f7fe fc9f 	bl	80182f8 <memcpy>
 80199ba:	89a2      	ldrh	r2, [r4, #12]
 80199bc:	4b18      	ldr	r3, [pc, #96]	@ (8019a20 <__ssputs_r+0xbc>)
 80199be:	401a      	ands	r2, r3
 80199c0:	2380      	movs	r3, #128	@ 0x80
 80199c2:	4313      	orrs	r3, r2
 80199c4:	81a3      	strh	r3, [r4, #12]
 80199c6:	9b01      	ldr	r3, [sp, #4]
 80199c8:	6126      	str	r6, [r4, #16]
 80199ca:	18f6      	adds	r6, r6, r3
 80199cc:	6026      	str	r6, [r4, #0]
 80199ce:	003e      	movs	r6, r7
 80199d0:	6165      	str	r5, [r4, #20]
 80199d2:	1aed      	subs	r5, r5, r3
 80199d4:	60a5      	str	r5, [r4, #8]
 80199d6:	42be      	cmp	r6, r7
 80199d8:	d900      	bls.n	80199dc <__ssputs_r+0x78>
 80199da:	003e      	movs	r6, r7
 80199dc:	0032      	movs	r2, r6
 80199de:	9903      	ldr	r1, [sp, #12]
 80199e0:	6820      	ldr	r0, [r4, #0]
 80199e2:	f000 fbb3 	bl	801a14c <memmove>
 80199e6:	2000      	movs	r0, #0
 80199e8:	68a3      	ldr	r3, [r4, #8]
 80199ea:	1b9b      	subs	r3, r3, r6
 80199ec:	60a3      	str	r3, [r4, #8]
 80199ee:	6823      	ldr	r3, [r4, #0]
 80199f0:	199b      	adds	r3, r3, r6
 80199f2:	6023      	str	r3, [r4, #0]
 80199f4:	b005      	add	sp, #20
 80199f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199f8:	002a      	movs	r2, r5
 80199fa:	9802      	ldr	r0, [sp, #8]
 80199fc:	f000 fc29 	bl	801a252 <_realloc_r>
 8019a00:	1e06      	subs	r6, r0, #0
 8019a02:	d1e0      	bne.n	80199c6 <__ssputs_r+0x62>
 8019a04:	6921      	ldr	r1, [r4, #16]
 8019a06:	9802      	ldr	r0, [sp, #8]
 8019a08:	f7ff fb02 	bl	8019010 <_free_r>
 8019a0c:	230c      	movs	r3, #12
 8019a0e:	2001      	movs	r0, #1
 8019a10:	9a02      	ldr	r2, [sp, #8]
 8019a12:	4240      	negs	r0, r0
 8019a14:	6013      	str	r3, [r2, #0]
 8019a16:	89a2      	ldrh	r2, [r4, #12]
 8019a18:	3334      	adds	r3, #52	@ 0x34
 8019a1a:	4313      	orrs	r3, r2
 8019a1c:	81a3      	strh	r3, [r4, #12]
 8019a1e:	e7e9      	b.n	80199f4 <__ssputs_r+0x90>
 8019a20:	fffffb7f 	.word	0xfffffb7f

08019a24 <_svfiprintf_r>:
 8019a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a26:	b0a1      	sub	sp, #132	@ 0x84
 8019a28:	9003      	str	r0, [sp, #12]
 8019a2a:	001d      	movs	r5, r3
 8019a2c:	898b      	ldrh	r3, [r1, #12]
 8019a2e:	000f      	movs	r7, r1
 8019a30:	0016      	movs	r6, r2
 8019a32:	061b      	lsls	r3, r3, #24
 8019a34:	d511      	bpl.n	8019a5a <_svfiprintf_r+0x36>
 8019a36:	690b      	ldr	r3, [r1, #16]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d10e      	bne.n	8019a5a <_svfiprintf_r+0x36>
 8019a3c:	2140      	movs	r1, #64	@ 0x40
 8019a3e:	f7ff fb5d 	bl	80190fc <_malloc_r>
 8019a42:	6038      	str	r0, [r7, #0]
 8019a44:	6138      	str	r0, [r7, #16]
 8019a46:	2800      	cmp	r0, #0
 8019a48:	d105      	bne.n	8019a56 <_svfiprintf_r+0x32>
 8019a4a:	230c      	movs	r3, #12
 8019a4c:	9a03      	ldr	r2, [sp, #12]
 8019a4e:	6013      	str	r3, [r2, #0]
 8019a50:	2001      	movs	r0, #1
 8019a52:	4240      	negs	r0, r0
 8019a54:	e0cf      	b.n	8019bf6 <_svfiprintf_r+0x1d2>
 8019a56:	2340      	movs	r3, #64	@ 0x40
 8019a58:	617b      	str	r3, [r7, #20]
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	ac08      	add	r4, sp, #32
 8019a5e:	6163      	str	r3, [r4, #20]
 8019a60:	3320      	adds	r3, #32
 8019a62:	7663      	strb	r3, [r4, #25]
 8019a64:	3310      	adds	r3, #16
 8019a66:	76a3      	strb	r3, [r4, #26]
 8019a68:	9507      	str	r5, [sp, #28]
 8019a6a:	0035      	movs	r5, r6
 8019a6c:	782b      	ldrb	r3, [r5, #0]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d001      	beq.n	8019a76 <_svfiprintf_r+0x52>
 8019a72:	2b25      	cmp	r3, #37	@ 0x25
 8019a74:	d148      	bne.n	8019b08 <_svfiprintf_r+0xe4>
 8019a76:	1bab      	subs	r3, r5, r6
 8019a78:	9305      	str	r3, [sp, #20]
 8019a7a:	42b5      	cmp	r5, r6
 8019a7c:	d00b      	beq.n	8019a96 <_svfiprintf_r+0x72>
 8019a7e:	0032      	movs	r2, r6
 8019a80:	0039      	movs	r1, r7
 8019a82:	9803      	ldr	r0, [sp, #12]
 8019a84:	f7ff ff6e 	bl	8019964 <__ssputs_r>
 8019a88:	3001      	adds	r0, #1
 8019a8a:	d100      	bne.n	8019a8e <_svfiprintf_r+0x6a>
 8019a8c:	e0ae      	b.n	8019bec <_svfiprintf_r+0x1c8>
 8019a8e:	6963      	ldr	r3, [r4, #20]
 8019a90:	9a05      	ldr	r2, [sp, #20]
 8019a92:	189b      	adds	r3, r3, r2
 8019a94:	6163      	str	r3, [r4, #20]
 8019a96:	782b      	ldrb	r3, [r5, #0]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d100      	bne.n	8019a9e <_svfiprintf_r+0x7a>
 8019a9c:	e0a6      	b.n	8019bec <_svfiprintf_r+0x1c8>
 8019a9e:	2201      	movs	r2, #1
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	4252      	negs	r2, r2
 8019aa4:	6062      	str	r2, [r4, #4]
 8019aa6:	a904      	add	r1, sp, #16
 8019aa8:	3254      	adds	r2, #84	@ 0x54
 8019aaa:	1852      	adds	r2, r2, r1
 8019aac:	1c6e      	adds	r6, r5, #1
 8019aae:	6023      	str	r3, [r4, #0]
 8019ab0:	60e3      	str	r3, [r4, #12]
 8019ab2:	60a3      	str	r3, [r4, #8]
 8019ab4:	7013      	strb	r3, [r2, #0]
 8019ab6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019ab8:	4b54      	ldr	r3, [pc, #336]	@ (8019c0c <_svfiprintf_r+0x1e8>)
 8019aba:	2205      	movs	r2, #5
 8019abc:	0018      	movs	r0, r3
 8019abe:	7831      	ldrb	r1, [r6, #0]
 8019ac0:	9305      	str	r3, [sp, #20]
 8019ac2:	f7fe fc0e 	bl	80182e2 <memchr>
 8019ac6:	1c75      	adds	r5, r6, #1
 8019ac8:	2800      	cmp	r0, #0
 8019aca:	d11f      	bne.n	8019b0c <_svfiprintf_r+0xe8>
 8019acc:	6822      	ldr	r2, [r4, #0]
 8019ace:	06d3      	lsls	r3, r2, #27
 8019ad0:	d504      	bpl.n	8019adc <_svfiprintf_r+0xb8>
 8019ad2:	2353      	movs	r3, #83	@ 0x53
 8019ad4:	a904      	add	r1, sp, #16
 8019ad6:	185b      	adds	r3, r3, r1
 8019ad8:	2120      	movs	r1, #32
 8019ada:	7019      	strb	r1, [r3, #0]
 8019adc:	0713      	lsls	r3, r2, #28
 8019ade:	d504      	bpl.n	8019aea <_svfiprintf_r+0xc6>
 8019ae0:	2353      	movs	r3, #83	@ 0x53
 8019ae2:	a904      	add	r1, sp, #16
 8019ae4:	185b      	adds	r3, r3, r1
 8019ae6:	212b      	movs	r1, #43	@ 0x2b
 8019ae8:	7019      	strb	r1, [r3, #0]
 8019aea:	7833      	ldrb	r3, [r6, #0]
 8019aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8019aee:	d016      	beq.n	8019b1e <_svfiprintf_r+0xfa>
 8019af0:	0035      	movs	r5, r6
 8019af2:	2100      	movs	r1, #0
 8019af4:	200a      	movs	r0, #10
 8019af6:	68e3      	ldr	r3, [r4, #12]
 8019af8:	782a      	ldrb	r2, [r5, #0]
 8019afa:	1c6e      	adds	r6, r5, #1
 8019afc:	3a30      	subs	r2, #48	@ 0x30
 8019afe:	2a09      	cmp	r2, #9
 8019b00:	d950      	bls.n	8019ba4 <_svfiprintf_r+0x180>
 8019b02:	2900      	cmp	r1, #0
 8019b04:	d111      	bne.n	8019b2a <_svfiprintf_r+0x106>
 8019b06:	e017      	b.n	8019b38 <_svfiprintf_r+0x114>
 8019b08:	3501      	adds	r5, #1
 8019b0a:	e7af      	b.n	8019a6c <_svfiprintf_r+0x48>
 8019b0c:	9b05      	ldr	r3, [sp, #20]
 8019b0e:	6822      	ldr	r2, [r4, #0]
 8019b10:	1ac0      	subs	r0, r0, r3
 8019b12:	2301      	movs	r3, #1
 8019b14:	4083      	lsls	r3, r0
 8019b16:	4313      	orrs	r3, r2
 8019b18:	002e      	movs	r6, r5
 8019b1a:	6023      	str	r3, [r4, #0]
 8019b1c:	e7cc      	b.n	8019ab8 <_svfiprintf_r+0x94>
 8019b1e:	9b07      	ldr	r3, [sp, #28]
 8019b20:	1d19      	adds	r1, r3, #4
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	9107      	str	r1, [sp, #28]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	db01      	blt.n	8019b2e <_svfiprintf_r+0x10a>
 8019b2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b2c:	e004      	b.n	8019b38 <_svfiprintf_r+0x114>
 8019b2e:	425b      	negs	r3, r3
 8019b30:	60e3      	str	r3, [r4, #12]
 8019b32:	2302      	movs	r3, #2
 8019b34:	4313      	orrs	r3, r2
 8019b36:	6023      	str	r3, [r4, #0]
 8019b38:	782b      	ldrb	r3, [r5, #0]
 8019b3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8019b3c:	d10c      	bne.n	8019b58 <_svfiprintf_r+0x134>
 8019b3e:	786b      	ldrb	r3, [r5, #1]
 8019b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8019b42:	d134      	bne.n	8019bae <_svfiprintf_r+0x18a>
 8019b44:	9b07      	ldr	r3, [sp, #28]
 8019b46:	3502      	adds	r5, #2
 8019b48:	1d1a      	adds	r2, r3, #4
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	9207      	str	r2, [sp, #28]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	da01      	bge.n	8019b56 <_svfiprintf_r+0x132>
 8019b52:	2301      	movs	r3, #1
 8019b54:	425b      	negs	r3, r3
 8019b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b58:	4e2d      	ldr	r6, [pc, #180]	@ (8019c10 <_svfiprintf_r+0x1ec>)
 8019b5a:	2203      	movs	r2, #3
 8019b5c:	0030      	movs	r0, r6
 8019b5e:	7829      	ldrb	r1, [r5, #0]
 8019b60:	f7fe fbbf 	bl	80182e2 <memchr>
 8019b64:	2800      	cmp	r0, #0
 8019b66:	d006      	beq.n	8019b76 <_svfiprintf_r+0x152>
 8019b68:	2340      	movs	r3, #64	@ 0x40
 8019b6a:	1b80      	subs	r0, r0, r6
 8019b6c:	4083      	lsls	r3, r0
 8019b6e:	6822      	ldr	r2, [r4, #0]
 8019b70:	3501      	adds	r5, #1
 8019b72:	4313      	orrs	r3, r2
 8019b74:	6023      	str	r3, [r4, #0]
 8019b76:	7829      	ldrb	r1, [r5, #0]
 8019b78:	2206      	movs	r2, #6
 8019b7a:	4826      	ldr	r0, [pc, #152]	@ (8019c14 <_svfiprintf_r+0x1f0>)
 8019b7c:	1c6e      	adds	r6, r5, #1
 8019b7e:	7621      	strb	r1, [r4, #24]
 8019b80:	f7fe fbaf 	bl	80182e2 <memchr>
 8019b84:	2800      	cmp	r0, #0
 8019b86:	d038      	beq.n	8019bfa <_svfiprintf_r+0x1d6>
 8019b88:	4b23      	ldr	r3, [pc, #140]	@ (8019c18 <_svfiprintf_r+0x1f4>)
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d122      	bne.n	8019bd4 <_svfiprintf_r+0x1b0>
 8019b8e:	2207      	movs	r2, #7
 8019b90:	9b07      	ldr	r3, [sp, #28]
 8019b92:	3307      	adds	r3, #7
 8019b94:	4393      	bics	r3, r2
 8019b96:	3308      	adds	r3, #8
 8019b98:	9307      	str	r3, [sp, #28]
 8019b9a:	6963      	ldr	r3, [r4, #20]
 8019b9c:	9a04      	ldr	r2, [sp, #16]
 8019b9e:	189b      	adds	r3, r3, r2
 8019ba0:	6163      	str	r3, [r4, #20]
 8019ba2:	e762      	b.n	8019a6a <_svfiprintf_r+0x46>
 8019ba4:	4343      	muls	r3, r0
 8019ba6:	0035      	movs	r5, r6
 8019ba8:	2101      	movs	r1, #1
 8019baa:	189b      	adds	r3, r3, r2
 8019bac:	e7a4      	b.n	8019af8 <_svfiprintf_r+0xd4>
 8019bae:	2300      	movs	r3, #0
 8019bb0:	200a      	movs	r0, #10
 8019bb2:	0019      	movs	r1, r3
 8019bb4:	3501      	adds	r5, #1
 8019bb6:	6063      	str	r3, [r4, #4]
 8019bb8:	782a      	ldrb	r2, [r5, #0]
 8019bba:	1c6e      	adds	r6, r5, #1
 8019bbc:	3a30      	subs	r2, #48	@ 0x30
 8019bbe:	2a09      	cmp	r2, #9
 8019bc0:	d903      	bls.n	8019bca <_svfiprintf_r+0x1a6>
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d0c8      	beq.n	8019b58 <_svfiprintf_r+0x134>
 8019bc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8019bc8:	e7c6      	b.n	8019b58 <_svfiprintf_r+0x134>
 8019bca:	4341      	muls	r1, r0
 8019bcc:	0035      	movs	r5, r6
 8019bce:	2301      	movs	r3, #1
 8019bd0:	1889      	adds	r1, r1, r2
 8019bd2:	e7f1      	b.n	8019bb8 <_svfiprintf_r+0x194>
 8019bd4:	aa07      	add	r2, sp, #28
 8019bd6:	9200      	str	r2, [sp, #0]
 8019bd8:	0021      	movs	r1, r4
 8019bda:	003a      	movs	r2, r7
 8019bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8019c1c <_svfiprintf_r+0x1f8>)
 8019bde:	9803      	ldr	r0, [sp, #12]
 8019be0:	f7fd fd8c 	bl	80176fc <_printf_float>
 8019be4:	9004      	str	r0, [sp, #16]
 8019be6:	9b04      	ldr	r3, [sp, #16]
 8019be8:	3301      	adds	r3, #1
 8019bea:	d1d6      	bne.n	8019b9a <_svfiprintf_r+0x176>
 8019bec:	89bb      	ldrh	r3, [r7, #12]
 8019bee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019bf0:	065b      	lsls	r3, r3, #25
 8019bf2:	d500      	bpl.n	8019bf6 <_svfiprintf_r+0x1d2>
 8019bf4:	e72c      	b.n	8019a50 <_svfiprintf_r+0x2c>
 8019bf6:	b021      	add	sp, #132	@ 0x84
 8019bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bfa:	aa07      	add	r2, sp, #28
 8019bfc:	9200      	str	r2, [sp, #0]
 8019bfe:	0021      	movs	r1, r4
 8019c00:	003a      	movs	r2, r7
 8019c02:	4b06      	ldr	r3, [pc, #24]	@ (8019c1c <_svfiprintf_r+0x1f8>)
 8019c04:	9803      	ldr	r0, [sp, #12]
 8019c06:	f7fe f827 	bl	8017c58 <_printf_i>
 8019c0a:	e7eb      	b.n	8019be4 <_svfiprintf_r+0x1c0>
 8019c0c:	0801c008 	.word	0x0801c008
 8019c10:	0801c00e 	.word	0x0801c00e
 8019c14:	0801c012 	.word	0x0801c012
 8019c18:	080176fd 	.word	0x080176fd
 8019c1c:	08019965 	.word	0x08019965

08019c20 <__sfputc_r>:
 8019c20:	6893      	ldr	r3, [r2, #8]
 8019c22:	b510      	push	{r4, lr}
 8019c24:	3b01      	subs	r3, #1
 8019c26:	6093      	str	r3, [r2, #8]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	da04      	bge.n	8019c36 <__sfputc_r+0x16>
 8019c2c:	6994      	ldr	r4, [r2, #24]
 8019c2e:	42a3      	cmp	r3, r4
 8019c30:	db07      	blt.n	8019c42 <__sfputc_r+0x22>
 8019c32:	290a      	cmp	r1, #10
 8019c34:	d005      	beq.n	8019c42 <__sfputc_r+0x22>
 8019c36:	6813      	ldr	r3, [r2, #0]
 8019c38:	1c58      	adds	r0, r3, #1
 8019c3a:	6010      	str	r0, [r2, #0]
 8019c3c:	7019      	strb	r1, [r3, #0]
 8019c3e:	0008      	movs	r0, r1
 8019c40:	bd10      	pop	{r4, pc}
 8019c42:	f000 f9e2 	bl	801a00a <__swbuf_r>
 8019c46:	0001      	movs	r1, r0
 8019c48:	e7f9      	b.n	8019c3e <__sfputc_r+0x1e>

08019c4a <__sfputs_r>:
 8019c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c4c:	0006      	movs	r6, r0
 8019c4e:	000f      	movs	r7, r1
 8019c50:	0014      	movs	r4, r2
 8019c52:	18d5      	adds	r5, r2, r3
 8019c54:	42ac      	cmp	r4, r5
 8019c56:	d101      	bne.n	8019c5c <__sfputs_r+0x12>
 8019c58:	2000      	movs	r0, #0
 8019c5a:	e007      	b.n	8019c6c <__sfputs_r+0x22>
 8019c5c:	7821      	ldrb	r1, [r4, #0]
 8019c5e:	003a      	movs	r2, r7
 8019c60:	0030      	movs	r0, r6
 8019c62:	f7ff ffdd 	bl	8019c20 <__sfputc_r>
 8019c66:	3401      	adds	r4, #1
 8019c68:	1c43      	adds	r3, r0, #1
 8019c6a:	d1f3      	bne.n	8019c54 <__sfputs_r+0xa>
 8019c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019c70 <_vfiprintf_r>:
 8019c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c72:	b0a1      	sub	sp, #132	@ 0x84
 8019c74:	000f      	movs	r7, r1
 8019c76:	0015      	movs	r5, r2
 8019c78:	001e      	movs	r6, r3
 8019c7a:	9003      	str	r0, [sp, #12]
 8019c7c:	2800      	cmp	r0, #0
 8019c7e:	d004      	beq.n	8019c8a <_vfiprintf_r+0x1a>
 8019c80:	6a03      	ldr	r3, [r0, #32]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d101      	bne.n	8019c8a <_vfiprintf_r+0x1a>
 8019c86:	f7fe f985 	bl	8017f94 <__sinit>
 8019c8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019c8c:	07db      	lsls	r3, r3, #31
 8019c8e:	d405      	bmi.n	8019c9c <_vfiprintf_r+0x2c>
 8019c90:	89bb      	ldrh	r3, [r7, #12]
 8019c92:	059b      	lsls	r3, r3, #22
 8019c94:	d402      	bmi.n	8019c9c <_vfiprintf_r+0x2c>
 8019c96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019c98:	f7fe fb21 	bl	80182de <__retarget_lock_acquire_recursive>
 8019c9c:	89bb      	ldrh	r3, [r7, #12]
 8019c9e:	071b      	lsls	r3, r3, #28
 8019ca0:	d502      	bpl.n	8019ca8 <_vfiprintf_r+0x38>
 8019ca2:	693b      	ldr	r3, [r7, #16]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d113      	bne.n	8019cd0 <_vfiprintf_r+0x60>
 8019ca8:	0039      	movs	r1, r7
 8019caa:	9803      	ldr	r0, [sp, #12]
 8019cac:	f000 f9f0 	bl	801a090 <__swsetup_r>
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	d00d      	beq.n	8019cd0 <_vfiprintf_r+0x60>
 8019cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019cb6:	07db      	lsls	r3, r3, #31
 8019cb8:	d503      	bpl.n	8019cc2 <_vfiprintf_r+0x52>
 8019cba:	2001      	movs	r0, #1
 8019cbc:	4240      	negs	r0, r0
 8019cbe:	b021      	add	sp, #132	@ 0x84
 8019cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cc2:	89bb      	ldrh	r3, [r7, #12]
 8019cc4:	059b      	lsls	r3, r3, #22
 8019cc6:	d4f8      	bmi.n	8019cba <_vfiprintf_r+0x4a>
 8019cc8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019cca:	f7fe fb09 	bl	80182e0 <__retarget_lock_release_recursive>
 8019cce:	e7f4      	b.n	8019cba <_vfiprintf_r+0x4a>
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	ac08      	add	r4, sp, #32
 8019cd4:	6163      	str	r3, [r4, #20]
 8019cd6:	3320      	adds	r3, #32
 8019cd8:	7663      	strb	r3, [r4, #25]
 8019cda:	3310      	adds	r3, #16
 8019cdc:	76a3      	strb	r3, [r4, #26]
 8019cde:	9607      	str	r6, [sp, #28]
 8019ce0:	002e      	movs	r6, r5
 8019ce2:	7833      	ldrb	r3, [r6, #0]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d001      	beq.n	8019cec <_vfiprintf_r+0x7c>
 8019ce8:	2b25      	cmp	r3, #37	@ 0x25
 8019cea:	d148      	bne.n	8019d7e <_vfiprintf_r+0x10e>
 8019cec:	1b73      	subs	r3, r6, r5
 8019cee:	9305      	str	r3, [sp, #20]
 8019cf0:	42ae      	cmp	r6, r5
 8019cf2:	d00b      	beq.n	8019d0c <_vfiprintf_r+0x9c>
 8019cf4:	002a      	movs	r2, r5
 8019cf6:	0039      	movs	r1, r7
 8019cf8:	9803      	ldr	r0, [sp, #12]
 8019cfa:	f7ff ffa6 	bl	8019c4a <__sfputs_r>
 8019cfe:	3001      	adds	r0, #1
 8019d00:	d100      	bne.n	8019d04 <_vfiprintf_r+0x94>
 8019d02:	e0ae      	b.n	8019e62 <_vfiprintf_r+0x1f2>
 8019d04:	6963      	ldr	r3, [r4, #20]
 8019d06:	9a05      	ldr	r2, [sp, #20]
 8019d08:	189b      	adds	r3, r3, r2
 8019d0a:	6163      	str	r3, [r4, #20]
 8019d0c:	7833      	ldrb	r3, [r6, #0]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d100      	bne.n	8019d14 <_vfiprintf_r+0xa4>
 8019d12:	e0a6      	b.n	8019e62 <_vfiprintf_r+0x1f2>
 8019d14:	2201      	movs	r2, #1
 8019d16:	2300      	movs	r3, #0
 8019d18:	4252      	negs	r2, r2
 8019d1a:	6062      	str	r2, [r4, #4]
 8019d1c:	a904      	add	r1, sp, #16
 8019d1e:	3254      	adds	r2, #84	@ 0x54
 8019d20:	1852      	adds	r2, r2, r1
 8019d22:	1c75      	adds	r5, r6, #1
 8019d24:	6023      	str	r3, [r4, #0]
 8019d26:	60e3      	str	r3, [r4, #12]
 8019d28:	60a3      	str	r3, [r4, #8]
 8019d2a:	7013      	strb	r3, [r2, #0]
 8019d2c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019d2e:	4b59      	ldr	r3, [pc, #356]	@ (8019e94 <_vfiprintf_r+0x224>)
 8019d30:	2205      	movs	r2, #5
 8019d32:	0018      	movs	r0, r3
 8019d34:	7829      	ldrb	r1, [r5, #0]
 8019d36:	9305      	str	r3, [sp, #20]
 8019d38:	f7fe fad3 	bl	80182e2 <memchr>
 8019d3c:	1c6e      	adds	r6, r5, #1
 8019d3e:	2800      	cmp	r0, #0
 8019d40:	d11f      	bne.n	8019d82 <_vfiprintf_r+0x112>
 8019d42:	6822      	ldr	r2, [r4, #0]
 8019d44:	06d3      	lsls	r3, r2, #27
 8019d46:	d504      	bpl.n	8019d52 <_vfiprintf_r+0xe2>
 8019d48:	2353      	movs	r3, #83	@ 0x53
 8019d4a:	a904      	add	r1, sp, #16
 8019d4c:	185b      	adds	r3, r3, r1
 8019d4e:	2120      	movs	r1, #32
 8019d50:	7019      	strb	r1, [r3, #0]
 8019d52:	0713      	lsls	r3, r2, #28
 8019d54:	d504      	bpl.n	8019d60 <_vfiprintf_r+0xf0>
 8019d56:	2353      	movs	r3, #83	@ 0x53
 8019d58:	a904      	add	r1, sp, #16
 8019d5a:	185b      	adds	r3, r3, r1
 8019d5c:	212b      	movs	r1, #43	@ 0x2b
 8019d5e:	7019      	strb	r1, [r3, #0]
 8019d60:	782b      	ldrb	r3, [r5, #0]
 8019d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d64:	d016      	beq.n	8019d94 <_vfiprintf_r+0x124>
 8019d66:	002e      	movs	r6, r5
 8019d68:	2100      	movs	r1, #0
 8019d6a:	200a      	movs	r0, #10
 8019d6c:	68e3      	ldr	r3, [r4, #12]
 8019d6e:	7832      	ldrb	r2, [r6, #0]
 8019d70:	1c75      	adds	r5, r6, #1
 8019d72:	3a30      	subs	r2, #48	@ 0x30
 8019d74:	2a09      	cmp	r2, #9
 8019d76:	d950      	bls.n	8019e1a <_vfiprintf_r+0x1aa>
 8019d78:	2900      	cmp	r1, #0
 8019d7a:	d111      	bne.n	8019da0 <_vfiprintf_r+0x130>
 8019d7c:	e017      	b.n	8019dae <_vfiprintf_r+0x13e>
 8019d7e:	3601      	adds	r6, #1
 8019d80:	e7af      	b.n	8019ce2 <_vfiprintf_r+0x72>
 8019d82:	9b05      	ldr	r3, [sp, #20]
 8019d84:	6822      	ldr	r2, [r4, #0]
 8019d86:	1ac0      	subs	r0, r0, r3
 8019d88:	2301      	movs	r3, #1
 8019d8a:	4083      	lsls	r3, r0
 8019d8c:	4313      	orrs	r3, r2
 8019d8e:	0035      	movs	r5, r6
 8019d90:	6023      	str	r3, [r4, #0]
 8019d92:	e7cc      	b.n	8019d2e <_vfiprintf_r+0xbe>
 8019d94:	9b07      	ldr	r3, [sp, #28]
 8019d96:	1d19      	adds	r1, r3, #4
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	9107      	str	r1, [sp, #28]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	db01      	blt.n	8019da4 <_vfiprintf_r+0x134>
 8019da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019da2:	e004      	b.n	8019dae <_vfiprintf_r+0x13e>
 8019da4:	425b      	negs	r3, r3
 8019da6:	60e3      	str	r3, [r4, #12]
 8019da8:	2302      	movs	r3, #2
 8019daa:	4313      	orrs	r3, r2
 8019dac:	6023      	str	r3, [r4, #0]
 8019dae:	7833      	ldrb	r3, [r6, #0]
 8019db0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019db2:	d10c      	bne.n	8019dce <_vfiprintf_r+0x15e>
 8019db4:	7873      	ldrb	r3, [r6, #1]
 8019db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019db8:	d134      	bne.n	8019e24 <_vfiprintf_r+0x1b4>
 8019dba:	9b07      	ldr	r3, [sp, #28]
 8019dbc:	3602      	adds	r6, #2
 8019dbe:	1d1a      	adds	r2, r3, #4
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	9207      	str	r2, [sp, #28]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	da01      	bge.n	8019dcc <_vfiprintf_r+0x15c>
 8019dc8:	2301      	movs	r3, #1
 8019dca:	425b      	negs	r3, r3
 8019dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8019dce:	4d32      	ldr	r5, [pc, #200]	@ (8019e98 <_vfiprintf_r+0x228>)
 8019dd0:	2203      	movs	r2, #3
 8019dd2:	0028      	movs	r0, r5
 8019dd4:	7831      	ldrb	r1, [r6, #0]
 8019dd6:	f7fe fa84 	bl	80182e2 <memchr>
 8019dda:	2800      	cmp	r0, #0
 8019ddc:	d006      	beq.n	8019dec <_vfiprintf_r+0x17c>
 8019dde:	2340      	movs	r3, #64	@ 0x40
 8019de0:	1b40      	subs	r0, r0, r5
 8019de2:	4083      	lsls	r3, r0
 8019de4:	6822      	ldr	r2, [r4, #0]
 8019de6:	3601      	adds	r6, #1
 8019de8:	4313      	orrs	r3, r2
 8019dea:	6023      	str	r3, [r4, #0]
 8019dec:	7831      	ldrb	r1, [r6, #0]
 8019dee:	2206      	movs	r2, #6
 8019df0:	482a      	ldr	r0, [pc, #168]	@ (8019e9c <_vfiprintf_r+0x22c>)
 8019df2:	1c75      	adds	r5, r6, #1
 8019df4:	7621      	strb	r1, [r4, #24]
 8019df6:	f7fe fa74 	bl	80182e2 <memchr>
 8019dfa:	2800      	cmp	r0, #0
 8019dfc:	d040      	beq.n	8019e80 <_vfiprintf_r+0x210>
 8019dfe:	4b28      	ldr	r3, [pc, #160]	@ (8019ea0 <_vfiprintf_r+0x230>)
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d122      	bne.n	8019e4a <_vfiprintf_r+0x1da>
 8019e04:	2207      	movs	r2, #7
 8019e06:	9b07      	ldr	r3, [sp, #28]
 8019e08:	3307      	adds	r3, #7
 8019e0a:	4393      	bics	r3, r2
 8019e0c:	3308      	adds	r3, #8
 8019e0e:	9307      	str	r3, [sp, #28]
 8019e10:	6963      	ldr	r3, [r4, #20]
 8019e12:	9a04      	ldr	r2, [sp, #16]
 8019e14:	189b      	adds	r3, r3, r2
 8019e16:	6163      	str	r3, [r4, #20]
 8019e18:	e762      	b.n	8019ce0 <_vfiprintf_r+0x70>
 8019e1a:	4343      	muls	r3, r0
 8019e1c:	002e      	movs	r6, r5
 8019e1e:	2101      	movs	r1, #1
 8019e20:	189b      	adds	r3, r3, r2
 8019e22:	e7a4      	b.n	8019d6e <_vfiprintf_r+0xfe>
 8019e24:	2300      	movs	r3, #0
 8019e26:	200a      	movs	r0, #10
 8019e28:	0019      	movs	r1, r3
 8019e2a:	3601      	adds	r6, #1
 8019e2c:	6063      	str	r3, [r4, #4]
 8019e2e:	7832      	ldrb	r2, [r6, #0]
 8019e30:	1c75      	adds	r5, r6, #1
 8019e32:	3a30      	subs	r2, #48	@ 0x30
 8019e34:	2a09      	cmp	r2, #9
 8019e36:	d903      	bls.n	8019e40 <_vfiprintf_r+0x1d0>
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d0c8      	beq.n	8019dce <_vfiprintf_r+0x15e>
 8019e3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8019e3e:	e7c6      	b.n	8019dce <_vfiprintf_r+0x15e>
 8019e40:	4341      	muls	r1, r0
 8019e42:	002e      	movs	r6, r5
 8019e44:	2301      	movs	r3, #1
 8019e46:	1889      	adds	r1, r1, r2
 8019e48:	e7f1      	b.n	8019e2e <_vfiprintf_r+0x1be>
 8019e4a:	aa07      	add	r2, sp, #28
 8019e4c:	9200      	str	r2, [sp, #0]
 8019e4e:	0021      	movs	r1, r4
 8019e50:	003a      	movs	r2, r7
 8019e52:	4b14      	ldr	r3, [pc, #80]	@ (8019ea4 <_vfiprintf_r+0x234>)
 8019e54:	9803      	ldr	r0, [sp, #12]
 8019e56:	f7fd fc51 	bl	80176fc <_printf_float>
 8019e5a:	9004      	str	r0, [sp, #16]
 8019e5c:	9b04      	ldr	r3, [sp, #16]
 8019e5e:	3301      	adds	r3, #1
 8019e60:	d1d6      	bne.n	8019e10 <_vfiprintf_r+0x1a0>
 8019e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019e64:	07db      	lsls	r3, r3, #31
 8019e66:	d405      	bmi.n	8019e74 <_vfiprintf_r+0x204>
 8019e68:	89bb      	ldrh	r3, [r7, #12]
 8019e6a:	059b      	lsls	r3, r3, #22
 8019e6c:	d402      	bmi.n	8019e74 <_vfiprintf_r+0x204>
 8019e6e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019e70:	f7fe fa36 	bl	80182e0 <__retarget_lock_release_recursive>
 8019e74:	89bb      	ldrh	r3, [r7, #12]
 8019e76:	065b      	lsls	r3, r3, #25
 8019e78:	d500      	bpl.n	8019e7c <_vfiprintf_r+0x20c>
 8019e7a:	e71e      	b.n	8019cba <_vfiprintf_r+0x4a>
 8019e7c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019e7e:	e71e      	b.n	8019cbe <_vfiprintf_r+0x4e>
 8019e80:	aa07      	add	r2, sp, #28
 8019e82:	9200      	str	r2, [sp, #0]
 8019e84:	0021      	movs	r1, r4
 8019e86:	003a      	movs	r2, r7
 8019e88:	4b06      	ldr	r3, [pc, #24]	@ (8019ea4 <_vfiprintf_r+0x234>)
 8019e8a:	9803      	ldr	r0, [sp, #12]
 8019e8c:	f7fd fee4 	bl	8017c58 <_printf_i>
 8019e90:	e7e3      	b.n	8019e5a <_vfiprintf_r+0x1ea>
 8019e92:	46c0      	nop			@ (mov r8, r8)
 8019e94:	0801c008 	.word	0x0801c008
 8019e98:	0801c00e 	.word	0x0801c00e
 8019e9c:	0801c012 	.word	0x0801c012
 8019ea0:	080176fd 	.word	0x080176fd
 8019ea4:	08019c4b 	.word	0x08019c4b

08019ea8 <__sflush_r>:
 8019ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019eaa:	220c      	movs	r2, #12
 8019eac:	5e8b      	ldrsh	r3, [r1, r2]
 8019eae:	0005      	movs	r5, r0
 8019eb0:	000c      	movs	r4, r1
 8019eb2:	071a      	lsls	r2, r3, #28
 8019eb4:	d456      	bmi.n	8019f64 <__sflush_r+0xbc>
 8019eb6:	684a      	ldr	r2, [r1, #4]
 8019eb8:	2a00      	cmp	r2, #0
 8019eba:	dc02      	bgt.n	8019ec2 <__sflush_r+0x1a>
 8019ebc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8019ebe:	2a00      	cmp	r2, #0
 8019ec0:	dd4e      	ble.n	8019f60 <__sflush_r+0xb8>
 8019ec2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019ec4:	2f00      	cmp	r7, #0
 8019ec6:	d04b      	beq.n	8019f60 <__sflush_r+0xb8>
 8019ec8:	2200      	movs	r2, #0
 8019eca:	2080      	movs	r0, #128	@ 0x80
 8019ecc:	682e      	ldr	r6, [r5, #0]
 8019ece:	602a      	str	r2, [r5, #0]
 8019ed0:	001a      	movs	r2, r3
 8019ed2:	0140      	lsls	r0, r0, #5
 8019ed4:	6a21      	ldr	r1, [r4, #32]
 8019ed6:	4002      	ands	r2, r0
 8019ed8:	4203      	tst	r3, r0
 8019eda:	d033      	beq.n	8019f44 <__sflush_r+0x9c>
 8019edc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019ede:	89a3      	ldrh	r3, [r4, #12]
 8019ee0:	075b      	lsls	r3, r3, #29
 8019ee2:	d506      	bpl.n	8019ef2 <__sflush_r+0x4a>
 8019ee4:	6863      	ldr	r3, [r4, #4]
 8019ee6:	1ad2      	subs	r2, r2, r3
 8019ee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d001      	beq.n	8019ef2 <__sflush_r+0x4a>
 8019eee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019ef0:	1ad2      	subs	r2, r2, r3
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	0028      	movs	r0, r5
 8019ef6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019ef8:	6a21      	ldr	r1, [r4, #32]
 8019efa:	47b8      	blx	r7
 8019efc:	89a2      	ldrh	r2, [r4, #12]
 8019efe:	1c43      	adds	r3, r0, #1
 8019f00:	d106      	bne.n	8019f10 <__sflush_r+0x68>
 8019f02:	6829      	ldr	r1, [r5, #0]
 8019f04:	291d      	cmp	r1, #29
 8019f06:	d846      	bhi.n	8019f96 <__sflush_r+0xee>
 8019f08:	4b29      	ldr	r3, [pc, #164]	@ (8019fb0 <__sflush_r+0x108>)
 8019f0a:	410b      	asrs	r3, r1
 8019f0c:	07db      	lsls	r3, r3, #31
 8019f0e:	d442      	bmi.n	8019f96 <__sflush_r+0xee>
 8019f10:	2300      	movs	r3, #0
 8019f12:	6063      	str	r3, [r4, #4]
 8019f14:	6923      	ldr	r3, [r4, #16]
 8019f16:	6023      	str	r3, [r4, #0]
 8019f18:	04d2      	lsls	r2, r2, #19
 8019f1a:	d505      	bpl.n	8019f28 <__sflush_r+0x80>
 8019f1c:	1c43      	adds	r3, r0, #1
 8019f1e:	d102      	bne.n	8019f26 <__sflush_r+0x7e>
 8019f20:	682b      	ldr	r3, [r5, #0]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d100      	bne.n	8019f28 <__sflush_r+0x80>
 8019f26:	6560      	str	r0, [r4, #84]	@ 0x54
 8019f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019f2a:	602e      	str	r6, [r5, #0]
 8019f2c:	2900      	cmp	r1, #0
 8019f2e:	d017      	beq.n	8019f60 <__sflush_r+0xb8>
 8019f30:	0023      	movs	r3, r4
 8019f32:	3344      	adds	r3, #68	@ 0x44
 8019f34:	4299      	cmp	r1, r3
 8019f36:	d002      	beq.n	8019f3e <__sflush_r+0x96>
 8019f38:	0028      	movs	r0, r5
 8019f3a:	f7ff f869 	bl	8019010 <_free_r>
 8019f3e:	2300      	movs	r3, #0
 8019f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8019f42:	e00d      	b.n	8019f60 <__sflush_r+0xb8>
 8019f44:	2301      	movs	r3, #1
 8019f46:	0028      	movs	r0, r5
 8019f48:	47b8      	blx	r7
 8019f4a:	0002      	movs	r2, r0
 8019f4c:	1c43      	adds	r3, r0, #1
 8019f4e:	d1c6      	bne.n	8019ede <__sflush_r+0x36>
 8019f50:	682b      	ldr	r3, [r5, #0]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d0c3      	beq.n	8019ede <__sflush_r+0x36>
 8019f56:	2b1d      	cmp	r3, #29
 8019f58:	d001      	beq.n	8019f5e <__sflush_r+0xb6>
 8019f5a:	2b16      	cmp	r3, #22
 8019f5c:	d11a      	bne.n	8019f94 <__sflush_r+0xec>
 8019f5e:	602e      	str	r6, [r5, #0]
 8019f60:	2000      	movs	r0, #0
 8019f62:	e01e      	b.n	8019fa2 <__sflush_r+0xfa>
 8019f64:	690e      	ldr	r6, [r1, #16]
 8019f66:	2e00      	cmp	r6, #0
 8019f68:	d0fa      	beq.n	8019f60 <__sflush_r+0xb8>
 8019f6a:	680f      	ldr	r7, [r1, #0]
 8019f6c:	600e      	str	r6, [r1, #0]
 8019f6e:	1bba      	subs	r2, r7, r6
 8019f70:	9201      	str	r2, [sp, #4]
 8019f72:	2200      	movs	r2, #0
 8019f74:	079b      	lsls	r3, r3, #30
 8019f76:	d100      	bne.n	8019f7a <__sflush_r+0xd2>
 8019f78:	694a      	ldr	r2, [r1, #20]
 8019f7a:	60a2      	str	r2, [r4, #8]
 8019f7c:	9b01      	ldr	r3, [sp, #4]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	ddee      	ble.n	8019f60 <__sflush_r+0xb8>
 8019f82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019f84:	0032      	movs	r2, r6
 8019f86:	001f      	movs	r7, r3
 8019f88:	0028      	movs	r0, r5
 8019f8a:	9b01      	ldr	r3, [sp, #4]
 8019f8c:	6a21      	ldr	r1, [r4, #32]
 8019f8e:	47b8      	blx	r7
 8019f90:	2800      	cmp	r0, #0
 8019f92:	dc07      	bgt.n	8019fa4 <__sflush_r+0xfc>
 8019f94:	89a2      	ldrh	r2, [r4, #12]
 8019f96:	2340      	movs	r3, #64	@ 0x40
 8019f98:	2001      	movs	r0, #1
 8019f9a:	4313      	orrs	r3, r2
 8019f9c:	b21b      	sxth	r3, r3
 8019f9e:	81a3      	strh	r3, [r4, #12]
 8019fa0:	4240      	negs	r0, r0
 8019fa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019fa4:	9b01      	ldr	r3, [sp, #4]
 8019fa6:	1836      	adds	r6, r6, r0
 8019fa8:	1a1b      	subs	r3, r3, r0
 8019faa:	9301      	str	r3, [sp, #4]
 8019fac:	e7e6      	b.n	8019f7c <__sflush_r+0xd4>
 8019fae:	46c0      	nop			@ (mov r8, r8)
 8019fb0:	dfbffffe 	.word	0xdfbffffe

08019fb4 <_fflush_r>:
 8019fb4:	690b      	ldr	r3, [r1, #16]
 8019fb6:	b570      	push	{r4, r5, r6, lr}
 8019fb8:	0005      	movs	r5, r0
 8019fba:	000c      	movs	r4, r1
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d102      	bne.n	8019fc6 <_fflush_r+0x12>
 8019fc0:	2500      	movs	r5, #0
 8019fc2:	0028      	movs	r0, r5
 8019fc4:	bd70      	pop	{r4, r5, r6, pc}
 8019fc6:	2800      	cmp	r0, #0
 8019fc8:	d004      	beq.n	8019fd4 <_fflush_r+0x20>
 8019fca:	6a03      	ldr	r3, [r0, #32]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d101      	bne.n	8019fd4 <_fflush_r+0x20>
 8019fd0:	f7fd ffe0 	bl	8017f94 <__sinit>
 8019fd4:	220c      	movs	r2, #12
 8019fd6:	5ea3      	ldrsh	r3, [r4, r2]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d0f1      	beq.n	8019fc0 <_fflush_r+0xc>
 8019fdc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019fde:	07d2      	lsls	r2, r2, #31
 8019fe0:	d404      	bmi.n	8019fec <_fflush_r+0x38>
 8019fe2:	059b      	lsls	r3, r3, #22
 8019fe4:	d402      	bmi.n	8019fec <_fflush_r+0x38>
 8019fe6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019fe8:	f7fe f979 	bl	80182de <__retarget_lock_acquire_recursive>
 8019fec:	0028      	movs	r0, r5
 8019fee:	0021      	movs	r1, r4
 8019ff0:	f7ff ff5a 	bl	8019ea8 <__sflush_r>
 8019ff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019ff6:	0005      	movs	r5, r0
 8019ff8:	07db      	lsls	r3, r3, #31
 8019ffa:	d4e2      	bmi.n	8019fc2 <_fflush_r+0xe>
 8019ffc:	89a3      	ldrh	r3, [r4, #12]
 8019ffe:	059b      	lsls	r3, r3, #22
 801a000:	d4df      	bmi.n	8019fc2 <_fflush_r+0xe>
 801a002:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a004:	f7fe f96c 	bl	80182e0 <__retarget_lock_release_recursive>
 801a008:	e7db      	b.n	8019fc2 <_fflush_r+0xe>

0801a00a <__swbuf_r>:
 801a00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a00c:	0006      	movs	r6, r0
 801a00e:	000d      	movs	r5, r1
 801a010:	0014      	movs	r4, r2
 801a012:	2800      	cmp	r0, #0
 801a014:	d004      	beq.n	801a020 <__swbuf_r+0x16>
 801a016:	6a03      	ldr	r3, [r0, #32]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d101      	bne.n	801a020 <__swbuf_r+0x16>
 801a01c:	f7fd ffba 	bl	8017f94 <__sinit>
 801a020:	69a3      	ldr	r3, [r4, #24]
 801a022:	60a3      	str	r3, [r4, #8]
 801a024:	89a3      	ldrh	r3, [r4, #12]
 801a026:	071b      	lsls	r3, r3, #28
 801a028:	d502      	bpl.n	801a030 <__swbuf_r+0x26>
 801a02a:	6923      	ldr	r3, [r4, #16]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d109      	bne.n	801a044 <__swbuf_r+0x3a>
 801a030:	0021      	movs	r1, r4
 801a032:	0030      	movs	r0, r6
 801a034:	f000 f82c 	bl	801a090 <__swsetup_r>
 801a038:	2800      	cmp	r0, #0
 801a03a:	d003      	beq.n	801a044 <__swbuf_r+0x3a>
 801a03c:	2501      	movs	r5, #1
 801a03e:	426d      	negs	r5, r5
 801a040:	0028      	movs	r0, r5
 801a042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a044:	6923      	ldr	r3, [r4, #16]
 801a046:	6820      	ldr	r0, [r4, #0]
 801a048:	b2ef      	uxtb	r7, r5
 801a04a:	1ac0      	subs	r0, r0, r3
 801a04c:	6963      	ldr	r3, [r4, #20]
 801a04e:	b2ed      	uxtb	r5, r5
 801a050:	4283      	cmp	r3, r0
 801a052:	dc05      	bgt.n	801a060 <__swbuf_r+0x56>
 801a054:	0021      	movs	r1, r4
 801a056:	0030      	movs	r0, r6
 801a058:	f7ff ffac 	bl	8019fb4 <_fflush_r>
 801a05c:	2800      	cmp	r0, #0
 801a05e:	d1ed      	bne.n	801a03c <__swbuf_r+0x32>
 801a060:	68a3      	ldr	r3, [r4, #8]
 801a062:	3001      	adds	r0, #1
 801a064:	3b01      	subs	r3, #1
 801a066:	60a3      	str	r3, [r4, #8]
 801a068:	6823      	ldr	r3, [r4, #0]
 801a06a:	1c5a      	adds	r2, r3, #1
 801a06c:	6022      	str	r2, [r4, #0]
 801a06e:	701f      	strb	r7, [r3, #0]
 801a070:	6963      	ldr	r3, [r4, #20]
 801a072:	4283      	cmp	r3, r0
 801a074:	d004      	beq.n	801a080 <__swbuf_r+0x76>
 801a076:	89a3      	ldrh	r3, [r4, #12]
 801a078:	07db      	lsls	r3, r3, #31
 801a07a:	d5e1      	bpl.n	801a040 <__swbuf_r+0x36>
 801a07c:	2d0a      	cmp	r5, #10
 801a07e:	d1df      	bne.n	801a040 <__swbuf_r+0x36>
 801a080:	0021      	movs	r1, r4
 801a082:	0030      	movs	r0, r6
 801a084:	f7ff ff96 	bl	8019fb4 <_fflush_r>
 801a088:	2800      	cmp	r0, #0
 801a08a:	d0d9      	beq.n	801a040 <__swbuf_r+0x36>
 801a08c:	e7d6      	b.n	801a03c <__swbuf_r+0x32>
	...

0801a090 <__swsetup_r>:
 801a090:	4b2d      	ldr	r3, [pc, #180]	@ (801a148 <__swsetup_r+0xb8>)
 801a092:	b570      	push	{r4, r5, r6, lr}
 801a094:	0005      	movs	r5, r0
 801a096:	6818      	ldr	r0, [r3, #0]
 801a098:	000c      	movs	r4, r1
 801a09a:	2800      	cmp	r0, #0
 801a09c:	d004      	beq.n	801a0a8 <__swsetup_r+0x18>
 801a09e:	6a03      	ldr	r3, [r0, #32]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d101      	bne.n	801a0a8 <__swsetup_r+0x18>
 801a0a4:	f7fd ff76 	bl	8017f94 <__sinit>
 801a0a8:	230c      	movs	r3, #12
 801a0aa:	5ee2      	ldrsh	r2, [r4, r3]
 801a0ac:	0713      	lsls	r3, r2, #28
 801a0ae:	d423      	bmi.n	801a0f8 <__swsetup_r+0x68>
 801a0b0:	06d3      	lsls	r3, r2, #27
 801a0b2:	d407      	bmi.n	801a0c4 <__swsetup_r+0x34>
 801a0b4:	2309      	movs	r3, #9
 801a0b6:	602b      	str	r3, [r5, #0]
 801a0b8:	2340      	movs	r3, #64	@ 0x40
 801a0ba:	2001      	movs	r0, #1
 801a0bc:	4313      	orrs	r3, r2
 801a0be:	81a3      	strh	r3, [r4, #12]
 801a0c0:	4240      	negs	r0, r0
 801a0c2:	e03a      	b.n	801a13a <__swsetup_r+0xaa>
 801a0c4:	0752      	lsls	r2, r2, #29
 801a0c6:	d513      	bpl.n	801a0f0 <__swsetup_r+0x60>
 801a0c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a0ca:	2900      	cmp	r1, #0
 801a0cc:	d008      	beq.n	801a0e0 <__swsetup_r+0x50>
 801a0ce:	0023      	movs	r3, r4
 801a0d0:	3344      	adds	r3, #68	@ 0x44
 801a0d2:	4299      	cmp	r1, r3
 801a0d4:	d002      	beq.n	801a0dc <__swsetup_r+0x4c>
 801a0d6:	0028      	movs	r0, r5
 801a0d8:	f7fe ff9a 	bl	8019010 <_free_r>
 801a0dc:	2300      	movs	r3, #0
 801a0de:	6363      	str	r3, [r4, #52]	@ 0x34
 801a0e0:	2224      	movs	r2, #36	@ 0x24
 801a0e2:	89a3      	ldrh	r3, [r4, #12]
 801a0e4:	4393      	bics	r3, r2
 801a0e6:	81a3      	strh	r3, [r4, #12]
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	6063      	str	r3, [r4, #4]
 801a0ec:	6923      	ldr	r3, [r4, #16]
 801a0ee:	6023      	str	r3, [r4, #0]
 801a0f0:	2308      	movs	r3, #8
 801a0f2:	89a2      	ldrh	r2, [r4, #12]
 801a0f4:	4313      	orrs	r3, r2
 801a0f6:	81a3      	strh	r3, [r4, #12]
 801a0f8:	6923      	ldr	r3, [r4, #16]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d10b      	bne.n	801a116 <__swsetup_r+0x86>
 801a0fe:	21a0      	movs	r1, #160	@ 0xa0
 801a100:	2280      	movs	r2, #128	@ 0x80
 801a102:	89a3      	ldrh	r3, [r4, #12]
 801a104:	0089      	lsls	r1, r1, #2
 801a106:	0092      	lsls	r2, r2, #2
 801a108:	400b      	ands	r3, r1
 801a10a:	4293      	cmp	r3, r2
 801a10c:	d003      	beq.n	801a116 <__swsetup_r+0x86>
 801a10e:	0021      	movs	r1, r4
 801a110:	0028      	movs	r0, r5
 801a112:	f000 f915 	bl	801a340 <__smakebuf_r>
 801a116:	230c      	movs	r3, #12
 801a118:	5ee2      	ldrsh	r2, [r4, r3]
 801a11a:	2101      	movs	r1, #1
 801a11c:	0013      	movs	r3, r2
 801a11e:	400b      	ands	r3, r1
 801a120:	420a      	tst	r2, r1
 801a122:	d00b      	beq.n	801a13c <__swsetup_r+0xac>
 801a124:	2300      	movs	r3, #0
 801a126:	60a3      	str	r3, [r4, #8]
 801a128:	6963      	ldr	r3, [r4, #20]
 801a12a:	425b      	negs	r3, r3
 801a12c:	61a3      	str	r3, [r4, #24]
 801a12e:	2000      	movs	r0, #0
 801a130:	6923      	ldr	r3, [r4, #16]
 801a132:	4283      	cmp	r3, r0
 801a134:	d101      	bne.n	801a13a <__swsetup_r+0xaa>
 801a136:	0613      	lsls	r3, r2, #24
 801a138:	d4be      	bmi.n	801a0b8 <__swsetup_r+0x28>
 801a13a:	bd70      	pop	{r4, r5, r6, pc}
 801a13c:	0791      	lsls	r1, r2, #30
 801a13e:	d400      	bmi.n	801a142 <__swsetup_r+0xb2>
 801a140:	6963      	ldr	r3, [r4, #20]
 801a142:	60a3      	str	r3, [r4, #8]
 801a144:	e7f3      	b.n	801a12e <__swsetup_r+0x9e>
 801a146:	46c0      	nop			@ (mov r8, r8)
 801a148:	200001f0 	.word	0x200001f0

0801a14c <memmove>:
 801a14c:	b510      	push	{r4, lr}
 801a14e:	4288      	cmp	r0, r1
 801a150:	d806      	bhi.n	801a160 <memmove+0x14>
 801a152:	2300      	movs	r3, #0
 801a154:	429a      	cmp	r2, r3
 801a156:	d008      	beq.n	801a16a <memmove+0x1e>
 801a158:	5ccc      	ldrb	r4, [r1, r3]
 801a15a:	54c4      	strb	r4, [r0, r3]
 801a15c:	3301      	adds	r3, #1
 801a15e:	e7f9      	b.n	801a154 <memmove+0x8>
 801a160:	188b      	adds	r3, r1, r2
 801a162:	4298      	cmp	r0, r3
 801a164:	d2f5      	bcs.n	801a152 <memmove+0x6>
 801a166:	3a01      	subs	r2, #1
 801a168:	d200      	bcs.n	801a16c <memmove+0x20>
 801a16a:	bd10      	pop	{r4, pc}
 801a16c:	5c8b      	ldrb	r3, [r1, r2]
 801a16e:	5483      	strb	r3, [r0, r2]
 801a170:	e7f9      	b.n	801a166 <memmove+0x1a>
	...

0801a174 <_sbrk_r>:
 801a174:	2300      	movs	r3, #0
 801a176:	b570      	push	{r4, r5, r6, lr}
 801a178:	4d06      	ldr	r5, [pc, #24]	@ (801a194 <_sbrk_r+0x20>)
 801a17a:	0004      	movs	r4, r0
 801a17c:	0008      	movs	r0, r1
 801a17e:	602b      	str	r3, [r5, #0]
 801a180:	f7ee ff40 	bl	8009004 <_sbrk>
 801a184:	1c43      	adds	r3, r0, #1
 801a186:	d103      	bne.n	801a190 <_sbrk_r+0x1c>
 801a188:	682b      	ldr	r3, [r5, #0]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d000      	beq.n	801a190 <_sbrk_r+0x1c>
 801a18e:	6023      	str	r3, [r4, #0]
 801a190:	bd70      	pop	{r4, r5, r6, pc}
 801a192:	46c0      	nop			@ (mov r8, r8)
 801a194:	20004000 	.word	0x20004000

0801a198 <__assert_func>:
 801a198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a19a:	0014      	movs	r4, r2
 801a19c:	001a      	movs	r2, r3
 801a19e:	4b09      	ldr	r3, [pc, #36]	@ (801a1c4 <__assert_func+0x2c>)
 801a1a0:	0005      	movs	r5, r0
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	000e      	movs	r6, r1
 801a1a6:	68d8      	ldr	r0, [r3, #12]
 801a1a8:	4b07      	ldr	r3, [pc, #28]	@ (801a1c8 <__assert_func+0x30>)
 801a1aa:	2c00      	cmp	r4, #0
 801a1ac:	d101      	bne.n	801a1b2 <__assert_func+0x1a>
 801a1ae:	4b07      	ldr	r3, [pc, #28]	@ (801a1cc <__assert_func+0x34>)
 801a1b0:	001c      	movs	r4, r3
 801a1b2:	4907      	ldr	r1, [pc, #28]	@ (801a1d0 <__assert_func+0x38>)
 801a1b4:	9301      	str	r3, [sp, #4]
 801a1b6:	9402      	str	r4, [sp, #8]
 801a1b8:	002b      	movs	r3, r5
 801a1ba:	9600      	str	r6, [sp, #0]
 801a1bc:	f000 f886 	bl	801a2cc <fiprintf>
 801a1c0:	f000 f924 	bl	801a40c <abort>
 801a1c4:	200001f0 	.word	0x200001f0
 801a1c8:	0801c023 	.word	0x0801c023
 801a1cc:	0801c05e 	.word	0x0801c05e
 801a1d0:	0801c030 	.word	0x0801c030

0801a1d4 <_calloc_r>:
 801a1d4:	b570      	push	{r4, r5, r6, lr}
 801a1d6:	0c0b      	lsrs	r3, r1, #16
 801a1d8:	0c15      	lsrs	r5, r2, #16
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d11e      	bne.n	801a21c <_calloc_r+0x48>
 801a1de:	2d00      	cmp	r5, #0
 801a1e0:	d10c      	bne.n	801a1fc <_calloc_r+0x28>
 801a1e2:	b289      	uxth	r1, r1
 801a1e4:	b294      	uxth	r4, r2
 801a1e6:	434c      	muls	r4, r1
 801a1e8:	0021      	movs	r1, r4
 801a1ea:	f7fe ff87 	bl	80190fc <_malloc_r>
 801a1ee:	1e05      	subs	r5, r0, #0
 801a1f0:	d01a      	beq.n	801a228 <_calloc_r+0x54>
 801a1f2:	0022      	movs	r2, r4
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	f7fd ffb5 	bl	8018164 <memset>
 801a1fa:	e016      	b.n	801a22a <_calloc_r+0x56>
 801a1fc:	1c2b      	adds	r3, r5, #0
 801a1fe:	1c0c      	adds	r4, r1, #0
 801a200:	b289      	uxth	r1, r1
 801a202:	b292      	uxth	r2, r2
 801a204:	434a      	muls	r2, r1
 801a206:	b29b      	uxth	r3, r3
 801a208:	b2a1      	uxth	r1, r4
 801a20a:	4359      	muls	r1, r3
 801a20c:	0c14      	lsrs	r4, r2, #16
 801a20e:	190c      	adds	r4, r1, r4
 801a210:	0c23      	lsrs	r3, r4, #16
 801a212:	d107      	bne.n	801a224 <_calloc_r+0x50>
 801a214:	0424      	lsls	r4, r4, #16
 801a216:	b292      	uxth	r2, r2
 801a218:	4314      	orrs	r4, r2
 801a21a:	e7e5      	b.n	801a1e8 <_calloc_r+0x14>
 801a21c:	2d00      	cmp	r5, #0
 801a21e:	d101      	bne.n	801a224 <_calloc_r+0x50>
 801a220:	1c14      	adds	r4, r2, #0
 801a222:	e7ed      	b.n	801a200 <_calloc_r+0x2c>
 801a224:	230c      	movs	r3, #12
 801a226:	6003      	str	r3, [r0, #0]
 801a228:	2500      	movs	r5, #0
 801a22a:	0028      	movs	r0, r5
 801a22c:	bd70      	pop	{r4, r5, r6, pc}

0801a22e <__ascii_mbtowc>:
 801a22e:	b082      	sub	sp, #8
 801a230:	2900      	cmp	r1, #0
 801a232:	d100      	bne.n	801a236 <__ascii_mbtowc+0x8>
 801a234:	a901      	add	r1, sp, #4
 801a236:	1e10      	subs	r0, r2, #0
 801a238:	d006      	beq.n	801a248 <__ascii_mbtowc+0x1a>
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d006      	beq.n	801a24c <__ascii_mbtowc+0x1e>
 801a23e:	7813      	ldrb	r3, [r2, #0]
 801a240:	600b      	str	r3, [r1, #0]
 801a242:	7810      	ldrb	r0, [r2, #0]
 801a244:	1e43      	subs	r3, r0, #1
 801a246:	4198      	sbcs	r0, r3
 801a248:	b002      	add	sp, #8
 801a24a:	4770      	bx	lr
 801a24c:	2002      	movs	r0, #2
 801a24e:	4240      	negs	r0, r0
 801a250:	e7fa      	b.n	801a248 <__ascii_mbtowc+0x1a>

0801a252 <_realloc_r>:
 801a252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a254:	0006      	movs	r6, r0
 801a256:	000c      	movs	r4, r1
 801a258:	0015      	movs	r5, r2
 801a25a:	2900      	cmp	r1, #0
 801a25c:	d105      	bne.n	801a26a <_realloc_r+0x18>
 801a25e:	0011      	movs	r1, r2
 801a260:	f7fe ff4c 	bl	80190fc <_malloc_r>
 801a264:	0004      	movs	r4, r0
 801a266:	0020      	movs	r0, r4
 801a268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a26a:	2a00      	cmp	r2, #0
 801a26c:	d103      	bne.n	801a276 <_realloc_r+0x24>
 801a26e:	f7fe fecf 	bl	8019010 <_free_r>
 801a272:	2400      	movs	r4, #0
 801a274:	e7f7      	b.n	801a266 <_realloc_r+0x14>
 801a276:	f000 f8d0 	bl	801a41a <_malloc_usable_size_r>
 801a27a:	0007      	movs	r7, r0
 801a27c:	4285      	cmp	r5, r0
 801a27e:	d802      	bhi.n	801a286 <_realloc_r+0x34>
 801a280:	0843      	lsrs	r3, r0, #1
 801a282:	42ab      	cmp	r3, r5
 801a284:	d3ef      	bcc.n	801a266 <_realloc_r+0x14>
 801a286:	0029      	movs	r1, r5
 801a288:	0030      	movs	r0, r6
 801a28a:	f7fe ff37 	bl	80190fc <_malloc_r>
 801a28e:	9001      	str	r0, [sp, #4]
 801a290:	2800      	cmp	r0, #0
 801a292:	d0ee      	beq.n	801a272 <_realloc_r+0x20>
 801a294:	002a      	movs	r2, r5
 801a296:	42bd      	cmp	r5, r7
 801a298:	d900      	bls.n	801a29c <_realloc_r+0x4a>
 801a29a:	003a      	movs	r2, r7
 801a29c:	0021      	movs	r1, r4
 801a29e:	9801      	ldr	r0, [sp, #4]
 801a2a0:	f7fe f82a 	bl	80182f8 <memcpy>
 801a2a4:	0021      	movs	r1, r4
 801a2a6:	0030      	movs	r0, r6
 801a2a8:	f7fe feb2 	bl	8019010 <_free_r>
 801a2ac:	9c01      	ldr	r4, [sp, #4]
 801a2ae:	e7da      	b.n	801a266 <_realloc_r+0x14>

0801a2b0 <__ascii_wctomb>:
 801a2b0:	0003      	movs	r3, r0
 801a2b2:	1e08      	subs	r0, r1, #0
 801a2b4:	d005      	beq.n	801a2c2 <__ascii_wctomb+0x12>
 801a2b6:	2aff      	cmp	r2, #255	@ 0xff
 801a2b8:	d904      	bls.n	801a2c4 <__ascii_wctomb+0x14>
 801a2ba:	228a      	movs	r2, #138	@ 0x8a
 801a2bc:	2001      	movs	r0, #1
 801a2be:	601a      	str	r2, [r3, #0]
 801a2c0:	4240      	negs	r0, r0
 801a2c2:	4770      	bx	lr
 801a2c4:	2001      	movs	r0, #1
 801a2c6:	700a      	strb	r2, [r1, #0]
 801a2c8:	e7fb      	b.n	801a2c2 <__ascii_wctomb+0x12>
	...

0801a2cc <fiprintf>:
 801a2cc:	b40e      	push	{r1, r2, r3}
 801a2ce:	b517      	push	{r0, r1, r2, r4, lr}
 801a2d0:	4c05      	ldr	r4, [pc, #20]	@ (801a2e8 <fiprintf+0x1c>)
 801a2d2:	ab05      	add	r3, sp, #20
 801a2d4:	cb04      	ldmia	r3!, {r2}
 801a2d6:	0001      	movs	r1, r0
 801a2d8:	6820      	ldr	r0, [r4, #0]
 801a2da:	9301      	str	r3, [sp, #4]
 801a2dc:	f7ff fcc8 	bl	8019c70 <_vfiprintf_r>
 801a2e0:	bc1e      	pop	{r1, r2, r3, r4}
 801a2e2:	bc08      	pop	{r3}
 801a2e4:	b003      	add	sp, #12
 801a2e6:	4718      	bx	r3
 801a2e8:	200001f0 	.word	0x200001f0

0801a2ec <__swhatbuf_r>:
 801a2ec:	b570      	push	{r4, r5, r6, lr}
 801a2ee:	000e      	movs	r6, r1
 801a2f0:	001d      	movs	r5, r3
 801a2f2:	230e      	movs	r3, #14
 801a2f4:	5ec9      	ldrsh	r1, [r1, r3]
 801a2f6:	0014      	movs	r4, r2
 801a2f8:	b096      	sub	sp, #88	@ 0x58
 801a2fa:	2900      	cmp	r1, #0
 801a2fc:	da0c      	bge.n	801a318 <__swhatbuf_r+0x2c>
 801a2fe:	89b2      	ldrh	r2, [r6, #12]
 801a300:	2380      	movs	r3, #128	@ 0x80
 801a302:	0011      	movs	r1, r2
 801a304:	4019      	ands	r1, r3
 801a306:	421a      	tst	r2, r3
 801a308:	d114      	bne.n	801a334 <__swhatbuf_r+0x48>
 801a30a:	2380      	movs	r3, #128	@ 0x80
 801a30c:	00db      	lsls	r3, r3, #3
 801a30e:	2000      	movs	r0, #0
 801a310:	6029      	str	r1, [r5, #0]
 801a312:	6023      	str	r3, [r4, #0]
 801a314:	b016      	add	sp, #88	@ 0x58
 801a316:	bd70      	pop	{r4, r5, r6, pc}
 801a318:	466a      	mov	r2, sp
 801a31a:	f000 f853 	bl	801a3c4 <_fstat_r>
 801a31e:	2800      	cmp	r0, #0
 801a320:	dbed      	blt.n	801a2fe <__swhatbuf_r+0x12>
 801a322:	23f0      	movs	r3, #240	@ 0xf0
 801a324:	9901      	ldr	r1, [sp, #4]
 801a326:	021b      	lsls	r3, r3, #8
 801a328:	4019      	ands	r1, r3
 801a32a:	4b04      	ldr	r3, [pc, #16]	@ (801a33c <__swhatbuf_r+0x50>)
 801a32c:	18c9      	adds	r1, r1, r3
 801a32e:	424b      	negs	r3, r1
 801a330:	4159      	adcs	r1, r3
 801a332:	e7ea      	b.n	801a30a <__swhatbuf_r+0x1e>
 801a334:	2100      	movs	r1, #0
 801a336:	2340      	movs	r3, #64	@ 0x40
 801a338:	e7e9      	b.n	801a30e <__swhatbuf_r+0x22>
 801a33a:	46c0      	nop			@ (mov r8, r8)
 801a33c:	ffffe000 	.word	0xffffe000

0801a340 <__smakebuf_r>:
 801a340:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a342:	2602      	movs	r6, #2
 801a344:	898b      	ldrh	r3, [r1, #12]
 801a346:	0005      	movs	r5, r0
 801a348:	000c      	movs	r4, r1
 801a34a:	b085      	sub	sp, #20
 801a34c:	4233      	tst	r3, r6
 801a34e:	d007      	beq.n	801a360 <__smakebuf_r+0x20>
 801a350:	0023      	movs	r3, r4
 801a352:	3347      	adds	r3, #71	@ 0x47
 801a354:	6023      	str	r3, [r4, #0]
 801a356:	6123      	str	r3, [r4, #16]
 801a358:	2301      	movs	r3, #1
 801a35a:	6163      	str	r3, [r4, #20]
 801a35c:	b005      	add	sp, #20
 801a35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a360:	ab03      	add	r3, sp, #12
 801a362:	aa02      	add	r2, sp, #8
 801a364:	f7ff ffc2 	bl	801a2ec <__swhatbuf_r>
 801a368:	9f02      	ldr	r7, [sp, #8]
 801a36a:	9001      	str	r0, [sp, #4]
 801a36c:	0039      	movs	r1, r7
 801a36e:	0028      	movs	r0, r5
 801a370:	f7fe fec4 	bl	80190fc <_malloc_r>
 801a374:	2800      	cmp	r0, #0
 801a376:	d108      	bne.n	801a38a <__smakebuf_r+0x4a>
 801a378:	220c      	movs	r2, #12
 801a37a:	5ea3      	ldrsh	r3, [r4, r2]
 801a37c:	059a      	lsls	r2, r3, #22
 801a37e:	d4ed      	bmi.n	801a35c <__smakebuf_r+0x1c>
 801a380:	2203      	movs	r2, #3
 801a382:	4393      	bics	r3, r2
 801a384:	431e      	orrs	r6, r3
 801a386:	81a6      	strh	r6, [r4, #12]
 801a388:	e7e2      	b.n	801a350 <__smakebuf_r+0x10>
 801a38a:	2380      	movs	r3, #128	@ 0x80
 801a38c:	89a2      	ldrh	r2, [r4, #12]
 801a38e:	6020      	str	r0, [r4, #0]
 801a390:	4313      	orrs	r3, r2
 801a392:	81a3      	strh	r3, [r4, #12]
 801a394:	9b03      	ldr	r3, [sp, #12]
 801a396:	6120      	str	r0, [r4, #16]
 801a398:	6167      	str	r7, [r4, #20]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d00c      	beq.n	801a3b8 <__smakebuf_r+0x78>
 801a39e:	0028      	movs	r0, r5
 801a3a0:	230e      	movs	r3, #14
 801a3a2:	5ee1      	ldrsh	r1, [r4, r3]
 801a3a4:	f000 f820 	bl	801a3e8 <_isatty_r>
 801a3a8:	2800      	cmp	r0, #0
 801a3aa:	d005      	beq.n	801a3b8 <__smakebuf_r+0x78>
 801a3ac:	2303      	movs	r3, #3
 801a3ae:	89a2      	ldrh	r2, [r4, #12]
 801a3b0:	439a      	bics	r2, r3
 801a3b2:	3b02      	subs	r3, #2
 801a3b4:	4313      	orrs	r3, r2
 801a3b6:	81a3      	strh	r3, [r4, #12]
 801a3b8:	89a3      	ldrh	r3, [r4, #12]
 801a3ba:	9a01      	ldr	r2, [sp, #4]
 801a3bc:	4313      	orrs	r3, r2
 801a3be:	81a3      	strh	r3, [r4, #12]
 801a3c0:	e7cc      	b.n	801a35c <__smakebuf_r+0x1c>
	...

0801a3c4 <_fstat_r>:
 801a3c4:	2300      	movs	r3, #0
 801a3c6:	b570      	push	{r4, r5, r6, lr}
 801a3c8:	4d06      	ldr	r5, [pc, #24]	@ (801a3e4 <_fstat_r+0x20>)
 801a3ca:	0004      	movs	r4, r0
 801a3cc:	0008      	movs	r0, r1
 801a3ce:	0011      	movs	r1, r2
 801a3d0:	602b      	str	r3, [r5, #0]
 801a3d2:	f7ee fdf5 	bl	8008fc0 <_fstat>
 801a3d6:	1c43      	adds	r3, r0, #1
 801a3d8:	d103      	bne.n	801a3e2 <_fstat_r+0x1e>
 801a3da:	682b      	ldr	r3, [r5, #0]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d000      	beq.n	801a3e2 <_fstat_r+0x1e>
 801a3e0:	6023      	str	r3, [r4, #0]
 801a3e2:	bd70      	pop	{r4, r5, r6, pc}
 801a3e4:	20004000 	.word	0x20004000

0801a3e8 <_isatty_r>:
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	b570      	push	{r4, r5, r6, lr}
 801a3ec:	4d06      	ldr	r5, [pc, #24]	@ (801a408 <_isatty_r+0x20>)
 801a3ee:	0004      	movs	r4, r0
 801a3f0:	0008      	movs	r0, r1
 801a3f2:	602b      	str	r3, [r5, #0]
 801a3f4:	f7ee fdf2 	bl	8008fdc <_isatty>
 801a3f8:	1c43      	adds	r3, r0, #1
 801a3fa:	d103      	bne.n	801a404 <_isatty_r+0x1c>
 801a3fc:	682b      	ldr	r3, [r5, #0]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d000      	beq.n	801a404 <_isatty_r+0x1c>
 801a402:	6023      	str	r3, [r4, #0]
 801a404:	bd70      	pop	{r4, r5, r6, pc}
 801a406:	46c0      	nop			@ (mov r8, r8)
 801a408:	20004000 	.word	0x20004000

0801a40c <abort>:
 801a40c:	2006      	movs	r0, #6
 801a40e:	b510      	push	{r4, lr}
 801a410:	f000 f834 	bl	801a47c <raise>
 801a414:	2001      	movs	r0, #1
 801a416:	f7ee fd9f 	bl	8008f58 <_exit>

0801a41a <_malloc_usable_size_r>:
 801a41a:	1f0b      	subs	r3, r1, #4
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	1f18      	subs	r0, r3, #4
 801a420:	2b00      	cmp	r3, #0
 801a422:	da01      	bge.n	801a428 <_malloc_usable_size_r+0xe>
 801a424:	580b      	ldr	r3, [r1, r0]
 801a426:	18c0      	adds	r0, r0, r3
 801a428:	4770      	bx	lr

0801a42a <_raise_r>:
 801a42a:	b570      	push	{r4, r5, r6, lr}
 801a42c:	0004      	movs	r4, r0
 801a42e:	000d      	movs	r5, r1
 801a430:	291f      	cmp	r1, #31
 801a432:	d904      	bls.n	801a43e <_raise_r+0x14>
 801a434:	2316      	movs	r3, #22
 801a436:	6003      	str	r3, [r0, #0]
 801a438:	2001      	movs	r0, #1
 801a43a:	4240      	negs	r0, r0
 801a43c:	bd70      	pop	{r4, r5, r6, pc}
 801a43e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a440:	2b00      	cmp	r3, #0
 801a442:	d004      	beq.n	801a44e <_raise_r+0x24>
 801a444:	008a      	lsls	r2, r1, #2
 801a446:	189b      	adds	r3, r3, r2
 801a448:	681a      	ldr	r2, [r3, #0]
 801a44a:	2a00      	cmp	r2, #0
 801a44c:	d108      	bne.n	801a460 <_raise_r+0x36>
 801a44e:	0020      	movs	r0, r4
 801a450:	f000 f830 	bl	801a4b4 <_getpid_r>
 801a454:	002a      	movs	r2, r5
 801a456:	0001      	movs	r1, r0
 801a458:	0020      	movs	r0, r4
 801a45a:	f000 f819 	bl	801a490 <_kill_r>
 801a45e:	e7ed      	b.n	801a43c <_raise_r+0x12>
 801a460:	2a01      	cmp	r2, #1
 801a462:	d009      	beq.n	801a478 <_raise_r+0x4e>
 801a464:	1c51      	adds	r1, r2, #1
 801a466:	d103      	bne.n	801a470 <_raise_r+0x46>
 801a468:	2316      	movs	r3, #22
 801a46a:	6003      	str	r3, [r0, #0]
 801a46c:	2001      	movs	r0, #1
 801a46e:	e7e5      	b.n	801a43c <_raise_r+0x12>
 801a470:	2100      	movs	r1, #0
 801a472:	0028      	movs	r0, r5
 801a474:	6019      	str	r1, [r3, #0]
 801a476:	4790      	blx	r2
 801a478:	2000      	movs	r0, #0
 801a47a:	e7df      	b.n	801a43c <_raise_r+0x12>

0801a47c <raise>:
 801a47c:	b510      	push	{r4, lr}
 801a47e:	4b03      	ldr	r3, [pc, #12]	@ (801a48c <raise+0x10>)
 801a480:	0001      	movs	r1, r0
 801a482:	6818      	ldr	r0, [r3, #0]
 801a484:	f7ff ffd1 	bl	801a42a <_raise_r>
 801a488:	bd10      	pop	{r4, pc}
 801a48a:	46c0      	nop			@ (mov r8, r8)
 801a48c:	200001f0 	.word	0x200001f0

0801a490 <_kill_r>:
 801a490:	2300      	movs	r3, #0
 801a492:	b570      	push	{r4, r5, r6, lr}
 801a494:	4d06      	ldr	r5, [pc, #24]	@ (801a4b0 <_kill_r+0x20>)
 801a496:	0004      	movs	r4, r0
 801a498:	0008      	movs	r0, r1
 801a49a:	0011      	movs	r1, r2
 801a49c:	602b      	str	r3, [r5, #0]
 801a49e:	f7ee fd4b 	bl	8008f38 <_kill>
 801a4a2:	1c43      	adds	r3, r0, #1
 801a4a4:	d103      	bne.n	801a4ae <_kill_r+0x1e>
 801a4a6:	682b      	ldr	r3, [r5, #0]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d000      	beq.n	801a4ae <_kill_r+0x1e>
 801a4ac:	6023      	str	r3, [r4, #0]
 801a4ae:	bd70      	pop	{r4, r5, r6, pc}
 801a4b0:	20004000 	.word	0x20004000

0801a4b4 <_getpid_r>:
 801a4b4:	b510      	push	{r4, lr}
 801a4b6:	f7ee fd39 	bl	8008f2c <_getpid>
 801a4ba:	bd10      	pop	{r4, pc}

0801a4bc <log10>:
 801a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4be:	0004      	movs	r4, r0
 801a4c0:	000d      	movs	r5, r1
 801a4c2:	f000 fa0b 	bl	801a8dc <__ieee754_log10>
 801a4c6:	0022      	movs	r2, r4
 801a4c8:	0006      	movs	r6, r0
 801a4ca:	000f      	movs	r7, r1
 801a4cc:	002b      	movs	r3, r5
 801a4ce:	0020      	movs	r0, r4
 801a4d0:	0029      	movs	r1, r5
 801a4d2:	f7e8 fe95 	bl	8003200 <__aeabi_dcmpun>
 801a4d6:	2800      	cmp	r0, #0
 801a4d8:	d115      	bne.n	801a506 <log10+0x4a>
 801a4da:	2200      	movs	r2, #0
 801a4dc:	2300      	movs	r3, #0
 801a4de:	0020      	movs	r0, r4
 801a4e0:	0029      	movs	r1, r5
 801a4e2:	f7e5 ffc3 	bl	800046c <__aeabi_dcmple>
 801a4e6:	2800      	cmp	r0, #0
 801a4e8:	d00d      	beq.n	801a506 <log10+0x4a>
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	2300      	movs	r3, #0
 801a4ee:	0020      	movs	r0, r4
 801a4f0:	0029      	movs	r1, r5
 801a4f2:	f7e5 ffab 	bl	800044c <__aeabi_dcmpeq>
 801a4f6:	2800      	cmp	r0, #0
 801a4f8:	d008      	beq.n	801a50c <log10+0x50>
 801a4fa:	f7fd fec5 	bl	8018288 <__errno>
 801a4fe:	2322      	movs	r3, #34	@ 0x22
 801a500:	2600      	movs	r6, #0
 801a502:	4f07      	ldr	r7, [pc, #28]	@ (801a520 <log10+0x64>)
 801a504:	6003      	str	r3, [r0, #0]
 801a506:	0030      	movs	r0, r6
 801a508:	0039      	movs	r1, r7
 801a50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a50c:	f7fd febc 	bl	8018288 <__errno>
 801a510:	2321      	movs	r3, #33	@ 0x21
 801a512:	6003      	str	r3, [r0, #0]
 801a514:	4803      	ldr	r0, [pc, #12]	@ (801a524 <log10+0x68>)
 801a516:	f000 f871 	bl	801a5fc <nan>
 801a51a:	0006      	movs	r6, r0
 801a51c:	000f      	movs	r7, r1
 801a51e:	e7f2      	b.n	801a506 <log10+0x4a>
 801a520:	fff00000 	.word	0xfff00000
 801a524:	0801c05e 	.word	0x0801c05e

0801a528 <sqrt>:
 801a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a52a:	0004      	movs	r4, r0
 801a52c:	000d      	movs	r5, r1
 801a52e:	f000 f875 	bl	801a61c <__ieee754_sqrt>
 801a532:	0022      	movs	r2, r4
 801a534:	0006      	movs	r6, r0
 801a536:	000f      	movs	r7, r1
 801a538:	002b      	movs	r3, r5
 801a53a:	0020      	movs	r0, r4
 801a53c:	0029      	movs	r1, r5
 801a53e:	f7e8 fe5f 	bl	8003200 <__aeabi_dcmpun>
 801a542:	2800      	cmp	r0, #0
 801a544:	d113      	bne.n	801a56e <sqrt+0x46>
 801a546:	2200      	movs	r2, #0
 801a548:	2300      	movs	r3, #0
 801a54a:	0020      	movs	r0, r4
 801a54c:	0029      	movs	r1, r5
 801a54e:	f7e5 ff83 	bl	8000458 <__aeabi_dcmplt>
 801a552:	2800      	cmp	r0, #0
 801a554:	d00b      	beq.n	801a56e <sqrt+0x46>
 801a556:	f7fd fe97 	bl	8018288 <__errno>
 801a55a:	2321      	movs	r3, #33	@ 0x21
 801a55c:	2200      	movs	r2, #0
 801a55e:	6003      	str	r3, [r0, #0]
 801a560:	2300      	movs	r3, #0
 801a562:	0010      	movs	r0, r2
 801a564:	0019      	movs	r1, r3
 801a566:	f7e7 fba3 	bl	8001cb0 <__aeabi_ddiv>
 801a56a:	0006      	movs	r6, r0
 801a56c:	000f      	movs	r7, r1
 801a56e:	0030      	movs	r0, r6
 801a570:	0039      	movs	r1, r7
 801a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a574 <expf>:
 801a574:	b570      	push	{r4, r5, r6, lr}
 801a576:	1c04      	adds	r4, r0, #0
 801a578:	f000 fa2a 	bl	801a9d0 <__ieee754_expf>
 801a57c:	1c05      	adds	r5, r0, #0
 801a57e:	1c20      	adds	r0, r4, #0
 801a580:	f000 f842 	bl	801a608 <finitef>
 801a584:	2800      	cmp	r0, #0
 801a586:	d00b      	beq.n	801a5a0 <expf+0x2c>
 801a588:	490c      	ldr	r1, [pc, #48]	@ (801a5bc <expf+0x48>)
 801a58a:	1c20      	adds	r0, r4, #0
 801a58c:	f7e5 ffb2 	bl	80004f4 <__aeabi_fcmpgt>
 801a590:	2800      	cmp	r0, #0
 801a592:	d007      	beq.n	801a5a4 <expf+0x30>
 801a594:	f7fd fe78 	bl	8018288 <__errno>
 801a598:	25ff      	movs	r5, #255	@ 0xff
 801a59a:	2322      	movs	r3, #34	@ 0x22
 801a59c:	05ed      	lsls	r5, r5, #23
 801a59e:	6003      	str	r3, [r0, #0]
 801a5a0:	1c28      	adds	r0, r5, #0
 801a5a2:	bd70      	pop	{r4, r5, r6, pc}
 801a5a4:	4906      	ldr	r1, [pc, #24]	@ (801a5c0 <expf+0x4c>)
 801a5a6:	1c20      	adds	r0, r4, #0
 801a5a8:	f7e5 ff90 	bl	80004cc <__aeabi_fcmplt>
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	d0f7      	beq.n	801a5a0 <expf+0x2c>
 801a5b0:	f7fd fe6a 	bl	8018288 <__errno>
 801a5b4:	2322      	movs	r3, #34	@ 0x22
 801a5b6:	2500      	movs	r5, #0
 801a5b8:	6003      	str	r3, [r0, #0]
 801a5ba:	e7f1      	b.n	801a5a0 <expf+0x2c>
 801a5bc:	42b17217 	.word	0x42b17217
 801a5c0:	c2cff1b5 	.word	0xc2cff1b5

0801a5c4 <sqrtf>:
 801a5c4:	b570      	push	{r4, r5, r6, lr}
 801a5c6:	1c05      	adds	r5, r0, #0
 801a5c8:	f000 f910 	bl	801a7ec <__ieee754_sqrtf>
 801a5cc:	1c29      	adds	r1, r5, #0
 801a5ce:	1c04      	adds	r4, r0, #0
 801a5d0:	1c28      	adds	r0, r5, #0
 801a5d2:	f7e6 ff45 	bl	8001460 <__aeabi_fcmpun>
 801a5d6:	2800      	cmp	r0, #0
 801a5d8:	d10e      	bne.n	801a5f8 <sqrtf+0x34>
 801a5da:	2100      	movs	r1, #0
 801a5dc:	1c28      	adds	r0, r5, #0
 801a5de:	f7e5 ff75 	bl	80004cc <__aeabi_fcmplt>
 801a5e2:	2800      	cmp	r0, #0
 801a5e4:	d008      	beq.n	801a5f8 <sqrtf+0x34>
 801a5e6:	f7fd fe4f 	bl	8018288 <__errno>
 801a5ea:	2321      	movs	r3, #33	@ 0x21
 801a5ec:	2100      	movs	r1, #0
 801a5ee:	6003      	str	r3, [r0, #0]
 801a5f0:	1c08      	adds	r0, r1, #0
 801a5f2:	f7e6 fa6d 	bl	8000ad0 <__aeabi_fdiv>
 801a5f6:	1c04      	adds	r4, r0, #0
 801a5f8:	1c20      	adds	r0, r4, #0
 801a5fa:	bd70      	pop	{r4, r5, r6, pc}

0801a5fc <nan>:
 801a5fc:	2000      	movs	r0, #0
 801a5fe:	4901      	ldr	r1, [pc, #4]	@ (801a604 <nan+0x8>)
 801a600:	4770      	bx	lr
 801a602:	46c0      	nop			@ (mov r8, r8)
 801a604:	7ff80000 	.word	0x7ff80000

0801a608 <finitef>:
 801a608:	22ff      	movs	r2, #255	@ 0xff
 801a60a:	0043      	lsls	r3, r0, #1
 801a60c:	085b      	lsrs	r3, r3, #1
 801a60e:	2001      	movs	r0, #1
 801a610:	05d2      	lsls	r2, r2, #23
 801a612:	4293      	cmp	r3, r2
 801a614:	db00      	blt.n	801a618 <finitef+0x10>
 801a616:	2000      	movs	r0, #0
 801a618:	4770      	bx	lr
	...

0801a61c <__ieee754_sqrt>:
 801a61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a61e:	000a      	movs	r2, r1
 801a620:	000d      	movs	r5, r1
 801a622:	496d      	ldr	r1, [pc, #436]	@ (801a7d8 <__ieee754_sqrt+0x1bc>)
 801a624:	0004      	movs	r4, r0
 801a626:	0003      	movs	r3, r0
 801a628:	0008      	movs	r0, r1
 801a62a:	b087      	sub	sp, #28
 801a62c:	4028      	ands	r0, r5
 801a62e:	4288      	cmp	r0, r1
 801a630:	d111      	bne.n	801a656 <__ieee754_sqrt+0x3a>
 801a632:	0022      	movs	r2, r4
 801a634:	002b      	movs	r3, r5
 801a636:	0020      	movs	r0, r4
 801a638:	0029      	movs	r1, r5
 801a63a:	f7e7 ff7d 	bl	8002538 <__aeabi_dmul>
 801a63e:	0002      	movs	r2, r0
 801a640:	000b      	movs	r3, r1
 801a642:	0020      	movs	r0, r4
 801a644:	0029      	movs	r1, r5
 801a646:	f7e6 ffcf 	bl	80015e8 <__aeabi_dadd>
 801a64a:	0004      	movs	r4, r0
 801a64c:	000d      	movs	r5, r1
 801a64e:	0020      	movs	r0, r4
 801a650:	0029      	movs	r1, r5
 801a652:	b007      	add	sp, #28
 801a654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a656:	2d00      	cmp	r5, #0
 801a658:	dc11      	bgt.n	801a67e <__ieee754_sqrt+0x62>
 801a65a:	0069      	lsls	r1, r5, #1
 801a65c:	0849      	lsrs	r1, r1, #1
 801a65e:	4321      	orrs	r1, r4
 801a660:	d0f5      	beq.n	801a64e <__ieee754_sqrt+0x32>
 801a662:	2000      	movs	r0, #0
 801a664:	4285      	cmp	r5, r0
 801a666:	d010      	beq.n	801a68a <__ieee754_sqrt+0x6e>
 801a668:	0022      	movs	r2, r4
 801a66a:	002b      	movs	r3, r5
 801a66c:	0020      	movs	r0, r4
 801a66e:	0029      	movs	r1, r5
 801a670:	f7e8 fa2a 	bl	8002ac8 <__aeabi_dsub>
 801a674:	0002      	movs	r2, r0
 801a676:	000b      	movs	r3, r1
 801a678:	f7e7 fb1a 	bl	8001cb0 <__aeabi_ddiv>
 801a67c:	e7e5      	b.n	801a64a <__ieee754_sqrt+0x2e>
 801a67e:	1528      	asrs	r0, r5, #20
 801a680:	d115      	bne.n	801a6ae <__ieee754_sqrt+0x92>
 801a682:	2480      	movs	r4, #128	@ 0x80
 801a684:	2100      	movs	r1, #0
 801a686:	0364      	lsls	r4, r4, #13
 801a688:	e007      	b.n	801a69a <__ieee754_sqrt+0x7e>
 801a68a:	0ada      	lsrs	r2, r3, #11
 801a68c:	3815      	subs	r0, #21
 801a68e:	055b      	lsls	r3, r3, #21
 801a690:	2a00      	cmp	r2, #0
 801a692:	d0fa      	beq.n	801a68a <__ieee754_sqrt+0x6e>
 801a694:	e7f5      	b.n	801a682 <__ieee754_sqrt+0x66>
 801a696:	0052      	lsls	r2, r2, #1
 801a698:	3101      	adds	r1, #1
 801a69a:	4222      	tst	r2, r4
 801a69c:	d0fb      	beq.n	801a696 <__ieee754_sqrt+0x7a>
 801a69e:	1e4c      	subs	r4, r1, #1
 801a6a0:	1b00      	subs	r0, r0, r4
 801a6a2:	2420      	movs	r4, #32
 801a6a4:	001d      	movs	r5, r3
 801a6a6:	1a64      	subs	r4, r4, r1
 801a6a8:	40e5      	lsrs	r5, r4
 801a6aa:	408b      	lsls	r3, r1
 801a6ac:	432a      	orrs	r2, r5
 801a6ae:	494b      	ldr	r1, [pc, #300]	@ (801a7dc <__ieee754_sqrt+0x1c0>)
 801a6b0:	0312      	lsls	r2, r2, #12
 801a6b2:	1844      	adds	r4, r0, r1
 801a6b4:	2180      	movs	r1, #128	@ 0x80
 801a6b6:	0b12      	lsrs	r2, r2, #12
 801a6b8:	0349      	lsls	r1, r1, #13
 801a6ba:	4311      	orrs	r1, r2
 801a6bc:	07c0      	lsls	r0, r0, #31
 801a6be:	d403      	bmi.n	801a6c8 <__ieee754_sqrt+0xac>
 801a6c0:	0fda      	lsrs	r2, r3, #31
 801a6c2:	0049      	lsls	r1, r1, #1
 801a6c4:	1851      	adds	r1, r2, r1
 801a6c6:	005b      	lsls	r3, r3, #1
 801a6c8:	2500      	movs	r5, #0
 801a6ca:	1062      	asrs	r2, r4, #1
 801a6cc:	0049      	lsls	r1, r1, #1
 801a6ce:	2480      	movs	r4, #128	@ 0x80
 801a6d0:	9205      	str	r2, [sp, #20]
 801a6d2:	0fda      	lsrs	r2, r3, #31
 801a6d4:	1852      	adds	r2, r2, r1
 801a6d6:	2016      	movs	r0, #22
 801a6d8:	0029      	movs	r1, r5
 801a6da:	005b      	lsls	r3, r3, #1
 801a6dc:	03a4      	lsls	r4, r4, #14
 801a6de:	190e      	adds	r6, r1, r4
 801a6e0:	4296      	cmp	r6, r2
 801a6e2:	dc02      	bgt.n	801a6ea <__ieee754_sqrt+0xce>
 801a6e4:	1931      	adds	r1, r6, r4
 801a6e6:	1b92      	subs	r2, r2, r6
 801a6e8:	192d      	adds	r5, r5, r4
 801a6ea:	0fde      	lsrs	r6, r3, #31
 801a6ec:	0052      	lsls	r2, r2, #1
 801a6ee:	3801      	subs	r0, #1
 801a6f0:	1992      	adds	r2, r2, r6
 801a6f2:	005b      	lsls	r3, r3, #1
 801a6f4:	0864      	lsrs	r4, r4, #1
 801a6f6:	2800      	cmp	r0, #0
 801a6f8:	d1f1      	bne.n	801a6de <__ieee754_sqrt+0xc2>
 801a6fa:	2620      	movs	r6, #32
 801a6fc:	2780      	movs	r7, #128	@ 0x80
 801a6fe:	0004      	movs	r4, r0
 801a700:	9604      	str	r6, [sp, #16]
 801a702:	063f      	lsls	r7, r7, #24
 801a704:	19c6      	adds	r6, r0, r7
 801a706:	46b4      	mov	ip, r6
 801a708:	4291      	cmp	r1, r2
 801a70a:	db02      	blt.n	801a712 <__ieee754_sqrt+0xf6>
 801a70c:	d114      	bne.n	801a738 <__ieee754_sqrt+0x11c>
 801a70e:	429e      	cmp	r6, r3
 801a710:	d812      	bhi.n	801a738 <__ieee754_sqrt+0x11c>
 801a712:	4660      	mov	r0, ip
 801a714:	4666      	mov	r6, ip
 801a716:	19c0      	adds	r0, r0, r7
 801a718:	9100      	str	r1, [sp, #0]
 801a71a:	2e00      	cmp	r6, #0
 801a71c:	da03      	bge.n	801a726 <__ieee754_sqrt+0x10a>
 801a71e:	43c6      	mvns	r6, r0
 801a720:	0ff6      	lsrs	r6, r6, #31
 801a722:	198e      	adds	r6, r1, r6
 801a724:	9600      	str	r6, [sp, #0]
 801a726:	1a52      	subs	r2, r2, r1
 801a728:	4563      	cmp	r3, ip
 801a72a:	4189      	sbcs	r1, r1
 801a72c:	4249      	negs	r1, r1
 801a72e:	1a52      	subs	r2, r2, r1
 801a730:	4661      	mov	r1, ip
 801a732:	1a5b      	subs	r3, r3, r1
 801a734:	9900      	ldr	r1, [sp, #0]
 801a736:	19e4      	adds	r4, r4, r7
 801a738:	0fde      	lsrs	r6, r3, #31
 801a73a:	0052      	lsls	r2, r2, #1
 801a73c:	1992      	adds	r2, r2, r6
 801a73e:	9e04      	ldr	r6, [sp, #16]
 801a740:	005b      	lsls	r3, r3, #1
 801a742:	3e01      	subs	r6, #1
 801a744:	087f      	lsrs	r7, r7, #1
 801a746:	9604      	str	r6, [sp, #16]
 801a748:	2e00      	cmp	r6, #0
 801a74a:	d1db      	bne.n	801a704 <__ieee754_sqrt+0xe8>
 801a74c:	431a      	orrs	r2, r3
 801a74e:	d01f      	beq.n	801a790 <__ieee754_sqrt+0x174>
 801a750:	4e23      	ldr	r6, [pc, #140]	@ (801a7e0 <__ieee754_sqrt+0x1c4>)
 801a752:	4f24      	ldr	r7, [pc, #144]	@ (801a7e4 <__ieee754_sqrt+0x1c8>)
 801a754:	6830      	ldr	r0, [r6, #0]
 801a756:	6871      	ldr	r1, [r6, #4]
 801a758:	683a      	ldr	r2, [r7, #0]
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	9200      	str	r2, [sp, #0]
 801a75e:	9301      	str	r3, [sp, #4]
 801a760:	6832      	ldr	r2, [r6, #0]
 801a762:	6873      	ldr	r3, [r6, #4]
 801a764:	9202      	str	r2, [sp, #8]
 801a766:	9303      	str	r3, [sp, #12]
 801a768:	9a00      	ldr	r2, [sp, #0]
 801a76a:	9b01      	ldr	r3, [sp, #4]
 801a76c:	f7e8 f9ac 	bl	8002ac8 <__aeabi_dsub>
 801a770:	0002      	movs	r2, r0
 801a772:	000b      	movs	r3, r1
 801a774:	9802      	ldr	r0, [sp, #8]
 801a776:	9903      	ldr	r1, [sp, #12]
 801a778:	f7e5 fe78 	bl	800046c <__aeabi_dcmple>
 801a77c:	2800      	cmp	r0, #0
 801a77e:	d007      	beq.n	801a790 <__ieee754_sqrt+0x174>
 801a780:	6830      	ldr	r0, [r6, #0]
 801a782:	6871      	ldr	r1, [r6, #4]
 801a784:	683a      	ldr	r2, [r7, #0]
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	1c67      	adds	r7, r4, #1
 801a78a:	d10f      	bne.n	801a7ac <__ieee754_sqrt+0x190>
 801a78c:	9c04      	ldr	r4, [sp, #16]
 801a78e:	3501      	adds	r5, #1
 801a790:	4b15      	ldr	r3, [pc, #84]	@ (801a7e8 <__ieee754_sqrt+0x1cc>)
 801a792:	106a      	asrs	r2, r5, #1
 801a794:	18d2      	adds	r2, r2, r3
 801a796:	0863      	lsrs	r3, r4, #1
 801a798:	07ed      	lsls	r5, r5, #31
 801a79a:	d502      	bpl.n	801a7a2 <__ieee754_sqrt+0x186>
 801a79c:	2180      	movs	r1, #128	@ 0x80
 801a79e:	0609      	lsls	r1, r1, #24
 801a7a0:	430b      	orrs	r3, r1
 801a7a2:	9905      	ldr	r1, [sp, #20]
 801a7a4:	001c      	movs	r4, r3
 801a7a6:	0509      	lsls	r1, r1, #20
 801a7a8:	188d      	adds	r5, r1, r2
 801a7aa:	e750      	b.n	801a64e <__ieee754_sqrt+0x32>
 801a7ac:	f7e6 ff1c 	bl	80015e8 <__aeabi_dadd>
 801a7b0:	6877      	ldr	r7, [r6, #4]
 801a7b2:	6836      	ldr	r6, [r6, #0]
 801a7b4:	0002      	movs	r2, r0
 801a7b6:	000b      	movs	r3, r1
 801a7b8:	0030      	movs	r0, r6
 801a7ba:	0039      	movs	r1, r7
 801a7bc:	f7e5 fe4c 	bl	8000458 <__aeabi_dcmplt>
 801a7c0:	2800      	cmp	r0, #0
 801a7c2:	d004      	beq.n	801a7ce <__ieee754_sqrt+0x1b2>
 801a7c4:	3402      	adds	r4, #2
 801a7c6:	4263      	negs	r3, r4
 801a7c8:	4163      	adcs	r3, r4
 801a7ca:	18ed      	adds	r5, r5, r3
 801a7cc:	e7e0      	b.n	801a790 <__ieee754_sqrt+0x174>
 801a7ce:	2301      	movs	r3, #1
 801a7d0:	3401      	adds	r4, #1
 801a7d2:	439c      	bics	r4, r3
 801a7d4:	e7dc      	b.n	801a790 <__ieee754_sqrt+0x174>
 801a7d6:	46c0      	nop			@ (mov r8, r8)
 801a7d8:	7ff00000 	.word	0x7ff00000
 801a7dc:	fffffc01 	.word	0xfffffc01
 801a7e0:	200003b8 	.word	0x200003b8
 801a7e4:	200003b0 	.word	0x200003b0
 801a7e8:	3fe00000 	.word	0x3fe00000

0801a7ec <__ieee754_sqrtf>:
 801a7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a7ee:	0003      	movs	r3, r0
 801a7f0:	0042      	lsls	r2, r0, #1
 801a7f2:	1c04      	adds	r4, r0, #0
 801a7f4:	20ff      	movs	r0, #255	@ 0xff
 801a7f6:	0852      	lsrs	r2, r2, #1
 801a7f8:	05c0      	lsls	r0, r0, #23
 801a7fa:	4282      	cmp	r2, r0
 801a7fc:	d30a      	bcc.n	801a814 <__ieee754_sqrtf+0x28>
 801a7fe:	1c21      	adds	r1, r4, #0
 801a800:	1c20      	adds	r0, r4, #0
 801a802:	f7e6 fb4b 	bl	8000e9c <__aeabi_fmul>
 801a806:	1c01      	adds	r1, r0, #0
 801a808:	1c20      	adds	r0, r4, #0
 801a80a:	f7e5 ffd7 	bl	80007bc <__aeabi_fadd>
 801a80e:	1c04      	adds	r4, r0, #0
 801a810:	1c20      	adds	r0, r4, #0
 801a812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a814:	2a00      	cmp	r2, #0
 801a816:	d0fb      	beq.n	801a810 <__ieee754_sqrtf+0x24>
 801a818:	2c00      	cmp	r4, #0
 801a81a:	da07      	bge.n	801a82c <__ieee754_sqrtf+0x40>
 801a81c:	1c21      	adds	r1, r4, #0
 801a81e:	1c20      	adds	r0, r4, #0
 801a820:	f7e6 fc7a 	bl	8001118 <__aeabi_fsub>
 801a824:	1c01      	adds	r1, r0, #0
 801a826:	f7e6 f953 	bl	8000ad0 <__aeabi_fdiv>
 801a82a:	e7f0      	b.n	801a80e <__ieee754_sqrtf+0x22>
 801a82c:	0022      	movs	r2, r4
 801a82e:	15e1      	asrs	r1, r4, #23
 801a830:	4002      	ands	r2, r0
 801a832:	4204      	tst	r4, r0
 801a834:	d046      	beq.n	801a8c4 <__ieee754_sqrtf+0xd8>
 801a836:	2280      	movs	r2, #128	@ 0x80
 801a838:	000f      	movs	r7, r1
 801a83a:	025b      	lsls	r3, r3, #9
 801a83c:	0a5b      	lsrs	r3, r3, #9
 801a83e:	0412      	lsls	r2, r2, #16
 801a840:	3f7f      	subs	r7, #127	@ 0x7f
 801a842:	4313      	orrs	r3, r2
 801a844:	07c9      	lsls	r1, r1, #31
 801a846:	d400      	bmi.n	801a84a <__ieee754_sqrtf+0x5e>
 801a848:	005b      	lsls	r3, r3, #1
 801a84a:	2400      	movs	r4, #0
 801a84c:	2180      	movs	r1, #128	@ 0x80
 801a84e:	2019      	movs	r0, #25
 801a850:	0026      	movs	r6, r4
 801a852:	107f      	asrs	r7, r7, #1
 801a854:	005b      	lsls	r3, r3, #1
 801a856:	0449      	lsls	r1, r1, #17
 801a858:	1875      	adds	r5, r6, r1
 801a85a:	001a      	movs	r2, r3
 801a85c:	429d      	cmp	r5, r3
 801a85e:	dc02      	bgt.n	801a866 <__ieee754_sqrtf+0x7a>
 801a860:	186e      	adds	r6, r5, r1
 801a862:	1b5a      	subs	r2, r3, r5
 801a864:	1864      	adds	r4, r4, r1
 801a866:	3801      	subs	r0, #1
 801a868:	0053      	lsls	r3, r2, #1
 801a86a:	0849      	lsrs	r1, r1, #1
 801a86c:	2800      	cmp	r0, #0
 801a86e:	d1f3      	bne.n	801a858 <__ieee754_sqrtf+0x6c>
 801a870:	2a00      	cmp	r2, #0
 801a872:	d019      	beq.n	801a8a8 <__ieee754_sqrtf+0xbc>
 801a874:	4d17      	ldr	r5, [pc, #92]	@ (801a8d4 <__ieee754_sqrtf+0xe8>)
 801a876:	4e18      	ldr	r6, [pc, #96]	@ (801a8d8 <__ieee754_sqrtf+0xec>)
 801a878:	6828      	ldr	r0, [r5, #0]
 801a87a:	6831      	ldr	r1, [r6, #0]
 801a87c:	682b      	ldr	r3, [r5, #0]
 801a87e:	9301      	str	r3, [sp, #4]
 801a880:	f7e6 fc4a 	bl	8001118 <__aeabi_fsub>
 801a884:	1c01      	adds	r1, r0, #0
 801a886:	9801      	ldr	r0, [sp, #4]
 801a888:	f7e5 fe2a 	bl	80004e0 <__aeabi_fcmple>
 801a88c:	2800      	cmp	r0, #0
 801a88e:	d00b      	beq.n	801a8a8 <__ieee754_sqrtf+0xbc>
 801a890:	6828      	ldr	r0, [r5, #0]
 801a892:	6831      	ldr	r1, [r6, #0]
 801a894:	f7e5 ff92 	bl	80007bc <__aeabi_fadd>
 801a898:	682d      	ldr	r5, [r5, #0]
 801a89a:	1c01      	adds	r1, r0, #0
 801a89c:	1c28      	adds	r0, r5, #0
 801a89e:	f7e5 fe15 	bl	80004cc <__aeabi_fcmplt>
 801a8a2:	2800      	cmp	r0, #0
 801a8a4:	d011      	beq.n	801a8ca <__ieee754_sqrtf+0xde>
 801a8a6:	3402      	adds	r4, #2
 801a8a8:	23fc      	movs	r3, #252	@ 0xfc
 801a8aa:	1064      	asrs	r4, r4, #1
 801a8ac:	059b      	lsls	r3, r3, #22
 801a8ae:	18e3      	adds	r3, r4, r3
 801a8b0:	05fc      	lsls	r4, r7, #23
 801a8b2:	18e4      	adds	r4, r4, r3
 801a8b4:	e7ac      	b.n	801a810 <__ieee754_sqrtf+0x24>
 801a8b6:	005b      	lsls	r3, r3, #1
 801a8b8:	3201      	adds	r2, #1
 801a8ba:	4203      	tst	r3, r0
 801a8bc:	d0fb      	beq.n	801a8b6 <__ieee754_sqrtf+0xca>
 801a8be:	3a01      	subs	r2, #1
 801a8c0:	1a89      	subs	r1, r1, r2
 801a8c2:	e7b8      	b.n	801a836 <__ieee754_sqrtf+0x4a>
 801a8c4:	2080      	movs	r0, #128	@ 0x80
 801a8c6:	0400      	lsls	r0, r0, #16
 801a8c8:	e7f7      	b.n	801a8ba <__ieee754_sqrtf+0xce>
 801a8ca:	2301      	movs	r3, #1
 801a8cc:	3401      	adds	r4, #1
 801a8ce:	439c      	bics	r4, r3
 801a8d0:	e7ea      	b.n	801a8a8 <__ieee754_sqrtf+0xbc>
 801a8d2:	46c0      	nop			@ (mov r8, r8)
 801a8d4:	200003c4 	.word	0x200003c4
 801a8d8:	200003c0 	.word	0x200003c0

0801a8dc <__ieee754_log10>:
 801a8dc:	2280      	movs	r2, #128	@ 0x80
 801a8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8e0:	000b      	movs	r3, r1
 801a8e2:	0004      	movs	r4, r0
 801a8e4:	000d      	movs	r5, r1
 801a8e6:	b085      	sub	sp, #20
 801a8e8:	0352      	lsls	r2, r2, #13
 801a8ea:	4291      	cmp	r1, r2
 801a8ec:	da26      	bge.n	801a93c <__ieee754_log10+0x60>
 801a8ee:	004a      	lsls	r2, r1, #1
 801a8f0:	0852      	lsrs	r2, r2, #1
 801a8f2:	4302      	orrs	r2, r0
 801a8f4:	d107      	bne.n	801a906 <__ieee754_log10+0x2a>
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	2000      	movs	r0, #0
 801a8fc:	4929      	ldr	r1, [pc, #164]	@ (801a9a4 <__ieee754_log10+0xc8>)
 801a8fe:	f7e7 f9d7 	bl	8001cb0 <__aeabi_ddiv>
 801a902:	b005      	add	sp, #20
 801a904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a906:	2900      	cmp	r1, #0
 801a908:	da05      	bge.n	801a916 <__ieee754_log10+0x3a>
 801a90a:	0002      	movs	r2, r0
 801a90c:	f7e8 f8dc 	bl	8002ac8 <__aeabi_dsub>
 801a910:	2200      	movs	r2, #0
 801a912:	2300      	movs	r3, #0
 801a914:	e7f3      	b.n	801a8fe <__ieee754_log10+0x22>
 801a916:	2200      	movs	r2, #0
 801a918:	4b23      	ldr	r3, [pc, #140]	@ (801a9a8 <__ieee754_log10+0xcc>)
 801a91a:	f7e7 fe0d 	bl	8002538 <__aeabi_dmul>
 801a91e:	2236      	movs	r2, #54	@ 0x36
 801a920:	0004      	movs	r4, r0
 801a922:	000d      	movs	r5, r1
 801a924:	000b      	movs	r3, r1
 801a926:	4252      	negs	r2, r2
 801a928:	4920      	ldr	r1, [pc, #128]	@ (801a9ac <__ieee754_log10+0xd0>)
 801a92a:	428b      	cmp	r3, r1
 801a92c:	dd08      	ble.n	801a940 <__ieee754_log10+0x64>
 801a92e:	0022      	movs	r2, r4
 801a930:	002b      	movs	r3, r5
 801a932:	0020      	movs	r0, r4
 801a934:	0029      	movs	r1, r5
 801a936:	f7e6 fe57 	bl	80015e8 <__aeabi_dadd>
 801a93a:	e7e2      	b.n	801a902 <__ieee754_log10+0x26>
 801a93c:	2200      	movs	r2, #0
 801a93e:	e7f3      	b.n	801a928 <__ieee754_log10+0x4c>
 801a940:	491b      	ldr	r1, [pc, #108]	@ (801a9b0 <__ieee754_log10+0xd4>)
 801a942:	1518      	asrs	r0, r3, #20
 801a944:	1840      	adds	r0, r0, r1
 801a946:	1880      	adds	r0, r0, r2
 801a948:	0fc2      	lsrs	r2, r0, #31
 801a94a:	031b      	lsls	r3, r3, #12
 801a94c:	0b1b      	lsrs	r3, r3, #12
 801a94e:	1880      	adds	r0, r0, r2
 801a950:	9203      	str	r2, [sp, #12]
 801a952:	9300      	str	r3, [sp, #0]
 801a954:	f7e8 fcb2 	bl	80032bc <__aeabi_i2d>
 801a958:	9a03      	ldr	r2, [sp, #12]
 801a95a:	4b16      	ldr	r3, [pc, #88]	@ (801a9b4 <__ieee754_log10+0xd8>)
 801a95c:	0006      	movs	r6, r0
 801a95e:	1a9b      	subs	r3, r3, r2
 801a960:	9a00      	ldr	r2, [sp, #0]
 801a962:	051b      	lsls	r3, r3, #20
 801a964:	431a      	orrs	r2, r3
 801a966:	0015      	movs	r5, r2
 801a968:	4b13      	ldr	r3, [pc, #76]	@ (801a9b8 <__ieee754_log10+0xdc>)
 801a96a:	4a14      	ldr	r2, [pc, #80]	@ (801a9bc <__ieee754_log10+0xe0>)
 801a96c:	000f      	movs	r7, r1
 801a96e:	f7e7 fde3 	bl	8002538 <__aeabi_dmul>
 801a972:	9000      	str	r0, [sp, #0]
 801a974:	9101      	str	r1, [sp, #4]
 801a976:	0020      	movs	r0, r4
 801a978:	0029      	movs	r1, r5
 801a97a:	f000 f93b 	bl	801abf4 <__ieee754_log>
 801a97e:	4a10      	ldr	r2, [pc, #64]	@ (801a9c0 <__ieee754_log10+0xe4>)
 801a980:	4b10      	ldr	r3, [pc, #64]	@ (801a9c4 <__ieee754_log10+0xe8>)
 801a982:	f7e7 fdd9 	bl	8002538 <__aeabi_dmul>
 801a986:	9a00      	ldr	r2, [sp, #0]
 801a988:	9b01      	ldr	r3, [sp, #4]
 801a98a:	f7e6 fe2d 	bl	80015e8 <__aeabi_dadd>
 801a98e:	4a0e      	ldr	r2, [pc, #56]	@ (801a9c8 <__ieee754_log10+0xec>)
 801a990:	4b0e      	ldr	r3, [pc, #56]	@ (801a9cc <__ieee754_log10+0xf0>)
 801a992:	0004      	movs	r4, r0
 801a994:	000d      	movs	r5, r1
 801a996:	0030      	movs	r0, r6
 801a998:	0039      	movs	r1, r7
 801a99a:	f7e7 fdcd 	bl	8002538 <__aeabi_dmul>
 801a99e:	0002      	movs	r2, r0
 801a9a0:	000b      	movs	r3, r1
 801a9a2:	e7c6      	b.n	801a932 <__ieee754_log10+0x56>
 801a9a4:	c3500000 	.word	0xc3500000
 801a9a8:	43500000 	.word	0x43500000
 801a9ac:	7fefffff 	.word	0x7fefffff
 801a9b0:	fffffc01 	.word	0xfffffc01
 801a9b4:	000003ff 	.word	0x000003ff
 801a9b8:	3d59fef3 	.word	0x3d59fef3
 801a9bc:	11f12b36 	.word	0x11f12b36
 801a9c0:	1526e50e 	.word	0x1526e50e
 801a9c4:	3fdbcb7b 	.word	0x3fdbcb7b
 801a9c8:	509f6000 	.word	0x509f6000
 801a9cc:	3fd34413 	.word	0x3fd34413

0801a9d0 <__ieee754_expf>:
 801a9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a9d2:	21ff      	movs	r1, #255	@ 0xff
 801a9d4:	0043      	lsls	r3, r0, #1
 801a9d6:	1c04      	adds	r4, r0, #0
 801a9d8:	085b      	lsrs	r3, r3, #1
 801a9da:	05c9      	lsls	r1, r1, #23
 801a9dc:	428b      	cmp	r3, r1
 801a9de:	d904      	bls.n	801a9ea <__ieee754_expf+0x1a>
 801a9e0:	1c01      	adds	r1, r0, #0
 801a9e2:	1c20      	adds	r0, r4, #0
 801a9e4:	f7e5 feea 	bl	80007bc <__aeabi_fadd>
 801a9e8:	e00d      	b.n	801aa06 <__ieee754_expf+0x36>
 801a9ea:	0fc6      	lsrs	r6, r0, #31
 801a9ec:	428b      	cmp	r3, r1
 801a9ee:	d104      	bne.n	801a9fa <__ieee754_expf+0x2a>
 801a9f0:	2e00      	cmp	r6, #0
 801a9f2:	d000      	beq.n	801a9f6 <__ieee754_expf+0x26>
 801a9f4:	e0ba      	b.n	801ab6c <__ieee754_expf+0x19c>
 801a9f6:	1c20      	adds	r0, r4, #0
 801a9f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a9fa:	495d      	ldr	r1, [pc, #372]	@ (801ab70 <__ieee754_expf+0x1a0>)
 801a9fc:	4288      	cmp	r0, r1
 801a9fe:	dd04      	ble.n	801aa0a <__ieee754_expf+0x3a>
 801aa00:	2000      	movs	r0, #0
 801aa02:	f000 f8f1 	bl	801abe8 <__math_oflowf>
 801aa06:	1c04      	adds	r4, r0, #0
 801aa08:	e7f5      	b.n	801a9f6 <__ieee754_expf+0x26>
 801aa0a:	2800      	cmp	r0, #0
 801aa0c:	da06      	bge.n	801aa1c <__ieee754_expf+0x4c>
 801aa0e:	4a59      	ldr	r2, [pc, #356]	@ (801ab74 <__ieee754_expf+0x1a4>)
 801aa10:	4293      	cmp	r3, r2
 801aa12:	d903      	bls.n	801aa1c <__ieee754_expf+0x4c>
 801aa14:	2000      	movs	r0, #0
 801aa16:	f000 f8e1 	bl	801abdc <__math_uflowf>
 801aa1a:	e7f4      	b.n	801aa06 <__ieee754_expf+0x36>
 801aa1c:	4a56      	ldr	r2, [pc, #344]	@ (801ab78 <__ieee754_expf+0x1a8>)
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	d96e      	bls.n	801ab00 <__ieee754_expf+0x130>
 801aa22:	4a56      	ldr	r2, [pc, #344]	@ (801ab7c <__ieee754_expf+0x1ac>)
 801aa24:	00b5      	lsls	r5, r6, #2
 801aa26:	4293      	cmp	r3, r2
 801aa28:	d84e      	bhi.n	801aac8 <__ieee754_expf+0xf8>
 801aa2a:	4b55      	ldr	r3, [pc, #340]	@ (801ab80 <__ieee754_expf+0x1b0>)
 801aa2c:	1c20      	adds	r0, r4, #0
 801aa2e:	5959      	ldr	r1, [r3, r5]
 801aa30:	f7e6 fb72 	bl	8001118 <__aeabi_fsub>
 801aa34:	4b53      	ldr	r3, [pc, #332]	@ (801ab84 <__ieee754_expf+0x1b4>)
 801aa36:	1c07      	adds	r7, r0, #0
 801aa38:	595b      	ldr	r3, [r3, r5]
 801aa3a:	2501      	movs	r5, #1
 801aa3c:	1bad      	subs	r5, r5, r6
 801aa3e:	9300      	str	r3, [sp, #0]
 801aa40:	1bad      	subs	r5, r5, r6
 801aa42:	9900      	ldr	r1, [sp, #0]
 801aa44:	1c38      	adds	r0, r7, #0
 801aa46:	f7e6 fb67 	bl	8001118 <__aeabi_fsub>
 801aa4a:	1c04      	adds	r4, r0, #0
 801aa4c:	1c21      	adds	r1, r4, #0
 801aa4e:	1c20      	adds	r0, r4, #0
 801aa50:	f7e6 fa24 	bl	8000e9c <__aeabi_fmul>
 801aa54:	494c      	ldr	r1, [pc, #304]	@ (801ab88 <__ieee754_expf+0x1b8>)
 801aa56:	1c06      	adds	r6, r0, #0
 801aa58:	f7e6 fa20 	bl	8000e9c <__aeabi_fmul>
 801aa5c:	494b      	ldr	r1, [pc, #300]	@ (801ab8c <__ieee754_expf+0x1bc>)
 801aa5e:	f7e6 fb5b 	bl	8001118 <__aeabi_fsub>
 801aa62:	1c31      	adds	r1, r6, #0
 801aa64:	f7e6 fa1a 	bl	8000e9c <__aeabi_fmul>
 801aa68:	4949      	ldr	r1, [pc, #292]	@ (801ab90 <__ieee754_expf+0x1c0>)
 801aa6a:	f7e5 fea7 	bl	80007bc <__aeabi_fadd>
 801aa6e:	1c31      	adds	r1, r6, #0
 801aa70:	f7e6 fa14 	bl	8000e9c <__aeabi_fmul>
 801aa74:	4947      	ldr	r1, [pc, #284]	@ (801ab94 <__ieee754_expf+0x1c4>)
 801aa76:	f7e6 fb4f 	bl	8001118 <__aeabi_fsub>
 801aa7a:	1c31      	adds	r1, r6, #0
 801aa7c:	f7e6 fa0e 	bl	8000e9c <__aeabi_fmul>
 801aa80:	4945      	ldr	r1, [pc, #276]	@ (801ab98 <__ieee754_expf+0x1c8>)
 801aa82:	f7e5 fe9b 	bl	80007bc <__aeabi_fadd>
 801aa86:	1c31      	adds	r1, r6, #0
 801aa88:	f7e6 fa08 	bl	8000e9c <__aeabi_fmul>
 801aa8c:	1c01      	adds	r1, r0, #0
 801aa8e:	1c20      	adds	r0, r4, #0
 801aa90:	f7e6 fb42 	bl	8001118 <__aeabi_fsub>
 801aa94:	1c01      	adds	r1, r0, #0
 801aa96:	1c06      	adds	r6, r0, #0
 801aa98:	1c20      	adds	r0, r4, #0
 801aa9a:	f7e6 f9ff 	bl	8000e9c <__aeabi_fmul>
 801aa9e:	9001      	str	r0, [sp, #4]
 801aaa0:	2d00      	cmp	r5, #0
 801aaa2:	d140      	bne.n	801ab26 <__ieee754_expf+0x156>
 801aaa4:	2180      	movs	r1, #128	@ 0x80
 801aaa6:	1c30      	adds	r0, r6, #0
 801aaa8:	05c9      	lsls	r1, r1, #23
 801aaaa:	f7e6 fb35 	bl	8001118 <__aeabi_fsub>
 801aaae:	1c01      	adds	r1, r0, #0
 801aab0:	9801      	ldr	r0, [sp, #4]
 801aab2:	f7e6 f80d 	bl	8000ad0 <__aeabi_fdiv>
 801aab6:	1c21      	adds	r1, r4, #0
 801aab8:	f7e6 fb2e 	bl	8001118 <__aeabi_fsub>
 801aabc:	1c01      	adds	r1, r0, #0
 801aabe:	20fe      	movs	r0, #254	@ 0xfe
 801aac0:	0580      	lsls	r0, r0, #22
 801aac2:	f7e6 fb29 	bl	8001118 <__aeabi_fsub>
 801aac6:	e79e      	b.n	801aa06 <__ieee754_expf+0x36>
 801aac8:	4934      	ldr	r1, [pc, #208]	@ (801ab9c <__ieee754_expf+0x1cc>)
 801aaca:	1c20      	adds	r0, r4, #0
 801aacc:	f7e6 f9e6 	bl	8000e9c <__aeabi_fmul>
 801aad0:	4b33      	ldr	r3, [pc, #204]	@ (801aba0 <__ieee754_expf+0x1d0>)
 801aad2:	5959      	ldr	r1, [r3, r5]
 801aad4:	f7e5 fe72 	bl	80007bc <__aeabi_fadd>
 801aad8:	f7e6 fcd8 	bl	800148c <__aeabi_f2iz>
 801aadc:	0005      	movs	r5, r0
 801aade:	f7e6 fcf5 	bl	80014cc <__aeabi_i2f>
 801aae2:	4930      	ldr	r1, [pc, #192]	@ (801aba4 <__ieee754_expf+0x1d4>)
 801aae4:	1c06      	adds	r6, r0, #0
 801aae6:	f7e6 f9d9 	bl	8000e9c <__aeabi_fmul>
 801aaea:	1c01      	adds	r1, r0, #0
 801aaec:	1c20      	adds	r0, r4, #0
 801aaee:	f7e6 fb13 	bl	8001118 <__aeabi_fsub>
 801aaf2:	492d      	ldr	r1, [pc, #180]	@ (801aba8 <__ieee754_expf+0x1d8>)
 801aaf4:	1c07      	adds	r7, r0, #0
 801aaf6:	1c30      	adds	r0, r6, #0
 801aaf8:	f7e6 f9d0 	bl	8000e9c <__aeabi_fmul>
 801aafc:	9000      	str	r0, [sp, #0]
 801aafe:	e7a0      	b.n	801aa42 <__ieee754_expf+0x72>
 801ab00:	22d0      	movs	r2, #208	@ 0xd0
 801ab02:	0592      	lsls	r2, r2, #22
 801ab04:	4293      	cmp	r3, r2
 801ab06:	d20c      	bcs.n	801ab22 <__ieee754_expf+0x152>
 801ab08:	4928      	ldr	r1, [pc, #160]	@ (801abac <__ieee754_expf+0x1dc>)
 801ab0a:	1c20      	adds	r0, r4, #0
 801ab0c:	f7e5 fe56 	bl	80007bc <__aeabi_fadd>
 801ab10:	21fe      	movs	r1, #254	@ 0xfe
 801ab12:	0589      	lsls	r1, r1, #22
 801ab14:	f7e5 fcee 	bl	80004f4 <__aeabi_fcmpgt>
 801ab18:	1e05      	subs	r5, r0, #0
 801ab1a:	d097      	beq.n	801aa4c <__ieee754_expf+0x7c>
 801ab1c:	21fe      	movs	r1, #254	@ 0xfe
 801ab1e:	0589      	lsls	r1, r1, #22
 801ab20:	e75f      	b.n	801a9e2 <__ieee754_expf+0x12>
 801ab22:	2500      	movs	r5, #0
 801ab24:	e792      	b.n	801aa4c <__ieee754_expf+0x7c>
 801ab26:	2080      	movs	r0, #128	@ 0x80
 801ab28:	1c31      	adds	r1, r6, #0
 801ab2a:	05c0      	lsls	r0, r0, #23
 801ab2c:	f7e6 faf4 	bl	8001118 <__aeabi_fsub>
 801ab30:	1c01      	adds	r1, r0, #0
 801ab32:	9801      	ldr	r0, [sp, #4]
 801ab34:	f7e5 ffcc 	bl	8000ad0 <__aeabi_fdiv>
 801ab38:	1c01      	adds	r1, r0, #0
 801ab3a:	9800      	ldr	r0, [sp, #0]
 801ab3c:	f7e6 faec 	bl	8001118 <__aeabi_fsub>
 801ab40:	1c39      	adds	r1, r7, #0
 801ab42:	f7e6 fae9 	bl	8001118 <__aeabi_fsub>
 801ab46:	1c01      	adds	r1, r0, #0
 801ab48:	20fe      	movs	r0, #254	@ 0xfe
 801ab4a:	0580      	lsls	r0, r0, #22
 801ab4c:	f7e6 fae4 	bl	8001118 <__aeabi_fsub>
 801ab50:	002b      	movs	r3, r5
 801ab52:	337d      	adds	r3, #125	@ 0x7d
 801ab54:	db02      	blt.n	801ab5c <__ieee754_expf+0x18c>
 801ab56:	05ec      	lsls	r4, r5, #23
 801ab58:	1824      	adds	r4, r4, r0
 801ab5a:	e74c      	b.n	801a9f6 <__ieee754_expf+0x26>
 801ab5c:	21d8      	movs	r1, #216	@ 0xd8
 801ab5e:	3564      	adds	r5, #100	@ 0x64
 801ab60:	05ed      	lsls	r5, r5, #23
 801ab62:	1828      	adds	r0, r5, r0
 801ab64:	0509      	lsls	r1, r1, #20
 801ab66:	f7e6 f999 	bl	8000e9c <__aeabi_fmul>
 801ab6a:	e74c      	b.n	801aa06 <__ieee754_expf+0x36>
 801ab6c:	2400      	movs	r4, #0
 801ab6e:	e742      	b.n	801a9f6 <__ieee754_expf+0x26>
 801ab70:	42b17217 	.word	0x42b17217
 801ab74:	42cff1b5 	.word	0x42cff1b5
 801ab78:	3eb17218 	.word	0x3eb17218
 801ab7c:	3f851591 	.word	0x3f851591
 801ab80:	0801c168 	.word	0x0801c168
 801ab84:	0801c160 	.word	0x0801c160
 801ab88:	3331bb4c 	.word	0x3331bb4c
 801ab8c:	35ddea0e 	.word	0x35ddea0e
 801ab90:	388ab355 	.word	0x388ab355
 801ab94:	3b360b61 	.word	0x3b360b61
 801ab98:	3e2aaaab 	.word	0x3e2aaaab
 801ab9c:	3fb8aa3b 	.word	0x3fb8aa3b
 801aba0:	0801c170 	.word	0x0801c170
 801aba4:	3f317180 	.word	0x3f317180
 801aba8:	3717f7d1 	.word	0x3717f7d1
 801abac:	7149f2ca 	.word	0x7149f2ca

0801abb0 <with_errnof>:
 801abb0:	b570      	push	{r4, r5, r6, lr}
 801abb2:	000d      	movs	r5, r1
 801abb4:	1c04      	adds	r4, r0, #0
 801abb6:	f7fd fb67 	bl	8018288 <__errno>
 801abba:	6005      	str	r5, [r0, #0]
 801abbc:	1c20      	adds	r0, r4, #0
 801abbe:	bd70      	pop	{r4, r5, r6, pc}

0801abc0 <xflowf>:
 801abc0:	b510      	push	{r4, lr}
 801abc2:	1c0b      	adds	r3, r1, #0
 801abc4:	2800      	cmp	r0, #0
 801abc6:	d002      	beq.n	801abce <xflowf+0xe>
 801abc8:	2380      	movs	r3, #128	@ 0x80
 801abca:	061b      	lsls	r3, r3, #24
 801abcc:	18cb      	adds	r3, r1, r3
 801abce:	1c18      	adds	r0, r3, #0
 801abd0:	f7e6 f964 	bl	8000e9c <__aeabi_fmul>
 801abd4:	2122      	movs	r1, #34	@ 0x22
 801abd6:	f7ff ffeb 	bl	801abb0 <with_errnof>
 801abda:	bd10      	pop	{r4, pc}

0801abdc <__math_uflowf>:
 801abdc:	2180      	movs	r1, #128	@ 0x80
 801abde:	b510      	push	{r4, lr}
 801abe0:	0549      	lsls	r1, r1, #21
 801abe2:	f7ff ffed 	bl	801abc0 <xflowf>
 801abe6:	bd10      	pop	{r4, pc}

0801abe8 <__math_oflowf>:
 801abe8:	21e0      	movs	r1, #224	@ 0xe0
 801abea:	b510      	push	{r4, lr}
 801abec:	05c9      	lsls	r1, r1, #23
 801abee:	f7ff ffe7 	bl	801abc0 <xflowf>
 801abf2:	bd10      	pop	{r4, pc}

0801abf4 <__ieee754_log>:
 801abf4:	2380      	movs	r3, #128	@ 0x80
 801abf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abf8:	035b      	lsls	r3, r3, #13
 801abfa:	000e      	movs	r6, r1
 801abfc:	b08d      	sub	sp, #52	@ 0x34
 801abfe:	4299      	cmp	r1, r3
 801ac00:	da23      	bge.n	801ac4a <__ieee754_log+0x56>
 801ac02:	004b      	lsls	r3, r1, #1
 801ac04:	085b      	lsrs	r3, r3, #1
 801ac06:	4303      	orrs	r3, r0
 801ac08:	d107      	bne.n	801ac1a <__ieee754_log+0x26>
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	2000      	movs	r0, #0
 801ac10:	49b4      	ldr	r1, [pc, #720]	@ (801aee4 <__ieee754_log+0x2f0>)
 801ac12:	f7e7 f84d 	bl	8001cb0 <__aeabi_ddiv>
 801ac16:	b00d      	add	sp, #52	@ 0x34
 801ac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac1a:	2900      	cmp	r1, #0
 801ac1c:	da06      	bge.n	801ac2c <__ieee754_log+0x38>
 801ac1e:	0002      	movs	r2, r0
 801ac20:	000b      	movs	r3, r1
 801ac22:	f7e7 ff51 	bl	8002ac8 <__aeabi_dsub>
 801ac26:	2200      	movs	r2, #0
 801ac28:	2300      	movs	r3, #0
 801ac2a:	e7f2      	b.n	801ac12 <__ieee754_log+0x1e>
 801ac2c:	4bae      	ldr	r3, [pc, #696]	@ (801aee8 <__ieee754_log+0x2f4>)
 801ac2e:	2200      	movs	r2, #0
 801ac30:	f7e7 fc82 	bl	8002538 <__aeabi_dmul>
 801ac34:	2336      	movs	r3, #54	@ 0x36
 801ac36:	000e      	movs	r6, r1
 801ac38:	425b      	negs	r3, r3
 801ac3a:	4aac      	ldr	r2, [pc, #688]	@ (801aeec <__ieee754_log+0x2f8>)
 801ac3c:	4296      	cmp	r6, r2
 801ac3e:	dd06      	ble.n	801ac4e <__ieee754_log+0x5a>
 801ac40:	0002      	movs	r2, r0
 801ac42:	000b      	movs	r3, r1
 801ac44:	f7e6 fcd0 	bl	80015e8 <__aeabi_dadd>
 801ac48:	e7e5      	b.n	801ac16 <__ieee754_log+0x22>
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	e7f5      	b.n	801ac3a <__ieee754_log+0x46>
 801ac4e:	4ca8      	ldr	r4, [pc, #672]	@ (801aef0 <__ieee754_log+0x2fc>)
 801ac50:	1532      	asrs	r2, r6, #20
 801ac52:	1912      	adds	r2, r2, r4
 801ac54:	0336      	lsls	r6, r6, #12
 801ac56:	4ca7      	ldr	r4, [pc, #668]	@ (801aef4 <__ieee754_log+0x300>)
 801ac58:	18d2      	adds	r2, r2, r3
 801ac5a:	0b33      	lsrs	r3, r6, #12
 801ac5c:	9302      	str	r3, [sp, #8]
 801ac5e:	191b      	adds	r3, r3, r4
 801ac60:	2480      	movs	r4, #128	@ 0x80
 801ac62:	0364      	lsls	r4, r4, #13
 801ac64:	4023      	ands	r3, r4
 801ac66:	4ca4      	ldr	r4, [pc, #656]	@ (801aef8 <__ieee754_log+0x304>)
 801ac68:	9d02      	ldr	r5, [sp, #8]
 801ac6a:	405c      	eors	r4, r3
 801ac6c:	151b      	asrs	r3, r3, #20
 801ac6e:	189b      	adds	r3, r3, r2
 801ac70:	4325      	orrs	r5, r4
 801ac72:	2200      	movs	r2, #0
 801ac74:	9300      	str	r3, [sp, #0]
 801ac76:	0029      	movs	r1, r5
 801ac78:	4b9f      	ldr	r3, [pc, #636]	@ (801aef8 <__ieee754_log+0x304>)
 801ac7a:	f7e7 ff25 	bl	8002ac8 <__aeabi_dsub>
 801ac7e:	9b02      	ldr	r3, [sp, #8]
 801ac80:	0006      	movs	r6, r0
 801ac82:	3302      	adds	r3, #2
 801ac84:	031b      	lsls	r3, r3, #12
 801ac86:	000f      	movs	r7, r1
 801ac88:	2200      	movs	r2, #0
 801ac8a:	0b1b      	lsrs	r3, r3, #12
 801ac8c:	2b02      	cmp	r3, #2
 801ac8e:	dc64      	bgt.n	801ad5a <__ieee754_log+0x166>
 801ac90:	2300      	movs	r3, #0
 801ac92:	f7e5 fbdb 	bl	800044c <__aeabi_dcmpeq>
 801ac96:	2800      	cmp	r0, #0
 801ac98:	d019      	beq.n	801acce <__ieee754_log+0xda>
 801ac9a:	9b00      	ldr	r3, [sp, #0]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d100      	bne.n	801aca2 <__ieee754_log+0xae>
 801aca0:	e11c      	b.n	801aedc <__ieee754_log+0x2e8>
 801aca2:	0018      	movs	r0, r3
 801aca4:	f7e8 fb0a 	bl	80032bc <__aeabi_i2d>
 801aca8:	4a94      	ldr	r2, [pc, #592]	@ (801aefc <__ieee754_log+0x308>)
 801acaa:	4b95      	ldr	r3, [pc, #596]	@ (801af00 <__ieee754_log+0x30c>)
 801acac:	0004      	movs	r4, r0
 801acae:	000d      	movs	r5, r1
 801acb0:	f7e7 fc42 	bl	8002538 <__aeabi_dmul>
 801acb4:	4a93      	ldr	r2, [pc, #588]	@ (801af04 <__ieee754_log+0x310>)
 801acb6:	0006      	movs	r6, r0
 801acb8:	000f      	movs	r7, r1
 801acba:	4b93      	ldr	r3, [pc, #588]	@ (801af08 <__ieee754_log+0x314>)
 801acbc:	0020      	movs	r0, r4
 801acbe:	0029      	movs	r1, r5
 801acc0:	f7e7 fc3a 	bl	8002538 <__aeabi_dmul>
 801acc4:	0002      	movs	r2, r0
 801acc6:	000b      	movs	r3, r1
 801acc8:	0030      	movs	r0, r6
 801acca:	0039      	movs	r1, r7
 801accc:	e7ba      	b.n	801ac44 <__ieee754_log+0x50>
 801acce:	4a8f      	ldr	r2, [pc, #572]	@ (801af0c <__ieee754_log+0x318>)
 801acd0:	4b8f      	ldr	r3, [pc, #572]	@ (801af10 <__ieee754_log+0x31c>)
 801acd2:	0030      	movs	r0, r6
 801acd4:	0039      	movs	r1, r7
 801acd6:	f7e7 fc2f 	bl	8002538 <__aeabi_dmul>
 801acda:	0002      	movs	r2, r0
 801acdc:	000b      	movs	r3, r1
 801acde:	2000      	movs	r0, #0
 801ace0:	498c      	ldr	r1, [pc, #560]	@ (801af14 <__ieee754_log+0x320>)
 801ace2:	f7e7 fef1 	bl	8002ac8 <__aeabi_dsub>
 801ace6:	0032      	movs	r2, r6
 801ace8:	0004      	movs	r4, r0
 801acea:	000d      	movs	r5, r1
 801acec:	003b      	movs	r3, r7
 801acee:	0030      	movs	r0, r6
 801acf0:	0039      	movs	r1, r7
 801acf2:	f7e7 fc21 	bl	8002538 <__aeabi_dmul>
 801acf6:	000b      	movs	r3, r1
 801acf8:	0002      	movs	r2, r0
 801acfa:	0029      	movs	r1, r5
 801acfc:	0020      	movs	r0, r4
 801acfe:	f7e7 fc1b 	bl	8002538 <__aeabi_dmul>
 801ad02:	9b00      	ldr	r3, [sp, #0]
 801ad04:	9002      	str	r0, [sp, #8]
 801ad06:	9103      	str	r1, [sp, #12]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d106      	bne.n	801ad1a <__ieee754_log+0x126>
 801ad0c:	0002      	movs	r2, r0
 801ad0e:	000b      	movs	r3, r1
 801ad10:	0030      	movs	r0, r6
 801ad12:	0039      	movs	r1, r7
 801ad14:	f7e7 fed8 	bl	8002ac8 <__aeabi_dsub>
 801ad18:	e77d      	b.n	801ac16 <__ieee754_log+0x22>
 801ad1a:	9800      	ldr	r0, [sp, #0]
 801ad1c:	f7e8 face 	bl	80032bc <__aeabi_i2d>
 801ad20:	4a76      	ldr	r2, [pc, #472]	@ (801aefc <__ieee754_log+0x308>)
 801ad22:	4b77      	ldr	r3, [pc, #476]	@ (801af00 <__ieee754_log+0x30c>)
 801ad24:	0004      	movs	r4, r0
 801ad26:	000d      	movs	r5, r1
 801ad28:	f7e7 fc06 	bl	8002538 <__aeabi_dmul>
 801ad2c:	4a75      	ldr	r2, [pc, #468]	@ (801af04 <__ieee754_log+0x310>)
 801ad2e:	9000      	str	r0, [sp, #0]
 801ad30:	9101      	str	r1, [sp, #4]
 801ad32:	4b75      	ldr	r3, [pc, #468]	@ (801af08 <__ieee754_log+0x314>)
 801ad34:	0020      	movs	r0, r4
 801ad36:	0029      	movs	r1, r5
 801ad38:	f7e7 fbfe 	bl	8002538 <__aeabi_dmul>
 801ad3c:	0002      	movs	r2, r0
 801ad3e:	000b      	movs	r3, r1
 801ad40:	9802      	ldr	r0, [sp, #8]
 801ad42:	9903      	ldr	r1, [sp, #12]
 801ad44:	f7e7 fec0 	bl	8002ac8 <__aeabi_dsub>
 801ad48:	0032      	movs	r2, r6
 801ad4a:	003b      	movs	r3, r7
 801ad4c:	f7e7 febc 	bl	8002ac8 <__aeabi_dsub>
 801ad50:	0002      	movs	r2, r0
 801ad52:	000b      	movs	r3, r1
 801ad54:	9800      	ldr	r0, [sp, #0]
 801ad56:	9901      	ldr	r1, [sp, #4]
 801ad58:	e7dc      	b.n	801ad14 <__ieee754_log+0x120>
 801ad5a:	2380      	movs	r3, #128	@ 0x80
 801ad5c:	05db      	lsls	r3, r3, #23
 801ad5e:	f7e6 fc43 	bl	80015e8 <__aeabi_dadd>
 801ad62:	0002      	movs	r2, r0
 801ad64:	000b      	movs	r3, r1
 801ad66:	0030      	movs	r0, r6
 801ad68:	0039      	movs	r1, r7
 801ad6a:	f7e6 ffa1 	bl	8001cb0 <__aeabi_ddiv>
 801ad6e:	9004      	str	r0, [sp, #16]
 801ad70:	9105      	str	r1, [sp, #20]
 801ad72:	9800      	ldr	r0, [sp, #0]
 801ad74:	f7e8 faa2 	bl	80032bc <__aeabi_i2d>
 801ad78:	9a04      	ldr	r2, [sp, #16]
 801ad7a:	9b05      	ldr	r3, [sp, #20]
 801ad7c:	9006      	str	r0, [sp, #24]
 801ad7e:	9107      	str	r1, [sp, #28]
 801ad80:	0010      	movs	r0, r2
 801ad82:	0019      	movs	r1, r3
 801ad84:	f7e7 fbd8 	bl	8002538 <__aeabi_dmul>
 801ad88:	4a63      	ldr	r2, [pc, #396]	@ (801af18 <__ieee754_log+0x324>)
 801ad8a:	9b02      	ldr	r3, [sp, #8]
 801ad8c:	4694      	mov	ip, r2
 801ad8e:	4463      	add	r3, ip
 801ad90:	0002      	movs	r2, r0
 801ad92:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad94:	000b      	movs	r3, r1
 801ad96:	9008      	str	r0, [sp, #32]
 801ad98:	9109      	str	r1, [sp, #36]	@ 0x24
 801ad9a:	f7e7 fbcd 	bl	8002538 <__aeabi_dmul>
 801ad9e:	0004      	movs	r4, r0
 801ada0:	000d      	movs	r5, r1
 801ada2:	4a5e      	ldr	r2, [pc, #376]	@ (801af1c <__ieee754_log+0x328>)
 801ada4:	4b5e      	ldr	r3, [pc, #376]	@ (801af20 <__ieee754_log+0x32c>)
 801ada6:	f7e7 fbc7 	bl	8002538 <__aeabi_dmul>
 801adaa:	4a5e      	ldr	r2, [pc, #376]	@ (801af24 <__ieee754_log+0x330>)
 801adac:	4b5e      	ldr	r3, [pc, #376]	@ (801af28 <__ieee754_log+0x334>)
 801adae:	f7e6 fc1b 	bl	80015e8 <__aeabi_dadd>
 801adb2:	0022      	movs	r2, r4
 801adb4:	002b      	movs	r3, r5
 801adb6:	f7e7 fbbf 	bl	8002538 <__aeabi_dmul>
 801adba:	4a5c      	ldr	r2, [pc, #368]	@ (801af2c <__ieee754_log+0x338>)
 801adbc:	4b5c      	ldr	r3, [pc, #368]	@ (801af30 <__ieee754_log+0x33c>)
 801adbe:	f7e6 fc13 	bl	80015e8 <__aeabi_dadd>
 801adc2:	0022      	movs	r2, r4
 801adc4:	002b      	movs	r3, r5
 801adc6:	f7e7 fbb7 	bl	8002538 <__aeabi_dmul>
 801adca:	4a5a      	ldr	r2, [pc, #360]	@ (801af34 <__ieee754_log+0x340>)
 801adcc:	4b5a      	ldr	r3, [pc, #360]	@ (801af38 <__ieee754_log+0x344>)
 801adce:	f7e6 fc0b 	bl	80015e8 <__aeabi_dadd>
 801add2:	9a08      	ldr	r2, [sp, #32]
 801add4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801add6:	f7e7 fbaf 	bl	8002538 <__aeabi_dmul>
 801adda:	4a58      	ldr	r2, [pc, #352]	@ (801af3c <__ieee754_log+0x348>)
 801addc:	9008      	str	r0, [sp, #32]
 801adde:	9109      	str	r1, [sp, #36]	@ 0x24
 801ade0:	4b57      	ldr	r3, [pc, #348]	@ (801af40 <__ieee754_log+0x34c>)
 801ade2:	0020      	movs	r0, r4
 801ade4:	0029      	movs	r1, r5
 801ade6:	f7e7 fba7 	bl	8002538 <__aeabi_dmul>
 801adea:	4a56      	ldr	r2, [pc, #344]	@ (801af44 <__ieee754_log+0x350>)
 801adec:	4b56      	ldr	r3, [pc, #344]	@ (801af48 <__ieee754_log+0x354>)
 801adee:	f7e6 fbfb 	bl	80015e8 <__aeabi_dadd>
 801adf2:	0022      	movs	r2, r4
 801adf4:	002b      	movs	r3, r5
 801adf6:	f7e7 fb9f 	bl	8002538 <__aeabi_dmul>
 801adfa:	4a54      	ldr	r2, [pc, #336]	@ (801af4c <__ieee754_log+0x358>)
 801adfc:	4b54      	ldr	r3, [pc, #336]	@ (801af50 <__ieee754_log+0x35c>)
 801adfe:	f7e6 fbf3 	bl	80015e8 <__aeabi_dadd>
 801ae02:	0022      	movs	r2, r4
 801ae04:	002b      	movs	r3, r5
 801ae06:	f7e7 fb97 	bl	8002538 <__aeabi_dmul>
 801ae0a:	0002      	movs	r2, r0
 801ae0c:	000b      	movs	r3, r1
 801ae0e:	9808      	ldr	r0, [sp, #32]
 801ae10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ae12:	f7e6 fbe9 	bl	80015e8 <__aeabi_dadd>
 801ae16:	9a02      	ldr	r2, [sp, #8]
 801ae18:	4b4e      	ldr	r3, [pc, #312]	@ (801af54 <__ieee754_log+0x360>)
 801ae1a:	0004      	movs	r4, r0
 801ae1c:	1a9b      	subs	r3, r3, r2
 801ae1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ae20:	000d      	movs	r5, r1
 801ae22:	4313      	orrs	r3, r2
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	dd34      	ble.n	801ae92 <__ieee754_log+0x29e>
 801ae28:	2200      	movs	r2, #0
 801ae2a:	4b3a      	ldr	r3, [pc, #232]	@ (801af14 <__ieee754_log+0x320>)
 801ae2c:	0030      	movs	r0, r6
 801ae2e:	0039      	movs	r1, r7
 801ae30:	f7e7 fb82 	bl	8002538 <__aeabi_dmul>
 801ae34:	0032      	movs	r2, r6
 801ae36:	003b      	movs	r3, r7
 801ae38:	f7e7 fb7e 	bl	8002538 <__aeabi_dmul>
 801ae3c:	0002      	movs	r2, r0
 801ae3e:	000b      	movs	r3, r1
 801ae40:	9002      	str	r0, [sp, #8]
 801ae42:	9103      	str	r1, [sp, #12]
 801ae44:	0020      	movs	r0, r4
 801ae46:	0029      	movs	r1, r5
 801ae48:	f7e6 fbce 	bl	80015e8 <__aeabi_dadd>
 801ae4c:	9a04      	ldr	r2, [sp, #16]
 801ae4e:	9b05      	ldr	r3, [sp, #20]
 801ae50:	f7e7 fb72 	bl	8002538 <__aeabi_dmul>
 801ae54:	9b00      	ldr	r3, [sp, #0]
 801ae56:	0004      	movs	r4, r0
 801ae58:	000d      	movs	r5, r1
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d106      	bne.n	801ae6c <__ieee754_log+0x278>
 801ae5e:	0002      	movs	r2, r0
 801ae60:	000b      	movs	r3, r1
 801ae62:	9802      	ldr	r0, [sp, #8]
 801ae64:	9903      	ldr	r1, [sp, #12]
 801ae66:	f7e7 fe2f 	bl	8002ac8 <__aeabi_dsub>
 801ae6a:	e74f      	b.n	801ad0c <__ieee754_log+0x118>
 801ae6c:	4a23      	ldr	r2, [pc, #140]	@ (801aefc <__ieee754_log+0x308>)
 801ae6e:	4b24      	ldr	r3, [pc, #144]	@ (801af00 <__ieee754_log+0x30c>)
 801ae70:	9806      	ldr	r0, [sp, #24]
 801ae72:	9907      	ldr	r1, [sp, #28]
 801ae74:	f7e7 fb60 	bl	8002538 <__aeabi_dmul>
 801ae78:	4a22      	ldr	r2, [pc, #136]	@ (801af04 <__ieee754_log+0x310>)
 801ae7a:	9000      	str	r0, [sp, #0]
 801ae7c:	9101      	str	r1, [sp, #4]
 801ae7e:	9806      	ldr	r0, [sp, #24]
 801ae80:	9907      	ldr	r1, [sp, #28]
 801ae82:	4b21      	ldr	r3, [pc, #132]	@ (801af08 <__ieee754_log+0x314>)
 801ae84:	f7e7 fb58 	bl	8002538 <__aeabi_dmul>
 801ae88:	0022      	movs	r2, r4
 801ae8a:	002b      	movs	r3, r5
 801ae8c:	f7e6 fbac 	bl	80015e8 <__aeabi_dadd>
 801ae90:	e754      	b.n	801ad3c <__ieee754_log+0x148>
 801ae92:	0002      	movs	r2, r0
 801ae94:	000b      	movs	r3, r1
 801ae96:	0030      	movs	r0, r6
 801ae98:	0039      	movs	r1, r7
 801ae9a:	f7e7 fe15 	bl	8002ac8 <__aeabi_dsub>
 801ae9e:	9a04      	ldr	r2, [sp, #16]
 801aea0:	9b05      	ldr	r3, [sp, #20]
 801aea2:	f7e7 fb49 	bl	8002538 <__aeabi_dmul>
 801aea6:	9b00      	ldr	r3, [sp, #0]
 801aea8:	0004      	movs	r4, r0
 801aeaa:	000d      	movs	r5, r1
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d102      	bne.n	801aeb6 <__ieee754_log+0x2c2>
 801aeb0:	0002      	movs	r2, r0
 801aeb2:	000b      	movs	r3, r1
 801aeb4:	e72c      	b.n	801ad10 <__ieee754_log+0x11c>
 801aeb6:	4a11      	ldr	r2, [pc, #68]	@ (801aefc <__ieee754_log+0x308>)
 801aeb8:	4b11      	ldr	r3, [pc, #68]	@ (801af00 <__ieee754_log+0x30c>)
 801aeba:	9806      	ldr	r0, [sp, #24]
 801aebc:	9907      	ldr	r1, [sp, #28]
 801aebe:	f7e7 fb3b 	bl	8002538 <__aeabi_dmul>
 801aec2:	4a10      	ldr	r2, [pc, #64]	@ (801af04 <__ieee754_log+0x310>)
 801aec4:	9000      	str	r0, [sp, #0]
 801aec6:	9101      	str	r1, [sp, #4]
 801aec8:	9806      	ldr	r0, [sp, #24]
 801aeca:	9907      	ldr	r1, [sp, #28]
 801aecc:	4b0e      	ldr	r3, [pc, #56]	@ (801af08 <__ieee754_log+0x314>)
 801aece:	f7e7 fb33 	bl	8002538 <__aeabi_dmul>
 801aed2:	0002      	movs	r2, r0
 801aed4:	000b      	movs	r3, r1
 801aed6:	0020      	movs	r0, r4
 801aed8:	0029      	movs	r1, r5
 801aeda:	e733      	b.n	801ad44 <__ieee754_log+0x150>
 801aedc:	2000      	movs	r0, #0
 801aede:	2100      	movs	r1, #0
 801aee0:	e699      	b.n	801ac16 <__ieee754_log+0x22>
 801aee2:	46c0      	nop			@ (mov r8, r8)
 801aee4:	c3500000 	.word	0xc3500000
 801aee8:	43500000 	.word	0x43500000
 801aeec:	7fefffff 	.word	0x7fefffff
 801aef0:	fffffc01 	.word	0xfffffc01
 801aef4:	00095f64 	.word	0x00095f64
 801aef8:	3ff00000 	.word	0x3ff00000
 801aefc:	fee00000 	.word	0xfee00000
 801af00:	3fe62e42 	.word	0x3fe62e42
 801af04:	35793c76 	.word	0x35793c76
 801af08:	3dea39ef 	.word	0x3dea39ef
 801af0c:	55555555 	.word	0x55555555
 801af10:	3fd55555 	.word	0x3fd55555
 801af14:	3fe00000 	.word	0x3fe00000
 801af18:	fff9eb86 	.word	0xfff9eb86
 801af1c:	df3e5244 	.word	0xdf3e5244
 801af20:	3fc2f112 	.word	0x3fc2f112
 801af24:	96cb03de 	.word	0x96cb03de
 801af28:	3fc74664 	.word	0x3fc74664
 801af2c:	94229359 	.word	0x94229359
 801af30:	3fd24924 	.word	0x3fd24924
 801af34:	55555593 	.word	0x55555593
 801af38:	3fe55555 	.word	0x3fe55555
 801af3c:	d078c69f 	.word	0xd078c69f
 801af40:	3fc39a09 	.word	0x3fc39a09
 801af44:	1d8e78af 	.word	0x1d8e78af
 801af48:	3fcc71c5 	.word	0x3fcc71c5
 801af4c:	9997fa04 	.word	0x9997fa04
 801af50:	3fd99999 	.word	0x3fd99999
 801af54:	0006b851 	.word	0x0006b851

0801af58 <_init>:
 801af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af5a:	46c0      	nop			@ (mov r8, r8)
 801af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af5e:	bc08      	pop	{r3}
 801af60:	469e      	mov	lr, r3
 801af62:	4770      	bx	lr

0801af64 <_fini>:
 801af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af66:	46c0      	nop			@ (mov r8, r8)
 801af68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af6a:	bc08      	pop	{r3}
 801af6c:	469e      	mov	lr, r3
 801af6e:	4770      	bx	lr
