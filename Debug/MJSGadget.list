
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b33c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001300  0801b400  0801b400  0001c400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c700  0801c700  0001e3c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c700  0801c700  0001d700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c708  0801c708  0001e3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c708  0801c708  0001d708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c70c  0801c70c  0001d70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  0801c710  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b94  200003c8  0801cad8  0001e3c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003f5c  0801cad8  0001ef5c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c7e5  00000000  00000000  0001e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008230  00000000  00000000  0004abd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002570  00000000  00000000  00052e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c6e  00000000  00000000  00055378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021244  00000000  00000000  00056fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b1c6  00000000  00000000  0007822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6e9  00000000  00000000  000b33f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099c4  00000000  00000000  00150b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801b3e4 	.word	0x0801b3e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	0801b3e4 	.word	0x0801b3e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801bfec 	.word	0x0801bfec
 8000d08:	0801c02c 	.word	0x0801c02c
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801c068 	.word	0x0801c068
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 ff6e 	bl	800b440 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 ffc5 	bl	800b510 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 ff78 	bl	800b49c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	200003e4 	.word	0x200003e4

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fef3 	bl	800b440 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 ff22 	bl	800b4b8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 ff06 	bl	800b49c <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f002 f86e 	bl	800577c <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f002 f8cb 	bl	8005840 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	20000514 	.word	0x20000514
 80036bc:	20000518 	.word	0x20000518

080036c0 <checkEEprom>:
bool checkEEprom(){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <checkEEprom+0x5c>)
 80036c8:	4815      	ldr	r0, [pc, #84]	@ (8003720 <checkEEprom+0x60>)
 80036ca:	220c      	movs	r2, #12
 80036cc:	0019      	movs	r1, r3
 80036ce:	f7ff ff92 	bl	80035f6 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e00e      	b.n	80036f8 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	4a0f      	ldr	r2, [pc, #60]	@ (800371c <checkEEprom+0x5c>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	001a      	movs	r2, r3
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <checkEEprom+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	18d2      	adds	r2, r2, r3
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <checkEEprom+0x64>)
 80036ec:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036ee:	1dfb      	adds	r3, r7, #7
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	1dfb      	adds	r3, r7, #7
 80036f4:	3201      	adds	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	1dfb      	adds	r3, r7, #7
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b0b      	cmp	r3, #11
 80036fe:	d9ec      	bls.n	80036da <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003700:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <checkEEprom+0x64>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	425a      	negs	r2, r3
 8003706:	4153      	adcs	r3, r2
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <checkEEprom+0x68>)
 800370c:	701a      	strb	r2, [r3, #0]
  return test;
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <checkEEprom+0x68>)
 8003710:	781b      	ldrb	r3, [r3, #0]
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	2000093c 	.word	0x2000093c
 8003720:	0808000c 	.word	0x0808000c
 8003724:	20000948 	.word	0x20000948
 8003728:	2000094c 	.word	0x2000094c

0800372c <checkName>:
bool checkName(){
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <checkName+0x5c>)
 8003734:	4815      	ldr	r0, [pc, #84]	@ (800378c <checkName+0x60>)
 8003736:	221e      	movs	r2, #30
 8003738:	0019      	movs	r1, r3
 800373a:	f7ff ff5c 	bl	80035f6 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e00e      	b.n	8003764 <checkName+0x38>
    configSum += nameConfig[i];
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	4a0f      	ldr	r2, [pc, #60]	@ (8003788 <checkName+0x5c>)
 800374c:	5cd3      	ldrb	r3, [r2, r3]
 800374e:	001a      	movs	r2, r3
 8003750:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <checkName+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	18d2      	adds	r2, r2, r3
 8003756:	4b0e      	ldr	r3, [pc, #56]	@ (8003790 <checkName+0x64>)
 8003758:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	3201      	adds	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b0b      	cmp	r3, #11
 800376a:	d9ec      	bls.n	8003746 <checkName+0x1a>
  }
  test = (configSum != 0);
 800376c:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <checkName+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1e5a      	subs	r2, r3, #1
 8003772:	4193      	sbcs	r3, r2
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b07      	ldr	r3, [pc, #28]	@ (8003794 <checkName+0x68>)
 8003778:	701a      	strb	r2, [r3, #0]
  return test;
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <checkName+0x68>)
 800377c:	781b      	ldrb	r3, [r3, #0]
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	20000950 	.word	0x20000950
 800378c:	08080090 	.word	0x08080090
 8003790:	20000970 	.word	0x20000970
 8003794:	20000974 	.word	0x20000974

08003798 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <ESP_GetHT+0x20>)
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <ESP_GetHT+0x24>)
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	2000050c 	.word	0x2000050c
 80037bc:	20000510 	.word	0x20000510

080037c0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80037ce:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <setMeasurement+0x2c>)
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <setMeasurement+0x30>)
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <setMeasurement+0x34>)
 80037dc:	1dba      	adds	r2, r7, #6
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	801a      	strh	r2, [r3, #0]
}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	2000050c 	.word	0x2000050c
 80037f0:	20000510 	.word	0x20000510
 80037f4:	2000051c 	.word	0x2000051c

080037f8 <setMic>:
void setMic(float dB){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <setMic+0x18>)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000520 	.word	0x20000520

08003814 <SetConfigMode>:

void SetConfigMode(){
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003818:	4b02      	ldr	r3, [pc, #8]	@ (8003824 <SetConfigMode+0x10>)
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	200004f2 	.word	0x200004f2

08003828 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 800382c:	f006 fdd4 	bl	800a3d8 <HAL_GetUIDw0>
 8003830:	0002      	movs	r2, r0
 8003832:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <ESP_GetUID+0x28>)
 8003834:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003836:	f006 fdd9 	bl	800a3ec <HAL_GetUIDw1>
 800383a:	0002      	movs	r2, r0
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <ESP_GetUID+0x28>)
 800383e:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003840:	f006 fdde 	bl	800a400 <HAL_GetUIDw2>
 8003844:	0002      	movs	r2, r0
 8003846:	4b02      	ldr	r3, [pc, #8]	@ (8003850 <ESP_GetUID+0x28>)
 8003848:	609a      	str	r2, [r3, #8]
}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200004f8 	.word	0x200004f8

08003854 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <ESP_Init+0x2c>)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003862:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <ESP_Init+0x30>)
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003868:	f7ff ffde 	bl	8003828 <ESP_GetUID>
  beurs = checkEEprom();
 800386c:	f7ff ff28 	bl	80036c0 <checkEEprom>
 8003870:	0003      	movs	r3, r0
 8003872:	001a      	movs	r2, r3
 8003874:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <ESP_Init+0x34>)
 8003876:	701a      	strb	r2, [r3, #0]
}
 8003878:	46c0      	nop			@ (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200003e8 	.word	0x200003e8
 8003884:	20000021 	.word	0x20000021
 8003888:	200004f5 	.word	0x200004f5

0800388c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800388c:	b5b0      	push	{r4, r5, r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	000a      	movs	r2, r1
 8003896:	1cbb      	adds	r3, r7, #2
 8003898:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <ESP_Send+0x48>)
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	250f      	movs	r5, #15
 80038a0:	197c      	adds	r4, r7, r5
 80038a2:	1cbb      	adds	r3, r7, #2
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0019      	movs	r1, r3
 80038aa:	f00e f981 	bl	8011bb0 <HAL_UART_Transmit_DMA>
 80038ae:	0003      	movs	r3, r0
 80038b0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80038b2:	197b      	adds	r3, r7, r5
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80038ba:	4a07      	ldr	r2, [pc, #28]	@ (80038d8 <ESP_Send+0x4c>)
 80038bc:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <ESP_Send+0x50>)
 80038be:	0019      	movs	r1, r3
 80038c0:	2003      	movs	r0, #3
 80038c2:	f006 f9d5 	bl	8009c70 <CreateLine>
    return false;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <ESP_Send+0x40>
  }
  return true;
 80038ca:	2301      	movs	r3, #1
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bdb0      	pop	{r4, r5, r7, pc}
 80038d4:	200003e8 	.word	0x200003e8
 80038d8:	0801b400 	.word	0x0801b400
 80038dc:	0801b420 	.word	0x0801b420

080038e0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	000a      	movs	r2, r1
 80038ea:	1cfb      	adds	r3, r7, #3
 80038ec:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <ESP_Receive+0x58>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <ESP_Receive+0x5c>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	1cfb      	adds	r3, r7, #3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	250f      	movs	r5, #15
 8003900:	197c      	adds	r4, r7, r5
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0019      	movs	r1, r3
 8003906:	f00e f9e3 	bl	8011cd0 <HAL_UART_Receive_DMA>
 800390a:	0003      	movs	r3, r0
 800390c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800390e:	197b      	adds	r3, r7, r5
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003916:	4a0a      	ldr	r2, [pc, #40]	@ (8003940 <ESP_Receive+0x60>)
 8003918:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <ESP_Receive+0x64>)
 800391a:	0019      	movs	r1, r3
 800391c:	2003      	movs	r0, #3
 800391e:	f006 f9a7 	bl	8009c70 <CreateLine>
    RxComplete = true;
 8003922:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <ESP_Receive+0x58>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
    return false;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <ESP_Receive+0x4e>
  }
  return true;
 800392c:	2301      	movs	r3, #1
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bdb0      	pop	{r4, r5, r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	200003ec 	.word	0x200003ec
 800393c:	200003e8 	.word	0x200003e8
 8003940:	0801b424 	.word	0x0801b424
 8003944:	0801b420 	.word	0x0801b420

08003948 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003950:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <HAL_UART_RxCpltCallback+0x2c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d108      	bne.n	800396c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800395a:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <HAL_UART_RxCpltCallback+0x30>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003960:	4a06      	ldr	r2, [pc, #24]	@ (800397c <HAL_UART_RxCpltCallback+0x34>)
 8003962:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <HAL_UART_RxCpltCallback+0x38>)
 8003964:	0019      	movs	r1, r3
 8003966:	2003      	movs	r0, #3
 8003968:	f006 f982 	bl	8009c70 <CreateLine>
  }
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200003e8 	.word	0x200003e8
 8003978:	200003ec 	.word	0x200003ec
 800397c:	0801b444 	.word	0x0801b444
 8003980:	0801b420 	.word	0x0801b420

08003984 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800398c:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <HAL_UART_ErrorCallback+0x28>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d105      	bne.n	80039a2 <HAL_UART_ErrorCallback+0x1e>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("An error has ocurred");
 8003996:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <HAL_UART_ErrorCallback+0x2c>)
 8003998:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_UART_ErrorCallback+0x30>)
 800399a:	0019      	movs	r1, r3
 800399c:	2003      	movs	r0, #3
 800399e:	f006 f967 	bl	8009c70 <CreateLine>
  }
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	200003e8 	.word	0x200003e8
 80039b0:	0801b450 	.word	0x0801b450
 80039b4:	0801b420 	.word	0x0801b420

080039b8 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e010      	b.n	80039ea <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	001a      	movs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1898      	adds	r0, r3, r2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	18d3      	adds	r3, r2, r3
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	001a      	movs	r2, r3
 80039dc:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <uint8ArrayToString+0x44>)
 80039de:	0019      	movs	r1, r3
 80039e0:	f014 fd62 	bl	80184a8 <siprintf>
  for (int i = 0; i < 12; i++)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b0b      	cmp	r3, #11
 80039ee:	ddeb      	ble.n	80039c8 <uint8ArrayToString+0x10>
  }
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	0801b468 	.word	0x0801b468

08003a00 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af04      	add	r7, sp, #16
 8003a06:	0002      	movs	r2, r0
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	701a      	strb	r2, [r3, #0]
  uint16_t messageLength = 0;
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	801a      	strh	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003a14:	4bb4      	ldr	r3, [pc, #720]	@ (8003ce8 <CreateMessage+0x2e8>)
 8003a16:	48b5      	ldr	r0, [pc, #724]	@ (8003cec <CreateMessage+0x2ec>)
 8003a18:	220c      	movs	r2, #12
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	f7ff fdeb 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003a20:	4bb3      	ldr	r3, [pc, #716]	@ (8003cf0 <CreateMessage+0x2f0>)
 8003a22:	48b4      	ldr	r0, [pc, #720]	@ (8003cf4 <CreateMessage+0x2f4>)
 8003a24:	220c      	movs	r2, #12
 8003a26:	0019      	movs	r1, r3
 8003a28:	f7ff fde5 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003a2c:	4bb2      	ldr	r3, [pc, #712]	@ (8003cf8 <CreateMessage+0x2f8>)
 8003a2e:	48b3      	ldr	r0, [pc, #716]	@ (8003cfc <CreateMessage+0x2fc>)
 8003a30:	220c      	movs	r2, #12
 8003a32:	0019      	movs	r1, r3
 8003a34:	f7ff fddf 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003a38:	4bb1      	ldr	r3, [pc, #708]	@ (8003d00 <CreateMessage+0x300>)
 8003a3a:	48b2      	ldr	r0, [pc, #712]	@ (8003d04 <CreateMessage+0x304>)
 8003a3c:	220c      	movs	r2, #12
 8003a3e:	0019      	movs	r1, r3
 8003a40:	f7ff fdd9 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003a44:	4bb0      	ldr	r3, [pc, #704]	@ (8003d08 <CreateMessage+0x308>)
 8003a46:	48b1      	ldr	r0, [pc, #708]	@ (8003d0c <CreateMessage+0x30c>)
 8003a48:	220c      	movs	r2, #12
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	f7ff fdd3 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003a50:	4baf      	ldr	r3, [pc, #700]	@ (8003d10 <CreateMessage+0x310>)
 8003a52:	48b0      	ldr	r0, [pc, #704]	@ (8003d14 <CreateMessage+0x314>)
 8003a54:	220c      	movs	r2, #12
 8003a56:	0019      	movs	r1, r3
 8003a58:	f7ff fdcd 	bl	80035f6 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003a5c:	f7ff fe66 	bl	800372c <checkName>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d006      	beq.n	8003a72 <CreateMessage+0x72>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003a64:	4bac      	ldr	r3, [pc, #688]	@ (8003d18 <CreateMessage+0x318>)
 8003a66:	48ad      	ldr	r0, [pc, #692]	@ (8003d1c <CreateMessage+0x31c>)
 8003a68:	221e      	movs	r2, #30
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	f7ff fdc3 	bl	80035f6 <ReadUint8ArrayEEprom>
 8003a70:	e002      	b.n	8003a78 <CreateMessage+0x78>
  }
  else{
    strncpy(nameConfig, user, 4);
 8003a72:	4ba9      	ldr	r3, [pc, #676]	@ (8003d18 <CreateMessage+0x318>)
 8003a74:	4aaa      	ldr	r2, [pc, #680]	@ (8003d20 <CreateMessage+0x320>)
 8003a76:	601a      	str	r2, [r3, #0]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003a78:	f7ff fe0e 	bl	8003698 <setCharges>

  memset(message, '\0', 1024);
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	00da      	lsls	r2, r3, #3
 8003a80:	4ba8      	ldr	r3, [pc, #672]	@ (8003d24 <CreateMessage+0x324>)
 8003a82:	2100      	movs	r1, #0
 8003a84:	0018      	movs	r0, r3
 8003a86:	f014 fdb3 	bl	80185f0 <memset>
  uint16_t index = 0;
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	2200      	movs	r2, #0
 8003a90:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003a92:	19bb      	adds	r3, r7, r6
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	4ba3      	ldr	r3, [pc, #652]	@ (8003d24 <CreateMessage+0x324>)
 8003a98:	18d3      	adds	r3, r2, r3
 8003a9a:	4aa3      	ldr	r2, [pc, #652]	@ (8003d28 <CreateMessage+0x328>)
 8003a9c:	0011      	movs	r1, r2
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f014 fd02 	bl	80184a8 <siprintf>
  index = strlen(message);
 8003aa4:	4b9f      	ldr	r3, [pc, #636]	@ (8003d24 <CreateMessage+0x324>)
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fc fb2e 	bl	8000108 <strlen>
 8003aac:	0002      	movs	r2, r0
 8003aae:	19bb      	adds	r3, r7, r6
 8003ab0:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003ab2:	4a8d      	ldr	r2, [pc, #564]	@ (8003ce8 <CreateMessage+0x2e8>)
 8003ab4:	4b9d      	ldr	r3, [pc, #628]	@ (8003d2c <CreateMessage+0x32c>)
 8003ab6:	0011      	movs	r1, r2
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7ff ff7d 	bl	80039b8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003abe:	19bb      	adds	r3, r7, r6
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	4b98      	ldr	r3, [pc, #608]	@ (8003d24 <CreateMessage+0x324>)
 8003ac4:	18d4      	adds	r4, r2, r3
 8003ac6:	4b9a      	ldr	r3, [pc, #616]	@ (8003d30 <CreateMessage+0x330>)
 8003ac8:	689d      	ldr	r5, [r3, #8]
 8003aca:	4b9a      	ldr	r3, [pc, #616]	@ (8003d34 <CreateMessage+0x334>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1c18      	adds	r0, r3, #0
 8003ad0:	f7ff fc46 	bl	8003360 <__aeabi_f2d>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	000b      	movs	r3, r1
 8003ad8:	488f      	ldr	r0, [pc, #572]	@ (8003d18 <CreateMessage+0x318>)
 8003ada:	4997      	ldr	r1, [pc, #604]	@ (8003d38 <CreateMessage+0x338>)
 8003adc:	9202      	str	r2, [sp, #8]
 8003ade:	9303      	str	r3, [sp, #12]
 8003ae0:	4b92      	ldr	r3, [pc, #584]	@ (8003d2c <CreateMessage+0x32c>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	002a      	movs	r2, r5
 8003ae8:	0020      	movs	r0, r4
 8003aea:	f014 fcdd 	bl	80184a8 <siprintf>
  index = strlen(message);
 8003aee:	4b8d      	ldr	r3, [pc, #564]	@ (8003d24 <CreateMessage+0x324>)
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7fc fb09 	bl	8000108 <strlen>
 8003af6:	0002      	movs	r2, r0
 8003af8:	19bb      	adds	r3, r7, r6
 8003afa:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003afc:	4a7c      	ldr	r2, [pc, #496]	@ (8003cf0 <CreateMessage+0x2f0>)
 8003afe:	4b8b      	ldr	r3, [pc, #556]	@ (8003d2c <CreateMessage+0x32c>)
 8003b00:	0011      	movs	r1, r2
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7ff ff58 	bl	80039b8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003b08:	19bb      	adds	r3, r7, r6
 8003b0a:	881a      	ldrh	r2, [r3, #0]
 8003b0c:	4b85      	ldr	r3, [pc, #532]	@ (8003d24 <CreateMessage+0x324>)
 8003b0e:	18d4      	adds	r4, r2, r3
 8003b10:	4b87      	ldr	r3, [pc, #540]	@ (8003d30 <CreateMessage+0x330>)
 8003b12:	689d      	ldr	r5, [r3, #8]
 8003b14:	4b89      	ldr	r3, [pc, #548]	@ (8003d3c <CreateMessage+0x33c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1c18      	adds	r0, r3, #0
 8003b1a:	f7ff fc21 	bl	8003360 <__aeabi_f2d>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	000b      	movs	r3, r1
 8003b22:	487d      	ldr	r0, [pc, #500]	@ (8003d18 <CreateMessage+0x318>)
 8003b24:	4986      	ldr	r1, [pc, #536]	@ (8003d40 <CreateMessage+0x340>)
 8003b26:	9202      	str	r2, [sp, #8]
 8003b28:	9303      	str	r3, [sp, #12]
 8003b2a:	4b80      	ldr	r3, [pc, #512]	@ (8003d2c <CreateMessage+0x32c>)
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	0003      	movs	r3, r0
 8003b30:	002a      	movs	r2, r5
 8003b32:	0020      	movs	r0, r4
 8003b34:	f014 fcb8 	bl	80184a8 <siprintf>
  index = strlen(message);
 8003b38:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <CreateMessage+0x324>)
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fc fae4 	bl	8000108 <strlen>
 8003b40:	0002      	movs	r2, r0
 8003b42:	19bb      	adds	r3, r7, r6
 8003b44:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003b46:	4a6c      	ldr	r2, [pc, #432]	@ (8003cf8 <CreateMessage+0x2f8>)
 8003b48:	4b78      	ldr	r3, [pc, #480]	@ (8003d2c <CreateMessage+0x32c>)
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff ff33 	bl	80039b8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003b52:	19bb      	adds	r3, r7, r6
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	4b73      	ldr	r3, [pc, #460]	@ (8003d24 <CreateMessage+0x324>)
 8003b58:	18d4      	adds	r4, r2, r3
 8003b5a:	4b75      	ldr	r3, [pc, #468]	@ (8003d30 <CreateMessage+0x330>)
 8003b5c:	689d      	ldr	r5, [r3, #8]
 8003b5e:	4b79      	ldr	r3, [pc, #484]	@ (8003d44 <CreateMessage+0x344>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	1c18      	adds	r0, r3, #0
 8003b64:	f7ff fbfc 	bl	8003360 <__aeabi_f2d>
 8003b68:	0002      	movs	r2, r0
 8003b6a:	000b      	movs	r3, r1
 8003b6c:	486a      	ldr	r0, [pc, #424]	@ (8003d18 <CreateMessage+0x318>)
 8003b6e:	4976      	ldr	r1, [pc, #472]	@ (8003d48 <CreateMessage+0x348>)
 8003b70:	9202      	str	r2, [sp, #8]
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	4b6d      	ldr	r3, [pc, #436]	@ (8003d2c <CreateMessage+0x32c>)
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	0003      	movs	r3, r0
 8003b7a:	002a      	movs	r2, r5
 8003b7c:	0020      	movs	r0, r4
 8003b7e:	f014 fc93 	bl	80184a8 <siprintf>
  index = strlen(message);
 8003b82:	4b68      	ldr	r3, [pc, #416]	@ (8003d24 <CreateMessage+0x324>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7fc fabf 	bl	8000108 <strlen>
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	19bb      	adds	r3, r7, r6
 8003b8e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003b90:	4a5b      	ldr	r2, [pc, #364]	@ (8003d00 <CreateMessage+0x300>)
 8003b92:	4b66      	ldr	r3, [pc, #408]	@ (8003d2c <CreateMessage+0x32c>)
 8003b94:	0011      	movs	r1, r2
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7ff ff0e 	bl	80039b8 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003b9c:	19bb      	adds	r3, r7, r6
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	4b60      	ldr	r3, [pc, #384]	@ (8003d24 <CreateMessage+0x324>)
 8003ba2:	18d0      	adds	r0, r2, r3
 8003ba4:	4b62      	ldr	r3, [pc, #392]	@ (8003d30 <CreateMessage+0x330>)
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	4b68      	ldr	r3, [pc, #416]	@ (8003d4c <CreateMessage+0x34c>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	4c5a      	ldr	r4, [pc, #360]	@ (8003d18 <CreateMessage+0x318>)
 8003bae:	4968      	ldr	r1, [pc, #416]	@ (8003d50 <CreateMessage+0x350>)
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <CreateMessage+0x32c>)
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	0023      	movs	r3, r4
 8003bb8:	f014 fc76 	bl	80184a8 <siprintf>
  index = strlen(message);
 8003bbc:	4b59      	ldr	r3, [pc, #356]	@ (8003d24 <CreateMessage+0x324>)
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7fc faa2 	bl	8000108 <strlen>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	19bb      	adds	r3, r7, r6
 8003bc8:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003bca:	1dfb      	adds	r3, r7, #7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4053      	eors	r3, r2
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d04a      	beq.n	8003c6e <CreateMessage+0x26e>
    uint8ArrayToString(Buffer, batteryConfig);
 8003bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003d08 <CreateMessage+0x308>)
 8003bda:	4b54      	ldr	r3, [pc, #336]	@ (8003d2c <CreateMessage+0x32c>)
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7ff feea 	bl	80039b8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003be4:	19bb      	adds	r3, r7, r6
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	4b4e      	ldr	r3, [pc, #312]	@ (8003d24 <CreateMessage+0x324>)
 8003bea:	18d4      	adds	r4, r2, r3
 8003bec:	4b50      	ldr	r3, [pc, #320]	@ (8003d30 <CreateMessage+0x330>)
 8003bee:	689d      	ldr	r5, [r3, #8]
 8003bf0:	4b58      	ldr	r3, [pc, #352]	@ (8003d54 <CreateMessage+0x354>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1c18      	adds	r0, r3, #0
 8003bf6:	f7ff fbb3 	bl	8003360 <__aeabi_f2d>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	000b      	movs	r3, r1
 8003bfe:	4846      	ldr	r0, [pc, #280]	@ (8003d18 <CreateMessage+0x318>)
 8003c00:	4955      	ldr	r1, [pc, #340]	@ (8003d58 <CreateMessage+0x358>)
 8003c02:	9202      	str	r2, [sp, #8]
 8003c04:	9303      	str	r3, [sp, #12]
 8003c06:	4b49      	ldr	r3, [pc, #292]	@ (8003d2c <CreateMessage+0x32c>)
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	002a      	movs	r2, r5
 8003c0e:	0020      	movs	r0, r4
 8003c10:	f014 fc4a 	bl	80184a8 <siprintf>
    index = strlen(message);
 8003c14:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <CreateMessage+0x324>)
 8003c16:	0018      	movs	r0, r3
 8003c18:	f7fc fa76 	bl	8000108 <strlen>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	19bb      	adds	r3, r7, r6
 8003c20:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003c22:	4a3b      	ldr	r2, [pc, #236]	@ (8003d10 <CreateMessage+0x310>)
 8003c24:	4b41      	ldr	r3, [pc, #260]	@ (8003d2c <CreateMessage+0x32c>)
 8003c26:	0011      	movs	r1, r2
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff fec5 	bl	80039b8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003c2e:	19bb      	adds	r3, r7, r6
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <CreateMessage+0x324>)
 8003c34:	18d4      	adds	r4, r2, r3
 8003c36:	4b3e      	ldr	r3, [pc, #248]	@ (8003d30 <CreateMessage+0x330>)
 8003c38:	689d      	ldr	r5, [r3, #8]
 8003c3a:	4b48      	ldr	r3, [pc, #288]	@ (8003d5c <CreateMessage+0x35c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1c18      	adds	r0, r3, #0
 8003c40:	f7ff fb8e 	bl	8003360 <__aeabi_f2d>
 8003c44:	0002      	movs	r2, r0
 8003c46:	000b      	movs	r3, r1
 8003c48:	4833      	ldr	r0, [pc, #204]	@ (8003d18 <CreateMessage+0x318>)
 8003c4a:	4945      	ldr	r1, [pc, #276]	@ (8003d60 <CreateMessage+0x360>)
 8003c4c:	9202      	str	r2, [sp, #8]
 8003c4e:	9303      	str	r3, [sp, #12]
 8003c50:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <CreateMessage+0x32c>)
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	0003      	movs	r3, r0
 8003c56:	002a      	movs	r2, r5
 8003c58:	0020      	movs	r0, r4
 8003c5a:	f014 fc25 	bl	80184a8 <siprintf>
    index = strlen(message);
 8003c5e:	4b31      	ldr	r3, [pc, #196]	@ (8003d24 <CreateMessage+0x324>)
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7fc fa51 	bl	8000108 <strlen>
 8003c66:	0002      	movs	r2, r0
 8003c68:	19bb      	adds	r3, r7, r6
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	e025      	b.n	8003cba <CreateMessage+0x2ba>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003c6e:	4a26      	ldr	r2, [pc, #152]	@ (8003d08 <CreateMessage+0x308>)
 8003c70:	4b2e      	ldr	r3, [pc, #184]	@ (8003d2c <CreateMessage+0x32c>)
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff fe9f 	bl	80039b8 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003c7a:	260e      	movs	r6, #14
 8003c7c:	19bb      	adds	r3, r7, r6
 8003c7e:	881a      	ldrh	r2, [r3, #0]
 8003c80:	4b28      	ldr	r3, [pc, #160]	@ (8003d24 <CreateMessage+0x324>)
 8003c82:	18d4      	adds	r4, r2, r3
 8003c84:	4b2a      	ldr	r3, [pc, #168]	@ (8003d30 <CreateMessage+0x330>)
 8003c86:	689d      	ldr	r5, [r3, #8]
 8003c88:	4b32      	ldr	r3, [pc, #200]	@ (8003d54 <CreateMessage+0x354>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	1c18      	adds	r0, r3, #0
 8003c8e:	f7ff fb67 	bl	8003360 <__aeabi_f2d>
 8003c92:	0002      	movs	r2, r0
 8003c94:	000b      	movs	r3, r1
 8003c96:	4820      	ldr	r0, [pc, #128]	@ (8003d18 <CreateMessage+0x318>)
 8003c98:	4932      	ldr	r1, [pc, #200]	@ (8003d64 <CreateMessage+0x364>)
 8003c9a:	9202      	str	r2, [sp, #8]
 8003c9c:	9303      	str	r3, [sp, #12]
 8003c9e:	4b23      	ldr	r3, [pc, #140]	@ (8003d2c <CreateMessage+0x32c>)
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	002a      	movs	r2, r5
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f014 fbfe 	bl	80184a8 <siprintf>
    index = strlen(message);
 8003cac:	4b1d      	ldr	r3, [pc, #116]	@ (8003d24 <CreateMessage+0x324>)
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7fc fa2a 	bl	8000108 <strlen>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	19bb      	adds	r3, r7, r6
 8003cb8:	801a      	strh	r2, [r3, #0]
  }

  index = sprintf(&message[index], "]");
 8003cba:	240e      	movs	r4, #14
 8003cbc:	193b      	adds	r3, r7, r4
 8003cbe:	881a      	ldrh	r2, [r3, #0]
 8003cc0:	4b18      	ldr	r3, [pc, #96]	@ (8003d24 <CreateMessage+0x324>)
 8003cc2:	18d3      	adds	r3, r2, r3
 8003cc4:	4a28      	ldr	r2, [pc, #160]	@ (8003d68 <CreateMessage+0x368>)
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f014 fbed 	bl	80184a8 <siprintf>
 8003cce:	0002      	movs	r2, r0
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003cd4:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <CreateMessage+0x324>)
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fc fa16 	bl	8000108 <strlen>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	b29b      	uxth	r3, r3
}
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b005      	add	sp, #20
 8003ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce8:	20000978 	.word	0x20000978
 8003cec:	0808000c 	.word	0x0808000c
 8003cf0:	20000984 	.word	0x20000984
 8003cf4:	08080018 	.word	0x08080018
 8003cf8:	20000990 	.word	0x20000990
 8003cfc:	08080048 	.word	0x08080048
 8003d00:	2000099c 	.word	0x2000099c
 8003d04:	08080030 	.word	0x08080030
 8003d08:	200009a8 	.word	0x200009a8
 8003d0c:	0808006c 	.word	0x0808006c
 8003d10:	200009b4 	.word	0x200009b4
 8003d14:	08080078 	.word	0x08080078
 8003d18:	200009c0 	.word	0x200009c0
 8003d1c:	08080090 	.word	0x08080090
 8003d20:	74736554 	.word	0x74736554
 8003d24:	20000524 	.word	0x20000524
 8003d28:	0801b470 	.word	0x0801b470
 8003d2c:	200009e0 	.word	0x200009e0
 8003d30:	200004f8 	.word	0x200004f8
 8003d34:	2000050c 	.word	0x2000050c
 8003d38:	0801b474 	.word	0x0801b474
 8003d3c:	20000510 	.word	0x20000510
 8003d40:	0801b4c8 	.word	0x0801b4c8
 8003d44:	20000520 	.word	0x20000520
 8003d48:	0801b520 	.word	0x0801b520
 8003d4c:	2000051c 	.word	0x2000051c
 8003d50:	0801b578 	.word	0x0801b578
 8003d54:	20000514 	.word	0x20000514
 8003d58:	0801b5cc 	.word	0x0801b5cc
 8003d5c:	20000518 	.word	0x20000518
 8003d60:	0801b62c 	.word	0x0801b62c
 8003d64:	0801b688 	.word	0x0801b688
 8003d68:	0801b6e0 	.word	0x0801b6e0

08003d6c <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003d70:	2064      	movs	r0, #100	@ 0x64
 8003d72:	f006 fb0d 	bl	800a390 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003d76:	4b15      	ldr	r3, [pc, #84]	@ (8003dcc <StartProg+0x60>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f007 fe9c 	bl	800baba <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003d82:	2064      	movs	r0, #100	@ 0x64
 8003d84:	f006 fb04 	bl	800a390 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003d88:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <StartProg+0x60>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f007 fe93 	bl	800baba <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003d94:	23fa      	movs	r3, #250	@ 0xfa
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f006 faf9 	bl	800a390 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <StartProg+0x60>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	2101      	movs	r1, #1
 8003da4:	0018      	movs	r0, r3
 8003da6:	f007 fe88 	bl	800baba <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003daa:	23fa      	movs	r3, #250	@ 0xfa
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	0018      	movs	r0, r3
 8003db0:	f006 faee 	bl	800a390 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <StartProg+0x60>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	2102      	movs	r1, #2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f007 fe7d 	bl	800baba <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003dc0:	2028      	movs	r0, #40	@ 0x28
 8003dc2:	f006 fae5 	bl	800a390 <HAL_Delay>
}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	50001c00 	.word	0x50001c00

08003dd0 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003dd0:	b5b0      	push	{r4, r5, r7, lr}
 8003dd2:	b0d2      	sub	sp, #328	@ 0x148
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	0008      	movs	r0, r1
 8003dda:	0011      	movs	r1, r2
 8003ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800405c <ParseBuffer+0x28c>)
 8003dde:	24a4      	movs	r4, #164	@ 0xa4
 8003de0:	0064      	lsls	r4, r4, #1
 8003de2:	191b      	adds	r3, r3, r4
 8003de4:	19db      	adds	r3, r3, r7
 8003de6:	1c02      	adds	r2, r0, #0
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	4b9d      	ldr	r3, [pc, #628]	@ (8004060 <ParseBuffer+0x290>)
 8003dec:	191b      	adds	r3, r3, r4
 8003dee:	19db      	adds	r3, r3, r7
 8003df0:	1c0a      	adds	r2, r1, #0
 8003df2:	701a      	strb	r2, [r3, #0]
  char tempBuf[250];
  memset(tempBuf, '\0', 250);
 8003df4:	2334      	movs	r3, #52	@ 0x34
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	22fa      	movs	r2, #250	@ 0xfa
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f014 fbf7 	bl	80185f0 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003e02:	2348      	movs	r3, #72	@ 0x48
 8003e04:	33ff      	adds	r3, #255	@ 0xff
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2203      	movs	r2, #3
 8003e0a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003e0c:	23a2      	movs	r3, #162	@ 0xa2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2200      	movs	r2, #0
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	e013      	b.n	8003e40 <ParseBuffer+0x70>
    tempBuf[i] = (char)buffer[i];
 8003e18:	20a2      	movs	r0, #162	@ 0xa2
 8003e1a:	0040      	lsls	r0, r0, #1
 8003e1c:	183b      	adds	r3, r7, r0
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	18d2      	adds	r2, r2, r3
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	7811      	ldrb	r1, [r2, #0]
 8003e2a:	4a8e      	ldr	r2, [pc, #568]	@ (8004064 <ParseBuffer+0x294>)
 8003e2c:	24a4      	movs	r4, #164	@ 0xa4
 8003e2e:	0064      	lsls	r4, r4, #1
 8003e30:	1912      	adds	r2, r2, r4
 8003e32:	19d2      	adds	r2, r2, r7
 8003e34:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003e36:	183b      	adds	r3, r7, r0
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	3201      	adds	r2, #1
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	23a2      	movs	r3, #162	@ 0xa2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	18fa      	adds	r2, r7, r3
 8003e46:	4b85      	ldr	r3, [pc, #532]	@ (800405c <ParseBuffer+0x28c>)
 8003e48:	20a4      	movs	r0, #164	@ 0xa4
 8003e4a:	0040      	lsls	r0, r0, #1
 8003e4c:	181b      	adds	r3, r3, r0
 8003e4e:	19db      	adds	r3, r3, r7
 8003e50:	8812      	ldrh	r2, [r2, #0]
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3df      	bcc.n	8003e18 <ParseBuffer+0x48>
  }
  tempBuf[len] = '\0';
 8003e58:	4b80      	ldr	r3, [pc, #512]	@ (800405c <ParseBuffer+0x28c>)
 8003e5a:	181b      	adds	r3, r3, r0
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	4a80      	ldr	r2, [pc, #512]	@ (8004064 <ParseBuffer+0x294>)
 8003e62:	1812      	adds	r2, r2, r0
 8003e64:	19d2      	adds	r2, r2, r7
 8003e66:	2100      	movs	r1, #0
 8003e68:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003e6a:	2340      	movs	r3, #64	@ 0x40
 8003e6c:	33ff      	adds	r3, #255	@ 0xff
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	224e      	movs	r2, #78	@ 0x4e
 8003e72:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  char * ParsePoint4;
  const char OK[] = AT_RESPONSE_OK;
 8003e74:	4b7c      	ldr	r3, [pc, #496]	@ (8004068 <ParseBuffer+0x298>)
 8003e76:	0005      	movs	r5, r0
 8003e78:	195b      	adds	r3, r3, r5
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	4a7b      	ldr	r2, [pc, #492]	@ (800406c <ParseBuffer+0x29c>)
 8003e7e:	8811      	ldrh	r1, [r2, #0]
 8003e80:	8019      	strh	r1, [r3, #0]
 8003e82:	7892      	ldrb	r2, [r2, #2]
 8003e84:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003e86:	4b7a      	ldr	r3, [pc, #488]	@ (8004070 <ParseBuffer+0x2a0>)
 8003e88:	195b      	adds	r3, r3, r5
 8003e8a:	19db      	adds	r3, r3, r7
 8003e8c:	4a79      	ldr	r2, [pc, #484]	@ (8004074 <ParseBuffer+0x2a4>)
 8003e8e:	6811      	ldr	r1, [r2, #0]
 8003e90:	6019      	str	r1, [r3, #0]
 8003e92:	8892      	ldrh	r2, [r2, #4]
 8003e94:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003e96:	4b78      	ldr	r3, [pc, #480]	@ (8004078 <ParseBuffer+0x2a8>)
 8003e98:	195b      	adds	r3, r3, r5
 8003e9a:	19db      	adds	r3, r3, r7
 8003e9c:	4a77      	ldr	r2, [pc, #476]	@ (800407c <ParseBuffer+0x2ac>)
 8003e9e:	6811      	ldr	r1, [r2, #0]
 8003ea0:	6019      	str	r1, [r3, #0]
 8003ea2:	8892      	ldrh	r2, [r2, #4]
 8003ea4:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003ea6:	4b76      	ldr	r3, [pc, #472]	@ (8004080 <ParseBuffer+0x2b0>)
 8003ea8:	195b      	adds	r3, r3, r5
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	223e      	movs	r2, #62	@ 0x3e
 8003eae:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003eb0:	4b74      	ldr	r3, [pc, #464]	@ (8004084 <ParseBuffer+0x2b4>)
 8003eb2:	195b      	adds	r3, r3, r5
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	4a74      	ldr	r2, [pc, #464]	@ (8004088 <ParseBuffer+0x2b8>)
 8003eb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003eba:	c313      	stmia	r3!, {r0, r1, r4}
 8003ebc:	8811      	ldrh	r1, [r2, #0]
 8003ebe:	8019      	strh	r1, [r3, #0]
 8003ec0:	7892      	ldrb	r2, [r2, #2]
 8003ec2:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003ec4:	4b66      	ldr	r3, [pc, #408]	@ (8004060 <ParseBuffer+0x290>)
 8003ec6:	195b      	adds	r3, r3, r5
 8003ec8:	19db      	adds	r3, r3, r7
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10c      	bne.n	8003eea <ParseBuffer+0x11a>
    ParsePoint = strstr(tempBuf, OK);
 8003ed0:	2330      	movs	r3, #48	@ 0x30
 8003ed2:	18fa      	adds	r2, r7, r3
 8003ed4:	2334      	movs	r3, #52	@ 0x34
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f014 fbb2 	bl	8018644 <strstr>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	22a0      	movs	r2, #160	@ 0xa0
 8003ee4:	0052      	lsls	r2, r2, #1
 8003ee6:	18ba      	adds	r2, r7, r2
 8003ee8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003eea:	4b5d      	ldr	r3, [pc, #372]	@ (8004060 <ParseBuffer+0x290>)
 8003eec:	22a4      	movs	r2, #164	@ 0xa4
 8003eee:	0052      	lsls	r2, r2, #1
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	19db      	adds	r3, r3, r7
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10c      	bne.n	8003f14 <ParseBuffer+0x144>
    ParsePoint = strstr(tempBuf, ready);
 8003efa:	2320      	movs	r3, #32
 8003efc:	18fa      	adds	r2, r7, r3
 8003efe:	2334      	movs	r3, #52	@ 0x34
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	0011      	movs	r1, r2
 8003f04:	0018      	movs	r0, r3
 8003f06:	f014 fb9d 	bl	8018644 <strstr>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	22a0      	movs	r2, #160	@ 0xa0
 8003f0e:	0052      	lsls	r2, r2, #1
 8003f10:	18ba      	adds	r2, r7, r2
 8003f12:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003f14:	4b52      	ldr	r3, [pc, #328]	@ (8004060 <ParseBuffer+0x290>)
 8003f16:	22a4      	movs	r2, #164	@ 0xa4
 8003f18:	0052      	lsls	r2, r2, #1
 8003f1a:	189b      	adds	r3, r3, r2
 8003f1c:	19db      	adds	r3, r3, r7
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d10c      	bne.n	8003f3e <ParseBuffer+0x16e>
    ParsePoint = strstr(tempBuf, start);
 8003f24:	231c      	movs	r3, #28
 8003f26:	18fa      	adds	r2, r7, r3
 8003f28:	2334      	movs	r3, #52	@ 0x34
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	0011      	movs	r1, r2
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f014 fb88 	bl	8018644 <strstr>
 8003f34:	0003      	movs	r3, r0
 8003f36:	22a0      	movs	r2, #160	@ 0xa0
 8003f38:	0052      	lsls	r2, r2, #1
 8003f3a:	18ba      	adds	r2, r7, r2
 8003f3c:	6013      	str	r3, [r2, #0]
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003f3e:	2328      	movs	r3, #40	@ 0x28
 8003f40:	18fa      	adds	r2, r7, r3
 8003f42:	2434      	movs	r4, #52	@ 0x34
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	0011      	movs	r1, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f014 fb7b 	bl	8018644 <strstr>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	229c      	movs	r2, #156	@ 0x9c
 8003f52:	0052      	lsls	r2, r2, #1
 8003f54:	18ba      	adds	r2, r7, r2
 8003f56:	6013      	str	r3, [r2, #0]
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003f58:	230c      	movs	r3, #12
 8003f5a:	18fa      	adds	r2, r7, r3
 8003f5c:	193b      	adds	r3, r7, r4
 8003f5e:	0011      	movs	r1, r2
 8003f60:	0018      	movs	r0, r3
 8003f62:	f014 fb6f 	bl	8018644 <strstr>
 8003f66:	0003      	movs	r3, r0
 8003f68:	229a      	movs	r2, #154	@ 0x9a
 8003f6a:	0052      	lsls	r2, r2, #1
 8003f6c:	18ba      	adds	r2, r7, r2
 8003f6e:	6013      	str	r3, [r2, #0]
  ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8003f70:	4a46      	ldr	r2, [pc, #280]	@ (800408c <ParseBuffer+0x2bc>)
 8003f72:	193b      	adds	r3, r7, r4
 8003f74:	0011      	movs	r1, r2
 8003f76:	0018      	movs	r0, r3
 8003f78:	f014 fb64 	bl	8018644 <strstr>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	2298      	movs	r2, #152	@ 0x98
 8003f80:	0052      	lsls	r2, r2, #1
 8003f82:	18ba      	adds	r2, r7, r2
 8003f84:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8003f86:	4b35      	ldr	r3, [pc, #212]	@ (800405c <ParseBuffer+0x28c>)
 8003f88:	22a4      	movs	r2, #164	@ 0xa4
 8003f8a:	0052      	lsls	r2, r2, #1
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d959      	bls.n	800404a <ParseBuffer+0x27a>
    TestChar = *ParsePoint;
 8003f96:	2140      	movs	r1, #64	@ 0x40
 8003f98:	31ff      	adds	r1, #255	@ 0xff
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	22a0      	movs	r2, #160	@ 0xa0
 8003f9e:	0052      	lsls	r2, r2, #1
 8003fa0:	18ba      	adds	r2, r7, r2
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b4f      	cmp	r3, #79	@ 0x4f
 8003fae:	d104      	bne.n	8003fba <ParseBuffer+0x1ea>
      status = RECEIVE_STATUS_OK;
 8003fb0:	2348      	movs	r3, #72	@ 0x48
 8003fb2:	33ff      	adds	r3, #255	@ 0xff
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003fba:	2340      	movs	r3, #64	@ 0x40
 8003fbc:	33ff      	adds	r3, #255	@ 0xff
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b72      	cmp	r3, #114	@ 0x72
 8003fc4:	d104      	bne.n	8003fd0 <ParseBuffer+0x200>
      status = RECEIVE_STATUS_READY;
 8003fc6:	2348      	movs	r3, #72	@ 0x48
 8003fc8:	33ff      	adds	r3, #255	@ 0xff
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2202      	movs	r2, #2
 8003fce:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003fd0:	2340      	movs	r3, #64	@ 0x40
 8003fd2:	33ff      	adds	r3, #255	@ 0xff
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fda:	d104      	bne.n	8003fe6 <ParseBuffer+0x216>
      status = RECEIVE_STATUS_START;
 8003fdc:	2348      	movs	r3, #72	@ 0x48
 8003fde:	33ff      	adds	r3, #255	@ 0xff
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003fe6:	2140      	movs	r1, #64	@ 0x40
 8003fe8:	31ff      	adds	r1, #255	@ 0xff
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	229c      	movs	r2, #156	@ 0x9c
 8003fee:	0052      	lsls	r2, r2, #1
 8003ff0:	18ba      	adds	r2, r7, r2
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b45      	cmp	r3, #69	@ 0x45
 8003ffe:	d104      	bne.n	800400a <ParseBuffer+0x23a>
      status = RECEIVE_STATUS_ERROR;
 8004000:	2348      	movs	r3, #72	@ 0x48
 8004002:	33ff      	adds	r3, #255	@ 0xff
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 800400a:	2140      	movs	r1, #64	@ 0x40
 800400c:	31ff      	adds	r1, #255	@ 0xff
 800400e:	187b      	adds	r3, r7, r1
 8004010:	229a      	movs	r2, #154	@ 0x9a
 8004012:	0052      	lsls	r2, r2, #1
 8004014:	18ba      	adds	r2, r7, r2
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b57      	cmp	r3, #87	@ 0x57
 8004022:	d102      	bne.n	800402a <ParseBuffer+0x25a>
      ConnectionMade = true;
 8004024:	4b1a      	ldr	r3, [pc, #104]	@ (8004090 <ParseBuffer+0x2c0>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint4;
 800402a:	2140      	movs	r1, #64	@ 0x40
 800402c:	31ff      	adds	r1, #255	@ 0xff
 800402e:	187b      	adds	r3, r7, r1
 8004030:	2298      	movs	r2, #152	@ 0x98
 8004032:	0052      	lsls	r2, r2, #1
 8004034:	18ba      	adds	r2, r7, r2
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	7812      	ldrb	r2, [r2, #0]
 800403a:	701a      	strb	r2, [r3, #0]
    if(TestChar == '2'){
 800403c:	187b      	adds	r3, r7, r1
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b32      	cmp	r3, #50	@ 0x32
 8004042:	d102      	bne.n	800404a <ParseBuffer+0x27a>
      beurs = true;
 8004044:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <ParseBuffer+0x2c4>)
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800404a:	2348      	movs	r3, #72	@ 0x48
 800404c:	33ff      	adds	r3, #255	@ 0xff
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	781b      	ldrb	r3, [r3, #0]

}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b052      	add	sp, #328	@ 0x148
 8004058:	bdb0      	pop	{r4, r5, r7, pc}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	fffffeba 	.word	0xfffffeba
 8004060:	fffffeb9 	.word	0xfffffeb9
 8004064:	fffffeec 	.word	0xfffffeec
 8004068:	fffffee8 	.word	0xfffffee8
 800406c:	0801b6e4 	.word	0x0801b6e4
 8004070:	fffffee0 	.word	0xfffffee0
 8004074:	0801b6e8 	.word	0x0801b6e8
 8004078:	fffffed8 	.word	0xfffffed8
 800407c:	0801b6f0 	.word	0x0801b6f0
 8004080:	fffffed4 	.word	0xfffffed4
 8004084:	fffffec4 	.word	0xfffffec4
 8004088:	0801b6f8 	.word	0x0801b6f8
 800408c:	0801c0a8 	.word	0x0801c0a8
 8004090:	200004f3 	.word	0x200004f3
 8004094:	200004f5 	.word	0x200004f5

08004098 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800409e:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <PollAwake+0x34>)
 80040a0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fc f82f 	bl	8000108 <strlen>
 80040aa:	0003      	movs	r3, r0
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f7ff fbea 	bl	800388c <ESP_Send>
 80040b8:	1e03      	subs	r3, r0, #0
 80040ba:	d001      	beq.n	80040c0 <PollAwake+0x28>
    return true;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <PollAwake+0x2a>
  }
  else{
    return false;
 80040c0:	2300      	movs	r3, #0
  }
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	0801b708 	.word	0x0801b708

080040d0 <RFPower>:
bool RFPower(){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80040d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <RFPower+0x34>)
 80040d8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fc f813 	bl	8000108 <strlen>
 80040e2:	0003      	movs	r3, r0
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0011      	movs	r1, r2
 80040ea:	0018      	movs	r0, r3
 80040ec:	f7ff fbce 	bl	800388c <ESP_Send>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d001      	beq.n	80040f8 <RFPower+0x28>
    return true;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <RFPower+0x2a>
  }
  else{
    return false;
 80040f8:	2300      	movs	r3, #0
  }
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	0801b710 	.word	0x0801b710

08004108 <CheckRFPower>:
bool CheckRFPower(){
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <CheckRFPower+0x34>)
 8004110:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f7fb fff7 	bl	8000108 <strlen>
 800411a:	0003      	movs	r3, r0
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0011      	movs	r1, r2
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff fbb2 	bl	800388c <ESP_Send>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d001      	beq.n	8004130 <CheckRFPower+0x28>
    return true;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004130:	2300      	movs	r3, #0
  }
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b002      	add	sp, #8
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	0801b720 	.word	0x0801b720

08004140 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004146:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <ATRestore+0x34>)
 8004148:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f7fb ffdb 	bl	8000108 <strlen>
 8004152:	0003      	movs	r3, r0
 8004154:	b29a      	uxth	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0011      	movs	r1, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fb96 	bl	800388c <ESP_Send>
 8004160:	1e03      	subs	r3, r0, #0
 8004162:	d001      	beq.n	8004168 <ATRestore+0x28>
    return true;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <ATRestore+0x2a>
  }
  else{
    return false;
 8004168:	2300      	movs	r3, #0
  }
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	0801b730 	.word	0x0801b730

08004178 <CWINIT>:
bool CWINIT(){
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <CWINIT+0x34>)
 8004180:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f7fb ffbf 	bl	8000108 <strlen>
 800418a:	0003      	movs	r3, r0
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	0011      	movs	r1, r2
 8004192:	0018      	movs	r0, r3
 8004194:	f7ff fb7a 	bl	800388c <ESP_Send>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <CWINIT+0x28>
    return true;
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <CWINIT+0x2a>
  }
  else{
    return false;
 80041a0:	2300      	movs	r3, #0
  }
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b002      	add	sp, #8
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	0801b740 	.word	0x0801b740

080041b0 <CWMODE1>:
bool CWMODE1(){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80041b6:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <CWMODE1+0x34>)
 80041b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	0018      	movs	r0, r3
 80041be:	f7fb ffa3 	bl	8000108 <strlen>
 80041c2:	0003      	movs	r3, r0
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7ff fb5e 	bl	800388c <ESP_Send>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d001      	beq.n	80041d8 <CWMODE1+0x28>
    return true;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <CWMODE1+0x2a>
  }
  else{
    return false;
 80041d8:	2300      	movs	r3, #0
  }
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	0801b750 	.word	0x0801b750

080041e8 <CWMODE2>:
bool CWMODE2(){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80041ee:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <CWMODE2+0x34>)
 80041f0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7fb ff87 	bl	8000108 <strlen>
 80041fa:	0003      	movs	r3, r0
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff fb42 	bl	800388c <ESP_Send>
 8004208:	1e03      	subs	r3, r0, #0
 800420a:	d001      	beq.n	8004210 <CWMODE2+0x28>
    return true;
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004210:	2300      	movs	r3, #0
  }
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b002      	add	sp, #8
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	0801b760 	.word	0x0801b760

08004220 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <CWAUTOCONN+0x34>)
 8004228:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fb ff6b 	bl	8000108 <strlen>
 8004232:	0003      	movs	r3, r0
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0011      	movs	r1, r2
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff fb26 	bl	800388c <ESP_Send>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d001      	beq.n	8004248 <CWAUTOCONN+0x28>
    return true;
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004248:	2300      	movs	r3, #0
  }
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b002      	add	sp, #8
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	0801b770 	.word	0x0801b770

08004258 <CWJAP>:
bool CWJAP(){
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	46c6      	mov	lr, r8
 800425c:	b500      	push	{lr}
 800425e:	b0a2      	sub	sp, #136	@ 0x88
 8004260:	af00      	add	r7, sp, #0
 8004262:	466b      	mov	r3, sp
 8004264:	4698      	mov	r8, r3
  beursTest = true;
 8004266:	4b39      	ldr	r3, [pc, #228]	@ (800434c <CWJAP+0xf4>)
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 800426c:	2618      	movs	r6, #24
 800426e:	19bb      	adds	r3, r7, r6
 8004270:	2264      	movs	r2, #100	@ 0x64
 8004272:	2100      	movs	r1, #0
 8004274:	0018      	movs	r0, r3
 8004276:	f014 f9bb 	bl	80185f0 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800427a:	4b35      	ldr	r3, [pc, #212]	@ (8004350 <CWJAP+0xf8>)
 800427c:	4a35      	ldr	r2, [pc, #212]	@ (8004354 <CWJAP+0xfc>)
 800427e:	4936      	ldr	r1, [pc, #216]	@ (8004358 <CWJAP+0x100>)
 8004280:	19b8      	adds	r0, r7, r6
 8004282:	f014 f911 	bl	80184a8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004286:	19bb      	adds	r3, r7, r6
 8004288:	0018      	movs	r0, r3
 800428a:	f7fb ff3d 	bl	8000108 <strlen>
 800428e:	0002      	movs	r2, r0
 8004290:	216f      	movs	r1, #111	@ 0x6f
 8004292:	0030      	movs	r0, r6
 8004294:	180b      	adds	r3, r1, r0
 8004296:	19db      	adds	r3, r3, r7
 8004298:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800429a:	180b      	adds	r3, r1, r0
 800429c:	19db      	adds	r3, r3, r7
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	1e5a      	subs	r2, r3, #1
 80042a4:	2180      	movs	r1, #128	@ 0x80
 80042a6:	1879      	adds	r1, r7, r1
 80042a8:	600a      	str	r2, [r1, #0]
 80042aa:	001a      	movs	r2, r3
 80042ac:	60ba      	str	r2, [r7, #8]
 80042ae:	2200      	movs	r2, #0
 80042b0:	60fa      	str	r2, [r7, #12]
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	68f9      	ldr	r1, [r7, #12]
 80042b6:	0002      	movs	r2, r0
 80042b8:	0f52      	lsrs	r2, r2, #29
 80042ba:	000e      	movs	r6, r1
 80042bc:	00f6      	lsls	r6, r6, #3
 80042be:	617e      	str	r6, [r7, #20]
 80042c0:	697e      	ldr	r6, [r7, #20]
 80042c2:	4316      	orrs	r6, r2
 80042c4:	617e      	str	r6, [r7, #20]
 80042c6:	0002      	movs	r2, r0
 80042c8:	00d2      	lsls	r2, r2, #3
 80042ca:	613a      	str	r2, [r7, #16]
 80042cc:	001a      	movs	r2, r3
 80042ce:	603a      	str	r2, [r7, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	6838      	ldr	r0, [r7, #0]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	0002      	movs	r2, r0
 80042da:	0f52      	lsrs	r2, r2, #29
 80042dc:	000e      	movs	r6, r1
 80042de:	00f5      	lsls	r5, r6, #3
 80042e0:	4315      	orrs	r5, r2
 80042e2:	0002      	movs	r2, r0
 80042e4:	00d4      	lsls	r4, r2, #3
 80042e6:	3307      	adds	r3, #7
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	466a      	mov	r2, sp
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	469d      	mov	sp, r3
 80042f2:	466b      	mov	r3, sp
 80042f4:	3300      	adds	r3, #0
 80042f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80042f8:	246f      	movs	r4, #111	@ 0x6f
 80042fa:	2518      	movs	r5, #24
 80042fc:	1963      	adds	r3, r4, r5
 80042fe:	19db      	adds	r3, r3, r7
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	3301      	adds	r3, #1
 8004304:	001a      	movs	r2, r3
 8004306:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004308:	2100      	movs	r1, #0
 800430a:	0018      	movs	r0, r3
 800430c:	f014 f970 	bl	80185f0 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004310:	1963      	adds	r3, r4, r5
 8004312:	19db      	adds	r3, r3, r7
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	1979      	adds	r1, r7, r5
 8004318:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800431a:	0018      	movs	r0, r3
 800431c:	f014 f97e 	bl	801861c <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004320:	1963      	adds	r3, r4, r5
 8004322:	19db      	adds	r3, r3, r7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b29a      	uxth	r2, r3
 8004328:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800432a:	0011      	movs	r1, r2
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff faad 	bl	800388c <ESP_Send>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d001      	beq.n	800433a <CWJAP+0xe2>
    return true;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <CWJAP+0xe4>
  }
  else{
    return false;
 800433a:	2300      	movs	r3, #0
 800433c:	46c5      	mov	sp, r8
  }
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b022      	add	sp, #136	@ 0x88
 8004344:	bc80      	pop	{r7}
 8004346:	46b8      	mov	r8, r7
 8004348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	200004f4 	.word	0x200004f4
 8004350:	0801c0b4 	.word	0x0801c0b4
 8004354:	0801c0a8 	.word	0x0801c0a8
 8004358:	0801b784 	.word	0x0801b784

0800435c <CWMODE3>:
bool CWMODE3(){
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004362:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <CWMODE3+0x34>)
 8004364:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f7fb fecd 	bl	8000108 <strlen>
 800436e:	0003      	movs	r3, r0
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0011      	movs	r1, r2
 8004376:	0018      	movs	r0, r3
 8004378:	f7ff fa88 	bl	800388c <ESP_Send>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <CWMODE3+0x28>
    return true;
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004384:	2300      	movs	r3, #0
  }
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	0801b79c 	.word	0x0801b79c

08004394 <CWSTATE>:
bool CWSTATE(){
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800439a:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <CWSTATE+0x34>)
 800439c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7fb feb1 	bl	8000108 <strlen>
 80043a6:	0003      	movs	r3, r0
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	0011      	movs	r1, r2
 80043ae:	0018      	movs	r0, r3
 80043b0:	f7ff fa6c 	bl	800388c <ESP_Send>
 80043b4:	1e03      	subs	r3, r0, #0
 80043b6:	d001      	beq.n	80043bc <CWSTATE+0x28>
    return true;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <CWSTATE+0x2a>
  }
  else{
    return false;
 80043bc:	2300      	movs	r3, #0
  }
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b002      	add	sp, #8
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	0801b7ac 	.word	0x0801b7ac

080043cc <CWSAP>:
bool CWSAP(){
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <CWSAP+0x34>)
 80043d4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7fb fe95 	bl	8000108 <strlen>
 80043de:	0003      	movs	r3, r0
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0011      	movs	r1, r2
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7ff fa50 	bl	800388c <ESP_Send>
 80043ec:	1e03      	subs	r3, r0, #0
 80043ee:	d001      	beq.n	80043f4 <CWSAP+0x28>
    return true;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <CWSAP+0x2a>
  }
  else{
    return false;
 80043f4:	2300      	movs	r3, #0
  }
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b002      	add	sp, #8
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	0801b7bc 	.word	0x0801b7bc

08004404 <CIPMUX>:
bool CIPMUX(){
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <CIPMUX+0x34>)
 800440c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f7fb fe79 	bl	8000108 <strlen>
 8004416:	0003      	movs	r3, r0
 8004418:	b29a      	uxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0011      	movs	r1, r2
 800441e:	0018      	movs	r0, r3
 8004420:	f7ff fa34 	bl	800388c <ESP_Send>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d001      	beq.n	800442c <CIPMUX+0x28>
    return true;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <CIPMUX+0x2a>
  }
  else{
    return false;
 800442c:	2300      	movs	r3, #0
  }
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b002      	add	sp, #8
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	0801b7e0 	.word	0x0801b7e0

0800443c <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004442:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <WEBSERVER+0x34>)
 8004444:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f7fb fe5d 	bl	8000108 <strlen>
 800444e:	0003      	movs	r3, r0
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0011      	movs	r1, r2
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff fa18 	bl	800388c <ESP_Send>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <WEBSERVER+0x28>
    return true;
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004464:	2300      	movs	r3, #0
  }
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b002      	add	sp, #8
 800446c:	bd80      	pop	{r7, pc}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	0801b7f0 	.word	0x0801b7f0

08004474 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004474:	b590      	push	{r4, r7, lr}
 8004476:	b0c5      	sub	sp, #276	@ 0x114
 8004478:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	005a      	lsls	r2, r3, #1
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	2100      	movs	r1, #0
 8004482:	0018      	movs	r0, r3
 8004484:	f014 f8b4 	bl	80185f0 <memset>
  uint16_t length = CreateMessage(beurs);
 8004488:	4b22      	ldr	r3, [pc, #136]	@ (8004514 <HTTPCPOST+0xa0>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	1dfc      	adds	r4, r7, #7
 800448e:	34ff      	adds	r4, #255	@ 0xff
 8004490:	0018      	movs	r0, r3
 8004492:	f7ff fab5 	bl	8003a00 <CreateMessage>
 8004496:	0003      	movs	r3, r0
 8004498:	8023      	strh	r3, [r4, #0]
  if(beurs){
 800449a:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <HTTPCPOST+0xa0>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80044a2:	1dfb      	adds	r3, r7, #7
 80044a4:	33ff      	adds	r3, #255	@ 0xff
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HTTPCPOST+0xa4>)
 80044aa:	491c      	ldr	r1, [pc, #112]	@ (800451c <HTTPCPOST+0xa8>)
 80044ac:	1d38      	adds	r0, r7, #4
 80044ae:	f013 fffb 	bl	80184a8 <siprintf>
 80044b2:	e016      	b.n	80044e2 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80044b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <HTTPCPOST+0xac>)
 80044b6:	481b      	ldr	r0, [pc, #108]	@ (8004524 <HTTPCPOST+0xb0>)
 80044b8:	220c      	movs	r2, #12
 80044ba:	0019      	movs	r1, r3
 80044bc:	f7ff f89b 	bl	80035f6 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80044c0:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <HTTPCPOST+0xac>)
 80044c2:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <HTTPCPOST+0xb4>)
 80044c4:	0011      	movs	r1, r2
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7ff fa76 	bl	80039b8 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	33ff      	adds	r3, #255	@ 0xff
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	4c15      	ldr	r4, [pc, #84]	@ (8004528 <HTTPCPOST+0xb4>)
 80044d4:	4a15      	ldr	r2, [pc, #84]	@ (800452c <HTTPCPOST+0xb8>)
 80044d6:	4916      	ldr	r1, [pc, #88]	@ (8004530 <HTTPCPOST+0xbc>)
 80044d8:	1d38      	adds	r0, r7, #4
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	0023      	movs	r3, r4
 80044de:	f013 ffe3 	bl	80184a8 <siprintf>
  }
    uint16_t len = strlen(atCommandBuff);
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7fb fe0f 	bl	8000108 <strlen>
 80044ea:	0002      	movs	r2, r0
 80044ec:	1d7b      	adds	r3, r7, #5
 80044ee:	33ff      	adds	r3, #255	@ 0xff
 80044f0:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 80044f2:	1d7b      	adds	r3, r7, #5
 80044f4:	33ff      	adds	r3, #255	@ 0xff
 80044f6:	881a      	ldrh	r2, [r3, #0]
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff f9c5 	bl	800388c <ESP_Send>
 8004502:	1e03      	subs	r3, r0, #0
 8004504:	d001      	beq.n	800450a <HTTPCPOST+0x96>
    return true;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HTTPCPOST+0x98>
  }
  else{
    return false;
 800450a:	2300      	movs	r3, #0
  }
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b043      	add	sp, #268	@ 0x10c
 8004512:	bd90      	pop	{r4, r7, pc}
 8004514:	200004f5 	.word	0x200004f5
 8004518:	0801c0cc 	.word	0x0801c0cc
 800451c:	0801b808 	.word	0x0801b808
 8004520:	200009fc 	.word	0x200009fc
 8004524:	08080000 	.word	0x08080000
 8004528:	20000a08 	.word	0x20000a08
 800452c:	0801c108 	.word	0x0801c108
 8004530:	0801b840 	.word	0x0801b840

08004534 <SENDDATA>:
bool SENDDATA(){
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 800453a:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <SENDDATA+0x34>)
 800453c:	0018      	movs	r0, r3
 800453e:	f7fb fde3 	bl	8000108 <strlen>
 8004542:	0002      	movs	r2, r0
 8004544:	1dbb      	adds	r3, r7, #6
 8004546:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004548:	1dbb      	adds	r3, r7, #6
 800454a:	881a      	ldrh	r2, [r3, #0]
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <SENDDATA+0x34>)
 800454e:	0011      	movs	r1, r2
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff f99b 	bl	800388c <ESP_Send>
 8004556:	1e03      	subs	r3, r0, #0
 8004558:	d001      	beq.n	800455e <SENDDATA+0x2a>
    return true;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <SENDDATA+0x2c>
  }
  else{
    return false;
 800455e:	2300      	movs	r3, #0
  }
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000524 	.word	0x20000524

0800456c <SLEEP>:
bool SLEEP(){
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <SLEEP+0x34>)
 8004574:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fb fdc5 	bl	8000108 <strlen>
 800457e:	0003      	movs	r3, r0
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0011      	movs	r1, r2
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff f980 	bl	800388c <ESP_Send>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d001      	beq.n	8004594 <SLEEP+0x28>
    return true;
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <SLEEP+0x2a>
  }
  else{
    return false;
 8004594:	2300      	movs	r3, #0
  }
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	0801b880 	.word	0x0801b880

080045a4 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	0002      	movs	r2, r0
 80045ac:	1dfb      	adds	r3, r7, #7
 80045ae:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80045b0:	4b50      	ldr	r3, [pc, #320]	@ (80046f4 <DMA_ProcessBuffer+0x150>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	210e      	movs	r1, #14
 80045ba:	187b      	adds	r3, r7, r1
 80045bc:	43d2      	mvns	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 80045c0:	200f      	movs	r0, #15
 80045c2:	183b      	adds	r3, r7, r0
 80045c4:	2203      	movs	r2, #3
 80045c6:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 80045c8:	4b4b      	ldr	r3, [pc, #300]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	187a      	adds	r2, r7, r1
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d130      	bne.n	8004638 <DMA_ProcessBuffer+0x94>
      if(retry >4){
 80045d6:	4b49      	ldr	r3, [pc, #292]	@ (80046fc <DMA_ProcessBuffer+0x158>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d91a      	bls.n	8004614 <DMA_ProcessBuffer+0x70>
        retry = 0;
 80045de:	4b47      	ldr	r3, [pc, #284]	@ (80046fc <DMA_ProcessBuffer+0x158>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80045e4:	4b46      	ldr	r3, [pc, #280]	@ (8004700 <DMA_ProcessBuffer+0x15c>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <DMA_ProcessBuffer+0x56>
 80045ec:	4b45      	ldr	r3, [pc, #276]	@ (8004704 <DMA_ProcessBuffer+0x160>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 80045f4:	183b      	adds	r3, r7, r0
 80045f6:	2207      	movs	r2, #7
 80045f8:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80045fa:	4b41      	ldr	r3, [pc, #260]	@ (8004700 <DMA_ProcessBuffer+0x15c>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d103      	bne.n	800460a <DMA_ProcessBuffer+0x66>
          EspState = ESP_STATE_MODE_SELECT;
 8004602:	4b41      	ldr	r3, [pc, #260]	@ (8004708 <DMA_ProcessBuffer+0x164>)
 8004604:	220b      	movs	r2, #11
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	e016      	b.n	8004638 <DMA_ProcessBuffer+0x94>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 800460a:	230f      	movs	r3, #15
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	2206      	movs	r2, #6
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	e011      	b.n	8004638 <DMA_ProcessBuffer+0x94>
        }
      }
     else{
       retry ++;
 8004614:	4b39      	ldr	r3, [pc, #228]	@ (80046fc <DMA_ProcessBuffer+0x158>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <DMA_ProcessBuffer+0x158>)
 800461e:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004620:	f005 feac 	bl	800a37c <HAL_GetTick>
 8004624:	0003      	movs	r3, r0
 8004626:	33f5      	adds	r3, #245	@ 0xf5
 8004628:	33ff      	adds	r3, #255	@ 0xff
 800462a:	001a      	movs	r2, r3
 800462c:	4b37      	ldr	r3, [pc, #220]	@ (800470c <DMA_ProcessBuffer+0x168>)
 800462e:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004630:	230f      	movs	r3, #15
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2204      	movs	r2, #4
 8004636:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004638:	4b2f      	ldr	r3, [pc, #188]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	210e      	movs	r1, #14
 8004640:	187a      	adds	r2, r7, r1
 8004642:	7812      	ldrb	r2, [r2, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d048      	beq.n	80046da <DMA_ProcessBuffer+0x136>
      retry = 0;
 8004648:	4b2c      	ldr	r3, [pc, #176]	@ (80046fc <DMA_ProcessBuffer+0x158>)
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 800464e:	4b2a      	ldr	r3, [pc, #168]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	187a      	adds	r2, r7, r1
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d917      	bls.n	800468c <DMA_ProcessBuffer+0xe8>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800465c:	4b26      	ldr	r3, [pc, #152]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	001a      	movs	r2, r3
 8004664:	4b2a      	ldr	r3, [pc, #168]	@ (8004710 <DMA_ProcessBuffer+0x16c>)
 8004666:	18d0      	adds	r0, r2, r3
 8004668:	187b      	adds	r3, r7, r1
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	4a22      	ldr	r2, [pc, #136]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	b299      	uxth	r1, r3
 8004678:	230f      	movs	r3, #15
 800467a:	18fc      	adds	r4, r7, r3
 800467c:	1dfb      	adds	r3, r7, #7
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	001a      	movs	r2, r3
 8004682:	f7ff fba5 	bl	8003dd0 <ParseBuffer>
 8004686:	0003      	movs	r3, r0
 8004688:	7023      	strb	r3, [r4, #0]
 800468a:	e026      	b.n	80046da <DMA_ProcessBuffer+0x136>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 800468c:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	001a      	movs	r2, r3
 8004694:	4b1e      	ldr	r3, [pc, #120]	@ (8004710 <DMA_ProcessBuffer+0x16c>)
 8004696:	18d0      	adds	r0, r2, r3
 8004698:	4b17      	ldr	r3, [pc, #92]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	001a      	movs	r2, r3
 80046a0:	23ff      	movs	r3, #255	@ 0xff
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	b299      	uxth	r1, r3
 80046a6:	250f      	movs	r5, #15
 80046a8:	197c      	adds	r4, r7, r5
 80046aa:	1dfb      	adds	r3, r7, #7
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	001a      	movs	r2, r3
 80046b0:	f7ff fb8e 	bl	8003dd0 <ParseBuffer>
 80046b4:	0003      	movs	r3, r0
 80046b6:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 80046b8:	220e      	movs	r2, #14
 80046ba:	18bb      	adds	r3, r7, r2
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <DMA_ProcessBuffer+0x136>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80046c2:	18bb      	adds	r3, r7, r2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b299      	uxth	r1, r3
 80046c8:	197c      	adds	r4, r7, r5
 80046ca:	1dfb      	adds	r3, r7, #7
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <DMA_ProcessBuffer+0x16c>)
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fb7d 	bl	8003dd0 <ParseBuffer>
 80046d6:	0003      	movs	r3, r0
 80046d8:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80046da:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <DMA_ProcessBuffer+0x154>)
 80046dc:	220e      	movs	r2, #14
 80046de:	18ba      	adds	r2, r7, r2
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	701a      	strb	r2, [r3, #0]
    return status;
 80046e4:	230f      	movs	r3, #15
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	781b      	ldrb	r3, [r3, #0]
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bdb0      	pop	{r4, r5, r7, pc}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	20002aac 	.word	0x20002aac
 80046f8:	2000092f 	.word	0x2000092f
 80046fc:	20000934 	.word	0x20000934
 8004700:	20000936 	.word	0x20000936
 8004704:	20000000 	.word	0x20000000
 8004708:	20000021 	.word	0x20000021
 800470c:	20000930 	.word	0x20000930
 8004710:	200003f0 	.word	0x200003f0

08004714 <clearDMABuffer>:

void clearDMABuffer(){
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  memset(RxBuffer, '/0', ESP_MAX_BUFFER_SIZE);
 8004718:	4904      	ldr	r1, [pc, #16]	@ (800472c <clearDMABuffer+0x18>)
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <clearDMABuffer+0x1c>)
 800471c:	22ff      	movs	r2, #255	@ 0xff
 800471e:	0018      	movs	r0, r3
 8004720:	f013 ff66 	bl	80185f0 <memset>
}
 8004724:	46c0      	nop			@ (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	00002f30 	.word	0x00002f30
 8004730:	200003f0 	.word	0x200003f0

08004734 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	0002      	movs	r2, r0
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	1dbb      	adds	r3, r7, #6
 8004742:	1c0a      	adds	r2, r1, #0
 8004744:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004746:	210f      	movs	r1, #15
 8004748:	187b      	adds	r3, r7, r1
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800474e:	1dbb      	adds	r3, r7, #6
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004756:	187b      	adds	r3, r7, r1
 8004758:	1dfa      	adds	r2, r7, #7
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	4251      	negs	r1, r2
 800475e:	414a      	adcs	r2, r1
 8004760:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004762:	1dbb      	adds	r3, r7, #6
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d107      	bne.n	800477a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800476a:	230f      	movs	r3, #15
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	1dfa      	adds	r2, r7, #7
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	3a02      	subs	r2, #2
 8004774:	4251      	negs	r1, r2
 8004776:	414a      	adcs	r2, r1
 8004778:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800477a:	1dbb      	adds	r3, r7, #6
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d107      	bne.n	8004792 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004782:	230f      	movs	r3, #15
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	1dfa      	adds	r2, r7, #7
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	3a05      	subs	r2, #5
 800478c:	4251      	negs	r1, r2
 800478e:	414a      	adcs	r2, r1
 8004790:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004792:	230f      	movs	r3, #15
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	781b      	ldrb	r3, [r3, #0]
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b004      	add	sp, #16
 800479e:	bd80      	pop	{r7, pc}

080047a0 <AT_Send>:

bool AT_Send(AT_Commands state){
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	0002      	movs	r2, r0
 80047a8:	1dfb      	adds	r3, r7, #7
 80047aa:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80047ac:	230f      	movs	r3, #15
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
  switch (state){
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d900      	bls.n	80047be <AT_Send+0x1e>
 80047bc:	e14d      	b.n	8004a5a <AT_Send+0x2ba>
 80047be:	009a      	lsls	r2, r3, #2
 80047c0:	4ba9      	ldr	r3, [pc, #676]	@ (8004a68 <AT_Send+0x2c8>)
 80047c2:	18d3      	adds	r3, r2, r3
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80047c8:	4ba8      	ldr	r3, [pc, #672]	@ (8004a6c <AT_Send+0x2cc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f005 f9f9 	bl	8009bc4 <TimestampIsReached>
 80047d2:	1e03      	subs	r3, r0, #0
 80047d4:	d100      	bne.n	80047d8 <AT_Send+0x38>
 80047d6:	e13f      	b.n	8004a58 <AT_Send+0x2b8>
    ATCommandSend = PollAwake();
 80047d8:	230f      	movs	r3, #15
 80047da:	18fc      	adds	r4, r7, r3
 80047dc:	f7ff fc5c 	bl	8004098 <PollAwake>
 80047e0:	0003      	movs	r3, r0
 80047e2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80047e4:	f005 fdca 	bl	800a37c <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	3332      	adds	r3, #50	@ 0x32
 80047ec:	001a      	movs	r2, r3
 80047ee:	4b9f      	ldr	r3, [pc, #636]	@ (8004a6c <AT_Send+0x2cc>)
 80047f0:	601a      	str	r2, [r3, #0]
  }
  break;
 80047f2:	e131      	b.n	8004a58 <AT_Send+0x2b8>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80047f4:	4a9e      	ldr	r2, [pc, #632]	@ (8004a70 <AT_Send+0x2d0>)
 80047f6:	4b9f      	ldr	r3, [pc, #636]	@ (8004a74 <AT_Send+0x2d4>)
 80047f8:	0019      	movs	r1, r3
 80047fa:	2003      	movs	r0, #3
 80047fc:	f005 fa38 	bl	8009c70 <CreateLine>
    ATCommandSend = RFPower();
 8004800:	230f      	movs	r3, #15
 8004802:	18fc      	adds	r4, r7, r3
 8004804:	f7ff fc64 	bl	80040d0 <RFPower>
 8004808:	0003      	movs	r3, r0
 800480a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800480c:	f005 fdb6 	bl	800a37c <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	330a      	adds	r3, #10
 8004814:	001a      	movs	r2, r3
 8004816:	4b95      	ldr	r3, [pc, #596]	@ (8004a6c <AT_Send+0x2cc>)
 8004818:	601a      	str	r2, [r3, #0]
    break;
 800481a:	e11e      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800481c:	4a96      	ldr	r2, [pc, #600]	@ (8004a78 <AT_Send+0x2d8>)
 800481e:	4b95      	ldr	r3, [pc, #596]	@ (8004a74 <AT_Send+0x2d4>)
 8004820:	0019      	movs	r1, r3
 8004822:	2003      	movs	r0, #3
 8004824:	f005 fa24 	bl	8009c70 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004828:	230f      	movs	r3, #15
 800482a:	18fc      	adds	r4, r7, r3
 800482c:	f7ff fc6c 	bl	8004108 <CheckRFPower>
 8004830:	0003      	movs	r3, r0
 8004832:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004834:	f005 fda2 	bl	800a37c <HAL_GetTick>
 8004838:	0003      	movs	r3, r0
 800483a:	330a      	adds	r3, #10
 800483c:	001a      	movs	r2, r3
 800483e:	4b8b      	ldr	r3, [pc, #556]	@ (8004a6c <AT_Send+0x2cc>)
 8004840:	601a      	str	r2, [r3, #0]
    break;
 8004842:	e10a      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004844:	4a8d      	ldr	r2, [pc, #564]	@ (8004a7c <AT_Send+0x2dc>)
 8004846:	4b8b      	ldr	r3, [pc, #556]	@ (8004a74 <AT_Send+0x2d4>)
 8004848:	0019      	movs	r1, r3
 800484a:	2003      	movs	r0, #3
 800484c:	f005 fa10 	bl	8009c70 <CreateLine>
    ATCommandSend = ATRestore();
 8004850:	230f      	movs	r3, #15
 8004852:	18fc      	adds	r4, r7, r3
 8004854:	f7ff fc74 	bl	8004140 <ATRestore>
 8004858:	0003      	movs	r3, r0
 800485a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800485c:	f005 fd8e 	bl	800a37c <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	3332      	adds	r3, #50	@ 0x32
 8004864:	001a      	movs	r2, r3
 8004866:	4b81      	ldr	r3, [pc, #516]	@ (8004a6c <AT_Send+0x2cc>)
 8004868:	601a      	str	r2, [r3, #0]
    break;
 800486a:	e0f6      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800486c:	4a84      	ldr	r2, [pc, #528]	@ (8004a80 <AT_Send+0x2e0>)
 800486e:	4b81      	ldr	r3, [pc, #516]	@ (8004a74 <AT_Send+0x2d4>)
 8004870:	0019      	movs	r1, r3
 8004872:	2003      	movs	r0, #3
 8004874:	f005 f9fc 	bl	8009c70 <CreateLine>
    ATCommandSend = CWINIT();
 8004878:	230f      	movs	r3, #15
 800487a:	18fc      	adds	r4, r7, r3
 800487c:	f7ff fc7c 	bl	8004178 <CWINIT>
 8004880:	0003      	movs	r3, r0
 8004882:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004884:	f005 fd7a 	bl	800a37c <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	33f5      	adds	r3, #245	@ 0xf5
 800488c:	33ff      	adds	r3, #255	@ 0xff
 800488e:	001a      	movs	r2, r3
 8004890:	4b76      	ldr	r3, [pc, #472]	@ (8004a6c <AT_Send+0x2cc>)
 8004892:	601a      	str	r2, [r3, #0]
    break;
 8004894:	e0e1      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004896:	4a7b      	ldr	r2, [pc, #492]	@ (8004a84 <AT_Send+0x2e4>)
 8004898:	4b76      	ldr	r3, [pc, #472]	@ (8004a74 <AT_Send+0x2d4>)
 800489a:	0019      	movs	r1, r3
 800489c:	2003      	movs	r0, #3
 800489e:	f005 f9e7 	bl	8009c70 <CreateLine>
    ATCommandSend = CWSTATE();
 80048a2:	230f      	movs	r3, #15
 80048a4:	18fc      	adds	r4, r7, r3
 80048a6:	f7ff fd75 	bl	8004394 <CWSTATE>
 80048aa:	0003      	movs	r3, r0
 80048ac:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80048ae:	f005 fd65 	bl	800a37c <HAL_GetTick>
 80048b2:	0003      	movs	r3, r0
 80048b4:	33f5      	adds	r3, #245	@ 0xf5
 80048b6:	33ff      	adds	r3, #255	@ 0xff
 80048b8:	001a      	movs	r2, r3
 80048ba:	4b6c      	ldr	r3, [pc, #432]	@ (8004a6c <AT_Send+0x2cc>)
 80048bc:	601a      	str	r2, [r3, #0]
    break;
 80048be:	e0cc      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80048c0:	4a71      	ldr	r2, [pc, #452]	@ (8004a88 <AT_Send+0x2e8>)
 80048c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004a74 <AT_Send+0x2d4>)
 80048c4:	0019      	movs	r1, r3
 80048c6:	2003      	movs	r0, #3
 80048c8:	f005 f9d2 	bl	8009c70 <CreateLine>
    ATCommandSend = CWMODE1();
 80048cc:	230f      	movs	r3, #15
 80048ce:	18fc      	adds	r4, r7, r3
 80048d0:	f7ff fc6e 	bl	80041b0 <CWMODE1>
 80048d4:	0003      	movs	r3, r0
 80048d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80048d8:	f005 fd50 	bl	800a37c <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	330a      	adds	r3, #10
 80048e0:	001a      	movs	r2, r3
 80048e2:	4b62      	ldr	r3, [pc, #392]	@ (8004a6c <AT_Send+0x2cc>)
 80048e4:	601a      	str	r2, [r3, #0]
    break;
 80048e6:	e0b8      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80048e8:	4a67      	ldr	r2, [pc, #412]	@ (8004a88 <AT_Send+0x2e8>)
 80048ea:	4b62      	ldr	r3, [pc, #392]	@ (8004a74 <AT_Send+0x2d4>)
 80048ec:	0019      	movs	r1, r3
 80048ee:	2003      	movs	r0, #3
 80048f0:	f005 f9be 	bl	8009c70 <CreateLine>
    ATCommandSend = CWMODE2();
 80048f4:	230f      	movs	r3, #15
 80048f6:	18fc      	adds	r4, r7, r3
 80048f8:	f7ff fc76 	bl	80041e8 <CWMODE2>
 80048fc:	0003      	movs	r3, r0
 80048fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004900:	f005 fd3c 	bl	800a37c <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	330a      	adds	r3, #10
 8004908:	001a      	movs	r2, r3
 800490a:	4b58      	ldr	r3, [pc, #352]	@ (8004a6c <AT_Send+0x2cc>)
 800490c:	601a      	str	r2, [r3, #0]
    break;
 800490e:	e0a4      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004910:	4a5e      	ldr	r2, [pc, #376]	@ (8004a8c <AT_Send+0x2ec>)
 8004912:	4b58      	ldr	r3, [pc, #352]	@ (8004a74 <AT_Send+0x2d4>)
 8004914:	0019      	movs	r1, r3
 8004916:	2003      	movs	r0, #3
 8004918:	f005 f9aa 	bl	8009c70 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800491c:	230f      	movs	r3, #15
 800491e:	18fc      	adds	r4, r7, r3
 8004920:	f7ff fc7e 	bl	8004220 <CWAUTOCONN>
 8004924:	0003      	movs	r3, r0
 8004926:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004928:	f005 fd28 	bl	800a37c <HAL_GetTick>
 800492c:	0003      	movs	r3, r0
 800492e:	330a      	adds	r3, #10
 8004930:	001a      	movs	r2, r3
 8004932:	4b4e      	ldr	r3, [pc, #312]	@ (8004a6c <AT_Send+0x2cc>)
 8004934:	601a      	str	r2, [r3, #0]
    break;
 8004936:	e090      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004938:	4a55      	ldr	r2, [pc, #340]	@ (8004a90 <AT_Send+0x2f0>)
 800493a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a74 <AT_Send+0x2d4>)
 800493c:	0019      	movs	r1, r3
 800493e:	2003      	movs	r0, #3
 8004940:	f005 f996 	bl	8009c70 <CreateLine>
    ATCommandSend = CWJAP();
 8004944:	230f      	movs	r3, #15
 8004946:	18fc      	adds	r4, r7, r3
 8004948:	f7ff fc86 	bl	8004258 <CWJAP>
 800494c:	0003      	movs	r3, r0
 800494e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004950:	f005 fd14 	bl	800a37c <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	3332      	adds	r3, #50	@ 0x32
 8004958:	001a      	movs	r2, r3
 800495a:	4b44      	ldr	r3, [pc, #272]	@ (8004a6c <AT_Send+0x2cc>)
 800495c:	601a      	str	r2, [r3, #0]
    break;
 800495e:	e07c      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004960:	4a4c      	ldr	r2, [pc, #304]	@ (8004a94 <AT_Send+0x2f4>)
 8004962:	4b44      	ldr	r3, [pc, #272]	@ (8004a74 <AT_Send+0x2d4>)
 8004964:	0019      	movs	r1, r3
 8004966:	2003      	movs	r0, #3
 8004968:	f005 f982 	bl	8009c70 <CreateLine>
    ATCommandSend = CWMODE3();
 800496c:	230f      	movs	r3, #15
 800496e:	18fc      	adds	r4, r7, r3
 8004970:	f7ff fcf4 	bl	800435c <CWMODE3>
 8004974:	0003      	movs	r3, r0
 8004976:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004978:	f005 fd00 	bl	800a37c <HAL_GetTick>
 800497c:	0003      	movs	r3, r0
 800497e:	330a      	adds	r3, #10
 8004980:	001a      	movs	r2, r3
 8004982:	4b3a      	ldr	r3, [pc, #232]	@ (8004a6c <AT_Send+0x2cc>)
 8004984:	601a      	str	r2, [r3, #0]
    break;
 8004986:	e068      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004988:	4a43      	ldr	r2, [pc, #268]	@ (8004a98 <AT_Send+0x2f8>)
 800498a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a74 <AT_Send+0x2d4>)
 800498c:	0019      	movs	r1, r3
 800498e:	2003      	movs	r0, #3
 8004990:	f005 f96e 	bl	8009c70 <CreateLine>
    ATCommandSend = CWSAP();
 8004994:	230f      	movs	r3, #15
 8004996:	18fc      	adds	r4, r7, r3
 8004998:	f7ff fd18 	bl	80043cc <CWSAP>
 800499c:	0003      	movs	r3, r0
 800499e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80049a0:	f005 fcec 	bl	800a37c <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	330a      	adds	r3, #10
 80049a8:	001a      	movs	r2, r3
 80049aa:	4b30      	ldr	r3, [pc, #192]	@ (8004a6c <AT_Send+0x2cc>)
 80049ac:	601a      	str	r2, [r3, #0]
    break;
 80049ae:	e054      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 80049b0:	230f      	movs	r3, #15
 80049b2:	18fc      	adds	r4, r7, r3
 80049b4:	f7ff fd26 	bl	8004404 <CIPMUX>
 80049b8:	0003      	movs	r3, r0
 80049ba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80049bc:	f005 fcde 	bl	800a37c <HAL_GetTick>
 80049c0:	0003      	movs	r3, r0
 80049c2:	330a      	adds	r3, #10
 80049c4:	001a      	movs	r2, r3
 80049c6:	4b29      	ldr	r3, [pc, #164]	@ (8004a6c <AT_Send+0x2cc>)
 80049c8:	601a      	str	r2, [r3, #0]
    break;
 80049ca:	e046      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 80049cc:	230f      	movs	r3, #15
 80049ce:	18fc      	adds	r4, r7, r3
 80049d0:	f7ff fd34 	bl	800443c <WEBSERVER>
 80049d4:	0003      	movs	r3, r0
 80049d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80049d8:	f005 fcd0 	bl	800a37c <HAL_GetTick>
 80049dc:	0003      	movs	r3, r0
 80049de:	330a      	adds	r3, #10
 80049e0:	001a      	movs	r2, r3
 80049e2:	4b22      	ldr	r3, [pc, #136]	@ (8004a6c <AT_Send+0x2cc>)
 80049e4:	601a      	str	r2, [r3, #0]
    break;
 80049e6:	e038      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80049e8:	230f      	movs	r3, #15
 80049ea:	18fc      	adds	r4, r7, r3
 80049ec:	f7ff fd42 	bl	8004474 <HTTPCPOST>
 80049f0:	0003      	movs	r3, r0
 80049f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80049f4:	f005 fcc2 	bl	800a37c <HAL_GetTick>
 80049f8:	0003      	movs	r3, r0
 80049fa:	33f5      	adds	r3, #245	@ 0xf5
 80049fc:	33ff      	adds	r3, #255	@ 0xff
 80049fe:	001a      	movs	r2, r3
 8004a00:	4b1a      	ldr	r3, [pc, #104]	@ (8004a6c <AT_Send+0x2cc>)
 8004a02:	601a      	str	r2, [r3, #0]
    break;
 8004a04:	e029      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_SENDDATA:
    Debug("Send the data");
 8004a06:	4a25      	ldr	r2, [pc, #148]	@ (8004a9c <AT_Send+0x2fc>)
 8004a08:	4b1a      	ldr	r3, [pc, #104]	@ (8004a74 <AT_Send+0x2d4>)
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	2003      	movs	r0, #3
 8004a0e:	f005 f92f 	bl	8009c70 <CreateLine>
    ATCommandSend = SENDDATA();
 8004a12:	230f      	movs	r3, #15
 8004a14:	18fc      	adds	r4, r7, r3
 8004a16:	f7ff fd8d 	bl	8004534 <SENDDATA>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004a1e:	f005 fcad 	bl	800a37c <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	33f5      	adds	r3, #245	@ 0xf5
 8004a26:	33ff      	adds	r3, #255	@ 0xff
 8004a28:	001a      	movs	r2, r3
 8004a2a:	4b10      	ldr	r3, [pc, #64]	@ (8004a6c <AT_Send+0x2cc>)
 8004a2c:	601a      	str	r2, [r3, #0]
    break;
 8004a2e:	e014      	b.n	8004a5a <AT_Send+0x2ba>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004a30:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa0 <AT_Send+0x300>)
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <AT_Send+0x2d4>)
 8004a34:	0019      	movs	r1, r3
 8004a36:	2003      	movs	r0, #3
 8004a38:	f005 f91a 	bl	8009c70 <CreateLine>
    ATCommandSend = SLEEP();
 8004a3c:	230f      	movs	r3, #15
 8004a3e:	18fc      	adds	r4, r7, r3
 8004a40:	f7ff fd94 	bl	800456c <SLEEP>
 8004a44:	0003      	movs	r3, r0
 8004a46:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004a48:	f005 fc98 	bl	800a37c <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	330a      	adds	r3, #10
 8004a50:	001a      	movs	r2, r3
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <AT_Send+0x2cc>)
 8004a54:	601a      	str	r2, [r3, #0]
    break;
 8004a56:	e000      	b.n	8004a5a <AT_Send+0x2ba>
  break;
 8004a58:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004a5a:	230f      	movs	r3, #15
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	781b      	ldrb	r3, [r3, #0]
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b005      	add	sp, #20
 8004a66:	bd90      	pop	{r4, r7, pc}
 8004a68:	0801c130 	.word	0x0801c130
 8004a6c:	20000930 	.word	0x20000930
 8004a70:	0801b890 	.word	0x0801b890
 8004a74:	0801b420 	.word	0x0801b420
 8004a78:	0801b8a4 	.word	0x0801b8a4
 8004a7c:	0801b8b8 	.word	0x0801b8b8
 8004a80:	0801b8c8 	.word	0x0801b8c8
 8004a84:	0801b8dc 	.word	0x0801b8dc
 8004a88:	0801b8f4 	.word	0x0801b8f4
 8004a8c:	0801b90c 	.word	0x0801b90c
 8004a90:	0801b924 	.word	0x0801b924
 8004a94:	0801b938 	.word	0x0801b938
 8004a98:	0801b954 	.word	0x0801b954
 8004a9c:	0801b970 	.word	0x0801b970
 8004aa0:	0801b980 	.word	0x0801b980

08004aa4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004aaa:	1dfb      	adds	r3, r7, #7
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004ab0:	4b79      	ldr	r3, [pc, #484]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d900      	bls.n	8004aba <ESP_WakeTest+0x16>
 8004ab8:	e0d4      	b.n	8004c64 <ESP_WakeTest+0x1c0>
 8004aba:	009a      	lsls	r2, r3, #2
 8004abc:	4b77      	ldr	r3, [pc, #476]	@ (8004c9c <ESP_WakeTest+0x1f8>)
 8004abe:	18d3      	adds	r3, r2, r3
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004ac4:	4b76      	ldr	r3, [pc, #472]	@ (8004ca0 <ESP_WakeTest+0x1fc>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4053      	eors	r3, r2
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d036      	beq.n	8004b40 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	4873      	ldr	r0, [pc, #460]	@ (8004ca4 <ESP_WakeTest+0x200>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	0019      	movs	r1, r3
 8004adc:	f006 ffed 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004ae0:	2032      	movs	r0, #50	@ 0x32
 8004ae2:	f005 fc55 	bl	800a390 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004ae6:	2380      	movs	r3, #128	@ 0x80
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	486e      	ldr	r0, [pc, #440]	@ (8004ca4 <ESP_WakeTest+0x200>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	0019      	movs	r1, r3
 8004af0:	f006 ffe3 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004af4:	200a      	movs	r0, #10
 8004af6:	f005 fc4b 	bl	800a390 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004afa:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca8 <ESP_WakeTest+0x204>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	2101      	movs	r1, #1
 8004b00:	0018      	movs	r0, r3
 8004b02:	f006 ffda 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b06:	200a      	movs	r0, #10
 8004b08:	f005 fc42 	bl	800a390 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004b0c:	4b66      	ldr	r3, [pc, #408]	@ (8004ca8 <ESP_WakeTest+0x204>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2102      	movs	r1, #2
 8004b12:	0018      	movs	r0, r3
 8004b14:	f006 ffd1 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b18:	200a      	movs	r0, #10
 8004b1a:	f005 fc39 	bl	800a390 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004b1e:	4b62      	ldr	r3, [pc, #392]	@ (8004ca8 <ESP_WakeTest+0x204>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	2101      	movs	r1, #1
 8004b24:	0018      	movs	r0, r3
 8004b26:	f006 ffc8 	bl	800baba <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004b2a:	f005 fc27 	bl	800a37c <HAL_GetTick>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	22af      	movs	r2, #175	@ 0xaf
 8004b32:	0092      	lsls	r2, r2, #2
 8004b34:	189a      	adds	r2, r3, r2
 8004b36:	4b5d      	ldr	r3, [pc, #372]	@ (8004cac <ESP_WakeTest+0x208>)
 8004b38:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004b3a:	4b59      	ldr	r3, [pc, #356]	@ (8004ca0 <ESP_WakeTest+0x1fc>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004b40:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb0 <ESP_WakeTest+0x20c>)
 8004b42:	21ff      	movs	r1, #255	@ 0xff
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fe fecb 	bl	80038e0 <ESP_Receive>
 8004b4a:	1e03      	subs	r3, r0, #0
 8004b4c:	d100      	bne.n	8004b50 <ESP_WakeTest+0xac>
 8004b4e:	e099      	b.n	8004c84 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 8004b50:	4b51      	ldr	r3, [pc, #324]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b56:	e095      	b.n	8004c84 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004b58:	4b54      	ldr	r3, [pc, #336]	@ (8004cac <ESP_WakeTest+0x208>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f005 f831 	bl	8009bc4 <TimestampIsReached>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d100      	bne.n	8004b68 <ESP_WakeTest+0xc4>
 8004b66:	e08f      	b.n	8004c88 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004b68:	4b52      	ldr	r3, [pc, #328]	@ (8004cb4 <ESP_WakeTest+0x210>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	1dfc      	adds	r4, r7, #7
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7ff fe16 	bl	80047a0 <AT_Send>
 8004b74:	0003      	movs	r3, r0
 8004b76:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004b78:	1dfb      	adds	r3, r7, #7
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d100      	bne.n	8004b82 <ESP_WakeTest+0xde>
 8004b80:	e082      	b.n	8004c88 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004b82:	4b45      	ldr	r3, [pc, #276]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004b84:	2202      	movs	r2, #2
 8004b86:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004b88:	e07e      	b.n	8004c88 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004b8a:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <ESP_WakeTest+0x208>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f005 f818 	bl	8009bc4 <TimestampIsReached>
 8004b94:	1e03      	subs	r3, r0, #0
 8004b96:	d100      	bne.n	8004b9a <ESP_WakeTest+0xf6>
 8004b98:	e078      	b.n	8004c8c <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004b9a:	4b47      	ldr	r3, [pc, #284]	@ (8004cb8 <ESP_WakeTest+0x214>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7ff fd00 	bl	80045a4 <DMA_ProcessBuffer>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	4b44      	ldr	r3, [pc, #272]	@ (8004cbc <ESP_WakeTest+0x218>)
 8004baa:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004bac:	4b43      	ldr	r3, [pc, #268]	@ (8004cbc <ESP_WakeTest+0x218>)
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <ESP_WakeTest+0x214>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	1dbc      	adds	r4, r7, #6
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	0010      	movs	r0, r2
 8004bba:	f7ff fdbb 	bl	8004734 <ATCompare>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cbc <ESP_WakeTest+0x218>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d102      	bne.n	8004bd0 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004bca:	4b33      	ldr	r3, [pc, #204]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8004cbc <ESP_WakeTest+0x218>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b07      	cmp	r3, #7
 8004bd6:	d104      	bne.n	8004be2 <ESP_WakeTest+0x13e>
          StartProg();
 8004bd8:	f7ff f8c8 	bl	8003d6c <StartProg>
          TestState = ESP_TEST_BOOT;
 8004bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004bde:	2205      	movs	r2, #5
 8004be0:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004be2:	4b36      	ldr	r3, [pc, #216]	@ (8004cbc <ESP_WakeTest+0x218>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d109      	bne.n	8004bfe <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004bea:	f005 fbc7 	bl	800a37c <HAL_GetTick>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	3332      	adds	r3, #50	@ 0x32
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004cac <ESP_WakeTest+0x208>)
 8004bf6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004bf8:	4b27      	ldr	r3, [pc, #156]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004bfe:	1dbb      	adds	r3, r7, #6
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d042      	beq.n	8004c8c <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004c06:	4b24      	ldr	r3, [pc, #144]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004c08:	2203      	movs	r2, #3
 8004c0a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004c0c:	e03e      	b.n	8004c8c <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc0 <ESP_WakeTest+0x21c>)
 8004c10:	22fa      	movs	r2, #250	@ 0xfa
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004c16:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <ESP_WakeTest+0x21c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004c1c:	4b28      	ldr	r3, [pc, #160]	@ (8004cc0 <ESP_WakeTest+0x21c>)
 8004c1e:	22fa      	movs	r2, #250	@ 0xfa
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004c24:	4b1c      	ldr	r3, [pc, #112]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004c26:	2204      	movs	r2, #4
 8004c28:	701a      	strb	r2, [r3, #0]

      break;
 8004c2a:	e030      	b.n	8004c8e <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004c2c:	4b25      	ldr	r3, [pc, #148]	@ (8004cc4 <ESP_WakeTest+0x220>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004c32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <ESP_WakeTest+0x1fc>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <ESP_WakeTest+0x204>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f006 ff3b 	bl	800baba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4816      	ldr	r0, [pc, #88]	@ (8004ca4 <ESP_WakeTest+0x200>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	f006 ff34 	bl	800baba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004c52:	4b15      	ldr	r3, [pc, #84]	@ (8004ca8 <ESP_WakeTest+0x204>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	2102      	movs	r1, #2
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f006 ff2e 	bl	800baba <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004c5e:	f002 f8dd 	bl	8006e1c <SetESPMeasurementDone>
      break;
 8004c62:	e014      	b.n	8004c8e <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004c64:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <ESP_WakeTest+0x1f4>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
      break;
 8004c6a:	e010      	b.n	8004c8e <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004c6c:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <ESP_WakeTest+0x21c>)
 8004c6e:	22fa      	movs	r2, #250	@ 0xfa
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004c74:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <ESP_WakeTest+0x21c>)
 8004c76:	22fa      	movs	r2, #250	@ 0xfa
 8004c78:	0112      	lsls	r2, r2, #4
 8004c7a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004c7c:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <ESP_WakeTest+0x21c>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004c82:	e004      	b.n	8004c8e <ESP_WakeTest+0x1ea>
      break;
 8004c84:	46c0      	nop			@ (mov r8, r8)
 8004c86:	e002      	b.n	8004c8e <ESP_WakeTest+0x1ea>
      break;
 8004c88:	46c0      	nop			@ (mov r8, r8)
 8004c8a:	e000      	b.n	8004c8e <ESP_WakeTest+0x1ea>
      break;
 8004c8c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b003      	add	sp, #12
 8004c94:	bd90      	pop	{r4, r7, pc}
 8004c96:	46c0      	nop			@ (mov r8, r8)
 8004c98:	20000938 	.word	0x20000938
 8004c9c:	0801c174 	.word	0x0801c174
 8004ca0:	200004ef 	.word	0x200004ef
 8004ca4:	50000800 	.word	0x50000800
 8004ca8:	50001c00 	.word	0x50001c00
 8004cac:	20000930 	.word	0x20000930
 8004cb0:	200003f0 	.word	0x200003f0
 8004cb4:	20000936 	.word	0x20000936
 8004cb8:	20000935 	.word	0x20000935
 8004cbc:	20000022 	.word	0x20000022
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	20000000 	.word	0x20000000

08004cc8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004cce:	1dfb      	adds	r3, r7, #7
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004cd4:	4bc5      	ldr	r3, [pc, #788]	@ (8004fec <ESP_Upkeep+0x324>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b0e      	cmp	r3, #14
 8004cda:	d900      	bls.n	8004cde <ESP_Upkeep+0x16>
 8004cdc:	e27f      	b.n	80051de <ESP_Upkeep+0x516>
 8004cde:	009a      	lsls	r2, r3, #2
 8004ce0:	4bc3      	ldr	r3, [pc, #780]	@ (8004ff0 <ESP_Upkeep+0x328>)
 8004ce2:	18d3      	adds	r3, r2, r3
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004ce8:	4bc0      	ldr	r3, [pc, #768]	@ (8004fec <ESP_Upkeep+0x324>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
      break;
 8004cee:	e28d      	b.n	800520c <ESP_Upkeep+0x544>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004cf0:	4bc0      	ldr	r3, [pc, #768]	@ (8004ff4 <ESP_Upkeep+0x32c>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4053      	eors	r3, r2
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d036      	beq.n	8004d6c <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	48bd      	ldr	r0, [pc, #756]	@ (8004ff8 <ESP_Upkeep+0x330>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	0019      	movs	r1, r3
 8004d08:	f006 fed7 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	f005 fb3f 	bl	800a390 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004d12:	2380      	movs	r3, #128	@ 0x80
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	48b8      	ldr	r0, [pc, #736]	@ (8004ff8 <ESP_Upkeep+0x330>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	f006 fecd 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004d20:	2001      	movs	r0, #1
 8004d22:	f005 fb35 	bl	800a390 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004d26:	4bb5      	ldr	r3, [pc, #724]	@ (8004ffc <ESP_Upkeep+0x334>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f006 fec4 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004d32:	2001      	movs	r0, #1
 8004d34:	f005 fb2c 	bl	800a390 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004d38:	4bb0      	ldr	r3, [pc, #704]	@ (8004ffc <ESP_Upkeep+0x334>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f006 febb 	bl	800baba <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004d44:	2001      	movs	r0, #1
 8004d46:	f005 fb23 	bl	800a390 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004d4a:	4bac      	ldr	r3, [pc, #688]	@ (8004ffc <ESP_Upkeep+0x334>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2101      	movs	r1, #1
 8004d50:	0018      	movs	r0, r3
 8004d52:	f006 feb2 	bl	800baba <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004d56:	f005 fb11 	bl	800a37c <HAL_GetTick>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	22af      	movs	r2, #175	@ 0xaf
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	189a      	adds	r2, r3, r2
 8004d62:	4ba7      	ldr	r3, [pc, #668]	@ (8005000 <ESP_Upkeep+0x338>)
 8004d64:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004d66:	4ba3      	ldr	r3, [pc, #652]	@ (8004ff4 <ESP_Upkeep+0x32c>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004d6c:	4ba5      	ldr	r3, [pc, #660]	@ (8005004 <ESP_Upkeep+0x33c>)
 8004d6e:	21ff      	movs	r1, #255	@ 0xff
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fe fdb5 	bl	80038e0 <ESP_Receive>
 8004d76:	1e03      	subs	r3, r0, #0
 8004d78:	d100      	bne.n	8004d7c <ESP_Upkeep+0xb4>
 8004d7a:	e23c      	b.n	80051f6 <ESP_Upkeep+0x52e>
        EspState = ESP_STATE_MODE_SELECT;
 8004d7c:	4b9b      	ldr	r3, [pc, #620]	@ (8004fec <ESP_Upkeep+0x324>)
 8004d7e:	220b      	movs	r2, #11
 8004d80:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004d82:	e238      	b.n	80051f6 <ESP_Upkeep+0x52e>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004d84:	4ba0      	ldr	r3, [pc, #640]	@ (8005008 <ESP_Upkeep+0x340>)
 8004d86:	2209      	movs	r2, #9
 8004d88:	2111      	movs	r1, #17
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f013 fc30 	bl	80185f0 <memset>
      if(!InitIsDone || WifiReset){
 8004d90:	4b9e      	ldr	r3, [pc, #632]	@ (800500c <ESP_Upkeep+0x344>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2201      	movs	r2, #1
 8004d96:	4053      	eors	r3, r2
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <ESP_Upkeep+0xde>
 8004d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005010 <ESP_Upkeep+0x348>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01a      	beq.n	8004ddc <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004da6:	4b98      	ldr	r3, [pc, #608]	@ (8005008 <ESP_Upkeep+0x340>)
 8004da8:	4a9a      	ldr	r2, [pc, #616]	@ (8005014 <ESP_Upkeep+0x34c>)
 8004daa:	6811      	ldr	r1, [r2, #0]
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	8891      	ldrh	r1, [r2, #4]
 8004db0:	8099      	strh	r1, [r3, #4]
 8004db2:	7992      	ldrb	r2, [r2, #6]
 8004db4:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004db6:	4b8d      	ldr	r3, [pc, #564]	@ (8004fec <ESP_Upkeep+0x324>)
 8004db8:	2204      	movs	r2, #4
 8004dba:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004dbc:	4b96      	ldr	r3, [pc, #600]	@ (8005018 <ESP_Upkeep+0x350>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004dc2:	4b96      	ldr	r3, [pc, #600]	@ (800501c <ESP_Upkeep+0x354>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004dc8:	4b93      	ldr	r3, [pc, #588]	@ (8005018 <ESP_Upkeep+0x350>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	001a      	movs	r2, r3
 8004dce:	4b8e      	ldr	r3, [pc, #568]	@ (8005008 <ESP_Upkeep+0x340>)
 8004dd0:	5c9a      	ldrb	r2, [r3, r2]
 8004dd2:	4b93      	ldr	r3, [pc, #588]	@ (8005020 <ESP_Upkeep+0x358>)
 8004dd4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004dd6:	4b93      	ldr	r3, [pc, #588]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004ddc:	4b8b      	ldr	r3, [pc, #556]	@ (800500c <ESP_Upkeep+0x344>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01f      	beq.n	8004e24 <ESP_Upkeep+0x15c>
 8004de4:	4b90      	ldr	r3, [pc, #576]	@ (8005028 <ESP_Upkeep+0x360>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2201      	movs	r2, #1
 8004dea:	4053      	eors	r3, r2
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004df2:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <ESP_Upkeep+0x340>)
 8004df4:	4a8d      	ldr	r2, [pc, #564]	@ (800502c <ESP_Upkeep+0x364>)
 8004df6:	6811      	ldr	r1, [r2, #0]
 8004df8:	6019      	str	r1, [r3, #0]
 8004dfa:	8892      	ldrh	r2, [r2, #4]
 8004dfc:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004dfe:	4b7b      	ldr	r3, [pc, #492]	@ (8004fec <ESP_Upkeep+0x324>)
 8004e00:	2204      	movs	r2, #4
 8004e02:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004e04:	4b84      	ldr	r3, [pc, #528]	@ (8005018 <ESP_Upkeep+0x350>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004e0a:	4b84      	ldr	r3, [pc, #528]	@ (800501c <ESP_Upkeep+0x354>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004e10:	4b81      	ldr	r3, [pc, #516]	@ (8005018 <ESP_Upkeep+0x350>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	001a      	movs	r2, r3
 8004e16:	4b7c      	ldr	r3, [pc, #496]	@ (8005008 <ESP_Upkeep+0x340>)
 8004e18:	5c9a      	ldrb	r2, [r3, r2]
 8004e1a:	4b81      	ldr	r3, [pc, #516]	@ (8005020 <ESP_Upkeep+0x358>)
 8004e1c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e1e:	4b81      	ldr	r3, [pc, #516]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8004e24:	4b79      	ldr	r3, [pc, #484]	@ (800500c <ESP_Upkeep+0x344>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d021      	beq.n	8004e70 <ESP_Upkeep+0x1a8>
 8004e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8005028 <ESP_Upkeep+0x360>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01d      	beq.n	8004e70 <ESP_Upkeep+0x1a8>
 8004e34:	4b7e      	ldr	r3, [pc, #504]	@ (8005030 <ESP_Upkeep+0x368>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	4053      	eors	r3, r2
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d016      	beq.n	8004e70 <ESP_Upkeep+0x1a8>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8004e42:	4b7c      	ldr	r3, [pc, #496]	@ (8005034 <ESP_Upkeep+0x36c>)
 8004e44:	881a      	ldrh	r2, [r3, #0]
 8004e46:	4b70      	ldr	r3, [pc, #448]	@ (8005008 <ESP_Upkeep+0x340>)
 8004e48:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004e4a:	4b68      	ldr	r3, [pc, #416]	@ (8004fec <ESP_Upkeep+0x324>)
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004e50:	4b71      	ldr	r3, [pc, #452]	@ (8005018 <ESP_Upkeep+0x350>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8004e56:	4b71      	ldr	r3, [pc, #452]	@ (800501c <ESP_Upkeep+0x354>)
 8004e58:	2204      	movs	r2, #4
 8004e5a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8005018 <ESP_Upkeep+0x350>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	001a      	movs	r2, r3
 8004e62:	4b69      	ldr	r3, [pc, #420]	@ (8005008 <ESP_Upkeep+0x340>)
 8004e64:	5c9a      	ldrb	r2, [r3, r2]
 8004e66:	4b6e      	ldr	r3, [pc, #440]	@ (8005020 <ESP_Upkeep+0x358>)
 8004e68:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest){
 8004e70:	4b66      	ldr	r3, [pc, #408]	@ (800500c <ESP_Upkeep+0x344>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d027      	beq.n	8004ec8 <ESP_Upkeep+0x200>
 8004e78:	4b6b      	ldr	r3, [pc, #428]	@ (8005028 <ESP_Upkeep+0x360>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d023      	beq.n	8004ec8 <ESP_Upkeep+0x200>
 8004e80:	4b6b      	ldr	r3, [pc, #428]	@ (8005030 <ESP_Upkeep+0x368>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01f      	beq.n	8004ec8 <ESP_Upkeep+0x200>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004e88:	4b5f      	ldr	r3, [pc, #380]	@ (8005008 <ESP_Upkeep+0x340>)
 8004e8a:	4a6b      	ldr	r2, [pc, #428]	@ (8005038 <ESP_Upkeep+0x370>)
 8004e8c:	8811      	ldrh	r1, [r2, #0]
 8004e8e:	8019      	strh	r1, [r3, #0]
 8004e90:	7892      	ldrb	r2, [r2, #2]
 8004e92:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004e94:	4b55      	ldr	r3, [pc, #340]	@ (8004fec <ESP_Upkeep+0x324>)
 8004e96:	2204      	movs	r2, #4
 8004e98:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005018 <ESP_Upkeep+0x350>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800501c <ESP_Upkeep+0x354>)
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8004ea6:	f005 fa69 	bl	800a37c <HAL_GetTick>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	4b63      	ldr	r3, [pc, #396]	@ (800503c <ESP_Upkeep+0x374>)
 8004eae:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8004eb0:	f004 f8b6 	bl	8009020 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004eb4:	4b58      	ldr	r3, [pc, #352]	@ (8005018 <ESP_Upkeep+0x350>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	001a      	movs	r2, r3
 8004eba:	4b53      	ldr	r3, [pc, #332]	@ (8005008 <ESP_Upkeep+0x340>)
 8004ebc:	5c9a      	ldrb	r2, [r3, r2]
 8004ebe:	4b58      	ldr	r3, [pc, #352]	@ (8005020 <ESP_Upkeep+0x358>)
 8004ec0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004ec2:	4b58      	ldr	r3, [pc, #352]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004ec8:	4b5d      	ldr	r3, [pc, #372]	@ (8005040 <ESP_Upkeep+0x378>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d100      	bne.n	8004ed2 <ESP_Upkeep+0x20a>
 8004ed0:	e193      	b.n	80051fa <ESP_Upkeep+0x532>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8005008 <ESP_Upkeep+0x340>)
 8004ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8005044 <ESP_Upkeep+0x37c>)
 8004ed6:	6811      	ldr	r1, [r2, #0]
 8004ed8:	6019      	str	r1, [r3, #0]
 8004eda:	7912      	ldrb	r2, [r2, #4]
 8004edc:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004ede:	4b43      	ldr	r3, [pc, #268]	@ (8004fec <ESP_Upkeep+0x324>)
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8005018 <ESP_Upkeep+0x350>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004eea:	4b4c      	ldr	r3, [pc, #304]	@ (800501c <ESP_Upkeep+0x354>)
 8004eec:	2203      	movs	r2, #3
 8004eee:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004ef0:	f004 f896 	bl	8009020 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004ef4:	4b48      	ldr	r3, [pc, #288]	@ (8005018 <ESP_Upkeep+0x350>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	001a      	movs	r2, r3
 8004efa:	4b43      	ldr	r3, [pc, #268]	@ (8005008 <ESP_Upkeep+0x340>)
 8004efc:	5c9a      	ldrb	r2, [r3, r2]
 8004efe:	4b48      	ldr	r3, [pc, #288]	@ (8005020 <ESP_Upkeep+0x358>)
 8004f00:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004f02:	4b48      	ldr	r3, [pc, #288]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004f08:	e177      	b.n	80051fa <ESP_Upkeep+0x532>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004f0a:	4b45      	ldr	r3, [pc, #276]	@ (8005020 <ESP_Upkeep+0x358>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	1dfc      	adds	r4, r7, #7
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7ff fc45 	bl	80047a0 <AT_Send>
 8004f16:	0003      	movs	r3, r0
 8004f18:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d100      	bne.n	8004f24 <ESP_Upkeep+0x25c>
 8004f22:	e16c      	b.n	80051fe <ESP_Upkeep+0x536>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004f24:	4b31      	ldr	r3, [pc, #196]	@ (8004fec <ESP_Upkeep+0x324>)
 8004f26:	2203      	movs	r2, #3
 8004f28:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004f2a:	e168      	b.n	80051fe <ESP_Upkeep+0x536>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f2c:	4b34      	ldr	r3, [pc, #208]	@ (8005000 <ESP_Upkeep+0x338>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f004 fe47 	bl	8009bc4 <TimestampIsReached>
 8004f36:	1e03      	subs	r3, r0, #0
 8004f38:	d100      	bne.n	8004f3c <ESP_Upkeep+0x274>
 8004f3a:	e162      	b.n	8005202 <ESP_Upkeep+0x53a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f3c:	4b39      	ldr	r3, [pc, #228]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff fb2f 	bl	80045a4 <DMA_ProcessBuffer>
 8004f46:	0003      	movs	r3, r0
 8004f48:	001a      	movs	r2, r3
 8004f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005048 <ESP_Upkeep+0x380>)
 8004f4c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005048 <ESP_Upkeep+0x380>)
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	4b34      	ldr	r3, [pc, #208]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	1dbc      	adds	r4, r7, #6
 8004f58:	0019      	movs	r1, r3
 8004f5a:	0010      	movs	r0, r2
 8004f5c:	f7ff fbea 	bl	8004734 <ATCompare>
 8004f60:	0003      	movs	r3, r0
 8004f62:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004f64:	4b38      	ldr	r3, [pc, #224]	@ (8005048 <ESP_Upkeep+0x380>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d10f      	bne.n	8004f8c <ESP_Upkeep+0x2c4>
          if(ATCommand == AT_SENDDATA){
 8004f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005020 <ESP_Upkeep+0x358>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b0f      	cmp	r3, #15
 8004f72:	d108      	bne.n	8004f86 <ESP_Upkeep+0x2be>
            ATCommand = AT_HTTPCPOST;
 8004f74:	4b2a      	ldr	r3, [pc, #168]	@ (8005020 <ESP_Upkeep+0x358>)
 8004f76:	220e      	movs	r2, #14
 8004f78:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8004f80:	4b25      	ldr	r3, [pc, #148]	@ (8005018 <ESP_Upkeep+0x350>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8004f86:	4b19      	ldr	r3, [pc, #100]	@ (8004fec <ESP_Upkeep+0x324>)
 8004f88:	2204      	movs	r2, #4
 8004f8a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005048 <ESP_Upkeep+0x380>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d106      	bne.n	8004fa2 <ESP_Upkeep+0x2da>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004f94:	f005 f9f2 	bl	800a37c <HAL_GetTick>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	330a      	adds	r3, #10
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	4b18      	ldr	r3, [pc, #96]	@ (8005000 <ESP_Upkeep+0x338>)
 8004fa0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004fa2:	4b29      	ldr	r3, [pc, #164]	@ (8005048 <ESP_Upkeep+0x380>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d116      	bne.n	8004fd8 <ESP_Upkeep+0x310>
          if(ATCommand != AT_SENDDATA){
 8004faa:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <ESP_Upkeep+0x358>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d003      	beq.n	8004fba <ESP_Upkeep+0x2f2>
            EspState = ESP_STATE_SEND;
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fec <ESP_Upkeep+0x324>)
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e00e      	b.n	8004fd8 <ESP_Upkeep+0x310>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004fba:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <ESP_Upkeep+0x358>)
 8004fbc:	220e      	movs	r2, #14
 8004fbe:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004fc0:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <ESP_Upkeep+0x350>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <ESP_Upkeep+0x350>)
 8004fca:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004fcc:	4b15      	ldr	r3, [pc, #84]	@ (8005024 <ESP_Upkeep+0x35c>)
 8004fce:	2202      	movs	r2, #2
 8004fd0:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004fd2:	4b06      	ldr	r3, [pc, #24]	@ (8004fec <ESP_Upkeep+0x324>)
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004fd8:	1dbb      	adds	r3, r7, #6
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d100      	bne.n	8004fe2 <ESP_Upkeep+0x31a>
 8004fe0:	e10f      	b.n	8005202 <ESP_Upkeep+0x53a>
          EspState = ESP_STATE_NEXT_AT;
 8004fe2:	4b02      	ldr	r3, [pc, #8]	@ (8004fec <ESP_Upkeep+0x324>)
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004fe8:	e10b      	b.n	8005202 <ESP_Upkeep+0x53a>
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	20000021 	.word	0x20000021
 8004ff0:	0801c18c 	.word	0x0801c18c
 8004ff4:	200004ef 	.word	0x200004ef
 8004ff8:	50000800 	.word	0x50000800
 8004ffc:	50001c00 	.word	0x50001c00
 8005000:	20000930 	.word	0x20000930
 8005004:	200003f0 	.word	0x200003f0
 8005008:	20000924 	.word	0x20000924
 800500c:	200004f0 	.word	0x200004f0
 8005010:	200004f1 	.word	0x200004f1
 8005014:	20000004 	.word	0x20000004
 8005018:	2000092e 	.word	0x2000092e
 800501c:	20000937 	.word	0x20000937
 8005020:	20000936 	.word	0x20000936
 8005024:	20000935 	.word	0x20000935
 8005028:	200004f3 	.word	0x200004f3
 800502c:	20000014 	.word	0x20000014
 8005030:	200004f4 	.word	0x200004f4
 8005034:	20000010 	.word	0x20000010
 8005038:	2000000c 	.word	0x2000000c
 800503c:	20000504 	.word	0x20000504
 8005040:	200004f2 	.word	0x200004f2
 8005044:	2000001c 	.word	0x2000001c
 8005048:	20000023 	.word	0x20000023

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 800504c:	4b72      	ldr	r3, [pc, #456]	@ (8005218 <ESP_Upkeep+0x550>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	3301      	adds	r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	4b70      	ldr	r3, [pc, #448]	@ (8005218 <ESP_Upkeep+0x550>)
 8005056:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005058:	4b6f      	ldr	r3, [pc, #444]	@ (8005218 <ESP_Upkeep+0x550>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	001a      	movs	r2, r3
 800505e:	4b6f      	ldr	r3, [pc, #444]	@ (800521c <ESP_Upkeep+0x554>)
 8005060:	5c9a      	ldrb	r2, [r3, r2]
 8005062:	4b6f      	ldr	r3, [pc, #444]	@ (8005220 <ESP_Upkeep+0x558>)
 8005064:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005066:	4b6e      	ldr	r3, [pc, #440]	@ (8005220 <ESP_Upkeep+0x558>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d102      	bne.n	8005074 <ESP_Upkeep+0x3ac>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 800506e:	4b6d      	ldr	r3, [pc, #436]	@ (8005224 <ESP_Upkeep+0x55c>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005074:	4b6a      	ldr	r3, [pc, #424]	@ (8005220 <ESP_Upkeep+0x558>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b0e      	cmp	r3, #14
 800507a:	d102      	bne.n	8005082 <ESP_Upkeep+0x3ba>
        ATExpectation = RECEIVE_EXPECTATION_START;
 800507c:	4b69      	ldr	r3, [pc, #420]	@ (8005224 <ESP_Upkeep+0x55c>)
 800507e:	2202      	movs	r2, #2
 8005080:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005082:	4b67      	ldr	r3, [pc, #412]	@ (8005220 <ESP_Upkeep+0x558>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b0e      	cmp	r3, #14
 8005088:	d006      	beq.n	8005098 <ESP_Upkeep+0x3d0>
 800508a:	4b65      	ldr	r3, [pc, #404]	@ (8005220 <ESP_Upkeep+0x558>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d002      	beq.n	8005098 <ESP_Upkeep+0x3d0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005092:	4b64      	ldr	r3, [pc, #400]	@ (8005224 <ESP_Upkeep+0x55c>)
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005098:	4b63      	ldr	r3, [pc, #396]	@ (8005228 <ESP_Upkeep+0x560>)
 800509a:	2204      	movs	r2, #4
 800509c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 800509e:	4b60      	ldr	r3, [pc, #384]	@ (8005220 <ESP_Upkeep+0x558>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b11      	cmp	r3, #17
 80050a4:	d000      	beq.n	80050a8 <ESP_Upkeep+0x3e0>
 80050a6:	e0ae      	b.n	8005206 <ESP_Upkeep+0x53e>
        if(Mode == AT_MODE_SEND){
 80050a8:	4b60      	ldr	r3, [pc, #384]	@ (800522c <ESP_Upkeep+0x564>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d11d      	bne.n	80050ec <ESP_Upkeep+0x424>
          ESPTimeStamp = HAL_GetTick() + 300000;
 80050b0:	f005 f964 	bl	800a37c <HAL_GetTick>
 80050b4:	0003      	movs	r3, r0
 80050b6:	4a5e      	ldr	r2, [pc, #376]	@ (8005230 <ESP_Upkeep+0x568>)
 80050b8:	189a      	adds	r2, r3, r2
 80050ba:	4b5e      	ldr	r3, [pc, #376]	@ (8005234 <ESP_Upkeep+0x56c>)
 80050bc:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 80050be:	f003 ffc7 	bl	8009050 <ResetESPIndicator>
          clearDMABuffer();
 80050c2:	f7ff fb27 	bl	8004714 <clearDMABuffer>
          stop = HAL_GetTick();
 80050c6:	f005 f959 	bl	800a37c <HAL_GetTick>
 80050ca:	0002      	movs	r2, r0
 80050cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <ESP_Upkeep+0x570>)
 80050ce:	601a      	str	r2, [r3, #0]
          Debug("Message send in %ul ms", (stop-start));
 80050d0:	4b59      	ldr	r3, [pc, #356]	@ (8005238 <ESP_Upkeep+0x570>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4b59      	ldr	r3, [pc, #356]	@ (800523c <ESP_Upkeep+0x574>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	4a59      	ldr	r2, [pc, #356]	@ (8005240 <ESP_Upkeep+0x578>)
 80050dc:	4959      	ldr	r1, [pc, #356]	@ (8005244 <ESP_Upkeep+0x57c>)
 80050de:	2003      	movs	r0, #3
 80050e0:	f004 fdc6 	bl	8009c70 <CreateLine>
          EspState = ESP_STATE_DEINIT;
 80050e4:	4b50      	ldr	r3, [pc, #320]	@ (8005228 <ESP_Upkeep+0x560>)
 80050e6:	220d      	movs	r2, #13
 80050e8:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80050ea:	e08c      	b.n	8005206 <ESP_Upkeep+0x53e>
          EspState = ESP_STATE_RESET;
 80050ec:	4b4e      	ldr	r3, [pc, #312]	@ (8005228 <ESP_Upkeep+0x560>)
 80050ee:	2209      	movs	r2, #9
 80050f0:	701a      	strb	r2, [r3, #0]
    break;
 80050f2:	e088      	b.n	8005206 <ESP_Upkeep+0x53e>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80050f4:	4b54      	ldr	r3, [pc, #336]	@ (8005248 <ESP_Upkeep+0x580>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80050fa:	4b54      	ldr	r3, [pc, #336]	@ (800524c <ESP_Upkeep+0x584>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	2101      	movs	r1, #1
 8005100:	0018      	movs	r0, r3
 8005102:	f006 fcda 	bl	800baba <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005106:	2001      	movs	r0, #1
 8005108:	f005 f942 	bl	800a390 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	484f      	ldr	r0, [pc, #316]	@ (8005250 <ESP_Upkeep+0x588>)
 8005112:	2200      	movs	r2, #0
 8005114:	0019      	movs	r1, r3
 8005116:	f006 fcd0 	bl	800baba <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800511a:	2001      	movs	r0, #1
 800511c:	f005 f938 	bl	800a390 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005120:	4b4a      	ldr	r3, [pc, #296]	@ (800524c <ESP_Upkeep+0x584>)
 8005122:	2200      	movs	r2, #0
 8005124:	2102      	movs	r1, #2
 8005126:	0018      	movs	r0, r3
 8005128:	f006 fcc7 	bl	800baba <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 800512c:	4b3e      	ldr	r3, [pc, #248]	@ (8005228 <ESP_Upkeep+0x560>)
 800512e:	2209      	movs	r2, #9
 8005130:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005132:	2001      	movs	r0, #1
 8005134:	f005 f92c 	bl	800a390 <HAL_Delay>
      break;
 8005138:	e068      	b.n	800520c <ESP_Upkeep+0x544>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 800513a:	4b3e      	ldr	r3, [pc, #248]	@ (8005234 <ESP_Upkeep+0x56c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	0018      	movs	r0, r3
 8005140:	f004 fd40 	bl	8009bc4 <TimestampIsReached>
 8005144:	1e03      	subs	r3, r0, #0
 8005146:	d103      	bne.n	8005150 <ESP_Upkeep+0x488>
 8005148:	4b42      	ldr	r3, [pc, #264]	@ (8005254 <ESP_Upkeep+0x58c>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d05c      	beq.n	800520a <ESP_Upkeep+0x542>
        if(Mode == AT_MODE_INIT){
 8005150:	4b36      	ldr	r3, [pc, #216]	@ (800522c <ESP_Upkeep+0x564>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <ESP_Upkeep+0x49c>
          InitIsDone = true;
 8005158:	4b3f      	ldr	r3, [pc, #252]	@ (8005258 <ESP_Upkeep+0x590>)
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800515e:	4b32      	ldr	r3, [pc, #200]	@ (8005228 <ESP_Upkeep+0x560>)
 8005160:	220b      	movs	r2, #11
 8005162:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005164:	4b31      	ldr	r3, [pc, #196]	@ (800522c <ESP_Upkeep+0x564>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d108      	bne.n	800517e <ESP_Upkeep+0x4b6>
          ConnectionMade = true;
 800516c:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <ESP_Upkeep+0x594>)
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005172:	4b3b      	ldr	r3, [pc, #236]	@ (8005260 <ESP_Upkeep+0x598>)
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005178:	4b2b      	ldr	r3, [pc, #172]	@ (8005228 <ESP_Upkeep+0x560>)
 800517a:	220b      	movs	r2, #11
 800517c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800517e:	4b2b      	ldr	r3, [pc, #172]	@ (800522c <ESP_Upkeep+0x564>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d102      	bne.n	800518c <ESP_Upkeep+0x4c4>
          EspState = ESP_STATE_INIT;
 8005186:	4b28      	ldr	r3, [pc, #160]	@ (8005228 <ESP_Upkeep+0x560>)
 8005188:	2202      	movs	r2, #2
 800518a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800518c:	4b27      	ldr	r3, [pc, #156]	@ (800522c <ESP_Upkeep+0x564>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d102      	bne.n	800519a <ESP_Upkeep+0x4d2>
          EspState = ESP_STATE_CONFIG;
 8005194:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <ESP_Upkeep+0x560>)
 8005196:	220e      	movs	r2, #14
 8005198:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 800519a:	4b24      	ldr	r3, [pc, #144]	@ (800522c <ESP_Upkeep+0x564>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d133      	bne.n	800520a <ESP_Upkeep+0x542>
          EspState = ESP_STATE_MODE_SELECT;
 80051a2:	4b21      	ldr	r3, [pc, #132]	@ (8005228 <ESP_Upkeep+0x560>)
 80051a4:	220b      	movs	r2, #11
 80051a6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 80051a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005264 <ESP_Upkeep+0x59c>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 80051ae:	e02c      	b.n	800520a <ESP_Upkeep+0x542>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 80051b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005268 <ESP_Upkeep+0x5a0>)
 80051b2:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <ESP_Upkeep+0x57c>)
 80051b4:	0019      	movs	r1, r3
 80051b6:	2003      	movs	r0, #3
 80051b8:	f004 fd5a 	bl	8009c70 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 80051bc:	f011 ff78 	bl	80170b0 <GetUsbRxPointer>
 80051c0:	0003      	movs	r3, r0
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 f8c8 	bl	8005358 <Process_PC_Config>

      break;
 80051c8:	e020      	b.n	800520c <ESP_Upkeep+0x544>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80051ca:	4a28      	ldr	r2, [pc, #160]	@ (800526c <ESP_Upkeep+0x5a4>)
 80051cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005244 <ESP_Upkeep+0x57c>)
 80051ce:	0019      	movs	r1, r3
 80051d0:	2003      	movs	r0, #3
 80051d2:	f004 fd4d 	bl	8009c70 <CreateLine>
      EspState = ESP_STATE_INIT;
 80051d6:	4b14      	ldr	r3, [pc, #80]	@ (8005228 <ESP_Upkeep+0x560>)
 80051d8:	2202      	movs	r2, #2
 80051da:	701a      	strb	r2, [r3, #0]
      break;
 80051dc:	e016      	b.n	800520c <ESP_Upkeep+0x544>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 80051de:	4a24      	ldr	r2, [pc, #144]	@ (8005270 <ESP_Upkeep+0x5a8>)
 80051e0:	4b18      	ldr	r3, [pc, #96]	@ (8005244 <ESP_Upkeep+0x57c>)
 80051e2:	0019      	movs	r1, r3
 80051e4:	2003      	movs	r0, #3
 80051e6:	f004 fd43 	bl	8009c70 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80051ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <ESP_Upkeep+0x560>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	701a      	strb	r2, [r3, #0]
      break;
 80051f0:	e00c      	b.n	800520c <ESP_Upkeep+0x544>
      break;
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	e00a      	b.n	800520c <ESP_Upkeep+0x544>
      break;
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	e008      	b.n	800520c <ESP_Upkeep+0x544>
    break;
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	e006      	b.n	800520c <ESP_Upkeep+0x544>
         break;
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	e004      	b.n	800520c <ESP_Upkeep+0x544>
      break;
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	e002      	b.n	800520c <ESP_Upkeep+0x544>
    break;
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	e000      	b.n	800520c <ESP_Upkeep+0x544>
      break;
 800520a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <ESP_Upkeep+0x560>)
 800520e:	781b      	ldrb	r3, [r3, #0]
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b003      	add	sp, #12
 8005216:	bd90      	pop	{r4, r7, pc}
 8005218:	2000092e 	.word	0x2000092e
 800521c:	20000924 	.word	0x20000924
 8005220:	20000936 	.word	0x20000936
 8005224:	20000935 	.word	0x20000935
 8005228:	20000021 	.word	0x20000021
 800522c:	20000937 	.word	0x20000937
 8005230:	000493e0 	.word	0x000493e0
 8005234:	20000930 	.word	0x20000930
 8005238:	20000508 	.word	0x20000508
 800523c:	20000504 	.word	0x20000504
 8005240:	0801b9a4 	.word	0x0801b9a4
 8005244:	0801b420 	.word	0x0801b420
 8005248:	200004ef 	.word	0x200004ef
 800524c:	50001c00 	.word	0x50001c00
 8005250:	50000800 	.word	0x50000800
 8005254:	200004f2 	.word	0x200004f2
 8005258:	200004f0 	.word	0x200004f0
 800525c:	200004f3 	.word	0x200004f3
 8005260:	200004f5 	.word	0x200004f5
 8005264:	200004f4 	.word	0x200004f4
 8005268:	0801b9bc 	.word	0x0801b9bc
 800526c:	0801b9d4 	.word	0x0801b9d4
 8005270:	0801b9e8 	.word	0x0801b9e8

08005274 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 800527c:	4b09      	ldr	r3, [pc, #36]	@ (80052a4 <I2CSensors_Init+0x30>)
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005282:	4a09      	ldr	r2, [pc, #36]	@ (80052a8 <I2CSensors_Init+0x34>)
 8005284:	4b09      	ldr	r3, [pc, #36]	@ (80052ac <I2CSensors_Init+0x38>)
 8005286:	0011      	movs	r1, r2
 8005288:	0018      	movs	r0, r3
 800528a:	f000 fe7f 	bl	8005f8c <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800528e:	4a06      	ldr	r2, [pc, #24]	@ (80052a8 <I2CSensors_Init+0x34>)
 8005290:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <I2CSensors_Init+0x38>)
 8005292:	0011      	movs	r1, r2
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fce9 	bl	8005c6c <Gas_Init>
}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b002      	add	sp, #8
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	20000a24 	.word	0x20000a24
 80052a8:	08005305 	.word	0x08005305
 80052ac:	080052b1 	.word	0x080052b1

080052b0 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80052b0:	b5b0      	push	{r4, r5, r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6039      	str	r1, [r7, #0]
 80052b8:	0011      	movs	r1, r2
 80052ba:	1dfb      	adds	r3, r7, #7
 80052bc:	1c02      	adds	r2, r0, #0
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	1dbb      	adds	r3, r7, #6
 80052c2:	1c0a      	adds	r2, r1, #0
 80052c4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80052c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <ReadI2C+0x50>)
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	1dfb      	adds	r3, r7, #7
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	18db      	adds	r3, r3, r3
 80052d2:	b299      	uxth	r1, r3
 80052d4:	1dbb      	adds	r3, r7, #6
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	250f      	movs	r5, #15
 80052dc:	197c      	adds	r4, r7, r5
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	f006 fda4 	bl	800be2c <HAL_I2C_Master_Receive_DMA>
 80052e4:	0003      	movs	r3, r0
 80052e6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80052e8:	197b      	adds	r3, r7, r5
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <ReadI2C+0x44>
        return false;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <ReadI2C+0x46>
    }
    return true;
 80052f4:	2301      	movs	r3, #1
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b004      	add	sp, #16
 80052fc:	bdb0      	pop	{r4, r5, r7, pc}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	20000a24 	.word	0x20000a24

08005304 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005304:	b5b0      	push	{r4, r5, r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6039      	str	r1, [r7, #0]
 800530c:	0011      	movs	r1, r2
 800530e:	1dfb      	adds	r3, r7, #7
 8005310:	1c02      	adds	r2, r0, #0
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	1dbb      	adds	r3, r7, #6
 8005316:	1c0a      	adds	r2, r1, #0
 8005318:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800531a:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <WriteI2C+0x50>)
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	1dfb      	adds	r3, r7, #7
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	18db      	adds	r3, r3, r3
 8005326:	b299      	uxth	r1, r3
 8005328:	1dbb      	adds	r3, r7, #6
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	250f      	movs	r5, #15
 8005330:	197c      	adds	r4, r7, r5
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	f006 fc74 	bl	800bc20 <HAL_I2C_Master_Transmit_DMA>
 8005338:	0003      	movs	r3, r0
 800533a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800533c:	197b      	adds	r3, r7, r5
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <WriteI2C+0x44>
        return false;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <WriteI2C+0x46>
    }
    return true;
 8005348:	2301      	movs	r3, #1
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b004      	add	sp, #16
 8005350:	bdb0      	pop	{r4, r5, r7, pc}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	20000a24 	.word	0x20000a24

08005358 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b0c3      	sub	sp, #268	@ 0x10c
 800535c:	af3e      	add	r7, sp, #248	@ 0xf8
 800535e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005360:	f011 fec6 	bl	80170f0 <GetUsbRxDataSize>
 8005364:	0003      	movs	r3, r0
 8005366:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b05      	cmp	r3, #5
 800536c:	d971      	bls.n	8005452 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2123      	movs	r1, #35	@ 0x23
 8005372:	0018      	movs	r0, r3
 8005374:	f013 f944 	bl	8018600 <strchr>
 8005378:	0003      	movs	r3, r0
 800537a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d065      	beq.n	800544e <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	785a      	ldrb	r2, [r3, #1]
 8005386:	4b34      	ldr	r3, [pc, #208]	@ (8005458 <Process_PC_Config+0x100>)
 8005388:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	789a      	ldrb	r2, [r3, #2]
 800538e:	4b32      	ldr	r3, [pc, #200]	@ (8005458 <Process_PC_Config+0x100>)
 8005390:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005392:	4b31      	ldr	r3, [pc, #196]	@ (8005458 <Process_PC_Config+0x100>)
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	3305      	adds	r3, #5
 8005398:	001a      	movs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4293      	cmp	r3, r2
 800539e:	d351      	bcc.n	8005444 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	1cd9      	adds	r1, r3, #3
 80053a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005458 <Process_PC_Config+0x100>)
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	001a      	movs	r2, r3
 80053aa:	4b2c      	ldr	r3, [pc, #176]	@ (800545c <Process_PC_Config+0x104>)
 80053ac:	0018      	movs	r0, r3
 80053ae:	f013 f9e9 	bl	8018784 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80053b2:	4b29      	ldr	r3, [pc, #164]	@ (8005458 <Process_PC_Config+0x100>)
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	3303      	adds	r3, #3
 80053b8:	001a      	movs	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	189b      	adds	r3, r3, r2
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	b21a      	sxth	r2, r3
 80053c4:	4b24      	ldr	r3, [pc, #144]	@ (8005458 <Process_PC_Config+0x100>)
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	3304      	adds	r3, #4
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	18cb      	adds	r3, r1, r3
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	b299      	uxth	r1, r3
 80053d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005458 <Process_PC_Config+0x100>)
 80053da:	2381      	movs	r3, #129	@ 0x81
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <Process_PC_Config+0x100>)
 80053e2:	2381      	movs	r3, #129	@ 0x81
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	5ad4      	ldrh	r4, [r2, r3]
 80053e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <Process_PC_Config+0x100>)
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	3303      	adds	r3, #3
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	0011      	movs	r1, r2
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 f975 	bl	80056e4 <CRC16_ARC>
 80053fa:	0003      	movs	r3, r0
 80053fc:	429c      	cmp	r4, r3
 80053fe:	d007      	beq.n	8005410 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005400:	4b15      	ldr	r3, [pc, #84]	@ (8005458 <Process_PC_Config+0x100>)
 8005402:	785a      	ldrb	r2, [r3, #1]
 8005404:	4b15      	ldr	r3, [pc, #84]	@ (800545c <Process_PC_Config+0x104>)
 8005406:	0019      	movs	r1, r3
 8005408:	2001      	movs	r0, #1
 800540a:	f000 f919 	bl	8005640 <Create_Message>
 800540e:	e016      	b.n	800543e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005410:	4c11      	ldr	r4, [pc, #68]	@ (8005458 <Process_PC_Config+0x100>)
 8005412:	466b      	mov	r3, sp
 8005414:	0018      	movs	r0, r3
 8005416:	0023      	movs	r3, r4
 8005418:	3310      	adds	r3, #16
 800541a:	22f4      	movs	r2, #244	@ 0xf4
 800541c:	0019      	movs	r1, r3
 800541e:	f013 f9b1 	bl	8018784 <memcpy>
 8005422:	6820      	ldr	r0, [r4, #0]
 8005424:	6861      	ldr	r1, [r4, #4]
 8005426:	68a2      	ldr	r2, [r4, #8]
 8005428:	68e3      	ldr	r3, [r4, #12]
 800542a:	f000 f819 	bl	8005460 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 800542e:	4b0a      	ldr	r3, [pc, #40]	@ (8005458 <Process_PC_Config+0x100>)
 8005430:	7818      	ldrb	r0, [r3, #0]
 8005432:	4b09      	ldr	r3, [pc, #36]	@ (8005458 <Process_PC_Config+0x100>)
 8005434:	785a      	ldrb	r2, [r3, #1]
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <Process_PC_Config+0x104>)
 8005438:	0019      	movs	r1, r3
 800543a:	f000 f901 	bl	8005640 <Create_Message>
                }
                ResetUsbRxDataSize();
 800543e:	f011 fe3f 	bl	80170c0 <ResetUsbRxDataSize>
                return;
 8005442:	e006      	b.n	8005452 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	0018      	movs	r0, r3
 8005448:	f011 fe5c 	bl	8017104 <GetUsbRxNextChunk>
 800544c:	e001      	b.n	8005452 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 800544e:	f011 fe37 	bl	80170c0 <ResetUsbRxDataSize>
        }
    }
}
 8005452:	46bd      	mov	sp, r7
 8005454:	b005      	add	sp, #20
 8005456:	bd90      	pop	{r4, r7, pc}
 8005458:	20000a28 	.word	0x20000a28
 800545c:	20000a2a 	.word	0x20000a2a

08005460 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005460:	b084      	sub	sp, #16
 8005462:	b5b0      	push	{r4, r5, r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	2518      	movs	r5, #24
 800546a:	197c      	adds	r4, r7, r5
 800546c:	6020      	str	r0, [r4, #0]
 800546e:	6061      	str	r1, [r4, #4]
 8005470:	60a2      	str	r2, [r4, #8]
 8005472:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005474:	197b      	adds	r3, r7, r5
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2bfe      	cmp	r3, #254	@ 0xfe
 800547a:	d100      	bne.n	800547e <ProcessCmd+0x1e>
 800547c:	e09c      	b.n	80055b8 <ProcessCmd+0x158>
 800547e:	dd00      	ble.n	8005482 <ProcessCmd+0x22>
 8005480:	e0bc      	b.n	80055fc <ProcessCmd+0x19c>
 8005482:	2b0c      	cmp	r3, #12
 8005484:	dc0a      	bgt.n	800549c <ProcessCmd+0x3c>
 8005486:	2b00      	cmp	r3, #0
 8005488:	da00      	bge.n	800548c <ProcessCmd+0x2c>
 800548a:	e0b7      	b.n	80055fc <ProcessCmd+0x19c>
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d900      	bls.n	8005492 <ProcessCmd+0x32>
 8005490:	e0b4      	b.n	80055fc <ProcessCmd+0x19c>
 8005492:	009a      	lsls	r2, r3, #2
 8005494:	4b5d      	ldr	r3, [pc, #372]	@ (800560c <ProcessCmd+0x1ac>)
 8005496:	18d3      	adds	r3, r2, r3
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	469f      	mov	pc, r3
 800549c:	2bfd      	cmp	r3, #253	@ 0xfd
 800549e:	d100      	bne.n	80054a2 <ProcessCmd+0x42>
 80054a0:	e084      	b.n	80055ac <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 80054a2:	e0ab      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054a4:	2118      	movs	r1, #24
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	001a      	movs	r2, r3
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	1c99      	adds	r1, r3, #2
 80054b0:	4857      	ldr	r0, [pc, #348]	@ (8005610 <ProcessCmd+0x1b0>)
 80054b2:	230c      	movs	r3, #12
 80054b4:	f7fe f882 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054b8:	e0a0      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054ba:	2118      	movs	r1, #24
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	001a      	movs	r2, r3
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	1c99      	adds	r1, r3, #2
 80054c6:	4853      	ldr	r0, [pc, #332]	@ (8005614 <ProcessCmd+0x1b4>)
 80054c8:	230c      	movs	r3, #12
 80054ca:	f7fe f877 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054ce:	e095      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054d0:	2118      	movs	r1, #24
 80054d2:	187b      	adds	r3, r7, r1
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	001a      	movs	r2, r3
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	1c99      	adds	r1, r3, #2
 80054dc:	484e      	ldr	r0, [pc, #312]	@ (8005618 <ProcessCmd+0x1b8>)
 80054de:	230c      	movs	r3, #12
 80054e0:	f7fe f86c 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054e4:	e08a      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054e6:	2118      	movs	r1, #24
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	001a      	movs	r2, r3
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	1c99      	adds	r1, r3, #2
 80054f2:	484a      	ldr	r0, [pc, #296]	@ (800561c <ProcessCmd+0x1bc>)
 80054f4:	230c      	movs	r3, #12
 80054f6:	f7fe f861 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054fa:	e07f      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054fc:	2118      	movs	r1, #24
 80054fe:	187b      	adds	r3, r7, r1
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	001a      	movs	r2, r3
 8005504:	187b      	adds	r3, r7, r1
 8005506:	1c99      	adds	r1, r3, #2
 8005508:	4845      	ldr	r0, [pc, #276]	@ (8005620 <ProcessCmd+0x1c0>)
 800550a:	230c      	movs	r3, #12
 800550c:	f7fe f856 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005510:	e074      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005512:	2118      	movs	r1, #24
 8005514:	187b      	adds	r3, r7, r1
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	001a      	movs	r2, r3
 800551a:	187b      	adds	r3, r7, r1
 800551c:	1c99      	adds	r1, r3, #2
 800551e:	4841      	ldr	r0, [pc, #260]	@ (8005624 <ProcessCmd+0x1c4>)
 8005520:	230c      	movs	r3, #12
 8005522:	f7fe f84b 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005526:	e069      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005528:	2118      	movs	r1, #24
 800552a:	187b      	adds	r3, r7, r1
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	001a      	movs	r2, r3
 8005530:	187b      	adds	r3, r7, r1
 8005532:	1c99      	adds	r1, r3, #2
 8005534:	483c      	ldr	r0, [pc, #240]	@ (8005628 <ProcessCmd+0x1c8>)
 8005536:	230c      	movs	r3, #12
 8005538:	f7fe f840 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800553c:	e05e      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800553e:	2118      	movs	r1, #24
 8005540:	187b      	adds	r3, r7, r1
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	001a      	movs	r2, r3
 8005546:	187b      	adds	r3, r7, r1
 8005548:	1c99      	adds	r1, r3, #2
 800554a:	4838      	ldr	r0, [pc, #224]	@ (800562c <ProcessCmd+0x1cc>)
 800554c:	231e      	movs	r3, #30
 800554e:	f7fe f835 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005552:	e053      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005554:	2118      	movs	r1, #24
 8005556:	187b      	adds	r3, r7, r1
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	001a      	movs	r2, r3
 800555c:	187b      	adds	r3, r7, r1
 800555e:	1c99      	adds	r1, r3, #2
 8005560:	4833      	ldr	r0, [pc, #204]	@ (8005630 <ProcessCmd+0x1d0>)
 8005562:	230c      	movs	r3, #12
 8005564:	f7fe f82a 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005568:	e048      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800556a:	2118      	movs	r1, #24
 800556c:	187b      	adds	r3, r7, r1
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	001a      	movs	r2, r3
 8005572:	187b      	adds	r3, r7, r1
 8005574:	1c99      	adds	r1, r3, #2
 8005576:	482f      	ldr	r0, [pc, #188]	@ (8005634 <ProcessCmd+0x1d4>)
 8005578:	230c      	movs	r3, #12
 800557a:	f7fe f81f 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800557e:	e03d      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005580:	2118      	movs	r1, #24
 8005582:	187b      	adds	r3, r7, r1
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	001a      	movs	r2, r3
 8005588:	187b      	adds	r3, r7, r1
 800558a:	1c99      	adds	r1, r3, #2
 800558c:	482a      	ldr	r0, [pc, #168]	@ (8005638 <ProcessCmd+0x1d8>)
 800558e:	230c      	movs	r3, #12
 8005590:	f7fe f814 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005594:	e032      	b.n	80055fc <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005596:	2118      	movs	r1, #24
 8005598:	187b      	adds	r3, r7, r1
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	001a      	movs	r2, r3
 800559e:	187b      	adds	r3, r7, r1
 80055a0:	1c99      	adds	r1, r3, #2
 80055a2:	4826      	ldr	r0, [pc, #152]	@ (800563c <ProcessCmd+0x1dc>)
 80055a4:	230c      	movs	r3, #12
 80055a6:	f7fe f809 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80055aa:	e027      	b.n	80055fc <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80055ac:	4b18      	ldr	r3, [pc, #96]	@ (8005610 <ProcessCmd+0x1b0>)
 80055ae:	21ba      	movs	r1, #186	@ 0xba
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7fe f849 	bl	8003648 <ClearEEprom>
        break;
 80055b6:	e021      	b.n	80055fc <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80055b8:	2118      	movs	r1, #24
 80055ba:	187b      	adds	r3, r7, r1
 80055bc:	789b      	ldrb	r3, [r3, #2]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	b21a      	sxth	r2, r3
 80055c2:	187b      	adds	r3, r7, r1
 80055c4:	78db      	ldrb	r3, [r3, #3]
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	4313      	orrs	r3, r2
 80055ca:	b21a      	sxth	r2, r3
 80055cc:	1dbb      	adds	r3, r7, #6
 80055ce:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80055d0:	1dbb      	adds	r3, r7, #6
 80055d2:	881a      	ldrh	r2, [r3, #0]
 80055d4:	23c0      	movs	r3, #192	@ 0xc0
 80055d6:	015b      	lsls	r3, r3, #5
 80055d8:	429a      	cmp	r2, r3
 80055da:	d207      	bcs.n	80055ec <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 80055dc:	1dbb      	adds	r3, r7, #6
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005610 <ProcessCmd+0x1b0>)
 80055e2:	0019      	movs	r1, r3
 80055e4:	0010      	movs	r0, r2
 80055e6:	f7fe f82f 	bl	8003648 <ClearEEprom>
            break;
 80055ea:	e006      	b.n	80055fa <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80055ec:	23c0      	movs	r3, #192	@ 0xc0
 80055ee:	015b      	lsls	r3, r3, #5
 80055f0:	4a07      	ldr	r2, [pc, #28]	@ (8005610 <ProcessCmd+0x1b0>)
 80055f2:	0019      	movs	r1, r3
 80055f4:	0010      	movs	r0, r2
 80055f6:	f7fe f827 	bl	8003648 <ClearEEprom>
            break;
 80055fa:	46c0      	nop			@ (mov r8, r8)
}
 80055fc:	46c0      	nop			@ (mov r8, r8)
 80055fe:	46bd      	mov	sp, r7
 8005600:	b002      	add	sp, #8
 8005602:	bcb0      	pop	{r4, r5, r7}
 8005604:	bc08      	pop	{r3}
 8005606:	b004      	add	sp, #16
 8005608:	4718      	bx	r3
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	0801c1c8 	.word	0x0801c1c8
 8005610:	08080000 	.word	0x08080000
 8005614:	0808000c 	.word	0x0808000c
 8005618:	08080018 	.word	0x08080018
 800561c:	08080024 	.word	0x08080024
 8005620:	08080030 	.word	0x08080030
 8005624:	0808003c 	.word	0x0808003c
 8005628:	08080048 	.word	0x08080048
 800562c:	08080090 	.word	0x08080090
 8005630:	08080078 	.word	0x08080078
 8005634:	0808006c 	.word	0x0808006c
 8005638:	08080060 	.word	0x08080060
 800563c:	08080054 	.word	0x08080054

08005640 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6039      	str	r1, [r7, #0]
 8005648:	0011      	movs	r1, r2
 800564a:	1dfb      	adds	r3, r7, #7
 800564c:	1c02      	adds	r2, r0, #0
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	1c0a      	adds	r2, r1, #0
 8005654:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005656:	2223      	movs	r2, #35	@ 0x23
 8005658:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <Create_Message+0x9c>)
 800565a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800565c:	4b1f      	ldr	r3, [pc, #124]	@ (80056dc <Create_Message+0x9c>)
 800565e:	1dfa      	adds	r2, r7, #7
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005664:	4b1d      	ldr	r3, [pc, #116]	@ (80056dc <Create_Message+0x9c>)
 8005666:	1dba      	adds	r2, r7, #6
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800566c:	1dbb      	adds	r3, r7, #6
 800566e:	781a      	ldrb	r2, [r3, #0]
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <Create_Message+0xa0>)
 8005674:	0018      	movs	r0, r3
 8005676:	f013 f885 	bl	8018784 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800567a:	1dbb      	adds	r3, r7, #6
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	b29a      	uxth	r2, r3
 8005680:	250e      	movs	r5, #14
 8005682:	197b      	adds	r3, r7, r5
 8005684:	3203      	adds	r2, #3
 8005686:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005688:	260c      	movs	r6, #12
 800568a:	19bc      	adds	r4, r7, r6
 800568c:	197b      	adds	r3, r7, r5
 800568e:	881a      	ldrh	r2, [r3, #0]
 8005690:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <Create_Message+0x9c>)
 8005692:	0011      	movs	r1, r2
 8005694:	0018      	movs	r0, r3
 8005696:	f000 f825 	bl	80056e4 <CRC16_ARC>
 800569a:	0003      	movs	r3, r0
 800569c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800569e:	0030      	movs	r0, r6
 80056a0:	183b      	adds	r3, r7, r0
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	197b      	adds	r3, r7, r5
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b2d1      	uxtb	r1, r2
 80056ae:	4a0b      	ldr	r2, [pc, #44]	@ (80056dc <Create_Message+0x9c>)
 80056b0:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80056b2:	197b      	adds	r3, r7, r5
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	183a      	adds	r2, r7, r0
 80056ba:	8812      	ldrh	r2, [r2, #0]
 80056bc:	b2d1      	uxtb	r1, r2
 80056be:	4a07      	ldr	r2, [pc, #28]	@ (80056dc <Create_Message+0x9c>)
 80056c0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80056c2:	197b      	adds	r3, r7, r5
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	3302      	adds	r3, #2
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	4b04      	ldr	r3, [pc, #16]	@ (80056dc <Create_Message+0x9c>)
 80056cc:	0011      	movs	r1, r2
 80056ce:	0018      	movs	r0, r3
 80056d0:	f011 fcb4 	bl	801703c <CDC_Transmit_FS>
}
 80056d4:	46c0      	nop			@ (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b005      	add	sp, #20
 80056da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056dc:	20000b2c 	.word	0x20000b2c
 80056e0:	20000b2f 	.word	0x20000b2f

080056e4 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	000a      	movs	r2, r1
 80056ee:	1cbb      	adds	r3, r7, #2
 80056f0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80056f2:	2316      	movs	r3, #22
 80056f4:	18fb      	adds	r3, r7, r3
 80056f6:	2200      	movs	r2, #0
 80056f8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	e02e      	b.n	800575e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	18d3      	adds	r3, r2, r3
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	0019      	movs	r1, r3
 800570a:	2216      	movs	r2, #22
 800570c:	18bb      	adds	r3, r7, r2
 800570e:	18ba      	adds	r2, r7, r2
 8005710:	8812      	ldrh	r2, [r2, #0]
 8005712:	404a      	eors	r2, r1
 8005714:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e01a      	b.n	8005752 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 800571c:	2116      	movs	r1, #22
 800571e:	187b      	adds	r3, r7, r1
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	2201      	movs	r2, #1
 8005724:	4013      	ands	r3, r2
 8005726:	d00b      	beq.n	8005740 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005728:	187b      	adds	r3, r7, r1
 800572a:	187a      	adds	r2, r7, r1
 800572c:	8812      	ldrh	r2, [r2, #0]
 800572e:	0852      	lsrs	r2, r2, #1
 8005730:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005732:	187b      	adds	r3, r7, r1
 8005734:	187a      	adds	r2, r7, r1
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	490f      	ldr	r1, [pc, #60]	@ (8005778 <CRC16_ARC+0x94>)
 800573a:	404a      	eors	r2, r1
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e005      	b.n	800574c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005740:	2216      	movs	r2, #22
 8005742:	18bb      	adds	r3, r7, r2
 8005744:	18ba      	adds	r2, r7, r2
 8005746:	8812      	ldrh	r2, [r2, #0]
 8005748:	0852      	lsrs	r2, r2, #1
 800574a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b07      	cmp	r3, #7
 8005756:	dde1      	ble.n	800571c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3301      	adds	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	1cbb      	adds	r3, r7, #2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	429a      	cmp	r2, r3
 8005766:	dbcb      	blt.n	8005700 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005768:	2316      	movs	r3, #22
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	881b      	ldrh	r3, [r3, #0]
}
 800576e:	0018      	movs	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	b006      	add	sp, #24
 8005774:	bd80      	pop	{r7, pc}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	ffffa001 	.word	0xffffa001

0800577c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005780:	4b26      	ldr	r3, [pc, #152]	@ (800581c <ReadBatteryVoltage+0xa0>)
 8005782:	4a27      	ldr	r2, [pc, #156]	@ (8005820 <ReadBatteryVoltage+0xa4>)
 8005784:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005786:	4b25      	ldr	r3, [pc, #148]	@ (800581c <ReadBatteryVoltage+0xa0>)
 8005788:	2280      	movs	r2, #128	@ 0x80
 800578a:	0152      	lsls	r2, r2, #5
 800578c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800578e:	4a23      	ldr	r2, [pc, #140]	@ (800581c <ReadBatteryVoltage+0xa0>)
 8005790:	4b24      	ldr	r3, [pc, #144]	@ (8005824 <ReadBatteryVoltage+0xa8>)
 8005792:	0011      	movs	r1, r2
 8005794:	0018      	movs	r0, r3
 8005796:	f005 f8ad 	bl	800a8f4 <HAL_ADC_ConfigChannel>
 800579a:	1e03      	subs	r3, r0, #0
 800579c:	d001      	beq.n	80057a2 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 800579e:	f000 ffc5 	bl	800672c <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 80057a2:	4b20      	ldr	r3, [pc, #128]	@ (8005824 <ReadBatteryVoltage+0xa8>)
 80057a4:	0018      	movs	r0, r3
 80057a6:	f004 ffa9 	bl	800a6fc <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 80057aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005824 <ReadBatteryVoltage+0xa8>)
 80057ac:	2101      	movs	r1, #1
 80057ae:	0018      	movs	r0, r3
 80057b0:	f004 fff8 	bl	800a7a4 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80057b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005824 <ReadBatteryVoltage+0xa8>)
 80057b6:	0018      	movs	r0, r3
 80057b8:	f005 f890 	bl	800a8dc <HAL_ADC_GetValue>
 80057bc:	0002      	movs	r2, r0
 80057be:	4b1a      	ldr	r3, [pc, #104]	@ (8005828 <ReadBatteryVoltage+0xac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4353      	muls	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4919      	ldr	r1, [pc, #100]	@ (800582c <ReadBatteryVoltage+0xb0>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7fa fcb9 	bl	8000140 <__udivsi3>
 80057ce:	0003      	movs	r3, r0
 80057d0:	001a      	movs	r2, r3
 80057d2:	4b17      	ldr	r3, [pc, #92]	@ (8005830 <ReadBatteryVoltage+0xb4>)
 80057d4:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 80057d6:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <ReadBatteryVoltage+0xb4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	0018      	movs	r0, r3
 80057dc:	f7fb fec2 	bl	8001564 <__aeabi_ui2f>
 80057e0:	1c03      	adds	r3, r0, #0
 80057e2:	4914      	ldr	r1, [pc, #80]	@ (8005834 <ReadBatteryVoltage+0xb8>)
 80057e4:	1c18      	adds	r0, r3, #0
 80057e6:	f7fb f973 	bl	8000ad0 <__aeabi_fdiv>
 80057ea:	1c03      	adds	r3, r0, #0
 80057ec:	1c1a      	adds	r2, r3, #0
 80057ee:	4b12      	ldr	r3, [pc, #72]	@ (8005838 <ReadBatteryVoltage+0xbc>)
 80057f0:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 80057f2:	4b0a      	ldr	r3, [pc, #40]	@ (800581c <ReadBatteryVoltage+0xa0>)
 80057f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <ReadBatteryVoltage+0xa4>)
 80057f6:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80057f8:	4b08      	ldr	r3, [pc, #32]	@ (800581c <ReadBatteryVoltage+0xa0>)
 80057fa:	4a10      	ldr	r2, [pc, #64]	@ (800583c <ReadBatteryVoltage+0xc0>)
 80057fc:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057fe:	4a07      	ldr	r2, [pc, #28]	@ (800581c <ReadBatteryVoltage+0xa0>)
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <ReadBatteryVoltage+0xa8>)
 8005802:	0011      	movs	r1, r2
 8005804:	0018      	movs	r0, r3
 8005806:	f005 f875 	bl	800a8f4 <HAL_ADC_ConfigChannel>
 800580a:	1e03      	subs	r3, r0, #0
 800580c:	d001      	beq.n	8005812 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 800580e:	f000 ff8d 	bl	800672c <Error_Handler>
   }
   return trueValue;
 8005812:	4b09      	ldr	r3, [pc, #36]	@ (8005838 <ReadBatteryVoltage+0xbc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 }
 8005816:	1c18      	adds	r0, r3, #0
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000c34 	.word	0x20000c34
 8005820:	38004000 	.word	0x38004000
 8005824:	20000c54 	.word	0x20000c54
 8005828:	20000024 	.word	0x20000024
 800582c:	00000fff 	.word	0x00000fff
 8005830:	20000c3c 	.word	0x20000c3c
 8005834:	447a0000 	.word	0x447a0000
 8005838:	20000c40 	.word	0x20000c40
 800583c:	00001001 	.word	0x00001001

08005840 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005844:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <ReadSolarVoltage+0xa4>)
 8005846:	4a28      	ldr	r2, [pc, #160]	@ (80058e8 <ReadSolarVoltage+0xa8>)
 8005848:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800584a:	4b26      	ldr	r3, [pc, #152]	@ (80058e4 <ReadSolarVoltage+0xa4>)
 800584c:	2280      	movs	r2, #128	@ 0x80
 800584e:	0152      	lsls	r2, r2, #5
 8005850:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005852:	4a24      	ldr	r2, [pc, #144]	@ (80058e4 <ReadSolarVoltage+0xa4>)
 8005854:	4b25      	ldr	r3, [pc, #148]	@ (80058ec <ReadSolarVoltage+0xac>)
 8005856:	0011      	movs	r1, r2
 8005858:	0018      	movs	r0, r3
 800585a:	f005 f84b 	bl	800a8f4 <HAL_ADC_ConfigChannel>
 800585e:	1e03      	subs	r3, r0, #0
 8005860:	d001      	beq.n	8005866 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005862:	f000 ff63 	bl	800672c <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005866:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <ReadSolarVoltage+0xac>)
 8005868:	0018      	movs	r0, r3
 800586a:	f004 ff47 	bl	800a6fc <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 800586e:	4b1f      	ldr	r3, [pc, #124]	@ (80058ec <ReadSolarVoltage+0xac>)
 8005870:	2101      	movs	r1, #1
 8005872:	0018      	movs	r0, r3
 8005874:	f004 ff96 	bl	800a7a4 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005878:	4b1c      	ldr	r3, [pc, #112]	@ (80058ec <ReadSolarVoltage+0xac>)
 800587a:	0018      	movs	r0, r3
 800587c:	f005 f82e 	bl	800a8dc <HAL_ADC_GetValue>
 8005880:	0002      	movs	r2, r0
 8005882:	4b1b      	ldr	r3, [pc, #108]	@ (80058f0 <ReadSolarVoltage+0xb0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	435a      	muls	r2, r3
 8005888:	0013      	movs	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	189b      	adds	r3, r3, r2
 800588e:	4919      	ldr	r1, [pc, #100]	@ (80058f4 <ReadSolarVoltage+0xb4>)
 8005890:	0018      	movs	r0, r3
 8005892:	f7fa fc55 	bl	8000140 <__udivsi3>
 8005896:	0003      	movs	r3, r0
 8005898:	001a      	movs	r2, r3
 800589a:	4b17      	ldr	r3, [pc, #92]	@ (80058f8 <ReadSolarVoltage+0xb8>)
 800589c:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 800589e:	4b16      	ldr	r3, [pc, #88]	@ (80058f8 <ReadSolarVoltage+0xb8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7fb fe5e 	bl	8001564 <__aeabi_ui2f>
 80058a8:	1c03      	adds	r3, r0, #0
 80058aa:	4914      	ldr	r1, [pc, #80]	@ (80058fc <ReadSolarVoltage+0xbc>)
 80058ac:	1c18      	adds	r0, r3, #0
 80058ae:	f7fb f90f 	bl	8000ad0 <__aeabi_fdiv>
 80058b2:	1c03      	adds	r3, r0, #0
 80058b4:	1c1a      	adds	r2, r3, #0
 80058b6:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <ReadSolarVoltage+0xc0>)
 80058b8:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 80058ba:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <ReadSolarVoltage+0xa4>)
 80058bc:	4a0a      	ldr	r2, [pc, #40]	@ (80058e8 <ReadSolarVoltage+0xa8>)
 80058be:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80058c0:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <ReadSolarVoltage+0xa4>)
 80058c2:	4a10      	ldr	r2, [pc, #64]	@ (8005904 <ReadSolarVoltage+0xc4>)
 80058c4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80058c6:	4a07      	ldr	r2, [pc, #28]	@ (80058e4 <ReadSolarVoltage+0xa4>)
 80058c8:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <ReadSolarVoltage+0xac>)
 80058ca:	0011      	movs	r1, r2
 80058cc:	0018      	movs	r0, r3
 80058ce:	f005 f811 	bl	800a8f4 <HAL_ADC_ConfigChannel>
 80058d2:	1e03      	subs	r3, r0, #0
 80058d4:	d001      	beq.n	80058da <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 80058d6:	f000 ff29 	bl	800672c <Error_Handler>
   }
   return trueValue;
 80058da:	4b09      	ldr	r3, [pc, #36]	@ (8005900 <ReadSolarVoltage+0xc0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 }
 80058de:	1c18      	adds	r0, r3, #0
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000c34 	.word	0x20000c34
 80058e8:	3c008000 	.word	0x3c008000
 80058ec:	20000c54 	.word	0x20000c54
 80058f0:	20000024 	.word	0x20000024
 80058f4:	00000fff 	.word	0x00000fff
 80058f8:	20000c44 	.word	0x20000c44
 80058fc:	447a0000 	.word	0x447a0000
 8005900:	20000c48 	.word	0x20000c48
 8005904:	00001001 	.word	0x00001001

08005908 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 800590c:	23a0      	movs	r3, #160	@ 0xa0
 800590e:	05db      	lsls	r3, r3, #23
 8005910:	2180      	movs	r1, #128	@ 0x80
 8005912:	0018      	movs	r0, r3
 8005914:	f006 f8b4 	bl	800ba80 <HAL_GPIO_ReadPin>
 8005918:	0003      	movs	r3, r0
 800591a:	1e5a      	subs	r2, r3, #1
 800591c:	4193      	sbcs	r3, r2
 800591e:	b2db      	uxtb	r3, r3
}
 8005920:	0018      	movs	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005926:	b580      	push	{r7, lr}
 8005928:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800592a:	2380      	movs	r3, #128	@ 0x80
 800592c:	021a      	lsls	r2, r3, #8
 800592e:	23a0      	movs	r3, #160	@ 0xa0
 8005930:	05db      	lsls	r3, r3, #23
 8005932:	0011      	movs	r1, r2
 8005934:	0018      	movs	r0, r3
 8005936:	f006 f8a3 	bl	800ba80 <HAL_GPIO_ReadPin>
 800593a:	0003      	movs	r3, r0
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	4193      	sbcs	r3, r2
 8005940:	b2db      	uxtb	r3, r3
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 800594c:	4b05      	ldr	r3, [pc, #20]	@ (8005964 <UserButton_Pressed+0x1c>)
 800594e:	2104      	movs	r1, #4
 8005950:	0018      	movs	r0, r3
 8005952:	f006 f895 	bl	800ba80 <HAL_GPIO_ReadPin>
 8005956:	0003      	movs	r3, r0
 8005958:	425a      	negs	r2, r3
 800595a:	4153      	adcs	r3, r2
 800595c:	b2db      	uxtb	r3, r3
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	50000c00 	.word	0x50000c00

08005968 <RTC_SetTime>:
static Clock RealTime = {.Hours = 0, .Minutes = 0, .Seconds = 0};
static Clock NextAction = {.Hours = 0, .Minutes = 0, .Seconds = 0};
RTC_HandleTypeDef* RealTime_Handle = NULL;

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8005968:	b590      	push	{r4, r7, lr}
 800596a:	b089      	sub	sp, #36	@ 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	000c      	movs	r4, r1
 8005972:	0010      	movs	r0, r2
 8005974:	0019      	movs	r1, r3
 8005976:	1cfb      	adds	r3, r7, #3
 8005978:	1c22      	adds	r2, r4, #0
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	1cbb      	adds	r3, r7, #2
 800597e:	1c02      	adds	r2, r0, #0
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	1c7b      	adds	r3, r7, #1
 8005984:	1c0a      	adds	r2, r1, #0
 8005986:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8005988:	240c      	movs	r4, #12
 800598a:	193b      	adds	r3, r7, r4
 800598c:	0018      	movs	r0, r3
 800598e:	2314      	movs	r3, #20
 8005990:	001a      	movs	r2, r3
 8005992:	2100      	movs	r1, #0
 8005994:	f012 fe2c 	bl	80185f0 <memset>

    sTime.Hours = hours;
 8005998:	0021      	movs	r1, r4
 800599a:	187b      	adds	r3, r7, r1
 800599c:	1cfa      	adds	r2, r7, #3
 800599e:	7812      	ldrb	r2, [r2, #0]
 80059a0:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	1cba      	adds	r2, r7, #2
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80059aa:	187b      	adds	r3, r7, r1
 80059ac:	1c7a      	adds	r2, r7, #1
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	2200      	movs	r2, #0
 80059b6:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	2200      	movs	r2, #0
 80059bc:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80059be:	187b      	adds	r3, r7, r1
 80059c0:	2200      	movs	r2, #0
 80059c2:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80059c4:	1879      	adds	r1, r7, r1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	0018      	movs	r0, r3
 80059cc:	f00b fa40 	bl	8010e50 <HAL_RTC_SetTime>
        // Foutafhandeling
    }
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b009      	add	sp, #36	@ 0x24
 80059d6:	bd90      	pop	{r4, r7, pc}

080059d8 <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 80059e0:	4b08      	ldr	r3, [pc, #32]	@ (8005a04 <InitClock+0x2c>)
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 80059e6:	4b07      	ldr	r3, [pc, #28]	@ (8005a04 <InitClock+0x2c>)
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <InitClock+0x30>)
 80059ec:	7819      	ldrb	r1, [r3, #0]
 80059ee:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <InitClock+0x30>)
 80059f0:	785a      	ldrb	r2, [r3, #1]
 80059f2:	4b05      	ldr	r3, [pc, #20]	@ (8005a08 <InitClock+0x30>)
 80059f4:	789b      	ldrb	r3, [r3, #2]
 80059f6:	f7ff ffb7 	bl	8005968 <RTC_SetTime>
}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b002      	add	sp, #8
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	20000c50 	.word	0x20000c50
 8005a08:	20000c4c 	.word	0x20000c4c

08005a0c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005a12:	003b      	movs	r3, r7
 8005a14:	0018      	movs	r0, r3
 8005a16:	2308      	movs	r3, #8
 8005a18:	001a      	movs	r2, r3
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	f012 fde8 	bl	80185f0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005a20:	4b30      	ldr	r3, [pc, #192]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a22:	4a31      	ldr	r2, [pc, #196]	@ (8005ae8 <MX_ADC_Init+0xdc>)
 8005a24:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8005a26:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a2e:	22c0      	movs	r2, #192	@ 0xc0
 8005a30:	0612      	lsls	r2, r2, #24
 8005a32:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005a34:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005a40:	4b28      	ldr	r3, [pc, #160]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a46:	4b27      	ldr	r3, [pc, #156]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005a4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a4e:	2220      	movs	r2, #32
 8005a50:	2100      	movs	r1, #0
 8005a52:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005a54:	4b23      	ldr	r3, [pc, #140]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a56:	2221      	movs	r2, #33	@ 0x21
 8005a58:	2101      	movs	r1, #1
 8005a5a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a5c:	4b21      	ldr	r3, [pc, #132]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a62:	4b20      	ldr	r3, [pc, #128]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a64:	22c2      	movs	r2, #194	@ 0xc2
 8005a66:	32ff      	adds	r2, #255	@ 0xff
 8005a68:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a6c:	222c      	movs	r2, #44	@ 0x2c
 8005a6e:	2100      	movs	r1, #0
 8005a70:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a72:	4b1c      	ldr	r3, [pc, #112]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a74:	2204      	movs	r2, #4
 8005a76:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005a78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005a7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8005a84:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005a8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005a90:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005a92:	0018      	movs	r0, r3
 8005a94:	f004 fcbe 	bl	800a414 <HAL_ADC_Init>
 8005a98:	1e03      	subs	r3, r0, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8005a9c:	f000 fe46 	bl	800672c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005aa0:	003b      	movs	r3, r7
 8005aa2:	4a12      	ldr	r2, [pc, #72]	@ (8005aec <MX_ADC_Init+0xe0>)
 8005aa4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005aa6:	003b      	movs	r3, r7
 8005aa8:	2280      	movs	r2, #128	@ 0x80
 8005aaa:	0152      	lsls	r2, r2, #5
 8005aac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005aae:	003a      	movs	r2, r7
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005ab2:	0011      	movs	r1, r2
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f004 ff1d 	bl	800a8f4 <HAL_ADC_ConfigChannel>
 8005aba:	1e03      	subs	r3, r0, #0
 8005abc:	d001      	beq.n	8005ac2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8005abe:	f000 fe35 	bl	800672c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005ac2:	003b      	movs	r3, r7
 8005ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8005af0 <MX_ADC_Init+0xe4>)
 8005ac6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005ac8:	003a      	movs	r2, r7
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <MX_ADC_Init+0xd8>)
 8005acc:	0011      	movs	r1, r2
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f004 ff10 	bl	800a8f4 <HAL_ADC_ConfigChannel>
 8005ad4:	1e03      	subs	r3, r0, #0
 8005ad6:	d001      	beq.n	8005adc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005ad8:	f000 fe28 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000c54 	.word	0x20000c54
 8005ae8:	40012400 	.word	0x40012400
 8005aec:	38004000 	.word	0x38004000
 8005af0:	3c008000 	.word	0x3c008000

08005af4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005af4:	b590      	push	{r4, r7, lr}
 8005af6:	b089      	sub	sp, #36	@ 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afc:	240c      	movs	r4, #12
 8005afe:	193b      	adds	r3, r7, r4
 8005b00:	0018      	movs	r0, r3
 8005b02:	2314      	movs	r3, #20
 8005b04:	001a      	movs	r2, r3
 8005b06:	2100      	movs	r1, #0
 8005b08:	f012 fd72 	bl	80185f0 <memset>
  if(adcHandle->Instance==ADC1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <HAL_ADC_MspInit+0x70>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d121      	bne.n	8005b5a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b16:	4b14      	ldr	r3, [pc, #80]	@ (8005b68 <HAL_ADC_MspInit+0x74>)
 8005b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b1a:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <HAL_ADC_MspInit+0x74>)
 8005b1c:	2180      	movs	r1, #128	@ 0x80
 8005b1e:	0089      	lsls	r1, r1, #2
 8005b20:	430a      	orrs	r2, r1
 8005b22:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b24:	4b10      	ldr	r3, [pc, #64]	@ (8005b68 <HAL_ADC_MspInit+0x74>)
 8005b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b28:	4b0f      	ldr	r3, [pc, #60]	@ (8005b68 <HAL_ADC_MspInit+0x74>)
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b30:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <HAL_ADC_MspInit+0x74>)
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	2204      	movs	r2, #4
 8005b36:	4013      	ands	r3, r2
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005b3c:	193b      	adds	r3, r7, r4
 8005b3e:	2230      	movs	r2, #48	@ 0x30
 8005b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	2203      	movs	r2, #3
 8005b46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	193b      	adds	r3, r7, r4
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b4e:	193b      	adds	r3, r7, r4
 8005b50:	4a06      	ldr	r2, [pc, #24]	@ (8005b6c <HAL_ADC_MspInit+0x78>)
 8005b52:	0019      	movs	r1, r3
 8005b54:	0010      	movs	r0, r2
 8005b56:	f005 fd33 	bl	800b5c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b009      	add	sp, #36	@ 0x24
 8005b60:	bd90      	pop	{r4, r7, pc}
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	40012400 	.word	0x40012400
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	50000800 	.word	0x50000800

08005b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b76:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <MX_DMA_Init+0x48>)
 8005b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb8 <MX_DMA_Init+0x48>)
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b82:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <MX_DMA_Init+0x48>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	2201      	movs	r2, #1
 8005b88:	4013      	ands	r3, r2
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2100      	movs	r1, #0
 8005b92:	200a      	movs	r0, #10
 8005b94:	f005 f868 	bl	800ac68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005b98:	200a      	movs	r0, #10
 8005b9a:	f005 f87a 	bl	800ac92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2103      	movs	r1, #3
 8005ba2:	200b      	movs	r0, #11
 8005ba4:	f005 f860 	bl	800ac68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005ba8:	200b      	movs	r0, #11
 8005baa:	f005 f872 	bl	800ac92 <HAL_NVIC_EnableIRQ>

}
 8005bae:	46c0      	nop			@ (mov r8, r8)
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b002      	add	sp, #8
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			@ (mov r8, r8)
 8005bb8:	40021000 	.word	0x40021000

08005bbc <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8005bca:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <Gadget_Init+0x40>)
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	f001 f8d7 	bl	8006d80 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f000 fe1b 	bl	8006814 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7fd fe37 	bl	8003854 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005be6:	4a06      	ldr	r2, [pc, #24]	@ (8005c00 <Gadget_Init+0x44>)
 8005be8:	4b06      	ldr	r3, [pc, #24]	@ (8005c04 <Gadget_Init+0x48>)
 8005bea:	0019      	movs	r1, r3
 8005bec:	2003      	movs	r0, #3
 8005bee:	f004 f83f 	bl	8009c70 <CreateLine>
}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b004      	add	sp, #16
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	20000028 	.word	0x20000028
 8005c00:	0801ba00 	.word	0x0801ba00
 8005c04:	0801ba14 	.word	0x0801ba14

08005c08 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  Meas_Test();
 8005c0c:	f000 ff38 	bl	8006a80 <Meas_Test>
}
 8005c10:	46c0      	nop			@ (mov r8, r8)
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <UpkeepGadget>:

bool UpkeepGadget() {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8005c1e:	f001 f81f 	bl	8006c60 <Meas_Upkeep>
 8005c22:	0003      	movs	r3, r0
 8005c24:	001a      	movs	r2, r3
 8005c26:	4b0f      	ldr	r3, [pc, #60]	@ (8005c64 <UpkeepGadget+0x4c>)
 8005c28:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8005c2a:	f000 ffcb 	bl	8006bc4 <Mic_Upkeep>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	001a      	movs	r2, r3
 8005c32:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <UpkeepGadget+0x50>)
 8005c34:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8005c36:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <UpkeepGadget+0x4c>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d103      	bne.n	8005c46 <UpkeepGadget+0x2e>
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c68 <UpkeepGadget+0x50>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d001      	beq.n	8005c4a <UpkeepGadget+0x32>
 8005c46:	2201      	movs	r2, #1
 8005c48:	e000      	b.n	8005c4c <UpkeepGadget+0x34>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	1dfb      	adds	r3, r7, #7
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	2101      	movs	r1, #1
 8005c54:	400a      	ands	r2, r1
 8005c56:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8005c58:	1dfb      	adds	r3, r7, #7
 8005c5a:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000cb0 	.word	0x20000cb0
 8005c68:	20000cb1 	.word	0x20000cb1

08005c6c <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0011      	movs	r1, r2
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f002 fbe7 	bl	8008450 <SGP_Init>
}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b002      	add	sp, #8
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8005c8e:	f002 fbf9 	bl	8008484 <SGP_StartMeasurement>
}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f002 fc5e 	bl	8008564 <SGP_GetMeasurementValues>
 8005ca8:	0003      	movs	r3, r0
}
 8005caa:	0018      	movs	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b002      	add	sp, #8
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005cb6:	f002 fe6b 	bl	8008990 <SGP_DeviceConnected>
 8005cba:	0003      	movs	r3, r0
}
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b08b      	sub	sp, #44	@ 0x2c
 8005cc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cca:	2414      	movs	r4, #20
 8005ccc:	193b      	adds	r3, r7, r4
 8005cce:	0018      	movs	r0, r3
 8005cd0:	2314      	movs	r3, #20
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	f012 fc8b 	bl	80185f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cda:	4b7c      	ldr	r3, [pc, #496]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cde:	4b7b      	ldr	r3, [pc, #492]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005ce6:	4b79      	ldr	r3, [pc, #484]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	2204      	movs	r2, #4
 8005cec:	4013      	ands	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cf2:	4b76      	ldr	r3, [pc, #472]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf6:	4b75      	ldr	r3, [pc, #468]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005cf8:	2180      	movs	r1, #128	@ 0x80
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005cfe:	4b73      	ldr	r3, [pc, #460]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	2280      	movs	r2, #128	@ 0x80
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d0a:	4b70      	ldr	r3, [pc, #448]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d10:	2101      	movs	r1, #1
 8005d12:	430a      	orrs	r2, r1
 8005d14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d16:	4b6d      	ldr	r3, [pc, #436]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d22:	4b6a      	ldr	r3, [pc, #424]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d26:	4b69      	ldr	r3, [pc, #420]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d28:	2102      	movs	r1, #2
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d2e:	4b67      	ldr	r3, [pc, #412]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	2202      	movs	r2, #2
 8005d34:	4013      	ands	r3, r2
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d3a:	4b64      	ldr	r3, [pc, #400]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3e:	4b63      	ldr	r3, [pc, #396]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d40:	2108      	movs	r1, #8
 8005d42:	430a      	orrs	r2, r1
 8005d44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d46:	4b61      	ldr	r3, [pc, #388]	@ (8005ecc <MX_GPIO_Init+0x208>)
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	2208      	movs	r2, #8
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005d52:	4b5f      	ldr	r3, [pc, #380]	@ (8005ed0 <MX_GPIO_Init+0x20c>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	2101      	movs	r1, #1
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f005 feae 	bl	800baba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ed0 <MX_GPIO_Init+0x20c>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	2102      	movs	r1, #2
 8005d64:	0018      	movs	r0, r3
 8005d66:	f005 fea8 	bl	800baba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005d6a:	495a      	ldr	r1, [pc, #360]	@ (8005ed4 <MX_GPIO_Init+0x210>)
 8005d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed8 <MX_GPIO_Init+0x214>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	0018      	movs	r0, r3
 8005d72:	f005 fea2 	bl	800baba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005d76:	2380      	movs	r3, #128	@ 0x80
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	4858      	ldr	r0, [pc, #352]	@ (8005edc <MX_GPIO_Init+0x218>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	0019      	movs	r1, r3
 8005d80:	f005 fe9b 	bl	800baba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	015b      	lsls	r3, r3, #5
 8005d88:	4854      	ldr	r0, [pc, #336]	@ (8005edc <MX_GPIO_Init+0x218>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	f005 fe94 	bl	800baba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005d92:	193b      	adds	r3, r7, r4
 8005d94:	4a52      	ldr	r2, [pc, #328]	@ (8005ee0 <MX_GPIO_Init+0x21c>)
 8005d96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d98:	193b      	adds	r3, r7, r4
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	2200      	movs	r2, #0
 8005da2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	4a4d      	ldr	r2, [pc, #308]	@ (8005edc <MX_GPIO_Init+0x218>)
 8005da8:	0019      	movs	r1, r3
 8005daa:	0010      	movs	r0, r2
 8005dac:	f005 fc08 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005db0:	193b      	adds	r3, r7, r4
 8005db2:	2203      	movs	r2, #3
 8005db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005db6:	193b      	adds	r3, r7, r4
 8005db8:	2201      	movs	r2, #1
 8005dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dbc:	193b      	adds	r3, r7, r4
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dc2:	193b      	adds	r3, r7, r4
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005dc8:	193b      	adds	r3, r7, r4
 8005dca:	4a41      	ldr	r2, [pc, #260]	@ (8005ed0 <MX_GPIO_Init+0x20c>)
 8005dcc:	0019      	movs	r1, r3
 8005dce:	0010      	movs	r0, r2
 8005dd0:	f005 fbf6 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005dd4:	193b      	adds	r3, r7, r4
 8005dd6:	2270      	movs	r2, #112	@ 0x70
 8005dd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dda:	193b      	adds	r3, r7, r4
 8005ddc:	2203      	movs	r2, #3
 8005dde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de0:	193b      	adds	r3, r7, r4
 8005de2:	2200      	movs	r2, #0
 8005de4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de6:	193a      	adds	r2, r7, r4
 8005de8:	23a0      	movs	r3, #160	@ 0xa0
 8005dea:	05db      	lsls	r3, r3, #23
 8005dec:	0011      	movs	r1, r2
 8005dee:	0018      	movs	r0, r3
 8005df0:	f005 fbe6 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8005df4:	193b      	adds	r3, r7, r4
 8005df6:	4a3b      	ldr	r2, [pc, #236]	@ (8005ee4 <MX_GPIO_Init+0x220>)
 8005df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dfa:	193b      	adds	r3, r7, r4
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e00:	193b      	adds	r3, r7, r4
 8005e02:	2200      	movs	r2, #0
 8005e04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e06:	193a      	adds	r2, r7, r4
 8005e08:	23a0      	movs	r3, #160	@ 0xa0
 8005e0a:	05db      	lsls	r3, r3, #23
 8005e0c:	0011      	movs	r1, r2
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f005 fbd6 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005e14:	193b      	adds	r3, r7, r4
 8005e16:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed4 <MX_GPIO_Init+0x210>)
 8005e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e1a:	193b      	adds	r3, r7, r4
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	193b      	adds	r3, r7, r4
 8005e22:	2200      	movs	r2, #0
 8005e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e26:	193b      	adds	r3, r7, r4
 8005e28:	2200      	movs	r2, #0
 8005e2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e2c:	193b      	adds	r3, r7, r4
 8005e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed8 <MX_GPIO_Init+0x214>)
 8005e30:	0019      	movs	r1, r3
 8005e32:	0010      	movs	r0, r2
 8005e34:	f005 fbc4 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005e38:	193b      	adds	r3, r7, r4
 8005e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee8 <MX_GPIO_Init+0x224>)
 8005e3c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e3e:	193b      	adds	r3, r7, r4
 8005e40:	2203      	movs	r2, #3
 8005e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	193b      	adds	r3, r7, r4
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e4a:	193b      	adds	r3, r7, r4
 8005e4c:	4a22      	ldr	r2, [pc, #136]	@ (8005ed8 <MX_GPIO_Init+0x214>)
 8005e4e:	0019      	movs	r1, r3
 8005e50:	0010      	movs	r0, r2
 8005e52:	f005 fbb5 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005e56:	0021      	movs	r1, r4
 8005e58:	187b      	adds	r3, r7, r1
 8005e5a:	2280      	movs	r2, #128	@ 0x80
 8005e5c:	0092      	lsls	r2, r2, #2
 8005e5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e60:	000c      	movs	r4, r1
 8005e62:	193b      	adds	r3, r7, r4
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	193b      	adds	r3, r7, r4
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005e6e:	193b      	adds	r3, r7, r4
 8005e70:	4a1a      	ldr	r2, [pc, #104]	@ (8005edc <MX_GPIO_Init+0x218>)
 8005e72:	0019      	movs	r1, r3
 8005e74:	0010      	movs	r0, r2
 8005e76:	f005 fba3 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005e7a:	0021      	movs	r1, r4
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	22c0      	movs	r2, #192	@ 0xc0
 8005e80:	0152      	lsls	r2, r2, #5
 8005e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e84:	000c      	movs	r4, r1
 8005e86:	193b      	adds	r3, r7, r4
 8005e88:	2201      	movs	r2, #1
 8005e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8c:	193b      	adds	r3, r7, r4
 8005e8e:	2200      	movs	r2, #0
 8005e90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e92:	193b      	adds	r3, r7, r4
 8005e94:	2200      	movs	r2, #0
 8005e96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e98:	193b      	adds	r3, r7, r4
 8005e9a:	4a10      	ldr	r2, [pc, #64]	@ (8005edc <MX_GPIO_Init+0x218>)
 8005e9c:	0019      	movs	r1, r3
 8005e9e:	0010      	movs	r0, r2
 8005ea0:	f005 fb8e 	bl	800b5c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005ea4:	0021      	movs	r1, r4
 8005ea6:	187b      	adds	r3, r7, r1
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005eac:	187b      	adds	r3, r7, r1
 8005eae:	2200      	movs	r2, #0
 8005eb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eb2:	187b      	adds	r3, r7, r1
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005eb8:	187b      	adds	r3, r7, r1
 8005eba:	4a0c      	ldr	r2, [pc, #48]	@ (8005eec <MX_GPIO_Init+0x228>)
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	0010      	movs	r0, r2
 8005ec0:	f005 fb7e 	bl	800b5c0 <HAL_GPIO_Init>

}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b00b      	add	sp, #44	@ 0x2c
 8005eca:	bd90      	pop	{r4, r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	50001c00 	.word	0x50001c00
 8005ed4:	00000301 	.word	0x00000301
 8005ed8:	50000400 	.word	0x50000400
 8005edc:	50000800 	.word	0x50000800
 8005ee0:	0000200c 	.word	0x0000200c
 8005ee4:	00008180 	.word	0x00008180
 8005ee8:	0000403e 	.word	0x0000403e
 8005eec:	50000c00 	.word	0x50000c00

08005ef0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2100      	movs	r1, #0
 8005efe:	0018      	movs	r0, r3
 8005f00:	f00b f9f6 	bl	80112f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2108      	movs	r1, #8
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f00b f9f1 	bl	80112f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	210c      	movs	r1, #12
 8005f12:	0018      	movs	r0, r3
 8005f14:	f00b f9ec 	bl	80112f0 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	05db      	lsls	r3, r3, #23
 8005f1c:	22fa      	movs	r2, #250	@ 0xfa
 8005f1e:	0112      	lsls	r2, r2, #4
 8005f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005f22:	2380      	movs	r3, #128	@ 0x80
 8005f24:	05db      	lsls	r3, r3, #23
 8005f26:	22fa      	movs	r2, #250	@ 0xfa
 8005f28:	0112      	lsls	r2, r2, #4
 8005f2a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	05db      	lsls	r3, r3, #23
 8005f30:	22fa      	movs	r2, #250	@ 0xfa
 8005f32:	0112      	lsls	r2, r2, #4
 8005f34:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005f36:	2380      	movs	r3, #128	@ 0x80
 8005f38:	05db      	lsls	r3, r3, #23
 8005f3a:	22fa      	movs	r2, #250	@ 0xfa
 8005f3c:	0112      	lsls	r2, r2, #4
 8005f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2100      	movs	r1, #0
 8005f44:	0018      	movs	r0, r3
 8005f46:	f00b f9d3 	bl	80112f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f00b f9ce 	bl	80112f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2108      	movs	r1, #8
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f00b f9c9 	bl	80112f0 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <GPIO_InitPWMLEDs+0x98>)
 8005f60:	22fa      	movs	r2, #250	@ 0xfa
 8005f62:	0112      	lsls	r2, r2, #4
 8005f64:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005f66:	4b08      	ldr	r3, [pc, #32]	@ (8005f88 <GPIO_InitPWMLEDs+0x98>)
 8005f68:	22fa      	movs	r2, #250	@ 0xfa
 8005f6a:	0112      	lsls	r2, r2, #4
 8005f6c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <GPIO_InitPWMLEDs+0x98>)
 8005f70:	22fa      	movs	r2, #250	@ 0xfa
 8005f72:	0112      	lsls	r2, r2, #4
 8005f74:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005f76:	4b04      	ldr	r3, [pc, #16]	@ (8005f88 <GPIO_InitPWMLEDs+0x98>)
 8005f78:	22fa      	movs	r2, #250	@ 0xfa
 8005f7a:	0112      	lsls	r2, r2, #4
 8005f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005f7e:	46c0      	nop			@ (mov r8, r8)
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b002      	add	sp, #8
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	40000400 	.word	0x40000400

08005f8c <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f003 ffad 	bl	8009efc <HIDS_Init>
}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b002      	add	sp, #8
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005faa:	b580      	push	{r7, lr}
 8005fac:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005fae:	f003 ffc7 	bl	8009f40 <HIDS_StartMeasurement>
}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f004 f895 	bl	800a0f8 <HIDS_GetMeasurementValues>
 8005fce:	0003      	movs	r3, r0
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b002      	add	sp, #8
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005fdc:	f004 f830 	bl	800a040 <HIDS_DeviceConnected>
 8005fe0:	0003      	movs	r3, r0
}
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005fec:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <MX_I2C1_Init+0x74>)
 8005fee:	4a1c      	ldr	r2, [pc, #112]	@ (8006060 <MX_I2C1_Init+0x78>)
 8005ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <MX_I2C1_Init+0x74>)
 8005ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8006064 <MX_I2C1_Init+0x7c>)
 8005ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005ff8:	4b18      	ldr	r3, [pc, #96]	@ (800605c <MX_I2C1_Init+0x74>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ffe:	4b17      	ldr	r3, [pc, #92]	@ (800605c <MX_I2C1_Init+0x74>)
 8006000:	2201      	movs	r2, #1
 8006002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006004:	4b15      	ldr	r3, [pc, #84]	@ (800605c <MX_I2C1_Init+0x74>)
 8006006:	2200      	movs	r2, #0
 8006008:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800600a:	4b14      	ldr	r3, [pc, #80]	@ (800605c <MX_I2C1_Init+0x74>)
 800600c:	2200      	movs	r2, #0
 800600e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006010:	4b12      	ldr	r3, [pc, #72]	@ (800605c <MX_I2C1_Init+0x74>)
 8006012:	2200      	movs	r2, #0
 8006014:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006016:	4b11      	ldr	r3, [pc, #68]	@ (800605c <MX_I2C1_Init+0x74>)
 8006018:	2200      	movs	r2, #0
 800601a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800601c:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <MX_I2C1_Init+0x74>)
 800601e:	2200      	movs	r2, #0
 8006020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006022:	4b0e      	ldr	r3, [pc, #56]	@ (800605c <MX_I2C1_Init+0x74>)
 8006024:	0018      	movs	r0, r3
 8006026:	f005 fd65 	bl	800baf4 <HAL_I2C_Init>
 800602a:	1e03      	subs	r3, r0, #0
 800602c:	d001      	beq.n	8006032 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800602e:	f000 fb7d 	bl	800672c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006032:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <MX_I2C1_Init+0x74>)
 8006034:	2100      	movs	r1, #0
 8006036:	0018      	movs	r0, r3
 8006038:	f007 fcd4 	bl	800d9e4 <HAL_I2CEx_ConfigAnalogFilter>
 800603c:	1e03      	subs	r3, r0, #0
 800603e:	d001      	beq.n	8006044 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006040:	f000 fb74 	bl	800672c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006044:	4b05      	ldr	r3, [pc, #20]	@ (800605c <MX_I2C1_Init+0x74>)
 8006046:	2100      	movs	r1, #0
 8006048:	0018      	movs	r0, r3
 800604a:	f007 fd17 	bl	800da7c <HAL_I2CEx_ConfigDigitalFilter>
 800604e:	1e03      	subs	r3, r0, #0
 8006050:	d001      	beq.n	8006056 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006052:	f000 fb6b 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000cb4 	.word	0x20000cb4
 8006060:	40005400 	.word	0x40005400
 8006064:	00503d58 	.word	0x00503d58

08006068 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800606c:	4b1b      	ldr	r3, [pc, #108]	@ (80060dc <MX_I2C2_Init+0x74>)
 800606e:	4a1c      	ldr	r2, [pc, #112]	@ (80060e0 <MX_I2C2_Init+0x78>)
 8006070:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006072:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <MX_I2C2_Init+0x74>)
 8006074:	4a1b      	ldr	r2, [pc, #108]	@ (80060e4 <MX_I2C2_Init+0x7c>)
 8006076:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006078:	4b18      	ldr	r3, [pc, #96]	@ (80060dc <MX_I2C2_Init+0x74>)
 800607a:	2200      	movs	r2, #0
 800607c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800607e:	4b17      	ldr	r3, [pc, #92]	@ (80060dc <MX_I2C2_Init+0x74>)
 8006080:	2201      	movs	r2, #1
 8006082:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006084:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <MX_I2C2_Init+0x74>)
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800608a:	4b14      	ldr	r3, [pc, #80]	@ (80060dc <MX_I2C2_Init+0x74>)
 800608c:	2200      	movs	r2, #0
 800608e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006090:	4b12      	ldr	r3, [pc, #72]	@ (80060dc <MX_I2C2_Init+0x74>)
 8006092:	2200      	movs	r2, #0
 8006094:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006096:	4b11      	ldr	r3, [pc, #68]	@ (80060dc <MX_I2C2_Init+0x74>)
 8006098:	2200      	movs	r2, #0
 800609a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800609c:	4b0f      	ldr	r3, [pc, #60]	@ (80060dc <MX_I2C2_Init+0x74>)
 800609e:	2200      	movs	r2, #0
 80060a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <MX_I2C2_Init+0x74>)
 80060a4:	0018      	movs	r0, r3
 80060a6:	f005 fd25 	bl	800baf4 <HAL_I2C_Init>
 80060aa:	1e03      	subs	r3, r0, #0
 80060ac:	d001      	beq.n	80060b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80060ae:	f000 fb3d 	bl	800672c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <MX_I2C2_Init+0x74>)
 80060b4:	2100      	movs	r1, #0
 80060b6:	0018      	movs	r0, r3
 80060b8:	f007 fc94 	bl	800d9e4 <HAL_I2CEx_ConfigAnalogFilter>
 80060bc:	1e03      	subs	r3, r0, #0
 80060be:	d001      	beq.n	80060c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80060c0:	f000 fb34 	bl	800672c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80060c4:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <MX_I2C2_Init+0x74>)
 80060c6:	2100      	movs	r1, #0
 80060c8:	0018      	movs	r0, r3
 80060ca:	f007 fcd7 	bl	800da7c <HAL_I2CEx_ConfigDigitalFilter>
 80060ce:	1e03      	subs	r3, r0, #0
 80060d0:	d001      	beq.n	80060d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80060d2:	f000 fb2b 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000d08 	.word	0x20000d08
 80060e0:	40005800 	.word	0x40005800
 80060e4:	00503d58 	.word	0x00503d58

080060e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b08b      	sub	sp, #44	@ 0x2c
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f0:	2414      	movs	r4, #20
 80060f2:	193b      	adds	r3, r7, r4
 80060f4:	0018      	movs	r0, r3
 80060f6:	2314      	movs	r3, #20
 80060f8:	001a      	movs	r2, r3
 80060fa:	2100      	movs	r1, #0
 80060fc:	f012 fa78 	bl	80185f0 <memset>
  if(i2cHandle->Instance==I2C1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a5d      	ldr	r2, [pc, #372]	@ (800627c <HAL_I2C_MspInit+0x194>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d000      	beq.n	800610c <HAL_I2C_MspInit+0x24>
 800610a:	e083      	b.n	8006214 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800610c:	4b5c      	ldr	r3, [pc, #368]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 800610e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006110:	4b5b      	ldr	r3, [pc, #364]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 8006112:	2102      	movs	r1, #2
 8006114:	430a      	orrs	r2, r1
 8006116:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006118:	4b59      	ldr	r3, [pc, #356]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	2202      	movs	r2, #2
 800611e:	4013      	ands	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006124:	0021      	movs	r1, r4
 8006126:	187b      	adds	r3, r7, r1
 8006128:	22c0      	movs	r2, #192	@ 0xc0
 800612a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800612c:	187b      	adds	r3, r7, r1
 800612e:	2212      	movs	r2, #18
 8006130:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006132:	187b      	adds	r3, r7, r1
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006138:	187b      	adds	r3, r7, r1
 800613a:	2203      	movs	r2, #3
 800613c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800613e:	187b      	adds	r3, r7, r1
 8006140:	2201      	movs	r2, #1
 8006142:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006144:	187b      	adds	r3, r7, r1
 8006146:	4a4f      	ldr	r2, [pc, #316]	@ (8006284 <HAL_I2C_MspInit+0x19c>)
 8006148:	0019      	movs	r1, r3
 800614a:	0010      	movs	r0, r2
 800614c:	f005 fa38 	bl	800b5c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006150:	4b4b      	ldr	r3, [pc, #300]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 8006152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006154:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 8006156:	2180      	movs	r1, #128	@ 0x80
 8006158:	0389      	lsls	r1, r1, #14
 800615a:	430a      	orrs	r2, r1
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800615e:	4b4a      	ldr	r3, [pc, #296]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 8006160:	4a4a      	ldr	r2, [pc, #296]	@ (800628c <HAL_I2C_MspInit+0x1a4>)
 8006162:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006164:	4b48      	ldr	r3, [pc, #288]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 8006166:	2206      	movs	r2, #6
 8006168:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800616a:	4b47      	ldr	r3, [pc, #284]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 800616c:	2200      	movs	r2, #0
 800616e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006170:	4b45      	ldr	r3, [pc, #276]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 8006172:	2200      	movs	r2, #0
 8006174:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006176:	4b44      	ldr	r3, [pc, #272]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 8006178:	2280      	movs	r2, #128	@ 0x80
 800617a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800617c:	4b42      	ldr	r3, [pc, #264]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 800617e:	2200      	movs	r2, #0
 8006180:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006182:	4b41      	ldr	r3, [pc, #260]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 8006184:	2200      	movs	r2, #0
 8006186:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006188:	4b3f      	ldr	r3, [pc, #252]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 800618a:	2200      	movs	r2, #0
 800618c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800618e:	4b3e      	ldr	r3, [pc, #248]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 8006190:	2200      	movs	r2, #0
 8006192:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006194:	4b3c      	ldr	r3, [pc, #240]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 8006196:	0018      	movs	r0, r3
 8006198:	f004 fd98 	bl	800accc <HAL_DMA_Init>
 800619c:	1e03      	subs	r3, r0, #0
 800619e:	d001      	beq.n	80061a4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80061a0:	f000 fac4 	bl	800672c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a38      	ldr	r2, [pc, #224]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 80061a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80061aa:	4b37      	ldr	r3, [pc, #220]	@ (8006288 <HAL_I2C_MspInit+0x1a0>)
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80061b0:	4b37      	ldr	r3, [pc, #220]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061b2:	4a38      	ldr	r2, [pc, #224]	@ (8006294 <HAL_I2C_MspInit+0x1ac>)
 80061b4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80061b6:	4b36      	ldr	r3, [pc, #216]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061b8:	2206      	movs	r2, #6
 80061ba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061bc:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061be:	2210      	movs	r2, #16
 80061c0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061c2:	4b33      	ldr	r3, [pc, #204]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061c8:	4b31      	ldr	r3, [pc, #196]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061ca:	2280      	movs	r2, #128	@ 0x80
 80061cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061ce:	4b30      	ldr	r3, [pc, #192]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80061da:	4b2d      	ldr	r3, [pc, #180]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061dc:	2200      	movs	r2, #0
 80061de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80061e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061e8:	0018      	movs	r0, r3
 80061ea:	f004 fd6f 	bl	800accc <HAL_DMA_Init>
 80061ee:	1e03      	subs	r3, r0, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80061f2:	f000 fa9b 	bl	800672c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a25      	ldr	r2, [pc, #148]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80061fc:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <HAL_I2C_MspInit+0x1a8>)
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006202:	2200      	movs	r2, #0
 8006204:	2100      	movs	r1, #0
 8006206:	2017      	movs	r0, #23
 8006208:	f004 fd2e 	bl	800ac68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800620c:	2017      	movs	r0, #23
 800620e:	f004 fd40 	bl	800ac92 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006212:	e02e      	b.n	8006272 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1f      	ldr	r2, [pc, #124]	@ (8006298 <HAL_I2C_MspInit+0x1b0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d129      	bne.n	8006272 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800621e:	4b18      	ldr	r3, [pc, #96]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 8006220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006222:	4b17      	ldr	r3, [pc, #92]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 8006224:	2102      	movs	r1, #2
 8006226:	430a      	orrs	r2, r1
 8006228:	62da      	str	r2, [r3, #44]	@ 0x2c
 800622a:	4b15      	ldr	r3, [pc, #84]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 800622c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622e:	2202      	movs	r2, #2
 8006230:	4013      	ands	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006236:	2114      	movs	r1, #20
 8006238:	187b      	adds	r3, r7, r1
 800623a:	22c0      	movs	r2, #192	@ 0xc0
 800623c:	0112      	lsls	r2, r2, #4
 800623e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006240:	187b      	adds	r3, r7, r1
 8006242:	2212      	movs	r2, #18
 8006244:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006246:	187b      	adds	r3, r7, r1
 8006248:	2200      	movs	r2, #0
 800624a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800624c:	187b      	adds	r3, r7, r1
 800624e:	2203      	movs	r2, #3
 8006250:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006252:	187b      	adds	r3, r7, r1
 8006254:	2206      	movs	r2, #6
 8006256:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006258:	187b      	adds	r3, r7, r1
 800625a:	4a0a      	ldr	r2, [pc, #40]	@ (8006284 <HAL_I2C_MspInit+0x19c>)
 800625c:	0019      	movs	r1, r3
 800625e:	0010      	movs	r0, r2
 8006260:	f005 f9ae 	bl	800b5c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006264:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 8006266:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006268:	4b05      	ldr	r3, [pc, #20]	@ (8006280 <HAL_I2C_MspInit+0x198>)
 800626a:	2180      	movs	r1, #128	@ 0x80
 800626c:	03c9      	lsls	r1, r1, #15
 800626e:	430a      	orrs	r2, r1
 8006270:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b00b      	add	sp, #44	@ 0x2c
 8006278:	bd90      	pop	{r4, r7, pc}
 800627a:	46c0      	nop			@ (mov r8, r8)
 800627c:	40005400 	.word	0x40005400
 8006280:	40021000 	.word	0x40021000
 8006284:	50000400 	.word	0x50000400
 8006288:	20000d5c 	.word	0x20000d5c
 800628c:	40020030 	.word	0x40020030
 8006290:	20000da4 	.word	0x20000da4
 8006294:	4002001c 	.word	0x4002001c
 8006298:	40005800 	.word	0x40005800

0800629c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80062a0:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062a2:	4a11      	ldr	r2, [pc, #68]	@ (80062e8 <MX_I2S2_Init+0x4c>)
 80062a4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80062a6:	4b0f      	ldr	r3, [pc, #60]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062a8:	22c0      	movs	r2, #192	@ 0xc0
 80062aa:	0092      	lsls	r2, r2, #2
 80062ac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062b0:	2210      	movs	r2, #16
 80062b2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 80062b4:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062b6:	2205      	movs	r2, #5
 80062b8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80062ba:	4b0a      	ldr	r3, [pc, #40]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062bc:	2200      	movs	r2, #0
 80062be:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80062c0:	4b08      	ldr	r3, [pc, #32]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062c2:	22fa      	movs	r2, #250	@ 0xfa
 80062c4:	0152      	lsls	r2, r2, #5
 80062c6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80062c8:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062ca:	2208      	movs	r2, #8
 80062cc:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80062ce:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <MX_I2S2_Init+0x48>)
 80062d0:	0018      	movs	r0, r3
 80062d2:	f007 fc1f 	bl	800db14 <HAL_I2S_Init>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d001      	beq.n	80062de <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80062da:	f000 fa27 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80062de:	46c0      	nop			@ (mov r8, r8)
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000dec 	.word	0x20000dec
 80062e8:	40003800 	.word	0x40003800

080062ec <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b089      	sub	sp, #36	@ 0x24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f4:	240c      	movs	r4, #12
 80062f6:	193b      	adds	r3, r7, r4
 80062f8:	0018      	movs	r0, r3
 80062fa:	2314      	movs	r3, #20
 80062fc:	001a      	movs	r2, r3
 80062fe:	2100      	movs	r1, #0
 8006300:	f012 f976 	bl	80185f0 <memset>
  if(i2sHandle->Instance==SPI2)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2d      	ldr	r2, [pc, #180]	@ (80063c0 <HAL_I2S_MspInit+0xd4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d154      	bne.n	80063b8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800630e:	4b2d      	ldr	r3, [pc, #180]	@ (80063c4 <HAL_I2S_MspInit+0xd8>)
 8006310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006312:	4b2c      	ldr	r3, [pc, #176]	@ (80063c4 <HAL_I2S_MspInit+0xd8>)
 8006314:	2180      	movs	r1, #128	@ 0x80
 8006316:	01c9      	lsls	r1, r1, #7
 8006318:	430a      	orrs	r2, r1
 800631a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800631c:	4b29      	ldr	r3, [pc, #164]	@ (80063c4 <HAL_I2S_MspInit+0xd8>)
 800631e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006320:	4b28      	ldr	r3, [pc, #160]	@ (80063c4 <HAL_I2S_MspInit+0xd8>)
 8006322:	2102      	movs	r1, #2
 8006324:	430a      	orrs	r2, r1
 8006326:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006328:	4b26      	ldr	r3, [pc, #152]	@ (80063c4 <HAL_I2S_MspInit+0xd8>)
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	2202      	movs	r2, #2
 800632e:	4013      	ands	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006334:	193b      	adds	r3, r7, r4
 8006336:	22b0      	movs	r2, #176	@ 0xb0
 8006338:	0212      	lsls	r2, r2, #8
 800633a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800633c:	0021      	movs	r1, r4
 800633e:	187b      	adds	r3, r7, r1
 8006340:	2202      	movs	r2, #2
 8006342:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006344:	187b      	adds	r3, r7, r1
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800634a:	187b      	adds	r3, r7, r1
 800634c:	2200      	movs	r2, #0
 800634e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006350:	187b      	adds	r3, r7, r1
 8006352:	2200      	movs	r2, #0
 8006354:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006356:	187b      	adds	r3, r7, r1
 8006358:	4a1b      	ldr	r2, [pc, #108]	@ (80063c8 <HAL_I2S_MspInit+0xdc>)
 800635a:	0019      	movs	r1, r3
 800635c:	0010      	movs	r0, r2
 800635e:	f005 f92f 	bl	800b5c0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006362:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 8006364:	4a1a      	ldr	r2, [pc, #104]	@ (80063d0 <HAL_I2S_MspInit+0xe4>)
 8006366:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006368:	4b18      	ldr	r3, [pc, #96]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 800636a:	2202      	movs	r2, #2
 800636c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800636e:	4b17      	ldr	r3, [pc, #92]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 8006370:	2200      	movs	r2, #0
 8006372:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006374:	4b15      	ldr	r3, [pc, #84]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 8006376:	2200      	movs	r2, #0
 8006378:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800637a:	4b14      	ldr	r3, [pc, #80]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 800637c:	2280      	movs	r2, #128	@ 0x80
 800637e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006380:	4b12      	ldr	r3, [pc, #72]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 8006382:	2280      	movs	r2, #128	@ 0x80
 8006384:	0052      	lsls	r2, r2, #1
 8006386:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006388:	4b10      	ldr	r3, [pc, #64]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 800638a:	2280      	movs	r2, #128	@ 0x80
 800638c:	00d2      	lsls	r2, r2, #3
 800638e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006390:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 8006392:	2220      	movs	r2, #32
 8006394:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006396:	4b0d      	ldr	r3, [pc, #52]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 8006398:	2200      	movs	r2, #0
 800639a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800639c:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 800639e:	0018      	movs	r0, r3
 80063a0:	f004 fc94 	bl	800accc <HAL_DMA_Init>
 80063a4:	1e03      	subs	r3, r0, #0
 80063a6:	d001      	beq.n	80063ac <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80063a8:	f000 f9c0 	bl	800672c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a07      	ldr	r2, [pc, #28]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 80063b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80063b2:	4b06      	ldr	r3, [pc, #24]	@ (80063cc <HAL_I2S_MspInit+0xe0>)
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80063b8:	46c0      	nop			@ (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b009      	add	sp, #36	@ 0x24
 80063be:	bd90      	pop	{r4, r7, pc}
 80063c0:	40003800 	.word	0x40003800
 80063c4:	40021000 	.word	0x40021000
 80063c8:	50000400 	.word	0x50000400
 80063cc:	20000e28 	.word	0x20000e28
 80063d0:	40020044 	.word	0x40020044

080063d4 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006414 <HAL_I2S_MspDeInit+0x40>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d111      	bne.n	800640a <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80063e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006418 <HAL_I2S_MspDeInit+0x44>)
 80063e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <HAL_I2S_MspDeInit+0x44>)
 80063ec:	490b      	ldr	r1, [pc, #44]	@ (800641c <HAL_I2S_MspDeInit+0x48>)
 80063ee:	400a      	ands	r2, r1
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80063f2:	23b0      	movs	r3, #176	@ 0xb0
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006420 <HAL_I2S_MspDeInit+0x4c>)
 80063f8:	0019      	movs	r1, r3
 80063fa:	0010      	movs	r0, r2
 80063fc:	f005 fa5e 	bl	800b8bc <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006404:	0018      	movs	r0, r3
 8006406:	f004 fcd9 	bl	800adbc <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	46bd      	mov	sp, r7
 800640e:	b002      	add	sp, #8
 8006410:	bd80      	pop	{r7, pc}
 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	40003800 	.word	0x40003800
 8006418:	40021000 	.word	0x40021000
 800641c:	ffffbfff 	.word	0xffffbfff
 8006420:	50000400 	.word	0x50000400

08006424 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  testDone = true;
 8006428:	4b1e      	ldr	r3, [pc, #120]	@ (80064a4 <SetTestDone+0x80>)
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 800642e:	23fa      	movs	r3, #250	@ 0xfa
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	0018      	movs	r0, r3
 8006434:	f003 ffac 	bl	800a390 <HAL_Delay>
  SetDBLED(false, false, true);
 8006438:	2201      	movs	r2, #1
 800643a:	2100      	movs	r1, #0
 800643c:	2000      	movs	r0, #0
 800643e:	f002 fd15 	bl	8008e6c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8006442:	4a19      	ldr	r2, [pc, #100]	@ (80064a8 <SetTestDone+0x84>)
 8006444:	23fa      	movs	r3, #250	@ 0xfa
 8006446:	0119      	lsls	r1, r3, #4
 8006448:	23fa      	movs	r3, #250	@ 0xfa
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	0018      	movs	r0, r3
 800644e:	f002 fcd9 	bl	8008e04 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8006452:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <SetTestDone+0x84>)
 8006454:	23fa      	movs	r3, #250	@ 0xfa
 8006456:	0119      	lsls	r1, r3, #4
 8006458:	23fa      	movs	r3, #250	@ 0xfa
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	0018      	movs	r0, r3
 800645e:	f002 fd4f 	bl	8008f00 <SetVocLED>
  HAL_Delay(1000);
 8006462:	23fa      	movs	r3, #250	@ 0xfa
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	0018      	movs	r0, r3
 8006468:	f003 ff92 	bl	800a390 <HAL_Delay>
  SetDBLED(false, false, false);
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	2000      	movs	r0, #0
 8006472:	f002 fcfb 	bl	8008e6c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8006476:	23fa      	movs	r3, #250	@ 0xfa
 8006478:	011a      	lsls	r2, r3, #4
 800647a:	23fa      	movs	r3, #250	@ 0xfa
 800647c:	0119      	lsls	r1, r3, #4
 800647e:	23fa      	movs	r3, #250	@ 0xfa
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	0018      	movs	r0, r3
 8006484:	f002 fcbe 	bl	8008e04 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8006488:	23fa      	movs	r3, #250	@ 0xfa
 800648a:	011a      	lsls	r2, r3, #4
 800648c:	23fa      	movs	r3, #250	@ 0xfa
 800648e:	0119      	lsls	r1, r3, #4
 8006490:	23fa      	movs	r3, #250	@ 0xfa
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	0018      	movs	r0, r3
 8006496:	f002 fd33 	bl	8008f00 <SetVocLED>
  InitDone();
 800649a:	f002 fc5d 	bl	8008d58 <InitDone>
}
 800649e:	46c0      	nop			@ (mov r8, r8)
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000e70 	.word	0x20000e70
 80064a8:	00000bb8 	.word	0x00000bb8

080064ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064b0:	f003 fefe 	bl	800a2b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064b4:	f000 f8b4 	bl	8006620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064b8:	f7ff fc04 	bl	8005cc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80064bc:	f7ff fb58 	bl	8005b70 <MX_DMA_Init>
  MX_I2C1_Init();
 80064c0:	f7ff fd92 	bl	8005fe8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80064c4:	f7ff feea 	bl	800629c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80064c8:	f003 f9e8 	bl	800989c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80064cc:	f7ff fdcc 	bl	8006068 <MX_I2C2_Init>
  MX_TIM2_Init();
 80064d0:	f003 f830 	bl	8009534 <MX_TIM2_Init>
  MX_TIM3_Init();
 80064d4:	f003 f8a2 	bl	800961c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80064d8:	f003 fa14 	bl	8009904 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80064dc:	f7ff fa96 	bl	8005a0c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80064e0:	f010 fd0c 	bl	8016efc <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80064e4:	f001 f842 	bl	800756c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80064e8:	f003 f9a2 	bl	8009830 <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80064ec:	4a3c      	ldr	r2, [pc, #240]	@ (80065e0 <main+0x134>)
 80064ee:	4b3d      	ldr	r3, [pc, #244]	@ (80065e4 <main+0x138>)
 80064f0:	0011      	movs	r1, r2
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7ff fcfc 	bl	8005ef0 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80064f8:	f7ff fa26 	bl	8005948 <UserButton_Pressed>
 80064fc:	1e03      	subs	r3, r0, #0
 80064fe:	d004      	beq.n	800650a <main+0x5e>
    EnableESPProg();
 8006500:	f010 fdcc 	bl	801709c <EnableESPProg>
    ESP_Programming = true;
 8006504:	4b38      	ldr	r3, [pc, #224]	@ (80065e8 <main+0x13c>)
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800650a:	2003      	movs	r0, #3
 800650c:	f003 fc12 	bl	8009d34 <SetVerboseLevel>
  BinaryReleaseInfo();
 8006510:	f003 fc28 	bl	8009d64 <BinaryReleaseInfo>
  InitClock(&hrtc);
 8006514:	4b35      	ldr	r3, [pc, #212]	@ (80065ec <main+0x140>)
 8006516:	0018      	movs	r0, r3
 8006518:	f7ff fa5e 	bl	80059d8 <InitClock>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 800651c:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <main+0x144>)
 800651e:	4a35      	ldr	r2, [pc, #212]	@ (80065f4 <main+0x148>)
 8006520:	4935      	ldr	r1, [pc, #212]	@ (80065f8 <main+0x14c>)
 8006522:	4836      	ldr	r0, [pc, #216]	@ (80065fc <main+0x150>)
 8006524:	f7ff fb4a 	bl	8005bbc <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8006528:	4b35      	ldr	r3, [pc, #212]	@ (8006600 <main+0x154>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d019      	beq.n	8006564 <main+0xb8>
 8006530:	4b2d      	ldr	r3, [pc, #180]	@ (80065e8 <main+0x13c>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2201      	movs	r2, #1
 8006536:	4053      	eors	r3, r2
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d012      	beq.n	8006564 <main+0xb8>
 800653e:	4b31      	ldr	r3, [pc, #196]	@ (8006604 <main+0x158>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2201      	movs	r2, #1
 8006544:	4053      	eors	r3, r2
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <main+0xb8>
      MeasurementBusy = UpkeepGadget();
 800654c:	f7ff fb64 	bl	8005c18 <UpkeepGadget>
 8006550:	0003      	movs	r3, r0
 8006552:	001a      	movs	r2, r3
 8006554:	4b2c      	ldr	r3, [pc, #176]	@ (8006608 <main+0x15c>)
 8006556:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8006558:	f7fe fbb6 	bl	8004cc8 <ESP_Upkeep>
 800655c:	0003      	movs	r3, r0
 800655e:	001a      	movs	r2, r3
 8006560:	4b2a      	ldr	r3, [pc, #168]	@ (800660c <main+0x160>)
 8006562:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8006564:	4b26      	ldr	r3, [pc, #152]	@ (8006600 <main+0x154>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2201      	movs	r2, #1
 800656a:	4053      	eors	r3, r2
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00f      	beq.n	8006592 <main+0xe6>
 8006572:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <main+0x13c>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	4053      	eors	r3, r2
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <main+0xe6>
 8006580:	4b20      	ldr	r3, [pc, #128]	@ (8006604 <main+0x158>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	4053      	eors	r3, r2
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <main+0xe6>
      Gadget_Test();
 800658e:	f7ff fb3b 	bl	8005c08 <Gadget_Test>
    }
    Status_Upkeep();
 8006592:	f002 fe85 	bl	80092a0 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8006596:	4b1e      	ldr	r3, [pc, #120]	@ (8006610 <main+0x164>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	0018      	movs	r0, r3
 800659c:	f003 fb12 	bl	8009bc4 <TimestampIsReached>
 80065a0:	1e03      	subs	r3, r0, #0
 80065a2:	d00c      	beq.n	80065be <main+0x112>
      charge = Battery_Upkeep();
 80065a4:	f002 fe83 	bl	80092ae <Battery_Upkeep>
 80065a8:	0003      	movs	r3, r0
 80065aa:	001a      	movs	r2, r3
 80065ac:	4b19      	ldr	r3, [pc, #100]	@ (8006614 <main+0x168>)
 80065ae:	701a      	strb	r2, [r3, #0]
      batteryReadTimer = HAL_GetTick + 60000;
 80065b0:	4b19      	ldr	r3, [pc, #100]	@ (8006618 <main+0x16c>)
 80065b2:	4a1a      	ldr	r2, [pc, #104]	@ (800661c <main+0x170>)
 80065b4:	4694      	mov	ip, r2
 80065b6:	4463      	add	r3, ip
 80065b8:	001a      	movs	r2, r3
 80065ba:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <main+0x164>)
 80065bc:	601a      	str	r2, [r3, #0]
      //GoToSleep(2);
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 80065be:	4b15      	ldr	r3, [pc, #84]	@ (8006614 <main+0x168>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d107      	bne.n	80065d6 <main+0x12a>
 80065c6:	4b11      	ldr	r3, [pc, #68]	@ (800660c <main+0x160>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b09      	cmp	r3, #9
 80065cc:	d103      	bne.n	80065d6 <main+0x12a>
      batteryEmpty = true;
 80065ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <main+0x158>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	e002      	b.n	80065dc <main+0x130>
    }
    else{
      batteryEmpty = false;
 80065d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <main+0x158>)
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 80065dc:	e7a4      	b.n	8006528 <main+0x7c>
 80065de:	46c0      	nop			@ (mov r8, r8)
 80065e0:	20002844 	.word	0x20002844
 80065e4:	20002804 	.word	0x20002804
 80065e8:	20000e71 	.word	0x20000e71
 80065ec:	20002710 	.word	0x20002710
 80065f0:	20000c54 	.word	0x20000c54
 80065f4:	200029f4 	.word	0x200029f4
 80065f8:	20000dec 	.word	0x20000dec
 80065fc:	20000cb4 	.word	0x20000cb4
 8006600:	20000e70 	.word	0x20000e70
 8006604:	20000e72 	.word	0x20000e72
 8006608:	20000e73 	.word	0x20000e73
 800660c:	20000e79 	.word	0x20000e79
 8006610:	20000e74 	.word	0x20000e74
 8006614:	20000e78 	.word	0x20000e78
 8006618:	0800a37d 	.word	0x0800a37d
 800661c:	0000ea60 	.word	0x0000ea60

08006620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006620:	b590      	push	{r4, r7, lr}
 8006622:	b09d      	sub	sp, #116	@ 0x74
 8006624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006626:	2438      	movs	r4, #56	@ 0x38
 8006628:	193b      	adds	r3, r7, r4
 800662a:	0018      	movs	r0, r3
 800662c:	2338      	movs	r3, #56	@ 0x38
 800662e:	001a      	movs	r2, r3
 8006630:	2100      	movs	r1, #0
 8006632:	f011 ffdd 	bl	80185f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006636:	2324      	movs	r3, #36	@ 0x24
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	0018      	movs	r0, r3
 800663c:	2314      	movs	r3, #20
 800663e:	001a      	movs	r2, r3
 8006640:	2100      	movs	r1, #0
 8006642:	f011 ffd5 	bl	80185f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006646:	003b      	movs	r3, r7
 8006648:	0018      	movs	r0, r3
 800664a:	2324      	movs	r3, #36	@ 0x24
 800664c:	001a      	movs	r2, r3
 800664e:	2100      	movs	r1, #0
 8006650:	f011 ffce 	bl	80185f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006654:	4b32      	ldr	r3, [pc, #200]	@ (8006720 <SystemClock_Config+0x100>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a32      	ldr	r2, [pc, #200]	@ (8006724 <SystemClock_Config+0x104>)
 800665a:	401a      	ands	r2, r3
 800665c:	4b30      	ldr	r3, [pc, #192]	@ (8006720 <SystemClock_Config+0x100>)
 800665e:	2180      	movs	r1, #128	@ 0x80
 8006660:	0109      	lsls	r1, r1, #4
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006666:	f009 fbf5 	bl	800fe54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800666a:	4b2f      	ldr	r3, [pc, #188]	@ (8006728 <SystemClock_Config+0x108>)
 800666c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800666e:	4b2e      	ldr	r3, [pc, #184]	@ (8006728 <SystemClock_Config+0x108>)
 8006670:	492c      	ldr	r1, [pc, #176]	@ (8006724 <SystemClock_Config+0x104>)
 8006672:	400a      	ands	r2, r1
 8006674:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8006676:	193b      	adds	r3, r7, r4
 8006678:	2226      	movs	r2, #38	@ 0x26
 800667a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800667c:	193b      	adds	r3, r7, r4
 800667e:	2280      	movs	r2, #128	@ 0x80
 8006680:	0052      	lsls	r2, r2, #1
 8006682:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006684:	0021      	movs	r1, r4
 8006686:	187b      	adds	r3, r7, r1
 8006688:	2201      	movs	r2, #1
 800668a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800668c:	187b      	adds	r3, r7, r1
 800668e:	2210      	movs	r2, #16
 8006690:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006692:	187b      	adds	r3, r7, r1
 8006694:	2201      	movs	r2, #1
 8006696:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006698:	187b      	adds	r3, r7, r1
 800669a:	2200      	movs	r2, #0
 800669c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800669e:	187b      	adds	r3, r7, r1
 80066a0:	0018      	movs	r0, r3
 80066a2:	f009 fbe5 	bl	800fe70 <HAL_RCC_OscConfig>
 80066a6:	1e03      	subs	r3, r0, #0
 80066a8:	d001      	beq.n	80066ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80066aa:	f000 f83f 	bl	800672c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066ae:	2124      	movs	r1, #36	@ 0x24
 80066b0:	187b      	adds	r3, r7, r1
 80066b2:	220f      	movs	r2, #15
 80066b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80066b6:	187b      	adds	r3, r7, r1
 80066b8:	2201      	movs	r2, #1
 80066ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066bc:	187b      	adds	r3, r7, r1
 80066be:	2200      	movs	r2, #0
 80066c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80066c2:	187b      	adds	r3, r7, r1
 80066c4:	2200      	movs	r2, #0
 80066c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80066c8:	187b      	adds	r3, r7, r1
 80066ca:	2200      	movs	r2, #0
 80066cc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80066ce:	187b      	adds	r3, r7, r1
 80066d0:	2100      	movs	r1, #0
 80066d2:	0018      	movs	r0, r3
 80066d4:	f009 ffa0 	bl	8010618 <HAL_RCC_ClockConfig>
 80066d8:	1e03      	subs	r3, r0, #0
 80066da:	d001      	beq.n	80066e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80066dc:	f000 f826 	bl	800672c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80066e0:	003b      	movs	r3, r7
 80066e2:	226d      	movs	r2, #109	@ 0x6d
 80066e4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80066e6:	003b      	movs	r3, r7
 80066e8:	2200      	movs	r2, #0
 80066ea:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80066ec:	003b      	movs	r3, r7
 80066ee:	2200      	movs	r2, #0
 80066f0:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80066f2:	003b      	movs	r3, r7
 80066f4:	2200      	movs	r2, #0
 80066f6:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80066f8:	003b      	movs	r3, r7
 80066fa:	2280      	movs	r2, #128	@ 0x80
 80066fc:	0252      	lsls	r2, r2, #9
 80066fe:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006700:	003b      	movs	r3, r7
 8006702:	2280      	movs	r2, #128	@ 0x80
 8006704:	04d2      	lsls	r2, r2, #19
 8006706:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006708:	003b      	movs	r3, r7
 800670a:	0018      	movs	r0, r3
 800670c:	f00a f9a8 	bl	8010a60 <HAL_RCCEx_PeriphCLKConfig>
 8006710:	1e03      	subs	r3, r0, #0
 8006712:	d001      	beq.n	8006718 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006714:	f000 f80a 	bl	800672c <Error_Handler>
  }
}
 8006718:	46c0      	nop			@ (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b01d      	add	sp, #116	@ 0x74
 800671e:	bd90      	pop	{r4, r7, pc}
 8006720:	40007000 	.word	0x40007000
 8006724:	ffffe7ff 	.word	0xffffe7ff
 8006728:	40021000 	.word	0x40021000

0800672c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006730:	b672      	cpsid	i
}
 8006732:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006734:	46c0      	nop			@ (mov r8, r8)
 8006736:	e7fd      	b.n	8006734 <Error_Handler+0x8>

08006738 <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 800673c:	f7ff fc35 	bl	8005faa <HT_StartMeasurement>
}
 8006740:	46c0      	nop			@ (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 800674c:	4a04      	ldr	r2, [pc, #16]	@ (8006760 <HT_IsMeasurementDoneWrapper+0x18>)
 800674e:	4b05      	ldr	r3, [pc, #20]	@ (8006764 <HT_IsMeasurementDoneWrapper+0x1c>)
 8006750:	0011      	movs	r1, r2
 8006752:	0018      	movs	r0, r3
 8006754:	f7ff fc30 	bl	8005fb8 <HT_GetMeasurementValues>
 8006758:	0003      	movs	r3, r0
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000e80 	.word	0x20000e80
 8006764:	20000e7c 	.word	0x20000e7c

08006768 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 800676c:	f7ff fa8d 	bl	8005c8a <Gas_StartMeasurement>
}
 8006770:	46c0      	nop			@ (mov r8, r8)
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 800677c:	4b03      	ldr	r3, [pc, #12]	@ (800678c <VOC_IsMeasurementDoneWrapper+0x14>)
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff fa8a 	bl	8005c98 <Gas_GetMeasurementValues>
 8006784:	0003      	movs	r3, r0
}
 8006786:	0018      	movs	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20000e84 	.word	0x20000e84

08006790 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
}
 8006794:	46c0      	nop			@ (mov r8, r8)
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800679a:	b580      	push	{r7, lr}
 800679c:	af00      	add	r7, sp, #0
  return true;
 800679e:	2301      	movs	r3, #1
}
 80067a0:	0018      	movs	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 80067a6:	b580      	push	{r7, lr}
 80067a8:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 80067aa:	23fa      	movs	r3, #250	@ 0xfa
 80067ac:	015b      	lsls	r3, r3, #5
 80067ae:	2180      	movs	r1, #128	@ 0x80
 80067b0:	0018      	movs	r0, r3
 80067b2:	f000 fba3 	bl	8006efc <MIC_Start>
}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 80067c0:	f000 fdfe 	bl	80073c0 <MIC_MeasurementDone>
 80067c4:	0003      	movs	r3, r0
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <Meas_TestStart>:
void Meas_TestStart(){
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 80067d0:	f7ff ffe9 	bl	80067a6 <MIC_StartMeasurementWrapper>
}
 80067d4:	46c0      	nop			@ (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 80067da:	b580      	push	{r7, lr}
 80067dc:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 80067de:	f000 fe0f 	bl	8007400 <MIC_TestMeasurementDone>
 80067e2:	0003      	movs	r3, r0
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <testInit>:
void testInit(){
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80067f0:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <testInit+0x24>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <testInit+0x24>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 80067fc:	4b04      	ldr	r3, [pc, #16]	@ (8006810 <testInit+0x24>)
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8006802:	4b03      	ldr	r3, [pc, #12]	@ (8006810 <testInit+0x24>)
 8006804:	2200      	movs	r2, #0
 8006806:	705a      	strb	r2, [r3, #1]
}
 8006808:	46c0      	nop			@ (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	20000ec0 	.word	0x20000ec0

08006814 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8006814:	b5b0      	push	{r4, r5, r7, lr}
 8006816:	b092      	sub	sp, #72	@ 0x48
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8006820:	4b6f      	ldr	r3, [pc, #444]	@ (80069e0 <Meas_Init+0x1cc>)
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
  testInit();
 8006826:	f7ff ffe1 	bl	80067ec <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 800682a:	4b6e      	ldr	r3, [pc, #440]	@ (80069e4 <Meas_Init+0x1d0>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <Meas_Init+0x26>
 8006832:	4b6c      	ldr	r3, [pc, #432]	@ (80069e4 <Meas_Init+0x1d0>)
 8006834:	785b      	ldrb	r3, [r3, #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d068      	beq.n	800690c <Meas_Init+0xf8>
    I2CSensors_Init(sensorI2C);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	0018      	movs	r0, r3
 800683e:	f7fe fd19 	bl	8005274 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8006842:	f7ff fbc9 	bl	8005fd8 <HT_DeviceConnected>
 8006846:	0003      	movs	r3, r0
 8006848:	001a      	movs	r2, r3
 800684a:	2301      	movs	r3, #1
 800684c:	4053      	eors	r3, r2
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00c      	beq.n	800686e <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 8006854:	4a64      	ldr	r2, [pc, #400]	@ (80069e8 <Meas_Init+0x1d4>)
 8006856:	4b65      	ldr	r3, [pc, #404]	@ (80069ec <Meas_Init+0x1d8>)
 8006858:	0019      	movs	r1, r3
 800685a:	2001      	movs	r0, #1
 800685c:	f003 fa08 	bl	8009c70 <CreateLine>
       MeasTest.HT_Tested = false;
 8006860:	4b63      	ldr	r3, [pc, #396]	@ (80069f0 <Meas_Init+0x1dc>)
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8006866:	4b5f      	ldr	r3, [pc, #380]	@ (80069e4 <Meas_Init+0x1d0>)
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e008      	b.n	8006880 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 800686e:	4b60      	ldr	r3, [pc, #384]	@ (80069f0 <Meas_Init+0x1dc>)
 8006870:	2201      	movs	r2, #1
 8006872:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006874:	4a5f      	ldr	r2, [pc, #380]	@ (80069f4 <Meas_Init+0x1e0>)
 8006876:	4b60      	ldr	r3, [pc, #384]	@ (80069f8 <Meas_Init+0x1e4>)
 8006878:	0019      	movs	r1, r3
 800687a:	2003      	movs	r0, #3
 800687c:	f003 f9f8 	bl	8009c70 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006880:	f7ff fa17 	bl	8005cb2 <Gas_DeviceConnected>
 8006884:	0003      	movs	r3, r0
 8006886:	001a      	movs	r2, r3
 8006888:	2301      	movs	r3, #1
 800688a:	4053      	eors	r3, r2
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 8006892:	4b57      	ldr	r3, [pc, #348]	@ (80069f0 <Meas_Init+0x1dc>)
 8006894:	2200      	movs	r2, #0
 8006896:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8006898:	4a58      	ldr	r2, [pc, #352]	@ (80069fc <Meas_Init+0x1e8>)
 800689a:	4b54      	ldr	r3, [pc, #336]	@ (80069ec <Meas_Init+0x1d8>)
 800689c:	0019      	movs	r1, r3
 800689e:	2001      	movs	r0, #1
 80068a0:	f003 f9e6 	bl	8009c70 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 80068a4:	4b4f      	ldr	r3, [pc, #316]	@ (80069e4 <Meas_Init+0x1d0>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	705a      	strb	r2, [r3, #1]
 80068aa:	e008      	b.n	80068be <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 80068ac:	4b50      	ldr	r3, [pc, #320]	@ (80069f0 <Meas_Init+0x1dc>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 80068b2:	4a53      	ldr	r2, [pc, #332]	@ (8006a00 <Meas_Init+0x1ec>)
 80068b4:	4b50      	ldr	r3, [pc, #320]	@ (80069f8 <Meas_Init+0x1e4>)
 80068b6:	0019      	movs	r1, r3
 80068b8:	2003      	movs	r0, #3
 80068ba:	f003 f9d9 	bl	8009c70 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 80068be:	4b4c      	ldr	r3, [pc, #304]	@ (80069f0 <Meas_Init+0x1dc>)
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <Meas_Init+0xc6>
 80068c6:	4b4a      	ldr	r3, [pc, #296]	@ (80069f0 <Meas_Init+0x1dc>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d005      	beq.n	80068da <Meas_Init+0xc6>
      SetDBLED(false, true, false);
 80068ce:	2200      	movs	r2, #0
 80068d0:	2101      	movs	r1, #1
 80068d2:	2000      	movs	r0, #0
 80068d4:	f002 faca 	bl	8008e6c <SetDBLED>
 80068d8:	e018      	b.n	800690c <Meas_Init+0xf8>
    }
    else{
      SetDBLED(true, false, false);
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	2001      	movs	r0, #1
 80068e0:	f002 fac4 	bl	8008e6c <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80068e4:	4b47      	ldr	r3, [pc, #284]	@ (8006a04 <Meas_Init+0x1f0>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	2101      	movs	r1, #1
 80068ea:	0018      	movs	r0, r3
 80068ec:	f005 f8e5 	bl	800baba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80068f0:	2380      	movs	r3, #128	@ 0x80
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	4843      	ldr	r0, [pc, #268]	@ (8006a04 <Meas_Init+0x1f0>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	0019      	movs	r1, r3
 80068fa:	f005 f8de 	bl	800baba <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80068fe:	2380      	movs	r3, #128	@ 0x80
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4840      	ldr	r0, [pc, #256]	@ (8006a04 <Meas_Init+0x1f0>)
 8006904:	2201      	movs	r2, #1
 8006906:	0019      	movs	r1, r3
 8006908:	f005 f8d7 	bl	800baba <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 800690c:	4b35      	ldr	r3, [pc, #212]	@ (80069e4 <Meas_Init+0x1d0>)
 800690e:	78db      	ldrb	r3, [r3, #3]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <Meas_Init+0x10c>
    MIC_Init(micI2s);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	0018      	movs	r0, r3
 8006918:	f000 fa8a 	bl	8006e30 <MIC_Init>
    Meas_TestStart();
 800691c:	f7ff ff56 	bl	80067cc <Meas_TestStart>
  }
  uint8_t offset = 0;
 8006920:	2547      	movs	r5, #71	@ 0x47
 8006922:	197b      	adds	r3, r7, r5
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8006928:	197b      	adds	r3, r7, r5
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	197a      	adds	r2, r7, r5
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	7011      	strb	r1, [r2, #0]
 8006932:	4a2c      	ldr	r2, [pc, #176]	@ (80069e4 <Meas_Init+0x1d0>)
 8006934:	7814      	ldrb	r4, [r2, #0]
 8006936:	4a34      	ldr	r2, [pc, #208]	@ (8006a08 <Meas_Init+0x1f4>)
 8006938:	0119      	lsls	r1, r3, #4
 800693a:	4834      	ldr	r0, [pc, #208]	@ (8006a0c <Meas_Init+0x1f8>)
 800693c:	5088      	str	r0, [r1, r2]
 800693e:	4932      	ldr	r1, [pc, #200]	@ (8006a08 <Meas_Init+0x1f4>)
 8006940:	011a      	lsls	r2, r3, #4
 8006942:	188a      	adds	r2, r1, r2
 8006944:	3204      	adds	r2, #4
 8006946:	4932      	ldr	r1, [pc, #200]	@ (8006a10 <Meas_Init+0x1fc>)
 8006948:	6011      	str	r1, [r2, #0]
 800694a:	492f      	ldr	r1, [pc, #188]	@ (8006a08 <Meas_Init+0x1f4>)
 800694c:	011a      	lsls	r2, r3, #4
 800694e:	188a      	adds	r2, r1, r2
 8006950:	3208      	adds	r2, #8
 8006952:	4930      	ldr	r1, [pc, #192]	@ (8006a14 <Meas_Init+0x200>)
 8006954:	6011      	str	r1, [r2, #0]
 8006956:	4a2c      	ldr	r2, [pc, #176]	@ (8006a08 <Meas_Init+0x1f4>)
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	18d3      	adds	r3, r2, r3
 800695c:	330c      	adds	r3, #12
 800695e:	1c22      	adds	r2, r4, #0
 8006960:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8006962:	197b      	adds	r3, r7, r5
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	197a      	adds	r2, r7, r5
 8006968:	1c59      	adds	r1, r3, #1
 800696a:	7011      	strb	r1, [r2, #0]
 800696c:	4a1d      	ldr	r2, [pc, #116]	@ (80069e4 <Meas_Init+0x1d0>)
 800696e:	7854      	ldrb	r4, [r2, #1]
 8006970:	4a25      	ldr	r2, [pc, #148]	@ (8006a08 <Meas_Init+0x1f4>)
 8006972:	0119      	lsls	r1, r3, #4
 8006974:	4828      	ldr	r0, [pc, #160]	@ (8006a18 <Meas_Init+0x204>)
 8006976:	5088      	str	r0, [r1, r2]
 8006978:	4923      	ldr	r1, [pc, #140]	@ (8006a08 <Meas_Init+0x1f4>)
 800697a:	011a      	lsls	r2, r3, #4
 800697c:	188a      	adds	r2, r1, r2
 800697e:	3204      	adds	r2, #4
 8006980:	4926      	ldr	r1, [pc, #152]	@ (8006a1c <Meas_Init+0x208>)
 8006982:	6011      	str	r1, [r2, #0]
 8006984:	4920      	ldr	r1, [pc, #128]	@ (8006a08 <Meas_Init+0x1f4>)
 8006986:	011a      	lsls	r2, r3, #4
 8006988:	188a      	adds	r2, r1, r2
 800698a:	3208      	adds	r2, #8
 800698c:	4924      	ldr	r1, [pc, #144]	@ (8006a20 <Meas_Init+0x20c>)
 800698e:	6011      	str	r1, [r2, #0]
 8006990:	4a1d      	ldr	r2, [pc, #116]	@ (8006a08 <Meas_Init+0x1f4>)
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	18d3      	adds	r3, r2, r3
 8006996:	330c      	adds	r3, #12
 8006998:	1c22      	adds	r2, r4, #0
 800699a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 800699c:	197b      	adds	r3, r7, r5
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	197a      	adds	r2, r7, r5
 80069a2:	1c59      	adds	r1, r3, #1
 80069a4:	7011      	strb	r1, [r2, #0]
 80069a6:	4a0f      	ldr	r2, [pc, #60]	@ (80069e4 <Meas_Init+0x1d0>)
 80069a8:	7894      	ldrb	r4, [r2, #2]
 80069aa:	4a17      	ldr	r2, [pc, #92]	@ (8006a08 <Meas_Init+0x1f4>)
 80069ac:	0119      	lsls	r1, r3, #4
 80069ae:	481d      	ldr	r0, [pc, #116]	@ (8006a24 <Meas_Init+0x210>)
 80069b0:	5088      	str	r0, [r1, r2]
 80069b2:	4915      	ldr	r1, [pc, #84]	@ (8006a08 <Meas_Init+0x1f4>)
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	188a      	adds	r2, r1, r2
 80069b8:	3204      	adds	r2, #4
 80069ba:	491b      	ldr	r1, [pc, #108]	@ (8006a28 <Meas_Init+0x214>)
 80069bc:	6011      	str	r1, [r2, #0]
 80069be:	4912      	ldr	r1, [pc, #72]	@ (8006a08 <Meas_Init+0x1f4>)
 80069c0:	011a      	lsls	r2, r3, #4
 80069c2:	188a      	adds	r2, r1, r2
 80069c4:	3208      	adds	r2, #8
 80069c6:	4919      	ldr	r1, [pc, #100]	@ (8006a2c <Meas_Init+0x218>)
 80069c8:	6011      	str	r1, [r2, #0]
 80069ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006a08 <Meas_Init+0x1f4>)
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	330c      	adds	r3, #12
 80069d2:	1c22      	adds	r2, r4, #0
 80069d4:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 80069d6:	46c0      	nop			@ (mov r8, r8)
 80069d8:	46bd      	mov	sp, r7
 80069da:	b012      	add	sp, #72	@ 0x48
 80069dc:	bdb0      	pop	{r4, r5, r7, pc}
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	20000ec4 	.word	0x20000ec4
 80069e4:	20000ebc 	.word	0x20000ebc
 80069e8:	0801ba18 	.word	0x0801ba18
 80069ec:	0801ba48 	.word	0x0801ba48
 80069f0:	20000ec0 	.word	0x20000ec0
 80069f4:	0801ba4c 	.word	0x0801ba4c
 80069f8:	0801ba78 	.word	0x0801ba78
 80069fc:	0801ba7c 	.word	0x0801ba7c
 8006a00:	0801ba98 	.word	0x0801ba98
 8006a04:	50000400 	.word	0x50000400
 8006a08:	20000e8c 	.word	0x20000e8c
 8006a0c:	08006739 	.word	0x08006739
 8006a10:	08006749 	.word	0x08006749
 8006a14:	20000e88 	.word	0x20000e88
 8006a18:	08006769 	.word	0x08006769
 8006a1c:	08006779 	.word	0x08006779
 8006a20:	20000e89 	.word	0x20000e89
 8006a24:	08006791 	.word	0x08006791
 8006a28:	0800679b 	.word	0x0800679b
 8006a2c:	20000e8a 	.word	0x20000e8a

08006a30 <StartMeasurements>:

void StartMeasurements(void) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006a34:	4b10      	ldr	r3, [pc, #64]	@ (8006a78 <StartMeasurements+0x48>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	e015      	b.n	8006a68 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a78 <StartMeasurements+0x48>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	4a0e      	ldr	r2, [pc, #56]	@ (8006a7c <StartMeasurements+0x4c>)
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	18d3      	adds	r3, r2, r3
 8006a46:	330c      	adds	r3, #12
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d006      	beq.n	8006a5c <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a78 <StartMeasurements+0x48>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	001a      	movs	r2, r3
 8006a54:	4b09      	ldr	r3, [pc, #36]	@ (8006a7c <StartMeasurements+0x4c>)
 8006a56:	0112      	lsls	r2, r2, #4
 8006a58:	58d3      	ldr	r3, [r2, r3]
 8006a5a:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006a5c:	4b06      	ldr	r3, [pc, #24]	@ (8006a78 <StartMeasurements+0x48>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	3301      	adds	r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	4b04      	ldr	r3, [pc, #16]	@ (8006a78 <StartMeasurements+0x48>)
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <StartMeasurements+0x48>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d9e5      	bls.n	8006a3c <StartMeasurements+0xc>
    }
  }
}
 8006a70:	46c0      	nop			@ (mov r8, r8)
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20000ec6 	.word	0x20000ec6
 8006a7c:	20000e8c 	.word	0x20000e8c

08006a80 <Meas_Test>:

void Meas_Test(){
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8006a84:	4b21      	ldr	r3, [pc, #132]	@ (8006b0c <Meas_Test+0x8c>)
 8006a86:	78db      	ldrb	r3, [r3, #3]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	4053      	eors	r3, r2
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <Meas_Test+0x16>
    ESP_WakeTest();
 8006a92:	f7fe f807 	bl	8004aa4 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 8006a96:	4b1d      	ldr	r3, [pc, #116]	@ (8006b0c <Meas_Test+0x8c>)
 8006a98:	789b      	ldrb	r3, [r3, #2]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	4053      	eors	r3, r2
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d017      	beq.n	8006ad4 <Meas_Test+0x54>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006aa4:	f7ff fe99 	bl	80067da <MIC_IsTestMeasurementDoneWrapper>
 8006aa8:	1e03      	subs	r3, r0, #0
 8006aaa:	d00b      	beq.n	8006ac4 <Meas_Test+0x44>
      MeasTest.MIC_Tested = true;
 8006aac:	4b17      	ldr	r3, [pc, #92]	@ (8006b0c <Meas_Test+0x8c>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	709a      	strb	r2, [r3, #2]
      SetStatusLED(4000, 3000, 4000);
 8006ab2:	23fa      	movs	r3, #250	@ 0xfa
 8006ab4:	011a      	lsls	r2, r3, #4
 8006ab6:	4916      	ldr	r1, [pc, #88]	@ (8006b10 <Meas_Test+0x90>)
 8006ab8:	23fa      	movs	r3, #250	@ 0xfa
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	0018      	movs	r0, r3
 8006abe:	f002 f9a1 	bl	8008e04 <SetStatusLED>
 8006ac2:	e007      	b.n	8006ad4 <Meas_Test+0x54>
    }
    else{
      SetStatusLED(3000, 4000, 4000);
 8006ac4:	23fa      	movs	r3, #250	@ 0xfa
 8006ac6:	011a      	lsls	r2, r3, #4
 8006ac8:	23fa      	movs	r3, #250	@ 0xfa
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	4810      	ldr	r0, [pc, #64]	@ (8006b10 <Meas_Test+0x90>)
 8006ace:	0019      	movs	r1, r3
 8006ad0:	f002 f998 	bl	8008e04 <SetStatusLED>
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <Meas_Test+0x8c>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <Meas_Test+0x84>
 8006adc:	4b0b      	ldr	r3, [pc, #44]	@ (8006b0c <Meas_Test+0x8c>)
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00f      	beq.n	8006b04 <Meas_Test+0x84>
 8006ae4:	4b09      	ldr	r3, [pc, #36]	@ (8006b0c <Meas_Test+0x8c>)
 8006ae6:	78db      	ldrb	r3, [r3, #3]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <Meas_Test+0x84>
 8006aec:	4b07      	ldr	r3, [pc, #28]	@ (8006b0c <Meas_Test+0x8c>)
 8006aee:	789b      	ldrb	r3, [r3, #2]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <Meas_Test+0x84>
    Debug("Test completed");
 8006af4:	4a07      	ldr	r2, [pc, #28]	@ (8006b14 <Meas_Test+0x94>)
 8006af6:	4b08      	ldr	r3, [pc, #32]	@ (8006b18 <Meas_Test+0x98>)
 8006af8:	0019      	movs	r1, r3
 8006afa:	2003      	movs	r0, #3
 8006afc:	f003 f8b8 	bl	8009c70 <CreateLine>
    SetTestDone();
 8006b00:	f7ff fc90 	bl	8006424 <SetTestDone>
  }
}
 8006b04:	46c0      	nop			@ (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	20000ec0 	.word	0x20000ec0
 8006b10:	00000bb8 	.word	0x00000bb8
 8006b14:	0801bab0 	.word	0x0801bab0
 8006b18:	0801ba78 	.word	0x0801ba78

08006b1c <ResetMeasurements>:
void ResetMeasurements(void) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <ResetMeasurements+0x34>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006b26:	4b0a      	ldr	r3, [pc, #40]	@ (8006b50 <ResetMeasurements+0x34>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006b2c:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <ResetMeasurements+0x34>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8006b32:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <ResetMeasurements+0x34>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006b38:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <ResetMeasurements+0x34>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8006b3e:	4b04      	ldr	r3, [pc, #16]	@ (8006b50 <ResetMeasurements+0x34>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8006b44:	4b02      	ldr	r3, [pc, #8]	@ (8006b50 <ResetMeasurements+0x34>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	73da      	strb	r2, [r3, #15]
}
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000e7c 	.word	0x20000e7c

08006b54 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006b58:	4b18      	ldr	r3, [pc, #96]	@ (8006bbc <MeasurementsCompleted+0x68>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e024      	b.n	8006baa <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006b60:	4b16      	ldr	r3, [pc, #88]	@ (8006bbc <MeasurementsCompleted+0x68>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	4a16      	ldr	r2, [pc, #88]	@ (8006bc0 <MeasurementsCompleted+0x6c>)
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	18d3      	adds	r3, r2, r3
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d015      	beq.n	8006b9e <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8006b72:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <MeasurementsCompleted+0x68>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	4a12      	ldr	r2, [pc, #72]	@ (8006bc0 <MeasurementsCompleted+0x6c>)
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	18d3      	adds	r3, r2, r3
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4798      	blx	r3
 8006b82:	1e03      	subs	r3, r0, #0
 8006b84:	d009      	beq.n	8006b9a <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006b86:	4b0d      	ldr	r3, [pc, #52]	@ (8006bbc <MeasurementsCompleted+0x68>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc0 <MeasurementsCompleted+0x6c>)
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	18d3      	adds	r3, r2, r3
 8006b90:	3308      	adds	r3, #8
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e001      	b.n	8006b9e <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e00a      	b.n	8006bb4 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006b9e:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <MeasurementsCompleted+0x68>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <MeasurementsCompleted+0x68>)
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <MeasurementsCompleted+0x68>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d9d6      	bls.n	8006b60 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8006bb2:	2301      	movs	r3, #1
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	20000ec6 	.word	0x20000ec6
 8006bc0:	20000e8c 	.word	0x20000e8c

08006bc4 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  switch(MicState){
 8006bc8:	4b21      	ldr	r3, [pc, #132]	@ (8006c50 <Mic_Upkeep+0x8c>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d022      	beq.n	8006c16 <Mic_Upkeep+0x52>
 8006bd0:	dc2c      	bgt.n	8006c2c <Mic_Upkeep+0x68>
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d00f      	beq.n	8006bf6 <Mic_Upkeep+0x32>
 8006bd6:	dc29      	bgt.n	8006c2c <Mic_Upkeep+0x68>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <Mic_Upkeep+0x1e>
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d004      	beq.n	8006bea <Mic_Upkeep+0x26>
 8006be0:	e024      	b.n	8006c2c <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 8006be2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c50 <Mic_Upkeep+0x8c>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
    break;
 8006be8:	e02d      	b.n	8006c46 <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8006bea:	f7ff fddc 	bl	80067a6 <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006bee:	4b18      	ldr	r3, [pc, #96]	@ (8006c50 <Mic_Upkeep+0x8c>)
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	701a      	strb	r2, [r3, #0]
    break;
 8006bf4:	e027      	b.n	8006c46 <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 8006bf6:	f7ff fde1 	bl	80067bc <MIC_IsMeasurementDoneWrapper>
 8006bfa:	1e03      	subs	r3, r0, #0
 8006bfc:	d020      	beq.n	8006c40 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8006bfe:	4b14      	ldr	r3, [pc, #80]	@ (8006c50 <Mic_Upkeep+0x8c>)
 8006c00:	2203      	movs	r2, #3
 8006c02:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 8006c04:	f003 fbba 	bl	800a37c <HAL_GetTick>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	22fa      	movs	r2, #250	@ 0xfa
 8006c0c:	0092      	lsls	r2, r2, #2
 8006c0e:	189a      	adds	r2, r3, r2
 8006c10:	4b10      	ldr	r3, [pc, #64]	@ (8006c54 <Mic_Upkeep+0x90>)
 8006c12:	601a      	str	r2, [r3, #0]
    }
    break;
 8006c14:	e014      	b.n	8006c40 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8006c16:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <Mic_Upkeep+0x90>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f002 ffd2 	bl	8009bc4 <TimestampIsReached>
 8006c20:	1e03      	subs	r3, r0, #0
 8006c22:	d00f      	beq.n	8006c44 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006c24:	4b0a      	ldr	r3, [pc, #40]	@ (8006c50 <Mic_Upkeep+0x8c>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006c2a:	e00b      	b.n	8006c44 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c58 <Mic_Upkeep+0x94>)
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c5c <Mic_Upkeep+0x98>)
 8006c30:	0019      	movs	r1, r3
 8006c32:	2003      	movs	r0, #3
 8006c34:	f003 f81c 	bl	8009c70 <CreateLine>
    MicState = MIC_STATE_INIT;
 8006c38:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <Mic_Upkeep+0x8c>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
    break;
 8006c3e:	e002      	b.n	8006c46 <Mic_Upkeep+0x82>
    break;
 8006c40:	46c0      	nop			@ (mov r8, r8)
 8006c42:	e000      	b.n	8006c46 <Mic_Upkeep+0x82>
    break;
 8006c44:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8006c46:	4b02      	ldr	r3, [pc, #8]	@ (8006c50 <Mic_Upkeep+0x8c>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
}
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000ec5 	.word	0x20000ec5
 8006c54:	20000ecc 	.word	0x20000ecc
 8006c58:	0801bac0 	.word	0x0801bac0
 8006c5c:	0801ba78 	.word	0x0801ba78

08006c60 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8006c60:	b5b0      	push	{r4, r5, r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8006c66:	4b3c      	ldr	r3, [pc, #240]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b06      	cmp	r3, #6
 8006c6c:	d868      	bhi.n	8006d40 <Meas_Upkeep+0xe0>
 8006c6e:	009a      	lsls	r2, r3, #2
 8006c70:	4b3a      	ldr	r3, [pc, #232]	@ (8006d5c <Meas_Upkeep+0xfc>)
 8006c72:	18d3      	adds	r3, r2, r3
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8006c78:	4a39      	ldr	r2, [pc, #228]	@ (8006d60 <Meas_Upkeep+0x100>)
 8006c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8006d64 <Meas_Upkeep+0x104>)
 8006c7c:	0019      	movs	r1, r3
 8006c7e:	2003      	movs	r0, #3
 8006c80:	f002 fff6 	bl	8009c70 <CreateLine>
    break;
 8006c84:	e063      	b.n	8006d4e <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8006c86:	f7ff ff49 	bl	8006b1c <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8006c8a:	4b33      	ldr	r3, [pc, #204]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]
    break;
 8006c90:	e05d      	b.n	8006d4e <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8006c92:	f7ff fecd 	bl	8006a30 <StartMeasurements>
    SetMeasurementIndicator();
 8006c96:	f002 f967 	bl	8008f68 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	701a      	strb	r2, [r3, #0]
   break;
 8006ca0:	e055      	b.n	8006d4e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8006ca2:	f7ff ff57 	bl	8006b54 <MeasurementsCompleted>
 8006ca6:	1e03      	subs	r3, r0, #0
 8006ca8:	d04e      	beq.n	8006d48 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8006caa:	4b2b      	ldr	r3, [pc, #172]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006cac:	2203      	movs	r2, #3
 8006cae:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006cb0:	e04a      	b.n	8006d48 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8006cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d68 <Meas_Upkeep+0x108>)
 8006cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d64 <Meas_Upkeep+0x104>)
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	2003      	movs	r0, #3
 8006cba:	f002 ffd9 	bl	8009c70 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8006d6c <Meas_Upkeep+0x10c>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d70 <Meas_Upkeep+0x110>)
 8006cc4:	4927      	ldr	r1, [pc, #156]	@ (8006d64 <Meas_Upkeep+0x104>)
 8006cc6:	2003      	movs	r0, #3
 8006cc8:	f002 ffd2 	bl	8009c70 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8006ccc:	4b27      	ldr	r3, [pc, #156]	@ (8006d6c <Meas_Upkeep+0x10c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	1c18      	adds	r0, r3, #0
 8006cd2:	f7fc fb45 	bl	8003360 <__aeabi_f2d>
 8006cd6:	0004      	movs	r4, r0
 8006cd8:	000d      	movs	r5, r1
 8006cda:	4b24      	ldr	r3, [pc, #144]	@ (8006d6c <Meas_Upkeep+0x10c>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	1c18      	adds	r0, r3, #0
 8006ce0:	f7fc fb3e 	bl	8003360 <__aeabi_f2d>
 8006ce4:	0002      	movs	r2, r0
 8006ce6:	000b      	movs	r3, r1
 8006ce8:	4822      	ldr	r0, [pc, #136]	@ (8006d74 <Meas_Upkeep+0x114>)
 8006cea:	491e      	ldr	r1, [pc, #120]	@ (8006d64 <Meas_Upkeep+0x104>)
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	9303      	str	r3, [sp, #12]
 8006cf0:	9400      	str	r4, [sp, #0]
 8006cf2:	9501      	str	r5, [sp, #4]
 8006cf4:	0002      	movs	r2, r0
 8006cf6:	2003      	movs	r0, #3
 8006cf8:	f002 ffba 	bl	8009c70 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8006d6c <Meas_Upkeep+0x10c>)
 8006cfe:	6858      	ldr	r0, [r3, #4]
 8006d00:	4b1a      	ldr	r3, [pc, #104]	@ (8006d6c <Meas_Upkeep+0x10c>)
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	4b19      	ldr	r3, [pc, #100]	@ (8006d6c <Meas_Upkeep+0x10c>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	f7fc fd58 	bl	80037c0 <setMeasurement>
    ResetMeasurementIndicator();
 8006d10:	f002 f942 	bl	8008f98 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8006d14:	f003 fb32 	bl	800a37c <HAL_GetTick>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	4a17      	ldr	r2, [pc, #92]	@ (8006d78 <Meas_Upkeep+0x118>)
 8006d1c:	189a      	adds	r2, r3, r2
 8006d1e:	4b17      	ldr	r3, [pc, #92]	@ (8006d7c <Meas_Upkeep+0x11c>)
 8006d20:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006d24:	2206      	movs	r2, #6
 8006d26:	701a      	strb	r2, [r3, #0]
    break;
 8006d28:	e011      	b.n	8006d4e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8006d2a:	4b14      	ldr	r3, [pc, #80]	@ (8006d7c <Meas_Upkeep+0x11c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f002 ff48 	bl	8009bc4 <TimestampIsReached>
 8006d34:	1e03      	subs	r3, r0, #0
 8006d36:	d009      	beq.n	8006d4c <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006d3e:	e005      	b.n	8006d4c <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
    break;
 8006d46:	e002      	b.n	8006d4e <Meas_Upkeep+0xee>
    break;
 8006d48:	46c0      	nop			@ (mov r8, r8)
 8006d4a:	e000      	b.n	8006d4e <Meas_Upkeep+0xee>
    break;
 8006d4c:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8006d4e:	4b02      	ldr	r3, [pc, #8]	@ (8006d58 <Meas_Upkeep+0xf8>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bdb0      	pop	{r4, r5, r7, pc}
 8006d58:	20000ec4 	.word	0x20000ec4
 8006d5c:	0801c1fc 	.word	0x0801c1fc
 8006d60:	0801bae0 	.word	0x0801bae0
 8006d64:	0801ba78 	.word	0x0801ba78
 8006d68:	0801bb00 	.word	0x0801bb00
 8006d6c:	20000e7c 	.word	0x20000e7c
 8006d70:	0801bb14 	.word	0x0801bb14
 8006d74:	0801bb2c 	.word	0x0801bb2c
 8006d78:	00002710 	.word	0x00002710
 8006d7c:	20000ec8 	.word	0x20000ec8

08006d80 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	1d3b      	adds	r3, r7, #4
 8006d88:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8006d8a:	240f      	movs	r4, #15
 8006d8c:	193b      	adds	r3, r7, r4
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8006d92:	4b20      	ldr	r3, [pc, #128]	@ (8006e14 <Meas_SetEnabledSensors+0x94>)
 8006d94:	1d3a      	adds	r2, r7, #4
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8006d9a:	193b      	adds	r3, r7, r4
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	193a      	adds	r2, r7, r4
 8006da0:	1c59      	adds	r1, r3, #1
 8006da2:	7011      	strb	r1, [r2, #0]
 8006da4:	0018      	movs	r0, r3
 8006da6:	1d3b      	adds	r3, r7, #4
 8006da8:	7819      	ldrb	r1, [r3, #0]
 8006daa:	4a1b      	ldr	r2, [pc, #108]	@ (8006e18 <Meas_SetEnabledSensors+0x98>)
 8006dac:	0103      	lsls	r3, r0, #4
 8006dae:	18d3      	adds	r3, r2, r3
 8006db0:	330c      	adds	r3, #12
 8006db2:	1c0a      	adds	r2, r1, #0
 8006db4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006db6:	193b      	adds	r3, r7, r4
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	193a      	adds	r2, r7, r4
 8006dbc:	1c59      	adds	r1, r3, #1
 8006dbe:	7011      	strb	r1, [r2, #0]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	1d3b      	adds	r3, r7, #4
 8006dc4:	7859      	ldrb	r1, [r3, #1]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	@ (8006e18 <Meas_SetEnabledSensors+0x98>)
 8006dc8:	0103      	lsls	r3, r0, #4
 8006dca:	18d3      	adds	r3, r2, r3
 8006dcc:	330c      	adds	r3, #12
 8006dce:	1c0a      	adds	r2, r1, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8006dd2:	193b      	adds	r3, r7, r4
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	193a      	adds	r2, r7, r4
 8006dd8:	1c59      	adds	r1, r3, #1
 8006dda:	7011      	strb	r1, [r2, #0]
 8006ddc:	0018      	movs	r0, r3
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	7899      	ldrb	r1, [r3, #2]
 8006de2:	4a0d      	ldr	r2, [pc, #52]	@ (8006e18 <Meas_SetEnabledSensors+0x98>)
 8006de4:	0103      	lsls	r3, r0, #4
 8006de6:	18d3      	adds	r3, r2, r3
 8006de8:	330c      	adds	r3, #12
 8006dea:	1c0a      	adds	r2, r1, #0
 8006dec:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006dee:	193b      	adds	r3, r7, r4
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	193a      	adds	r2, r7, r4
 8006df4:	1c59      	adds	r1, r3, #1
 8006df6:	7011      	strb	r1, [r2, #0]
 8006df8:	0018      	movs	r0, r3
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	78d9      	ldrb	r1, [r3, #3]
 8006dfe:	4a06      	ldr	r2, [pc, #24]	@ (8006e18 <Meas_SetEnabledSensors+0x98>)
 8006e00:	0103      	lsls	r3, r0, #4
 8006e02:	18d3      	adds	r3, r2, r3
 8006e04:	330c      	adds	r3, #12
 8006e06:	1c0a      	adds	r2, r1, #0
 8006e08:	701a      	strb	r2, [r3, #0]
}
 8006e0a:	46c0      	nop			@ (mov r8, r8)
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b005      	add	sp, #20
 8006e10:	bd90      	pop	{r4, r7, pc}
 8006e12:	46c0      	nop			@ (mov r8, r8)
 8006e14:	20000ebc 	.word	0x20000ebc
 8006e18:	20000e8c 	.word	0x20000e8c

08006e1c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006e20:	4b02      	ldr	r3, [pc, #8]	@ (8006e2c <SetESPMeasurementDone+0x10>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	70da      	strb	r2, [r3, #3]
}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000ec0 	.word	0x20000ec0

08006e30 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	4b03      	ldr	r3, [pc, #12]	@ (8006e48 <MIC_Init+0x18>)
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	46c0      	nop			@ (mov r8, r8)
 8006e40:	46bd      	mov	sp, r7
 8006e42:	b002      	add	sp, #8
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	46c0      	nop			@ (mov r8, r8)
 8006e48:	20000ed0 	.word	0x20000ed0

08006e4c <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006e54:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <UpdateSampleRate+0x3c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d00e      	beq.n	8006e7e <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006e60:	4b09      	ldr	r3, [pc, #36]	@ (8006e88 <UpdateSampleRate+0x3c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f006 ff47 	bl	800dcf8 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006e6a:	4b07      	ldr	r3, [pc, #28]	@ (8006e88 <UpdateSampleRate+0x3c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006e72:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <UpdateSampleRate+0x3c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	0018      	movs	r0, r3
 8006e78:	f006 fe4c 	bl	800db14 <HAL_I2S_Init>
 8006e7c:	e000      	b.n	8006e80 <UpdateSampleRate+0x34>
    return;
 8006e7e:	46c0      	nop			@ (mov r8, r8)
}
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b002      	add	sp, #8
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	46c0      	nop			@ (mov r8, r8)
 8006e88:	20000ed0 	.word	0x20000ed0

08006e8c <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006e94:	4b18      	ldr	r3, [pc, #96]	@ (8006ef8 <ConvertAudio+0x6c>)
 8006e96:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	5e9b      	ldrsh	r3, [r3, r2]
 8006ea6:	025b      	lsls	r3, r3, #9
 8006ea8:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3302      	adds	r3, #2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	5e9b      	ldrsh	r3, [r3, r2]
 8006eb2:	11db      	asrs	r3, r3, #7
 8006eb4:	05db      	lsls	r3, r3, #23
 8006eb6:	0ddb      	lsrs	r3, r3, #23
 8006eb8:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	2380      	movs	r3, #128	@ 0x80
 8006ec6:	041b      	lsls	r3, r3, #16
 8006ec8:	4013      	ands	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	22ff      	movs	r2, #255	@ 0xff
 8006ed0:	0612      	lsls	r2, r2, #24
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006eda:	68b8      	ldr	r0, [r7, #8]
 8006edc:	f7fa faf6 	bl	80014cc <__aeabi_i2f>
 8006ee0:	1c03      	adds	r3, r0, #0
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	1c18      	adds	r0, r3, #0
 8006ee6:	f7f9 fdf3 	bl	8000ad0 <__aeabi_fdiv>
 8006eea:	1c03      	adds	r3, r0, #0
 8006eec:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006eee:	697b      	ldr	r3, [r7, #20]
}
 8006ef0:	1c18      	adds	r0, r3, #0
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b008      	add	sp, #32
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	4afffffe 	.word	0x4afffffe

08006efc <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006efc:	b5b0      	push	{r4, r5, r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	000a      	movs	r2, r1
 8006f06:	1cbb      	adds	r3, r7, #2
 8006f08:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f88 <MIC_Start+0x8c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006f12:	4a1e      	ldr	r2, [pc, #120]	@ (8006f8c <MIC_Start+0x90>)
 8006f14:	4b1e      	ldr	r3, [pc, #120]	@ (8006f90 <MIC_Start+0x94>)
 8006f16:	0019      	movs	r1, r3
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f002 fea9 	bl	8009c70 <CreateLine>
    return;
 8006f1e:	e02f      	b.n	8006f80 <MIC_Start+0x84>
  }
  SetMICIndicator();
 8006f20:	f002 f850 	bl	8008fc4 <SetMICIndicator>
  Debug("In mic start");
 8006f24:	4a1b      	ldr	r2, [pc, #108]	@ (8006f94 <MIC_Start+0x98>)
 8006f26:	4b1c      	ldr	r3, [pc, #112]	@ (8006f98 <MIC_Start+0x9c>)
 8006f28:	0019      	movs	r1, r3
 8006f2a:	2003      	movs	r0, #3
 8006f2c:	f002 fea0 	bl	8009c70 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7ff ff8a 	bl	8006e4c <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006f38:	4b18      	ldr	r3, [pc, #96]	@ (8006f9c <MIC_Start+0xa0>)
 8006f3a:	1cba      	adds	r2, r7, #2
 8006f3c:	8812      	ldrh	r2, [r2, #0]
 8006f3e:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006f40:	f003 fa1c 	bl	800a37c <HAL_GetTick>
 8006f44:	0003      	movs	r3, r0
 8006f46:	3314      	adds	r3, #20
 8006f48:	001a      	movs	r2, r3
 8006f4a:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <MIC_Start+0xa4>)
 8006f4c:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006f4e:	4b15      	ldr	r3, [pc, #84]	@ (8006fa4 <MIC_Start+0xa8>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006f54:	4b14      	ldr	r3, [pc, #80]	@ (8006fa8 <MIC_Start+0xac>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <MIC_Start+0x8c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	250f      	movs	r5, #15
 8006f60:	197c      	adds	r4, r7, r5
 8006f62:	2280      	movs	r2, #128	@ 0x80
 8006f64:	00d2      	lsls	r2, r2, #3
 8006f66:	4911      	ldr	r1, [pc, #68]	@ (8006fac <MIC_Start+0xb0>)
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f006 fef1 	bl	800dd50 <HAL_I2S_Receive_DMA>
 8006f6e:	0003      	movs	r3, r0
 8006f70:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006f72:	197b      	adds	r3, r7, r5
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb0 <MIC_Start+0xb4>)
 8006f78:	490e      	ldr	r1, [pc, #56]	@ (8006fb4 <MIC_Start+0xb8>)
 8006f7a:	2002      	movs	r0, #2
 8006f7c:	f002 fe78 	bl	8009c70 <CreateLine>
}
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b004      	add	sp, #16
 8006f84:	bdb0      	pop	{r4, r5, r7, pc}
 8006f86:	46c0      	nop			@ (mov r8, r8)
 8006f88:	20000ed0 	.word	0x20000ed0
 8006f8c:	0801bb60 	.word	0x0801bb60
 8006f90:	0801bb80 	.word	0x0801bb80
 8006f94:	0801bb84 	.word	0x0801bb84
 8006f98:	0801bb94 	.word	0x0801bb94
 8006f9c:	2000002c 	.word	0x2000002c
 8006fa0:	20001ed4 	.word	0x20001ed4
 8006fa4:	20001ed8 	.word	0x20001ed8
 8006fa8:	20001ed9 	.word	0x20001ed9
 8006fac:	20000ed4 	.word	0x20000ed4
 8006fb0:	0801bb98 	.word	0x0801bb98
 8006fb4:	0801bba4 	.word	0x0801bba4

08006fb8 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	0002      	movs	r2, r0
 8006fc0:	1dbb      	adds	r3, r7, #6
 8006fc2:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006fc4:	23fe      	movs	r3, #254	@ 0xfe
 8006fc6:	059b      	lsls	r3, r3, #22
 8006fc8:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006fca:	230a      	movs	r3, #10
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	2200      	movs	r2, #0
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	e01c      	b.n	800700e <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006fd4:	240a      	movs	r4, #10
 8006fd6:	193b      	adds	r3, r7, r4
 8006fd8:	2200      	movs	r2, #0
 8006fda:	5e9a      	ldrsh	r2, [r3, r2]
 8006fdc:	4b12      	ldr	r3, [pc, #72]	@ (8007028 <MinimalValue+0x70>)
 8006fde:	0092      	lsls	r2, r2, #2
 8006fe0:	58d3      	ldr	r3, [r2, r3]
 8006fe2:	1c19      	adds	r1, r3, #0
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7f9 fa85 	bl	80004f4 <__aeabi_fcmpgt>
 8006fea:	1e03      	subs	r3, r0, #0
 8006fec:	d006      	beq.n	8006ffc <MinimalValue+0x44>
      MinVal = sample[i];
 8006fee:	193b      	adds	r3, r7, r4
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	5e9a      	ldrsh	r2, [r3, r2]
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8007028 <MinimalValue+0x70>)
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	58d3      	ldr	r3, [r2, r3]
 8006ffa:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006ffc:	210a      	movs	r1, #10
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	2200      	movs	r2, #0
 8007002:	5e9b      	ldrsh	r3, [r3, r2]
 8007004:	b29b      	uxth	r3, r3
 8007006:	3301      	adds	r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	187b      	adds	r3, r7, r1
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	230a      	movs	r3, #10
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	2200      	movs	r2, #0
 8007014:	5e9a      	ldrsh	r2, [r3, r2]
 8007016:	1dbb      	adds	r3, r7, #6
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	dbda      	blt.n	8006fd4 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 800701e:	68fb      	ldr	r3, [r7, #12]
}
 8007020:	1c18      	adds	r0, r3, #0
 8007022:	46bd      	mov	sp, r7
 8007024:	b005      	add	sp, #20
 8007026:	bd90      	pop	{r4, r7, pc}
 8007028:	20001f10 	.word	0x20001f10

0800702c <MaximalValue>:

float MaximalValue(uint16_t length){
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	0002      	movs	r2, r0
 8007034:	1dbb      	adds	r3, r7, #6
 8007036:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8007038:	4b18      	ldr	r3, [pc, #96]	@ (800709c <MaximalValue+0x70>)
 800703a:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 800703c:	230a      	movs	r3, #10
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	2200      	movs	r2, #0
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	e01c      	b.n	8007080 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8007046:	240a      	movs	r4, #10
 8007048:	193b      	adds	r3, r7, r4
 800704a:	2200      	movs	r2, #0
 800704c:	5e9a      	ldrsh	r2, [r3, r2]
 800704e:	4b14      	ldr	r3, [pc, #80]	@ (80070a0 <MaximalValue+0x74>)
 8007050:	0092      	lsls	r2, r2, #2
 8007052:	58d3      	ldr	r3, [r2, r3]
 8007054:	1c19      	adds	r1, r3, #0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7f9 fa38 	bl	80004cc <__aeabi_fcmplt>
 800705c:	1e03      	subs	r3, r0, #0
 800705e:	d006      	beq.n	800706e <MaximalValue+0x42>
      MaxVal = sample[i];
 8007060:	193b      	adds	r3, r7, r4
 8007062:	2200      	movs	r2, #0
 8007064:	5e9a      	ldrsh	r2, [r3, r2]
 8007066:	4b0e      	ldr	r3, [pc, #56]	@ (80070a0 <MaximalValue+0x74>)
 8007068:	0092      	lsls	r2, r2, #2
 800706a:	58d3      	ldr	r3, [r2, r3]
 800706c:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 800706e:	210a      	movs	r1, #10
 8007070:	187b      	adds	r3, r7, r1
 8007072:	2200      	movs	r2, #0
 8007074:	5e9b      	ldrsh	r3, [r3, r2]
 8007076:	b29b      	uxth	r3, r3
 8007078:	3301      	adds	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	187b      	adds	r3, r7, r1
 800707e:	801a      	strh	r2, [r3, #0]
 8007080:	230a      	movs	r3, #10
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2200      	movs	r2, #0
 8007086:	5e9a      	ldrsh	r2, [r3, r2]
 8007088:	1dbb      	adds	r3, r7, #6
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	dbda      	blt.n	8007046 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8007090:	68fb      	ldr	r3, [r7, #12]
}
 8007092:	1c18      	adds	r0, r3, #0
 8007094:	46bd      	mov	sp, r7
 8007096:	b005      	add	sp, #20
 8007098:	bd90      	pop	{r4, r7, pc}
 800709a:	46c0      	nop			@ (mov r8, r8)
 800709c:	bf800000 	.word	0xbf800000
 80070a0:	20001f10 	.word	0x20001f10

080070a4 <MIC_Check>:
bool MIC_Check(void) {
 80070a4:	b5b0      	push	{r4, r5, r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 80070aa:	4a25      	ldr	r2, [pc, #148]	@ (8007140 <MIC_Check+0x9c>)
 80070ac:	4b25      	ldr	r3, [pc, #148]	@ (8007144 <MIC_Check+0xa0>)
 80070ae:	0019      	movs	r1, r3
 80070b0:	2002      	movs	r0, #2
 80070b2:	f002 fddd 	bl	8009c70 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80070b6:	230e      	movs	r3, #14
 80070b8:	18fb      	adds	r3, r7, r3
 80070ba:	2200      	movs	r2, #0
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e016      	b.n	80070ee <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 80070c0:	210e      	movs	r1, #14
 80070c2:	187b      	adds	r3, r7, r1
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	3302      	adds	r3, #2
 80070ca:	005a      	lsls	r2, r3, #1
 80070cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007148 <MIC_Check+0xa4>)
 80070ce:	18d2      	adds	r2, r2, r3
 80070d0:	000d      	movs	r5, r1
 80070d2:	187b      	adds	r3, r7, r1
 80070d4:	881c      	ldrh	r4, [r3, #0]
 80070d6:	0010      	movs	r0, r2
 80070d8:	f7ff fed8 	bl	8006e8c <ConvertAudio>
 80070dc:	1c01      	adds	r1, r0, #0
 80070de:	4b1b      	ldr	r3, [pc, #108]	@ (800714c <MIC_Check+0xa8>)
 80070e0:	00a2      	lsls	r2, r4, #2
 80070e2:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80070e4:	197b      	adds	r3, r7, r5
 80070e6:	197a      	adds	r2, r7, r5
 80070e8:	8812      	ldrh	r2, [r2, #0]
 80070ea:	3201      	adds	r2, #1
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	230e      	movs	r3, #14
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	881a      	ldrh	r2, [r3, #0]
 80070f4:	2380      	movs	r3, #128	@ 0x80
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3e1      	bcc.n	80070c0 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 80070fc:	2380      	movs	r3, #128	@ 0x80
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	0018      	movs	r0, r3
 8007102:	f7ff ff93 	bl	800702c <MaximalValue>
 8007106:	1c03      	adds	r3, r0, #0
 8007108:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 800710a:	2380      	movs	r3, #128	@ 0x80
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	0018      	movs	r0, r3
 8007110:	f7ff ff52 	bl	8006fb8 <MinimalValue>
 8007114:	1c03      	adds	r3, r0, #0
 8007116:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8007118:	2100      	movs	r1, #0
 800711a:	68b8      	ldr	r0, [r7, #8]
 800711c:	f7f9 f9ea 	bl	80004f4 <__aeabi_fcmpgt>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d105      	bne.n	8007130 <MIC_Check+0x8c>
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7f9 f9d0 	bl	80004cc <__aeabi_fcmplt>
 800712c:	1e03      	subs	r3, r0, #0
 800712e:	d001      	beq.n	8007134 <MIC_Check+0x90>
    return(true);
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <MIC_Check+0x92>
  }
  return(false);
 8007134:	2300      	movs	r3, #0
}
 8007136:	0018      	movs	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	b004      	add	sp, #16
 800713c:	bdb0      	pop	{r4, r5, r7, pc}
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	0801bba8 	.word	0x0801bba8
 8007144:	0801bba4 	.word	0x0801bba4
 8007148:	20000ed4 	.word	0x20000ed4
 800714c:	20001f10 	.word	0x20001f10

08007150 <MIC_Print>:
void MIC_Print(void) {
 8007150:	b590      	push	{r4, r7, lr}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
  Info("New samples");
 8007156:	4a8a      	ldr	r2, [pc, #552]	@ (8007380 <MIC_Print+0x230>)
 8007158:	4b8a      	ldr	r3, [pc, #552]	@ (8007384 <MIC_Print+0x234>)
 800715a:	0019      	movs	r1, r3
 800715c:	2002      	movs	r0, #2
 800715e:	f002 fd87 	bl	8009c70 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8007162:	1dbb      	adds	r3, r7, #6
 8007164:	2200      	movs	r2, #0
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e014      	b.n	8007194 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 800716a:	1dbb      	adds	r3, r7, #6
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	3302      	adds	r3, #2
 8007172:	005a      	lsls	r2, r3, #1
 8007174:	4b84      	ldr	r3, [pc, #528]	@ (8007388 <MIC_Print+0x238>)
 8007176:	18d2      	adds	r2, r2, r3
 8007178:	1dbb      	adds	r3, r7, #6
 800717a:	881c      	ldrh	r4, [r3, #0]
 800717c:	0010      	movs	r0, r2
 800717e:	f7ff fe85 	bl	8006e8c <ConvertAudio>
 8007182:	1c01      	adds	r1, r0, #0
 8007184:	4b81      	ldr	r3, [pc, #516]	@ (800738c <MIC_Print+0x23c>)
 8007186:	00a2      	lsls	r2, r4, #2
 8007188:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800718a:	1dbb      	adds	r3, r7, #6
 800718c:	1dba      	adds	r2, r7, #6
 800718e:	8812      	ldrh	r2, [r2, #0]
 8007190:	3201      	adds	r2, #1
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	1dbb      	adds	r3, r7, #6
 8007196:	881a      	ldrh	r2, [r3, #0]
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	429a      	cmp	r2, r3
 800719e:	d3e4      	bcc.n	800716a <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 80071a0:	f000 f976 	bl	8007490 <MIC_GetDB>
 80071a4:	1c02      	adds	r2, r0, #0
 80071a6:	4b7a      	ldr	r3, [pc, #488]	@ (8007390 <MIC_Print+0x240>)
 80071a8:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 80071aa:	4b7a      	ldr	r3, [pc, #488]	@ (8007394 <MIC_Print+0x244>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b09      	cmp	r3, #9
 80071b0:	d80e      	bhi.n	80071d0 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 80071b2:	4b78      	ldr	r3, [pc, #480]	@ (8007394 <MIC_Print+0x244>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	001a      	movs	r2, r3
 80071b8:	4b75      	ldr	r3, [pc, #468]	@ (8007390 <MIC_Print+0x240>)
 80071ba:	6819      	ldr	r1, [r3, #0]
 80071bc:	4b76      	ldr	r3, [pc, #472]	@ (8007398 <MIC_Print+0x248>)
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80071c2:	4b74      	ldr	r3, [pc, #464]	@ (8007394 <MIC_Print+0x244>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	3301      	adds	r3, #1
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	4b72      	ldr	r3, [pc, #456]	@ (8007394 <MIC_Print+0x244>)
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e013      	b.n	80071f8 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 80071d0:	4b70      	ldr	r3, [pc, #448]	@ (8007394 <MIC_Print+0x244>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 80071d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007394 <MIC_Print+0x244>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	001a      	movs	r2, r3
 80071dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007390 <MIC_Print+0x240>)
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	4b6d      	ldr	r3, [pc, #436]	@ (8007398 <MIC_Print+0x248>)
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80071e6:	4b6b      	ldr	r3, [pc, #428]	@ (8007394 <MIC_Print+0x244>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	3301      	adds	r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	4b69      	ldr	r3, [pc, #420]	@ (8007394 <MIC_Print+0x244>)
 80071f0:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 80071f2:	4b6a      	ldr	r3, [pc, #424]	@ (800739c <MIC_Print+0x24c>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 80071f8:	4b68      	ldr	r3, [pc, #416]	@ (800739c <MIC_Print+0x24c>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2201      	movs	r2, #1
 80071fe:	4053      	eors	r3, r2
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <MIC_Print+0xc2>
    setMic(dBc);
 8007206:	4b62      	ldr	r3, [pc, #392]	@ (8007390 <MIC_Print+0x240>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1c18      	adds	r0, r3, #0
 800720c:	f7fc faf4 	bl	80037f8 <setMic>
 8007210:	e02d      	b.n	800726e <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 8007212:	4b63      	ldr	r3, [pc, #396]	@ (80073a0 <MIC_Print+0x250>)
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8007218:	1d7b      	adds	r3, r7, #5
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	e013      	b.n	8007248 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 8007220:	1d7b      	adds	r3, r7, #5
 8007222:	781a      	ldrb	r2, [r3, #0]
 8007224:	4b5c      	ldr	r3, [pc, #368]	@ (8007398 <MIC_Print+0x248>)
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	58d2      	ldr	r2, [r2, r3]
 800722a:	4b5d      	ldr	r3, [pc, #372]	@ (80073a0 <MIC_Print+0x250>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	1c19      	adds	r1, r3, #0
 8007230:	1c10      	adds	r0, r2, #0
 8007232:	f7f9 fac3 	bl	80007bc <__aeabi_fadd>
 8007236:	1c03      	adds	r3, r0, #0
 8007238:	1c1a      	adds	r2, r3, #0
 800723a:	4b59      	ldr	r3, [pc, #356]	@ (80073a0 <MIC_Print+0x250>)
 800723c:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 800723e:	1d7b      	adds	r3, r7, #5
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	1d7b      	adds	r3, r7, #5
 8007244:	3201      	adds	r2, #1
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	1d7b      	adds	r3, r7, #5
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b09      	cmp	r3, #9
 800724e:	d9e7      	bls.n	8007220 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8007250:	4b53      	ldr	r3, [pc, #332]	@ (80073a0 <MIC_Print+0x250>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4953      	ldr	r1, [pc, #332]	@ (80073a4 <MIC_Print+0x254>)
 8007256:	1c18      	adds	r0, r3, #0
 8007258:	f7f9 fc3a 	bl	8000ad0 <__aeabi_fdiv>
 800725c:	1c03      	adds	r3, r0, #0
 800725e:	1c1a      	adds	r2, r3, #0
 8007260:	4b4f      	ldr	r3, [pc, #316]	@ (80073a0 <MIC_Print+0x250>)
 8007262:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8007264:	4b4e      	ldr	r3, [pc, #312]	@ (80073a0 <MIC_Print+0x250>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	1c18      	adds	r0, r3, #0
 800726a:	f7fc fac5 	bl	80037f8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 800726e:	4b48      	ldr	r3, [pc, #288]	@ (8007390 <MIC_Print+0x240>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	494d      	ldr	r1, [pc, #308]	@ (80073a8 <MIC_Print+0x258>)
 8007274:	1c18      	adds	r0, r3, #0
 8007276:	f7f9 f93d 	bl	80004f4 <__aeabi_fcmpgt>
 800727a:	1e03      	subs	r3, r0, #0
 800727c:	d004      	beq.n	8007288 <MIC_Print+0x138>
    SetDBLED(true, true, true);
 800727e:	2201      	movs	r2, #1
 8007280:	2101      	movs	r1, #1
 8007282:	2001      	movs	r0, #1
 8007284:	f001 fdf2 	bl	8008e6c <SetDBLED>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8007288:	4b41      	ldr	r3, [pc, #260]	@ (8007390 <MIC_Print+0x240>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4946      	ldr	r1, [pc, #280]	@ (80073a8 <MIC_Print+0x258>)
 800728e:	1c18      	adds	r0, r3, #0
 8007290:	f7f9 f91c 	bl	80004cc <__aeabi_fcmplt>
 8007294:	1e03      	subs	r3, r0, #0
 8007296:	d00c      	beq.n	80072b2 <MIC_Print+0x162>
 8007298:	4b3d      	ldr	r3, [pc, #244]	@ (8007390 <MIC_Print+0x240>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4943      	ldr	r1, [pc, #268]	@ (80073ac <MIC_Print+0x25c>)
 800729e:	1c18      	adds	r0, r3, #0
 80072a0:	f7f9 f932 	bl	8000508 <__aeabi_fcmpge>
 80072a4:	1e03      	subs	r3, r0, #0
 80072a6:	d004      	beq.n	80072b2 <MIC_Print+0x162>
    SetDBLED(true, false, false);
 80072a8:	2200      	movs	r2, #0
 80072aa:	2100      	movs	r1, #0
 80072ac:	2001      	movs	r0, #1
 80072ae:	f001 fddd 	bl	8008e6c <SetDBLED>
  }
  if(dBc < 80 && dBc >= 75){//purple
 80072b2:	4b37      	ldr	r3, [pc, #220]	@ (8007390 <MIC_Print+0x240>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	493d      	ldr	r1, [pc, #244]	@ (80073ac <MIC_Print+0x25c>)
 80072b8:	1c18      	adds	r0, r3, #0
 80072ba:	f7f9 f907 	bl	80004cc <__aeabi_fcmplt>
 80072be:	1e03      	subs	r3, r0, #0
 80072c0:	d00c      	beq.n	80072dc <MIC_Print+0x18c>
 80072c2:	4b33      	ldr	r3, [pc, #204]	@ (8007390 <MIC_Print+0x240>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	493a      	ldr	r1, [pc, #232]	@ (80073b0 <MIC_Print+0x260>)
 80072c8:	1c18      	adds	r0, r3, #0
 80072ca:	f7f9 f91d 	bl	8000508 <__aeabi_fcmpge>
 80072ce:	1e03      	subs	r3, r0, #0
 80072d0:	d004      	beq.n	80072dc <MIC_Print+0x18c>
    SetDBLED(true, false, true);
 80072d2:	2201      	movs	r2, #1
 80072d4:	2100      	movs	r1, #0
 80072d6:	2001      	movs	r0, #1
 80072d8:	f001 fdc8 	bl	8008e6c <SetDBLED>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 80072dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007390 <MIC_Print+0x240>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4933      	ldr	r1, [pc, #204]	@ (80073b0 <MIC_Print+0x260>)
 80072e2:	1c18      	adds	r0, r3, #0
 80072e4:	f7f9 f8f2 	bl	80004cc <__aeabi_fcmplt>
 80072e8:	1e03      	subs	r3, r0, #0
 80072ea:	d00c      	beq.n	8007306 <MIC_Print+0x1b6>
 80072ec:	4b28      	ldr	r3, [pc, #160]	@ (8007390 <MIC_Print+0x240>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4930      	ldr	r1, [pc, #192]	@ (80073b4 <MIC_Print+0x264>)
 80072f2:	1c18      	adds	r0, r3, #0
 80072f4:	f7f9 f908 	bl	8000508 <__aeabi_fcmpge>
 80072f8:	1e03      	subs	r3, r0, #0
 80072fa:	d004      	beq.n	8007306 <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 80072fc:	2200      	movs	r2, #0
 80072fe:	2101      	movs	r1, #1
 8007300:	2001      	movs	r0, #1
 8007302:	f001 fdb3 	bl	8008e6c <SetDBLED>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8007306:	4b22      	ldr	r3, [pc, #136]	@ (8007390 <MIC_Print+0x240>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	492a      	ldr	r1, [pc, #168]	@ (80073b4 <MIC_Print+0x264>)
 800730c:	1c18      	adds	r0, r3, #0
 800730e:	f7f9 f8dd 	bl	80004cc <__aeabi_fcmplt>
 8007312:	1e03      	subs	r3, r0, #0
 8007314:	d00c      	beq.n	8007330 <MIC_Print+0x1e0>
 8007316:	4b1e      	ldr	r3, [pc, #120]	@ (8007390 <MIC_Print+0x240>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4927      	ldr	r1, [pc, #156]	@ (80073b8 <MIC_Print+0x268>)
 800731c:	1c18      	adds	r0, r3, #0
 800731e:	f7f9 f8f3 	bl	8000508 <__aeabi_fcmpge>
 8007322:	1e03      	subs	r3, r0, #0
 8007324:	d004      	beq.n	8007330 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 8007326:	2200      	movs	r2, #0
 8007328:	2101      	movs	r1, #1
 800732a:	2000      	movs	r0, #0
 800732c:	f001 fd9e 	bl	8008e6c <SetDBLED>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8007330:	4b17      	ldr	r3, [pc, #92]	@ (8007390 <MIC_Print+0x240>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4920      	ldr	r1, [pc, #128]	@ (80073b8 <MIC_Print+0x268>)
 8007336:	1c18      	adds	r0, r3, #0
 8007338:	f7f9 f8c8 	bl	80004cc <__aeabi_fcmplt>
 800733c:	1e03      	subs	r3, r0, #0
 800733e:	d00c      	beq.n	800735a <MIC_Print+0x20a>
 8007340:	4b13      	ldr	r3, [pc, #76]	@ (8007390 <MIC_Print+0x240>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	491d      	ldr	r1, [pc, #116]	@ (80073bc <MIC_Print+0x26c>)
 8007346:	1c18      	adds	r0, r3, #0
 8007348:	f7f9 f8de 	bl	8000508 <__aeabi_fcmpge>
 800734c:	1e03      	subs	r3, r0, #0
 800734e:	d004      	beq.n	800735a <MIC_Print+0x20a>
    SetDBLED(false, false, true);
 8007350:	2201      	movs	r2, #1
 8007352:	2100      	movs	r1, #0
 8007354:	2000      	movs	r0, #0
 8007356:	f001 fd89 	bl	8008e6c <SetDBLED>
  }
  if(dBc < 60){//light blue
 800735a:	4b0d      	ldr	r3, [pc, #52]	@ (8007390 <MIC_Print+0x240>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4917      	ldr	r1, [pc, #92]	@ (80073bc <MIC_Print+0x26c>)
 8007360:	1c18      	adds	r0, r3, #0
 8007362:	f7f9 f8b3 	bl	80004cc <__aeabi_fcmplt>
 8007366:	1e03      	subs	r3, r0, #0
 8007368:	d100      	bne.n	800736c <MIC_Print+0x21c>
    SetDBLED(false, true, true);
  }


  //FFT();
}
 800736a:	e004      	b.n	8007376 <MIC_Print+0x226>
    SetDBLED(false, true, true);
 800736c:	2201      	movs	r2, #1
 800736e:	2101      	movs	r1, #1
 8007370:	2000      	movs	r0, #0
 8007372:	f001 fd7b 	bl	8008e6c <SetDBLED>
}
 8007376:	46c0      	nop			@ (mov r8, r8)
 8007378:	46bd      	mov	sp, r7
 800737a:	b003      	add	sp, #12
 800737c:	bd90      	pop	{r4, r7, pc}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	0801bba8 	.word	0x0801bba8
 8007384:	0801bba4 	.word	0x0801bba4
 8007388:	20000ed4 	.word	0x20000ed4
 800738c:	20001f10 	.word	0x20001f10
 8007390:	20001edc 	.word	0x20001edc
 8007394:	20001f0c 	.word	0x20001f0c
 8007398:	20001ee0 	.word	0x20001ee0
 800739c:	20001f0d 	.word	0x20001f0d
 80073a0:	20001f08 	.word	0x20001f08
 80073a4:	41200000 	.word	0x41200000
 80073a8:	42aa0000 	.word	0x42aa0000
 80073ac:	42a00000 	.word	0x42a00000
 80073b0:	42960000 	.word	0x42960000
 80073b4:	428c0000 	.word	0x428c0000
 80073b8:	42820000 	.word	0x42820000
 80073bc:	42700000 	.word	0x42700000

080073c0 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	af00      	add	r7, sp, #0
  if(DataReady) {
 80073c4:	4b0a      	ldr	r3, [pc, #40]	@ (80073f0 <MIC_MeasurementDone+0x30>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <MIC_MeasurementDone+0x28>
    MIC_Print();
 80073ce:	f7ff febf 	bl	8007150 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 80073d2:	4b08      	ldr	r3, [pc, #32]	@ (80073f4 <MIC_MeasurementDone+0x34>)
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	4a08      	ldr	r2, [pc, #32]	@ (80073f8 <MIC_MeasurementDone+0x38>)
 80073d8:	4908      	ldr	r1, [pc, #32]	@ (80073fc <MIC_MeasurementDone+0x3c>)
 80073da:	2003      	movs	r0, #3
 80073dc:	f002 fc48 	bl	8009c70 <CreateLine>
    ResetMICIndicator();
 80073e0:	f001 fe08 	bl	8008ff4 <ResetMICIndicator>
    return true;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e000      	b.n	80073ea <MIC_MeasurementDone+0x2a>
  }
  return false;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	0018      	movs	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20001ed9 	.word	0x20001ed9
 80073f4:	2000002c 	.word	0x2000002c
 80073f8:	0801bbb4 	.word	0x0801bbb4
 80073fc:	0801bb94 	.word	0x0801bb94

08007400 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8007400:	b590      	push	{r4, r7, lr}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 8007406:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <MIC_TestMeasurementDone+0x30>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <MIC_TestMeasurementDone+0x24>
    Check = MIC_Check();
 8007410:	1dfc      	adds	r4, r7, #7
 8007412:	f7ff fe47 	bl	80070a4 <MIC_Check>
 8007416:	0003      	movs	r3, r0
 8007418:	7023      	strb	r3, [r4, #0]
    ResetMICIndicator();
 800741a:	f001 fdeb 	bl	8008ff4 <ResetMICIndicator>
    return Check;
 800741e:	1dfb      	adds	r3, r7, #7
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	e000      	b.n	8007426 <MIC_TestMeasurementDone+0x26>
  }
  return false;
 8007424:	2300      	movs	r3, #0
}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b003      	add	sp, #12
 800742c:	bd90      	pop	{r4, r7, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	20001ed9 	.word	0x20001ed9

08007434 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 800743c:	4b10      	ldr	r3, [pc, #64]	@ (8007480 <HAL_I2S_RxCpltCallback+0x4c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d118      	bne.n	8007478 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <HAL_I2S_RxCpltCallback+0x50>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8007450:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <HAL_I2S_RxCpltCallback+0x4c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	0018      	movs	r0, r3
 8007456:	f006 fd3d 	bl	800ded4 <HAL_I2S_DMAStop>
    DataReady = true;
 800745a:	4b0b      	ldr	r3, [pc, #44]	@ (8007488 <HAL_I2S_RxCpltCallback+0x54>)
 800745c:	2201      	movs	r2, #1
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e00b      	b.n	800747a <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 8007462:	4b0a      	ldr	r3, [pc, #40]	@ (800748c <HAL_I2S_RxCpltCallback+0x58>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	0018      	movs	r0, r3
 8007468:	f002 fbac 	bl	8009bc4 <TimestampIsReached>
 800746c:	1e03      	subs	r3, r0, #0
 800746e:	d004      	beq.n	800747a <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8007470:	4b04      	ldr	r3, [pc, #16]	@ (8007484 <HAL_I2S_RxCpltCallback+0x50>)
 8007472:	2201      	movs	r2, #1
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	e000      	b.n	800747a <HAL_I2S_RxCpltCallback+0x46>
    return;
 8007478:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 800747a:	46bd      	mov	sp, r7
 800747c:	b002      	add	sp, #8
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000ed0 	.word	0x20000ed0
 8007484:	20001ed8 	.word	0x20001ed8
 8007488:	20001ed9 	.word	0x20001ed9
 800748c:	20001ed4 	.word	0x20001ed4

08007490 <MIC_GetDB>:

float MIC_GetDB(void) {
 8007490:	b590      	push	{r4, r7, lr}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 800749a:	2300      	movs	r3, #0
 800749c:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 800749e:	230a      	movs	r3, #10
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	2280      	movs	r2, #128	@ 0x80
 80074a4:	0052      	lsls	r2, r2, #1
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	e019      	b.n	80074de <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 80074aa:	240a      	movs	r4, #10
 80074ac:	193b      	adds	r3, r7, r4
 80074ae:	881a      	ldrh	r2, [r3, #0]
 80074b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007560 <MIC_GetDB+0xd0>)
 80074b2:	0092      	lsls	r2, r2, #2
 80074b4:	58d0      	ldr	r0, [r2, r3]
 80074b6:	193b      	adds	r3, r7, r4
 80074b8:	881a      	ldrh	r2, [r3, #0]
 80074ba:	4b29      	ldr	r3, [pc, #164]	@ (8007560 <MIC_GetDB+0xd0>)
 80074bc:	0092      	lsls	r2, r2, #2
 80074be:	58d3      	ldr	r3, [r2, r3]
 80074c0:	1c19      	adds	r1, r3, #0
 80074c2:	f7f9 fceb 	bl	8000e9c <__aeabi_fmul>
 80074c6:	1c03      	adds	r3, r0, #0
 80074c8:	1c19      	adds	r1, r3, #0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7f9 f976 	bl	80007bc <__aeabi_fadd>
 80074d0:	1c03      	adds	r3, r0, #0
 80074d2:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80074d4:	193b      	adds	r3, r7, r4
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	193b      	adds	r3, r7, r4
 80074da:	3201      	adds	r2, #1
 80074dc:	801a      	strh	r2, [r3, #0]
 80074de:	230a      	movs	r3, #10
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	2380      	movs	r3, #128	@ 0x80
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3de      	bcc.n	80074aa <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 80074ec:	2187      	movs	r1, #135	@ 0x87
 80074ee:	05c9      	lsls	r1, r1, #23
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7f9 faed 	bl	8000ad0 <__aeabi_fdiv>
 80074f6:	1c03      	adds	r3, r0, #0
 80074f8:	1c18      	adds	r0, r3, #0
 80074fa:	f7fb ff31 	bl	8003360 <__aeabi_f2d>
 80074fe:	0002      	movs	r2, r0
 8007500:	000b      	movs	r3, r1
 8007502:	0010      	movs	r0, r2
 8007504:	0019      	movs	r1, r3
 8007506:	f013 fa55 	bl	801a9b4 <sqrt>
 800750a:	0002      	movs	r2, r0
 800750c:	000b      	movs	r3, r1
 800750e:	0010      	movs	r0, r2
 8007510:	0019      	movs	r1, r3
 8007512:	f7fb ff6d 	bl	80033f0 <__aeabi_d2f>
 8007516:	1c03      	adds	r3, r0, #0
 8007518:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 800751a:	6838      	ldr	r0, [r7, #0]
 800751c:	f7fb ff20 	bl	8003360 <__aeabi_f2d>
 8007520:	0002      	movs	r2, r0
 8007522:	000b      	movs	r3, r1
 8007524:	0010      	movs	r0, r2
 8007526:	0019      	movs	r1, r3
 8007528:	f013 fa0e 	bl	801a948 <log10>
 800752c:	2200      	movs	r2, #0
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <MIC_GetDB+0xd4>)
 8007530:	f7fb f802 	bl	8002538 <__aeabi_dmul>
 8007534:	0002      	movs	r2, r0
 8007536:	000b      	movs	r3, r1
 8007538:	0010      	movs	r0, r2
 800753a:	0019      	movs	r1, r3
 800753c:	2200      	movs	r2, #0
 800753e:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <MIC_GetDB+0xd8>)
 8007540:	f7fa f852 	bl	80015e8 <__aeabi_dadd>
 8007544:	0002      	movs	r2, r0
 8007546:	000b      	movs	r3, r1
 8007548:	0010      	movs	r0, r2
 800754a:	0019      	movs	r1, r3
 800754c:	f7fb ff50 	bl	80033f0 <__aeabi_d2f>
 8007550:	1c03      	adds	r3, r0, #0
 8007552:	607b      	str	r3, [r7, #4]

    return dBValue;
 8007554:	687b      	ldr	r3, [r7, #4]
}
 8007556:	1c18      	adds	r0, r3, #0
 8007558:	46bd      	mov	sp, r7
 800755a:	b005      	add	sp, #20
 800755c:	bd90      	pop	{r4, r7, pc}
 800755e:	46c0      	nop			@ (mov r8, r8)
 8007560:	20001f10 	.word	0x20001f10
 8007564:	40340000 	.word	0x40340000
 8007568:	405e0000 	.word	0x405e0000

0800756c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007570:	4b16      	ldr	r3, [pc, #88]	@ (80075cc <MX_RTC_Init+0x60>)
 8007572:	4a17      	ldr	r2, [pc, #92]	@ (80075d0 <MX_RTC_Init+0x64>)
 8007574:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007576:	4b15      	ldr	r3, [pc, #84]	@ (80075cc <MX_RTC_Init+0x60>)
 8007578:	2200      	movs	r2, #0
 800757a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800757c:	4b13      	ldr	r3, [pc, #76]	@ (80075cc <MX_RTC_Init+0x60>)
 800757e:	227f      	movs	r2, #127	@ 0x7f
 8007580:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007582:	4b12      	ldr	r3, [pc, #72]	@ (80075cc <MX_RTC_Init+0x60>)
 8007584:	22ff      	movs	r2, #255	@ 0xff
 8007586:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007588:	4b10      	ldr	r3, [pc, #64]	@ (80075cc <MX_RTC_Init+0x60>)
 800758a:	2200      	movs	r2, #0
 800758c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800758e:	4b0f      	ldr	r3, [pc, #60]	@ (80075cc <MX_RTC_Init+0x60>)
 8007590:	2200      	movs	r2, #0
 8007592:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007594:	4b0d      	ldr	r3, [pc, #52]	@ (80075cc <MX_RTC_Init+0x60>)
 8007596:	2200      	movs	r2, #0
 8007598:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800759a:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <MX_RTC_Init+0x60>)
 800759c:	2200      	movs	r2, #0
 800759e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80075a0:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <MX_RTC_Init+0x60>)
 80075a2:	0018      	movs	r0, r3
 80075a4:	f009 fbb8 	bl	8010d18 <HAL_RTC_Init>
 80075a8:	1e03      	subs	r3, r0, #0
 80075aa:	d001      	beq.n	80075b0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80075ac:	f7ff f8be 	bl	800672c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80075b0:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <MX_RTC_Init+0x60>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	2100      	movs	r1, #0
 80075b6:	0018      	movs	r0, r3
 80075b8:	f009 fdac 	bl	8011114 <HAL_RTCEx_SetWakeUpTimer>
 80075bc:	1e03      	subs	r3, r0, #0
 80075be:	d001      	beq.n	80075c4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80075c0:	f7ff f8b4 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80075c4:	46c0      	nop			@ (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	20002710 	.word	0x20002710
 80075d0:	40002800 	.word	0x40002800

080075d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a06      	ldr	r2, [pc, #24]	@ (80075fc <HAL_RTC_MspInit+0x28>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d106      	bne.n	80075f4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80075e6:	4b06      	ldr	r3, [pc, #24]	@ (8007600 <HAL_RTC_MspInit+0x2c>)
 80075e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075ea:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <HAL_RTC_MspInit+0x2c>)
 80075ec:	2180      	movs	r1, #128	@ 0x80
 80075ee:	02c9      	lsls	r1, r1, #11
 80075f0:	430a      	orrs	r2, r1
 80075f2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80075f4:	46c0      	nop			@ (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b002      	add	sp, #8
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40002800 	.word	0x40002800
 8007600:	40021000 	.word	0x40021000

08007604 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d113      	bne.n	800764a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	22fe      	movs	r2, #254	@ 0xfe
 8007626:	0592      	lsls	r2, r2, #22
 8007628:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4a1a      	ldr	r2, [pc, #104]	@ (8007698 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800762e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a1a      	ldr	r2, [pc, #104]	@ (800769c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007634:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4a19      	ldr	r2, [pc, #100]	@ (80076a0 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800763a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4a19      	ldr	r2, [pc, #100]	@ (80076a4 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8007640:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a18      	ldr	r2, [pc, #96]	@ (80076a8 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8007646:	61da      	str	r2, [r3, #28]
 8007648:	e011      	b.n	800766e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800764e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8007654:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800765a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a16      	ldr	r2, [pc, #88]	@ (80076b8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8007660:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4a15      	ldr	r2, [pc, #84]	@ (80076bc <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8007666:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a15      	ldr	r2, [pc, #84]	@ (80076c0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800766c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a14      	ldr	r2, [pc, #80]	@ (80076c4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8007672:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4a14      	ldr	r2, [pc, #80]	@ (80076c8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007678:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a12      	ldr	r2, [pc, #72]	@ (80076c8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800767e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a12      	ldr	r2, [pc, #72]	@ (80076cc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8007684:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	0018      	movs	r0, r3
 800768a:	f000 f831 	bl	80076f0 <GasIndexAlgorithm_reset>
}
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	b004      	add	sp, #16
 8007694:	bd80      	pop	{r7, pc}
 8007696:	46c0      	nop			@ (mov r8, r8)
 8007698:	00002710 	.word	0x00002710
 800769c:	44340000 	.word	0x44340000
 80076a0:	46859800 	.word	0x46859800
 80076a4:	46a05000 	.word	0x46a05000
 80076a8:	41f00000 	.word	0x41f00000
 80076ac:	42c80000 	.word	0x42c80000
 80076b0:	00004e20 	.word	0x00004e20
 80076b4:	43340000 	.word	0x43340000
 80076b8:	4528c000 	.word	0x4528c000
 80076bc:	45a32000 	.word	0x45a32000
 80076c0:	43aa0000 	.word	0x43aa0000
 80076c4:	43660000 	.word	0x43660000
 80076c8:	41400000 	.word	0x41400000
 80076cc:	42480000 	.word	0x42480000

080076d0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80076da:	22fe      	movs	r2, #254	@ 0xfe
 80076dc:	0592      	lsls	r2, r2, #22
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	0018      	movs	r0, r3
 80076e4:	f7ff ff8e 	bl	8007604 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80076e8:	46c0      	nop			@ (mov r8, r8)
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b002      	add	sp, #8
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	0018      	movs	r0, r3
 800770e:	f000 f805 	bl	800771c <GasIndexAlgorithm__init_instances>
}
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	46bd      	mov	sp, r7
 8007716:	b002      	add	sp, #8
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800771c:	b590      	push	{r4, r7, lr}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	0018      	movs	r0, r3
 8007728:	f000 f8e8 	bl	80078fc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	0018      	movs	r0, r3
 8007730:	f000 f9a6 	bl	8007a80 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007734:	1c04      	adds	r4, r0, #0
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0018      	movs	r0, r3
 800773a:	f000 f9ab 	bl	8007a94 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800773e:	1c02      	adds	r2, r0, #0
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	1c21      	adds	r1, r4, #0
 8007744:	0018      	movs	r0, r3
 8007746:	f000 fc3b 	bl	8007fc0 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d107      	bne.n	8007762 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8007752:	23fe      	movs	r3, #254	@ 0xfe
 8007754:	059b      	lsls	r3, r3, #22
 8007756:	4a0a      	ldr	r2, [pc, #40]	@ (8007780 <GasIndexAlgorithm__init_instances+0x64>)
 8007758:	490a      	ldr	r1, [pc, #40]	@ (8007784 <GasIndexAlgorithm__init_instances+0x68>)
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc86 	bl	800806c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8007760:	e005      	b.n	800776e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8007762:	4b09      	ldr	r3, [pc, #36]	@ (8007788 <GasIndexAlgorithm__init_instances+0x6c>)
 8007764:	4a09      	ldr	r2, [pc, #36]	@ (800778c <GasIndexAlgorithm__init_instances+0x70>)
 8007766:	490a      	ldr	r1, [pc, #40]	@ (8007790 <GasIndexAlgorithm__init_instances+0x74>)
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fc7f 	bl	800806c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	0018      	movs	r0, r3
 8007772:	f000 fd35 	bl	80081e0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8007776:	46c0      	nop			@ (mov r8, r8)
 8007778:	46bd      	mov	sp, r7
 800777a:	b003      	add	sp, #12
 800777c:	bd90      	pop	{r4, r7, pc}
 800777e:	46c0      	nop			@ (mov r8, r8)
 8007780:	bc257a78 	.word	0xbc257a78
 8007784:	44198000 	.word	0x44198000
 8007788:	42c80000 	.word	0x42c80000
 800778c:	bbd4fdf4 	.word	0xbbd4fdf4
 8007790:	43550000 	.word	0x43550000

08007794 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a4:	4952      	ldr	r1, [pc, #328]	@ (80078f0 <GasIndexAlgorithm_process+0x15c>)
 80077a6:	1c18      	adds	r0, r3, #0
 80077a8:	f7f8 fe9a 	bl	80004e0 <__aeabi_fcmple>
 80077ac:	1e03      	subs	r3, r0, #0
 80077ae:	d00c      	beq.n	80077ca <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	1c19      	adds	r1, r3, #0
 80077ba:	1c10      	adds	r0, r2, #0
 80077bc:	f7f8 fffe 	bl	80007bc <__aeabi_fadd>
 80077c0:	1c03      	adds	r3, r0, #0
 80077c2:	1c1a      	adds	r2, r3, #0
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80077c8:	e080      	b.n	80078cc <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dd25      	ble.n	800781c <GasIndexAlgorithm_process+0x88>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4a48      	ldr	r2, [pc, #288]	@ (80078f4 <GasIndexAlgorithm_process+0x160>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	dc21      	bgt.n	800781c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	429a      	cmp	r2, r3
 80077e0:	dc04      	bgt.n	80077ec <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	e00d      	b.n	8007808 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a41      	ldr	r2, [pc, #260]	@ (80078f8 <GasIndexAlgorithm_process+0x164>)
 80077f2:	4694      	mov	ip, r2
 80077f4:	4463      	add	r3, ip
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	dd05      	ble.n	8007808 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4a3d      	ldr	r2, [pc, #244]	@ (80078f8 <GasIndexAlgorithm_process+0x164>)
 8007802:	4694      	mov	ip, r2
 8007804:	4463      	add	r3, ip
 8007806:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	0018      	movs	r0, r3
 8007812:	f7f9 fe5b 	bl	80014cc <__aeabi_i2f>
 8007816:	1c02      	adds	r2, r0, #0
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	0018      	movs	r0, r3
 8007828:	f000 f945 	bl	8007ab6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800782c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800782e:	d014      	beq.n	800785a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	1c11      	adds	r1, r2, #0
 8007838:	0018      	movs	r0, r3
 800783a:	f000 fbd1 	bl	8007fe0 <GasIndexAlgorithm__mox_model__process>
 800783e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	1c11      	adds	r1, r2, #0
 800784c:	0018      	movs	r0, r3
 800784e:	f000 fc25 	bl	800809c <GasIndexAlgorithm__sigmoid_scaled__process>
 8007852:	1c02      	adds	r2, r0, #0
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
 8007858:	e003      	b.n	8007862 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1c11      	adds	r1, r2, #0
 800786a:	0018      	movs	r0, r3
 800786c:	f000 fcec 	bl	8008248 <GasIndexAlgorithm__adaptive_lowpass__process>
 8007870:	1c02      	adds	r2, r0, #0
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	21fc      	movs	r1, #252	@ 0xfc
 800787c:	0589      	lsls	r1, r1, #22
 800787e:	1c18      	adds	r0, r3, #0
 8007880:	f7f8 fe24 	bl	80004cc <__aeabi_fcmplt>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d003      	beq.n	8007890 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	22fc      	movs	r2, #252	@ 0xfc
 800788c:	0592      	lsls	r2, r2, #22
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007894:	2100      	movs	r1, #0
 8007896:	1c18      	adds	r0, r3, #0
 8007898:	f7f8 fe2c 	bl	80004f4 <__aeabi_fcmpgt>
 800789c:	1e03      	subs	r3, r0, #0
 800789e:	d015      	beq.n	80078cc <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	1c11      	adds	r1, r2, #0
 80078a8:	0018      	movs	r0, r3
 80078aa:	f000 fa4f 	bl	8007d4c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	0018      	movs	r0, r3
 80078b2:	f000 f8e5 	bl	8007a80 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80078b6:	1c04      	adds	r4, r0, #0
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	0018      	movs	r0, r3
 80078bc:	f000 f8ea 	bl	8007a94 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80078c0:	1c02      	adds	r2, r0, #0
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1c21      	adds	r1, r4, #0
 80078c6:	0018      	movs	r0, r3
 80078c8:	f000 fb7a 	bl	8007fc0 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	21fc      	movs	r1, #252	@ 0xfc
 80078d2:	0589      	lsls	r1, r1, #22
 80078d4:	1c18      	adds	r0, r3, #0
 80078d6:	f7f8 ff71 	bl	80007bc <__aeabi_fadd>
 80078da:	1c03      	adds	r3, r0, #0
 80078dc:	1c18      	adds	r0, r3, #0
 80078de:	f7f9 fdd5 	bl	800148c <__aeabi_f2iz>
 80078e2:	0002      	movs	r2, r0
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
    return;
 80078e8:	46c0      	nop			@ (mov r8, r8)
}
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b005      	add	sp, #20
 80078ee:	bd90      	pop	{r4, r7, pc}
 80078f0:	42340000 	.word	0x42340000
 80078f4:	0000fde7 	.word	0x0000fde7
 80078f8:	00007fff 	.word	0x00007fff

080078fc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80078fc:	b5b0      	push	{r4, r5, r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	223c      	movs	r2, #60	@ 0x3c
 8007908:	2100      	movs	r1, #0
 800790a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4952      	ldr	r1, [pc, #328]	@ (8007a70 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007926:	1c18      	adds	r0, r3, #0
 8007928:	f7f9 f8d2 	bl	8000ad0 <__aeabi_fdiv>
 800792c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800792e:	2188      	movs	r1, #136	@ 0x88
 8007930:	05c9      	lsls	r1, r1, #23
 8007932:	1c18      	adds	r0, r3, #0
 8007934:	f7f9 fab2 	bl	8000e9c <__aeabi_fmul>
 8007938:	1c03      	adds	r3, r0, #0
 800793a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	494a      	ldr	r1, [pc, #296]	@ (8007a70 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007946:	1c18      	adds	r0, r3, #0
 8007948:	f7f9 f8c2 	bl	8000ad0 <__aeabi_fdiv>
 800794c:	1c03      	adds	r3, r0, #0
 800794e:	1c19      	adds	r1, r3, #0
 8007950:	1c20      	adds	r0, r4, #0
 8007952:	f7f8 ff33 	bl	80007bc <__aeabi_fadd>
 8007956:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007958:	1c19      	adds	r1, r3, #0
 800795a:	1c28      	adds	r0, r5, #0
 800795c:	f7f9 f8b8 	bl	8000ad0 <__aeabi_fdiv>
 8007960:	1c03      	adds	r3, r0, #0
 8007962:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4940      	ldr	r1, [pc, #256]	@ (8007a70 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800796e:	1c18      	adds	r0, r3, #0
 8007970:	f7f9 f8ae 	bl	8000ad0 <__aeabi_fdiv>
 8007974:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007976:	2185      	movs	r1, #133	@ 0x85
 8007978:	05c9      	lsls	r1, r1, #23
 800797a:	1c18      	adds	r0, r3, #0
 800797c:	f7f9 fa8e 	bl	8000e9c <__aeabi_fmul>
 8007980:	1c03      	adds	r3, r0, #0
 8007982:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4938      	ldr	r1, [pc, #224]	@ (8007a70 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800798e:	1c18      	adds	r0, r3, #0
 8007990:	f7f9 f89e 	bl	8000ad0 <__aeabi_fdiv>
 8007994:	1c03      	adds	r3, r0, #0
 8007996:	1c19      	adds	r1, r3, #0
 8007998:	1c20      	adds	r0, r4, #0
 800799a:	f7f8 ff0f 	bl	80007bc <__aeabi_fadd>
 800799e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80079a0:	1c19      	adds	r1, r3, #0
 80079a2:	1c28      	adds	r0, r5, #0
 80079a4:	f7f9 f894 	bl	8000ad0 <__aeabi_fdiv>
 80079a8:	1c03      	adds	r3, r0, #0
 80079aa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d118      	bne.n	80079ea <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80079bc:	2188      	movs	r1, #136	@ 0x88
 80079be:	05c9      	lsls	r1, r1, #23
 80079c0:	1c18      	adds	r0, r3, #0
 80079c2:	f7f9 fa6b 	bl	8000e9c <__aeabi_fmul>
 80079c6:	1c03      	adds	r3, r0, #0
 80079c8:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80079ce:	4929      	ldr	r1, [pc, #164]	@ (8007a74 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80079d0:	1c18      	adds	r0, r3, #0
 80079d2:	f7f8 fef3 	bl	80007bc <__aeabi_fadd>
 80079d6:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80079d8:	1c19      	adds	r1, r3, #0
 80079da:	1c20      	adds	r0, r4, #0
 80079dc:	f7f9 f878 	bl	8000ad0 <__aeabi_fdiv>
 80079e0:	1c03      	adds	r3, r0, #0
 80079e2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80079e8:	e017      	b.n	8007a1a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80079ee:	2188      	movs	r1, #136	@ 0x88
 80079f0:	05c9      	lsls	r1, r1, #23
 80079f2:	1c18      	adds	r0, r3, #0
 80079f4:	f7f9 fa52 	bl	8000e9c <__aeabi_fmul>
 80079f8:	1c03      	adds	r3, r0, #0
 80079fa:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007a00:	491d      	ldr	r1, [pc, #116]	@ (8007a78 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8007a02:	1c18      	adds	r0, r3, #0
 8007a04:	f7f8 feda 	bl	80007bc <__aeabi_fadd>
 8007a08:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007a0a:	1c19      	adds	r1, r3, #0
 8007a0c:	1c20      	adds	r0, r4, #0
 8007a0e:	f7f9 f85f 	bl	8000ad0 <__aeabi_fdiv>
 8007a12:	1c03      	adds	r3, r0, #0
 8007a14:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007a1e:	2185      	movs	r1, #133	@ 0x85
 8007a20:	05c9      	lsls	r1, r1, #23
 8007a22:	1c18      	adds	r0, r3, #0
 8007a24:	f7f9 fa3a 	bl	8000e9c <__aeabi_fmul>
 8007a28:	1c03      	adds	r3, r0, #0
 8007a2a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	4912      	ldr	r1, [pc, #72]	@ (8007a7c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8007a32:	1c18      	adds	r0, r3, #0
 8007a34:	f7f8 fec2 	bl	80007bc <__aeabi_fadd>
 8007a38:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8007a3a:	1c19      	adds	r1, r3, #0
 8007a3c:	1c20      	adds	r0, r4, #0
 8007a3e:	f7f9 f847 	bl	8000ad0 <__aeabi_fdiv>
 8007a42:	1c03      	adds	r3, r0, #0
 8007a44:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007a68:	46c0      	nop			@ (mov r8, r8)
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8007a70:	45610000 	.word	0x45610000
 8007a74:	44960000 	.word	0x44960000
 8007a78:	41a00000 	.word	0x41a00000
 8007a7c:	451c4000 	.word	0x451c4000

08007a80 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007a8c:	1c18      	adds	r0, r3, #0
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	b002      	add	sp, #8
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8007aa4:	1c19      	adds	r1, r3, #0
 8007aa6:	1c10      	adds	r0, r2, #0
 8007aa8:	f7f8 fe88 	bl	80007bc <__aeabi_fadd>
 8007aac:	1c03      	adds	r3, r0, #0
}
 8007aae:	1c18      	adds	r0, r3, #0
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b002      	add	sp, #8
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	223c      	movs	r2, #60	@ 0x3c
 8007ac2:	5c9b      	ldrb	r3, [r3, r2]
}
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b002      	add	sp, #8
 8007aca:	bd80      	pop	{r7, pc}

08007acc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007acc:	b5b0      	push	{r4, r5, r7, lr}
 8007ace:	b08c      	sub	sp, #48	@ 0x30
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8007ad8:	1c19      	adds	r1, r3, #0
 8007ada:	4895      	ldr	r0, [pc, #596]	@ (8007d30 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007adc:	f7f9 fb1c 	bl	8001118 <__aeabi_fsub>
 8007ae0:	1c03      	adds	r3, r0, #0
 8007ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae8:	1c19      	adds	r1, r3, #0
 8007aea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007aec:	f7f8 fd02 	bl	80004f4 <__aeabi_fcmpgt>
 8007af0:	1e03      	subs	r3, r0, #0
 8007af2:	d00b      	beq.n	8007b0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007afc:	1c19      	adds	r1, r3, #0
 8007afe:	1c10      	adds	r0, r2, #0
 8007b00:	f7f8 fe5c 	bl	80007bc <__aeabi_fadd>
 8007b04:	1c03      	adds	r3, r0, #0
 8007b06:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b10:	1c19      	adds	r1, r3, #0
 8007b12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b14:	f7f8 fcee 	bl	80004f4 <__aeabi_fcmpgt>
 8007b18:	1e03      	subs	r3, r0, #0
 8007b1a:	d00b      	beq.n	8007b34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007b24:	1c19      	adds	r1, r3, #0
 8007b26:	1c10      	adds	r0, r2, #0
 8007b28:	f7f8 fe48 	bl	80007bc <__aeabi_fadd>
 8007b2c:	1c03      	adds	r3, r0, #0
 8007b2e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6959      	ldr	r1, [r3, #20]
 8007b38:	4a7e      	ldr	r2, [pc, #504]	@ (8007d34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 f9f1 	bl	8007f24 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	1c11      	adds	r1, r2, #0
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f000 f9fa 	bl	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b50:	1c03      	adds	r3, r0, #0
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007b60:	1c19      	adds	r1, r3, #0
 8007b62:	1c10      	adds	r0, r2, #0
 8007b64:	f7f9 fad8 	bl	8001118 <__aeabi_fsub>
 8007b68:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b6c:	1c18      	adds	r0, r3, #0
 8007b6e:	f7f9 f995 	bl	8000e9c <__aeabi_fmul>
 8007b72:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007b74:	1c19      	adds	r1, r3, #0
 8007b76:	1c20      	adds	r0, r4, #0
 8007b78:	f7f8 fe20 	bl	80007bc <__aeabi_fadd>
 8007b7c:	1c03      	adds	r3, r0, #0
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007b88:	1c19      	adds	r1, r3, #0
 8007b8a:	486b      	ldr	r0, [pc, #428]	@ (8007d38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007b8c:	f7f9 fac4 	bl	8001118 <__aeabi_fsub>
 8007b90:	1c03      	adds	r3, r0, #0
 8007b92:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	1c11      	adds	r1, r2, #0
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f000 f9d1 	bl	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007ba2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007ba4:	1c19      	adds	r1, r3, #0
 8007ba6:	1c28      	adds	r0, r5, #0
 8007ba8:	f7f9 f978 	bl	8000e9c <__aeabi_fmul>
 8007bac:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007bae:	1c19      	adds	r1, r3, #0
 8007bb0:	1c20      	adds	r0, r4, #0
 8007bb2:	f7f8 fe03 	bl	80007bc <__aeabi_fadd>
 8007bb6:	1c03      	adds	r3, r0, #0
 8007bb8:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007bba:	4a60      	ldr	r2, [pc, #384]	@ (8007d3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007bbc:	6a39      	ldr	r1, [r7, #32]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f000 f9af 	bl	8007f24 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	1c11      	adds	r1, r2, #0
 8007bce:	0018      	movs	r0, r3
 8007bd0:	f000 f9b8 	bl	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007bd4:	1c03      	adds	r3, r0, #0
 8007bd6:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007bd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bda:	69f8      	ldr	r0, [r7, #28]
 8007bdc:	f7f9 f95e 	bl	8000e9c <__aeabi_fmul>
 8007be0:	1c03      	adds	r3, r0, #0
 8007be2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6999      	ldr	r1, [r3, #24]
 8007bec:	4a51      	ldr	r2, [pc, #324]	@ (8007d34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f000 f997 	bl	8007f24 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	1c11      	adds	r1, r2, #0
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f000 f9a0 	bl	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007c04:	1c03      	adds	r3, r0, #0
 8007c06:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007c14:	1c19      	adds	r1, r3, #0
 8007c16:	1c10      	adds	r0, r2, #0
 8007c18:	f7f9 fa7e 	bl	8001118 <__aeabi_fsub>
 8007c1c:	1c03      	adds	r3, r0, #0
 8007c1e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	f7f9 fa78 	bl	8001118 <__aeabi_fsub>
 8007c28:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007c2a:	1c19      	adds	r1, r3, #0
 8007c2c:	1c28      	adds	r0, r5, #0
 8007c2e:	f7f9 f935 	bl	8000e9c <__aeabi_fmul>
 8007c32:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007c34:	1c19      	adds	r1, r3, #0
 8007c36:	1c20      	adds	r0, r4, #0
 8007c38:	f7f8 fdc0 	bl	80007bc <__aeabi_fadd>
 8007c3c:	1c03      	adds	r3, r0, #0
 8007c3e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007c48:	1c19      	adds	r1, r3, #0
 8007c4a:	483b      	ldr	r0, [pc, #236]	@ (8007d38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007c4c:	f7f9 fa64 	bl	8001118 <__aeabi_fsub>
 8007c50:	1c03      	adds	r3, r0, #0
 8007c52:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	1c11      	adds	r1, r2, #0
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f000 f971 	bl	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007c62:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007c64:	1c19      	adds	r1, r3, #0
 8007c66:	1c28      	adds	r0, r5, #0
 8007c68:	f7f9 f918 	bl	8000e9c <__aeabi_fmul>
 8007c6c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007c6e:	1c19      	adds	r1, r3, #0
 8007c70:	1c20      	adds	r0, r4, #0
 8007c72:	f7f8 fda3 	bl	80007bc <__aeabi_fadd>
 8007c76:	1c03      	adds	r3, r0, #0
 8007c78:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007c7a:	4a30      	ldr	r2, [pc, #192]	@ (8007d3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007c7c:	6939      	ldr	r1, [r7, #16]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	0018      	movs	r0, r3
 8007c82:	f000 f94f 	bl	8007f24 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	1c11      	adds	r1, r2, #0
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 f958 	bl	8007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007c94:	1c03      	adds	r3, r0, #0
 8007c96:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007c98:	6979      	ldr	r1, [r7, #20]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7f9 f8fe 	bl	8000e9c <__aeabi_fmul>
 8007ca0:	1c03      	adds	r3, r0, #0
 8007ca2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4923      	ldr	r1, [pc, #140]	@ (8007d40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007cb2:	1c18      	adds	r0, r3, #0
 8007cb4:	f7f8 ff0c 	bl	8000ad0 <__aeabi_fdiv>
 8007cb8:	1c03      	adds	r3, r0, #0
 8007cba:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007cbc:	69f9      	ldr	r1, [r7, #28]
 8007cbe:	20fe      	movs	r0, #254	@ 0xfe
 8007cc0:	0580      	lsls	r0, r0, #22
 8007cc2:	f7f9 fa29 	bl	8001118 <__aeabi_fsub>
 8007cc6:	1c03      	adds	r3, r0, #0
 8007cc8:	491e      	ldr	r1, [pc, #120]	@ (8007d44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007cca:	1c18      	adds	r0, r3, #0
 8007ccc:	f7f9 f8e6 	bl	8000e9c <__aeabi_fmul>
 8007cd0:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007cd2:	491d      	ldr	r1, [pc, #116]	@ (8007d48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007cd4:	1c18      	adds	r0, r3, #0
 8007cd6:	f7f9 fa1f 	bl	8001118 <__aeabi_fsub>
 8007cda:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007cdc:	1c19      	adds	r1, r3, #0
 8007cde:	1c28      	adds	r0, r5, #0
 8007ce0:	f7f9 f8dc 	bl	8000e9c <__aeabi_fmul>
 8007ce4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007ce6:	1c19      	adds	r1, r3, #0
 8007ce8:	1c20      	adds	r0, r4, #0
 8007cea:	f7f8 fd67 	bl	80007bc <__aeabi_fadd>
 8007cee:	1c03      	adds	r3, r0, #0
 8007cf0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	1c18      	adds	r0, r3, #0
 8007cfe:	f7f8 fbe5 	bl	80004cc <__aeabi_fcmplt>
 8007d02:	1e03      	subs	r3, r0, #0
 8007d04:	d002      	beq.n	8007d0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007d14:	1c19      	adds	r1, r3, #0
 8007d16:	1c10      	adds	r0, r2, #0
 8007d18:	f7f8 fbec 	bl	80004f4 <__aeabi_fcmpgt>
 8007d1c:	1e03      	subs	r3, r0, #0
 8007d1e:	d100      	bne.n	8007d22 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007d20:	e002      	b.n	8007d28 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d28:	46c0      	nop			@ (mov r8, r8)
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	b00c      	add	sp, #48	@ 0x30
 8007d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d30:	46fffe00 	.word	0x46fffe00
 8007d34:	3c23d70a 	.word	0x3c23d70a
 8007d38:	43ff0000 	.word	0x43ff0000
 8007d3c:	3db851ec 	.word	0x3db851ec
 8007d40:	42700000 	.word	0x42700000
 8007d44:	3fa66666 	.word	0x3fa66666
 8007d48:	3e99999a 	.word	0x3e99999a

08007d4c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	223c      	movs	r2, #60	@ 0x3c
 8007d5a:	5c9b      	ldrb	r3, [r3, r2]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	4053      	eors	r3, r2
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	223c      	movs	r2, #60	@ 0x3c
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007d7a:	e0c8      	b.n	8007f0e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d80:	4965      	ldr	r1, [pc, #404]	@ (8007f18 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007d82:	1c18      	adds	r0, r3, #0
 8007d84:	f7f8 fbc0 	bl	8000508 <__aeabi_fcmpge>
 8007d88:	1e03      	subs	r3, r0, #0
 8007d8a:	d107      	bne.n	8007d9c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007d90:	4962      	ldr	r1, [pc, #392]	@ (8007f1c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007d92:	1c18      	adds	r0, r3, #0
 8007d94:	f7f8 fba4 	bl	80004e0 <__aeabi_fcmple>
 8007d98:	1e03      	subs	r3, r0, #0
 8007d9a:	d00e      	beq.n	8007dba <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007da4:	1c19      	adds	r1, r3, #0
 8007da6:	1c10      	adds	r0, r2, #0
 8007da8:	f7f8 fd08 	bl	80007bc <__aeabi_fadd>
 8007dac:	1c03      	adds	r3, r0, #0
 8007dae:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dbe:	1c19      	adds	r1, r3, #0
 8007dc0:	6838      	ldr	r0, [r7, #0]
 8007dc2:	f7f9 f9a9 	bl	8001118 <__aeabi_fsub>
 8007dc6:	1c03      	adds	r3, r0, #0
 8007dc8:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f7ff fe7d 	bl	8007acc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	1c19      	adds	r1, r3, #0
 8007dd8:	6838      	ldr	r0, [r7, #0]
 8007dda:	f7f9 f99d 	bl	8001118 <__aeabi_fsub>
 8007dde:	1c03      	adds	r3, r0, #0
 8007de0:	2185      	movs	r1, #133	@ 0x85
 8007de2:	05c9      	lsls	r1, r1, #23
 8007de4:	1c18      	adds	r0, r3, #0
 8007de6:	f7f8 fe73 	bl	8000ad0 <__aeabi_fdiv>
 8007dea:	1c03      	adds	r3, r0, #0
 8007dec:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007dee:	2100      	movs	r1, #0
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7f8 fb6b 	bl	80004cc <__aeabi_fcmplt>
 8007df6:	1e03      	subs	r3, r0, #0
 8007df8:	d008      	beq.n	8007e0c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dfe:	68f9      	ldr	r1, [r7, #12]
 8007e00:	1c18      	adds	r0, r3, #0
 8007e02:	f7f9 f989 	bl	8001118 <__aeabi_fsub>
 8007e06:	1c03      	adds	r3, r0, #0
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	e007      	b.n	8007e1c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e10:	1c19      	adds	r1, r3, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7f8 fcd2 	bl	80007bc <__aeabi_fadd>
 8007e18:	1c03      	adds	r3, r0, #0
 8007e1a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007e1c:	23fe      	movs	r3, #254	@ 0xfe
 8007e1e:	059b      	lsls	r3, r3, #22
 8007e20:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007e22:	493f      	ldr	r1, [pc, #252]	@ (8007f20 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007e24:	6978      	ldr	r0, [r7, #20]
 8007e26:	f7f8 fb65 	bl	80004f4 <__aeabi_fcmpgt>
 8007e2a:	1e03      	subs	r3, r0, #0
 8007e2c:	d010      	beq.n	8007e50 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007e2e:	493c      	ldr	r1, [pc, #240]	@ (8007f20 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007e30:	6978      	ldr	r0, [r7, #20]
 8007e32:	f7f8 fe4d 	bl	8000ad0 <__aeabi_fdiv>
 8007e36:	1c03      	adds	r3, r0, #0
 8007e38:	1c1c      	adds	r4, r3, #0
 8007e3a:	4939      	ldr	r1, [pc, #228]	@ (8007f20 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007e3c:	6978      	ldr	r0, [r7, #20]
 8007e3e:	f7f8 fe47 	bl	8000ad0 <__aeabi_fdiv>
 8007e42:	1c03      	adds	r3, r0, #0
 8007e44:	1c19      	adds	r1, r3, #0
 8007e46:	1c20      	adds	r0, r4, #0
 8007e48:	f7f9 f828 	bl	8000e9c <__aeabi_fmul>
 8007e4c:	1c03      	adds	r3, r0, #0
 8007e4e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007e54:	1c19      	adds	r1, r3, #0
 8007e56:	2085      	movs	r0, #133	@ 0x85
 8007e58:	05c0      	lsls	r0, r0, #23
 8007e5a:	f7f9 f95d 	bl	8001118 <__aeabi_fsub>
 8007e5e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007e60:	6939      	ldr	r1, [r7, #16]
 8007e62:	1c18      	adds	r0, r3, #0
 8007e64:	f7f9 f81a 	bl	8000e9c <__aeabi_fmul>
 8007e68:	1c03      	adds	r3, r0, #0
 8007e6a:	1c18      	adds	r0, r3, #0
 8007e6c:	f012 fdf0 	bl	801aa50 <sqrtf>
 8007e70:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007e7a:	2185      	movs	r1, #133	@ 0x85
 8007e7c:	05c9      	lsls	r1, r1, #23
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f7f9 f80c 	bl	8000e9c <__aeabi_fmul>
 8007e84:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007e86:	1c19      	adds	r1, r3, #0
 8007e88:	1c28      	adds	r0, r5, #0
 8007e8a:	f7f8 fe21 	bl	8000ad0 <__aeabi_fdiv>
 8007e8e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007e90:	1c19      	adds	r1, r3, #0
 8007e92:	1c20      	adds	r0, r4, #0
 8007e94:	f7f9 f802 	bl	8000e9c <__aeabi_fmul>
 8007e98:	1c03      	adds	r3, r0, #0
 8007e9a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea0:	68f9      	ldr	r1, [r7, #12]
 8007ea2:	1c18      	adds	r0, r3, #0
 8007ea4:	f7f8 fffa 	bl	8000e9c <__aeabi_fmul>
 8007ea8:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007eaa:	6939      	ldr	r1, [r7, #16]
 8007eac:	1c18      	adds	r0, r3, #0
 8007eae:	f7f8 fe0f 	bl	8000ad0 <__aeabi_fdiv>
 8007eb2:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007eb4:	68f9      	ldr	r1, [r7, #12]
 8007eb6:	1c18      	adds	r0, r3, #0
 8007eb8:	f7f8 fff0 	bl	8000e9c <__aeabi_fmul>
 8007ebc:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007ebe:	1c19      	adds	r1, r3, #0
 8007ec0:	1c20      	adds	r0, r4, #0
 8007ec2:	f7f8 fc7b 	bl	80007bc <__aeabi_fadd>
 8007ec6:	1c03      	adds	r3, r0, #0
 8007ec8:	1c18      	adds	r0, r3, #0
 8007eca:	f012 fdc1 	bl	801aa50 <sqrtf>
 8007ece:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007ed0:	1c19      	adds	r1, r3, #0
 8007ed2:	1c30      	adds	r0, r6, #0
 8007ed4:	f7f8 ffe2 	bl	8000e9c <__aeabi_fmul>
 8007ed8:	1c03      	adds	r3, r0, #0
 8007eda:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee8:	68f9      	ldr	r1, [r7, #12]
 8007eea:	1c18      	adds	r0, r3, #0
 8007eec:	f7f8 ffd6 	bl	8000e9c <__aeabi_fmul>
 8007ef0:	1c03      	adds	r3, r0, #0
 8007ef2:	2182      	movs	r1, #130	@ 0x82
 8007ef4:	05c9      	lsls	r1, r1, #23
 8007ef6:	1c18      	adds	r0, r3, #0
 8007ef8:	f7f8 fdea 	bl	8000ad0 <__aeabi_fdiv>
 8007efc:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007efe:	1c19      	adds	r1, r3, #0
 8007f00:	1c20      	adds	r0, r4, #0
 8007f02:	f7f8 fc5b 	bl	80007bc <__aeabi_fadd>
 8007f06:	1c03      	adds	r3, r0, #0
 8007f08:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	46bd      	mov	sp, r7
 8007f12:	b007      	add	sp, #28
 8007f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f16:	46c0      	nop			@ (mov r8, r8)
 8007f18:	42c80000 	.word	0x42c80000
 8007f1c:	c2c80000 	.word	0xc2c80000
 8007f20:	44b40000 	.word	0x44b40000

08007f24 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f3c:	46c0      	nop			@ (mov r8, r8)
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b004      	add	sp, #16
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f56:	1c19      	adds	r1, r3, #0
 8007f58:	6838      	ldr	r0, [r7, #0]
 8007f5a:	f7f9 f8dd 	bl	8001118 <__aeabi_fsub>
 8007f5e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007f60:	1c19      	adds	r1, r3, #0
 8007f62:	1c20      	adds	r0, r4, #0
 8007f64:	f7f8 ff9a 	bl	8000e9c <__aeabi_fmul>
 8007f68:	1c03      	adds	r3, r0, #0
 8007f6a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007f6c:	4912      	ldr	r1, [pc, #72]	@ (8007fb8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7f8 faac 	bl	80004cc <__aeabi_fcmplt>
 8007f74:	1e03      	subs	r3, r0, #0
 8007f76:	d002      	beq.n	8007f7e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007f78:	23fe      	movs	r3, #254	@ 0xfe
 8007f7a:	059b      	lsls	r3, r3, #22
 8007f7c:	e018      	b.n	8007fb0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007f7e:	490f      	ldr	r1, [pc, #60]	@ (8007fbc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7f8 fab7 	bl	80004f4 <__aeabi_fcmpgt>
 8007f86:	1e03      	subs	r3, r0, #0
 8007f88:	d001      	beq.n	8007f8e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e010      	b.n	8007fb0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1c18      	adds	r0, r3, #0
 8007f92:	f012 fd35 	bl	801aa00 <expf>
 8007f96:	1c03      	adds	r3, r0, #0
 8007f98:	21fe      	movs	r1, #254	@ 0xfe
 8007f9a:	0589      	lsls	r1, r1, #22
 8007f9c:	1c18      	adds	r0, r3, #0
 8007f9e:	f7f8 fc0d 	bl	80007bc <__aeabi_fadd>
 8007fa2:	1c03      	adds	r3, r0, #0
 8007fa4:	1c19      	adds	r1, r3, #0
 8007fa6:	20fe      	movs	r0, #254	@ 0xfe
 8007fa8:	0580      	lsls	r0, r0, #22
 8007faa:	f7f8 fd91 	bl	8000ad0 <__aeabi_fdiv>
 8007fae:	1c03      	adds	r3, r0, #0
    }
}
 8007fb0:	1c18      	adds	r0, r3, #0
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b005      	add	sp, #20
 8007fb6:	bd90      	pop	{r4, r7, pc}
 8007fb8:	c2480000 	.word	0xc2480000
 8007fbc:	42480000 	.word	0x42480000

08007fc0 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007fd8:	46c0      	nop			@ (mov r8, r8)
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	b004      	add	sp, #16
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007fe0:	b590      	push	{r4, r7, lr}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d114      	bne.n	800801c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ff6:	1c19      	adds	r1, r3, #0
 8007ff8:	6838      	ldr	r0, [r7, #0]
 8007ffa:	f7f9 f88d 	bl	8001118 <__aeabi_fsub>
 8007ffe:	1c03      	adds	r3, r0, #0
 8008000:	4918      	ldr	r1, [pc, #96]	@ (8008064 <GasIndexAlgorithm__mox_model__process+0x84>)
 8008002:	1c18      	adds	r0, r3, #0
 8008004:	f7f8 fd64 	bl	8000ad0 <__aeabi_fdiv>
 8008008:	1c03      	adds	r3, r0, #0
 800800a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8008010:	1c19      	adds	r1, r3, #0
 8008012:	1c10      	adds	r0, r2, #0
 8008014:	f7f8 ff42 	bl	8000e9c <__aeabi_fmul>
 8008018:	1c03      	adds	r3, r0, #0
 800801a:	e01f      	b.n	800805c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008020:	1c19      	adds	r1, r3, #0
 8008022:	6838      	ldr	r0, [r7, #0]
 8008024:	f7f9 f878 	bl	8001118 <__aeabi_fsub>
 8008028:	1c03      	adds	r3, r0, #0
 800802a:	1c1a      	adds	r2, r3, #0
 800802c:	2380      	movs	r3, #128	@ 0x80
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	4053      	eors	r3, r2
 8008032:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008038:	490b      	ldr	r1, [pc, #44]	@ (8008068 <GasIndexAlgorithm__mox_model__process+0x88>)
 800803a:	1c18      	adds	r0, r3, #0
 800803c:	f7f8 fbbe 	bl	80007bc <__aeabi_fadd>
 8008040:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008042:	1c19      	adds	r1, r3, #0
 8008044:	1c20      	adds	r0, r4, #0
 8008046:	f7f8 fd43 	bl	8000ad0 <__aeabi_fdiv>
 800804a:	1c03      	adds	r3, r0, #0
 800804c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8008052:	1c19      	adds	r1, r3, #0
 8008054:	1c10      	adds	r0, r2, #0
 8008056:	f7f8 ff21 	bl	8000e9c <__aeabi_fmul>
 800805a:	1c03      	adds	r3, r0, #0
    }
}
 800805c:	1c18      	adds	r0, r3, #0
 800805e:	46bd      	mov	sp, r7
 8008060:	b003      	add	sp, #12
 8008062:	bd90      	pop	{r4, r7, pc}
 8008064:	44fa0000 	.word	0x44fa0000
 8008068:	435c0000 	.word	0x435c0000

0800806c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2180      	movs	r1, #128	@ 0x80
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2184      	movs	r1, #132	@ 0x84
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2188      	movs	r1, #136	@ 0x88
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	505a      	str	r2, [r3, r1]
}
 8008092:	46c0      	nop			@ (mov r8, r8)
 8008094:	46bd      	mov	sp, r7
 8008096:	b004      	add	sp, #16
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2280      	movs	r2, #128	@ 0x80
 80080aa:	589c      	ldr	r4, [r3, r2]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2284      	movs	r2, #132	@ 0x84
 80080b0:	589b      	ldr	r3, [r3, r2]
 80080b2:	1c19      	adds	r1, r3, #0
 80080b4:	6838      	ldr	r0, [r7, #0]
 80080b6:	f7f9 f82f 	bl	8001118 <__aeabi_fsub>
 80080ba:	1c03      	adds	r3, r0, #0
 80080bc:	1c19      	adds	r1, r3, #0
 80080be:	1c20      	adds	r0, r4, #0
 80080c0:	f7f8 feec 	bl	8000e9c <__aeabi_fmul>
 80080c4:	1c03      	adds	r3, r0, #0
 80080c6:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80080c8:	4940      	ldr	r1, [pc, #256]	@ (80081cc <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80080ca:	68b8      	ldr	r0, [r7, #8]
 80080cc:	f7f8 f9fe 	bl	80004cc <__aeabi_fcmplt>
 80080d0:	1e03      	subs	r3, r0, #0
 80080d2:	d001      	beq.n	80080d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80080d4:	4b3e      	ldr	r3, [pc, #248]	@ (80081d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80080d6:	e075      	b.n	80081c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80080d8:	493e      	ldr	r1, [pc, #248]	@ (80081d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80080da:	68b8      	ldr	r0, [r7, #8]
 80080dc:	f7f8 fa0a 	bl	80004f4 <__aeabi_fcmpgt>
 80080e0:	1e03      	subs	r3, r0, #0
 80080e2:	d001      	beq.n	80080e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e06d      	b.n	80081c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80080e8:	2100      	movs	r1, #0
 80080ea:	6838      	ldr	r0, [r7, #0]
 80080ec:	f7f8 fa0c 	bl	8000508 <__aeabi_fcmpge>
 80080f0:	1e03      	subs	r3, r0, #0
 80080f2:	d047      	beq.n	8008184 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2288      	movs	r2, #136	@ 0x88
 80080f8:	589b      	ldr	r3, [r3, r2]
 80080fa:	21fe      	movs	r1, #254	@ 0xfe
 80080fc:	0589      	lsls	r1, r1, #22
 80080fe:	1c18      	adds	r0, r3, #0
 8008100:	f7f8 f9de 	bl	80004c0 <__aeabi_fcmpeq>
 8008104:	1e03      	subs	r3, r0, #0
 8008106:	d00e      	beq.n	8008126 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	1c19      	adds	r1, r3, #0
 800810e:	20fe      	movs	r0, #254	@ 0xfe
 8008110:	0580      	lsls	r0, r0, #22
 8008112:	f7f9 f801 	bl	8001118 <__aeabi_fsub>
 8008116:	1c03      	adds	r3, r0, #0
 8008118:	492f      	ldr	r1, [pc, #188]	@ (80081d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800811a:	1c18      	adds	r0, r3, #0
 800811c:	f7f8 febe 	bl	8000e9c <__aeabi_fmul>
 8008120:	1c03      	adds	r3, r0, #0
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e012      	b.n	800814c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	492c      	ldr	r1, [pc, #176]	@ (80081dc <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800812c:	1c18      	adds	r0, r3, #0
 800812e:	f7f8 feb5 	bl	8000e9c <__aeabi_fmul>
 8008132:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008134:	1c19      	adds	r1, r3, #0
 8008136:	4826      	ldr	r0, [pc, #152]	@ (80081d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008138:	f7f8 ffee 	bl	8001118 <__aeabi_fsub>
 800813c:	1c03      	adds	r3, r0, #0
 800813e:	2181      	movs	r1, #129	@ 0x81
 8008140:	05c9      	lsls	r1, r1, #23
 8008142:	1c18      	adds	r0, r3, #0
 8008144:	f7f8 fcc4 	bl	8000ad0 <__aeabi_fdiv>
 8008148:	1c03      	adds	r3, r0, #0
 800814a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800814c:	4920      	ldr	r1, [pc, #128]	@ (80081d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7f8 fb34 	bl	80007bc <__aeabi_fadd>
 8008154:	1c03      	adds	r3, r0, #0
 8008156:	1c1c      	adds	r4, r3, #0
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	1c18      	adds	r0, r3, #0
 800815c:	f012 fc50 	bl	801aa00 <expf>
 8008160:	1c03      	adds	r3, r0, #0
 8008162:	21fe      	movs	r1, #254	@ 0xfe
 8008164:	0589      	lsls	r1, r1, #22
 8008166:	1c18      	adds	r0, r3, #0
 8008168:	f7f8 fb28 	bl	80007bc <__aeabi_fadd>
 800816c:	1c03      	adds	r3, r0, #0
 800816e:	1c19      	adds	r1, r3, #0
 8008170:	1c20      	adds	r0, r4, #0
 8008172:	f7f8 fcad 	bl	8000ad0 <__aeabi_fdiv>
 8008176:	1c03      	adds	r3, r0, #0
 8008178:	68f9      	ldr	r1, [r7, #12]
 800817a:	1c18      	adds	r0, r3, #0
 800817c:	f7f8 ffcc 	bl	8001118 <__aeabi_fsub>
 8008180:	1c03      	adds	r3, r0, #0
 8008182:	e01f      	b.n	80081c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2188      	movs	r1, #136	@ 0x88
 800818c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800818e:	1c19      	adds	r1, r3, #0
 8008190:	1c10      	adds	r0, r2, #0
 8008192:	f7f8 fc9d 	bl	8000ad0 <__aeabi_fdiv>
 8008196:	1c03      	adds	r3, r0, #0
 8008198:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	1c18      	adds	r0, r3, #0
 800819e:	f012 fc2f 	bl	801aa00 <expf>
 80081a2:	1c03      	adds	r3, r0, #0
 80081a4:	21fe      	movs	r1, #254	@ 0xfe
 80081a6:	0589      	lsls	r1, r1, #22
 80081a8:	1c18      	adds	r0, r3, #0
 80081aa:	f7f8 fb07 	bl	80007bc <__aeabi_fadd>
 80081ae:	1c03      	adds	r3, r0, #0
 80081b0:	1c19      	adds	r1, r3, #0
 80081b2:	4807      	ldr	r0, [pc, #28]	@ (80081d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80081b4:	f7f8 fc8c 	bl	8000ad0 <__aeabi_fdiv>
 80081b8:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80081ba:	1c19      	adds	r1, r3, #0
 80081bc:	1c20      	adds	r0, r4, #0
 80081be:	f7f8 fe6d 	bl	8000e9c <__aeabi_fmul>
 80081c2:	1c03      	adds	r3, r0, #0
        }
    }
}
 80081c4:	1c18      	adds	r0, r3, #0
 80081c6:	46bd      	mov	sp, r7
 80081c8:	b005      	add	sp, #20
 80081ca:	bd90      	pop	{r4, r7, pc}
 80081cc:	c2480000 	.word	0xc2480000
 80081d0:	43fa0000 	.word	0x43fa0000
 80081d4:	42480000 	.word	0x42480000
 80081d8:	3f8041ab 	.word	0x3f8041ab
 80081dc:	40a00000 	.word	0x40a00000

080081e0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80081e0:	b590      	push	{r4, r7, lr}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4913      	ldr	r1, [pc, #76]	@ (8008240 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80081f2:	1c18      	adds	r0, r3, #0
 80081f4:	f7f8 fae2 	bl	80007bc <__aeabi_fadd>
 80081f8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80081fa:	1c19      	adds	r1, r3, #0
 80081fc:	1c20      	adds	r0, r4, #0
 80081fe:	f7f8 fc67 	bl	8000ad0 <__aeabi_fdiv>
 8008202:	1c03      	adds	r3, r0, #0
 8008204:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	228c      	movs	r2, #140	@ 0x8c
 800820a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	490b      	ldr	r1, [pc, #44]	@ (8008244 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8008216:	1c18      	adds	r0, r3, #0
 8008218:	f7f8 fad0 	bl	80007bc <__aeabi_fadd>
 800821c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800821e:	1c19      	adds	r1, r3, #0
 8008220:	1c20      	adds	r0, r4, #0
 8008222:	f7f8 fc55 	bl	8000ad0 <__aeabi_fdiv>
 8008226:	1c03      	adds	r3, r0, #0
 8008228:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2290      	movs	r2, #144	@ 0x90
 800822e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2294      	movs	r2, #148	@ 0x94
 8008234:	2100      	movs	r1, #0
 8008236:	5499      	strb	r1, [r3, r2]
}
 8008238:	46c0      	nop			@ (mov r8, r8)
 800823a:	46bd      	mov	sp, r7
 800823c:	b003      	add	sp, #12
 800823e:	bd90      	pop	{r4, r7, pc}
 8008240:	41a00000 	.word	0x41a00000
 8008244:	43fa0000 	.word	0x43fa0000

08008248 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008248:	b590      	push	{r4, r7, lr}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2294      	movs	r2, #148	@ 0x94
 8008256:	5c9b      	ldrb	r3, [r3, r2]
 8008258:	2201      	movs	r2, #1
 800825a:	4053      	eors	r3, r2
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00f      	beq.n	8008282 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2198      	movs	r1, #152	@ 0x98
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	219c      	movs	r1, #156	@ 0x9c
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	21a0      	movs	r1, #160	@ 0xa0
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2294      	movs	r2, #148	@ 0x94
 800827e:	2101      	movs	r1, #1
 8008280:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	228c      	movs	r2, #140	@ 0x8c
 8008286:	589b      	ldr	r3, [r3, r2]
 8008288:	1c19      	adds	r1, r3, #0
 800828a:	20fe      	movs	r0, #254	@ 0xfe
 800828c:	0580      	lsls	r0, r0, #22
 800828e:	f7f8 ff43 	bl	8001118 <__aeabi_fsub>
 8008292:	1c03      	adds	r3, r0, #0
 8008294:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2298      	movs	r2, #152	@ 0x98
 800829a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800829c:	1c19      	adds	r1, r3, #0
 800829e:	f7f8 fdfd 	bl	8000e9c <__aeabi_fmul>
 80082a2:	1c03      	adds	r3, r0, #0
 80082a4:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	228c      	movs	r2, #140	@ 0x8c
 80082aa:	589b      	ldr	r3, [r3, r2]
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	1c18      	adds	r0, r3, #0
 80082b0:	f7f8 fdf4 	bl	8000e9c <__aeabi_fmul>
 80082b4:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 80082b6:	1c19      	adds	r1, r3, #0
 80082b8:	1c20      	adds	r0, r4, #0
 80082ba:	f7f8 fa7f 	bl	80007bc <__aeabi_fadd>
 80082be:	1c03      	adds	r3, r0, #0
 80082c0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2298      	movs	r2, #152	@ 0x98
 80082c6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2290      	movs	r2, #144	@ 0x90
 80082cc:	589b      	ldr	r3, [r3, r2]
 80082ce:	1c19      	adds	r1, r3, #0
 80082d0:	20fe      	movs	r0, #254	@ 0xfe
 80082d2:	0580      	lsls	r0, r0, #22
 80082d4:	f7f8 ff20 	bl	8001118 <__aeabi_fsub>
 80082d8:	1c03      	adds	r3, r0, #0
 80082da:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	229c      	movs	r2, #156	@ 0x9c
 80082e0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80082e2:	1c19      	adds	r1, r3, #0
 80082e4:	f7f8 fdda 	bl	8000e9c <__aeabi_fmul>
 80082e8:	1c03      	adds	r3, r0, #0
 80082ea:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2290      	movs	r2, #144	@ 0x90
 80082f0:	589b      	ldr	r3, [r3, r2]
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	1c18      	adds	r0, r3, #0
 80082f6:	f7f8 fdd1 	bl	8000e9c <__aeabi_fmul>
 80082fa:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80082fc:	1c19      	adds	r1, r3, #0
 80082fe:	1c20      	adds	r0, r4, #0
 8008300:	f7f8 fa5c 	bl	80007bc <__aeabi_fadd>
 8008304:	1c03      	adds	r3, r0, #0
 8008306:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	229c      	movs	r2, #156	@ 0x9c
 800830c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2298      	movs	r2, #152	@ 0x98
 8008312:	589a      	ldr	r2, [r3, r2]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	219c      	movs	r1, #156	@ 0x9c
 8008318:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800831a:	1c19      	adds	r1, r3, #0
 800831c:	1c10      	adds	r0, r2, #0
 800831e:	f7f8 fefb 	bl	8001118 <__aeabi_fsub>
 8008322:	1c03      	adds	r3, r0, #0
 8008324:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8008326:	2100      	movs	r1, #0
 8008328:	6978      	ldr	r0, [r7, #20]
 800832a:	f7f8 f8cf 	bl	80004cc <__aeabi_fcmplt>
 800832e:	1e03      	subs	r3, r0, #0
 8008330:	d004      	beq.n	800833c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2280      	movs	r2, #128	@ 0x80
 8008336:	0612      	lsls	r2, r2, #24
 8008338:	4053      	eors	r3, r2
 800833a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800833c:	4923      	ldr	r1, [pc, #140]	@ (80083cc <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800833e:	6978      	ldr	r0, [r7, #20]
 8008340:	f7f8 fdac 	bl	8000e9c <__aeabi_fmul>
 8008344:	1c03      	adds	r3, r0, #0
 8008346:	1c18      	adds	r0, r3, #0
 8008348:	f012 fb5a 	bl	801aa00 <expf>
 800834c:	1c03      	adds	r3, r0, #0
 800834e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008350:	491f      	ldr	r1, [pc, #124]	@ (80083d0 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008352:	6938      	ldr	r0, [r7, #16]
 8008354:	f7f8 fda2 	bl	8000e9c <__aeabi_fmul>
 8008358:	1c03      	adds	r3, r0, #0
 800835a:	491e      	ldr	r1, [pc, #120]	@ (80083d4 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800835c:	1c18      	adds	r0, r3, #0
 800835e:	f7f8 fa2d 	bl	80007bc <__aeabi_fadd>
 8008362:	1c03      	adds	r3, r0, #0
 8008364:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685c      	ldr	r4, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	68f9      	ldr	r1, [r7, #12]
 8008370:	1c18      	adds	r0, r3, #0
 8008372:	f7f8 fa23 	bl	80007bc <__aeabi_fadd>
 8008376:	1c03      	adds	r3, r0, #0
 8008378:	1c19      	adds	r1, r3, #0
 800837a:	1c20      	adds	r0, r4, #0
 800837c:	f7f8 fba8 	bl	8000ad0 <__aeabi_fdiv>
 8008380:	1c03      	adds	r3, r0, #0
 8008382:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	20fe      	movs	r0, #254	@ 0xfe
 8008388:	0580      	lsls	r0, r0, #22
 800838a:	f7f8 fec5 	bl	8001118 <__aeabi_fsub>
 800838e:	1c03      	adds	r3, r0, #0
 8008390:	1c18      	adds	r0, r3, #0
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	22a0      	movs	r2, #160	@ 0xa0
 8008396:	589b      	ldr	r3, [r3, r2]
 8008398:	1c19      	adds	r1, r3, #0
 800839a:	f7f8 fd7f 	bl	8000e9c <__aeabi_fmul>
 800839e:	1c03      	adds	r3, r0, #0
 80083a0:	1c1c      	adds	r4, r3, #0
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	68b8      	ldr	r0, [r7, #8]
 80083a6:	f7f8 fd79 	bl	8000e9c <__aeabi_fmul>
 80083aa:	1c03      	adds	r3, r0, #0
 80083ac:	1c19      	adds	r1, r3, #0
 80083ae:	1c20      	adds	r0, r4, #0
 80083b0:	f7f8 fa04 	bl	80007bc <__aeabi_fadd>
 80083b4:	1c03      	adds	r3, r0, #0
 80083b6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	22a0      	movs	r2, #160	@ 0xa0
 80083bc:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	22a0      	movs	r2, #160	@ 0xa0
 80083c2:	589b      	ldr	r3, [r3, r2]
}
 80083c4:	1c18      	adds	r0, r3, #0
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b007      	add	sp, #28
 80083ca:	bd90      	pop	{r4, r7, pc}
 80083cc:	be4ccccd 	.word	0xbe4ccccd
 80083d0:	43f00000 	.word	0x43f00000
 80083d4:	41a00000 	.word	0x41a00000

080083d8 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80083d8:	b590      	push	{r4, r7, lr}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6039      	str	r1, [r7, #0]
 80083e0:	0011      	movs	r1, r2
 80083e2:	1dfb      	adds	r3, r7, #7
 80083e4:	1c02      	adds	r2, r0, #0
 80083e6:	701a      	strb	r2, [r3, #0]
 80083e8:	1dbb      	adds	r3, r7, #6
 80083ea:	1c0a      	adds	r2, r1, #0
 80083ec:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <ReadRegister+0x38>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d008      	beq.n	8008408 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80083f6:	4b06      	ldr	r3, [pc, #24]	@ (8008410 <ReadRegister+0x38>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	1dba      	adds	r2, r7, #6
 80083fc:	7814      	ldrb	r4, [r2, #0]
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	1dfa      	adds	r2, r7, #7
 8008402:	7810      	ldrb	r0, [r2, #0]
 8008404:	0022      	movs	r2, r4
 8008406:	4798      	blx	r3
  }
}
 8008408:	46c0      	nop			@ (mov r8, r8)
 800840a:	46bd      	mov	sp, r7
 800840c:	b003      	add	sp, #12
 800840e:	bd90      	pop	{r4, r7, pc}
 8008410:	20002734 	.word	0x20002734

08008414 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008414:	b590      	push	{r4, r7, lr}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6039      	str	r1, [r7, #0]
 800841c:	0011      	movs	r1, r2
 800841e:	1dfb      	adds	r3, r7, #7
 8008420:	1c02      	adds	r2, r0, #0
 8008422:	701a      	strb	r2, [r3, #0]
 8008424:	1dbb      	adds	r3, r7, #6
 8008426:	1c0a      	adds	r2, r1, #0
 8008428:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800842a:	4b08      	ldr	r3, [pc, #32]	@ (800844c <WriteRegister+0x38>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d008      	beq.n	8008444 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008432:	4b06      	ldr	r3, [pc, #24]	@ (800844c <WriteRegister+0x38>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	1dba      	adds	r2, r7, #6
 8008438:	7814      	ldrb	r4, [r2, #0]
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	1dfa      	adds	r2, r7, #7
 800843e:	7810      	ldrb	r0, [r2, #0]
 8008440:	0022      	movs	r2, r4
 8008442:	4798      	blx	r3
  }
}
 8008444:	46c0      	nop			@ (mov r8, r8)
 8008446:	46bd      	mov	sp, r7
 8008448:	b003      	add	sp, #12
 800844a:	bd90      	pop	{r4, r7, pc}
 800844c:	20002738 	.word	0x20002738

08008450 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800845a:	4b07      	ldr	r3, [pc, #28]	@ (8008478 <SGP_Init+0x28>)
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008460:	4b06      	ldr	r3, [pc, #24]	@ (800847c <SGP_Init+0x2c>)
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8008466:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <SGP_Init+0x30>)
 8008468:	2100      	movs	r1, #0
 800846a:	0018      	movs	r0, r3
 800846c:	f7ff f930 	bl	80076d0 <GasIndexAlgorithm_init>
}
 8008470:	46c0      	nop			@ (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b002      	add	sp, #8
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20002734 	.word	0x20002734
 800847c:	20002738 	.word	0x20002738
 8008480:	20002748 	.word	0x20002748

08008484 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008488:	4b13      	ldr	r3, [pc, #76]	@ (80084d8 <SGP_StartMeasurement+0x54>)
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00d      	beq.n	80084ac <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008490:	4b12      	ldr	r3, [pc, #72]	@ (80084dc <SGP_StartMeasurement+0x58>)
 8008492:	2208      	movs	r2, #8
 8008494:	0019      	movs	r1, r3
 8008496:	2059      	movs	r0, #89	@ 0x59
 8008498:	f7ff ffbc 	bl	8008414 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800849c:	f001 fc5a 	bl	8009d54 <GetCurrentHalTicks>
 80084a0:	0003      	movs	r3, r0
 80084a2:	331e      	adds	r3, #30
 80084a4:	001a      	movs	r2, r3
 80084a6:	4b0e      	ldr	r3, [pc, #56]	@ (80084e0 <SGP_StartMeasurement+0x5c>)
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	e00c      	b.n	80084c6 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80084ac:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <SGP_StartMeasurement+0x60>)
 80084ae:	2208      	movs	r2, #8
 80084b0:	0019      	movs	r1, r3
 80084b2:	2059      	movs	r0, #89	@ 0x59
 80084b4:	f7ff ffae 	bl	8008414 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80084b8:	f001 fc4c 	bl	8009d54 <GetCurrentHalTicks>
 80084bc:	0003      	movs	r3, r0
 80084be:	33aa      	adds	r3, #170	@ 0xaa
 80084c0:	001a      	movs	r2, r3
 80084c2:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <SGP_StartMeasurement+0x64>)
 80084c4:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80084c6:	4b09      	ldr	r3, [pc, #36]	@ (80084ec <SGP_StartMeasurement+0x68>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80084cc:	4b08      	ldr	r3, [pc, #32]	@ (80084f0 <SGP_StartMeasurement+0x6c>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	701a      	strb	r2, [r3, #0]
}
 80084d2:	46c0      	nop			@ (mov r8, r8)
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	200027f0 	.word	0x200027f0
 80084dc:	20000040 	.word	0x20000040
 80084e0:	20000054 	.word	0x20000054
 80084e4:	20000038 	.word	0x20000038
 80084e8:	2000004c 	.word	0x2000004c
 80084ec:	20002746 	.word	0x20002746
 80084f0:	20002747 	.word	0x20002747

080084f4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	4b04      	ldr	r3, [pc, #16]	@ (800850c <SGP_HeatedUp+0x18>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	0018      	movs	r0, r3
 80084fe:	f001 fb61 	bl	8009bc4 <TimestampIsReached>
 8008502:	0003      	movs	r3, r0
 8008504:	0018      	movs	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	46c0      	nop			@ (mov r8, r8)
 800850c:	2000004c 	.word	0x2000004c

08008510 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008514:	4b04      	ldr	r3, [pc, #16]	@ (8008528 <SGP_MeasurementReady+0x18>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	0018      	movs	r0, r3
 800851a:	f001 fb53 	bl	8009bc4 <TimestampIsReached>
 800851e:	0003      	movs	r3, r0
}
 8008520:	0018      	movs	r0, r3
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	46c0      	nop			@ (mov r8, r8)
 8008528:	20000054 	.word	0x20000054

0800852c <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008530:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <SGP_MeasurementDone+0x18>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	0018      	movs	r0, r3
 8008536:	f001 fb45 	bl	8009bc4 <TimestampIsReached>
 800853a:	0003      	movs	r3, r0
}
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	46c0      	nop			@ (mov r8, r8)
 8008544:	20000050 	.word	0x20000050

08008548 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800854c:	4b04      	ldr	r3, [pc, #16]	@ (8008560 <SGP_TurnHeaterOff+0x18>)
 800854e:	2202      	movs	r2, #2
 8008550:	0019      	movs	r1, r3
 8008552:	2059      	movs	r0, #89	@ 0x59
 8008554:	f7ff ff5e 	bl	8008414 <WriteRegister>
}
 8008558:	46c0      	nop			@ (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	46c0      	nop			@ (mov r8, r8)
 8008560:	20000030 	.word	0x20000030

08008564 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8008564:	b5b0      	push	{r4, r5, r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af02      	add	r7, sp, #8
 800856a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800856c:	f7ff ffc2 	bl	80084f4 <SGP_HeatedUp>
 8008570:	1e03      	subs	r3, r0, #0
 8008572:	d038      	beq.n	80085e6 <SGP_GetMeasurementValues+0x82>
 8008574:	4bd5      	ldr	r3, [pc, #852]	@ (80088cc <SGP_GetMeasurementValues+0x368>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2201      	movs	r2, #1
 800857a:	4053      	eors	r3, r2
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d031      	beq.n	80085e6 <SGP_GetMeasurementValues+0x82>
 8008582:	4bd3      	ldr	r3, [pc, #844]	@ (80088d0 <SGP_GetMeasurementValues+0x36c>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2201      	movs	r2, #1
 8008588:	4053      	eors	r3, r2
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d02a      	beq.n	80085e6 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008590:	4ad0      	ldr	r2, [pc, #832]	@ (80088d4 <SGP_GetMeasurementValues+0x370>)
 8008592:	4bd1      	ldr	r3, [pc, #836]	@ (80088d8 <SGP_GetMeasurementValues+0x374>)
 8008594:	0019      	movs	r1, r3
 8008596:	2003      	movs	r0, #3
 8008598:	f001 fb6a 	bl	8009c70 <CreateLine>
    HeatUpIsDone = true;
 800859c:	4bcb      	ldr	r3, [pc, #812]	@ (80088cc <SGP_GetMeasurementValues+0x368>)
 800859e:	2201      	movs	r2, #1
 80085a0:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80085a2:	4bce      	ldr	r3, [pc, #824]	@ (80088dc <SGP_GetMeasurementValues+0x378>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80085aa:	4bcd      	ldr	r3, [pc, #820]	@ (80088e0 <SGP_GetMeasurementValues+0x37c>)
 80085ac:	2208      	movs	r2, #8
 80085ae:	0019      	movs	r1, r3
 80085b0:	2059      	movs	r0, #89	@ 0x59
 80085b2:	f7ff ff2f 	bl	8008414 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80085b6:	f001 fbcd 	bl	8009d54 <GetCurrentHalTicks>
 80085ba:	0003      	movs	r3, r0
 80085bc:	331e      	adds	r3, #30
 80085be:	001a      	movs	r2, r3
 80085c0:	4bc8      	ldr	r3, [pc, #800]	@ (80088e4 <SGP_GetMeasurementValues+0x380>)
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e00c      	b.n	80085e0 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80085c6:	4bc8      	ldr	r3, [pc, #800]	@ (80088e8 <SGP_GetMeasurementValues+0x384>)
 80085c8:	2208      	movs	r2, #8
 80085ca:	0019      	movs	r1, r3
 80085cc:	2059      	movs	r0, #89	@ 0x59
 80085ce:	f7ff ff21 	bl	8008414 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80085d2:	f001 fbbf 	bl	8009d54 <GetCurrentHalTicks>
 80085d6:	0003      	movs	r3, r0
 80085d8:	331e      	adds	r3, #30
 80085da:	001a      	movs	r2, r3
 80085dc:	4bc1      	ldr	r3, [pc, #772]	@ (80088e4 <SGP_GetMeasurementValues+0x380>)
 80085de:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80085e0:	4bbb      	ldr	r3, [pc, #748]	@ (80088d0 <SGP_GetMeasurementValues+0x36c>)
 80085e2:	2201      	movs	r2, #1
 80085e4:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80085e6:	4bb9      	ldr	r3, [pc, #740]	@ (80088cc <SGP_GetMeasurementValues+0x368>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d100      	bne.n	80085f0 <SGP_GetMeasurementValues+0x8c>
 80085ee:	e1a9      	b.n	8008944 <SGP_GetMeasurementValues+0x3e0>
 80085f0:	f7ff ff8e 	bl	8008510 <SGP_MeasurementReady>
 80085f4:	1e03      	subs	r3, r0, #0
 80085f6:	d100      	bne.n	80085fa <SGP_GetMeasurementValues+0x96>
 80085f8:	e1a4      	b.n	8008944 <SGP_GetMeasurementValues+0x3e0>
 80085fa:	4bbc      	ldr	r3, [pc, #752]	@ (80088ec <SGP_GetMeasurementValues+0x388>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2201      	movs	r2, #1
 8008600:	4053      	eors	r3, r2
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d100      	bne.n	800860a <SGP_GetMeasurementValues+0xa6>
 8008608:	e19c      	b.n	8008944 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800860a:	4bb9      	ldr	r3, [pc, #740]	@ (80088f0 <SGP_GetMeasurementValues+0x38c>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	4ab8      	ldr	r2, [pc, #736]	@ (80088f4 <SGP_GetMeasurementValues+0x390>)
 8008612:	49b1      	ldr	r1, [pc, #708]	@ (80088d8 <SGP_GetMeasurementValues+0x374>)
 8008614:	2003      	movs	r0, #3
 8008616:	f001 fb2b 	bl	8009c70 <CreateLine>
    MeasurementIsReady = true;
 800861a:	4bb4      	ldr	r3, [pc, #720]	@ (80088ec <SGP_GetMeasurementValues+0x388>)
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8008620:	4bb5      	ldr	r3, [pc, #724]	@ (80088f8 <SGP_GetMeasurementValues+0x394>)
 8008622:	2203      	movs	r2, #3
 8008624:	0019      	movs	r1, r3
 8008626:	2059      	movs	r0, #89	@ 0x59
 8008628:	f7ff fed6 	bl	80083d8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800862c:	4bb2      	ldr	r3, [pc, #712]	@ (80088f8 <SGP_GetMeasurementValues+0x394>)
 800862e:	2203      	movs	r2, #3
 8008630:	2103      	movs	r1, #3
 8008632:	0018      	movs	r0, r3
 8008634:	f000 f9ec 	bl	8008a10 <CheckCRC>
 8008638:	0003      	movs	r3, r0
 800863a:	001a      	movs	r2, r3
 800863c:	2301      	movs	r3, #1
 800863e:	4053      	eors	r3, r2
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d02a      	beq.n	800869c <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8008646:	4aad      	ldr	r2, [pc, #692]	@ (80088fc <SGP_GetMeasurementValues+0x398>)
 8008648:	4bad      	ldr	r3, [pc, #692]	@ (8008900 <SGP_GetMeasurementValues+0x39c>)
 800864a:	0019      	movs	r1, r3
 800864c:	2001      	movs	r0, #1
 800864e:	f001 fb0f 	bl	8009c70 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8008652:	4aac      	ldr	r2, [pc, #688]	@ (8008904 <SGP_GetMeasurementValues+0x3a0>)
 8008654:	4bac      	ldr	r3, [pc, #688]	@ (8008908 <SGP_GetMeasurementValues+0x3a4>)
 8008656:	0019      	movs	r1, r3
 8008658:	2002      	movs	r0, #2
 800865a:	f001 fb09 	bl	8009c70 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800865e:	230f      	movs	r3, #15
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	2200      	movs	r2, #0
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	e012      	b.n	800868e <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8008668:	240f      	movs	r4, #15
 800866a:	193b      	adds	r3, r7, r4
 800866c:	7818      	ldrb	r0, [r3, #0]
 800866e:	193b      	adds	r3, r7, r4
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4aa1      	ldr	r2, [pc, #644]	@ (80088f8 <SGP_GetMeasurementValues+0x394>)
 8008674:	5cd3      	ldrb	r3, [r2, r3]
 8008676:	4aa5      	ldr	r2, [pc, #660]	@ (800890c <SGP_GetMeasurementValues+0x3a8>)
 8008678:	4997      	ldr	r1, [pc, #604]	@ (80088d8 <SGP_GetMeasurementValues+0x374>)
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	0003      	movs	r3, r0
 800867e:	2003      	movs	r0, #3
 8008680:	f001 faf6 	bl	8009c70 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008684:	193b      	adds	r3, r7, r4
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	193b      	adds	r3, r7, r4
 800868a:	3201      	adds	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	230f      	movs	r3, #15
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d9e7      	bls.n	8008668 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8008698:	2300      	movs	r3, #0
 800869a:	e16b      	b.n	8008974 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800869c:	f001 fb5a 	bl	8009d54 <GetCurrentHalTicks>
 80086a0:	0003      	movs	r3, r0
 80086a2:	22fa      	movs	r2, #250	@ 0xfa
 80086a4:	0092      	lsls	r2, r2, #2
 80086a6:	189a      	adds	r2, r3, r2
 80086a8:	4b99      	ldr	r3, [pc, #612]	@ (8008910 <SGP_GetMeasurementValues+0x3ac>)
 80086aa:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80086ac:	f7ff ff4c 	bl	8008548 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80086b0:	4b8f      	ldr	r3, [pc, #572]	@ (80088f0 <SGP_GetMeasurementValues+0x38c>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	4b8d      	ldr	r3, [pc, #564]	@ (80088f0 <SGP_GetMeasurementValues+0x38c>)
 80086ba:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80086bc:	4b8c      	ldr	r3, [pc, #560]	@ (80088f0 <SGP_GetMeasurementValues+0x38c>)
 80086be:	781a      	ldrb	r2, [r3, #0]
 80086c0:	4b94      	ldr	r3, [pc, #592]	@ (8008914 <SGP_GetMeasurementValues+0x3b0>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d200      	bcs.n	80086ca <SGP_GetMeasurementValues+0x166>
 80086c8:	e13c      	b.n	8008944 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80086ca:	4b8b      	ldr	r3, [pc, #556]	@ (80088f8 <SGP_GetMeasurementValues+0x394>)
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b21a      	sxth	r2, r3
 80086d2:	4b89      	ldr	r3, [pc, #548]	@ (80088f8 <SGP_GetMeasurementValues+0x394>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b21b      	sxth	r3, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	b21a      	sxth	r2, r3
 80086dc:	240c      	movs	r4, #12
 80086de:	193b      	adds	r3, r7, r4
 80086e0:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80086e2:	193b      	adds	r3, r7, r4
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	4a8c      	ldr	r2, [pc, #560]	@ (8008918 <SGP_GetMeasurementValues+0x3b4>)
 80086e8:	497b      	ldr	r1, [pc, #492]	@ (80088d8 <SGP_GetMeasurementValues+0x374>)
 80086ea:	2003      	movs	r0, #3
 80086ec:	f001 fac0 	bl	8009c70 <CreateLine>
      int32_t tempVocIndex = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80086f4:	193b      	adds	r3, r7, r4
 80086f6:	8819      	ldrh	r1, [r3, #0]
 80086f8:	2308      	movs	r3, #8
 80086fa:	18fa      	adds	r2, r7, r3
 80086fc:	4b87      	ldr	r3, [pc, #540]	@ (800891c <SGP_GetMeasurementValues+0x3b8>)
 80086fe:	0018      	movs	r0, r3
 8008700:	f7ff f848 	bl	8007794 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4a86      	ldr	r2, [pc, #536]	@ (8008920 <SGP_GetMeasurementValues+0x3bc>)
 8008708:	4973      	ldr	r1, [pc, #460]	@ (80088d8 <SGP_GetMeasurementValues+0x374>)
 800870a:	2003      	movs	r0, #3
 800870c:	f001 fab0 	bl	8009c70 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd5a      	ble.n	80087d4 <SGP_GetMeasurementValues+0x270>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b64      	cmp	r3, #100	@ 0x64
 8008724:	dc56      	bgt.n	80087d4 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	0018      	movs	r0, r3
 800872c:	f7fa fdc6 	bl	80032bc <__aeabi_i2d>
 8008730:	2200      	movs	r2, #0
 8008732:	4b7c      	ldr	r3, [pc, #496]	@ (8008924 <SGP_GetMeasurementValues+0x3c0>)
 8008734:	f7f9 fabc 	bl	8001cb0 <__aeabi_ddiv>
 8008738:	0002      	movs	r2, r0
 800873a:	000b      	movs	r3, r1
 800873c:	2000      	movs	r0, #0
 800873e:	497a      	ldr	r1, [pc, #488]	@ (8008928 <SGP_GetMeasurementValues+0x3c4>)
 8008740:	f7fa f9c2 	bl	8002ac8 <__aeabi_dsub>
 8008744:	0002      	movs	r2, r0
 8008746:	000b      	movs	r3, r1
 8008748:	0014      	movs	r4, r2
 800874a:	001d      	movs	r5, r3
 800874c:	4b77      	ldr	r3, [pc, #476]	@ (800892c <SGP_GetMeasurementValues+0x3c8>)
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	0018      	movs	r0, r3
 8008752:	f7fa fdb3 	bl	80032bc <__aeabi_i2d>
 8008756:	0002      	movs	r2, r0
 8008758:	000b      	movs	r3, r1
 800875a:	0020      	movs	r0, r4
 800875c:	0029      	movs	r1, r5
 800875e:	f7f9 feeb 	bl	8002538 <__aeabi_dmul>
 8008762:	0002      	movs	r2, r0
 8008764:	000b      	movs	r3, r1
 8008766:	0010      	movs	r0, r2
 8008768:	0019      	movs	r1, r3
 800876a:	f7f7 ff3d 	bl	80005e8 <__aeabi_d2uiz>
 800876e:	0003      	movs	r3, r0
 8008770:	b29a      	uxth	r2, r3
 8008772:	4b6f      	ldr	r3, [pc, #444]	@ (8008930 <SGP_GetMeasurementValues+0x3cc>)
 8008774:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	0018      	movs	r0, r3
 800877c:	f7fa fd9e 	bl	80032bc <__aeabi_i2d>
 8008780:	2200      	movs	r2, #0
 8008782:	4b68      	ldr	r3, [pc, #416]	@ (8008924 <SGP_GetMeasurementValues+0x3c0>)
 8008784:	f7f9 fa94 	bl	8001cb0 <__aeabi_ddiv>
 8008788:	0002      	movs	r2, r0
 800878a:	000b      	movs	r3, r1
 800878c:	0014      	movs	r4, r2
 800878e:	001d      	movs	r5, r3
 8008790:	4b66      	ldr	r3, [pc, #408]	@ (800892c <SGP_GetMeasurementValues+0x3c8>)
 8008792:	881b      	ldrh	r3, [r3, #0]
 8008794:	0018      	movs	r0, r3
 8008796:	f7fa fd91 	bl	80032bc <__aeabi_i2d>
 800879a:	0002      	movs	r2, r0
 800879c:	000b      	movs	r3, r1
 800879e:	0020      	movs	r0, r4
 80087a0:	0029      	movs	r1, r5
 80087a2:	f7f9 fec9 	bl	8002538 <__aeabi_dmul>
 80087a6:	0002      	movs	r2, r0
 80087a8:	000b      	movs	r3, r1
 80087aa:	0010      	movs	r0, r2
 80087ac:	0019      	movs	r1, r3
 80087ae:	f7f7 ff1b 	bl	80005e8 <__aeabi_d2uiz>
 80087b2:	0003      	movs	r3, r0
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	4b5f      	ldr	r3, [pc, #380]	@ (8008934 <SGP_GetMeasurementValues+0x3d0>)
 80087b8:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80087ba:	4b5c      	ldr	r3, [pc, #368]	@ (800892c <SGP_GetMeasurementValues+0x3c8>)
 80087bc:	881a      	ldrh	r2, [r3, #0]
 80087be:	4b5e      	ldr	r3, [pc, #376]	@ (8008938 <SGP_GetMeasurementValues+0x3d4>)
 80087c0:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 80087c2:	4b5d      	ldr	r3, [pc, #372]	@ (8008938 <SGP_GetMeasurementValues+0x3d4>)
 80087c4:	8818      	ldrh	r0, [r3, #0]
 80087c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008930 <SGP_GetMeasurementValues+0x3cc>)
 80087c8:	8819      	ldrh	r1, [r3, #0]
 80087ca:	4b5a      	ldr	r3, [pc, #360]	@ (8008934 <SGP_GetMeasurementValues+0x3d0>)
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	001a      	movs	r2, r3
 80087d0:	f000 fb96 	bl	8008f00 <SetVocLED>
      }
      if(*vocIndex > 100){
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b64      	cmp	r3, #100	@ 0x64
 80087da:	dd66      	ble.n	80088aa <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	0018      	movs	r0, r3
 80087e2:	f7fa fd6b 	bl	80032bc <__aeabi_i2d>
 80087e6:	2200      	movs	r2, #0
 80087e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008924 <SGP_GetMeasurementValues+0x3c0>)
 80087ea:	f7fa f96d 	bl	8002ac8 <__aeabi_dsub>
 80087ee:	0002      	movs	r2, r0
 80087f0:	000b      	movs	r3, r1
 80087f2:	0010      	movs	r0, r2
 80087f4:	0019      	movs	r1, r3
 80087f6:	2200      	movs	r2, #0
 80087f8:	4b50      	ldr	r3, [pc, #320]	@ (800893c <SGP_GetMeasurementValues+0x3d8>)
 80087fa:	f7f9 fa59 	bl	8001cb0 <__aeabi_ddiv>
 80087fe:	0002      	movs	r2, r0
 8008800:	000b      	movs	r3, r1
 8008802:	0014      	movs	r4, r2
 8008804:	001d      	movs	r5, r3
 8008806:	4b49      	ldr	r3, [pc, #292]	@ (800892c <SGP_GetMeasurementValues+0x3c8>)
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	0018      	movs	r0, r3
 800880c:	f7fa fd56 	bl	80032bc <__aeabi_i2d>
 8008810:	0002      	movs	r2, r0
 8008812:	000b      	movs	r3, r1
 8008814:	0020      	movs	r0, r4
 8008816:	0029      	movs	r1, r5
 8008818:	f7f9 fe8e 	bl	8002538 <__aeabi_dmul>
 800881c:	0002      	movs	r2, r0
 800881e:	000b      	movs	r3, r1
 8008820:	0010      	movs	r0, r2
 8008822:	0019      	movs	r1, r3
 8008824:	f7f7 fee0 	bl	80005e8 <__aeabi_d2uiz>
 8008828:	0003      	movs	r3, r0
 800882a:	b29a      	uxth	r2, r3
 800882c:	4b40      	ldr	r3, [pc, #256]	@ (8008930 <SGP_GetMeasurementValues+0x3cc>)
 800882e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	0018      	movs	r0, r3
 8008836:	f7fa fd41 	bl	80032bc <__aeabi_i2d>
 800883a:	2200      	movs	r2, #0
 800883c:	4b39      	ldr	r3, [pc, #228]	@ (8008924 <SGP_GetMeasurementValues+0x3c0>)
 800883e:	f7fa f943 	bl	8002ac8 <__aeabi_dsub>
 8008842:	0002      	movs	r2, r0
 8008844:	000b      	movs	r3, r1
 8008846:	0010      	movs	r0, r2
 8008848:	0019      	movs	r1, r3
 800884a:	2200      	movs	r2, #0
 800884c:	4b3b      	ldr	r3, [pc, #236]	@ (800893c <SGP_GetMeasurementValues+0x3d8>)
 800884e:	f7f9 fa2f 	bl	8001cb0 <__aeabi_ddiv>
 8008852:	0002      	movs	r2, r0
 8008854:	000b      	movs	r3, r1
 8008856:	2000      	movs	r0, #0
 8008858:	4933      	ldr	r1, [pc, #204]	@ (8008928 <SGP_GetMeasurementValues+0x3c4>)
 800885a:	f7fa f935 	bl	8002ac8 <__aeabi_dsub>
 800885e:	0002      	movs	r2, r0
 8008860:	000b      	movs	r3, r1
 8008862:	0014      	movs	r4, r2
 8008864:	001d      	movs	r5, r3
 8008866:	4b31      	ldr	r3, [pc, #196]	@ (800892c <SGP_GetMeasurementValues+0x3c8>)
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	0018      	movs	r0, r3
 800886c:	f7fa fd26 	bl	80032bc <__aeabi_i2d>
 8008870:	0002      	movs	r2, r0
 8008872:	000b      	movs	r3, r1
 8008874:	0020      	movs	r0, r4
 8008876:	0029      	movs	r1, r5
 8008878:	f7f9 fe5e 	bl	8002538 <__aeabi_dmul>
 800887c:	0002      	movs	r2, r0
 800887e:	000b      	movs	r3, r1
 8008880:	0010      	movs	r0, r2
 8008882:	0019      	movs	r1, r3
 8008884:	f7f7 feb0 	bl	80005e8 <__aeabi_d2uiz>
 8008888:	0003      	movs	r3, r0
 800888a:	b29a      	uxth	r2, r3
 800888c:	4b2a      	ldr	r3, [pc, #168]	@ (8008938 <SGP_GetMeasurementValues+0x3d4>)
 800888e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8008890:	4b26      	ldr	r3, [pc, #152]	@ (800892c <SGP_GetMeasurementValues+0x3c8>)
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	4b27      	ldr	r3, [pc, #156]	@ (8008934 <SGP_GetMeasurementValues+0x3d0>)
 8008896:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 8008898:	4b27      	ldr	r3, [pc, #156]	@ (8008938 <SGP_GetMeasurementValues+0x3d4>)
 800889a:	8818      	ldrh	r0, [r3, #0]
 800889c:	4b24      	ldr	r3, [pc, #144]	@ (8008930 <SGP_GetMeasurementValues+0x3cc>)
 800889e:	8819      	ldrh	r1, [r3, #0]
 80088a0:	4b24      	ldr	r3, [pc, #144]	@ (8008934 <SGP_GetMeasurementValues+0x3d0>)
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	001a      	movs	r2, r3
 80088a6:	f000 fb2b 	bl	8008f00 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 80088aa:	4b11      	ldr	r3, [pc, #68]	@ (80088f0 <SGP_GetMeasurementValues+0x38c>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80088b0:	4a23      	ldr	r2, [pc, #140]	@ (8008940 <SGP_GetMeasurementValues+0x3dc>)
 80088b2:	4b09      	ldr	r3, [pc, #36]	@ (80088d8 <SGP_GetMeasurementValues+0x374>)
 80088b4:	0019      	movs	r1, r3
 80088b6:	2003      	movs	r0, #3
 80088b8:	f001 f9da 	bl	8009c70 <CreateLine>
      HT_MeasurementReceived = false;
 80088bc:	4b07      	ldr	r3, [pc, #28]	@ (80088dc <SGP_GetMeasurementValues+0x378>)
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80088c2:	4b03      	ldr	r3, [pc, #12]	@ (80088d0 <SGP_GetMeasurementValues+0x36c>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e053      	b.n	8008974 <SGP_GetMeasurementValues+0x410>
 80088cc:	20002746 	.word	0x20002746
 80088d0:	200027f1 	.word	0x200027f1
 80088d4:	0801bbe0 	.word	0x0801bbe0
 80088d8:	0801bc0c 	.word	0x0801bc0c
 80088dc:	200027f0 	.word	0x200027f0
 80088e0:	20000040 	.word	0x20000040
 80088e4:	20000054 	.word	0x20000054
 80088e8:	20000038 	.word	0x20000038
 80088ec:	20002747 	.word	0x20002747
 80088f0:	20002745 	.word	0x20002745
 80088f4:	0801bc10 	.word	0x0801bc10
 80088f8:	2000273c 	.word	0x2000273c
 80088fc:	0801bc40 	.word	0x0801bc40
 8008900:	0801bc64 	.word	0x0801bc64
 8008904:	0801bc68 	.word	0x0801bc68
 8008908:	0801bc88 	.word	0x0801bc88
 800890c:	0801bc8c 	.word	0x0801bc8c
 8008910:	20000050 	.word	0x20000050
 8008914:	20000048 	.word	0x20000048
 8008918:	0801bcac 	.word	0x0801bcac
 800891c:	20002748 	.word	0x20002748
 8008920:	0801bcc0 	.word	0x0801bcc0
 8008924:	40590000 	.word	0x40590000
 8008928:	3ff00000 	.word	0x3ff00000
 800892c:	20000058 	.word	0x20000058
 8008930:	200027f6 	.word	0x200027f6
 8008934:	200027f4 	.word	0x200027f4
 8008938:	200027f2 	.word	0x200027f2
 800893c:	40790000 	.word	0x40790000
 8008940:	0801bcd4 	.word	0x0801bcd4
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8008944:	f7ff fdf2 	bl	800852c <SGP_MeasurementDone>
 8008948:	1e03      	subs	r3, r0, #0
 800894a:	d012      	beq.n	8008972 <SGP_GetMeasurementValues+0x40e>
 800894c:	4b0b      	ldr	r3, [pc, #44]	@ (800897c <SGP_GetMeasurementValues+0x418>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00e      	beq.n	8008972 <SGP_GetMeasurementValues+0x40e>
 8008954:	4b0a      	ldr	r3, [pc, #40]	@ (8008980 <SGP_GetMeasurementValues+0x41c>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800895c:	4a09      	ldr	r2, [pc, #36]	@ (8008984 <SGP_GetMeasurementValues+0x420>)
 800895e:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <SGP_GetMeasurementValues+0x424>)
 8008960:	0019      	movs	r1, r3
 8008962:	2003      	movs	r0, #3
 8008964:	f001 f984 	bl	8009c70 <CreateLine>
    SGP_StartMeasurement();
 8008968:	f7ff fd8c 	bl	8008484 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800896c:	4b07      	ldr	r3, [pc, #28]	@ (800898c <SGP_GetMeasurementValues+0x428>)
 800896e:	2200      	movs	r2, #0
 8008970:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8008972:	2300      	movs	r3, #0
}
 8008974:	0018      	movs	r0, r3
 8008976:	46bd      	mov	sp, r7
 8008978:	b004      	add	sp, #16
 800897a:	bdb0      	pop	{r4, r5, r7, pc}
 800897c:	20002746 	.word	0x20002746
 8008980:	20002747 	.word	0x20002747
 8008984:	0801bcf8 	.word	0x0801bcf8
 8008988:	0801bc0c 	.word	0x0801bc0c
 800898c:	200027f1 	.word	0x200027f1

08008990 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008996:	4b1a      	ldr	r3, [pc, #104]	@ (8008a00 <SGP_DeviceConnected+0x70>)
 8008998:	2202      	movs	r2, #2
 800899a:	0019      	movs	r1, r3
 800899c:	2059      	movs	r0, #89	@ 0x59
 800899e:	f7ff fd39 	bl	8008414 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80089a2:	2001      	movs	r0, #1
 80089a4:	f001 fcf4 	bl	800a390 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80089a8:	4b16      	ldr	r3, [pc, #88]	@ (8008a04 <SGP_DeviceConnected+0x74>)
 80089aa:	2209      	movs	r2, #9
 80089ac:	0019      	movs	r1, r3
 80089ae:	2059      	movs	r0, #89	@ 0x59
 80089b0:	f7ff fd12 	bl	80083d8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80089b4:	1dfb      	adds	r3, r7, #7
 80089b6:	2200      	movs	r2, #0
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	e011      	b.n	80089e0 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80089bc:	1dfb      	adds	r3, r7, #7
 80089be:	7818      	ldrb	r0, [r3, #0]
 80089c0:	1dfb      	adds	r3, r7, #7
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008a04 <SGP_DeviceConnected+0x74>)
 80089c6:	5cd3      	ldrb	r3, [r2, r3]
 80089c8:	4a0f      	ldr	r2, [pc, #60]	@ (8008a08 <SGP_DeviceConnected+0x78>)
 80089ca:	4910      	ldr	r1, [pc, #64]	@ (8008a0c <SGP_DeviceConnected+0x7c>)
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	0003      	movs	r3, r0
 80089d0:	2002      	movs	r0, #2
 80089d2:	f001 f94d 	bl	8009c70 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80089d6:	1dfb      	adds	r3, r7, #7
 80089d8:	781a      	ldrb	r2, [r3, #0]
 80089da:	1dfb      	adds	r3, r7, #7
 80089dc:	3201      	adds	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
 80089e0:	1dfb      	adds	r3, r7, #7
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d9e9      	bls.n	80089bc <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80089e8:	4b06      	ldr	r3, [pc, #24]	@ (8008a04 <SGP_DeviceConnected+0x74>)
 80089ea:	2203      	movs	r2, #3
 80089ec:	2109      	movs	r1, #9
 80089ee:	0018      	movs	r0, r3
 80089f0:	f000 f80e 	bl	8008a10 <CheckCRC>
 80089f4:	0003      	movs	r3, r0
}
 80089f6:	0018      	movs	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	b002      	add	sp, #8
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	46c0      	nop			@ (mov r8, r8)
 8008a00:	20000034 	.word	0x20000034
 8008a04:	2000273c 	.word	0x2000273c
 8008a08:	0801bd18 	.word	0x0801bd18
 8008a0c:	0801bc88 	.word	0x0801bc88

08008a10 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8008a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a12:	b08f      	sub	sp, #60	@ 0x3c
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a18:	0008      	movs	r0, r1
 8008a1a:	0011      	movs	r1, r2
 8008a1c:	2323      	movs	r3, #35	@ 0x23
 8008a1e:	18fb      	adds	r3, r7, r3
 8008a20:	1c02      	adds	r2, r0, #0
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	2322      	movs	r3, #34	@ 0x22
 8008a26:	18fb      	adds	r3, r7, r3
 8008a28:	1c0a      	adds	r2, r1, #0
 8008a2a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008a2c:	2317      	movs	r3, #23
 8008a2e:	2220      	movs	r2, #32
 8008a30:	189b      	adds	r3, r3, r2
 8008a32:	19db      	adds	r3, r3, r7
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
 8008a38:	e09f      	b.n	8008b7a <CheckCRC+0x16a>
 8008a3a:	466b      	mov	r3, sp
 8008a3c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8008a3e:	2322      	movs	r3, #34	@ 0x22
 8008a40:	18fb      	adds	r3, r7, r3
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	001a      	movs	r2, r3
 8008a46:	3a01      	subs	r2, #1
 8008a48:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a4a:	60bb      	str	r3, [r7, #8]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	60fa      	str	r2, [r7, #12]
 8008a50:	68b8      	ldr	r0, [r7, #8]
 8008a52:	68f9      	ldr	r1, [r7, #12]
 8008a54:	0002      	movs	r2, r0
 8008a56:	0f52      	lsrs	r2, r2, #29
 8008a58:	000c      	movs	r4, r1
 8008a5a:	00e4      	lsls	r4, r4, #3
 8008a5c:	61fc      	str	r4, [r7, #28]
 8008a5e:	69fc      	ldr	r4, [r7, #28]
 8008a60:	4314      	orrs	r4, r2
 8008a62:	61fc      	str	r4, [r7, #28]
 8008a64:	0002      	movs	r2, r0
 8008a66:	00d2      	lsls	r2, r2, #3
 8008a68:	61ba      	str	r2, [r7, #24]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	6838      	ldr	r0, [r7, #0]
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	0002      	movs	r2, r0
 8008a76:	0f52      	lsrs	r2, r2, #29
 8008a78:	000c      	movs	r4, r1
 8008a7a:	00e4      	lsls	r4, r4, #3
 8008a7c:	617c      	str	r4, [r7, #20]
 8008a7e:	697c      	ldr	r4, [r7, #20]
 8008a80:	4314      	orrs	r4, r2
 8008a82:	617c      	str	r4, [r7, #20]
 8008a84:	0002      	movs	r2, r0
 8008a86:	00d2      	lsls	r2, r2, #3
 8008a88:	613a      	str	r2, [r7, #16]
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	466a      	mov	r2, sp
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	469d      	mov	sp, r3
 8008a96:	466b      	mov	r3, sp
 8008a98:	3300      	adds	r3, #0
 8008a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8008a9c:	2316      	movs	r3, #22
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	189b      	adds	r3, r3, r2
 8008aa2:	19db      	adds	r3, r3, r7
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	e01e      	b.n	8008ae8 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8008aaa:	2317      	movs	r3, #23
 8008aac:	2220      	movs	r2, #32
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	19db      	adds	r3, r3, r7
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	2116      	movs	r1, #22
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	18cb      	adds	r3, r1, r3
 8008aba:	19db      	adds	r3, r3, r7
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	18d3      	adds	r3, r2, r3
 8008ac0:	001a      	movs	r2, r3
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac4:	189a      	adds	r2, r3, r2
 8008ac6:	0008      	movs	r0, r1
 8008ac8:	2320      	movs	r3, #32
 8008aca:	18cb      	adds	r3, r1, r3
 8008acc:	19db      	adds	r3, r3, r7
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	7811      	ldrb	r1, [r2, #0]
 8008ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ad4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8008ad6:	2320      	movs	r3, #32
 8008ad8:	18c3      	adds	r3, r0, r3
 8008ada:	19db      	adds	r3, r3, r7
 8008adc:	781a      	ldrb	r2, [r3, #0]
 8008ade:	2320      	movs	r3, #32
 8008ae0:	18c3      	adds	r3, r0, r3
 8008ae2:	19db      	adds	r3, r3, r7
 8008ae4:	3201      	adds	r2, #1
 8008ae6:	701a      	strb	r2, [r3, #0]
 8008ae8:	2316      	movs	r3, #22
 8008aea:	2220      	movs	r2, #32
 8008aec:	189b      	adds	r3, r3, r2
 8008aee:	19da      	adds	r2, r3, r7
 8008af0:	2322      	movs	r3, #34	@ 0x22
 8008af2:	18fb      	adds	r3, r7, r3
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d3d6      	bcc.n	8008aaa <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8008afc:	2417      	movs	r4, #23
 8008afe:	2320      	movs	r3, #32
 8008b00:	18e3      	adds	r3, r4, r3
 8008b02:	19db      	adds	r3, r3, r7
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	2322      	movs	r3, #34	@ 0x22
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	18d3      	adds	r3, r2, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b12:	18d2      	adds	r2, r2, r3
 8008b14:	250b      	movs	r5, #11
 8008b16:	2320      	movs	r3, #32
 8008b18:	18eb      	adds	r3, r5, r3
 8008b1a:	19db      	adds	r3, r3, r7
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008b20:	2322      	movs	r3, #34	@ 0x22
 8008b22:	18fb      	adds	r3, r7, r3
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2c:	0011      	movs	r1, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f000 f838 	bl	8008ba4 <CalculateCRC>
 8008b34:	0003      	movs	r3, r0
 8008b36:	001a      	movs	r2, r3
 8008b38:	2320      	movs	r3, #32
 8008b3a:	18eb      	adds	r3, r5, r3
 8008b3c:	19db      	adds	r3, r3, r7
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00c      	beq.n	8008b5e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008b44:	2320      	movs	r3, #32
 8008b46:	18e3      	adds	r3, r4, r3
 8008b48:	19db      	adds	r3, r3, r7
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <CheckCRC+0x18c>)
 8008b50:	4913      	ldr	r1, [pc, #76]	@ (8008ba0 <CheckCRC+0x190>)
 8008b52:	2001      	movs	r0, #1
 8008b54:	f001 f88c 	bl	8009c70 <CreateLine>
      return false;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	46b5      	mov	sp, r6
 8008b5c:	e019      	b.n	8008b92 <CheckCRC+0x182>
 8008b5e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008b60:	2217      	movs	r2, #23
 8008b62:	2320      	movs	r3, #32
 8008b64:	18d3      	adds	r3, r2, r3
 8008b66:	19db      	adds	r3, r3, r7
 8008b68:	2120      	movs	r1, #32
 8008b6a:	1852      	adds	r2, r2, r1
 8008b6c:	19d1      	adds	r1, r2, r7
 8008b6e:	2222      	movs	r2, #34	@ 0x22
 8008b70:	18ba      	adds	r2, r7, r2
 8008b72:	7809      	ldrb	r1, [r1, #0]
 8008b74:	7812      	ldrb	r2, [r2, #0]
 8008b76:	188a      	adds	r2, r1, r2
 8008b78:	701a      	strb	r2, [r3, #0]
 8008b7a:	2317      	movs	r3, #23
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	189b      	adds	r3, r3, r2
 8008b80:	19da      	adds	r2, r3, r7
 8008b82:	2323      	movs	r3, #35	@ 0x23
 8008b84:	18fb      	adds	r3, r7, r3
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d200      	bcs.n	8008b90 <CheckCRC+0x180>
 8008b8e:	e754      	b.n	8008a3a <CheckCRC+0x2a>
    }
  }
  return true;
 8008b90:	2301      	movs	r3, #1
}
 8008b92:	0018      	movs	r0, r3
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b00f      	add	sp, #60	@ 0x3c
 8008b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9a:	46c0      	nop			@ (mov r8, r8)
 8008b9c:	0801bd38 	.word	0x0801bd38
 8008ba0:	0801bc64 	.word	0x0801bc64

08008ba4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	000a      	movs	r2, r1
 8008bae:	1cfb      	adds	r3, r7, #3
 8008bb0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008bb2:	230f      	movs	r3, #15
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	22ff      	movs	r2, #255	@ 0xff
 8008bb8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008bba:	230e      	movs	r3, #14
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e037      	b.n	8008c34 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008bc4:	230e      	movs	r3, #14
 8008bc6:	18fb      	adds	r3, r7, r3
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	18d3      	adds	r3, r2, r3
 8008bce:	7819      	ldrb	r1, [r3, #0]
 8008bd0:	220f      	movs	r2, #15
 8008bd2:	18bb      	adds	r3, r7, r2
 8008bd4:	18ba      	adds	r2, r7, r2
 8008bd6:	7812      	ldrb	r2, [r2, #0]
 8008bd8:	404a      	eors	r2, r1
 8008bda:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008bdc:	230d      	movs	r3, #13
 8008bde:	18fb      	adds	r3, r7, r3
 8008be0:	2200      	movs	r2, #0
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	e01b      	b.n	8008c1e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008be6:	210f      	movs	r1, #15
 8008be8:	187b      	adds	r3, r7, r1
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	b25b      	sxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da09      	bge.n	8008c06 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008bf2:	187b      	adds	r3, r7, r1
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	b25b      	sxtb	r3, r3
 8008bfa:	2231      	movs	r2, #49	@ 0x31
 8008bfc:	4053      	eors	r3, r2
 8008bfe:	b25a      	sxtb	r2, r3
 8008c00:	187b      	adds	r3, r7, r1
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e005      	b.n	8008c12 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008c06:	230f      	movs	r3, #15
 8008c08:	18fa      	adds	r2, r7, r3
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	18db      	adds	r3, r3, r3
 8008c10:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008c12:	210d      	movs	r1, #13
 8008c14:	187b      	adds	r3, r7, r1
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	230d      	movs	r3, #13
 8008c20:	18fb      	adds	r3, r7, r3
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b07      	cmp	r3, #7
 8008c26:	d9de      	bls.n	8008be6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008c28:	210e      	movs	r1, #14
 8008c2a:	187b      	adds	r3, r7, r1
 8008c2c:	781a      	ldrb	r2, [r3, #0]
 8008c2e:	187b      	adds	r3, r7, r1
 8008c30:	3201      	adds	r2, #1
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	230e      	movs	r3, #14
 8008c36:	18fa      	adds	r2, r7, r3
 8008c38:	1cfb      	adds	r3, r7, #3
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d3c0      	bcc.n	8008bc4 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008c42:	230f      	movs	r3, #15
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	781b      	ldrb	r3, [r3, #0]
}
 8008c48:	0018      	movs	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	b004      	add	sp, #16
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4936      	ldr	r1, [pc, #216]	@ (8008d38 <SGP_GetHT+0xe8>)
 8008c60:	1c18      	adds	r0, r3, #0
 8008c62:	f7f7 fdab 	bl	80007bc <__aeabi_fadd>
 8008c66:	1c03      	adds	r3, r0, #0
 8008c68:	4934      	ldr	r1, [pc, #208]	@ (8008d3c <SGP_GetHT+0xec>)
 8008c6a:	1c18      	adds	r0, r3, #0
 8008c6c:	f7f7 ff30 	bl	8000ad0 <__aeabi_fdiv>
 8008c70:	1c03      	adds	r3, r0, #0
 8008c72:	4933      	ldr	r1, [pc, #204]	@ (8008d40 <SGP_GetHT+0xf0>)
 8008c74:	1c18      	adds	r0, r3, #0
 8008c76:	f7f8 f911 	bl	8000e9c <__aeabi_fmul>
 8008c7a:	1c03      	adds	r3, r0, #0
 8008c7c:	1c18      	adds	r0, r3, #0
 8008c7e:	f7f7 fc9b 	bl	80005b8 <__aeabi_f2uiz>
 8008c82:	0003      	movs	r3, r0
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	4b2f      	ldr	r3, [pc, #188]	@ (8008d44 <SGP_GetHT+0xf4>)
 8008c88:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	492e      	ldr	r1, [pc, #184]	@ (8008d48 <SGP_GetHT+0xf8>)
 8008c90:	1c18      	adds	r0, r3, #0
 8008c92:	f7f7 ff1d 	bl	8000ad0 <__aeabi_fdiv>
 8008c96:	1c03      	adds	r3, r0, #0
 8008c98:	4929      	ldr	r1, [pc, #164]	@ (8008d40 <SGP_GetHT+0xf0>)
 8008c9a:	1c18      	adds	r0, r3, #0
 8008c9c:	f7f8 f8fe 	bl	8000e9c <__aeabi_fmul>
 8008ca0:	1c03      	adds	r3, r0, #0
 8008ca2:	1c18      	adds	r0, r3, #0
 8008ca4:	f7f7 fc88 	bl	80005b8 <__aeabi_f2uiz>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	4b27      	ldr	r3, [pc, #156]	@ (8008d4c <SGP_GetHT+0xfc>)
 8008cae:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008cb0:	4b26      	ldr	r3, [pc, #152]	@ (8008d4c <SGP_GetHT+0xfc>)
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	0a1b      	lsrs	r3, r3, #8
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	4b25      	ldr	r3, [pc, #148]	@ (8008d50 <SGP_GetHT+0x100>)
 8008cbc:	709a      	strb	r2, [r3, #2]
 8008cbe:	4b24      	ldr	r3, [pc, #144]	@ (8008d50 <SGP_GetHT+0x100>)
 8008cc0:	789a      	ldrb	r2, [r3, #2]
 8008cc2:	210c      	movs	r1, #12
 8008cc4:	187b      	adds	r3, r7, r1
 8008cc6:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008cc8:	4b20      	ldr	r3, [pc, #128]	@ (8008d4c <SGP_GetHT+0xfc>)
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	4b20      	ldr	r3, [pc, #128]	@ (8008d50 <SGP_GetHT+0x100>)
 8008cd0:	70da      	strb	r2, [r3, #3]
 8008cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d50 <SGP_GetHT+0x100>)
 8008cd4:	78da      	ldrb	r2, [r3, #3]
 8008cd6:	187b      	adds	r3, r7, r1
 8008cd8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008cda:	187b      	adds	r3, r7, r1
 8008cdc:	2102      	movs	r1, #2
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f7ff ff60 	bl	8008ba4 <CalculateCRC>
 8008ce4:	0003      	movs	r3, r0
 8008ce6:	001a      	movs	r2, r3
 8008ce8:	4b19      	ldr	r3, [pc, #100]	@ (8008d50 <SGP_GetHT+0x100>)
 8008cea:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008cec:	4b15      	ldr	r3, [pc, #84]	@ (8008d44 <SGP_GetHT+0xf4>)
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	4b16      	ldr	r3, [pc, #88]	@ (8008d50 <SGP_GetHT+0x100>)
 8008cf8:	715a      	strb	r2, [r3, #5]
 8008cfa:	4b15      	ldr	r3, [pc, #84]	@ (8008d50 <SGP_GetHT+0x100>)
 8008cfc:	795a      	ldrb	r2, [r3, #5]
 8008cfe:	2108      	movs	r1, #8
 8008d00:	187b      	adds	r3, r7, r1
 8008d02:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008d04:	4b0f      	ldr	r3, [pc, #60]	@ (8008d44 <SGP_GetHT+0xf4>)
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	4b11      	ldr	r3, [pc, #68]	@ (8008d50 <SGP_GetHT+0x100>)
 8008d0c:	719a      	strb	r2, [r3, #6]
 8008d0e:	4b10      	ldr	r3, [pc, #64]	@ (8008d50 <SGP_GetHT+0x100>)
 8008d10:	799a      	ldrb	r2, [r3, #6]
 8008d12:	187b      	adds	r3, r7, r1
 8008d14:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008d16:	187b      	adds	r3, r7, r1
 8008d18:	2102      	movs	r1, #2
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f7ff ff42 	bl	8008ba4 <CalculateCRC>
 8008d20:	0003      	movs	r3, r0
 8008d22:	001a      	movs	r2, r3
 8008d24:	4b0a      	ldr	r3, [pc, #40]	@ (8008d50 <SGP_GetHT+0x100>)
 8008d26:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008d28:	4b0a      	ldr	r3, [pc, #40]	@ (8008d54 <SGP_GetHT+0x104>)
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	701a      	strb	r2, [r3, #0]
}
 8008d2e:	46c0      	nop			@ (mov r8, r8)
 8008d30:	46bd      	mov	sp, r7
 8008d32:	b004      	add	sp, #16
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	46c0      	nop			@ (mov r8, r8)
 8008d38:	42340000 	.word	0x42340000
 8008d3c:	432f0000 	.word	0x432f0000
 8008d40:	477fff00 	.word	0x477fff00
 8008d44:	200027ee 	.word	0x200027ee
 8008d48:	42c80000 	.word	0x42c80000
 8008d4c:	200027ec 	.word	0x200027ec
 8008d50:	20000040 	.word	0x20000040
 8008d54:	200027f0 	.word	0x200027f0

08008d58 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  init = false;
 8008d5c:	4b02      	ldr	r3, [pc, #8]	@ (8008d68 <InitDone+0x10>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]
}
 8008d62:	46c0      	nop			@ (mov r8, r8)
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2000005a 	.word	0x2000005a

08008d6c <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8008d72:	f7fc fd03 	bl	800577c <ReadBatteryVoltage>
 8008d76:	1c03      	adds	r3, r0, #0
 8008d78:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8008d7a:	491f      	ldr	r1, [pc, #124]	@ (8008df8 <batteryChargeCheck+0x8c>)
 8008d7c:	6838      	ldr	r0, [r7, #0]
 8008d7e:	f7f7 fba5 	bl	80004cc <__aeabi_fcmplt>
 8008d82:	1e03      	subs	r3, r0, #0
 8008d84:	d002      	beq.n	8008d8c <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8008d86:	1dfb      	adds	r3, r7, #7
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8008d8c:	6838      	ldr	r0, [r7, #0]
 8008d8e:	f7fa fae7 	bl	8003360 <__aeabi_f2d>
 8008d92:	4a1a      	ldr	r2, [pc, #104]	@ (8008dfc <batteryChargeCheck+0x90>)
 8008d94:	4b1a      	ldr	r3, [pc, #104]	@ (8008e00 <batteryChargeCheck+0x94>)
 8008d96:	f7f7 fb5f 	bl	8000458 <__aeabi_dcmplt>
 8008d9a:	1e03      	subs	r3, r0, #0
 8008d9c:	d008      	beq.n	8008db0 <batteryChargeCheck+0x44>
 8008d9e:	4916      	ldr	r1, [pc, #88]	@ (8008df8 <batteryChargeCheck+0x8c>)
 8008da0:	6838      	ldr	r0, [r7, #0]
 8008da2:	f7f7 fbb1 	bl	8000508 <__aeabi_fcmpge>
 8008da6:	1e03      	subs	r3, r0, #0
 8008da8:	d002      	beq.n	8008db0 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8008daa:	1dfb      	adds	r3, r7, #7
 8008dac:	2202      	movs	r2, #2
 8008dae:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008db0:	2181      	movs	r1, #129	@ 0x81
 8008db2:	05c9      	lsls	r1, r1, #23
 8008db4:	6838      	ldr	r0, [r7, #0]
 8008db6:	f7f7 fb89 	bl	80004cc <__aeabi_fcmplt>
 8008dba:	1e03      	subs	r3, r0, #0
 8008dbc:	d00b      	beq.n	8008dd6 <batteryChargeCheck+0x6a>
 8008dbe:	6838      	ldr	r0, [r7, #0]
 8008dc0:	f7fa face 	bl	8003360 <__aeabi_f2d>
 8008dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8008dfc <batteryChargeCheck+0x90>)
 8008dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8008e00 <batteryChargeCheck+0x94>)
 8008dc8:	f7f7 fb64 	bl	8000494 <__aeabi_dcmpge>
 8008dcc:	1e03      	subs	r3, r0, #0
 8008dce:	d002      	beq.n	8008dd6 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008dd0:	1dfb      	adds	r3, r7, #7
 8008dd2:	2203      	movs	r2, #3
 8008dd4:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008dd6:	2181      	movs	r1, #129	@ 0x81
 8008dd8:	05c9      	lsls	r1, r1, #23
 8008dda:	6838      	ldr	r0, [r7, #0]
 8008ddc:	f7f7 fb94 	bl	8000508 <__aeabi_fcmpge>
 8008de0:	1e03      	subs	r3, r0, #0
 8008de2:	d002      	beq.n	8008dea <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008de4:	1dfb      	adds	r3, r7, #7
 8008de6:	2204      	movs	r2, #4
 8008de8:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008dea:	1dfb      	adds	r3, r7, #7
 8008dec:	781b      	ldrb	r3, [r3, #0]
}
 8008dee:	0018      	movs	r0, r3
 8008df0:	46bd      	mov	sp, r7
 8008df2:	b002      	add	sp, #8
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	46c0      	nop			@ (mov r8, r8)
 8008df8:	40600000 	.word	0x40600000
 8008dfc:	9999999a 	.word	0x9999999a
 8008e00:	400d9999 	.word	0x400d9999

08008e04 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	0004      	movs	r4, r0
 8008e0c:	0008      	movs	r0, r1
 8008e0e:	0011      	movs	r1, r2
 8008e10:	1dbb      	adds	r3, r7, #6
 8008e12:	1c22      	adds	r2, r4, #0
 8008e14:	801a      	strh	r2, [r3, #0]
 8008e16:	1d3b      	adds	r3, r7, #4
 8008e18:	1c02      	adds	r2, r0, #0
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	1cbb      	adds	r3, r7, #2
 8008e1e:	1c0a      	adds	r2, r1, #0
 8008e20:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008e22:	4b0f      	ldr	r3, [pc, #60]	@ (8008e60 <SetStatusLED+0x5c>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d107      	bne.n	8008e3a <SetStatusLED+0x36>
 8008e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e64 <SetStatusLED+0x60>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <SetStatusLED+0x36>
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <SetStatusLED+0x64>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8008e3a:	2380      	movs	r3, #128	@ 0x80
 8008e3c:	05db      	lsls	r3, r3, #23
 8008e3e:	1dba      	adds	r2, r7, #6
 8008e40:	8812      	ldrh	r2, [r2, #0]
 8008e42:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8008e44:	2380      	movs	r3, #128	@ 0x80
 8008e46:	05db      	lsls	r3, r3, #23
 8008e48:	1d3a      	adds	r2, r7, #4
 8008e4a:	8812      	ldrh	r2, [r2, #0]
 8008e4c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8008e4e:	2380      	movs	r3, #128	@ 0x80
 8008e50:	05db      	lsls	r3, r3, #23
 8008e52:	1cba      	adds	r2, r7, #2
 8008e54:	8812      	ldrh	r2, [r2, #0]
 8008e56:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008e58:	46c0      	nop			@ (mov r8, r8)
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b003      	add	sp, #12
 8008e5e:	bd90      	pop	{r4, r7, pc}
 8008e60:	200027f9 	.word	0x200027f9
 8008e64:	2000005a 	.word	0x2000005a
 8008e68:	200027fa 	.word	0x200027fa

08008e6c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8008e6c:	b590      	push	{r4, r7, lr}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	0004      	movs	r4, r0
 8008e74:	0008      	movs	r0, r1
 8008e76:	0011      	movs	r1, r2
 8008e78:	1dfb      	adds	r3, r7, #7
 8008e7a:	1c22      	adds	r2, r4, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	1dbb      	adds	r3, r7, #6
 8008e80:	1c02      	adds	r2, r0, #0
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	1d7b      	adds	r3, r7, #5
 8008e86:	1c0a      	adds	r2, r1, #0
 8008e88:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8008e8a:	4b19      	ldr	r3, [pc, #100]	@ (8008ef0 <SetDBLED+0x84>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d107      	bne.n	8008ea2 <SetDBLED+0x36>
 8008e92:	4b18      	ldr	r3, [pc, #96]	@ (8008ef4 <SetDBLED+0x88>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <SetDBLED+0x36>
 8008e9a:	4b17      	ldr	r3, [pc, #92]	@ (8008ef8 <SetDBLED+0x8c>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d022      	beq.n	8008ee8 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8008ea2:	1dfb      	adds	r3, r7, #7
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4053      	eors	r3, r2
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	001a      	movs	r2, r3
 8008eae:	4b13      	ldr	r3, [pc, #76]	@ (8008efc <SetDBLED+0x90>)
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f002 fe01 	bl	800baba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8008eb8:	1dbb      	adds	r3, r7, #6
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	4053      	eors	r3, r2
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	001a      	movs	r2, r3
 8008ec4:	2380      	movs	r3, #128	@ 0x80
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	480c      	ldr	r0, [pc, #48]	@ (8008efc <SetDBLED+0x90>)
 8008eca:	0019      	movs	r1, r3
 8008ecc:	f002 fdf5 	bl	800baba <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8008ed0:	1d7b      	adds	r3, r7, #5
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	4053      	eors	r3, r2
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	001a      	movs	r2, r3
 8008edc:	2380      	movs	r3, #128	@ 0x80
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4806      	ldr	r0, [pc, #24]	@ (8008efc <SetDBLED+0x90>)
 8008ee2:	0019      	movs	r1, r3
 8008ee4:	f002 fde9 	bl	800baba <HAL_GPIO_WritePin>
  }
}
 8008ee8:	46c0      	nop			@ (mov r8, r8)
 8008eea:	46bd      	mov	sp, r7
 8008eec:	b003      	add	sp, #12
 8008eee:	bd90      	pop	{r4, r7, pc}
 8008ef0:	200027f9 	.word	0x200027f9
 8008ef4:	2000005a 	.word	0x2000005a
 8008ef8:	200027fa 	.word	0x200027fa
 8008efc:	50000400 	.word	0x50000400

08008f00 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8008f00:	b590      	push	{r4, r7, lr}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	0004      	movs	r4, r0
 8008f08:	0008      	movs	r0, r1
 8008f0a:	0011      	movs	r1, r2
 8008f0c:	1dbb      	adds	r3, r7, #6
 8008f0e:	1c22      	adds	r2, r4, #0
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	1c02      	adds	r2, r0, #0
 8008f16:	801a      	strh	r2, [r3, #0]
 8008f18:	1cbb      	adds	r3, r7, #2
 8008f1a:	1c0a      	adds	r2, r1, #0
 8008f1c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <SetVocLED+0x58>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d107      	bne.n	8008f36 <SetVocLED+0x36>
 8008f26:	4b0d      	ldr	r3, [pc, #52]	@ (8008f5c <SetVocLED+0x5c>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <SetVocLED+0x36>
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f60 <SetVocLED+0x60>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00b      	beq.n	8008f4e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8008f36:	4b0b      	ldr	r3, [pc, #44]	@ (8008f64 <SetVocLED+0x64>)
 8008f38:	1dba      	adds	r2, r7, #6
 8008f3a:	8812      	ldrh	r2, [r2, #0]
 8008f3c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8008f3e:	4b09      	ldr	r3, [pc, #36]	@ (8008f64 <SetVocLED+0x64>)
 8008f40:	1d3a      	adds	r2, r7, #4
 8008f42:	8812      	ldrh	r2, [r2, #0]
 8008f44:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8008f46:	4b07      	ldr	r3, [pc, #28]	@ (8008f64 <SetVocLED+0x64>)
 8008f48:	1cba      	adds	r2, r7, #2
 8008f4a:	8812      	ldrh	r2, [r2, #0]
 8008f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008f4e:	46c0      	nop			@ (mov r8, r8)
 8008f50:	46bd      	mov	sp, r7
 8008f52:	b003      	add	sp, #12
 8008f54:	bd90      	pop	{r4, r7, pc}
 8008f56:	46c0      	nop			@ (mov r8, r8)
 8008f58:	200027f9 	.word	0x200027f9
 8008f5c:	2000005a 	.word	0x2000005a
 8008f60:	200027fa 	.word	0x200027fa
 8008f64:	40000400 	.word	0x40000400

08008f68 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f6c:	4b07      	ldr	r3, [pc, #28]	@ (8008f8c <SetMeasurementIndicator+0x24>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d103      	bne.n	8008f7c <SetMeasurementIndicator+0x14>
 8008f74:	4b06      	ldr	r3, [pc, #24]	@ (8008f90 <SetMeasurementIndicator+0x28>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d003      	beq.n	8008f84 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = 3000;
 8008f7c:	2380      	movs	r3, #128	@ 0x80
 8008f7e:	05db      	lsls	r3, r3, #23
 8008f80:	4a04      	ldr	r2, [pc, #16]	@ (8008f94 <SetMeasurementIndicator+0x2c>)
 8008f82:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008f84:	46c0      	nop			@ (mov r8, r8)
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	200027f9 	.word	0x200027f9
 8008f90:	200027fa 	.word	0x200027fa
 8008f94:	00000bb8 	.word	0x00000bb8

08008f98 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f9c:	4b07      	ldr	r3, [pc, #28]	@ (8008fbc <ResetMeasurementIndicator+0x24>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d103      	bne.n	8008fac <ResetMeasurementIndicator+0x14>
 8008fa4:	4b06      	ldr	r3, [pc, #24]	@ (8008fc0 <ResetMeasurementIndicator+0x28>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d004      	beq.n	8008fb6 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = 4000;
 8008fac:	2380      	movs	r3, #128	@ 0x80
 8008fae:	05db      	lsls	r3, r3, #23
 8008fb0:	22fa      	movs	r2, #250	@ 0xfa
 8008fb2:	0112      	lsls	r2, r2, #4
 8008fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008fb6:	46c0      	nop			@ (mov r8, r8)
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	200027f9 	.word	0x200027f9
 8008fc0:	200027fa 	.word	0x200027fa

08008fc4 <SetMICIndicator>:
void SetMICIndicator(){
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008fc8:	4b07      	ldr	r3, [pc, #28]	@ (8008fe8 <SetMICIndicator+0x24>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <SetMICIndicator+0x14>
 8008fd0:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <SetMICIndicator+0x28>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = 3000;
 8008fd8:	2380      	movs	r3, #128	@ 0x80
 8008fda:	05db      	lsls	r3, r3, #23
 8008fdc:	4a04      	ldr	r2, [pc, #16]	@ (8008ff0 <SetMICIndicator+0x2c>)
 8008fde:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008fe0:	46c0      	nop			@ (mov r8, r8)
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	46c0      	nop			@ (mov r8, r8)
 8008fe8:	200027f9 	.word	0x200027f9
 8008fec:	200027fa 	.word	0x200027fa
 8008ff0:	00000bb8 	.word	0x00000bb8

08008ff4 <ResetMICIndicator>:
void ResetMICIndicator(){
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008ff8:	4b07      	ldr	r3, [pc, #28]	@ (8009018 <ResetMICIndicator+0x24>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d103      	bne.n	8009008 <ResetMICIndicator+0x14>
 8009000:	4b06      	ldr	r3, [pc, #24]	@ (800901c <ResetMICIndicator+0x28>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d004      	beq.n	8009012 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = 4000;
 8009008:	2380      	movs	r3, #128	@ 0x80
 800900a:	05db      	lsls	r3, r3, #23
 800900c:	22fa      	movs	r2, #250	@ 0xfa
 800900e:	0112      	lsls	r2, r2, #4
 8009010:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8009012:	46c0      	nop			@ (mov r8, r8)
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	200027f9 	.word	0x200027f9
 800901c:	200027fa 	.word	0x200027fa

08009020 <SetESPIndicator>:
void SetESPIndicator(){
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009024:	4b07      	ldr	r3, [pc, #28]	@ (8009044 <SetESPIndicator+0x24>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d103      	bne.n	8009034 <SetESPIndicator+0x14>
 800902c:	4b06      	ldr	r3, [pc, #24]	@ (8009048 <SetESPIndicator+0x28>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = 3000;
 8009034:	2380      	movs	r3, #128	@ 0x80
 8009036:	05db      	lsls	r3, r3, #23
 8009038:	4a04      	ldr	r2, [pc, #16]	@ (800904c <SetESPIndicator+0x2c>)
 800903a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800903c:	46c0      	nop			@ (mov r8, r8)
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	46c0      	nop			@ (mov r8, r8)
 8009044:	200027f9 	.word	0x200027f9
 8009048:	200027fa 	.word	0x200027fa
 800904c:	00000bb8 	.word	0x00000bb8

08009050 <ResetESPIndicator>:
void ResetESPIndicator(){
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8009054:	4b07      	ldr	r3, [pc, #28]	@ (8009074 <ResetESPIndicator+0x24>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <ResetESPIndicator+0x14>
 800905c:	4b06      	ldr	r3, [pc, #24]	@ (8009078 <ResetESPIndicator+0x28>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d004      	beq.n	800906e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = 4000;
 8009064:	2380      	movs	r3, #128	@ 0x80
 8009066:	05db      	lsls	r3, r3, #23
 8009068:	22fa      	movs	r2, #250	@ 0xfa
 800906a:	0112      	lsls	r2, r2, #4
 800906c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800906e:	46c0      	nop			@ (mov r8, r8)
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	200027f9 	.word	0x200027f9
 8009078:	200027fa 	.word	0x200027fa

0800907c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  SetStatusLED(4000,4000,4000);
 8009080:	23fa      	movs	r3, #250	@ 0xfa
 8009082:	011a      	lsls	r2, r3, #4
 8009084:	23fa      	movs	r3, #250	@ 0xfa
 8009086:	0119      	lsls	r1, r3, #4
 8009088:	23fa      	movs	r3, #250	@ 0xfa
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	0018      	movs	r0, r3
 800908e:	f7ff feb9 	bl	8008e04 <SetStatusLED>
  SetDBLED(false,false,false);
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	2000      	movs	r0, #0
 8009098:	f7ff fee8 	bl	8008e6c <SetDBLED>
  SetVocLED(4000,4000,4000);
 800909c:	23fa      	movs	r3, #250	@ 0xfa
 800909e:	011a      	lsls	r2, r3, #4
 80090a0:	23fa      	movs	r3, #250	@ 0xfa
 80090a2:	0119      	lsls	r1, r3, #4
 80090a4:	23fa      	movs	r3, #250	@ 0xfa
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	0018      	movs	r0, r3
 80090aa:	f7ff ff29 	bl	8008f00 <SetVocLED>
return;
 80090ae:	46c0      	nop			@ (mov r8, r8)
}
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <powerCheck>:

Battery_Status powerCheck(){
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 80090ba:	f7fc fc25 	bl	8005908 <Check_USB_PowerOn>
 80090be:	0003      	movs	r3, r0
 80090c0:	001a      	movs	r2, r3
 80090c2:	2301      	movs	r3, #1
 80090c4:	4053      	eors	r3, r2
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <powerCheck+0x24>
    status = batteryChargeCheck();
 80090cc:	1dfc      	adds	r4, r7, #7
 80090ce:	f7ff fe4d 	bl	8008d6c <batteryChargeCheck>
 80090d2:	0003      	movs	r3, r0
 80090d4:	7023      	strb	r3, [r4, #0]
 80090d6:	e002      	b.n	80090de <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 80090d8:	1dfb      	adds	r3, r7, #7
 80090da:	2201      	movs	r2, #1
 80090dc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80090de:	1dfb      	adds	r3, r7, #7
 80090e0:	781b      	ldrb	r3, [r3, #0]
}
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b003      	add	sp, #12
 80090e8:	bd90      	pop	{r4, r7, pc}
	...

080090ec <powerDisplay>:

void powerDisplay(Battery_Status status){
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	0002      	movs	r2, r0
 80090f4:	1dfb      	adds	r3, r7, #7
 80090f6:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 80090f8:	1dfb      	adds	r3, r7, #7
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d105      	bne.n	800910c <powerDisplay+0x20>
    Debug("LEDS are okay");
 8009100:	4a18      	ldr	r2, [pc, #96]	@ (8009164 <powerDisplay+0x78>)
 8009102:	4b19      	ldr	r3, [pc, #100]	@ (8009168 <powerDisplay+0x7c>)
 8009104:	0019      	movs	r1, r3
 8009106:	2003      	movs	r0, #3
 8009108:	f000 fdb2 	bl	8009c70 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800910c:	1dfb      	adds	r3, r7, #7
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b04      	cmp	r3, #4
 8009112:	d105      	bne.n	8009120 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8009114:	4a15      	ldr	r2, [pc, #84]	@ (800916c <powerDisplay+0x80>)
 8009116:	4b14      	ldr	r3, [pc, #80]	@ (8009168 <powerDisplay+0x7c>)
 8009118:	0019      	movs	r1, r3
 800911a:	2003      	movs	r0, #3
 800911c:	f000 fda8 	bl	8009c70 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8009120:	1dfb      	adds	r3, r7, #7
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	2b03      	cmp	r3, #3
 8009126:	d105      	bne.n	8009134 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8009128:	4a11      	ldr	r2, [pc, #68]	@ (8009170 <powerDisplay+0x84>)
 800912a:	4b0f      	ldr	r3, [pc, #60]	@ (8009168 <powerDisplay+0x7c>)
 800912c:	0019      	movs	r1, r3
 800912e:	2003      	movs	r0, #3
 8009130:	f000 fd9e 	bl	8009c70 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8009134:	1dfb      	adds	r3, r7, #7
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b02      	cmp	r3, #2
 800913a:	d105      	bne.n	8009148 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800913c:	4a0d      	ldr	r2, [pc, #52]	@ (8009174 <powerDisplay+0x88>)
 800913e:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <powerDisplay+0x7c>)
 8009140:	0019      	movs	r1, r3
 8009142:	2003      	movs	r0, #3
 8009144:	f000 fd94 	bl	8009c70 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8009148:	1dfb      	adds	r3, r7, #7
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8009150:	4a09      	ldr	r2, [pc, #36]	@ (8009178 <powerDisplay+0x8c>)
 8009152:	4b05      	ldr	r3, [pc, #20]	@ (8009168 <powerDisplay+0x7c>)
 8009154:	0019      	movs	r1, r3
 8009156:	2003      	movs	r0, #3
 8009158:	f000 fd8a 	bl	8009c70 <CreateLine>
  }
}
 800915c:	46c0      	nop			@ (mov r8, r8)
 800915e:	46bd      	mov	sp, r7
 8009160:	b002      	add	sp, #8
 8009162:	bd80      	pop	{r7, pc}
 8009164:	0801bde0 	.word	0x0801bde0
 8009168:	0801bdf0 	.word	0x0801bdf0
 800916c:	0801bdf4 	.word	0x0801bdf4
 8009170:	0801be0c 	.word	0x0801be0c
 8009174:	0801be2c 	.word	0x0801be2c
 8009178:	0801be44 	.word	0x0801be44

0800917c <configCheck>:

void configCheck(){
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8009180:	f7fc fbd1 	bl	8005926 <BootButton_Pressed>
 8009184:	1e03      	subs	r3, r0, #0
 8009186:	d007      	beq.n	8009198 <configCheck+0x1c>
 8009188:	f7fc fbde 	bl	8005948 <UserButton_Pressed>
 800918c:	1e03      	subs	r3, r0, #0
 800918e:	d003      	beq.n	8009198 <configCheck+0x1c>
    configSet = true;
 8009190:	4b3d      	ldr	r3, [pc, #244]	@ (8009288 <configCheck+0x10c>)
 8009192:	2201      	movs	r2, #1
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	e00a      	b.n	80091ae <configCheck+0x32>
  }
  else{
    configSet = false;
 8009198:	4b3b      	ldr	r3, [pc, #236]	@ (8009288 <configCheck+0x10c>)
 800919a:	2200      	movs	r2, #0
 800919c:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800919e:	f001 f8ed 	bl	800a37c <HAL_GetTick>
 80091a2:	0003      	movs	r3, r0
 80091a4:	22fa      	movs	r2, #250	@ 0xfa
 80091a6:	00d2      	lsls	r2, r2, #3
 80091a8:	189a      	adds	r2, r3, r2
 80091aa:	4b38      	ldr	r3, [pc, #224]	@ (800928c <configCheck+0x110>)
 80091ac:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 80091ae:	4b36      	ldr	r3, [pc, #216]	@ (8009288 <configCheck+0x10c>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <configCheck+0x56>
 80091b6:	4b35      	ldr	r3, [pc, #212]	@ (800928c <configCheck+0x110>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	0018      	movs	r0, r3
 80091bc:	f000 fd02 	bl	8009bc4 <TimestampIsReached>
 80091c0:	1e03      	subs	r3, r0, #0
 80091c2:	d006      	beq.n	80091d2 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 80091c4:	f7fa fb26 	bl	8003814 <SetConfigMode>
    SetDBLED(true, true, true);
 80091c8:	2201      	movs	r2, #1
 80091ca:	2101      	movs	r1, #1
 80091cc:	2001      	movs	r0, #1
 80091ce:	f7ff fe4d 	bl	8008e6c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 80091d2:	f7fc fba8 	bl	8005926 <BootButton_Pressed>
 80091d6:	0003      	movs	r3, r0
 80091d8:	001a      	movs	r2, r3
 80091da:	2301      	movs	r3, #1
 80091dc:	4053      	eors	r3, r2
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01d      	beq.n	8009220 <configCheck+0xa4>
 80091e4:	f7fc fbb0 	bl	8005948 <UserButton_Pressed>
 80091e8:	1e03      	subs	r3, r0, #0
 80091ea:	d019      	beq.n	8009220 <configCheck+0xa4>
 80091ec:	4b28      	ldr	r3, [pc, #160]	@ (8009290 <configCheck+0x114>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2201      	movs	r2, #1
 80091f2:	4053      	eors	r3, r2
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d012      	beq.n	8009220 <configCheck+0xa4>
    SetLEDsOff();
 80091fa:	f7ff ff3f 	bl	800907c <SetLEDsOff>
    userToggle = !userToggle;
 80091fe:	4b25      	ldr	r3, [pc, #148]	@ (8009294 <configCheck+0x118>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	1e5a      	subs	r2, r3, #1
 8009204:	4193      	sbcs	r3, r2
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2201      	movs	r2, #1
 800920a:	4053      	eors	r3, r2
 800920c:	b2db      	uxtb	r3, r3
 800920e:	1c1a      	adds	r2, r3, #0
 8009210:	2301      	movs	r3, #1
 8009212:	4013      	ands	r3, r2
 8009214:	b2da      	uxtb	r2, r3
 8009216:	4b1f      	ldr	r3, [pc, #124]	@ (8009294 <configCheck+0x118>)
 8009218:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800921a:	4b1d      	ldr	r3, [pc, #116]	@ (8009290 <configCheck+0x114>)
 800921c:	2201      	movs	r2, #1
 800921e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8009220:	f7fc fb81 	bl	8005926 <BootButton_Pressed>
 8009224:	0003      	movs	r3, r0
 8009226:	001a      	movs	r2, r3
 8009228:	2301      	movs	r3, #1
 800922a:	4053      	eors	r3, r2
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <configCheck+0xce>
 8009232:	f7fc fb89 	bl	8005948 <UserButton_Pressed>
 8009236:	0003      	movs	r3, r0
 8009238:	001a      	movs	r2, r3
 800923a:	2301      	movs	r3, #1
 800923c:	4053      	eors	r3, r2
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <configCheck+0xce>
    buttonHeld = false;
 8009244:	4b12      	ldr	r3, [pc, #72]	@ (8009290 <configCheck+0x114>)
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800924a:	f7fc fb5d 	bl	8005908 <Check_USB_PowerOn>
 800924e:	1e03      	subs	r3, r0, #0
 8009250:	d003      	beq.n	800925a <configCheck+0xde>
    usbPluggedIn = true;
 8009252:	4b11      	ldr	r3, [pc, #68]	@ (8009298 <configCheck+0x11c>)
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 8009258:	e012      	b.n	8009280 <configCheck+0x104>
    if(!userToggle && !init){
 800925a:	4b0e      	ldr	r3, [pc, #56]	@ (8009294 <configCheck+0x118>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	2201      	movs	r2, #1
 8009260:	4053      	eors	r3, r2
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d008      	beq.n	800927a <configCheck+0xfe>
 8009268:	4b0c      	ldr	r3, [pc, #48]	@ (800929c <configCheck+0x120>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2201      	movs	r2, #1
 800926e:	4053      	eors	r3, r2
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <configCheck+0xfe>
      SetLEDsOff();
 8009276:	f7ff ff01 	bl	800907c <SetLEDsOff>
    usbPluggedIn = false;
 800927a:	4b07      	ldr	r3, [pc, #28]	@ (8009298 <configCheck+0x11c>)
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
}
 8009280:	46c0      	nop			@ (mov r8, r8)
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	200027f8 	.word	0x200027f8
 800928c:	200027fc 	.word	0x200027fc
 8009290:	200027fb 	.word	0x200027fb
 8009294:	200027fa 	.word	0x200027fa
 8009298:	200027f9 	.word	0x200027f9
 800929c:	2000005a 	.word	0x2000005a

080092a0 <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  configCheck();
 80092a4:	f7ff ff6a 	bl	800917c <configCheck>
}
 80092a8:	46c0      	nop			@ (mov r8, r8)
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 80092ae:	b590      	push	{r4, r7, lr}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 80092b4:	1dfc      	adds	r4, r7, #7
 80092b6:	f7ff fefd 	bl	80090b4 <powerCheck>
 80092ba:	0003      	movs	r3, r0
 80092bc:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);
 80092be:	1dfb      	adds	r3, r7, #7
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7ff ff12 	bl	80090ec <powerDisplay>
  return status;
 80092c8:	1dfb      	adds	r3, r7, #7
 80092ca:	781b      	ldrb	r3, [r3, #0]

}
 80092cc:	0018      	movs	r0, r3
 80092ce:	46bd      	mov	sp, r7
 80092d0:	b003      	add	sp, #12
 80092d2:	bd90      	pop	{r4, r7, pc}

080092d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092d8:	4b07      	ldr	r3, [pc, #28]	@ (80092f8 <HAL_MspInit+0x24>)
 80092da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092dc:	4b06      	ldr	r3, [pc, #24]	@ (80092f8 <HAL_MspInit+0x24>)
 80092de:	2101      	movs	r1, #1
 80092e0:	430a      	orrs	r2, r1
 80092e2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80092e4:	4b04      	ldr	r3, [pc, #16]	@ (80092f8 <HAL_MspInit+0x24>)
 80092e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092e8:	4b03      	ldr	r3, [pc, #12]	@ (80092f8 <HAL_MspInit+0x24>)
 80092ea:	2180      	movs	r1, #128	@ 0x80
 80092ec:	0549      	lsls	r1, r1, #21
 80092ee:	430a      	orrs	r2, r1
 80092f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092f2:	46c0      	nop			@ (mov r8, r8)
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	40021000 	.word	0x40021000

080092fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009300:	46c0      	nop			@ (mov r8, r8)
 8009302:	e7fd      	b.n	8009300 <NMI_Handler+0x4>

08009304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009308:	46c0      	nop			@ (mov r8, r8)
 800930a:	e7fd      	b.n	8009308 <HardFault_Handler+0x4>

0800930c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8009310:	46c0      	nop			@ (mov r8, r8)
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800931a:	46c0      	nop			@ (mov r8, r8)
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009324:	f001 f818 	bl	800a358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009328:	46c0      	nop			@ (mov r8, r8)
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
	...

08009330 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009334:	4b05      	ldr	r3, [pc, #20]	@ (800934c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8009336:	0018      	movs	r0, r3
 8009338:	f001 fe8b 	bl	800b052 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800933c:	4b04      	ldr	r3, [pc, #16]	@ (8009350 <DMA1_Channel2_3_IRQHandler+0x20>)
 800933e:	0018      	movs	r0, r3
 8009340:	f001 fe87 	bl	800b052 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009344:	46c0      	nop			@ (mov r8, r8)
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	46c0      	nop			@ (mov r8, r8)
 800934c:	20000da4 	.word	0x20000da4
 8009350:	20000d5c 	.word	0x20000d5c

08009354 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8009358:	4b07      	ldr	r3, [pc, #28]	@ (8009378 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800935a:	0018      	movs	r0, r3
 800935c:	f001 fe79 	bl	800b052 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8009360:	4b06      	ldr	r3, [pc, #24]	@ (800937c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8009362:	0018      	movs	r0, r3
 8009364:	f001 fe75 	bl	800b052 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8009368:	4b05      	ldr	r3, [pc, #20]	@ (8009380 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800936a:	0018      	movs	r0, r3
 800936c:	f001 fe71 	bl	800b052 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8009370:	46c0      	nop			@ (mov r8, r8)
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	46c0      	nop			@ (mov r8, r8)
 8009378:	20000e28 	.word	0x20000e28
 800937c:	20002aac 	.word	0x20002aac
 8009380:	20002af4 	.word	0x20002af4

08009384 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009388:	4b03      	ldr	r3, [pc, #12]	@ (8009398 <USART4_5_IRQHandler+0x14>)
 800938a:	0018      	movs	r0, r3
 800938c:	f008 fcfe 	bl	8011d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8009390:	46c0      	nop			@ (mov r8, r8)
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	200029f4 	.word	0x200029f4

0800939c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80093a0:	4b09      	ldr	r3, [pc, #36]	@ (80093c8 <I2C1_IRQHandler+0x2c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	23e0      	movs	r3, #224	@ 0xe0
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	4013      	ands	r3, r2
 80093ac:	d004      	beq.n	80093b8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80093ae:	4b06      	ldr	r3, [pc, #24]	@ (80093c8 <I2C1_IRQHandler+0x2c>)
 80093b0:	0018      	movs	r0, r3
 80093b2:	f002 fe5b 	bl	800c06c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80093b6:	e003      	b.n	80093c0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80093b8:	4b03      	ldr	r3, [pc, #12]	@ (80093c8 <I2C1_IRQHandler+0x2c>)
 80093ba:	0018      	movs	r0, r3
 80093bc:	f002 fe3c 	bl	800c038 <HAL_I2C_EV_IRQHandler>
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	46c0      	nop			@ (mov r8, r8)
 80093c8:	20000cb4 	.word	0x20000cb4

080093cc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80093d0:	4b03      	ldr	r3, [pc, #12]	@ (80093e0 <USB_IRQHandler+0x14>)
 80093d2:	0018      	movs	r0, r3
 80093d4:	f005 f812 	bl	800e3fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80093d8:	46c0      	nop			@ (mov r8, r8)
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	46c0      	nop			@ (mov r8, r8)
 80093e0:	200038fc 	.word	0x200038fc

080093e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  return 1;
 80093e8:	2301      	movs	r3, #1
}
 80093ea:	0018      	movs	r0, r3
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <_kill>:

int _kill(int pid, int sig)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80093fa:	f00f f98b 	bl	8018714 <__errno>
 80093fe:	0003      	movs	r3, r0
 8009400:	2216      	movs	r2, #22
 8009402:	601a      	str	r2, [r3, #0]
  return -1;
 8009404:	2301      	movs	r3, #1
 8009406:	425b      	negs	r3, r3
}
 8009408:	0018      	movs	r0, r3
 800940a:	46bd      	mov	sp, r7
 800940c:	b002      	add	sp, #8
 800940e:	bd80      	pop	{r7, pc}

08009410 <_exit>:

void _exit (int status)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009418:	2301      	movs	r3, #1
 800941a:	425a      	negs	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	0011      	movs	r1, r2
 8009420:	0018      	movs	r0, r3
 8009422:	f7ff ffe5 	bl	80093f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009426:	46c0      	nop			@ (mov r8, r8)
 8009428:	e7fd      	b.n	8009426 <_exit+0x16>

0800942a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]
 800943a:	e00a      	b.n	8009452 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800943c:	e000      	b.n	8009440 <_read+0x16>
 800943e:	bf00      	nop
 8009440:	0001      	movs	r1, r0
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	60ba      	str	r2, [r7, #8]
 8009448:	b2ca      	uxtb	r2, r1
 800944a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	3301      	adds	r3, #1
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	dbf0      	blt.n	800943c <_read+0x12>
  }

  return len;
 800945a:	687b      	ldr	r3, [r7, #4]
}
 800945c:	0018      	movs	r0, r3
 800945e:	46bd      	mov	sp, r7
 8009460:	b006      	add	sp, #24
 8009462:	bd80      	pop	{r7, pc}

08009464 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800946c:	2301      	movs	r3, #1
 800946e:	425b      	negs	r3, r3
}
 8009470:	0018      	movs	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	b002      	add	sp, #8
 8009476:	bd80      	pop	{r7, pc}

08009478 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2280      	movs	r2, #128	@ 0x80
 8009486:	0192      	lsls	r2, r2, #6
 8009488:	605a      	str	r2, [r3, #4]
  return 0;
 800948a:	2300      	movs	r3, #0
}
 800948c:	0018      	movs	r0, r3
 800948e:	46bd      	mov	sp, r7
 8009490:	b002      	add	sp, #8
 8009492:	bd80      	pop	{r7, pc}

08009494 <_isatty>:

int _isatty(int file)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800949c:	2301      	movs	r3, #1
}
 800949e:	0018      	movs	r0, r3
 80094a0:	46bd      	mov	sp, r7
 80094a2:	b002      	add	sp, #8
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	0018      	movs	r0, r3
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b004      	add	sp, #16
 80094ba:	bd80      	pop	{r7, pc}

080094bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80094c4:	4a14      	ldr	r2, [pc, #80]	@ (8009518 <_sbrk+0x5c>)
 80094c6:	4b15      	ldr	r3, [pc, #84]	@ (800951c <_sbrk+0x60>)
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80094d0:	4b13      	ldr	r3, [pc, #76]	@ (8009520 <_sbrk+0x64>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d102      	bne.n	80094de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80094d8:	4b11      	ldr	r3, [pc, #68]	@ (8009520 <_sbrk+0x64>)
 80094da:	4a12      	ldr	r2, [pc, #72]	@ (8009524 <_sbrk+0x68>)
 80094dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80094de:	4b10      	ldr	r3, [pc, #64]	@ (8009520 <_sbrk+0x64>)
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	18d3      	adds	r3, r2, r3
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d207      	bcs.n	80094fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80094ec:	f00f f912 	bl	8018714 <__errno>
 80094f0:	0003      	movs	r3, r0
 80094f2:	220c      	movs	r2, #12
 80094f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80094f6:	2301      	movs	r3, #1
 80094f8:	425b      	negs	r3, r3
 80094fa:	e009      	b.n	8009510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80094fc:	4b08      	ldr	r3, [pc, #32]	@ (8009520 <_sbrk+0x64>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009502:	4b07      	ldr	r3, [pc, #28]	@ (8009520 <_sbrk+0x64>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	18d2      	adds	r2, r2, r3
 800950a:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <_sbrk+0x64>)
 800950c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800950e:	68fb      	ldr	r3, [r7, #12]
}
 8009510:	0018      	movs	r0, r3
 8009512:	46bd      	mov	sp, r7
 8009514:	b006      	add	sp, #24
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20005000 	.word	0x20005000
 800951c:	00000400 	.word	0x00000400
 8009520:	20002800 	.word	0x20002800
 8009524:	20003f60 	.word	0x20003f60

08009528 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800952c:	46c0      	nop			@ (mov r8, r8)
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800953a:	2310      	movs	r3, #16
 800953c:	18fb      	adds	r3, r7, r3
 800953e:	0018      	movs	r0, r3
 8009540:	2308      	movs	r3, #8
 8009542:	001a      	movs	r2, r3
 8009544:	2100      	movs	r1, #0
 8009546:	f00f f853 	bl	80185f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800954a:	003b      	movs	r3, r7
 800954c:	0018      	movs	r0, r3
 800954e:	2310      	movs	r3, #16
 8009550:	001a      	movs	r2, r3
 8009552:	2100      	movs	r1, #0
 8009554:	f00f f84c 	bl	80185f0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009558:	4b2e      	ldr	r3, [pc, #184]	@ (8009614 <MX_TIM2_Init+0xe0>)
 800955a:	2280      	movs	r2, #128	@ 0x80
 800955c:	05d2      	lsls	r2, r2, #23
 800955e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009560:	4b2c      	ldr	r3, [pc, #176]	@ (8009614 <MX_TIM2_Init+0xe0>)
 8009562:	2200      	movs	r2, #0
 8009564:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009566:	4b2b      	ldr	r3, [pc, #172]	@ (8009614 <MX_TIM2_Init+0xe0>)
 8009568:	2200      	movs	r2, #0
 800956a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800956c:	4b29      	ldr	r3, [pc, #164]	@ (8009614 <MX_TIM2_Init+0xe0>)
 800956e:	4a2a      	ldr	r2, [pc, #168]	@ (8009618 <MX_TIM2_Init+0xe4>)
 8009570:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009572:	4b28      	ldr	r3, [pc, #160]	@ (8009614 <MX_TIM2_Init+0xe0>)
 8009574:	2200      	movs	r2, #0
 8009576:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009578:	4b26      	ldr	r3, [pc, #152]	@ (8009614 <MX_TIM2_Init+0xe0>)
 800957a:	2200      	movs	r2, #0
 800957c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800957e:	4b25      	ldr	r3, [pc, #148]	@ (8009614 <MX_TIM2_Init+0xe0>)
 8009580:	0018      	movs	r0, r3
 8009582:	f007 fe75 	bl	8011270 <HAL_TIM_PWM_Init>
 8009586:	1e03      	subs	r3, r0, #0
 8009588:	d001      	beq.n	800958e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800958a:	f7fd f8cf 	bl	800672c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800958e:	2110      	movs	r1, #16
 8009590:	187b      	adds	r3, r7, r1
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009596:	187b      	adds	r3, r7, r1
 8009598:	2200      	movs	r2, #0
 800959a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800959c:	187a      	adds	r2, r7, r1
 800959e:	4b1d      	ldr	r3, [pc, #116]	@ (8009614 <MX_TIM2_Init+0xe0>)
 80095a0:	0011      	movs	r1, r2
 80095a2:	0018      	movs	r0, r3
 80095a4:	f008 f982 	bl	80118ac <HAL_TIMEx_MasterConfigSynchronization>
 80095a8:	1e03      	subs	r3, r0, #0
 80095aa:	d001      	beq.n	80095b0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80095ac:	f7fd f8be 	bl	800672c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095b0:	003b      	movs	r3, r7
 80095b2:	2260      	movs	r2, #96	@ 0x60
 80095b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80095b6:	003b      	movs	r3, r7
 80095b8:	2200      	movs	r2, #0
 80095ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095bc:	003b      	movs	r3, r7
 80095be:	2200      	movs	r2, #0
 80095c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095c2:	003b      	movs	r3, r7
 80095c4:	2200      	movs	r2, #0
 80095c6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095c8:	0039      	movs	r1, r7
 80095ca:	4b12      	ldr	r3, [pc, #72]	@ (8009614 <MX_TIM2_Init+0xe0>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	0018      	movs	r0, r3
 80095d0:	f007 ff20 	bl	8011414 <HAL_TIM_PWM_ConfigChannel>
 80095d4:	1e03      	subs	r3, r0, #0
 80095d6:	d001      	beq.n	80095dc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80095d8:	f7fd f8a8 	bl	800672c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80095dc:	0039      	movs	r1, r7
 80095de:	4b0d      	ldr	r3, [pc, #52]	@ (8009614 <MX_TIM2_Init+0xe0>)
 80095e0:	2208      	movs	r2, #8
 80095e2:	0018      	movs	r0, r3
 80095e4:	f007 ff16 	bl	8011414 <HAL_TIM_PWM_ConfigChannel>
 80095e8:	1e03      	subs	r3, r0, #0
 80095ea:	d001      	beq.n	80095f0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80095ec:	f7fd f89e 	bl	800672c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80095f0:	0039      	movs	r1, r7
 80095f2:	4b08      	ldr	r3, [pc, #32]	@ (8009614 <MX_TIM2_Init+0xe0>)
 80095f4:	220c      	movs	r2, #12
 80095f6:	0018      	movs	r0, r3
 80095f8:	f007 ff0c 	bl	8011414 <HAL_TIM_PWM_ConfigChannel>
 80095fc:	1e03      	subs	r3, r0, #0
 80095fe:	d001      	beq.n	8009604 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8009600:	f7fd f894 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009604:	4b03      	ldr	r3, [pc, #12]	@ (8009614 <MX_TIM2_Init+0xe0>)
 8009606:	0018      	movs	r0, r3
 8009608:	f000 f8aa 	bl	8009760 <HAL_TIM_MspPostInit>

}
 800960c:	46c0      	nop			@ (mov r8, r8)
 800960e:	46bd      	mov	sp, r7
 8009610:	b006      	add	sp, #24
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20002804 	.word	0x20002804
 8009618:	0000ffff 	.word	0x0000ffff

0800961c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009622:	2310      	movs	r3, #16
 8009624:	18fb      	adds	r3, r7, r3
 8009626:	0018      	movs	r0, r3
 8009628:	2308      	movs	r3, #8
 800962a:	001a      	movs	r2, r3
 800962c:	2100      	movs	r1, #0
 800962e:	f00e ffdf 	bl	80185f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009632:	003b      	movs	r3, r7
 8009634:	0018      	movs	r0, r3
 8009636:	2310      	movs	r3, #16
 8009638:	001a      	movs	r2, r3
 800963a:	2100      	movs	r1, #0
 800963c:	f00e ffd8 	bl	80185f0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009640:	4b32      	ldr	r3, [pc, #200]	@ (800970c <MX_TIM3_Init+0xf0>)
 8009642:	4a33      	ldr	r2, [pc, #204]	@ (8009710 <MX_TIM3_Init+0xf4>)
 8009644:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009646:	4b31      	ldr	r3, [pc, #196]	@ (800970c <MX_TIM3_Init+0xf0>)
 8009648:	2200      	movs	r2, #0
 800964a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800964c:	4b2f      	ldr	r3, [pc, #188]	@ (800970c <MX_TIM3_Init+0xf0>)
 800964e:	2200      	movs	r2, #0
 8009650:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009652:	4b2e      	ldr	r3, [pc, #184]	@ (800970c <MX_TIM3_Init+0xf0>)
 8009654:	4a2f      	ldr	r2, [pc, #188]	@ (8009714 <MX_TIM3_Init+0xf8>)
 8009656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009658:	4b2c      	ldr	r3, [pc, #176]	@ (800970c <MX_TIM3_Init+0xf0>)
 800965a:	2200      	movs	r2, #0
 800965c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800965e:	4b2b      	ldr	r3, [pc, #172]	@ (800970c <MX_TIM3_Init+0xf0>)
 8009660:	2200      	movs	r2, #0
 8009662:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009664:	4b29      	ldr	r3, [pc, #164]	@ (800970c <MX_TIM3_Init+0xf0>)
 8009666:	0018      	movs	r0, r3
 8009668:	f007 fe02 	bl	8011270 <HAL_TIM_PWM_Init>
 800966c:	1e03      	subs	r3, r0, #0
 800966e:	d001      	beq.n	8009674 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8009670:	f7fd f85c 	bl	800672c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009674:	2110      	movs	r1, #16
 8009676:	187b      	adds	r3, r7, r1
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800967c:	187b      	adds	r3, r7, r1
 800967e:	2200      	movs	r2, #0
 8009680:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009682:	187a      	adds	r2, r7, r1
 8009684:	4b21      	ldr	r3, [pc, #132]	@ (800970c <MX_TIM3_Init+0xf0>)
 8009686:	0011      	movs	r1, r2
 8009688:	0018      	movs	r0, r3
 800968a:	f008 f90f 	bl	80118ac <HAL_TIMEx_MasterConfigSynchronization>
 800968e:	1e03      	subs	r3, r0, #0
 8009690:	d001      	beq.n	8009696 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009692:	f7fd f84b 	bl	800672c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009696:	003b      	movs	r3, r7
 8009698:	2260      	movs	r2, #96	@ 0x60
 800969a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800969c:	003b      	movs	r3, r7
 800969e:	2200      	movs	r2, #0
 80096a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80096a2:	003b      	movs	r3, r7
 80096a4:	2200      	movs	r2, #0
 80096a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80096a8:	003b      	movs	r3, r7
 80096aa:	2200      	movs	r2, #0
 80096ac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80096ae:	0039      	movs	r1, r7
 80096b0:	4b16      	ldr	r3, [pc, #88]	@ (800970c <MX_TIM3_Init+0xf0>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	0018      	movs	r0, r3
 80096b6:	f007 fead 	bl	8011414 <HAL_TIM_PWM_ConfigChannel>
 80096ba:	1e03      	subs	r3, r0, #0
 80096bc:	d001      	beq.n	80096c2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80096be:	f7fd f835 	bl	800672c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80096c2:	4b12      	ldr	r3, [pc, #72]	@ (800970c <MX_TIM3_Init+0xf0>)
 80096c4:	2104      	movs	r1, #4
 80096c6:	0018      	movs	r0, r3
 80096c8:	f008 f94e 	bl	8011968 <HAL_TIMEx_RemapConfig>
 80096cc:	1e03      	subs	r3, r0, #0
 80096ce:	d001      	beq.n	80096d4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80096d0:	f7fd f82c 	bl	800672c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80096d4:	0039      	movs	r1, r7
 80096d6:	4b0d      	ldr	r3, [pc, #52]	@ (800970c <MX_TIM3_Init+0xf0>)
 80096d8:	2204      	movs	r2, #4
 80096da:	0018      	movs	r0, r3
 80096dc:	f007 fe9a 	bl	8011414 <HAL_TIM_PWM_ConfigChannel>
 80096e0:	1e03      	subs	r3, r0, #0
 80096e2:	d001      	beq.n	80096e8 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80096e4:	f7fd f822 	bl	800672c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80096e8:	0039      	movs	r1, r7
 80096ea:	4b08      	ldr	r3, [pc, #32]	@ (800970c <MX_TIM3_Init+0xf0>)
 80096ec:	2208      	movs	r2, #8
 80096ee:	0018      	movs	r0, r3
 80096f0:	f007 fe90 	bl	8011414 <HAL_TIM_PWM_ConfigChannel>
 80096f4:	1e03      	subs	r3, r0, #0
 80096f6:	d001      	beq.n	80096fc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80096f8:	f7fd f818 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80096fc:	4b03      	ldr	r3, [pc, #12]	@ (800970c <MX_TIM3_Init+0xf0>)
 80096fe:	0018      	movs	r0, r3
 8009700:	f000 f82e 	bl	8009760 <HAL_TIM_MspPostInit>

}
 8009704:	46c0      	nop			@ (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b006      	add	sp, #24
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20002844 	.word	0x20002844
 8009710:	40000400 	.word	0x40000400
 8009714:	0000ffff 	.word	0x0000ffff

08009718 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	2380      	movs	r3, #128	@ 0x80
 8009726:	05db      	lsls	r3, r3, #23
 8009728:	429a      	cmp	r2, r3
 800972a:	d106      	bne.n	800973a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800972c:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <HAL_TIM_PWM_MspInit+0x40>)
 800972e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009730:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <HAL_TIM_PWM_MspInit+0x40>)
 8009732:	2101      	movs	r1, #1
 8009734:	430a      	orrs	r2, r1
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009738:	e00a      	b.n	8009750 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a07      	ldr	r2, [pc, #28]	@ (800975c <HAL_TIM_PWM_MspInit+0x44>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d105      	bne.n	8009750 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009744:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <HAL_TIM_PWM_MspInit+0x40>)
 8009746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009748:	4b03      	ldr	r3, [pc, #12]	@ (8009758 <HAL_TIM_PWM_MspInit+0x40>)
 800974a:	2102      	movs	r1, #2
 800974c:	430a      	orrs	r2, r1
 800974e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009750:	46c0      	nop			@ (mov r8, r8)
 8009752:	46bd      	mov	sp, r7
 8009754:	b002      	add	sp, #8
 8009756:	bd80      	pop	{r7, pc}
 8009758:	40021000 	.word	0x40021000
 800975c:	40000400 	.word	0x40000400

08009760 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b08b      	sub	sp, #44	@ 0x2c
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009768:	2414      	movs	r4, #20
 800976a:	193b      	adds	r3, r7, r4
 800976c:	0018      	movs	r0, r3
 800976e:	2314      	movs	r3, #20
 8009770:	001a      	movs	r2, r3
 8009772:	2100      	movs	r1, #0
 8009774:	f00e ff3c 	bl	80185f0 <memset>
  if(timHandle->Instance==TIM2)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	2380      	movs	r3, #128	@ 0x80
 800977e:	05db      	lsls	r3, r3, #23
 8009780:	429a      	cmp	r2, r3
 8009782:	d123      	bne.n	80097cc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009784:	4b27      	ldr	r3, [pc, #156]	@ (8009824 <HAL_TIM_MspPostInit+0xc4>)
 8009786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009788:	4b26      	ldr	r3, [pc, #152]	@ (8009824 <HAL_TIM_MspPostInit+0xc4>)
 800978a:	2101      	movs	r1, #1
 800978c:	430a      	orrs	r2, r1
 800978e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009790:	4b24      	ldr	r3, [pc, #144]	@ (8009824 <HAL_TIM_MspPostInit+0xc4>)
 8009792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009794:	2201      	movs	r2, #1
 8009796:	4013      	ands	r3, r2
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800979c:	0021      	movs	r1, r4
 800979e:	187b      	adds	r3, r7, r1
 80097a0:	220d      	movs	r2, #13
 80097a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a4:	187b      	adds	r3, r7, r1
 80097a6:	2202      	movs	r2, #2
 80097a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097aa:	187b      	adds	r3, r7, r1
 80097ac:	2200      	movs	r2, #0
 80097ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097b0:	187b      	adds	r3, r7, r1
 80097b2:	2200      	movs	r2, #0
 80097b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80097b6:	187b      	adds	r3, r7, r1
 80097b8:	2202      	movs	r2, #2
 80097ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097bc:	187a      	adds	r2, r7, r1
 80097be:	23a0      	movs	r3, #160	@ 0xa0
 80097c0:	05db      	lsls	r3, r3, #23
 80097c2:	0011      	movs	r1, r2
 80097c4:	0018      	movs	r0, r3
 80097c6:	f001 fefb 	bl	800b5c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80097ca:	e027      	b.n	800981c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a15      	ldr	r2, [pc, #84]	@ (8009828 <HAL_TIM_MspPostInit+0xc8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d122      	bne.n	800981c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097d6:	4b13      	ldr	r3, [pc, #76]	@ (8009824 <HAL_TIM_MspPostInit+0xc4>)
 80097d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097da:	4b12      	ldr	r3, [pc, #72]	@ (8009824 <HAL_TIM_MspPostInit+0xc4>)
 80097dc:	2104      	movs	r1, #4
 80097de:	430a      	orrs	r2, r1
 80097e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <HAL_TIM_MspPostInit+0xc4>)
 80097e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e6:	2204      	movs	r2, #4
 80097e8:	4013      	ands	r3, r2
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80097ee:	2114      	movs	r1, #20
 80097f0:	187b      	adds	r3, r7, r1
 80097f2:	22e0      	movs	r2, #224	@ 0xe0
 80097f4:	0052      	lsls	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f8:	187b      	adds	r3, r7, r1
 80097fa:	2202      	movs	r2, #2
 80097fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fe:	187b      	adds	r3, r7, r1
 8009800:	2200      	movs	r2, #0
 8009802:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009804:	187b      	adds	r3, r7, r1
 8009806:	2200      	movs	r2, #0
 8009808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800980a:	187b      	adds	r3, r7, r1
 800980c:	2202      	movs	r2, #2
 800980e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009810:	187b      	adds	r3, r7, r1
 8009812:	4a06      	ldr	r2, [pc, #24]	@ (800982c <HAL_TIM_MspPostInit+0xcc>)
 8009814:	0019      	movs	r1, r3
 8009816:	0010      	movs	r0, r2
 8009818:	f001 fed2 	bl	800b5c0 <HAL_GPIO_Init>
}
 800981c:	46c0      	nop			@ (mov r8, r8)
 800981e:	46bd      	mov	sp, r7
 8009820:	b00b      	add	sp, #44	@ 0x2c
 8009822:	bd90      	pop	{r4, r7, pc}
 8009824:	40021000 	.word	0x40021000
 8009828:	40000400 	.word	0x40000400
 800982c:	50000800 	.word	0x50000800

08009830 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009834:	4b17      	ldr	r3, [pc, #92]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 8009836:	4a18      	ldr	r2, [pc, #96]	@ (8009898 <MX_LPUART1_UART_Init+0x68>)
 8009838:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800983a:	4b16      	ldr	r3, [pc, #88]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 800983c:	22e1      	movs	r2, #225	@ 0xe1
 800983e:	0252      	lsls	r2, r2, #9
 8009840:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009842:	4b14      	ldr	r3, [pc, #80]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 8009844:	2200      	movs	r2, #0
 8009846:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009848:	4b12      	ldr	r3, [pc, #72]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 800984a:	2200      	movs	r2, #0
 800984c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800984e:	4b11      	ldr	r3, [pc, #68]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 8009850:	2200      	movs	r2, #0
 8009852:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009854:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 8009856:	220c      	movs	r2, #12
 8009858:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800985a:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 800985c:	2200      	movs	r2, #0
 800985e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009860:	4b0c      	ldr	r3, [pc, #48]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 8009862:	2200      	movs	r2, #0
 8009864:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8009866:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 8009868:	2218      	movs	r2, #24
 800986a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800986c:	4b09      	ldr	r3, [pc, #36]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 800986e:	2280      	movs	r2, #128	@ 0x80
 8009870:	0212      	lsls	r2, r2, #8
 8009872:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009874:	4b07      	ldr	r3, [pc, #28]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 8009876:	2280      	movs	r2, #128	@ 0x80
 8009878:	0152      	lsls	r2, r2, #5
 800987a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800987c:	4b05      	ldr	r3, [pc, #20]	@ (8009894 <MX_LPUART1_UART_Init+0x64>)
 800987e:	0018      	movs	r0, r3
 8009880:	f008 f890 	bl	80119a4 <HAL_UART_Init>
 8009884:	1e03      	subs	r3, r0, #0
 8009886:	d001      	beq.n	800988c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8009888:	f7fc ff50 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800988c:	46c0      	nop			@ (mov r8, r8)
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	46c0      	nop			@ (mov r8, r8)
 8009894:	20002884 	.word	0x20002884
 8009898:	40004800 	.word	0x40004800

0800989c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80098a0:	4b16      	ldr	r3, [pc, #88]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098a2:	4a17      	ldr	r2, [pc, #92]	@ (8009900 <MX_USART1_UART_Init+0x64>)
 80098a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80098a6:	4b15      	ldr	r3, [pc, #84]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098a8:	22e1      	movs	r2, #225	@ 0xe1
 80098aa:	0252      	lsls	r2, r2, #9
 80098ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80098ae:	4b13      	ldr	r3, [pc, #76]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80098b4:	4b11      	ldr	r3, [pc, #68]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80098ba:	4b10      	ldr	r3, [pc, #64]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098bc:	2200      	movs	r2, #0
 80098be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80098c0:	4b0e      	ldr	r3, [pc, #56]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098c2:	220c      	movs	r2, #12
 80098c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098c6:	4b0d      	ldr	r3, [pc, #52]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80098cc:	4b0b      	ldr	r3, [pc, #44]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80098d2:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80098d8:	4b08      	ldr	r3, [pc, #32]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098da:	2208      	movs	r2, #8
 80098dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80098de:	4b07      	ldr	r3, [pc, #28]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098e0:	2280      	movs	r2, #128	@ 0x80
 80098e2:	0212      	lsls	r2, r2, #8
 80098e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80098e6:	4b05      	ldr	r3, [pc, #20]	@ (80098fc <MX_USART1_UART_Init+0x60>)
 80098e8:	0018      	movs	r0, r3
 80098ea:	f008 f85b 	bl	80119a4 <HAL_UART_Init>
 80098ee:	1e03      	subs	r3, r0, #0
 80098f0:	d001      	beq.n	80098f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80098f2:	f7fc ff1b 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80098f6:	46c0      	nop			@ (mov r8, r8)
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	2000293c 	.word	0x2000293c
 8009900:	40013800 	.word	0x40013800

08009904 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009908:	4b14      	ldr	r3, [pc, #80]	@ (800995c <MX_USART4_UART_Init+0x58>)
 800990a:	4a15      	ldr	r2, [pc, #84]	@ (8009960 <MX_USART4_UART_Init+0x5c>)
 800990c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800990e:	4b13      	ldr	r3, [pc, #76]	@ (800995c <MX_USART4_UART_Init+0x58>)
 8009910:	22e1      	movs	r2, #225	@ 0xe1
 8009912:	0252      	lsls	r2, r2, #9
 8009914:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009916:	4b11      	ldr	r3, [pc, #68]	@ (800995c <MX_USART4_UART_Init+0x58>)
 8009918:	2200      	movs	r2, #0
 800991a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800991c:	4b0f      	ldr	r3, [pc, #60]	@ (800995c <MX_USART4_UART_Init+0x58>)
 800991e:	2200      	movs	r2, #0
 8009920:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009922:	4b0e      	ldr	r3, [pc, #56]	@ (800995c <MX_USART4_UART_Init+0x58>)
 8009924:	2200      	movs	r2, #0
 8009926:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009928:	4b0c      	ldr	r3, [pc, #48]	@ (800995c <MX_USART4_UART_Init+0x58>)
 800992a:	220c      	movs	r2, #12
 800992c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800992e:	4b0b      	ldr	r3, [pc, #44]	@ (800995c <MX_USART4_UART_Init+0x58>)
 8009930:	2200      	movs	r2, #0
 8009932:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009934:	4b09      	ldr	r3, [pc, #36]	@ (800995c <MX_USART4_UART_Init+0x58>)
 8009936:	2200      	movs	r2, #0
 8009938:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800993a:	4b08      	ldr	r3, [pc, #32]	@ (800995c <MX_USART4_UART_Init+0x58>)
 800993c:	2200      	movs	r2, #0
 800993e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009940:	4b06      	ldr	r3, [pc, #24]	@ (800995c <MX_USART4_UART_Init+0x58>)
 8009942:	2200      	movs	r2, #0
 8009944:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009946:	4b05      	ldr	r3, [pc, #20]	@ (800995c <MX_USART4_UART_Init+0x58>)
 8009948:	0018      	movs	r0, r3
 800994a:	f008 f82b 	bl	80119a4 <HAL_UART_Init>
 800994e:	1e03      	subs	r3, r0, #0
 8009950:	d001      	beq.n	8009956 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8009952:	f7fc feeb 	bl	800672c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8009956:	46c0      	nop			@ (mov r8, r8)
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	200029f4 	.word	0x200029f4
 8009960:	40004c00 	.word	0x40004c00

08009964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b08d      	sub	sp, #52	@ 0x34
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800996c:	241c      	movs	r4, #28
 800996e:	193b      	adds	r3, r7, r4
 8009970:	0018      	movs	r0, r3
 8009972:	2314      	movs	r3, #20
 8009974:	001a      	movs	r2, r3
 8009976:	2100      	movs	r1, #0
 8009978:	f00e fe3a 	bl	80185f0 <memset>
  if(uartHandle->Instance==LPUART1)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a87      	ldr	r2, [pc, #540]	@ (8009ba0 <HAL_UART_MspInit+0x23c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d129      	bne.n	80099da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009986:	4b87      	ldr	r3, [pc, #540]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800998a:	4b86      	ldr	r3, [pc, #536]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 800998c:	2180      	movs	r1, #128	@ 0x80
 800998e:	02c9      	lsls	r1, r1, #11
 8009990:	430a      	orrs	r2, r1
 8009992:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009994:	4b83      	ldr	r3, [pc, #524]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009998:	4b82      	ldr	r3, [pc, #520]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 800999a:	2104      	movs	r1, #4
 800999c:	430a      	orrs	r2, r1
 800999e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80099a0:	4b80      	ldr	r3, [pc, #512]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a4:	2204      	movs	r2, #4
 80099a6:	4013      	ands	r3, r2
 80099a8:	61bb      	str	r3, [r7, #24]
 80099aa:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80099ac:	0021      	movs	r1, r4
 80099ae:	187b      	adds	r3, r7, r1
 80099b0:	2203      	movs	r2, #3
 80099b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b4:	187b      	adds	r3, r7, r1
 80099b6:	2202      	movs	r2, #2
 80099b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ba:	187b      	adds	r3, r7, r1
 80099bc:	2200      	movs	r2, #0
 80099be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099c0:	187b      	adds	r3, r7, r1
 80099c2:	2203      	movs	r2, #3
 80099c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80099c6:	187b      	adds	r3, r7, r1
 80099c8:	2206      	movs	r2, #6
 80099ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099cc:	187b      	adds	r3, r7, r1
 80099ce:	4a76      	ldr	r2, [pc, #472]	@ (8009ba8 <HAL_UART_MspInit+0x244>)
 80099d0:	0019      	movs	r1, r3
 80099d2:	0010      	movs	r0, r2
 80099d4:	f001 fdf4 	bl	800b5c0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80099d8:	e0dd      	b.n	8009b96 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a73      	ldr	r2, [pc, #460]	@ (8009bac <HAL_UART_MspInit+0x248>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d12b      	bne.n	8009a3c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80099e4:	4b6f      	ldr	r3, [pc, #444]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 80099e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099e8:	4b6e      	ldr	r3, [pc, #440]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 80099ea:	2180      	movs	r1, #128	@ 0x80
 80099ec:	01c9      	lsls	r1, r1, #7
 80099ee:	430a      	orrs	r2, r1
 80099f0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099f2:	4b6c      	ldr	r3, [pc, #432]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 80099f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f6:	4b6b      	ldr	r3, [pc, #428]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 80099f8:	2101      	movs	r1, #1
 80099fa:	430a      	orrs	r2, r1
 80099fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80099fe:	4b69      	ldr	r3, [pc, #420]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a02:	2201      	movs	r2, #1
 8009a04:	4013      	ands	r3, r2
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009a0a:	211c      	movs	r1, #28
 8009a0c:	187b      	adds	r3, r7, r1
 8009a0e:	22c0      	movs	r2, #192	@ 0xc0
 8009a10:	00d2      	lsls	r2, r2, #3
 8009a12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a14:	187b      	adds	r3, r7, r1
 8009a16:	2202      	movs	r2, #2
 8009a18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a1a:	187b      	adds	r3, r7, r1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a20:	187b      	adds	r3, r7, r1
 8009a22:	2203      	movs	r2, #3
 8009a24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8009a26:	187b      	adds	r3, r7, r1
 8009a28:	2204      	movs	r2, #4
 8009a2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a2c:	187a      	adds	r2, r7, r1
 8009a2e:	23a0      	movs	r3, #160	@ 0xa0
 8009a30:	05db      	lsls	r3, r3, #23
 8009a32:	0011      	movs	r1, r2
 8009a34:	0018      	movs	r0, r3
 8009a36:	f001 fdc3 	bl	800b5c0 <HAL_GPIO_Init>
}
 8009a3a:	e0ac      	b.n	8009b96 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a5b      	ldr	r2, [pc, #364]	@ (8009bb0 <HAL_UART_MspInit+0x24c>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d000      	beq.n	8009a48 <HAL_UART_MspInit+0xe4>
 8009a46:	e0a6      	b.n	8009b96 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009a48:	4b56      	ldr	r3, [pc, #344]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a4c:	4b55      	ldr	r3, [pc, #340]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a4e:	2180      	movs	r1, #128	@ 0x80
 8009a50:	0309      	lsls	r1, r1, #12
 8009a52:	430a      	orrs	r2, r1
 8009a54:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a56:	4b53      	ldr	r3, [pc, #332]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5a:	4b52      	ldr	r3, [pc, #328]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a62:	4b50      	ldr	r3, [pc, #320]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a66:	2201      	movs	r2, #1
 8009a68:	4013      	ands	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a72:	4b4c      	ldr	r3, [pc, #304]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a74:	2104      	movs	r1, #4
 8009a76:	430a      	orrs	r2, r1
 8009a78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8009ba4 <HAL_UART_MspInit+0x240>)
 8009a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7e:	2204      	movs	r2, #4
 8009a80:	4013      	ands	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009a86:	241c      	movs	r4, #28
 8009a88:	193b      	adds	r3, r7, r4
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a8e:	193b      	adds	r3, r7, r4
 8009a90:	2202      	movs	r2, #2
 8009a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a94:	193b      	adds	r3, r7, r4
 8009a96:	2200      	movs	r2, #0
 8009a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a9a:	193b      	adds	r3, r7, r4
 8009a9c:	2203      	movs	r2, #3
 8009a9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009aa0:	193b      	adds	r3, r7, r4
 8009aa2:	2206      	movs	r2, #6
 8009aa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aa6:	193a      	adds	r2, r7, r4
 8009aa8:	23a0      	movs	r3, #160	@ 0xa0
 8009aaa:	05db      	lsls	r3, r3, #23
 8009aac:	0011      	movs	r1, r2
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f001 fd86 	bl	800b5c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009ab4:	0021      	movs	r1, r4
 8009ab6:	187b      	adds	r3, r7, r1
 8009ab8:	2280      	movs	r2, #128	@ 0x80
 8009aba:	00d2      	lsls	r2, r2, #3
 8009abc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009abe:	187b      	adds	r3, r7, r1
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac4:	187b      	adds	r3, r7, r1
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aca:	187b      	adds	r3, r7, r1
 8009acc:	2203      	movs	r2, #3
 8009ace:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009ad0:	187b      	adds	r3, r7, r1
 8009ad2:	2206      	movs	r2, #6
 8009ad4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ad6:	187b      	adds	r3, r7, r1
 8009ad8:	4a33      	ldr	r2, [pc, #204]	@ (8009ba8 <HAL_UART_MspInit+0x244>)
 8009ada:	0019      	movs	r1, r3
 8009adc:	0010      	movs	r0, r2
 8009ade:	f001 fd6f 	bl	800b5c0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8009ae2:	4b34      	ldr	r3, [pc, #208]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009ae4:	4a34      	ldr	r2, [pc, #208]	@ (8009bb8 <HAL_UART_MspInit+0x254>)
 8009ae6:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8009ae8:	4b32      	ldr	r3, [pc, #200]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009aea:	220c      	movs	r2, #12
 8009aec:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009aee:	4b31      	ldr	r3, [pc, #196]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009af4:	4b2f      	ldr	r3, [pc, #188]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009afa:	4b2e      	ldr	r3, [pc, #184]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009afc:	2280      	movs	r2, #128	@ 0x80
 8009afe:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b00:	4b2c      	ldr	r3, [pc, #176]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b06:	4b2b      	ldr	r3, [pc, #172]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8009b0c:	4b29      	ldr	r3, [pc, #164]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009b0e:	2220      	movs	r2, #32
 8009b10:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009b12:	4b28      	ldr	r3, [pc, #160]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009b18:	4b26      	ldr	r3, [pc, #152]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f001 f8d6 	bl	800accc <HAL_DMA_Init>
 8009b20:	1e03      	subs	r3, r0, #0
 8009b22:	d001      	beq.n	8009b28 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8009b24:	f7fc fe02 	bl	800672c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a22      	ldr	r2, [pc, #136]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009b2c:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b2e:	4b21      	ldr	r3, [pc, #132]	@ (8009bb4 <HAL_UART_MspInit+0x250>)
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8009b34:	4b21      	ldr	r3, [pc, #132]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b36:	4a22      	ldr	r2, [pc, #136]	@ (8009bc0 <HAL_UART_MspInit+0x25c>)
 8009b38:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8009b3a:	4b20      	ldr	r3, [pc, #128]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b3c:	220c      	movs	r2, #12
 8009b3e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009b40:	4b1e      	ldr	r3, [pc, #120]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b42:	2210      	movs	r2, #16
 8009b44:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b46:	4b1d      	ldr	r3, [pc, #116]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b4e:	2280      	movs	r2, #128	@ 0x80
 8009b50:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b52:	4b1a      	ldr	r3, [pc, #104]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b58:	4b18      	ldr	r3, [pc, #96]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009b5e:	4b17      	ldr	r3, [pc, #92]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009b64:	4b15      	ldr	r3, [pc, #84]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8009b6a:	4b14      	ldr	r3, [pc, #80]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f001 f8ad 	bl	800accc <HAL_DMA_Init>
 8009b72:	1e03      	subs	r3, r0, #0
 8009b74:	d001      	beq.n	8009b7a <HAL_UART_MspInit+0x216>
      Error_Handler();
 8009b76:	f7fc fdd9 	bl	800672c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b7e:	671a      	str	r2, [r3, #112]	@ 0x70
 8009b80:	4b0e      	ldr	r3, [pc, #56]	@ (8009bbc <HAL_UART_MspInit+0x258>)
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8009b86:	2200      	movs	r2, #0
 8009b88:	2100      	movs	r1, #0
 8009b8a:	200e      	movs	r0, #14
 8009b8c:	f001 f86c 	bl	800ac68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009b90:	200e      	movs	r0, #14
 8009b92:	f001 f87e 	bl	800ac92 <HAL_NVIC_EnableIRQ>
}
 8009b96:	46c0      	nop			@ (mov r8, r8)
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	b00d      	add	sp, #52	@ 0x34
 8009b9c:	bd90      	pop	{r4, r7, pc}
 8009b9e:	46c0      	nop			@ (mov r8, r8)
 8009ba0:	40004800 	.word	0x40004800
 8009ba4:	40021000 	.word	0x40021000
 8009ba8:	50000800 	.word	0x50000800
 8009bac:	40013800 	.word	0x40013800
 8009bb0:	40004c00 	.word	0x40004c00
 8009bb4:	20002aac 	.word	0x20002aac
 8009bb8:	4002006c 	.word	0x4002006c
 8009bbc:	20002af4 	.word	0x20002af4
 8009bc0:	40020080 	.word	0x40020080

08009bc4 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 50

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009bcc:	f000 fbd6 	bl	800a37c <HAL_GetTick>
 8009bd0:	0003      	movs	r3, r0
 8009bd2:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8009bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c48 <TimestampIsReached+0x84>)
 8009bd6:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d307      	bcc.n	8009bf0 <TimestampIsReached+0x2c>
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d901      	bls.n	8009bf0 <TimestampIsReached+0x2c>
 8009bec:	2201      	movs	r2, #1
 8009bee:	e000      	b.n	8009bf2 <TimestampIsReached+0x2e>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	230f      	movs	r3, #15
 8009bf4:	18fb      	adds	r3, r7, r3
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	781a      	ldrb	r2, [r3, #0]
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	400a      	ands	r2, r1
 8009bfe:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d207      	bcs.n	8009c18 <TimestampIsReached+0x54>
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d201      	bcs.n	8009c18 <TimestampIsReached+0x54>
 8009c14:	2201      	movs	r2, #1
 8009c16:	e000      	b.n	8009c1a <TimestampIsReached+0x56>
 8009c18:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8009c1a:	200e      	movs	r0, #14
 8009c1c:	183b      	adds	r3, r7, r0
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	2101      	movs	r1, #1
 8009c24:	400a      	ands	r2, r1
 8009c26:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8009c28:	230f      	movs	r3, #15
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d103      	bne.n	8009c3a <TimestampIsReached+0x76>
 8009c32:	183b      	adds	r3, r7, r0
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	0018      	movs	r0, r3
 8009c42:	46bd      	mov	sp, r7
 8009c44:	b006      	add	sp, #24
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	7fffffff 	.word	0x7fffffff

08009c4c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8009c54:	f000 fb92 	bl	800a37c <HAL_GetTick>
 8009c58:	0002      	movs	r2, r0
 8009c5a:	4904      	ldr	r1, [pc, #16]	@ (8009c6c <AddTimestamp+0x20>)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f00e fc22 	bl	80184a8 <siprintf>
}
 8009c64:	46c0      	nop			@ (mov r8, r8)
 8009c66:	46bd      	mov	sp, r7
 8009c68:	b002      	add	sp, #8
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	0801be68 	.word	0x0801be68

08009c70 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8009c70:	b40c      	push	{r2, r3}
 8009c72:	b590      	push	{r4, r7, lr}
 8009c74:	b093      	sub	sp, #76	@ 0x4c
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	0002      	movs	r2, r0
 8009c7a:	6039      	str	r1, [r7, #0]
 8009c7c:	1dfb      	adds	r3, r7, #7
 8009c7e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8009c80:	4b1f      	ldr	r3, [pc, #124]	@ (8009d00 <CreateLine+0x90>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	1dfa      	adds	r2, r7, #7
 8009c86:	7812      	ldrb	r2, [r2, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d832      	bhi.n	8009cf2 <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	491d      	ldr	r1, [pc, #116]	@ (8009d04 <CreateLine+0x94>)
 8009c90:	2410      	movs	r4, #16
 8009c92:	193b      	adds	r3, r7, r4
 8009c94:	0018      	movs	r0, r3
 8009c96:	f00e fc07 	bl	80184a8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8009c9a:	4b19      	ldr	r3, [pc, #100]	@ (8009d00 <CreateLine+0x90>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d909      	bls.n	8009cb6 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8009ca2:	193b      	adds	r3, r7, r4
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	f7f6 fa2f 	bl	8000108 <strlen>
 8009caa:	0002      	movs	r2, r0
 8009cac:	193b      	adds	r3, r7, r4
 8009cae:	189b      	adds	r3, r3, r2
 8009cb0:	0018      	movs	r0, r3
 8009cb2:	f7ff ffcb 	bl	8009c4c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8009cb6:	2410      	movs	r4, #16
 8009cb8:	193b      	adds	r3, r7, r4
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f7f6 fa24 	bl	8000108 <strlen>
 8009cc0:	0003      	movs	r3, r0
 8009cc2:	647b      	str	r3, [r7, #68]	@ 0x44

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8009cc4:	2354      	movs	r3, #84	@ 0x54
 8009cc6:	2208      	movs	r2, #8
 8009cc8:	189b      	adds	r3, r3, r2
 8009cca:	19db      	adds	r3, r3, r7
 8009ccc:	60fb      	str	r3, [r7, #12]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8009cce:	193a      	adds	r2, r7, r4
 8009cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cd2:	18d0      	adds	r0, r2, r3
 8009cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cd6:	2232      	movs	r2, #50	@ 0x32
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	0019      	movs	r1, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ce0:	f00e fc7a 	bl	80185d8 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8009ce4:	193a      	adds	r2, r7, r4
 8009ce6:	4b08      	ldr	r3, [pc, #32]	@ (8009d08 <CreateLine+0x98>)
 8009ce8:	0011      	movs	r1, r2
 8009cea:	0018      	movs	r0, r3
 8009cec:	f00e fbcc 	bl	8018488 <iprintf>
 8009cf0:	e000      	b.n	8009cf4 <CreateLine+0x84>
    return;
 8009cf2:	46c0      	nop			@ (mov r8, r8)
}
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b013      	add	sp, #76	@ 0x4c
 8009cf8:	bc90      	pop	{r4, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	b002      	add	sp, #8
 8009cfe:	4718      	bx	r3
 8009d00:	20000060 	.word	0x20000060
 8009d04:	0801be74 	.word	0x0801be74
 8009d08:	0801be78 	.word	0x0801be78

08009d0c <_write>:

int _write(int fd, const void *buf, size_t count) {
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	4804      	ldr	r0, [pc, #16]	@ (8009d30 <_write+0x24>)
 8009d20:	2364      	movs	r3, #100	@ 0x64
 8009d22:	f007 fea5 	bl	8011a70 <HAL_UART_Transmit>
  return count;
 8009d26:	687b      	ldr	r3, [r7, #4]
}
 8009d28:	0018      	movs	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	b004      	add	sp, #16
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	2000293c 	.word	0x2000293c

08009d34 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	1dfb      	adds	r3, r7, #7
 8009d3e:	701a      	strb	r2, [r3, #0]
 8009d40:	4b03      	ldr	r3, [pc, #12]	@ (8009d50 <SetVerboseLevel+0x1c>)
 8009d42:	1dfa      	adds	r2, r7, #7
 8009d44:	7812      	ldrb	r2, [r2, #0]
 8009d46:	701a      	strb	r2, [r3, #0]
 8009d48:	46c0      	nop			@ (mov r8, r8)
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	b002      	add	sp, #8
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000060 	.word	0x20000060

08009d54 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009d58:	f000 fb10 	bl	800a37c <HAL_GetTick>
 8009d5c:	0003      	movs	r3, r0
}
 8009d5e:	0018      	movs	r0, r3
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8009d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8009da8 <BinaryReleaseInfo+0x44>)
 8009d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8009dac <BinaryReleaseInfo+0x48>)
 8009d6e:	0019      	movs	r1, r3
 8009d70:	2002      	movs	r0, #2
 8009d72:	f7ff ff7d 	bl	8009c70 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8009d76:	480e      	ldr	r0, [pc, #56]	@ (8009db0 <BinaryReleaseInfo+0x4c>)
 8009d78:	4a0e      	ldr	r2, [pc, #56]	@ (8009db4 <BinaryReleaseInfo+0x50>)
 8009d7a:	490c      	ldr	r1, [pc, #48]	@ (8009dac <BinaryReleaseInfo+0x48>)
 8009d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8009db8 <BinaryReleaseInfo+0x54>)
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	0003      	movs	r3, r0
 8009d82:	2002      	movs	r0, #2
 8009d84:	f7ff ff74 	bl	8009c70 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009d88:	4a0c      	ldr	r2, [pc, #48]	@ (8009dbc <BinaryReleaseInfo+0x58>)
 8009d8a:	4b08      	ldr	r3, [pc, #32]	@ (8009dac <BinaryReleaseInfo+0x48>)
 8009d8c:	0019      	movs	r1, r3
 8009d8e:	2002      	movs	r0, #2
 8009d90:	f7ff ff6e 	bl	8009c70 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009d94:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <BinaryReleaseInfo+0x5c>)
 8009d96:	4a0b      	ldr	r2, [pc, #44]	@ (8009dc4 <BinaryReleaseInfo+0x60>)
 8009d98:	4904      	ldr	r1, [pc, #16]	@ (8009dac <BinaryReleaseInfo+0x48>)
 8009d9a:	2002      	movs	r0, #2
 8009d9c:	f7ff ff68 	bl	8009c70 <CreateLine>
}
 8009da0:	46c0      	nop			@ (mov r8, r8)
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	46c0      	nop			@ (mov r8, r8)
 8009da8:	0801be80 	.word	0x0801be80
 8009dac:	0801beac 	.word	0x0801beac
 8009db0:	0801beb0 	.word	0x0801beb0
 8009db4:	0801bebc 	.word	0x0801bebc
 8009db8:	0801bed0 	.word	0x0801bed0
 8009dbc:	0801bedc 	.word	0x0801bedc
 8009dc0:	0801bee8 	.word	0x0801bee8
 8009dc4:	0801bef0 	.word	0x0801bef0

08009dc8 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6039      	str	r1, [r7, #0]
 8009dd0:	0011      	movs	r1, r2
 8009dd2:	1dfb      	adds	r3, r7, #7
 8009dd4:	1c02      	adds	r2, r0, #0
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	1dbb      	adds	r3, r7, #6
 8009dda:	1c0a      	adds	r2, r1, #0
 8009ddc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8009dde:	4b0a      	ldr	r3, [pc, #40]	@ (8009e08 <ReadRegister+0x40>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8009de6:	4b08      	ldr	r3, [pc, #32]	@ (8009e08 <ReadRegister+0x40>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	1dba      	adds	r2, r7, #6
 8009dec:	7814      	ldrb	r4, [r2, #0]
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	1dfa      	adds	r2, r7, #7
 8009df2:	7810      	ldrb	r0, [r2, #0]
 8009df4:	0022      	movs	r2, r4
 8009df6:	4798      	blx	r3
 8009df8:	0003      	movs	r3, r0
 8009dfa:	e000      	b.n	8009dfe <ReadRegister+0x36>
	}
	return false;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	0018      	movs	r0, r3
 8009e00:	46bd      	mov	sp, r7
 8009e02:	b003      	add	sp, #12
 8009e04:	bd90      	pop	{r4, r7, pc}
 8009e06:	46c0      	nop			@ (mov r8, r8)
 8009e08:	20002b3c 	.word	0x20002b3c

08009e0c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009e0c:	b590      	push	{r4, r7, lr}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6039      	str	r1, [r7, #0]
 8009e14:	0011      	movs	r1, r2
 8009e16:	1dfb      	adds	r3, r7, #7
 8009e18:	1c02      	adds	r2, r0, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
 8009e1c:	1dbb      	adds	r3, r7, #6
 8009e1e:	1c0a      	adds	r2, r1, #0
 8009e20:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009e22:	4b0a      	ldr	r3, [pc, #40]	@ (8009e4c <WriteRegister+0x40>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8009e2a:	4b08      	ldr	r3, [pc, #32]	@ (8009e4c <WriteRegister+0x40>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	1dba      	adds	r2, r7, #6
 8009e30:	7814      	ldrb	r4, [r2, #0]
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	1dfa      	adds	r2, r7, #7
 8009e36:	7810      	ldrb	r0, [r2, #0]
 8009e38:	0022      	movs	r2, r4
 8009e3a:	4798      	blx	r3
 8009e3c:	0003      	movs	r3, r0
 8009e3e:	e000      	b.n	8009e42 <WriteRegister+0x36>
  }
  return false;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	0018      	movs	r0, r3
 8009e44:	46bd      	mov	sp, r7
 8009e46:	b003      	add	sp, #12
 8009e48:	bd90      	pop	{r4, r7, pc}
 8009e4a:	46c0      	nop			@ (mov r8, r8)
 8009e4c:	20002b40 	.word	0x20002b40

08009e50 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	000a      	movs	r2, r1
 8009e5a:	1cfb      	adds	r3, r7, #3
 8009e5c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8009e5e:	230f      	movs	r3, #15
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	22ff      	movs	r2, #255	@ 0xff
 8009e64:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009e66:	230e      	movs	r3, #14
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	e037      	b.n	8009ee0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009e70:	230e      	movs	r3, #14
 8009e72:	18fb      	adds	r3, r7, r3
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	18d3      	adds	r3, r2, r3
 8009e7a:	7819      	ldrb	r1, [r3, #0]
 8009e7c:	220f      	movs	r2, #15
 8009e7e:	18bb      	adds	r3, r7, r2
 8009e80:	18ba      	adds	r2, r7, r2
 8009e82:	7812      	ldrb	r2, [r2, #0]
 8009e84:	404a      	eors	r2, r1
 8009e86:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009e88:	230d      	movs	r3, #13
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	e01b      	b.n	8009eca <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8009e92:	210f      	movs	r1, #15
 8009e94:	187b      	adds	r3, r7, r1
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	b25b      	sxtb	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	da09      	bge.n	8009eb2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8009e9e:	187b      	adds	r3, r7, r1
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	b25b      	sxtb	r3, r3
 8009ea6:	2231      	movs	r2, #49	@ 0x31
 8009ea8:	4053      	eors	r3, r2
 8009eaa:	b25a      	sxtb	r2, r3
 8009eac:	187b      	adds	r3, r7, r1
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	e005      	b.n	8009ebe <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009eb2:	230f      	movs	r3, #15
 8009eb4:	18fa      	adds	r2, r7, r3
 8009eb6:	18fb      	adds	r3, r7, r3
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	18db      	adds	r3, r3, r3
 8009ebc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009ebe:	210d      	movs	r1, #13
 8009ec0:	187b      	adds	r3, r7, r1
 8009ec2:	781a      	ldrb	r2, [r3, #0]
 8009ec4:	187b      	adds	r3, r7, r1
 8009ec6:	3201      	adds	r2, #1
 8009ec8:	701a      	strb	r2, [r3, #0]
 8009eca:	230d      	movs	r3, #13
 8009ecc:	18fb      	adds	r3, r7, r3
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b07      	cmp	r3, #7
 8009ed2:	d9de      	bls.n	8009e92 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009ed4:	210e      	movs	r1, #14
 8009ed6:	187b      	adds	r3, r7, r1
 8009ed8:	781a      	ldrb	r2, [r3, #0]
 8009eda:	187b      	adds	r3, r7, r1
 8009edc:	3201      	adds	r2, #1
 8009ede:	701a      	strb	r2, [r3, #0]
 8009ee0:	230e      	movs	r3, #14
 8009ee2:	18fa      	adds	r2, r7, r3
 8009ee4:	1cfb      	adds	r3, r7, #3
 8009ee6:	7812      	ldrb	r2, [r2, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d3c0      	bcc.n	8009e70 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009eee:	230f      	movs	r3, #15
 8009ef0:	18fb      	adds	r3, r7, r3
 8009ef2:	781b      	ldrb	r3, [r3, #0]
}
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b004      	add	sp, #16
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8009f06:	4b0a      	ldr	r3, [pc, #40]	@ (8009f30 <HIDS_Init+0x34>)
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8009f0c:	4b09      	ldr	r3, [pc, #36]	@ (8009f34 <HIDS_Init+0x38>)
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8009f12:	4b09      	ldr	r3, [pc, #36]	@ (8009f38 <HIDS_Init+0x3c>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	0018      	movs	r0, r3
 8009f18:	f000 f8d0 	bl	800a0bc <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8009f1c:	4b07      	ldr	r3, [pc, #28]	@ (8009f3c <HIDS_Init+0x40>)
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	0018      	movs	r0, r3
 8009f22:	f000 f82b 	bl	8009f7c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8009f26:	46c0      	nop			@ (mov r8, r8)
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	b002      	add	sp, #8
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	46c0      	nop			@ (mov r8, r8)
 8009f30:	20002b3c 	.word	0x20002b3c
 8009f34:	20002b40 	.word	0x20002b40
 8009f38:	20000062 	.word	0x20000062
 8009f3c:	20000061 	.word	0x20000061

08009f40 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8009f44:	f7ff ff06 	bl	8009d54 <GetCurrentHalTicks>
 8009f48:	0002      	movs	r2, r0
 8009f4a:	4b08      	ldr	r3, [pc, #32]	@ (8009f6c <HIDS_StartMeasurement+0x2c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	18d2      	adds	r2, r2, r3
 8009f50:	4b07      	ldr	r3, [pc, #28]	@ (8009f70 <HIDS_StartMeasurement+0x30>)
 8009f52:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009f54:	4b07      	ldr	r3, [pc, #28]	@ (8009f74 <HIDS_StartMeasurement+0x34>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	0019      	movs	r1, r3
 8009f5a:	2044      	movs	r0, #68	@ 0x44
 8009f5c:	f7ff ff56 	bl	8009e0c <WriteRegister>
  MeasurementDone = false;
 8009f60:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <HIDS_StartMeasurement+0x38>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
}
 8009f66:	46c0      	nop			@ (mov r8, r8)
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000068 	.word	0x20000068
 8009f70:	20000064 	.word	0x20000064
 8009f74:	20000062 	.word	0x20000062
 8009f78:	20002b52 	.word	0x20002b52

08009f7c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	0002      	movs	r2, r0
 8009f84:	1dfb      	adds	r3, r7, #7
 8009f86:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009f88:	4b03      	ldr	r3, [pc, #12]	@ (8009f98 <HIDS_SetHeaterMode+0x1c>)
 8009f8a:	1dfa      	adds	r2, r7, #7
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	701a      	strb	r2, [r3, #0]
}
 8009f90:	46c0      	nop			@ (mov r8, r8)
 8009f92:	46bd      	mov	sp, r7
 8009f94:	b002      	add	sp, #8
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20000061 	.word	0x20000061

08009f9c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	781a      	ldrb	r2, [r3, #0]
 8009fa8:	210c      	movs	r1, #12
 8009faa:	187b      	adds	r3, r7, r1
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	785a      	ldrb	r2, [r3, #1]
 8009fb2:	187b      	adds	r3, r7, r1
 8009fb4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009fb6:	240f      	movs	r4, #15
 8009fb8:	193b      	adds	r3, r7, r4
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	7892      	ldrb	r2, [r2, #2]
 8009fbe:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8009fc0:	187b      	adds	r3, r7, r1
 8009fc2:	2102      	movs	r1, #2
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f7ff ff43 	bl	8009e50 <CalculateCRC>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	001a      	movs	r2, r3
 8009fce:	193b      	adds	r3, r7, r4
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d007      	beq.n	8009fe6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009fd6:	4a17      	ldr	r2, [pc, #92]	@ (800a034 <CheckCRC+0x98>)
 8009fd8:	4b17      	ldr	r3, [pc, #92]	@ (800a038 <CheckCRC+0x9c>)
 8009fda:	0019      	movs	r1, r3
 8009fdc:	2001      	movs	r0, #1
 8009fde:	f7ff fe47 	bl	8009c70 <CreateLine>
		return false;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e021      	b.n	800a02a <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	78da      	ldrb	r2, [r3, #3]
 8009fea:	2108      	movs	r1, #8
 8009fec:	187b      	adds	r3, r7, r1
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	791a      	ldrb	r2, [r3, #4]
 8009ff4:	187b      	adds	r3, r7, r1
 8009ff6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8009ff8:	240e      	movs	r4, #14
 8009ffa:	193b      	adds	r3, r7, r4
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	7952      	ldrb	r2, [r2, #5]
 800a000:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800a002:	187b      	adds	r3, r7, r1
 800a004:	2102      	movs	r1, #2
 800a006:	0018      	movs	r0, r3
 800a008:	f7ff ff22 	bl	8009e50 <CalculateCRC>
 800a00c:	0003      	movs	r3, r0
 800a00e:	001a      	movs	r2, r3
 800a010:	193b      	adds	r3, r7, r4
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	4293      	cmp	r3, r2
 800a016:	d007      	beq.n	800a028 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 800a018:	4a08      	ldr	r2, [pc, #32]	@ (800a03c <CheckCRC+0xa0>)
 800a01a:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <CheckCRC+0x9c>)
 800a01c:	0019      	movs	r1, r3
 800a01e:	2001      	movs	r0, #1
 800a020:	f7ff fe26 	bl	8009c70 <CreateLine>
		return false;
 800a024:	2300      	movs	r3, #0
 800a026:	e000      	b.n	800a02a <CheckCRC+0x8e>
	}
	return true;
 800a028:	2301      	movs	r3, #1
}
 800a02a:	0018      	movs	r0, r3
 800a02c:	46bd      	mov	sp, r7
 800a02e:	b005      	add	sp, #20
 800a030:	bd90      	pop	{r4, r7, pc}
 800a032:	46c0      	nop			@ (mov r8, r8)
 800a034:	0801bf2c 	.word	0x0801bf2c
 800a038:	0801bf54 	.word	0x0801bf54
 800a03c:	0801bf58 	.word	0x0801bf58

0800a040 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800a046:	1dbb      	adds	r3, r7, #6
 800a048:	2289      	movs	r2, #137	@ 0x89
 800a04a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800a04c:	1dbb      	adds	r3, r7, #6
 800a04e:	2201      	movs	r2, #1
 800a050:	0019      	movs	r1, r3
 800a052:	2044      	movs	r0, #68	@ 0x44
 800a054:	f7ff feda 	bl	8009e0c <WriteRegister>
	HAL_Delay(30);
 800a058:	201e      	movs	r0, #30
 800a05a:	f000 f999 	bl	800a390 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800a05e:	4b14      	ldr	r3, [pc, #80]	@ (800a0b0 <HIDS_DeviceConnected+0x70>)
 800a060:	2206      	movs	r2, #6
 800a062:	0019      	movs	r1, r3
 800a064:	2044      	movs	r0, #68	@ 0x44
 800a066:	f7ff feaf 	bl	8009dc8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800a06a:	1dfb      	adds	r3, r7, #7
 800a06c:	2200      	movs	r2, #0
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	e011      	b.n	800a096 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800a072:	1dfb      	adds	r3, r7, #7
 800a074:	7818      	ldrb	r0, [r3, #0]
 800a076:	1dfb      	adds	r3, r7, #7
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b0 <HIDS_DeviceConnected+0x70>)
 800a07c:	5cd3      	ldrb	r3, [r2, r3]
 800a07e:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b4 <HIDS_DeviceConnected+0x74>)
 800a080:	490d      	ldr	r1, [pc, #52]	@ (800a0b8 <HIDS_DeviceConnected+0x78>)
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	0003      	movs	r3, r0
 800a086:	2002      	movs	r0, #2
 800a088:	f7ff fdf2 	bl	8009c70 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800a08c:	1dfb      	adds	r3, r7, #7
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	1dfb      	adds	r3, r7, #7
 800a092:	3201      	adds	r2, #1
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	1dfb      	adds	r3, r7, #7
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	d9e9      	bls.n	800a072 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800a09e:	4b04      	ldr	r3, [pc, #16]	@ (800a0b0 <HIDS_DeviceConnected+0x70>)
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f7ff ff7b 	bl	8009f9c <CheckCRC>
 800a0a6:	0003      	movs	r3, r0
}
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	b002      	add	sp, #8
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20002b44 	.word	0x20002b44
 800a0b4:	0801bf84 	.word	0x0801bf84
 800a0b8:	0801bf28 	.word	0x0801bf28

0800a0bc <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	0002      	movs	r2, r0
 800a0c4:	1dfb      	adds	r3, r7, #7
 800a0c6:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800a0c8:	4b03      	ldr	r3, [pc, #12]	@ (800a0d8 <HIDS_SetMeasurementMode+0x1c>)
 800a0ca:	1dfa      	adds	r2, r7, #7
 800a0cc:	7812      	ldrb	r2, [r2, #0]
 800a0ce:	701a      	strb	r2, [r3, #0]
}
 800a0d0:	46c0      	nop			@ (mov r8, r8)
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	b002      	add	sp, #8
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000062 	.word	0x20000062

0800a0dc <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800a0e0:	4b04      	ldr	r3, [pc, #16]	@ (800a0f4 <HIDS_MeasurementReady+0x18>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f7ff fd6d 	bl	8009bc4 <TimestampIsReached>
 800a0ea:	0003      	movs	r3, r0
}
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	20000064 	.word	0x20000064

0800a0f8 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800a0f8:	b590      	push	{r4, r7, lr}
 800a0fa:	b089      	sub	sp, #36	@ 0x24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800a102:	4b4e      	ldr	r3, [pc, #312]	@ (800a23c <HIDS_GetMeasurementValues+0x144>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <HIDS_GetMeasurementValues+0x16>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e091      	b.n	800a232 <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 800a10e:	f7ff ffe5 	bl	800a0dc <HIDS_MeasurementReady>
 800a112:	0003      	movs	r3, r0
 800a114:	001a      	movs	r2, r3
 800a116:	2301      	movs	r3, #1
 800a118:	4053      	eors	r3, r2
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <HIDS_GetMeasurementValues+0x2c>
 800a120:	2300      	movs	r3, #0
 800a122:	e086      	b.n	800a232 <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800a124:	4b46      	ldr	r3, [pc, #280]	@ (800a240 <HIDS_GetMeasurementValues+0x148>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	4b46      	ldr	r3, [pc, #280]	@ (800a244 <HIDS_GetMeasurementValues+0x14c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	0019      	movs	r1, r3
 800a12e:	0010      	movs	r0, r2
 800a130:	f7f6 f806 	bl	8000140 <__udivsi3>
 800a134:	0003      	movs	r3, r0
 800a136:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800a138:	2317      	movs	r3, #23
 800a13a:	18fc      	adds	r4, r7, r3
 800a13c:	4b42      	ldr	r3, [pc, #264]	@ (800a248 <HIDS_GetMeasurementValues+0x150>)
 800a13e:	2206      	movs	r2, #6
 800a140:	0019      	movs	r1, r3
 800a142:	2044      	movs	r0, #68	@ 0x44
 800a144:	f7ff fe40 	bl	8009dc8 <ReadRegister>
 800a148:	0003      	movs	r3, r0
 800a14a:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800a14c:	4b3e      	ldr	r3, [pc, #248]	@ (800a248 <HIDS_GetMeasurementValues+0x150>)
 800a14e:	0018      	movs	r0, r3
 800a150:	f7ff ff24 	bl	8009f9c <CheckCRC>
 800a154:	0003      	movs	r3, r0
 800a156:	001a      	movs	r2, r3
 800a158:	2301      	movs	r3, #1
 800a15a:	4053      	eors	r3, r2
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d011      	beq.n	800a186 <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800a162:	231f      	movs	r3, #31
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	2200      	movs	r2, #0
 800a168:	701a      	strb	r2, [r3, #0]
 800a16a:	e005      	b.n	800a178 <HIDS_GetMeasurementValues+0x80>
 800a16c:	211f      	movs	r1, #31
 800a16e:	187b      	adds	r3, r7, r1
 800a170:	781a      	ldrb	r2, [r3, #0]
 800a172:	187b      	adds	r3, r7, r1
 800a174:	3201      	adds	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	231f      	movs	r3, #31
 800a17a:	18fb      	adds	r3, r7, r3
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b05      	cmp	r3, #5
 800a180:	d9f4      	bls.n	800a16c <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800a182:	2300      	movs	r3, #0
 800a184:	e055      	b.n	800a232 <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800a186:	4b30      	ldr	r3, [pc, #192]	@ (800a248 <HIDS_GetMeasurementValues+0x150>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	021b      	lsls	r3, r3, #8
 800a18c:	4a2e      	ldr	r2, [pc, #184]	@ (800a248 <HIDS_GetMeasurementValues+0x150>)
 800a18e:	7852      	ldrb	r2, [r2, #1]
 800a190:	4313      	orrs	r3, r2
 800a192:	22af      	movs	r2, #175	@ 0xaf
 800a194:	4353      	muls	r3, r2
 800a196:	0018      	movs	r0, r3
 800a198:	f7f9 f890 	bl	80032bc <__aeabi_i2d>
 800a19c:	2200      	movs	r2, #0
 800a19e:	4b2b      	ldr	r3, [pc, #172]	@ (800a24c <HIDS_GetMeasurementValues+0x154>)
 800a1a0:	f7f7 fd86 	bl	8001cb0 <__aeabi_ddiv>
 800a1a4:	0002      	movs	r2, r0
 800a1a6:	000b      	movs	r3, r1
 800a1a8:	0010      	movs	r0, r2
 800a1aa:	0019      	movs	r1, r3
 800a1ac:	f7f9 f920 	bl	80033f0 <__aeabi_d2f>
 800a1b0:	1c03      	adds	r3, r0, #0
 800a1b2:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800a1b4:	4926      	ldr	r1, [pc, #152]	@ (800a250 <HIDS_GetMeasurementValues+0x158>)
 800a1b6:	6938      	ldr	r0, [r7, #16]
 800a1b8:	f7f6 ffae 	bl	8001118 <__aeabi_fsub>
 800a1bc:	1c03      	adds	r3, r0, #0
 800a1be:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800a1c0:	4b21      	ldr	r3, [pc, #132]	@ (800a248 <HIDS_GetMeasurementValues+0x150>)
 800a1c2:	78db      	ldrb	r3, [r3, #3]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	4a20      	ldr	r2, [pc, #128]	@ (800a248 <HIDS_GetMeasurementValues+0x150>)
 800a1c8:	7912      	ldrb	r2, [r2, #4]
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	0013      	movs	r3, r2
 800a1ce:	015b      	lsls	r3, r3, #5
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	189b      	adds	r3, r3, r2
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	f7f9 f870 	bl	80032bc <__aeabi_i2d>
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4b1b      	ldr	r3, [pc, #108]	@ (800a24c <HIDS_GetMeasurementValues+0x154>)
 800a1e0:	f7f7 fd66 	bl	8001cb0 <__aeabi_ddiv>
 800a1e4:	0002      	movs	r2, r0
 800a1e6:	000b      	movs	r3, r1
 800a1e8:	0010      	movs	r0, r2
 800a1ea:	0019      	movs	r1, r3
 800a1ec:	f7f9 f900 	bl	80033f0 <__aeabi_d2f>
 800a1f0:	1c03      	adds	r3, r0, #0
 800a1f2:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800a1f4:	4917      	ldr	r1, [pc, #92]	@ (800a254 <HIDS_GetMeasurementValues+0x15c>)
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7f6 ff8e 	bl	8001118 <__aeabi_fsub>
 800a1fc:	1c03      	adds	r3, r0, #0
 800a1fe:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	0011      	movs	r1, r2
 800a212:	0018      	movs	r0, r3
 800a214:	f7fe fd1c 	bl	8008c50 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	1c11      	adds	r1, r2, #0
 800a21e:	1c18      	adds	r0, r3, #0
 800a220:	f7f9 faba 	bl	8003798 <ESP_GetHT>

   measurements = 0;
 800a224:	4b0c      	ldr	r3, [pc, #48]	@ (800a258 <HIDS_GetMeasurementValues+0x160>)
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800a22a:	4b04      	ldr	r3, [pc, #16]	@ (800a23c <HIDS_GetMeasurementValues+0x144>)
 800a22c:	2201      	movs	r2, #1
 800a22e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800a230:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800a232:	0018      	movs	r0, r3
 800a234:	46bd      	mov	sp, r7
 800a236:	b009      	add	sp, #36	@ 0x24
 800a238:	bd90      	pop	{r4, r7, pc}
 800a23a:	46c0      	nop			@ (mov r8, r8)
 800a23c:	20002b52 	.word	0x20002b52
 800a240:	2000006c 	.word	0x2000006c
 800a244:	20000068 	.word	0x20000068
 800a248:	20002b4c 	.word	0x20002b4c
 800a24c:	40efffe0 	.word	0x40efffe0
 800a250:	42340000 	.word	0x42340000
 800a254:	40c00000 	.word	0x40c00000
 800a258:	20002b54 	.word	0x20002b54

0800a25c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800a25c:	480d      	ldr	r0, [pc, #52]	@ (800a294 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800a25e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a260:	f7ff f962 	bl	8009528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a264:	480c      	ldr	r0, [pc, #48]	@ (800a298 <LoopForever+0x6>)
  ldr r1, =_edata
 800a266:	490d      	ldr	r1, [pc, #52]	@ (800a29c <LoopForever+0xa>)
  ldr r2, =_sidata
 800a268:	4a0d      	ldr	r2, [pc, #52]	@ (800a2a0 <LoopForever+0xe>)
  movs r3, #0
 800a26a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a26c:	e002      	b.n	800a274 <LoopCopyDataInit>

0800a26e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a26e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a272:	3304      	adds	r3, #4

0800a274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a278:	d3f9      	bcc.n	800a26e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a27a:	4a0a      	ldr	r2, [pc, #40]	@ (800a2a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a27c:	4c0a      	ldr	r4, [pc, #40]	@ (800a2a8 <LoopForever+0x16>)
  movs r3, #0
 800a27e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a280:	e001      	b.n	800a286 <LoopFillZerobss>

0800a282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a284:	3204      	adds	r2, #4

0800a286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a288:	d3fb      	bcc.n	800a282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a28a:	f00e fa49 	bl	8018720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a28e:	f7fc f90d 	bl	80064ac <main>

0800a292 <LoopForever>:

LoopForever:
    b LoopForever
 800a292:	e7fe      	b.n	800a292 <LoopForever>
   ldr   r0, =_estack
 800a294:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800a298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a29c:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 800a2a0:	0801c710 	.word	0x0801c710
  ldr r2, =_sbss
 800a2a4:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800a2a8:	20003f5c 	.word	0x20003f5c

0800a2ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a2ac:	e7fe      	b.n	800a2ac <ADC1_COMP_IRQHandler>
	...

0800a2b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a2b6:	1dfb      	adds	r3, r7, #7
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ec <HAL_Init+0x3c>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ec <HAL_Init+0x3c>)
 800a2c2:	2140      	movs	r1, #64	@ 0x40
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a2c8:	2003      	movs	r0, #3
 800a2ca:	f000 f811 	bl	800a2f0 <HAL_InitTick>
 800a2ce:	1e03      	subs	r3, r0, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800a2d2:	1dfb      	adds	r3, r7, #7
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e001      	b.n	800a2de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a2da:	f7fe fffb 	bl	80092d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a2de:	1dfb      	adds	r3, r7, #7
 800a2e0:	781b      	ldrb	r3, [r3, #0]
}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b002      	add	sp, #8
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	46c0      	nop			@ (mov r8, r8)
 800a2ec:	40022000 	.word	0x40022000

0800a2f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a2f0:	b590      	push	{r4, r7, lr}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a2f8:	4b14      	ldr	r3, [pc, #80]	@ (800a34c <HAL_InitTick+0x5c>)
 800a2fa:	681c      	ldr	r4, [r3, #0]
 800a2fc:	4b14      	ldr	r3, [pc, #80]	@ (800a350 <HAL_InitTick+0x60>)
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	0019      	movs	r1, r3
 800a302:	23fa      	movs	r3, #250	@ 0xfa
 800a304:	0098      	lsls	r0, r3, #2
 800a306:	f7f5 ff1b 	bl	8000140 <__udivsi3>
 800a30a:	0003      	movs	r3, r0
 800a30c:	0019      	movs	r1, r3
 800a30e:	0020      	movs	r0, r4
 800a310:	f7f5 ff16 	bl	8000140 <__udivsi3>
 800a314:	0003      	movs	r3, r0
 800a316:	0018      	movs	r0, r3
 800a318:	f000 fccb 	bl	800acb2 <HAL_SYSTICK_Config>
 800a31c:	1e03      	subs	r3, r0, #0
 800a31e:	d001      	beq.n	800a324 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e00f      	b.n	800a344 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b03      	cmp	r3, #3
 800a328:	d80b      	bhi.n	800a342 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	2301      	movs	r3, #1
 800a32e:	425b      	negs	r3, r3
 800a330:	2200      	movs	r2, #0
 800a332:	0018      	movs	r0, r3
 800a334:	f000 fc98 	bl	800ac68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a338:	4b06      	ldr	r3, [pc, #24]	@ (800a354 <HAL_InitTick+0x64>)
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	e000      	b.n	800a344 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
}
 800a344:	0018      	movs	r0, r3
 800a346:	46bd      	mov	sp, r7
 800a348:	b003      	add	sp, #12
 800a34a:	bd90      	pop	{r4, r7, pc}
 800a34c:	2000005c 	.word	0x2000005c
 800a350:	20000074 	.word	0x20000074
 800a354:	20000070 	.word	0x20000070

0800a358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a35c:	4b05      	ldr	r3, [pc, #20]	@ (800a374 <HAL_IncTick+0x1c>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	001a      	movs	r2, r3
 800a362:	4b05      	ldr	r3, [pc, #20]	@ (800a378 <HAL_IncTick+0x20>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	18d2      	adds	r2, r2, r3
 800a368:	4b03      	ldr	r3, [pc, #12]	@ (800a378 <HAL_IncTick+0x20>)
 800a36a:	601a      	str	r2, [r3, #0]
}
 800a36c:	46c0      	nop			@ (mov r8, r8)
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	46c0      	nop			@ (mov r8, r8)
 800a374:	20000074 	.word	0x20000074
 800a378:	20002b58 	.word	0x20002b58

0800a37c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	af00      	add	r7, sp, #0
  return uwTick;
 800a380:	4b02      	ldr	r3, [pc, #8]	@ (800a38c <HAL_GetTick+0x10>)
 800a382:	681b      	ldr	r3, [r3, #0]
}
 800a384:	0018      	movs	r0, r3
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	46c0      	nop			@ (mov r8, r8)
 800a38c:	20002b58 	.word	0x20002b58

0800a390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a398:	f7ff fff0 	bl	800a37c <HAL_GetTick>
 800a39c:	0003      	movs	r3, r0
 800a39e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	d005      	beq.n	800a3b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a3aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d4 <HAL_Delay+0x44>)
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	001a      	movs	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	189b      	adds	r3, r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a3b6:	46c0      	nop			@ (mov r8, r8)
 800a3b8:	f7ff ffe0 	bl	800a37c <HAL_GetTick>
 800a3bc:	0002      	movs	r2, r0
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d8f7      	bhi.n	800a3b8 <HAL_Delay+0x28>
  {
  }
}
 800a3c8:	46c0      	nop			@ (mov r8, r8)
 800a3ca:	46c0      	nop			@ (mov r8, r8)
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	b004      	add	sp, #16
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	46c0      	nop			@ (mov r8, r8)
 800a3d4:	20000074 	.word	0x20000074

0800a3d8 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800a3dc:	4b02      	ldr	r3, [pc, #8]	@ (800a3e8 <HAL_GetUIDw0+0x10>)
 800a3de:	681b      	ldr	r3, [r3, #0]
}
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	46c0      	nop			@ (mov r8, r8)
 800a3e8:	1ff80050 	.word	0x1ff80050

0800a3ec <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800a3f0:	4b02      	ldr	r3, [pc, #8]	@ (800a3fc <HAL_GetUIDw1+0x10>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
}
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	46c0      	nop			@ (mov r8, r8)
 800a3fc:	1ff80054 	.word	0x1ff80054

0800a400 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800a404:	4b02      	ldr	r3, [pc, #8]	@ (800a410 <HAL_GetUIDw2+0x10>)
 800a406:	681b      	ldr	r3, [r3, #0]
}
 800a408:	0018      	movs	r0, r3
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	46c0      	nop			@ (mov r8, r8)
 800a410:	1ff80064 	.word	0x1ff80064

0800a414 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e159      	b.n	800a6da <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2250      	movs	r2, #80	@ 0x50
 800a438:	2100      	movs	r1, #0
 800a43a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	0018      	movs	r0, r3
 800a440:	f7fb fb58 	bl	8005af4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a448:	2210      	movs	r2, #16
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b10      	cmp	r3, #16
 800a44e:	d005      	beq.n	800a45c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2204      	movs	r2, #4
 800a458:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a45a:	d00b      	beq.n	800a474 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a460:	2210      	movs	r2, #16
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2250      	movs	r2, #80	@ 0x50
 800a46c:	2100      	movs	r1, #0
 800a46e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e132      	b.n	800a6da <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a478:	4a9a      	ldr	r2, [pc, #616]	@ (800a6e4 <HAL_ADC_Init+0x2d0>)
 800a47a:	4013      	ands	r3, r2
 800a47c:	2202      	movs	r2, #2
 800a47e:	431a      	orrs	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	2203      	movs	r2, #3
 800a48c:	4013      	ands	r3, r2
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d108      	bne.n	800a4a4 <HAL_ADC_Init+0x90>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2201      	movs	r2, #1
 800a49a:	4013      	ands	r3, r2
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_ADC_Init+0x90>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <HAL_ADC_Init+0x92>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d149      	bne.n	800a53e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	23c0      	movs	r3, #192	@ 0xc0
 800a4b0:	061b      	lsls	r3, r3, #24
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d00b      	beq.n	800a4ce <HAL_ADC_Init+0xba>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	2380      	movs	r3, #128	@ 0x80
 800a4bc:	05db      	lsls	r3, r3, #23
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d005      	beq.n	800a4ce <HAL_ADC_Init+0xba>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	2380      	movs	r3, #128	@ 0x80
 800a4c8:	061b      	lsls	r3, r3, #24
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d111      	bne.n	800a4f2 <HAL_ADC_Init+0xde>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	0092      	lsls	r2, r2, #2
 800a4da:	0892      	lsrs	r2, r2, #2
 800a4dc:	611a      	str	r2, [r3, #16]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6919      	ldr	r1, [r3, #16]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	611a      	str	r2, [r3, #16]
 800a4f0:	e014      	b.n	800a51c <HAL_ADC_Init+0x108>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	691a      	ldr	r2, [r3, #16]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	0092      	lsls	r2, r2, #2
 800a4fe:	0892      	lsrs	r2, r2, #2
 800a500:	611a      	str	r2, [r3, #16]
 800a502:	4b79      	ldr	r3, [pc, #484]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4b78      	ldr	r3, [pc, #480]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a508:	4978      	ldr	r1, [pc, #480]	@ (800a6ec <HAL_ADC_Init+0x2d8>)
 800a50a:	400a      	ands	r2, r1
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	4b76      	ldr	r3, [pc, #472]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a510:	6819      	ldr	r1, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	4b74      	ldr	r3, [pc, #464]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a518:	430a      	orrs	r2, r1
 800a51a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2118      	movs	r1, #24
 800a528:	438a      	bics	r2, r1
 800a52a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68d9      	ldr	r1, [r3, #12]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689a      	ldr	r2, [r3, #8]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800a53e:	4b6a      	ldr	r3, [pc, #424]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	4b69      	ldr	r3, [pc, #420]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a544:	496a      	ldr	r1, [pc, #424]	@ (800a6f0 <HAL_ADC_Init+0x2dc>)
 800a546:	400a      	ands	r2, r1
 800a548:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800a54a:	4b67      	ldr	r3, [pc, #412]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a54c:	6819      	ldr	r1, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a552:	065a      	lsls	r2, r3, #25
 800a554:	4b64      	ldr	r3, [pc, #400]	@ (800a6e8 <HAL_ADC_Init+0x2d4>)
 800a556:	430a      	orrs	r2, r1
 800a558:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	2380      	movs	r3, #128	@ 0x80
 800a562:	055b      	lsls	r3, r3, #21
 800a564:	4013      	ands	r3, r2
 800a566:	d108      	bne.n	800a57a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689a      	ldr	r2, [r3, #8]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2180      	movs	r1, #128	@ 0x80
 800a574:	0549      	lsls	r1, r1, #21
 800a576:	430a      	orrs	r2, r1
 800a578:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68da      	ldr	r2, [r3, #12]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	495b      	ldr	r1, [pc, #364]	@ (800a6f4 <HAL_ADC_Init+0x2e0>)
 800a586:	400a      	ands	r2, r1
 800a588:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68d9      	ldr	r1, [r3, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d101      	bne.n	800a5a0 <HAL_ADC_Init+0x18c>
 800a59c:	2304      	movs	r3, #4
 800a59e:	e000      	b.n	800a5a2 <HAL_ADC_Init+0x18e>
 800a5a0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a5a2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2020      	movs	r0, #32
 800a5a8:	5c1b      	ldrb	r3, [r3, r0]
 800a5aa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a5ac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	202c      	movs	r0, #44	@ 0x2c
 800a5b2:	5c1b      	ldrb	r3, [r3, r0]
 800a5b4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a5b6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a5bc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800a5c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a5cc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5da:	23c2      	movs	r3, #194	@ 0xc2
 800a5dc:	33ff      	adds	r3, #255	@ 0xff
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d00b      	beq.n	800a5fa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68d9      	ldr	r1, [r3, #12]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2221      	movs	r2, #33	@ 0x21
 800a5fe:	5c9b      	ldrb	r3, [r3, r2]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d11a      	bne.n	800a63a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	5c9b      	ldrb	r3, [r3, r2]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68da      	ldr	r2, [r3, #12]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2180      	movs	r1, #128	@ 0x80
 800a61a:	0249      	lsls	r1, r1, #9
 800a61c:	430a      	orrs	r2, r1
 800a61e:	60da      	str	r2, [r3, #12]
 800a620:	e00b      	b.n	800a63a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a626:	2220      	movs	r2, #32
 800a628:	431a      	orrs	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a632:	2201      	movs	r2, #1
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d11f      	bne.n	800a682 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	492a      	ldr	r1, [pc, #168]	@ (800a6f8 <HAL_ADC_Init+0x2e4>)
 800a64e:	400a      	ands	r2, r1
 800a650:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6919      	ldr	r1, [r3, #16]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a660:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a666:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	691a      	ldr	r2, [r3, #16]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2101      	movs	r1, #1
 800a67c:	430a      	orrs	r2, r1
 800a67e:	611a      	str	r2, [r3, #16]
 800a680:	e00e      	b.n	800a6a0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	2201      	movs	r2, #1
 800a68a:	4013      	ands	r3, r2
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d107      	bne.n	800a6a0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691a      	ldr	r2, [r3, #16]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2101      	movs	r1, #1
 800a69c:	438a      	bics	r2, r1
 800a69e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695a      	ldr	r2, [r3, #20]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2107      	movs	r1, #7
 800a6ac:	438a      	bics	r2, r1
 800a6ae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6959      	ldr	r1, [r3, #20]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6cc:	2203      	movs	r2, #3
 800a6ce:	4393      	bics	r3, r2
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	0018      	movs	r0, r3
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	b002      	add	sp, #8
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	46c0      	nop			@ (mov r8, r8)
 800a6e4:	fffffefd 	.word	0xfffffefd
 800a6e8:	40012708 	.word	0x40012708
 800a6ec:	ffc3ffff 	.word	0xffc3ffff
 800a6f0:	fdffffff 	.word	0xfdffffff
 800a6f4:	fffe0219 	.word	0xfffe0219
 800a6f8:	fffffc03 	.word	0xfffffc03

0800a6fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a6fc:	b590      	push	{r4, r7, lr}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a704:	230f      	movs	r3, #15
 800a706:	18fb      	adds	r3, r7, r3
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	2204      	movs	r2, #4
 800a714:	4013      	ands	r3, r2
 800a716:	d138      	bne.n	800a78a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2250      	movs	r2, #80	@ 0x50
 800a71c:	5c9b      	ldrb	r3, [r3, r2]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d101      	bne.n	800a726 <HAL_ADC_Start+0x2a>
 800a722:	2302      	movs	r3, #2
 800a724:	e038      	b.n	800a798 <HAL_ADC_Start+0x9c>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2250      	movs	r2, #80	@ 0x50
 800a72a:	2101      	movs	r1, #1
 800a72c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d007      	beq.n	800a746 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a736:	230f      	movs	r3, #15
 800a738:	18fc      	adds	r4, r7, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	0018      	movs	r0, r3
 800a73e:	f000 f95f 	bl	800aa00 <ADC_Enable>
 800a742:	0003      	movs	r3, r0
 800a744:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a746:	230f      	movs	r3, #15
 800a748:	18fb      	adds	r3, r7, r3
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d120      	bne.n	800a792 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a754:	4a12      	ldr	r2, [pc, #72]	@ (800a7a0 <HAL_ADC_Start+0xa4>)
 800a756:	4013      	ands	r3, r2
 800a758:	2280      	movs	r2, #128	@ 0x80
 800a75a:	0052      	lsls	r2, r2, #1
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2250      	movs	r2, #80	@ 0x50
 800a76c:	2100      	movs	r1, #0
 800a76e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	221c      	movs	r2, #28
 800a776:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689a      	ldr	r2, [r3, #8]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2104      	movs	r1, #4
 800a784:	430a      	orrs	r2, r1
 800a786:	609a      	str	r2, [r3, #8]
 800a788:	e003      	b.n	800a792 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a78a:	230f      	movs	r3, #15
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	2202      	movs	r2, #2
 800a790:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a792:	230f      	movs	r3, #15
 800a794:	18fb      	adds	r3, r7, r3
 800a796:	781b      	ldrb	r3, [r3, #0]
}
 800a798:	0018      	movs	r0, r3
 800a79a:	46bd      	mov	sp, r7
 800a79c:	b005      	add	sp, #20
 800a79e:	bd90      	pop	{r4, r7, pc}
 800a7a0:	fffff0fe 	.word	0xfffff0fe

0800a7a4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	2b08      	cmp	r3, #8
 800a7bc:	d102      	bne.n	800a7c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a7be:	2308      	movs	r3, #8
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	e014      	b.n	800a7ee <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d10b      	bne.n	800a7ea <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2250      	movs	r2, #80	@ 0x50
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e072      	b.n	800a8d0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a7ea:	230c      	movs	r3, #12
 800a7ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a7ee:	f7ff fdc5 	bl	800a37c <HAL_GetTick>
 800a7f2:	0003      	movs	r3, r0
 800a7f4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a7f6:	e01f      	b.n	800a838 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	d01c      	beq.n	800a838 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <HAL_ADC_PollForConversion+0x70>
 800a804:	f7ff fdba 	bl	800a37c <HAL_GetTick>
 800a808:	0002      	movs	r2, r0
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	429a      	cmp	r2, r3
 800a812:	d211      	bcs.n	800a838 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4013      	ands	r3, r2
 800a81e:	d10b      	bne.n	800a838 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a824:	2204      	movs	r2, #4
 800a826:	431a      	orrs	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2250      	movs	r2, #80	@ 0x50
 800a830:	2100      	movs	r1, #0
 800a832:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e04b      	b.n	800a8d0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	4013      	ands	r3, r2
 800a842:	d0d9      	beq.n	800a7f8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a848:	2280      	movs	r2, #128	@ 0x80
 800a84a:	0092      	lsls	r2, r2, #2
 800a84c:	431a      	orrs	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	23c0      	movs	r3, #192	@ 0xc0
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	4013      	ands	r3, r2
 800a85e:	d12e      	bne.n	800a8be <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2220      	movs	r2, #32
 800a864:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a866:	2b00      	cmp	r3, #0
 800a868:	d129      	bne.n	800a8be <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2208      	movs	r2, #8
 800a872:	4013      	ands	r3, r2
 800a874:	2b08      	cmp	r3, #8
 800a876:	d122      	bne.n	800a8be <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	2204      	movs	r2, #4
 800a880:	4013      	ands	r3, r2
 800a882:	d110      	bne.n	800a8a6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	210c      	movs	r1, #12
 800a890:	438a      	bics	r2, r1
 800a892:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a898:	4a0f      	ldr	r2, [pc, #60]	@ (800a8d8 <HAL_ADC_PollForConversion+0x134>)
 800a89a:	4013      	ands	r3, r2
 800a89c:	2201      	movs	r2, #1
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	655a      	str	r2, [r3, #84]	@ 0x54
 800a8a4:	e00b      	b.n	800a8be <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d103      	bne.n	800a8ce <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	220c      	movs	r2, #12
 800a8cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b004      	add	sp, #16
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	fffffefe 	.word	0xfffffefe

0800a8dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a8ea:	0018      	movs	r0, r3
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	b002      	add	sp, #8
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2250      	movs	r2, #80	@ 0x50
 800a902:	5c9b      	ldrb	r3, [r3, r2]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_ADC_ConfigChannel+0x18>
 800a908:	2302      	movs	r3, #2
 800a90a:	e06c      	b.n	800a9e6 <HAL_ADC_ConfigChannel+0xf2>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2250      	movs	r2, #80	@ 0x50
 800a910:	2101      	movs	r1, #1
 800a912:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	2204      	movs	r2, #4
 800a91c:	4013      	ands	r3, r2
 800a91e:	d00b      	beq.n	800a938 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a924:	2220      	movs	r2, #32
 800a926:	431a      	orrs	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2250      	movs	r2, #80	@ 0x50
 800a930:	2100      	movs	r1, #0
 800a932:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e056      	b.n	800a9e6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4a2c      	ldr	r2, [pc, #176]	@ (800a9f0 <HAL_ADC_ConfigChannel+0xfc>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d028      	beq.n	800a994 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	035b      	lsls	r3, r3, #13
 800a94e:	0b5a      	lsrs	r2, r3, #13
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	2380      	movs	r3, #128	@ 0x80
 800a95e:	02db      	lsls	r3, r3, #11
 800a960:	4013      	ands	r3, r2
 800a962:	d009      	beq.n	800a978 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a964:	4b23      	ldr	r3, [pc, #140]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	4b22      	ldr	r3, [pc, #136]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a96a:	2180      	movs	r1, #128	@ 0x80
 800a96c:	0409      	lsls	r1, r1, #16
 800a96e:	430a      	orrs	r2, r1
 800a970:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a972:	200a      	movs	r0, #10
 800a974:	f000 f8ac 	bl	800aad0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	2380      	movs	r3, #128	@ 0x80
 800a97e:	029b      	lsls	r3, r3, #10
 800a980:	4013      	ands	r3, r2
 800a982:	d02b      	beq.n	800a9dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a984:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a98a:	2180      	movs	r1, #128	@ 0x80
 800a98c:	03c9      	lsls	r1, r1, #15
 800a98e:	430a      	orrs	r2, r1
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	e023      	b.n	800a9dc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	035b      	lsls	r3, r3, #13
 800a9a0:	0b5b      	lsrs	r3, r3, #13
 800a9a2:	43d9      	mvns	r1, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	400a      	ands	r2, r1
 800a9aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	2380      	movs	r3, #128	@ 0x80
 800a9b2:	02db      	lsls	r3, r3, #11
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	d005      	beq.n	800a9c4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a9be:	490e      	ldr	r1, [pc, #56]	@ (800a9f8 <HAL_ADC_ConfigChannel+0x104>)
 800a9c0:	400a      	ands	r2, r1
 800a9c2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	2380      	movs	r3, #128	@ 0x80
 800a9ca:	029b      	lsls	r3, r3, #10
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	d005      	beq.n	800a9dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a9d0:	4b08      	ldr	r3, [pc, #32]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	4b07      	ldr	r3, [pc, #28]	@ (800a9f4 <HAL_ADC_ConfigChannel+0x100>)
 800a9d6:	4909      	ldr	r1, [pc, #36]	@ (800a9fc <HAL_ADC_ConfigChannel+0x108>)
 800a9d8:	400a      	ands	r2, r1
 800a9da:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2250      	movs	r2, #80	@ 0x50
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	0018      	movs	r0, r3
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	b002      	add	sp, #8
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	00001001 	.word	0x00001001
 800a9f4:	40012708 	.word	0x40012708
 800a9f8:	ff7fffff 	.word	0xff7fffff
 800a9fc:	ffbfffff 	.word	0xffbfffff

0800aa00 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	2203      	movs	r2, #3
 800aa14:	4013      	ands	r3, r2
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d108      	bne.n	800aa2c <ADC_Enable+0x2c>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2201      	movs	r2, #1
 800aa22:	4013      	ands	r3, r2
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d101      	bne.n	800aa2c <ADC_Enable+0x2c>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e000      	b.n	800aa2e <ADC_Enable+0x2e>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d146      	bne.n	800aac0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	4a24      	ldr	r2, [pc, #144]	@ (800aacc <ADC_Enable+0xcc>)
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	d00d      	beq.n	800aa5a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa42:	2210      	movs	r2, #16
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa4e:	2201      	movs	r2, #1
 800aa50:	431a      	orrs	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e033      	b.n	800aac2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2101      	movs	r1, #1
 800aa66:	430a      	orrs	r2, r1
 800aa68:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800aa6a:	2001      	movs	r0, #1
 800aa6c:	f000 f830 	bl	800aad0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800aa70:	f7ff fc84 	bl	800a37c <HAL_GetTick>
 800aa74:	0003      	movs	r3, r0
 800aa76:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800aa78:	e01b      	b.n	800aab2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aa7a:	f7ff fc7f 	bl	800a37c <HAL_GetTick>
 800aa7e:	0002      	movs	r2, r0
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b0a      	cmp	r3, #10
 800aa86:	d914      	bls.n	800aab2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4013      	ands	r3, r2
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d00d      	beq.n	800aab2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa9a:	2210      	movs	r2, #16
 800aa9c:	431a      	orrs	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e007      	b.n	800aac2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2201      	movs	r2, #1
 800aaba:	4013      	ands	r3, r2
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d1dc      	bne.n	800aa7a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	0018      	movs	r0, r3
 800aac4:	46bd      	mov	sp, r7
 800aac6:	b004      	add	sp, #16
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	46c0      	nop			@ (mov r8, r8)
 800aacc:	80000017 	.word	0x80000017

0800aad0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800aad8:	4b0b      	ldr	r3, [pc, #44]	@ (800ab08 <ADC_DelayMicroSecond+0x38>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	490b      	ldr	r1, [pc, #44]	@ (800ab0c <ADC_DelayMicroSecond+0x3c>)
 800aade:	0018      	movs	r0, r3
 800aae0:	f7f5 fb2e 	bl	8000140 <__udivsi3>
 800aae4:	0003      	movs	r3, r0
 800aae6:	001a      	movs	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4353      	muls	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800aaee:	e002      	b.n	800aaf6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1f9      	bne.n	800aaf0 <ADC_DelayMicroSecond+0x20>
  }
}
 800aafc:	46c0      	nop			@ (mov r8, r8)
 800aafe:	46c0      	nop			@ (mov r8, r8)
 800ab00:	46bd      	mov	sp, r7
 800ab02:	b004      	add	sp, #16
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	46c0      	nop			@ (mov r8, r8)
 800ab08:	2000005c 	.word	0x2000005c
 800ab0c:	000f4240 	.word	0x000f4240

0800ab10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	0002      	movs	r2, r0
 800ab18:	1dfb      	adds	r3, r7, #7
 800ab1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ab1c:	1dfb      	adds	r3, r7, #7
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab22:	d809      	bhi.n	800ab38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab24:	1dfb      	adds	r3, r7, #7
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	001a      	movs	r2, r3
 800ab2a:	231f      	movs	r3, #31
 800ab2c:	401a      	ands	r2, r3
 800ab2e:	4b04      	ldr	r3, [pc, #16]	@ (800ab40 <__NVIC_EnableIRQ+0x30>)
 800ab30:	2101      	movs	r1, #1
 800ab32:	4091      	lsls	r1, r2
 800ab34:	000a      	movs	r2, r1
 800ab36:	601a      	str	r2, [r3, #0]
  }
}
 800ab38:	46c0      	nop			@ (mov r8, r8)
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	b002      	add	sp, #8
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	e000e100 	.word	0xe000e100

0800ab44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ab44:	b590      	push	{r4, r7, lr}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	0002      	movs	r2, r0
 800ab4c:	6039      	str	r1, [r7, #0]
 800ab4e:	1dfb      	adds	r3, r7, #7
 800ab50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ab52:	1dfb      	adds	r3, r7, #7
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab58:	d828      	bhi.n	800abac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab5a:	4a2f      	ldr	r2, [pc, #188]	@ (800ac18 <__NVIC_SetPriority+0xd4>)
 800ab5c:	1dfb      	adds	r3, r7, #7
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	b25b      	sxtb	r3, r3
 800ab62:	089b      	lsrs	r3, r3, #2
 800ab64:	33c0      	adds	r3, #192	@ 0xc0
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	589b      	ldr	r3, [r3, r2]
 800ab6a:	1dfa      	adds	r2, r7, #7
 800ab6c:	7812      	ldrb	r2, [r2, #0]
 800ab6e:	0011      	movs	r1, r2
 800ab70:	2203      	movs	r2, #3
 800ab72:	400a      	ands	r2, r1
 800ab74:	00d2      	lsls	r2, r2, #3
 800ab76:	21ff      	movs	r1, #255	@ 0xff
 800ab78:	4091      	lsls	r1, r2
 800ab7a:	000a      	movs	r2, r1
 800ab7c:	43d2      	mvns	r2, r2
 800ab7e:	401a      	ands	r2, r3
 800ab80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	019b      	lsls	r3, r3, #6
 800ab86:	22ff      	movs	r2, #255	@ 0xff
 800ab88:	401a      	ands	r2, r3
 800ab8a:	1dfb      	adds	r3, r7, #7
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	0018      	movs	r0, r3
 800ab90:	2303      	movs	r3, #3
 800ab92:	4003      	ands	r3, r0
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab98:	481f      	ldr	r0, [pc, #124]	@ (800ac18 <__NVIC_SetPriority+0xd4>)
 800ab9a:	1dfb      	adds	r3, r7, #7
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	b25b      	sxtb	r3, r3
 800aba0:	089b      	lsrs	r3, r3, #2
 800aba2:	430a      	orrs	r2, r1
 800aba4:	33c0      	adds	r3, #192	@ 0xc0
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800abaa:	e031      	b.n	800ac10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800abac:	4a1b      	ldr	r2, [pc, #108]	@ (800ac1c <__NVIC_SetPriority+0xd8>)
 800abae:	1dfb      	adds	r3, r7, #7
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	0019      	movs	r1, r3
 800abb4:	230f      	movs	r3, #15
 800abb6:	400b      	ands	r3, r1
 800abb8:	3b08      	subs	r3, #8
 800abba:	089b      	lsrs	r3, r3, #2
 800abbc:	3306      	adds	r3, #6
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	18d3      	adds	r3, r2, r3
 800abc2:	3304      	adds	r3, #4
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	1dfa      	adds	r2, r7, #7
 800abc8:	7812      	ldrb	r2, [r2, #0]
 800abca:	0011      	movs	r1, r2
 800abcc:	2203      	movs	r2, #3
 800abce:	400a      	ands	r2, r1
 800abd0:	00d2      	lsls	r2, r2, #3
 800abd2:	21ff      	movs	r1, #255	@ 0xff
 800abd4:	4091      	lsls	r1, r2
 800abd6:	000a      	movs	r2, r1
 800abd8:	43d2      	mvns	r2, r2
 800abda:	401a      	ands	r2, r3
 800abdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	019b      	lsls	r3, r3, #6
 800abe2:	22ff      	movs	r2, #255	@ 0xff
 800abe4:	401a      	ands	r2, r3
 800abe6:	1dfb      	adds	r3, r7, #7
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	0018      	movs	r0, r3
 800abec:	2303      	movs	r3, #3
 800abee:	4003      	ands	r3, r0
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800abf4:	4809      	ldr	r0, [pc, #36]	@ (800ac1c <__NVIC_SetPriority+0xd8>)
 800abf6:	1dfb      	adds	r3, r7, #7
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	001c      	movs	r4, r3
 800abfc:	230f      	movs	r3, #15
 800abfe:	4023      	ands	r3, r4
 800ac00:	3b08      	subs	r3, #8
 800ac02:	089b      	lsrs	r3, r3, #2
 800ac04:	430a      	orrs	r2, r1
 800ac06:	3306      	adds	r3, #6
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	18c3      	adds	r3, r0, r3
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	601a      	str	r2, [r3, #0]
}
 800ac10:	46c0      	nop			@ (mov r8, r8)
 800ac12:	46bd      	mov	sp, r7
 800ac14:	b003      	add	sp, #12
 800ac16:	bd90      	pop	{r4, r7, pc}
 800ac18:	e000e100 	.word	0xe000e100
 800ac1c:	e000ed00 	.word	0xe000ed00

0800ac20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	1e5a      	subs	r2, r3, #1
 800ac2c:	2380      	movs	r3, #128	@ 0x80
 800ac2e:	045b      	lsls	r3, r3, #17
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d301      	bcc.n	800ac38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ac34:	2301      	movs	r3, #1
 800ac36:	e010      	b.n	800ac5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ac38:	4b0a      	ldr	r3, [pc, #40]	@ (800ac64 <SysTick_Config+0x44>)
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	3a01      	subs	r2, #1
 800ac3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ac40:	2301      	movs	r3, #1
 800ac42:	425b      	negs	r3, r3
 800ac44:	2103      	movs	r1, #3
 800ac46:	0018      	movs	r0, r3
 800ac48:	f7ff ff7c 	bl	800ab44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ac4c:	4b05      	ldr	r3, [pc, #20]	@ (800ac64 <SysTick_Config+0x44>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ac52:	4b04      	ldr	r3, [pc, #16]	@ (800ac64 <SysTick_Config+0x44>)
 800ac54:	2207      	movs	r2, #7
 800ac56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	b002      	add	sp, #8
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	46c0      	nop			@ (mov r8, r8)
 800ac64:	e000e010 	.word	0xe000e010

0800ac68 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60b9      	str	r1, [r7, #8]
 800ac70:	607a      	str	r2, [r7, #4]
 800ac72:	210f      	movs	r1, #15
 800ac74:	187b      	adds	r3, r7, r1
 800ac76:	1c02      	adds	r2, r0, #0
 800ac78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	187b      	adds	r3, r7, r1
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	b25b      	sxtb	r3, r3
 800ac82:	0011      	movs	r1, r2
 800ac84:	0018      	movs	r0, r3
 800ac86:	f7ff ff5d 	bl	800ab44 <__NVIC_SetPriority>
}
 800ac8a:	46c0      	nop			@ (mov r8, r8)
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	b004      	add	sp, #16
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	0002      	movs	r2, r0
 800ac9a:	1dfb      	adds	r3, r7, #7
 800ac9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac9e:	1dfb      	adds	r3, r7, #7
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	0018      	movs	r0, r3
 800aca6:	f7ff ff33 	bl	800ab10 <__NVIC_EnableIRQ>
}
 800acaa:	46c0      	nop			@ (mov r8, r8)
 800acac:	46bd      	mov	sp, r7
 800acae:	b002      	add	sp, #8
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	0018      	movs	r0, r3
 800acbe:	f7ff ffaf 	bl	800ac20 <SysTick_Config>
 800acc2:	0003      	movs	r3, r0
}
 800acc4:	0018      	movs	r0, r3
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b002      	add	sp, #8
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e061      	b.n	800ada2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a32      	ldr	r2, [pc, #200]	@ (800adac <HAL_DMA_Init+0xe0>)
 800ace4:	4694      	mov	ip, r2
 800ace6:	4463      	add	r3, ip
 800ace8:	2114      	movs	r1, #20
 800acea:	0018      	movs	r0, r3
 800acec:	f7f5 fa28 	bl	8000140 <__udivsi3>
 800acf0:	0003      	movs	r3, r0
 800acf2:	009a      	lsls	r2, r3, #2
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a2d      	ldr	r2, [pc, #180]	@ (800adb0 <HAL_DMA_Init+0xe4>)
 800acfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2225      	movs	r2, #37	@ 0x25
 800ad02:	2102      	movs	r1, #2
 800ad04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	4a28      	ldr	r2, [pc, #160]	@ (800adb4 <HAL_DMA_Init+0xe8>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ad1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689a      	ldr	r2, [r3, #8]
 800ad50:	2380      	movs	r3, #128	@ 0x80
 800ad52:	01db      	lsls	r3, r3, #7
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d018      	beq.n	800ad8a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ad58:	4b17      	ldr	r3, [pc, #92]	@ (800adb8 <HAL_DMA_Init+0xec>)
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad60:	211c      	movs	r1, #28
 800ad62:	400b      	ands	r3, r1
 800ad64:	210f      	movs	r1, #15
 800ad66:	4099      	lsls	r1, r3
 800ad68:	000b      	movs	r3, r1
 800ad6a:	43d9      	mvns	r1, r3
 800ad6c:	4b12      	ldr	r3, [pc, #72]	@ (800adb8 <HAL_DMA_Init+0xec>)
 800ad6e:	400a      	ands	r2, r1
 800ad70:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ad72:	4b11      	ldr	r3, [pc, #68]	@ (800adb8 <HAL_DMA_Init+0xec>)
 800ad74:	6819      	ldr	r1, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad7e:	201c      	movs	r0, #28
 800ad80:	4003      	ands	r3, r0
 800ad82:	409a      	lsls	r2, r3
 800ad84:	4b0c      	ldr	r3, [pc, #48]	@ (800adb8 <HAL_DMA_Init+0xec>)
 800ad86:	430a      	orrs	r2, r1
 800ad88:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2225      	movs	r2, #37	@ 0x25
 800ad94:	2101      	movs	r1, #1
 800ad96:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2224      	movs	r2, #36	@ 0x24
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	0018      	movs	r0, r3
 800ada4:	46bd      	mov	sp, r7
 800ada6:	b004      	add	sp, #16
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	46c0      	nop			@ (mov r8, r8)
 800adac:	bffdfff8 	.word	0xbffdfff8
 800adb0:	40020000 	.word	0x40020000
 800adb4:	ffff800f 	.word	0xffff800f
 800adb8:	400200a8 	.word	0x400200a8

0800adbc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d101      	bne.n	800adce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e04a      	b.n	800ae64 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2101      	movs	r1, #1
 800adda:	438a      	bics	r2, r1
 800addc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a22      	ldr	r2, [pc, #136]	@ (800ae6c <HAL_DMA_DeInit+0xb0>)
 800ade4:	4694      	mov	ip, r2
 800ade6:	4463      	add	r3, ip
 800ade8:	2114      	movs	r1, #20
 800adea:	0018      	movs	r0, r3
 800adec:	f7f5 f9a8 	bl	8000140 <__udivsi3>
 800adf0:	0003      	movs	r3, r0
 800adf2:	009a      	lsls	r2, r3, #2
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <HAL_DMA_DeInit+0xb4>)
 800adfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae0a:	221c      	movs	r2, #28
 800ae0c:	401a      	ands	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae12:	2101      	movs	r1, #1
 800ae14:	4091      	lsls	r1, r2
 800ae16:	000a      	movs	r2, r1
 800ae18:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ae1a:	4b16      	ldr	r3, [pc, #88]	@ (800ae74 <HAL_DMA_DeInit+0xb8>)
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae22:	211c      	movs	r1, #28
 800ae24:	400b      	ands	r3, r1
 800ae26:	210f      	movs	r1, #15
 800ae28:	4099      	lsls	r1, r3
 800ae2a:	000b      	movs	r3, r1
 800ae2c:	43d9      	mvns	r1, r3
 800ae2e:	4b11      	ldr	r3, [pc, #68]	@ (800ae74 <HAL_DMA_DeInit+0xb8>)
 800ae30:	400a      	ands	r2, r1
 800ae32:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2225      	movs	r2, #37	@ 0x25
 800ae56:	2100      	movs	r1, #0
 800ae58:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2224      	movs	r2, #36	@ 0x24
 800ae5e:	2100      	movs	r1, #0
 800ae60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	0018      	movs	r0, r3
 800ae66:	46bd      	mov	sp, r7
 800ae68:	b002      	add	sp, #8
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	bffdfff8 	.word	0xbffdfff8
 800ae70:	40020000 	.word	0x40020000
 800ae74:	400200a8 	.word	0x400200a8

0800ae78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
 800ae84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae86:	2317      	movs	r3, #23
 800ae88:	18fb      	adds	r3, r7, r3
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2224      	movs	r2, #36	@ 0x24
 800ae92:	5c9b      	ldrb	r3, [r3, r2]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d101      	bne.n	800ae9c <HAL_DMA_Start_IT+0x24>
 800ae98:	2302      	movs	r3, #2
 800ae9a:	e04f      	b.n	800af3c <HAL_DMA_Start_IT+0xc4>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2224      	movs	r2, #36	@ 0x24
 800aea0:	2101      	movs	r1, #1
 800aea2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2225      	movs	r2, #37	@ 0x25
 800aea8:	5c9b      	ldrb	r3, [r3, r2]
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d13a      	bne.n	800af26 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2225      	movs	r2, #37	@ 0x25
 800aeb4:	2102      	movs	r1, #2
 800aeb6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2101      	movs	r1, #1
 800aeca:	438a      	bics	r2, r1
 800aecc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	68b9      	ldr	r1, [r7, #8]
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 f976 	bl	800b1c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d008      	beq.n	800aef4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	210e      	movs	r1, #14
 800aeee:	430a      	orrs	r2, r1
 800aef0:	601a      	str	r2, [r3, #0]
 800aef2:	e00f      	b.n	800af14 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2104      	movs	r1, #4
 800af00:	438a      	bics	r2, r1
 800af02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	210a      	movs	r1, #10
 800af10:	430a      	orrs	r2, r1
 800af12:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2101      	movs	r1, #1
 800af20:	430a      	orrs	r2, r1
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	e007      	b.n	800af36 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2224      	movs	r2, #36	@ 0x24
 800af2a:	2100      	movs	r1, #0
 800af2c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800af2e:	2317      	movs	r3, #23
 800af30:	18fb      	adds	r3, r7, r3
 800af32:	2202      	movs	r2, #2
 800af34:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800af36:	2317      	movs	r3, #23
 800af38:	18fb      	adds	r3, r7, r3
 800af3a:	781b      	ldrb	r3, [r3, #0]
}
 800af3c:	0018      	movs	r0, r3
 800af3e:	46bd      	mov	sp, r7
 800af40:	b006      	add	sp, #24
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af4c:	230f      	movs	r3, #15
 800af4e:	18fb      	adds	r3, r7, r3
 800af50:	2200      	movs	r2, #0
 800af52:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2225      	movs	r2, #37	@ 0x25
 800af58:	5c9b      	ldrb	r3, [r3, r2]
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d008      	beq.n	800af72 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2204      	movs	r2, #4
 800af64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2224      	movs	r2, #36	@ 0x24
 800af6a:	2100      	movs	r1, #0
 800af6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e024      	b.n	800afbc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	210e      	movs	r1, #14
 800af7e:	438a      	bics	r2, r1
 800af80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2101      	movs	r1, #1
 800af8e:	438a      	bics	r2, r1
 800af90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af96:	221c      	movs	r2, #28
 800af98:	401a      	ands	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af9e:	2101      	movs	r1, #1
 800afa0:	4091      	lsls	r1, r2
 800afa2:	000a      	movs	r2, r1
 800afa4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2225      	movs	r2, #37	@ 0x25
 800afaa:	2101      	movs	r1, #1
 800afac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2224      	movs	r2, #36	@ 0x24
 800afb2:	2100      	movs	r1, #0
 800afb4:	5499      	strb	r1, [r3, r2]

    return status;
 800afb6:	230f      	movs	r3, #15
 800afb8:	18fb      	adds	r3, r7, r3
 800afba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afbc:	0018      	movs	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b004      	add	sp, #16
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afcc:	210f      	movs	r1, #15
 800afce:	187b      	adds	r3, r7, r1
 800afd0:	2200      	movs	r2, #0
 800afd2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2225      	movs	r2, #37	@ 0x25
 800afd8:	5c9b      	ldrb	r3, [r3, r2]
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d006      	beq.n	800afee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2204      	movs	r2, #4
 800afe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800afe6:	187b      	adds	r3, r7, r1
 800afe8:	2201      	movs	r2, #1
 800afea:	701a      	strb	r2, [r3, #0]
 800afec:	e02a      	b.n	800b044 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	210e      	movs	r1, #14
 800affa:	438a      	bics	r2, r1
 800affc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2101      	movs	r1, #1
 800b00a:	438a      	bics	r2, r1
 800b00c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b012:	221c      	movs	r2, #28
 800b014:	401a      	ands	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b01a:	2101      	movs	r1, #1
 800b01c:	4091      	lsls	r1, r2
 800b01e:	000a      	movs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2225      	movs	r2, #37	@ 0x25
 800b026:	2101      	movs	r1, #1
 800b028:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2224      	movs	r2, #36	@ 0x24
 800b02e:	2100      	movs	r1, #0
 800b030:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	0010      	movs	r0, r2
 800b042:	4798      	blx	r3
    }
  }
  return status;
 800b044:	230f      	movs	r3, #15
 800b046:	18fb      	adds	r3, r7, r3
 800b048:	781b      	ldrb	r3, [r3, #0]
}
 800b04a:	0018      	movs	r0, r3
 800b04c:	46bd      	mov	sp, r7
 800b04e:	b004      	add	sp, #16
 800b050:	bd80      	pop	{r7, pc}

0800b052 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b06e:	221c      	movs	r2, #28
 800b070:	4013      	ands	r3, r2
 800b072:	2204      	movs	r2, #4
 800b074:	409a      	lsls	r2, r3
 800b076:	0013      	movs	r3, r2
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4013      	ands	r3, r2
 800b07c:	d026      	beq.n	800b0cc <HAL_DMA_IRQHandler+0x7a>
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2204      	movs	r2, #4
 800b082:	4013      	ands	r3, r2
 800b084:	d022      	beq.n	800b0cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2220      	movs	r2, #32
 800b08e:	4013      	ands	r3, r2
 800b090:	d107      	bne.n	800b0a2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2104      	movs	r1, #4
 800b09e:	438a      	bics	r2, r1
 800b0a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a6:	221c      	movs	r2, #28
 800b0a8:	401a      	ands	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ae:	2104      	movs	r1, #4
 800b0b0:	4091      	lsls	r1, r2
 800b0b2:	000a      	movs	r2, r1
 800b0b4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d100      	bne.n	800b0c0 <HAL_DMA_IRQHandler+0x6e>
 800b0be:	e071      	b.n	800b1a4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	0010      	movs	r0, r2
 800b0c8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800b0ca:	e06b      	b.n	800b1a4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d0:	221c      	movs	r2, #28
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	2202      	movs	r2, #2
 800b0d6:	409a      	lsls	r2, r3
 800b0d8:	0013      	movs	r3, r2
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	d02d      	beq.n	800b13c <HAL_DMA_IRQHandler+0xea>
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	d029      	beq.n	800b13c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2220      	movs	r2, #32
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	d10b      	bne.n	800b10c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	210a      	movs	r1, #10
 800b100:	438a      	bics	r2, r1
 800b102:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2225      	movs	r2, #37	@ 0x25
 800b108:	2101      	movs	r1, #1
 800b10a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b110:	221c      	movs	r2, #28
 800b112:	401a      	ands	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b118:	2102      	movs	r1, #2
 800b11a:	4091      	lsls	r1, r2
 800b11c:	000a      	movs	r2, r1
 800b11e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2224      	movs	r2, #36	@ 0x24
 800b124:	2100      	movs	r1, #0
 800b126:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d039      	beq.n	800b1a4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	0010      	movs	r0, r2
 800b138:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800b13a:	e033      	b.n	800b1a4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b140:	221c      	movs	r2, #28
 800b142:	4013      	ands	r3, r2
 800b144:	2208      	movs	r2, #8
 800b146:	409a      	lsls	r2, r3
 800b148:	0013      	movs	r3, r2
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4013      	ands	r3, r2
 800b14e:	d02a      	beq.n	800b1a6 <HAL_DMA_IRQHandler+0x154>
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2208      	movs	r2, #8
 800b154:	4013      	ands	r3, r2
 800b156:	d026      	beq.n	800b1a6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	210e      	movs	r1, #14
 800b164:	438a      	bics	r2, r1
 800b166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b16c:	221c      	movs	r2, #28
 800b16e:	401a      	ands	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b174:	2101      	movs	r1, #1
 800b176:	4091      	lsls	r1, r2
 800b178:	000a      	movs	r2, r1
 800b17a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2225      	movs	r2, #37	@ 0x25
 800b186:	2101      	movs	r1, #1
 800b188:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2224      	movs	r2, #36	@ 0x24
 800b18e:	2100      	movs	r1, #0
 800b190:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b196:	2b00      	cmp	r3, #0
 800b198:	d005      	beq.n	800b1a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	0010      	movs	r0, r2
 800b1a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b1a4:	46c0      	nop			@ (mov r8, r8)
 800b1a6:	46c0      	nop			@ (mov r8, r8)
}
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	b004      	add	sp, #16
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2225      	movs	r2, #37	@ 0x25
 800b1ba:	5c9b      	ldrb	r3, [r3, r2]
 800b1bc:	b2db      	uxtb	r3, r3
}
 800b1be:	0018      	movs	r0, r3
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	b002      	add	sp, #8
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	607a      	str	r2, [r7, #4]
 800b1d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1d8:	221c      	movs	r2, #28
 800b1da:	401a      	ands	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	4091      	lsls	r1, r2
 800b1e4:	000a      	movs	r2, r1
 800b1e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	2b10      	cmp	r3, #16
 800b1f6:	d108      	bne.n	800b20a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b208:	e007      	b.n	800b21a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	60da      	str	r2, [r3, #12]
}
 800b21a:	46c0      	nop			@ (mov r8, r8)
 800b21c:	46bd      	mov	sp, r7
 800b21e:	b004      	add	sp, #16
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800b22c:	f7ff f8a6 	bl	800a37c <HAL_GetTick>
 800b230:	0003      	movs	r3, r0
 800b232:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b234:	e00f      	b.n	800b256 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3301      	adds	r3, #1
 800b23a:	d00c      	beq.n	800b256 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d007      	beq.n	800b252 <FLASH_WaitForLastOperation+0x2e>
 800b242:	f7ff f89b 	bl	800a37c <HAL_GetTick>
 800b246:	0002      	movs	r2, r0
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d201      	bcs.n	800b256 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e052      	b.n	800b2fc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b256:	4b2b      	ldr	r3, [pc, #172]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	2201      	movs	r2, #1
 800b25c:	4013      	ands	r3, r2
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d0e9      	beq.n	800b236 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b262:	4b28      	ldr	r3, [pc, #160]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	2202      	movs	r2, #2
 800b268:	4013      	ands	r3, r2
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d102      	bne.n	800b274 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b26e:	4b25      	ldr	r3, [pc, #148]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b270:	2202      	movs	r2, #2
 800b272:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b274:	4b23      	ldr	r3, [pc, #140]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b276:	699a      	ldr	r2, [r3, #24]
 800b278:	2380      	movs	r3, #128	@ 0x80
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	401a      	ands	r2, r3
 800b27e:	2380      	movs	r3, #128	@ 0x80
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	429a      	cmp	r2, r3
 800b284:	d035      	beq.n	800b2f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b286:	4b1f      	ldr	r3, [pc, #124]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b288:	699a      	ldr	r2, [r3, #24]
 800b28a:	2380      	movs	r3, #128	@ 0x80
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b290:	2380      	movs	r3, #128	@ 0x80
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	429a      	cmp	r2, r3
 800b296:	d02c      	beq.n	800b2f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b298:	4b1a      	ldr	r3, [pc, #104]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b29a:	699a      	ldr	r2, [r3, #24]
 800b29c:	2380      	movs	r3, #128	@ 0x80
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b2a2:	2380      	movs	r3, #128	@ 0x80
 800b2a4:	00db      	lsls	r3, r3, #3
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d023      	beq.n	800b2f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b2aa:	4b16      	ldr	r3, [pc, #88]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	2380      	movs	r3, #128	@ 0x80
 800b2b0:	011b      	lsls	r3, r3, #4
 800b2b2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b2b4:	2380      	movs	r3, #128	@ 0x80
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d01a      	beq.n	800b2f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b2bc:	4b11      	ldr	r3, [pc, #68]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b2be:	699a      	ldr	r2, [r3, #24]
 800b2c0:	2380      	movs	r3, #128	@ 0x80
 800b2c2:	019b      	lsls	r3, r3, #6
 800b2c4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b2c6:	2380      	movs	r3, #128	@ 0x80
 800b2c8:	019b      	lsls	r3, r3, #6
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d011      	beq.n	800b2f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	2380      	movs	r3, #128	@ 0x80
 800b2d4:	029b      	lsls	r3, r3, #10
 800b2d6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b2d8:	2380      	movs	r3, #128	@ 0x80
 800b2da:	029b      	lsls	r3, r3, #10
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d008      	beq.n	800b2f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800b2e0:	4b08      	ldr	r3, [pc, #32]	@ (800b304 <FLASH_WaitForLastOperation+0xe0>)
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	2380      	movs	r3, #128	@ 0x80
 800b2e6:	025b      	lsls	r3, r3, #9
 800b2e8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b2ea:	2380      	movs	r3, #128	@ 0x80
 800b2ec:	025b      	lsls	r3, r3, #9
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d103      	bne.n	800b2fa <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800b2f2:	f000 f809 	bl	800b308 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e000      	b.n	800b2fc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	0018      	movs	r0, r3
 800b2fe:	46bd      	mov	sp, r7
 800b300:	b004      	add	sp, #16
 800b302:	bd80      	pop	{r7, pc}
 800b304:	40022000 	.word	0x40022000

0800b308 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b312:	4b49      	ldr	r3, [pc, #292]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b314:	699a      	ldr	r2, [r3, #24]
 800b316:	2380      	movs	r3, #128	@ 0x80
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	401a      	ands	r2, r3
 800b31c:	2380      	movs	r3, #128	@ 0x80
 800b31e:	005b      	lsls	r3, r3, #1
 800b320:	429a      	cmp	r2, r3
 800b322:	d10a      	bne.n	800b33a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b324:	4b45      	ldr	r3, [pc, #276]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	2202      	movs	r2, #2
 800b32a:	431a      	orrs	r2, r3
 800b32c:	4b43      	ldr	r3, [pc, #268]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b32e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2280      	movs	r2, #128	@ 0x80
 800b334:	0052      	lsls	r2, r2, #1
 800b336:	4313      	orrs	r3, r2
 800b338:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800b33a:	4b3f      	ldr	r3, [pc, #252]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b33c:	699a      	ldr	r2, [r3, #24]
 800b33e:	2380      	movs	r3, #128	@ 0x80
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	401a      	ands	r2, r3
 800b344:	2380      	movs	r3, #128	@ 0x80
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	429a      	cmp	r2, r3
 800b34a:	d10a      	bne.n	800b362 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b34c:	4b3b      	ldr	r3, [pc, #236]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b34e:	695b      	ldr	r3, [r3, #20]
 800b350:	2201      	movs	r2, #1
 800b352:	431a      	orrs	r2, r3
 800b354:	4b39      	ldr	r3, [pc, #228]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b356:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2280      	movs	r2, #128	@ 0x80
 800b35c:	0092      	lsls	r2, r2, #2
 800b35e:	4313      	orrs	r3, r2
 800b360:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800b362:	4b35      	ldr	r3, [pc, #212]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b364:	699a      	ldr	r2, [r3, #24]
 800b366:	2380      	movs	r3, #128	@ 0x80
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	401a      	ands	r2, r3
 800b36c:	2380      	movs	r3, #128	@ 0x80
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	429a      	cmp	r2, r3
 800b372:	d10a      	bne.n	800b38a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800b374:	4b31      	ldr	r3, [pc, #196]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b376:	695b      	ldr	r3, [r3, #20]
 800b378:	2208      	movs	r2, #8
 800b37a:	431a      	orrs	r2, r3
 800b37c:	4b2f      	ldr	r3, [pc, #188]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b37e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2280      	movs	r2, #128	@ 0x80
 800b384:	00d2      	lsls	r2, r2, #3
 800b386:	4313      	orrs	r3, r2
 800b388:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800b38a:	4b2b      	ldr	r3, [pc, #172]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b38c:	699a      	ldr	r2, [r3, #24]
 800b38e:	2380      	movs	r3, #128	@ 0x80
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	401a      	ands	r2, r3
 800b394:	2380      	movs	r3, #128	@ 0x80
 800b396:	011b      	lsls	r3, r3, #4
 800b398:	429a      	cmp	r2, r3
 800b39a:	d10a      	bne.n	800b3b2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b39c:	4b27      	ldr	r3, [pc, #156]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	2204      	movs	r2, #4
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	4b25      	ldr	r3, [pc, #148]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b3a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2280      	movs	r2, #128	@ 0x80
 800b3ac:	0112      	lsls	r2, r2, #4
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800b3b2:	4b21      	ldr	r3, [pc, #132]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b3b4:	699a      	ldr	r2, [r3, #24]
 800b3b6:	2380      	movs	r3, #128	@ 0x80
 800b3b8:	019b      	lsls	r3, r3, #6
 800b3ba:	401a      	ands	r2, r3
 800b3bc:	2380      	movs	r3, #128	@ 0x80
 800b3be:	019b      	lsls	r3, r3, #6
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d10a      	bne.n	800b3da <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b3c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	2210      	movs	r2, #16
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b3ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2280      	movs	r2, #128	@ 0x80
 800b3d4:	0192      	lsls	r2, r2, #6
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800b3da:	4b17      	ldr	r3, [pc, #92]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b3dc:	699a      	ldr	r2, [r3, #24]
 800b3de:	2380      	movs	r3, #128	@ 0x80
 800b3e0:	029b      	lsls	r3, r3, #10
 800b3e2:	401a      	ands	r2, r3
 800b3e4:	2380      	movs	r3, #128	@ 0x80
 800b3e6:	029b      	lsls	r3, r3, #10
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d109      	bne.n	800b400 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800b3ec:	4b13      	ldr	r3, [pc, #76]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	2220      	movs	r2, #32
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	4b11      	ldr	r3, [pc, #68]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b3f6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800b400:	4b0d      	ldr	r3, [pc, #52]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b402:	699a      	ldr	r2, [r3, #24]
 800b404:	2380      	movs	r3, #128	@ 0x80
 800b406:	025b      	lsls	r3, r3, #9
 800b408:	401a      	ands	r2, r3
 800b40a:	2380      	movs	r3, #128	@ 0x80
 800b40c:	025b      	lsls	r3, r3, #9
 800b40e:	429a      	cmp	r2, r3
 800b410:	d10a      	bne.n	800b428 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800b412:	4b0a      	ldr	r3, [pc, #40]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	2240      	movs	r2, #64	@ 0x40
 800b418:	431a      	orrs	r2, r3
 800b41a:	4b08      	ldr	r3, [pc, #32]	@ (800b43c <FLASH_SetErrorCode+0x134>)
 800b41c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2280      	movs	r2, #128	@ 0x80
 800b422:	0252      	lsls	r2, r2, #9
 800b424:	4313      	orrs	r3, r2
 800b426:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b428:	4b03      	ldr	r3, [pc, #12]	@ (800b438 <FLASH_SetErrorCode+0x130>)
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	619a      	str	r2, [r3, #24]
}  
 800b42e:	46c0      	nop			@ (mov r8, r8)
 800b430:	46bd      	mov	sp, r7
 800b432:	b002      	add	sp, #8
 800b434:	bd80      	pop	{r7, pc}
 800b436:	46c0      	nop			@ (mov r8, r8)
 800b438:	40022000 	.word	0x40022000
 800b43c:	20002b5c 	.word	0x20002b5c

0800b440 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b446:	4b12      	ldr	r3, [pc, #72]	@ (800b490 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	4013      	ands	r3, r2
 800b44e:	d019      	beq.n	800b484 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b450:	f3ef 8310 	mrs	r3, PRIMASK
 800b454:	607b      	str	r3, [r7, #4]
  return(result);
 800b456:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800b458:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b45a:	b672      	cpsid	i
}
 800b45c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800b45e:	4b0c      	ldr	r3, [pc, #48]	@ (800b490 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b460:	4a0c      	ldr	r2, [pc, #48]	@ (800b494 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800b462:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800b464:	4b0a      	ldr	r3, [pc, #40]	@ (800b490 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b466:	4a0c      	ldr	r2, [pc, #48]	@ (800b498 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800b468:	60da      	str	r2, [r3, #12]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f383 8810 	msr	PRIMASK, r3
}
 800b474:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b476:	4b06      	ldr	r3, [pc, #24]	@ (800b490 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	4013      	ands	r3, r2
 800b47e:	d001      	beq.n	800b484 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e000      	b.n	800b486 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800b484:	2300      	movs	r3, #0
}
 800b486:	0018      	movs	r0, r3
 800b488:	46bd      	mov	sp, r7
 800b48a:	b004      	add	sp, #16
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	46c0      	nop			@ (mov r8, r8)
 800b490:	40022000 	.word	0x40022000
 800b494:	89abcdef 	.word	0x89abcdef
 800b498:	02030405 	.word	0x02030405

0800b49c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800b4a0:	4b04      	ldr	r3, [pc, #16]	@ (800b4b4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	4b03      	ldr	r3, [pc, #12]	@ (800b4b4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	40022000 	.word	0x40022000

0800b4b8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800b4b8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4c0:	250f      	movs	r5, #15
 800b4c2:	197b      	adds	r3, r7, r5
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b4c8:	197c      	adds	r4, r7, r5
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b508 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b4cc:	0018      	movs	r0, r3
 800b4ce:	f7ff fea9 	bl	800b224 <FLASH_WaitForLastOperation>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b4d6:	0029      	movs	r1, r5
 800b4d8:	187b      	adds	r3, r7, r1
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10c      	bne.n	800b4fa <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b50c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b4ec:	187c      	adds	r4, r7, r1
 800b4ee:	4b06      	ldr	r3, [pc, #24]	@ (800b508 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	f7ff fe97 	bl	800b224 <FLASH_WaitForLastOperation>
 800b4f6:	0003      	movs	r3, r0
 800b4f8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800b4fa:	230f      	movs	r3, #15
 800b4fc:	18fb      	adds	r3, r7, r3
 800b4fe:	781b      	ldrb	r3, [r3, #0]
}  
 800b500:	0018      	movs	r0, r3
 800b502:	46bd      	mov	sp, r7
 800b504:	b004      	add	sp, #16
 800b506:	bdb0      	pop	{r4, r5, r7, pc}
 800b508:	0000c350 	.word	0x0000c350
 800b50c:	20002b5c 	.word	0x20002b5c

0800b510 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800b510:	b5b0      	push	{r4, r5, r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b51c:	2317      	movs	r3, #23
 800b51e:	18fb      	adds	r3, r7, r3
 800b520:	2201      	movs	r2, #1
 800b522:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b524:	4b24      	ldr	r3, [pc, #144]	@ (800b5b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b526:	7c1b      	ldrb	r3, [r3, #16]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d101      	bne.n	800b530 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800b52c:	2302      	movs	r3, #2
 800b52e:	e03e      	b.n	800b5ae <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800b530:	4b21      	ldr	r3, [pc, #132]	@ (800b5b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b532:	2201      	movs	r2, #1
 800b534:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b536:	2517      	movs	r5, #23
 800b538:	197c      	adds	r4, r7, r5
 800b53a:	4b20      	ldr	r3, [pc, #128]	@ (800b5bc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b53c:	0018      	movs	r0, r3
 800b53e:	f7ff fe71 	bl	800b224 <FLASH_WaitForLastOperation>
 800b542:	0003      	movs	r3, r0
 800b544:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b546:	197b      	adds	r3, r7, r5
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d129      	bne.n	800b5a2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b54e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b550:	2200      	movs	r2, #0
 800b552:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b02      	cmp	r3, #2
 800b558:	d103      	bne.n	800b562 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	e013      	b.n	800b58a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d104      	bne.n	800b572 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	b292      	uxth	r2, r2
 800b56e:	801a      	strh	r2, [r3, #0]
 800b570:	e00b      	b.n	800b58a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d104      	bne.n	800b582 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
 800b580:	e003      	b.n	800b58a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800b582:	2317      	movs	r3, #23
 800b584:	18fb      	adds	r3, r7, r3
 800b586:	2201      	movs	r2, #1
 800b588:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b58a:	2217      	movs	r2, #23
 800b58c:	18bb      	adds	r3, r7, r2
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d106      	bne.n	800b5a2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b594:	18bc      	adds	r4, r7, r2
 800b596:	4b09      	ldr	r3, [pc, #36]	@ (800b5bc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b598:	0018      	movs	r0, r3
 800b59a:	f7ff fe43 	bl	800b224 <FLASH_WaitForLastOperation>
 800b59e:	0003      	movs	r3, r0
 800b5a0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b5a2:	4b05      	ldr	r3, [pc, #20]	@ (800b5b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	741a      	strb	r2, [r3, #16]

  return status;
 800b5a8:	2317      	movs	r3, #23
 800b5aa:	18fb      	adds	r3, r7, r3
 800b5ac:	781b      	ldrb	r3, [r3, #0]
}
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	b006      	add	sp, #24
 800b5b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b5b6:	46c0      	nop			@ (mov r8, r8)
 800b5b8:	20002b5c 	.word	0x20002b5c
 800b5bc:	0000c350 	.word	0x0000c350

0800b5c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b5d6:	e155      	b.n	800b884 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2101      	movs	r1, #1
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	4091      	lsls	r1, r2
 800b5e2:	000a      	movs	r2, r1
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d100      	bne.n	800b5f0 <HAL_GPIO_Init+0x30>
 800b5ee:	e146      	b.n	800b87e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d005      	beq.n	800b608 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	2203      	movs	r2, #3
 800b602:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b604:	2b02      	cmp	r3, #2
 800b606:	d130      	bne.n	800b66a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	2203      	movs	r2, #3
 800b614:	409a      	lsls	r2, r3
 800b616:	0013      	movs	r3, r2
 800b618:	43da      	mvns	r2, r3
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	4013      	ands	r3, r2
 800b61e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	005b      	lsls	r3, r3, #1
 800b628:	409a      	lsls	r2, r3
 800b62a:	0013      	movs	r3, r2
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	4313      	orrs	r3, r2
 800b630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b63e:	2201      	movs	r2, #1
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	409a      	lsls	r2, r3
 800b644:	0013      	movs	r3, r2
 800b646:	43da      	mvns	r2, r3
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	4013      	ands	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	091b      	lsrs	r3, r3, #4
 800b654:	2201      	movs	r2, #1
 800b656:	401a      	ands	r2, r3
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	409a      	lsls	r2, r3
 800b65c:	0013      	movs	r3, r2
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	4313      	orrs	r3, r2
 800b662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	2203      	movs	r2, #3
 800b670:	4013      	ands	r3, r2
 800b672:	2b03      	cmp	r3, #3
 800b674:	d017      	beq.n	800b6a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	2203      	movs	r2, #3
 800b682:	409a      	lsls	r2, r3
 800b684:	0013      	movs	r3, r2
 800b686:	43da      	mvns	r2, r3
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	4013      	ands	r3, r2
 800b68c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	689a      	ldr	r2, [r3, #8]
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	005b      	lsls	r3, r3, #1
 800b696:	409a      	lsls	r2, r3
 800b698:	0013      	movs	r3, r2
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	2203      	movs	r2, #3
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d123      	bne.n	800b6fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	08da      	lsrs	r2, r3, #3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3208      	adds	r2, #8
 800b6ba:	0092      	lsls	r2, r2, #2
 800b6bc:	58d3      	ldr	r3, [r2, r3]
 800b6be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2207      	movs	r2, #7
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	220f      	movs	r2, #15
 800b6ca:	409a      	lsls	r2, r3
 800b6cc:	0013      	movs	r3, r2
 800b6ce:	43da      	mvns	r2, r3
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	691a      	ldr	r2, [r3, #16]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2107      	movs	r1, #7
 800b6de:	400b      	ands	r3, r1
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	409a      	lsls	r2, r3
 800b6e4:	0013      	movs	r3, r2
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	08da      	lsrs	r2, r3, #3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3208      	adds	r2, #8
 800b6f4:	0092      	lsls	r2, r2, #2
 800b6f6:	6939      	ldr	r1, [r7, #16]
 800b6f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	2203      	movs	r2, #3
 800b706:	409a      	lsls	r2, r3
 800b708:	0013      	movs	r3, r2
 800b70a:	43da      	mvns	r2, r3
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	4013      	ands	r3, r2
 800b710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	2203      	movs	r2, #3
 800b718:	401a      	ands	r2, r3
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	409a      	lsls	r2, r3
 800b720:	0013      	movs	r3, r2
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	4313      	orrs	r3, r2
 800b726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	23c0      	movs	r3, #192	@ 0xc0
 800b734:	029b      	lsls	r3, r3, #10
 800b736:	4013      	ands	r3, r2
 800b738:	d100      	bne.n	800b73c <HAL_GPIO_Init+0x17c>
 800b73a:	e0a0      	b.n	800b87e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b73c:	4b57      	ldr	r3, [pc, #348]	@ (800b89c <HAL_GPIO_Init+0x2dc>)
 800b73e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b740:	4b56      	ldr	r3, [pc, #344]	@ (800b89c <HAL_GPIO_Init+0x2dc>)
 800b742:	2101      	movs	r1, #1
 800b744:	430a      	orrs	r2, r1
 800b746:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b748:	4a55      	ldr	r2, [pc, #340]	@ (800b8a0 <HAL_GPIO_Init+0x2e0>)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	089b      	lsrs	r3, r3, #2
 800b74e:	3302      	adds	r3, #2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	589b      	ldr	r3, [r3, r2]
 800b754:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2203      	movs	r2, #3
 800b75a:	4013      	ands	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	220f      	movs	r2, #15
 800b760:	409a      	lsls	r2, r3
 800b762:	0013      	movs	r3, r2
 800b764:	43da      	mvns	r2, r3
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	4013      	ands	r3, r2
 800b76a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	23a0      	movs	r3, #160	@ 0xa0
 800b770:	05db      	lsls	r3, r3, #23
 800b772:	429a      	cmp	r2, r3
 800b774:	d01f      	beq.n	800b7b6 <HAL_GPIO_Init+0x1f6>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a4a      	ldr	r2, [pc, #296]	@ (800b8a4 <HAL_GPIO_Init+0x2e4>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d019      	beq.n	800b7b2 <HAL_GPIO_Init+0x1f2>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a49      	ldr	r2, [pc, #292]	@ (800b8a8 <HAL_GPIO_Init+0x2e8>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d013      	beq.n	800b7ae <HAL_GPIO_Init+0x1ee>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a48      	ldr	r2, [pc, #288]	@ (800b8ac <HAL_GPIO_Init+0x2ec>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d00d      	beq.n	800b7aa <HAL_GPIO_Init+0x1ea>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a47      	ldr	r2, [pc, #284]	@ (800b8b0 <HAL_GPIO_Init+0x2f0>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d007      	beq.n	800b7a6 <HAL_GPIO_Init+0x1e6>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a46      	ldr	r2, [pc, #280]	@ (800b8b4 <HAL_GPIO_Init+0x2f4>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d101      	bne.n	800b7a2 <HAL_GPIO_Init+0x1e2>
 800b79e:	2305      	movs	r3, #5
 800b7a0:	e00a      	b.n	800b7b8 <HAL_GPIO_Init+0x1f8>
 800b7a2:	2306      	movs	r3, #6
 800b7a4:	e008      	b.n	800b7b8 <HAL_GPIO_Init+0x1f8>
 800b7a6:	2304      	movs	r3, #4
 800b7a8:	e006      	b.n	800b7b8 <HAL_GPIO_Init+0x1f8>
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e004      	b.n	800b7b8 <HAL_GPIO_Init+0x1f8>
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e002      	b.n	800b7b8 <HAL_GPIO_Init+0x1f8>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <HAL_GPIO_Init+0x1f8>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	2103      	movs	r1, #3
 800b7bc:	400a      	ands	r2, r1
 800b7be:	0092      	lsls	r2, r2, #2
 800b7c0:	4093      	lsls	r3, r2
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b7c8:	4935      	ldr	r1, [pc, #212]	@ (800b8a0 <HAL_GPIO_Init+0x2e0>)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	089b      	lsrs	r3, r3, #2
 800b7ce:	3302      	adds	r3, #2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b7d6:	4b38      	ldr	r3, [pc, #224]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	43da      	mvns	r2, r3
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	2380      	movs	r3, #128	@ 0x80
 800b7ec:	035b      	lsls	r3, r3, #13
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	d003      	beq.n	800b7fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b800:	4b2d      	ldr	r3, [pc, #180]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	43da      	mvns	r2, r3
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	4013      	ands	r3, r2
 800b80e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	2380      	movs	r3, #128	@ 0x80
 800b816:	039b      	lsls	r3, r3, #14
 800b818:	4013      	ands	r3, r2
 800b81a:	d003      	beq.n	800b824 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	4313      	orrs	r3, r2
 800b822:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b824:	4b24      	ldr	r3, [pc, #144]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b82a:	4b23      	ldr	r3, [pc, #140]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	43da      	mvns	r2, r3
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	4013      	ands	r3, r2
 800b838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	685a      	ldr	r2, [r3, #4]
 800b83e:	2380      	movs	r3, #128	@ 0x80
 800b840:	029b      	lsls	r3, r3, #10
 800b842:	4013      	ands	r3, r2
 800b844:	d003      	beq.n	800b84e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b84e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b854:	4b18      	ldr	r3, [pc, #96]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	43da      	mvns	r2, r3
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	4013      	ands	r3, r2
 800b862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	2380      	movs	r3, #128	@ 0x80
 800b86a:	025b      	lsls	r3, r3, #9
 800b86c:	4013      	ands	r3, r2
 800b86e:	d003      	beq.n	800b878 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	4313      	orrs	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b878:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b8 <HAL_GPIO_Init+0x2f8>)
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	3301      	adds	r3, #1
 800b882:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	40da      	lsrs	r2, r3
 800b88c:	1e13      	subs	r3, r2, #0
 800b88e:	d000      	beq.n	800b892 <HAL_GPIO_Init+0x2d2>
 800b890:	e6a2      	b.n	800b5d8 <HAL_GPIO_Init+0x18>
  }
}
 800b892:	46c0      	nop			@ (mov r8, r8)
 800b894:	46c0      	nop			@ (mov r8, r8)
 800b896:	46bd      	mov	sp, r7
 800b898:	b006      	add	sp, #24
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	40021000 	.word	0x40021000
 800b8a0:	40010000 	.word	0x40010000
 800b8a4:	50000400 	.word	0x50000400
 800b8a8:	50000800 	.word	0x50000800
 800b8ac:	50000c00 	.word	0x50000c00
 800b8b0:	50001000 	.word	0x50001000
 800b8b4:	50001c00 	.word	0x50001c00
 800b8b8:	40010400 	.word	0x40010400

0800b8bc <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b8d2:	e0bc      	b.n	800ba4e <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	409a      	lsls	r2, r3
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	4013      	ands	r3, r2
 800b8de:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d100      	bne.n	800b8e8 <HAL_GPIO_DeInit+0x2c>
 800b8e6:	e0af      	b.n	800ba48 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b8e8:	4a5e      	ldr	r2, [pc, #376]	@ (800ba64 <HAL_GPIO_DeInit+0x1a8>)
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	089b      	lsrs	r3, r3, #2
 800b8ee:	3302      	adds	r3, #2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	589b      	ldr	r3, [r3, r2]
 800b8f4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2203      	movs	r2, #3
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	220f      	movs	r2, #15
 800b900:	409a      	lsls	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4013      	ands	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	23a0      	movs	r3, #160	@ 0xa0
 800b90c:	05db      	lsls	r3, r3, #23
 800b90e:	429a      	cmp	r2, r3
 800b910:	d01f      	beq.n	800b952 <HAL_GPIO_DeInit+0x96>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a54      	ldr	r2, [pc, #336]	@ (800ba68 <HAL_GPIO_DeInit+0x1ac>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d019      	beq.n	800b94e <HAL_GPIO_DeInit+0x92>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a53      	ldr	r2, [pc, #332]	@ (800ba6c <HAL_GPIO_DeInit+0x1b0>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d013      	beq.n	800b94a <HAL_GPIO_DeInit+0x8e>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a52      	ldr	r2, [pc, #328]	@ (800ba70 <HAL_GPIO_DeInit+0x1b4>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00d      	beq.n	800b946 <HAL_GPIO_DeInit+0x8a>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a51      	ldr	r2, [pc, #324]	@ (800ba74 <HAL_GPIO_DeInit+0x1b8>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d007      	beq.n	800b942 <HAL_GPIO_DeInit+0x86>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a50      	ldr	r2, [pc, #320]	@ (800ba78 <HAL_GPIO_DeInit+0x1bc>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d101      	bne.n	800b93e <HAL_GPIO_DeInit+0x82>
 800b93a:	2305      	movs	r3, #5
 800b93c:	e00a      	b.n	800b954 <HAL_GPIO_DeInit+0x98>
 800b93e:	2306      	movs	r3, #6
 800b940:	e008      	b.n	800b954 <HAL_GPIO_DeInit+0x98>
 800b942:	2304      	movs	r3, #4
 800b944:	e006      	b.n	800b954 <HAL_GPIO_DeInit+0x98>
 800b946:	2303      	movs	r3, #3
 800b948:	e004      	b.n	800b954 <HAL_GPIO_DeInit+0x98>
 800b94a:	2302      	movs	r3, #2
 800b94c:	e002      	b.n	800b954 <HAL_GPIO_DeInit+0x98>
 800b94e:	2301      	movs	r3, #1
 800b950:	e000      	b.n	800b954 <HAL_GPIO_DeInit+0x98>
 800b952:	2300      	movs	r3, #0
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	2103      	movs	r1, #3
 800b958:	400a      	ands	r2, r1
 800b95a:	0092      	lsls	r2, r2, #2
 800b95c:	4093      	lsls	r3, r2
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	429a      	cmp	r2, r3
 800b962:	d132      	bne.n	800b9ca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b964:	4b45      	ldr	r3, [pc, #276]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	43d9      	mvns	r1, r3
 800b96c:	4b43      	ldr	r3, [pc, #268]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b96e:	400a      	ands	r2, r1
 800b970:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b972:	4b42      	ldr	r3, [pc, #264]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	43d9      	mvns	r1, r3
 800b97a:	4b40      	ldr	r3, [pc, #256]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b97c:	400a      	ands	r2, r1
 800b97e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b980:	4b3e      	ldr	r3, [pc, #248]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b982:	68da      	ldr	r2, [r3, #12]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	43d9      	mvns	r1, r3
 800b988:	4b3c      	ldr	r3, [pc, #240]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b98a:	400a      	ands	r2, r1
 800b98c:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b98e:	4b3b      	ldr	r3, [pc, #236]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	43d9      	mvns	r1, r3
 800b996:	4b39      	ldr	r3, [pc, #228]	@ (800ba7c <HAL_GPIO_DeInit+0x1c0>)
 800b998:	400a      	ands	r2, r1
 800b99a:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	2203      	movs	r2, #3
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	220f      	movs	r2, #15
 800b9a6:	409a      	lsls	r2, r3
 800b9a8:	0013      	movs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b9ac:	4a2d      	ldr	r2, [pc, #180]	@ (800ba64 <HAL_GPIO_DeInit+0x1a8>)
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	089b      	lsrs	r3, r3, #2
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	589a      	ldr	r2, [r3, r2]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	43d9      	mvns	r1, r3
 800b9bc:	4829      	ldr	r0, [pc, #164]	@ (800ba64 <HAL_GPIO_DeInit+0x1a8>)
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	089b      	lsrs	r3, r3, #2
 800b9c2:	400a      	ands	r2, r1
 800b9c4:	3302      	adds	r3, #2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	2103      	movs	r1, #3
 800b9d4:	4099      	lsls	r1, r3
 800b9d6:	000b      	movs	r3, r1
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	08da      	lsrs	r2, r3, #3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3208      	adds	r2, #8
 800b9e6:	0092      	lsls	r2, r2, #2
 800b9e8:	58d3      	ldr	r3, [r2, r3]
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	2107      	movs	r1, #7
 800b9ee:	400a      	ands	r2, r1
 800b9f0:	0092      	lsls	r2, r2, #2
 800b9f2:	210f      	movs	r1, #15
 800b9f4:	4091      	lsls	r1, r2
 800b9f6:	000a      	movs	r2, r1
 800b9f8:	43d1      	mvns	r1, r2
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	08d2      	lsrs	r2, r2, #3
 800b9fe:	4019      	ands	r1, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3208      	adds	r2, #8
 800ba04:	0092      	lsls	r2, r2, #2
 800ba06:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	0052      	lsls	r2, r2, #1
 800ba10:	2103      	movs	r1, #3
 800ba12:	4091      	lsls	r1, r2
 800ba14:	000a      	movs	r2, r1
 800ba16:	43d2      	mvns	r2, r2
 800ba18:	401a      	ands	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	2101      	movs	r1, #1
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	4091      	lsls	r1, r2
 800ba28:	000a      	movs	r2, r1
 800ba2a:	43d2      	mvns	r2, r2
 800ba2c:	401a      	ands	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	0052      	lsls	r2, r2, #1
 800ba3a:	2103      	movs	r1, #3
 800ba3c:	4091      	lsls	r1, r2
 800ba3e:	000a      	movs	r2, r1
 800ba40:	43d2      	mvns	r2, r2
 800ba42:	401a      	ands	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	609a      	str	r2, [r3, #8]
    }
    position++;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	40da      	lsrs	r2, r3
 800ba54:	1e13      	subs	r3, r2, #0
 800ba56:	d000      	beq.n	800ba5a <HAL_GPIO_DeInit+0x19e>
 800ba58:	e73c      	b.n	800b8d4 <HAL_GPIO_DeInit+0x18>
  }
}
 800ba5a:	46c0      	nop			@ (mov r8, r8)
 800ba5c:	46c0      	nop			@ (mov r8, r8)
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	b006      	add	sp, #24
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	40010000 	.word	0x40010000
 800ba68:	50000400 	.word	0x50000400
 800ba6c:	50000800 	.word	0x50000800
 800ba70:	50000c00 	.word	0x50000c00
 800ba74:	50001000 	.word	0x50001000
 800ba78:	50001c00 	.word	0x50001c00
 800ba7c:	40010400 	.word	0x40010400

0800ba80 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	000a      	movs	r2, r1
 800ba8a:	1cbb      	adds	r3, r7, #2
 800ba8c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	1cba      	adds	r2, r7, #2
 800ba94:	8812      	ldrh	r2, [r2, #0]
 800ba96:	4013      	ands	r3, r2
 800ba98:	d004      	beq.n	800baa4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800ba9a:	230f      	movs	r3, #15
 800ba9c:	18fb      	adds	r3, r7, r3
 800ba9e:	2201      	movs	r2, #1
 800baa0:	701a      	strb	r2, [r3, #0]
 800baa2:	e003      	b.n	800baac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800baa4:	230f      	movs	r3, #15
 800baa6:	18fb      	adds	r3, r7, r3
 800baa8:	2200      	movs	r2, #0
 800baaa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800baac:	230f      	movs	r3, #15
 800baae:	18fb      	adds	r3, r7, r3
 800bab0:	781b      	ldrb	r3, [r3, #0]
}
 800bab2:	0018      	movs	r0, r3
 800bab4:	46bd      	mov	sp, r7
 800bab6:	b004      	add	sp, #16
 800bab8:	bd80      	pop	{r7, pc}

0800baba <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	0008      	movs	r0, r1
 800bac4:	0011      	movs	r1, r2
 800bac6:	1cbb      	adds	r3, r7, #2
 800bac8:	1c02      	adds	r2, r0, #0
 800baca:	801a      	strh	r2, [r3, #0]
 800bacc:	1c7b      	adds	r3, r7, #1
 800bace:	1c0a      	adds	r2, r1, #0
 800bad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bad2:	1c7b      	adds	r3, r7, #1
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d004      	beq.n	800bae4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bada:	1cbb      	adds	r3, r7, #2
 800badc:	881a      	ldrh	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800bae2:	e003      	b.n	800baec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800bae4:	1cbb      	adds	r3, r7, #2
 800bae6:	881a      	ldrh	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800baec:	46c0      	nop			@ (mov r8, r8)
 800baee:	46bd      	mov	sp, r7
 800baf0:	b002      	add	sp, #8
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e082      	b.n	800bc0c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2241      	movs	r2, #65	@ 0x41
 800bb0a:	5c9b      	ldrb	r3, [r3, r2]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d107      	bne.n	800bb22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2240      	movs	r2, #64	@ 0x40
 800bb16:	2100      	movs	r1, #0
 800bb18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f7fa fae3 	bl	80060e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2241      	movs	r2, #65	@ 0x41
 800bb26:	2124      	movs	r1, #36	@ 0x24
 800bb28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2101      	movs	r1, #1
 800bb36:	438a      	bics	r2, r1
 800bb38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4934      	ldr	r1, [pc, #208]	@ (800bc14 <HAL_I2C_Init+0x120>)
 800bb44:	400a      	ands	r2, r1
 800bb46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689a      	ldr	r2, [r3, #8]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4931      	ldr	r1, [pc, #196]	@ (800bc18 <HAL_I2C_Init+0x124>)
 800bb54:	400a      	ands	r2, r1
 800bb56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d108      	bne.n	800bb72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2180      	movs	r1, #128	@ 0x80
 800bb6a:	0209      	lsls	r1, r1, #8
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	609a      	str	r2, [r3, #8]
 800bb70:	e007      	b.n	800bb82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689a      	ldr	r2, [r3, #8]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2184      	movs	r1, #132	@ 0x84
 800bb7c:	0209      	lsls	r1, r1, #8
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d104      	bne.n	800bb94 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2280      	movs	r2, #128	@ 0x80
 800bb90:	0112      	lsls	r2, r2, #4
 800bb92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	491f      	ldr	r1, [pc, #124]	@ (800bc1c <HAL_I2C_Init+0x128>)
 800bba0:	430a      	orrs	r2, r1
 800bba2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68da      	ldr	r2, [r3, #12]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	491a      	ldr	r1, [pc, #104]	@ (800bc18 <HAL_I2C_Init+0x124>)
 800bbb0:	400a      	ands	r2, r1
 800bbb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691a      	ldr	r2, [r3, #16]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	431a      	orrs	r2, r3
 800bbbe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	69d9      	ldr	r1, [r3, #28]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1a      	ldr	r2, [r3, #32]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2101      	movs	r1, #1
 800bbea:	430a      	orrs	r2, r1
 800bbec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2241      	movs	r2, #65	@ 0x41
 800bbf8:	2120      	movs	r1, #32
 800bbfa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2242      	movs	r2, #66	@ 0x42
 800bc06:	2100      	movs	r1, #0
 800bc08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	0018      	movs	r0, r3
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	b002      	add	sp, #8
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	f0ffffff 	.word	0xf0ffffff
 800bc18:	ffff7fff 	.word	0xffff7fff
 800bc1c:	02008000 	.word	0x02008000

0800bc20 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800bc20:	b5b0      	push	{r4, r5, r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	0008      	movs	r0, r1
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	0019      	movs	r1, r3
 800bc2e:	230a      	movs	r3, #10
 800bc30:	18fb      	adds	r3, r7, r3
 800bc32:	1c02      	adds	r2, r0, #0
 800bc34:	801a      	strh	r2, [r3, #0]
 800bc36:	2308      	movs	r3, #8
 800bc38:	18fb      	adds	r3, r7, r3
 800bc3a:	1c0a      	adds	r2, r1, #0
 800bc3c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2241      	movs	r2, #65	@ 0x41
 800bc42:	5c9b      	ldrb	r3, [r3, r2]
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	2b20      	cmp	r3, #32
 800bc48:	d000      	beq.n	800bc4c <HAL_I2C_Master_Transmit_DMA+0x2c>
 800bc4a:	e0dd      	b.n	800be08 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	2380      	movs	r3, #128	@ 0x80
 800bc54:	021b      	lsls	r3, r3, #8
 800bc56:	401a      	ands	r2, r3
 800bc58:	2380      	movs	r3, #128	@ 0x80
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d101      	bne.n	800bc64 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800bc60:	2302      	movs	r3, #2
 800bc62:	e0d2      	b.n	800be0a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2240      	movs	r2, #64	@ 0x40
 800bc68:	5c9b      	ldrb	r3, [r3, r2]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d101      	bne.n	800bc72 <HAL_I2C_Master_Transmit_DMA+0x52>
 800bc6e:	2302      	movs	r3, #2
 800bc70:	e0cb      	b.n	800be0a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2240      	movs	r2, #64	@ 0x40
 800bc76:	2101      	movs	r1, #1
 800bc78:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2241      	movs	r2, #65	@ 0x41
 800bc7e:	2121      	movs	r1, #33	@ 0x21
 800bc80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2242      	movs	r2, #66	@ 0x42
 800bc86:	2110      	movs	r1, #16
 800bc88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2208      	movs	r2, #8
 800bc9a:	18ba      	adds	r2, r7, r2
 800bc9c:	8812      	ldrh	r2, [r2, #0]
 800bc9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a5c      	ldr	r2, [pc, #368]	@ (800be14 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800bca4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4a5b      	ldr	r2, [pc, #364]	@ (800be18 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800bcaa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2bff      	cmp	r3, #255	@ 0xff
 800bcb4:	d906      	bls.n	800bcc4 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	22ff      	movs	r2, #255	@ 0xff
 800bcba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bcbc:	2380      	movs	r3, #128	@ 0x80
 800bcbe:	045b      	lsls	r3, r3, #17
 800bcc0:	617b      	str	r3, [r7, #20]
 800bcc2:	e007      	b.n	800bcd4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bcce:	2380      	movs	r3, #128	@ 0x80
 800bcd0:	049b      	lsls	r3, r3, #18
 800bcd2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d100      	bne.n	800bcde <HAL_I2C_Master_Transmit_DMA+0xbe>
 800bcdc:	e078      	b.n	800bdd0 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d023      	beq.n	800bd2e <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcea:	4a4c      	ldr	r2, [pc, #304]	@ (800be1c <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800bcec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf2:	4a4b      	ldr	r2, [pc, #300]	@ (800be20 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800bcf4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd02:	2200      	movs	r2, #0
 800bd04:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3328      	adds	r3, #40	@ 0x28
 800bd12:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bd18:	2513      	movs	r5, #19
 800bd1a:	197c      	adds	r4, r7, r5
 800bd1c:	f7ff f8ac 	bl	800ae78 <HAL_DMA_Start_IT>
 800bd20:	0003      	movs	r3, r0
 800bd22:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bd24:	197b      	adds	r3, r7, r5
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d13d      	bne.n	800bda8 <HAL_I2C_Master_Transmit_DMA+0x188>
 800bd2c:	e013      	b.n	800bd56 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2241      	movs	r2, #65	@ 0x41
 800bd32:	2120      	movs	r1, #32
 800bd34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2242      	movs	r2, #66	@ 0x42
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd42:	2280      	movs	r2, #128	@ 0x80
 800bd44:	431a      	orrs	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2240      	movs	r2, #64	@ 0x40
 800bd4e:	2100      	movs	r1, #0
 800bd50:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e059      	b.n	800be0a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd5a:	b2da      	uxtb	r2, r3
 800bd5c:	697c      	ldr	r4, [r7, #20]
 800bd5e:	230a      	movs	r3, #10
 800bd60:	18fb      	adds	r3, r7, r3
 800bd62:	8819      	ldrh	r1, [r3, #0]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	4b2f      	ldr	r3, [pc, #188]	@ (800be24 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	0023      	movs	r3, r4
 800bd6c:	f001 fd0e 	bl	800d78c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2240      	movs	r2, #64	@ 0x40
 800bd86:	2100      	movs	r1, #0
 800bd88:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2110      	movs	r1, #16
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f001 fd36 	bl	800d800 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2180      	movs	r1, #128	@ 0x80
 800bda0:	01c9      	lsls	r1, r1, #7
 800bda2:	430a      	orrs	r2, r1
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	e02d      	b.n	800be04 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2241      	movs	r2, #65	@ 0x41
 800bdac:	2120      	movs	r1, #32
 800bdae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2242      	movs	r2, #66	@ 0x42
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdbc:	2210      	movs	r2, #16
 800bdbe:	431a      	orrs	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2240      	movs	r2, #64	@ 0x40
 800bdc8:	2100      	movs	r1, #0
 800bdca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e01c      	b.n	800be0a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4a15      	ldr	r2, [pc, #84]	@ (800be28 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800bdd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	2380      	movs	r3, #128	@ 0x80
 800bdde:	049c      	lsls	r4, r3, #18
 800bde0:	230a      	movs	r3, #10
 800bde2:	18fb      	adds	r3, r7, r3
 800bde4:	8819      	ldrh	r1, [r3, #0]
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	4b0e      	ldr	r3, [pc, #56]	@ (800be24 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	0023      	movs	r3, r4
 800bdee:	f001 fccd 	bl	800d78c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2240      	movs	r2, #64	@ 0x40
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	0018      	movs	r0, r3
 800be00:	f001 fcfe 	bl	800d800 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	e000      	b.n	800be0a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800be08:	2302      	movs	r3, #2
  }
}
 800be0a:	0018      	movs	r0, r3
 800be0c:	46bd      	mov	sp, r7
 800be0e:	b006      	add	sp, #24
 800be10:	bdb0      	pop	{r4, r5, r7, pc}
 800be12:	46c0      	nop			@ (mov r8, r8)
 800be14:	ffff0000 	.word	0xffff0000
 800be18:	0800c625 	.word	0x0800c625
 800be1c:	0800d5dd 	.word	0x0800d5dd
 800be20:	0800d71d 	.word	0x0800d71d
 800be24:	80002000 	.word	0x80002000
 800be28:	0800c1d1 	.word	0x0800c1d1

0800be2c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800be2c:	b5b0      	push	{r4, r5, r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af02      	add	r7, sp, #8
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	0008      	movs	r0, r1
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	0019      	movs	r1, r3
 800be3a:	230a      	movs	r3, #10
 800be3c:	18fb      	adds	r3, r7, r3
 800be3e:	1c02      	adds	r2, r0, #0
 800be40:	801a      	strh	r2, [r3, #0]
 800be42:	2308      	movs	r3, #8
 800be44:	18fb      	adds	r3, r7, r3
 800be46:	1c0a      	adds	r2, r1, #0
 800be48:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2241      	movs	r2, #65	@ 0x41
 800be4e:	5c9b      	ldrb	r3, [r3, r2]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b20      	cmp	r3, #32
 800be54:	d000      	beq.n	800be58 <HAL_I2C_Master_Receive_DMA+0x2c>
 800be56:	e0dd      	b.n	800c014 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	699a      	ldr	r2, [r3, #24]
 800be5e:	2380      	movs	r3, #128	@ 0x80
 800be60:	021b      	lsls	r3, r3, #8
 800be62:	401a      	ands	r2, r3
 800be64:	2380      	movs	r3, #128	@ 0x80
 800be66:	021b      	lsls	r3, r3, #8
 800be68:	429a      	cmp	r2, r3
 800be6a:	d101      	bne.n	800be70 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800be6c:	2302      	movs	r3, #2
 800be6e:	e0d2      	b.n	800c016 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2240      	movs	r2, #64	@ 0x40
 800be74:	5c9b      	ldrb	r3, [r3, r2]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d101      	bne.n	800be7e <HAL_I2C_Master_Receive_DMA+0x52>
 800be7a:	2302      	movs	r3, #2
 800be7c:	e0cb      	b.n	800c016 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2240      	movs	r2, #64	@ 0x40
 800be82:	2101      	movs	r1, #1
 800be84:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2241      	movs	r2, #65	@ 0x41
 800be8a:	2122      	movs	r1, #34	@ 0x22
 800be8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2242      	movs	r2, #66	@ 0x42
 800be92:	2110      	movs	r1, #16
 800be94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2208      	movs	r2, #8
 800bea6:	18ba      	adds	r2, r7, r2
 800bea8:	8812      	ldrh	r2, [r2, #0]
 800beaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4a5c      	ldr	r2, [pc, #368]	@ (800c020 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800beb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4a5b      	ldr	r2, [pc, #364]	@ (800c024 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800beb6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	2bff      	cmp	r3, #255	@ 0xff
 800bec0:	d906      	bls.n	800bed0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	22ff      	movs	r2, #255	@ 0xff
 800bec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bec8:	2380      	movs	r3, #128	@ 0x80
 800beca:	045b      	lsls	r3, r3, #17
 800becc:	617b      	str	r3, [r7, #20]
 800bece:	e007      	b.n	800bee0 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800beda:	2380      	movs	r3, #128	@ 0x80
 800bedc:	049b      	lsls	r3, r3, #18
 800bede:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d100      	bne.n	800beea <HAL_I2C_Master_Receive_DMA+0xbe>
 800bee8:	e078      	b.n	800bfdc <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d023      	beq.n	800bf3a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bef6:	4a4c      	ldr	r2, [pc, #304]	@ (800c028 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800bef8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800befe:	4a4b      	ldr	r2, [pc, #300]	@ (800c02c <HAL_I2C_Master_Receive_DMA+0x200>)
 800bf00:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf06:	2200      	movs	r2, #0
 800bf08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf0e:	2200      	movs	r2, #0
 800bf10:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3324      	adds	r3, #36	@ 0x24
 800bf1c:	0019      	movs	r1, r3
 800bf1e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bf24:	2513      	movs	r5, #19
 800bf26:	197c      	adds	r4, r7, r5
 800bf28:	f7fe ffa6 	bl	800ae78 <HAL_DMA_Start_IT>
 800bf2c:	0003      	movs	r3, r0
 800bf2e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bf30:	197b      	adds	r3, r7, r5
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d13d      	bne.n	800bfb4 <HAL_I2C_Master_Receive_DMA+0x188>
 800bf38:	e013      	b.n	800bf62 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2241      	movs	r2, #65	@ 0x41
 800bf3e:	2120      	movs	r1, #32
 800bf40:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2242      	movs	r2, #66	@ 0x42
 800bf46:	2100      	movs	r1, #0
 800bf48:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf4e:	2280      	movs	r2, #128	@ 0x80
 800bf50:	431a      	orrs	r2, r3
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2240      	movs	r2, #64	@ 0x40
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e059      	b.n	800c016 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	697c      	ldr	r4, [r7, #20]
 800bf6a:	230a      	movs	r3, #10
 800bf6c:	18fb      	adds	r3, r7, r3
 800bf6e:	8819      	ldrh	r1, [r3, #0]
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	4b2f      	ldr	r3, [pc, #188]	@ (800c030 <HAL_I2C_Master_Receive_DMA+0x204>)
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	0023      	movs	r3, r4
 800bf78:	f001 fc08 	bl	800d78c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2240      	movs	r2, #64	@ 0x40
 800bf92:	2100      	movs	r1, #0
 800bf94:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2110      	movs	r1, #16
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	f001 fc30 	bl	800d800 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2180      	movs	r1, #128	@ 0x80
 800bfac:	0209      	lsls	r1, r1, #8
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	601a      	str	r2, [r3, #0]
 800bfb2:	e02d      	b.n	800c010 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2241      	movs	r2, #65	@ 0x41
 800bfb8:	2120      	movs	r1, #32
 800bfba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2242      	movs	r2, #66	@ 0x42
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfc8:	2210      	movs	r2, #16
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2240      	movs	r2, #64	@ 0x40
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e01c      	b.n	800c016 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4a15      	ldr	r2, [pc, #84]	@ (800c034 <HAL_I2C_Master_Receive_DMA+0x208>)
 800bfe0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	2380      	movs	r3, #128	@ 0x80
 800bfea:	049c      	lsls	r4, r3, #18
 800bfec:	230a      	movs	r3, #10
 800bfee:	18fb      	adds	r3, r7, r3
 800bff0:	8819      	ldrh	r1, [r3, #0]
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	4b0e      	ldr	r3, [pc, #56]	@ (800c030 <HAL_I2C_Master_Receive_DMA+0x204>)
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	0023      	movs	r3, r4
 800bffa:	f001 fbc7 	bl	800d78c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2240      	movs	r2, #64	@ 0x40
 800c002:	2100      	movs	r1, #0
 800c004:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2101      	movs	r1, #1
 800c00a:	0018      	movs	r0, r3
 800c00c:	f001 fbf8 	bl	800d800 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	e000      	b.n	800c016 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c014:	2302      	movs	r3, #2
  }
}
 800c016:	0018      	movs	r0, r3
 800c018:	46bd      	mov	sp, r7
 800c01a:	b006      	add	sp, #24
 800c01c:	bdb0      	pop	{r4, r5, r7, pc}
 800c01e:	46c0      	nop			@ (mov r8, r8)
 800c020:	ffff0000 	.word	0xffff0000
 800c024:	0800c625 	.word	0x0800c625
 800c028:	0800d67d 	.word	0x0800d67d
 800c02c:	0800d71d 	.word	0x0800d71d
 800c030:	80002400 	.word	0x80002400
 800c034:	0800c1d1 	.word	0x0800c1d1

0800c038 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c054:	2b00      	cmp	r3, #0
 800c056:	d005      	beq.n	800c064 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c05c:	68ba      	ldr	r2, [r7, #8]
 800c05e:	68f9      	ldr	r1, [r7, #12]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
  }
}
 800c064:	46c0      	nop			@ (mov r8, r8)
 800c066:	46bd      	mov	sp, r7
 800c068:	b004      	add	sp, #16
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c084:	697a      	ldr	r2, [r7, #20]
 800c086:	2380      	movs	r3, #128	@ 0x80
 800c088:	005b      	lsls	r3, r3, #1
 800c08a:	4013      	ands	r3, r2
 800c08c:	d00e      	beq.n	800c0ac <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2280      	movs	r2, #128	@ 0x80
 800c092:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c094:	d00a      	beq.n	800c0ac <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09a:	2201      	movs	r2, #1
 800c09c:	431a      	orrs	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2280      	movs	r2, #128	@ 0x80
 800c0a8:	0052      	lsls	r2, r2, #1
 800c0aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	2380      	movs	r3, #128	@ 0x80
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	d00e      	beq.n	800c0d4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	2280      	movs	r2, #128	@ 0x80
 800c0ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c0bc:	d00a      	beq.n	800c0d4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0c2:	2208      	movs	r2, #8
 800c0c4:	431a      	orrs	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2280      	movs	r2, #128	@ 0x80
 800c0d0:	00d2      	lsls	r2, r2, #3
 800c0d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	2380      	movs	r3, #128	@ 0x80
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4013      	ands	r3, r2
 800c0dc:	d00e      	beq.n	800c0fc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2280      	movs	r2, #128	@ 0x80
 800c0e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c0e4:	d00a      	beq.n	800c0fc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	431a      	orrs	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2280      	movs	r2, #128	@ 0x80
 800c0f8:	0092      	lsls	r2, r2, #2
 800c0fa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c100:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	220b      	movs	r2, #11
 800c106:	4013      	ands	r3, r2
 800c108:	d005      	beq.n	800c116 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	0011      	movs	r1, r2
 800c110:	0018      	movs	r0, r3
 800c112:	f001 f915 	bl	800d340 <I2C_ITError>
  }
}
 800c116:	46c0      	nop			@ (mov r8, r8)
 800c118:	46bd      	mov	sp, r7
 800c11a:	b006      	add	sp, #24
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c126:	46c0      	nop			@ (mov r8, r8)
 800c128:	46bd      	mov	sp, r7
 800c12a:	b002      	add	sp, #8
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b082      	sub	sp, #8
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c136:	46c0      	nop			@ (mov r8, r8)
 800c138:	46bd      	mov	sp, r7
 800c13a:	b002      	add	sp, #8
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c146:	46c0      	nop			@ (mov r8, r8)
 800c148:	46bd      	mov	sp, r7
 800c14a:	b002      	add	sp, #8
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c156:	46c0      	nop			@ (mov r8, r8)
 800c158:	46bd      	mov	sp, r7
 800c15a:	b002      	add	sp, #8
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b082      	sub	sp, #8
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	0008      	movs	r0, r1
 800c168:	0011      	movs	r1, r2
 800c16a:	1cfb      	adds	r3, r7, #3
 800c16c:	1c02      	adds	r2, r0, #0
 800c16e:	701a      	strb	r2, [r3, #0]
 800c170:	003b      	movs	r3, r7
 800c172:	1c0a      	adds	r2, r1, #0
 800c174:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	46bd      	mov	sp, r7
 800c17a:	b002      	add	sp, #8
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c186:	46c0      	nop			@ (mov r8, r8)
 800c188:	46bd      	mov	sp, r7
 800c18a:	b002      	add	sp, #8
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c196:	46c0      	nop			@ (mov r8, r8)
 800c198:	46bd      	mov	sp, r7
 800c19a:	b002      	add	sp, #8
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b082      	sub	sp, #8
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c1a6:	46c0      	nop			@ (mov r8, r8)
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	b002      	add	sp, #8
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c1b6:	46c0      	nop			@ (mov r8, r8)
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	b002      	add	sp, #8
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c1c6:	46c0      	nop			@ (mov r8, r8)
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	b002      	add	sp, #8
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c1d0:	b590      	push	{r4, r7, lr}
 800c1d2:	b089      	sub	sp, #36	@ 0x24
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2240      	movs	r2, #64	@ 0x40
 800c1e4:	5c9b      	ldrb	r3, [r3, r2]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d101      	bne.n	800c1ee <I2C_Master_ISR_IT+0x1e>
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	e113      	b.n	800c416 <I2C_Master_ISR_IT+0x246>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2240      	movs	r2, #64	@ 0x40
 800c1f2:	2101      	movs	r1, #1
 800c1f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2210      	movs	r2, #16
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	d012      	beq.n	800c224 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2210      	movs	r2, #16
 800c202:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c204:	d00e      	beq.n	800c224 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2210      	movs	r2, #16
 800c20c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c212:	2204      	movs	r2, #4
 800c214:	431a      	orrs	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	0018      	movs	r0, r3
 800c21e:	f001 f9ba 	bl	800d596 <I2C_Flush_TXDR>
 800c222:	e0e5      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	2204      	movs	r2, #4
 800c228:	4013      	ands	r3, r2
 800c22a:	d021      	beq.n	800c270 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2204      	movs	r2, #4
 800c230:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c232:	d01d      	beq.n	800c270 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2204      	movs	r2, #4
 800c238:	4393      	bics	r3, r2
 800c23a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c246:	b2d2      	uxtb	r2, r2
 800c248:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c258:	3b01      	subs	r3, #1
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c264:	b29b      	uxth	r3, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	b29a      	uxth	r2, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c26e:	e0bf      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2202      	movs	r2, #2
 800c274:	4013      	ands	r3, r2
 800c276:	d01c      	beq.n	800c2b2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c27e:	d018      	beq.n	800c2b2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c284:	781a      	ldrb	r2, [r3, #0]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c29a:	3b01      	subs	r3, #1
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c2b0:	e09e      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2280      	movs	r2, #128	@ 0x80
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	d100      	bne.n	800c2bc <I2C_Master_ISR_IT+0xec>
 800c2ba:	e069      	b.n	800c390 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2240      	movs	r2, #64	@ 0x40
 800c2c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c2c2:	d065      	beq.n	800c390 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d04a      	beq.n	800c364 <I2C_Master_ISR_IT+0x194>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d146      	bne.n	800c364 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	2112      	movs	r1, #18
 800c2e0:	187b      	adds	r3, r7, r1
 800c2e2:	0592      	lsls	r2, r2, #22
 800c2e4:	0d92      	lsrs	r2, r2, #22
 800c2e6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2bff      	cmp	r3, #255	@ 0xff
 800c2f0:	d910      	bls.n	800c314 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	22ff      	movs	r2, #255	@ 0xff
 800c2f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2fc:	b2da      	uxtb	r2, r3
 800c2fe:	2380      	movs	r3, #128	@ 0x80
 800c300:	045c      	lsls	r4, r3, #17
 800c302:	187b      	adds	r3, r7, r1
 800c304:	8819      	ldrh	r1, [r3, #0]
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	2300      	movs	r3, #0
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	0023      	movs	r3, r4
 800c30e:	f001 fa3d 	bl	800d78c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c312:	e03c      	b.n	800c38e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c318:	b29a      	uxth	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c322:	4a3f      	ldr	r2, [pc, #252]	@ (800c420 <I2C_Master_ISR_IT+0x250>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d00e      	beq.n	800c346 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c32c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c332:	2312      	movs	r3, #18
 800c334:	18fb      	adds	r3, r7, r3
 800c336:	8819      	ldrh	r1, [r3, #0]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	2300      	movs	r3, #0
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	0023      	movs	r3, r4
 800c340:	f001 fa24 	bl	800d78c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c344:	e023      	b.n	800c38e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	2380      	movs	r3, #128	@ 0x80
 800c34e:	049c      	lsls	r4, r3, #18
 800c350:	2312      	movs	r3, #18
 800c352:	18fb      	adds	r3, r7, r3
 800c354:	8819      	ldrh	r1, [r3, #0]
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	2300      	movs	r3, #0
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	0023      	movs	r3, r4
 800c35e:	f001 fa15 	bl	800d78c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c362:	e014      	b.n	800c38e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	2380      	movs	r3, #128	@ 0x80
 800c36c:	049b      	lsls	r3, r3, #18
 800c36e:	401a      	ands	r2, r3
 800c370:	2380      	movs	r3, #128	@ 0x80
 800c372:	049b      	lsls	r3, r3, #18
 800c374:	429a      	cmp	r2, r3
 800c376:	d004      	beq.n	800c382 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	0018      	movs	r0, r3
 800c37c:	f000 fcf4 	bl	800cd68 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c380:	e036      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2140      	movs	r1, #64	@ 0x40
 800c386:	0018      	movs	r0, r3
 800c388:	f000 ffda 	bl	800d340 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c38c:	e030      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
 800c38e:	e02f      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2240      	movs	r2, #64	@ 0x40
 800c394:	4013      	ands	r3, r2
 800c396:	d02b      	beq.n	800c3f0 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2240      	movs	r2, #64	@ 0x40
 800c39c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c39e:	d027      	beq.n	800c3f0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d11d      	bne.n	800c3e6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	685a      	ldr	r2, [r3, #4]
 800c3b0:	2380      	movs	r3, #128	@ 0x80
 800c3b2:	049b      	lsls	r3, r3, #18
 800c3b4:	401a      	ands	r2, r3
 800c3b6:	2380      	movs	r3, #128	@ 0x80
 800c3b8:	049b      	lsls	r3, r3, #18
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d018      	beq.n	800c3f0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c2:	4a17      	ldr	r2, [pc, #92]	@ (800c420 <I2C_Master_ISR_IT+0x250>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d109      	bne.n	800c3dc <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2180      	movs	r1, #128	@ 0x80
 800c3d4:	01c9      	lsls	r1, r1, #7
 800c3d6:	430a      	orrs	r2, r1
 800c3d8:	605a      	str	r2, [r3, #4]
 800c3da:	e009      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	0018      	movs	r0, r3
 800c3e0:	f000 fcc2 	bl	800cd68 <I2C_ITMasterSeqCplt>
 800c3e4:	e004      	b.n	800c3f0 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2140      	movs	r1, #64	@ 0x40
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	f000 ffa8 	bl	800d340 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	2220      	movs	r2, #32
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	d009      	beq.n	800c40c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3fe:	d005      	beq.n	800c40c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	0011      	movs	r1, r2
 800c406:	0018      	movs	r0, r3
 800c408:	f000 fd54 	bl	800ceb4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2240      	movs	r2, #64	@ 0x40
 800c410:	2100      	movs	r1, #0
 800c412:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	0018      	movs	r0, r3
 800c418:	46bd      	mov	sp, r7
 800c41a:	b007      	add	sp, #28
 800c41c:	bd90      	pop	{r4, r7, pc}
 800c41e:	46c0      	nop			@ (mov r8, r8)
 800c420:	ffff0000 	.word	0xffff0000

0800c424 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c434:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2240      	movs	r2, #64	@ 0x40
 800c43e:	5c9b      	ldrb	r3, [r3, r2]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d101      	bne.n	800c448 <I2C_Slave_ISR_IT+0x24>
 800c444:	2302      	movs	r3, #2
 800c446:	e0e6      	b.n	800c616 <I2C_Slave_ISR_IT+0x1f2>
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2240      	movs	r2, #64	@ 0x40
 800c44c:	2101      	movs	r1, #1
 800c44e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	2220      	movs	r2, #32
 800c454:	4013      	ands	r3, r2
 800c456:	d009      	beq.n	800c46c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2220      	movs	r2, #32
 800c45c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c45e:	d005      	beq.n	800c46c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	0011      	movs	r1, r2
 800c466:	0018      	movs	r0, r3
 800c468:	f000 fdf2 	bl	800d050 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	2210      	movs	r2, #16
 800c470:	4013      	ands	r3, r2
 800c472:	d052      	beq.n	800c51a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2210      	movs	r2, #16
 800c478:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c47a:	d04e      	beq.n	800c51a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c480:	b29b      	uxth	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d12d      	bne.n	800c4e2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2241      	movs	r2, #65	@ 0x41
 800c48a:	5c9b      	ldrb	r3, [r3, r2]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b28      	cmp	r3, #40	@ 0x28
 800c490:	d10b      	bne.n	800c4aa <I2C_Slave_ISR_IT+0x86>
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	2380      	movs	r3, #128	@ 0x80
 800c496:	049b      	lsls	r3, r3, #18
 800c498:	429a      	cmp	r2, r3
 800c49a:	d106      	bne.n	800c4aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	0011      	movs	r1, r2
 800c4a2:	0018      	movs	r0, r3
 800c4a4:	f000 fef4 	bl	800d290 <I2C_ITListenCplt>
 800c4a8:	e036      	b.n	800c518 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2241      	movs	r2, #65	@ 0x41
 800c4ae:	5c9b      	ldrb	r3, [r3, r2]
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b29      	cmp	r3, #41	@ 0x29
 800c4b4:	d110      	bne.n	800c4d8 <I2C_Slave_ISR_IT+0xb4>
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	4a59      	ldr	r2, [pc, #356]	@ (800c620 <I2C_Slave_ISR_IT+0x1fc>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d00c      	beq.n	800c4d8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2210      	movs	r2, #16
 800c4c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	0018      	movs	r0, r3
 800c4ca:	f001 f864 	bl	800d596 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f000 fc8b 	bl	800cdec <I2C_ITSlaveSeqCplt>
 800c4d6:	e01f      	b.n	800c518 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2210      	movs	r2, #16
 800c4de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c4e0:	e091      	b.n	800c606 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2210      	movs	r2, #16
 800c4e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	431a      	orrs	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d005      	beq.n	800c508 <I2C_Slave_ISR_IT+0xe4>
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	2380      	movs	r3, #128	@ 0x80
 800c500:	045b      	lsls	r3, r3, #17
 800c502:	429a      	cmp	r2, r3
 800c504:	d000      	beq.n	800c508 <I2C_Slave_ISR_IT+0xe4>
 800c506:	e07e      	b.n	800c606 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	0011      	movs	r1, r2
 800c510:	0018      	movs	r0, r3
 800c512:	f000 ff15 	bl	800d340 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c516:	e076      	b.n	800c606 <I2C_Slave_ISR_IT+0x1e2>
 800c518:	e075      	b.n	800c606 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2204      	movs	r2, #4
 800c51e:	4013      	ands	r3, r2
 800c520:	d02f      	beq.n	800c582 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2204      	movs	r2, #4
 800c526:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c528:	d02b      	beq.n	800c582 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c52e:	b29b      	uxth	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d018      	beq.n	800c566 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c550:	3b01      	subs	r3, #1
 800c552:	b29a      	uxth	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	3b01      	subs	r3, #1
 800c560:	b29a      	uxth	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d14c      	bne.n	800c60a <I2C_Slave_ISR_IT+0x1e6>
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	4a2b      	ldr	r2, [pc, #172]	@ (800c620 <I2C_Slave_ISR_IT+0x1fc>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d048      	beq.n	800c60a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	0018      	movs	r0, r3
 800c57c:	f000 fc36 	bl	800cdec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c580:	e043      	b.n	800c60a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2208      	movs	r2, #8
 800c586:	4013      	ands	r3, r2
 800c588:	d00a      	beq.n	800c5a0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2208      	movs	r2, #8
 800c58e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c590:	d006      	beq.n	800c5a0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	0011      	movs	r1, r2
 800c598:	0018      	movs	r0, r3
 800c59a:	f000 fb41 	bl	800cc20 <I2C_ITAddrCplt>
 800c59e:	e035      	b.n	800c60c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	d031      	beq.n	800c60c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5ae:	d02d      	beq.n	800c60c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d018      	beq.n	800c5ec <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5be:	781a      	ldrb	r2, [r3, #0]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c5ea:	e00f      	b.n	800c60c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c5ec:	697a      	ldr	r2, [r7, #20]
 800c5ee:	2380      	movs	r3, #128	@ 0x80
 800c5f0:	045b      	lsls	r3, r3, #17
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d002      	beq.n	800c5fc <I2C_Slave_ISR_IT+0x1d8>
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d107      	bne.n	800c60c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	0018      	movs	r0, r3
 800c600:	f000 fbf4 	bl	800cdec <I2C_ITSlaveSeqCplt>
 800c604:	e002      	b.n	800c60c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800c606:	46c0      	nop			@ (mov r8, r8)
 800c608:	e000      	b.n	800c60c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800c60a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2240      	movs	r2, #64	@ 0x40
 800c610:	2100      	movs	r1, #0
 800c612:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	0018      	movs	r0, r3
 800c618:	46bd      	mov	sp, r7
 800c61a:	b006      	add	sp, #24
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	46c0      	nop			@ (mov r8, r8)
 800c620:	ffff0000 	.word	0xffff0000

0800c624 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c624:	b590      	push	{r4, r7, lr}
 800c626:	b089      	sub	sp, #36	@ 0x24
 800c628:	af02      	add	r7, sp, #8
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2240      	movs	r2, #64	@ 0x40
 800c634:	5c9b      	ldrb	r3, [r3, r2]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d101      	bne.n	800c63e <I2C_Master_ISR_DMA+0x1a>
 800c63a:	2302      	movs	r3, #2
 800c63c:	e0e7      	b.n	800c80e <I2C_Master_ISR_DMA+0x1ea>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2240      	movs	r2, #64	@ 0x40
 800c642:	2101      	movs	r1, #1
 800c644:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2210      	movs	r2, #16
 800c64a:	4013      	ands	r3, r2
 800c64c:	d017      	beq.n	800c67e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2210      	movs	r2, #16
 800c652:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c654:	d013      	beq.n	800c67e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2210      	movs	r2, #16
 800c65c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c662:	2204      	movs	r2, #4
 800c664:	431a      	orrs	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2120      	movs	r1, #32
 800c66e:	0018      	movs	r0, r3
 800c670:	f001 f8c6 	bl	800d800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	0018      	movs	r0, r3
 800c678:	f000 ff8d 	bl	800d596 <I2C_Flush_TXDR>
 800c67c:	e0c2      	b.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2280      	movs	r2, #128	@ 0x80
 800c682:	4013      	ands	r3, r2
 800c684:	d100      	bne.n	800c688 <I2C_Master_ISR_DMA+0x64>
 800c686:	e07c      	b.n	800c782 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2240      	movs	r2, #64	@ 0x40
 800c68c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c68e:	d100      	bne.n	800c692 <I2C_Master_ISR_DMA+0x6e>
 800c690:	e077      	b.n	800c782 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2140      	movs	r1, #64	@ 0x40
 800c69e:	438a      	bics	r2, r1
 800c6a0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d055      	beq.n	800c758 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	2312      	movs	r3, #18
 800c6b6:	18fb      	adds	r3, r7, r3
 800c6b8:	0592      	lsls	r2, r2, #22
 800c6ba:	0d92      	lsrs	r2, r2, #22
 800c6bc:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	2bff      	cmp	r3, #255	@ 0xff
 800c6c6:	d906      	bls.n	800c6d6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	22ff      	movs	r2, #255	@ 0xff
 800c6cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c6ce:	2380      	movs	r3, #128	@ 0x80
 800c6d0:	045b      	lsls	r3, r3, #17
 800c6d2:	617b      	str	r3, [r7, #20]
 800c6d4:	e010      	b.n	800c6f8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e4:	4a4c      	ldr	r2, [pc, #304]	@ (800c818 <I2C_Master_ISR_DMA+0x1f4>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d003      	beq.n	800c6f2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ee:	617b      	str	r3, [r7, #20]
 800c6f0:	e002      	b.n	800c6f8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c6f2:	2380      	movs	r3, #128	@ 0x80
 800c6f4:	049b      	lsls	r3, r3, #18
 800c6f6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	697c      	ldr	r4, [r7, #20]
 800c700:	2312      	movs	r3, #18
 800c702:	18fb      	adds	r3, r7, r3
 800c704:	8819      	ldrh	r1, [r3, #0]
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	2300      	movs	r3, #0
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	0023      	movs	r3, r4
 800c70e:	f001 f83d 	bl	800d78c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c716:	b29a      	uxth	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	b29a      	uxth	r2, r3
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2241      	movs	r2, #65	@ 0x41
 800c728:	5c9b      	ldrb	r3, [r3, r2]
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	2b22      	cmp	r3, #34	@ 0x22
 800c72e:	d109      	bne.n	800c744 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2180      	movs	r1, #128	@ 0x80
 800c73c:	0209      	lsls	r1, r1, #8
 800c73e:	430a      	orrs	r2, r1
 800c740:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c742:	e05f      	b.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2180      	movs	r1, #128	@ 0x80
 800c750:	01c9      	lsls	r1, r1, #7
 800c752:	430a      	orrs	r2, r1
 800c754:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c756:	e055      	b.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	2380      	movs	r3, #128	@ 0x80
 800c760:	049b      	lsls	r3, r3, #18
 800c762:	401a      	ands	r2, r3
 800c764:	2380      	movs	r3, #128	@ 0x80
 800c766:	049b      	lsls	r3, r3, #18
 800c768:	429a      	cmp	r2, r3
 800c76a:	d004      	beq.n	800c776 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	0018      	movs	r0, r3
 800c770:	f000 fafa 	bl	800cd68 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c774:	e046      	b.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2140      	movs	r1, #64	@ 0x40
 800c77a:	0018      	movs	r0, r3
 800c77c:	f000 fde0 	bl	800d340 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c780:	e040      	b.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2240      	movs	r2, #64	@ 0x40
 800c786:	4013      	ands	r3, r2
 800c788:	d02c      	beq.n	800c7e4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2240      	movs	r2, #64	@ 0x40
 800c78e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c790:	d028      	beq.n	800c7e4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c796:	b29b      	uxth	r3, r3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d11d      	bne.n	800c7d8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	2380      	movs	r3, #128	@ 0x80
 800c7a4:	049b      	lsls	r3, r3, #18
 800c7a6:	401a      	ands	r2, r3
 800c7a8:	2380      	movs	r3, #128	@ 0x80
 800c7aa:	049b      	lsls	r3, r3, #18
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d028      	beq.n	800c802 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b4:	4a18      	ldr	r2, [pc, #96]	@ (800c818 <I2C_Master_ISR_DMA+0x1f4>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d109      	bne.n	800c7ce <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	685a      	ldr	r2, [r3, #4]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2180      	movs	r1, #128	@ 0x80
 800c7c6:	01c9      	lsls	r1, r1, #7
 800c7c8:	430a      	orrs	r2, r1
 800c7ca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c7cc:	e019      	b.n	800c802 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	f000 fac9 	bl	800cd68 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c7d6:	e014      	b.n	800c802 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2140      	movs	r1, #64	@ 0x40
 800c7dc:	0018      	movs	r0, r3
 800c7de:	f000 fdaf 	bl	800d340 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c7e2:	e00e      	b.n	800c802 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2220      	movs	r2, #32
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	d00b      	beq.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7f2:	d007      	beq.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	0011      	movs	r1, r2
 800c7fa:	0018      	movs	r0, r3
 800c7fc:	f000 fb5a 	bl	800ceb4 <I2C_ITMasterCplt>
 800c800:	e000      	b.n	800c804 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c802:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2240      	movs	r2, #64	@ 0x40
 800c808:	2100      	movs	r1, #0
 800c80a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	0018      	movs	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	b007      	add	sp, #28
 800c814:	bd90      	pop	{r4, r7, pc}
 800c816:	46c0      	nop			@ (mov r8, r8)
 800c818:	ffff0000 	.word	0xffff0000

0800c81c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c81c:	b590      	push	{r4, r7, lr}
 800c81e:	b089      	sub	sp, #36	@ 0x24
 800c820:	af02      	add	r7, sp, #8
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c828:	4b88      	ldr	r3, [pc, #544]	@ (800ca4c <I2C_Mem_ISR_DMA+0x230>)
 800c82a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2240      	movs	r2, #64	@ 0x40
 800c830:	5c9b      	ldrb	r3, [r3, r2]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d101      	bne.n	800c83a <I2C_Mem_ISR_DMA+0x1e>
 800c836:	2302      	movs	r3, #2
 800c838:	e104      	b.n	800ca44 <I2C_Mem_ISR_DMA+0x228>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2240      	movs	r2, #64	@ 0x40
 800c83e:	2101      	movs	r1, #1
 800c840:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2210      	movs	r2, #16
 800c846:	4013      	ands	r3, r2
 800c848:	d017      	beq.n	800c87a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2210      	movs	r2, #16
 800c84e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c850:	d013      	beq.n	800c87a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2210      	movs	r2, #16
 800c858:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c85e:	2204      	movs	r2, #4
 800c860:	431a      	orrs	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2120      	movs	r1, #32
 800c86a:	0018      	movs	r0, r3
 800c86c:	f000 ffc8 	bl	800d800 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	0018      	movs	r0, r3
 800c874:	f000 fe8f 	bl	800d596 <I2C_Flush_TXDR>
 800c878:	e0df      	b.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	2202      	movs	r2, #2
 800c87e:	4013      	ands	r3, r2
 800c880:	d00d      	beq.n	800c89e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2202      	movs	r2, #2
 800c886:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c888:	d009      	beq.n	800c89e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c892:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2201      	movs	r2, #1
 800c898:	4252      	negs	r2, r2
 800c89a:	651a      	str	r2, [r3, #80]	@ 0x50
 800c89c:	e0cd      	b.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	2280      	movs	r2, #128	@ 0x80
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	d05e      	beq.n	800c964 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2240      	movs	r2, #64	@ 0x40
 800c8aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c8ac:	d05a      	beq.n	800c964 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2110      	movs	r1, #16
 800c8b2:	0018      	movs	r0, r3
 800c8b4:	f000 ffa4 	bl	800d800 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d04a      	beq.n	800c958 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	2bff      	cmp	r3, #255	@ 0xff
 800c8ca:	d910      	bls.n	800c8ee <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	22ff      	movs	r2, #255	@ 0xff
 800c8d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8d6:	b299      	uxth	r1, r3
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	2380      	movs	r3, #128	@ 0x80
 800c8e0:	045b      	lsls	r3, r3, #17
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	2400      	movs	r4, #0
 800c8e6:	9400      	str	r4, [sp, #0]
 800c8e8:	f000 ff50 	bl	800d78c <I2C_TransferConfig>
 800c8ec:	e011      	b.n	800c912 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8fc:	b299      	uxth	r1, r3
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c902:	b2da      	uxtb	r2, r3
 800c904:	2380      	movs	r3, #128	@ 0x80
 800c906:	049b      	lsls	r3, r3, #18
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	2400      	movs	r4, #0
 800c90c:	9400      	str	r4, [sp, #0]
 800c90e:	f000 ff3d 	bl	800d78c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c916:	b29a      	uxth	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	b29a      	uxth	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2241      	movs	r2, #65	@ 0x41
 800c928:	5c9b      	ldrb	r3, [r3, r2]
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b22      	cmp	r3, #34	@ 0x22
 800c92e:	d109      	bne.n	800c944 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2180      	movs	r1, #128	@ 0x80
 800c93c:	0209      	lsls	r1, r1, #8
 800c93e:	430a      	orrs	r2, r1
 800c940:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c942:	e07a      	b.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2180      	movs	r1, #128	@ 0x80
 800c950:	01c9      	lsls	r1, r1, #7
 800c952:	430a      	orrs	r2, r1
 800c954:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c956:	e070      	b.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2140      	movs	r1, #64	@ 0x40
 800c95c:	0018      	movs	r0, r3
 800c95e:	f000 fcef 	bl	800d340 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c962:	e06a      	b.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2240      	movs	r2, #64	@ 0x40
 800c968:	4013      	ands	r3, r2
 800c96a:	d058      	beq.n	800ca1e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2240      	movs	r2, #64	@ 0x40
 800c970:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c972:	d054      	beq.n	800ca1e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2241      	movs	r2, #65	@ 0x41
 800c978:	5c9b      	ldrb	r3, [r3, r2]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b22      	cmp	r3, #34	@ 0x22
 800c97e:	d101      	bne.n	800c984 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c980:	4b33      	ldr	r3, [pc, #204]	@ (800ca50 <I2C_Mem_ISR_DMA+0x234>)
 800c982:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c988:	b29b      	uxth	r3, r3
 800c98a:	2bff      	cmp	r3, #255	@ 0xff
 800c98c:	d911      	bls.n	800c9b2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	22ff      	movs	r2, #255	@ 0xff
 800c992:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c998:	b299      	uxth	r1, r3
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	2380      	movs	r3, #128	@ 0x80
 800c9a2:	045c      	lsls	r4, r3, #17
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	0023      	movs	r3, r4
 800c9ac:	f000 feee 	bl	800d78c <I2C_TransferConfig>
 800c9b0:	e012      	b.n	800c9d8 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9c0:	b299      	uxth	r1, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	2380      	movs	r3, #128	@ 0x80
 800c9ca:	049c      	lsls	r4, r3, #18
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	0023      	movs	r3, r4
 800c9d4:	f000 feda 	bl	800d78c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2241      	movs	r2, #65	@ 0x41
 800c9ee:	5c9b      	ldrb	r3, [r3, r2]
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b22      	cmp	r3, #34	@ 0x22
 800c9f4:	d109      	bne.n	800ca0a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2180      	movs	r1, #128	@ 0x80
 800ca02:	0209      	lsls	r1, r1, #8
 800ca04:	430a      	orrs	r2, r1
 800ca06:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca08:	e017      	b.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2180      	movs	r1, #128	@ 0x80
 800ca16:	01c9      	lsls	r1, r1, #7
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca1c:	e00d      	b.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2220      	movs	r2, #32
 800ca22:	4013      	ands	r3, r2
 800ca24:	d009      	beq.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ca2c:	d005      	beq.n	800ca3a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	0011      	movs	r1, r2
 800ca34:	0018      	movs	r0, r3
 800ca36:	f000 fa3d 	bl	800ceb4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2240      	movs	r2, #64	@ 0x40
 800ca3e:	2100      	movs	r1, #0
 800ca40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	0018      	movs	r0, r3
 800ca46:	46bd      	mov	sp, r7
 800ca48:	b007      	add	sp, #28
 800ca4a:	bd90      	pop	{r4, r7, pc}
 800ca4c:	80002000 	.word	0x80002000
 800ca50:	80002400 	.word	0x80002400

0800ca54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2240      	movs	r2, #64	@ 0x40
 800ca6e:	5c9b      	ldrb	r3, [r3, r2]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d101      	bne.n	800ca78 <I2C_Slave_ISR_DMA+0x24>
 800ca74:	2302      	movs	r3, #2
 800ca76:	e0cd      	b.n	800cc14 <I2C_Slave_ISR_DMA+0x1c0>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2240      	movs	r2, #64	@ 0x40
 800ca7c:	2101      	movs	r1, #1
 800ca7e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2220      	movs	r2, #32
 800ca84:	4013      	ands	r3, r2
 800ca86:	d009      	beq.n	800ca9c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2220      	movs	r2, #32
 800ca8c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ca8e:	d005      	beq.n	800ca9c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	0011      	movs	r1, r2
 800ca96:	0018      	movs	r0, r3
 800ca98:	f000 fada 	bl	800d050 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	2210      	movs	r2, #16
 800caa0:	4013      	ands	r3, r2
 800caa2:	d100      	bne.n	800caa6 <I2C_Slave_ISR_DMA+0x52>
 800caa4:	e0a3      	b.n	800cbee <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2210      	movs	r2, #16
 800caaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800caac:	d100      	bne.n	800cab0 <I2C_Slave_ISR_DMA+0x5c>
 800caae:	e09e      	b.n	800cbee <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	2380      	movs	r3, #128	@ 0x80
 800cab4:	01db      	lsls	r3, r3, #7
 800cab6:	4013      	ands	r3, r2
 800cab8:	d105      	bne.n	800cac6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	2380      	movs	r3, #128	@ 0x80
 800cabe:	021b      	lsls	r3, r3, #8
 800cac0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cac2:	d100      	bne.n	800cac6 <I2C_Slave_ISR_DMA+0x72>
 800cac4:	e08c      	b.n	800cbe0 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00c      	beq.n	800cae8 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	2380      	movs	r3, #128	@ 0x80
 800cad2:	021b      	lsls	r3, r3, #8
 800cad4:	4013      	ands	r3, r2
 800cad6:	d007      	beq.n	800cae8 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800cae4:	2301      	movs	r3, #1
 800cae6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00c      	beq.n	800cb0a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	2380      	movs	r3, #128	@ 0x80
 800caf4:	01db      	lsls	r3, r3, #7
 800caf6:	4013      	ands	r3, r2
 800caf8:	d007      	beq.n	800cb0a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800cb06:	2301      	movs	r3, #1
 800cb08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d12d      	bne.n	800cb6c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2241      	movs	r2, #65	@ 0x41
 800cb14:	5c9b      	ldrb	r3, [r3, r2]
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b28      	cmp	r3, #40	@ 0x28
 800cb1a:	d10b      	bne.n	800cb34 <I2C_Slave_ISR_DMA+0xe0>
 800cb1c:	69ba      	ldr	r2, [r7, #24]
 800cb1e:	2380      	movs	r3, #128	@ 0x80
 800cb20:	049b      	lsls	r3, r3, #18
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d106      	bne.n	800cb34 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	0011      	movs	r1, r2
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	f000 fbaf 	bl	800d290 <I2C_ITListenCplt>
 800cb32:	e054      	b.n	800cbde <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2241      	movs	r2, #65	@ 0x41
 800cb38:	5c9b      	ldrb	r3, [r3, r2]
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b29      	cmp	r3, #41	@ 0x29
 800cb3e:	d110      	bne.n	800cb62 <I2C_Slave_ISR_DMA+0x10e>
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	4a36      	ldr	r2, [pc, #216]	@ (800cc1c <I2C_Slave_ISR_DMA+0x1c8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d00c      	beq.n	800cb62 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2210      	movs	r2, #16
 800cb4e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	0018      	movs	r0, r3
 800cb54:	f000 fd1f 	bl	800d596 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	0018      	movs	r0, r3
 800cb5c:	f000 f946 	bl	800cdec <I2C_ITSlaveSeqCplt>
 800cb60:	e03d      	b.n	800cbde <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2210      	movs	r2, #16
 800cb68:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800cb6a:	e03e      	b.n	800cbea <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2210      	movs	r2, #16
 800cb72:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb78:	2204      	movs	r2, #4
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800cb80:	2317      	movs	r3, #23
 800cb82:	18fb      	adds	r3, r7, r3
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	2141      	movs	r1, #65	@ 0x41
 800cb88:	5c52      	ldrb	r2, [r2, r1]
 800cb8a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d004      	beq.n	800cb9c <I2C_Slave_ISR_DMA+0x148>
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	2380      	movs	r3, #128	@ 0x80
 800cb96:	045b      	lsls	r3, r3, #17
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d126      	bne.n	800cbea <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb9c:	2217      	movs	r2, #23
 800cb9e:	18bb      	adds	r3, r7, r2
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b21      	cmp	r3, #33	@ 0x21
 800cba4:	d003      	beq.n	800cbae <I2C_Slave_ISR_DMA+0x15a>
 800cba6:	18bb      	adds	r3, r7, r2
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b29      	cmp	r3, #41	@ 0x29
 800cbac:	d103      	bne.n	800cbb6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2221      	movs	r2, #33	@ 0x21
 800cbb2:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbb4:	e00b      	b.n	800cbce <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cbb6:	2217      	movs	r2, #23
 800cbb8:	18bb      	adds	r3, r7, r2
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b22      	cmp	r3, #34	@ 0x22
 800cbbe:	d003      	beq.n	800cbc8 <I2C_Slave_ISR_DMA+0x174>
 800cbc0:	18bb      	adds	r3, r7, r2
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbc6:	d102      	bne.n	800cbce <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2222      	movs	r2, #34	@ 0x22
 800cbcc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	0011      	movs	r1, r2
 800cbd6:	0018      	movs	r0, r3
 800cbd8:	f000 fbb2 	bl	800d340 <I2C_ITError>
      if (treatdmanack == 1U)
 800cbdc:	e005      	b.n	800cbea <I2C_Slave_ISR_DMA+0x196>
 800cbde:	e004      	b.n	800cbea <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2210      	movs	r2, #16
 800cbe6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cbe8:	e00f      	b.n	800cc0a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800cbea:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cbec:	e00d      	b.n	800cc0a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2208      	movs	r2, #8
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	d009      	beq.n	800cc0a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cbfc:	d005      	beq.n	800cc0a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	0011      	movs	r1, r2
 800cc04:	0018      	movs	r0, r3
 800cc06:	f000 f80b 	bl	800cc20 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2240      	movs	r2, #64	@ 0x40
 800cc0e:	2100      	movs	r1, #0
 800cc10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	0018      	movs	r0, r3
 800cc16:	46bd      	mov	sp, r7
 800cc18:	b008      	add	sp, #32
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	ffff0000 	.word	0xffff0000

0800cc20 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc20:	b5b0      	push	{r4, r5, r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2241      	movs	r2, #65	@ 0x41
 800cc2e:	5c9b      	ldrb	r3, [r3, r2]
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	001a      	movs	r2, r3
 800cc34:	2328      	movs	r3, #40	@ 0x28
 800cc36:	4013      	ands	r3, r2
 800cc38:	2b28      	cmp	r3, #40	@ 0x28
 800cc3a:	d000      	beq.n	800cc3e <I2C_ITAddrCplt+0x1e>
 800cc3c:	e088      	b.n	800cd50 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	0c1b      	lsrs	r3, r3, #16
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	250f      	movs	r5, #15
 800cc4a:	197b      	adds	r3, r7, r5
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	400a      	ands	r2, r1
 800cc50:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	0c1b      	lsrs	r3, r3, #16
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	200c      	movs	r0, #12
 800cc5e:	183b      	adds	r3, r7, r0
 800cc60:	21fe      	movs	r1, #254	@ 0xfe
 800cc62:	400a      	ands	r2, r1
 800cc64:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	240a      	movs	r4, #10
 800cc70:	193b      	adds	r3, r7, r4
 800cc72:	0592      	lsls	r2, r2, #22
 800cc74:	0d92      	lsrs	r2, r2, #22
 800cc76:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	2308      	movs	r3, #8
 800cc82:	18fb      	adds	r3, r7, r3
 800cc84:	21fe      	movs	r1, #254	@ 0xfe
 800cc86:	400a      	ands	r2, r1
 800cc88:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d148      	bne.n	800cd24 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cc92:	0021      	movs	r1, r4
 800cc94:	187b      	adds	r3, r7, r1
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	09db      	lsrs	r3, r3, #7
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	183b      	adds	r3, r7, r0
 800cc9e:	881b      	ldrh	r3, [r3, #0]
 800cca0:	4053      	eors	r3, r2
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	001a      	movs	r2, r3
 800cca6:	2306      	movs	r3, #6
 800cca8:	4013      	ands	r3, r2
 800ccaa:	d120      	bne.n	800ccee <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800ccac:	183b      	adds	r3, r7, r0
 800ccae:	187a      	adds	r2, r7, r1
 800ccb0:	8812      	ldrh	r2, [r2, #0]
 800ccb2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d14c      	bne.n	800cd60 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2208      	movs	r2, #8
 800ccd2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2240      	movs	r2, #64	@ 0x40
 800ccd8:	2100      	movs	r1, #0
 800ccda:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ccdc:	183b      	adds	r3, r7, r0
 800ccde:	881a      	ldrh	r2, [r3, #0]
 800cce0:	197b      	adds	r3, r7, r5
 800cce2:	7819      	ldrb	r1, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	0018      	movs	r0, r3
 800cce8:	f7ff fa39 	bl	800c15e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ccec:	e038      	b.n	800cd60 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800ccee:	240c      	movs	r4, #12
 800ccf0:	193b      	adds	r3, r7, r4
 800ccf2:	2208      	movs	r2, #8
 800ccf4:	18ba      	adds	r2, r7, r2
 800ccf6:	8812      	ldrh	r2, [r2, #0]
 800ccf8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ccfa:	2380      	movs	r3, #128	@ 0x80
 800ccfc:	021a      	lsls	r2, r3, #8
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	0011      	movs	r1, r2
 800cd02:	0018      	movs	r0, r3
 800cd04:	f000 fe0a 	bl	800d91c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2240      	movs	r2, #64	@ 0x40
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cd10:	193b      	adds	r3, r7, r4
 800cd12:	881a      	ldrh	r2, [r3, #0]
 800cd14:	230f      	movs	r3, #15
 800cd16:	18fb      	adds	r3, r7, r3
 800cd18:	7819      	ldrb	r1, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	0018      	movs	r0, r3
 800cd1e:	f7ff fa1e 	bl	800c15e <HAL_I2C_AddrCallback>
}
 800cd22:	e01d      	b.n	800cd60 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cd24:	2380      	movs	r3, #128	@ 0x80
 800cd26:	021a      	lsls	r2, r3, #8
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	0011      	movs	r1, r2
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	f000 fdf5 	bl	800d91c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2240      	movs	r2, #64	@ 0x40
 800cd36:	2100      	movs	r1, #0
 800cd38:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cd3a:	230c      	movs	r3, #12
 800cd3c:	18fb      	adds	r3, r7, r3
 800cd3e:	881a      	ldrh	r2, [r3, #0]
 800cd40:	230f      	movs	r3, #15
 800cd42:	18fb      	adds	r3, r7, r3
 800cd44:	7819      	ldrb	r1, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	0018      	movs	r0, r3
 800cd4a:	f7ff fa08 	bl	800c15e <HAL_I2C_AddrCallback>
}
 800cd4e:	e007      	b.n	800cd60 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2208      	movs	r2, #8
 800cd56:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2240      	movs	r2, #64	@ 0x40
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	5499      	strb	r1, [r3, r2]
}
 800cd60:	46c0      	nop			@ (mov r8, r8)
 800cd62:	46bd      	mov	sp, r7
 800cd64:	b004      	add	sp, #16
 800cd66:	bdb0      	pop	{r4, r5, r7, pc}

0800cd68 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2242      	movs	r2, #66	@ 0x42
 800cd74:	2100      	movs	r1, #0
 800cd76:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2241      	movs	r2, #65	@ 0x41
 800cd7c:	5c9b      	ldrb	r3, [r3, r2]
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b21      	cmp	r3, #33	@ 0x21
 800cd82:	d117      	bne.n	800cdb4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2241      	movs	r2, #65	@ 0x41
 800cd88:	2120      	movs	r1, #32
 800cd8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2211      	movs	r2, #17
 800cd90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	0018      	movs	r0, r3
 800cd9e:	f000 fdbd 	bl	800d91c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2240      	movs	r2, #64	@ 0x40
 800cda6:	2100      	movs	r1, #0
 800cda8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	0018      	movs	r0, r3
 800cdae:	f7ff f9b6 	bl	800c11e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cdb2:	e016      	b.n	800cde2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2241      	movs	r2, #65	@ 0x41
 800cdb8:	2120      	movs	r1, #32
 800cdba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2212      	movs	r2, #18
 800cdc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2102      	movs	r1, #2
 800cdcc:	0018      	movs	r0, r3
 800cdce:	f000 fda5 	bl	800d91c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2240      	movs	r2, #64	@ 0x40
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	0018      	movs	r0, r3
 800cdde:	f7ff f9a6 	bl	800c12e <HAL_I2C_MasterRxCpltCallback>
}
 800cde2:	46c0      	nop			@ (mov r8, r8)
 800cde4:	46bd      	mov	sp, r7
 800cde6:	b002      	add	sp, #8
 800cde8:	bd80      	pop	{r7, pc}
	...

0800cdec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2242      	movs	r2, #66	@ 0x42
 800ce00:	2100      	movs	r1, #0
 800ce02:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	2380      	movs	r3, #128	@ 0x80
 800ce08:	01db      	lsls	r3, r3, #7
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	d008      	beq.n	800ce20 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4924      	ldr	r1, [pc, #144]	@ (800ceac <I2C_ITSlaveSeqCplt+0xc0>)
 800ce1a:	400a      	ands	r2, r1
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	e00c      	b.n	800ce3a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	2380      	movs	r3, #128	@ 0x80
 800ce24:	021b      	lsls	r3, r3, #8
 800ce26:	4013      	ands	r3, r2
 800ce28:	d007      	beq.n	800ce3a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	491e      	ldr	r1, [pc, #120]	@ (800ceb0 <I2C_ITSlaveSeqCplt+0xc4>)
 800ce36:	400a      	ands	r2, r1
 800ce38:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2241      	movs	r2, #65	@ 0x41
 800ce3e:	5c9b      	ldrb	r3, [r3, r2]
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	2b29      	cmp	r3, #41	@ 0x29
 800ce44:	d114      	bne.n	800ce70 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2241      	movs	r2, #65	@ 0x41
 800ce4a:	2128      	movs	r1, #40	@ 0x28
 800ce4c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2221      	movs	r2, #33	@ 0x21
 800ce52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2101      	movs	r1, #1
 800ce58:	0018      	movs	r0, r3
 800ce5a:	f000 fd5f 	bl	800d91c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2240      	movs	r2, #64	@ 0x40
 800ce62:	2100      	movs	r1, #0
 800ce64:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	0018      	movs	r0, r3
 800ce6a:	f7ff f968 	bl	800c13e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce6e:	e019      	b.n	800cea4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2241      	movs	r2, #65	@ 0x41
 800ce74:	5c9b      	ldrb	r3, [r3, r2]
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce7a:	d113      	bne.n	800cea4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2241      	movs	r2, #65	@ 0x41
 800ce80:	2128      	movs	r1, #40	@ 0x28
 800ce82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2222      	movs	r2, #34	@ 0x22
 800ce88:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2102      	movs	r1, #2
 800ce8e:	0018      	movs	r0, r3
 800ce90:	f000 fd44 	bl	800d91c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2240      	movs	r2, #64	@ 0x40
 800ce98:	2100      	movs	r1, #0
 800ce9a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	0018      	movs	r0, r3
 800cea0:	f7ff f955 	bl	800c14e <HAL_I2C_SlaveRxCpltCallback>
}
 800cea4:	46c0      	nop			@ (mov r8, r8)
 800cea6:	46bd      	mov	sp, r7
 800cea8:	b004      	add	sp, #16
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	ffffbfff 	.word	0xffffbfff
 800ceb0:	ffff7fff 	.word	0xffff7fff

0800ceb4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2220      	movs	r2, #32
 800cec8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2241      	movs	r2, #65	@ 0x41
 800cece:	5c9b      	ldrb	r3, [r3, r2]
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b21      	cmp	r3, #33	@ 0x21
 800ced4:	d108      	bne.n	800cee8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2101      	movs	r1, #1
 800ceda:	0018      	movs	r0, r3
 800cedc:	f000 fd1e 	bl	800d91c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2211      	movs	r2, #17
 800cee4:	631a      	str	r2, [r3, #48]	@ 0x30
 800cee6:	e00d      	b.n	800cf04 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2241      	movs	r2, #65	@ 0x41
 800ceec:	5c9b      	ldrb	r3, [r3, r2]
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b22      	cmp	r3, #34	@ 0x22
 800cef2:	d107      	bne.n	800cf04 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2102      	movs	r1, #2
 800cef8:	0018      	movs	r0, r3
 800cefa:	f000 fd0f 	bl	800d91c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2212      	movs	r2, #18
 800cf02:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	685a      	ldr	r2, [r3, #4]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	494e      	ldr	r1, [pc, #312]	@ (800d048 <I2C_ITMasterCplt+0x194>)
 800cf10:	400a      	ands	r2, r1
 800cf12:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4a4b      	ldr	r2, [pc, #300]	@ (800d04c <I2C_ITMasterCplt+0x198>)
 800cf1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	2210      	movs	r2, #16
 800cf24:	4013      	ands	r3, r2
 800cf26:	d009      	beq.n	800cf3c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2210      	movs	r2, #16
 800cf2e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf34:	2204      	movs	r2, #4
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2241      	movs	r2, #65	@ 0x41
 800cf40:	5c9b      	ldrb	r3, [r3, r2]
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b60      	cmp	r3, #96	@ 0x60
 800cf46:	d109      	bne.n	800cf5c <I2C_ITMasterCplt+0xa8>
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	2204      	movs	r2, #4
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	d005      	beq.n	800cf5c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	0018      	movs	r0, r3
 800cf60:	f000 fb19 	bl	800d596 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf68:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2241      	movs	r2, #65	@ 0x41
 800cf6e:	5c9b      	ldrb	r3, [r3, r2]
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b60      	cmp	r3, #96	@ 0x60
 800cf74:	d002      	beq.n	800cf7c <I2C_ITMasterCplt+0xc8>
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d007      	beq.n	800cf8c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	0011      	movs	r1, r2
 800cf84:	0018      	movs	r0, r3
 800cf86:	f000 f9db 	bl	800d340 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cf8a:	e058      	b.n	800d03e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2241      	movs	r2, #65	@ 0x41
 800cf90:	5c9b      	ldrb	r3, [r3, r2]
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b21      	cmp	r3, #33	@ 0x21
 800cf96:	d126      	bne.n	800cfe6 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2241      	movs	r2, #65	@ 0x41
 800cf9c:	2120      	movs	r1, #32
 800cf9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2242      	movs	r2, #66	@ 0x42
 800cfaa:	5c9b      	ldrb	r3, [r3, r2]
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b40      	cmp	r3, #64	@ 0x40
 800cfb0:	d10c      	bne.n	800cfcc <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2242      	movs	r2, #66	@ 0x42
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2240      	movs	r2, #64	@ 0x40
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f7ff f8e2 	bl	800c18e <HAL_I2C_MemTxCpltCallback>
}
 800cfca:	e038      	b.n	800d03e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2242      	movs	r2, #66	@ 0x42
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2240      	movs	r2, #64	@ 0x40
 800cfd8:	2100      	movs	r1, #0
 800cfda:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	0018      	movs	r0, r3
 800cfe0:	f7ff f89d 	bl	800c11e <HAL_I2C_MasterTxCpltCallback>
}
 800cfe4:	e02b      	b.n	800d03e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2241      	movs	r2, #65	@ 0x41
 800cfea:	5c9b      	ldrb	r3, [r3, r2]
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b22      	cmp	r3, #34	@ 0x22
 800cff0:	d125      	bne.n	800d03e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2241      	movs	r2, #65	@ 0x41
 800cff6:	2120      	movs	r1, #32
 800cff8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2242      	movs	r2, #66	@ 0x42
 800d004:	5c9b      	ldrb	r3, [r3, r2]
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b40      	cmp	r3, #64	@ 0x40
 800d00a:	d10c      	bne.n	800d026 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2242      	movs	r2, #66	@ 0x42
 800d010:	2100      	movs	r1, #0
 800d012:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2240      	movs	r2, #64	@ 0x40
 800d018:	2100      	movs	r1, #0
 800d01a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	0018      	movs	r0, r3
 800d020:	f7ff f8bd 	bl	800c19e <HAL_I2C_MemRxCpltCallback>
}
 800d024:	e00b      	b.n	800d03e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2242      	movs	r2, #66	@ 0x42
 800d02a:	2100      	movs	r1, #0
 800d02c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2240      	movs	r2, #64	@ 0x40
 800d032:	2100      	movs	r1, #0
 800d034:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	0018      	movs	r0, r3
 800d03a:	f7ff f878 	bl	800c12e <HAL_I2C_MasterRxCpltCallback>
}
 800d03e:	46c0      	nop			@ (mov r8, r8)
 800d040:	46bd      	mov	sp, r7
 800d042:	b006      	add	sp, #24
 800d044:	bd80      	pop	{r7, pc}
 800d046:	46c0      	nop			@ (mov r8, r8)
 800d048:	fe00e800 	.word	0xfe00e800
 800d04c:	ffff0000 	.word	0xffff0000

0800d050 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d066:	200f      	movs	r0, #15
 800d068:	183b      	adds	r3, r7, r0
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	2141      	movs	r1, #65	@ 0x41
 800d06e:	5c52      	ldrb	r2, [r2, r1]
 800d070:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2220      	movs	r2, #32
 800d078:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d07a:	183b      	adds	r3, r7, r0
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	2b21      	cmp	r3, #33	@ 0x21
 800d080:	d003      	beq.n	800d08a <I2C_ITSlaveCplt+0x3a>
 800d082:	183b      	adds	r3, r7, r0
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b29      	cmp	r3, #41	@ 0x29
 800d088:	d109      	bne.n	800d09e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d08a:	4a7b      	ldr	r2, [pc, #492]	@ (800d278 <I2C_ITSlaveCplt+0x228>)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	0011      	movs	r1, r2
 800d090:	0018      	movs	r0, r3
 800d092:	f000 fc43 	bl	800d91c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2221      	movs	r2, #33	@ 0x21
 800d09a:	631a      	str	r2, [r3, #48]	@ 0x30
 800d09c:	e011      	b.n	800d0c2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d09e:	220f      	movs	r2, #15
 800d0a0:	18bb      	adds	r3, r7, r2
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	2b22      	cmp	r3, #34	@ 0x22
 800d0a6:	d003      	beq.n	800d0b0 <I2C_ITSlaveCplt+0x60>
 800d0a8:	18bb      	adds	r3, r7, r2
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ae:	d108      	bne.n	800d0c2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d0b0:	4a72      	ldr	r2, [pc, #456]	@ (800d27c <I2C_ITSlaveCplt+0x22c>)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	0011      	movs	r1, r2
 800d0b6:	0018      	movs	r0, r3
 800d0b8:	f000 fc30 	bl	800d91c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2222      	movs	r2, #34	@ 0x22
 800d0c0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	685a      	ldr	r2, [r3, #4]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2180      	movs	r1, #128	@ 0x80
 800d0ce:	0209      	lsls	r1, r1, #8
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	685a      	ldr	r2, [r3, #4]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4968      	ldr	r1, [pc, #416]	@ (800d280 <I2C_ITSlaveCplt+0x230>)
 800d0e0:	400a      	ands	r2, r1
 800d0e2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	0018      	movs	r0, r3
 800d0e8:	f000 fa55 	bl	800d596 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d0ec:	693a      	ldr	r2, [r7, #16]
 800d0ee:	2380      	movs	r3, #128	@ 0x80
 800d0f0:	01db      	lsls	r3, r3, #7
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	d013      	beq.n	800d11e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4960      	ldr	r1, [pc, #384]	@ (800d284 <I2C_ITSlaveCplt+0x234>)
 800d102:	400a      	ands	r2, r1
 800d104:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d01f      	beq.n	800d14e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	b29a      	uxth	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d11c:	e017      	b.n	800d14e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d11e:	693a      	ldr	r2, [r7, #16]
 800d120:	2380      	movs	r3, #128	@ 0x80
 800d122:	021b      	lsls	r3, r3, #8
 800d124:	4013      	ands	r3, r2
 800d126:	d012      	beq.n	800d14e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4955      	ldr	r1, [pc, #340]	@ (800d288 <I2C_ITSlaveCplt+0x238>)
 800d134:	400a      	ands	r2, r1
 800d136:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d006      	beq.n	800d14e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2204      	movs	r2, #4
 800d152:	4013      	ands	r3, r2
 800d154:	d020      	beq.n	800d198 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2204      	movs	r2, #4
 800d15a:	4393      	bics	r3, r2
 800d15c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d168:	b2d2      	uxtb	r2, r2
 800d16a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00c      	beq.n	800d198 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d182:	3b01      	subs	r3, #1
 800d184:	b29a      	uxth	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d18e:	b29b      	uxth	r3, r3
 800d190:	3b01      	subs	r3, #1
 800d192:	b29a      	uxth	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d005      	beq.n	800d1ae <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1a6:	2204      	movs	r2, #4
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2242      	movs	r2, #66	@ 0x42
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d013      	beq.n	800d1ec <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	0011      	movs	r1, r2
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	f000 f8b7 	bl	800d340 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2241      	movs	r2, #65	@ 0x41
 800d1d6:	5c9b      	ldrb	r3, [r3, r2]
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b28      	cmp	r3, #40	@ 0x28
 800d1dc:	d147      	bne.n	800d26e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	0011      	movs	r1, r2
 800d1e4:	0018      	movs	r0, r3
 800d1e6:	f000 f853 	bl	800d290 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d1ea:	e040      	b.n	800d26e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1f0:	4a26      	ldr	r2, [pc, #152]	@ (800d28c <I2C_ITSlaveCplt+0x23c>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d016      	beq.n	800d224 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f7ff fdf7 	bl	800cdec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a22      	ldr	r2, [pc, #136]	@ (800d28c <I2C_ITSlaveCplt+0x23c>)
 800d202:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2241      	movs	r2, #65	@ 0x41
 800d208:	2120      	movs	r1, #32
 800d20a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2240      	movs	r2, #64	@ 0x40
 800d216:	2100      	movs	r1, #0
 800d218:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	0018      	movs	r0, r3
 800d21e:	f7fe ffae 	bl	800c17e <HAL_I2C_ListenCpltCallback>
}
 800d222:	e024      	b.n	800d26e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2241      	movs	r2, #65	@ 0x41
 800d228:	5c9b      	ldrb	r3, [r3, r2]
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b22      	cmp	r3, #34	@ 0x22
 800d22e:	d10f      	bne.n	800d250 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2241      	movs	r2, #65	@ 0x41
 800d234:	2120      	movs	r1, #32
 800d236:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2240      	movs	r2, #64	@ 0x40
 800d242:	2100      	movs	r1, #0
 800d244:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	0018      	movs	r0, r3
 800d24a:	f7fe ff80 	bl	800c14e <HAL_I2C_SlaveRxCpltCallback>
}
 800d24e:	e00e      	b.n	800d26e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2241      	movs	r2, #65	@ 0x41
 800d254:	2120      	movs	r1, #32
 800d256:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2240      	movs	r2, #64	@ 0x40
 800d262:	2100      	movs	r1, #0
 800d264:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	0018      	movs	r0, r3
 800d26a:	f7fe ff68 	bl	800c13e <HAL_I2C_SlaveTxCpltCallback>
}
 800d26e:	46c0      	nop			@ (mov r8, r8)
 800d270:	46bd      	mov	sp, r7
 800d272:	b006      	add	sp, #24
 800d274:	bd80      	pop	{r7, pc}
 800d276:	46c0      	nop			@ (mov r8, r8)
 800d278:	00008001 	.word	0x00008001
 800d27c:	00008002 	.word	0x00008002
 800d280:	fe00e800 	.word	0xfe00e800
 800d284:	ffffbfff 	.word	0xffffbfff
 800d288:	ffff7fff 	.word	0xffff7fff
 800d28c:	ffff0000 	.word	0xffff0000

0800d290 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a26      	ldr	r2, [pc, #152]	@ (800d338 <I2C_ITListenCplt+0xa8>)
 800d29e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2241      	movs	r2, #65	@ 0x41
 800d2aa:	2120      	movs	r1, #32
 800d2ac:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2242      	movs	r2, #66	@ 0x42
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	2204      	movs	r2, #4
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	d022      	beq.n	800d30a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ce:	b2d2      	uxtb	r2, r2
 800d2d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d012      	beq.n	800d30a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d302:	2204      	movs	r2, #4
 800d304:	431a      	orrs	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d30a:	4a0c      	ldr	r2, [pc, #48]	@ (800d33c <I2C_ITListenCplt+0xac>)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	0011      	movs	r1, r2
 800d310:	0018      	movs	r0, r3
 800d312:	f000 fb03 	bl	800d91c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2210      	movs	r2, #16
 800d31c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2240      	movs	r2, #64	@ 0x40
 800d322:	2100      	movs	r1, #0
 800d324:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	0018      	movs	r0, r3
 800d32a:	f7fe ff28 	bl	800c17e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d32e:	46c0      	nop			@ (mov r8, r8)
 800d330:	46bd      	mov	sp, r7
 800d332:	b002      	add	sp, #8
 800d334:	bd80      	pop	{r7, pc}
 800d336:	46c0      	nop			@ (mov r8, r8)
 800d338:	ffff0000 	.word	0xffff0000
 800d33c:	00008003 	.word	0x00008003

0800d340 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d34a:	200f      	movs	r0, #15
 800d34c:	183b      	adds	r3, r7, r0
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	2141      	movs	r1, #65	@ 0x41
 800d352:	5c52      	ldrb	r2, [r2, r1]
 800d354:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2242      	movs	r2, #66	@ 0x42
 800d35a:	2100      	movs	r1, #0
 800d35c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4a72      	ldr	r2, [pc, #456]	@ (800d52c <I2C_ITError+0x1ec>)
 800d362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	431a      	orrs	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d376:	183b      	adds	r3, r7, r0
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b28      	cmp	r3, #40	@ 0x28
 800d37c:	d007      	beq.n	800d38e <I2C_ITError+0x4e>
 800d37e:	183b      	adds	r3, r7, r0
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b29      	cmp	r3, #41	@ 0x29
 800d384:	d003      	beq.n	800d38e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d386:	183b      	adds	r3, r7, r0
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d38c:	d10c      	bne.n	800d3a8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2103      	movs	r1, #3
 800d392:	0018      	movs	r0, r3
 800d394:	f000 fac2 	bl	800d91c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2241      	movs	r2, #65	@ 0x41
 800d39c:	2128      	movs	r1, #40	@ 0x28
 800d39e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a63      	ldr	r2, [pc, #396]	@ (800d530 <I2C_ITError+0x1f0>)
 800d3a4:	635a      	str	r2, [r3, #52]	@ 0x34
 800d3a6:	e032      	b.n	800d40e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d3a8:	4a62      	ldr	r2, [pc, #392]	@ (800d534 <I2C_ITError+0x1f4>)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	0011      	movs	r1, r2
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	f000 fab4 	bl	800d91c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	0018      	movs	r0, r3
 800d3b8:	f000 f8ed 	bl	800d596 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2241      	movs	r2, #65	@ 0x41
 800d3c0:	5c9b      	ldrb	r3, [r3, r2]
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	2b60      	cmp	r3, #96	@ 0x60
 800d3c6:	d01f      	beq.n	800d408 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2241      	movs	r2, #65	@ 0x41
 800d3cc:	2120      	movs	r1, #32
 800d3ce:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	2220      	movs	r2, #32
 800d3d8:	4013      	ands	r3, r2
 800d3da:	2b20      	cmp	r3, #32
 800d3dc:	d114      	bne.n	800d408 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	2210      	movs	r2, #16
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	2b10      	cmp	r3, #16
 800d3ea:	d109      	bne.n	800d400 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2210      	movs	r2, #16
 800d3f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3f8:	2204      	movs	r2, #4
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2220      	movs	r2, #32
 800d406:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d412:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d03b      	beq.n	800d494 <I2C_ITError+0x154>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b11      	cmp	r3, #17
 800d420:	d002      	beq.n	800d428 <I2C_ITError+0xe8>
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	2b21      	cmp	r3, #33	@ 0x21
 800d426:	d135      	bne.n	800d494 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	2380      	movs	r3, #128	@ 0x80
 800d430:	01db      	lsls	r3, r3, #7
 800d432:	401a      	ands	r2, r3
 800d434:	2380      	movs	r3, #128	@ 0x80
 800d436:	01db      	lsls	r3, r3, #7
 800d438:	429a      	cmp	r2, r3
 800d43a:	d107      	bne.n	800d44c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	493c      	ldr	r1, [pc, #240]	@ (800d538 <I2C_ITError+0x1f8>)
 800d448:	400a      	ands	r2, r1
 800d44a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d450:	0018      	movs	r0, r3
 800d452:	f7fd feac 	bl	800b1ae <HAL_DMA_GetState>
 800d456:	0003      	movs	r3, r0
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d016      	beq.n	800d48a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d460:	4a36      	ldr	r2, [pc, #216]	@ (800d53c <I2C_ITError+0x1fc>)
 800d462:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2240      	movs	r2, #64	@ 0x40
 800d468:	2100      	movs	r1, #0
 800d46a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d470:	0018      	movs	r0, r3
 800d472:	f7fd fda7 	bl	800afc4 <HAL_DMA_Abort_IT>
 800d476:	1e03      	subs	r3, r0, #0
 800d478:	d051      	beq.n	800d51e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d47e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d484:	0018      	movs	r0, r3
 800d486:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d488:	e049      	b.n	800d51e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	0018      	movs	r0, r3
 800d48e:	f000 f859 	bl	800d544 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d492:	e044      	b.n	800d51e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d03b      	beq.n	800d514 <I2C_ITError+0x1d4>
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	2b12      	cmp	r3, #18
 800d4a0:	d002      	beq.n	800d4a8 <I2C_ITError+0x168>
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2b22      	cmp	r3, #34	@ 0x22
 800d4a6:	d135      	bne.n	800d514 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	2380      	movs	r3, #128	@ 0x80
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	401a      	ands	r2, r3
 800d4b4:	2380      	movs	r3, #128	@ 0x80
 800d4b6:	021b      	lsls	r3, r3, #8
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d107      	bne.n	800d4cc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	491e      	ldr	r1, [pc, #120]	@ (800d540 <I2C_ITError+0x200>)
 800d4c8:	400a      	ands	r2, r1
 800d4ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4d0:	0018      	movs	r0, r3
 800d4d2:	f7fd fe6c 	bl	800b1ae <HAL_DMA_GetState>
 800d4d6:	0003      	movs	r3, r0
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d016      	beq.n	800d50a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4e0:	4a16      	ldr	r2, [pc, #88]	@ (800d53c <I2C_ITError+0x1fc>)
 800d4e2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2240      	movs	r2, #64	@ 0x40
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4f0:	0018      	movs	r0, r3
 800d4f2:	f7fd fd67 	bl	800afc4 <HAL_DMA_Abort_IT>
 800d4f6:	1e03      	subs	r3, r0, #0
 800d4f8:	d013      	beq.n	800d522 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d504:	0018      	movs	r0, r3
 800d506:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d508:	e00b      	b.n	800d522 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	0018      	movs	r0, r3
 800d50e:	f000 f819 	bl	800d544 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d512:	e006      	b.n	800d522 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	0018      	movs	r0, r3
 800d518:	f000 f814 	bl	800d544 <I2C_TreatErrorCallback>
  }
}
 800d51c:	e002      	b.n	800d524 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d51e:	46c0      	nop			@ (mov r8, r8)
 800d520:	e000      	b.n	800d524 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d522:	46c0      	nop			@ (mov r8, r8)
}
 800d524:	46c0      	nop			@ (mov r8, r8)
 800d526:	46bd      	mov	sp, r7
 800d528:	b004      	add	sp, #16
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	ffff0000 	.word	0xffff0000
 800d530:	0800c425 	.word	0x0800c425
 800d534:	00008003 	.word	0x00008003
 800d538:	ffffbfff 	.word	0xffffbfff
 800d53c:	0800d74f 	.word	0x0800d74f
 800d540:	ffff7fff 	.word	0xffff7fff

0800d544 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2241      	movs	r2, #65	@ 0x41
 800d550:	5c9b      	ldrb	r3, [r3, r2]
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b60      	cmp	r3, #96	@ 0x60
 800d556:	d10f      	bne.n	800d578 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2241      	movs	r2, #65	@ 0x41
 800d55c:	2120      	movs	r1, #32
 800d55e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2240      	movs	r2, #64	@ 0x40
 800d56a:	2100      	movs	r1, #0
 800d56c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	0018      	movs	r0, r3
 800d572:	f7fe fe24 	bl	800c1be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d576:	e00a      	b.n	800d58e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2240      	movs	r2, #64	@ 0x40
 800d582:	2100      	movs	r1, #0
 800d584:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	0018      	movs	r0, r3
 800d58a:	f7fe fe10 	bl	800c1ae <HAL_I2C_ErrorCallback>
}
 800d58e:	46c0      	nop			@ (mov r8, r8)
 800d590:	46bd      	mov	sp, r7
 800d592:	b002      	add	sp, #8
 800d594:	bd80      	pop	{r7, pc}

0800d596 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	699b      	ldr	r3, [r3, #24]
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d103      	bne.n	800d5b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	4013      	ands	r3, r2
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d007      	beq.n	800d5d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	699a      	ldr	r2, [r3, #24]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	619a      	str	r2, [r3, #24]
  }
}
 800d5d2:	46c0      	nop			@ (mov r8, r8)
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	b002      	add	sp, #8
 800d5d8:	bd80      	pop	{r7, pc}
	...

0800d5dc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4920      	ldr	r1, [pc, #128]	@ (800d678 <I2C_DMAMasterTransmitCplt+0x9c>)
 800d5f6:	400a      	ands	r2, r1
 800d5f8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	2b00      	cmp	r3, #0
 800d602:	d105      	bne.n	800d610 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2120      	movs	r1, #32
 800d608:	0018      	movs	r0, r3
 800d60a:	f000 f8f9 	bl	800d800 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d60e:	e02e      	b.n	800d66e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d618:	189a      	adds	r2, r3, r2
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d622:	b29b      	uxth	r3, r3
 800d624:	2bff      	cmp	r3, #255	@ 0xff
 800d626:	d903      	bls.n	800d630 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	22ff      	movs	r2, #255	@ 0xff
 800d62c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d62e:	e004      	b.n	800d63a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d634:	b29a      	uxth	r2, r3
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d642:	0019      	movs	r1, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3328      	adds	r3, #40	@ 0x28
 800d64a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d650:	f7fd fc12 	bl	800ae78 <HAL_DMA_Start_IT>
 800d654:	1e03      	subs	r3, r0, #0
 800d656:	d005      	beq.n	800d664 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2110      	movs	r1, #16
 800d65c:	0018      	movs	r0, r3
 800d65e:	f7ff fe6f 	bl	800d340 <I2C_ITError>
}
 800d662:	e004      	b.n	800d66e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2140      	movs	r1, #64	@ 0x40
 800d668:	0018      	movs	r0, r3
 800d66a:	f000 f8c9 	bl	800d800 <I2C_Enable_IRQ>
}
 800d66e:	46c0      	nop			@ (mov r8, r8)
 800d670:	46bd      	mov	sp, r7
 800d672:	b004      	add	sp, #16
 800d674:	bd80      	pop	{r7, pc}
 800d676:	46c0      	nop			@ (mov r8, r8)
 800d678:	ffffbfff 	.word	0xffffbfff

0800d67c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d688:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4920      	ldr	r1, [pc, #128]	@ (800d718 <I2C_DMAMasterReceiveCplt+0x9c>)
 800d696:	400a      	ands	r2, r1
 800d698:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d105      	bne.n	800d6b0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2120      	movs	r1, #32
 800d6a8:	0018      	movs	r0, r3
 800d6aa:	f000 f8a9 	bl	800d800 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d6ae:	e02e      	b.n	800d70e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d6b8:	189a      	adds	r2, r3, r2
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	2bff      	cmp	r3, #255	@ 0xff
 800d6c6:	d903      	bls.n	800d6d0 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	22ff      	movs	r2, #255	@ 0xff
 800d6cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d6ce:	e004      	b.n	800d6da <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	3324      	adds	r3, #36	@ 0x24
 800d6e4:	0019      	movs	r1, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ea:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d6f0:	f7fd fbc2 	bl	800ae78 <HAL_DMA_Start_IT>
 800d6f4:	1e03      	subs	r3, r0, #0
 800d6f6:	d005      	beq.n	800d704 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2110      	movs	r1, #16
 800d6fc:	0018      	movs	r0, r3
 800d6fe:	f7ff fe1f 	bl	800d340 <I2C_ITError>
}
 800d702:	e004      	b.n	800d70e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2140      	movs	r1, #64	@ 0x40
 800d708:	0018      	movs	r0, r3
 800d70a:	f000 f879 	bl	800d800 <I2C_Enable_IRQ>
}
 800d70e:	46c0      	nop			@ (mov r8, r8)
 800d710:	46bd      	mov	sp, r7
 800d712:	b004      	add	sp, #16
 800d714:	bd80      	pop	{r7, pc}
 800d716:	46c0      	nop			@ (mov r8, r8)
 800d718:	ffff7fff 	.word	0xffff7fff

0800d71c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d728:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2180      	movs	r1, #128	@ 0x80
 800d736:	0209      	lsls	r1, r1, #8
 800d738:	430a      	orrs	r2, r1
 800d73a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2110      	movs	r1, #16
 800d740:	0018      	movs	r0, r3
 800d742:	f7ff fdfd 	bl	800d340 <I2C_ITError>
}
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	46bd      	mov	sp, r7
 800d74a:	b004      	add	sp, #16
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d75a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d760:	2b00      	cmp	r3, #0
 800d762:	d003      	beq.n	800d76c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d768:	2200      	movs	r2, #0
 800d76a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d770:	2b00      	cmp	r3, #0
 800d772:	d003      	beq.n	800d77c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d778:	2200      	movs	r2, #0
 800d77a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	0018      	movs	r0, r3
 800d780:	f7ff fee0 	bl	800d544 <I2C_TreatErrorCallback>
}
 800d784:	46c0      	nop			@ (mov r8, r8)
 800d786:	46bd      	mov	sp, r7
 800d788:	b004      	add	sp, #16
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d78c:	b590      	push	{r4, r7, lr}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	0008      	movs	r0, r1
 800d796:	0011      	movs	r1, r2
 800d798:	607b      	str	r3, [r7, #4]
 800d79a:	240a      	movs	r4, #10
 800d79c:	193b      	adds	r3, r7, r4
 800d79e:	1c02      	adds	r2, r0, #0
 800d7a0:	801a      	strh	r2, [r3, #0]
 800d7a2:	2009      	movs	r0, #9
 800d7a4:	183b      	adds	r3, r7, r0
 800d7a6:	1c0a      	adds	r2, r1, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d7aa:	193b      	adds	r3, r7, r4
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	059b      	lsls	r3, r3, #22
 800d7b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d7b2:	183b      	adds	r3, r7, r0
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	0419      	lsls	r1, r3, #16
 800d7b8:	23ff      	movs	r3, #255	@ 0xff
 800d7ba:	041b      	lsls	r3, r3, #16
 800d7bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d7be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	085b      	lsrs	r3, r3, #1
 800d7cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7d6:	0d51      	lsrs	r1, r2, #21
 800d7d8:	2280      	movs	r2, #128	@ 0x80
 800d7da:	00d2      	lsls	r2, r2, #3
 800d7dc:	400a      	ands	r2, r1
 800d7de:	4907      	ldr	r1, [pc, #28]	@ (800d7fc <I2C_TransferConfig+0x70>)
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	43d2      	mvns	r2, r2
 800d7e4:	401a      	ands	r2, r3
 800d7e6:	0011      	movs	r1, r2
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d7f2:	46c0      	nop			@ (mov r8, r8)
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	b007      	add	sp, #28
 800d7f8:	bd90      	pop	{r4, r7, pc}
 800d7fa:	46c0      	nop			@ (mov r8, r8)
 800d7fc:	03ff63ff 	.word	0x03ff63ff

0800d800 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	000a      	movs	r2, r1
 800d80a:	1cbb      	adds	r3, r7, #2
 800d80c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d80e:	2300      	movs	r3, #0
 800d810:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d816:	4b3e      	ldr	r3, [pc, #248]	@ (800d910 <I2C_Enable_IRQ+0x110>)
 800d818:	429a      	cmp	r2, r3
 800d81a:	d035      	beq.n	800d888 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d820:	4b3c      	ldr	r3, [pc, #240]	@ (800d914 <I2C_Enable_IRQ+0x114>)
 800d822:	429a      	cmp	r2, r3
 800d824:	d030      	beq.n	800d888 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d82a:	4b3b      	ldr	r3, [pc, #236]	@ (800d918 <I2C_Enable_IRQ+0x118>)
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d02b      	beq.n	800d888 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d830:	1cbb      	adds	r3, r7, #2
 800d832:	2200      	movs	r2, #0
 800d834:	5e9b      	ldrsh	r3, [r3, r2]
 800d836:	2b00      	cmp	r3, #0
 800d838:	da03      	bge.n	800d842 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	22b8      	movs	r2, #184	@ 0xb8
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d842:	1cbb      	adds	r3, r7, #2
 800d844:	881b      	ldrh	r3, [r3, #0]
 800d846:	2201      	movs	r2, #1
 800d848:	4013      	ands	r3, r2
 800d84a:	d003      	beq.n	800d854 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	22f2      	movs	r2, #242	@ 0xf2
 800d850:	4313      	orrs	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d854:	1cbb      	adds	r3, r7, #2
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	2202      	movs	r2, #2
 800d85a:	4013      	ands	r3, r2
 800d85c:	d003      	beq.n	800d866 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	22f4      	movs	r2, #244	@ 0xf4
 800d862:	4313      	orrs	r3, r2
 800d864:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d866:	1cbb      	adds	r3, r7, #2
 800d868:	881b      	ldrh	r3, [r3, #0]
 800d86a:	2b10      	cmp	r3, #16
 800d86c:	d103      	bne.n	800d876 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2290      	movs	r2, #144	@ 0x90
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d876:	1cbb      	adds	r3, r7, #2
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	2b20      	cmp	r3, #32
 800d87c:	d13c      	bne.n	800d8f8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2220      	movs	r2, #32
 800d882:	4313      	orrs	r3, r2
 800d884:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d886:	e037      	b.n	800d8f8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d888:	1cbb      	adds	r3, r7, #2
 800d88a:	2200      	movs	r2, #0
 800d88c:	5e9b      	ldrsh	r3, [r3, r2]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	da03      	bge.n	800d89a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	22b8      	movs	r2, #184	@ 0xb8
 800d896:	4313      	orrs	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d89a:	1cbb      	adds	r3, r7, #2
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	d003      	beq.n	800d8ac <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	22f2      	movs	r2, #242	@ 0xf2
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d8ac:	1cbb      	adds	r3, r7, #2
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	2202      	movs	r2, #2
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	d003      	beq.n	800d8be <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	22f4      	movs	r2, #244	@ 0xf4
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d8be:	1cbb      	adds	r3, r7, #2
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	2b10      	cmp	r3, #16
 800d8c4:	d103      	bne.n	800d8ce <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2290      	movs	r2, #144	@ 0x90
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d8ce:	1cbb      	adds	r3, r7, #2
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d103      	bne.n	800d8de <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2260      	movs	r2, #96	@ 0x60
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d918 <I2C_Enable_IRQ+0x118>)
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d007      	beq.n	800d8f8 <I2C_Enable_IRQ+0xf8>
 800d8e8:	1cbb      	adds	r3, r7, #2
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	2b40      	cmp	r3, #64	@ 0x40
 800d8ee:	d103      	bne.n	800d8f8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2240      	movs	r2, #64	@ 0x40
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6819      	ldr	r1, [r3, #0]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	430a      	orrs	r2, r1
 800d906:	601a      	str	r2, [r3, #0]
}
 800d908:	46c0      	nop			@ (mov r8, r8)
 800d90a:	46bd      	mov	sp, r7
 800d90c:	b004      	add	sp, #16
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	0800c625 	.word	0x0800c625
 800d914:	0800ca55 	.word	0x0800ca55
 800d918:	0800c81d 	.word	0x0800c81d

0800d91c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	000a      	movs	r2, r1
 800d926:	1cbb      	adds	r3, r7, #2
 800d928:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d92a:	2300      	movs	r3, #0
 800d92c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d92e:	1cbb      	adds	r3, r7, #2
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	2201      	movs	r2, #1
 800d934:	4013      	ands	r3, r2
 800d936:	d010      	beq.n	800d95a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2242      	movs	r2, #66	@ 0x42
 800d93c:	4313      	orrs	r3, r2
 800d93e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2241      	movs	r2, #65	@ 0x41
 800d944:	5c9b      	ldrb	r3, [r3, r2]
 800d946:	b2db      	uxtb	r3, r3
 800d948:	001a      	movs	r2, r3
 800d94a:	2328      	movs	r3, #40	@ 0x28
 800d94c:	4013      	ands	r3, r2
 800d94e:	2b28      	cmp	r3, #40	@ 0x28
 800d950:	d003      	beq.n	800d95a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	22b0      	movs	r2, #176	@ 0xb0
 800d956:	4313      	orrs	r3, r2
 800d958:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d95a:	1cbb      	adds	r3, r7, #2
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	2202      	movs	r2, #2
 800d960:	4013      	ands	r3, r2
 800d962:	d010      	beq.n	800d986 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2244      	movs	r2, #68	@ 0x44
 800d968:	4313      	orrs	r3, r2
 800d96a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2241      	movs	r2, #65	@ 0x41
 800d970:	5c9b      	ldrb	r3, [r3, r2]
 800d972:	b2db      	uxtb	r3, r3
 800d974:	001a      	movs	r2, r3
 800d976:	2328      	movs	r3, #40	@ 0x28
 800d978:	4013      	ands	r3, r2
 800d97a:	2b28      	cmp	r3, #40	@ 0x28
 800d97c:	d003      	beq.n	800d986 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	22b0      	movs	r2, #176	@ 0xb0
 800d982:	4313      	orrs	r3, r2
 800d984:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d986:	1cbb      	adds	r3, r7, #2
 800d988:	2200      	movs	r2, #0
 800d98a:	5e9b      	ldrsh	r3, [r3, r2]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	da03      	bge.n	800d998 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	22b8      	movs	r2, #184	@ 0xb8
 800d994:	4313      	orrs	r3, r2
 800d996:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d998:	1cbb      	adds	r3, r7, #2
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	2b10      	cmp	r3, #16
 800d99e:	d103      	bne.n	800d9a8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2290      	movs	r2, #144	@ 0x90
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d9a8:	1cbb      	adds	r3, r7, #2
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	2b20      	cmp	r3, #32
 800d9ae:	d103      	bne.n	800d9b8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2220      	movs	r2, #32
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d9b8:	1cbb      	adds	r3, r7, #2
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	2b40      	cmp	r3, #64	@ 0x40
 800d9be:	d103      	bne.n	800d9c8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2240      	movs	r2, #64	@ 0x40
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	43d9      	mvns	r1, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	400a      	ands	r2, r1
 800d9d8:	601a      	str	r2, [r3, #0]
}
 800d9da:	46c0      	nop			@ (mov r8, r8)
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	b004      	add	sp, #16
 800d9e0:	bd80      	pop	{r7, pc}
	...

0800d9e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2241      	movs	r2, #65	@ 0x41
 800d9f2:	5c9b      	ldrb	r3, [r3, r2]
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	2b20      	cmp	r3, #32
 800d9f8:	d138      	bne.n	800da6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2240      	movs	r2, #64	@ 0x40
 800d9fe:	5c9b      	ldrb	r3, [r3, r2]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d101      	bne.n	800da08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800da04:	2302      	movs	r3, #2
 800da06:	e032      	b.n	800da6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2240      	movs	r2, #64	@ 0x40
 800da0c:	2101      	movs	r1, #1
 800da0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2241      	movs	r2, #65	@ 0x41
 800da14:	2124      	movs	r1, #36	@ 0x24
 800da16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2101      	movs	r1, #1
 800da24:	438a      	bics	r2, r1
 800da26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4911      	ldr	r1, [pc, #68]	@ (800da78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800da34:	400a      	ands	r2, r1
 800da36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6819      	ldr	r1, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	430a      	orrs	r2, r1
 800da46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2101      	movs	r1, #1
 800da54:	430a      	orrs	r2, r1
 800da56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2241      	movs	r2, #65	@ 0x41
 800da5c:	2120      	movs	r1, #32
 800da5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2240      	movs	r2, #64	@ 0x40
 800da64:	2100      	movs	r1, #0
 800da66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	e000      	b.n	800da6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800da6c:	2302      	movs	r3, #2
  }
}
 800da6e:	0018      	movs	r0, r3
 800da70:	46bd      	mov	sp, r7
 800da72:	b002      	add	sp, #8
 800da74:	bd80      	pop	{r7, pc}
 800da76:	46c0      	nop			@ (mov r8, r8)
 800da78:	ffffefff 	.word	0xffffefff

0800da7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2241      	movs	r2, #65	@ 0x41
 800da8a:	5c9b      	ldrb	r3, [r3, r2]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b20      	cmp	r3, #32
 800da90:	d139      	bne.n	800db06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2240      	movs	r2, #64	@ 0x40
 800da96:	5c9b      	ldrb	r3, [r3, r2]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d101      	bne.n	800daa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800da9c:	2302      	movs	r3, #2
 800da9e:	e033      	b.n	800db08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2240      	movs	r2, #64	@ 0x40
 800daa4:	2101      	movs	r1, #1
 800daa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2241      	movs	r2, #65	@ 0x41
 800daac:	2124      	movs	r1, #36	@ 0x24
 800daae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2101      	movs	r1, #1
 800dabc:	438a      	bics	r2, r1
 800dabe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	4a11      	ldr	r2, [pc, #68]	@ (800db10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800dacc:	4013      	ands	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	021b      	lsls	r3, r3, #8
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	4313      	orrs	r3, r2
 800dad8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2101      	movs	r1, #1
 800daee:	430a      	orrs	r2, r1
 800daf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2241      	movs	r2, #65	@ 0x41
 800daf6:	2120      	movs	r1, #32
 800daf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2240      	movs	r2, #64	@ 0x40
 800dafe:	2100      	movs	r1, #0
 800db00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	e000      	b.n	800db08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800db06:	2302      	movs	r3, #2
  }
}
 800db08:	0018      	movs	r0, r3
 800db0a:	46bd      	mov	sp, r7
 800db0c:	b004      	add	sp, #16
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	fffff0ff 	.word	0xfffff0ff

0800db14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b088      	sub	sp, #32
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d101      	bne.n	800db26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	e0e1      	b.n	800dcea <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2235      	movs	r2, #53	@ 0x35
 800db2a:	5c9b      	ldrb	r3, [r3, r2]
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d107      	bne.n	800db42 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2234      	movs	r2, #52	@ 0x34
 800db36:	2100      	movs	r1, #0
 800db38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	0018      	movs	r0, r3
 800db3e:	f7f8 fbd5 	bl	80062ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2235      	movs	r2, #53	@ 0x35
 800db46:	2102      	movs	r1, #2
 800db48:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	69da      	ldr	r2, [r3, #28]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4967      	ldr	r1, [pc, #412]	@ (800dcf4 <HAL_I2S_Init+0x1e0>)
 800db56:	400a      	ands	r2, r1
 800db58:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2202      	movs	r2, #2
 800db60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	2b02      	cmp	r3, #2
 800db68:	d073      	beq.n	800dc52 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800db72:	2310      	movs	r3, #16
 800db74:	617b      	str	r3, [r7, #20]
 800db76:	e001      	b.n	800db7c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800db78:	2320      	movs	r3, #32
 800db7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	2b20      	cmp	r3, #32
 800db82:	d802      	bhi.n	800db8a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	005b      	lsls	r3, r3, #1
 800db88:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800db8a:	f002 fe8d 	bl	80108a8 <HAL_RCC_GetSysClockFreq>
 800db8e:	0003      	movs	r3, r0
 800db90:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	691a      	ldr	r2, [r3, #16]
 800db96:	2380      	movs	r3, #128	@ 0x80
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d131      	bne.n	800dc02 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d016      	beq.n	800dbd4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	0019      	movs	r1, r3
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f7f2 fac7 	bl	8000140 <__udivsi3>
 800dbb2:	0003      	movs	r3, r0
 800dbb4:	001a      	movs	r2, r3
 800dbb6:	0013      	movs	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	189b      	adds	r3, r3, r2
 800dbbc:	005b      	lsls	r3, r3, #1
 800dbbe:	001a      	movs	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	0019      	movs	r1, r3
 800dbc6:	0010      	movs	r0, r2
 800dbc8:	f7f2 faba 	bl	8000140 <__udivsi3>
 800dbcc:	0003      	movs	r3, r0
 800dbce:	3305      	adds	r3, #5
 800dbd0:	613b      	str	r3, [r7, #16]
 800dbd2:	e02a      	b.n	800dc2a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	00db      	lsls	r3, r3, #3
 800dbd8:	0019      	movs	r1, r3
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7f2 fab0 	bl	8000140 <__udivsi3>
 800dbe0:	0003      	movs	r3, r0
 800dbe2:	001a      	movs	r2, r3
 800dbe4:	0013      	movs	r3, r2
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	189b      	adds	r3, r3, r2
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	001a      	movs	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	0019      	movs	r1, r3
 800dbf4:	0010      	movs	r0, r2
 800dbf6:	f7f2 faa3 	bl	8000140 <__udivsi3>
 800dbfa:	0003      	movs	r3, r0
 800dbfc:	3305      	adds	r3, #5
 800dbfe:	613b      	str	r3, [r7, #16]
 800dc00:	e013      	b.n	800dc2a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800dc02:	6979      	ldr	r1, [r7, #20]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7f2 fa9b 	bl	8000140 <__udivsi3>
 800dc0a:	0003      	movs	r3, r0
 800dc0c:	001a      	movs	r2, r3
 800dc0e:	0013      	movs	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	189b      	adds	r3, r3, r2
 800dc14:	005b      	lsls	r3, r3, #1
 800dc16:	001a      	movs	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	695b      	ldr	r3, [r3, #20]
 800dc1c:	0019      	movs	r1, r3
 800dc1e:	0010      	movs	r0, r2
 800dc20:	f7f2 fa8e 	bl	8000140 <__udivsi3>
 800dc24:	0003      	movs	r3, r0
 800dc26:	3305      	adds	r3, #5
 800dc28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	210a      	movs	r1, #10
 800dc2e:	0018      	movs	r0, r3
 800dc30:	f7f2 fa86 	bl	8000140 <__udivsi3>
 800dc34:	0003      	movs	r3, r0
 800dc36:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	085b      	lsrs	r3, r3, #1
 800dc48:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	021b      	lsls	r3, r3, #8
 800dc4e:	61bb      	str	r3, [r7, #24]
 800dc50:	e003      	b.n	800dc5a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800dc52:	2302      	movs	r3, #2
 800dc54:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d902      	bls.n	800dc66 <HAL_I2S_Init+0x152>
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	2bff      	cmp	r3, #255	@ 0xff
 800dc64:	d907      	bls.n	800dc76 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc6a:	2210      	movs	r2, #16
 800dc6c:	431a      	orrs	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e039      	b.n	800dcea <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	691a      	ldr	r2, [r3, #16]
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	431a      	orrs	r2, r3
 800dc7e:	0011      	movs	r1, r2
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	69fa      	ldr	r2, [r7, #28]
 800dc86:	430a      	orrs	r2, r1
 800dc88:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	69db      	ldr	r3, [r3, #28]
 800dc90:	4a18      	ldr	r2, [pc, #96]	@ (800dcf4 <HAL_I2S_Init+0x1e0>)
 800dc92:	401a      	ands	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6859      	ldr	r1, [r3, #4]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	4319      	orrs	r1, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	4319      	orrs	r1, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	430b      	orrs	r3, r1
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2180      	movs	r1, #128	@ 0x80
 800dcb2:	0109      	lsls	r1, r1, #4
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	2b30      	cmp	r3, #48	@ 0x30
 800dcbe:	d003      	beq.n	800dcc8 <HAL_I2S_Init+0x1b4>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	2bb0      	cmp	r3, #176	@ 0xb0
 800dcc6:	d108      	bne.n	800dcda <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	69da      	ldr	r2, [r3, #28]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2180      	movs	r1, #128	@ 0x80
 800dcd4:	0149      	lsls	r1, r1, #5
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2235      	movs	r2, #53	@ 0x35
 800dce4:	2101      	movs	r1, #1
 800dce6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	0018      	movs	r0, r3
 800dcec:	46bd      	mov	sp, r7
 800dcee:	b008      	add	sp, #32
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	46c0      	nop			@ (mov r8, r8)
 800dcf4:	fffff040 	.word	0xfffff040

0800dcf8 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	e01b      	b.n	800dd42 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2235      	movs	r2, #53	@ 0x35
 800dd0e:	2102      	movs	r1, #2
 800dd10:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	69da      	ldr	r2, [r3, #28]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	490b      	ldr	r1, [pc, #44]	@ (800dd4c <HAL_I2S_DeInit+0x54>)
 800dd1e:	400a      	ands	r2, r1
 800dd20:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	0018      	movs	r0, r3
 800dd26:	f7f8 fb55 	bl	80063d4 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2235      	movs	r2, #53	@ 0x35
 800dd34:	2100      	movs	r1, #0
 800dd36:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2234      	movs	r2, #52	@ 0x34
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	0018      	movs	r0, r3
 800dd44:	46bd      	mov	sp, r7
 800dd46:	b002      	add	sp, #8
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	46c0      	nop			@ (mov r8, r8)
 800dd4c:	fffffbff 	.word	0xfffffbff

0800dd50 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	1dbb      	adds	r3, r7, #6
 800dd5c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <HAL_I2S_Receive_DMA+0x1c>
 800dd64:	1dbb      	adds	r3, r7, #6
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d101      	bne.n	800dd70 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e0a6      	b.n	800debe <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2234      	movs	r2, #52	@ 0x34
 800dd74:	5c9b      	ldrb	r3, [r3, r2]
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d101      	bne.n	800dd80 <HAL_I2S_Receive_DMA+0x30>
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	e09e      	b.n	800debe <HAL_I2S_Receive_DMA+0x16e>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2234      	movs	r2, #52	@ 0x34
 800dd84:	2101      	movs	r1, #1
 800dd86:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2235      	movs	r2, #53	@ 0x35
 800dd8c:	5c9b      	ldrb	r3, [r3, r2]
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d005      	beq.n	800dda0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2234      	movs	r2, #52	@ 0x34
 800dd98:	2100      	movs	r1, #0
 800dd9a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	e08e      	b.n	800debe <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2235      	movs	r2, #53	@ 0x35
 800dda4:	2104      	movs	r1, #4
 800dda6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	69db      	ldr	r3, [r3, #28]
 800ddba:	2207      	movs	r2, #7
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	2b03      	cmp	r3, #3
 800ddc4:	d002      	beq.n	800ddcc <HAL_I2S_Receive_DMA+0x7c>
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	2b05      	cmp	r3, #5
 800ddca:	d10c      	bne.n	800dde6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800ddcc:	1dbb      	adds	r3, r7, #6
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	18db      	adds	r3, r3, r3
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800ddd8:	1dbb      	adds	r3, r7, #6
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	18db      	adds	r3, r3, r3
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dde4:	e007      	b.n	800ddf6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	1dba      	adds	r2, r7, #6
 800ddea:	8812      	ldrh	r2, [r2, #0]
 800ddec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	1dba      	adds	r2, r7, #6
 800ddf2:	8812      	ldrh	r2, [r2, #0]
 800ddf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddfa:	4a33      	ldr	r2, [pc, #204]	@ (800dec8 <HAL_I2S_Receive_DMA+0x178>)
 800ddfc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de02:	4a32      	ldr	r2, [pc, #200]	@ (800decc <HAL_I2S_Receive_DMA+0x17c>)
 800de04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de0a:	4a31      	ldr	r2, [pc, #196]	@ (800ded0 <HAL_I2S_Receive_DMA+0x180>)
 800de0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	69da      	ldr	r2, [r3, #28]
 800de14:	23c0      	movs	r3, #192	@ 0xc0
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	401a      	ands	r2, r3
 800de1a:	23c0      	movs	r3, #192	@ 0xc0
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	429a      	cmp	r2, r3
 800de20:	d10a      	bne.n	800de38 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800de22:	2300      	movs	r3, #0
 800de24:	613b      	str	r3, [r7, #16]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	613b      	str	r3, [r7, #16]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	613b      	str	r3, [r7, #16]
 800de36:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	330c      	adds	r3, #12
 800de42:	0019      	movs	r1, r3
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de48:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800de50:	f7fd f812 	bl	800ae78 <HAL_DMA_Start_IT>
 800de54:	1e03      	subs	r3, r0, #0
 800de56:	d00f      	beq.n	800de78 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de5c:	2208      	movs	r2, #8
 800de5e:	431a      	orrs	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2235      	movs	r2, #53	@ 0x35
 800de68:	2101      	movs	r1, #1
 800de6a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2234      	movs	r2, #52	@ 0x34
 800de70:	2100      	movs	r1, #0
 800de72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800de74:	2301      	movs	r3, #1
 800de76:	e022      	b.n	800debe <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	69da      	ldr	r2, [r3, #28]
 800de7e:	2380      	movs	r3, #128	@ 0x80
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	4013      	ands	r3, r2
 800de84:	d108      	bne.n	800de98 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	69da      	ldr	r2, [r3, #28]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2180      	movs	r1, #128	@ 0x80
 800de92:	00c9      	lsls	r1, r1, #3
 800de94:	430a      	orrs	r2, r1
 800de96:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	2201      	movs	r2, #1
 800dea0:	4013      	ands	r3, r2
 800dea2:	d107      	bne.n	800deb4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2101      	movs	r1, #1
 800deb0:	430a      	orrs	r2, r1
 800deb2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2234      	movs	r2, #52	@ 0x34
 800deb8:	2100      	movs	r1, #0
 800deba:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	0018      	movs	r0, r3
 800dec0:	46bd      	mov	sp, r7
 800dec2:	b006      	add	sp, #24
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	46c0      	nop			@ (mov r8, r8)
 800dec8:	0800e0d1 	.word	0x0800e0d1
 800decc:	0800e08d 	.word	0x0800e08d
 800ded0:	0800e0ef 	.word	0x0800e0ef

0800ded4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dedc:	2317      	movs	r3, #23
 800dede:	18fb      	adds	r3, r7, r3
 800dee0:	2200      	movs	r2, #0
 800dee2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685a      	ldr	r2, [r3, #4]
 800dee8:	2380      	movs	r3, #128	@ 0x80
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	429a      	cmp	r2, r3
 800deee:	d003      	beq.n	800def8 <HAL_I2S_DMAStop+0x24>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d158      	bne.n	800dfaa <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defc:	2b00      	cmp	r3, #0
 800defe:	d010      	beq.n	800df22 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df04:	0018      	movs	r0, r3
 800df06:	f7fd f81d 	bl	800af44 <HAL_DMA_Abort>
 800df0a:	1e03      	subs	r3, r0, #0
 800df0c:	d009      	beq.n	800df22 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df12:	2208      	movs	r2, #8
 800df14:	431a      	orrs	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800df1a:	2317      	movs	r3, #23
 800df1c:	18fb      	adds	r3, r7, r3
 800df1e:	2201      	movs	r2, #1
 800df20:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	2364      	movs	r3, #100	@ 0x64
 800df26:	2201      	movs	r2, #1
 800df28:	2102      	movs	r1, #2
 800df2a:	f000 f907 	bl	800e13c <I2S_WaitFlagStateUntilTimeout>
 800df2e:	1e03      	subs	r3, r0, #0
 800df30:	d00d      	beq.n	800df4e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df36:	2201      	movs	r2, #1
 800df38:	431a      	orrs	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2235      	movs	r2, #53	@ 0x35
 800df42:	2101      	movs	r1, #1
 800df44:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800df46:	2317      	movs	r3, #23
 800df48:	18fb      	adds	r3, r7, r3
 800df4a:	2201      	movs	r2, #1
 800df4c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	2364      	movs	r3, #100	@ 0x64
 800df52:	2200      	movs	r2, #0
 800df54:	2180      	movs	r1, #128	@ 0x80
 800df56:	f000 f8f1 	bl	800e13c <I2S_WaitFlagStateUntilTimeout>
 800df5a:	1e03      	subs	r3, r0, #0
 800df5c:	d00d      	beq.n	800df7a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df62:	2201      	movs	r2, #1
 800df64:	431a      	orrs	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2235      	movs	r2, #53	@ 0x35
 800df6e:	2101      	movs	r1, #1
 800df70:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800df72:	2317      	movs	r3, #23
 800df74:	18fb      	adds	r3, r7, r3
 800df76:	2201      	movs	r2, #1
 800df78:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	69da      	ldr	r2, [r3, #28]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4938      	ldr	r1, [pc, #224]	@ (800e068 <HAL_I2S_DMAStop+0x194>)
 800df86:	400a      	ands	r2, r1
 800df88:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800df8a:	2300      	movs	r3, #0
 800df8c:	613b      	str	r3, [r7, #16]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	613b      	str	r3, [r7, #16]
 800df96:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2102      	movs	r1, #2
 800dfa4:	438a      	bics	r2, r1
 800dfa6:	605a      	str	r2, [r3, #4]
 800dfa8:	e053      	b.n	800e052 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	685a      	ldr	r2, [r3, #4]
 800dfae:	23c0      	movs	r3, #192	@ 0xc0
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d005      	beq.n	800dfc2 <HAL_I2S_DMAStop+0xee>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	685a      	ldr	r2, [r3, #4]
 800dfba:	2380      	movs	r3, #128	@ 0x80
 800dfbc:	005b      	lsls	r3, r3, #1
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d147      	bne.n	800e052 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d010      	beq.n	800dfec <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfce:	0018      	movs	r0, r3
 800dfd0:	f7fc ffb8 	bl	800af44 <HAL_DMA_Abort>
 800dfd4:	1e03      	subs	r3, r0, #0
 800dfd6:	d009      	beq.n	800dfec <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfdc:	2208      	movs	r2, #8
 800dfde:	431a      	orrs	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800dfe4:	2317      	movs	r3, #23
 800dfe6:	18fb      	adds	r3, r7, r3
 800dfe8:	2201      	movs	r2, #1
 800dfea:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	69da      	ldr	r2, [r3, #28]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	491c      	ldr	r1, [pc, #112]	@ (800e068 <HAL_I2S_DMAStop+0x194>)
 800dff8:	400a      	ands	r2, r1
 800dffa:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800dffc:	2300      	movs	r3, #0
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	689b      	ldr	r3, [r3, #8]
 800e00e:	60fb      	str	r3, [r7, #12]
 800e010:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2101      	movs	r1, #1
 800e01e:	438a      	bics	r2, r1
 800e020:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	2380      	movs	r3, #128	@ 0x80
 800e028:	005b      	lsls	r3, r3, #1
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d10e      	bne.n	800e04c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e032:	2240      	movs	r2, #64	@ 0x40
 800e034:	431a      	orrs	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2235      	movs	r2, #53	@ 0x35
 800e03e:	2101      	movs	r1, #1
 800e040:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800e042:	2317      	movs	r3, #23
 800e044:	18fb      	adds	r3, r7, r3
 800e046:	2201      	movs	r2, #1
 800e048:	701a      	strb	r2, [r3, #0]
 800e04a:	e002      	b.n	800e052 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2235      	movs	r2, #53	@ 0x35
 800e056:	2101      	movs	r1, #1
 800e058:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800e05a:	2317      	movs	r3, #23
 800e05c:	18fb      	adds	r3, r7, r3
 800e05e:	781b      	ldrb	r3, [r3, #0]
}
 800e060:	0018      	movs	r0, r3
 800e062:	46bd      	mov	sp, r7
 800e064:	b006      	add	sp, #24
 800e066:	bd80      	pop	{r7, pc}
 800e068:	fffffbff 	.word	0xfffffbff

0800e06c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e074:	46c0      	nop			@ (mov r8, r8)
 800e076:	46bd      	mov	sp, r7
 800e078:	b002      	add	sp, #8
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800e084:	46c0      	nop			@ (mov r8, r8)
 800e086:	46bd      	mov	sp, r7
 800e088:	b002      	add	sp, #8
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e098:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	69db      	ldr	r3, [r3, #28]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10e      	bne.n	800e0c0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	438a      	bics	r2, r1
 800e0b0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2235      	movs	r2, #53	@ 0x35
 800e0bc:	2101      	movs	r1, #1
 800e0be:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	0018      	movs	r0, r3
 800e0c4:	f7f9 f9b6 	bl	8007434 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e0c8:	46c0      	nop			@ (mov r8, r8)
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	b004      	add	sp, #16
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0dc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	0018      	movs	r0, r3
 800e0e2:	f7ff ffc3 	bl	800e06c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e0e6:	46c0      	nop			@ (mov r8, r8)
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	b004      	add	sp, #16
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b084      	sub	sp, #16
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0fa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	685a      	ldr	r2, [r3, #4]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2103      	movs	r1, #3
 800e108:	438a      	bics	r2, r1
 800e10a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2200      	movs	r2, #0
 800e116:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2235      	movs	r2, #53	@ 0x35
 800e11c:	2101      	movs	r1, #1
 800e11e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e124:	2208      	movs	r2, #8
 800e126:	431a      	orrs	r2, r3
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	0018      	movs	r0, r3
 800e130:	f7ff ffa4 	bl	800e07c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e134:	46c0      	nop			@ (mov r8, r8)
 800e136:	46bd      	mov	sp, r7
 800e138:	b004      	add	sp, #16
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	1dfb      	adds	r3, r7, #7
 800e14a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800e14c:	f7fc f916 	bl	800a37c <HAL_GetTick>
 800e150:	0003      	movs	r3, r0
 800e152:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e154:	e017      	b.n	800e186 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	3301      	adds	r3, #1
 800e15a:	d014      	beq.n	800e186 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800e15c:	f7fc f90e 	bl	800a37c <HAL_GetTick>
 800e160:	0002      	movs	r2, r0
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d902      	bls.n	800e172 <I2S_WaitFlagStateUntilTimeout+0x36>
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d109      	bne.n	800e186 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2235      	movs	r2, #53	@ 0x35
 800e176:	2101      	movs	r1, #1
 800e178:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2234      	movs	r2, #52	@ 0x34
 800e17e:	2100      	movs	r1, #0
 800e180:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e182:	2303      	movs	r3, #3
 800e184:	e00f      	b.n	800e1a6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	4013      	ands	r3, r2
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	425a      	negs	r2, r3
 800e196:	4153      	adcs	r3, r2
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	001a      	movs	r2, r3
 800e19c:	1dfb      	adds	r3, r7, #7
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d1d8      	bne.n	800e156 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	0018      	movs	r0, r3
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	b006      	add	sp, #24
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1b2:	b08b      	sub	sp, #44	@ 0x2c
 800e1b4:	af06      	add	r7, sp, #24
 800e1b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e0f0      	b.n	800e3a4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a79      	ldr	r2, [pc, #484]	@ (800e3ac <HAL_PCD_Init+0x1fc>)
 800e1c6:	5c9b      	ldrb	r3, [r3, r2]
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d108      	bne.n	800e1e0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	23aa      	movs	r3, #170	@ 0xaa
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	0018      	movs	r0, r3
 800e1dc:	f009 f8d8 	bl	8017390 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4a72      	ldr	r2, [pc, #456]	@ (800e3ac <HAL_PCD_Init+0x1fc>)
 800e1e4:	2103      	movs	r1, #3
 800e1e6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	0018      	movs	r0, r3
 800e1ee:	f005 f88b 	bl	8013308 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1f2:	230f      	movs	r3, #15
 800e1f4:	18fb      	adds	r3, r7, r3
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	e049      	b.n	800e290 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e1fc:	200f      	movs	r0, #15
 800e1fe:	183b      	adds	r3, r7, r0
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	0013      	movs	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	189b      	adds	r3, r3, r2
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	18cb      	adds	r3, r1, r3
 800e210:	3301      	adds	r3, #1
 800e212:	2201      	movs	r2, #1
 800e214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e216:	183b      	adds	r3, r7, r0
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	6879      	ldr	r1, [r7, #4]
 800e21c:	1c5a      	adds	r2, r3, #1
 800e21e:	0013      	movs	r3, r2
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	189b      	adds	r3, r3, r2
 800e224:	00db      	lsls	r3, r3, #3
 800e226:	183a      	adds	r2, r7, r0
 800e228:	7812      	ldrb	r2, [r2, #0]
 800e22a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e22c:	183b      	adds	r3, r7, r0
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	6879      	ldr	r1, [r7, #4]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	0013      	movs	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	189b      	adds	r3, r3, r2
 800e23a:	00db      	lsls	r3, r3, #3
 800e23c:	18cb      	adds	r3, r1, r3
 800e23e:	3303      	adds	r3, #3
 800e240:	2200      	movs	r2, #0
 800e242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e244:	183b      	adds	r3, r7, r0
 800e246:	781a      	ldrb	r2, [r3, #0]
 800e248:	6879      	ldr	r1, [r7, #4]
 800e24a:	0013      	movs	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	189b      	adds	r3, r3, r2
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	18cb      	adds	r3, r1, r3
 800e254:	3338      	adds	r3, #56	@ 0x38
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e25a:	183b      	adds	r3, r7, r0
 800e25c:	781a      	ldrb	r2, [r3, #0]
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	0013      	movs	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	189b      	adds	r3, r3, r2
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	18cb      	adds	r3, r1, r3
 800e26a:	333c      	adds	r3, #60	@ 0x3c
 800e26c:	2200      	movs	r2, #0
 800e26e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e270:	183b      	adds	r3, r7, r0
 800e272:	781a      	ldrb	r2, [r3, #0]
 800e274:	6879      	ldr	r1, [r7, #4]
 800e276:	0013      	movs	r3, r2
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	189b      	adds	r3, r3, r2
 800e27c:	00db      	lsls	r3, r3, #3
 800e27e:	18cb      	adds	r3, r1, r3
 800e280:	3340      	adds	r3, #64	@ 0x40
 800e282:	2200      	movs	r2, #0
 800e284:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e286:	183b      	adds	r3, r7, r0
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	183b      	adds	r3, r7, r0
 800e28c:	3201      	adds	r2, #1
 800e28e:	701a      	strb	r2, [r3, #0]
 800e290:	210f      	movs	r1, #15
 800e292:	187b      	adds	r3, r7, r1
 800e294:	781a      	ldrb	r2, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d3ae      	bcc.n	800e1fc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e29e:	187b      	adds	r3, r7, r1
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	e056      	b.n	800e354 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e2a6:	240f      	movs	r4, #15
 800e2a8:	193b      	adds	r3, r7, r4
 800e2aa:	781a      	ldrb	r2, [r3, #0]
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	236a      	movs	r3, #106	@ 0x6a
 800e2b0:	33ff      	adds	r3, #255	@ 0xff
 800e2b2:	0019      	movs	r1, r3
 800e2b4:	0013      	movs	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	189b      	adds	r3, r3, r2
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	18c3      	adds	r3, r0, r3
 800e2be:	185b      	adds	r3, r3, r1
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e2c4:	193b      	adds	r3, r7, r4
 800e2c6:	781a      	ldrb	r2, [r3, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	23b4      	movs	r3, #180	@ 0xb4
 800e2cc:	0059      	lsls	r1, r3, #1
 800e2ce:	0013      	movs	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	189b      	adds	r3, r3, r2
 800e2d4:	00db      	lsls	r3, r3, #3
 800e2d6:	18c3      	adds	r3, r0, r3
 800e2d8:	185b      	adds	r3, r3, r1
 800e2da:	193a      	adds	r2, r7, r4
 800e2dc:	7812      	ldrb	r2, [r2, #0]
 800e2de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e2e0:	193b      	adds	r3, r7, r4
 800e2e2:	781a      	ldrb	r2, [r3, #0]
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	236c      	movs	r3, #108	@ 0x6c
 800e2e8:	33ff      	adds	r3, #255	@ 0xff
 800e2ea:	0019      	movs	r1, r3
 800e2ec:	0013      	movs	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	189b      	adds	r3, r3, r2
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	18c3      	adds	r3, r0, r3
 800e2f6:	185b      	adds	r3, r3, r1
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e2fc:	193b      	adds	r3, r7, r4
 800e2fe:	781a      	ldrb	r2, [r3, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	23bc      	movs	r3, #188	@ 0xbc
 800e304:	0059      	lsls	r1, r3, #1
 800e306:	0013      	movs	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	189b      	adds	r3, r3, r2
 800e30c:	00db      	lsls	r3, r3, #3
 800e30e:	18c3      	adds	r3, r0, r3
 800e310:	185b      	adds	r3, r3, r1
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e316:	193b      	adds	r3, r7, r4
 800e318:	781a      	ldrb	r2, [r3, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	23be      	movs	r3, #190	@ 0xbe
 800e31e:	0059      	lsls	r1, r3, #1
 800e320:	0013      	movs	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	189b      	adds	r3, r3, r2
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	18c3      	adds	r3, r0, r3
 800e32a:	185b      	adds	r3, r3, r1
 800e32c:	2200      	movs	r2, #0
 800e32e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e330:	193b      	adds	r3, r7, r4
 800e332:	781a      	ldrb	r2, [r3, #0]
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	23c0      	movs	r3, #192	@ 0xc0
 800e338:	0059      	lsls	r1, r3, #1
 800e33a:	0013      	movs	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	189b      	adds	r3, r3, r2
 800e340:	00db      	lsls	r3, r3, #3
 800e342:	18c3      	adds	r3, r0, r3
 800e344:	185b      	adds	r3, r3, r1
 800e346:	2200      	movs	r2, #0
 800e348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e34a:	193b      	adds	r3, r7, r4
 800e34c:	781a      	ldrb	r2, [r3, #0]
 800e34e:	193b      	adds	r3, r7, r4
 800e350:	3201      	adds	r2, #1
 800e352:	701a      	strb	r2, [r3, #0]
 800e354:	230f      	movs	r3, #15
 800e356:	18fb      	adds	r3, r7, r3
 800e358:	781a      	ldrb	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d3a1      	bcc.n	800e2a6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6818      	ldr	r0, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	466a      	mov	r2, sp
 800e36a:	0011      	movs	r1, r2
 800e36c:	001a      	movs	r2, r3
 800e36e:	3210      	adds	r2, #16
 800e370:	ca70      	ldmia	r2!, {r4, r5, r6}
 800e372:	c170      	stmia	r1!, {r4, r5, r6}
 800e374:	ca30      	ldmia	r2!, {r4, r5}
 800e376:	c130      	stmia	r1!, {r4, r5}
 800e378:	6859      	ldr	r1, [r3, #4]
 800e37a:	689a      	ldr	r2, [r3, #8]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	f004 ffdd 	bl	801333c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2224      	movs	r2, #36	@ 0x24
 800e386:	2100      	movs	r1, #0
 800e388:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4a07      	ldr	r2, [pc, #28]	@ (800e3ac <HAL_PCD_Init+0x1fc>)
 800e38e:	2101      	movs	r1, #1
 800e390:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	69db      	ldr	r3, [r3, #28]
 800e396:	2b01      	cmp	r3, #1
 800e398:	d103      	bne.n	800e3a2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	0018      	movs	r0, r3
 800e39e:	f001 fd23 	bl	800fde8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	0018      	movs	r0, r3
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	b005      	add	sp, #20
 800e3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ac:	000002a9 	.word	0x000002a9

0800e3b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	23aa      	movs	r3, #170	@ 0xaa
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	5cd3      	ldrb	r3, [r2, r3]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d101      	bne.n	800e3c8 <HAL_PCD_Start+0x18>
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	e014      	b.n	800e3f2 <HAL_PCD_Start+0x42>
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	23aa      	movs	r3, #170	@ 0xaa
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	0018      	movs	r0, r3
 800e3d8:	f004 ff80 	bl	80132dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	0018      	movs	r0, r3
 800e3e2:	f006 ff83 	bl	80152ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	23aa      	movs	r3, #170	@ 0xaa
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	0018      	movs	r0, r3
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	b002      	add	sp, #8
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	0018      	movs	r0, r3
 800e40a:	f006 ff85 	bl	8015318 <USB_ReadInterrupts>
 800e40e:	0003      	movs	r3, r0
 800e410:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	2380      	movs	r3, #128	@ 0x80
 800e416:	021b      	lsls	r3, r3, #8
 800e418:	4013      	ands	r3, r2
 800e41a:	d004      	beq.n	800e426 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	0018      	movs	r0, r3
 800e420:	f000 fb62 	bl	800eae8 <PCD_EP_ISR_Handler>

    return;
 800e424:	e11d      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	2380      	movs	r3, #128	@ 0x80
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	4013      	ands	r3, r2
 800e42e:	d015      	beq.n	800e45c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2244      	movs	r2, #68	@ 0x44
 800e436:	5a9b      	ldrh	r3, [r3, r2]
 800e438:	b29a      	uxth	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	498a      	ldr	r1, [pc, #552]	@ (800e668 <HAL_PCD_IRQHandler+0x26c>)
 800e440:	400a      	ands	r2, r1
 800e442:	b291      	uxth	r1, r2
 800e444:	2244      	movs	r2, #68	@ 0x44
 800e446:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	0018      	movs	r0, r3
 800e44c:	f009 f823 	bl	8017496 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2100      	movs	r1, #0
 800e454:	0018      	movs	r0, r3
 800e456:	f000 f915 	bl	800e684 <HAL_PCD_SetAddress>

    return;
 800e45a:	e102      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	2380      	movs	r3, #128	@ 0x80
 800e460:	01db      	lsls	r3, r3, #7
 800e462:	4013      	ands	r3, r2
 800e464:	d00c      	beq.n	800e480 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2244      	movs	r2, #68	@ 0x44
 800e46c:	5a9b      	ldrh	r3, [r3, r2]
 800e46e:	b29a      	uxth	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	497d      	ldr	r1, [pc, #500]	@ (800e66c <HAL_PCD_IRQHandler+0x270>)
 800e476:	400a      	ands	r2, r1
 800e478:	b291      	uxth	r1, r2
 800e47a:	2244      	movs	r2, #68	@ 0x44
 800e47c:	5299      	strh	r1, [r3, r2]

    return;
 800e47e:	e0f0      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	2380      	movs	r3, #128	@ 0x80
 800e484:	019b      	lsls	r3, r3, #6
 800e486:	4013      	ands	r3, r2
 800e488:	d00c      	beq.n	800e4a4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2244      	movs	r2, #68	@ 0x44
 800e490:	5a9b      	ldrh	r3, [r3, r2]
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4975      	ldr	r1, [pc, #468]	@ (800e670 <HAL_PCD_IRQHandler+0x274>)
 800e49a:	400a      	ands	r2, r1
 800e49c:	b291      	uxth	r1, r2
 800e49e:	2244      	movs	r2, #68	@ 0x44
 800e4a0:	5299      	strh	r1, [r3, r2]

    return;
 800e4a2:	e0de      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	2380      	movs	r3, #128	@ 0x80
 800e4a8:	015b      	lsls	r3, r3, #5
 800e4aa:	4013      	ands	r3, r2
 800e4ac:	d038      	beq.n	800e520 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2240      	movs	r2, #64	@ 0x40
 800e4b4:	5a9b      	ldrh	r3, [r3, r2]
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2104      	movs	r1, #4
 800e4be:	438a      	bics	r2, r1
 800e4c0:	b291      	uxth	r1, r2
 800e4c2:	2240      	movs	r2, #64	@ 0x40
 800e4c4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2240      	movs	r2, #64	@ 0x40
 800e4cc:	5a9b      	ldrh	r3, [r3, r2]
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2108      	movs	r1, #8
 800e4d6:	438a      	bics	r2, r1
 800e4d8:	b291      	uxth	r1, r2
 800e4da:	2240      	movs	r2, #64	@ 0x40
 800e4dc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	23b8      	movs	r3, #184	@ 0xb8
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	5cd3      	ldrb	r3, [r2, r3]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d109      	bne.n	800e4fe <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	23b8      	movs	r3, #184	@ 0xb8
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	f001 fc9f 	bl	800fe3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	0018      	movs	r0, r3
 800e502:	f009 f809 	bl	8017518 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2244      	movs	r2, #68	@ 0x44
 800e50c:	5a9b      	ldrh	r3, [r3, r2]
 800e50e:	b29a      	uxth	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4957      	ldr	r1, [pc, #348]	@ (800e674 <HAL_PCD_IRQHandler+0x278>)
 800e516:	400a      	ands	r2, r1
 800e518:	b291      	uxth	r1, r2
 800e51a:	2244      	movs	r2, #68	@ 0x44
 800e51c:	5299      	strh	r1, [r3, r2]

    return;
 800e51e:	e0a0      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	2380      	movs	r3, #128	@ 0x80
 800e524:	011b      	lsls	r3, r3, #4
 800e526:	4013      	ands	r3, r2
 800e528:	d028      	beq.n	800e57c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2240      	movs	r2, #64	@ 0x40
 800e530:	5a9b      	ldrh	r3, [r3, r2]
 800e532:	b29a      	uxth	r2, r3
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2108      	movs	r1, #8
 800e53a:	430a      	orrs	r2, r1
 800e53c:	b291      	uxth	r1, r2
 800e53e:	2240      	movs	r2, #64	@ 0x40
 800e540:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2244      	movs	r2, #68	@ 0x44
 800e548:	5a9b      	ldrh	r3, [r3, r2]
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4949      	ldr	r1, [pc, #292]	@ (800e678 <HAL_PCD_IRQHandler+0x27c>)
 800e552:	400a      	ands	r2, r1
 800e554:	b291      	uxth	r1, r2
 800e556:	2244      	movs	r2, #68	@ 0x44
 800e558:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2240      	movs	r2, #64	@ 0x40
 800e560:	5a9b      	ldrh	r3, [r3, r2]
 800e562:	b29a      	uxth	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2104      	movs	r1, #4
 800e56a:	430a      	orrs	r2, r1
 800e56c:	b291      	uxth	r1, r2
 800e56e:	2240      	movs	r2, #64	@ 0x40
 800e570:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	0018      	movs	r0, r3
 800e576:	f008 ffb3 	bl	80174e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e57a:	e072      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2280      	movs	r2, #128	@ 0x80
 800e580:	4013      	ands	r3, r2
 800e582:	d046      	beq.n	800e612 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2244      	movs	r2, #68	@ 0x44
 800e58a:	5a9b      	ldrh	r3, [r3, r2]
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2180      	movs	r1, #128	@ 0x80
 800e594:	438a      	bics	r2, r1
 800e596:	b291      	uxth	r1, r2
 800e598:	2244      	movs	r2, #68	@ 0x44
 800e59a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	23b8      	movs	r3, #184	@ 0xb8
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	5cd3      	ldrb	r3, [r2, r3]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d12f      	bne.n	800e608 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2240      	movs	r2, #64	@ 0x40
 800e5ae:	5a9b      	ldrh	r3, [r3, r2]
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2104      	movs	r1, #4
 800e5b8:	430a      	orrs	r2, r1
 800e5ba:	b291      	uxth	r1, r2
 800e5bc:	2240      	movs	r2, #64	@ 0x40
 800e5be:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2240      	movs	r2, #64	@ 0x40
 800e5c6:	5a9b      	ldrh	r3, [r3, r2]
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2108      	movs	r1, #8
 800e5d0:	430a      	orrs	r2, r1
 800e5d2:	b291      	uxth	r1, r2
 800e5d4:	2240      	movs	r2, #64	@ 0x40
 800e5d6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	23b8      	movs	r3, #184	@ 0xb8
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	2101      	movs	r1, #1
 800e5e0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2254      	movs	r2, #84	@ 0x54
 800e5e8:	5a9b      	ldrh	r3, [r3, r2]
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	089b      	lsrs	r3, r3, #2
 800e5ee:	223c      	movs	r2, #60	@ 0x3c
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	0019      	movs	r1, r3
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	23b9      	movs	r3, #185	@ 0xb9
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2101      	movs	r1, #1
 800e600:	0018      	movs	r0, r3
 800e602:	f001 fc1b 	bl	800fe3c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800e606:	e02c      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	0018      	movs	r0, r3
 800e60c:	f008 ff68 	bl	80174e0 <HAL_PCD_SuspendCallback>
    return;
 800e610:	e027      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	2380      	movs	r3, #128	@ 0x80
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4013      	ands	r3, r2
 800e61a:	d010      	beq.n	800e63e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2244      	movs	r2, #68	@ 0x44
 800e622:	5a9b      	ldrh	r3, [r3, r2]
 800e624:	b29a      	uxth	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4914      	ldr	r1, [pc, #80]	@ (800e67c <HAL_PCD_IRQHandler+0x280>)
 800e62c:	400a      	ands	r2, r1
 800e62e:	b291      	uxth	r1, r2
 800e630:	2244      	movs	r2, #68	@ 0x44
 800e632:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	0018      	movs	r0, r3
 800e638:	f008 ff1e 	bl	8017478 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e63c:	e011      	b.n	800e662 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	2380      	movs	r3, #128	@ 0x80
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	4013      	ands	r3, r2
 800e646:	d00c      	beq.n	800e662 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2244      	movs	r2, #68	@ 0x44
 800e64e:	5a9b      	ldrh	r3, [r3, r2]
 800e650:	b29a      	uxth	r2, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	490a      	ldr	r1, [pc, #40]	@ (800e680 <HAL_PCD_IRQHandler+0x284>)
 800e658:	400a      	ands	r2, r1
 800e65a:	b291      	uxth	r1, r2
 800e65c:	2244      	movs	r2, #68	@ 0x44
 800e65e:	5299      	strh	r1, [r3, r2]

    return;
 800e660:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e662:	46bd      	mov	sp, r7
 800e664:	b004      	add	sp, #16
 800e666:	bd80      	pop	{r7, pc}
 800e668:	fffffbff 	.word	0xfffffbff
 800e66c:	ffffbfff 	.word	0xffffbfff
 800e670:	ffffdfff 	.word	0xffffdfff
 800e674:	ffffefff 	.word	0xffffefff
 800e678:	fffff7ff 	.word	0xfffff7ff
 800e67c:	fffffdff 	.word	0xfffffdff
 800e680:	fffffeff 	.word	0xfffffeff

0800e684 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	000a      	movs	r2, r1
 800e68e:	1cfb      	adds	r3, r7, #3
 800e690:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	23aa      	movs	r3, #170	@ 0xaa
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	5cd3      	ldrb	r3, [r2, r3]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d101      	bne.n	800e6a2 <HAL_PCD_SetAddress+0x1e>
 800e69e:	2302      	movs	r3, #2
 800e6a0:	e017      	b.n	800e6d2 <HAL_PCD_SetAddress+0x4e>
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	23aa      	movs	r3, #170	@ 0xaa
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	1cfa      	adds	r2, r7, #3
 800e6b0:	2124      	movs	r1, #36	@ 0x24
 800e6b2:	7812      	ldrb	r2, [r2, #0]
 800e6b4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	1cfb      	adds	r3, r7, #3
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	0019      	movs	r1, r3
 800e6c0:	0010      	movs	r0, r2
 800e6c2:	f006 fdff 	bl	80152c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	23aa      	movs	r3, #170	@ 0xaa
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	b002      	add	sp, #8
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e6da:	b590      	push	{r4, r7, lr}
 800e6dc:	b085      	sub	sp, #20
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	000c      	movs	r4, r1
 800e6e4:	0010      	movs	r0, r2
 800e6e6:	0019      	movs	r1, r3
 800e6e8:	1cfb      	adds	r3, r7, #3
 800e6ea:	1c22      	adds	r2, r4, #0
 800e6ec:	701a      	strb	r2, [r3, #0]
 800e6ee:	003b      	movs	r3, r7
 800e6f0:	1c02      	adds	r2, r0, #0
 800e6f2:	801a      	strh	r2, [r3, #0]
 800e6f4:	1cbb      	adds	r3, r7, #2
 800e6f6:	1c0a      	adds	r2, r1, #0
 800e6f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e6fa:	230b      	movs	r3, #11
 800e6fc:	18fb      	adds	r3, r7, r3
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e702:	1cfb      	adds	r3, r7, #3
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	b25b      	sxtb	r3, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	da0f      	bge.n	800e72c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e70c:	1cfb      	adds	r3, r7, #3
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2207      	movs	r2, #7
 800e712:	4013      	ands	r3, r2
 800e714:	1c5a      	adds	r2, r3, #1
 800e716:	0013      	movs	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	189b      	adds	r3, r3, r2
 800e71c:	00db      	lsls	r3, r3, #3
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	18d3      	adds	r3, r2, r3
 800e722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2201      	movs	r2, #1
 800e728:	705a      	strb	r2, [r3, #1]
 800e72a:	e00f      	b.n	800e74c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e72c:	1cfb      	adds	r3, r7, #3
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2207      	movs	r2, #7
 800e732:	401a      	ands	r2, r3
 800e734:	0013      	movs	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	189b      	adds	r3, r3, r2
 800e73a:	00db      	lsls	r3, r3, #3
 800e73c:	3369      	adds	r3, #105	@ 0x69
 800e73e:	33ff      	adds	r3, #255	@ 0xff
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	18d3      	adds	r3, r2, r3
 800e744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e74c:	1cfb      	adds	r3, r7, #3
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	2207      	movs	r2, #7
 800e752:	4013      	ands	r3, r2
 800e754:	b2da      	uxtb	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e75a:	003b      	movs	r3, r7
 800e75c:	881a      	ldrh	r2, [r3, #0]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	1cba      	adds	r2, r7, #2
 800e766:	7812      	ldrb	r2, [r2, #0]
 800e768:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e76a:	1cbb      	adds	r3, r7, #2
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d102      	bne.n	800e778 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	23aa      	movs	r3, #170	@ 0xaa
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	5cd3      	ldrb	r3, [r2, r3]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d101      	bne.n	800e788 <HAL_PCD_EP_Open+0xae>
 800e784:	2302      	movs	r3, #2
 800e786:	e013      	b.n	800e7b0 <HAL_PCD_EP_Open+0xd6>
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	23aa      	movs	r3, #170	@ 0xaa
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	2101      	movs	r1, #1
 800e790:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	0011      	movs	r1, r2
 800e79a:	0018      	movs	r0, r3
 800e79c:	f004 fdf6 	bl	801338c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	23aa      	movs	r3, #170	@ 0xaa
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e7aa:	230b      	movs	r3, #11
 800e7ac:	18fb      	adds	r3, r7, r3
 800e7ae:	781b      	ldrb	r3, [r3, #0]
}
 800e7b0:	0018      	movs	r0, r3
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	b005      	add	sp, #20
 800e7b6:	bd90      	pop	{r4, r7, pc}

0800e7b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	000a      	movs	r2, r1
 800e7c2:	1cfb      	adds	r3, r7, #3
 800e7c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e7c6:	1cfb      	adds	r3, r7, #3
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	b25b      	sxtb	r3, r3
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	da0f      	bge.n	800e7f0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e7d0:	1cfb      	adds	r3, r7, #3
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2207      	movs	r2, #7
 800e7d6:	4013      	ands	r3, r2
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	0013      	movs	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	189b      	adds	r3, r3, r2
 800e7e0:	00db      	lsls	r3, r3, #3
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	18d3      	adds	r3, r2, r3
 800e7e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	705a      	strb	r2, [r3, #1]
 800e7ee:	e00f      	b.n	800e810 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e7f0:	1cfb      	adds	r3, r7, #3
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	2207      	movs	r2, #7
 800e7f6:	401a      	ands	r2, r3
 800e7f8:	0013      	movs	r3, r2
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	189b      	adds	r3, r3, r2
 800e7fe:	00db      	lsls	r3, r3, #3
 800e800:	3369      	adds	r3, #105	@ 0x69
 800e802:	33ff      	adds	r3, #255	@ 0xff
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	18d3      	adds	r3, r2, r3
 800e808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2200      	movs	r2, #0
 800e80e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e810:	1cfb      	adds	r3, r7, #3
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	2207      	movs	r2, #7
 800e816:	4013      	ands	r3, r2
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	23aa      	movs	r3, #170	@ 0xaa
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	5cd3      	ldrb	r3, [r2, r3]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d101      	bne.n	800e82e <HAL_PCD_EP_Close+0x76>
 800e82a:	2302      	movs	r3, #2
 800e82c:	e011      	b.n	800e852 <HAL_PCD_EP_Close+0x9a>
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	23aa      	movs	r3, #170	@ 0xaa
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	2101      	movs	r1, #1
 800e836:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	0011      	movs	r1, r2
 800e840:	0018      	movs	r0, r3
 800e842:	f005 f945 	bl	8013ad0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	23aa      	movs	r3, #170	@ 0xaa
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	2100      	movs	r1, #0
 800e84e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	0018      	movs	r0, r3
 800e854:	46bd      	mov	sp, r7
 800e856:	b004      	add	sp, #16
 800e858:	bd80      	pop	{r7, pc}

0800e85a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b086      	sub	sp, #24
 800e85e:	af00      	add	r7, sp, #0
 800e860:	60f8      	str	r0, [r7, #12]
 800e862:	607a      	str	r2, [r7, #4]
 800e864:	603b      	str	r3, [r7, #0]
 800e866:	200b      	movs	r0, #11
 800e868:	183b      	adds	r3, r7, r0
 800e86a:	1c0a      	adds	r2, r1, #0
 800e86c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e86e:	0001      	movs	r1, r0
 800e870:	187b      	adds	r3, r7, r1
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	2207      	movs	r2, #7
 800e876:	401a      	ands	r2, r3
 800e878:	0013      	movs	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	189b      	adds	r3, r3, r2
 800e87e:	00db      	lsls	r3, r3, #3
 800e880:	3369      	adds	r3, #105	@ 0x69
 800e882:	33ff      	adds	r3, #255	@ 0xff
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	18d3      	adds	r3, r2, r3
 800e888:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	2200      	movs	r2, #0
 800e89a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e8a2:	187b      	adds	r3, r7, r1
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2207      	movs	r2, #7
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	697a      	ldr	r2, [r7, #20]
 800e8b6:	0011      	movs	r1, r2
 800e8b8:	0018      	movs	r0, r3
 800e8ba:	f005 fac9 	bl	8013e50 <USB_EPStartXfer>

  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	0018      	movs	r0, r3
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	b006      	add	sp, #24
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	000a      	movs	r2, r1
 800e8d2:	1cfb      	adds	r3, r7, #3
 800e8d4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e8d6:	1cfb      	adds	r3, r7, #3
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	2207      	movs	r2, #7
 800e8dc:	401a      	ands	r2, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	23c2      	movs	r3, #194	@ 0xc2
 800e8e2:	0059      	lsls	r1, r3, #1
 800e8e4:	0013      	movs	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	189b      	adds	r3, r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	18c3      	adds	r3, r0, r3
 800e8ee:	185b      	adds	r3, r3, r1
 800e8f0:	681b      	ldr	r3, [r3, #0]
}
 800e8f2:	0018      	movs	r0, r3
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	b002      	add	sp, #8
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b086      	sub	sp, #24
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	60f8      	str	r0, [r7, #12]
 800e902:	607a      	str	r2, [r7, #4]
 800e904:	603b      	str	r3, [r7, #0]
 800e906:	200b      	movs	r0, #11
 800e908:	183b      	adds	r3, r7, r0
 800e90a:	1c0a      	adds	r2, r1, #0
 800e90c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e90e:	183b      	adds	r3, r7, r0
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2207      	movs	r2, #7
 800e914:	4013      	ands	r3, r2
 800e916:	1c5a      	adds	r2, r3, #1
 800e918:	0013      	movs	r3, r2
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	189b      	adds	r3, r3, r2
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	18d3      	adds	r3, r2, r3
 800e924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2224      	movs	r2, #36	@ 0x24
 800e936:	2101      	movs	r1, #1
 800e938:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	683a      	ldr	r2, [r7, #0]
 800e93e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	2200      	movs	r2, #0
 800e944:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	2201      	movs	r2, #1
 800e94a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e94c:	183b      	adds	r3, r7, r0
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	2207      	movs	r2, #7
 800e952:	4013      	ands	r3, r2
 800e954:	b2da      	uxtb	r2, r3
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	0011      	movs	r1, r2
 800e962:	0018      	movs	r0, r3
 800e964:	f005 fa74 	bl	8013e50 <USB_EPStartXfer>

  return HAL_OK;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	0018      	movs	r0, r3
 800e96c:	46bd      	mov	sp, r7
 800e96e:	b006      	add	sp, #24
 800e970:	bd80      	pop	{r7, pc}

0800e972 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	000a      	movs	r2, r1
 800e97c:	1cfb      	adds	r3, r7, #3
 800e97e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e980:	1cfb      	adds	r3, r7, #3
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	2207      	movs	r2, #7
 800e986:	401a      	ands	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d901      	bls.n	800e994 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e990:	2301      	movs	r3, #1
 800e992:	e046      	b.n	800ea22 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e994:	1cfb      	adds	r3, r7, #3
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	b25b      	sxtb	r3, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	da0f      	bge.n	800e9be <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e99e:	1cfb      	adds	r3, r7, #3
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	2207      	movs	r2, #7
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	0013      	movs	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	189b      	adds	r3, r3, r2
 800e9ae:	00db      	lsls	r3, r3, #3
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	18d3      	adds	r3, r2, r3
 800e9b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	705a      	strb	r2, [r3, #1]
 800e9bc:	e00d      	b.n	800e9da <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e9be:	1cfb      	adds	r3, r7, #3
 800e9c0:	781a      	ldrb	r2, [r3, #0]
 800e9c2:	0013      	movs	r3, r2
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	189b      	adds	r3, r3, r2
 800e9c8:	00db      	lsls	r3, r3, #3
 800e9ca:	3369      	adds	r3, #105	@ 0x69
 800e9cc:	33ff      	adds	r3, #255	@ 0xff
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	18d3      	adds	r3, r2, r3
 800e9d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e9e0:	1cfb      	adds	r3, r7, #3
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2207      	movs	r2, #7
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	b2da      	uxtb	r2, r3
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	23aa      	movs	r3, #170	@ 0xaa
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	5cd3      	ldrb	r3, [r2, r3]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d101      	bne.n	800e9fe <HAL_PCD_EP_SetStall+0x8c>
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	e011      	b.n	800ea22 <HAL_PCD_EP_SetStall+0xb0>
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	23aa      	movs	r3, #170	@ 0xaa
 800ea02:	009b      	lsls	r3, r3, #2
 800ea04:	2101      	movs	r1, #1
 800ea06:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	0011      	movs	r1, r2
 800ea10:	0018      	movs	r0, r3
 800ea12:	f006 fb55 	bl	80150c0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	23aa      	movs	r3, #170	@ 0xaa
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	0018      	movs	r0, r3
 800ea24:	46bd      	mov	sp, r7
 800ea26:	b004      	add	sp, #16
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b084      	sub	sp, #16
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	000a      	movs	r2, r1
 800ea34:	1cfb      	adds	r3, r7, #3
 800ea36:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ea38:	1cfb      	adds	r3, r7, #3
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	220f      	movs	r2, #15
 800ea3e:	401a      	ands	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d901      	bls.n	800ea4c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e048      	b.n	800eade <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ea4c:	1cfb      	adds	r3, r7, #3
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	b25b      	sxtb	r3, r3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	da0f      	bge.n	800ea76 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ea56:	1cfb      	adds	r3, r7, #3
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	2207      	movs	r2, #7
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	0013      	movs	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	189b      	adds	r3, r3, r2
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	18d3      	adds	r3, r2, r3
 800ea6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2201      	movs	r2, #1
 800ea72:	705a      	strb	r2, [r3, #1]
 800ea74:	e00f      	b.n	800ea96 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ea76:	1cfb      	adds	r3, r7, #3
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2207      	movs	r2, #7
 800ea7c:	401a      	ands	r2, r3
 800ea7e:	0013      	movs	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	189b      	adds	r3, r3, r2
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	3369      	adds	r3, #105	@ 0x69
 800ea88:	33ff      	adds	r3, #255	@ 0xff
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	18d3      	adds	r3, r2, r3
 800ea8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2200      	movs	r2, #0
 800ea94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ea9c:	1cfb      	adds	r3, r7, #3
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2207      	movs	r2, #7
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	b2da      	uxtb	r2, r3
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	23aa      	movs	r3, #170	@ 0xaa
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	5cd3      	ldrb	r3, [r2, r3]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d101      	bne.n	800eaba <HAL_PCD_EP_ClrStall+0x90>
 800eab6:	2302      	movs	r3, #2
 800eab8:	e011      	b.n	800eade <HAL_PCD_EP_ClrStall+0xb4>
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	23aa      	movs	r3, #170	@ 0xaa
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	2101      	movs	r1, #1
 800eac2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	0011      	movs	r1, r2
 800eacc:	0018      	movs	r0, r3
 800eace:	f006 fb47 	bl	8015160 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	23aa      	movs	r3, #170	@ 0xaa
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	2100      	movs	r1, #0
 800eada:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	0018      	movs	r0, r3
 800eae0:	46bd      	mov	sp, r7
 800eae2:	b004      	add	sp, #16
 800eae4:	bd80      	pop	{r7, pc}
	...

0800eae8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800eae8:	b5b0      	push	{r4, r5, r7, lr}
 800eaea:	b096      	sub	sp, #88	@ 0x58
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800eaf0:	f000 fbec 	bl	800f2cc <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	204e      	movs	r0, #78	@ 0x4e
 800eafa:	183b      	adds	r3, r7, r0
 800eafc:	2144      	movs	r1, #68	@ 0x44
 800eafe:	5a52      	ldrh	r2, [r2, r1]
 800eb00:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800eb02:	183b      	adds	r3, r7, r0
 800eb04:	881b      	ldrh	r3, [r3, #0]
 800eb06:	b2da      	uxtb	r2, r3
 800eb08:	244d      	movs	r4, #77	@ 0x4d
 800eb0a:	193b      	adds	r3, r7, r4
 800eb0c:	210f      	movs	r1, #15
 800eb0e:	400a      	ands	r2, r1
 800eb10:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800eb12:	193b      	adds	r3, r7, r4
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d000      	beq.n	800eb1c <PCD_EP_ISR_Handler+0x34>
 800eb1a:	e18f      	b.n	800ee3c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800eb1c:	183b      	adds	r3, r7, r0
 800eb1e:	881b      	ldrh	r3, [r3, #0]
 800eb20:	2210      	movs	r2, #16
 800eb22:	4013      	ands	r3, r2
 800eb24:	d155      	bne.n	800ebd2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	881b      	ldrh	r3, [r3, #0]
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	200e      	movs	r0, #14
 800eb30:	183b      	adds	r3, r7, r0
 800eb32:	49bb      	ldr	r1, [pc, #748]	@ (800ee20 <PCD_EP_ISR_Handler+0x338>)
 800eb34:	400a      	ands	r2, r1
 800eb36:	801a      	strh	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	183a      	adds	r2, r7, r0
 800eb3e:	8812      	ldrh	r2, [r2, #0]
 800eb40:	49b8      	ldr	r1, [pc, #736]	@ (800ee24 <PCD_EP_ISR_Handler+0x33c>)
 800eb42:	430a      	orrs	r2, r1
 800eb44:	b292      	uxth	r2, r2
 800eb46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3328      	adds	r3, #40	@ 0x28
 800eb4c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2250      	movs	r2, #80	@ 0x50
 800eb54:	5a9b      	ldrh	r3, [r3, r2]
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	001a      	movs	r2, r3
 800eb5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	00db      	lsls	r3, r3, #3
 800eb60:	18d2      	adds	r2, r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	18d3      	adds	r3, r2, r3
 800eb68:	4aaf      	ldr	r2, [pc, #700]	@ (800ee28 <PCD_EP_ISR_Handler+0x340>)
 800eb6a:	4694      	mov	ip, r2
 800eb6c:	4463      	add	r3, ip
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	059b      	lsls	r3, r3, #22
 800eb72:	0d9a      	lsrs	r2, r3, #22
 800eb74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800eb78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7a:	695a      	ldr	r2, [r3, #20]
 800eb7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	18d2      	adds	r2, r2, r3
 800eb82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2100      	movs	r1, #0
 800eb8a:	0018      	movs	r0, r3
 800eb8c:	f008 fc56 	bl	801743c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2224      	movs	r2, #36	@ 0x24
 800eb94:	5c9b      	ldrb	r3, [r3, r2]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <PCD_EP_ISR_Handler+0xb8>
 800eb9c:	f000 fb96 	bl	800f2cc <PCD_EP_ISR_Handler+0x7e4>
 800eba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <PCD_EP_ISR_Handler+0xc4>
 800eba8:	f000 fb90 	bl	800f2cc <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2224      	movs	r2, #36	@ 0x24
 800ebb0:	5c9b      	ldrb	r3, [r3, r2]
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2280      	movs	r2, #128	@ 0x80
 800ebb6:	4252      	negs	r2, r2
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	b2da      	uxtb	r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	0011      	movs	r1, r2
 800ebc2:	224c      	movs	r2, #76	@ 0x4c
 800ebc4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2224      	movs	r2, #36	@ 0x24
 800ebca:	2100      	movs	r1, #0
 800ebcc:	5499      	strb	r1, [r3, r2]
 800ebce:	f000 fb7d 	bl	800f2cc <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	3369      	adds	r3, #105	@ 0x69
 800ebd6:	33ff      	adds	r3, #255	@ 0xff
 800ebd8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	214a      	movs	r1, #74	@ 0x4a
 800ebe0:	187b      	adds	r3, r7, r1
 800ebe2:	8812      	ldrh	r2, [r2, #0]
 800ebe4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ebe6:	187b      	adds	r3, r7, r1
 800ebe8:	881a      	ldrh	r2, [r3, #0]
 800ebea:	2380      	movs	r3, #128	@ 0x80
 800ebec:	011b      	lsls	r3, r3, #4
 800ebee:	4013      	ands	r3, r2
 800ebf0:	d037      	beq.n	800ec62 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2250      	movs	r2, #80	@ 0x50
 800ebf8:	5a9b      	ldrh	r3, [r3, r2]
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	001a      	movs	r2, r3
 800ebfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	18d2      	adds	r2, r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	18d3      	adds	r3, r2, r3
 800ec0c:	4a87      	ldr	r2, [pc, #540]	@ (800ee2c <PCD_EP_ISR_Handler+0x344>)
 800ec0e:	4694      	mov	ip, r2
 800ec10:	4463      	add	r3, ip
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	059b      	lsls	r3, r3, #22
 800ec16:	0d9a      	lsrs	r2, r3, #22
 800ec18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6818      	ldr	r0, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	22ac      	movs	r2, #172	@ 0xac
 800ec24:	0092      	lsls	r2, r2, #2
 800ec26:	1899      	adds	r1, r3, r2
 800ec28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ec2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	f006 fbc8 	bl	80153c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	881b      	ldrh	r3, [r3, #0]
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	2010      	movs	r0, #16
 800ec40:	183b      	adds	r3, r7, r0
 800ec42:	497b      	ldr	r1, [pc, #492]	@ (800ee30 <PCD_EP_ISR_Handler+0x348>)
 800ec44:	400a      	ands	r2, r1
 800ec46:	801a      	strh	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	183a      	adds	r2, r7, r0
 800ec4e:	8812      	ldrh	r2, [r2, #0]
 800ec50:	2180      	movs	r1, #128	@ 0x80
 800ec52:	430a      	orrs	r2, r1
 800ec54:	b292      	uxth	r2, r2
 800ec56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	0018      	movs	r0, r3
 800ec5c:	f008 fbb8 	bl	80173d0 <HAL_PCD_SetupStageCallback>
 800ec60:	e334      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ec62:	234a      	movs	r3, #74	@ 0x4a
 800ec64:	18fb      	adds	r3, r7, r3
 800ec66:	2200      	movs	r2, #0
 800ec68:	5e9b      	ldrsh	r3, [r3, r2]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	db00      	blt.n	800ec70 <PCD_EP_ISR_Handler+0x188>
 800ec6e:	e32d      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	201e      	movs	r0, #30
 800ec7a:	183b      	adds	r3, r7, r0
 800ec7c:	496c      	ldr	r1, [pc, #432]	@ (800ee30 <PCD_EP_ISR_Handler+0x348>)
 800ec7e:	400a      	ands	r2, r1
 800ec80:	801a      	strh	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	183a      	adds	r2, r7, r0
 800ec88:	8812      	ldrh	r2, [r2, #0]
 800ec8a:	2180      	movs	r1, #128	@ 0x80
 800ec8c:	430a      	orrs	r2, r1
 800ec8e:	b292      	uxth	r2, r2
 800ec90:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2250      	movs	r2, #80	@ 0x50
 800ec98:	5a9b      	ldrh	r3, [r3, r2]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	001a      	movs	r2, r3
 800ec9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	00db      	lsls	r3, r3, #3
 800eca4:	18d2      	adds	r2, r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	18d3      	adds	r3, r2, r3
 800ecac:	4a5f      	ldr	r2, [pc, #380]	@ (800ee2c <PCD_EP_ISR_Handler+0x344>)
 800ecae:	4694      	mov	ip, r2
 800ecb0:	4463      	add	r3, ip
 800ecb2:	881b      	ldrh	r3, [r3, #0]
 800ecb4:	059b      	lsls	r3, r3, #22
 800ecb6:	0d9a      	lsrs	r2, r3, #22
 800ecb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ecbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecbe:	69db      	ldr	r3, [r3, #28]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d01a      	beq.n	800ecfa <PCD_EP_ISR_Handler+0x212>
 800ecc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc6:	695b      	ldr	r3, [r3, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d016      	beq.n	800ecfa <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6818      	ldr	r0, [r3, #0]
 800ecd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd2:	6959      	ldr	r1, [r3, #20]
 800ecd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ecd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecda:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	f006 fb72 	bl	80153c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ece2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ece4:	695a      	ldr	r2, [r3, #20]
 800ece6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ece8:	69db      	ldr	r3, [r3, #28]
 800ecea:	18d2      	adds	r2, r2, r3
 800ecec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	0018      	movs	r0, r3
 800ecf6:	f008 fb80 	bl	80173fa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	214a      	movs	r1, #74	@ 0x4a
 800ed00:	187b      	adds	r3, r7, r1
 800ed02:	8812      	ldrh	r2, [r2, #0]
 800ed04:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ed06:	187b      	adds	r3, r7, r1
 800ed08:	881a      	ldrh	r2, [r3, #0]
 800ed0a:	2380      	movs	r3, #128	@ 0x80
 800ed0c:	011b      	lsls	r3, r3, #4
 800ed0e:	4013      	ands	r3, r2
 800ed10:	d000      	beq.n	800ed14 <PCD_EP_ISR_Handler+0x22c>
 800ed12:	e2db      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
 800ed14:	187b      	adds	r3, r7, r1
 800ed16:	881a      	ldrh	r2, [r3, #0]
 800ed18:	23c0      	movs	r3, #192	@ 0xc0
 800ed1a:	019b      	lsls	r3, r3, #6
 800ed1c:	401a      	ands	r2, r3
 800ed1e:	23c0      	movs	r3, #192	@ 0xc0
 800ed20:	019b      	lsls	r3, r3, #6
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d100      	bne.n	800ed28 <PCD_EP_ISR_Handler+0x240>
 800ed26:	e2d1      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2250      	movs	r2, #80	@ 0x50
 800ed34:	5a9b      	ldrh	r3, [r3, r2]
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	001a      	movs	r2, r3
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	189b      	adds	r3, r3, r2
 800ed3e:	61bb      	str	r3, [r7, #24]
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	4a3a      	ldr	r2, [pc, #232]	@ (800ee2c <PCD_EP_ISR_Handler+0x344>)
 800ed44:	4694      	mov	ip, r2
 800ed46:	4463      	add	r3, ip
 800ed48:	617b      	str	r3, [r7, #20]
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	881b      	ldrh	r3, [r3, #0]
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	059b      	lsls	r3, r3, #22
 800ed52:	0d9b      	lsrs	r3, r3, #22
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	801a      	strh	r2, [r3, #0]
 800ed5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed60:	d91a      	bls.n	800ed98 <PCD_EP_ISR_Handler+0x2b0>
 800ed62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed64:	691b      	ldr	r3, [r3, #16]
 800ed66:	095b      	lsrs	r3, r3, #5
 800ed68:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed6c:	691b      	ldr	r3, [r3, #16]
 800ed6e:	221f      	movs	r2, #31
 800ed70:	4013      	ands	r3, r2
 800ed72:	d102      	bne.n	800ed7a <PCD_EP_ISR_Handler+0x292>
 800ed74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed76:	3b01      	subs	r3, #1
 800ed78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	029b      	lsls	r3, r3, #10
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	4a25      	ldr	r2, [pc, #148]	@ (800ee24 <PCD_EP_ISR_Handler+0x33c>)
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	801a      	strh	r2, [r3, #0]
 800ed96:	e023      	b.n	800ede0 <PCD_EP_ISR_Handler+0x2f8>
 800ed98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d108      	bne.n	800edb2 <PCD_EP_ISR_Handler+0x2ca>
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	881b      	ldrh	r3, [r3, #0]
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	4a1f      	ldr	r2, [pc, #124]	@ (800ee24 <PCD_EP_ISR_Handler+0x33c>)
 800eda8:	4313      	orrs	r3, r2
 800edaa:	b29a      	uxth	r2, r3
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	801a      	strh	r2, [r3, #0]
 800edb0:	e016      	b.n	800ede0 <PCD_EP_ISR_Handler+0x2f8>
 800edb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edb4:	691b      	ldr	r3, [r3, #16]
 800edb6:	085b      	lsrs	r3, r3, #1
 800edb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800edba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edbc:	691b      	ldr	r3, [r3, #16]
 800edbe:	2201      	movs	r2, #1
 800edc0:	4013      	ands	r3, r2
 800edc2:	d002      	beq.n	800edca <PCD_EP_ISR_Handler+0x2e2>
 800edc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edc6:	3301      	adds	r3, #1
 800edc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	b29a      	uxth	r2, r3
 800edd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	029b      	lsls	r3, r3, #10
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	4313      	orrs	r3, r2
 800edda:	b29a      	uxth	r2, r3
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	2012      	movs	r0, #18
 800edea:	183b      	adds	r3, r7, r0
 800edec:	4911      	ldr	r1, [pc, #68]	@ (800ee34 <PCD_EP_ISR_Handler+0x34c>)
 800edee:	400a      	ands	r2, r1
 800edf0:	801a      	strh	r2, [r3, #0]
 800edf2:	183b      	adds	r3, r7, r0
 800edf4:	183a      	adds	r2, r7, r0
 800edf6:	8812      	ldrh	r2, [r2, #0]
 800edf8:	2180      	movs	r1, #128	@ 0x80
 800edfa:	0149      	lsls	r1, r1, #5
 800edfc:	404a      	eors	r2, r1
 800edfe:	801a      	strh	r2, [r3, #0]
 800ee00:	183b      	adds	r3, r7, r0
 800ee02:	183a      	adds	r2, r7, r0
 800ee04:	8812      	ldrh	r2, [r2, #0]
 800ee06:	2180      	movs	r1, #128	@ 0x80
 800ee08:	0189      	lsls	r1, r1, #6
 800ee0a:	404a      	eors	r2, r1
 800ee0c:	801a      	strh	r2, [r3, #0]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	183a      	adds	r2, r7, r0
 800ee14:	8812      	ldrh	r2, [r2, #0]
 800ee16:	4908      	ldr	r1, [pc, #32]	@ (800ee38 <PCD_EP_ISR_Handler+0x350>)
 800ee18:	430a      	orrs	r2, r1
 800ee1a:	b292      	uxth	r2, r2
 800ee1c:	801a      	strh	r2, [r3, #0]
 800ee1e:	e255      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
 800ee20:	ffff8f0f 	.word	0xffff8f0f
 800ee24:	ffff8000 	.word	0xffff8000
 800ee28:	00000402 	.word	0x00000402
 800ee2c:	00000406 	.word	0x00000406
 800ee30:	00000f8f 	.word	0x00000f8f
 800ee34:	ffffbf8f 	.word	0xffffbf8f
 800ee38:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	001a      	movs	r2, r3
 800ee42:	204d      	movs	r0, #77	@ 0x4d
 800ee44:	183b      	adds	r3, r7, r0
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	18d2      	adds	r2, r2, r3
 800ee4c:	214a      	movs	r1, #74	@ 0x4a
 800ee4e:	187b      	adds	r3, r7, r1
 800ee50:	8812      	ldrh	r2, [r2, #0]
 800ee52:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ee54:	187b      	adds	r3, r7, r1
 800ee56:	2200      	movs	r2, #0
 800ee58:	5e9b      	ldrsh	r3, [r3, r2]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	db00      	blt.n	800ee60 <PCD_EP_ISR_Handler+0x378>
 800ee5e:	e0fa      	b.n	800f056 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	001a      	movs	r2, r3
 800ee66:	183b      	adds	r3, r7, r0
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	18d3      	adds	r3, r2, r3
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	2448      	movs	r4, #72	@ 0x48
 800ee74:	193b      	adds	r3, r7, r4
 800ee76:	49d1      	ldr	r1, [pc, #836]	@ (800f1bc <PCD_EP_ISR_Handler+0x6d4>)
 800ee78:	400a      	ands	r2, r1
 800ee7a:	801a      	strh	r2, [r3, #0]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	001a      	movs	r2, r3
 800ee82:	183b      	adds	r3, r7, r0
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	18d3      	adds	r3, r2, r3
 800ee8a:	193a      	adds	r2, r7, r4
 800ee8c:	8812      	ldrh	r2, [r2, #0]
 800ee8e:	2180      	movs	r1, #128	@ 0x80
 800ee90:	430a      	orrs	r2, r1
 800ee92:	b292      	uxth	r2, r2
 800ee94:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ee96:	183b      	adds	r3, r7, r0
 800ee98:	781a      	ldrb	r2, [r3, #0]
 800ee9a:	0013      	movs	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	189b      	adds	r3, r3, r2
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	3369      	adds	r3, #105	@ 0x69
 800eea4:	33ff      	adds	r3, #255	@ 0xff
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	18d3      	adds	r3, r2, r3
 800eeaa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800eeac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeae:	7b1b      	ldrb	r3, [r3, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d125      	bne.n	800ef00 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2250      	movs	r2, #80	@ 0x50
 800eeba:	5a9b      	ldrh	r3, [r3, r2]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	001a      	movs	r2, r3
 800eec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	00db      	lsls	r3, r3, #3
 800eec6:	18d2      	adds	r2, r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	18d3      	adds	r3, r2, r3
 800eece:	4abc      	ldr	r2, [pc, #752]	@ (800f1c0 <PCD_EP_ISR_Handler+0x6d8>)
 800eed0:	4694      	mov	ip, r2
 800eed2:	4463      	add	r3, ip
 800eed4:	881a      	ldrh	r2, [r3, #0]
 800eed6:	2450      	movs	r4, #80	@ 0x50
 800eed8:	193b      	adds	r3, r7, r4
 800eeda:	0592      	lsls	r2, r2, #22
 800eedc:	0d92      	lsrs	r2, r2, #22
 800eede:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800eee0:	193b      	adds	r3, r7, r4
 800eee2:	881b      	ldrh	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d100      	bne.n	800eeea <PCD_EP_ISR_Handler+0x402>
 800eee8:	e08d      	b.n	800f006 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6818      	ldr	r0, [r3, #0]
 800eeee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef0:	6959      	ldr	r1, [r3, #20]
 800eef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef4:	88da      	ldrh	r2, [r3, #6]
 800eef6:	193b      	adds	r3, r7, r4
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	f006 fa64 	bl	80153c6 <USB_ReadPMA>
 800eefe:	e082      	b.n	800f006 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ef00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef02:	78db      	ldrb	r3, [r3, #3]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d10c      	bne.n	800ef22 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ef08:	2350      	movs	r3, #80	@ 0x50
 800ef0a:	18fc      	adds	r4, r7, r3
 800ef0c:	234a      	movs	r3, #74	@ 0x4a
 800ef0e:	18fb      	adds	r3, r7, r3
 800ef10:	881a      	ldrh	r2, [r3, #0]
 800ef12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	0018      	movs	r0, r3
 800ef18:	f000 f9ec 	bl	800f2f4 <HAL_PCD_EP_DB_Receive>
 800ef1c:	0003      	movs	r3, r0
 800ef1e:	8023      	strh	r3, [r4, #0]
 800ef20:	e071      	b.n	800f006 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	001a      	movs	r2, r3
 800ef28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	18d3      	adds	r3, r2, r3
 800ef30:	881b      	ldrh	r3, [r3, #0]
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	2052      	movs	r0, #82	@ 0x52
 800ef36:	183b      	adds	r3, r7, r0
 800ef38:	49a2      	ldr	r1, [pc, #648]	@ (800f1c4 <PCD_EP_ISR_Handler+0x6dc>)
 800ef3a:	400a      	ands	r2, r1
 800ef3c:	801a      	strh	r2, [r3, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	001a      	movs	r2, r3
 800ef44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	18d3      	adds	r3, r2, r3
 800ef4c:	183a      	adds	r2, r7, r0
 800ef4e:	8812      	ldrh	r2, [r2, #0]
 800ef50:	499d      	ldr	r1, [pc, #628]	@ (800f1c8 <PCD_EP_ISR_Handler+0x6e0>)
 800ef52:	430a      	orrs	r2, r1
 800ef54:	b292      	uxth	r2, r2
 800ef56:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	001a      	movs	r2, r3
 800ef5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	18d3      	adds	r3, r2, r3
 800ef66:	881b      	ldrh	r3, [r3, #0]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	001a      	movs	r2, r3
 800ef6c:	2380      	movs	r3, #128	@ 0x80
 800ef6e:	01db      	lsls	r3, r3, #7
 800ef70:	4013      	ands	r3, r2
 800ef72:	d024      	beq.n	800efbe <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2250      	movs	r2, #80	@ 0x50
 800ef7a:	5a9b      	ldrh	r3, [r3, r2]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	001a      	movs	r2, r3
 800ef80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	00db      	lsls	r3, r3, #3
 800ef86:	18d2      	adds	r2, r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	18d3      	adds	r3, r2, r3
 800ef8e:	4a8f      	ldr	r2, [pc, #572]	@ (800f1cc <PCD_EP_ISR_Handler+0x6e4>)
 800ef90:	4694      	mov	ip, r2
 800ef92:	4463      	add	r3, ip
 800ef94:	881a      	ldrh	r2, [r3, #0]
 800ef96:	2450      	movs	r4, #80	@ 0x50
 800ef98:	193b      	adds	r3, r7, r4
 800ef9a:	0592      	lsls	r2, r2, #22
 800ef9c:	0d92      	lsrs	r2, r2, #22
 800ef9e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800efa0:	193b      	adds	r3, r7, r4
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d02e      	beq.n	800f006 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6818      	ldr	r0, [r3, #0]
 800efac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efae:	6959      	ldr	r1, [r3, #20]
 800efb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efb2:	891a      	ldrh	r2, [r3, #8]
 800efb4:	193b      	adds	r3, r7, r4
 800efb6:	881b      	ldrh	r3, [r3, #0]
 800efb8:	f006 fa05 	bl	80153c6 <USB_ReadPMA>
 800efbc:	e023      	b.n	800f006 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2250      	movs	r2, #80	@ 0x50
 800efc4:	5a9b      	ldrh	r3, [r3, r2]
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	001a      	movs	r2, r3
 800efca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	18d2      	adds	r2, r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	18d3      	adds	r3, r2, r3
 800efd8:	4a79      	ldr	r2, [pc, #484]	@ (800f1c0 <PCD_EP_ISR_Handler+0x6d8>)
 800efda:	4694      	mov	ip, r2
 800efdc:	4463      	add	r3, ip
 800efde:	881a      	ldrh	r2, [r3, #0]
 800efe0:	2450      	movs	r4, #80	@ 0x50
 800efe2:	193b      	adds	r3, r7, r4
 800efe4:	0592      	lsls	r2, r2, #22
 800efe6:	0d92      	lsrs	r2, r2, #22
 800efe8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800efea:	193b      	adds	r3, r7, r4
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d009      	beq.n	800f006 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6818      	ldr	r0, [r3, #0]
 800eff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eff8:	6959      	ldr	r1, [r3, #20]
 800effa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800effc:	895a      	ldrh	r2, [r3, #10]
 800effe:	193b      	adds	r3, r7, r4
 800f000:	881b      	ldrh	r3, [r3, #0]
 800f002:	f006 f9e0 	bl	80153c6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800f006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f008:	69da      	ldr	r2, [r3, #28]
 800f00a:	2150      	movs	r1, #80	@ 0x50
 800f00c:	187b      	adds	r3, r7, r1
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	18d2      	adds	r2, r2, r3
 800f012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f014:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800f016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f018:	695a      	ldr	r2, [r3, #20]
 800f01a:	187b      	adds	r3, r7, r1
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	18d2      	adds	r2, r2, r3
 800f020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f022:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800f024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d005      	beq.n	800f038 <PCD_EP_ISR_Handler+0x550>
 800f02c:	187b      	adds	r3, r7, r1
 800f02e:	881a      	ldrh	r2, [r3, #0]
 800f030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	429a      	cmp	r2, r3
 800f036:	d207      	bcs.n	800f048 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800f038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f03a:	781a      	ldrb	r2, [r3, #0]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	0011      	movs	r1, r2
 800f040:	0018      	movs	r0, r3
 800f042:	f008 f9da 	bl	80173fa <HAL_PCD_DataOutStageCallback>
 800f046:	e006      	b.n	800f056 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f04e:	0011      	movs	r1, r2
 800f050:	0018      	movs	r0, r3
 800f052:	f004 fefd 	bl	8013e50 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800f056:	244a      	movs	r4, #74	@ 0x4a
 800f058:	193b      	adds	r3, r7, r4
 800f05a:	881b      	ldrh	r3, [r3, #0]
 800f05c:	2280      	movs	r2, #128	@ 0x80
 800f05e:	4013      	ands	r3, r2
 800f060:	d100      	bne.n	800f064 <PCD_EP_ISR_Handler+0x57c>
 800f062:	e133      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800f064:	204d      	movs	r0, #77	@ 0x4d
 800f066:	183b      	adds	r3, r7, r0
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	0013      	movs	r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	189b      	adds	r3, r3, r2
 800f072:	00db      	lsls	r3, r3, #3
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	18d3      	adds	r3, r2, r3
 800f078:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	001a      	movs	r2, r3
 800f080:	183b      	adds	r3, r7, r0
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	18d3      	adds	r3, r2, r3
 800f088:	881b      	ldrh	r3, [r3, #0]
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	2542      	movs	r5, #66	@ 0x42
 800f08e:	197b      	adds	r3, r7, r5
 800f090:	494f      	ldr	r1, [pc, #316]	@ (800f1d0 <PCD_EP_ISR_Handler+0x6e8>)
 800f092:	400a      	ands	r2, r1
 800f094:	801a      	strh	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	001a      	movs	r2, r3
 800f09c:	183b      	adds	r3, r7, r0
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	009b      	lsls	r3, r3, #2
 800f0a2:	18d3      	adds	r3, r2, r3
 800f0a4:	197a      	adds	r2, r7, r5
 800f0a6:	8812      	ldrh	r2, [r2, #0]
 800f0a8:	494a      	ldr	r1, [pc, #296]	@ (800f1d4 <PCD_EP_ISR_Handler+0x6ec>)
 800f0aa:	430a      	orrs	r2, r1
 800f0ac:	b292      	uxth	r2, r2
 800f0ae:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800f0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0b2:	78db      	ldrb	r3, [r3, #3]
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d000      	beq.n	800f0ba <PCD_EP_ISR_Handler+0x5d2>
 800f0b8:	e0af      	b.n	800f21a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800f0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0bc:	2200      	movs	r2, #0
 800f0be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800f0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0c2:	7b1b      	ldrb	r3, [r3, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d100      	bne.n	800f0ca <PCD_EP_ISR_Handler+0x5e2>
 800f0c8:	e09f      	b.n	800f20a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f0ca:	193b      	adds	r3, r7, r4
 800f0cc:	881b      	ldrh	r3, [r3, #0]
 800f0ce:	2240      	movs	r2, #64	@ 0x40
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	d046      	beq.n	800f162 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f0d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0d6:	785b      	ldrb	r3, [r3, #1]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d125      	bne.n	800f128 <PCD_EP_ISR_Handler+0x640>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2250      	movs	r2, #80	@ 0x50
 800f0e8:	5a9b      	ldrh	r3, [r3, r2]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	001a      	movs	r2, r3
 800f0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f0:	189b      	adds	r3, r3, r2
 800f0f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	00da      	lsls	r2, r3, #3
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fc:	18d3      	adds	r3, r2, r3
 800f0fe:	4a33      	ldr	r2, [pc, #204]	@ (800f1cc <PCD_EP_ISR_Handler+0x6e4>)
 800f100:	4694      	mov	ip, r2
 800f102:	4463      	add	r3, ip
 800f104:	623b      	str	r3, [r7, #32]
 800f106:	6a3b      	ldr	r3, [r7, #32]
 800f108:	881b      	ldrh	r3, [r3, #0]
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	059b      	lsls	r3, r3, #22
 800f10e:	0d9b      	lsrs	r3, r3, #22
 800f110:	b29a      	uxth	r2, r3
 800f112:	6a3b      	ldr	r3, [r7, #32]
 800f114:	801a      	strh	r2, [r3, #0]
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	4a2d      	ldr	r2, [pc, #180]	@ (800f1d4 <PCD_EP_ISR_Handler+0x6ec>)
 800f11e:	4313      	orrs	r3, r2
 800f120:	b29a      	uxth	r2, r3
 800f122:	6a3b      	ldr	r3, [r7, #32]
 800f124:	801a      	strh	r2, [r3, #0]
 800f126:	e070      	b.n	800f20a <PCD_EP_ISR_Handler+0x722>
 800f128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f12a:	785b      	ldrb	r3, [r3, #1]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d16c      	bne.n	800f20a <PCD_EP_ISR_Handler+0x722>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2250      	movs	r2, #80	@ 0x50
 800f13c:	5a9b      	ldrh	r3, [r3, r2]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	001a      	movs	r2, r3
 800f142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f144:	189b      	adds	r3, r3, r2
 800f146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	00da      	lsls	r2, r3, #3
 800f14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f150:	18d3      	adds	r3, r2, r3
 800f152:	4a1e      	ldr	r2, [pc, #120]	@ (800f1cc <PCD_EP_ISR_Handler+0x6e4>)
 800f154:	4694      	mov	ip, r2
 800f156:	4463      	add	r3, ip
 800f158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f15c:	2200      	movs	r2, #0
 800f15e:	801a      	strh	r2, [r3, #0]
 800f160:	e053      	b.n	800f20a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f16a:	785b      	ldrb	r3, [r3, #1]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d133      	bne.n	800f1d8 <PCD_EP_ISR_Handler+0x6f0>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	637b      	str	r3, [r7, #52]	@ 0x34
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2250      	movs	r2, #80	@ 0x50
 800f17c:	5a9b      	ldrh	r3, [r3, r2]
 800f17e:	b29b      	uxth	r3, r3
 800f180:	001a      	movs	r2, r3
 800f182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f184:	189b      	adds	r3, r3, r2
 800f186:	637b      	str	r3, [r7, #52]	@ 0x34
 800f188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	00da      	lsls	r2, r3, #3
 800f18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f190:	18d3      	adds	r3, r2, r3
 800f192:	4a0b      	ldr	r2, [pc, #44]	@ (800f1c0 <PCD_EP_ISR_Handler+0x6d8>)
 800f194:	4694      	mov	ip, r2
 800f196:	4463      	add	r3, ip
 800f198:	633b      	str	r3, [r7, #48]	@ 0x30
 800f19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	059b      	lsls	r3, r3, #22
 800f1a2:	0d9b      	lsrs	r3, r3, #22
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a8:	801a      	strh	r2, [r3, #0]
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	4a08      	ldr	r2, [pc, #32]	@ (800f1d4 <PCD_EP_ISR_Handler+0x6ec>)
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b8:	801a      	strh	r2, [r3, #0]
 800f1ba:	e026      	b.n	800f20a <PCD_EP_ISR_Handler+0x722>
 800f1bc:	00000f8f 	.word	0x00000f8f
 800f1c0:	00000406 	.word	0x00000406
 800f1c4:	ffff8f8f 	.word	0xffff8f8f
 800f1c8:	ffff80c0 	.word	0xffff80c0
 800f1cc:	00000402 	.word	0x00000402
 800f1d0:	ffff8f0f 	.word	0xffff8f0f
 800f1d4:	ffff8000 	.word	0xffff8000
 800f1d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1da:	785b      	ldrb	r3, [r3, #1]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d114      	bne.n	800f20a <PCD_EP_ISR_Handler+0x722>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2250      	movs	r2, #80	@ 0x50
 800f1e6:	5a9b      	ldrh	r3, [r3, r2]
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	001a      	movs	r2, r3
 800f1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ee:	189b      	adds	r3, r3, r2
 800f1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	00da      	lsls	r2, r3, #3
 800f1f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1fa:	18d3      	adds	r3, r2, r3
 800f1fc:	4a3b      	ldr	r2, [pc, #236]	@ (800f2ec <PCD_EP_ISR_Handler+0x804>)
 800f1fe:	4694      	mov	ip, r2
 800f200:	4463      	add	r3, ip
 800f202:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f206:	2200      	movs	r2, #0
 800f208:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f20a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f20c:	781a      	ldrb	r2, [r3, #0]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	0011      	movs	r1, r2
 800f212:	0018      	movs	r0, r3
 800f214:	f008 f912 	bl	801743c <HAL_PCD_DataInStageCallback>
 800f218:	e058      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800f21a:	234a      	movs	r3, #74	@ 0x4a
 800f21c:	18fb      	adds	r3, r7, r3
 800f21e:	881a      	ldrh	r2, [r3, #0]
 800f220:	2380      	movs	r3, #128	@ 0x80
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4013      	ands	r3, r2
 800f226:	d149      	bne.n	800f2bc <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2250      	movs	r2, #80	@ 0x50
 800f22e:	5a9b      	ldrh	r3, [r3, r2]
 800f230:	b29b      	uxth	r3, r3
 800f232:	001a      	movs	r2, r3
 800f234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	00db      	lsls	r3, r3, #3
 800f23a:	18d2      	adds	r2, r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	18d3      	adds	r3, r2, r3
 800f242:	4a2b      	ldr	r2, [pc, #172]	@ (800f2f0 <PCD_EP_ISR_Handler+0x808>)
 800f244:	4694      	mov	ip, r2
 800f246:	4463      	add	r3, ip
 800f248:	881a      	ldrh	r2, [r3, #0]
 800f24a:	2140      	movs	r1, #64	@ 0x40
 800f24c:	187b      	adds	r3, r7, r1
 800f24e:	0592      	lsls	r2, r2, #22
 800f250:	0d92      	lsrs	r2, r2, #22
 800f252:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800f254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f256:	699a      	ldr	r2, [r3, #24]
 800f258:	187b      	adds	r3, r7, r1
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d907      	bls.n	800f270 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800f260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f262:	699a      	ldr	r2, [r3, #24]
 800f264:	187b      	adds	r3, r7, r1
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	1ad2      	subs	r2, r2, r3
 800f26a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f26c:	619a      	str	r2, [r3, #24]
 800f26e:	e002      	b.n	800f276 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800f270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f272:	2200      	movs	r2, #0
 800f274:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800f276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f278:	699b      	ldr	r3, [r3, #24]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d107      	bne.n	800f28e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f27e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f280:	781a      	ldrb	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	0011      	movs	r1, r2
 800f286:	0018      	movs	r0, r3
 800f288:	f008 f8d8 	bl	801743c <HAL_PCD_DataInStageCallback>
 800f28c:	e01e      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800f28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f290:	695a      	ldr	r2, [r3, #20]
 800f292:	2140      	movs	r1, #64	@ 0x40
 800f294:	187b      	adds	r3, r7, r1
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	18d2      	adds	r2, r2, r3
 800f29a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f29c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800f29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2a0:	69da      	ldr	r2, [r3, #28]
 800f2a2:	187b      	adds	r3, r7, r1
 800f2a4:	881b      	ldrh	r3, [r3, #0]
 800f2a6:	18d2      	adds	r2, r2, r3
 800f2a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2aa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f2b2:	0011      	movs	r1, r2
 800f2b4:	0018      	movs	r0, r3
 800f2b6:	f004 fdcb 	bl	8013e50 <USB_EPStartXfer>
 800f2ba:	e007      	b.n	800f2cc <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800f2bc:	234a      	movs	r3, #74	@ 0x4a
 800f2be:	18fb      	adds	r3, r7, r3
 800f2c0:	881a      	ldrh	r2, [r3, #0]
 800f2c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	0018      	movs	r0, r3
 800f2c8:	f000 f930 	bl	800f52c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2244      	movs	r2, #68	@ 0x44
 800f2d2:	5a9b      	ldrh	r3, [r3, r2]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	b21b      	sxth	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	da01      	bge.n	800f2e0 <PCD_EP_ISR_Handler+0x7f8>
 800f2dc:	f7ff fc0a 	bl	800eaf4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800f2e0:	2300      	movs	r3, #0
}
 800f2e2:	0018      	movs	r0, r3
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	b016      	add	sp, #88	@ 0x58
 800f2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800f2ea:	46c0      	nop			@ (mov r8, r8)
 800f2ec:	00000406 	.word	0x00000406
 800f2f0:	00000402 	.word	0x00000402

0800f2f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f2f4:	b590      	push	{r4, r7, lr}
 800f2f6:	b089      	sub	sp, #36	@ 0x24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60f8      	str	r0, [r7, #12]
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	1dbb      	adds	r3, r7, #6
 800f300:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f302:	1dbb      	adds	r3, r7, #6
 800f304:	881a      	ldrh	r2, [r3, #0]
 800f306:	2380      	movs	r3, #128	@ 0x80
 800f308:	01db      	lsls	r3, r3, #7
 800f30a:	4013      	ands	r3, r2
 800f30c:	d100      	bne.n	800f310 <HAL_PCD_EP_DB_Receive+0x1c>
 800f30e:	e07d      	b.n	800f40c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2250      	movs	r2, #80	@ 0x50
 800f316:	5a9b      	ldrh	r3, [r3, r2]
 800f318:	b29b      	uxth	r3, r3
 800f31a:	001a      	movs	r2, r3
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	00db      	lsls	r3, r3, #3
 800f322:	18d2      	adds	r2, r2, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	18d3      	adds	r3, r2, r3
 800f32a:	4a7a      	ldr	r2, [pc, #488]	@ (800f514 <HAL_PCD_EP_DB_Receive+0x220>)
 800f32c:	4694      	mov	ip, r2
 800f32e:	4463      	add	r3, ip
 800f330:	881a      	ldrh	r2, [r3, #0]
 800f332:	211a      	movs	r1, #26
 800f334:	187b      	adds	r3, r7, r1
 800f336:	0592      	lsls	r2, r2, #22
 800f338:	0d92      	lsrs	r2, r2, #22
 800f33a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	699a      	ldr	r2, [r3, #24]
 800f340:	187b      	adds	r3, r7, r1
 800f342:	881b      	ldrh	r3, [r3, #0]
 800f344:	429a      	cmp	r2, r3
 800f346:	d307      	bcc.n	800f358 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	699a      	ldr	r2, [r3, #24]
 800f34c:	187b      	adds	r3, r7, r1
 800f34e:	881b      	ldrh	r3, [r3, #0]
 800f350:	1ad2      	subs	r2, r2, r3
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	619a      	str	r2, [r3, #24]
 800f356:	e002      	b.n	800f35e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	2200      	movs	r2, #0
 800f35c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	699b      	ldr	r3, [r3, #24]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d121      	bne.n	800f3aa <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	001a      	movs	r2, r3
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	18d3      	adds	r3, r2, r3
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	b29a      	uxth	r2, r3
 800f378:	2018      	movs	r0, #24
 800f37a:	183b      	adds	r3, r7, r0
 800f37c:	4966      	ldr	r1, [pc, #408]	@ (800f518 <HAL_PCD_EP_DB_Receive+0x224>)
 800f37e:	400a      	ands	r2, r1
 800f380:	801a      	strh	r2, [r3, #0]
 800f382:	183b      	adds	r3, r7, r0
 800f384:	183a      	adds	r2, r7, r0
 800f386:	8812      	ldrh	r2, [r2, #0]
 800f388:	2180      	movs	r1, #128	@ 0x80
 800f38a:	0189      	lsls	r1, r1, #6
 800f38c:	404a      	eors	r2, r1
 800f38e:	801a      	strh	r2, [r3, #0]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	001a      	movs	r2, r3
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	18d3      	adds	r3, r2, r3
 800f39e:	183a      	adds	r2, r7, r0
 800f3a0:	8812      	ldrh	r2, [r2, #0]
 800f3a2:	495e      	ldr	r1, [pc, #376]	@ (800f51c <HAL_PCD_EP_DB_Receive+0x228>)
 800f3a4:	430a      	orrs	r2, r1
 800f3a6:	b292      	uxth	r2, r2
 800f3a8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f3aa:	1dbb      	adds	r3, r7, #6
 800f3ac:	881b      	ldrh	r3, [r3, #0]
 800f3ae:	2240      	movs	r2, #64	@ 0x40
 800f3b0:	4013      	ands	r3, r2
 800f3b2:	d01a      	beq.n	800f3ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	001a      	movs	r2, r3
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	18d3      	adds	r3, r2, r3
 800f3c2:	881b      	ldrh	r3, [r3, #0]
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	2016      	movs	r0, #22
 800f3c8:	183b      	adds	r3, r7, r0
 800f3ca:	4955      	ldr	r1, [pc, #340]	@ (800f520 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f3cc:	400a      	ands	r2, r1
 800f3ce:	801a      	strh	r2, [r3, #0]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	001a      	movs	r2, r3
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	18d3      	adds	r3, r2, r3
 800f3de:	183a      	adds	r2, r7, r0
 800f3e0:	8812      	ldrh	r2, [r2, #0]
 800f3e2:	4950      	ldr	r1, [pc, #320]	@ (800f524 <HAL_PCD_EP_DB_Receive+0x230>)
 800f3e4:	430a      	orrs	r2, r1
 800f3e6:	b292      	uxth	r2, r2
 800f3e8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f3ea:	241a      	movs	r4, #26
 800f3ec:	193b      	adds	r3, r7, r4
 800f3ee:	881b      	ldrh	r3, [r3, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d100      	bne.n	800f3f6 <HAL_PCD_EP_DB_Receive+0x102>
 800f3f4:	e086      	b.n	800f504 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6818      	ldr	r0, [r3, #0]
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	6959      	ldr	r1, [r3, #20]
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	891a      	ldrh	r2, [r3, #8]
 800f402:	193b      	adds	r3, r7, r4
 800f404:	881b      	ldrh	r3, [r3, #0]
 800f406:	f005 ffde 	bl	80153c6 <USB_ReadPMA>
 800f40a:	e07b      	b.n	800f504 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2250      	movs	r2, #80	@ 0x50
 800f412:	5a9b      	ldrh	r3, [r3, r2]
 800f414:	b29b      	uxth	r3, r3
 800f416:	001a      	movs	r2, r3
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	18d2      	adds	r2, r2, r3
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	18d3      	adds	r3, r2, r3
 800f426:	4a40      	ldr	r2, [pc, #256]	@ (800f528 <HAL_PCD_EP_DB_Receive+0x234>)
 800f428:	4694      	mov	ip, r2
 800f42a:	4463      	add	r3, ip
 800f42c:	881a      	ldrh	r2, [r3, #0]
 800f42e:	211a      	movs	r1, #26
 800f430:	187b      	adds	r3, r7, r1
 800f432:	0592      	lsls	r2, r2, #22
 800f434:	0d92      	lsrs	r2, r2, #22
 800f436:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	699a      	ldr	r2, [r3, #24]
 800f43c:	187b      	adds	r3, r7, r1
 800f43e:	881b      	ldrh	r3, [r3, #0]
 800f440:	429a      	cmp	r2, r3
 800f442:	d307      	bcc.n	800f454 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	699a      	ldr	r2, [r3, #24]
 800f448:	187b      	adds	r3, r7, r1
 800f44a:	881b      	ldrh	r3, [r3, #0]
 800f44c:	1ad2      	subs	r2, r2, r3
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	619a      	str	r2, [r3, #24]
 800f452:	e002      	b.n	800f45a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	2200      	movs	r2, #0
 800f458:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d121      	bne.n	800f4a6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	001a      	movs	r2, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	18d3      	adds	r3, r2, r3
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	b29a      	uxth	r2, r3
 800f474:	201e      	movs	r0, #30
 800f476:	183b      	adds	r3, r7, r0
 800f478:	4927      	ldr	r1, [pc, #156]	@ (800f518 <HAL_PCD_EP_DB_Receive+0x224>)
 800f47a:	400a      	ands	r2, r1
 800f47c:	801a      	strh	r2, [r3, #0]
 800f47e:	183b      	adds	r3, r7, r0
 800f480:	183a      	adds	r2, r7, r0
 800f482:	8812      	ldrh	r2, [r2, #0]
 800f484:	2180      	movs	r1, #128	@ 0x80
 800f486:	0189      	lsls	r1, r1, #6
 800f488:	404a      	eors	r2, r1
 800f48a:	801a      	strh	r2, [r3, #0]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	001a      	movs	r2, r3
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	18d3      	adds	r3, r2, r3
 800f49a:	183a      	adds	r2, r7, r0
 800f49c:	8812      	ldrh	r2, [r2, #0]
 800f49e:	491f      	ldr	r1, [pc, #124]	@ (800f51c <HAL_PCD_EP_DB_Receive+0x228>)
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	b292      	uxth	r2, r2
 800f4a4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f4a6:	1dbb      	adds	r3, r7, #6
 800f4a8:	881b      	ldrh	r3, [r3, #0]
 800f4aa:	2240      	movs	r2, #64	@ 0x40
 800f4ac:	4013      	ands	r3, r2
 800f4ae:	d11a      	bne.n	800f4e6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	001a      	movs	r2, r3
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	18d3      	adds	r3, r2, r3
 800f4be:	881b      	ldrh	r3, [r3, #0]
 800f4c0:	b29a      	uxth	r2, r3
 800f4c2:	201c      	movs	r0, #28
 800f4c4:	183b      	adds	r3, r7, r0
 800f4c6:	4916      	ldr	r1, [pc, #88]	@ (800f520 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f4c8:	400a      	ands	r2, r1
 800f4ca:	801a      	strh	r2, [r3, #0]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	001a      	movs	r2, r3
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	18d3      	adds	r3, r2, r3
 800f4da:	183a      	adds	r2, r7, r0
 800f4dc:	8812      	ldrh	r2, [r2, #0]
 800f4de:	4911      	ldr	r1, [pc, #68]	@ (800f524 <HAL_PCD_EP_DB_Receive+0x230>)
 800f4e0:	430a      	orrs	r2, r1
 800f4e2:	b292      	uxth	r2, r2
 800f4e4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f4e6:	241a      	movs	r4, #26
 800f4e8:	193b      	adds	r3, r7, r4
 800f4ea:	881b      	ldrh	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d009      	beq.n	800f504 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6818      	ldr	r0, [r3, #0]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	6959      	ldr	r1, [r3, #20]
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	895a      	ldrh	r2, [r3, #10]
 800f4fc:	193b      	adds	r3, r7, r4
 800f4fe:	881b      	ldrh	r3, [r3, #0]
 800f500:	f005 ff61 	bl	80153c6 <USB_ReadPMA>
    }
  }

  return count;
 800f504:	231a      	movs	r3, #26
 800f506:	18fb      	adds	r3, r7, r3
 800f508:	881b      	ldrh	r3, [r3, #0]
}
 800f50a:	0018      	movs	r0, r3
 800f50c:	46bd      	mov	sp, r7
 800f50e:	b009      	add	sp, #36	@ 0x24
 800f510:	bd90      	pop	{r4, r7, pc}
 800f512:	46c0      	nop			@ (mov r8, r8)
 800f514:	00000402 	.word	0x00000402
 800f518:	ffffbf8f 	.word	0xffffbf8f
 800f51c:	ffff8080 	.word	0xffff8080
 800f520:	ffff8f8f 	.word	0xffff8f8f
 800f524:	ffff80c0 	.word	0xffff80c0
 800f528:	00000406 	.word	0x00000406

0800f52c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b0a4      	sub	sp, #144	@ 0x90
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	1dbb      	adds	r3, r7, #6
 800f538:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f53a:	1dbb      	adds	r3, r7, #6
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	2240      	movs	r2, #64	@ 0x40
 800f540:	4013      	ands	r3, r2
 800f542:	d100      	bne.n	800f546 <HAL_PCD_EP_DB_Transmit+0x1a>
 800f544:	e1e4      	b.n	800f910 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2250      	movs	r2, #80	@ 0x50
 800f54c:	5a9b      	ldrh	r3, [r3, r2]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	001a      	movs	r2, r3
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	18d2      	adds	r2, r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	18d3      	adds	r3, r2, r3
 800f560:	4ad0      	ldr	r2, [pc, #832]	@ (800f8a4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f562:	4694      	mov	ip, r2
 800f564:	4463      	add	r3, ip
 800f566:	881a      	ldrh	r2, [r3, #0]
 800f568:	2186      	movs	r1, #134	@ 0x86
 800f56a:	187b      	adds	r3, r7, r1
 800f56c:	0592      	lsls	r2, r2, #22
 800f56e:	0d92      	lsrs	r2, r2, #22
 800f570:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	699a      	ldr	r2, [r3, #24]
 800f576:	187b      	adds	r3, r7, r1
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d907      	bls.n	800f58e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	699a      	ldr	r2, [r3, #24]
 800f582:	187b      	adds	r3, r7, r1
 800f584:	881b      	ldrh	r3, [r3, #0]
 800f586:	1ad2      	subs	r2, r2, r3
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	619a      	str	r2, [r3, #24]
 800f58c:	e002      	b.n	800f594 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	2200      	movs	r2, #0
 800f592:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d000      	beq.n	800f59e <HAL_PCD_EP_DB_Transmit+0x72>
 800f59c:	e0b5      	b.n	800f70a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	785b      	ldrb	r3, [r3, #1]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d125      	bne.n	800f5f2 <HAL_PCD_EP_DB_Transmit+0xc6>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2250      	movs	r2, #80	@ 0x50
 800f5b2:	5a9b      	ldrh	r3, [r3, r2]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	001a      	movs	r2, r3
 800f5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ba:	189b      	adds	r3, r3, r2
 800f5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	00da      	lsls	r2, r3, #3
 800f5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c6:	18d3      	adds	r3, r2, r3
 800f5c8:	4ab6      	ldr	r2, [pc, #728]	@ (800f8a4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f5ca:	4694      	mov	ip, r2
 800f5cc:	4463      	add	r3, ip
 800f5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d2:	881b      	ldrh	r3, [r3, #0]
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	059b      	lsls	r3, r3, #22
 800f5d8:	0d9b      	lsrs	r3, r3, #22
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5de:	801a      	strh	r2, [r3, #0]
 800f5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	4ab0      	ldr	r2, [pc, #704]	@ (800f8a8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ee:	801a      	strh	r2, [r3, #0]
 800f5f0:	e01b      	b.n	800f62a <HAL_PCD_EP_DB_Transmit+0xfe>
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	785b      	ldrb	r3, [r3, #1]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d117      	bne.n	800f62a <HAL_PCD_EP_DB_Transmit+0xfe>
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2250      	movs	r2, #80	@ 0x50
 800f606:	5a9b      	ldrh	r3, [r3, r2]
 800f608:	b29b      	uxth	r3, r3
 800f60a:	001a      	movs	r2, r3
 800f60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f60e:	189b      	adds	r3, r3, r2
 800f610:	637b      	str	r3, [r7, #52]	@ 0x34
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	00da      	lsls	r2, r3, #3
 800f618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f61a:	18d3      	adds	r3, r2, r3
 800f61c:	4aa1      	ldr	r2, [pc, #644]	@ (800f8a4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f61e:	4694      	mov	ip, r2
 800f620:	4463      	add	r3, ip
 800f622:	633b      	str	r3, [r7, #48]	@ 0x30
 800f624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f626:	2200      	movs	r2, #0
 800f628:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	785b      	ldrb	r3, [r3, #1]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d125      	bne.n	800f684 <HAL_PCD_EP_DB_Transmit+0x158>
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	61fb      	str	r3, [r7, #28]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2250      	movs	r2, #80	@ 0x50
 800f644:	5a9b      	ldrh	r3, [r3, r2]
 800f646:	b29b      	uxth	r3, r3
 800f648:	001a      	movs	r2, r3
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	189b      	adds	r3, r3, r2
 800f64e:	61fb      	str	r3, [r7, #28]
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	00da      	lsls	r2, r3, #3
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	18d3      	adds	r3, r2, r3
 800f65a:	4a94      	ldr	r2, [pc, #592]	@ (800f8ac <HAL_PCD_EP_DB_Transmit+0x380>)
 800f65c:	4694      	mov	ip, r2
 800f65e:	4463      	add	r3, ip
 800f660:	61bb      	str	r3, [r7, #24]
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	b29b      	uxth	r3, r3
 800f668:	059b      	lsls	r3, r3, #22
 800f66a:	0d9b      	lsrs	r3, r3, #22
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	801a      	strh	r2, [r3, #0]
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	b29b      	uxth	r3, r3
 800f678:	4a8b      	ldr	r2, [pc, #556]	@ (800f8a8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f67a:	4313      	orrs	r3, r2
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	801a      	strh	r2, [r3, #0]
 800f682:	e018      	b.n	800f6b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	785b      	ldrb	r3, [r3, #1]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d114      	bne.n	800f6b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2250      	movs	r2, #80	@ 0x50
 800f692:	5a9b      	ldrh	r3, [r3, r2]
 800f694:	b29b      	uxth	r3, r3
 800f696:	001a      	movs	r2, r3
 800f698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69a:	189b      	adds	r3, r3, r2
 800f69c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	00da      	lsls	r2, r3, #3
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a6:	18d3      	adds	r3, r2, r3
 800f6a8:	4a80      	ldr	r2, [pc, #512]	@ (800f8ac <HAL_PCD_EP_DB_Transmit+0x380>)
 800f6aa:	4694      	mov	ip, r2
 800f6ac:	4463      	add	r3, ip
 800f6ae:	623b      	str	r3, [r7, #32]
 800f6b0:	6a3b      	ldr	r3, [r7, #32]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	781a      	ldrb	r2, [r3, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	0011      	movs	r1, r2
 800f6be:	0018      	movs	r0, r3
 800f6c0:	f007 febc 	bl	801743c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f6c4:	1dbb      	adds	r3, r7, #6
 800f6c6:	881a      	ldrh	r2, [r3, #0]
 800f6c8:	2380      	movs	r3, #128	@ 0x80
 800f6ca:	01db      	lsls	r3, r3, #7
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	d100      	bne.n	800f6d2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f6d0:	e309      	b.n	800fce6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	001a      	movs	r2, r3
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	18d3      	adds	r3, r2, r3
 800f6e0:	881b      	ldrh	r3, [r3, #0]
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	2016      	movs	r0, #22
 800f6e6:	183b      	adds	r3, r7, r0
 800f6e8:	4971      	ldr	r1, [pc, #452]	@ (800f8b0 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f6ea:	400a      	ands	r2, r1
 800f6ec:	801a      	strh	r2, [r3, #0]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	001a      	movs	r2, r3
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	18d3      	adds	r3, r2, r3
 800f6fc:	183a      	adds	r2, r7, r0
 800f6fe:	8812      	ldrh	r2, [r2, #0]
 800f700:	496c      	ldr	r1, [pc, #432]	@ (800f8b4 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f702:	430a      	orrs	r2, r1
 800f704:	b292      	uxth	r2, r2
 800f706:	801a      	strh	r2, [r3, #0]
 800f708:	e2ed      	b.n	800fce6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f70a:	1dbb      	adds	r3, r7, #6
 800f70c:	881a      	ldrh	r2, [r3, #0]
 800f70e:	2380      	movs	r3, #128	@ 0x80
 800f710:	01db      	lsls	r3, r3, #7
 800f712:	4013      	ands	r3, r2
 800f714:	d01a      	beq.n	800f74c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	001a      	movs	r2, r3
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	18d3      	adds	r3, r2, r3
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	b29a      	uxth	r2, r3
 800f728:	208a      	movs	r0, #138	@ 0x8a
 800f72a:	183b      	adds	r3, r7, r0
 800f72c:	4960      	ldr	r1, [pc, #384]	@ (800f8b0 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f72e:	400a      	ands	r2, r1
 800f730:	801a      	strh	r2, [r3, #0]
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	001a      	movs	r2, r3
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	18d3      	adds	r3, r2, r3
 800f740:	183a      	adds	r2, r7, r0
 800f742:	8812      	ldrh	r2, [r2, #0]
 800f744:	495b      	ldr	r1, [pc, #364]	@ (800f8b4 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f746:	430a      	orrs	r2, r1
 800f748:	b292      	uxth	r2, r2
 800f74a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2224      	movs	r2, #36	@ 0x24
 800f750:	5c9b      	ldrb	r3, [r3, r2]
 800f752:	2b01      	cmp	r3, #1
 800f754:	d000      	beq.n	800f758 <HAL_PCD_EP_DB_Transmit+0x22c>
 800f756:	e2c6      	b.n	800fce6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	695a      	ldr	r2, [r3, #20]
 800f75c:	2186      	movs	r1, #134	@ 0x86
 800f75e:	187b      	adds	r3, r7, r1
 800f760:	881b      	ldrh	r3, [r3, #0]
 800f762:	18d2      	adds	r2, r2, r3
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	69da      	ldr	r2, [r3, #28]
 800f76c:	187b      	adds	r3, r7, r1
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	18d2      	adds	r2, r2, r3
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	6a1a      	ldr	r2, [r3, #32]
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	691b      	ldr	r3, [r3, #16]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d30c      	bcc.n	800f79c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	691b      	ldr	r3, [r3, #16]
 800f786:	218c      	movs	r1, #140	@ 0x8c
 800f788:	187a      	adds	r2, r7, r1
 800f78a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	6a1a      	ldr	r2, [r3, #32]
 800f790:	187b      	adds	r3, r7, r1
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	1ad2      	subs	r2, r2, r3
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	621a      	str	r2, [r3, #32]
 800f79a:	e01a      	b.n	800f7d2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	6a1b      	ldr	r3, [r3, #32]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10a      	bne.n	800f7ba <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f7a4:	2386      	movs	r3, #134	@ 0x86
 800f7a6:	18fb      	adds	r3, r7, r3
 800f7a8:	881b      	ldrh	r3, [r3, #0]
 800f7aa:	228c      	movs	r2, #140	@ 0x8c
 800f7ac:	18ba      	adds	r2, r7, r2
 800f7ae:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	2224      	movs	r2, #36	@ 0x24
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	5499      	strb	r1, [r3, r2]
 800f7b8:	e00b      	b.n	800f7d2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2224      	movs	r2, #36	@ 0x24
 800f7be:	2100      	movs	r1, #0
 800f7c0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	6a1b      	ldr	r3, [r3, #32]
 800f7c6:	228c      	movs	r2, #140	@ 0x8c
 800f7c8:	18ba      	adds	r2, r7, r2
 800f7ca:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	785b      	ldrb	r3, [r3, #1]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d000      	beq.n	800f7dc <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f7da:	e06d      	b.n	800f8b8 <HAL_PCD_EP_DB_Transmit+0x38c>
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2250      	movs	r2, #80	@ 0x50
 800f7e8:	5a9b      	ldrh	r3, [r3, r2]
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	001a      	movs	r2, r3
 800f7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7f0:	189b      	adds	r3, r3, r2
 800f7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	00da      	lsls	r2, r3, #3
 800f7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7fc:	18d3      	adds	r3, r2, r3
 800f7fe:	4a29      	ldr	r2, [pc, #164]	@ (800f8a4 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f800:	4694      	mov	ip, r2
 800f802:	4463      	add	r3, ip
 800f804:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	059b      	lsls	r3, r3, #22
 800f80e:	0d9b      	lsrs	r3, r3, #22
 800f810:	b29a      	uxth	r2, r3
 800f812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f814:	801a      	strh	r2, [r3, #0]
 800f816:	228c      	movs	r2, #140	@ 0x8c
 800f818:	18bb      	adds	r3, r7, r2
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b3e      	cmp	r3, #62	@ 0x3e
 800f81e:	d91a      	bls.n	800f856 <HAL_PCD_EP_DB_Transmit+0x32a>
 800f820:	18bb      	adds	r3, r7, r2
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	095b      	lsrs	r3, r3, #5
 800f826:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f828:	18bb      	adds	r3, r7, r2
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	221f      	movs	r2, #31
 800f82e:	4013      	ands	r3, r2
 800f830:	d102      	bne.n	800f838 <HAL_PCD_EP_DB_Transmit+0x30c>
 800f832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f834:	3b01      	subs	r3, #1
 800f836:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83a:	881b      	ldrh	r3, [r3, #0]
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f840:	b29b      	uxth	r3, r3
 800f842:	029b      	lsls	r3, r3, #10
 800f844:	b29b      	uxth	r3, r3
 800f846:	4313      	orrs	r3, r2
 800f848:	b29b      	uxth	r3, r3
 800f84a:	4a17      	ldr	r2, [pc, #92]	@ (800f8a8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f84c:	4313      	orrs	r3, r2
 800f84e:	b29a      	uxth	r2, r3
 800f850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f852:	801a      	strh	r2, [r3, #0]
 800f854:	e04f      	b.n	800f8f6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f856:	238c      	movs	r3, #140	@ 0x8c
 800f858:	18fb      	adds	r3, r7, r3
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d108      	bne.n	800f872 <HAL_PCD_EP_DB_Transmit+0x346>
 800f860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	b29b      	uxth	r3, r3
 800f866:	4a10      	ldr	r2, [pc, #64]	@ (800f8a8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f868:	4313      	orrs	r3, r2
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86e:	801a      	strh	r2, [r3, #0]
 800f870:	e041      	b.n	800f8f6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f872:	228c      	movs	r2, #140	@ 0x8c
 800f874:	18bb      	adds	r3, r7, r2
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	085b      	lsrs	r3, r3, #1
 800f87a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f87c:	18bb      	adds	r3, r7, r2
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2201      	movs	r2, #1
 800f882:	4013      	ands	r3, r2
 800f884:	d002      	beq.n	800f88c <HAL_PCD_EP_DB_Transmit+0x360>
 800f886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f888:	3301      	adds	r3, #1
 800f88a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f88e:	881b      	ldrh	r3, [r3, #0]
 800f890:	b29a      	uxth	r2, r3
 800f892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f894:	b29b      	uxth	r3, r3
 800f896:	029b      	lsls	r3, r3, #10
 800f898:	b29b      	uxth	r3, r3
 800f89a:	4313      	orrs	r3, r2
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a0:	801a      	strh	r2, [r3, #0]
 800f8a2:	e028      	b.n	800f8f6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f8a4:	00000402 	.word	0x00000402
 800f8a8:	ffff8000 	.word	0xffff8000
 800f8ac:	00000406 	.word	0x00000406
 800f8b0:	ffff8f8f 	.word	0xffff8f8f
 800f8b4:	ffffc080 	.word	0xffffc080
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	785b      	ldrb	r3, [r3, #1]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d11a      	bne.n	800f8f6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2250      	movs	r2, #80	@ 0x50
 800f8cc:	5a9b      	ldrh	r3, [r3, r2]
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	001a      	movs	r2, r3
 800f8d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8d4:	189b      	adds	r3, r3, r2
 800f8d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	00da      	lsls	r2, r3, #3
 800f8de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8e0:	18d3      	adds	r3, r2, r3
 800f8e2:	4adb      	ldr	r2, [pc, #876]	@ (800fc50 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f8e4:	4694      	mov	ip, r2
 800f8e6:	4463      	add	r3, ip
 800f8e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8ea:	238c      	movs	r3, #140	@ 0x8c
 800f8ec:	18fb      	adds	r3, r7, r3
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6818      	ldr	r0, [r3, #0]
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	6959      	ldr	r1, [r3, #20]
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	891a      	ldrh	r2, [r3, #8]
 800f902:	238c      	movs	r3, #140	@ 0x8c
 800f904:	18fb      	adds	r3, r7, r3
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	b29b      	uxth	r3, r3
 800f90a:	f005 fd13 	bl	8015334 <USB_WritePMA>
 800f90e:	e1ea      	b.n	800fce6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2250      	movs	r2, #80	@ 0x50
 800f916:	5a9b      	ldrh	r3, [r3, r2]
 800f918:	b29b      	uxth	r3, r3
 800f91a:	001a      	movs	r2, r3
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	18d2      	adds	r2, r2, r3
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	18d3      	adds	r3, r2, r3
 800f92a:	4aca      	ldr	r2, [pc, #808]	@ (800fc54 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f92c:	4694      	mov	ip, r2
 800f92e:	4463      	add	r3, ip
 800f930:	881a      	ldrh	r2, [r3, #0]
 800f932:	2186      	movs	r1, #134	@ 0x86
 800f934:	187b      	adds	r3, r7, r1
 800f936:	0592      	lsls	r2, r2, #22
 800f938:	0d92      	lsrs	r2, r2, #22
 800f93a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	699a      	ldr	r2, [r3, #24]
 800f940:	187b      	adds	r3, r7, r1
 800f942:	881b      	ldrh	r3, [r3, #0]
 800f944:	429a      	cmp	r2, r3
 800f946:	d307      	bcc.n	800f958 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	699a      	ldr	r2, [r3, #24]
 800f94c:	187b      	adds	r3, r7, r1
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	1ad2      	subs	r2, r2, r3
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	619a      	str	r2, [r3, #24]
 800f956:	e002      	b.n	800f95e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	2200      	movs	r2, #0
 800f95c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	699b      	ldr	r3, [r3, #24]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d000      	beq.n	800f968 <HAL_PCD_EP_DB_Transmit+0x43c>
 800f966:	e0bb      	b.n	800fae0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	785b      	ldrb	r3, [r3, #1]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d125      	bne.n	800f9bc <HAL_PCD_EP_DB_Transmit+0x490>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2250      	movs	r2, #80	@ 0x50
 800f97c:	5a9b      	ldrh	r3, [r3, r2]
 800f97e:	b29b      	uxth	r3, r3
 800f980:	001a      	movs	r2, r3
 800f982:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f984:	189b      	adds	r3, r3, r2
 800f986:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	00da      	lsls	r2, r3, #3
 800f98e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f990:	18d3      	adds	r3, r2, r3
 800f992:	4aaf      	ldr	r2, [pc, #700]	@ (800fc50 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f994:	4694      	mov	ip, r2
 800f996:	4463      	add	r3, ip
 800f998:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f99a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	059b      	lsls	r3, r3, #22
 800f9a2:	0d9b      	lsrs	r3, r3, #22
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9a8:	801a      	strh	r2, [r3, #0]
 800f9aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	4aa9      	ldr	r2, [pc, #676]	@ (800fc58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9b8:	801a      	strh	r2, [r3, #0]
 800f9ba:	e01b      	b.n	800f9f4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	785b      	ldrb	r3, [r3, #1]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d117      	bne.n	800f9f4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2250      	movs	r2, #80	@ 0x50
 800f9d0:	5a9b      	ldrh	r3, [r3, r2]
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	001a      	movs	r2, r3
 800f9d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9d8:	189b      	adds	r3, r3, r2
 800f9da:	667b      	str	r3, [r7, #100]	@ 0x64
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	00da      	lsls	r2, r3, #3
 800f9e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9e4:	18d3      	adds	r3, r2, r3
 800f9e6:	4a9a      	ldr	r2, [pc, #616]	@ (800fc50 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f9e8:	4694      	mov	ip, r2
 800f9ea:	4463      	add	r3, ip
 800f9ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800f9ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	677b      	str	r3, [r7, #116]	@ 0x74
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d12b      	bne.n	800fa5a <HAL_PCD_EP_DB_Transmit+0x52e>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2250      	movs	r2, #80	@ 0x50
 800fa0e:	5a9b      	ldrh	r3, [r3, r2]
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	001a      	movs	r2, r3
 800fa14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa16:	189b      	adds	r3, r3, r2
 800fa18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	00da      	lsls	r2, r3, #3
 800fa20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fa22:	18d3      	adds	r3, r2, r3
 800fa24:	4a8b      	ldr	r2, [pc, #556]	@ (800fc54 <HAL_PCD_EP_DB_Transmit+0x728>)
 800fa26:	4694      	mov	ip, r2
 800fa28:	4463      	add	r3, ip
 800fa2a:	2180      	movs	r1, #128	@ 0x80
 800fa2c:	187a      	adds	r2, r7, r1
 800fa2e:	6013      	str	r3, [r2, #0]
 800fa30:	187b      	adds	r3, r7, r1
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	059b      	lsls	r3, r3, #22
 800fa3a:	0d9b      	lsrs	r3, r3, #22
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	187b      	adds	r3, r7, r1
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	801a      	strh	r2, [r3, #0]
 800fa44:	187b      	adds	r3, r7, r1
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	881b      	ldrh	r3, [r3, #0]
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	4a82      	ldr	r2, [pc, #520]	@ (800fc58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	187b      	adds	r3, r7, r1
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	801a      	strh	r2, [r3, #0]
 800fa58:	e018      	b.n	800fa8c <HAL_PCD_EP_DB_Transmit+0x560>
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	785b      	ldrb	r3, [r3, #1]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d114      	bne.n	800fa8c <HAL_PCD_EP_DB_Transmit+0x560>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2250      	movs	r2, #80	@ 0x50
 800fa68:	5a9b      	ldrh	r3, [r3, r2]
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	001a      	movs	r2, r3
 800fa6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa70:	189b      	adds	r3, r3, r2
 800fa72:	677b      	str	r3, [r7, #116]	@ 0x74
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	00da      	lsls	r2, r3, #3
 800fa7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa7c:	18d3      	adds	r3, r2, r3
 800fa7e:	4a75      	ldr	r2, [pc, #468]	@ (800fc54 <HAL_PCD_EP_DB_Transmit+0x728>)
 800fa80:	4694      	mov	ip, r2
 800fa82:	4463      	add	r3, ip
 800fa84:	673b      	str	r3, [r7, #112]	@ 0x70
 800fa86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa88:	2200      	movs	r2, #0
 800fa8a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	781a      	ldrb	r2, [r3, #0]
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	0011      	movs	r1, r2
 800fa94:	0018      	movs	r0, r3
 800fa96:	f007 fcd1 	bl	801743c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800fa9a:	1dbb      	adds	r3, r7, #6
 800fa9c:	881a      	ldrh	r2, [r3, #0]
 800fa9e:	2380      	movs	r3, #128	@ 0x80
 800faa0:	01db      	lsls	r3, r3, #7
 800faa2:	4013      	ands	r3, r2
 800faa4:	d000      	beq.n	800faa8 <HAL_PCD_EP_DB_Transmit+0x57c>
 800faa6:	e11e      	b.n	800fce6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	001a      	movs	r2, r3
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	18d3      	adds	r3, r2, r3
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	b29a      	uxth	r2, r3
 800faba:	2088      	movs	r0, #136	@ 0x88
 800fabc:	183b      	adds	r3, r7, r0
 800fabe:	4967      	ldr	r1, [pc, #412]	@ (800fc5c <HAL_PCD_EP_DB_Transmit+0x730>)
 800fac0:	400a      	ands	r2, r1
 800fac2:	801a      	strh	r2, [r3, #0]
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	001a      	movs	r2, r3
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	18d3      	adds	r3, r2, r3
 800fad2:	183a      	adds	r2, r7, r0
 800fad4:	8812      	ldrh	r2, [r2, #0]
 800fad6:	4962      	ldr	r1, [pc, #392]	@ (800fc60 <HAL_PCD_EP_DB_Transmit+0x734>)
 800fad8:	430a      	orrs	r2, r1
 800fada:	b292      	uxth	r2, r2
 800fadc:	801a      	strh	r2, [r3, #0]
 800fade:	e102      	b.n	800fce6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800fae0:	1dbb      	adds	r3, r7, #6
 800fae2:	881a      	ldrh	r2, [r3, #0]
 800fae4:	2380      	movs	r3, #128	@ 0x80
 800fae6:	01db      	lsls	r3, r3, #7
 800fae8:	4013      	ands	r3, r2
 800faea:	d11a      	bne.n	800fb22 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	001a      	movs	r2, r3
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	18d3      	adds	r3, r2, r3
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	204e      	movs	r0, #78	@ 0x4e
 800fb00:	183b      	adds	r3, r7, r0
 800fb02:	4956      	ldr	r1, [pc, #344]	@ (800fc5c <HAL_PCD_EP_DB_Transmit+0x730>)
 800fb04:	400a      	ands	r2, r1
 800fb06:	801a      	strh	r2, [r3, #0]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	001a      	movs	r2, r3
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	18d3      	adds	r3, r2, r3
 800fb16:	183a      	adds	r2, r7, r0
 800fb18:	8812      	ldrh	r2, [r2, #0]
 800fb1a:	4951      	ldr	r1, [pc, #324]	@ (800fc60 <HAL_PCD_EP_DB_Transmit+0x734>)
 800fb1c:	430a      	orrs	r2, r1
 800fb1e:	b292      	uxth	r2, r2
 800fb20:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	2224      	movs	r2, #36	@ 0x24
 800fb26:	5c9b      	ldrb	r3, [r3, r2]
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d000      	beq.n	800fb2e <HAL_PCD_EP_DB_Transmit+0x602>
 800fb2c:	e0db      	b.n	800fce6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	695a      	ldr	r2, [r3, #20]
 800fb32:	2186      	movs	r1, #134	@ 0x86
 800fb34:	187b      	adds	r3, r7, r1
 800fb36:	881b      	ldrh	r3, [r3, #0]
 800fb38:	18d2      	adds	r2, r2, r3
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	69da      	ldr	r2, [r3, #28]
 800fb42:	187b      	adds	r3, r7, r1
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	18d2      	adds	r2, r2, r3
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	6a1a      	ldr	r2, [r3, #32]
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d30c      	bcc.n	800fb72 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	691b      	ldr	r3, [r3, #16]
 800fb5c:	218c      	movs	r1, #140	@ 0x8c
 800fb5e:	187a      	adds	r2, r7, r1
 800fb60:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	6a1a      	ldr	r2, [r3, #32]
 800fb66:	187b      	adds	r3, r7, r1
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	1ad2      	subs	r2, r2, r3
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	621a      	str	r2, [r3, #32]
 800fb70:	e01a      	b.n	800fba8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10a      	bne.n	800fb90 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800fb7a:	2386      	movs	r3, #134	@ 0x86
 800fb7c:	18fb      	adds	r3, r7, r3
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	228c      	movs	r2, #140	@ 0x8c
 800fb82:	18ba      	adds	r2, r7, r2
 800fb84:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	2224      	movs	r2, #36	@ 0x24
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	5499      	strb	r1, [r3, r2]
 800fb8e:	e00b      	b.n	800fba8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	6a1b      	ldr	r3, [r3, #32]
 800fb94:	228c      	movs	r2, #140	@ 0x8c
 800fb96:	18ba      	adds	r2, r7, r2
 800fb98:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	2224      	movs	r2, #36	@ 0x24
 800fba4:	2100      	movs	r1, #0
 800fba6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	657b      	str	r3, [r7, #84]	@ 0x54
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	785b      	ldrb	r3, [r3, #1]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d000      	beq.n	800fbb8 <HAL_PCD_EP_DB_Transmit+0x68c>
 800fbb6:	e06e      	b.n	800fc96 <HAL_PCD_EP_DB_Transmit+0x76a>
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2250      	movs	r2, #80	@ 0x50
 800fbc4:	5a9b      	ldrh	r3, [r3, r2]
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	001a      	movs	r2, r3
 800fbca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbcc:	189b      	adds	r3, r3, r2
 800fbce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	00da      	lsls	r2, r3, #3
 800fbd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbd8:	18d3      	adds	r3, r2, r3
 800fbda:	4a1e      	ldr	r2, [pc, #120]	@ (800fc54 <HAL_PCD_EP_DB_Transmit+0x728>)
 800fbdc:	4694      	mov	ip, r2
 800fbde:	4463      	add	r3, ip
 800fbe0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fbe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbe4:	881b      	ldrh	r3, [r3, #0]
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	059b      	lsls	r3, r3, #22
 800fbea:	0d9b      	lsrs	r3, r3, #22
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbf0:	801a      	strh	r2, [r3, #0]
 800fbf2:	228c      	movs	r2, #140	@ 0x8c
 800fbf4:	18bb      	adds	r3, r7, r2
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2b3e      	cmp	r3, #62	@ 0x3e
 800fbfa:	d91a      	bls.n	800fc32 <HAL_PCD_EP_DB_Transmit+0x706>
 800fbfc:	18bb      	adds	r3, r7, r2
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	095b      	lsrs	r3, r3, #5
 800fc02:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc04:	18bb      	adds	r3, r7, r2
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	221f      	movs	r2, #31
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	d102      	bne.n	800fc14 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800fc0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc10:	3b01      	subs	r3, #1
 800fc12:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc16:	881b      	ldrh	r3, [r3, #0]
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	029b      	lsls	r3, r3, #10
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	4313      	orrs	r3, r2
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	4a0c      	ldr	r2, [pc, #48]	@ (800fc58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc2e:	801a      	strh	r2, [r3, #0]
 800fc30:	e04d      	b.n	800fcce <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fc32:	238c      	movs	r3, #140	@ 0x8c
 800fc34:	18fb      	adds	r3, r7, r3
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d113      	bne.n	800fc64 <HAL_PCD_EP_DB_Transmit+0x738>
 800fc3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	4a05      	ldr	r2, [pc, #20]	@ (800fc58 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fc44:	4313      	orrs	r3, r2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc4a:	801a      	strh	r2, [r3, #0]
 800fc4c:	e03f      	b.n	800fcce <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fc4e:	46c0      	nop			@ (mov r8, r8)
 800fc50:	00000402 	.word	0x00000402
 800fc54:	00000406 	.word	0x00000406
 800fc58:	ffff8000 	.word	0xffff8000
 800fc5c:	ffff8f8f 	.word	0xffff8f8f
 800fc60:	ffffc080 	.word	0xffffc080
 800fc64:	228c      	movs	r2, #140	@ 0x8c
 800fc66:	18bb      	adds	r3, r7, r2
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	085b      	lsrs	r3, r3, #1
 800fc6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc6e:	18bb      	adds	r3, r7, r2
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2201      	movs	r2, #1
 800fc74:	4013      	ands	r3, r2
 800fc76:	d002      	beq.n	800fc7e <HAL_PCD_EP_DB_Transmit+0x752>
 800fc78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fc86:	b29b      	uxth	r3, r3
 800fc88:	029b      	lsls	r3, r3, #10
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fc92:	801a      	strh	r2, [r3, #0]
 800fc94:	e01b      	b.n	800fcce <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	785b      	ldrb	r3, [r3, #1]
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d117      	bne.n	800fcce <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2250      	movs	r2, #80	@ 0x50
 800fca4:	5a9b      	ldrh	r3, [r3, r2]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	001a      	movs	r2, r3
 800fcaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcac:	189b      	adds	r3, r3, r2
 800fcae:	657b      	str	r3, [r7, #84]	@ 0x54
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	00da      	lsls	r2, r3, #3
 800fcb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fcb8:	18d3      	adds	r3, r2, r3
 800fcba:	4a21      	ldr	r2, [pc, #132]	@ (800fd40 <HAL_PCD_EP_DB_Transmit+0x814>)
 800fcbc:	4694      	mov	ip, r2
 800fcbe:	4463      	add	r3, ip
 800fcc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800fcc2:	238c      	movs	r3, #140	@ 0x8c
 800fcc4:	18fb      	adds	r3, r7, r3
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fccc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6818      	ldr	r0, [r3, #0]
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	6959      	ldr	r1, [r3, #20]
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	895a      	ldrh	r2, [r3, #10]
 800fcda:	238c      	movs	r3, #140	@ 0x8c
 800fcdc:	18fb      	adds	r3, r7, r3
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	f005 fb27 	bl	8015334 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	001a      	movs	r2, r3
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	18d3      	adds	r3, r2, r3
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	2014      	movs	r0, #20
 800fcfa:	183b      	adds	r3, r7, r0
 800fcfc:	4911      	ldr	r1, [pc, #68]	@ (800fd44 <HAL_PCD_EP_DB_Transmit+0x818>)
 800fcfe:	400a      	ands	r2, r1
 800fd00:	801a      	strh	r2, [r3, #0]
 800fd02:	183b      	adds	r3, r7, r0
 800fd04:	183a      	adds	r2, r7, r0
 800fd06:	8812      	ldrh	r2, [r2, #0]
 800fd08:	2110      	movs	r1, #16
 800fd0a:	404a      	eors	r2, r1
 800fd0c:	801a      	strh	r2, [r3, #0]
 800fd0e:	183b      	adds	r3, r7, r0
 800fd10:	183a      	adds	r2, r7, r0
 800fd12:	8812      	ldrh	r2, [r2, #0]
 800fd14:	2120      	movs	r1, #32
 800fd16:	404a      	eors	r2, r1
 800fd18:	801a      	strh	r2, [r3, #0]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	001a      	movs	r2, r3
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	18d3      	adds	r3, r2, r3
 800fd28:	183a      	adds	r2, r7, r0
 800fd2a:	8812      	ldrh	r2, [r2, #0]
 800fd2c:	4906      	ldr	r1, [pc, #24]	@ (800fd48 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800fd2e:	430a      	orrs	r2, r1
 800fd30:	b292      	uxth	r2, r2
 800fd32:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	0018      	movs	r0, r3
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	b024      	add	sp, #144	@ 0x90
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	46c0      	nop			@ (mov r8, r8)
 800fd40:	00000406 	.word	0x00000406
 800fd44:	ffff8fbf 	.word	0xffff8fbf
 800fd48:	ffff8080 	.word	0xffff8080

0800fd4c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800fd4c:	b590      	push	{r4, r7, lr}
 800fd4e:	b087      	sub	sp, #28
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	0008      	movs	r0, r1
 800fd56:	0011      	movs	r1, r2
 800fd58:	607b      	str	r3, [r7, #4]
 800fd5a:	240a      	movs	r4, #10
 800fd5c:	193b      	adds	r3, r7, r4
 800fd5e:	1c02      	adds	r2, r0, #0
 800fd60:	801a      	strh	r2, [r3, #0]
 800fd62:	2308      	movs	r3, #8
 800fd64:	18fb      	adds	r3, r7, r3
 800fd66:	1c0a      	adds	r2, r1, #0
 800fd68:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800fd6a:	0021      	movs	r1, r4
 800fd6c:	187b      	adds	r3, r7, r1
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	2280      	movs	r2, #128	@ 0x80
 800fd72:	4013      	ands	r3, r2
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00c      	beq.n	800fd94 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd7a:	187b      	adds	r3, r7, r1
 800fd7c:	881b      	ldrh	r3, [r3, #0]
 800fd7e:	2207      	movs	r2, #7
 800fd80:	4013      	ands	r3, r2
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	0013      	movs	r3, r2
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	189b      	adds	r3, r3, r2
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	18d3      	adds	r3, r2, r3
 800fd90:	617b      	str	r3, [r7, #20]
 800fd92:	e00b      	b.n	800fdac <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fd94:	230a      	movs	r3, #10
 800fd96:	18fb      	adds	r3, r7, r3
 800fd98:	881a      	ldrh	r2, [r3, #0]
 800fd9a:	0013      	movs	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	189b      	adds	r3, r3, r2
 800fda0:	00db      	lsls	r3, r3, #3
 800fda2:	3369      	adds	r3, #105	@ 0x69
 800fda4:	33ff      	adds	r3, #255	@ 0xff
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	18d3      	adds	r3, r2, r3
 800fdaa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800fdac:	2308      	movs	r3, #8
 800fdae:	18fb      	adds	r3, r7, r3
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d107      	bne.n	800fdc6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	80da      	strh	r2, [r3, #6]
 800fdc4:	e00b      	b.n	800fdde <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	0c1b      	lsrs	r3, r3, #16
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fdde:	2300      	movs	r3, #0
}
 800fde0:	0018      	movs	r0, r3
 800fde2:	46bd      	mov	sp, r7
 800fde4:	b007      	add	sp, #28
 800fde6:	bd90      	pop	{r4, r7, pc}

0800fde8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	23ba      	movs	r3, #186	@ 0xba
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	2101      	movs	r1, #1
 800fdfe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	23b8      	movs	r3, #184	@ 0xb8
 800fe04:	009b      	lsls	r3, r3, #2
 800fe06:	2100      	movs	r1, #0
 800fe08:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2254      	movs	r2, #84	@ 0x54
 800fe0e:	5a9b      	ldrh	r3, [r3, r2]
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	2201      	movs	r2, #1
 800fe14:	4313      	orrs	r3, r2
 800fe16:	b299      	uxth	r1, r3
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2254      	movs	r2, #84	@ 0x54
 800fe1c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2254      	movs	r2, #84	@ 0x54
 800fe22:	5a9b      	ldrh	r3, [r3, r2]
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	2202      	movs	r2, #2
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	b299      	uxth	r1, r3
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2254      	movs	r2, #84	@ 0x54
 800fe30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800fe32:	2300      	movs	r3, #0
}
 800fe34:	0018      	movs	r0, r3
 800fe36:	46bd      	mov	sp, r7
 800fe38:	b004      	add	sp, #16
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	000a      	movs	r2, r1
 800fe46:	1cfb      	adds	r3, r7, #3
 800fe48:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fe4a:	46c0      	nop			@ (mov r8, r8)
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	b002      	add	sp, #8
 800fe50:	bd80      	pop	{r7, pc}
	...

0800fe54 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe58:	4b04      	ldr	r3, [pc, #16]	@ (800fe6c <HAL_PWR_EnableBkUpAccess+0x18>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	4b03      	ldr	r3, [pc, #12]	@ (800fe6c <HAL_PWR_EnableBkUpAccess+0x18>)
 800fe5e:	2180      	movs	r1, #128	@ 0x80
 800fe60:	0049      	lsls	r1, r1, #1
 800fe62:	430a      	orrs	r2, r1
 800fe64:	601a      	str	r2, [r3, #0]
}
 800fe66:	46c0      	nop			@ (mov r8, r8)
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	40007000 	.word	0x40007000

0800fe70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fe70:	b5b0      	push	{r4, r5, r7, lr}
 800fe72:	b08a      	sub	sp, #40	@ 0x28
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d102      	bne.n	800fe84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	f000 fbbf 	bl	8010602 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fe84:	4bc9      	ldr	r3, [pc, #804]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	220c      	movs	r2, #12
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fe8e:	4bc7      	ldr	r3, [pc, #796]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800fe90:	68da      	ldr	r2, [r3, #12]
 800fe92:	2380      	movs	r3, #128	@ 0x80
 800fe94:	025b      	lsls	r3, r3, #9
 800fe96:	4013      	ands	r3, r2
 800fe98:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	4013      	ands	r3, r2
 800fea2:	d100      	bne.n	800fea6 <HAL_RCC_OscConfig+0x36>
 800fea4:	e07e      	b.n	800ffa4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	2b08      	cmp	r3, #8
 800feaa:	d007      	beq.n	800febc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	2b0c      	cmp	r3, #12
 800feb0:	d112      	bne.n	800fed8 <HAL_RCC_OscConfig+0x68>
 800feb2:	69ba      	ldr	r2, [r7, #24]
 800feb4:	2380      	movs	r3, #128	@ 0x80
 800feb6:	025b      	lsls	r3, r3, #9
 800feb8:	429a      	cmp	r2, r3
 800feba:	d10d      	bne.n	800fed8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800febc:	4bbb      	ldr	r3, [pc, #748]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	2380      	movs	r3, #128	@ 0x80
 800fec2:	029b      	lsls	r3, r3, #10
 800fec4:	4013      	ands	r3, r2
 800fec6:	d100      	bne.n	800feca <HAL_RCC_OscConfig+0x5a>
 800fec8:	e06b      	b.n	800ffa2 <HAL_RCC_OscConfig+0x132>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d167      	bne.n	800ffa2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800fed2:	2301      	movs	r3, #1
 800fed4:	f000 fb95 	bl	8010602 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	685a      	ldr	r2, [r3, #4]
 800fedc:	2380      	movs	r3, #128	@ 0x80
 800fede:	025b      	lsls	r3, r3, #9
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d107      	bne.n	800fef4 <HAL_RCC_OscConfig+0x84>
 800fee4:	4bb1      	ldr	r3, [pc, #708]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	4bb0      	ldr	r3, [pc, #704]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800feea:	2180      	movs	r1, #128	@ 0x80
 800feec:	0249      	lsls	r1, r1, #9
 800feee:	430a      	orrs	r2, r1
 800fef0:	601a      	str	r2, [r3, #0]
 800fef2:	e027      	b.n	800ff44 <HAL_RCC_OscConfig+0xd4>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685a      	ldr	r2, [r3, #4]
 800fef8:	23a0      	movs	r3, #160	@ 0xa0
 800fefa:	02db      	lsls	r3, r3, #11
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d10e      	bne.n	800ff1e <HAL_RCC_OscConfig+0xae>
 800ff00:	4baa      	ldr	r3, [pc, #680]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	4ba9      	ldr	r3, [pc, #676]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff06:	2180      	movs	r1, #128	@ 0x80
 800ff08:	02c9      	lsls	r1, r1, #11
 800ff0a:	430a      	orrs	r2, r1
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	4ba7      	ldr	r3, [pc, #668]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	4ba6      	ldr	r3, [pc, #664]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff14:	2180      	movs	r1, #128	@ 0x80
 800ff16:	0249      	lsls	r1, r1, #9
 800ff18:	430a      	orrs	r2, r1
 800ff1a:	601a      	str	r2, [r3, #0]
 800ff1c:	e012      	b.n	800ff44 <HAL_RCC_OscConfig+0xd4>
 800ff1e:	4ba3      	ldr	r3, [pc, #652]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	4ba2      	ldr	r3, [pc, #648]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff24:	49a2      	ldr	r1, [pc, #648]	@ (80101b0 <HAL_RCC_OscConfig+0x340>)
 800ff26:	400a      	ands	r2, r1
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	4ba0      	ldr	r3, [pc, #640]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	2380      	movs	r3, #128	@ 0x80
 800ff30:	025b      	lsls	r3, r3, #9
 800ff32:	4013      	ands	r3, r2
 800ff34:	60fb      	str	r3, [r7, #12]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	4b9c      	ldr	r3, [pc, #624]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	4b9b      	ldr	r3, [pc, #620]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff3e:	499d      	ldr	r1, [pc, #628]	@ (80101b4 <HAL_RCC_OscConfig+0x344>)
 800ff40:	400a      	ands	r2, r1
 800ff42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d015      	beq.n	800ff78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff4c:	f7fa fa16 	bl	800a37c <HAL_GetTick>
 800ff50:	0003      	movs	r3, r0
 800ff52:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ff54:	e009      	b.n	800ff6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ff56:	f7fa fa11 	bl	800a37c <HAL_GetTick>
 800ff5a:	0002      	movs	r2, r0
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	2b64      	cmp	r3, #100	@ 0x64
 800ff62:	d902      	bls.n	800ff6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ff64:	2303      	movs	r3, #3
 800ff66:	f000 fb4c 	bl	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ff6a:	4b90      	ldr	r3, [pc, #576]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	2380      	movs	r3, #128	@ 0x80
 800ff70:	029b      	lsls	r3, r3, #10
 800ff72:	4013      	ands	r3, r2
 800ff74:	d0ef      	beq.n	800ff56 <HAL_RCC_OscConfig+0xe6>
 800ff76:	e015      	b.n	800ffa4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff78:	f7fa fa00 	bl	800a37c <HAL_GetTick>
 800ff7c:	0003      	movs	r3, r0
 800ff7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ff80:	e008      	b.n	800ff94 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ff82:	f7fa f9fb 	bl	800a37c <HAL_GetTick>
 800ff86:	0002      	movs	r2, r0
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	2b64      	cmp	r3, #100	@ 0x64
 800ff8e:	d901      	bls.n	800ff94 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800ff90:	2303      	movs	r3, #3
 800ff92:	e336      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ff94:	4b85      	ldr	r3, [pc, #532]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	2380      	movs	r3, #128	@ 0x80
 800ff9a:	029b      	lsls	r3, r3, #10
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	d1f0      	bne.n	800ff82 <HAL_RCC_OscConfig+0x112>
 800ffa0:	e000      	b.n	800ffa4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ffa2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2202      	movs	r2, #2
 800ffaa:	4013      	ands	r3, r2
 800ffac:	d100      	bne.n	800ffb0 <HAL_RCC_OscConfig+0x140>
 800ffae:	e099      	b.n	80100e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800ffb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb8:	2220      	movs	r2, #32
 800ffba:	4013      	ands	r3, r2
 800ffbc:	d009      	beq.n	800ffd2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800ffbe:	4b7b      	ldr	r3, [pc, #492]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	4b7a      	ldr	r3, [pc, #488]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ffc4:	2120      	movs	r1, #32
 800ffc6:	430a      	orrs	r2, r1
 800ffc8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800ffca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffcc:	2220      	movs	r2, #32
 800ffce:	4393      	bics	r3, r2
 800ffd0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	2b04      	cmp	r3, #4
 800ffd6:	d005      	beq.n	800ffe4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	2b0c      	cmp	r3, #12
 800ffdc:	d13e      	bne.n	801005c <HAL_RCC_OscConfig+0x1ec>
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d13b      	bne.n	801005c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800ffe4:	4b71      	ldr	r3, [pc, #452]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2204      	movs	r2, #4
 800ffea:	4013      	ands	r3, r2
 800ffec:	d004      	beq.n	800fff8 <HAL_RCC_OscConfig+0x188>
 800ffee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800fff4:	2301      	movs	r3, #1
 800fff6:	e304      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fff8:	4b6c      	ldr	r3, [pc, #432]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	4a6e      	ldr	r2, [pc, #440]	@ (80101b8 <HAL_RCC_OscConfig+0x348>)
 800fffe:	4013      	ands	r3, r2
 8010000:	0019      	movs	r1, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	691b      	ldr	r3, [r3, #16]
 8010006:	021a      	lsls	r2, r3, #8
 8010008:	4b68      	ldr	r3, [pc, #416]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 801000a:	430a      	orrs	r2, r1
 801000c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801000e:	4b67      	ldr	r3, [pc, #412]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2209      	movs	r2, #9
 8010014:	4393      	bics	r3, r2
 8010016:	0019      	movs	r1, r3
 8010018:	4b64      	ldr	r3, [pc, #400]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 801001a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801001c:	430a      	orrs	r2, r1
 801001e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010020:	f000 fc42 	bl	80108a8 <HAL_RCC_GetSysClockFreq>
 8010024:	0001      	movs	r1, r0
 8010026:	4b61      	ldr	r3, [pc, #388]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	091b      	lsrs	r3, r3, #4
 801002c:	220f      	movs	r2, #15
 801002e:	4013      	ands	r3, r2
 8010030:	4a62      	ldr	r2, [pc, #392]	@ (80101bc <HAL_RCC_OscConfig+0x34c>)
 8010032:	5cd3      	ldrb	r3, [r2, r3]
 8010034:	000a      	movs	r2, r1
 8010036:	40da      	lsrs	r2, r3
 8010038:	4b61      	ldr	r3, [pc, #388]	@ (80101c0 <HAL_RCC_OscConfig+0x350>)
 801003a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801003c:	4b61      	ldr	r3, [pc, #388]	@ (80101c4 <HAL_RCC_OscConfig+0x354>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2513      	movs	r5, #19
 8010042:	197c      	adds	r4, r7, r5
 8010044:	0018      	movs	r0, r3
 8010046:	f7fa f953 	bl	800a2f0 <HAL_InitTick>
 801004a:	0003      	movs	r3, r0
 801004c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801004e:	197b      	adds	r3, r7, r5
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d046      	beq.n	80100e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8010056:	197b      	adds	r3, r7, r5
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	e2d2      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801005c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005e:	2b00      	cmp	r3, #0
 8010060:	d027      	beq.n	80100b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8010062:	4b52      	ldr	r3, [pc, #328]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2209      	movs	r2, #9
 8010068:	4393      	bics	r3, r2
 801006a:	0019      	movs	r1, r3
 801006c:	4b4f      	ldr	r3, [pc, #316]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 801006e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010070:	430a      	orrs	r2, r1
 8010072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010074:	f7fa f982 	bl	800a37c <HAL_GetTick>
 8010078:	0003      	movs	r3, r0
 801007a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801007c:	e008      	b.n	8010090 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801007e:	f7fa f97d 	bl	800a37c <HAL_GetTick>
 8010082:	0002      	movs	r2, r0
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	2b02      	cmp	r3, #2
 801008a:	d901      	bls.n	8010090 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801008c:	2303      	movs	r3, #3
 801008e:	e2b8      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010090:	4b46      	ldr	r3, [pc, #280]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2204      	movs	r2, #4
 8010096:	4013      	ands	r3, r2
 8010098:	d0f1      	beq.n	801007e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801009a:	4b44      	ldr	r3, [pc, #272]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	4a46      	ldr	r2, [pc, #280]	@ (80101b8 <HAL_RCC_OscConfig+0x348>)
 80100a0:	4013      	ands	r3, r2
 80100a2:	0019      	movs	r1, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	021a      	lsls	r2, r3, #8
 80100aa:	4b40      	ldr	r3, [pc, #256]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 80100ac:	430a      	orrs	r2, r1
 80100ae:	605a      	str	r2, [r3, #4]
 80100b0:	e018      	b.n	80100e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80100b2:	4b3e      	ldr	r3, [pc, #248]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	4b3d      	ldr	r3, [pc, #244]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 80100b8:	2101      	movs	r1, #1
 80100ba:	438a      	bics	r2, r1
 80100bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100be:	f7fa f95d 	bl	800a37c <HAL_GetTick>
 80100c2:	0003      	movs	r3, r0
 80100c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80100c6:	e008      	b.n	80100da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80100c8:	f7fa f958 	bl	800a37c <HAL_GetTick>
 80100cc:	0002      	movs	r2, r0
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	2b02      	cmp	r3, #2
 80100d4:	d901      	bls.n	80100da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80100d6:	2303      	movs	r3, #3
 80100d8:	e293      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80100da:	4b34      	ldr	r3, [pc, #208]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2204      	movs	r2, #4
 80100e0:	4013      	ands	r3, r2
 80100e2:	d1f1      	bne.n	80100c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2210      	movs	r2, #16
 80100ea:	4013      	ands	r3, r2
 80100ec:	d100      	bne.n	80100f0 <HAL_RCC_OscConfig+0x280>
 80100ee:	e0a2      	b.n	8010236 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d140      	bne.n	8010178 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80100f6:	4b2d      	ldr	r3, [pc, #180]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	2380      	movs	r3, #128	@ 0x80
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	4013      	ands	r3, r2
 8010100:	d005      	beq.n	801010e <HAL_RCC_OscConfig+0x29e>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	69db      	ldr	r3, [r3, #28]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d101      	bne.n	801010e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e279      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801010e:	4b27      	ldr	r3, [pc, #156]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	4a2d      	ldr	r2, [pc, #180]	@ (80101c8 <HAL_RCC_OscConfig+0x358>)
 8010114:	4013      	ands	r3, r2
 8010116:	0019      	movs	r1, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801011c:	4b23      	ldr	r3, [pc, #140]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 801011e:	430a      	orrs	r2, r1
 8010120:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010122:	4b22      	ldr	r3, [pc, #136]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	021b      	lsls	r3, r3, #8
 8010128:	0a19      	lsrs	r1, r3, #8
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a1b      	ldr	r3, [r3, #32]
 801012e:	061a      	lsls	r2, r3, #24
 8010130:	4b1e      	ldr	r3, [pc, #120]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010132:	430a      	orrs	r2, r1
 8010134:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801013a:	0b5b      	lsrs	r3, r3, #13
 801013c:	3301      	adds	r3, #1
 801013e:	2280      	movs	r2, #128	@ 0x80
 8010140:	0212      	lsls	r2, r2, #8
 8010142:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8010144:	4b19      	ldr	r3, [pc, #100]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	091b      	lsrs	r3, r3, #4
 801014a:	210f      	movs	r1, #15
 801014c:	400b      	ands	r3, r1
 801014e:	491b      	ldr	r1, [pc, #108]	@ (80101bc <HAL_RCC_OscConfig+0x34c>)
 8010150:	5ccb      	ldrb	r3, [r1, r3]
 8010152:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010154:	4b1a      	ldr	r3, [pc, #104]	@ (80101c0 <HAL_RCC_OscConfig+0x350>)
 8010156:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8010158:	4b1a      	ldr	r3, [pc, #104]	@ (80101c4 <HAL_RCC_OscConfig+0x354>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2513      	movs	r5, #19
 801015e:	197c      	adds	r4, r7, r5
 8010160:	0018      	movs	r0, r3
 8010162:	f7fa f8c5 	bl	800a2f0 <HAL_InitTick>
 8010166:	0003      	movs	r3, r0
 8010168:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801016a:	197b      	adds	r3, r7, r5
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d061      	beq.n	8010236 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8010172:	197b      	adds	r3, r7, r5
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	e244      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	69db      	ldr	r3, [r3, #28]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d040      	beq.n	8010202 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010180:	4b0a      	ldr	r3, [pc, #40]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	4b09      	ldr	r3, [pc, #36]	@ (80101ac <HAL_RCC_OscConfig+0x33c>)
 8010186:	2180      	movs	r1, #128	@ 0x80
 8010188:	0049      	lsls	r1, r1, #1
 801018a:	430a      	orrs	r2, r1
 801018c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801018e:	f7fa f8f5 	bl	800a37c <HAL_GetTick>
 8010192:	0003      	movs	r3, r0
 8010194:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010196:	e019      	b.n	80101cc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010198:	f7fa f8f0 	bl	800a37c <HAL_GetTick>
 801019c:	0002      	movs	r2, r0
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d912      	bls.n	80101cc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80101a6:	2303      	movs	r3, #3
 80101a8:	e22b      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
 80101aa:	46c0      	nop			@ (mov r8, r8)
 80101ac:	40021000 	.word	0x40021000
 80101b0:	fffeffff 	.word	0xfffeffff
 80101b4:	fffbffff 	.word	0xfffbffff
 80101b8:	ffffe0ff 	.word	0xffffe0ff
 80101bc:	0801c218 	.word	0x0801c218
 80101c0:	2000005c 	.word	0x2000005c
 80101c4:	20000070 	.word	0x20000070
 80101c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80101cc:	4bca      	ldr	r3, [pc, #808]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	2380      	movs	r3, #128	@ 0x80
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	4013      	ands	r3, r2
 80101d6:	d0df      	beq.n	8010198 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80101d8:	4bc7      	ldr	r3, [pc, #796]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	4ac7      	ldr	r2, [pc, #796]	@ (80104fc <HAL_RCC_OscConfig+0x68c>)
 80101de:	4013      	ands	r3, r2
 80101e0:	0019      	movs	r1, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101e6:	4bc4      	ldr	r3, [pc, #784]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80101e8:	430a      	orrs	r2, r1
 80101ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80101ec:	4bc2      	ldr	r3, [pc, #776]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	021b      	lsls	r3, r3, #8
 80101f2:	0a19      	lsrs	r1, r3, #8
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6a1b      	ldr	r3, [r3, #32]
 80101f8:	061a      	lsls	r2, r3, #24
 80101fa:	4bbf      	ldr	r3, [pc, #764]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80101fc:	430a      	orrs	r2, r1
 80101fe:	605a      	str	r2, [r3, #4]
 8010200:	e019      	b.n	8010236 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010202:	4bbd      	ldr	r3, [pc, #756]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	4bbc      	ldr	r3, [pc, #752]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010208:	49bd      	ldr	r1, [pc, #756]	@ (8010500 <HAL_RCC_OscConfig+0x690>)
 801020a:	400a      	ands	r2, r1
 801020c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801020e:	f7fa f8b5 	bl	800a37c <HAL_GetTick>
 8010212:	0003      	movs	r3, r0
 8010214:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8010216:	e008      	b.n	801022a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010218:	f7fa f8b0 	bl	800a37c <HAL_GetTick>
 801021c:	0002      	movs	r2, r0
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	2b02      	cmp	r3, #2
 8010224:	d901      	bls.n	801022a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8010226:	2303      	movs	r3, #3
 8010228:	e1eb      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801022a:	4bb3      	ldr	r3, [pc, #716]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	2380      	movs	r3, #128	@ 0x80
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	4013      	ands	r3, r2
 8010234:	d1f0      	bne.n	8010218 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2208      	movs	r2, #8
 801023c:	4013      	ands	r3, r2
 801023e:	d036      	beq.n	80102ae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d019      	beq.n	801027c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010248:	4bab      	ldr	r3, [pc, #684]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801024a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801024c:	4baa      	ldr	r3, [pc, #680]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801024e:	2101      	movs	r1, #1
 8010250:	430a      	orrs	r2, r1
 8010252:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010254:	f7fa f892 	bl	800a37c <HAL_GetTick>
 8010258:	0003      	movs	r3, r0
 801025a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801025c:	e008      	b.n	8010270 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801025e:	f7fa f88d 	bl	800a37c <HAL_GetTick>
 8010262:	0002      	movs	r2, r0
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	1ad3      	subs	r3, r2, r3
 8010268:	2b02      	cmp	r3, #2
 801026a:	d901      	bls.n	8010270 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801026c:	2303      	movs	r3, #3
 801026e:	e1c8      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010270:	4ba1      	ldr	r3, [pc, #644]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010274:	2202      	movs	r2, #2
 8010276:	4013      	ands	r3, r2
 8010278:	d0f1      	beq.n	801025e <HAL_RCC_OscConfig+0x3ee>
 801027a:	e018      	b.n	80102ae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801027c:	4b9e      	ldr	r3, [pc, #632]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801027e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010280:	4b9d      	ldr	r3, [pc, #628]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010282:	2101      	movs	r1, #1
 8010284:	438a      	bics	r2, r1
 8010286:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010288:	f7fa f878 	bl	800a37c <HAL_GetTick>
 801028c:	0003      	movs	r3, r0
 801028e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010290:	e008      	b.n	80102a4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010292:	f7fa f873 	bl	800a37c <HAL_GetTick>
 8010296:	0002      	movs	r2, r0
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	1ad3      	subs	r3, r2, r3
 801029c:	2b02      	cmp	r3, #2
 801029e:	d901      	bls.n	80102a4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80102a0:	2303      	movs	r3, #3
 80102a2:	e1ae      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80102a4:	4b94      	ldr	r3, [pc, #592]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80102a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102a8:	2202      	movs	r2, #2
 80102aa:	4013      	ands	r3, r2
 80102ac:	d1f1      	bne.n	8010292 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2204      	movs	r2, #4
 80102b4:	4013      	ands	r3, r2
 80102b6:	d100      	bne.n	80102ba <HAL_RCC_OscConfig+0x44a>
 80102b8:	e0ae      	b.n	8010418 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80102ba:	2023      	movs	r0, #35	@ 0x23
 80102bc:	183b      	adds	r3, r7, r0
 80102be:	2200      	movs	r2, #0
 80102c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80102c2:	4b8d      	ldr	r3, [pc, #564]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80102c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102c6:	2380      	movs	r3, #128	@ 0x80
 80102c8:	055b      	lsls	r3, r3, #21
 80102ca:	4013      	ands	r3, r2
 80102cc:	d109      	bne.n	80102e2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80102ce:	4b8a      	ldr	r3, [pc, #552]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80102d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102d2:	4b89      	ldr	r3, [pc, #548]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80102d4:	2180      	movs	r1, #128	@ 0x80
 80102d6:	0549      	lsls	r1, r1, #21
 80102d8:	430a      	orrs	r2, r1
 80102da:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80102dc:	183b      	adds	r3, r7, r0
 80102de:	2201      	movs	r2, #1
 80102e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80102e2:	4b88      	ldr	r3, [pc, #544]	@ (8010504 <HAL_RCC_OscConfig+0x694>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	2380      	movs	r3, #128	@ 0x80
 80102e8:	005b      	lsls	r3, r3, #1
 80102ea:	4013      	ands	r3, r2
 80102ec:	d11a      	bne.n	8010324 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80102ee:	4b85      	ldr	r3, [pc, #532]	@ (8010504 <HAL_RCC_OscConfig+0x694>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	4b84      	ldr	r3, [pc, #528]	@ (8010504 <HAL_RCC_OscConfig+0x694>)
 80102f4:	2180      	movs	r1, #128	@ 0x80
 80102f6:	0049      	lsls	r1, r1, #1
 80102f8:	430a      	orrs	r2, r1
 80102fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80102fc:	f7fa f83e 	bl	800a37c <HAL_GetTick>
 8010300:	0003      	movs	r3, r0
 8010302:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010304:	e008      	b.n	8010318 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010306:	f7fa f839 	bl	800a37c <HAL_GetTick>
 801030a:	0002      	movs	r2, r0
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	1ad3      	subs	r3, r2, r3
 8010310:	2b64      	cmp	r3, #100	@ 0x64
 8010312:	d901      	bls.n	8010318 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8010314:	2303      	movs	r3, #3
 8010316:	e174      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010318:	4b7a      	ldr	r3, [pc, #488]	@ (8010504 <HAL_RCC_OscConfig+0x694>)
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	2380      	movs	r3, #128	@ 0x80
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	4013      	ands	r3, r2
 8010322:	d0f0      	beq.n	8010306 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	689a      	ldr	r2, [r3, #8]
 8010328:	2380      	movs	r3, #128	@ 0x80
 801032a:	005b      	lsls	r3, r3, #1
 801032c:	429a      	cmp	r2, r3
 801032e:	d107      	bne.n	8010340 <HAL_RCC_OscConfig+0x4d0>
 8010330:	4b71      	ldr	r3, [pc, #452]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010334:	4b70      	ldr	r3, [pc, #448]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010336:	2180      	movs	r1, #128	@ 0x80
 8010338:	0049      	lsls	r1, r1, #1
 801033a:	430a      	orrs	r2, r1
 801033c:	651a      	str	r2, [r3, #80]	@ 0x50
 801033e:	e031      	b.n	80103a4 <HAL_RCC_OscConfig+0x534>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d10c      	bne.n	8010362 <HAL_RCC_OscConfig+0x4f2>
 8010348:	4b6b      	ldr	r3, [pc, #428]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801034a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801034c:	4b6a      	ldr	r3, [pc, #424]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801034e:	496c      	ldr	r1, [pc, #432]	@ (8010500 <HAL_RCC_OscConfig+0x690>)
 8010350:	400a      	ands	r2, r1
 8010352:	651a      	str	r2, [r3, #80]	@ 0x50
 8010354:	4b68      	ldr	r3, [pc, #416]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010356:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010358:	4b67      	ldr	r3, [pc, #412]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801035a:	496b      	ldr	r1, [pc, #428]	@ (8010508 <HAL_RCC_OscConfig+0x698>)
 801035c:	400a      	ands	r2, r1
 801035e:	651a      	str	r2, [r3, #80]	@ 0x50
 8010360:	e020      	b.n	80103a4 <HAL_RCC_OscConfig+0x534>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	689a      	ldr	r2, [r3, #8]
 8010366:	23a0      	movs	r3, #160	@ 0xa0
 8010368:	00db      	lsls	r3, r3, #3
 801036a:	429a      	cmp	r2, r3
 801036c:	d10e      	bne.n	801038c <HAL_RCC_OscConfig+0x51c>
 801036e:	4b62      	ldr	r3, [pc, #392]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010370:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010372:	4b61      	ldr	r3, [pc, #388]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010374:	2180      	movs	r1, #128	@ 0x80
 8010376:	00c9      	lsls	r1, r1, #3
 8010378:	430a      	orrs	r2, r1
 801037a:	651a      	str	r2, [r3, #80]	@ 0x50
 801037c:	4b5e      	ldr	r3, [pc, #376]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801037e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010380:	4b5d      	ldr	r3, [pc, #372]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010382:	2180      	movs	r1, #128	@ 0x80
 8010384:	0049      	lsls	r1, r1, #1
 8010386:	430a      	orrs	r2, r1
 8010388:	651a      	str	r2, [r3, #80]	@ 0x50
 801038a:	e00b      	b.n	80103a4 <HAL_RCC_OscConfig+0x534>
 801038c:	4b5a      	ldr	r3, [pc, #360]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801038e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010390:	4b59      	ldr	r3, [pc, #356]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010392:	495b      	ldr	r1, [pc, #364]	@ (8010500 <HAL_RCC_OscConfig+0x690>)
 8010394:	400a      	ands	r2, r1
 8010396:	651a      	str	r2, [r3, #80]	@ 0x50
 8010398:	4b57      	ldr	r3, [pc, #348]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801039a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801039c:	4b56      	ldr	r3, [pc, #344]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801039e:	495a      	ldr	r1, [pc, #360]	@ (8010508 <HAL_RCC_OscConfig+0x698>)
 80103a0:	400a      	ands	r2, r1
 80103a2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	689b      	ldr	r3, [r3, #8]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d015      	beq.n	80103d8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80103ac:	f7f9 ffe6 	bl	800a37c <HAL_GetTick>
 80103b0:	0003      	movs	r3, r0
 80103b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80103b4:	e009      	b.n	80103ca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80103b6:	f7f9 ffe1 	bl	800a37c <HAL_GetTick>
 80103ba:	0002      	movs	r2, r0
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	4a52      	ldr	r2, [pc, #328]	@ (801050c <HAL_RCC_OscConfig+0x69c>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d901      	bls.n	80103ca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80103c6:	2303      	movs	r3, #3
 80103c8:	e11b      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80103ca:	4b4b      	ldr	r3, [pc, #300]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80103cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80103ce:	2380      	movs	r3, #128	@ 0x80
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4013      	ands	r3, r2
 80103d4:	d0ef      	beq.n	80103b6 <HAL_RCC_OscConfig+0x546>
 80103d6:	e014      	b.n	8010402 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80103d8:	f7f9 ffd0 	bl	800a37c <HAL_GetTick>
 80103dc:	0003      	movs	r3, r0
 80103de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80103e0:	e009      	b.n	80103f6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80103e2:	f7f9 ffcb 	bl	800a37c <HAL_GetTick>
 80103e6:	0002      	movs	r2, r0
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	4a47      	ldr	r2, [pc, #284]	@ (801050c <HAL_RCC_OscConfig+0x69c>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d901      	bls.n	80103f6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80103f2:	2303      	movs	r3, #3
 80103f4:	e105      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80103f6:	4b40      	ldr	r3, [pc, #256]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80103f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80103fa:	2380      	movs	r3, #128	@ 0x80
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	4013      	ands	r3, r2
 8010400:	d1ef      	bne.n	80103e2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010402:	2323      	movs	r3, #35	@ 0x23
 8010404:	18fb      	adds	r3, r7, r3
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	2b01      	cmp	r3, #1
 801040a:	d105      	bne.n	8010418 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801040c:	4b3a      	ldr	r3, [pc, #232]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801040e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010410:	4b39      	ldr	r3, [pc, #228]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010412:	493f      	ldr	r1, [pc, #252]	@ (8010510 <HAL_RCC_OscConfig+0x6a0>)
 8010414:	400a      	ands	r2, r1
 8010416:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2220      	movs	r2, #32
 801041e:	4013      	ands	r3, r2
 8010420:	d049      	beq.n	80104b6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	699b      	ldr	r3, [r3, #24]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d026      	beq.n	8010478 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801042a:	4b33      	ldr	r3, [pc, #204]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801042c:	689a      	ldr	r2, [r3, #8]
 801042e:	4b32      	ldr	r3, [pc, #200]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010430:	2101      	movs	r1, #1
 8010432:	430a      	orrs	r2, r1
 8010434:	609a      	str	r2, [r3, #8]
 8010436:	4b30      	ldr	r3, [pc, #192]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 8010438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801043a:	4b2f      	ldr	r3, [pc, #188]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801043c:	2101      	movs	r1, #1
 801043e:	430a      	orrs	r2, r1
 8010440:	635a      	str	r2, [r3, #52]	@ 0x34
 8010442:	4b34      	ldr	r3, [pc, #208]	@ (8010514 <HAL_RCC_OscConfig+0x6a4>)
 8010444:	6a1a      	ldr	r2, [r3, #32]
 8010446:	4b33      	ldr	r3, [pc, #204]	@ (8010514 <HAL_RCC_OscConfig+0x6a4>)
 8010448:	2180      	movs	r1, #128	@ 0x80
 801044a:	0189      	lsls	r1, r1, #6
 801044c:	430a      	orrs	r2, r1
 801044e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010450:	f7f9 ff94 	bl	800a37c <HAL_GetTick>
 8010454:	0003      	movs	r3, r0
 8010456:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010458:	e008      	b.n	801046c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801045a:	f7f9 ff8f 	bl	800a37c <HAL_GetTick>
 801045e:	0002      	movs	r2, r0
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	1ad3      	subs	r3, r2, r3
 8010464:	2b02      	cmp	r3, #2
 8010466:	d901      	bls.n	801046c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8010468:	2303      	movs	r3, #3
 801046a:	e0ca      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801046c:	4b22      	ldr	r3, [pc, #136]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801046e:	689b      	ldr	r3, [r3, #8]
 8010470:	2202      	movs	r2, #2
 8010472:	4013      	ands	r3, r2
 8010474:	d0f1      	beq.n	801045a <HAL_RCC_OscConfig+0x5ea>
 8010476:	e01e      	b.n	80104b6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8010478:	4b1f      	ldr	r3, [pc, #124]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801047a:	689a      	ldr	r2, [r3, #8]
 801047c:	4b1e      	ldr	r3, [pc, #120]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 801047e:	2101      	movs	r1, #1
 8010480:	438a      	bics	r2, r1
 8010482:	609a      	str	r2, [r3, #8]
 8010484:	4b23      	ldr	r3, [pc, #140]	@ (8010514 <HAL_RCC_OscConfig+0x6a4>)
 8010486:	6a1a      	ldr	r2, [r3, #32]
 8010488:	4b22      	ldr	r3, [pc, #136]	@ (8010514 <HAL_RCC_OscConfig+0x6a4>)
 801048a:	4923      	ldr	r1, [pc, #140]	@ (8010518 <HAL_RCC_OscConfig+0x6a8>)
 801048c:	400a      	ands	r2, r1
 801048e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010490:	f7f9 ff74 	bl	800a37c <HAL_GetTick>
 8010494:	0003      	movs	r3, r0
 8010496:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010498:	e008      	b.n	80104ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801049a:	f7f9 ff6f 	bl	800a37c <HAL_GetTick>
 801049e:	0002      	movs	r2, r0
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	2b02      	cmp	r3, #2
 80104a6:	d901      	bls.n	80104ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80104a8:	2303      	movs	r3, #3
 80104aa:	e0aa      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80104ac:	4b12      	ldr	r3, [pc, #72]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	2202      	movs	r2, #2
 80104b2:	4013      	ands	r3, r2
 80104b4:	d1f1      	bne.n	801049a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d100      	bne.n	80104c0 <HAL_RCC_OscConfig+0x650>
 80104be:	e09f      	b.n	8010600 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	2b0c      	cmp	r3, #12
 80104c4:	d100      	bne.n	80104c8 <HAL_RCC_OscConfig+0x658>
 80104c6:	e078      	b.n	80105ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104cc:	2b02      	cmp	r3, #2
 80104ce:	d159      	bne.n	8010584 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80104d0:	4b09      	ldr	r3, [pc, #36]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	4b08      	ldr	r3, [pc, #32]	@ (80104f8 <HAL_RCC_OscConfig+0x688>)
 80104d6:	4911      	ldr	r1, [pc, #68]	@ (801051c <HAL_RCC_OscConfig+0x6ac>)
 80104d8:	400a      	ands	r2, r1
 80104da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104dc:	f7f9 ff4e 	bl	800a37c <HAL_GetTick>
 80104e0:	0003      	movs	r3, r0
 80104e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80104e4:	e01c      	b.n	8010520 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104e6:	f7f9 ff49 	bl	800a37c <HAL_GetTick>
 80104ea:	0002      	movs	r2, r0
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	2b02      	cmp	r3, #2
 80104f2:	d915      	bls.n	8010520 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80104f4:	2303      	movs	r3, #3
 80104f6:	e084      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
 80104f8:	40021000 	.word	0x40021000
 80104fc:	ffff1fff 	.word	0xffff1fff
 8010500:	fffffeff 	.word	0xfffffeff
 8010504:	40007000 	.word	0x40007000
 8010508:	fffffbff 	.word	0xfffffbff
 801050c:	00001388 	.word	0x00001388
 8010510:	efffffff 	.word	0xefffffff
 8010514:	40010000 	.word	0x40010000
 8010518:	ffffdfff 	.word	0xffffdfff
 801051c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010520:	4b3a      	ldr	r3, [pc, #232]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	2380      	movs	r3, #128	@ 0x80
 8010526:	049b      	lsls	r3, r3, #18
 8010528:	4013      	ands	r3, r2
 801052a:	d1dc      	bne.n	80104e6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801052c:	4b37      	ldr	r3, [pc, #220]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	4a37      	ldr	r2, [pc, #220]	@ (8010610 <HAL_RCC_OscConfig+0x7a0>)
 8010532:	4013      	ands	r3, r2
 8010534:	0019      	movs	r1, r3
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801053e:	431a      	orrs	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010544:	431a      	orrs	r2, r3
 8010546:	4b31      	ldr	r3, [pc, #196]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 8010548:	430a      	orrs	r2, r1
 801054a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801054c:	4b2f      	ldr	r3, [pc, #188]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	4b2e      	ldr	r3, [pc, #184]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 8010552:	2180      	movs	r1, #128	@ 0x80
 8010554:	0449      	lsls	r1, r1, #17
 8010556:	430a      	orrs	r2, r1
 8010558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801055a:	f7f9 ff0f 	bl	800a37c <HAL_GetTick>
 801055e:	0003      	movs	r3, r0
 8010560:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8010562:	e008      	b.n	8010576 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010564:	f7f9 ff0a 	bl	800a37c <HAL_GetTick>
 8010568:	0002      	movs	r2, r0
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	2b02      	cmp	r3, #2
 8010570:	d901      	bls.n	8010576 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8010572:	2303      	movs	r3, #3
 8010574:	e045      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8010576:	4b25      	ldr	r3, [pc, #148]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	2380      	movs	r3, #128	@ 0x80
 801057c:	049b      	lsls	r3, r3, #18
 801057e:	4013      	ands	r3, r2
 8010580:	d0f0      	beq.n	8010564 <HAL_RCC_OscConfig+0x6f4>
 8010582:	e03d      	b.n	8010600 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010584:	4b21      	ldr	r3, [pc, #132]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	4b20      	ldr	r3, [pc, #128]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 801058a:	4922      	ldr	r1, [pc, #136]	@ (8010614 <HAL_RCC_OscConfig+0x7a4>)
 801058c:	400a      	ands	r2, r1
 801058e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010590:	f7f9 fef4 	bl	800a37c <HAL_GetTick>
 8010594:	0003      	movs	r3, r0
 8010596:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010598:	e008      	b.n	80105ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801059a:	f7f9 feef 	bl	800a37c <HAL_GetTick>
 801059e:	0002      	movs	r2, r0
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	2b02      	cmp	r3, #2
 80105a6:	d901      	bls.n	80105ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80105a8:	2303      	movs	r3, #3
 80105aa:	e02a      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80105ac:	4b17      	ldr	r3, [pc, #92]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	2380      	movs	r3, #128	@ 0x80
 80105b2:	049b      	lsls	r3, r3, #18
 80105b4:	4013      	ands	r3, r2
 80105b6:	d1f0      	bne.n	801059a <HAL_RCC_OscConfig+0x72a>
 80105b8:	e022      	b.n	8010600 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d101      	bne.n	80105c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80105c2:	2301      	movs	r3, #1
 80105c4:	e01d      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80105c6:	4b11      	ldr	r3, [pc, #68]	@ (801060c <HAL_RCC_OscConfig+0x79c>)
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80105cc:	69ba      	ldr	r2, [r7, #24]
 80105ce:	2380      	movs	r3, #128	@ 0x80
 80105d0:	025b      	lsls	r3, r3, #9
 80105d2:	401a      	ands	r2, r3
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105d8:	429a      	cmp	r2, r3
 80105da:	d10f      	bne.n	80105fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80105dc:	69ba      	ldr	r2, [r7, #24]
 80105de:	23f0      	movs	r3, #240	@ 0xf0
 80105e0:	039b      	lsls	r3, r3, #14
 80105e2:	401a      	ands	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d107      	bne.n	80105fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80105ec:	69ba      	ldr	r2, [r7, #24]
 80105ee:	23c0      	movs	r3, #192	@ 0xc0
 80105f0:	041b      	lsls	r3, r3, #16
 80105f2:	401a      	ands	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d001      	beq.n	8010600 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80105fc:	2301      	movs	r3, #1
 80105fe:	e000      	b.n	8010602 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	0018      	movs	r0, r3
 8010604:	46bd      	mov	sp, r7
 8010606:	b00a      	add	sp, #40	@ 0x28
 8010608:	bdb0      	pop	{r4, r5, r7, pc}
 801060a:	46c0      	nop			@ (mov r8, r8)
 801060c:	40021000 	.word	0x40021000
 8010610:	ff02ffff 	.word	0xff02ffff
 8010614:	feffffff 	.word	0xfeffffff

08010618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010618:	b5b0      	push	{r4, r5, r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d101      	bne.n	801062c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010628:	2301      	movs	r3, #1
 801062a:	e128      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801062c:	4b96      	ldr	r3, [pc, #600]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2201      	movs	r2, #1
 8010632:	4013      	ands	r3, r2
 8010634:	683a      	ldr	r2, [r7, #0]
 8010636:	429a      	cmp	r2, r3
 8010638:	d91e      	bls.n	8010678 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801063a:	4b93      	ldr	r3, [pc, #588]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	2201      	movs	r2, #1
 8010640:	4393      	bics	r3, r2
 8010642:	0019      	movs	r1, r3
 8010644:	4b90      	ldr	r3, [pc, #576]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	430a      	orrs	r2, r1
 801064a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801064c:	f7f9 fe96 	bl	800a37c <HAL_GetTick>
 8010650:	0003      	movs	r3, r0
 8010652:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010654:	e009      	b.n	801066a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010656:	f7f9 fe91 	bl	800a37c <HAL_GetTick>
 801065a:	0002      	movs	r2, r0
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	4a8a      	ldr	r2, [pc, #552]	@ (801088c <HAL_RCC_ClockConfig+0x274>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d901      	bls.n	801066a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8010666:	2303      	movs	r3, #3
 8010668:	e109      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801066a:	4b87      	ldr	r3, [pc, #540]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2201      	movs	r2, #1
 8010670:	4013      	ands	r3, r2
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	429a      	cmp	r2, r3
 8010676:	d1ee      	bne.n	8010656 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2202      	movs	r2, #2
 801067e:	4013      	ands	r3, r2
 8010680:	d009      	beq.n	8010696 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010682:	4b83      	ldr	r3, [pc, #524]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	22f0      	movs	r2, #240	@ 0xf0
 8010688:	4393      	bics	r3, r2
 801068a:	0019      	movs	r1, r3
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	689a      	ldr	r2, [r3, #8]
 8010690:	4b7f      	ldr	r3, [pc, #508]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 8010692:	430a      	orrs	r2, r1
 8010694:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2201      	movs	r2, #1
 801069c:	4013      	ands	r3, r2
 801069e:	d100      	bne.n	80106a2 <HAL_RCC_ClockConfig+0x8a>
 80106a0:	e089      	b.n	80107b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	2b02      	cmp	r3, #2
 80106a8:	d107      	bne.n	80106ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80106aa:	4b79      	ldr	r3, [pc, #484]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	2380      	movs	r3, #128	@ 0x80
 80106b0:	029b      	lsls	r3, r3, #10
 80106b2:	4013      	ands	r3, r2
 80106b4:	d120      	bne.n	80106f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80106b6:	2301      	movs	r3, #1
 80106b8:	e0e1      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	2b03      	cmp	r3, #3
 80106c0:	d107      	bne.n	80106d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80106c2:	4b73      	ldr	r3, [pc, #460]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	2380      	movs	r3, #128	@ 0x80
 80106c8:	049b      	lsls	r3, r3, #18
 80106ca:	4013      	ands	r3, r2
 80106cc:	d114      	bne.n	80106f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80106ce:	2301      	movs	r3, #1
 80106d0:	e0d5      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d106      	bne.n	80106e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80106da:	4b6d      	ldr	r3, [pc, #436]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2204      	movs	r2, #4
 80106e0:	4013      	ands	r3, r2
 80106e2:	d109      	bne.n	80106f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80106e4:	2301      	movs	r3, #1
 80106e6:	e0ca      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80106e8:	4b69      	ldr	r3, [pc, #420]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	2380      	movs	r3, #128	@ 0x80
 80106ee:	009b      	lsls	r3, r3, #2
 80106f0:	4013      	ands	r3, r2
 80106f2:	d101      	bne.n	80106f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80106f4:	2301      	movs	r3, #1
 80106f6:	e0c2      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80106f8:	4b65      	ldr	r3, [pc, #404]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 80106fa:	68db      	ldr	r3, [r3, #12]
 80106fc:	2203      	movs	r2, #3
 80106fe:	4393      	bics	r3, r2
 8010700:	0019      	movs	r1, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	4b62      	ldr	r3, [pc, #392]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 8010708:	430a      	orrs	r2, r1
 801070a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801070c:	f7f9 fe36 	bl	800a37c <HAL_GetTick>
 8010710:	0003      	movs	r3, r0
 8010712:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	2b02      	cmp	r3, #2
 801071a:	d111      	bne.n	8010740 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801071c:	e009      	b.n	8010732 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801071e:	f7f9 fe2d 	bl	800a37c <HAL_GetTick>
 8010722:	0002      	movs	r2, r0
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	4a58      	ldr	r2, [pc, #352]	@ (801088c <HAL_RCC_ClockConfig+0x274>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d901      	bls.n	8010732 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801072e:	2303      	movs	r3, #3
 8010730:	e0a5      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010732:	4b57      	ldr	r3, [pc, #348]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	220c      	movs	r2, #12
 8010738:	4013      	ands	r3, r2
 801073a:	2b08      	cmp	r3, #8
 801073c:	d1ef      	bne.n	801071e <HAL_RCC_ClockConfig+0x106>
 801073e:	e03a      	b.n	80107b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	685b      	ldr	r3, [r3, #4]
 8010744:	2b03      	cmp	r3, #3
 8010746:	d111      	bne.n	801076c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010748:	e009      	b.n	801075e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801074a:	f7f9 fe17 	bl	800a37c <HAL_GetTick>
 801074e:	0002      	movs	r2, r0
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	1ad3      	subs	r3, r2, r3
 8010754:	4a4d      	ldr	r2, [pc, #308]	@ (801088c <HAL_RCC_ClockConfig+0x274>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d901      	bls.n	801075e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801075a:	2303      	movs	r3, #3
 801075c:	e08f      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801075e:	4b4c      	ldr	r3, [pc, #304]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 8010760:	68db      	ldr	r3, [r3, #12]
 8010762:	220c      	movs	r2, #12
 8010764:	4013      	ands	r3, r2
 8010766:	2b0c      	cmp	r3, #12
 8010768:	d1ef      	bne.n	801074a <HAL_RCC_ClockConfig+0x132>
 801076a:	e024      	b.n	80107b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d11b      	bne.n	80107ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010774:	e009      	b.n	801078a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010776:	f7f9 fe01 	bl	800a37c <HAL_GetTick>
 801077a:	0002      	movs	r2, r0
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	4a42      	ldr	r2, [pc, #264]	@ (801088c <HAL_RCC_ClockConfig+0x274>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d901      	bls.n	801078a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8010786:	2303      	movs	r3, #3
 8010788:	e079      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801078a:	4b41      	ldr	r3, [pc, #260]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	220c      	movs	r2, #12
 8010790:	4013      	ands	r3, r2
 8010792:	2b04      	cmp	r3, #4
 8010794:	d1ef      	bne.n	8010776 <HAL_RCC_ClockConfig+0x15e>
 8010796:	e00e      	b.n	80107b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010798:	f7f9 fdf0 	bl	800a37c <HAL_GetTick>
 801079c:	0002      	movs	r2, r0
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	1ad3      	subs	r3, r2, r3
 80107a2:	4a3a      	ldr	r2, [pc, #232]	@ (801088c <HAL_RCC_ClockConfig+0x274>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d901      	bls.n	80107ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80107a8:	2303      	movs	r3, #3
 80107aa:	e068      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80107ac:	4b38      	ldr	r3, [pc, #224]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	220c      	movs	r2, #12
 80107b2:	4013      	ands	r3, r2
 80107b4:	d1f0      	bne.n	8010798 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80107b6:	4b34      	ldr	r3, [pc, #208]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	2201      	movs	r2, #1
 80107bc:	4013      	ands	r3, r2
 80107be:	683a      	ldr	r2, [r7, #0]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d21e      	bcs.n	8010802 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80107c4:	4b30      	ldr	r3, [pc, #192]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2201      	movs	r2, #1
 80107ca:	4393      	bics	r3, r2
 80107cc:	0019      	movs	r1, r3
 80107ce:	4b2e      	ldr	r3, [pc, #184]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 80107d0:	683a      	ldr	r2, [r7, #0]
 80107d2:	430a      	orrs	r2, r1
 80107d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80107d6:	f7f9 fdd1 	bl	800a37c <HAL_GetTick>
 80107da:	0003      	movs	r3, r0
 80107dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80107de:	e009      	b.n	80107f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80107e0:	f7f9 fdcc 	bl	800a37c <HAL_GetTick>
 80107e4:	0002      	movs	r2, r0
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	4a28      	ldr	r2, [pc, #160]	@ (801088c <HAL_RCC_ClockConfig+0x274>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d901      	bls.n	80107f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80107f0:	2303      	movs	r3, #3
 80107f2:	e044      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80107f4:	4b24      	ldr	r3, [pc, #144]	@ (8010888 <HAL_RCC_ClockConfig+0x270>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	2201      	movs	r2, #1
 80107fa:	4013      	ands	r3, r2
 80107fc:	683a      	ldr	r2, [r7, #0]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d1ee      	bne.n	80107e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2204      	movs	r2, #4
 8010808:	4013      	ands	r3, r2
 801080a:	d009      	beq.n	8010820 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801080c:	4b20      	ldr	r3, [pc, #128]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	4a20      	ldr	r2, [pc, #128]	@ (8010894 <HAL_RCC_ClockConfig+0x27c>)
 8010812:	4013      	ands	r3, r2
 8010814:	0019      	movs	r1, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68da      	ldr	r2, [r3, #12]
 801081a:	4b1d      	ldr	r3, [pc, #116]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 801081c:	430a      	orrs	r2, r1
 801081e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2208      	movs	r2, #8
 8010826:	4013      	ands	r3, r2
 8010828:	d00a      	beq.n	8010840 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801082a:	4b19      	ldr	r3, [pc, #100]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	4a1a      	ldr	r2, [pc, #104]	@ (8010898 <HAL_RCC_ClockConfig+0x280>)
 8010830:	4013      	ands	r3, r2
 8010832:	0019      	movs	r1, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	691b      	ldr	r3, [r3, #16]
 8010838:	00da      	lsls	r2, r3, #3
 801083a:	4b15      	ldr	r3, [pc, #84]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 801083c:	430a      	orrs	r2, r1
 801083e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010840:	f000 f832 	bl	80108a8 <HAL_RCC_GetSysClockFreq>
 8010844:	0001      	movs	r1, r0
 8010846:	4b12      	ldr	r3, [pc, #72]	@ (8010890 <HAL_RCC_ClockConfig+0x278>)
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	091b      	lsrs	r3, r3, #4
 801084c:	220f      	movs	r2, #15
 801084e:	4013      	ands	r3, r2
 8010850:	4a12      	ldr	r2, [pc, #72]	@ (801089c <HAL_RCC_ClockConfig+0x284>)
 8010852:	5cd3      	ldrb	r3, [r2, r3]
 8010854:	000a      	movs	r2, r1
 8010856:	40da      	lsrs	r2, r3
 8010858:	4b11      	ldr	r3, [pc, #68]	@ (80108a0 <HAL_RCC_ClockConfig+0x288>)
 801085a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801085c:	4b11      	ldr	r3, [pc, #68]	@ (80108a4 <HAL_RCC_ClockConfig+0x28c>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	250b      	movs	r5, #11
 8010862:	197c      	adds	r4, r7, r5
 8010864:	0018      	movs	r0, r3
 8010866:	f7f9 fd43 	bl	800a2f0 <HAL_InitTick>
 801086a:	0003      	movs	r3, r0
 801086c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801086e:	197b      	adds	r3, r7, r5
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d002      	beq.n	801087c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8010876:	197b      	adds	r3, r7, r5
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	e000      	b.n	801087e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	0018      	movs	r0, r3
 8010880:	46bd      	mov	sp, r7
 8010882:	b004      	add	sp, #16
 8010884:	bdb0      	pop	{r4, r5, r7, pc}
 8010886:	46c0      	nop			@ (mov r8, r8)
 8010888:	40022000 	.word	0x40022000
 801088c:	00001388 	.word	0x00001388
 8010890:	40021000 	.word	0x40021000
 8010894:	fffff8ff 	.word	0xfffff8ff
 8010898:	ffffc7ff 	.word	0xffffc7ff
 801089c:	0801c218 	.word	0x0801c218
 80108a0:	2000005c 	.word	0x2000005c
 80108a4:	20000070 	.word	0x20000070

080108a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80108a8:	b5b0      	push	{r4, r5, r7, lr}
 80108aa:	b08e      	sub	sp, #56	@ 0x38
 80108ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80108ae:	4b4c      	ldr	r3, [pc, #304]	@ (80109e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80108b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80108b6:	230c      	movs	r3, #12
 80108b8:	4013      	ands	r3, r2
 80108ba:	2b0c      	cmp	r3, #12
 80108bc:	d014      	beq.n	80108e8 <HAL_RCC_GetSysClockFreq+0x40>
 80108be:	d900      	bls.n	80108c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80108c0:	e07b      	b.n	80109ba <HAL_RCC_GetSysClockFreq+0x112>
 80108c2:	2b04      	cmp	r3, #4
 80108c4:	d002      	beq.n	80108cc <HAL_RCC_GetSysClockFreq+0x24>
 80108c6:	2b08      	cmp	r3, #8
 80108c8:	d00b      	beq.n	80108e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80108ca:	e076      	b.n	80109ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80108cc:	4b44      	ldr	r3, [pc, #272]	@ (80109e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2210      	movs	r2, #16
 80108d2:	4013      	ands	r3, r2
 80108d4:	d002      	beq.n	80108dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80108d6:	4b43      	ldr	r3, [pc, #268]	@ (80109e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80108d8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80108da:	e07c      	b.n	80109d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80108dc:	4b42      	ldr	r3, [pc, #264]	@ (80109e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80108de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80108e0:	e079      	b.n	80109d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80108e2:	4b42      	ldr	r3, [pc, #264]	@ (80109ec <HAL_RCC_GetSysClockFreq+0x144>)
 80108e4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80108e6:	e076      	b.n	80109d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80108e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ea:	0c9a      	lsrs	r2, r3, #18
 80108ec:	230f      	movs	r3, #15
 80108ee:	401a      	ands	r2, r3
 80108f0:	4b3f      	ldr	r3, [pc, #252]	@ (80109f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80108f2:	5c9b      	ldrb	r3, [r3, r2]
 80108f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80108f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f8:	0d9a      	lsrs	r2, r3, #22
 80108fa:	2303      	movs	r3, #3
 80108fc:	4013      	ands	r3, r2
 80108fe:	3301      	adds	r3, #1
 8010900:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010902:	4b37      	ldr	r3, [pc, #220]	@ (80109e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8010904:	68da      	ldr	r2, [r3, #12]
 8010906:	2380      	movs	r3, #128	@ 0x80
 8010908:	025b      	lsls	r3, r3, #9
 801090a:	4013      	ands	r3, r2
 801090c:	d01a      	beq.n	8010944 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	61bb      	str	r3, [r7, #24]
 8010912:	2300      	movs	r3, #0
 8010914:	61fb      	str	r3, [r7, #28]
 8010916:	4a35      	ldr	r2, [pc, #212]	@ (80109ec <HAL_RCC_GetSysClockFreq+0x144>)
 8010918:	2300      	movs	r3, #0
 801091a:	69b8      	ldr	r0, [r7, #24]
 801091c:	69f9      	ldr	r1, [r7, #28]
 801091e:	f7ef fe1d 	bl	800055c <__aeabi_lmul>
 8010922:	0002      	movs	r2, r0
 8010924:	000b      	movs	r3, r1
 8010926:	0010      	movs	r0, r2
 8010928:	0019      	movs	r1, r3
 801092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092c:	613b      	str	r3, [r7, #16]
 801092e:	2300      	movs	r3, #0
 8010930:	617b      	str	r3, [r7, #20]
 8010932:	693a      	ldr	r2, [r7, #16]
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f7ef fdf1 	bl	800051c <__aeabi_uldivmod>
 801093a:	0002      	movs	r2, r0
 801093c:	000b      	movs	r3, r1
 801093e:	0013      	movs	r3, r2
 8010940:	637b      	str	r3, [r7, #52]	@ 0x34
 8010942:	e037      	b.n	80109b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010944:	4b26      	ldr	r3, [pc, #152]	@ (80109e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2210      	movs	r2, #16
 801094a:	4013      	ands	r3, r2
 801094c:	d01a      	beq.n	8010984 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010950:	60bb      	str	r3, [r7, #8]
 8010952:	2300      	movs	r3, #0
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	4a23      	ldr	r2, [pc, #140]	@ (80109e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8010958:	2300      	movs	r3, #0
 801095a:	68b8      	ldr	r0, [r7, #8]
 801095c:	68f9      	ldr	r1, [r7, #12]
 801095e:	f7ef fdfd 	bl	800055c <__aeabi_lmul>
 8010962:	0002      	movs	r2, r0
 8010964:	000b      	movs	r3, r1
 8010966:	0010      	movs	r0, r2
 8010968:	0019      	movs	r1, r3
 801096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096c:	603b      	str	r3, [r7, #0]
 801096e:	2300      	movs	r3, #0
 8010970:	607b      	str	r3, [r7, #4]
 8010972:	683a      	ldr	r2, [r7, #0]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f7ef fdd1 	bl	800051c <__aeabi_uldivmod>
 801097a:	0002      	movs	r2, r0
 801097c:	000b      	movs	r3, r1
 801097e:	0013      	movs	r3, r2
 8010980:	637b      	str	r3, [r7, #52]	@ 0x34
 8010982:	e017      	b.n	80109b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010986:	0018      	movs	r0, r3
 8010988:	2300      	movs	r3, #0
 801098a:	0019      	movs	r1, r3
 801098c:	4a16      	ldr	r2, [pc, #88]	@ (80109e8 <HAL_RCC_GetSysClockFreq+0x140>)
 801098e:	2300      	movs	r3, #0
 8010990:	f7ef fde4 	bl	800055c <__aeabi_lmul>
 8010994:	0002      	movs	r2, r0
 8010996:	000b      	movs	r3, r1
 8010998:	0010      	movs	r0, r2
 801099a:	0019      	movs	r1, r3
 801099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801099e:	001c      	movs	r4, r3
 80109a0:	2300      	movs	r3, #0
 80109a2:	001d      	movs	r5, r3
 80109a4:	0022      	movs	r2, r4
 80109a6:	002b      	movs	r3, r5
 80109a8:	f7ef fdb8 	bl	800051c <__aeabi_uldivmod>
 80109ac:	0002      	movs	r2, r0
 80109ae:	000b      	movs	r3, r1
 80109b0:	0013      	movs	r3, r2
 80109b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80109b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80109b8:	e00d      	b.n	80109d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80109ba:	4b09      	ldr	r3, [pc, #36]	@ (80109e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	0b5b      	lsrs	r3, r3, #13
 80109c0:	2207      	movs	r2, #7
 80109c2:	4013      	ands	r3, r2
 80109c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80109c6:	6a3b      	ldr	r3, [r7, #32]
 80109c8:	3301      	adds	r3, #1
 80109ca:	2280      	movs	r2, #128	@ 0x80
 80109cc:	0212      	lsls	r2, r2, #8
 80109ce:	409a      	lsls	r2, r3
 80109d0:	0013      	movs	r3, r2
 80109d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80109d4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80109d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80109d8:	0018      	movs	r0, r3
 80109da:	46bd      	mov	sp, r7
 80109dc:	b00e      	add	sp, #56	@ 0x38
 80109de:	bdb0      	pop	{r4, r5, r7, pc}
 80109e0:	40021000 	.word	0x40021000
 80109e4:	003d0900 	.word	0x003d0900
 80109e8:	00f42400 	.word	0x00f42400
 80109ec:	007a1200 	.word	0x007a1200
 80109f0:	0801c230 	.word	0x0801c230

080109f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80109f8:	4b02      	ldr	r3, [pc, #8]	@ (8010a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80109fa:	681b      	ldr	r3, [r3, #0]
}
 80109fc:	0018      	movs	r0, r3
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	46c0      	nop			@ (mov r8, r8)
 8010a04:	2000005c 	.word	0x2000005c

08010a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010a0c:	f7ff fff2 	bl	80109f4 <HAL_RCC_GetHCLKFreq>
 8010a10:	0001      	movs	r1, r0
 8010a12:	4b06      	ldr	r3, [pc, #24]	@ (8010a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	0a1b      	lsrs	r3, r3, #8
 8010a18:	2207      	movs	r2, #7
 8010a1a:	4013      	ands	r3, r2
 8010a1c:	4a04      	ldr	r2, [pc, #16]	@ (8010a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010a1e:	5cd3      	ldrb	r3, [r2, r3]
 8010a20:	40d9      	lsrs	r1, r3
 8010a22:	000b      	movs	r3, r1
}
 8010a24:	0018      	movs	r0, r3
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	46c0      	nop			@ (mov r8, r8)
 8010a2c:	40021000 	.word	0x40021000
 8010a30:	0801c228 	.word	0x0801c228

08010a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010a38:	f7ff ffdc 	bl	80109f4 <HAL_RCC_GetHCLKFreq>
 8010a3c:	0001      	movs	r1, r0
 8010a3e:	4b06      	ldr	r3, [pc, #24]	@ (8010a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	0adb      	lsrs	r3, r3, #11
 8010a44:	2207      	movs	r2, #7
 8010a46:	4013      	ands	r3, r2
 8010a48:	4a04      	ldr	r2, [pc, #16]	@ (8010a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8010a4a:	5cd3      	ldrb	r3, [r2, r3]
 8010a4c:	40d9      	lsrs	r1, r3
 8010a4e:	000b      	movs	r3, r1
}
 8010a50:	0018      	movs	r0, r3
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	46c0      	nop			@ (mov r8, r8)
 8010a58:	40021000 	.word	0x40021000
 8010a5c:	0801c228 	.word	0x0801c228

08010a60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8010a68:	2017      	movs	r0, #23
 8010a6a:	183b      	adds	r3, r7, r0
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2220      	movs	r2, #32
 8010a76:	4013      	ands	r3, r2
 8010a78:	d100      	bne.n	8010a7c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8010a7a:	e0c7      	b.n	8010c0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010a7c:	4b9b      	ldr	r3, [pc, #620]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a80:	2380      	movs	r3, #128	@ 0x80
 8010a82:	055b      	lsls	r3, r3, #21
 8010a84:	4013      	ands	r3, r2
 8010a86:	d109      	bne.n	8010a9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010a88:	4b98      	ldr	r3, [pc, #608]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a8c:	4b97      	ldr	r3, [pc, #604]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a8e:	2180      	movs	r1, #128	@ 0x80
 8010a90:	0549      	lsls	r1, r1, #21
 8010a92:	430a      	orrs	r2, r1
 8010a94:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8010a96:	183b      	adds	r3, r7, r0
 8010a98:	2201      	movs	r2, #1
 8010a9a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010a9c:	4b94      	ldr	r3, [pc, #592]	@ (8010cf0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	2380      	movs	r3, #128	@ 0x80
 8010aa2:	005b      	lsls	r3, r3, #1
 8010aa4:	4013      	ands	r3, r2
 8010aa6:	d11a      	bne.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010aa8:	4b91      	ldr	r3, [pc, #580]	@ (8010cf0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	4b90      	ldr	r3, [pc, #576]	@ (8010cf0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010aae:	2180      	movs	r1, #128	@ 0x80
 8010ab0:	0049      	lsls	r1, r1, #1
 8010ab2:	430a      	orrs	r2, r1
 8010ab4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010ab6:	f7f9 fc61 	bl	800a37c <HAL_GetTick>
 8010aba:	0003      	movs	r3, r0
 8010abc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010abe:	e008      	b.n	8010ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010ac0:	f7f9 fc5c 	bl	800a37c <HAL_GetTick>
 8010ac4:	0002      	movs	r2, r0
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	2b64      	cmp	r3, #100	@ 0x64
 8010acc:	d901      	bls.n	8010ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8010ace:	2303      	movs	r3, #3
 8010ad0:	e107      	b.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010ad2:	4b87      	ldr	r3, [pc, #540]	@ (8010cf0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	2380      	movs	r3, #128	@ 0x80
 8010ad8:	005b      	lsls	r3, r3, #1
 8010ada:	4013      	ands	r3, r2
 8010adc:	d0f0      	beq.n	8010ac0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8010ade:	4b83      	ldr	r3, [pc, #524]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	23c0      	movs	r3, #192	@ 0xc0
 8010ae4:	039b      	lsls	r3, r3, #14
 8010ae6:	4013      	ands	r3, r2
 8010ae8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	685a      	ldr	r2, [r3, #4]
 8010aee:	23c0      	movs	r3, #192	@ 0xc0
 8010af0:	039b      	lsls	r3, r3, #14
 8010af2:	4013      	ands	r3, r2
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d013      	beq.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	685a      	ldr	r2, [r3, #4]
 8010afe:	23c0      	movs	r3, #192	@ 0xc0
 8010b00:	029b      	lsls	r3, r3, #10
 8010b02:	401a      	ands	r2, r3
 8010b04:	23c0      	movs	r3, #192	@ 0xc0
 8010b06:	029b      	lsls	r3, r3, #10
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d10a      	bne.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010b0c:	4b77      	ldr	r3, [pc, #476]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	2380      	movs	r3, #128	@ 0x80
 8010b12:	029b      	lsls	r3, r3, #10
 8010b14:	401a      	ands	r2, r3
 8010b16:	2380      	movs	r3, #128	@ 0x80
 8010b18:	029b      	lsls	r3, r3, #10
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d101      	bne.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8010b1e:	2301      	movs	r3, #1
 8010b20:	e0df      	b.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8010b22:	4b72      	ldr	r3, [pc, #456]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b26:	23c0      	movs	r3, #192	@ 0xc0
 8010b28:	029b      	lsls	r3, r3, #10
 8010b2a:	4013      	ands	r3, r2
 8010b2c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d03b      	beq.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	685a      	ldr	r2, [r3, #4]
 8010b38:	23c0      	movs	r3, #192	@ 0xc0
 8010b3a:	029b      	lsls	r3, r3, #10
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	68fa      	ldr	r2, [r7, #12]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d033      	beq.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2220      	movs	r2, #32
 8010b4a:	4013      	ands	r3, r2
 8010b4c:	d02e      	beq.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8010b4e:	4b67      	ldr	r3, [pc, #412]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b52:	4a68      	ldr	r2, [pc, #416]	@ (8010cf4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010b54:	4013      	ands	r3, r2
 8010b56:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010b58:	4b64      	ldr	r3, [pc, #400]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b5c:	4b63      	ldr	r3, [pc, #396]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b5e:	2180      	movs	r1, #128	@ 0x80
 8010b60:	0309      	lsls	r1, r1, #12
 8010b62:	430a      	orrs	r2, r1
 8010b64:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010b66:	4b61      	ldr	r3, [pc, #388]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b6a:	4b60      	ldr	r3, [pc, #384]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b6c:	4962      	ldr	r1, [pc, #392]	@ (8010cf8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8010b6e:	400a      	ands	r2, r1
 8010b70:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8010b72:	4b5e      	ldr	r3, [pc, #376]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	2380      	movs	r3, #128	@ 0x80
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	4013      	ands	r3, r2
 8010b80:	d014      	beq.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010b82:	f7f9 fbfb 	bl	800a37c <HAL_GetTick>
 8010b86:	0003      	movs	r3, r0
 8010b88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010b8a:	e009      	b.n	8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010b8c:	f7f9 fbf6 	bl	800a37c <HAL_GetTick>
 8010b90:	0002      	movs	r2, r0
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	4a59      	ldr	r2, [pc, #356]	@ (8010cfc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d901      	bls.n	8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010b9c:	2303      	movs	r3, #3
 8010b9e:	e0a0      	b.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010ba0:	4b52      	ldr	r3, [pc, #328]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ba4:	2380      	movs	r3, #128	@ 0x80
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	4013      	ands	r3, r2
 8010baa:	d0ef      	beq.n	8010b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2220      	movs	r2, #32
 8010bb2:	4013      	ands	r3, r2
 8010bb4:	d01f      	beq.n	8010bf6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	685a      	ldr	r2, [r3, #4]
 8010bba:	23c0      	movs	r3, #192	@ 0xc0
 8010bbc:	029b      	lsls	r3, r3, #10
 8010bbe:	401a      	ands	r2, r3
 8010bc0:	23c0      	movs	r3, #192	@ 0xc0
 8010bc2:	029b      	lsls	r3, r3, #10
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d10c      	bne.n	8010be2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8010bc8:	4b48      	ldr	r3, [pc, #288]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8010d00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8010bce:	4013      	ands	r3, r2
 8010bd0:	0019      	movs	r1, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	685a      	ldr	r2, [r3, #4]
 8010bd6:	23c0      	movs	r3, #192	@ 0xc0
 8010bd8:	039b      	lsls	r3, r3, #14
 8010bda:	401a      	ands	r2, r3
 8010bdc:	4b43      	ldr	r3, [pc, #268]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bde:	430a      	orrs	r2, r1
 8010be0:	601a      	str	r2, [r3, #0]
 8010be2:	4b42      	ldr	r3, [pc, #264]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010be4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	685a      	ldr	r2, [r3, #4]
 8010bea:	23c0      	movs	r3, #192	@ 0xc0
 8010bec:	029b      	lsls	r3, r3, #10
 8010bee:	401a      	ands	r2, r3
 8010bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bf2:	430a      	orrs	r2, r1
 8010bf4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010bf6:	2317      	movs	r3, #23
 8010bf8:	18fb      	adds	r3, r7, r3
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d105      	bne.n	8010c0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010c00:	4b3a      	ldr	r3, [pc, #232]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c04:	4b39      	ldr	r3, [pc, #228]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c06:	493f      	ldr	r1, [pc, #252]	@ (8010d04 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8010c08:	400a      	ands	r2, r1
 8010c0a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2201      	movs	r2, #1
 8010c12:	4013      	ands	r3, r2
 8010c14:	d009      	beq.n	8010c2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010c16:	4b35      	ldr	r3, [pc, #212]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c1a:	2203      	movs	r2, #3
 8010c1c:	4393      	bics	r3, r2
 8010c1e:	0019      	movs	r1, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	689a      	ldr	r2, [r3, #8]
 8010c24:	4b31      	ldr	r3, [pc, #196]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c26:	430a      	orrs	r2, r1
 8010c28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2202      	movs	r2, #2
 8010c30:	4013      	ands	r3, r2
 8010c32:	d009      	beq.n	8010c48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010c34:	4b2d      	ldr	r3, [pc, #180]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c38:	220c      	movs	r2, #12
 8010c3a:	4393      	bics	r3, r2
 8010c3c:	0019      	movs	r1, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	68da      	ldr	r2, [r3, #12]
 8010c42:	4b2a      	ldr	r3, [pc, #168]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c44:	430a      	orrs	r2, r1
 8010c46:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2204      	movs	r2, #4
 8010c4e:	4013      	ands	r3, r2
 8010c50:	d009      	beq.n	8010c66 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010c52:	4b26      	ldr	r3, [pc, #152]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c56:	4a2c      	ldr	r2, [pc, #176]	@ (8010d08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8010c58:	4013      	ands	r3, r2
 8010c5a:	0019      	movs	r1, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	691a      	ldr	r2, [r3, #16]
 8010c60:	4b22      	ldr	r3, [pc, #136]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c62:	430a      	orrs	r2, r1
 8010c64:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2208      	movs	r2, #8
 8010c6c:	4013      	ands	r3, r2
 8010c6e:	d009      	beq.n	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010c70:	4b1e      	ldr	r3, [pc, #120]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c74:	4a25      	ldr	r2, [pc, #148]	@ (8010d0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8010c76:	4013      	ands	r3, r2
 8010c78:	0019      	movs	r1, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	695a      	ldr	r2, [r3, #20]
 8010c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c80:	430a      	orrs	r2, r1
 8010c82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	2380      	movs	r3, #128	@ 0x80
 8010c8a:	005b      	lsls	r3, r3, #1
 8010c8c:	4013      	ands	r3, r2
 8010c8e:	d009      	beq.n	8010ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010c90:	4b16      	ldr	r3, [pc, #88]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c94:	4a17      	ldr	r2, [pc, #92]	@ (8010cf4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010c96:	4013      	ands	r3, r2
 8010c98:	0019      	movs	r1, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	699a      	ldr	r2, [r3, #24]
 8010c9e:	4b13      	ldr	r3, [pc, #76]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ca0:	430a      	orrs	r2, r1
 8010ca2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2240      	movs	r2, #64	@ 0x40
 8010caa:	4013      	ands	r3, r2
 8010cac:	d009      	beq.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010cae:	4b0f      	ldr	r3, [pc, #60]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010cb2:	4a17      	ldr	r2, [pc, #92]	@ (8010d10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	0019      	movs	r1, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6a1a      	ldr	r2, [r3, #32]
 8010cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010cbe:	430a      	orrs	r2, r1
 8010cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2280      	movs	r2, #128	@ 0x80
 8010cc8:	4013      	ands	r3, r2
 8010cca:	d009      	beq.n	8010ce0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010ccc:	4b07      	ldr	r3, [pc, #28]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010cd0:	4a10      	ldr	r2, [pc, #64]	@ (8010d14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8010cd2:	4013      	ands	r3, r2
 8010cd4:	0019      	movs	r1, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	69da      	ldr	r2, [r3, #28]
 8010cda:	4b04      	ldr	r3, [pc, #16]	@ (8010cec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010cdc:	430a      	orrs	r2, r1
 8010cde:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010ce0:	2300      	movs	r3, #0
}
 8010ce2:	0018      	movs	r0, r3
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	b006      	add	sp, #24
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	46c0      	nop			@ (mov r8, r8)
 8010cec:	40021000 	.word	0x40021000
 8010cf0:	40007000 	.word	0x40007000
 8010cf4:	fffcffff 	.word	0xfffcffff
 8010cf8:	fff7ffff 	.word	0xfff7ffff
 8010cfc:	00001388 	.word	0x00001388
 8010d00:	ffcfffff 	.word	0xffcfffff
 8010d04:	efffffff 	.word	0xefffffff
 8010d08:	fffff3ff 	.word	0xfffff3ff
 8010d0c:	ffffcfff 	.word	0xffffcfff
 8010d10:	fbffffff 	.word	0xfbffffff
 8010d14:	fff3ffff 	.word	0xfff3ffff

08010d18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010d18:	b5b0      	push	{r4, r5, r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010d20:	230f      	movs	r3, #15
 8010d22:	18fb      	adds	r3, r7, r3
 8010d24:	2201      	movs	r2, #1
 8010d26:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d101      	bne.n	8010d32 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e088      	b.n	8010e44 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2221      	movs	r2, #33	@ 0x21
 8010d36:	5c9b      	ldrb	r3, [r3, r2]
 8010d38:	b2db      	uxtb	r3, r3
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d107      	bne.n	8010d4e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2220      	movs	r2, #32
 8010d42:	2100      	movs	r1, #0
 8010d44:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	0018      	movs	r0, r3
 8010d4a:	f7f6 fc43 	bl	80075d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2221      	movs	r2, #33	@ 0x21
 8010d52:	2102      	movs	r1, #2
 8010d54:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	2210      	movs	r2, #16
 8010d5e:	4013      	ands	r3, r2
 8010d60:	2b10      	cmp	r3, #16
 8010d62:	d05f      	beq.n	8010e24 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	22ca      	movs	r2, #202	@ 0xca
 8010d6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2253      	movs	r2, #83	@ 0x53
 8010d72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010d74:	250f      	movs	r5, #15
 8010d76:	197c      	adds	r4, r7, r5
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	0018      	movs	r0, r3
 8010d7c:	f000 f93a 	bl	8010ff4 <RTC_EnterInitMode>
 8010d80:	0003      	movs	r3, r0
 8010d82:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8010d84:	0028      	movs	r0, r5
 8010d86:	183b      	adds	r3, r7, r0
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d12c      	bne.n	8010de8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	689a      	ldr	r2, [r3, #8]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	492c      	ldr	r1, [pc, #176]	@ (8010e4c <HAL_RTC_Init+0x134>)
 8010d9a:	400a      	ands	r2, r1
 8010d9c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	6899      	ldr	r1, [r3, #8]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	685a      	ldr	r2, [r3, #4]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	431a      	orrs	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	431a      	orrs	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	430a      	orrs	r2, r1
 8010dba:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	68d2      	ldr	r2, [r2, #12]
 8010dc4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	6919      	ldr	r1, [r3, #16]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	689b      	ldr	r3, [r3, #8]
 8010dd0:	041a      	lsls	r2, r3, #16
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	430a      	orrs	r2, r1
 8010dd8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010dda:	183c      	adds	r4, r7, r0
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	0018      	movs	r0, r3
 8010de0:	f000 f94c 	bl	801107c <RTC_ExitInitMode>
 8010de4:	0003      	movs	r3, r0
 8010de6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8010de8:	230f      	movs	r3, #15
 8010dea:	18fb      	adds	r3, r7, r3
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d113      	bne.n	8010e1a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2103      	movs	r1, #3
 8010dfe:	438a      	bics	r2, r1
 8010e00:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	69da      	ldr	r2, [r3, #28]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	695b      	ldr	r3, [r3, #20]
 8010e10:	431a      	orrs	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	430a      	orrs	r2, r1
 8010e18:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	22ff      	movs	r2, #255	@ 0xff
 8010e20:	625a      	str	r2, [r3, #36]	@ 0x24
 8010e22:	e003      	b.n	8010e2c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010e24:	230f      	movs	r3, #15
 8010e26:	18fb      	adds	r3, r7, r3
 8010e28:	2200      	movs	r2, #0
 8010e2a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8010e2c:	230f      	movs	r3, #15
 8010e2e:	18fb      	adds	r3, r7, r3
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d103      	bne.n	8010e3e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2221      	movs	r2, #33	@ 0x21
 8010e3a:	2101      	movs	r1, #1
 8010e3c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8010e3e:	230f      	movs	r3, #15
 8010e40:	18fb      	adds	r3, r7, r3
 8010e42:	781b      	ldrb	r3, [r3, #0]
}
 8010e44:	0018      	movs	r0, r3
 8010e46:	46bd      	mov	sp, r7
 8010e48:	b004      	add	sp, #16
 8010e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010e4c:	ff8fffbf 	.word	0xff8fffbf

08010e50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010e50:	b5b0      	push	{r4, r5, r7, lr}
 8010e52:	b086      	sub	sp, #24
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	2220      	movs	r2, #32
 8010e64:	5c9b      	ldrb	r3, [r3, r2]
 8010e66:	2b01      	cmp	r3, #1
 8010e68:	d101      	bne.n	8010e6e <HAL_RTC_SetTime+0x1e>
 8010e6a:	2302      	movs	r3, #2
 8010e6c:	e092      	b.n	8010f94 <HAL_RTC_SetTime+0x144>
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	2220      	movs	r2, #32
 8010e72:	2101      	movs	r1, #1
 8010e74:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	2221      	movs	r2, #33	@ 0x21
 8010e7a:	2102      	movs	r1, #2
 8010e7c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d125      	bne.n	8010ed0 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	2240      	movs	r2, #64	@ 0x40
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	d102      	bne.n	8010e96 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	2200      	movs	r2, #0
 8010e94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	0018      	movs	r0, r3
 8010e9c:	f000 f918 	bl	80110d0 <RTC_ByteToBcd2>
 8010ea0:	0003      	movs	r3, r0
 8010ea2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	0018      	movs	r0, r3
 8010eaa:	f000 f911 	bl	80110d0 <RTC_ByteToBcd2>
 8010eae:	0003      	movs	r3, r0
 8010eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010eb2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	789b      	ldrb	r3, [r3, #2]
 8010eb8:	0018      	movs	r0, r3
 8010eba:	f000 f909 	bl	80110d0 <RTC_ByteToBcd2>
 8010ebe:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010ec0:	0022      	movs	r2, r4
 8010ec2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	78db      	ldrb	r3, [r3, #3]
 8010ec8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	617b      	str	r3, [r7, #20]
 8010ece:	e017      	b.n	8010f00 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	2240      	movs	r2, #64	@ 0x40
 8010ed8:	4013      	ands	r3, r2
 8010eda:	d102      	bne.n	8010ee2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	785b      	ldrb	r3, [r3, #1]
 8010eec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010eee:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8010ef0:	68ba      	ldr	r2, [r7, #8]
 8010ef2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010ef4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	78db      	ldrb	r3, [r3, #3]
 8010efa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010efc:	4313      	orrs	r3, r2
 8010efe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	22ca      	movs	r2, #202	@ 0xca
 8010f06:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2253      	movs	r2, #83	@ 0x53
 8010f0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010f10:	2513      	movs	r5, #19
 8010f12:	197c      	adds	r4, r7, r5
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	0018      	movs	r0, r3
 8010f18:	f000 f86c 	bl	8010ff4 <RTC_EnterInitMode>
 8010f1c:	0003      	movs	r3, r0
 8010f1e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010f20:	0028      	movs	r0, r5
 8010f22:	183b      	adds	r3, r7, r0
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d120      	bne.n	8010f6c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	697a      	ldr	r2, [r7, #20]
 8010f30:	491a      	ldr	r1, [pc, #104]	@ (8010f9c <HAL_RTC_SetTime+0x14c>)
 8010f32:	400a      	ands	r2, r1
 8010f34:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	689a      	ldr	r2, [r3, #8]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4917      	ldr	r1, [pc, #92]	@ (8010fa0 <HAL_RTC_SetTime+0x150>)
 8010f42:	400a      	ands	r2, r1
 8010f44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	6899      	ldr	r1, [r3, #8]
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	68da      	ldr	r2, [r3, #12]
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	691b      	ldr	r3, [r3, #16]
 8010f54:	431a      	orrs	r2, r3
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	430a      	orrs	r2, r1
 8010f5c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010f5e:	183c      	adds	r4, r7, r0
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	0018      	movs	r0, r3
 8010f64:	f000 f88a 	bl	801107c <RTC_ExitInitMode>
 8010f68:	0003      	movs	r3, r0
 8010f6a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8010f6c:	2313      	movs	r3, #19
 8010f6e:	18fb      	adds	r3, r7, r3
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d103      	bne.n	8010f7e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2221      	movs	r2, #33	@ 0x21
 8010f7a:	2101      	movs	r1, #1
 8010f7c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	22ff      	movs	r2, #255	@ 0xff
 8010f84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2220      	movs	r2, #32
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	5499      	strb	r1, [r3, r2]

  return status;
 8010f8e:	2313      	movs	r3, #19
 8010f90:	18fb      	adds	r3, r7, r3
 8010f92:	781b      	ldrb	r3, [r3, #0]
}
 8010f94:	0018      	movs	r0, r3
 8010f96:	46bd      	mov	sp, r7
 8010f98:	b006      	add	sp, #24
 8010f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8010f9c:	007f7f7f 	.word	0x007f7f7f
 8010fa0:	fffbffff 	.word	0xfffbffff

08010fa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010fac:	2300      	movs	r3, #0
 8010fae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8010ff0 <HAL_RTC_WaitForSynchro+0x4c>)
 8010fb6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010fb8:	f7f9 f9e0 	bl	800a37c <HAL_GetTick>
 8010fbc:	0003      	movs	r3, r0
 8010fbe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010fc0:	e00a      	b.n	8010fd8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010fc2:	f7f9 f9db 	bl	800a37c <HAL_GetTick>
 8010fc6:	0002      	movs	r2, r0
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	1ad2      	subs	r2, r2, r3
 8010fcc:	23fa      	movs	r3, #250	@ 0xfa
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d901      	bls.n	8010fd8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010fd4:	2303      	movs	r3, #3
 8010fd6:	e006      	b.n	8010fe6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	2220      	movs	r2, #32
 8010fe0:	4013      	ands	r3, r2
 8010fe2:	d0ee      	beq.n	8010fc2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010fe4:	2300      	movs	r3, #0
}
 8010fe6:	0018      	movs	r0, r3
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	b004      	add	sp, #16
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	46c0      	nop			@ (mov r8, r8)
 8010ff0:	0001ff5f 	.word	0x0001ff5f

08010ff4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8011000:	230f      	movs	r3, #15
 8011002:	18fb      	adds	r3, r7, r3
 8011004:	2200      	movs	r2, #0
 8011006:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	2240      	movs	r2, #64	@ 0x40
 8011010:	4013      	ands	r3, r2
 8011012:	d12c      	bne.n	801106e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	68da      	ldr	r2, [r3, #12]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	2180      	movs	r1, #128	@ 0x80
 8011020:	430a      	orrs	r2, r1
 8011022:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011024:	f7f9 f9aa 	bl	800a37c <HAL_GetTick>
 8011028:	0003      	movs	r3, r0
 801102a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801102c:	e014      	b.n	8011058 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801102e:	f7f9 f9a5 	bl	800a37c <HAL_GetTick>
 8011032:	0002      	movs	r2, r0
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	1ad2      	subs	r2, r2, r3
 8011038:	200f      	movs	r0, #15
 801103a:	183b      	adds	r3, r7, r0
 801103c:	1839      	adds	r1, r7, r0
 801103e:	7809      	ldrb	r1, [r1, #0]
 8011040:	7019      	strb	r1, [r3, #0]
 8011042:	23fa      	movs	r3, #250	@ 0xfa
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	429a      	cmp	r2, r3
 8011048:	d906      	bls.n	8011058 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2221      	movs	r2, #33	@ 0x21
 801104e:	2104      	movs	r1, #4
 8011050:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8011052:	183b      	adds	r3, r7, r0
 8011054:	2201      	movs	r2, #1
 8011056:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	2240      	movs	r2, #64	@ 0x40
 8011060:	4013      	ands	r3, r2
 8011062:	d104      	bne.n	801106e <RTC_EnterInitMode+0x7a>
 8011064:	230f      	movs	r3, #15
 8011066:	18fb      	adds	r3, r7, r3
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	2b01      	cmp	r3, #1
 801106c:	d1df      	bne.n	801102e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801106e:	230f      	movs	r3, #15
 8011070:	18fb      	adds	r3, r7, r3
 8011072:	781b      	ldrb	r3, [r3, #0]
}
 8011074:	0018      	movs	r0, r3
 8011076:	46bd      	mov	sp, r7
 8011078:	b004      	add	sp, #16
 801107a:	bd80      	pop	{r7, pc}

0801107c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801107c:	b590      	push	{r4, r7, lr}
 801107e:	b085      	sub	sp, #20
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011084:	240f      	movs	r4, #15
 8011086:	193b      	adds	r3, r7, r4
 8011088:	2200      	movs	r2, #0
 801108a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	68da      	ldr	r2, [r3, #12]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2180      	movs	r1, #128	@ 0x80
 8011098:	438a      	bics	r2, r1
 801109a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	2220      	movs	r2, #32
 80110a4:	4013      	ands	r3, r2
 80110a6:	d10c      	bne.n	80110c2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	0018      	movs	r0, r3
 80110ac:	f7ff ff7a 	bl	8010fa4 <HAL_RTC_WaitForSynchro>
 80110b0:	1e03      	subs	r3, r0, #0
 80110b2:	d006      	beq.n	80110c2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2221      	movs	r2, #33	@ 0x21
 80110b8:	2104      	movs	r1, #4
 80110ba:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80110bc:	193b      	adds	r3, r7, r4
 80110be:	2201      	movs	r2, #1
 80110c0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80110c2:	230f      	movs	r3, #15
 80110c4:	18fb      	adds	r3, r7, r3
 80110c6:	781b      	ldrb	r3, [r3, #0]
}
 80110c8:	0018      	movs	r0, r3
 80110ca:	46bd      	mov	sp, r7
 80110cc:	b005      	add	sp, #20
 80110ce:	bd90      	pop	{r4, r7, pc}

080110d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	0002      	movs	r2, r0
 80110d8:	1dfb      	adds	r3, r7, #7
 80110da:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80110dc:	2300      	movs	r3, #0
 80110de:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80110e0:	e007      	b.n	80110f2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3301      	adds	r3, #1
 80110e6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80110e8:	1dfb      	adds	r3, r7, #7
 80110ea:	1dfa      	adds	r2, r7, #7
 80110ec:	7812      	ldrb	r2, [r2, #0]
 80110ee:	3a0a      	subs	r2, #10
 80110f0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80110f2:	1dfb      	adds	r3, r7, #7
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	2b09      	cmp	r3, #9
 80110f8:	d8f3      	bhi.n	80110e2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	011b      	lsls	r3, r3, #4
 8011100:	b2da      	uxtb	r2, r3
 8011102:	1dfb      	adds	r3, r7, #7
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	4313      	orrs	r3, r2
 8011108:	b2db      	uxtb	r3, r3
}
 801110a:	0018      	movs	r0, r3
 801110c:	46bd      	mov	sp, r7
 801110e:	b004      	add	sp, #16
 8011110:	bd80      	pop	{r7, pc}
	...

08011114 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b086      	sub	sp, #24
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8011120:	2300      	movs	r3, #0
 8011122:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2220      	movs	r2, #32
 8011128:	5c9b      	ldrb	r3, [r3, r2]
 801112a:	2b01      	cmp	r3, #1
 801112c:	d101      	bne.n	8011132 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 801112e:	2302      	movs	r3, #2
 8011130:	e096      	b.n	8011260 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2220      	movs	r2, #32
 8011136:	2101      	movs	r1, #1
 8011138:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2221      	movs	r2, #33	@ 0x21
 801113e:	2102      	movs	r1, #2
 8011140:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	22ca      	movs	r2, #202	@ 0xca
 8011148:	625a      	str	r2, [r3, #36]	@ 0x24
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2253      	movs	r2, #83	@ 0x53
 8011150:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	689a      	ldr	r2, [r3, #8]
 8011158:	2380      	movs	r3, #128	@ 0x80
 801115a:	00db      	lsls	r3, r3, #3
 801115c:	4013      	ands	r3, r2
 801115e:	d021      	beq.n	80111a4 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8011160:	f7f9 f90c 	bl	800a37c <HAL_GetTick>
 8011164:	0003      	movs	r3, r0
 8011166:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011168:	e016      	b.n	8011198 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801116a:	f7f9 f907 	bl	800a37c <HAL_GetTick>
 801116e:	0002      	movs	r2, r0
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	1ad2      	subs	r2, r2, r3
 8011174:	23fa      	movs	r3, #250	@ 0xfa
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	429a      	cmp	r2, r3
 801117a:	d90d      	bls.n	8011198 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	22ff      	movs	r2, #255	@ 0xff
 8011182:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2221      	movs	r2, #33	@ 0x21
 8011188:	2103      	movs	r1, #3
 801118a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2220      	movs	r2, #32
 8011190:	2100      	movs	r1, #0
 8011192:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011194:	2303      	movs	r3, #3
 8011196:	e063      	b.n	8011260 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	2204      	movs	r2, #4
 80111a0:	4013      	ands	r3, r2
 80111a2:	d1e2      	bne.n	801116a <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	689a      	ldr	r2, [r3, #8]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	492e      	ldr	r1, [pc, #184]	@ (8011268 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 80111b0:	400a      	ands	r2, r1
 80111b2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	22ff      	movs	r2, #255	@ 0xff
 80111bc:	401a      	ands	r2, r3
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	492a      	ldr	r1, [pc, #168]	@ (801126c <HAL_RTCEx_SetWakeUpTimer+0x158>)
 80111c4:	430a      	orrs	r2, r1
 80111c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80111c8:	f7f9 f8d8 	bl	800a37c <HAL_GetTick>
 80111cc:	0003      	movs	r3, r0
 80111ce:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80111d0:	e016      	b.n	8011200 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80111d2:	f7f9 f8d3 	bl	800a37c <HAL_GetTick>
 80111d6:	0002      	movs	r2, r0
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	1ad2      	subs	r2, r2, r3
 80111dc:	23fa      	movs	r3, #250	@ 0xfa
 80111de:	009b      	lsls	r3, r3, #2
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d90d      	bls.n	8011200 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	22ff      	movs	r2, #255	@ 0xff
 80111ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2221      	movs	r2, #33	@ 0x21
 80111f0:	2103      	movs	r1, #3
 80111f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2220      	movs	r2, #32
 80111f8:	2100      	movs	r1, #0
 80111fa:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80111fc:	2303      	movs	r3, #3
 80111fe:	e02f      	b.n	8011260 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	68db      	ldr	r3, [r3, #12]
 8011206:	2204      	movs	r2, #4
 8011208:	4013      	ands	r3, r2
 801120a:	d0e2      	beq.n	80111d2 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	689a      	ldr	r2, [r3, #8]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2107      	movs	r1, #7
 8011218:	438a      	bics	r2, r1
 801121a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	6899      	ldr	r1, [r3, #8]
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	430a      	orrs	r2, r1
 801122a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	68ba      	ldr	r2, [r7, #8]
 8011232:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	689a      	ldr	r2, [r3, #8]
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2180      	movs	r1, #128	@ 0x80
 8011240:	00c9      	lsls	r1, r1, #3
 8011242:	430a      	orrs	r2, r1
 8011244:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	22ff      	movs	r2, #255	@ 0xff
 801124c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2221      	movs	r2, #33	@ 0x21
 8011252:	2101      	movs	r1, #1
 8011254:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2220      	movs	r2, #32
 801125a:	2100      	movs	r1, #0
 801125c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801125e:	2300      	movs	r3, #0
}
 8011260:	0018      	movs	r0, r3
 8011262:	46bd      	mov	sp, r7
 8011264:	b006      	add	sp, #24
 8011266:	bd80      	pop	{r7, pc}
 8011268:	fffffbff 	.word	0xfffffbff
 801126c:	fffffb7f 	.word	0xfffffb7f

08011270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d101      	bne.n	8011282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801127e:	2301      	movs	r3, #1
 8011280:	e032      	b.n	80112e8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2239      	movs	r2, #57	@ 0x39
 8011286:	5c9b      	ldrb	r3, [r3, r2]
 8011288:	b2db      	uxtb	r3, r3
 801128a:	2b00      	cmp	r3, #0
 801128c:	d107      	bne.n	801129e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2238      	movs	r2, #56	@ 0x38
 8011292:	2100      	movs	r1, #0
 8011294:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	0018      	movs	r0, r3
 801129a:	f7f8 fa3d 	bl	8009718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2239      	movs	r2, #57	@ 0x39
 80112a2:	2102      	movs	r1, #2
 80112a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3304      	adds	r3, #4
 80112ae:	0019      	movs	r1, r3
 80112b0:	0010      	movs	r0, r2
 80112b2:	f000 f975 	bl	80115a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	223e      	movs	r2, #62	@ 0x3e
 80112ba:	2101      	movs	r1, #1
 80112bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	223a      	movs	r2, #58	@ 0x3a
 80112c2:	2101      	movs	r1, #1
 80112c4:	5499      	strb	r1, [r3, r2]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	223b      	movs	r2, #59	@ 0x3b
 80112ca:	2101      	movs	r1, #1
 80112cc:	5499      	strb	r1, [r3, r2]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	223c      	movs	r2, #60	@ 0x3c
 80112d2:	2101      	movs	r1, #1
 80112d4:	5499      	strb	r1, [r3, r2]
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	223d      	movs	r2, #61	@ 0x3d
 80112da:	2101      	movs	r1, #1
 80112dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2239      	movs	r2, #57	@ 0x39
 80112e2:	2101      	movs	r1, #1
 80112e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	0018      	movs	r0, r3
 80112ea:	46bd      	mov	sp, r7
 80112ec:	b002      	add	sp, #8
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d108      	bne.n	8011312 <HAL_TIM_PWM_Start+0x22>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	223a      	movs	r2, #58	@ 0x3a
 8011304:	5c9b      	ldrb	r3, [r3, r2]
 8011306:	b2db      	uxtb	r3, r3
 8011308:	3b01      	subs	r3, #1
 801130a:	1e5a      	subs	r2, r3, #1
 801130c:	4193      	sbcs	r3, r2
 801130e:	b2db      	uxtb	r3, r3
 8011310:	e01f      	b.n	8011352 <HAL_TIM_PWM_Start+0x62>
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	2b04      	cmp	r3, #4
 8011316:	d108      	bne.n	801132a <HAL_TIM_PWM_Start+0x3a>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	223b      	movs	r2, #59	@ 0x3b
 801131c:	5c9b      	ldrb	r3, [r3, r2]
 801131e:	b2db      	uxtb	r3, r3
 8011320:	3b01      	subs	r3, #1
 8011322:	1e5a      	subs	r2, r3, #1
 8011324:	4193      	sbcs	r3, r2
 8011326:	b2db      	uxtb	r3, r3
 8011328:	e013      	b.n	8011352 <HAL_TIM_PWM_Start+0x62>
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b08      	cmp	r3, #8
 801132e:	d108      	bne.n	8011342 <HAL_TIM_PWM_Start+0x52>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	223c      	movs	r2, #60	@ 0x3c
 8011334:	5c9b      	ldrb	r3, [r3, r2]
 8011336:	b2db      	uxtb	r3, r3
 8011338:	3b01      	subs	r3, #1
 801133a:	1e5a      	subs	r2, r3, #1
 801133c:	4193      	sbcs	r3, r2
 801133e:	b2db      	uxtb	r3, r3
 8011340:	e007      	b.n	8011352 <HAL_TIM_PWM_Start+0x62>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	223d      	movs	r2, #61	@ 0x3d
 8011346:	5c9b      	ldrb	r3, [r3, r2]
 8011348:	b2db      	uxtb	r3, r3
 801134a:	3b01      	subs	r3, #1
 801134c:	1e5a      	subs	r2, r3, #1
 801134e:	4193      	sbcs	r3, r2
 8011350:	b2db      	uxtb	r3, r3
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8011356:	2301      	movs	r3, #1
 8011358:	e052      	b.n	8011400 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d104      	bne.n	801136a <HAL_TIM_PWM_Start+0x7a>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	223a      	movs	r2, #58	@ 0x3a
 8011364:	2102      	movs	r1, #2
 8011366:	5499      	strb	r1, [r3, r2]
 8011368:	e013      	b.n	8011392 <HAL_TIM_PWM_Start+0xa2>
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	2b04      	cmp	r3, #4
 801136e:	d104      	bne.n	801137a <HAL_TIM_PWM_Start+0x8a>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	223b      	movs	r2, #59	@ 0x3b
 8011374:	2102      	movs	r1, #2
 8011376:	5499      	strb	r1, [r3, r2]
 8011378:	e00b      	b.n	8011392 <HAL_TIM_PWM_Start+0xa2>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	2b08      	cmp	r3, #8
 801137e:	d104      	bne.n	801138a <HAL_TIM_PWM_Start+0x9a>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	223c      	movs	r2, #60	@ 0x3c
 8011384:	2102      	movs	r1, #2
 8011386:	5499      	strb	r1, [r3, r2]
 8011388:	e003      	b.n	8011392 <HAL_TIM_PWM_Start+0xa2>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	223d      	movs	r2, #61	@ 0x3d
 801138e:	2102      	movs	r1, #2
 8011390:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	6839      	ldr	r1, [r7, #0]
 8011398:	2201      	movs	r2, #1
 801139a:	0018      	movs	r0, r3
 801139c:	f000 fa62 	bl	8011864 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	2380      	movs	r3, #128	@ 0x80
 80113a6:	05db      	lsls	r3, r3, #23
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d00e      	beq.n	80113ca <HAL_TIM_PWM_Start+0xda>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4a15      	ldr	r2, [pc, #84]	@ (8011408 <HAL_TIM_PWM_Start+0x118>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d009      	beq.n	80113ca <HAL_TIM_PWM_Start+0xda>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4a14      	ldr	r2, [pc, #80]	@ (801140c <HAL_TIM_PWM_Start+0x11c>)
 80113bc:	4293      	cmp	r3, r2
 80113be:	d004      	beq.n	80113ca <HAL_TIM_PWM_Start+0xda>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4a12      	ldr	r2, [pc, #72]	@ (8011410 <HAL_TIM_PWM_Start+0x120>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d111      	bne.n	80113ee <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	2207      	movs	r2, #7
 80113d2:	4013      	ands	r3, r2
 80113d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2b06      	cmp	r3, #6
 80113da:	d010      	beq.n	80113fe <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2101      	movs	r1, #1
 80113e8:	430a      	orrs	r2, r1
 80113ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80113ec:	e007      	b.n	80113fe <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2101      	movs	r1, #1
 80113fa:	430a      	orrs	r2, r1
 80113fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	0018      	movs	r0, r3
 8011402:	46bd      	mov	sp, r7
 8011404:	b004      	add	sp, #16
 8011406:	bd80      	pop	{r7, pc}
 8011408:	40000400 	.word	0x40000400
 801140c:	40010800 	.word	0x40010800
 8011410:	40011400 	.word	0x40011400

08011414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b086      	sub	sp, #24
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011420:	2317      	movs	r3, #23
 8011422:	18fb      	adds	r3, r7, r3
 8011424:	2200      	movs	r2, #0
 8011426:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2238      	movs	r2, #56	@ 0x38
 801142c:	5c9b      	ldrb	r3, [r3, r2]
 801142e:	2b01      	cmp	r3, #1
 8011430:	d101      	bne.n	8011436 <HAL_TIM_PWM_ConfigChannel+0x22>
 8011432:	2302      	movs	r3, #2
 8011434:	e0ad      	b.n	8011592 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2238      	movs	r2, #56	@ 0x38
 801143a:	2101      	movs	r1, #1
 801143c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b0c      	cmp	r3, #12
 8011442:	d100      	bne.n	8011446 <HAL_TIM_PWM_ConfigChannel+0x32>
 8011444:	e076      	b.n	8011534 <HAL_TIM_PWM_ConfigChannel+0x120>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b0c      	cmp	r3, #12
 801144a:	d900      	bls.n	801144e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801144c:	e095      	b.n	801157a <HAL_TIM_PWM_ConfigChannel+0x166>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2b08      	cmp	r3, #8
 8011452:	d04e      	beq.n	80114f2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2b08      	cmp	r3, #8
 8011458:	d900      	bls.n	801145c <HAL_TIM_PWM_ConfigChannel+0x48>
 801145a:	e08e      	b.n	801157a <HAL_TIM_PWM_ConfigChannel+0x166>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d003      	beq.n	801146a <HAL_TIM_PWM_ConfigChannel+0x56>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2b04      	cmp	r3, #4
 8011466:	d021      	beq.n	80114ac <HAL_TIM_PWM_ConfigChannel+0x98>
 8011468:	e087      	b.n	801157a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	68ba      	ldr	r2, [r7, #8]
 8011470:	0011      	movs	r1, r2
 8011472:	0018      	movs	r0, r3
 8011474:	f000 f8f2 	bl	801165c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	699a      	ldr	r2, [r3, #24]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2108      	movs	r1, #8
 8011484:	430a      	orrs	r2, r1
 8011486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	699a      	ldr	r2, [r3, #24]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2104      	movs	r1, #4
 8011494:	438a      	bics	r2, r1
 8011496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	6999      	ldr	r1, [r3, #24]
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	68da      	ldr	r2, [r3, #12]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	430a      	orrs	r2, r1
 80114a8:	619a      	str	r2, [r3, #24]
      break;
 80114aa:	e06b      	b.n	8011584 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	68ba      	ldr	r2, [r7, #8]
 80114b2:	0011      	movs	r1, r2
 80114b4:	0018      	movs	r0, r3
 80114b6:	f000 f90d 	bl	80116d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	699a      	ldr	r2, [r3, #24]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	2180      	movs	r1, #128	@ 0x80
 80114c6:	0109      	lsls	r1, r1, #4
 80114c8:	430a      	orrs	r2, r1
 80114ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	699a      	ldr	r2, [r3, #24]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	4931      	ldr	r1, [pc, #196]	@ (801159c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80114d8:	400a      	ands	r2, r1
 80114da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	6999      	ldr	r1, [r3, #24]
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	021a      	lsls	r2, r3, #8
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	430a      	orrs	r2, r1
 80114ee:	619a      	str	r2, [r3, #24]
      break;
 80114f0:	e048      	b.n	8011584 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	68ba      	ldr	r2, [r7, #8]
 80114f8:	0011      	movs	r1, r2
 80114fa:	0018      	movs	r0, r3
 80114fc:	f000 f92c 	bl	8011758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	69da      	ldr	r2, [r3, #28]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2108      	movs	r1, #8
 801150c:	430a      	orrs	r2, r1
 801150e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	69da      	ldr	r2, [r3, #28]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2104      	movs	r1, #4
 801151c:	438a      	bics	r2, r1
 801151e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	69d9      	ldr	r1, [r3, #28]
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	68da      	ldr	r2, [r3, #12]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	430a      	orrs	r2, r1
 8011530:	61da      	str	r2, [r3, #28]
      break;
 8011532:	e027      	b.n	8011584 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	0011      	movs	r1, r2
 801153c:	0018      	movs	r0, r3
 801153e:	f000 f94b 	bl	80117d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	69da      	ldr	r2, [r3, #28]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2180      	movs	r1, #128	@ 0x80
 801154e:	0109      	lsls	r1, r1, #4
 8011550:	430a      	orrs	r2, r1
 8011552:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	69da      	ldr	r2, [r3, #28]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	490f      	ldr	r1, [pc, #60]	@ (801159c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8011560:	400a      	ands	r2, r1
 8011562:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	69d9      	ldr	r1, [r3, #28]
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	68db      	ldr	r3, [r3, #12]
 801156e:	021a      	lsls	r2, r3, #8
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	430a      	orrs	r2, r1
 8011576:	61da      	str	r2, [r3, #28]
      break;
 8011578:	e004      	b.n	8011584 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801157a:	2317      	movs	r3, #23
 801157c:	18fb      	adds	r3, r7, r3
 801157e:	2201      	movs	r2, #1
 8011580:	701a      	strb	r2, [r3, #0]
      break;
 8011582:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	2238      	movs	r2, #56	@ 0x38
 8011588:	2100      	movs	r1, #0
 801158a:	5499      	strb	r1, [r3, r2]

  return status;
 801158c:	2317      	movs	r3, #23
 801158e:	18fb      	adds	r3, r7, r3
 8011590:	781b      	ldrb	r3, [r3, #0]
}
 8011592:	0018      	movs	r0, r3
 8011594:	46bd      	mov	sp, r7
 8011596:	b006      	add	sp, #24
 8011598:	bd80      	pop	{r7, pc}
 801159a:	46c0      	nop			@ (mov r8, r8)
 801159c:	fffffbff 	.word	0xfffffbff

080115a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115b0:	687a      	ldr	r2, [r7, #4]
 80115b2:	2380      	movs	r3, #128	@ 0x80
 80115b4:	05db      	lsls	r3, r3, #23
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d00b      	beq.n	80115d2 <TIM_Base_SetConfig+0x32>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4a23      	ldr	r2, [pc, #140]	@ (801164c <TIM_Base_SetConfig+0xac>)
 80115be:	4293      	cmp	r3, r2
 80115c0:	d007      	beq.n	80115d2 <TIM_Base_SetConfig+0x32>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4a22      	ldr	r2, [pc, #136]	@ (8011650 <TIM_Base_SetConfig+0xb0>)
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d003      	beq.n	80115d2 <TIM_Base_SetConfig+0x32>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	4a21      	ldr	r2, [pc, #132]	@ (8011654 <TIM_Base_SetConfig+0xb4>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d108      	bne.n	80115e4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2270      	movs	r2, #112	@ 0x70
 80115d6:	4393      	bics	r3, r2
 80115d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	68fa      	ldr	r2, [r7, #12]
 80115e0:	4313      	orrs	r3, r2
 80115e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	2380      	movs	r3, #128	@ 0x80
 80115e8:	05db      	lsls	r3, r3, #23
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d00b      	beq.n	8011606 <TIM_Base_SetConfig+0x66>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4a16      	ldr	r2, [pc, #88]	@ (801164c <TIM_Base_SetConfig+0xac>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d007      	beq.n	8011606 <TIM_Base_SetConfig+0x66>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4a15      	ldr	r2, [pc, #84]	@ (8011650 <TIM_Base_SetConfig+0xb0>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d003      	beq.n	8011606 <TIM_Base_SetConfig+0x66>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4a14      	ldr	r2, [pc, #80]	@ (8011654 <TIM_Base_SetConfig+0xb4>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d108      	bne.n	8011618 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	4a13      	ldr	r2, [pc, #76]	@ (8011658 <TIM_Base_SetConfig+0xb8>)
 801160a:	4013      	ands	r3, r2
 801160c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	68fa      	ldr	r2, [r7, #12]
 8011614:	4313      	orrs	r3, r2
 8011616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2280      	movs	r2, #128	@ 0x80
 801161c:	4393      	bics	r3, r2
 801161e:	001a      	movs	r2, r3
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	691b      	ldr	r3, [r3, #16]
 8011624:	4313      	orrs	r3, r2
 8011626:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	689a      	ldr	r2, [r3, #8]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2201      	movs	r2, #1
 8011642:	615a      	str	r2, [r3, #20]
}
 8011644:	46c0      	nop			@ (mov r8, r8)
 8011646:	46bd      	mov	sp, r7
 8011648:	b004      	add	sp, #16
 801164a:	bd80      	pop	{r7, pc}
 801164c:	40000400 	.word	0x40000400
 8011650:	40010800 	.word	0x40010800
 8011654:	40011400 	.word	0x40011400
 8011658:	fffffcff 	.word	0xfffffcff

0801165c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b086      	sub	sp, #24
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	2201      	movs	r2, #1
 801166c:	4393      	bics	r3, r2
 801166e:	001a      	movs	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6a1b      	ldr	r3, [r3, #32]
 8011678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	699b      	ldr	r3, [r3, #24]
 8011684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2270      	movs	r2, #112	@ 0x70
 801168a:	4393      	bics	r3, r2
 801168c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2203      	movs	r2, #3
 8011692:	4393      	bics	r3, r2
 8011694:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	68fa      	ldr	r2, [r7, #12]
 801169c:	4313      	orrs	r3, r2
 801169e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	2202      	movs	r2, #2
 80116a4:	4393      	bics	r3, r2
 80116a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	697a      	ldr	r2, [r7, #20]
 80116ae:	4313      	orrs	r3, r2
 80116b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	693a      	ldr	r2, [r7, #16]
 80116b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	697a      	ldr	r2, [r7, #20]
 80116ca:	621a      	str	r2, [r3, #32]
}
 80116cc:	46c0      	nop			@ (mov r8, r8)
 80116ce:	46bd      	mov	sp, r7
 80116d0:	b006      	add	sp, #24
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b086      	sub	sp, #24
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6a1b      	ldr	r3, [r3, #32]
 80116e2:	2210      	movs	r2, #16
 80116e4:	4393      	bics	r3, r2
 80116e6:	001a      	movs	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a1b      	ldr	r3, [r3, #32]
 80116f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	699b      	ldr	r3, [r3, #24]
 80116fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	4a13      	ldr	r2, [pc, #76]	@ (8011750 <TIM_OC2_SetConfig+0x7c>)
 8011702:	4013      	ands	r3, r2
 8011704:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	4a12      	ldr	r2, [pc, #72]	@ (8011754 <TIM_OC2_SetConfig+0x80>)
 801170a:	4013      	ands	r3, r2
 801170c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	021b      	lsls	r3, r3, #8
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	4313      	orrs	r3, r2
 8011718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	2220      	movs	r2, #32
 801171e:	4393      	bics	r3, r2
 8011720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	689b      	ldr	r3, [r3, #8]
 8011726:	011b      	lsls	r3, r3, #4
 8011728:	697a      	ldr	r2, [r7, #20]
 801172a:	4313      	orrs	r3, r2
 801172c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	693a      	ldr	r2, [r7, #16]
 8011732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	68fa      	ldr	r2, [r7, #12]
 8011738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	685a      	ldr	r2, [r3, #4]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	697a      	ldr	r2, [r7, #20]
 8011746:	621a      	str	r2, [r3, #32]
}
 8011748:	46c0      	nop			@ (mov r8, r8)
 801174a:	46bd      	mov	sp, r7
 801174c:	b006      	add	sp, #24
 801174e:	bd80      	pop	{r7, pc}
 8011750:	ffff8fff 	.word	0xffff8fff
 8011754:	fffffcff 	.word	0xfffffcff

08011758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b086      	sub	sp, #24
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6a1b      	ldr	r3, [r3, #32]
 8011766:	4a1a      	ldr	r2, [pc, #104]	@ (80117d0 <TIM_OC3_SetConfig+0x78>)
 8011768:	401a      	ands	r2, r3
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a1b      	ldr	r3, [r3, #32]
 8011772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	69db      	ldr	r3, [r3, #28]
 801177e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2270      	movs	r2, #112	@ 0x70
 8011784:	4393      	bics	r3, r2
 8011786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2203      	movs	r2, #3
 801178c:	4393      	bics	r3, r2
 801178e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	68fa      	ldr	r2, [r7, #12]
 8011796:	4313      	orrs	r3, r2
 8011798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	4a0d      	ldr	r2, [pc, #52]	@ (80117d4 <TIM_OC3_SetConfig+0x7c>)
 801179e:	4013      	ands	r3, r2
 80117a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	689b      	ldr	r3, [r3, #8]
 80117a6:	021b      	lsls	r3, r3, #8
 80117a8:	697a      	ldr	r2, [r7, #20]
 80117aa:	4313      	orrs	r3, r2
 80117ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	693a      	ldr	r2, [r7, #16]
 80117b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	68fa      	ldr	r2, [r7, #12]
 80117b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	685a      	ldr	r2, [r3, #4]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	621a      	str	r2, [r3, #32]
}
 80117c8:	46c0      	nop			@ (mov r8, r8)
 80117ca:	46bd      	mov	sp, r7
 80117cc:	b006      	add	sp, #24
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	fffffeff 	.word	0xfffffeff
 80117d4:	fffffdff 	.word	0xfffffdff

080117d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a1b      	ldr	r3, [r3, #32]
 80117e6:	4a1b      	ldr	r2, [pc, #108]	@ (8011854 <TIM_OC4_SetConfig+0x7c>)
 80117e8:	401a      	ands	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6a1b      	ldr	r3, [r3, #32]
 80117f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	69db      	ldr	r3, [r3, #28]
 80117fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	4a15      	ldr	r2, [pc, #84]	@ (8011858 <TIM_OC4_SetConfig+0x80>)
 8011804:	4013      	ands	r3, r2
 8011806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	4a14      	ldr	r2, [pc, #80]	@ (801185c <TIM_OC4_SetConfig+0x84>)
 801180c:	4013      	ands	r3, r2
 801180e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	021b      	lsls	r3, r3, #8
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	4313      	orrs	r3, r2
 801181a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	4a10      	ldr	r2, [pc, #64]	@ (8011860 <TIM_OC4_SetConfig+0x88>)
 8011820:	4013      	ands	r3, r2
 8011822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	031b      	lsls	r3, r3, #12
 801182a:	697a      	ldr	r2, [r7, #20]
 801182c:	4313      	orrs	r3, r2
 801182e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	693a      	ldr	r2, [r7, #16]
 8011834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	685a      	ldr	r2, [r3, #4]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	621a      	str	r2, [r3, #32]
}
 801184a:	46c0      	nop			@ (mov r8, r8)
 801184c:	46bd      	mov	sp, r7
 801184e:	b006      	add	sp, #24
 8011850:	bd80      	pop	{r7, pc}
 8011852:	46c0      	nop			@ (mov r8, r8)
 8011854:	ffffefff 	.word	0xffffefff
 8011858:	ffff8fff 	.word	0xffff8fff
 801185c:	fffffcff 	.word	0xfffffcff
 8011860:	ffffdfff 	.word	0xffffdfff

08011864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	221f      	movs	r2, #31
 8011874:	4013      	ands	r3, r2
 8011876:	2201      	movs	r2, #1
 8011878:	409a      	lsls	r2, r3
 801187a:	0013      	movs	r3, r2
 801187c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6a1b      	ldr	r3, [r3, #32]
 8011882:	697a      	ldr	r2, [r7, #20]
 8011884:	43d2      	mvns	r2, r2
 8011886:	401a      	ands	r2, r3
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	6a1a      	ldr	r2, [r3, #32]
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	211f      	movs	r1, #31
 8011894:	400b      	ands	r3, r1
 8011896:	6879      	ldr	r1, [r7, #4]
 8011898:	4099      	lsls	r1, r3
 801189a:	000b      	movs	r3, r1
 801189c:	431a      	orrs	r2, r3
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	621a      	str	r2, [r3, #32]
}
 80118a2:	46c0      	nop			@ (mov r8, r8)
 80118a4:	46bd      	mov	sp, r7
 80118a6:	b006      	add	sp, #24
 80118a8:	bd80      	pop	{r7, pc}
	...

080118ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2238      	movs	r2, #56	@ 0x38
 80118ba:	5c9b      	ldrb	r3, [r3, r2]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d101      	bne.n	80118c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80118c0:	2302      	movs	r3, #2
 80118c2:	e047      	b.n	8011954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2238      	movs	r2, #56	@ 0x38
 80118c8:	2101      	movs	r1, #1
 80118ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2239      	movs	r2, #57	@ 0x39
 80118d0:	2102      	movs	r1, #2
 80118d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	689b      	ldr	r3, [r3, #8]
 80118e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2270      	movs	r2, #112	@ 0x70
 80118e8:	4393      	bics	r3, r2
 80118ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	4313      	orrs	r3, r2
 80118f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	68fa      	ldr	r2, [r7, #12]
 80118fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	2380      	movs	r3, #128	@ 0x80
 8011904:	05db      	lsls	r3, r3, #23
 8011906:	429a      	cmp	r2, r3
 8011908:	d00e      	beq.n	8011928 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	4a13      	ldr	r2, [pc, #76]	@ (801195c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8011910:	4293      	cmp	r3, r2
 8011912:	d009      	beq.n	8011928 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	4a11      	ldr	r2, [pc, #68]	@ (8011960 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801191a:	4293      	cmp	r3, r2
 801191c:	d004      	beq.n	8011928 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	4a10      	ldr	r2, [pc, #64]	@ (8011964 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8011924:	4293      	cmp	r3, r2
 8011926:	d10c      	bne.n	8011942 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	2280      	movs	r2, #128	@ 0x80
 801192c:	4393      	bics	r3, r2
 801192e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	68ba      	ldr	r2, [r7, #8]
 8011936:	4313      	orrs	r3, r2
 8011938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	68ba      	ldr	r2, [r7, #8]
 8011940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2239      	movs	r2, #57	@ 0x39
 8011946:	2101      	movs	r1, #1
 8011948:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2238      	movs	r2, #56	@ 0x38
 801194e:	2100      	movs	r1, #0
 8011950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011952:	2300      	movs	r3, #0
}
 8011954:	0018      	movs	r0, r3
 8011956:	46bd      	mov	sp, r7
 8011958:	b004      	add	sp, #16
 801195a:	bd80      	pop	{r7, pc}
 801195c:	40000400 	.word	0x40000400
 8011960:	40010800 	.word	0x40010800
 8011964:	40011400 	.word	0x40011400

08011968 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2238      	movs	r2, #56	@ 0x38
 8011976:	5c9b      	ldrb	r3, [r3, r2]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d101      	bne.n	8011980 <HAL_TIMEx_RemapConfig+0x18>
 801197c:	2302      	movs	r3, #2
 801197e:	e00c      	b.n	801199a <HAL_TIMEx_RemapConfig+0x32>
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2238      	movs	r2, #56	@ 0x38
 8011984:	2101      	movs	r1, #1
 8011986:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2238      	movs	r2, #56	@ 0x38
 8011994:	2100      	movs	r1, #0
 8011996:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011998:	2300      	movs	r3, #0
}
 801199a:	0018      	movs	r0, r3
 801199c:	46bd      	mov	sp, r7
 801199e:	b002      	add	sp, #8
 80119a0:	bd80      	pop	{r7, pc}
	...

080119a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d101      	bne.n	80119b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80119b2:	2301      	movs	r3, #1
 80119b4:	e053      	b.n	8011a5e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d116      	bne.n	80119ec <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2278      	movs	r2, #120	@ 0x78
 80119c2:	2100      	movs	r1, #0
 80119c4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	0018      	movs	r0, r3
 80119ca:	f000 fd07 	bl	80123dc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	22b0      	movs	r2, #176	@ 0xb0
 80119d2:	589b      	ldr	r3, [r3, r2]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d103      	bne.n	80119e0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	21b0      	movs	r1, #176	@ 0xb0
 80119dc:	4a22      	ldr	r2, [pc, #136]	@ (8011a68 <HAL_UART_Init+0xc4>)
 80119de:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	22b0      	movs	r2, #176	@ 0xb0
 80119e4:	589b      	ldr	r3, [r3, r2]
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	0010      	movs	r0, r2
 80119ea:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2224      	movs	r2, #36	@ 0x24
 80119f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2101      	movs	r1, #1
 80119fe:	438a      	bics	r2, r1
 8011a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	0018      	movs	r0, r3
 8011a06:	f000 fd2d 	bl	8012464 <UART_SetConfig>
 8011a0a:	0003      	movs	r3, r0
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d101      	bne.n	8011a14 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8011a10:	2301      	movs	r3, #1
 8011a12:	e024      	b.n	8011a5e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d003      	beq.n	8011a24 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	0018      	movs	r0, r3
 8011a20:	f000 ffbe 	bl	80129a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	685a      	ldr	r2, [r3, #4]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	490f      	ldr	r1, [pc, #60]	@ (8011a6c <HAL_UART_Init+0xc8>)
 8011a30:	400a      	ands	r2, r1
 8011a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	689a      	ldr	r2, [r3, #8]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	212a      	movs	r1, #42	@ 0x2a
 8011a40:	438a      	bics	r2, r1
 8011a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2101      	movs	r1, #1
 8011a50:	430a      	orrs	r2, r1
 8011a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	0018      	movs	r0, r3
 8011a58:	f001 f856 	bl	8012b08 <UART_CheckIdleState>
 8011a5c:	0003      	movs	r3, r0
}
 8011a5e:	0018      	movs	r0, r3
 8011a60:	46bd      	mov	sp, r7
 8011a62:	b002      	add	sp, #8
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	46c0      	nop			@ (mov r8, r8)
 8011a68:	08009965 	.word	0x08009965
 8011a6c:	ffffb7ff 	.word	0xffffb7ff

08011a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b08a      	sub	sp, #40	@ 0x28
 8011a74:	af02      	add	r7, sp, #8
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	603b      	str	r3, [r7, #0]
 8011a7c:	1dbb      	adds	r3, r7, #6
 8011a7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a84:	2b20      	cmp	r3, #32
 8011a86:	d000      	beq.n	8011a8a <HAL_UART_Transmit+0x1a>
 8011a88:	e08c      	b.n	8011ba4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d003      	beq.n	8011a98 <HAL_UART_Transmit+0x28>
 8011a90:	1dbb      	adds	r3, r7, #6
 8011a92:	881b      	ldrh	r3, [r3, #0]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d101      	bne.n	8011a9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011a98:	2301      	movs	r3, #1
 8011a9a:	e084      	b.n	8011ba6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	689a      	ldr	r2, [r3, #8]
 8011aa0:	2380      	movs	r3, #128	@ 0x80
 8011aa2:	015b      	lsls	r3, r3, #5
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d109      	bne.n	8011abc <HAL_UART_Transmit+0x4c>
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	691b      	ldr	r3, [r3, #16]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d105      	bne.n	8011abc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	4013      	ands	r3, r2
 8011ab6:	d001      	beq.n	8011abc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8011ab8:	2301      	movs	r3, #1
 8011aba:	e074      	b.n	8011ba6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2284      	movs	r2, #132	@ 0x84
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2221      	movs	r2, #33	@ 0x21
 8011ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011aca:	f7f8 fc57 	bl	800a37c <HAL_GetTick>
 8011ace:	0003      	movs	r3, r0
 8011ad0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	1dba      	adds	r2, r7, #6
 8011ad6:	2150      	movs	r1, #80	@ 0x50
 8011ad8:	8812      	ldrh	r2, [r2, #0]
 8011ada:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	1dba      	adds	r2, r7, #6
 8011ae0:	2152      	movs	r1, #82	@ 0x52
 8011ae2:	8812      	ldrh	r2, [r2, #0]
 8011ae4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	689a      	ldr	r2, [r3, #8]
 8011aea:	2380      	movs	r3, #128	@ 0x80
 8011aec:	015b      	lsls	r3, r3, #5
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d108      	bne.n	8011b04 <HAL_UART_Transmit+0x94>
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	691b      	ldr	r3, [r3, #16]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d104      	bne.n	8011b04 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	61bb      	str	r3, [r7, #24]
 8011b02:	e003      	b.n	8011b0c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011b0c:	e02f      	b.n	8011b6e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011b0e:	697a      	ldr	r2, [r7, #20]
 8011b10:	68f8      	ldr	r0, [r7, #12]
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	0013      	movs	r3, r2
 8011b18:	2200      	movs	r2, #0
 8011b1a:	2180      	movs	r1, #128	@ 0x80
 8011b1c:	f001 f89c 	bl	8012c58 <UART_WaitOnFlagUntilTimeout>
 8011b20:	1e03      	subs	r3, r0, #0
 8011b22:	d004      	beq.n	8011b2e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2220      	movs	r2, #32
 8011b28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	e03b      	b.n	8011ba6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10b      	bne.n	8011b4c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	881b      	ldrh	r3, [r3, #0]
 8011b38:	001a      	movs	r2, r3
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	05d2      	lsls	r2, r2, #23
 8011b40:	0dd2      	lsrs	r2, r2, #23
 8011b42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	3302      	adds	r3, #2
 8011b48:	61bb      	str	r3, [r7, #24]
 8011b4a:	e007      	b.n	8011b5c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	781a      	ldrb	r2, [r3, #0]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	3301      	adds	r3, #1
 8011b5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2252      	movs	r2, #82	@ 0x52
 8011b60:	5a9b      	ldrh	r3, [r3, r2]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	3b01      	subs	r3, #1
 8011b66:	b299      	uxth	r1, r3
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2252      	movs	r2, #82	@ 0x52
 8011b6c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2252      	movs	r2, #82	@ 0x52
 8011b72:	5a9b      	ldrh	r3, [r3, r2]
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1c9      	bne.n	8011b0e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011b7a:	697a      	ldr	r2, [r7, #20]
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	9300      	str	r3, [sp, #0]
 8011b82:	0013      	movs	r3, r2
 8011b84:	2200      	movs	r2, #0
 8011b86:	2140      	movs	r1, #64	@ 0x40
 8011b88:	f001 f866 	bl	8012c58 <UART_WaitOnFlagUntilTimeout>
 8011b8c:	1e03      	subs	r3, r0, #0
 8011b8e:	d004      	beq.n	8011b9a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2220      	movs	r2, #32
 8011b94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8011b96:	2303      	movs	r3, #3
 8011b98:	e005      	b.n	8011ba6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2220      	movs	r2, #32
 8011b9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e000      	b.n	8011ba6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011ba4:	2302      	movs	r3, #2
  }
}
 8011ba6:	0018      	movs	r0, r3
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	b008      	add	sp, #32
 8011bac:	bd80      	pop	{r7, pc}
	...

08011bb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b088      	sub	sp, #32
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	1dbb      	adds	r3, r7, #6
 8011bbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011bc2:	2b20      	cmp	r3, #32
 8011bc4:	d000      	beq.n	8011bc8 <HAL_UART_Transmit_DMA+0x18>
 8011bc6:	e077      	b.n	8011cb8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d003      	beq.n	8011bd6 <HAL_UART_Transmit_DMA+0x26>
 8011bce:	1dbb      	adds	r3, r7, #6
 8011bd0:	881b      	ldrh	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d101      	bne.n	8011bda <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	e06f      	b.n	8011cba <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	689a      	ldr	r2, [r3, #8]
 8011bde:	2380      	movs	r3, #128	@ 0x80
 8011be0:	015b      	lsls	r3, r3, #5
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d109      	bne.n	8011bfa <HAL_UART_Transmit_DMA+0x4a>
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	691b      	ldr	r3, [r3, #16]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d105      	bne.n	8011bfa <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	4013      	ands	r3, r2
 8011bf4:	d001      	beq.n	8011bfa <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	e05f      	b.n	8011cba <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	68ba      	ldr	r2, [r7, #8]
 8011bfe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	1dba      	adds	r2, r7, #6
 8011c04:	2150      	movs	r1, #80	@ 0x50
 8011c06:	8812      	ldrh	r2, [r2, #0]
 8011c08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	1dba      	adds	r2, r7, #6
 8011c0e:	2152      	movs	r1, #82	@ 0x52
 8011c10:	8812      	ldrh	r2, [r2, #0]
 8011c12:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2284      	movs	r2, #132	@ 0x84
 8011c18:	2100      	movs	r1, #0
 8011c1a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2221      	movs	r2, #33	@ 0x21
 8011c20:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d027      	beq.n	8011c7a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c2e:	4a25      	ldr	r2, [pc, #148]	@ (8011cc4 <HAL_UART_Transmit_DMA+0x114>)
 8011c30:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c36:	4a24      	ldr	r2, [pc, #144]	@ (8011cc8 <HAL_UART_Transmit_DMA+0x118>)
 8011c38:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c3e:	4a23      	ldr	r2, [pc, #140]	@ (8011ccc <HAL_UART_Transmit_DMA+0x11c>)
 8011c40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c46:	2200      	movs	r2, #0
 8011c48:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c52:	0019      	movs	r1, r3
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	3328      	adds	r3, #40	@ 0x28
 8011c5a:	001a      	movs	r2, r3
 8011c5c:	1dbb      	adds	r3, r7, #6
 8011c5e:	881b      	ldrh	r3, [r3, #0]
 8011c60:	f7f9 f90a 	bl	800ae78 <HAL_DMA_Start_IT>
 8011c64:	1e03      	subs	r3, r0, #0
 8011c66:	d008      	beq.n	8011c7a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2284      	movs	r2, #132	@ 0x84
 8011c6c:	2110      	movs	r1, #16
 8011c6e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2220      	movs	r2, #32
 8011c74:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8011c76:	2301      	movs	r3, #1
 8011c78:	e01f      	b.n	8011cba <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	2240      	movs	r2, #64	@ 0x40
 8011c80:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c82:	f3ef 8310 	mrs	r3, PRIMASK
 8011c86:	613b      	str	r3, [r7, #16]
  return(result);
 8011c88:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011c8a:	61fb      	str	r3, [r7, #28]
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	f383 8810 	msr	PRIMASK, r3
}
 8011c96:	46c0      	nop			@ (mov r8, r8)
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	689a      	ldr	r2, [r3, #8]
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	2180      	movs	r1, #128	@ 0x80
 8011ca4:	430a      	orrs	r2, r1
 8011ca6:	609a      	str	r2, [r3, #8]
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	f383 8810 	msr	PRIMASK, r3
}
 8011cb2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	e000      	b.n	8011cba <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011cb8:	2302      	movs	r3, #2
  }
}
 8011cba:	0018      	movs	r0, r3
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	b008      	add	sp, #32
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	46c0      	nop			@ (mov r8, r8)
 8011cc4:	08012f7d 	.word	0x08012f7d
 8011cc8:	08013019 	.word	0x08013019
 8011ccc:	080131b9 	.word	0x080131b9

08011cd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b088      	sub	sp, #32
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	1dbb      	adds	r3, r7, #6
 8011cdc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2280      	movs	r2, #128	@ 0x80
 8011ce2:	589b      	ldr	r3, [r3, r2]
 8011ce4:	2b20      	cmp	r3, #32
 8011ce6:	d14a      	bne.n	8011d7e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d003      	beq.n	8011cf6 <HAL_UART_Receive_DMA+0x26>
 8011cee:	1dbb      	adds	r3, r7, #6
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d101      	bne.n	8011cfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	e042      	b.n	8011d80 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	689a      	ldr	r2, [r3, #8]
 8011cfe:	2380      	movs	r3, #128	@ 0x80
 8011d00:	015b      	lsls	r3, r3, #5
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d109      	bne.n	8011d1a <HAL_UART_Receive_DMA+0x4a>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	691b      	ldr	r3, [r3, #16]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d105      	bne.n	8011d1a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	2201      	movs	r2, #1
 8011d12:	4013      	ands	r3, r2
 8011d14:	d001      	beq.n	8011d1a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011d16:	2301      	movs	r3, #1
 8011d18:	e032      	b.n	8011d80 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4a18      	ldr	r2, [pc, #96]	@ (8011d88 <HAL_UART_Receive_DMA+0xb8>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d020      	beq.n	8011d6c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	685a      	ldr	r2, [r3, #4]
 8011d30:	2380      	movs	r3, #128	@ 0x80
 8011d32:	041b      	lsls	r3, r3, #16
 8011d34:	4013      	ands	r3, r2
 8011d36:	d019      	beq.n	8011d6c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d38:	f3ef 8310 	mrs	r3, PRIMASK
 8011d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8011d3e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d40:	61fb      	str	r3, [r7, #28]
 8011d42:	2301      	movs	r3, #1
 8011d44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	f383 8810 	msr	PRIMASK, r3
}
 8011d4c:	46c0      	nop			@ (mov r8, r8)
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	681a      	ldr	r2, [r3, #0]
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2180      	movs	r1, #128	@ 0x80
 8011d5a:	04c9      	lsls	r1, r1, #19
 8011d5c:	430a      	orrs	r2, r1
 8011d5e:	601a      	str	r2, [r3, #0]
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	f383 8810 	msr	PRIMASK, r3
}
 8011d6a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011d6c:	1dbb      	adds	r3, r7, #6
 8011d6e:	881a      	ldrh	r2, [r3, #0]
 8011d70:	68b9      	ldr	r1, [r7, #8]
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	0018      	movs	r0, r3
 8011d76:	f000 ffd9 	bl	8012d2c <UART_Start_Receive_DMA>
 8011d7a:	0003      	movs	r3, r0
 8011d7c:	e000      	b.n	8011d80 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8011d7e:	2302      	movs	r3, #2
  }
}
 8011d80:	0018      	movs	r0, r3
 8011d82:	46bd      	mov	sp, r7
 8011d84:	b008      	add	sp, #32
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	40004800 	.word	0x40004800

08011d8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011d8c:	b590      	push	{r4, r7, lr}
 8011d8e:	b0ab      	sub	sp, #172	@ 0xac
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	69db      	ldr	r3, [r3, #28]
 8011d9a:	22a4      	movs	r2, #164	@ 0xa4
 8011d9c:	18b9      	adds	r1, r7, r2
 8011d9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	20a0      	movs	r0, #160	@ 0xa0
 8011da8:	1839      	adds	r1, r7, r0
 8011daa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	689b      	ldr	r3, [r3, #8]
 8011db2:	219c      	movs	r1, #156	@ 0x9c
 8011db4:	1879      	adds	r1, r7, r1
 8011db6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011db8:	0011      	movs	r1, r2
 8011dba:	18bb      	adds	r3, r7, r2
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4a9c      	ldr	r2, [pc, #624]	@ (8012030 <HAL_UART_IRQHandler+0x2a4>)
 8011dc0:	4013      	ands	r3, r2
 8011dc2:	2298      	movs	r2, #152	@ 0x98
 8011dc4:	18bc      	adds	r4, r7, r2
 8011dc6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8011dc8:	18bb      	adds	r3, r7, r2
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d114      	bne.n	8011dfa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011dd0:	187b      	adds	r3, r7, r1
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2220      	movs	r2, #32
 8011dd6:	4013      	ands	r3, r2
 8011dd8:	d00f      	beq.n	8011dfa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011dda:	183b      	adds	r3, r7, r0
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2220      	movs	r2, #32
 8011de0:	4013      	ands	r3, r2
 8011de2:	d00a      	beq.n	8011dfa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d100      	bne.n	8011dee <HAL_UART_IRQHandler+0x62>
 8011dec:	e2aa      	b.n	8012344 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	0010      	movs	r0, r2
 8011df6:	4798      	blx	r3
      }
      return;
 8011df8:	e2a4      	b.n	8012344 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011dfa:	2398      	movs	r3, #152	@ 0x98
 8011dfc:	18fb      	adds	r3, r7, r3
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d100      	bne.n	8011e06 <HAL_UART_IRQHandler+0x7a>
 8011e04:	e11a      	b.n	801203c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011e06:	239c      	movs	r3, #156	@ 0x9c
 8011e08:	18fb      	adds	r3, r7, r3
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	4013      	ands	r3, r2
 8011e10:	d106      	bne.n	8011e20 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011e12:	23a0      	movs	r3, #160	@ 0xa0
 8011e14:	18fb      	adds	r3, r7, r3
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	4a86      	ldr	r2, [pc, #536]	@ (8012034 <HAL_UART_IRQHandler+0x2a8>)
 8011e1a:	4013      	ands	r3, r2
 8011e1c:	d100      	bne.n	8011e20 <HAL_UART_IRQHandler+0x94>
 8011e1e:	e10d      	b.n	801203c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e20:	23a4      	movs	r3, #164	@ 0xa4
 8011e22:	18fb      	adds	r3, r7, r3
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2201      	movs	r2, #1
 8011e28:	4013      	ands	r3, r2
 8011e2a:	d012      	beq.n	8011e52 <HAL_UART_IRQHandler+0xc6>
 8011e2c:	23a0      	movs	r3, #160	@ 0xa0
 8011e2e:	18fb      	adds	r3, r7, r3
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	2380      	movs	r3, #128	@ 0x80
 8011e34:	005b      	lsls	r3, r3, #1
 8011e36:	4013      	ands	r3, r2
 8011e38:	d00b      	beq.n	8011e52 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	2201      	movs	r2, #1
 8011e40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2284      	movs	r2, #132	@ 0x84
 8011e46:	589b      	ldr	r3, [r3, r2]
 8011e48:	2201      	movs	r2, #1
 8011e4a:	431a      	orrs	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2184      	movs	r1, #132	@ 0x84
 8011e50:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e52:	23a4      	movs	r3, #164	@ 0xa4
 8011e54:	18fb      	adds	r3, r7, r3
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2202      	movs	r2, #2
 8011e5a:	4013      	ands	r3, r2
 8011e5c:	d011      	beq.n	8011e82 <HAL_UART_IRQHandler+0xf6>
 8011e5e:	239c      	movs	r3, #156	@ 0x9c
 8011e60:	18fb      	adds	r3, r7, r3
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2201      	movs	r2, #1
 8011e66:	4013      	ands	r3, r2
 8011e68:	d00b      	beq.n	8011e82 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	2202      	movs	r2, #2
 8011e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2284      	movs	r2, #132	@ 0x84
 8011e76:	589b      	ldr	r3, [r3, r2]
 8011e78:	2204      	movs	r2, #4
 8011e7a:	431a      	orrs	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2184      	movs	r1, #132	@ 0x84
 8011e80:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e82:	23a4      	movs	r3, #164	@ 0xa4
 8011e84:	18fb      	adds	r3, r7, r3
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2204      	movs	r2, #4
 8011e8a:	4013      	ands	r3, r2
 8011e8c:	d011      	beq.n	8011eb2 <HAL_UART_IRQHandler+0x126>
 8011e8e:	239c      	movs	r3, #156	@ 0x9c
 8011e90:	18fb      	adds	r3, r7, r3
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	2201      	movs	r2, #1
 8011e96:	4013      	ands	r3, r2
 8011e98:	d00b      	beq.n	8011eb2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	2204      	movs	r2, #4
 8011ea0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2284      	movs	r2, #132	@ 0x84
 8011ea6:	589b      	ldr	r3, [r3, r2]
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	431a      	orrs	r2, r3
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2184      	movs	r1, #132	@ 0x84
 8011eb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011eb2:	23a4      	movs	r3, #164	@ 0xa4
 8011eb4:	18fb      	adds	r3, r7, r3
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	2208      	movs	r2, #8
 8011eba:	4013      	ands	r3, r2
 8011ebc:	d017      	beq.n	8011eee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011ebe:	23a0      	movs	r3, #160	@ 0xa0
 8011ec0:	18fb      	adds	r3, r7, r3
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2220      	movs	r2, #32
 8011ec6:	4013      	ands	r3, r2
 8011ec8:	d105      	bne.n	8011ed6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011eca:	239c      	movs	r3, #156	@ 0x9c
 8011ecc:	18fb      	adds	r3, r7, r3
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011ed4:	d00b      	beq.n	8011eee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	2208      	movs	r2, #8
 8011edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2284      	movs	r2, #132	@ 0x84
 8011ee2:	589b      	ldr	r3, [r3, r2]
 8011ee4:	2208      	movs	r2, #8
 8011ee6:	431a      	orrs	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2184      	movs	r1, #132	@ 0x84
 8011eec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011eee:	23a4      	movs	r3, #164	@ 0xa4
 8011ef0:	18fb      	adds	r3, r7, r3
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	2380      	movs	r3, #128	@ 0x80
 8011ef6:	011b      	lsls	r3, r3, #4
 8011ef8:	4013      	ands	r3, r2
 8011efa:	d013      	beq.n	8011f24 <HAL_UART_IRQHandler+0x198>
 8011efc:	23a0      	movs	r3, #160	@ 0xa0
 8011efe:	18fb      	adds	r3, r7, r3
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	2380      	movs	r3, #128	@ 0x80
 8011f04:	04db      	lsls	r3, r3, #19
 8011f06:	4013      	ands	r3, r2
 8011f08:	d00c      	beq.n	8011f24 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2280      	movs	r2, #128	@ 0x80
 8011f10:	0112      	lsls	r2, r2, #4
 8011f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2284      	movs	r2, #132	@ 0x84
 8011f18:	589b      	ldr	r3, [r3, r2]
 8011f1a:	2220      	movs	r2, #32
 8011f1c:	431a      	orrs	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	2184      	movs	r1, #132	@ 0x84
 8011f22:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2284      	movs	r2, #132	@ 0x84
 8011f28:	589b      	ldr	r3, [r3, r2]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d100      	bne.n	8011f30 <HAL_UART_IRQHandler+0x1a4>
 8011f2e:	e20b      	b.n	8012348 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011f30:	23a4      	movs	r3, #164	@ 0xa4
 8011f32:	18fb      	adds	r3, r7, r3
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2220      	movs	r2, #32
 8011f38:	4013      	ands	r3, r2
 8011f3a:	d00e      	beq.n	8011f5a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011f3c:	23a0      	movs	r3, #160	@ 0xa0
 8011f3e:	18fb      	adds	r3, r7, r3
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2220      	movs	r2, #32
 8011f44:	4013      	ands	r3, r2
 8011f46:	d008      	beq.n	8011f5a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d004      	beq.n	8011f5a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	0010      	movs	r0, r2
 8011f58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2284      	movs	r2, #132	@ 0x84
 8011f5e:	589b      	ldr	r3, [r3, r2]
 8011f60:	2194      	movs	r1, #148	@ 0x94
 8011f62:	187a      	adds	r2, r7, r1
 8011f64:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	2240      	movs	r2, #64	@ 0x40
 8011f6e:	4013      	ands	r3, r2
 8011f70:	2b40      	cmp	r3, #64	@ 0x40
 8011f72:	d004      	beq.n	8011f7e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011f74:	187b      	adds	r3, r7, r1
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2228      	movs	r2, #40	@ 0x28
 8011f7a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011f7c:	d04b      	beq.n	8012016 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	0018      	movs	r0, r3
 8011f82:	f000 ff97 	bl	8012eb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	2240      	movs	r2, #64	@ 0x40
 8011f8e:	4013      	ands	r3, r2
 8011f90:	2b40      	cmp	r3, #64	@ 0x40
 8011f92:	d139      	bne.n	8012008 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f94:	f3ef 8310 	mrs	r3, PRIMASK
 8011f98:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8011f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011f9c:	2090      	movs	r0, #144	@ 0x90
 8011f9e:	183a      	adds	r2, r7, r0
 8011fa0:	6013      	str	r3, [r2, #0]
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011fa8:	f383 8810 	msr	PRIMASK, r3
}
 8011fac:	46c0      	nop			@ (mov r8, r8)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	689a      	ldr	r2, [r3, #8]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	2140      	movs	r1, #64	@ 0x40
 8011fba:	438a      	bics	r2, r1
 8011fbc:	609a      	str	r2, [r3, #8]
 8011fbe:	183b      	adds	r3, r7, r0
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011fc6:	f383 8810 	msr	PRIMASK, r3
}
 8011fca:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d012      	beq.n	8011ffa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fd8:	4a17      	ldr	r2, [pc, #92]	@ (8012038 <HAL_UART_IRQHandler+0x2ac>)
 8011fda:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fe0:	0018      	movs	r0, r3
 8011fe2:	f7f8 ffef 	bl	800afc4 <HAL_DMA_Abort_IT>
 8011fe6:	1e03      	subs	r3, r0, #0
 8011fe8:	d020      	beq.n	801202c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ff4:	0018      	movs	r0, r3
 8011ff6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ff8:	e018      	b.n	801202c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2298      	movs	r2, #152	@ 0x98
 8011ffe:	589b      	ldr	r3, [r3, r2]
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	0010      	movs	r0, r2
 8012004:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012006:	e011      	b.n	801202c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2298      	movs	r2, #152	@ 0x98
 801200c:	589b      	ldr	r3, [r3, r2]
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	0010      	movs	r0, r2
 8012012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012014:	e00a      	b.n	801202c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2298      	movs	r2, #152	@ 0x98
 801201a:	589b      	ldr	r3, [r3, r2]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	0010      	movs	r0, r2
 8012020:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2284      	movs	r2, #132	@ 0x84
 8012026:	2100      	movs	r1, #0
 8012028:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801202a:	e18d      	b.n	8012348 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801202c:	46c0      	nop			@ (mov r8, r8)
    return;
 801202e:	e18b      	b.n	8012348 <HAL_UART_IRQHandler+0x5bc>
 8012030:	0000080f 	.word	0x0000080f
 8012034:	04000120 	.word	0x04000120
 8012038:	08013241 	.word	0x08013241

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012040:	2b01      	cmp	r3, #1
 8012042:	d000      	beq.n	8012046 <HAL_UART_IRQHandler+0x2ba>
 8012044:	e13d      	b.n	80122c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012046:	23a4      	movs	r3, #164	@ 0xa4
 8012048:	18fb      	adds	r3, r7, r3
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2210      	movs	r2, #16
 801204e:	4013      	ands	r3, r2
 8012050:	d100      	bne.n	8012054 <HAL_UART_IRQHandler+0x2c8>
 8012052:	e136      	b.n	80122c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012054:	23a0      	movs	r3, #160	@ 0xa0
 8012056:	18fb      	adds	r3, r7, r3
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	2210      	movs	r2, #16
 801205c:	4013      	ands	r3, r2
 801205e:	d100      	bne.n	8012062 <HAL_UART_IRQHandler+0x2d6>
 8012060:	e12f      	b.n	80122c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2210      	movs	r2, #16
 8012068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	689b      	ldr	r3, [r3, #8]
 8012070:	2240      	movs	r2, #64	@ 0x40
 8012072:	4013      	ands	r3, r2
 8012074:	2b40      	cmp	r3, #64	@ 0x40
 8012076:	d000      	beq.n	801207a <HAL_UART_IRQHandler+0x2ee>
 8012078:	e0a2      	b.n	80121c0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	685a      	ldr	r2, [r3, #4]
 8012082:	217e      	movs	r1, #126	@ 0x7e
 8012084:	187b      	adds	r3, r7, r1
 8012086:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8012088:	187b      	adds	r3, r7, r1
 801208a:	881b      	ldrh	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d100      	bne.n	8012092 <HAL_UART_IRQHandler+0x306>
 8012090:	e15c      	b.n	801234c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2258      	movs	r2, #88	@ 0x58
 8012096:	5a9b      	ldrh	r3, [r3, r2]
 8012098:	187a      	adds	r2, r7, r1
 801209a:	8812      	ldrh	r2, [r2, #0]
 801209c:	429a      	cmp	r2, r3
 801209e:	d300      	bcc.n	80120a2 <HAL_UART_IRQHandler+0x316>
 80120a0:	e154      	b.n	801234c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	187a      	adds	r2, r7, r1
 80120a6:	215a      	movs	r1, #90	@ 0x5a
 80120a8:	8812      	ldrh	r2, [r2, #0]
 80120aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2220      	movs	r2, #32
 80120b6:	4013      	ands	r3, r2
 80120b8:	d16f      	bne.n	801219a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120ba:	f3ef 8310 	mrs	r3, PRIMASK
 80120be:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80120c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80120c4:	2301      	movs	r3, #1
 80120c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120ca:	f383 8810 	msr	PRIMASK, r3
}
 80120ce:	46c0      	nop			@ (mov r8, r8)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	49a0      	ldr	r1, [pc, #640]	@ (801235c <HAL_UART_IRQHandler+0x5d0>)
 80120dc:	400a      	ands	r2, r1
 80120de:	601a      	str	r2, [r3, #0]
 80120e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80120e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e6:	f383 8810 	msr	PRIMASK, r3
}
 80120ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120ec:	f3ef 8310 	mrs	r3, PRIMASK
 80120f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80120f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80120f6:	2301      	movs	r3, #1
 80120f8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120fc:	f383 8810 	msr	PRIMASK, r3
}
 8012100:	46c0      	nop			@ (mov r8, r8)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	689a      	ldr	r2, [r3, #8]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	2101      	movs	r1, #1
 801210e:	438a      	bics	r2, r1
 8012110:	609a      	str	r2, [r3, #8]
 8012112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012114:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012118:	f383 8810 	msr	PRIMASK, r3
}
 801211c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801211e:	f3ef 8310 	mrs	r3, PRIMASK
 8012122:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8012124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012126:	673b      	str	r3, [r7, #112]	@ 0x70
 8012128:	2301      	movs	r3, #1
 801212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801212c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801212e:	f383 8810 	msr	PRIMASK, r3
}
 8012132:	46c0      	nop			@ (mov r8, r8)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	689a      	ldr	r2, [r3, #8]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	2140      	movs	r1, #64	@ 0x40
 8012140:	438a      	bics	r2, r1
 8012142:	609a      	str	r2, [r3, #8]
 8012144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012146:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801214a:	f383 8810 	msr	PRIMASK, r3
}
 801214e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2280      	movs	r2, #128	@ 0x80
 8012154:	2120      	movs	r1, #32
 8012156:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801215e:	f3ef 8310 	mrs	r3, PRIMASK
 8012162:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8012164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012166:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012168:	2301      	movs	r3, #1
 801216a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801216c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801216e:	f383 8810 	msr	PRIMASK, r3
}
 8012172:	46c0      	nop			@ (mov r8, r8)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2110      	movs	r1, #16
 8012180:	438a      	bics	r2, r1
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012186:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801218a:	f383 8810 	msr	PRIMASK, r3
}
 801218e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012194:	0018      	movs	r0, r3
 8012196:	f7f8 fed5 	bl	800af44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2202      	movs	r2, #2
 801219e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	22ac      	movs	r2, #172	@ 0xac
 80121a4:	589b      	ldr	r3, [r3, r2]
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	2158      	movs	r1, #88	@ 0x58
 80121aa:	5a51      	ldrh	r1, [r2, r1]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	205a      	movs	r0, #90	@ 0x5a
 80121b0:	5a12      	ldrh	r2, [r2, r0]
 80121b2:	b292      	uxth	r2, r2
 80121b4:	1a8a      	subs	r2, r1, r2
 80121b6:	b291      	uxth	r1, r2
 80121b8:	687a      	ldr	r2, [r7, #4]
 80121ba:	0010      	movs	r0, r2
 80121bc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80121be:	e0c5      	b.n	801234c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2258      	movs	r2, #88	@ 0x58
 80121c4:	5a99      	ldrh	r1, [r3, r2]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	225a      	movs	r2, #90	@ 0x5a
 80121ca:	5a9b      	ldrh	r3, [r3, r2]
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	208e      	movs	r0, #142	@ 0x8e
 80121d0:	183b      	adds	r3, r7, r0
 80121d2:	1a8a      	subs	r2, r1, r2
 80121d4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	225a      	movs	r2, #90	@ 0x5a
 80121da:	5a9b      	ldrh	r3, [r3, r2]
 80121dc:	b29b      	uxth	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d100      	bne.n	80121e4 <HAL_UART_IRQHandler+0x458>
 80121e2:	e0b5      	b.n	8012350 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80121e4:	183b      	adds	r3, r7, r0
 80121e6:	881b      	ldrh	r3, [r3, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d100      	bne.n	80121ee <HAL_UART_IRQHandler+0x462>
 80121ec:	e0b0      	b.n	8012350 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121ee:	f3ef 8310 	mrs	r3, PRIMASK
 80121f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80121f4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80121f6:	2488      	movs	r4, #136	@ 0x88
 80121f8:	193a      	adds	r2, r7, r4
 80121fa:	6013      	str	r3, [r2, #0]
 80121fc:	2301      	movs	r3, #1
 80121fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	f383 8810 	msr	PRIMASK, r3
}
 8012206:	46c0      	nop			@ (mov r8, r8)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	4953      	ldr	r1, [pc, #332]	@ (8012360 <HAL_UART_IRQHandler+0x5d4>)
 8012214:	400a      	ands	r2, r1
 8012216:	601a      	str	r2, [r3, #0]
 8012218:	193b      	adds	r3, r7, r4
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	f383 8810 	msr	PRIMASK, r3
}
 8012224:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012226:	f3ef 8310 	mrs	r3, PRIMASK
 801222a:	61bb      	str	r3, [r7, #24]
  return(result);
 801222c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801222e:	2484      	movs	r4, #132	@ 0x84
 8012230:	193a      	adds	r2, r7, r4
 8012232:	6013      	str	r3, [r2, #0]
 8012234:	2301      	movs	r3, #1
 8012236:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	f383 8810 	msr	PRIMASK, r3
}
 801223e:	46c0      	nop			@ (mov r8, r8)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	689a      	ldr	r2, [r3, #8]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2101      	movs	r1, #1
 801224c:	438a      	bics	r2, r1
 801224e:	609a      	str	r2, [r3, #8]
 8012250:	193b      	adds	r3, r7, r4
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012256:	6a3b      	ldr	r3, [r7, #32]
 8012258:	f383 8810 	msr	PRIMASK, r3
}
 801225c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2280      	movs	r2, #128	@ 0x80
 8012262:	2120      	movs	r1, #32
 8012264:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2200      	movs	r2, #0
 801226a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012272:	f3ef 8310 	mrs	r3, PRIMASK
 8012276:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801227a:	2480      	movs	r4, #128	@ 0x80
 801227c:	193a      	adds	r2, r7, r4
 801227e:	6013      	str	r3, [r2, #0]
 8012280:	2301      	movs	r3, #1
 8012282:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012286:	f383 8810 	msr	PRIMASK, r3
}
 801228a:	46c0      	nop			@ (mov r8, r8)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2110      	movs	r1, #16
 8012298:	438a      	bics	r2, r1
 801229a:	601a      	str	r2, [r3, #0]
 801229c:	193b      	adds	r3, r7, r4
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a4:	f383 8810 	msr	PRIMASK, r3
}
 80122a8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2202      	movs	r2, #2
 80122ae:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	22ac      	movs	r2, #172	@ 0xac
 80122b4:	589b      	ldr	r3, [r3, r2]
 80122b6:	183a      	adds	r2, r7, r0
 80122b8:	8811      	ldrh	r1, [r2, #0]
 80122ba:	687a      	ldr	r2, [r7, #4]
 80122bc:	0010      	movs	r0, r2
 80122be:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80122c0:	e046      	b.n	8012350 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80122c2:	23a4      	movs	r3, #164	@ 0xa4
 80122c4:	18fb      	adds	r3, r7, r3
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	2380      	movs	r3, #128	@ 0x80
 80122ca:	035b      	lsls	r3, r3, #13
 80122cc:	4013      	ands	r3, r2
 80122ce:	d012      	beq.n	80122f6 <HAL_UART_IRQHandler+0x56a>
 80122d0:	239c      	movs	r3, #156	@ 0x9c
 80122d2:	18fb      	adds	r3, r7, r3
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	2380      	movs	r3, #128	@ 0x80
 80122d8:	03db      	lsls	r3, r3, #15
 80122da:	4013      	ands	r3, r2
 80122dc:	d00b      	beq.n	80122f6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2280      	movs	r2, #128	@ 0x80
 80122e4:	0352      	lsls	r2, r2, #13
 80122e6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	22a8      	movs	r2, #168	@ 0xa8
 80122ec:	589b      	ldr	r3, [r3, r2]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	0010      	movs	r0, r2
 80122f2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80122f4:	e02f      	b.n	8012356 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80122f6:	23a4      	movs	r3, #164	@ 0xa4
 80122f8:	18fb      	adds	r3, r7, r3
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	2280      	movs	r2, #128	@ 0x80
 80122fe:	4013      	ands	r3, r2
 8012300:	d00f      	beq.n	8012322 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8012302:	23a0      	movs	r3, #160	@ 0xa0
 8012304:	18fb      	adds	r3, r7, r3
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	2280      	movs	r2, #128	@ 0x80
 801230a:	4013      	ands	r3, r2
 801230c:	d009      	beq.n	8012322 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012312:	2b00      	cmp	r3, #0
 8012314:	d01e      	beq.n	8012354 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	0010      	movs	r0, r2
 801231e:	4798      	blx	r3
    }
    return;
 8012320:	e018      	b.n	8012354 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012322:	23a4      	movs	r3, #164	@ 0xa4
 8012324:	18fb      	adds	r3, r7, r3
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	2240      	movs	r2, #64	@ 0x40
 801232a:	4013      	ands	r3, r2
 801232c:	d013      	beq.n	8012356 <HAL_UART_IRQHandler+0x5ca>
 801232e:	23a0      	movs	r3, #160	@ 0xa0
 8012330:	18fb      	adds	r3, r7, r3
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2240      	movs	r2, #64	@ 0x40
 8012336:	4013      	ands	r3, r2
 8012338:	d00d      	beq.n	8012356 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	0018      	movs	r0, r3
 801233e:	f000 ff98 	bl	8013272 <UART_EndTransmit_IT>
    return;
 8012342:	e008      	b.n	8012356 <HAL_UART_IRQHandler+0x5ca>
      return;
 8012344:	46c0      	nop			@ (mov r8, r8)
 8012346:	e006      	b.n	8012356 <HAL_UART_IRQHandler+0x5ca>
    return;
 8012348:	46c0      	nop			@ (mov r8, r8)
 801234a:	e004      	b.n	8012356 <HAL_UART_IRQHandler+0x5ca>
      return;
 801234c:	46c0      	nop			@ (mov r8, r8)
 801234e:	e002      	b.n	8012356 <HAL_UART_IRQHandler+0x5ca>
      return;
 8012350:	46c0      	nop			@ (mov r8, r8)
 8012352:	e000      	b.n	8012356 <HAL_UART_IRQHandler+0x5ca>
    return;
 8012354:	46c0      	nop			@ (mov r8, r8)
  }

}
 8012356:	46bd      	mov	sp, r7
 8012358:	b02b      	add	sp, #172	@ 0xac
 801235a:	bd90      	pop	{r4, r7, pc}
 801235c:	fffffeff 	.word	0xfffffeff
 8012360:	fffffedf 	.word	0xfffffedf

08012364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801236c:	46c0      	nop			@ (mov r8, r8)
 801236e:	46bd      	mov	sp, r7
 8012370:	b002      	add	sp, #8
 8012372:	bd80      	pop	{r7, pc}

08012374 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801237c:	46c0      	nop			@ (mov r8, r8)
 801237e:	46bd      	mov	sp, r7
 8012380:	b002      	add	sp, #8
 8012382:	bd80      	pop	{r7, pc}

08012384 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801238c:	46c0      	nop			@ (mov r8, r8)
 801238e:	46bd      	mov	sp, r7
 8012390:	b002      	add	sp, #8
 8012392:	bd80      	pop	{r7, pc}

08012394 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801239c:	46c0      	nop			@ (mov r8, r8)
 801239e:	46bd      	mov	sp, r7
 80123a0:	b002      	add	sp, #8
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80123ac:	46c0      	nop			@ (mov r8, r8)
 80123ae:	46bd      	mov	sp, r7
 80123b0:	b002      	add	sp, #8
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80123bc:	46c0      	nop			@ (mov r8, r8)
 80123be:	46bd      	mov	sp, r7
 80123c0:	b002      	add	sp, #8
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	000a      	movs	r2, r1
 80123ce:	1cbb      	adds	r3, r7, #2
 80123d0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80123d2:	46c0      	nop			@ (mov r8, r8)
 80123d4:	46bd      	mov	sp, r7
 80123d6:	b002      	add	sp, #8
 80123d8:	bd80      	pop	{r7, pc}
	...

080123dc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2188      	movs	r1, #136	@ 0x88
 80123e8:	4a14      	ldr	r2, [pc, #80]	@ (801243c <UART_InitCallbacksToDefault+0x60>)
 80123ea:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	218c      	movs	r1, #140	@ 0x8c
 80123f0:	4a13      	ldr	r2, [pc, #76]	@ (8012440 <UART_InitCallbacksToDefault+0x64>)
 80123f2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2190      	movs	r1, #144	@ 0x90
 80123f8:	4a12      	ldr	r2, [pc, #72]	@ (8012444 <UART_InitCallbacksToDefault+0x68>)
 80123fa:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2194      	movs	r1, #148	@ 0x94
 8012400:	4a11      	ldr	r2, [pc, #68]	@ (8012448 <UART_InitCallbacksToDefault+0x6c>)
 8012402:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2198      	movs	r1, #152	@ 0x98
 8012408:	4a10      	ldr	r2, [pc, #64]	@ (801244c <UART_InitCallbacksToDefault+0x70>)
 801240a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	219c      	movs	r1, #156	@ 0x9c
 8012410:	4a0f      	ldr	r2, [pc, #60]	@ (8012450 <UART_InitCallbacksToDefault+0x74>)
 8012412:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	21a0      	movs	r1, #160	@ 0xa0
 8012418:	4a0e      	ldr	r2, [pc, #56]	@ (8012454 <UART_InitCallbacksToDefault+0x78>)
 801241a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	21a4      	movs	r1, #164	@ 0xa4
 8012420:	4a0d      	ldr	r2, [pc, #52]	@ (8012458 <UART_InitCallbacksToDefault+0x7c>)
 8012422:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	21a8      	movs	r1, #168	@ 0xa8
 8012428:	4a0c      	ldr	r2, [pc, #48]	@ (801245c <UART_InitCallbacksToDefault+0x80>)
 801242a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	21ac      	movs	r1, #172	@ 0xac
 8012430:	4a0b      	ldr	r2, [pc, #44]	@ (8012460 <UART_InitCallbacksToDefault+0x84>)
 8012432:	505a      	str	r2, [r3, r1]

}
 8012434:	46c0      	nop			@ (mov r8, r8)
 8012436:	46bd      	mov	sp, r7
 8012438:	b002      	add	sp, #8
 801243a:	bd80      	pop	{r7, pc}
 801243c:	08012375 	.word	0x08012375
 8012440:	08012365 	.word	0x08012365
 8012444:	08012385 	.word	0x08012385
 8012448:	08003949 	.word	0x08003949
 801244c:	08003985 	.word	0x08003985
 8012450:	08012395 	.word	0x08012395
 8012454:	080123a5 	.word	0x080123a5
 8012458:	080123b5 	.word	0x080123b5
 801245c:	080132cd 	.word	0x080132cd
 8012460:	080123c5 	.word	0x080123c5

08012464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012464:	b5b0      	push	{r4, r5, r7, lr}
 8012466:	b08e      	sub	sp, #56	@ 0x38
 8012468:	af00      	add	r7, sp, #0
 801246a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801246c:	231a      	movs	r3, #26
 801246e:	2218      	movs	r2, #24
 8012470:	189b      	adds	r3, r3, r2
 8012472:	19db      	adds	r3, r3, r7
 8012474:	2200      	movs	r2, #0
 8012476:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	689a      	ldr	r2, [r3, #8]
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	691b      	ldr	r3, [r3, #16]
 8012480:	431a      	orrs	r2, r3
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	695b      	ldr	r3, [r3, #20]
 8012486:	431a      	orrs	r2, r3
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	69db      	ldr	r3, [r3, #28]
 801248c:	4313      	orrs	r3, r2
 801248e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	4ac3      	ldr	r2, [pc, #780]	@ (80127a4 <UART_SetConfig+0x340>)
 8012498:	4013      	ands	r3, r2
 801249a:	0019      	movs	r1, r3
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124a2:	430a      	orrs	r2, r1
 80124a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	4abe      	ldr	r2, [pc, #760]	@ (80127a8 <UART_SetConfig+0x344>)
 80124ae:	4013      	ands	r3, r2
 80124b0:	0019      	movs	r1, r3
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	68da      	ldr	r2, [r3, #12]
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	430a      	orrs	r2, r1
 80124bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80124be:	69fb      	ldr	r3, [r7, #28]
 80124c0:	699b      	ldr	r3, [r3, #24]
 80124c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4ab8      	ldr	r2, [pc, #736]	@ (80127ac <UART_SetConfig+0x348>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d004      	beq.n	80124d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	6a1b      	ldr	r3, [r3, #32]
 80124d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124d4:	4313      	orrs	r3, r2
 80124d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	4ab4      	ldr	r2, [pc, #720]	@ (80127b0 <UART_SetConfig+0x34c>)
 80124e0:	4013      	ands	r3, r2
 80124e2:	0019      	movs	r1, r3
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124ea:	430a      	orrs	r2, r1
 80124ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	4ab0      	ldr	r2, [pc, #704]	@ (80127b4 <UART_SetConfig+0x350>)
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d131      	bne.n	801255c <UART_SetConfig+0xf8>
 80124f8:	4baf      	ldr	r3, [pc, #700]	@ (80127b8 <UART_SetConfig+0x354>)
 80124fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124fc:	2203      	movs	r2, #3
 80124fe:	4013      	ands	r3, r2
 8012500:	2b03      	cmp	r3, #3
 8012502:	d01d      	beq.n	8012540 <UART_SetConfig+0xdc>
 8012504:	d823      	bhi.n	801254e <UART_SetConfig+0xea>
 8012506:	2b02      	cmp	r3, #2
 8012508:	d00c      	beq.n	8012524 <UART_SetConfig+0xc0>
 801250a:	d820      	bhi.n	801254e <UART_SetConfig+0xea>
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <UART_SetConfig+0xb2>
 8012510:	2b01      	cmp	r3, #1
 8012512:	d00e      	beq.n	8012532 <UART_SetConfig+0xce>
 8012514:	e01b      	b.n	801254e <UART_SetConfig+0xea>
 8012516:	231b      	movs	r3, #27
 8012518:	2218      	movs	r2, #24
 801251a:	189b      	adds	r3, r3, r2
 801251c:	19db      	adds	r3, r3, r7
 801251e:	2201      	movs	r2, #1
 8012520:	701a      	strb	r2, [r3, #0]
 8012522:	e0b4      	b.n	801268e <UART_SetConfig+0x22a>
 8012524:	231b      	movs	r3, #27
 8012526:	2218      	movs	r2, #24
 8012528:	189b      	adds	r3, r3, r2
 801252a:	19db      	adds	r3, r3, r7
 801252c:	2202      	movs	r2, #2
 801252e:	701a      	strb	r2, [r3, #0]
 8012530:	e0ad      	b.n	801268e <UART_SetConfig+0x22a>
 8012532:	231b      	movs	r3, #27
 8012534:	2218      	movs	r2, #24
 8012536:	189b      	adds	r3, r3, r2
 8012538:	19db      	adds	r3, r3, r7
 801253a:	2204      	movs	r2, #4
 801253c:	701a      	strb	r2, [r3, #0]
 801253e:	e0a6      	b.n	801268e <UART_SetConfig+0x22a>
 8012540:	231b      	movs	r3, #27
 8012542:	2218      	movs	r2, #24
 8012544:	189b      	adds	r3, r3, r2
 8012546:	19db      	adds	r3, r3, r7
 8012548:	2208      	movs	r2, #8
 801254a:	701a      	strb	r2, [r3, #0]
 801254c:	e09f      	b.n	801268e <UART_SetConfig+0x22a>
 801254e:	231b      	movs	r3, #27
 8012550:	2218      	movs	r2, #24
 8012552:	189b      	adds	r3, r3, r2
 8012554:	19db      	adds	r3, r3, r7
 8012556:	2210      	movs	r2, #16
 8012558:	701a      	strb	r2, [r3, #0]
 801255a:	e098      	b.n	801268e <UART_SetConfig+0x22a>
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4a96      	ldr	r2, [pc, #600]	@ (80127bc <UART_SetConfig+0x358>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d131      	bne.n	80125ca <UART_SetConfig+0x166>
 8012566:	4b94      	ldr	r3, [pc, #592]	@ (80127b8 <UART_SetConfig+0x354>)
 8012568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801256a:	220c      	movs	r2, #12
 801256c:	4013      	ands	r3, r2
 801256e:	2b0c      	cmp	r3, #12
 8012570:	d01d      	beq.n	80125ae <UART_SetConfig+0x14a>
 8012572:	d823      	bhi.n	80125bc <UART_SetConfig+0x158>
 8012574:	2b08      	cmp	r3, #8
 8012576:	d00c      	beq.n	8012592 <UART_SetConfig+0x12e>
 8012578:	d820      	bhi.n	80125bc <UART_SetConfig+0x158>
 801257a:	2b00      	cmp	r3, #0
 801257c:	d002      	beq.n	8012584 <UART_SetConfig+0x120>
 801257e:	2b04      	cmp	r3, #4
 8012580:	d00e      	beq.n	80125a0 <UART_SetConfig+0x13c>
 8012582:	e01b      	b.n	80125bc <UART_SetConfig+0x158>
 8012584:	231b      	movs	r3, #27
 8012586:	2218      	movs	r2, #24
 8012588:	189b      	adds	r3, r3, r2
 801258a:	19db      	adds	r3, r3, r7
 801258c:	2200      	movs	r2, #0
 801258e:	701a      	strb	r2, [r3, #0]
 8012590:	e07d      	b.n	801268e <UART_SetConfig+0x22a>
 8012592:	231b      	movs	r3, #27
 8012594:	2218      	movs	r2, #24
 8012596:	189b      	adds	r3, r3, r2
 8012598:	19db      	adds	r3, r3, r7
 801259a:	2202      	movs	r2, #2
 801259c:	701a      	strb	r2, [r3, #0]
 801259e:	e076      	b.n	801268e <UART_SetConfig+0x22a>
 80125a0:	231b      	movs	r3, #27
 80125a2:	2218      	movs	r2, #24
 80125a4:	189b      	adds	r3, r3, r2
 80125a6:	19db      	adds	r3, r3, r7
 80125a8:	2204      	movs	r2, #4
 80125aa:	701a      	strb	r2, [r3, #0]
 80125ac:	e06f      	b.n	801268e <UART_SetConfig+0x22a>
 80125ae:	231b      	movs	r3, #27
 80125b0:	2218      	movs	r2, #24
 80125b2:	189b      	adds	r3, r3, r2
 80125b4:	19db      	adds	r3, r3, r7
 80125b6:	2208      	movs	r2, #8
 80125b8:	701a      	strb	r2, [r3, #0]
 80125ba:	e068      	b.n	801268e <UART_SetConfig+0x22a>
 80125bc:	231b      	movs	r3, #27
 80125be:	2218      	movs	r2, #24
 80125c0:	189b      	adds	r3, r3, r2
 80125c2:	19db      	adds	r3, r3, r7
 80125c4:	2210      	movs	r2, #16
 80125c6:	701a      	strb	r2, [r3, #0]
 80125c8:	e061      	b.n	801268e <UART_SetConfig+0x22a>
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	4a7c      	ldr	r2, [pc, #496]	@ (80127c0 <UART_SetConfig+0x35c>)
 80125d0:	4293      	cmp	r3, r2
 80125d2:	d106      	bne.n	80125e2 <UART_SetConfig+0x17e>
 80125d4:	231b      	movs	r3, #27
 80125d6:	2218      	movs	r2, #24
 80125d8:	189b      	adds	r3, r3, r2
 80125da:	19db      	adds	r3, r3, r7
 80125dc:	2200      	movs	r2, #0
 80125de:	701a      	strb	r2, [r3, #0]
 80125e0:	e055      	b.n	801268e <UART_SetConfig+0x22a>
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	4a77      	ldr	r2, [pc, #476]	@ (80127c4 <UART_SetConfig+0x360>)
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d106      	bne.n	80125fa <UART_SetConfig+0x196>
 80125ec:	231b      	movs	r3, #27
 80125ee:	2218      	movs	r2, #24
 80125f0:	189b      	adds	r3, r3, r2
 80125f2:	19db      	adds	r3, r3, r7
 80125f4:	2200      	movs	r2, #0
 80125f6:	701a      	strb	r2, [r3, #0]
 80125f8:	e049      	b.n	801268e <UART_SetConfig+0x22a>
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	4a6b      	ldr	r2, [pc, #428]	@ (80127ac <UART_SetConfig+0x348>)
 8012600:	4293      	cmp	r3, r2
 8012602:	d13e      	bne.n	8012682 <UART_SetConfig+0x21e>
 8012604:	4b6c      	ldr	r3, [pc, #432]	@ (80127b8 <UART_SetConfig+0x354>)
 8012606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012608:	23c0      	movs	r3, #192	@ 0xc0
 801260a:	011b      	lsls	r3, r3, #4
 801260c:	4013      	ands	r3, r2
 801260e:	22c0      	movs	r2, #192	@ 0xc0
 8012610:	0112      	lsls	r2, r2, #4
 8012612:	4293      	cmp	r3, r2
 8012614:	d027      	beq.n	8012666 <UART_SetConfig+0x202>
 8012616:	22c0      	movs	r2, #192	@ 0xc0
 8012618:	0112      	lsls	r2, r2, #4
 801261a:	4293      	cmp	r3, r2
 801261c:	d82a      	bhi.n	8012674 <UART_SetConfig+0x210>
 801261e:	2280      	movs	r2, #128	@ 0x80
 8012620:	0112      	lsls	r2, r2, #4
 8012622:	4293      	cmp	r3, r2
 8012624:	d011      	beq.n	801264a <UART_SetConfig+0x1e6>
 8012626:	2280      	movs	r2, #128	@ 0x80
 8012628:	0112      	lsls	r2, r2, #4
 801262a:	4293      	cmp	r3, r2
 801262c:	d822      	bhi.n	8012674 <UART_SetConfig+0x210>
 801262e:	2b00      	cmp	r3, #0
 8012630:	d004      	beq.n	801263c <UART_SetConfig+0x1d8>
 8012632:	2280      	movs	r2, #128	@ 0x80
 8012634:	00d2      	lsls	r2, r2, #3
 8012636:	4293      	cmp	r3, r2
 8012638:	d00e      	beq.n	8012658 <UART_SetConfig+0x1f4>
 801263a:	e01b      	b.n	8012674 <UART_SetConfig+0x210>
 801263c:	231b      	movs	r3, #27
 801263e:	2218      	movs	r2, #24
 8012640:	189b      	adds	r3, r3, r2
 8012642:	19db      	adds	r3, r3, r7
 8012644:	2200      	movs	r2, #0
 8012646:	701a      	strb	r2, [r3, #0]
 8012648:	e021      	b.n	801268e <UART_SetConfig+0x22a>
 801264a:	231b      	movs	r3, #27
 801264c:	2218      	movs	r2, #24
 801264e:	189b      	adds	r3, r3, r2
 8012650:	19db      	adds	r3, r3, r7
 8012652:	2202      	movs	r2, #2
 8012654:	701a      	strb	r2, [r3, #0]
 8012656:	e01a      	b.n	801268e <UART_SetConfig+0x22a>
 8012658:	231b      	movs	r3, #27
 801265a:	2218      	movs	r2, #24
 801265c:	189b      	adds	r3, r3, r2
 801265e:	19db      	adds	r3, r3, r7
 8012660:	2204      	movs	r2, #4
 8012662:	701a      	strb	r2, [r3, #0]
 8012664:	e013      	b.n	801268e <UART_SetConfig+0x22a>
 8012666:	231b      	movs	r3, #27
 8012668:	2218      	movs	r2, #24
 801266a:	189b      	adds	r3, r3, r2
 801266c:	19db      	adds	r3, r3, r7
 801266e:	2208      	movs	r2, #8
 8012670:	701a      	strb	r2, [r3, #0]
 8012672:	e00c      	b.n	801268e <UART_SetConfig+0x22a>
 8012674:	231b      	movs	r3, #27
 8012676:	2218      	movs	r2, #24
 8012678:	189b      	adds	r3, r3, r2
 801267a:	19db      	adds	r3, r3, r7
 801267c:	2210      	movs	r2, #16
 801267e:	701a      	strb	r2, [r3, #0]
 8012680:	e005      	b.n	801268e <UART_SetConfig+0x22a>
 8012682:	231b      	movs	r3, #27
 8012684:	2218      	movs	r2, #24
 8012686:	189b      	adds	r3, r3, r2
 8012688:	19db      	adds	r3, r3, r7
 801268a:	2210      	movs	r2, #16
 801268c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801268e:	69fb      	ldr	r3, [r7, #28]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4a46      	ldr	r2, [pc, #280]	@ (80127ac <UART_SetConfig+0x348>)
 8012694:	4293      	cmp	r3, r2
 8012696:	d000      	beq.n	801269a <UART_SetConfig+0x236>
 8012698:	e09a      	b.n	80127d0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801269a:	231b      	movs	r3, #27
 801269c:	2218      	movs	r2, #24
 801269e:	189b      	adds	r3, r3, r2
 80126a0:	19db      	adds	r3, r3, r7
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	2b08      	cmp	r3, #8
 80126a6:	d01d      	beq.n	80126e4 <UART_SetConfig+0x280>
 80126a8:	dc20      	bgt.n	80126ec <UART_SetConfig+0x288>
 80126aa:	2b04      	cmp	r3, #4
 80126ac:	d015      	beq.n	80126da <UART_SetConfig+0x276>
 80126ae:	dc1d      	bgt.n	80126ec <UART_SetConfig+0x288>
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <UART_SetConfig+0x256>
 80126b4:	2b02      	cmp	r3, #2
 80126b6:	d005      	beq.n	80126c4 <UART_SetConfig+0x260>
 80126b8:	e018      	b.n	80126ec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80126ba:	f7fe f9a5 	bl	8010a08 <HAL_RCC_GetPCLK1Freq>
 80126be:	0003      	movs	r3, r0
 80126c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126c2:	e01c      	b.n	80126fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80126c4:	4b3c      	ldr	r3, [pc, #240]	@ (80127b8 <UART_SetConfig+0x354>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	2210      	movs	r2, #16
 80126ca:	4013      	ands	r3, r2
 80126cc:	d002      	beq.n	80126d4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80126ce:	4b3e      	ldr	r3, [pc, #248]	@ (80127c8 <UART_SetConfig+0x364>)
 80126d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80126d2:	e014      	b.n	80126fe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80126d4:	4b3d      	ldr	r3, [pc, #244]	@ (80127cc <UART_SetConfig+0x368>)
 80126d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126d8:	e011      	b.n	80126fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80126da:	f7fe f8e5 	bl	80108a8 <HAL_RCC_GetSysClockFreq>
 80126de:	0003      	movs	r3, r0
 80126e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126e2:	e00c      	b.n	80126fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80126e4:	2380      	movs	r3, #128	@ 0x80
 80126e6:	021b      	lsls	r3, r3, #8
 80126e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126ea:	e008      	b.n	80126fe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80126ec:	2300      	movs	r3, #0
 80126ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80126f0:	231a      	movs	r3, #26
 80126f2:	2218      	movs	r2, #24
 80126f4:	189b      	adds	r3, r3, r2
 80126f6:	19db      	adds	r3, r3, r7
 80126f8:	2201      	movs	r2, #1
 80126fa:	701a      	strb	r2, [r3, #0]
        break;
 80126fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80126fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012700:	2b00      	cmp	r3, #0
 8012702:	d100      	bne.n	8012706 <UART_SetConfig+0x2a2>
 8012704:	e133      	b.n	801296e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	685a      	ldr	r2, [r3, #4]
 801270a:	0013      	movs	r3, r2
 801270c:	005b      	lsls	r3, r3, #1
 801270e:	189b      	adds	r3, r3, r2
 8012710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012712:	429a      	cmp	r2, r3
 8012714:	d305      	bcc.n	8012722 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801271c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801271e:	429a      	cmp	r2, r3
 8012720:	d906      	bls.n	8012730 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8012722:	231a      	movs	r3, #26
 8012724:	2218      	movs	r2, #24
 8012726:	189b      	adds	r3, r3, r2
 8012728:	19db      	adds	r3, r3, r7
 801272a:	2201      	movs	r2, #1
 801272c:	701a      	strb	r2, [r3, #0]
 801272e:	e11e      	b.n	801296e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8012730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012732:	613b      	str	r3, [r7, #16]
 8012734:	2300      	movs	r3, #0
 8012736:	617b      	str	r3, [r7, #20]
 8012738:	6939      	ldr	r1, [r7, #16]
 801273a:	697a      	ldr	r2, [r7, #20]
 801273c:	000b      	movs	r3, r1
 801273e:	0e1b      	lsrs	r3, r3, #24
 8012740:	0010      	movs	r0, r2
 8012742:	0205      	lsls	r5, r0, #8
 8012744:	431d      	orrs	r5, r3
 8012746:	000b      	movs	r3, r1
 8012748:	021c      	lsls	r4, r3, #8
 801274a:	69fb      	ldr	r3, [r7, #28]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	085b      	lsrs	r3, r3, #1
 8012750:	60bb      	str	r3, [r7, #8]
 8012752:	2300      	movs	r3, #0
 8012754:	60fb      	str	r3, [r7, #12]
 8012756:	68b8      	ldr	r0, [r7, #8]
 8012758:	68f9      	ldr	r1, [r7, #12]
 801275a:	1900      	adds	r0, r0, r4
 801275c:	4169      	adcs	r1, r5
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	603b      	str	r3, [r7, #0]
 8012764:	2300      	movs	r3, #0
 8012766:	607b      	str	r3, [r7, #4]
 8012768:	683a      	ldr	r2, [r7, #0]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f7ed fed6 	bl	800051c <__aeabi_uldivmod>
 8012770:	0002      	movs	r2, r0
 8012772:	000b      	movs	r3, r1
 8012774:	0013      	movs	r3, r2
 8012776:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801277a:	23c0      	movs	r3, #192	@ 0xc0
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	429a      	cmp	r2, r3
 8012780:	d309      	bcc.n	8012796 <UART_SetConfig+0x332>
 8012782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012784:	2380      	movs	r3, #128	@ 0x80
 8012786:	035b      	lsls	r3, r3, #13
 8012788:	429a      	cmp	r2, r3
 801278a:	d204      	bcs.n	8012796 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801278c:	69fb      	ldr	r3, [r7, #28]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012792:	60da      	str	r2, [r3, #12]
 8012794:	e0eb      	b.n	801296e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8012796:	231a      	movs	r3, #26
 8012798:	2218      	movs	r2, #24
 801279a:	189b      	adds	r3, r3, r2
 801279c:	19db      	adds	r3, r3, r7
 801279e:	2201      	movs	r2, #1
 80127a0:	701a      	strb	r2, [r3, #0]
 80127a2:	e0e4      	b.n	801296e <UART_SetConfig+0x50a>
 80127a4:	efff69f3 	.word	0xefff69f3
 80127a8:	ffffcfff 	.word	0xffffcfff
 80127ac:	40004800 	.word	0x40004800
 80127b0:	fffff4ff 	.word	0xfffff4ff
 80127b4:	40013800 	.word	0x40013800
 80127b8:	40021000 	.word	0x40021000
 80127bc:	40004400 	.word	0x40004400
 80127c0:	40004c00 	.word	0x40004c00
 80127c4:	40005000 	.word	0x40005000
 80127c8:	003d0900 	.word	0x003d0900
 80127cc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	69da      	ldr	r2, [r3, #28]
 80127d4:	2380      	movs	r3, #128	@ 0x80
 80127d6:	021b      	lsls	r3, r3, #8
 80127d8:	429a      	cmp	r2, r3
 80127da:	d000      	beq.n	80127de <UART_SetConfig+0x37a>
 80127dc:	e070      	b.n	80128c0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80127de:	231b      	movs	r3, #27
 80127e0:	2218      	movs	r2, #24
 80127e2:	189b      	adds	r3, r3, r2
 80127e4:	19db      	adds	r3, r3, r7
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	2b08      	cmp	r3, #8
 80127ea:	d822      	bhi.n	8012832 <UART_SetConfig+0x3ce>
 80127ec:	009a      	lsls	r2, r3, #2
 80127ee:	4b67      	ldr	r3, [pc, #412]	@ (801298c <UART_SetConfig+0x528>)
 80127f0:	18d3      	adds	r3, r2, r3
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80127f6:	f7fe f907 	bl	8010a08 <HAL_RCC_GetPCLK1Freq>
 80127fa:	0003      	movs	r3, r0
 80127fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127fe:	e021      	b.n	8012844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012800:	f7fe f918 	bl	8010a34 <HAL_RCC_GetPCLK2Freq>
 8012804:	0003      	movs	r3, r0
 8012806:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012808:	e01c      	b.n	8012844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801280a:	4b61      	ldr	r3, [pc, #388]	@ (8012990 <UART_SetConfig+0x52c>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2210      	movs	r2, #16
 8012810:	4013      	ands	r3, r2
 8012812:	d002      	beq.n	801281a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012814:	4b5f      	ldr	r3, [pc, #380]	@ (8012994 <UART_SetConfig+0x530>)
 8012816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012818:	e014      	b.n	8012844 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801281a:	4b5f      	ldr	r3, [pc, #380]	@ (8012998 <UART_SetConfig+0x534>)
 801281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801281e:	e011      	b.n	8012844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012820:	f7fe f842 	bl	80108a8 <HAL_RCC_GetSysClockFreq>
 8012824:	0003      	movs	r3, r0
 8012826:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012828:	e00c      	b.n	8012844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801282a:	2380      	movs	r3, #128	@ 0x80
 801282c:	021b      	lsls	r3, r3, #8
 801282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012830:	e008      	b.n	8012844 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8012832:	2300      	movs	r3, #0
 8012834:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012836:	231a      	movs	r3, #26
 8012838:	2218      	movs	r2, #24
 801283a:	189b      	adds	r3, r3, r2
 801283c:	19db      	adds	r3, r3, r7
 801283e:	2201      	movs	r2, #1
 8012840:	701a      	strb	r2, [r3, #0]
        break;
 8012842:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012846:	2b00      	cmp	r3, #0
 8012848:	d100      	bne.n	801284c <UART_SetConfig+0x3e8>
 801284a:	e090      	b.n	801296e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801284e:	005a      	lsls	r2, r3, #1
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	685b      	ldr	r3, [r3, #4]
 8012854:	085b      	lsrs	r3, r3, #1
 8012856:	18d2      	adds	r2, r2, r3
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	0019      	movs	r1, r3
 801285e:	0010      	movs	r0, r2
 8012860:	f7ed fc6e 	bl	8000140 <__udivsi3>
 8012864:	0003      	movs	r3, r0
 8012866:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801286a:	2b0f      	cmp	r3, #15
 801286c:	d921      	bls.n	80128b2 <UART_SetConfig+0x44e>
 801286e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012870:	2380      	movs	r3, #128	@ 0x80
 8012872:	025b      	lsls	r3, r3, #9
 8012874:	429a      	cmp	r2, r3
 8012876:	d21c      	bcs.n	80128b2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801287a:	b29a      	uxth	r2, r3
 801287c:	200e      	movs	r0, #14
 801287e:	2418      	movs	r4, #24
 8012880:	1903      	adds	r3, r0, r4
 8012882:	19db      	adds	r3, r3, r7
 8012884:	210f      	movs	r1, #15
 8012886:	438a      	bics	r2, r1
 8012888:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801288a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801288c:	085b      	lsrs	r3, r3, #1
 801288e:	b29b      	uxth	r3, r3
 8012890:	2207      	movs	r2, #7
 8012892:	4013      	ands	r3, r2
 8012894:	b299      	uxth	r1, r3
 8012896:	1903      	adds	r3, r0, r4
 8012898:	19db      	adds	r3, r3, r7
 801289a:	1902      	adds	r2, r0, r4
 801289c:	19d2      	adds	r2, r2, r7
 801289e:	8812      	ldrh	r2, [r2, #0]
 80128a0:	430a      	orrs	r2, r1
 80128a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	1902      	adds	r2, r0, r4
 80128aa:	19d2      	adds	r2, r2, r7
 80128ac:	8812      	ldrh	r2, [r2, #0]
 80128ae:	60da      	str	r2, [r3, #12]
 80128b0:	e05d      	b.n	801296e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80128b2:	231a      	movs	r3, #26
 80128b4:	2218      	movs	r2, #24
 80128b6:	189b      	adds	r3, r3, r2
 80128b8:	19db      	adds	r3, r3, r7
 80128ba:	2201      	movs	r2, #1
 80128bc:	701a      	strb	r2, [r3, #0]
 80128be:	e056      	b.n	801296e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80128c0:	231b      	movs	r3, #27
 80128c2:	2218      	movs	r2, #24
 80128c4:	189b      	adds	r3, r3, r2
 80128c6:	19db      	adds	r3, r3, r7
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	2b08      	cmp	r3, #8
 80128cc:	d822      	bhi.n	8012914 <UART_SetConfig+0x4b0>
 80128ce:	009a      	lsls	r2, r3, #2
 80128d0:	4b32      	ldr	r3, [pc, #200]	@ (801299c <UART_SetConfig+0x538>)
 80128d2:	18d3      	adds	r3, r2, r3
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80128d8:	f7fe f896 	bl	8010a08 <HAL_RCC_GetPCLK1Freq>
 80128dc:	0003      	movs	r3, r0
 80128de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80128e0:	e021      	b.n	8012926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80128e2:	f7fe f8a7 	bl	8010a34 <HAL_RCC_GetPCLK2Freq>
 80128e6:	0003      	movs	r3, r0
 80128e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80128ea:	e01c      	b.n	8012926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80128ec:	4b28      	ldr	r3, [pc, #160]	@ (8012990 <UART_SetConfig+0x52c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2210      	movs	r2, #16
 80128f2:	4013      	ands	r3, r2
 80128f4:	d002      	beq.n	80128fc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80128f6:	4b27      	ldr	r3, [pc, #156]	@ (8012994 <UART_SetConfig+0x530>)
 80128f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80128fa:	e014      	b.n	8012926 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80128fc:	4b26      	ldr	r3, [pc, #152]	@ (8012998 <UART_SetConfig+0x534>)
 80128fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012900:	e011      	b.n	8012926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012902:	f7fd ffd1 	bl	80108a8 <HAL_RCC_GetSysClockFreq>
 8012906:	0003      	movs	r3, r0
 8012908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801290a:	e00c      	b.n	8012926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801290c:	2380      	movs	r3, #128	@ 0x80
 801290e:	021b      	lsls	r3, r3, #8
 8012910:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012912:	e008      	b.n	8012926 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8012914:	2300      	movs	r3, #0
 8012916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012918:	231a      	movs	r3, #26
 801291a:	2218      	movs	r2, #24
 801291c:	189b      	adds	r3, r3, r2
 801291e:	19db      	adds	r3, r3, r7
 8012920:	2201      	movs	r2, #1
 8012922:	701a      	strb	r2, [r3, #0]
        break;
 8012924:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8012926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012928:	2b00      	cmp	r3, #0
 801292a:	d020      	beq.n	801296e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	085a      	lsrs	r2, r3, #1
 8012932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012934:	18d2      	adds	r2, r2, r3
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	0019      	movs	r1, r3
 801293c:	0010      	movs	r0, r2
 801293e:	f7ed fbff 	bl	8000140 <__udivsi3>
 8012942:	0003      	movs	r3, r0
 8012944:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012948:	2b0f      	cmp	r3, #15
 801294a:	d90a      	bls.n	8012962 <UART_SetConfig+0x4fe>
 801294c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801294e:	2380      	movs	r3, #128	@ 0x80
 8012950:	025b      	lsls	r3, r3, #9
 8012952:	429a      	cmp	r2, r3
 8012954:	d205      	bcs.n	8012962 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012958:	b29a      	uxth	r2, r3
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	60da      	str	r2, [r3, #12]
 8012960:	e005      	b.n	801296e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8012962:	231a      	movs	r3, #26
 8012964:	2218      	movs	r2, #24
 8012966:	189b      	adds	r3, r3, r2
 8012968:	19db      	adds	r3, r3, r7
 801296a:	2201      	movs	r2, #1
 801296c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	2200      	movs	r2, #0
 8012972:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	2200      	movs	r2, #0
 8012978:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801297a:	231a      	movs	r3, #26
 801297c:	2218      	movs	r2, #24
 801297e:	189b      	adds	r3, r3, r2
 8012980:	19db      	adds	r3, r3, r7
 8012982:	781b      	ldrb	r3, [r3, #0]
}
 8012984:	0018      	movs	r0, r3
 8012986:	46bd      	mov	sp, r7
 8012988:	b00e      	add	sp, #56	@ 0x38
 801298a:	bdb0      	pop	{r4, r5, r7, pc}
 801298c:	0801c23c 	.word	0x0801c23c
 8012990:	40021000 	.word	0x40021000
 8012994:	003d0900 	.word	0x003d0900
 8012998:	00f42400 	.word	0x00f42400
 801299c:	0801c260 	.word	0x0801c260

080129a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ac:	2201      	movs	r2, #1
 80129ae:	4013      	ands	r3, r2
 80129b0:	d00b      	beq.n	80129ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	4a4a      	ldr	r2, [pc, #296]	@ (8012ae4 <UART_AdvFeatureConfig+0x144>)
 80129ba:	4013      	ands	r3, r2
 80129bc:	0019      	movs	r1, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	430a      	orrs	r2, r1
 80129c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ce:	2202      	movs	r2, #2
 80129d0:	4013      	ands	r3, r2
 80129d2:	d00b      	beq.n	80129ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	4a43      	ldr	r2, [pc, #268]	@ (8012ae8 <UART_AdvFeatureConfig+0x148>)
 80129dc:	4013      	ands	r3, r2
 80129de:	0019      	movs	r1, r3
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	430a      	orrs	r2, r1
 80129ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129f0:	2204      	movs	r2, #4
 80129f2:	4013      	ands	r3, r2
 80129f4:	d00b      	beq.n	8012a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	4a3b      	ldr	r2, [pc, #236]	@ (8012aec <UART_AdvFeatureConfig+0x14c>)
 80129fe:	4013      	ands	r3, r2
 8012a00:	0019      	movs	r1, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	430a      	orrs	r2, r1
 8012a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a12:	2208      	movs	r2, #8
 8012a14:	4013      	ands	r3, r2
 8012a16:	d00b      	beq.n	8012a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	4a34      	ldr	r2, [pc, #208]	@ (8012af0 <UART_AdvFeatureConfig+0x150>)
 8012a20:	4013      	ands	r3, r2
 8012a22:	0019      	movs	r1, r3
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	430a      	orrs	r2, r1
 8012a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a34:	2210      	movs	r2, #16
 8012a36:	4013      	ands	r3, r2
 8012a38:	d00b      	beq.n	8012a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	4a2c      	ldr	r2, [pc, #176]	@ (8012af4 <UART_AdvFeatureConfig+0x154>)
 8012a42:	4013      	ands	r3, r2
 8012a44:	0019      	movs	r1, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	430a      	orrs	r2, r1
 8012a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a56:	2220      	movs	r2, #32
 8012a58:	4013      	ands	r3, r2
 8012a5a:	d00b      	beq.n	8012a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	689b      	ldr	r3, [r3, #8]
 8012a62:	4a25      	ldr	r2, [pc, #148]	@ (8012af8 <UART_AdvFeatureConfig+0x158>)
 8012a64:	4013      	ands	r3, r2
 8012a66:	0019      	movs	r1, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	430a      	orrs	r2, r1
 8012a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a78:	2240      	movs	r2, #64	@ 0x40
 8012a7a:	4013      	ands	r3, r2
 8012a7c:	d01d      	beq.n	8012aba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	4a1d      	ldr	r2, [pc, #116]	@ (8012afc <UART_AdvFeatureConfig+0x15c>)
 8012a86:	4013      	ands	r3, r2
 8012a88:	0019      	movs	r1, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	430a      	orrs	r2, r1
 8012a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a9a:	2380      	movs	r3, #128	@ 0x80
 8012a9c:	035b      	lsls	r3, r3, #13
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d10b      	bne.n	8012aba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	4a15      	ldr	r2, [pc, #84]	@ (8012b00 <UART_AdvFeatureConfig+0x160>)
 8012aaa:	4013      	ands	r3, r2
 8012aac:	0019      	movs	r1, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	430a      	orrs	r2, r1
 8012ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012abe:	2280      	movs	r2, #128	@ 0x80
 8012ac0:	4013      	ands	r3, r2
 8012ac2:	d00b      	beq.n	8012adc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	4a0e      	ldr	r2, [pc, #56]	@ (8012b04 <UART_AdvFeatureConfig+0x164>)
 8012acc:	4013      	ands	r3, r2
 8012ace:	0019      	movs	r1, r3
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	430a      	orrs	r2, r1
 8012ada:	605a      	str	r2, [r3, #4]
  }
}
 8012adc:	46c0      	nop			@ (mov r8, r8)
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	b002      	add	sp, #8
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	fffdffff 	.word	0xfffdffff
 8012ae8:	fffeffff 	.word	0xfffeffff
 8012aec:	fffbffff 	.word	0xfffbffff
 8012af0:	ffff7fff 	.word	0xffff7fff
 8012af4:	ffffefff 	.word	0xffffefff
 8012af8:	ffffdfff 	.word	0xffffdfff
 8012afc:	ffefffff 	.word	0xffefffff
 8012b00:	ff9fffff 	.word	0xff9fffff
 8012b04:	fff7ffff 	.word	0xfff7ffff

08012b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b092      	sub	sp, #72	@ 0x48
 8012b0c:	af02      	add	r7, sp, #8
 8012b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2284      	movs	r2, #132	@ 0x84
 8012b14:	2100      	movs	r1, #0
 8012b16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012b18:	f7f7 fc30 	bl	800a37c <HAL_GetTick>
 8012b1c:	0003      	movs	r3, r0
 8012b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2208      	movs	r2, #8
 8012b28:	4013      	ands	r3, r2
 8012b2a:	2b08      	cmp	r3, #8
 8012b2c:	d12c      	bne.n	8012b88 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b30:	2280      	movs	r2, #128	@ 0x80
 8012b32:	0391      	lsls	r1, r2, #14
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	4a46      	ldr	r2, [pc, #280]	@ (8012c50 <UART_CheckIdleState+0x148>)
 8012b38:	9200      	str	r2, [sp, #0]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f000 f88c 	bl	8012c58 <UART_WaitOnFlagUntilTimeout>
 8012b40:	1e03      	subs	r3, r0, #0
 8012b42:	d021      	beq.n	8012b88 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b44:	f3ef 8310 	mrs	r3, PRIMASK
 8012b48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8012b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012b4e:	2301      	movs	r3, #1
 8012b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b54:	f383 8810 	msr	PRIMASK, r3
}
 8012b58:	46c0      	nop			@ (mov r8, r8)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2180      	movs	r1, #128	@ 0x80
 8012b66:	438a      	bics	r2, r1
 8012b68:	601a      	str	r2, [r3, #0]
 8012b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b70:	f383 8810 	msr	PRIMASK, r3
}
 8012b74:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2220      	movs	r2, #32
 8012b7a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2278      	movs	r2, #120	@ 0x78
 8012b80:	2100      	movs	r1, #0
 8012b82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b84:	2303      	movs	r3, #3
 8012b86:	e05f      	b.n	8012c48 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2204      	movs	r2, #4
 8012b90:	4013      	ands	r3, r2
 8012b92:	2b04      	cmp	r3, #4
 8012b94:	d146      	bne.n	8012c24 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b98:	2280      	movs	r2, #128	@ 0x80
 8012b9a:	03d1      	lsls	r1, r2, #15
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8012c50 <UART_CheckIdleState+0x148>)
 8012ba0:	9200      	str	r2, [sp, #0]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f000 f858 	bl	8012c58 <UART_WaitOnFlagUntilTimeout>
 8012ba8:	1e03      	subs	r3, r0, #0
 8012baa:	d03b      	beq.n	8012c24 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bac:	f3ef 8310 	mrs	r3, PRIMASK
 8012bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bb2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	f383 8810 	msr	PRIMASK, r3
}
 8012bc0:	46c0      	nop			@ (mov r8, r8)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	681a      	ldr	r2, [r3, #0]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	4921      	ldr	r1, [pc, #132]	@ (8012c54 <UART_CheckIdleState+0x14c>)
 8012bce:	400a      	ands	r2, r1
 8012bd0:	601a      	str	r2, [r3, #0]
 8012bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	f383 8810 	msr	PRIMASK, r3
}
 8012bdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bde:	f3ef 8310 	mrs	r3, PRIMASK
 8012be2:	61bb      	str	r3, [r7, #24]
  return(result);
 8012be4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012be8:	2301      	movs	r3, #1
 8012bea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	f383 8810 	msr	PRIMASK, r3
}
 8012bf2:	46c0      	nop			@ (mov r8, r8)
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	689a      	ldr	r2, [r3, #8]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2101      	movs	r1, #1
 8012c00:	438a      	bics	r2, r1
 8012c02:	609a      	str	r2, [r3, #8]
 8012c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c08:	6a3b      	ldr	r3, [r7, #32]
 8012c0a:	f383 8810 	msr	PRIMASK, r3
}
 8012c0e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2280      	movs	r2, #128	@ 0x80
 8012c14:	2120      	movs	r1, #32
 8012c16:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2278      	movs	r2, #120	@ 0x78
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012c20:	2303      	movs	r3, #3
 8012c22:	e011      	b.n	8012c48 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2220      	movs	r2, #32
 8012c28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2280      	movs	r2, #128	@ 0x80
 8012c2e:	2120      	movs	r1, #32
 8012c30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2278      	movs	r2, #120	@ 0x78
 8012c42:	2100      	movs	r1, #0
 8012c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012c46:	2300      	movs	r3, #0
}
 8012c48:	0018      	movs	r0, r3
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	b010      	add	sp, #64	@ 0x40
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	01ffffff 	.word	0x01ffffff
 8012c54:	fffffedf 	.word	0xfffffedf

08012c58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b084      	sub	sp, #16
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	603b      	str	r3, [r7, #0]
 8012c64:	1dfb      	adds	r3, r7, #7
 8012c66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012c68:	e04b      	b.n	8012d02 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	3301      	adds	r3, #1
 8012c6e:	d048      	beq.n	8012d02 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012c70:	f7f7 fb84 	bl	800a37c <HAL_GetTick>
 8012c74:	0002      	movs	r2, r0
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	1ad3      	subs	r3, r2, r3
 8012c7a:	69ba      	ldr	r2, [r7, #24]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d302      	bcc.n	8012c86 <UART_WaitOnFlagUntilTimeout+0x2e>
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d101      	bne.n	8012c8a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8012c86:	2303      	movs	r3, #3
 8012c88:	e04b      	b.n	8012d22 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	2204      	movs	r2, #4
 8012c92:	4013      	ands	r3, r2
 8012c94:	d035      	beq.n	8012d02 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	69db      	ldr	r3, [r3, #28]
 8012c9c:	2208      	movs	r2, #8
 8012c9e:	4013      	ands	r3, r2
 8012ca0:	2b08      	cmp	r3, #8
 8012ca2:	d111      	bne.n	8012cc8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2208      	movs	r2, #8
 8012caa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	0018      	movs	r0, r3
 8012cb0:	f000 f900 	bl	8012eb4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	2284      	movs	r2, #132	@ 0x84
 8012cb8:	2108      	movs	r1, #8
 8012cba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2278      	movs	r2, #120	@ 0x78
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e02c      	b.n	8012d22 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	69da      	ldr	r2, [r3, #28]
 8012cce:	2380      	movs	r3, #128	@ 0x80
 8012cd0:	011b      	lsls	r3, r3, #4
 8012cd2:	401a      	ands	r2, r3
 8012cd4:	2380      	movs	r3, #128	@ 0x80
 8012cd6:	011b      	lsls	r3, r3, #4
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d112      	bne.n	8012d02 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	2280      	movs	r2, #128	@ 0x80
 8012ce2:	0112      	lsls	r2, r2, #4
 8012ce4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	0018      	movs	r0, r3
 8012cea:	f000 f8e3 	bl	8012eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2284      	movs	r2, #132	@ 0x84
 8012cf2:	2120      	movs	r1, #32
 8012cf4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2278      	movs	r2, #120	@ 0x78
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8012cfe:	2303      	movs	r3, #3
 8012d00:	e00f      	b.n	8012d22 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	69db      	ldr	r3, [r3, #28]
 8012d08:	68ba      	ldr	r2, [r7, #8]
 8012d0a:	4013      	ands	r3, r2
 8012d0c:	68ba      	ldr	r2, [r7, #8]
 8012d0e:	1ad3      	subs	r3, r2, r3
 8012d10:	425a      	negs	r2, r3
 8012d12:	4153      	adcs	r3, r2
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	001a      	movs	r2, r3
 8012d18:	1dfb      	adds	r3, r7, #7
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d0a4      	beq.n	8012c6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012d20:	2300      	movs	r3, #0
}
 8012d22:	0018      	movs	r0, r3
 8012d24:	46bd      	mov	sp, r7
 8012d26:	b004      	add	sp, #16
 8012d28:	bd80      	pop	{r7, pc}
	...

08012d2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b090      	sub	sp, #64	@ 0x40
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	1dbb      	adds	r3, r7, #6
 8012d38:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	68ba      	ldr	r2, [r7, #8]
 8012d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	1dba      	adds	r2, r7, #6
 8012d44:	2158      	movs	r1, #88	@ 0x58
 8012d46:	8812      	ldrh	r2, [r2, #0]
 8012d48:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2284      	movs	r2, #132	@ 0x84
 8012d4e:	2100      	movs	r1, #0
 8012d50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2280      	movs	r2, #128	@ 0x80
 8012d56:	2122      	movs	r1, #34	@ 0x22
 8012d58:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d028      	beq.n	8012db4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d66:	4a3e      	ldr	r2, [pc, #248]	@ (8012e60 <UART_Start_Receive_DMA+0x134>)
 8012d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8012e64 <UART_Start_Receive_DMA+0x138>)
 8012d70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d76:	4a3c      	ldr	r2, [pc, #240]	@ (8012e68 <UART_Start_Receive_DMA+0x13c>)
 8012d78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012d7e:	2200      	movs	r2, #0
 8012d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	3324      	adds	r3, #36	@ 0x24
 8012d8c:	0019      	movs	r1, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d92:	001a      	movs	r2, r3
 8012d94:	1dbb      	adds	r3, r7, #6
 8012d96:	881b      	ldrh	r3, [r3, #0]
 8012d98:	f7f8 f86e 	bl	800ae78 <HAL_DMA_Start_IT>
 8012d9c:	1e03      	subs	r3, r0, #0
 8012d9e:	d009      	beq.n	8012db4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2284      	movs	r2, #132	@ 0x84
 8012da4:	2110      	movs	r1, #16
 8012da6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2280      	movs	r2, #128	@ 0x80
 8012dac:	2120      	movs	r1, #32
 8012dae:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8012db0:	2301      	movs	r3, #1
 8012db2:	e050      	b.n	8012e56 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	691b      	ldr	r3, [r3, #16]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d019      	beq.n	8012df0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8012dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8012dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dcc:	f383 8810 	msr	PRIMASK, r3
}
 8012dd0:	46c0      	nop			@ (mov r8, r8)
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	681a      	ldr	r2, [r3, #0]
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2180      	movs	r1, #128	@ 0x80
 8012dde:	0049      	lsls	r1, r1, #1
 8012de0:	430a      	orrs	r2, r1
 8012de2:	601a      	str	r2, [r3, #0]
 8012de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012de6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dea:	f383 8810 	msr	PRIMASK, r3
}
 8012dee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012df0:	f3ef 8310 	mrs	r3, PRIMASK
 8012df4:	613b      	str	r3, [r7, #16]
  return(result);
 8012df6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012df8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	f383 8810 	msr	PRIMASK, r3
}
 8012e04:	46c0      	nop			@ (mov r8, r8)
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	689a      	ldr	r2, [r3, #8]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	2101      	movs	r1, #1
 8012e12:	430a      	orrs	r2, r1
 8012e14:	609a      	str	r2, [r3, #8]
 8012e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	f383 8810 	msr	PRIMASK, r3
}
 8012e20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e22:	f3ef 8310 	mrs	r3, PRIMASK
 8012e26:	61fb      	str	r3, [r7, #28]
  return(result);
 8012e28:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e30:	6a3b      	ldr	r3, [r7, #32]
 8012e32:	f383 8810 	msr	PRIMASK, r3
}
 8012e36:	46c0      	nop			@ (mov r8, r8)
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	689a      	ldr	r2, [r3, #8]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2140      	movs	r1, #64	@ 0x40
 8012e44:	430a      	orrs	r2, r1
 8012e46:	609a      	str	r2, [r3, #8]
 8012e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4e:	f383 8810 	msr	PRIMASK, r3
}
 8012e52:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	0018      	movs	r0, r3
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	b010      	add	sp, #64	@ 0x40
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	46c0      	nop			@ (mov r8, r8)
 8012e60:	0801303d 	.word	0x0801303d
 8012e64:	08013171 	.word	0x08013171
 8012e68:	080131b9 	.word	0x080131b9

08012e6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b086      	sub	sp, #24
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e74:	f3ef 8310 	mrs	r3, PRIMASK
 8012e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e7a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012e7c:	617b      	str	r3, [r7, #20]
 8012e7e:	2301      	movs	r3, #1
 8012e80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f383 8810 	msr	PRIMASK, r3
}
 8012e88:	46c0      	nop			@ (mov r8, r8)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	681a      	ldr	r2, [r3, #0]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	21c0      	movs	r1, #192	@ 0xc0
 8012e96:	438a      	bics	r2, r1
 8012e98:	601a      	str	r2, [r3, #0]
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	f383 8810 	msr	PRIMASK, r3
}
 8012ea4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2220      	movs	r2, #32
 8012eaa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012eac:	46c0      	nop			@ (mov r8, r8)
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	b006      	add	sp, #24
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08e      	sub	sp, #56	@ 0x38
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8012ec2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	f383 8810 	msr	PRIMASK, r3
}
 8012ed0:	46c0      	nop			@ (mov r8, r8)
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	4926      	ldr	r1, [pc, #152]	@ (8012f78 <UART_EndRxTransfer+0xc4>)
 8012ede:	400a      	ands	r2, r1
 8012ee0:	601a      	str	r2, [r3, #0]
 8012ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ee4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ee6:	69fb      	ldr	r3, [r7, #28]
 8012ee8:	f383 8810 	msr	PRIMASK, r3
}
 8012eec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012eee:	f3ef 8310 	mrs	r3, PRIMASK
 8012ef2:	623b      	str	r3, [r7, #32]
  return(result);
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012ef8:	2301      	movs	r3, #1
 8012efa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012efe:	f383 8810 	msr	PRIMASK, r3
}
 8012f02:	46c0      	nop			@ (mov r8, r8)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	689a      	ldr	r2, [r3, #8]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2101      	movs	r1, #1
 8012f10:	438a      	bics	r2, r1
 8012f12:	609a      	str	r2, [r3, #8]
 8012f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f1a:	f383 8810 	msr	PRIMASK, r3
}
 8012f1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d118      	bne.n	8012f5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f28:	f3ef 8310 	mrs	r3, PRIMASK
 8012f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8012f2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f32:	2301      	movs	r3, #1
 8012f34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	f383 8810 	msr	PRIMASK, r3
}
 8012f3c:	46c0      	nop			@ (mov r8, r8)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2110      	movs	r1, #16
 8012f4a:	438a      	bics	r2, r1
 8012f4c:	601a      	str	r2, [r3, #0]
 8012f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	f383 8810 	msr	PRIMASK, r3
}
 8012f58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2280      	movs	r2, #128	@ 0x80
 8012f5e:	2120      	movs	r1, #32
 8012f60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2200      	movs	r2, #0
 8012f66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012f6e:	46c0      	nop			@ (mov r8, r8)
 8012f70:	46bd      	mov	sp, r7
 8012f72:	b00e      	add	sp, #56	@ 0x38
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	46c0      	nop			@ (mov r8, r8)
 8012f78:	fffffedf 	.word	0xfffffedf

08012f7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b08c      	sub	sp, #48	@ 0x30
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2220      	movs	r2, #32
 8012f92:	4013      	ands	r3, r2
 8012f94:	d135      	bne.n	8013002 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8012f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f98:	2252      	movs	r2, #82	@ 0x52
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8012fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8012fa4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012fa8:	2301      	movs	r3, #1
 8012faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	f383 8810 	msr	PRIMASK, r3
}
 8012fb2:	46c0      	nop			@ (mov r8, r8)
 8012fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	689a      	ldr	r2, [r3, #8]
 8012fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2180      	movs	r1, #128	@ 0x80
 8012fc0:	438a      	bics	r2, r1
 8012fc2:	609a      	str	r2, [r3, #8]
 8012fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	f383 8810 	msr	PRIMASK, r3
}
 8012fce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8012fd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8012fd6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012fda:	2301      	movs	r3, #1
 8012fdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fde:	69fb      	ldr	r3, [r7, #28]
 8012fe0:	f383 8810 	msr	PRIMASK, r3
}
 8012fe4:	46c0      	nop			@ (mov r8, r8)
 8012fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	681a      	ldr	r2, [r3, #0]
 8012fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	2140      	movs	r1, #64	@ 0x40
 8012ff2:	430a      	orrs	r2, r1
 8012ff4:	601a      	str	r2, [r3, #0]
 8012ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ff8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ffa:	6a3b      	ldr	r3, [r7, #32]
 8012ffc:	f383 8810 	msr	PRIMASK, r3
}
 8013000:	e006      	b.n	8013010 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8013002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013004:	228c      	movs	r2, #140	@ 0x8c
 8013006:	589b      	ldr	r3, [r3, r2]
 8013008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801300a:	0010      	movs	r0, r2
 801300c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801300e:	46c0      	nop			@ (mov r8, r8)
 8013010:	46c0      	nop			@ (mov r8, r8)
 8013012:	46bd      	mov	sp, r7
 8013014:	b00c      	add	sp, #48	@ 0x30
 8013016:	bd80      	pop	{r7, pc}

08013018 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013024:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2288      	movs	r2, #136	@ 0x88
 801302a:	589b      	ldr	r3, [r3, r2]
 801302c:	68fa      	ldr	r2, [r7, #12]
 801302e:	0010      	movs	r0, r2
 8013030:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013032:	46c0      	nop			@ (mov r8, r8)
 8013034:	46bd      	mov	sp, r7
 8013036:	b004      	add	sp, #16
 8013038:	bd80      	pop	{r7, pc}
	...

0801303c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b094      	sub	sp, #80	@ 0x50
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013048:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	2220      	movs	r2, #32
 8013052:	4013      	ands	r3, r2
 8013054:	d16f      	bne.n	8013136 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8013056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013058:	225a      	movs	r2, #90	@ 0x5a
 801305a:	2100      	movs	r1, #0
 801305c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801305e:	f3ef 8310 	mrs	r3, PRIMASK
 8013062:	61bb      	str	r3, [r7, #24]
  return(result);
 8013064:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013068:	2301      	movs	r3, #1
 801306a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801306c:	69fb      	ldr	r3, [r7, #28]
 801306e:	f383 8810 	msr	PRIMASK, r3
}
 8013072:	46c0      	nop			@ (mov r8, r8)
 8013074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	681a      	ldr	r2, [r3, #0]
 801307a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	493b      	ldr	r1, [pc, #236]	@ (801316c <UART_DMAReceiveCplt+0x130>)
 8013080:	400a      	ands	r2, r1
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013086:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013088:	6a3b      	ldr	r3, [r7, #32]
 801308a:	f383 8810 	msr	PRIMASK, r3
}
 801308e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013090:	f3ef 8310 	mrs	r3, PRIMASK
 8013094:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013098:	647b      	str	r3, [r7, #68]	@ 0x44
 801309a:	2301      	movs	r3, #1
 801309c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130a0:	f383 8810 	msr	PRIMASK, r3
}
 80130a4:	46c0      	nop			@ (mov r8, r8)
 80130a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	689a      	ldr	r2, [r3, #8]
 80130ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2101      	movs	r1, #1
 80130b2:	438a      	bics	r2, r1
 80130b4:	609a      	str	r2, [r3, #8]
 80130b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130bc:	f383 8810 	msr	PRIMASK, r3
}
 80130c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130c2:	f3ef 8310 	mrs	r3, PRIMASK
 80130c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80130c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80130ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80130cc:	2301      	movs	r3, #1
 80130ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130d2:	f383 8810 	msr	PRIMASK, r3
}
 80130d6:	46c0      	nop			@ (mov r8, r8)
 80130d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	689a      	ldr	r2, [r3, #8]
 80130de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2140      	movs	r1, #64	@ 0x40
 80130e4:	438a      	bics	r2, r1
 80130e6:	609a      	str	r2, [r3, #8]
 80130e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80130ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130ee:	f383 8810 	msr	PRIMASK, r3
}
 80130f2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80130f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130f6:	2280      	movs	r2, #128	@ 0x80
 80130f8:	2120      	movs	r1, #32
 80130fa:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80130fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013100:	2b01      	cmp	r3, #1
 8013102:	d118      	bne.n	8013136 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013104:	f3ef 8310 	mrs	r3, PRIMASK
 8013108:	60fb      	str	r3, [r7, #12]
  return(result);
 801310a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801310c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801310e:	2301      	movs	r3, #1
 8013110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	f383 8810 	msr	PRIMASK, r3
}
 8013118:	46c0      	nop			@ (mov r8, r8)
 801311a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	2110      	movs	r1, #16
 8013126:	438a      	bics	r2, r1
 8013128:	601a      	str	r2, [r3, #0]
 801312a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801312c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	f383 8810 	msr	PRIMASK, r3
}
 8013134:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013138:	2200      	movs	r2, #0
 801313a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801313c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801313e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013140:	2b01      	cmp	r3, #1
 8013142:	d109      	bne.n	8013158 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8013144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013146:	22ac      	movs	r2, #172	@ 0xac
 8013148:	589b      	ldr	r3, [r3, r2]
 801314a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801314c:	2158      	movs	r1, #88	@ 0x58
 801314e:	5a51      	ldrh	r1, [r2, r1]
 8013150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013152:	0010      	movs	r0, r2
 8013154:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013156:	e005      	b.n	8013164 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8013158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801315a:	2294      	movs	r2, #148	@ 0x94
 801315c:	589b      	ldr	r3, [r3, r2]
 801315e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013160:	0010      	movs	r0, r2
 8013162:	4798      	blx	r3
}
 8013164:	46c0      	nop			@ (mov r8, r8)
 8013166:	46bd      	mov	sp, r7
 8013168:	b014      	add	sp, #80	@ 0x50
 801316a:	bd80      	pop	{r7, pc}
 801316c:	fffffeff 	.word	0xfffffeff

08013170 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801317c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2201      	movs	r2, #1
 8013182:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013188:	2b01      	cmp	r3, #1
 801318a:	d10b      	bne.n	80131a4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	22ac      	movs	r2, #172	@ 0xac
 8013190:	589b      	ldr	r3, [r3, r2]
 8013192:	68fa      	ldr	r2, [r7, #12]
 8013194:	2158      	movs	r1, #88	@ 0x58
 8013196:	5a52      	ldrh	r2, [r2, r1]
 8013198:	0852      	lsrs	r2, r2, #1
 801319a:	b291      	uxth	r1, r2
 801319c:	68fa      	ldr	r2, [r7, #12]
 801319e:	0010      	movs	r0, r2
 80131a0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80131a2:	e005      	b.n	80131b0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2290      	movs	r2, #144	@ 0x90
 80131a8:	589b      	ldr	r3, [r3, r2]
 80131aa:	68fa      	ldr	r2, [r7, #12]
 80131ac:	0010      	movs	r0, r2
 80131ae:	4798      	blx	r3
}
 80131b0:	46c0      	nop			@ (mov r8, r8)
 80131b2:	46bd      	mov	sp, r7
 80131b4:	b004      	add	sp, #16
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b086      	sub	sp, #24
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	2280      	movs	r2, #128	@ 0x80
 80131d0:	589b      	ldr	r3, [r3, r2]
 80131d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	689b      	ldr	r3, [r3, #8]
 80131da:	2280      	movs	r2, #128	@ 0x80
 80131dc:	4013      	ands	r3, r2
 80131de:	2b80      	cmp	r3, #128	@ 0x80
 80131e0:	d10a      	bne.n	80131f8 <UART_DMAError+0x40>
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	2b21      	cmp	r3, #33	@ 0x21
 80131e6:	d107      	bne.n	80131f8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	2252      	movs	r2, #82	@ 0x52
 80131ec:	2100      	movs	r1, #0
 80131ee:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	0018      	movs	r0, r3
 80131f4:	f7ff fe3a 	bl	8012e6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	689b      	ldr	r3, [r3, #8]
 80131fe:	2240      	movs	r2, #64	@ 0x40
 8013200:	4013      	ands	r3, r2
 8013202:	2b40      	cmp	r3, #64	@ 0x40
 8013204:	d10a      	bne.n	801321c <UART_DMAError+0x64>
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2b22      	cmp	r3, #34	@ 0x22
 801320a:	d107      	bne.n	801321c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	225a      	movs	r2, #90	@ 0x5a
 8013210:	2100      	movs	r1, #0
 8013212:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	0018      	movs	r0, r3
 8013218:	f7ff fe4c 	bl	8012eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	2284      	movs	r2, #132	@ 0x84
 8013220:	589b      	ldr	r3, [r3, r2]
 8013222:	2210      	movs	r2, #16
 8013224:	431a      	orrs	r2, r3
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	2184      	movs	r1, #132	@ 0x84
 801322a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	2298      	movs	r2, #152	@ 0x98
 8013230:	589b      	ldr	r3, [r3, r2]
 8013232:	697a      	ldr	r2, [r7, #20]
 8013234:	0010      	movs	r0, r2
 8013236:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013238:	46c0      	nop			@ (mov r8, r8)
 801323a:	46bd      	mov	sp, r7
 801323c:	b006      	add	sp, #24
 801323e:	bd80      	pop	{r7, pc}

08013240 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801324c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	225a      	movs	r2, #90	@ 0x5a
 8013252:	2100      	movs	r1, #0
 8013254:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2252      	movs	r2, #82	@ 0x52
 801325a:	2100      	movs	r1, #0
 801325c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2298      	movs	r2, #152	@ 0x98
 8013262:	589b      	ldr	r3, [r3, r2]
 8013264:	68fa      	ldr	r2, [r7, #12]
 8013266:	0010      	movs	r0, r2
 8013268:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801326a:	46c0      	nop			@ (mov r8, r8)
 801326c:	46bd      	mov	sp, r7
 801326e:	b004      	add	sp, #16
 8013270:	bd80      	pop	{r7, pc}

08013272 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013272:	b580      	push	{r7, lr}
 8013274:	b086      	sub	sp, #24
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801327a:	f3ef 8310 	mrs	r3, PRIMASK
 801327e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013280:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013282:	617b      	str	r3, [r7, #20]
 8013284:	2301      	movs	r3, #1
 8013286:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	f383 8810 	msr	PRIMASK, r3
}
 801328e:	46c0      	nop			@ (mov r8, r8)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	681a      	ldr	r2, [r3, #0]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2140      	movs	r1, #64	@ 0x40
 801329c:	438a      	bics	r2, r1
 801329e:	601a      	str	r2, [r3, #0]
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	f383 8810 	msr	PRIMASK, r3
}
 80132aa:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2220      	movs	r2, #32
 80132b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2200      	movs	r2, #0
 80132b6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	228c      	movs	r2, #140	@ 0x8c
 80132bc:	589b      	ldr	r3, [r3, r2]
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	0010      	movs	r0, r2
 80132c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80132c4:	46c0      	nop			@ (mov r8, r8)
 80132c6:	46bd      	mov	sp, r7
 80132c8:	b006      	add	sp, #24
 80132ca:	bd80      	pop	{r7, pc}

080132cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80132d4:	46c0      	nop			@ (mov r8, r8)
 80132d6:	46bd      	mov	sp, r7
 80132d8:	b002      	add	sp, #8
 80132da:	bd80      	pop	{r7, pc}

080132dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2244      	movs	r2, #68	@ 0x44
 80132e8:	2100      	movs	r1, #0
 80132ea:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80132ec:	4b05      	ldr	r3, [pc, #20]	@ (8013304 <USB_EnableGlobalInt+0x28>)
 80132ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	b299      	uxth	r1, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2240      	movs	r2, #64	@ 0x40
 80132f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80132fa:	2300      	movs	r3, #0
}
 80132fc:	0018      	movs	r0, r3
 80132fe:	46bd      	mov	sp, r7
 8013300:	b004      	add	sp, #16
 8013302:	bd80      	pop	{r7, pc}
 8013304:	0000bf80 	.word	0x0000bf80

08013308 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013310:	4b09      	ldr	r3, [pc, #36]	@ (8013338 <USB_DisableGlobalInt+0x30>)
 8013312:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2240      	movs	r2, #64	@ 0x40
 8013318:	5a9b      	ldrh	r3, [r3, r2]
 801331a:	b29b      	uxth	r3, r3
 801331c:	68fa      	ldr	r2, [r7, #12]
 801331e:	b292      	uxth	r2, r2
 8013320:	43d2      	mvns	r2, r2
 8013322:	b292      	uxth	r2, r2
 8013324:	4013      	ands	r3, r2
 8013326:	b299      	uxth	r1, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2240      	movs	r2, #64	@ 0x40
 801332c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801332e:	2300      	movs	r3, #0
}
 8013330:	0018      	movs	r0, r3
 8013332:	46bd      	mov	sp, r7
 8013334:	b004      	add	sp, #16
 8013336:	bd80      	pop	{r7, pc}
 8013338:	0000bf80 	.word	0x0000bf80

0801333c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801333c:	b084      	sub	sp, #16
 801333e:	b590      	push	{r4, r7, lr}
 8013340:	b083      	sub	sp, #12
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
 8013346:	2004      	movs	r0, #4
 8013348:	2410      	movs	r4, #16
 801334a:	1900      	adds	r0, r0, r4
 801334c:	2408      	movs	r4, #8
 801334e:	46a4      	mov	ip, r4
 8013350:	44bc      	add	ip, r7
 8013352:	4460      	add	r0, ip
 8013354:	6001      	str	r1, [r0, #0]
 8013356:	6042      	str	r2, [r0, #4]
 8013358:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2240      	movs	r2, #64	@ 0x40
 801335e:	2101      	movs	r1, #1
 8013360:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2240      	movs	r2, #64	@ 0x40
 8013366:	2100      	movs	r1, #0
 8013368:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2244      	movs	r2, #68	@ 0x44
 801336e:	2100      	movs	r1, #0
 8013370:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2250      	movs	r2, #80	@ 0x50
 8013376:	2100      	movs	r1, #0
 8013378:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801337a:	2300      	movs	r3, #0
}
 801337c:	0018      	movs	r0, r3
 801337e:	46bd      	mov	sp, r7
 8013380:	b003      	add	sp, #12
 8013382:	bc90      	pop	{r4, r7}
 8013384:	bc08      	pop	{r3}
 8013386:	b004      	add	sp, #16
 8013388:	4718      	bx	r3
	...

0801338c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b09c      	sub	sp, #112	@ 0x70
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8013396:	236f      	movs	r3, #111	@ 0x6f
 8013398:	18fb      	adds	r3, r7, r3
 801339a:	2200      	movs	r2, #0
 801339c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	009b      	lsls	r3, r3, #2
 80133a6:	18d3      	adds	r3, r2, r3
 80133a8:	881b      	ldrh	r3, [r3, #0]
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	236c      	movs	r3, #108	@ 0x6c
 80133ae:	18fb      	adds	r3, r7, r3
 80133b0:	49a3      	ldr	r1, [pc, #652]	@ (8013640 <USB_ActivateEndpoint+0x2b4>)
 80133b2:	400a      	ands	r2, r1
 80133b4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	78db      	ldrb	r3, [r3, #3]
 80133ba:	2b03      	cmp	r3, #3
 80133bc:	d017      	beq.n	80133ee <USB_ActivateEndpoint+0x62>
 80133be:	dc28      	bgt.n	8013412 <USB_ActivateEndpoint+0x86>
 80133c0:	2b02      	cmp	r3, #2
 80133c2:	d00e      	beq.n	80133e2 <USB_ActivateEndpoint+0x56>
 80133c4:	dc25      	bgt.n	8013412 <USB_ActivateEndpoint+0x86>
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d002      	beq.n	80133d0 <USB_ActivateEndpoint+0x44>
 80133ca:	2b01      	cmp	r3, #1
 80133cc:	d018      	beq.n	8013400 <USB_ActivateEndpoint+0x74>
 80133ce:	e020      	b.n	8013412 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80133d0:	226c      	movs	r2, #108	@ 0x6c
 80133d2:	18bb      	adds	r3, r7, r2
 80133d4:	18ba      	adds	r2, r7, r2
 80133d6:	8812      	ldrh	r2, [r2, #0]
 80133d8:	2180      	movs	r1, #128	@ 0x80
 80133da:	0089      	lsls	r1, r1, #2
 80133dc:	430a      	orrs	r2, r1
 80133de:	801a      	strh	r2, [r3, #0]
      break;
 80133e0:	e01c      	b.n	801341c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80133e2:	226c      	movs	r2, #108	@ 0x6c
 80133e4:	18bb      	adds	r3, r7, r2
 80133e6:	18ba      	adds	r2, r7, r2
 80133e8:	8812      	ldrh	r2, [r2, #0]
 80133ea:	801a      	strh	r2, [r3, #0]
      break;
 80133ec:	e016      	b.n	801341c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80133ee:	226c      	movs	r2, #108	@ 0x6c
 80133f0:	18bb      	adds	r3, r7, r2
 80133f2:	18ba      	adds	r2, r7, r2
 80133f4:	8812      	ldrh	r2, [r2, #0]
 80133f6:	21c0      	movs	r1, #192	@ 0xc0
 80133f8:	00c9      	lsls	r1, r1, #3
 80133fa:	430a      	orrs	r2, r1
 80133fc:	801a      	strh	r2, [r3, #0]
      break;
 80133fe:	e00d      	b.n	801341c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8013400:	226c      	movs	r2, #108	@ 0x6c
 8013402:	18bb      	adds	r3, r7, r2
 8013404:	18ba      	adds	r2, r7, r2
 8013406:	8812      	ldrh	r2, [r2, #0]
 8013408:	2180      	movs	r1, #128	@ 0x80
 801340a:	00c9      	lsls	r1, r1, #3
 801340c:	430a      	orrs	r2, r1
 801340e:	801a      	strh	r2, [r3, #0]
      break;
 8013410:	e004      	b.n	801341c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8013412:	236f      	movs	r3, #111	@ 0x6f
 8013414:	18fb      	adds	r3, r7, r3
 8013416:	2201      	movs	r2, #1
 8013418:	701a      	strb	r2, [r3, #0]
      break;
 801341a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	18d3      	adds	r3, r2, r3
 8013426:	226c      	movs	r2, #108	@ 0x6c
 8013428:	18ba      	adds	r2, r7, r2
 801342a:	8812      	ldrh	r2, [r2, #0]
 801342c:	4985      	ldr	r1, [pc, #532]	@ (8013644 <USB_ActivateEndpoint+0x2b8>)
 801342e:	430a      	orrs	r2, r1
 8013430:	b292      	uxth	r2, r2
 8013432:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	009b      	lsls	r3, r3, #2
 801343c:	18d3      	adds	r3, r2, r3
 801343e:	881b      	ldrh	r3, [r3, #0]
 8013440:	b29b      	uxth	r3, r3
 8013442:	b21b      	sxth	r3, r3
 8013444:	4a80      	ldr	r2, [pc, #512]	@ (8013648 <USB_ActivateEndpoint+0x2bc>)
 8013446:	4013      	ands	r3, r2
 8013448:	b21a      	sxth	r2, r3
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	b21b      	sxth	r3, r3
 8013450:	4313      	orrs	r3, r2
 8013452:	b21a      	sxth	r2, r3
 8013454:	2166      	movs	r1, #102	@ 0x66
 8013456:	187b      	adds	r3, r7, r1
 8013458:	801a      	strh	r2, [r3, #0]
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	18d3      	adds	r3, r2, r3
 8013464:	187a      	adds	r2, r7, r1
 8013466:	8812      	ldrh	r2, [r2, #0]
 8013468:	4976      	ldr	r1, [pc, #472]	@ (8013644 <USB_ActivateEndpoint+0x2b8>)
 801346a:	430a      	orrs	r2, r1
 801346c:	b292      	uxth	r2, r2
 801346e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	7b1b      	ldrb	r3, [r3, #12]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d000      	beq.n	801347a <USB_ActivateEndpoint+0xee>
 8013478:	e178      	b.n	801376c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	785b      	ldrb	r3, [r3, #1]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d100      	bne.n	8013484 <USB_ActivateEndpoint+0xf8>
 8013482:	e07a      	b.n	801357a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	61bb      	str	r3, [r7, #24]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2250      	movs	r2, #80	@ 0x50
 801348c:	5a9b      	ldrh	r3, [r3, r2]
 801348e:	b29b      	uxth	r3, r3
 8013490:	001a      	movs	r2, r3
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	189b      	adds	r3, r3, r2
 8013496:	61bb      	str	r3, [r7, #24]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	00da      	lsls	r2, r3, #3
 801349e:	69bb      	ldr	r3, [r7, #24]
 80134a0:	18d3      	adds	r3, r2, r3
 80134a2:	2280      	movs	r2, #128	@ 0x80
 80134a4:	00d2      	lsls	r2, r2, #3
 80134a6:	4694      	mov	ip, r2
 80134a8:	4463      	add	r3, ip
 80134aa:	617b      	str	r3, [r7, #20]
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	88db      	ldrh	r3, [r3, #6]
 80134b0:	085b      	lsrs	r3, r3, #1
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	18db      	adds	r3, r3, r3
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	697b      	ldr	r3, [r7, #20]
 80134ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	009b      	lsls	r3, r3, #2
 80134c4:	18d2      	adds	r2, r2, r3
 80134c6:	2112      	movs	r1, #18
 80134c8:	187b      	adds	r3, r7, r1
 80134ca:	8812      	ldrh	r2, [r2, #0]
 80134cc:	801a      	strh	r2, [r3, #0]
 80134ce:	187b      	adds	r3, r7, r1
 80134d0:	881b      	ldrh	r3, [r3, #0]
 80134d2:	2240      	movs	r2, #64	@ 0x40
 80134d4:	4013      	ands	r3, r2
 80134d6:	d016      	beq.n	8013506 <USB_ActivateEndpoint+0x17a>
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	009b      	lsls	r3, r3, #2
 80134e0:	18d3      	adds	r3, r2, r3
 80134e2:	881b      	ldrh	r3, [r3, #0]
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	2010      	movs	r0, #16
 80134e8:	183b      	adds	r3, r7, r0
 80134ea:	4957      	ldr	r1, [pc, #348]	@ (8013648 <USB_ActivateEndpoint+0x2bc>)
 80134ec:	400a      	ands	r2, r1
 80134ee:	801a      	strh	r2, [r3, #0]
 80134f0:	687a      	ldr	r2, [r7, #4]
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	009b      	lsls	r3, r3, #2
 80134f8:	18d3      	adds	r3, r2, r3
 80134fa:	183a      	adds	r2, r7, r0
 80134fc:	8812      	ldrh	r2, [r2, #0]
 80134fe:	4953      	ldr	r1, [pc, #332]	@ (801364c <USB_ActivateEndpoint+0x2c0>)
 8013500:	430a      	orrs	r2, r1
 8013502:	b292      	uxth	r2, r2
 8013504:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	78db      	ldrb	r3, [r3, #3]
 801350a:	2b01      	cmp	r3, #1
 801350c:	d01d      	beq.n	801354a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	781b      	ldrb	r3, [r3, #0]
 8013514:	009b      	lsls	r3, r3, #2
 8013516:	18d3      	adds	r3, r2, r3
 8013518:	881b      	ldrh	r3, [r3, #0]
 801351a:	b29a      	uxth	r2, r3
 801351c:	200c      	movs	r0, #12
 801351e:	183b      	adds	r3, r7, r0
 8013520:	494b      	ldr	r1, [pc, #300]	@ (8013650 <USB_ActivateEndpoint+0x2c4>)
 8013522:	400a      	ands	r2, r1
 8013524:	801a      	strh	r2, [r3, #0]
 8013526:	183b      	adds	r3, r7, r0
 8013528:	183a      	adds	r2, r7, r0
 801352a:	8812      	ldrh	r2, [r2, #0]
 801352c:	2120      	movs	r1, #32
 801352e:	404a      	eors	r2, r1
 8013530:	801a      	strh	r2, [r3, #0]
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	18d3      	adds	r3, r2, r3
 801353c:	183a      	adds	r2, r7, r0
 801353e:	8812      	ldrh	r2, [r2, #0]
 8013540:	4940      	ldr	r1, [pc, #256]	@ (8013644 <USB_ActivateEndpoint+0x2b8>)
 8013542:	430a      	orrs	r2, r1
 8013544:	b292      	uxth	r2, r2
 8013546:	801a      	strh	r2, [r3, #0]
 8013548:	e2b4      	b.n	8013ab4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	18d3      	adds	r3, r2, r3
 8013554:	881b      	ldrh	r3, [r3, #0]
 8013556:	b29a      	uxth	r2, r3
 8013558:	200e      	movs	r0, #14
 801355a:	183b      	adds	r3, r7, r0
 801355c:	493c      	ldr	r1, [pc, #240]	@ (8013650 <USB_ActivateEndpoint+0x2c4>)
 801355e:	400a      	ands	r2, r1
 8013560:	801a      	strh	r2, [r3, #0]
 8013562:	687a      	ldr	r2, [r7, #4]
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	18d3      	adds	r3, r2, r3
 801356c:	183a      	adds	r2, r7, r0
 801356e:	8812      	ldrh	r2, [r2, #0]
 8013570:	4934      	ldr	r1, [pc, #208]	@ (8013644 <USB_ActivateEndpoint+0x2b8>)
 8013572:	430a      	orrs	r2, r1
 8013574:	b292      	uxth	r2, r2
 8013576:	801a      	strh	r2, [r3, #0]
 8013578:	e29c      	b.n	8013ab4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	633b      	str	r3, [r7, #48]	@ 0x30
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2250      	movs	r2, #80	@ 0x50
 8013582:	5a9b      	ldrh	r3, [r3, r2]
 8013584:	b29b      	uxth	r3, r3
 8013586:	001a      	movs	r2, r3
 8013588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801358a:	189b      	adds	r3, r3, r2
 801358c:	633b      	str	r3, [r7, #48]	@ 0x30
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	00da      	lsls	r2, r3, #3
 8013594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013596:	18d3      	adds	r3, r2, r3
 8013598:	4a2e      	ldr	r2, [pc, #184]	@ (8013654 <USB_ActivateEndpoint+0x2c8>)
 801359a:	4694      	mov	ip, r2
 801359c:	4463      	add	r3, ip
 801359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	88db      	ldrh	r3, [r3, #6]
 80135a4:	085b      	lsrs	r3, r3, #1
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	18db      	adds	r3, r3, r3
 80135aa:	b29a      	uxth	r2, r3
 80135ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2250      	movs	r2, #80	@ 0x50
 80135b8:	5a9b      	ldrh	r3, [r3, r2]
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	001a      	movs	r2, r3
 80135be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c0:	189b      	adds	r3, r3, r2
 80135c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	00da      	lsls	r2, r3, #3
 80135ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135cc:	18d3      	adds	r3, r2, r3
 80135ce:	4a22      	ldr	r2, [pc, #136]	@ (8013658 <USB_ActivateEndpoint+0x2cc>)
 80135d0:	4694      	mov	ip, r2
 80135d2:	4463      	add	r3, ip
 80135d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80135d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135d8:	881b      	ldrh	r3, [r3, #0]
 80135da:	b29b      	uxth	r3, r3
 80135dc:	059b      	lsls	r3, r3, #22
 80135de:	0d9b      	lsrs	r3, r3, #22
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e4:	801a      	strh	r2, [r3, #0]
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80135ec:	d91a      	bls.n	8013624 <USB_ActivateEndpoint+0x298>
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	691b      	ldr	r3, [r3, #16]
 80135f2:	095b      	lsrs	r3, r3, #5
 80135f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	691b      	ldr	r3, [r3, #16]
 80135fa:	221f      	movs	r2, #31
 80135fc:	4013      	ands	r3, r2
 80135fe:	d102      	bne.n	8013606 <USB_ActivateEndpoint+0x27a>
 8013600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013602:	3b01      	subs	r3, #1
 8013604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	b29a      	uxth	r2, r3
 801360c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801360e:	b29b      	uxth	r3, r3
 8013610:	029b      	lsls	r3, r3, #10
 8013612:	b29b      	uxth	r3, r3
 8013614:	4313      	orrs	r3, r2
 8013616:	b29b      	uxth	r3, r3
 8013618:	4a10      	ldr	r2, [pc, #64]	@ (801365c <USB_ActivateEndpoint+0x2d0>)
 801361a:	4313      	orrs	r3, r2
 801361c:	b29a      	uxth	r2, r3
 801361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013620:	801a      	strh	r2, [r3, #0]
 8013622:	e034      	b.n	801368e <USB_ActivateEndpoint+0x302>
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	691b      	ldr	r3, [r3, #16]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d119      	bne.n	8013660 <USB_ActivateEndpoint+0x2d4>
 801362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362e:	881b      	ldrh	r3, [r3, #0]
 8013630:	b29b      	uxth	r3, r3
 8013632:	4a0a      	ldr	r2, [pc, #40]	@ (801365c <USB_ActivateEndpoint+0x2d0>)
 8013634:	4313      	orrs	r3, r2
 8013636:	b29a      	uxth	r2, r3
 8013638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363a:	801a      	strh	r2, [r3, #0]
 801363c:	e027      	b.n	801368e <USB_ActivateEndpoint+0x302>
 801363e:	46c0      	nop			@ (mov r8, r8)
 8013640:	ffff898f 	.word	0xffff898f
 8013644:	ffff8080 	.word	0xffff8080
 8013648:	ffff8f8f 	.word	0xffff8f8f
 801364c:	ffff80c0 	.word	0xffff80c0
 8013650:	ffff8fbf 	.word	0xffff8fbf
 8013654:	00000404 	.word	0x00000404
 8013658:	00000406 	.word	0x00000406
 801365c:	ffff8000 	.word	0xffff8000
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	691b      	ldr	r3, [r3, #16]
 8013664:	085b      	lsrs	r3, r3, #1
 8013666:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	691b      	ldr	r3, [r3, #16]
 801366c:	2201      	movs	r2, #1
 801366e:	4013      	ands	r3, r2
 8013670:	d002      	beq.n	8013678 <USB_ActivateEndpoint+0x2ec>
 8013672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013674:	3301      	adds	r3, #1
 8013676:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801367a:	881b      	ldrh	r3, [r3, #0]
 801367c:	b29a      	uxth	r2, r3
 801367e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013680:	b29b      	uxth	r3, r3
 8013682:	029b      	lsls	r3, r3, #10
 8013684:	b29b      	uxth	r3, r3
 8013686:	4313      	orrs	r3, r2
 8013688:	b29a      	uxth	r2, r3
 801368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801368c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	18d2      	adds	r2, r2, r3
 8013698:	2122      	movs	r1, #34	@ 0x22
 801369a:	187b      	adds	r3, r7, r1
 801369c:	8812      	ldrh	r2, [r2, #0]
 801369e:	801a      	strh	r2, [r3, #0]
 80136a0:	187b      	adds	r3, r7, r1
 80136a2:	881a      	ldrh	r2, [r3, #0]
 80136a4:	2380      	movs	r3, #128	@ 0x80
 80136a6:	01db      	lsls	r3, r3, #7
 80136a8:	4013      	ands	r3, r2
 80136aa:	d016      	beq.n	80136da <USB_ActivateEndpoint+0x34e>
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	18d3      	adds	r3, r2, r3
 80136b6:	881b      	ldrh	r3, [r3, #0]
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	2020      	movs	r0, #32
 80136bc:	183b      	adds	r3, r7, r0
 80136be:	49dd      	ldr	r1, [pc, #884]	@ (8013a34 <USB_ActivateEndpoint+0x6a8>)
 80136c0:	400a      	ands	r2, r1
 80136c2:	801a      	strh	r2, [r3, #0]
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	18d3      	adds	r3, r2, r3
 80136ce:	183a      	adds	r2, r7, r0
 80136d0:	8812      	ldrh	r2, [r2, #0]
 80136d2:	49d9      	ldr	r1, [pc, #868]	@ (8013a38 <USB_ActivateEndpoint+0x6ac>)
 80136d4:	430a      	orrs	r2, r1
 80136d6:	b292      	uxth	r2, r2
 80136d8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d125      	bne.n	801372e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	18d3      	adds	r3, r2, r3
 80136ec:	881b      	ldrh	r3, [r3, #0]
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	201c      	movs	r0, #28
 80136f2:	183b      	adds	r3, r7, r0
 80136f4:	49d1      	ldr	r1, [pc, #836]	@ (8013a3c <USB_ActivateEndpoint+0x6b0>)
 80136f6:	400a      	ands	r2, r1
 80136f8:	801a      	strh	r2, [r3, #0]
 80136fa:	183b      	adds	r3, r7, r0
 80136fc:	183a      	adds	r2, r7, r0
 80136fe:	8812      	ldrh	r2, [r2, #0]
 8013700:	2180      	movs	r1, #128	@ 0x80
 8013702:	0149      	lsls	r1, r1, #5
 8013704:	404a      	eors	r2, r1
 8013706:	801a      	strh	r2, [r3, #0]
 8013708:	183b      	adds	r3, r7, r0
 801370a:	183a      	adds	r2, r7, r0
 801370c:	8812      	ldrh	r2, [r2, #0]
 801370e:	2180      	movs	r1, #128	@ 0x80
 8013710:	0189      	lsls	r1, r1, #6
 8013712:	404a      	eors	r2, r1
 8013714:	801a      	strh	r2, [r3, #0]
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	009b      	lsls	r3, r3, #2
 801371e:	18d3      	adds	r3, r2, r3
 8013720:	183a      	adds	r2, r7, r0
 8013722:	8812      	ldrh	r2, [r2, #0]
 8013724:	49c6      	ldr	r1, [pc, #792]	@ (8013a40 <USB_ActivateEndpoint+0x6b4>)
 8013726:	430a      	orrs	r2, r1
 8013728:	b292      	uxth	r2, r2
 801372a:	801a      	strh	r2, [r3, #0]
 801372c:	e1c2      	b.n	8013ab4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	18d3      	adds	r3, r2, r3
 8013738:	881b      	ldrh	r3, [r3, #0]
 801373a:	b29a      	uxth	r2, r3
 801373c:	201e      	movs	r0, #30
 801373e:	183b      	adds	r3, r7, r0
 8013740:	49be      	ldr	r1, [pc, #760]	@ (8013a3c <USB_ActivateEndpoint+0x6b0>)
 8013742:	400a      	ands	r2, r1
 8013744:	801a      	strh	r2, [r3, #0]
 8013746:	183b      	adds	r3, r7, r0
 8013748:	183a      	adds	r2, r7, r0
 801374a:	8812      	ldrh	r2, [r2, #0]
 801374c:	2180      	movs	r1, #128	@ 0x80
 801374e:	0189      	lsls	r1, r1, #6
 8013750:	404a      	eors	r2, r1
 8013752:	801a      	strh	r2, [r3, #0]
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	18d3      	adds	r3, r2, r3
 801375e:	183a      	adds	r2, r7, r0
 8013760:	8812      	ldrh	r2, [r2, #0]
 8013762:	49b7      	ldr	r1, [pc, #732]	@ (8013a40 <USB_ActivateEndpoint+0x6b4>)
 8013764:	430a      	orrs	r2, r1
 8013766:	b292      	uxth	r2, r2
 8013768:	801a      	strh	r2, [r3, #0]
 801376a:	e1a3      	b.n	8013ab4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	78db      	ldrb	r3, [r3, #3]
 8013770:	2b02      	cmp	r3, #2
 8013772:	d117      	bne.n	80137a4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	18d3      	adds	r3, r2, r3
 801377e:	881b      	ldrh	r3, [r3, #0]
 8013780:	b29a      	uxth	r2, r3
 8013782:	2062      	movs	r0, #98	@ 0x62
 8013784:	183b      	adds	r3, r7, r0
 8013786:	49ab      	ldr	r1, [pc, #684]	@ (8013a34 <USB_ActivateEndpoint+0x6a8>)
 8013788:	400a      	ands	r2, r1
 801378a:	801a      	strh	r2, [r3, #0]
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	18d3      	adds	r3, r2, r3
 8013796:	183a      	adds	r2, r7, r0
 8013798:	8812      	ldrh	r2, [r2, #0]
 801379a:	49aa      	ldr	r1, [pc, #680]	@ (8013a44 <USB_ActivateEndpoint+0x6b8>)
 801379c:	430a      	orrs	r2, r1
 801379e:	b292      	uxth	r2, r2
 80137a0:	801a      	strh	r2, [r3, #0]
 80137a2:	e016      	b.n	80137d2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	009b      	lsls	r3, r3, #2
 80137ac:	18d3      	adds	r3, r2, r3
 80137ae:	881b      	ldrh	r3, [r3, #0]
 80137b0:	b29a      	uxth	r2, r3
 80137b2:	2064      	movs	r0, #100	@ 0x64
 80137b4:	183b      	adds	r3, r7, r0
 80137b6:	49a4      	ldr	r1, [pc, #656]	@ (8013a48 <USB_ActivateEndpoint+0x6bc>)
 80137b8:	400a      	ands	r2, r1
 80137ba:	801a      	strh	r2, [r3, #0]
 80137bc:	687a      	ldr	r2, [r7, #4]
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	009b      	lsls	r3, r3, #2
 80137c4:	18d3      	adds	r3, r2, r3
 80137c6:	183a      	adds	r2, r7, r0
 80137c8:	8812      	ldrh	r2, [r2, #0]
 80137ca:	499d      	ldr	r1, [pc, #628]	@ (8013a40 <USB_ActivateEndpoint+0x6b4>)
 80137cc:	430a      	orrs	r2, r1
 80137ce:	b292      	uxth	r2, r2
 80137d0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2250      	movs	r2, #80	@ 0x50
 80137da:	5a9b      	ldrh	r3, [r3, r2]
 80137dc:	b29b      	uxth	r3, r3
 80137de:	001a      	movs	r2, r3
 80137e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137e2:	189b      	adds	r3, r3, r2
 80137e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	00da      	lsls	r2, r3, #3
 80137ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137ee:	18d3      	adds	r3, r2, r3
 80137f0:	2280      	movs	r2, #128	@ 0x80
 80137f2:	00d2      	lsls	r2, r2, #3
 80137f4:	4694      	mov	ip, r2
 80137f6:	4463      	add	r3, ip
 80137f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	891b      	ldrh	r3, [r3, #8]
 80137fe:	085b      	lsrs	r3, r3, #1
 8013800:	b29b      	uxth	r3, r3
 8013802:	18db      	adds	r3, r3, r3
 8013804:	b29a      	uxth	r2, r3
 8013806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013808:	801a      	strh	r2, [r3, #0]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	657b      	str	r3, [r7, #84]	@ 0x54
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2250      	movs	r2, #80	@ 0x50
 8013812:	5a9b      	ldrh	r3, [r3, r2]
 8013814:	b29b      	uxth	r3, r3
 8013816:	001a      	movs	r2, r3
 8013818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801381a:	189b      	adds	r3, r3, r2
 801381c:	657b      	str	r3, [r7, #84]	@ 0x54
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	781b      	ldrb	r3, [r3, #0]
 8013822:	00da      	lsls	r2, r3, #3
 8013824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013826:	18d3      	adds	r3, r2, r3
 8013828:	4a88      	ldr	r2, [pc, #544]	@ (8013a4c <USB_ActivateEndpoint+0x6c0>)
 801382a:	4694      	mov	ip, r2
 801382c:	4463      	add	r3, ip
 801382e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	895b      	ldrh	r3, [r3, #10]
 8013834:	085b      	lsrs	r3, r3, #1
 8013836:	b29b      	uxth	r3, r3
 8013838:	18db      	adds	r3, r3, r3
 801383a:	b29a      	uxth	r2, r3
 801383c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801383e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	785b      	ldrb	r3, [r3, #1]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d000      	beq.n	801384a <USB_ActivateEndpoint+0x4be>
 8013848:	e087      	b.n	801395a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801384a:	687a      	ldr	r2, [r7, #4]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	18d2      	adds	r2, r2, r3
 8013854:	2140      	movs	r1, #64	@ 0x40
 8013856:	187b      	adds	r3, r7, r1
 8013858:	8812      	ldrh	r2, [r2, #0]
 801385a:	801a      	strh	r2, [r3, #0]
 801385c:	187b      	adds	r3, r7, r1
 801385e:	881a      	ldrh	r2, [r3, #0]
 8013860:	2380      	movs	r3, #128	@ 0x80
 8013862:	01db      	lsls	r3, r3, #7
 8013864:	4013      	ands	r3, r2
 8013866:	d016      	beq.n	8013896 <USB_ActivateEndpoint+0x50a>
 8013868:	687a      	ldr	r2, [r7, #4]
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	18d3      	adds	r3, r2, r3
 8013872:	881b      	ldrh	r3, [r3, #0]
 8013874:	b29a      	uxth	r2, r3
 8013876:	203e      	movs	r0, #62	@ 0x3e
 8013878:	183b      	adds	r3, r7, r0
 801387a:	496e      	ldr	r1, [pc, #440]	@ (8013a34 <USB_ActivateEndpoint+0x6a8>)
 801387c:	400a      	ands	r2, r1
 801387e:	801a      	strh	r2, [r3, #0]
 8013880:	687a      	ldr	r2, [r7, #4]
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	009b      	lsls	r3, r3, #2
 8013888:	18d3      	adds	r3, r2, r3
 801388a:	183a      	adds	r2, r7, r0
 801388c:	8812      	ldrh	r2, [r2, #0]
 801388e:	496a      	ldr	r1, [pc, #424]	@ (8013a38 <USB_ActivateEndpoint+0x6ac>)
 8013890:	430a      	orrs	r2, r1
 8013892:	b292      	uxth	r2, r2
 8013894:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	18d2      	adds	r2, r2, r3
 80138a0:	213c      	movs	r1, #60	@ 0x3c
 80138a2:	187b      	adds	r3, r7, r1
 80138a4:	8812      	ldrh	r2, [r2, #0]
 80138a6:	801a      	strh	r2, [r3, #0]
 80138a8:	187b      	adds	r3, r7, r1
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	2240      	movs	r2, #64	@ 0x40
 80138ae:	4013      	ands	r3, r2
 80138b0:	d016      	beq.n	80138e0 <USB_ActivateEndpoint+0x554>
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	18d3      	adds	r3, r2, r3
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	b29a      	uxth	r2, r3
 80138c0:	203a      	movs	r0, #58	@ 0x3a
 80138c2:	183b      	adds	r3, r7, r0
 80138c4:	495b      	ldr	r1, [pc, #364]	@ (8013a34 <USB_ActivateEndpoint+0x6a8>)
 80138c6:	400a      	ands	r2, r1
 80138c8:	801a      	strh	r2, [r3, #0]
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	009b      	lsls	r3, r3, #2
 80138d2:	18d3      	adds	r3, r2, r3
 80138d4:	183a      	adds	r2, r7, r0
 80138d6:	8812      	ldrh	r2, [r2, #0]
 80138d8:	495d      	ldr	r1, [pc, #372]	@ (8013a50 <USB_ActivateEndpoint+0x6c4>)
 80138da:	430a      	orrs	r2, r1
 80138dc:	b292      	uxth	r2, r2
 80138de:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80138e0:	687a      	ldr	r2, [r7, #4]
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	18d3      	adds	r3, r2, r3
 80138ea:	881b      	ldrh	r3, [r3, #0]
 80138ec:	b29a      	uxth	r2, r3
 80138ee:	2038      	movs	r0, #56	@ 0x38
 80138f0:	183b      	adds	r3, r7, r0
 80138f2:	4952      	ldr	r1, [pc, #328]	@ (8013a3c <USB_ActivateEndpoint+0x6b0>)
 80138f4:	400a      	ands	r2, r1
 80138f6:	801a      	strh	r2, [r3, #0]
 80138f8:	183b      	adds	r3, r7, r0
 80138fa:	183a      	adds	r2, r7, r0
 80138fc:	8812      	ldrh	r2, [r2, #0]
 80138fe:	2180      	movs	r1, #128	@ 0x80
 8013900:	0149      	lsls	r1, r1, #5
 8013902:	404a      	eors	r2, r1
 8013904:	801a      	strh	r2, [r3, #0]
 8013906:	183b      	adds	r3, r7, r0
 8013908:	183a      	adds	r2, r7, r0
 801390a:	8812      	ldrh	r2, [r2, #0]
 801390c:	2180      	movs	r1, #128	@ 0x80
 801390e:	0189      	lsls	r1, r1, #6
 8013910:	404a      	eors	r2, r1
 8013912:	801a      	strh	r2, [r3, #0]
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	009b      	lsls	r3, r3, #2
 801391c:	18d3      	adds	r3, r2, r3
 801391e:	183a      	adds	r2, r7, r0
 8013920:	8812      	ldrh	r2, [r2, #0]
 8013922:	4947      	ldr	r1, [pc, #284]	@ (8013a40 <USB_ActivateEndpoint+0x6b4>)
 8013924:	430a      	orrs	r2, r1
 8013926:	b292      	uxth	r2, r2
 8013928:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801392a:	687a      	ldr	r2, [r7, #4]
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	18d3      	adds	r3, r2, r3
 8013934:	881b      	ldrh	r3, [r3, #0]
 8013936:	b29a      	uxth	r2, r3
 8013938:	2036      	movs	r0, #54	@ 0x36
 801393a:	183b      	adds	r3, r7, r0
 801393c:	4945      	ldr	r1, [pc, #276]	@ (8013a54 <USB_ActivateEndpoint+0x6c8>)
 801393e:	400a      	ands	r2, r1
 8013940:	801a      	strh	r2, [r3, #0]
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	18d3      	adds	r3, r2, r3
 801394c:	183a      	adds	r2, r7, r0
 801394e:	8812      	ldrh	r2, [r2, #0]
 8013950:	493b      	ldr	r1, [pc, #236]	@ (8013a40 <USB_ActivateEndpoint+0x6b4>)
 8013952:	430a      	orrs	r2, r1
 8013954:	b292      	uxth	r2, r2
 8013956:	801a      	strh	r2, [r3, #0]
 8013958:	e0ac      	b.n	8013ab4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	18d2      	adds	r2, r2, r3
 8013964:	214e      	movs	r1, #78	@ 0x4e
 8013966:	187b      	adds	r3, r7, r1
 8013968:	8812      	ldrh	r2, [r2, #0]
 801396a:	801a      	strh	r2, [r3, #0]
 801396c:	187b      	adds	r3, r7, r1
 801396e:	881a      	ldrh	r2, [r3, #0]
 8013970:	2380      	movs	r3, #128	@ 0x80
 8013972:	01db      	lsls	r3, r3, #7
 8013974:	4013      	ands	r3, r2
 8013976:	d016      	beq.n	80139a6 <USB_ActivateEndpoint+0x61a>
 8013978:	687a      	ldr	r2, [r7, #4]
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	18d3      	adds	r3, r2, r3
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	b29a      	uxth	r2, r3
 8013986:	204c      	movs	r0, #76	@ 0x4c
 8013988:	183b      	adds	r3, r7, r0
 801398a:	492a      	ldr	r1, [pc, #168]	@ (8013a34 <USB_ActivateEndpoint+0x6a8>)
 801398c:	400a      	ands	r2, r1
 801398e:	801a      	strh	r2, [r3, #0]
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	18d3      	adds	r3, r2, r3
 801399a:	183a      	adds	r2, r7, r0
 801399c:	8812      	ldrh	r2, [r2, #0]
 801399e:	4926      	ldr	r1, [pc, #152]	@ (8013a38 <USB_ActivateEndpoint+0x6ac>)
 80139a0:	430a      	orrs	r2, r1
 80139a2:	b292      	uxth	r2, r2
 80139a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	009b      	lsls	r3, r3, #2
 80139ae:	18d2      	adds	r2, r2, r3
 80139b0:	214a      	movs	r1, #74	@ 0x4a
 80139b2:	187b      	adds	r3, r7, r1
 80139b4:	8812      	ldrh	r2, [r2, #0]
 80139b6:	801a      	strh	r2, [r3, #0]
 80139b8:	187b      	adds	r3, r7, r1
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	2240      	movs	r2, #64	@ 0x40
 80139be:	4013      	ands	r3, r2
 80139c0:	d016      	beq.n	80139f0 <USB_ActivateEndpoint+0x664>
 80139c2:	687a      	ldr	r2, [r7, #4]
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	009b      	lsls	r3, r3, #2
 80139ca:	18d3      	adds	r3, r2, r3
 80139cc:	881b      	ldrh	r3, [r3, #0]
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	2048      	movs	r0, #72	@ 0x48
 80139d2:	183b      	adds	r3, r7, r0
 80139d4:	4917      	ldr	r1, [pc, #92]	@ (8013a34 <USB_ActivateEndpoint+0x6a8>)
 80139d6:	400a      	ands	r2, r1
 80139d8:	801a      	strh	r2, [r3, #0]
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	18d3      	adds	r3, r2, r3
 80139e4:	183a      	adds	r2, r7, r0
 80139e6:	8812      	ldrh	r2, [r2, #0]
 80139e8:	4919      	ldr	r1, [pc, #100]	@ (8013a50 <USB_ActivateEndpoint+0x6c4>)
 80139ea:	430a      	orrs	r2, r1
 80139ec:	b292      	uxth	r2, r2
 80139ee:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	78db      	ldrb	r3, [r3, #3]
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d02f      	beq.n	8013a58 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	18d3      	adds	r3, r2, r3
 8013a02:	881b      	ldrh	r3, [r3, #0]
 8013a04:	b29a      	uxth	r2, r3
 8013a06:	2044      	movs	r0, #68	@ 0x44
 8013a08:	183b      	adds	r3, r7, r0
 8013a0a:	4912      	ldr	r1, [pc, #72]	@ (8013a54 <USB_ActivateEndpoint+0x6c8>)
 8013a0c:	400a      	ands	r2, r1
 8013a0e:	801a      	strh	r2, [r3, #0]
 8013a10:	183b      	adds	r3, r7, r0
 8013a12:	183a      	adds	r2, r7, r0
 8013a14:	8812      	ldrh	r2, [r2, #0]
 8013a16:	2120      	movs	r1, #32
 8013a18:	404a      	eors	r2, r1
 8013a1a:	801a      	strh	r2, [r3, #0]
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	18d3      	adds	r3, r2, r3
 8013a26:	183a      	adds	r2, r7, r0
 8013a28:	8812      	ldrh	r2, [r2, #0]
 8013a2a:	4905      	ldr	r1, [pc, #20]	@ (8013a40 <USB_ActivateEndpoint+0x6b4>)
 8013a2c:	430a      	orrs	r2, r1
 8013a2e:	b292      	uxth	r2, r2
 8013a30:	801a      	strh	r2, [r3, #0]
 8013a32:	e028      	b.n	8013a86 <USB_ActivateEndpoint+0x6fa>
 8013a34:	ffff8f8f 	.word	0xffff8f8f
 8013a38:	ffffc080 	.word	0xffffc080
 8013a3c:	ffffbf8f 	.word	0xffffbf8f
 8013a40:	ffff8080 	.word	0xffff8080
 8013a44:	ffff8180 	.word	0xffff8180
 8013a48:	ffff8e8f 	.word	0xffff8e8f
 8013a4c:	00000404 	.word	0x00000404
 8013a50:	ffff80c0 	.word	0xffff80c0
 8013a54:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	18d3      	adds	r3, r2, r3
 8013a62:	881b      	ldrh	r3, [r3, #0]
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	2046      	movs	r0, #70	@ 0x46
 8013a68:	183b      	adds	r3, r7, r0
 8013a6a:	4916      	ldr	r1, [pc, #88]	@ (8013ac4 <USB_ActivateEndpoint+0x738>)
 8013a6c:	400a      	ands	r2, r1
 8013a6e:	801a      	strh	r2, [r3, #0]
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	18d3      	adds	r3, r2, r3
 8013a7a:	183a      	adds	r2, r7, r0
 8013a7c:	8812      	ldrh	r2, [r2, #0]
 8013a7e:	4912      	ldr	r1, [pc, #72]	@ (8013ac8 <USB_ActivateEndpoint+0x73c>)
 8013a80:	430a      	orrs	r2, r1
 8013a82:	b292      	uxth	r2, r2
 8013a84:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	18d3      	adds	r3, r2, r3
 8013a90:	881b      	ldrh	r3, [r3, #0]
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	2042      	movs	r0, #66	@ 0x42
 8013a96:	183b      	adds	r3, r7, r0
 8013a98:	490c      	ldr	r1, [pc, #48]	@ (8013acc <USB_ActivateEndpoint+0x740>)
 8013a9a:	400a      	ands	r2, r1
 8013a9c:	801a      	strh	r2, [r3, #0]
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	009b      	lsls	r3, r3, #2
 8013aa6:	18d3      	adds	r3, r2, r3
 8013aa8:	183a      	adds	r2, r7, r0
 8013aaa:	8812      	ldrh	r2, [r2, #0]
 8013aac:	4906      	ldr	r1, [pc, #24]	@ (8013ac8 <USB_ActivateEndpoint+0x73c>)
 8013aae:	430a      	orrs	r2, r1
 8013ab0:	b292      	uxth	r2, r2
 8013ab2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8013ab4:	236f      	movs	r3, #111	@ 0x6f
 8013ab6:	18fb      	adds	r3, r7, r3
 8013ab8:	781b      	ldrb	r3, [r3, #0]
}
 8013aba:	0018      	movs	r0, r3
 8013abc:	46bd      	mov	sp, r7
 8013abe:	b01c      	add	sp, #112	@ 0x70
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	46c0      	nop			@ (mov r8, r8)
 8013ac4:	ffff8fbf 	.word	0xffff8fbf
 8013ac8:	ffff8080 	.word	0xffff8080
 8013acc:	ffffbf8f 	.word	0xffffbf8f

08013ad0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b08c      	sub	sp, #48	@ 0x30
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	7b1b      	ldrb	r3, [r3, #12]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d000      	beq.n	8013ae4 <USB_DeactivateEndpoint+0x14>
 8013ae2:	e07e      	b.n	8013be2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	785b      	ldrb	r3, [r3, #1]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d03c      	beq.n	8013b66 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	781b      	ldrb	r3, [r3, #0]
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	18d2      	adds	r2, r2, r3
 8013af6:	210c      	movs	r1, #12
 8013af8:	187b      	adds	r3, r7, r1
 8013afa:	8812      	ldrh	r2, [r2, #0]
 8013afc:	801a      	strh	r2, [r3, #0]
 8013afe:	187b      	adds	r3, r7, r1
 8013b00:	881b      	ldrh	r3, [r3, #0]
 8013b02:	2240      	movs	r2, #64	@ 0x40
 8013b04:	4013      	ands	r3, r2
 8013b06:	d016      	beq.n	8013b36 <USB_DeactivateEndpoint+0x66>
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	009b      	lsls	r3, r3, #2
 8013b10:	18d3      	adds	r3, r2, r3
 8013b12:	881b      	ldrh	r3, [r3, #0]
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	200a      	movs	r0, #10
 8013b18:	183b      	adds	r3, r7, r0
 8013b1a:	49c7      	ldr	r1, [pc, #796]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013b1c:	400a      	ands	r2, r1
 8013b1e:	801a      	strh	r2, [r3, #0]
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	18d3      	adds	r3, r2, r3
 8013b2a:	183a      	adds	r2, r7, r0
 8013b2c:	8812      	ldrh	r2, [r2, #0]
 8013b2e:	49c3      	ldr	r1, [pc, #780]	@ (8013e3c <USB_DeactivateEndpoint+0x36c>)
 8013b30:	430a      	orrs	r2, r1
 8013b32:	b292      	uxth	r2, r2
 8013b34:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	781b      	ldrb	r3, [r3, #0]
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	18d3      	adds	r3, r2, r3
 8013b40:	881b      	ldrh	r3, [r3, #0]
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	2008      	movs	r0, #8
 8013b46:	183b      	adds	r3, r7, r0
 8013b48:	49bd      	ldr	r1, [pc, #756]	@ (8013e40 <USB_DeactivateEndpoint+0x370>)
 8013b4a:	400a      	ands	r2, r1
 8013b4c:	801a      	strh	r2, [r3, #0]
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	009b      	lsls	r3, r3, #2
 8013b56:	18d3      	adds	r3, r2, r3
 8013b58:	183a      	adds	r2, r7, r0
 8013b5a:	8812      	ldrh	r2, [r2, #0]
 8013b5c:	49b9      	ldr	r1, [pc, #740]	@ (8013e44 <USB_DeactivateEndpoint+0x374>)
 8013b5e:	430a      	orrs	r2, r1
 8013b60:	b292      	uxth	r2, r2
 8013b62:	801a      	strh	r2, [r3, #0]
 8013b64:	e163      	b.n	8013e2e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	009b      	lsls	r3, r3, #2
 8013b6e:	18d2      	adds	r2, r2, r3
 8013b70:	2112      	movs	r1, #18
 8013b72:	187b      	adds	r3, r7, r1
 8013b74:	8812      	ldrh	r2, [r2, #0]
 8013b76:	801a      	strh	r2, [r3, #0]
 8013b78:	187b      	adds	r3, r7, r1
 8013b7a:	881a      	ldrh	r2, [r3, #0]
 8013b7c:	2380      	movs	r3, #128	@ 0x80
 8013b7e:	01db      	lsls	r3, r3, #7
 8013b80:	4013      	ands	r3, r2
 8013b82:	d016      	beq.n	8013bb2 <USB_DeactivateEndpoint+0xe2>
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	18d3      	adds	r3, r2, r3
 8013b8e:	881b      	ldrh	r3, [r3, #0]
 8013b90:	b29a      	uxth	r2, r3
 8013b92:	2010      	movs	r0, #16
 8013b94:	183b      	adds	r3, r7, r0
 8013b96:	49a8      	ldr	r1, [pc, #672]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013b98:	400a      	ands	r2, r1
 8013b9a:	801a      	strh	r2, [r3, #0]
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	009b      	lsls	r3, r3, #2
 8013ba4:	18d3      	adds	r3, r2, r3
 8013ba6:	183a      	adds	r2, r7, r0
 8013ba8:	8812      	ldrh	r2, [r2, #0]
 8013baa:	49a7      	ldr	r1, [pc, #668]	@ (8013e48 <USB_DeactivateEndpoint+0x378>)
 8013bac:	430a      	orrs	r2, r1
 8013bae:	b292      	uxth	r2, r2
 8013bb0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	18d3      	adds	r3, r2, r3
 8013bbc:	881b      	ldrh	r3, [r3, #0]
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	200e      	movs	r0, #14
 8013bc2:	183b      	adds	r3, r7, r0
 8013bc4:	49a1      	ldr	r1, [pc, #644]	@ (8013e4c <USB_DeactivateEndpoint+0x37c>)
 8013bc6:	400a      	ands	r2, r1
 8013bc8:	801a      	strh	r2, [r3, #0]
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	009b      	lsls	r3, r3, #2
 8013bd2:	18d3      	adds	r3, r2, r3
 8013bd4:	183a      	adds	r2, r7, r0
 8013bd6:	8812      	ldrh	r2, [r2, #0]
 8013bd8:	499a      	ldr	r1, [pc, #616]	@ (8013e44 <USB_DeactivateEndpoint+0x374>)
 8013bda:	430a      	orrs	r2, r1
 8013bdc:	b292      	uxth	r2, r2
 8013bde:	801a      	strh	r2, [r3, #0]
 8013be0:	e125      	b.n	8013e2e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	785b      	ldrb	r3, [r3, #1]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d000      	beq.n	8013bec <USB_DeactivateEndpoint+0x11c>
 8013bea:	e090      	b.n	8013d0e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	18d2      	adds	r2, r2, r3
 8013bf6:	2120      	movs	r1, #32
 8013bf8:	187b      	adds	r3, r7, r1
 8013bfa:	8812      	ldrh	r2, [r2, #0]
 8013bfc:	801a      	strh	r2, [r3, #0]
 8013bfe:	187b      	adds	r3, r7, r1
 8013c00:	881a      	ldrh	r2, [r3, #0]
 8013c02:	2380      	movs	r3, #128	@ 0x80
 8013c04:	01db      	lsls	r3, r3, #7
 8013c06:	4013      	ands	r3, r2
 8013c08:	d016      	beq.n	8013c38 <USB_DeactivateEndpoint+0x168>
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	18d3      	adds	r3, r2, r3
 8013c14:	881b      	ldrh	r3, [r3, #0]
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	201e      	movs	r0, #30
 8013c1a:	183b      	adds	r3, r7, r0
 8013c1c:	4986      	ldr	r1, [pc, #536]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013c1e:	400a      	ands	r2, r1
 8013c20:	801a      	strh	r2, [r3, #0]
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	009b      	lsls	r3, r3, #2
 8013c2a:	18d3      	adds	r3, r2, r3
 8013c2c:	183a      	adds	r2, r7, r0
 8013c2e:	8812      	ldrh	r2, [r2, #0]
 8013c30:	4985      	ldr	r1, [pc, #532]	@ (8013e48 <USB_DeactivateEndpoint+0x378>)
 8013c32:	430a      	orrs	r2, r1
 8013c34:	b292      	uxth	r2, r2
 8013c36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	18d2      	adds	r2, r2, r3
 8013c42:	211c      	movs	r1, #28
 8013c44:	187b      	adds	r3, r7, r1
 8013c46:	8812      	ldrh	r2, [r2, #0]
 8013c48:	801a      	strh	r2, [r3, #0]
 8013c4a:	187b      	adds	r3, r7, r1
 8013c4c:	881b      	ldrh	r3, [r3, #0]
 8013c4e:	2240      	movs	r2, #64	@ 0x40
 8013c50:	4013      	ands	r3, r2
 8013c52:	d016      	beq.n	8013c82 <USB_DeactivateEndpoint+0x1b2>
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	781b      	ldrb	r3, [r3, #0]
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	18d3      	adds	r3, r2, r3
 8013c5e:	881b      	ldrh	r3, [r3, #0]
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	201a      	movs	r0, #26
 8013c64:	183b      	adds	r3, r7, r0
 8013c66:	4974      	ldr	r1, [pc, #464]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013c68:	400a      	ands	r2, r1
 8013c6a:	801a      	strh	r2, [r3, #0]
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	009b      	lsls	r3, r3, #2
 8013c74:	18d3      	adds	r3, r2, r3
 8013c76:	183a      	adds	r2, r7, r0
 8013c78:	8812      	ldrh	r2, [r2, #0]
 8013c7a:	4970      	ldr	r1, [pc, #448]	@ (8013e3c <USB_DeactivateEndpoint+0x36c>)
 8013c7c:	430a      	orrs	r2, r1
 8013c7e:	b292      	uxth	r2, r2
 8013c80:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013c82:	687a      	ldr	r2, [r7, #4]
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	18d3      	adds	r3, r2, r3
 8013c8c:	881b      	ldrh	r3, [r3, #0]
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	2018      	movs	r0, #24
 8013c92:	183b      	adds	r3, r7, r0
 8013c94:	4968      	ldr	r1, [pc, #416]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013c96:	400a      	ands	r2, r1
 8013c98:	801a      	strh	r2, [r3, #0]
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	009b      	lsls	r3, r3, #2
 8013ca2:	18d3      	adds	r3, r2, r3
 8013ca4:	183a      	adds	r2, r7, r0
 8013ca6:	8812      	ldrh	r2, [r2, #0]
 8013ca8:	4964      	ldr	r1, [pc, #400]	@ (8013e3c <USB_DeactivateEndpoint+0x36c>)
 8013caa:	430a      	orrs	r2, r1
 8013cac:	b292      	uxth	r2, r2
 8013cae:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	009b      	lsls	r3, r3, #2
 8013cb8:	18d3      	adds	r3, r2, r3
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	2016      	movs	r0, #22
 8013cc0:	183b      	adds	r3, r7, r0
 8013cc2:	4962      	ldr	r1, [pc, #392]	@ (8013e4c <USB_DeactivateEndpoint+0x37c>)
 8013cc4:	400a      	ands	r2, r1
 8013cc6:	801a      	strh	r2, [r3, #0]
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	009b      	lsls	r3, r3, #2
 8013cd0:	18d3      	adds	r3, r2, r3
 8013cd2:	183a      	adds	r2, r7, r0
 8013cd4:	8812      	ldrh	r2, [r2, #0]
 8013cd6:	495b      	ldr	r1, [pc, #364]	@ (8013e44 <USB_DeactivateEndpoint+0x374>)
 8013cd8:	430a      	orrs	r2, r1
 8013cda:	b292      	uxth	r2, r2
 8013cdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	009b      	lsls	r3, r3, #2
 8013ce6:	18d3      	adds	r3, r2, r3
 8013ce8:	881b      	ldrh	r3, [r3, #0]
 8013cea:	b29a      	uxth	r2, r3
 8013cec:	2014      	movs	r0, #20
 8013cee:	183b      	adds	r3, r7, r0
 8013cf0:	4953      	ldr	r1, [pc, #332]	@ (8013e40 <USB_DeactivateEndpoint+0x370>)
 8013cf2:	400a      	ands	r2, r1
 8013cf4:	801a      	strh	r2, [r3, #0]
 8013cf6:	687a      	ldr	r2, [r7, #4]
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	18d3      	adds	r3, r2, r3
 8013d00:	183a      	adds	r2, r7, r0
 8013d02:	8812      	ldrh	r2, [r2, #0]
 8013d04:	494f      	ldr	r1, [pc, #316]	@ (8013e44 <USB_DeactivateEndpoint+0x374>)
 8013d06:	430a      	orrs	r2, r1
 8013d08:	b292      	uxth	r2, r2
 8013d0a:	801a      	strh	r2, [r3, #0]
 8013d0c:	e08f      	b.n	8013e2e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	18d2      	adds	r2, r2, r3
 8013d18:	212e      	movs	r1, #46	@ 0x2e
 8013d1a:	187b      	adds	r3, r7, r1
 8013d1c:	8812      	ldrh	r2, [r2, #0]
 8013d1e:	801a      	strh	r2, [r3, #0]
 8013d20:	187b      	adds	r3, r7, r1
 8013d22:	881a      	ldrh	r2, [r3, #0]
 8013d24:	2380      	movs	r3, #128	@ 0x80
 8013d26:	01db      	lsls	r3, r3, #7
 8013d28:	4013      	ands	r3, r2
 8013d2a:	d016      	beq.n	8013d5a <USB_DeactivateEndpoint+0x28a>
 8013d2c:	687a      	ldr	r2, [r7, #4]
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	18d3      	adds	r3, r2, r3
 8013d36:	881b      	ldrh	r3, [r3, #0]
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	202c      	movs	r0, #44	@ 0x2c
 8013d3c:	183b      	adds	r3, r7, r0
 8013d3e:	493e      	ldr	r1, [pc, #248]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013d40:	400a      	ands	r2, r1
 8013d42:	801a      	strh	r2, [r3, #0]
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	009b      	lsls	r3, r3, #2
 8013d4c:	18d3      	adds	r3, r2, r3
 8013d4e:	183a      	adds	r2, r7, r0
 8013d50:	8812      	ldrh	r2, [r2, #0]
 8013d52:	493d      	ldr	r1, [pc, #244]	@ (8013e48 <USB_DeactivateEndpoint+0x378>)
 8013d54:	430a      	orrs	r2, r1
 8013d56:	b292      	uxth	r2, r2
 8013d58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	009b      	lsls	r3, r3, #2
 8013d62:	18d2      	adds	r2, r2, r3
 8013d64:	212a      	movs	r1, #42	@ 0x2a
 8013d66:	187b      	adds	r3, r7, r1
 8013d68:	8812      	ldrh	r2, [r2, #0]
 8013d6a:	801a      	strh	r2, [r3, #0]
 8013d6c:	187b      	adds	r3, r7, r1
 8013d6e:	881b      	ldrh	r3, [r3, #0]
 8013d70:	2240      	movs	r2, #64	@ 0x40
 8013d72:	4013      	ands	r3, r2
 8013d74:	d016      	beq.n	8013da4 <USB_DeactivateEndpoint+0x2d4>
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	009b      	lsls	r3, r3, #2
 8013d7e:	18d3      	adds	r3, r2, r3
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	b29a      	uxth	r2, r3
 8013d84:	2028      	movs	r0, #40	@ 0x28
 8013d86:	183b      	adds	r3, r7, r0
 8013d88:	492b      	ldr	r1, [pc, #172]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013d8a:	400a      	ands	r2, r1
 8013d8c:	801a      	strh	r2, [r3, #0]
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	781b      	ldrb	r3, [r3, #0]
 8013d94:	009b      	lsls	r3, r3, #2
 8013d96:	18d3      	adds	r3, r2, r3
 8013d98:	183a      	adds	r2, r7, r0
 8013d9a:	8812      	ldrh	r2, [r2, #0]
 8013d9c:	4927      	ldr	r1, [pc, #156]	@ (8013e3c <USB_DeactivateEndpoint+0x36c>)
 8013d9e:	430a      	orrs	r2, r1
 8013da0:	b292      	uxth	r2, r2
 8013da2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013da4:	687a      	ldr	r2, [r7, #4]
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	009b      	lsls	r3, r3, #2
 8013dac:	18d3      	adds	r3, r2, r3
 8013dae:	881b      	ldrh	r3, [r3, #0]
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	2026      	movs	r0, #38	@ 0x26
 8013db4:	183b      	adds	r3, r7, r0
 8013db6:	4920      	ldr	r1, [pc, #128]	@ (8013e38 <USB_DeactivateEndpoint+0x368>)
 8013db8:	400a      	ands	r2, r1
 8013dba:	801a      	strh	r2, [r3, #0]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	009b      	lsls	r3, r3, #2
 8013dc4:	18d3      	adds	r3, r2, r3
 8013dc6:	183a      	adds	r2, r7, r0
 8013dc8:	8812      	ldrh	r2, [r2, #0]
 8013dca:	491f      	ldr	r1, [pc, #124]	@ (8013e48 <USB_DeactivateEndpoint+0x378>)
 8013dcc:	430a      	orrs	r2, r1
 8013dce:	b292      	uxth	r2, r2
 8013dd0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013dd2:	687a      	ldr	r2, [r7, #4]
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	009b      	lsls	r3, r3, #2
 8013dda:	18d3      	adds	r3, r2, r3
 8013ddc:	881b      	ldrh	r3, [r3, #0]
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	2024      	movs	r0, #36	@ 0x24
 8013de2:	183b      	adds	r3, r7, r0
 8013de4:	4916      	ldr	r1, [pc, #88]	@ (8013e40 <USB_DeactivateEndpoint+0x370>)
 8013de6:	400a      	ands	r2, r1
 8013de8:	801a      	strh	r2, [r3, #0]
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	009b      	lsls	r3, r3, #2
 8013df2:	18d3      	adds	r3, r2, r3
 8013df4:	183a      	adds	r2, r7, r0
 8013df6:	8812      	ldrh	r2, [r2, #0]
 8013df8:	4912      	ldr	r1, [pc, #72]	@ (8013e44 <USB_DeactivateEndpoint+0x374>)
 8013dfa:	430a      	orrs	r2, r1
 8013dfc:	b292      	uxth	r2, r2
 8013dfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013e00:	687a      	ldr	r2, [r7, #4]
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	18d3      	adds	r3, r2, r3
 8013e0a:	881b      	ldrh	r3, [r3, #0]
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	2022      	movs	r0, #34	@ 0x22
 8013e10:	183b      	adds	r3, r7, r0
 8013e12:	490e      	ldr	r1, [pc, #56]	@ (8013e4c <USB_DeactivateEndpoint+0x37c>)
 8013e14:	400a      	ands	r2, r1
 8013e16:	801a      	strh	r2, [r3, #0]
 8013e18:	687a      	ldr	r2, [r7, #4]
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	18d3      	adds	r3, r2, r3
 8013e22:	183a      	adds	r2, r7, r0
 8013e24:	8812      	ldrh	r2, [r2, #0]
 8013e26:	4907      	ldr	r1, [pc, #28]	@ (8013e44 <USB_DeactivateEndpoint+0x374>)
 8013e28:	430a      	orrs	r2, r1
 8013e2a:	b292      	uxth	r2, r2
 8013e2c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013e2e:	2300      	movs	r3, #0
}
 8013e30:	0018      	movs	r0, r3
 8013e32:	46bd      	mov	sp, r7
 8013e34:	b00c      	add	sp, #48	@ 0x30
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	ffff8f8f 	.word	0xffff8f8f
 8013e3c:	ffff80c0 	.word	0xffff80c0
 8013e40:	ffff8fbf 	.word	0xffff8fbf
 8013e44:	ffff8080 	.word	0xffff8080
 8013e48:	ffffc080 	.word	0xffffc080
 8013e4c:	ffffbf8f 	.word	0xffffbf8f

08013e50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013e50:	b590      	push	{r4, r7, lr}
 8013e52:	b0c3      	sub	sp, #268	@ 0x10c
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	785b      	ldrb	r3, [r3, #1]
 8013e5e:	2b01      	cmp	r3, #1
 8013e60:	d001      	beq.n	8013e66 <USB_EPStartXfer+0x16>
 8013e62:	f000 fd2d 	bl	80148c0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	699a      	ldr	r2, [r3, #24]
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	691b      	ldr	r3, [r3, #16]
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d905      	bls.n	8013e7e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	691b      	ldr	r3, [r3, #16]
 8013e76:	1d7a      	adds	r2, r7, #5
 8013e78:	32ff      	adds	r2, #255	@ 0xff
 8013e7a:	6013      	str	r3, [r2, #0]
 8013e7c:	e004      	b.n	8013e88 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	699b      	ldr	r3, [r3, #24]
 8013e82:	1d7a      	adds	r2, r7, #5
 8013e84:	32ff      	adds	r2, #255	@ 0xff
 8013e86:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	7b1b      	ldrb	r3, [r3, #12]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d125      	bne.n	8013edc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	6959      	ldr	r1, [r3, #20]
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	88da      	ldrh	r2, [r3, #6]
 8013e98:	1d7b      	adds	r3, r7, #5
 8013e9a:	33ff      	adds	r3, #255	@ 0xff
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f001 fa47 	bl	8015334 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	613b      	str	r3, [r7, #16]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2250      	movs	r2, #80	@ 0x50
 8013eae:	5a9b      	ldrh	r3, [r3, r2]
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	001a      	movs	r2, r3
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	189b      	adds	r3, r3, r2
 8013eb8:	613b      	str	r3, [r7, #16]
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	00da      	lsls	r2, r3, #3
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	18d3      	adds	r3, r2, r3
 8013ec4:	4ad7      	ldr	r2, [pc, #860]	@ (8014224 <USB_EPStartXfer+0x3d4>)
 8013ec6:	4694      	mov	ip, r2
 8013ec8:	4463      	add	r3, ip
 8013eca:	60fb      	str	r3, [r7, #12]
 8013ecc:	1d7b      	adds	r3, r7, #5
 8013ece:	33ff      	adds	r3, #255	@ 0xff
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	801a      	strh	r2, [r3, #0]
 8013ed8:	f000 fccd 	bl	8014876 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	78db      	ldrb	r3, [r3, #3]
 8013ee0:	2b02      	cmp	r3, #2
 8013ee2:	d000      	beq.n	8013ee6 <USB_EPStartXfer+0x96>
 8013ee4:	e362      	b.n	80145ac <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	6a1a      	ldr	r2, [r3, #32]
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	691b      	ldr	r3, [r3, #16]
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d800      	bhi.n	8013ef4 <USB_EPStartXfer+0xa4>
 8013ef2:	e309      	b.n	8014508 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013ef4:	687a      	ldr	r2, [r7, #4]
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	781b      	ldrb	r3, [r3, #0]
 8013efa:	009b      	lsls	r3, r3, #2
 8013efc:	18d3      	adds	r3, r2, r3
 8013efe:	881b      	ldrh	r3, [r3, #0]
 8013f00:	b29a      	uxth	r2, r3
 8013f02:	2056      	movs	r0, #86	@ 0x56
 8013f04:	183b      	adds	r3, r7, r0
 8013f06:	49c8      	ldr	r1, [pc, #800]	@ (8014228 <USB_EPStartXfer+0x3d8>)
 8013f08:	400a      	ands	r2, r1
 8013f0a:	801a      	strh	r2, [r3, #0]
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	18d3      	adds	r3, r2, r3
 8013f16:	183a      	adds	r2, r7, r0
 8013f18:	8812      	ldrh	r2, [r2, #0]
 8013f1a:	49c4      	ldr	r1, [pc, #784]	@ (801422c <USB_EPStartXfer+0x3dc>)
 8013f1c:	430a      	orrs	r2, r1
 8013f1e:	b292      	uxth	r2, r2
 8013f20:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	6a1a      	ldr	r2, [r3, #32]
 8013f26:	1d7b      	adds	r3, r7, #5
 8013f28:	33ff      	adds	r3, #255	@ 0xff
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	1ad2      	subs	r2, r2, r3
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	009b      	lsls	r3, r3, #2
 8013f3a:	18d3      	adds	r3, r2, r3
 8013f3c:	881b      	ldrh	r3, [r3, #0]
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	001a      	movs	r2, r3
 8013f42:	2340      	movs	r3, #64	@ 0x40
 8013f44:	4013      	ands	r3, r2
 8013f46:	d100      	bne.n	8013f4a <USB_EPStartXfer+0xfa>
 8013f48:	e176      	b.n	8014238 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	785b      	ldrb	r3, [r3, #1]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d000      	beq.n	8013f58 <USB_EPStartXfer+0x108>
 8013f56:	e074      	b.n	8014042 <USB_EPStartXfer+0x1f2>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2250      	movs	r2, #80	@ 0x50
 8013f60:	5a9b      	ldrh	r3, [r3, r2]
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	001a      	movs	r2, r3
 8013f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f68:	189b      	adds	r3, r3, r2
 8013f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	00da      	lsls	r2, r3, #3
 8013f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f74:	18d3      	adds	r3, r2, r3
 8013f76:	4aae      	ldr	r2, [pc, #696]	@ (8014230 <USB_EPStartXfer+0x3e0>)
 8013f78:	4694      	mov	ip, r2
 8013f7a:	4463      	add	r3, ip
 8013f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f80:	881b      	ldrh	r3, [r3, #0]
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	059b      	lsls	r3, r3, #22
 8013f86:	0d9b      	lsrs	r3, r3, #22
 8013f88:	b29a      	uxth	r2, r3
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8c:	801a      	strh	r2, [r3, #0]
 8013f8e:	1d7b      	adds	r3, r7, #5
 8013f90:	33ff      	adds	r3, #255	@ 0xff
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f96:	d924      	bls.n	8013fe2 <USB_EPStartXfer+0x192>
 8013f98:	1d7b      	adds	r3, r7, #5
 8013f9a:	33ff      	adds	r3, #255	@ 0xff
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	095b      	lsrs	r3, r3, #5
 8013fa0:	1c7a      	adds	r2, r7, #1
 8013fa2:	32ff      	adds	r2, #255	@ 0xff
 8013fa4:	6013      	str	r3, [r2, #0]
 8013fa6:	1d7b      	adds	r3, r7, #5
 8013fa8:	33ff      	adds	r3, #255	@ 0xff
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	221f      	movs	r2, #31
 8013fae:	4013      	ands	r3, r2
 8013fb0:	d106      	bne.n	8013fc0 <USB_EPStartXfer+0x170>
 8013fb2:	1c7b      	adds	r3, r7, #1
 8013fb4:	33ff      	adds	r3, #255	@ 0xff
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	3b01      	subs	r3, #1
 8013fba:	1c7a      	adds	r2, r7, #1
 8013fbc:	32ff      	adds	r2, #255	@ 0xff
 8013fbe:	6013      	str	r3, [r2, #0]
 8013fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fc2:	881b      	ldrh	r3, [r3, #0]
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	1c7b      	adds	r3, r7, #1
 8013fc8:	33ff      	adds	r3, #255	@ 0xff
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	b29b      	uxth	r3, r3
 8013fce:	029b      	lsls	r3, r3, #10
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	4313      	orrs	r3, r2
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	4a97      	ldr	r2, [pc, #604]	@ (8014234 <USB_EPStartXfer+0x3e4>)
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fde:	801a      	strh	r2, [r3, #0]
 8013fe0:	e04a      	b.n	8014078 <USB_EPStartXfer+0x228>
 8013fe2:	1d7b      	adds	r3, r7, #5
 8013fe4:	33ff      	adds	r3, #255	@ 0xff
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d108      	bne.n	8013ffe <USB_EPStartXfer+0x1ae>
 8013fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fee:	881b      	ldrh	r3, [r3, #0]
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	4a90      	ldr	r2, [pc, #576]	@ (8014234 <USB_EPStartXfer+0x3e4>)
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ffa:	801a      	strh	r2, [r3, #0]
 8013ffc:	e03c      	b.n	8014078 <USB_EPStartXfer+0x228>
 8013ffe:	1d7b      	adds	r3, r7, #5
 8014000:	33ff      	adds	r3, #255	@ 0xff
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	085b      	lsrs	r3, r3, #1
 8014006:	1c7a      	adds	r2, r7, #1
 8014008:	32ff      	adds	r2, #255	@ 0xff
 801400a:	6013      	str	r3, [r2, #0]
 801400c:	1d7b      	adds	r3, r7, #5
 801400e:	33ff      	adds	r3, #255	@ 0xff
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	2201      	movs	r2, #1
 8014014:	4013      	ands	r3, r2
 8014016:	d006      	beq.n	8014026 <USB_EPStartXfer+0x1d6>
 8014018:	1c7b      	adds	r3, r7, #1
 801401a:	33ff      	adds	r3, #255	@ 0xff
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	3301      	adds	r3, #1
 8014020:	1c7a      	adds	r2, r7, #1
 8014022:	32ff      	adds	r2, #255	@ 0xff
 8014024:	6013      	str	r3, [r2, #0]
 8014026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014028:	881b      	ldrh	r3, [r3, #0]
 801402a:	b29a      	uxth	r2, r3
 801402c:	1c7b      	adds	r3, r7, #1
 801402e:	33ff      	adds	r3, #255	@ 0xff
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	b29b      	uxth	r3, r3
 8014034:	029b      	lsls	r3, r3, #10
 8014036:	b29b      	uxth	r3, r3
 8014038:	4313      	orrs	r3, r2
 801403a:	b29a      	uxth	r2, r3
 801403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801403e:	801a      	strh	r2, [r3, #0]
 8014040:	e01a      	b.n	8014078 <USB_EPStartXfer+0x228>
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	785b      	ldrb	r3, [r3, #1]
 8014046:	2b01      	cmp	r3, #1
 8014048:	d116      	bne.n	8014078 <USB_EPStartXfer+0x228>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2250      	movs	r2, #80	@ 0x50
 801404e:	5a9b      	ldrh	r3, [r3, r2]
 8014050:	b29b      	uxth	r3, r3
 8014052:	001a      	movs	r2, r3
 8014054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014056:	189b      	adds	r3, r3, r2
 8014058:	633b      	str	r3, [r7, #48]	@ 0x30
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	00da      	lsls	r2, r3, #3
 8014060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014062:	18d3      	adds	r3, r2, r3
 8014064:	4a72      	ldr	r2, [pc, #456]	@ (8014230 <USB_EPStartXfer+0x3e0>)
 8014066:	4694      	mov	ip, r2
 8014068:	4463      	add	r3, ip
 801406a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801406c:	1d7b      	adds	r3, r7, #5
 801406e:	33ff      	adds	r3, #255	@ 0xff
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	b29a      	uxth	r2, r3
 8014074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014076:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8014078:	2076      	movs	r0, #118	@ 0x76
 801407a:	183b      	adds	r3, r7, r0
 801407c:	683a      	ldr	r2, [r7, #0]
 801407e:	8952      	ldrh	r2, [r2, #10]
 8014080:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	6959      	ldr	r1, [r3, #20]
 8014086:	1d7b      	adds	r3, r7, #5
 8014088:	33ff      	adds	r3, #255	@ 0xff
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	b29c      	uxth	r4, r3
 801408e:	183b      	adds	r3, r7, r0
 8014090:	881a      	ldrh	r2, [r3, #0]
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	0023      	movs	r3, r4
 8014096:	f001 f94d 	bl	8015334 <USB_WritePMA>
            ep->xfer_buff += len;
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	695a      	ldr	r2, [r3, #20]
 801409e:	1d7b      	adds	r3, r7, #5
 80140a0:	33ff      	adds	r3, #255	@ 0xff
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	18d2      	adds	r2, r2, r3
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	6a1a      	ldr	r2, [r3, #32]
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d908      	bls.n	80140c8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	6a1a      	ldr	r2, [r3, #32]
 80140ba:	1d7b      	adds	r3, r7, #5
 80140bc:	33ff      	adds	r3, #255	@ 0xff
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	1ad2      	subs	r2, r2, r3
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	621a      	str	r2, [r3, #32]
 80140c6:	e007      	b.n	80140d8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	6a1b      	ldr	r3, [r3, #32]
 80140cc:	1d7a      	adds	r2, r7, #5
 80140ce:	32ff      	adds	r2, #255	@ 0xff
 80140d0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	2200      	movs	r2, #0
 80140d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	785b      	ldrb	r3, [r3, #1]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d000      	beq.n	80140e2 <USB_EPStartXfer+0x292>
 80140e0:	e070      	b.n	80141c4 <USB_EPStartXfer+0x374>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	61bb      	str	r3, [r7, #24]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2250      	movs	r2, #80	@ 0x50
 80140ea:	5a9b      	ldrh	r3, [r3, r2]
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	001a      	movs	r2, r3
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	189b      	adds	r3, r3, r2
 80140f4:	61bb      	str	r3, [r7, #24]
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	00da      	lsls	r2, r3, #3
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	18d3      	adds	r3, r2, r3
 8014100:	4a48      	ldr	r2, [pc, #288]	@ (8014224 <USB_EPStartXfer+0x3d4>)
 8014102:	4694      	mov	ip, r2
 8014104:	4463      	add	r3, ip
 8014106:	617b      	str	r3, [r7, #20]
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	881b      	ldrh	r3, [r3, #0]
 801410c:	b29b      	uxth	r3, r3
 801410e:	059b      	lsls	r3, r3, #22
 8014110:	0d9b      	lsrs	r3, r3, #22
 8014112:	b29a      	uxth	r2, r3
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	801a      	strh	r2, [r3, #0]
 8014118:	1d7b      	adds	r3, r7, #5
 801411a:	33ff      	adds	r3, #255	@ 0xff
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014120:	d922      	bls.n	8014168 <USB_EPStartXfer+0x318>
 8014122:	1d7b      	adds	r3, r7, #5
 8014124:	33ff      	adds	r3, #255	@ 0xff
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	095b      	lsrs	r3, r3, #5
 801412a:	21fc      	movs	r1, #252	@ 0xfc
 801412c:	187a      	adds	r2, r7, r1
 801412e:	6013      	str	r3, [r2, #0]
 8014130:	1d7b      	adds	r3, r7, #5
 8014132:	33ff      	adds	r3, #255	@ 0xff
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	221f      	movs	r2, #31
 8014138:	4013      	ands	r3, r2
 801413a:	d104      	bne.n	8014146 <USB_EPStartXfer+0x2f6>
 801413c:	187b      	adds	r3, r7, r1
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	3b01      	subs	r3, #1
 8014142:	187a      	adds	r2, r7, r1
 8014144:	6013      	str	r3, [r2, #0]
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	b29a      	uxth	r2, r3
 801414c:	23fc      	movs	r3, #252	@ 0xfc
 801414e:	18fb      	adds	r3, r7, r3
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	b29b      	uxth	r3, r3
 8014154:	029b      	lsls	r3, r3, #10
 8014156:	b29b      	uxth	r3, r3
 8014158:	4313      	orrs	r3, r2
 801415a:	b29b      	uxth	r3, r3
 801415c:	4a35      	ldr	r2, [pc, #212]	@ (8014234 <USB_EPStartXfer+0x3e4>)
 801415e:	4313      	orrs	r3, r2
 8014160:	b29a      	uxth	r2, r3
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	801a      	strh	r2, [r3, #0]
 8014166:	e04a      	b.n	80141fe <USB_EPStartXfer+0x3ae>
 8014168:	1d7b      	adds	r3, r7, #5
 801416a:	33ff      	adds	r3, #255	@ 0xff
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d108      	bne.n	8014184 <USB_EPStartXfer+0x334>
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	881b      	ldrh	r3, [r3, #0]
 8014176:	b29b      	uxth	r3, r3
 8014178:	4a2e      	ldr	r2, [pc, #184]	@ (8014234 <USB_EPStartXfer+0x3e4>)
 801417a:	4313      	orrs	r3, r2
 801417c:	b29a      	uxth	r2, r3
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	801a      	strh	r2, [r3, #0]
 8014182:	e03c      	b.n	80141fe <USB_EPStartXfer+0x3ae>
 8014184:	1d7b      	adds	r3, r7, #5
 8014186:	33ff      	adds	r3, #255	@ 0xff
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	085b      	lsrs	r3, r3, #1
 801418c:	21fc      	movs	r1, #252	@ 0xfc
 801418e:	187a      	adds	r2, r7, r1
 8014190:	6013      	str	r3, [r2, #0]
 8014192:	1d7b      	adds	r3, r7, #5
 8014194:	33ff      	adds	r3, #255	@ 0xff
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	2201      	movs	r2, #1
 801419a:	4013      	ands	r3, r2
 801419c:	d004      	beq.n	80141a8 <USB_EPStartXfer+0x358>
 801419e:	187b      	adds	r3, r7, r1
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	3301      	adds	r3, #1
 80141a4:	187a      	adds	r2, r7, r1
 80141a6:	6013      	str	r3, [r2, #0]
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	881b      	ldrh	r3, [r3, #0]
 80141ac:	b29a      	uxth	r2, r3
 80141ae:	23fc      	movs	r3, #252	@ 0xfc
 80141b0:	18fb      	adds	r3, r7, r3
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	029b      	lsls	r3, r3, #10
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	4313      	orrs	r3, r2
 80141bc:	b29a      	uxth	r2, r3
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	801a      	strh	r2, [r3, #0]
 80141c2:	e01c      	b.n	80141fe <USB_EPStartXfer+0x3ae>
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	785b      	ldrb	r3, [r3, #1]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	d118      	bne.n	80141fe <USB_EPStartXfer+0x3ae>
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	623b      	str	r3, [r7, #32]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2250      	movs	r2, #80	@ 0x50
 80141d4:	5a9b      	ldrh	r3, [r3, r2]
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	001a      	movs	r2, r3
 80141da:	6a3b      	ldr	r3, [r7, #32]
 80141dc:	189b      	adds	r3, r3, r2
 80141de:	623b      	str	r3, [r7, #32]
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	00da      	lsls	r2, r3, #3
 80141e6:	6a3b      	ldr	r3, [r7, #32]
 80141e8:	18d3      	adds	r3, r2, r3
 80141ea:	4a0e      	ldr	r2, [pc, #56]	@ (8014224 <USB_EPStartXfer+0x3d4>)
 80141ec:	4694      	mov	ip, r2
 80141ee:	4463      	add	r3, ip
 80141f0:	61fb      	str	r3, [r7, #28]
 80141f2:	1d7b      	adds	r3, r7, #5
 80141f4:	33ff      	adds	r3, #255	@ 0xff
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80141fe:	2076      	movs	r0, #118	@ 0x76
 8014200:	183b      	adds	r3, r7, r0
 8014202:	683a      	ldr	r2, [r7, #0]
 8014204:	8912      	ldrh	r2, [r2, #8]
 8014206:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	6959      	ldr	r1, [r3, #20]
 801420c:	1d7b      	adds	r3, r7, #5
 801420e:	33ff      	adds	r3, #255	@ 0xff
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	b29c      	uxth	r4, r3
 8014214:	183b      	adds	r3, r7, r0
 8014216:	881a      	ldrh	r2, [r3, #0]
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	0023      	movs	r3, r4
 801421c:	f001 f88a 	bl	8015334 <USB_WritePMA>
 8014220:	e329      	b.n	8014876 <USB_EPStartXfer+0xa26>
 8014222:	46c0      	nop			@ (mov r8, r8)
 8014224:	00000402 	.word	0x00000402
 8014228:	ffff8f8f 	.word	0xffff8f8f
 801422c:	ffff8180 	.word	0xffff8180
 8014230:	00000406 	.word	0x00000406
 8014234:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	785b      	ldrb	r3, [r3, #1]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d000      	beq.n	8014242 <USB_EPStartXfer+0x3f2>
 8014240:	e070      	b.n	8014324 <USB_EPStartXfer+0x4d4>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2250      	movs	r2, #80	@ 0x50
 801424a:	5a9b      	ldrh	r3, [r3, r2]
 801424c:	b29b      	uxth	r3, r3
 801424e:	001a      	movs	r2, r3
 8014250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014252:	189b      	adds	r3, r3, r2
 8014254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	00da      	lsls	r2, r3, #3
 801425c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801425e:	18d3      	adds	r3, r2, r3
 8014260:	4acd      	ldr	r2, [pc, #820]	@ (8014598 <USB_EPStartXfer+0x748>)
 8014262:	4694      	mov	ip, r2
 8014264:	4463      	add	r3, ip
 8014266:	647b      	str	r3, [r7, #68]	@ 0x44
 8014268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801426a:	881b      	ldrh	r3, [r3, #0]
 801426c:	b29b      	uxth	r3, r3
 801426e:	059b      	lsls	r3, r3, #22
 8014270:	0d9b      	lsrs	r3, r3, #22
 8014272:	b29a      	uxth	r2, r3
 8014274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014276:	801a      	strh	r2, [r3, #0]
 8014278:	1d7b      	adds	r3, r7, #5
 801427a:	33ff      	adds	r3, #255	@ 0xff
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014280:	d922      	bls.n	80142c8 <USB_EPStartXfer+0x478>
 8014282:	1d7b      	adds	r3, r7, #5
 8014284:	33ff      	adds	r3, #255	@ 0xff
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	095b      	lsrs	r3, r3, #5
 801428a:	21f8      	movs	r1, #248	@ 0xf8
 801428c:	187a      	adds	r2, r7, r1
 801428e:	6013      	str	r3, [r2, #0]
 8014290:	1d7b      	adds	r3, r7, #5
 8014292:	33ff      	adds	r3, #255	@ 0xff
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	221f      	movs	r2, #31
 8014298:	4013      	ands	r3, r2
 801429a:	d104      	bne.n	80142a6 <USB_EPStartXfer+0x456>
 801429c:	187b      	adds	r3, r7, r1
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	3b01      	subs	r3, #1
 80142a2:	187a      	adds	r2, r7, r1
 80142a4:	6013      	str	r3, [r2, #0]
 80142a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142a8:	881b      	ldrh	r3, [r3, #0]
 80142aa:	b29a      	uxth	r2, r3
 80142ac:	23f8      	movs	r3, #248	@ 0xf8
 80142ae:	18fb      	adds	r3, r7, r3
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	029b      	lsls	r3, r3, #10
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	4313      	orrs	r3, r2
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	4ab7      	ldr	r2, [pc, #732]	@ (801459c <USB_EPStartXfer+0x74c>)
 80142be:	4313      	orrs	r3, r2
 80142c0:	b29a      	uxth	r2, r3
 80142c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142c4:	801a      	strh	r2, [r3, #0]
 80142c6:	e04a      	b.n	801435e <USB_EPStartXfer+0x50e>
 80142c8:	1d7b      	adds	r3, r7, #5
 80142ca:	33ff      	adds	r3, #255	@ 0xff
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d108      	bne.n	80142e4 <USB_EPStartXfer+0x494>
 80142d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142d4:	881b      	ldrh	r3, [r3, #0]
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4ab0      	ldr	r2, [pc, #704]	@ (801459c <USB_EPStartXfer+0x74c>)
 80142da:	4313      	orrs	r3, r2
 80142dc:	b29a      	uxth	r2, r3
 80142de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142e0:	801a      	strh	r2, [r3, #0]
 80142e2:	e03c      	b.n	801435e <USB_EPStartXfer+0x50e>
 80142e4:	1d7b      	adds	r3, r7, #5
 80142e6:	33ff      	adds	r3, #255	@ 0xff
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	085b      	lsrs	r3, r3, #1
 80142ec:	21f8      	movs	r1, #248	@ 0xf8
 80142ee:	187a      	adds	r2, r7, r1
 80142f0:	6013      	str	r3, [r2, #0]
 80142f2:	1d7b      	adds	r3, r7, #5
 80142f4:	33ff      	adds	r3, #255	@ 0xff
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2201      	movs	r2, #1
 80142fa:	4013      	ands	r3, r2
 80142fc:	d004      	beq.n	8014308 <USB_EPStartXfer+0x4b8>
 80142fe:	187b      	adds	r3, r7, r1
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	3301      	adds	r3, #1
 8014304:	187a      	adds	r2, r7, r1
 8014306:	6013      	str	r3, [r2, #0]
 8014308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	b29a      	uxth	r2, r3
 801430e:	23f8      	movs	r3, #248	@ 0xf8
 8014310:	18fb      	adds	r3, r7, r3
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	b29b      	uxth	r3, r3
 8014316:	029b      	lsls	r3, r3, #10
 8014318:	b29b      	uxth	r3, r3
 801431a:	4313      	orrs	r3, r2
 801431c:	b29a      	uxth	r2, r3
 801431e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014320:	801a      	strh	r2, [r3, #0]
 8014322:	e01c      	b.n	801435e <USB_EPStartXfer+0x50e>
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	785b      	ldrb	r3, [r3, #1]
 8014328:	2b01      	cmp	r3, #1
 801432a:	d118      	bne.n	801435e <USB_EPStartXfer+0x50e>
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2250      	movs	r2, #80	@ 0x50
 8014334:	5a9b      	ldrh	r3, [r3, r2]
 8014336:	b29b      	uxth	r3, r3
 8014338:	001a      	movs	r2, r3
 801433a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801433c:	189b      	adds	r3, r3, r2
 801433e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	00da      	lsls	r2, r3, #3
 8014346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014348:	18d3      	adds	r3, r2, r3
 801434a:	4a93      	ldr	r2, [pc, #588]	@ (8014598 <USB_EPStartXfer+0x748>)
 801434c:	4694      	mov	ip, r2
 801434e:	4463      	add	r3, ip
 8014350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014352:	1d7b      	adds	r3, r7, #5
 8014354:	33ff      	adds	r3, #255	@ 0xff
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	b29a      	uxth	r2, r3
 801435a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801435c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801435e:	2076      	movs	r0, #118	@ 0x76
 8014360:	183b      	adds	r3, r7, r0
 8014362:	683a      	ldr	r2, [r7, #0]
 8014364:	8912      	ldrh	r2, [r2, #8]
 8014366:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014368:	683b      	ldr	r3, [r7, #0]
 801436a:	6959      	ldr	r1, [r3, #20]
 801436c:	1d7b      	adds	r3, r7, #5
 801436e:	33ff      	adds	r3, #255	@ 0xff
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	b29c      	uxth	r4, r3
 8014374:	183b      	adds	r3, r7, r0
 8014376:	881a      	ldrh	r2, [r3, #0]
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	0023      	movs	r3, r4
 801437c:	f000 ffda 	bl	8015334 <USB_WritePMA>
            ep->xfer_buff += len;
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	695a      	ldr	r2, [r3, #20]
 8014384:	1d7b      	adds	r3, r7, #5
 8014386:	33ff      	adds	r3, #255	@ 0xff
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	18d2      	adds	r2, r2, r3
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	6a1a      	ldr	r2, [r3, #32]
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	691b      	ldr	r3, [r3, #16]
 8014398:	429a      	cmp	r2, r3
 801439a:	d908      	bls.n	80143ae <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	6a1a      	ldr	r2, [r3, #32]
 80143a0:	1d7b      	adds	r3, r7, #5
 80143a2:	33ff      	adds	r3, #255	@ 0xff
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	1ad2      	subs	r2, r2, r3
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	621a      	str	r2, [r3, #32]
 80143ac:	e007      	b.n	80143be <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	6a1b      	ldr	r3, [r3, #32]
 80143b2:	1d7a      	adds	r2, r7, #5
 80143b4:	32ff      	adds	r2, #255	@ 0xff
 80143b6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	2200      	movs	r2, #0
 80143bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	785b      	ldrb	r3, [r3, #1]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d000      	beq.n	80143cc <USB_EPStartXfer+0x57c>
 80143ca:	e070      	b.n	80144ae <USB_EPStartXfer+0x65e>
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2250      	movs	r2, #80	@ 0x50
 80143d4:	5a9b      	ldrh	r3, [r3, r2]
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	001a      	movs	r2, r3
 80143da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143dc:	189b      	adds	r3, r3, r2
 80143de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	00da      	lsls	r2, r3, #3
 80143e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143e8:	18d3      	adds	r3, r2, r3
 80143ea:	4a6d      	ldr	r2, [pc, #436]	@ (80145a0 <USB_EPStartXfer+0x750>)
 80143ec:	4694      	mov	ip, r2
 80143ee:	4463      	add	r3, ip
 80143f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80143f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	059b      	lsls	r3, r3, #22
 80143fa:	0d9b      	lsrs	r3, r3, #22
 80143fc:	b29a      	uxth	r2, r3
 80143fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014400:	801a      	strh	r2, [r3, #0]
 8014402:	1d7b      	adds	r3, r7, #5
 8014404:	33ff      	adds	r3, #255	@ 0xff
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	2b3e      	cmp	r3, #62	@ 0x3e
 801440a:	d922      	bls.n	8014452 <USB_EPStartXfer+0x602>
 801440c:	1d7b      	adds	r3, r7, #5
 801440e:	33ff      	adds	r3, #255	@ 0xff
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	095b      	lsrs	r3, r3, #5
 8014414:	21f4      	movs	r1, #244	@ 0xf4
 8014416:	187a      	adds	r2, r7, r1
 8014418:	6013      	str	r3, [r2, #0]
 801441a:	1d7b      	adds	r3, r7, #5
 801441c:	33ff      	adds	r3, #255	@ 0xff
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	221f      	movs	r2, #31
 8014422:	4013      	ands	r3, r2
 8014424:	d104      	bne.n	8014430 <USB_EPStartXfer+0x5e0>
 8014426:	187b      	adds	r3, r7, r1
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	3b01      	subs	r3, #1
 801442c:	187a      	adds	r2, r7, r1
 801442e:	6013      	str	r3, [r2, #0]
 8014430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	b29a      	uxth	r2, r3
 8014436:	23f4      	movs	r3, #244	@ 0xf4
 8014438:	18fb      	adds	r3, r7, r3
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	b29b      	uxth	r3, r3
 801443e:	029b      	lsls	r3, r3, #10
 8014440:	b29b      	uxth	r3, r3
 8014442:	4313      	orrs	r3, r2
 8014444:	b29b      	uxth	r3, r3
 8014446:	4a55      	ldr	r2, [pc, #340]	@ (801459c <USB_EPStartXfer+0x74c>)
 8014448:	4313      	orrs	r3, r2
 801444a:	b29a      	uxth	r2, r3
 801444c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801444e:	801a      	strh	r2, [r3, #0]
 8014450:	e048      	b.n	80144e4 <USB_EPStartXfer+0x694>
 8014452:	1d7b      	adds	r3, r7, #5
 8014454:	33ff      	adds	r3, #255	@ 0xff
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d108      	bne.n	801446e <USB_EPStartXfer+0x61e>
 801445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801445e:	881b      	ldrh	r3, [r3, #0]
 8014460:	b29b      	uxth	r3, r3
 8014462:	4a4e      	ldr	r2, [pc, #312]	@ (801459c <USB_EPStartXfer+0x74c>)
 8014464:	4313      	orrs	r3, r2
 8014466:	b29a      	uxth	r2, r3
 8014468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801446a:	801a      	strh	r2, [r3, #0]
 801446c:	e03a      	b.n	80144e4 <USB_EPStartXfer+0x694>
 801446e:	1d7b      	adds	r3, r7, #5
 8014470:	33ff      	adds	r3, #255	@ 0xff
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	085b      	lsrs	r3, r3, #1
 8014476:	21f4      	movs	r1, #244	@ 0xf4
 8014478:	187a      	adds	r2, r7, r1
 801447a:	6013      	str	r3, [r2, #0]
 801447c:	1d7b      	adds	r3, r7, #5
 801447e:	33ff      	adds	r3, #255	@ 0xff
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2201      	movs	r2, #1
 8014484:	4013      	ands	r3, r2
 8014486:	d004      	beq.n	8014492 <USB_EPStartXfer+0x642>
 8014488:	187b      	adds	r3, r7, r1
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	3301      	adds	r3, #1
 801448e:	187a      	adds	r2, r7, r1
 8014490:	6013      	str	r3, [r2, #0]
 8014492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014494:	881b      	ldrh	r3, [r3, #0]
 8014496:	b29a      	uxth	r2, r3
 8014498:	23f4      	movs	r3, #244	@ 0xf4
 801449a:	18fb      	adds	r3, r7, r3
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	b29b      	uxth	r3, r3
 80144a0:	029b      	lsls	r3, r3, #10
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	4313      	orrs	r3, r2
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144aa:	801a      	strh	r2, [r3, #0]
 80144ac:	e01a      	b.n	80144e4 <USB_EPStartXfer+0x694>
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	785b      	ldrb	r3, [r3, #1]
 80144b2:	2b01      	cmp	r3, #1
 80144b4:	d116      	bne.n	80144e4 <USB_EPStartXfer+0x694>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2250      	movs	r2, #80	@ 0x50
 80144ba:	5a9b      	ldrh	r3, [r3, r2]
 80144bc:	b29b      	uxth	r3, r3
 80144be:	001a      	movs	r2, r3
 80144c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144c2:	189b      	adds	r3, r3, r2
 80144c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	00da      	lsls	r2, r3, #3
 80144cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144ce:	18d3      	adds	r3, r2, r3
 80144d0:	4a33      	ldr	r2, [pc, #204]	@ (80145a0 <USB_EPStartXfer+0x750>)
 80144d2:	4694      	mov	ip, r2
 80144d4:	4463      	add	r3, ip
 80144d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80144d8:	1d7b      	adds	r3, r7, #5
 80144da:	33ff      	adds	r3, #255	@ 0xff
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	b29a      	uxth	r2, r3
 80144e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80144e4:	2076      	movs	r0, #118	@ 0x76
 80144e6:	183b      	adds	r3, r7, r0
 80144e8:	683a      	ldr	r2, [r7, #0]
 80144ea:	8952      	ldrh	r2, [r2, #10]
 80144ec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	6959      	ldr	r1, [r3, #20]
 80144f2:	1d7b      	adds	r3, r7, #5
 80144f4:	33ff      	adds	r3, #255	@ 0xff
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	b29c      	uxth	r4, r3
 80144fa:	183b      	adds	r3, r7, r0
 80144fc:	881a      	ldrh	r2, [r3, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	0023      	movs	r3, r4
 8014502:	f000 ff17 	bl	8015334 <USB_WritePMA>
 8014506:	e1b6      	b.n	8014876 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	6a1b      	ldr	r3, [r3, #32]
 801450c:	1d7a      	adds	r2, r7, #5
 801450e:	32ff      	adds	r2, #255	@ 0xff
 8014510:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	18d3      	adds	r3, r2, r3
 801451c:	881b      	ldrh	r3, [r3, #0]
 801451e:	b29a      	uxth	r2, r3
 8014520:	2062      	movs	r0, #98	@ 0x62
 8014522:	183b      	adds	r3, r7, r0
 8014524:	491f      	ldr	r1, [pc, #124]	@ (80145a4 <USB_EPStartXfer+0x754>)
 8014526:	400a      	ands	r2, r1
 8014528:	801a      	strh	r2, [r3, #0]
 801452a:	687a      	ldr	r2, [r7, #4]
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	18d3      	adds	r3, r2, r3
 8014534:	183a      	adds	r2, r7, r0
 8014536:	8812      	ldrh	r2, [r2, #0]
 8014538:	491b      	ldr	r1, [pc, #108]	@ (80145a8 <USB_EPStartXfer+0x758>)
 801453a:	430a      	orrs	r2, r1
 801453c:	b292      	uxth	r2, r2
 801453e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2250      	movs	r2, #80	@ 0x50
 8014548:	5a9b      	ldrh	r3, [r3, r2]
 801454a:	b29b      	uxth	r3, r3
 801454c:	001a      	movs	r2, r3
 801454e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014550:	189b      	adds	r3, r3, r2
 8014552:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	781b      	ldrb	r3, [r3, #0]
 8014558:	00da      	lsls	r2, r3, #3
 801455a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801455c:	18d3      	adds	r3, r2, r3
 801455e:	4a0e      	ldr	r2, [pc, #56]	@ (8014598 <USB_EPStartXfer+0x748>)
 8014560:	4694      	mov	ip, r2
 8014562:	4463      	add	r3, ip
 8014564:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014566:	1d7b      	adds	r3, r7, #5
 8014568:	33ff      	adds	r3, #255	@ 0xff
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	b29a      	uxth	r2, r3
 801456e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014570:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014572:	2076      	movs	r0, #118	@ 0x76
 8014574:	183b      	adds	r3, r7, r0
 8014576:	683a      	ldr	r2, [r7, #0]
 8014578:	8912      	ldrh	r2, [r2, #8]
 801457a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	6959      	ldr	r1, [r3, #20]
 8014580:	1d7b      	adds	r3, r7, #5
 8014582:	33ff      	adds	r3, #255	@ 0xff
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	b29c      	uxth	r4, r3
 8014588:	183b      	adds	r3, r7, r0
 801458a:	881a      	ldrh	r2, [r3, #0]
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	0023      	movs	r3, r4
 8014590:	f000 fed0 	bl	8015334 <USB_WritePMA>
 8014594:	e16f      	b.n	8014876 <USB_EPStartXfer+0xa26>
 8014596:	46c0      	nop			@ (mov r8, r8)
 8014598:	00000402 	.word	0x00000402
 801459c:	ffff8000 	.word	0xffff8000
 80145a0:	00000406 	.word	0x00000406
 80145a4:	ffff8e8f 	.word	0xffff8e8f
 80145a8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	6a1a      	ldr	r2, [r3, #32]
 80145b0:	1d7b      	adds	r3, r7, #5
 80145b2:	33ff      	adds	r3, #255	@ 0xff
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	1ad2      	subs	r2, r2, r3
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80145bc:	687a      	ldr	r2, [r7, #4]
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	009b      	lsls	r3, r3, #2
 80145c4:	18d3      	adds	r3, r2, r3
 80145c6:	881b      	ldrh	r3, [r3, #0]
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	001a      	movs	r2, r3
 80145cc:	2340      	movs	r3, #64	@ 0x40
 80145ce:	4013      	ands	r3, r2
 80145d0:	d100      	bne.n	80145d4 <USB_EPStartXfer+0x784>
 80145d2:	e0a4      	b.n	801471e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	785b      	ldrb	r3, [r3, #1]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d000      	beq.n	80145e2 <USB_EPStartXfer+0x792>
 80145e0:	e070      	b.n	80146c4 <USB_EPStartXfer+0x874>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2250      	movs	r2, #80	@ 0x50
 80145ea:	5a9b      	ldrh	r3, [r3, r2]
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	001a      	movs	r2, r3
 80145f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80145f2:	189b      	adds	r3, r3, r2
 80145f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	00da      	lsls	r2, r3, #3
 80145fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80145fe:	18d3      	adds	r3, r2, r3
 8014600:	4abc      	ldr	r2, [pc, #752]	@ (80148f4 <USB_EPStartXfer+0xaa4>)
 8014602:	4694      	mov	ip, r2
 8014604:	4463      	add	r3, ip
 8014606:	667b      	str	r3, [r7, #100]	@ 0x64
 8014608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	b29b      	uxth	r3, r3
 801460e:	059b      	lsls	r3, r3, #22
 8014610:	0d9b      	lsrs	r3, r3, #22
 8014612:	b29a      	uxth	r2, r3
 8014614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014616:	801a      	strh	r2, [r3, #0]
 8014618:	1d7b      	adds	r3, r7, #5
 801461a:	33ff      	adds	r3, #255	@ 0xff
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014620:	d922      	bls.n	8014668 <USB_EPStartXfer+0x818>
 8014622:	1d7b      	adds	r3, r7, #5
 8014624:	33ff      	adds	r3, #255	@ 0xff
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	095b      	lsrs	r3, r3, #5
 801462a:	21f0      	movs	r1, #240	@ 0xf0
 801462c:	187a      	adds	r2, r7, r1
 801462e:	6013      	str	r3, [r2, #0]
 8014630:	1d7b      	adds	r3, r7, #5
 8014632:	33ff      	adds	r3, #255	@ 0xff
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	221f      	movs	r2, #31
 8014638:	4013      	ands	r3, r2
 801463a:	d104      	bne.n	8014646 <USB_EPStartXfer+0x7f6>
 801463c:	187b      	adds	r3, r7, r1
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	3b01      	subs	r3, #1
 8014642:	187a      	adds	r2, r7, r1
 8014644:	6013      	str	r3, [r2, #0]
 8014646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014648:	881b      	ldrh	r3, [r3, #0]
 801464a:	b29a      	uxth	r2, r3
 801464c:	23f0      	movs	r3, #240	@ 0xf0
 801464e:	18fb      	adds	r3, r7, r3
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	b29b      	uxth	r3, r3
 8014654:	029b      	lsls	r3, r3, #10
 8014656:	b29b      	uxth	r3, r3
 8014658:	4313      	orrs	r3, r2
 801465a:	b29b      	uxth	r3, r3
 801465c:	4aa6      	ldr	r2, [pc, #664]	@ (80148f8 <USB_EPStartXfer+0xaa8>)
 801465e:	4313      	orrs	r3, r2
 8014660:	b29a      	uxth	r2, r3
 8014662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014664:	801a      	strh	r2, [r3, #0]
 8014666:	e048      	b.n	80146fa <USB_EPStartXfer+0x8aa>
 8014668:	1d7b      	adds	r3, r7, #5
 801466a:	33ff      	adds	r3, #255	@ 0xff
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d108      	bne.n	8014684 <USB_EPStartXfer+0x834>
 8014672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	b29b      	uxth	r3, r3
 8014678:	4a9f      	ldr	r2, [pc, #636]	@ (80148f8 <USB_EPStartXfer+0xaa8>)
 801467a:	4313      	orrs	r3, r2
 801467c:	b29a      	uxth	r2, r3
 801467e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014680:	801a      	strh	r2, [r3, #0]
 8014682:	e03a      	b.n	80146fa <USB_EPStartXfer+0x8aa>
 8014684:	1d7b      	adds	r3, r7, #5
 8014686:	33ff      	adds	r3, #255	@ 0xff
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	085b      	lsrs	r3, r3, #1
 801468c:	21f0      	movs	r1, #240	@ 0xf0
 801468e:	187a      	adds	r2, r7, r1
 8014690:	6013      	str	r3, [r2, #0]
 8014692:	1d7b      	adds	r3, r7, #5
 8014694:	33ff      	adds	r3, #255	@ 0xff
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2201      	movs	r2, #1
 801469a:	4013      	ands	r3, r2
 801469c:	d004      	beq.n	80146a8 <USB_EPStartXfer+0x858>
 801469e:	187b      	adds	r3, r7, r1
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	3301      	adds	r3, #1
 80146a4:	187a      	adds	r2, r7, r1
 80146a6:	6013      	str	r3, [r2, #0]
 80146a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80146aa:	881b      	ldrh	r3, [r3, #0]
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	23f0      	movs	r3, #240	@ 0xf0
 80146b0:	18fb      	adds	r3, r7, r3
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	029b      	lsls	r3, r3, #10
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	4313      	orrs	r3, r2
 80146bc:	b29a      	uxth	r2, r3
 80146be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80146c0:	801a      	strh	r2, [r3, #0]
 80146c2:	e01a      	b.n	80146fa <USB_EPStartXfer+0x8aa>
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	785b      	ldrb	r3, [r3, #1]
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d116      	bne.n	80146fa <USB_EPStartXfer+0x8aa>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2250      	movs	r2, #80	@ 0x50
 80146d0:	5a9b      	ldrh	r3, [r3, r2]
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	001a      	movs	r2, r3
 80146d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80146d8:	189b      	adds	r3, r3, r2
 80146da:	673b      	str	r3, [r7, #112]	@ 0x70
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	00da      	lsls	r2, r3, #3
 80146e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80146e4:	18d3      	adds	r3, r2, r3
 80146e6:	4a83      	ldr	r2, [pc, #524]	@ (80148f4 <USB_EPStartXfer+0xaa4>)
 80146e8:	4694      	mov	ip, r2
 80146ea:	4463      	add	r3, ip
 80146ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80146ee:	1d7b      	adds	r3, r7, #5
 80146f0:	33ff      	adds	r3, #255	@ 0xff
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80146f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80146fa:	2076      	movs	r0, #118	@ 0x76
 80146fc:	183b      	adds	r3, r7, r0
 80146fe:	683a      	ldr	r2, [r7, #0]
 8014700:	8952      	ldrh	r2, [r2, #10]
 8014702:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	6959      	ldr	r1, [r3, #20]
 8014708:	1d7b      	adds	r3, r7, #5
 801470a:	33ff      	adds	r3, #255	@ 0xff
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	b29c      	uxth	r4, r3
 8014710:	183b      	adds	r3, r7, r0
 8014712:	881a      	ldrh	r2, [r3, #0]
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	0023      	movs	r3, r4
 8014718:	f000 fe0c 	bl	8015334 <USB_WritePMA>
 801471c:	e0ab      	b.n	8014876 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	785b      	ldrb	r3, [r3, #1]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d000      	beq.n	8014728 <USB_EPStartXfer+0x8d8>
 8014726:	e070      	b.n	801480a <USB_EPStartXfer+0x9ba>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2250      	movs	r2, #80	@ 0x50
 8014730:	5a9b      	ldrh	r3, [r3, r2]
 8014732:	b29b      	uxth	r3, r3
 8014734:	001a      	movs	r2, r3
 8014736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014738:	189b      	adds	r3, r3, r2
 801473a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	00da      	lsls	r2, r3, #3
 8014742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014744:	18d3      	adds	r3, r2, r3
 8014746:	4a6d      	ldr	r2, [pc, #436]	@ (80148fc <USB_EPStartXfer+0xaac>)
 8014748:	4694      	mov	ip, r2
 801474a:	4463      	add	r3, ip
 801474c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801474e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014750:	881b      	ldrh	r3, [r3, #0]
 8014752:	b29b      	uxth	r3, r3
 8014754:	059b      	lsls	r3, r3, #22
 8014756:	0d9b      	lsrs	r3, r3, #22
 8014758:	b29a      	uxth	r2, r3
 801475a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801475c:	801a      	strh	r2, [r3, #0]
 801475e:	1d7b      	adds	r3, r7, #5
 8014760:	33ff      	adds	r3, #255	@ 0xff
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	2b3e      	cmp	r3, #62	@ 0x3e
 8014766:	d922      	bls.n	80147ae <USB_EPStartXfer+0x95e>
 8014768:	1d7b      	adds	r3, r7, #5
 801476a:	33ff      	adds	r3, #255	@ 0xff
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	095b      	lsrs	r3, r3, #5
 8014770:	21ec      	movs	r1, #236	@ 0xec
 8014772:	187a      	adds	r2, r7, r1
 8014774:	6013      	str	r3, [r2, #0]
 8014776:	1d7b      	adds	r3, r7, #5
 8014778:	33ff      	adds	r3, #255	@ 0xff
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	221f      	movs	r2, #31
 801477e:	4013      	ands	r3, r2
 8014780:	d104      	bne.n	801478c <USB_EPStartXfer+0x93c>
 8014782:	187b      	adds	r3, r7, r1
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	3b01      	subs	r3, #1
 8014788:	187a      	adds	r2, r7, r1
 801478a:	6013      	str	r3, [r2, #0]
 801478c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801478e:	881b      	ldrh	r3, [r3, #0]
 8014790:	b29a      	uxth	r2, r3
 8014792:	23ec      	movs	r3, #236	@ 0xec
 8014794:	18fb      	adds	r3, r7, r3
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	b29b      	uxth	r3, r3
 801479a:	029b      	lsls	r3, r3, #10
 801479c:	b29b      	uxth	r3, r3
 801479e:	4313      	orrs	r3, r2
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	4a55      	ldr	r2, [pc, #340]	@ (80148f8 <USB_EPStartXfer+0xaa8>)
 80147a4:	4313      	orrs	r3, r2
 80147a6:	b29a      	uxth	r2, r3
 80147a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147aa:	801a      	strh	r2, [r3, #0]
 80147ac:	e052      	b.n	8014854 <USB_EPStartXfer+0xa04>
 80147ae:	1d7b      	adds	r3, r7, #5
 80147b0:	33ff      	adds	r3, #255	@ 0xff
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d108      	bne.n	80147ca <USB_EPStartXfer+0x97a>
 80147b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147ba:	881b      	ldrh	r3, [r3, #0]
 80147bc:	b29b      	uxth	r3, r3
 80147be:	4a4e      	ldr	r2, [pc, #312]	@ (80148f8 <USB_EPStartXfer+0xaa8>)
 80147c0:	4313      	orrs	r3, r2
 80147c2:	b29a      	uxth	r2, r3
 80147c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147c6:	801a      	strh	r2, [r3, #0]
 80147c8:	e044      	b.n	8014854 <USB_EPStartXfer+0xa04>
 80147ca:	1d7b      	adds	r3, r7, #5
 80147cc:	33ff      	adds	r3, #255	@ 0xff
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	085b      	lsrs	r3, r3, #1
 80147d2:	21ec      	movs	r1, #236	@ 0xec
 80147d4:	187a      	adds	r2, r7, r1
 80147d6:	6013      	str	r3, [r2, #0]
 80147d8:	1d7b      	adds	r3, r7, #5
 80147da:	33ff      	adds	r3, #255	@ 0xff
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2201      	movs	r2, #1
 80147e0:	4013      	ands	r3, r2
 80147e2:	d004      	beq.n	80147ee <USB_EPStartXfer+0x99e>
 80147e4:	187b      	adds	r3, r7, r1
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	3301      	adds	r3, #1
 80147ea:	187a      	adds	r2, r7, r1
 80147ec:	6013      	str	r3, [r2, #0]
 80147ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80147f0:	881b      	ldrh	r3, [r3, #0]
 80147f2:	b29a      	uxth	r2, r3
 80147f4:	23ec      	movs	r3, #236	@ 0xec
 80147f6:	18fb      	adds	r3, r7, r3
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	029b      	lsls	r3, r3, #10
 80147fe:	b29b      	uxth	r3, r3
 8014800:	4313      	orrs	r3, r2
 8014802:	b29a      	uxth	r2, r3
 8014804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014806:	801a      	strh	r2, [r3, #0]
 8014808:	e024      	b.n	8014854 <USB_EPStartXfer+0xa04>
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	785b      	ldrb	r3, [r3, #1]
 801480e:	2b01      	cmp	r3, #1
 8014810:	d120      	bne.n	8014854 <USB_EPStartXfer+0xa04>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2184      	movs	r1, #132	@ 0x84
 8014816:	187a      	adds	r2, r7, r1
 8014818:	6013      	str	r3, [r2, #0]
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2250      	movs	r2, #80	@ 0x50
 801481e:	5a9b      	ldrh	r3, [r3, r2]
 8014820:	b29b      	uxth	r3, r3
 8014822:	001a      	movs	r2, r3
 8014824:	187b      	adds	r3, r7, r1
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	189b      	adds	r3, r3, r2
 801482a:	187a      	adds	r2, r7, r1
 801482c:	6013      	str	r3, [r2, #0]
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	00da      	lsls	r2, r3, #3
 8014834:	187b      	adds	r3, r7, r1
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	18d3      	adds	r3, r2, r3
 801483a:	4a30      	ldr	r2, [pc, #192]	@ (80148fc <USB_EPStartXfer+0xaac>)
 801483c:	4694      	mov	ip, r2
 801483e:	4463      	add	r3, ip
 8014840:	2180      	movs	r1, #128	@ 0x80
 8014842:	187a      	adds	r2, r7, r1
 8014844:	6013      	str	r3, [r2, #0]
 8014846:	1d7b      	adds	r3, r7, #5
 8014848:	33ff      	adds	r3, #255	@ 0xff
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	b29a      	uxth	r2, r3
 801484e:	187b      	adds	r3, r7, r1
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014854:	2076      	movs	r0, #118	@ 0x76
 8014856:	183b      	adds	r3, r7, r0
 8014858:	683a      	ldr	r2, [r7, #0]
 801485a:	8912      	ldrh	r2, [r2, #8]
 801485c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	6959      	ldr	r1, [r3, #20]
 8014862:	1d7b      	adds	r3, r7, #5
 8014864:	33ff      	adds	r3, #255	@ 0xff
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	b29c      	uxth	r4, r3
 801486a:	183b      	adds	r3, r7, r0
 801486c:	881a      	ldrh	r2, [r3, #0]
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	0023      	movs	r3, r4
 8014872:	f000 fd5f 	bl	8015334 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	009b      	lsls	r3, r3, #2
 801487e:	18d3      	adds	r3, r2, r3
 8014880:	881b      	ldrh	r3, [r3, #0]
 8014882:	b29a      	uxth	r2, r3
 8014884:	200a      	movs	r0, #10
 8014886:	183b      	adds	r3, r7, r0
 8014888:	491d      	ldr	r1, [pc, #116]	@ (8014900 <USB_EPStartXfer+0xab0>)
 801488a:	400a      	ands	r2, r1
 801488c:	801a      	strh	r2, [r3, #0]
 801488e:	183b      	adds	r3, r7, r0
 8014890:	183a      	adds	r2, r7, r0
 8014892:	8812      	ldrh	r2, [r2, #0]
 8014894:	2110      	movs	r1, #16
 8014896:	404a      	eors	r2, r1
 8014898:	801a      	strh	r2, [r3, #0]
 801489a:	183b      	adds	r3, r7, r0
 801489c:	183a      	adds	r2, r7, r0
 801489e:	8812      	ldrh	r2, [r2, #0]
 80148a0:	2120      	movs	r1, #32
 80148a2:	404a      	eors	r2, r1
 80148a4:	801a      	strh	r2, [r3, #0]
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	18d3      	adds	r3, r2, r3
 80148b0:	183a      	adds	r2, r7, r0
 80148b2:	8812      	ldrh	r2, [r2, #0]
 80148b4:	4913      	ldr	r1, [pc, #76]	@ (8014904 <USB_EPStartXfer+0xab4>)
 80148b6:	430a      	orrs	r2, r1
 80148b8:	b292      	uxth	r2, r2
 80148ba:	801a      	strh	r2, [r3, #0]
 80148bc:	f000 fbf4 	bl	80150a8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	7b1b      	ldrb	r3, [r3, #12]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d000      	beq.n	80148ca <USB_EPStartXfer+0xa7a>
 80148c8:	e0a9      	b.n	8014a1e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	699a      	ldr	r2, [r3, #24]
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	691b      	ldr	r3, [r3, #16]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d918      	bls.n	8014908 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	691b      	ldr	r3, [r3, #16]
 80148da:	1d7a      	adds	r2, r7, #5
 80148dc:	32ff      	adds	r2, #255	@ 0xff
 80148de:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	699a      	ldr	r2, [r3, #24]
 80148e4:	1d7b      	adds	r3, r7, #5
 80148e6:	33ff      	adds	r3, #255	@ 0xff
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	1ad2      	subs	r2, r2, r3
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	619a      	str	r2, [r3, #24]
 80148f0:	e012      	b.n	8014918 <USB_EPStartXfer+0xac8>
 80148f2:	46c0      	nop			@ (mov r8, r8)
 80148f4:	00000406 	.word	0x00000406
 80148f8:	ffff8000 	.word	0xffff8000
 80148fc:	00000402 	.word	0x00000402
 8014900:	ffff8fbf 	.word	0xffff8fbf
 8014904:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	699b      	ldr	r3, [r3, #24]
 801490c:	1d7a      	adds	r2, r7, #5
 801490e:	32ff      	adds	r2, #255	@ 0xff
 8014910:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	2200      	movs	r2, #0
 8014916:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2190      	movs	r1, #144	@ 0x90
 801491c:	187a      	adds	r2, r7, r1
 801491e:	6013      	str	r3, [r2, #0]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2250      	movs	r2, #80	@ 0x50
 8014924:	5a9b      	ldrh	r3, [r3, r2]
 8014926:	b29b      	uxth	r3, r3
 8014928:	001a      	movs	r2, r3
 801492a:	187b      	adds	r3, r7, r1
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	189b      	adds	r3, r3, r2
 8014930:	187a      	adds	r2, r7, r1
 8014932:	6013      	str	r3, [r2, #0]
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	00da      	lsls	r2, r3, #3
 801493a:	187b      	adds	r3, r7, r1
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	18d3      	adds	r3, r2, r3
 8014940:	4acf      	ldr	r2, [pc, #828]	@ (8014c80 <USB_EPStartXfer+0xe30>)
 8014942:	4694      	mov	ip, r2
 8014944:	4463      	add	r3, ip
 8014946:	218c      	movs	r1, #140	@ 0x8c
 8014948:	187a      	adds	r2, r7, r1
 801494a:	6013      	str	r3, [r2, #0]
 801494c:	187b      	adds	r3, r7, r1
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	881b      	ldrh	r3, [r3, #0]
 8014952:	b29b      	uxth	r3, r3
 8014954:	059b      	lsls	r3, r3, #22
 8014956:	0d9b      	lsrs	r3, r3, #22
 8014958:	b29a      	uxth	r2, r3
 801495a:	187b      	adds	r3, r7, r1
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	801a      	strh	r2, [r3, #0]
 8014960:	1d7b      	adds	r3, r7, #5
 8014962:	33ff      	adds	r3, #255	@ 0xff
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	2b3e      	cmp	r3, #62	@ 0x3e
 8014968:	d925      	bls.n	80149b6 <USB_EPStartXfer+0xb66>
 801496a:	1d7b      	adds	r3, r7, #5
 801496c:	33ff      	adds	r3, #255	@ 0xff
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	095b      	lsrs	r3, r3, #5
 8014972:	21e8      	movs	r1, #232	@ 0xe8
 8014974:	187a      	adds	r2, r7, r1
 8014976:	6013      	str	r3, [r2, #0]
 8014978:	1d7b      	adds	r3, r7, #5
 801497a:	33ff      	adds	r3, #255	@ 0xff
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	221f      	movs	r2, #31
 8014980:	4013      	ands	r3, r2
 8014982:	d104      	bne.n	801498e <USB_EPStartXfer+0xb3e>
 8014984:	187b      	adds	r3, r7, r1
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	3b01      	subs	r3, #1
 801498a:	187a      	adds	r2, r7, r1
 801498c:	6013      	str	r3, [r2, #0]
 801498e:	218c      	movs	r1, #140	@ 0x8c
 8014990:	187b      	adds	r3, r7, r1
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	b29a      	uxth	r2, r3
 8014998:	23e8      	movs	r3, #232	@ 0xe8
 801499a:	18fb      	adds	r3, r7, r3
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	b29b      	uxth	r3, r3
 80149a0:	029b      	lsls	r3, r3, #10
 80149a2:	b29b      	uxth	r3, r3
 80149a4:	4313      	orrs	r3, r2
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	4ab6      	ldr	r2, [pc, #728]	@ (8014c84 <USB_EPStartXfer+0xe34>)
 80149aa:	4313      	orrs	r3, r2
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	187b      	adds	r3, r7, r1
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	801a      	strh	r2, [r3, #0]
 80149b4:	e353      	b.n	801505e <USB_EPStartXfer+0x120e>
 80149b6:	1d7b      	adds	r3, r7, #5
 80149b8:	33ff      	adds	r3, #255	@ 0xff
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d10b      	bne.n	80149d8 <USB_EPStartXfer+0xb88>
 80149c0:	218c      	movs	r1, #140	@ 0x8c
 80149c2:	187b      	adds	r3, r7, r1
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	881b      	ldrh	r3, [r3, #0]
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	4aae      	ldr	r2, [pc, #696]	@ (8014c84 <USB_EPStartXfer+0xe34>)
 80149cc:	4313      	orrs	r3, r2
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	187b      	adds	r3, r7, r1
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	801a      	strh	r2, [r3, #0]
 80149d6:	e342      	b.n	801505e <USB_EPStartXfer+0x120e>
 80149d8:	1d7b      	adds	r3, r7, #5
 80149da:	33ff      	adds	r3, #255	@ 0xff
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	085b      	lsrs	r3, r3, #1
 80149e0:	21e8      	movs	r1, #232	@ 0xe8
 80149e2:	187a      	adds	r2, r7, r1
 80149e4:	6013      	str	r3, [r2, #0]
 80149e6:	1d7b      	adds	r3, r7, #5
 80149e8:	33ff      	adds	r3, #255	@ 0xff
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2201      	movs	r2, #1
 80149ee:	4013      	ands	r3, r2
 80149f0:	d004      	beq.n	80149fc <USB_EPStartXfer+0xbac>
 80149f2:	187b      	adds	r3, r7, r1
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	3301      	adds	r3, #1
 80149f8:	187a      	adds	r2, r7, r1
 80149fa:	6013      	str	r3, [r2, #0]
 80149fc:	218c      	movs	r1, #140	@ 0x8c
 80149fe:	187b      	adds	r3, r7, r1
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	881b      	ldrh	r3, [r3, #0]
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	23e8      	movs	r3, #232	@ 0xe8
 8014a08:	18fb      	adds	r3, r7, r3
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	029b      	lsls	r3, r3, #10
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	4313      	orrs	r3, r2
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	187b      	adds	r3, r7, r1
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	801a      	strh	r2, [r3, #0]
 8014a1c:	e31f      	b.n	801505e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	78db      	ldrb	r3, [r3, #3]
 8014a22:	2b02      	cmp	r3, #2
 8014a24:	d000      	beq.n	8014a28 <USB_EPStartXfer+0xbd8>
 8014a26:	e191      	b.n	8014d4c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	785b      	ldrb	r3, [r3, #1]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d000      	beq.n	8014a32 <USB_EPStartXfer+0xbe2>
 8014a30:	e07c      	b.n	8014b2c <USB_EPStartXfer+0xcdc>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	21ac      	movs	r1, #172	@ 0xac
 8014a36:	187a      	adds	r2, r7, r1
 8014a38:	6013      	str	r3, [r2, #0]
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2250      	movs	r2, #80	@ 0x50
 8014a3e:	5a9b      	ldrh	r3, [r3, r2]
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	001a      	movs	r2, r3
 8014a44:	187b      	adds	r3, r7, r1
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	189b      	adds	r3, r3, r2
 8014a4a:	187a      	adds	r2, r7, r1
 8014a4c:	6013      	str	r3, [r2, #0]
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	00da      	lsls	r2, r3, #3
 8014a54:	187b      	adds	r3, r7, r1
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	18d3      	adds	r3, r2, r3
 8014a5a:	4a8b      	ldr	r2, [pc, #556]	@ (8014c88 <USB_EPStartXfer+0xe38>)
 8014a5c:	4694      	mov	ip, r2
 8014a5e:	4463      	add	r3, ip
 8014a60:	21a8      	movs	r1, #168	@ 0xa8
 8014a62:	187a      	adds	r2, r7, r1
 8014a64:	6013      	str	r3, [r2, #0]
 8014a66:	187b      	adds	r3, r7, r1
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	881b      	ldrh	r3, [r3, #0]
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	059b      	lsls	r3, r3, #22
 8014a70:	0d9b      	lsrs	r3, r3, #22
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	187b      	adds	r3, r7, r1
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	801a      	strh	r2, [r3, #0]
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	691b      	ldr	r3, [r3, #16]
 8014a7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014a80:	d923      	bls.n	8014aca <USB_EPStartXfer+0xc7a>
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	691b      	ldr	r3, [r3, #16]
 8014a86:	095b      	lsrs	r3, r3, #5
 8014a88:	21e4      	movs	r1, #228	@ 0xe4
 8014a8a:	187a      	adds	r2, r7, r1
 8014a8c:	6013      	str	r3, [r2, #0]
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	691b      	ldr	r3, [r3, #16]
 8014a92:	221f      	movs	r2, #31
 8014a94:	4013      	ands	r3, r2
 8014a96:	d104      	bne.n	8014aa2 <USB_EPStartXfer+0xc52>
 8014a98:	187b      	adds	r3, r7, r1
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	3b01      	subs	r3, #1
 8014a9e:	187a      	adds	r2, r7, r1
 8014aa0:	6013      	str	r3, [r2, #0]
 8014aa2:	21a8      	movs	r1, #168	@ 0xa8
 8014aa4:	187b      	adds	r3, r7, r1
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	881b      	ldrh	r3, [r3, #0]
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	23e4      	movs	r3, #228	@ 0xe4
 8014aae:	18fb      	adds	r3, r7, r3
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	029b      	lsls	r3, r3, #10
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	4313      	orrs	r3, r2
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	4a71      	ldr	r2, [pc, #452]	@ (8014c84 <USB_EPStartXfer+0xe34>)
 8014abe:	4313      	orrs	r3, r2
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	187b      	adds	r3, r7, r1
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	801a      	strh	r2, [r3, #0]
 8014ac8:	e054      	b.n	8014b74 <USB_EPStartXfer+0xd24>
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	691b      	ldr	r3, [r3, #16]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d10b      	bne.n	8014aea <USB_EPStartXfer+0xc9a>
 8014ad2:	21a8      	movs	r1, #168	@ 0xa8
 8014ad4:	187b      	adds	r3, r7, r1
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	881b      	ldrh	r3, [r3, #0]
 8014ada:	b29b      	uxth	r3, r3
 8014adc:	4a69      	ldr	r2, [pc, #420]	@ (8014c84 <USB_EPStartXfer+0xe34>)
 8014ade:	4313      	orrs	r3, r2
 8014ae0:	b29a      	uxth	r2, r3
 8014ae2:	187b      	adds	r3, r7, r1
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	801a      	strh	r2, [r3, #0]
 8014ae8:	e044      	b.n	8014b74 <USB_EPStartXfer+0xd24>
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	691b      	ldr	r3, [r3, #16]
 8014aee:	085b      	lsrs	r3, r3, #1
 8014af0:	21e4      	movs	r1, #228	@ 0xe4
 8014af2:	187a      	adds	r2, r7, r1
 8014af4:	6013      	str	r3, [r2, #0]
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	691b      	ldr	r3, [r3, #16]
 8014afa:	2201      	movs	r2, #1
 8014afc:	4013      	ands	r3, r2
 8014afe:	d004      	beq.n	8014b0a <USB_EPStartXfer+0xcba>
 8014b00:	187b      	adds	r3, r7, r1
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	3301      	adds	r3, #1
 8014b06:	187a      	adds	r2, r7, r1
 8014b08:	6013      	str	r3, [r2, #0]
 8014b0a:	21a8      	movs	r1, #168	@ 0xa8
 8014b0c:	187b      	adds	r3, r7, r1
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	881b      	ldrh	r3, [r3, #0]
 8014b12:	b29a      	uxth	r2, r3
 8014b14:	23e4      	movs	r3, #228	@ 0xe4
 8014b16:	18fb      	adds	r3, r7, r3
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	029b      	lsls	r3, r3, #10
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	4313      	orrs	r3, r2
 8014b22:	b29a      	uxth	r2, r3
 8014b24:	187b      	adds	r3, r7, r1
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	801a      	strh	r2, [r3, #0]
 8014b2a:	e023      	b.n	8014b74 <USB_EPStartXfer+0xd24>
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	785b      	ldrb	r3, [r3, #1]
 8014b30:	2b01      	cmp	r3, #1
 8014b32:	d11f      	bne.n	8014b74 <USB_EPStartXfer+0xd24>
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	21b4      	movs	r1, #180	@ 0xb4
 8014b38:	187a      	adds	r2, r7, r1
 8014b3a:	6013      	str	r3, [r2, #0]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2250      	movs	r2, #80	@ 0x50
 8014b40:	5a9b      	ldrh	r3, [r3, r2]
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	001a      	movs	r2, r3
 8014b46:	187b      	adds	r3, r7, r1
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	189b      	adds	r3, r3, r2
 8014b4c:	187a      	adds	r2, r7, r1
 8014b4e:	6013      	str	r3, [r2, #0]
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	00da      	lsls	r2, r3, #3
 8014b56:	187b      	adds	r3, r7, r1
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	18d3      	adds	r3, r2, r3
 8014b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8014c88 <USB_EPStartXfer+0xe38>)
 8014b5e:	4694      	mov	ip, r2
 8014b60:	4463      	add	r3, ip
 8014b62:	21b0      	movs	r1, #176	@ 0xb0
 8014b64:	187a      	adds	r2, r7, r1
 8014b66:	6013      	str	r3, [r2, #0]
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	691b      	ldr	r3, [r3, #16]
 8014b6c:	b29a      	uxth	r2, r3
 8014b6e:	187b      	adds	r3, r7, r1
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	801a      	strh	r2, [r3, #0]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	22a4      	movs	r2, #164	@ 0xa4
 8014b78:	18ba      	adds	r2, r7, r2
 8014b7a:	6013      	str	r3, [r2, #0]
 8014b7c:	683b      	ldr	r3, [r7, #0]
 8014b7e:	785b      	ldrb	r3, [r3, #1]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d000      	beq.n	8014b86 <USB_EPStartXfer+0xd36>
 8014b84:	e082      	b.n	8014c8c <USB_EPStartXfer+0xe3c>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	219c      	movs	r1, #156	@ 0x9c
 8014b8a:	187a      	adds	r2, r7, r1
 8014b8c:	6013      	str	r3, [r2, #0]
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2250      	movs	r2, #80	@ 0x50
 8014b92:	5a9b      	ldrh	r3, [r3, r2]
 8014b94:	b29b      	uxth	r3, r3
 8014b96:	001a      	movs	r2, r3
 8014b98:	187b      	adds	r3, r7, r1
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	189b      	adds	r3, r3, r2
 8014b9e:	187a      	adds	r2, r7, r1
 8014ba0:	6013      	str	r3, [r2, #0]
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	00da      	lsls	r2, r3, #3
 8014ba8:	187b      	adds	r3, r7, r1
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	18d3      	adds	r3, r2, r3
 8014bae:	4a34      	ldr	r2, [pc, #208]	@ (8014c80 <USB_EPStartXfer+0xe30>)
 8014bb0:	4694      	mov	ip, r2
 8014bb2:	4463      	add	r3, ip
 8014bb4:	2198      	movs	r1, #152	@ 0x98
 8014bb6:	187a      	adds	r2, r7, r1
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	187b      	adds	r3, r7, r1
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	b29b      	uxth	r3, r3
 8014bc2:	059b      	lsls	r3, r3, #22
 8014bc4:	0d9b      	lsrs	r3, r3, #22
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	187b      	adds	r3, r7, r1
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	801a      	strh	r2, [r3, #0]
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	691b      	ldr	r3, [r3, #16]
 8014bd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8014bd4:	d923      	bls.n	8014c1e <USB_EPStartXfer+0xdce>
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	691b      	ldr	r3, [r3, #16]
 8014bda:	095b      	lsrs	r3, r3, #5
 8014bdc:	21e0      	movs	r1, #224	@ 0xe0
 8014bde:	187a      	adds	r2, r7, r1
 8014be0:	6013      	str	r3, [r2, #0]
 8014be2:	683b      	ldr	r3, [r7, #0]
 8014be4:	691b      	ldr	r3, [r3, #16]
 8014be6:	221f      	movs	r2, #31
 8014be8:	4013      	ands	r3, r2
 8014bea:	d104      	bne.n	8014bf6 <USB_EPStartXfer+0xda6>
 8014bec:	187b      	adds	r3, r7, r1
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	3b01      	subs	r3, #1
 8014bf2:	187a      	adds	r2, r7, r1
 8014bf4:	6013      	str	r3, [r2, #0]
 8014bf6:	2198      	movs	r1, #152	@ 0x98
 8014bf8:	187b      	adds	r3, r7, r1
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	881b      	ldrh	r3, [r3, #0]
 8014bfe:	b29a      	uxth	r2, r3
 8014c00:	23e0      	movs	r3, #224	@ 0xe0
 8014c02:	18fb      	adds	r3, r7, r3
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	029b      	lsls	r3, r3, #10
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	4313      	orrs	r3, r2
 8014c0e:	b29b      	uxth	r3, r3
 8014c10:	4a1c      	ldr	r2, [pc, #112]	@ (8014c84 <USB_EPStartXfer+0xe34>)
 8014c12:	4313      	orrs	r3, r2
 8014c14:	b29a      	uxth	r2, r3
 8014c16:	187b      	adds	r3, r7, r1
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	801a      	strh	r2, [r3, #0]
 8014c1c:	e057      	b.n	8014cce <USB_EPStartXfer+0xe7e>
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	691b      	ldr	r3, [r3, #16]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d10b      	bne.n	8014c3e <USB_EPStartXfer+0xdee>
 8014c26:	2198      	movs	r1, #152	@ 0x98
 8014c28:	187b      	adds	r3, r7, r1
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	4a14      	ldr	r2, [pc, #80]	@ (8014c84 <USB_EPStartXfer+0xe34>)
 8014c32:	4313      	orrs	r3, r2
 8014c34:	b29a      	uxth	r2, r3
 8014c36:	187b      	adds	r3, r7, r1
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	801a      	strh	r2, [r3, #0]
 8014c3c:	e047      	b.n	8014cce <USB_EPStartXfer+0xe7e>
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	691b      	ldr	r3, [r3, #16]
 8014c42:	085b      	lsrs	r3, r3, #1
 8014c44:	21e0      	movs	r1, #224	@ 0xe0
 8014c46:	187a      	adds	r2, r7, r1
 8014c48:	6013      	str	r3, [r2, #0]
 8014c4a:	683b      	ldr	r3, [r7, #0]
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	2201      	movs	r2, #1
 8014c50:	4013      	ands	r3, r2
 8014c52:	d004      	beq.n	8014c5e <USB_EPStartXfer+0xe0e>
 8014c54:	187b      	adds	r3, r7, r1
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	3301      	adds	r3, #1
 8014c5a:	187a      	adds	r2, r7, r1
 8014c5c:	6013      	str	r3, [r2, #0]
 8014c5e:	2198      	movs	r1, #152	@ 0x98
 8014c60:	187b      	adds	r3, r7, r1
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	881b      	ldrh	r3, [r3, #0]
 8014c66:	b29a      	uxth	r2, r3
 8014c68:	23e0      	movs	r3, #224	@ 0xe0
 8014c6a:	18fb      	adds	r3, r7, r3
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	029b      	lsls	r3, r3, #10
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	4313      	orrs	r3, r2
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	187b      	adds	r3, r7, r1
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	801a      	strh	r2, [r3, #0]
 8014c7e:	e026      	b.n	8014cce <USB_EPStartXfer+0xe7e>
 8014c80:	00000406 	.word	0x00000406
 8014c84:	ffff8000 	.word	0xffff8000
 8014c88:	00000402 	.word	0x00000402
 8014c8c:	683b      	ldr	r3, [r7, #0]
 8014c8e:	785b      	ldrb	r3, [r3, #1]
 8014c90:	2b01      	cmp	r3, #1
 8014c92:	d11c      	bne.n	8014cce <USB_EPStartXfer+0xe7e>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2250      	movs	r2, #80	@ 0x50
 8014c98:	5a9b      	ldrh	r3, [r3, r2]
 8014c9a:	b29b      	uxth	r3, r3
 8014c9c:	001a      	movs	r2, r3
 8014c9e:	21a4      	movs	r1, #164	@ 0xa4
 8014ca0:	187b      	adds	r3, r7, r1
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	189b      	adds	r3, r3, r2
 8014ca6:	187a      	adds	r2, r7, r1
 8014ca8:	6013      	str	r3, [r2, #0]
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	00da      	lsls	r2, r3, #3
 8014cb0:	187b      	adds	r3, r7, r1
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	18d3      	adds	r3, r2, r3
 8014cb6:	4ad2      	ldr	r2, [pc, #840]	@ (8015000 <USB_EPStartXfer+0x11b0>)
 8014cb8:	4694      	mov	ip, r2
 8014cba:	4463      	add	r3, ip
 8014cbc:	21a0      	movs	r1, #160	@ 0xa0
 8014cbe:	187a      	adds	r2, r7, r1
 8014cc0:	6013      	str	r3, [r2, #0]
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	691b      	ldr	r3, [r3, #16]
 8014cc6:	b29a      	uxth	r2, r3
 8014cc8:	187b      	adds	r3, r7, r1
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	69db      	ldr	r3, [r3, #28]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d100      	bne.n	8014cd8 <USB_EPStartXfer+0xe88>
 8014cd6:	e1c2      	b.n	801505e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	009b      	lsls	r3, r3, #2
 8014ce0:	18d2      	adds	r2, r2, r3
 8014ce2:	2196      	movs	r1, #150	@ 0x96
 8014ce4:	187b      	adds	r3, r7, r1
 8014ce6:	8812      	ldrh	r2, [r2, #0]
 8014ce8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014cea:	187b      	adds	r3, r7, r1
 8014cec:	881a      	ldrh	r2, [r3, #0]
 8014cee:	2380      	movs	r3, #128	@ 0x80
 8014cf0:	01db      	lsls	r3, r3, #7
 8014cf2:	4013      	ands	r3, r2
 8014cf4:	d004      	beq.n	8014d00 <USB_EPStartXfer+0xeb0>
 8014cf6:	187b      	adds	r3, r7, r1
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	2240      	movs	r2, #64	@ 0x40
 8014cfc:	4013      	ands	r3, r2
 8014cfe:	d10d      	bne.n	8014d1c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014d00:	2196      	movs	r1, #150	@ 0x96
 8014d02:	187b      	adds	r3, r7, r1
 8014d04:	881a      	ldrh	r2, [r3, #0]
 8014d06:	2380      	movs	r3, #128	@ 0x80
 8014d08:	01db      	lsls	r3, r3, #7
 8014d0a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014d0c:	d000      	beq.n	8014d10 <USB_EPStartXfer+0xec0>
 8014d0e:	e1a6      	b.n	801505e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014d10:	187b      	adds	r3, r7, r1
 8014d12:	881b      	ldrh	r3, [r3, #0]
 8014d14:	2240      	movs	r2, #64	@ 0x40
 8014d16:	4013      	ands	r3, r2
 8014d18:	d000      	beq.n	8014d1c <USB_EPStartXfer+0xecc>
 8014d1a:	e1a0      	b.n	801505e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014d1c:	687a      	ldr	r2, [r7, #4]
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	18d3      	adds	r3, r2, r3
 8014d26:	881b      	ldrh	r3, [r3, #0]
 8014d28:	b29a      	uxth	r2, r3
 8014d2a:	2094      	movs	r0, #148	@ 0x94
 8014d2c:	183b      	adds	r3, r7, r0
 8014d2e:	49b5      	ldr	r1, [pc, #724]	@ (8015004 <USB_EPStartXfer+0x11b4>)
 8014d30:	400a      	ands	r2, r1
 8014d32:	801a      	strh	r2, [r3, #0]
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	18d3      	adds	r3, r2, r3
 8014d3e:	183a      	adds	r2, r7, r0
 8014d40:	8812      	ldrh	r2, [r2, #0]
 8014d42:	49b1      	ldr	r1, [pc, #708]	@ (8015008 <USB_EPStartXfer+0x11b8>)
 8014d44:	430a      	orrs	r2, r1
 8014d46:	b292      	uxth	r2, r2
 8014d48:	801a      	strh	r2, [r3, #0]
 8014d4a:	e188      	b.n	801505e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	78db      	ldrb	r3, [r3, #3]
 8014d50:	2b01      	cmp	r3, #1
 8014d52:	d000      	beq.n	8014d56 <USB_EPStartXfer+0xf06>
 8014d54:	e181      	b.n	801505a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	699a      	ldr	r2, [r3, #24]
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	691b      	ldr	r3, [r3, #16]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d90d      	bls.n	8014d7e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	691b      	ldr	r3, [r3, #16]
 8014d66:	1d7a      	adds	r2, r7, #5
 8014d68:	32ff      	adds	r2, #255	@ 0xff
 8014d6a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	699a      	ldr	r2, [r3, #24]
 8014d70:	1d7b      	adds	r3, r7, #5
 8014d72:	33ff      	adds	r3, #255	@ 0xff
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	1ad2      	subs	r2, r2, r3
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	619a      	str	r2, [r3, #24]
 8014d7c:	e007      	b.n	8014d8e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	699b      	ldr	r3, [r3, #24]
 8014d82:	1d7a      	adds	r2, r7, #5
 8014d84:	32ff      	adds	r2, #255	@ 0xff
 8014d86:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	785b      	ldrb	r3, [r3, #1]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d000      	beq.n	8014d98 <USB_EPStartXfer+0xf48>
 8014d96:	e082      	b.n	8014e9e <USB_EPStartXfer+0x104e>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	21cc      	movs	r1, #204	@ 0xcc
 8014d9c:	187a      	adds	r2, r7, r1
 8014d9e:	6013      	str	r3, [r2, #0]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2250      	movs	r2, #80	@ 0x50
 8014da4:	5a9b      	ldrh	r3, [r3, r2]
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	001a      	movs	r2, r3
 8014daa:	187b      	adds	r3, r7, r1
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	189b      	adds	r3, r3, r2
 8014db0:	187a      	adds	r2, r7, r1
 8014db2:	6013      	str	r3, [r2, #0]
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	00da      	lsls	r2, r3, #3
 8014dba:	187b      	adds	r3, r7, r1
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	18d3      	adds	r3, r2, r3
 8014dc0:	4a92      	ldr	r2, [pc, #584]	@ (801500c <USB_EPStartXfer+0x11bc>)
 8014dc2:	4694      	mov	ip, r2
 8014dc4:	4463      	add	r3, ip
 8014dc6:	21c8      	movs	r1, #200	@ 0xc8
 8014dc8:	187a      	adds	r2, r7, r1
 8014dca:	6013      	str	r3, [r2, #0]
 8014dcc:	187b      	adds	r3, r7, r1
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	881b      	ldrh	r3, [r3, #0]
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	059b      	lsls	r3, r3, #22
 8014dd6:	0d9b      	lsrs	r3, r3, #22
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	187b      	adds	r3, r7, r1
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	801a      	strh	r2, [r3, #0]
 8014de0:	1d7b      	adds	r3, r7, #5
 8014de2:	33ff      	adds	r3, #255	@ 0xff
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	2b3e      	cmp	r3, #62	@ 0x3e
 8014de8:	d925      	bls.n	8014e36 <USB_EPStartXfer+0xfe6>
 8014dea:	1d7b      	adds	r3, r7, #5
 8014dec:	33ff      	adds	r3, #255	@ 0xff
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	095b      	lsrs	r3, r3, #5
 8014df2:	21dc      	movs	r1, #220	@ 0xdc
 8014df4:	187a      	adds	r2, r7, r1
 8014df6:	6013      	str	r3, [r2, #0]
 8014df8:	1d7b      	adds	r3, r7, #5
 8014dfa:	33ff      	adds	r3, #255	@ 0xff
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	221f      	movs	r2, #31
 8014e00:	4013      	ands	r3, r2
 8014e02:	d104      	bne.n	8014e0e <USB_EPStartXfer+0xfbe>
 8014e04:	187b      	adds	r3, r7, r1
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	3b01      	subs	r3, #1
 8014e0a:	187a      	adds	r2, r7, r1
 8014e0c:	6013      	str	r3, [r2, #0]
 8014e0e:	21c8      	movs	r1, #200	@ 0xc8
 8014e10:	187b      	adds	r3, r7, r1
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	881b      	ldrh	r3, [r3, #0]
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	23dc      	movs	r3, #220	@ 0xdc
 8014e1a:	18fb      	adds	r3, r7, r3
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	029b      	lsls	r3, r3, #10
 8014e22:	b29b      	uxth	r3, r3
 8014e24:	4313      	orrs	r3, r2
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	4a79      	ldr	r2, [pc, #484]	@ (8015010 <USB_EPStartXfer+0x11c0>)
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	187b      	adds	r3, r7, r1
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	801a      	strh	r2, [r3, #0]
 8014e34:	e058      	b.n	8014ee8 <USB_EPStartXfer+0x1098>
 8014e36:	1d7b      	adds	r3, r7, #5
 8014e38:	33ff      	adds	r3, #255	@ 0xff
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d10b      	bne.n	8014e58 <USB_EPStartXfer+0x1008>
 8014e40:	21c8      	movs	r1, #200	@ 0xc8
 8014e42:	187b      	adds	r3, r7, r1
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	881b      	ldrh	r3, [r3, #0]
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	4a71      	ldr	r2, [pc, #452]	@ (8015010 <USB_EPStartXfer+0x11c0>)
 8014e4c:	4313      	orrs	r3, r2
 8014e4e:	b29a      	uxth	r2, r3
 8014e50:	187b      	adds	r3, r7, r1
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	801a      	strh	r2, [r3, #0]
 8014e56:	e047      	b.n	8014ee8 <USB_EPStartXfer+0x1098>
 8014e58:	1d7b      	adds	r3, r7, #5
 8014e5a:	33ff      	adds	r3, #255	@ 0xff
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	085b      	lsrs	r3, r3, #1
 8014e60:	21dc      	movs	r1, #220	@ 0xdc
 8014e62:	187a      	adds	r2, r7, r1
 8014e64:	6013      	str	r3, [r2, #0]
 8014e66:	1d7b      	adds	r3, r7, #5
 8014e68:	33ff      	adds	r3, #255	@ 0xff
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	4013      	ands	r3, r2
 8014e70:	d004      	beq.n	8014e7c <USB_EPStartXfer+0x102c>
 8014e72:	187b      	adds	r3, r7, r1
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	3301      	adds	r3, #1
 8014e78:	187a      	adds	r2, r7, r1
 8014e7a:	6013      	str	r3, [r2, #0]
 8014e7c:	21c8      	movs	r1, #200	@ 0xc8
 8014e7e:	187b      	adds	r3, r7, r1
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	881b      	ldrh	r3, [r3, #0]
 8014e84:	b29a      	uxth	r2, r3
 8014e86:	23dc      	movs	r3, #220	@ 0xdc
 8014e88:	18fb      	adds	r3, r7, r3
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	b29b      	uxth	r3, r3
 8014e8e:	029b      	lsls	r3, r3, #10
 8014e90:	b29b      	uxth	r3, r3
 8014e92:	4313      	orrs	r3, r2
 8014e94:	b29a      	uxth	r2, r3
 8014e96:	187b      	adds	r3, r7, r1
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	801a      	strh	r2, [r3, #0]
 8014e9c:	e024      	b.n	8014ee8 <USB_EPStartXfer+0x1098>
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	785b      	ldrb	r3, [r3, #1]
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d120      	bne.n	8014ee8 <USB_EPStartXfer+0x1098>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	21d4      	movs	r1, #212	@ 0xd4
 8014eaa:	187a      	adds	r2, r7, r1
 8014eac:	6013      	str	r3, [r2, #0]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	2250      	movs	r2, #80	@ 0x50
 8014eb2:	5a9b      	ldrh	r3, [r3, r2]
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	001a      	movs	r2, r3
 8014eb8:	187b      	adds	r3, r7, r1
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	189b      	adds	r3, r3, r2
 8014ebe:	187a      	adds	r2, r7, r1
 8014ec0:	6013      	str	r3, [r2, #0]
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	00da      	lsls	r2, r3, #3
 8014ec8:	187b      	adds	r3, r7, r1
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	18d3      	adds	r3, r2, r3
 8014ece:	4a4f      	ldr	r2, [pc, #316]	@ (801500c <USB_EPStartXfer+0x11bc>)
 8014ed0:	4694      	mov	ip, r2
 8014ed2:	4463      	add	r3, ip
 8014ed4:	21d0      	movs	r1, #208	@ 0xd0
 8014ed6:	187a      	adds	r2, r7, r1
 8014ed8:	6013      	str	r3, [r2, #0]
 8014eda:	1d7b      	adds	r3, r7, #5
 8014edc:	33ff      	adds	r3, #255	@ 0xff
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	b29a      	uxth	r2, r3
 8014ee2:	187b      	adds	r3, r7, r1
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	801a      	strh	r2, [r3, #0]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	22c4      	movs	r2, #196	@ 0xc4
 8014eec:	18ba      	adds	r2, r7, r2
 8014eee:	6013      	str	r3, [r2, #0]
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	785b      	ldrb	r3, [r3, #1]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d000      	beq.n	8014efa <USB_EPStartXfer+0x10aa>
 8014ef8:	e08c      	b.n	8015014 <USB_EPStartXfer+0x11c4>
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	21bc      	movs	r1, #188	@ 0xbc
 8014efe:	187a      	adds	r2, r7, r1
 8014f00:	6013      	str	r3, [r2, #0]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2250      	movs	r2, #80	@ 0x50
 8014f06:	5a9b      	ldrh	r3, [r3, r2]
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	001a      	movs	r2, r3
 8014f0c:	187b      	adds	r3, r7, r1
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	189b      	adds	r3, r3, r2
 8014f12:	187a      	adds	r2, r7, r1
 8014f14:	6013      	str	r3, [r2, #0]
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	00da      	lsls	r2, r3, #3
 8014f1c:	187b      	adds	r3, r7, r1
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	18d3      	adds	r3, r2, r3
 8014f22:	4a37      	ldr	r2, [pc, #220]	@ (8015000 <USB_EPStartXfer+0x11b0>)
 8014f24:	4694      	mov	ip, r2
 8014f26:	4463      	add	r3, ip
 8014f28:	21b8      	movs	r1, #184	@ 0xb8
 8014f2a:	187a      	adds	r2, r7, r1
 8014f2c:	6013      	str	r3, [r2, #0]
 8014f2e:	187b      	adds	r3, r7, r1
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	881b      	ldrh	r3, [r3, #0]
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	059b      	lsls	r3, r3, #22
 8014f38:	0d9b      	lsrs	r3, r3, #22
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	187b      	adds	r3, r7, r1
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	801a      	strh	r2, [r3, #0]
 8014f42:	1d7b      	adds	r3, r7, #5
 8014f44:	33ff      	adds	r3, #255	@ 0xff
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8014f4a:	d925      	bls.n	8014f98 <USB_EPStartXfer+0x1148>
 8014f4c:	1d7b      	adds	r3, r7, #5
 8014f4e:	33ff      	adds	r3, #255	@ 0xff
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	095b      	lsrs	r3, r3, #5
 8014f54:	21d8      	movs	r1, #216	@ 0xd8
 8014f56:	187a      	adds	r2, r7, r1
 8014f58:	6013      	str	r3, [r2, #0]
 8014f5a:	1d7b      	adds	r3, r7, #5
 8014f5c:	33ff      	adds	r3, #255	@ 0xff
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	221f      	movs	r2, #31
 8014f62:	4013      	ands	r3, r2
 8014f64:	d104      	bne.n	8014f70 <USB_EPStartXfer+0x1120>
 8014f66:	187b      	adds	r3, r7, r1
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	3b01      	subs	r3, #1
 8014f6c:	187a      	adds	r2, r7, r1
 8014f6e:	6013      	str	r3, [r2, #0]
 8014f70:	21b8      	movs	r1, #184	@ 0xb8
 8014f72:	187b      	adds	r3, r7, r1
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	881b      	ldrh	r3, [r3, #0]
 8014f78:	b29a      	uxth	r2, r3
 8014f7a:	23d8      	movs	r3, #216	@ 0xd8
 8014f7c:	18fb      	adds	r3, r7, r3
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	029b      	lsls	r3, r3, #10
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	4313      	orrs	r3, r2
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	4a21      	ldr	r2, [pc, #132]	@ (8015010 <USB_EPStartXfer+0x11c0>)
 8014f8c:	4313      	orrs	r3, r2
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	187b      	adds	r3, r7, r1
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	801a      	strh	r2, [r3, #0]
 8014f96:	e062      	b.n	801505e <USB_EPStartXfer+0x120e>
 8014f98:	1d7b      	adds	r3, r7, #5
 8014f9a:	33ff      	adds	r3, #255	@ 0xff
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d10b      	bne.n	8014fba <USB_EPStartXfer+0x116a>
 8014fa2:	21b8      	movs	r1, #184	@ 0xb8
 8014fa4:	187b      	adds	r3, r7, r1
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	881b      	ldrh	r3, [r3, #0]
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	4a18      	ldr	r2, [pc, #96]	@ (8015010 <USB_EPStartXfer+0x11c0>)
 8014fae:	4313      	orrs	r3, r2
 8014fb0:	b29a      	uxth	r2, r3
 8014fb2:	187b      	adds	r3, r7, r1
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	801a      	strh	r2, [r3, #0]
 8014fb8:	e051      	b.n	801505e <USB_EPStartXfer+0x120e>
 8014fba:	1d7b      	adds	r3, r7, #5
 8014fbc:	33ff      	adds	r3, #255	@ 0xff
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	085b      	lsrs	r3, r3, #1
 8014fc2:	21d8      	movs	r1, #216	@ 0xd8
 8014fc4:	187a      	adds	r2, r7, r1
 8014fc6:	6013      	str	r3, [r2, #0]
 8014fc8:	1d7b      	adds	r3, r7, #5
 8014fca:	33ff      	adds	r3, #255	@ 0xff
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	2201      	movs	r2, #1
 8014fd0:	4013      	ands	r3, r2
 8014fd2:	d004      	beq.n	8014fde <USB_EPStartXfer+0x118e>
 8014fd4:	187b      	adds	r3, r7, r1
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	3301      	adds	r3, #1
 8014fda:	187a      	adds	r2, r7, r1
 8014fdc:	6013      	str	r3, [r2, #0]
 8014fde:	21b8      	movs	r1, #184	@ 0xb8
 8014fe0:	187b      	adds	r3, r7, r1
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	881b      	ldrh	r3, [r3, #0]
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	23d8      	movs	r3, #216	@ 0xd8
 8014fea:	18fb      	adds	r3, r7, r3
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	029b      	lsls	r3, r3, #10
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	4313      	orrs	r3, r2
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	187b      	adds	r3, r7, r1
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	801a      	strh	r2, [r3, #0]
 8014ffe:	e02e      	b.n	801505e <USB_EPStartXfer+0x120e>
 8015000:	00000406 	.word	0x00000406
 8015004:	ffff8f8f 	.word	0xffff8f8f
 8015008:	ffff80c0 	.word	0xffff80c0
 801500c:	00000402 	.word	0x00000402
 8015010:	ffff8000 	.word	0xffff8000
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	785b      	ldrb	r3, [r3, #1]
 8015018:	2b01      	cmp	r3, #1
 801501a:	d120      	bne.n	801505e <USB_EPStartXfer+0x120e>
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2250      	movs	r2, #80	@ 0x50
 8015020:	5a9b      	ldrh	r3, [r3, r2]
 8015022:	b29b      	uxth	r3, r3
 8015024:	001a      	movs	r2, r3
 8015026:	21c4      	movs	r1, #196	@ 0xc4
 8015028:	187b      	adds	r3, r7, r1
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	189b      	adds	r3, r3, r2
 801502e:	187a      	adds	r2, r7, r1
 8015030:	6013      	str	r3, [r2, #0]
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	00da      	lsls	r2, r3, #3
 8015038:	187b      	adds	r3, r7, r1
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	18d3      	adds	r3, r2, r3
 801503e:	4a1d      	ldr	r2, [pc, #116]	@ (80150b4 <USB_EPStartXfer+0x1264>)
 8015040:	4694      	mov	ip, r2
 8015042:	4463      	add	r3, ip
 8015044:	21c0      	movs	r1, #192	@ 0xc0
 8015046:	187a      	adds	r2, r7, r1
 8015048:	6013      	str	r3, [r2, #0]
 801504a:	1d7b      	adds	r3, r7, #5
 801504c:	33ff      	adds	r3, #255	@ 0xff
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	b29a      	uxth	r2, r3
 8015052:	187b      	adds	r3, r7, r1
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	801a      	strh	r2, [r3, #0]
 8015058:	e001      	b.n	801505e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	e025      	b.n	80150aa <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	18d3      	adds	r3, r2, r3
 8015068:	881b      	ldrh	r3, [r3, #0]
 801506a:	b29a      	uxth	r2, r3
 801506c:	208a      	movs	r0, #138	@ 0x8a
 801506e:	183b      	adds	r3, r7, r0
 8015070:	4911      	ldr	r1, [pc, #68]	@ (80150b8 <USB_EPStartXfer+0x1268>)
 8015072:	400a      	ands	r2, r1
 8015074:	801a      	strh	r2, [r3, #0]
 8015076:	183b      	adds	r3, r7, r0
 8015078:	183a      	adds	r2, r7, r0
 801507a:	8812      	ldrh	r2, [r2, #0]
 801507c:	2180      	movs	r1, #128	@ 0x80
 801507e:	0149      	lsls	r1, r1, #5
 8015080:	404a      	eors	r2, r1
 8015082:	801a      	strh	r2, [r3, #0]
 8015084:	183b      	adds	r3, r7, r0
 8015086:	183a      	adds	r2, r7, r0
 8015088:	8812      	ldrh	r2, [r2, #0]
 801508a:	2180      	movs	r1, #128	@ 0x80
 801508c:	0189      	lsls	r1, r1, #6
 801508e:	404a      	eors	r2, r1
 8015090:	801a      	strh	r2, [r3, #0]
 8015092:	687a      	ldr	r2, [r7, #4]
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	009b      	lsls	r3, r3, #2
 801509a:	18d3      	adds	r3, r2, r3
 801509c:	183a      	adds	r2, r7, r0
 801509e:	8812      	ldrh	r2, [r2, #0]
 80150a0:	4906      	ldr	r1, [pc, #24]	@ (80150bc <USB_EPStartXfer+0x126c>)
 80150a2:	430a      	orrs	r2, r1
 80150a4:	b292      	uxth	r2, r2
 80150a6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80150a8:	2300      	movs	r3, #0
}
 80150aa:	0018      	movs	r0, r3
 80150ac:	46bd      	mov	sp, r7
 80150ae:	b043      	add	sp, #268	@ 0x10c
 80150b0:	bd90      	pop	{r4, r7, pc}
 80150b2:	46c0      	nop			@ (mov r8, r8)
 80150b4:	00000406 	.word	0x00000406
 80150b8:	ffffbf8f 	.word	0xffffbf8f
 80150bc:	ffff8080 	.word	0xffff8080

080150c0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b084      	sub	sp, #16
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
 80150c8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	785b      	ldrb	r3, [r3, #1]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d01d      	beq.n	801510e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80150d2:	687a      	ldr	r2, [r7, #4]
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	009b      	lsls	r3, r3, #2
 80150da:	18d3      	adds	r3, r2, r3
 80150dc:	881b      	ldrh	r3, [r3, #0]
 80150de:	b29a      	uxth	r2, r3
 80150e0:	200c      	movs	r0, #12
 80150e2:	183b      	adds	r3, r7, r0
 80150e4:	491b      	ldr	r1, [pc, #108]	@ (8015154 <USB_EPSetStall+0x94>)
 80150e6:	400a      	ands	r2, r1
 80150e8:	801a      	strh	r2, [r3, #0]
 80150ea:	183b      	adds	r3, r7, r0
 80150ec:	183a      	adds	r2, r7, r0
 80150ee:	8812      	ldrh	r2, [r2, #0]
 80150f0:	2110      	movs	r1, #16
 80150f2:	404a      	eors	r2, r1
 80150f4:	801a      	strh	r2, [r3, #0]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	18d3      	adds	r3, r2, r3
 8015100:	183a      	adds	r2, r7, r0
 8015102:	8812      	ldrh	r2, [r2, #0]
 8015104:	4914      	ldr	r1, [pc, #80]	@ (8015158 <USB_EPSetStall+0x98>)
 8015106:	430a      	orrs	r2, r1
 8015108:	b292      	uxth	r2, r2
 801510a:	801a      	strh	r2, [r3, #0]
 801510c:	e01d      	b.n	801514a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	18d3      	adds	r3, r2, r3
 8015118:	881b      	ldrh	r3, [r3, #0]
 801511a:	b29a      	uxth	r2, r3
 801511c:	200e      	movs	r0, #14
 801511e:	183b      	adds	r3, r7, r0
 8015120:	490e      	ldr	r1, [pc, #56]	@ (801515c <USB_EPSetStall+0x9c>)
 8015122:	400a      	ands	r2, r1
 8015124:	801a      	strh	r2, [r3, #0]
 8015126:	183b      	adds	r3, r7, r0
 8015128:	183a      	adds	r2, r7, r0
 801512a:	8812      	ldrh	r2, [r2, #0]
 801512c:	2180      	movs	r1, #128	@ 0x80
 801512e:	0149      	lsls	r1, r1, #5
 8015130:	404a      	eors	r2, r1
 8015132:	801a      	strh	r2, [r3, #0]
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	009b      	lsls	r3, r3, #2
 801513c:	18d3      	adds	r3, r2, r3
 801513e:	183a      	adds	r2, r7, r0
 8015140:	8812      	ldrh	r2, [r2, #0]
 8015142:	4905      	ldr	r1, [pc, #20]	@ (8015158 <USB_EPSetStall+0x98>)
 8015144:	430a      	orrs	r2, r1
 8015146:	b292      	uxth	r2, r2
 8015148:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801514a:	2300      	movs	r3, #0
}
 801514c:	0018      	movs	r0, r3
 801514e:	46bd      	mov	sp, r7
 8015150:	b004      	add	sp, #16
 8015152:	bd80      	pop	{r7, pc}
 8015154:	ffff8fbf 	.word	0xffff8fbf
 8015158:	ffff8080 	.word	0xffff8080
 801515c:	ffffbf8f 	.word	0xffffbf8f

08015160 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b086      	sub	sp, #24
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	7b1b      	ldrb	r3, [r3, #12]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d000      	beq.n	8015174 <USB_EPClearStall+0x14>
 8015172:	e095      	b.n	80152a0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	785b      	ldrb	r3, [r3, #1]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d046      	beq.n	801520a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	18d2      	adds	r2, r2, r3
 8015186:	2110      	movs	r1, #16
 8015188:	187b      	adds	r3, r7, r1
 801518a:	8812      	ldrh	r2, [r2, #0]
 801518c:	801a      	strh	r2, [r3, #0]
 801518e:	187b      	adds	r3, r7, r1
 8015190:	881b      	ldrh	r3, [r3, #0]
 8015192:	2240      	movs	r2, #64	@ 0x40
 8015194:	4013      	ands	r3, r2
 8015196:	d016      	beq.n	80151c6 <USB_EPClearStall+0x66>
 8015198:	687a      	ldr	r2, [r7, #4]
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	18d3      	adds	r3, r2, r3
 80151a2:	881b      	ldrh	r3, [r3, #0]
 80151a4:	b29a      	uxth	r2, r3
 80151a6:	200e      	movs	r0, #14
 80151a8:	183b      	adds	r3, r7, r0
 80151aa:	4940      	ldr	r1, [pc, #256]	@ (80152ac <USB_EPClearStall+0x14c>)
 80151ac:	400a      	ands	r2, r1
 80151ae:	801a      	strh	r2, [r3, #0]
 80151b0:	687a      	ldr	r2, [r7, #4]
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	009b      	lsls	r3, r3, #2
 80151b8:	18d3      	adds	r3, r2, r3
 80151ba:	183a      	adds	r2, r7, r0
 80151bc:	8812      	ldrh	r2, [r2, #0]
 80151be:	493c      	ldr	r1, [pc, #240]	@ (80152b0 <USB_EPClearStall+0x150>)
 80151c0:	430a      	orrs	r2, r1
 80151c2:	b292      	uxth	r2, r2
 80151c4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	78db      	ldrb	r3, [r3, #3]
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d068      	beq.n	80152a0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80151ce:	687a      	ldr	r2, [r7, #4]
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	009b      	lsls	r3, r3, #2
 80151d6:	18d3      	adds	r3, r2, r3
 80151d8:	881b      	ldrh	r3, [r3, #0]
 80151da:	b29a      	uxth	r2, r3
 80151dc:	200c      	movs	r0, #12
 80151de:	183b      	adds	r3, r7, r0
 80151e0:	4934      	ldr	r1, [pc, #208]	@ (80152b4 <USB_EPClearStall+0x154>)
 80151e2:	400a      	ands	r2, r1
 80151e4:	801a      	strh	r2, [r3, #0]
 80151e6:	183b      	adds	r3, r7, r0
 80151e8:	183a      	adds	r2, r7, r0
 80151ea:	8812      	ldrh	r2, [r2, #0]
 80151ec:	2120      	movs	r1, #32
 80151ee:	404a      	eors	r2, r1
 80151f0:	801a      	strh	r2, [r3, #0]
 80151f2:	687a      	ldr	r2, [r7, #4]
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	009b      	lsls	r3, r3, #2
 80151fa:	18d3      	adds	r3, r2, r3
 80151fc:	183a      	adds	r2, r7, r0
 80151fe:	8812      	ldrh	r2, [r2, #0]
 8015200:	492d      	ldr	r1, [pc, #180]	@ (80152b8 <USB_EPClearStall+0x158>)
 8015202:	430a      	orrs	r2, r1
 8015204:	b292      	uxth	r2, r2
 8015206:	801a      	strh	r2, [r3, #0]
 8015208:	e04a      	b.n	80152a0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	009b      	lsls	r3, r3, #2
 8015212:	18d2      	adds	r2, r2, r3
 8015214:	2116      	movs	r1, #22
 8015216:	187b      	adds	r3, r7, r1
 8015218:	8812      	ldrh	r2, [r2, #0]
 801521a:	801a      	strh	r2, [r3, #0]
 801521c:	187b      	adds	r3, r7, r1
 801521e:	881a      	ldrh	r2, [r3, #0]
 8015220:	2380      	movs	r3, #128	@ 0x80
 8015222:	01db      	lsls	r3, r3, #7
 8015224:	4013      	ands	r3, r2
 8015226:	d016      	beq.n	8015256 <USB_EPClearStall+0xf6>
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	781b      	ldrb	r3, [r3, #0]
 801522e:	009b      	lsls	r3, r3, #2
 8015230:	18d3      	adds	r3, r2, r3
 8015232:	881b      	ldrh	r3, [r3, #0]
 8015234:	b29a      	uxth	r2, r3
 8015236:	2014      	movs	r0, #20
 8015238:	183b      	adds	r3, r7, r0
 801523a:	491c      	ldr	r1, [pc, #112]	@ (80152ac <USB_EPClearStall+0x14c>)
 801523c:	400a      	ands	r2, r1
 801523e:	801a      	strh	r2, [r3, #0]
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	009b      	lsls	r3, r3, #2
 8015248:	18d3      	adds	r3, r2, r3
 801524a:	183a      	adds	r2, r7, r0
 801524c:	8812      	ldrh	r2, [r2, #0]
 801524e:	491b      	ldr	r1, [pc, #108]	@ (80152bc <USB_EPClearStall+0x15c>)
 8015250:	430a      	orrs	r2, r1
 8015252:	b292      	uxth	r2, r2
 8015254:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	009b      	lsls	r3, r3, #2
 801525e:	18d3      	adds	r3, r2, r3
 8015260:	881b      	ldrh	r3, [r3, #0]
 8015262:	b29a      	uxth	r2, r3
 8015264:	2012      	movs	r0, #18
 8015266:	183b      	adds	r3, r7, r0
 8015268:	4915      	ldr	r1, [pc, #84]	@ (80152c0 <USB_EPClearStall+0x160>)
 801526a:	400a      	ands	r2, r1
 801526c:	801a      	strh	r2, [r3, #0]
 801526e:	183b      	adds	r3, r7, r0
 8015270:	183a      	adds	r2, r7, r0
 8015272:	8812      	ldrh	r2, [r2, #0]
 8015274:	2180      	movs	r1, #128	@ 0x80
 8015276:	0149      	lsls	r1, r1, #5
 8015278:	404a      	eors	r2, r1
 801527a:	801a      	strh	r2, [r3, #0]
 801527c:	183b      	adds	r3, r7, r0
 801527e:	183a      	adds	r2, r7, r0
 8015280:	8812      	ldrh	r2, [r2, #0]
 8015282:	2180      	movs	r1, #128	@ 0x80
 8015284:	0189      	lsls	r1, r1, #6
 8015286:	404a      	eors	r2, r1
 8015288:	801a      	strh	r2, [r3, #0]
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	18d3      	adds	r3, r2, r3
 8015294:	183a      	adds	r2, r7, r0
 8015296:	8812      	ldrh	r2, [r2, #0]
 8015298:	4907      	ldr	r1, [pc, #28]	@ (80152b8 <USB_EPClearStall+0x158>)
 801529a:	430a      	orrs	r2, r1
 801529c:	b292      	uxth	r2, r2
 801529e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80152a0:	2300      	movs	r3, #0
}
 80152a2:	0018      	movs	r0, r3
 80152a4:	46bd      	mov	sp, r7
 80152a6:	b006      	add	sp, #24
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	46c0      	nop			@ (mov r8, r8)
 80152ac:	ffff8f8f 	.word	0xffff8f8f
 80152b0:	ffff80c0 	.word	0xffff80c0
 80152b4:	ffff8fbf 	.word	0xffff8fbf
 80152b8:	ffff8080 	.word	0xffff8080
 80152bc:	ffffc080 	.word	0xffffc080
 80152c0:	ffffbf8f 	.word	0xffffbf8f

080152c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	000a      	movs	r2, r1
 80152ce:	1cfb      	adds	r3, r7, #3
 80152d0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80152d2:	1cfb      	adds	r3, r7, #3
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d103      	bne.n	80152e2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	224c      	movs	r2, #76	@ 0x4c
 80152de:	2180      	movs	r1, #128	@ 0x80
 80152e0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80152e2:	2300      	movs	r3, #0
}
 80152e4:	0018      	movs	r0, r3
 80152e6:	46bd      	mov	sp, r7
 80152e8:	b002      	add	sp, #8
 80152ea:	bd80      	pop	{r7, pc}

080152ec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2258      	movs	r2, #88	@ 0x58
 80152f8:	5a9b      	ldrh	r3, [r3, r2]
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	4a05      	ldr	r2, [pc, #20]	@ (8015314 <USB_DevConnect+0x28>)
 80152fe:	4313      	orrs	r3, r2
 8015300:	b299      	uxth	r1, r3
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2258      	movs	r2, #88	@ 0x58
 8015306:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015308:	2300      	movs	r3, #0
}
 801530a:	0018      	movs	r0, r3
 801530c:	46bd      	mov	sp, r7
 801530e:	b002      	add	sp, #8
 8015310:	bd80      	pop	{r7, pc}
 8015312:	46c0      	nop			@ (mov r8, r8)
 8015314:	ffff8000 	.word	0xffff8000

08015318 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b084      	sub	sp, #16
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2244      	movs	r2, #68	@ 0x44
 8015324:	5a9b      	ldrh	r3, [r3, r2]
 8015326:	b29b      	uxth	r3, r3
 8015328:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801532a:	68fb      	ldr	r3, [r7, #12]
}
 801532c:	0018      	movs	r0, r3
 801532e:	46bd      	mov	sp, r7
 8015330:	b004      	add	sp, #16
 8015332:	bd80      	pop	{r7, pc}

08015334 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b08a      	sub	sp, #40	@ 0x28
 8015338:	af00      	add	r7, sp, #0
 801533a:	60f8      	str	r0, [r7, #12]
 801533c:	60b9      	str	r1, [r7, #8]
 801533e:	0019      	movs	r1, r3
 8015340:	1dbb      	adds	r3, r7, #6
 8015342:	801a      	strh	r2, [r3, #0]
 8015344:	1d3b      	adds	r3, r7, #4
 8015346:	1c0a      	adds	r2, r1, #0
 8015348:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801534a:	1d3b      	adds	r3, r7, #4
 801534c:	881b      	ldrh	r3, [r3, #0]
 801534e:	3301      	adds	r3, #1
 8015350:	085b      	lsrs	r3, r3, #1
 8015352:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801535c:	1dbb      	adds	r3, r7, #6
 801535e:	881a      	ldrh	r2, [r3, #0]
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	18d3      	adds	r3, r2, r3
 8015364:	2280      	movs	r2, #128	@ 0x80
 8015366:	00d2      	lsls	r2, r2, #3
 8015368:	4694      	mov	ip, r2
 801536a:	4463      	add	r3, ip
 801536c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	627b      	str	r3, [r7, #36]	@ 0x24
 8015372:	e020      	b.n	80153b6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	781a      	ldrb	r2, [r3, #0]
 8015378:	2112      	movs	r1, #18
 801537a:	187b      	adds	r3, r7, r1
 801537c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801537e:	69fb      	ldr	r3, [r7, #28]
 8015380:	3301      	adds	r3, #1
 8015382:	781b      	ldrb	r3, [r3, #0]
 8015384:	021b      	lsls	r3, r3, #8
 8015386:	b21a      	sxth	r2, r3
 8015388:	187b      	adds	r3, r7, r1
 801538a:	2000      	movs	r0, #0
 801538c:	5e1b      	ldrsh	r3, [r3, r0]
 801538e:	4313      	orrs	r3, r2
 8015390:	b21a      	sxth	r2, r3
 8015392:	187b      	adds	r3, r7, r1
 8015394:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8015396:	6a3b      	ldr	r3, [r7, #32]
 8015398:	187a      	adds	r2, r7, r1
 801539a:	8812      	ldrh	r2, [r2, #0]
 801539c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801539e:	6a3b      	ldr	r3, [r7, #32]
 80153a0:	3302      	adds	r3, #2
 80153a2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80153a4:	69fb      	ldr	r3, [r7, #28]
 80153a6:	3301      	adds	r3, #1
 80153a8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80153aa:	69fb      	ldr	r3, [r7, #28]
 80153ac:	3301      	adds	r3, #1
 80153ae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80153b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153b2:	3b01      	subs	r3, #1
 80153b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80153b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d1db      	bne.n	8015374 <USB_WritePMA+0x40>
  }
}
 80153bc:	46c0      	nop			@ (mov r8, r8)
 80153be:	46c0      	nop			@ (mov r8, r8)
 80153c0:	46bd      	mov	sp, r7
 80153c2:	b00a      	add	sp, #40	@ 0x28
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b08a      	sub	sp, #40	@ 0x28
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	60f8      	str	r0, [r7, #12]
 80153ce:	60b9      	str	r1, [r7, #8]
 80153d0:	0019      	movs	r1, r3
 80153d2:	1dbb      	adds	r3, r7, #6
 80153d4:	801a      	strh	r2, [r3, #0]
 80153d6:	1d3b      	adds	r3, r7, #4
 80153d8:	1c0a      	adds	r2, r1, #0
 80153da:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80153dc:	1d3b      	adds	r3, r7, #4
 80153de:	881b      	ldrh	r3, [r3, #0]
 80153e0:	085b      	lsrs	r3, r3, #1
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80153ee:	1dbb      	adds	r3, r7, #6
 80153f0:	881a      	ldrh	r2, [r3, #0]
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	18d3      	adds	r3, r2, r3
 80153f6:	2280      	movs	r2, #128	@ 0x80
 80153f8:	00d2      	lsls	r2, r2, #3
 80153fa:	4694      	mov	ip, r2
 80153fc:	4463      	add	r3, ip
 80153fe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	627b      	str	r3, [r7, #36]	@ 0x24
 8015404:	e018      	b.n	8015438 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8015406:	6a3b      	ldr	r3, [r7, #32]
 8015408:	881b      	ldrh	r3, [r3, #0]
 801540a:	b29b      	uxth	r3, r3
 801540c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801540e:	6a3b      	ldr	r3, [r7, #32]
 8015410:	3302      	adds	r3, #2
 8015412:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	b2da      	uxtb	r2, r3
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	3301      	adds	r3, #1
 8015420:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	0a1b      	lsrs	r3, r3, #8
 8015426:	b2da      	uxtb	r2, r3
 8015428:	69fb      	ldr	r3, [r7, #28]
 801542a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	3301      	adds	r3, #1
 8015430:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8015432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015434:	3b01      	subs	r3, #1
 8015436:	627b      	str	r3, [r7, #36]	@ 0x24
 8015438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801543a:	2b00      	cmp	r3, #0
 801543c:	d1e3      	bne.n	8015406 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801543e:	1d3b      	adds	r3, r7, #4
 8015440:	881b      	ldrh	r3, [r3, #0]
 8015442:	2201      	movs	r2, #1
 8015444:	4013      	ands	r3, r2
 8015446:	b29b      	uxth	r3, r3
 8015448:	2b00      	cmp	r3, #0
 801544a:	d007      	beq.n	801545c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801544c:	6a3b      	ldr	r3, [r7, #32]
 801544e:	881b      	ldrh	r3, [r3, #0]
 8015450:	b29b      	uxth	r3, r3
 8015452:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	b2da      	uxtb	r2, r3
 8015458:	69fb      	ldr	r3, [r7, #28]
 801545a:	701a      	strb	r2, [r3, #0]
  }
}
 801545c:	46c0      	nop			@ (mov r8, r8)
 801545e:	46bd      	mov	sp, r7
 8015460:	b00a      	add	sp, #40	@ 0x28
 8015462:	bd80      	pop	{r7, pc}

08015464 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	000a      	movs	r2, r1
 801546e:	1cfb      	adds	r3, r7, #3
 8015470:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8015472:	230f      	movs	r3, #15
 8015474:	18fb      	adds	r3, r7, r3
 8015476:	2200      	movs	r2, #0
 8015478:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	7c1b      	ldrb	r3, [r3, #16]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d116      	bne.n	80154b0 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015482:	2380      	movs	r3, #128	@ 0x80
 8015484:	009b      	lsls	r3, r3, #2
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	2202      	movs	r2, #2
 801548a:	2181      	movs	r1, #129	@ 0x81
 801548c:	f002 f8eb 	bl	8017666 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2201      	movs	r2, #1
 8015494:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015496:	2380      	movs	r3, #128	@ 0x80
 8015498:	009b      	lsls	r3, r3, #2
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	2202      	movs	r2, #2
 801549e:	2101      	movs	r1, #1
 80154a0:	f002 f8e1 	bl	8017666 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	23b6      	movs	r3, #182	@ 0xb6
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	2101      	movs	r1, #1
 80154ac:	50d1      	str	r1, [r2, r3]
 80154ae:	e013      	b.n	80154d8 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	2340      	movs	r3, #64	@ 0x40
 80154b4:	2202      	movs	r2, #2
 80154b6:	2181      	movs	r1, #129	@ 0x81
 80154b8:	f002 f8d5 	bl	8017666 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2201      	movs	r2, #1
 80154c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	2340      	movs	r3, #64	@ 0x40
 80154c6:	2202      	movs	r2, #2
 80154c8:	2101      	movs	r1, #1
 80154ca:	f002 f8cc 	bl	8017666 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80154ce:	687a      	ldr	r2, [r7, #4]
 80154d0:	23b6      	movs	r3, #182	@ 0xb6
 80154d2:	005b      	lsls	r3, r3, #1
 80154d4:	2101      	movs	r1, #1
 80154d6:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	2308      	movs	r3, #8
 80154dc:	2203      	movs	r2, #3
 80154de:	2182      	movs	r1, #130	@ 0x82
 80154e0:	f002 f8c1 	bl	8017666 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2201      	movs	r2, #1
 80154e8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80154ea:	2387      	movs	r3, #135	@ 0x87
 80154ec:	009b      	lsls	r3, r3, #2
 80154ee:	0018      	movs	r0, r3
 80154f0:	f002 fa52 	bl	8017998 <USBD_static_malloc>
 80154f4:	0001      	movs	r1, r0
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	23ae      	movs	r3, #174	@ 0xae
 80154fa:	009b      	lsls	r3, r3, #2
 80154fc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80154fe:	687a      	ldr	r2, [r7, #4]
 8015500:	23ae      	movs	r3, #174	@ 0xae
 8015502:	009b      	lsls	r3, r3, #2
 8015504:	58d3      	ldr	r3, [r2, r3]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d104      	bne.n	8015514 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801550a:	230f      	movs	r3, #15
 801550c:	18fb      	adds	r3, r7, r3
 801550e:	2201      	movs	r2, #1
 8015510:	701a      	strb	r2, [r3, #0]
 8015512:	e02c      	b.n	801556e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015514:	687a      	ldr	r2, [r7, #4]
 8015516:	23ae      	movs	r3, #174	@ 0xae
 8015518:	009b      	lsls	r3, r3, #2
 801551a:	58d3      	ldr	r3, [r2, r3]
 801551c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801551e:	687a      	ldr	r2, [r7, #4]
 8015520:	23af      	movs	r3, #175	@ 0xaf
 8015522:	009b      	lsls	r3, r3, #2
 8015524:	58d3      	ldr	r3, [r2, r3]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801552a:	68ba      	ldr	r2, [r7, #8]
 801552c:	2385      	movs	r3, #133	@ 0x85
 801552e:	009b      	lsls	r3, r3, #2
 8015530:	2100      	movs	r1, #0
 8015532:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8015534:	68ba      	ldr	r2, [r7, #8]
 8015536:	2386      	movs	r3, #134	@ 0x86
 8015538:	009b      	lsls	r3, r3, #2
 801553a:	2100      	movs	r1, #0
 801553c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	7c1b      	ldrb	r3, [r3, #16]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d10a      	bne.n	801555c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015546:	68ba      	ldr	r2, [r7, #8]
 8015548:	2381      	movs	r3, #129	@ 0x81
 801554a:	009b      	lsls	r3, r3, #2
 801554c:	58d2      	ldr	r2, [r2, r3]
 801554e:	2380      	movs	r3, #128	@ 0x80
 8015550:	009b      	lsls	r3, r3, #2
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	2101      	movs	r1, #1
 8015556:	f002 f9d1 	bl	80178fc <USBD_LL_PrepareReceive>
 801555a:	e008      	b.n	801556e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	2381      	movs	r3, #129	@ 0x81
 8015560:	009b      	lsls	r3, r3, #2
 8015562:	58d2      	ldr	r2, [r2, r3]
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	2340      	movs	r3, #64	@ 0x40
 8015568:	2101      	movs	r1, #1
 801556a:	f002 f9c7 	bl	80178fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801556e:	230f      	movs	r3, #15
 8015570:	18fb      	adds	r3, r7, r3
 8015572:	781b      	ldrb	r3, [r3, #0]
}
 8015574:	0018      	movs	r0, r3
 8015576:	46bd      	mov	sp, r7
 8015578:	b004      	add	sp, #16
 801557a:	bd80      	pop	{r7, pc}

0801557c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	000a      	movs	r2, r1
 8015586:	1cfb      	adds	r3, r7, #3
 8015588:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801558a:	230f      	movs	r3, #15
 801558c:	18fb      	adds	r3, r7, r3
 801558e:	2200      	movs	r2, #0
 8015590:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2181      	movs	r1, #129	@ 0x81
 8015596:	0018      	movs	r0, r3
 8015598:	f002 f89c 	bl	80176d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2200      	movs	r2, #0
 80155a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2101      	movs	r1, #1
 80155a6:	0018      	movs	r0, r3
 80155a8:	f002 f894 	bl	80176d4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80155ac:	687a      	ldr	r2, [r7, #4]
 80155ae:	23b6      	movs	r3, #182	@ 0xb6
 80155b0:	005b      	lsls	r3, r3, #1
 80155b2:	2100      	movs	r1, #0
 80155b4:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2182      	movs	r1, #130	@ 0x82
 80155ba:	0018      	movs	r0, r3
 80155bc:	f002 f88a 	bl	80176d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2200      	movs	r2, #0
 80155c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80155c6:	687a      	ldr	r2, [r7, #4]
 80155c8:	23ae      	movs	r3, #174	@ 0xae
 80155ca:	009b      	lsls	r3, r3, #2
 80155cc:	58d3      	ldr	r3, [r2, r3]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d011      	beq.n	80155f6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	23af      	movs	r3, #175	@ 0xaf
 80155d6:	009b      	lsls	r3, r3, #2
 80155d8:	58d3      	ldr	r3, [r2, r3]
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	23ae      	movs	r3, #174	@ 0xae
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	58d3      	ldr	r3, [r2, r3]
 80155e6:	0018      	movs	r0, r3
 80155e8:	f002 f9e2 	bl	80179b0 <USBD_static_free>
    pdev->pClassData = NULL;
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	23ae      	movs	r3, #174	@ 0xae
 80155f0:	009b      	lsls	r3, r3, #2
 80155f2:	2100      	movs	r1, #0
 80155f4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80155f6:	230f      	movs	r3, #15
 80155f8:	18fb      	adds	r3, r7, r3
 80155fa:	781b      	ldrb	r3, [r3, #0]
}
 80155fc:	0018      	movs	r0, r3
 80155fe:	46bd      	mov	sp, r7
 8015600:	b004      	add	sp, #16
 8015602:	bd80      	pop	{r7, pc}

08015604 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b086      	sub	sp, #24
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	23ae      	movs	r3, #174	@ 0xae
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	58d3      	ldr	r3, [r2, r3]
 8015616:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8015618:	230f      	movs	r3, #15
 801561a:	18fb      	adds	r3, r7, r3
 801561c:	2200      	movs	r2, #0
 801561e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8015620:	230c      	movs	r3, #12
 8015622:	18fb      	adds	r3, r7, r3
 8015624:	2200      	movs	r2, #0
 8015626:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8015628:	2317      	movs	r3, #23
 801562a:	18fb      	adds	r3, r7, r3
 801562c:	2200      	movs	r2, #0
 801562e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	001a      	movs	r2, r3
 8015636:	2360      	movs	r3, #96	@ 0x60
 8015638:	4013      	ands	r3, r2
 801563a:	d03d      	beq.n	80156b8 <USBD_CDC_Setup+0xb4>
 801563c:	2b20      	cmp	r3, #32
 801563e:	d000      	beq.n	8015642 <USBD_CDC_Setup+0x3e>
 8015640:	e094      	b.n	801576c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	88db      	ldrh	r3, [r3, #6]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d02b      	beq.n	80156a2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	b25b      	sxtb	r3, r3
 8015650:	2b00      	cmp	r3, #0
 8015652:	da12      	bge.n	801567a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	23af      	movs	r3, #175	@ 0xaf
 8015658:	009b      	lsls	r3, r3, #2
 801565a:	58d3      	ldr	r3, [r2, r3]
 801565c:	689b      	ldr	r3, [r3, #8]
 801565e:	683a      	ldr	r2, [r7, #0]
 8015660:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8015662:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015664:	683a      	ldr	r2, [r7, #0]
 8015666:	88d2      	ldrh	r2, [r2, #6]
 8015668:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801566a:	6939      	ldr	r1, [r7, #16]
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	88da      	ldrh	r2, [r3, #6]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	0018      	movs	r0, r3
 8015674:	f001 fbaf 	bl	8016dd6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8015678:	e083      	b.n	8015782 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	7859      	ldrb	r1, [r3, #1]
 801567e:	693a      	ldr	r2, [r7, #16]
 8015680:	2380      	movs	r3, #128	@ 0x80
 8015682:	009b      	lsls	r3, r3, #2
 8015684:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	88db      	ldrh	r3, [r3, #6]
 801568a:	b2d9      	uxtb	r1, r3
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	4a40      	ldr	r2, [pc, #256]	@ (8015790 <USBD_CDC_Setup+0x18c>)
 8015690:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8015692:	6939      	ldr	r1, [r7, #16]
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	88da      	ldrh	r2, [r3, #6]
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	0018      	movs	r0, r3
 801569c:	f001 fbce 	bl	8016e3c <USBD_CtlPrepareRx>
      break;
 80156a0:	e06f      	b.n	8015782 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80156a2:	687a      	ldr	r2, [r7, #4]
 80156a4:	23af      	movs	r3, #175	@ 0xaf
 80156a6:	009b      	lsls	r3, r3, #2
 80156a8:	58d3      	ldr	r3, [r2, r3]
 80156aa:	689b      	ldr	r3, [r3, #8]
 80156ac:	683a      	ldr	r2, [r7, #0]
 80156ae:	7850      	ldrb	r0, [r2, #1]
 80156b0:	6839      	ldr	r1, [r7, #0]
 80156b2:	2200      	movs	r2, #0
 80156b4:	4798      	blx	r3
      break;
 80156b6:	e064      	b.n	8015782 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	785b      	ldrb	r3, [r3, #1]
 80156bc:	2b0b      	cmp	r3, #11
 80156be:	d037      	beq.n	8015730 <USBD_CDC_Setup+0x12c>
 80156c0:	dc47      	bgt.n	8015752 <USBD_CDC_Setup+0x14e>
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d002      	beq.n	80156cc <USBD_CDC_Setup+0xc8>
 80156c6:	2b0a      	cmp	r3, #10
 80156c8:	d019      	beq.n	80156fe <USBD_CDC_Setup+0xfa>
 80156ca:	e042      	b.n	8015752 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156cc:	687a      	ldr	r2, [r7, #4]
 80156ce:	23a7      	movs	r3, #167	@ 0xa7
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	5cd3      	ldrb	r3, [r2, r3]
 80156d4:	2b03      	cmp	r3, #3
 80156d6:	d107      	bne.n	80156e8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80156d8:	230c      	movs	r3, #12
 80156da:	18f9      	adds	r1, r7, r3
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2202      	movs	r2, #2
 80156e0:	0018      	movs	r0, r3
 80156e2:	f001 fb78 	bl	8016dd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80156e6:	e040      	b.n	801576a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80156e8:	683a      	ldr	r2, [r7, #0]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	0011      	movs	r1, r2
 80156ee:	0018      	movs	r0, r3
 80156f0:	f001 faf3 	bl	8016cda <USBD_CtlError>
            ret = USBD_FAIL;
 80156f4:	2317      	movs	r3, #23
 80156f6:	18fb      	adds	r3, r7, r3
 80156f8:	2202      	movs	r2, #2
 80156fa:	701a      	strb	r2, [r3, #0]
          break;
 80156fc:	e035      	b.n	801576a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	23a7      	movs	r3, #167	@ 0xa7
 8015702:	009b      	lsls	r3, r3, #2
 8015704:	5cd3      	ldrb	r3, [r2, r3]
 8015706:	2b03      	cmp	r3, #3
 8015708:	d107      	bne.n	801571a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801570a:	230f      	movs	r3, #15
 801570c:	18f9      	adds	r1, r7, r3
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2201      	movs	r2, #1
 8015712:	0018      	movs	r0, r3
 8015714:	f001 fb5f 	bl	8016dd6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015718:	e027      	b.n	801576a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801571a:	683a      	ldr	r2, [r7, #0]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	0011      	movs	r1, r2
 8015720:	0018      	movs	r0, r3
 8015722:	f001 fada 	bl	8016cda <USBD_CtlError>
            ret = USBD_FAIL;
 8015726:	2317      	movs	r3, #23
 8015728:	18fb      	adds	r3, r7, r3
 801572a:	2202      	movs	r2, #2
 801572c:	701a      	strb	r2, [r3, #0]
          break;
 801572e:	e01c      	b.n	801576a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	23a7      	movs	r3, #167	@ 0xa7
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	5cd3      	ldrb	r3, [r2, r3]
 8015738:	2b03      	cmp	r3, #3
 801573a:	d015      	beq.n	8015768 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	0011      	movs	r1, r2
 8015742:	0018      	movs	r0, r3
 8015744:	f001 fac9 	bl	8016cda <USBD_CtlError>
            ret = USBD_FAIL;
 8015748:	2317      	movs	r3, #23
 801574a:	18fb      	adds	r3, r7, r3
 801574c:	2202      	movs	r2, #2
 801574e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8015750:	e00a      	b.n	8015768 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8015752:	683a      	ldr	r2, [r7, #0]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	0011      	movs	r1, r2
 8015758:	0018      	movs	r0, r3
 801575a:	f001 fabe 	bl	8016cda <USBD_CtlError>
          ret = USBD_FAIL;
 801575e:	2317      	movs	r3, #23
 8015760:	18fb      	adds	r3, r7, r3
 8015762:	2202      	movs	r2, #2
 8015764:	701a      	strb	r2, [r3, #0]
          break;
 8015766:	e000      	b.n	801576a <USBD_CDC_Setup+0x166>
          break;
 8015768:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801576a:	e00a      	b.n	8015782 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801576c:	683a      	ldr	r2, [r7, #0]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	0011      	movs	r1, r2
 8015772:	0018      	movs	r0, r3
 8015774:	f001 fab1 	bl	8016cda <USBD_CtlError>
      ret = USBD_FAIL;
 8015778:	2317      	movs	r3, #23
 801577a:	18fb      	adds	r3, r7, r3
 801577c:	2202      	movs	r2, #2
 801577e:	701a      	strb	r2, [r3, #0]
      break;
 8015780:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015782:	2317      	movs	r3, #23
 8015784:	18fb      	adds	r3, r7, r3
 8015786:	781b      	ldrb	r3, [r3, #0]
}
 8015788:	0018      	movs	r0, r3
 801578a:	46bd      	mov	sp, r7
 801578c:	b006      	add	sp, #24
 801578e:	bd80      	pop	{r7, pc}
 8015790:	00000201 	.word	0x00000201

08015794 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	000a      	movs	r2, r1
 801579e:	1cfb      	adds	r3, r7, #3
 80157a0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	23ae      	movs	r3, #174	@ 0xae
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	58d3      	ldr	r3, [r2, r3]
 80157aa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80157ac:	687a      	ldr	r2, [r7, #4]
 80157ae:	23b0      	movs	r3, #176	@ 0xb0
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	58d3      	ldr	r3, [r2, r3]
 80157b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	23ae      	movs	r3, #174	@ 0xae
 80157ba:	009b      	lsls	r3, r3, #2
 80157bc:	58d3      	ldr	r3, [r2, r3]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d03e      	beq.n	8015840 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80157c2:	1cfb      	adds	r3, r7, #3
 80157c4:	781a      	ldrb	r2, [r3, #0]
 80157c6:	6879      	ldr	r1, [r7, #4]
 80157c8:	0013      	movs	r3, r2
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	189b      	adds	r3, r3, r2
 80157ce:	009b      	lsls	r3, r3, #2
 80157d0:	18cb      	adds	r3, r1, r3
 80157d2:	331c      	adds	r3, #28
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d02b      	beq.n	8015832 <USBD_CDC_DataIn+0x9e>
 80157da:	1cfb      	adds	r3, r7, #3
 80157dc:	781a      	ldrb	r2, [r3, #0]
 80157de:	6879      	ldr	r1, [r7, #4]
 80157e0:	0013      	movs	r3, r2
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	189b      	adds	r3, r3, r2
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	18cb      	adds	r3, r1, r3
 80157ea:	331c      	adds	r3, #28
 80157ec:	6818      	ldr	r0, [r3, #0]
 80157ee:	1cfb      	adds	r3, r7, #3
 80157f0:	781a      	ldrb	r2, [r3, #0]
 80157f2:	68b9      	ldr	r1, [r7, #8]
 80157f4:	0013      	movs	r3, r2
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	189b      	adds	r3, r3, r2
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	18cb      	adds	r3, r1, r3
 80157fe:	3338      	adds	r3, #56	@ 0x38
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	0019      	movs	r1, r3
 8015804:	f7ea fd22 	bl	800024c <__aeabi_uidivmod>
 8015808:	1e0b      	subs	r3, r1, #0
 801580a:	d112      	bne.n	8015832 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801580c:	1cfb      	adds	r3, r7, #3
 801580e:	781a      	ldrb	r2, [r3, #0]
 8015810:	6879      	ldr	r1, [r7, #4]
 8015812:	0013      	movs	r3, r2
 8015814:	009b      	lsls	r3, r3, #2
 8015816:	189b      	adds	r3, r3, r2
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	18cb      	adds	r3, r1, r3
 801581c:	331c      	adds	r3, #28
 801581e:	2200      	movs	r2, #0
 8015820:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015822:	1cfb      	adds	r3, r7, #3
 8015824:	7819      	ldrb	r1, [r3, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	2300      	movs	r3, #0
 801582a:	2200      	movs	r2, #0
 801582c:	f002 f82f 	bl	801788e <USBD_LL_Transmit>
 8015830:	e004      	b.n	801583c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8015832:	68fa      	ldr	r2, [r7, #12]
 8015834:	2385      	movs	r3, #133	@ 0x85
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	2100      	movs	r1, #0
 801583a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801583c:	2300      	movs	r3, #0
 801583e:	e000      	b.n	8015842 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8015840:	2302      	movs	r3, #2
  }
}
 8015842:	0018      	movs	r0, r3
 8015844:	46bd      	mov	sp, r7
 8015846:	b004      	add	sp, #16
 8015848:	bd80      	pop	{r7, pc}

0801584a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b084      	sub	sp, #16
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
 8015852:	000a      	movs	r2, r1
 8015854:	1cfb      	adds	r3, r7, #3
 8015856:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015858:	687a      	ldr	r2, [r7, #4]
 801585a:	23ae      	movs	r3, #174	@ 0xae
 801585c:	009b      	lsls	r3, r3, #2
 801585e:	58d3      	ldr	r3, [r2, r3]
 8015860:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015862:	1cfb      	adds	r3, r7, #3
 8015864:	781a      	ldrb	r2, [r3, #0]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	0011      	movs	r1, r2
 801586a:	0018      	movs	r0, r3
 801586c:	f002 f87d 	bl	801796a <USBD_LL_GetRxDataSize>
 8015870:	0001      	movs	r1, r0
 8015872:	68fa      	ldr	r2, [r7, #12]
 8015874:	2383      	movs	r3, #131	@ 0x83
 8015876:	009b      	lsls	r3, r3, #2
 8015878:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801587a:	687a      	ldr	r2, [r7, #4]
 801587c:	23ae      	movs	r3, #174	@ 0xae
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	58d3      	ldr	r3, [r2, r3]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d011      	beq.n	80158aa <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015886:	687a      	ldr	r2, [r7, #4]
 8015888:	23af      	movs	r3, #175	@ 0xaf
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	58d3      	ldr	r3, [r2, r3]
 801588e:	68da      	ldr	r2, [r3, #12]
 8015890:	68f9      	ldr	r1, [r7, #12]
 8015892:	2381      	movs	r3, #129	@ 0x81
 8015894:	009b      	lsls	r3, r3, #2
 8015896:	58c8      	ldr	r0, [r1, r3]
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2183      	movs	r1, #131	@ 0x83
 801589c:	0089      	lsls	r1, r1, #2
 801589e:	468c      	mov	ip, r1
 80158a0:	4463      	add	r3, ip
 80158a2:	0019      	movs	r1, r3
 80158a4:	4790      	blx	r2

    return USBD_OK;
 80158a6:	2300      	movs	r3, #0
 80158a8:	e000      	b.n	80158ac <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80158aa:	2302      	movs	r3, #2
  }
}
 80158ac:	0018      	movs	r0, r3
 80158ae:	46bd      	mov	sp, r7
 80158b0:	b004      	add	sp, #16
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80158b4:	b590      	push	{r4, r7, lr}
 80158b6:	b085      	sub	sp, #20
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	23ae      	movs	r3, #174	@ 0xae
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	58d3      	ldr	r3, [r2, r3]
 80158c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80158c6:	687a      	ldr	r2, [r7, #4]
 80158c8:	23af      	movs	r3, #175	@ 0xaf
 80158ca:	009b      	lsls	r3, r3, #2
 80158cc:	58d3      	ldr	r3, [r2, r3]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d018      	beq.n	8015904 <USBD_CDC_EP0_RxReady+0x50>
 80158d2:	68fa      	ldr	r2, [r7, #12]
 80158d4:	2380      	movs	r3, #128	@ 0x80
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	5cd3      	ldrb	r3, [r2, r3]
 80158da:	2bff      	cmp	r3, #255	@ 0xff
 80158dc:	d012      	beq.n	8015904 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	23af      	movs	r3, #175	@ 0xaf
 80158e2:	009b      	lsls	r3, r3, #2
 80158e4:	58d3      	ldr	r3, [r2, r3]
 80158e6:	689b      	ldr	r3, [r3, #8]
 80158e8:	68f9      	ldr	r1, [r7, #12]
 80158ea:	2280      	movs	r2, #128	@ 0x80
 80158ec:	0092      	lsls	r2, r2, #2
 80158ee:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80158f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80158f2:	68fa      	ldr	r2, [r7, #12]
 80158f4:	4c06      	ldr	r4, [pc, #24]	@ (8015910 <USBD_CDC_EP0_RxReady+0x5c>)
 80158f6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80158f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80158fa:	68fa      	ldr	r2, [r7, #12]
 80158fc:	2380      	movs	r3, #128	@ 0x80
 80158fe:	009b      	lsls	r3, r3, #2
 8015900:	21ff      	movs	r1, #255	@ 0xff
 8015902:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8015904:	2300      	movs	r3, #0
}
 8015906:	0018      	movs	r0, r3
 8015908:	46bd      	mov	sp, r7
 801590a:	b005      	add	sp, #20
 801590c:	bd90      	pop	{r4, r7, pc}
 801590e:	46c0      	nop			@ (mov r8, r8)
 8015910:	00000201 	.word	0x00000201

08015914 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2243      	movs	r2, #67	@ 0x43
 8015920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8015922:	4b02      	ldr	r3, [pc, #8]	@ (801592c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8015924:	0018      	movs	r0, r3
 8015926:	46bd      	mov	sp, r7
 8015928:	b002      	add	sp, #8
 801592a:	bd80      	pop	{r7, pc}
 801592c:	20000100 	.word	0x20000100

08015930 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2243      	movs	r2, #67	@ 0x43
 801593c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801593e:	4b02      	ldr	r3, [pc, #8]	@ (8015948 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8015940:	0018      	movs	r0, r3
 8015942:	46bd      	mov	sp, r7
 8015944:	b002      	add	sp, #8
 8015946:	bd80      	pop	{r7, pc}
 8015948:	200000bc 	.word	0x200000bc

0801594c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2243      	movs	r2, #67	@ 0x43
 8015958:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801595a:	4b02      	ldr	r3, [pc, #8]	@ (8015964 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801595c:	0018      	movs	r0, r3
 801595e:	46bd      	mov	sp, r7
 8015960:	b002      	add	sp, #8
 8015962:	bd80      	pop	{r7, pc}
 8015964:	20000144 	.word	0x20000144

08015968 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	220a      	movs	r2, #10
 8015974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8015976:	4b02      	ldr	r3, [pc, #8]	@ (8015980 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8015978:	0018      	movs	r0, r3
 801597a:	46bd      	mov	sp, r7
 801597c:	b002      	add	sp, #8
 801597e:	bd80      	pop	{r7, pc}
 8015980:	20000078 	.word	0x20000078

08015984 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b084      	sub	sp, #16
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801598e:	200f      	movs	r0, #15
 8015990:	183b      	adds	r3, r7, r0
 8015992:	2202      	movs	r2, #2
 8015994:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d007      	beq.n	80159ac <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	23af      	movs	r3, #175	@ 0xaf
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	6839      	ldr	r1, [r7, #0]
 80159a4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80159a6:	183b      	adds	r3, r7, r0
 80159a8:	2200      	movs	r2, #0
 80159aa:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80159ac:	230f      	movs	r3, #15
 80159ae:	18fb      	adds	r3, r7, r3
 80159b0:	781b      	ldrb	r3, [r3, #0]
}
 80159b2:	0018      	movs	r0, r3
 80159b4:	46bd      	mov	sp, r7
 80159b6:	b004      	add	sp, #16
 80159b8:	bd80      	pop	{r7, pc}

080159ba <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80159ba:	b580      	push	{r7, lr}
 80159bc:	b086      	sub	sp, #24
 80159be:	af00      	add	r7, sp, #0
 80159c0:	60f8      	str	r0, [r7, #12]
 80159c2:	60b9      	str	r1, [r7, #8]
 80159c4:	1dbb      	adds	r3, r7, #6
 80159c6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80159c8:	68fa      	ldr	r2, [r7, #12]
 80159ca:	23ae      	movs	r3, #174	@ 0xae
 80159cc:	009b      	lsls	r3, r3, #2
 80159ce:	58d3      	ldr	r3, [r2, r3]
 80159d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80159d2:	697a      	ldr	r2, [r7, #20]
 80159d4:	2382      	movs	r3, #130	@ 0x82
 80159d6:	009b      	lsls	r3, r3, #2
 80159d8:	68b9      	ldr	r1, [r7, #8]
 80159da:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80159dc:	1dbb      	adds	r3, r7, #6
 80159de:	8819      	ldrh	r1, [r3, #0]
 80159e0:	697a      	ldr	r2, [r7, #20]
 80159e2:	2384      	movs	r3, #132	@ 0x84
 80159e4:	009b      	lsls	r3, r3, #2
 80159e6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80159e8:	2300      	movs	r3, #0
}
 80159ea:	0018      	movs	r0, r3
 80159ec:	46bd      	mov	sp, r7
 80159ee:	b006      	add	sp, #24
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80159f2:	b580      	push	{r7, lr}
 80159f4:	b084      	sub	sp, #16
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
 80159fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	23ae      	movs	r3, #174	@ 0xae
 8015a00:	009b      	lsls	r3, r3, #2
 8015a02:	58d3      	ldr	r3, [r2, r3]
 8015a04:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8015a06:	68fa      	ldr	r2, [r7, #12]
 8015a08:	2381      	movs	r3, #129	@ 0x81
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	6839      	ldr	r1, [r7, #0]
 8015a0e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015a10:	2300      	movs	r3, #0
}
 8015a12:	0018      	movs	r0, r3
 8015a14:	46bd      	mov	sp, r7
 8015a16:	b004      	add	sp, #16
 8015a18:	bd80      	pop	{r7, pc}

08015a1a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015a1a:	b580      	push	{r7, lr}
 8015a1c:	b084      	sub	sp, #16
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	23ae      	movs	r3, #174	@ 0xae
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	58d3      	ldr	r3, [r2, r3]
 8015a2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8015a2c:	687a      	ldr	r2, [r7, #4]
 8015a2e:	23ae      	movs	r3, #174	@ 0xae
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	58d3      	ldr	r3, [r2, r3]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d022      	beq.n	8015a7e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8015a38:	68fa      	ldr	r2, [r7, #12]
 8015a3a:	2385      	movs	r3, #133	@ 0x85
 8015a3c:	009b      	lsls	r3, r3, #2
 8015a3e:	58d3      	ldr	r3, [r2, r3]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d11a      	bne.n	8015a7a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8015a44:	68fa      	ldr	r2, [r7, #12]
 8015a46:	2385      	movs	r3, #133	@ 0x85
 8015a48:	009b      	lsls	r3, r3, #2
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8015a4e:	68fa      	ldr	r2, [r7, #12]
 8015a50:	2384      	movs	r3, #132	@ 0x84
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	58d2      	ldr	r2, [r2, r3]
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8015a5a:	68fa      	ldr	r2, [r7, #12]
 8015a5c:	2382      	movs	r3, #130	@ 0x82
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8015a62:	68fa      	ldr	r2, [r7, #12]
 8015a64:	2384      	movs	r3, #132	@ 0x84
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8015a6a:	b29b      	uxth	r3, r3
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	000a      	movs	r2, r1
 8015a70:	2181      	movs	r1, #129	@ 0x81
 8015a72:	f001 ff0c 	bl	801788e <USBD_LL_Transmit>

      return USBD_OK;
 8015a76:	2300      	movs	r3, #0
 8015a78:	e002      	b.n	8015a80 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	e000      	b.n	8015a80 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8015a7e:	2302      	movs	r3, #2
  }
}
 8015a80:	0018      	movs	r0, r3
 8015a82:	46bd      	mov	sp, r7
 8015a84:	b004      	add	sp, #16
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	23ae      	movs	r3, #174	@ 0xae
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	58d3      	ldr	r3, [r2, r3]
 8015a98:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8015a9a:	687a      	ldr	r2, [r7, #4]
 8015a9c:	23ae      	movs	r3, #174	@ 0xae
 8015a9e:	009b      	lsls	r3, r3, #2
 8015aa0:	58d3      	ldr	r3, [r2, r3]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d019      	beq.n	8015ada <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	7c1b      	ldrb	r3, [r3, #16]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d10a      	bne.n	8015ac4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015aae:	68fa      	ldr	r2, [r7, #12]
 8015ab0:	2381      	movs	r3, #129	@ 0x81
 8015ab2:	009b      	lsls	r3, r3, #2
 8015ab4:	58d2      	ldr	r2, [r2, r3]
 8015ab6:	2380      	movs	r3, #128	@ 0x80
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	2101      	movs	r1, #1
 8015abe:	f001 ff1d 	bl	80178fc <USBD_LL_PrepareReceive>
 8015ac2:	e008      	b.n	8015ad6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015ac4:	68fa      	ldr	r2, [r7, #12]
 8015ac6:	2381      	movs	r3, #129	@ 0x81
 8015ac8:	009b      	lsls	r3, r3, #2
 8015aca:	58d2      	ldr	r2, [r2, r3]
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	2340      	movs	r3, #64	@ 0x40
 8015ad0:	2101      	movs	r1, #1
 8015ad2:	f001 ff13 	bl	80178fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	e000      	b.n	8015adc <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8015ada:	2302      	movs	r3, #2
  }
}
 8015adc:	0018      	movs	r0, r3
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	b004      	add	sp, #16
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	60f8      	str	r0, [r7, #12]
 8015aec:	60b9      	str	r1, [r7, #8]
 8015aee:	1dfb      	adds	r3, r7, #7
 8015af0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d101      	bne.n	8015afc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015af8:	2302      	movs	r3, #2
 8015afa:	e020      	b.n	8015b3e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8015afc:	68fa      	ldr	r2, [r7, #12]
 8015afe:	23ad      	movs	r3, #173	@ 0xad
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	58d3      	ldr	r3, [r2, r3]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d004      	beq.n	8015b12 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	23ad      	movs	r3, #173	@ 0xad
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	2100      	movs	r1, #0
 8015b10:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d004      	beq.n	8015b22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015b18:	68fa      	ldr	r2, [r7, #12]
 8015b1a:	23ac      	movs	r3, #172	@ 0xac
 8015b1c:	009b      	lsls	r3, r3, #2
 8015b1e:	68b9      	ldr	r1, [r7, #8]
 8015b20:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015b22:	68fa      	ldr	r2, [r7, #12]
 8015b24:	23a7      	movs	r3, #167	@ 0xa7
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	2101      	movs	r1, #1
 8015b2a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	1dfa      	adds	r2, r7, #7
 8015b30:	7812      	ldrb	r2, [r2, #0]
 8015b32:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	0018      	movs	r0, r3
 8015b38:	f001 fd0c 	bl	8017554 <USBD_LL_Init>

  return USBD_OK;
 8015b3c:	2300      	movs	r3, #0
}
 8015b3e:	0018      	movs	r0, r3
 8015b40:	46bd      	mov	sp, r7
 8015b42:	b004      	add	sp, #16
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015b46:	b580      	push	{r7, lr}
 8015b48:	b084      	sub	sp, #16
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
 8015b4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015b50:	200f      	movs	r0, #15
 8015b52:	183b      	adds	r3, r7, r0
 8015b54:	2200      	movs	r2, #0
 8015b56:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d008      	beq.n	8015b70 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	23ad      	movs	r3, #173	@ 0xad
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	6839      	ldr	r1, [r7, #0]
 8015b66:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8015b68:	183b      	adds	r3, r7, r0
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	701a      	strb	r2, [r3, #0]
 8015b6e:	e003      	b.n	8015b78 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015b70:	230f      	movs	r3, #15
 8015b72:	18fb      	adds	r3, r7, r3
 8015b74:	2202      	movs	r2, #2
 8015b76:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8015b78:	230f      	movs	r3, #15
 8015b7a:	18fb      	adds	r3, r7, r3
 8015b7c:	781b      	ldrb	r3, [r3, #0]
}
 8015b7e:	0018      	movs	r0, r3
 8015b80:	46bd      	mov	sp, r7
 8015b82:	b004      	add	sp, #16
 8015b84:	bd80      	pop	{r7, pc}

08015b86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b082      	sub	sp, #8
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	0018      	movs	r0, r3
 8015b92:	f001 fd43 	bl	801761c <USBD_LL_Start>

  return USBD_OK;
 8015b96:	2300      	movs	r3, #0
}
 8015b98:	0018      	movs	r0, r3
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	b002      	add	sp, #8
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ba8:	2300      	movs	r3, #0
}
 8015baa:	0018      	movs	r0, r3
 8015bac:	46bd      	mov	sp, r7
 8015bae:	b002      	add	sp, #8
 8015bb0:	bd80      	pop	{r7, pc}

08015bb2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015bb2:	b590      	push	{r4, r7, lr}
 8015bb4:	b085      	sub	sp, #20
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
 8015bba:	000a      	movs	r2, r1
 8015bbc:	1cfb      	adds	r3, r7, #3
 8015bbe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015bc0:	240f      	movs	r4, #15
 8015bc2:	193b      	adds	r3, r7, r4
 8015bc4:	2202      	movs	r2, #2
 8015bc6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	23ad      	movs	r3, #173	@ 0xad
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	58d3      	ldr	r3, [r2, r3]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d00e      	beq.n	8015bf2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015bd4:	687a      	ldr	r2, [r7, #4]
 8015bd6:	23ad      	movs	r3, #173	@ 0xad
 8015bd8:	009b      	lsls	r3, r3, #2
 8015bda:	58d3      	ldr	r3, [r2, r3]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	1cfa      	adds	r2, r7, #3
 8015be0:	7811      	ldrb	r1, [r2, #0]
 8015be2:	687a      	ldr	r2, [r7, #4]
 8015be4:	0010      	movs	r0, r2
 8015be6:	4798      	blx	r3
 8015be8:	1e03      	subs	r3, r0, #0
 8015bea:	d102      	bne.n	8015bf2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8015bec:	193b      	adds	r3, r7, r4
 8015bee:	2200      	movs	r2, #0
 8015bf0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8015bf2:	230f      	movs	r3, #15
 8015bf4:	18fb      	adds	r3, r7, r3
 8015bf6:	781b      	ldrb	r3, [r3, #0]
}
 8015bf8:	0018      	movs	r0, r3
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	b005      	add	sp, #20
 8015bfe:	bd90      	pop	{r4, r7, pc}

08015c00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	000a      	movs	r2, r1
 8015c0a:	1cfb      	adds	r3, r7, #3
 8015c0c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	23ad      	movs	r3, #173	@ 0xad
 8015c12:	009b      	lsls	r3, r3, #2
 8015c14:	58d3      	ldr	r3, [r2, r3]
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	1cfa      	adds	r2, r7, #3
 8015c1a:	7811      	ldrb	r1, [r2, #0]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	0010      	movs	r0, r2
 8015c20:	4798      	blx	r3

  return USBD_OK;
 8015c22:	2300      	movs	r3, #0
}
 8015c24:	0018      	movs	r0, r3
 8015c26:	46bd      	mov	sp, r7
 8015c28:	b002      	add	sp, #8
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b082      	sub	sp, #8
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	22aa      	movs	r2, #170	@ 0xaa
 8015c3a:	0092      	lsls	r2, r2, #2
 8015c3c:	4694      	mov	ip, r2
 8015c3e:	4463      	add	r3, ip
 8015c40:	683a      	ldr	r2, [r7, #0]
 8015c42:	0011      	movs	r1, r2
 8015c44:	0018      	movs	r0, r3
 8015c46:	f001 f810 	bl	8016c6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015c4a:	687a      	ldr	r2, [r7, #4]
 8015c4c:	23a5      	movs	r3, #165	@ 0xa5
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	2101      	movs	r1, #1
 8015c52:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	4a23      	ldr	r2, [pc, #140]	@ (8015ce4 <USBD_LL_SetupStage+0xb8>)
 8015c58:	5a9b      	ldrh	r3, [r3, r2]
 8015c5a:	0019      	movs	r1, r3
 8015c5c:	687a      	ldr	r2, [r7, #4]
 8015c5e:	23a6      	movs	r3, #166	@ 0xa6
 8015c60:	009b      	lsls	r3, r3, #2
 8015c62:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	23aa      	movs	r3, #170	@ 0xaa
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	5cd3      	ldrb	r3, [r2, r3]
 8015c6c:	001a      	movs	r2, r3
 8015c6e:	231f      	movs	r3, #31
 8015c70:	4013      	ands	r3, r2
 8015c72:	2b02      	cmp	r3, #2
 8015c74:	d019      	beq.n	8015caa <USBD_LL_SetupStage+0x7e>
 8015c76:	d822      	bhi.n	8015cbe <USBD_LL_SetupStage+0x92>
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d002      	beq.n	8015c82 <USBD_LL_SetupStage+0x56>
 8015c7c:	2b01      	cmp	r3, #1
 8015c7e:	d00a      	beq.n	8015c96 <USBD_LL_SetupStage+0x6a>
 8015c80:	e01d      	b.n	8015cbe <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	22aa      	movs	r2, #170	@ 0xaa
 8015c86:	0092      	lsls	r2, r2, #2
 8015c88:	189a      	adds	r2, r3, r2
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	0011      	movs	r1, r2
 8015c8e:	0018      	movs	r0, r3
 8015c90:	f000 fa10 	bl	80160b4 <USBD_StdDevReq>
      break;
 8015c94:	e020      	b.n	8015cd8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	22aa      	movs	r2, #170	@ 0xaa
 8015c9a:	0092      	lsls	r2, r2, #2
 8015c9c:	189a      	adds	r2, r3, r2
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	0011      	movs	r1, r2
 8015ca2:	0018      	movs	r0, r3
 8015ca4:	f000 fa78 	bl	8016198 <USBD_StdItfReq>
      break;
 8015ca8:	e016      	b.n	8015cd8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	22aa      	movs	r2, #170	@ 0xaa
 8015cae:	0092      	lsls	r2, r2, #2
 8015cb0:	189a      	adds	r2, r3, r2
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	0011      	movs	r1, r2
 8015cb6:	0018      	movs	r0, r3
 8015cb8:	f000 fac5 	bl	8016246 <USBD_StdEPReq>
      break;
 8015cbc:	e00c      	b.n	8015cd8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015cbe:	687a      	ldr	r2, [r7, #4]
 8015cc0:	23aa      	movs	r3, #170	@ 0xaa
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	5cd3      	ldrb	r3, [r2, r3]
 8015cc6:	227f      	movs	r2, #127	@ 0x7f
 8015cc8:	4393      	bics	r3, r2
 8015cca:	b2da      	uxtb	r2, r3
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	0011      	movs	r1, r2
 8015cd0:	0018      	movs	r0, r3
 8015cd2:	f001 fd2a 	bl	801772a <USBD_LL_StallEP>
      break;
 8015cd6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015cd8:	2300      	movs	r3, #0
}
 8015cda:	0018      	movs	r0, r3
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	b002      	add	sp, #8
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	46c0      	nop			@ (mov r8, r8)
 8015ce4:	000002ae 	.word	0x000002ae

08015ce8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b086      	sub	sp, #24
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	60f8      	str	r0, [r7, #12]
 8015cf0:	607a      	str	r2, [r7, #4]
 8015cf2:	200b      	movs	r0, #11
 8015cf4:	183b      	adds	r3, r7, r0
 8015cf6:	1c0a      	adds	r2, r1, #0
 8015cf8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015cfa:	183b      	adds	r3, r7, r0
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d154      	bne.n	8015dac <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	3355      	adds	r3, #85	@ 0x55
 8015d06:	33ff      	adds	r3, #255	@ 0xff
 8015d08:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015d0a:	68fa      	ldr	r2, [r7, #12]
 8015d0c:	23a5      	movs	r3, #165	@ 0xa5
 8015d0e:	009b      	lsls	r3, r3, #2
 8015d10:	58d3      	ldr	r3, [r2, r3]
 8015d12:	2b03      	cmp	r3, #3
 8015d14:	d139      	bne.n	8015d8a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	68da      	ldr	r2, [r3, #12]
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	691b      	ldr	r3, [r3, #16]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d919      	bls.n	8015d56 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	68da      	ldr	r2, [r3, #12]
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	691b      	ldr	r3, [r3, #16]
 8015d2a:	1ad2      	subs	r2, r2, r3
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	68da      	ldr	r2, [r3, #12]
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d203      	bcs.n	8015d44 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	e002      	b.n	8015d4a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015d48:	b29b      	uxth	r3, r3
 8015d4a:	6879      	ldr	r1, [r7, #4]
 8015d4c:	68f8      	ldr	r0, [r7, #12]
 8015d4e:	001a      	movs	r2, r3
 8015d50:	f001 f898 	bl	8016e84 <USBD_CtlContinueRx>
 8015d54:	e045      	b.n	8015de2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015d56:	68fa      	ldr	r2, [r7, #12]
 8015d58:	23ad      	movs	r3, #173	@ 0xad
 8015d5a:	009b      	lsls	r3, r3, #2
 8015d5c:	58d3      	ldr	r3, [r2, r3]
 8015d5e:	691b      	ldr	r3, [r3, #16]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00d      	beq.n	8015d80 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015d64:	68fa      	ldr	r2, [r7, #12]
 8015d66:	23a7      	movs	r3, #167	@ 0xa7
 8015d68:	009b      	lsls	r3, r3, #2
 8015d6a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015d6c:	2b03      	cmp	r3, #3
 8015d6e:	d107      	bne.n	8015d80 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015d70:	68fa      	ldr	r2, [r7, #12]
 8015d72:	23ad      	movs	r3, #173	@ 0xad
 8015d74:	009b      	lsls	r3, r3, #2
 8015d76:	58d3      	ldr	r3, [r2, r3]
 8015d78:	691b      	ldr	r3, [r3, #16]
 8015d7a:	68fa      	ldr	r2, [r7, #12]
 8015d7c:	0010      	movs	r0, r2
 8015d7e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	0018      	movs	r0, r3
 8015d84:	f001 f891 	bl	8016eaa <USBD_CtlSendStatus>
 8015d88:	e02b      	b.n	8015de2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8015d8a:	68fa      	ldr	r2, [r7, #12]
 8015d8c:	23a5      	movs	r3, #165	@ 0xa5
 8015d8e:	009b      	lsls	r3, r3, #2
 8015d90:	58d3      	ldr	r3, [r2, r3]
 8015d92:	2b05      	cmp	r3, #5
 8015d94:	d125      	bne.n	8015de2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	23a5      	movs	r3, #165	@ 0xa5
 8015d9a:	009b      	lsls	r3, r3, #2
 8015d9c:	2100      	movs	r1, #0
 8015d9e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	2100      	movs	r1, #0
 8015da4:	0018      	movs	r0, r3
 8015da6:	f001 fcc0 	bl	801772a <USBD_LL_StallEP>
 8015daa:	e01a      	b.n	8015de2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015dac:	68fa      	ldr	r2, [r7, #12]
 8015dae:	23ad      	movs	r3, #173	@ 0xad
 8015db0:	009b      	lsls	r3, r3, #2
 8015db2:	58d3      	ldr	r3, [r2, r3]
 8015db4:	699b      	ldr	r3, [r3, #24]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d011      	beq.n	8015dde <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015dba:	68fa      	ldr	r2, [r7, #12]
 8015dbc:	23a7      	movs	r3, #167	@ 0xa7
 8015dbe:	009b      	lsls	r3, r3, #2
 8015dc0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8015dc2:	2b03      	cmp	r3, #3
 8015dc4:	d10b      	bne.n	8015dde <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8015dc6:	68fa      	ldr	r2, [r7, #12]
 8015dc8:	23ad      	movs	r3, #173	@ 0xad
 8015dca:	009b      	lsls	r3, r3, #2
 8015dcc:	58d3      	ldr	r3, [r2, r3]
 8015dce:	699b      	ldr	r3, [r3, #24]
 8015dd0:	220b      	movs	r2, #11
 8015dd2:	18ba      	adds	r2, r7, r2
 8015dd4:	7811      	ldrb	r1, [r2, #0]
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	0010      	movs	r0, r2
 8015dda:	4798      	blx	r3
 8015ddc:	e001      	b.n	8015de2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015dde:	2302      	movs	r3, #2
 8015de0:	e000      	b.n	8015de4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015de2:	2300      	movs	r3, #0
}
 8015de4:	0018      	movs	r0, r3
 8015de6:	46bd      	mov	sp, r7
 8015de8:	b006      	add	sp, #24
 8015dea:	bd80      	pop	{r7, pc}

08015dec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b086      	sub	sp, #24
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	607a      	str	r2, [r7, #4]
 8015df6:	200b      	movs	r0, #11
 8015df8:	183b      	adds	r3, r7, r0
 8015dfa:	1c0a      	adds	r2, r1, #0
 8015dfc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015dfe:	183b      	adds	r3, r7, r0
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d000      	beq.n	8015e08 <USBD_LL_DataInStage+0x1c>
 8015e06:	e08e      	b.n	8015f26 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	3314      	adds	r3, #20
 8015e0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015e0e:	68fa      	ldr	r2, [r7, #12]
 8015e10:	23a5      	movs	r3, #165	@ 0xa5
 8015e12:	009b      	lsls	r3, r3, #2
 8015e14:	58d3      	ldr	r3, [r2, r3]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d164      	bne.n	8015ee4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8015e1a:	697b      	ldr	r3, [r7, #20]
 8015e1c:	68da      	ldr	r2, [r3, #12]
 8015e1e:	697b      	ldr	r3, [r7, #20]
 8015e20:	691b      	ldr	r3, [r3, #16]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d915      	bls.n	8015e52 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	68da      	ldr	r2, [r3, #12]
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	691b      	ldr	r3, [r3, #16]
 8015e2e:	1ad2      	subs	r2, r2, r3
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	68db      	ldr	r3, [r3, #12]
 8015e38:	b29a      	uxth	r2, r3
 8015e3a:	6879      	ldr	r1, [r7, #4]
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	0018      	movs	r0, r3
 8015e40:	f000 ffe9 	bl	8016e16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e44:	68f8      	ldr	r0, [r7, #12]
 8015e46:	2300      	movs	r3, #0
 8015e48:	2200      	movs	r2, #0
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	f001 fd56 	bl	80178fc <USBD_LL_PrepareReceive>
 8015e50:	e059      	b.n	8015f06 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	689a      	ldr	r2, [r3, #8]
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	691b      	ldr	r3, [r3, #16]
 8015e5a:	0019      	movs	r1, r3
 8015e5c:	0010      	movs	r0, r2
 8015e5e:	f7ea f9f5 	bl	800024c <__aeabi_uidivmod>
 8015e62:	1e0b      	subs	r3, r1, #0
 8015e64:	d11f      	bne.n	8015ea6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	689a      	ldr	r2, [r3, #8]
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d319      	bcc.n	8015ea6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	689a      	ldr	r2, [r3, #8]
 8015e76:	68f9      	ldr	r1, [r7, #12]
 8015e78:	23a6      	movs	r3, #166	@ 0xa6
 8015e7a:	009b      	lsls	r3, r3, #2
 8015e7c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d211      	bcs.n	8015ea6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	2200      	movs	r2, #0
 8015e86:	2100      	movs	r1, #0
 8015e88:	0018      	movs	r0, r3
 8015e8a:	f000 ffc4 	bl	8016e16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015e8e:	68fa      	ldr	r2, [r7, #12]
 8015e90:	23a6      	movs	r3, #166	@ 0xa6
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	2100      	movs	r1, #0
 8015e96:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015e98:	68f8      	ldr	r0, [r7, #12]
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	2100      	movs	r1, #0
 8015ea0:	f001 fd2c 	bl	80178fc <USBD_LL_PrepareReceive>
 8015ea4:	e02f      	b.n	8015f06 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015ea6:	68fa      	ldr	r2, [r7, #12]
 8015ea8:	23ad      	movs	r3, #173	@ 0xad
 8015eaa:	009b      	lsls	r3, r3, #2
 8015eac:	58d3      	ldr	r3, [r2, r3]
 8015eae:	68db      	ldr	r3, [r3, #12]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00d      	beq.n	8015ed0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015eb4:	68fa      	ldr	r2, [r7, #12]
 8015eb6:	23a7      	movs	r3, #167	@ 0xa7
 8015eb8:	009b      	lsls	r3, r3, #2
 8015eba:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015ebc:	2b03      	cmp	r3, #3
 8015ebe:	d107      	bne.n	8015ed0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015ec0:	68fa      	ldr	r2, [r7, #12]
 8015ec2:	23ad      	movs	r3, #173	@ 0xad
 8015ec4:	009b      	lsls	r3, r3, #2
 8015ec6:	58d3      	ldr	r3, [r2, r3]
 8015ec8:	68db      	ldr	r3, [r3, #12]
 8015eca:	68fa      	ldr	r2, [r7, #12]
 8015ecc:	0010      	movs	r0, r2
 8015ece:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	2180      	movs	r1, #128	@ 0x80
 8015ed4:	0018      	movs	r0, r3
 8015ed6:	f001 fc28 	bl	801772a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	0018      	movs	r0, r3
 8015ede:	f000 fff8 	bl	8016ed2 <USBD_CtlReceiveStatus>
 8015ee2:	e010      	b.n	8015f06 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015ee4:	68fa      	ldr	r2, [r7, #12]
 8015ee6:	23a5      	movs	r3, #165	@ 0xa5
 8015ee8:	009b      	lsls	r3, r3, #2
 8015eea:	58d3      	ldr	r3, [r2, r3]
 8015eec:	2b04      	cmp	r3, #4
 8015eee:	d005      	beq.n	8015efc <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8015ef0:	68fa      	ldr	r2, [r7, #12]
 8015ef2:	23a5      	movs	r3, #165	@ 0xa5
 8015ef4:	009b      	lsls	r3, r3, #2
 8015ef6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d104      	bne.n	8015f06 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2180      	movs	r1, #128	@ 0x80
 8015f00:	0018      	movs	r0, r3
 8015f02:	f001 fc12 	bl	801772a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8015f06:	68fa      	ldr	r2, [r7, #12]
 8015f08:	23a8      	movs	r3, #168	@ 0xa8
 8015f0a:	009b      	lsls	r3, r3, #2
 8015f0c:	5cd3      	ldrb	r3, [r2, r3]
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	d124      	bne.n	8015f5c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	0018      	movs	r0, r3
 8015f16:	f7ff fe43 	bl	8015ba0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015f1a:	68fa      	ldr	r2, [r7, #12]
 8015f1c:	23a8      	movs	r3, #168	@ 0xa8
 8015f1e:	009b      	lsls	r3, r3, #2
 8015f20:	2100      	movs	r1, #0
 8015f22:	54d1      	strb	r1, [r2, r3]
 8015f24:	e01a      	b.n	8015f5c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015f26:	68fa      	ldr	r2, [r7, #12]
 8015f28:	23ad      	movs	r3, #173	@ 0xad
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	58d3      	ldr	r3, [r2, r3]
 8015f2e:	695b      	ldr	r3, [r3, #20]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d011      	beq.n	8015f58 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015f34:	68fa      	ldr	r2, [r7, #12]
 8015f36:	23a7      	movs	r3, #167	@ 0xa7
 8015f38:	009b      	lsls	r3, r3, #2
 8015f3a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8015f3c:	2b03      	cmp	r3, #3
 8015f3e:	d10b      	bne.n	8015f58 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8015f40:	68fa      	ldr	r2, [r7, #12]
 8015f42:	23ad      	movs	r3, #173	@ 0xad
 8015f44:	009b      	lsls	r3, r3, #2
 8015f46:	58d3      	ldr	r3, [r2, r3]
 8015f48:	695b      	ldr	r3, [r3, #20]
 8015f4a:	220b      	movs	r2, #11
 8015f4c:	18ba      	adds	r2, r7, r2
 8015f4e:	7811      	ldrb	r1, [r2, #0]
 8015f50:	68fa      	ldr	r2, [r7, #12]
 8015f52:	0010      	movs	r0, r2
 8015f54:	4798      	blx	r3
 8015f56:	e001      	b.n	8015f5c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015f58:	2302      	movs	r3, #2
 8015f5a:	e000      	b.n	8015f5e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8015f5c:	2300      	movs	r3, #0
}
 8015f5e:	0018      	movs	r0, r3
 8015f60:	46bd      	mov	sp, r7
 8015f62:	b006      	add	sp, #24
 8015f64:	bd80      	pop	{r7, pc}

08015f66 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015f66:	b580      	push	{r7, lr}
 8015f68:	b082      	sub	sp, #8
 8015f6a:	af00      	add	r7, sp, #0
 8015f6c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	2340      	movs	r3, #64	@ 0x40
 8015f72:	2200      	movs	r2, #0
 8015f74:	2100      	movs	r1, #0
 8015f76:	f001 fb76 	bl	8017666 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	23ac      	movs	r3, #172	@ 0xac
 8015f7e:	005b      	lsls	r3, r3, #1
 8015f80:	2101      	movs	r1, #1
 8015f82:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015f84:	687a      	ldr	r2, [r7, #4]
 8015f86:	23b2      	movs	r3, #178	@ 0xb2
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	2140      	movs	r1, #64	@ 0x40
 8015f8c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	2340      	movs	r3, #64	@ 0x40
 8015f92:	2200      	movs	r2, #0
 8015f94:	2180      	movs	r1, #128	@ 0x80
 8015f96:	f001 fb66 	bl	8017666 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	2201      	movs	r2, #1
 8015f9e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2240      	movs	r2, #64	@ 0x40
 8015fa4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	23a7      	movs	r3, #167	@ 0xa7
 8015faa:	009b      	lsls	r3, r3, #2
 8015fac:	2101      	movs	r1, #1
 8015fae:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015fb0:	687a      	ldr	r2, [r7, #4]
 8015fb2:	23a5      	movs	r3, #165	@ 0xa5
 8015fb4:	009b      	lsls	r3, r3, #2
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	23a9      	movs	r3, #169	@ 0xa9
 8015fc4:	009b      	lsls	r3, r3, #2
 8015fc6:	2100      	movs	r1, #0
 8015fc8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	23ae      	movs	r3, #174	@ 0xae
 8015fce:	009b      	lsls	r3, r3, #2
 8015fd0:	58d3      	ldr	r3, [r2, r3]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d00a      	beq.n	8015fec <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015fd6:	687a      	ldr	r2, [r7, #4]
 8015fd8:	23ad      	movs	r3, #173	@ 0xad
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	58d3      	ldr	r3, [r2, r3]
 8015fde:	685a      	ldr	r2, [r3, #4]
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	b2d9      	uxtb	r1, r3
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	0018      	movs	r0, r3
 8015fea:	4790      	blx	r2
  }

  return USBD_OK;
 8015fec:	2300      	movs	r3, #0
}
 8015fee:	0018      	movs	r0, r3
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	b002      	add	sp, #8
 8015ff4:	bd80      	pop	{r7, pc}

08015ff6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015ff6:	b580      	push	{r7, lr}
 8015ff8:	b082      	sub	sp, #8
 8015ffa:	af00      	add	r7, sp, #0
 8015ffc:	6078      	str	r0, [r7, #4]
 8015ffe:	000a      	movs	r2, r1
 8016000:	1cfb      	adds	r3, r7, #3
 8016002:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	1cfa      	adds	r2, r7, #3
 8016008:	7812      	ldrb	r2, [r2, #0]
 801600a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801600c:	2300      	movs	r3, #0
}
 801600e:	0018      	movs	r0, r3
 8016010:	46bd      	mov	sp, r7
 8016012:	b002      	add	sp, #8
 8016014:	bd80      	pop	{r7, pc}
	...

08016018 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b082      	sub	sp, #8
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8016020:	687a      	ldr	r2, [r7, #4]
 8016022:	23a7      	movs	r3, #167	@ 0xa7
 8016024:	009b      	lsls	r3, r3, #2
 8016026:	5cd1      	ldrb	r1, [r2, r3]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	4a06      	ldr	r2, [pc, #24]	@ (8016044 <USBD_LL_Suspend+0x2c>)
 801602c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	23a7      	movs	r3, #167	@ 0xa7
 8016032:	009b      	lsls	r3, r3, #2
 8016034:	2104      	movs	r1, #4
 8016036:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8016038:	2300      	movs	r3, #0
}
 801603a:	0018      	movs	r0, r3
 801603c:	46bd      	mov	sp, r7
 801603e:	b002      	add	sp, #8
 8016040:	bd80      	pop	{r7, pc}
 8016042:	46c0      	nop			@ (mov r8, r8)
 8016044:	0000029d 	.word	0x0000029d

08016048 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b082      	sub	sp, #8
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	23a7      	movs	r3, #167	@ 0xa7
 8016054:	009b      	lsls	r3, r3, #2
 8016056:	5cd3      	ldrb	r3, [r2, r3]
 8016058:	2b04      	cmp	r3, #4
 801605a:	d106      	bne.n	801606a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	4a05      	ldr	r2, [pc, #20]	@ (8016074 <USBD_LL_Resume+0x2c>)
 8016060:	5c99      	ldrb	r1, [r3, r2]
 8016062:	687a      	ldr	r2, [r7, #4]
 8016064:	23a7      	movs	r3, #167	@ 0xa7
 8016066:	009b      	lsls	r3, r3, #2
 8016068:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801606a:	2300      	movs	r3, #0
}
 801606c:	0018      	movs	r0, r3
 801606e:	46bd      	mov	sp, r7
 8016070:	b002      	add	sp, #8
 8016072:	bd80      	pop	{r7, pc}
 8016074:	0000029d 	.word	0x0000029d

08016078 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b082      	sub	sp, #8
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	23a7      	movs	r3, #167	@ 0xa7
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	5cd3      	ldrb	r3, [r2, r3]
 8016088:	2b03      	cmp	r3, #3
 801608a:	d10e      	bne.n	80160aa <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801608c:	687a      	ldr	r2, [r7, #4]
 801608e:	23ad      	movs	r3, #173	@ 0xad
 8016090:	009b      	lsls	r3, r3, #2
 8016092:	58d3      	ldr	r3, [r2, r3]
 8016094:	69db      	ldr	r3, [r3, #28]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d007      	beq.n	80160aa <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	23ad      	movs	r3, #173	@ 0xad
 801609e:	009b      	lsls	r3, r3, #2
 80160a0:	58d3      	ldr	r3, [r2, r3]
 80160a2:	69db      	ldr	r3, [r3, #28]
 80160a4:	687a      	ldr	r2, [r7, #4]
 80160a6:	0010      	movs	r0, r2
 80160a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80160aa:	2300      	movs	r3, #0
}
 80160ac:	0018      	movs	r0, r3
 80160ae:	46bd      	mov	sp, r7
 80160b0:	b002      	add	sp, #8
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b084      	sub	sp, #16
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80160be:	230f      	movs	r3, #15
 80160c0:	18fb      	adds	r3, r7, r3
 80160c2:	2200      	movs	r2, #0
 80160c4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	001a      	movs	r2, r3
 80160cc:	2360      	movs	r3, #96	@ 0x60
 80160ce:	4013      	ands	r3, r2
 80160d0:	2b40      	cmp	r3, #64	@ 0x40
 80160d2:	d004      	beq.n	80160de <USBD_StdDevReq+0x2a>
 80160d4:	d84f      	bhi.n	8016176 <USBD_StdDevReq+0xc2>
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d00b      	beq.n	80160f2 <USBD_StdDevReq+0x3e>
 80160da:	2b20      	cmp	r3, #32
 80160dc:	d14b      	bne.n	8016176 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80160de:	687a      	ldr	r2, [r7, #4]
 80160e0:	23ad      	movs	r3, #173	@ 0xad
 80160e2:	009b      	lsls	r3, r3, #2
 80160e4:	58d3      	ldr	r3, [r2, r3]
 80160e6:	689b      	ldr	r3, [r3, #8]
 80160e8:	6839      	ldr	r1, [r7, #0]
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	0010      	movs	r0, r2
 80160ee:	4798      	blx	r3
      break;
 80160f0:	e048      	b.n	8016184 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	785b      	ldrb	r3, [r3, #1]
 80160f6:	2b09      	cmp	r3, #9
 80160f8:	d835      	bhi.n	8016166 <USBD_StdDevReq+0xb2>
 80160fa:	009a      	lsls	r2, r3, #2
 80160fc:	4b25      	ldr	r3, [pc, #148]	@ (8016194 <USBD_StdDevReq+0xe0>)
 80160fe:	18d3      	adds	r3, r2, r3
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016104:	683a      	ldr	r2, [r7, #0]
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	0011      	movs	r1, r2
 801610a:	0018      	movs	r0, r3
 801610c:	f000 fa52 	bl	80165b4 <USBD_GetDescriptor>
          break;
 8016110:	e030      	b.n	8016174 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016112:	683a      	ldr	r2, [r7, #0]
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	0011      	movs	r1, r2
 8016118:	0018      	movs	r0, r3
 801611a:	f000 fbfd 	bl	8016918 <USBD_SetAddress>
          break;
 801611e:	e029      	b.n	8016174 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8016120:	683a      	ldr	r2, [r7, #0]
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	0011      	movs	r1, r2
 8016126:	0018      	movs	r0, r3
 8016128:	f000 fc4a 	bl	80169c0 <USBD_SetConfig>
          break;
 801612c:	e022      	b.n	8016174 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801612e:	683a      	ldr	r2, [r7, #0]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	0011      	movs	r1, r2
 8016134:	0018      	movs	r0, r3
 8016136:	f000 fce7 	bl	8016b08 <USBD_GetConfig>
          break;
 801613a:	e01b      	b.n	8016174 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801613c:	683a      	ldr	r2, [r7, #0]
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	0011      	movs	r1, r2
 8016142:	0018      	movs	r0, r3
 8016144:	f000 fd1b 	bl	8016b7e <USBD_GetStatus>
          break;
 8016148:	e014      	b.n	8016174 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801614a:	683a      	ldr	r2, [r7, #0]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	0011      	movs	r1, r2
 8016150:	0018      	movs	r0, r3
 8016152:	f000 fd4e 	bl	8016bf2 <USBD_SetFeature>
          break;
 8016156:	e00d      	b.n	8016174 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016158:	683a      	ldr	r2, [r7, #0]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	0011      	movs	r1, r2
 801615e:	0018      	movs	r0, r3
 8016160:	f000 fd5d 	bl	8016c1e <USBD_ClrFeature>
          break;
 8016164:	e006      	b.n	8016174 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016166:	683a      	ldr	r2, [r7, #0]
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	0011      	movs	r1, r2
 801616c:	0018      	movs	r0, r3
 801616e:	f000 fdb4 	bl	8016cda <USBD_CtlError>
          break;
 8016172:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016174:	e006      	b.n	8016184 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8016176:	683a      	ldr	r2, [r7, #0]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	0011      	movs	r1, r2
 801617c:	0018      	movs	r0, r3
 801617e:	f000 fdac 	bl	8016cda <USBD_CtlError>
      break;
 8016182:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8016184:	230f      	movs	r3, #15
 8016186:	18fb      	adds	r3, r7, r3
 8016188:	781b      	ldrb	r3, [r3, #0]
}
 801618a:	0018      	movs	r0, r3
 801618c:	46bd      	mov	sp, r7
 801618e:	b004      	add	sp, #16
 8016190:	bd80      	pop	{r7, pc}
 8016192:	46c0      	nop			@ (mov r8, r8)
 8016194:	0801c284 	.word	0x0801c284

08016198 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8016198:	b5b0      	push	{r4, r5, r7, lr}
 801619a:	b084      	sub	sp, #16
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80161a2:	230f      	movs	r3, #15
 80161a4:	18fb      	adds	r3, r7, r3
 80161a6:	2200      	movs	r2, #0
 80161a8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	001a      	movs	r2, r3
 80161b0:	2360      	movs	r3, #96	@ 0x60
 80161b2:	4013      	ands	r3, r2
 80161b4:	2b40      	cmp	r3, #64	@ 0x40
 80161b6:	d004      	beq.n	80161c2 <USBD_StdItfReq+0x2a>
 80161b8:	d839      	bhi.n	801622e <USBD_StdItfReq+0x96>
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d001      	beq.n	80161c2 <USBD_StdItfReq+0x2a>
 80161be:	2b20      	cmp	r3, #32
 80161c0:	d135      	bne.n	801622e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	23a7      	movs	r3, #167	@ 0xa7
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	5cd3      	ldrb	r3, [r2, r3]
 80161ca:	3b01      	subs	r3, #1
 80161cc:	2b02      	cmp	r3, #2
 80161ce:	d825      	bhi.n	801621c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	889b      	ldrh	r3, [r3, #4]
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	2b01      	cmp	r3, #1
 80161d8:	d819      	bhi.n	801620e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	23ad      	movs	r3, #173	@ 0xad
 80161de:	009b      	lsls	r3, r3, #2
 80161e0:	58d3      	ldr	r3, [r2, r3]
 80161e2:	689b      	ldr	r3, [r3, #8]
 80161e4:	250f      	movs	r5, #15
 80161e6:	197c      	adds	r4, r7, r5
 80161e8:	6839      	ldr	r1, [r7, #0]
 80161ea:	687a      	ldr	r2, [r7, #4]
 80161ec:	0010      	movs	r0, r2
 80161ee:	4798      	blx	r3
 80161f0:	0003      	movs	r3, r0
 80161f2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	88db      	ldrh	r3, [r3, #6]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d116      	bne.n	801622a <USBD_StdItfReq+0x92>
 80161fc:	197b      	adds	r3, r7, r5
 80161fe:	781b      	ldrb	r3, [r3, #0]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d112      	bne.n	801622a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	0018      	movs	r0, r3
 8016208:	f000 fe4f 	bl	8016eaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801620c:	e00d      	b.n	801622a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801620e:	683a      	ldr	r2, [r7, #0]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	0011      	movs	r1, r2
 8016214:	0018      	movs	r0, r3
 8016216:	f000 fd60 	bl	8016cda <USBD_CtlError>
          break;
 801621a:	e006      	b.n	801622a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801621c:	683a      	ldr	r2, [r7, #0]
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	0011      	movs	r1, r2
 8016222:	0018      	movs	r0, r3
 8016224:	f000 fd59 	bl	8016cda <USBD_CtlError>
          break;
 8016228:	e000      	b.n	801622c <USBD_StdItfReq+0x94>
          break;
 801622a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801622c:	e006      	b.n	801623c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801622e:	683a      	ldr	r2, [r7, #0]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	0011      	movs	r1, r2
 8016234:	0018      	movs	r0, r3
 8016236:	f000 fd50 	bl	8016cda <USBD_CtlError>
      break;
 801623a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801623c:	2300      	movs	r3, #0
}
 801623e:	0018      	movs	r0, r3
 8016240:	46bd      	mov	sp, r7
 8016242:	b004      	add	sp, #16
 8016244:	bdb0      	pop	{r4, r5, r7, pc}

08016246 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8016246:	b5b0      	push	{r4, r5, r7, lr}
 8016248:	b084      	sub	sp, #16
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
 801624e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016250:	230f      	movs	r3, #15
 8016252:	18fb      	adds	r3, r7, r3
 8016254:	2200      	movs	r2, #0
 8016256:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	889a      	ldrh	r2, [r3, #4]
 801625c:	230e      	movs	r3, #14
 801625e:	18fb      	adds	r3, r7, r3
 8016260:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	001a      	movs	r2, r3
 8016268:	2360      	movs	r3, #96	@ 0x60
 801626a:	4013      	ands	r3, r2
 801626c:	2b40      	cmp	r3, #64	@ 0x40
 801626e:	d006      	beq.n	801627e <USBD_StdEPReq+0x38>
 8016270:	d900      	bls.n	8016274 <USBD_StdEPReq+0x2e>
 8016272:	e190      	b.n	8016596 <USBD_StdEPReq+0x350>
 8016274:	2b00      	cmp	r3, #0
 8016276:	d00c      	beq.n	8016292 <USBD_StdEPReq+0x4c>
 8016278:	2b20      	cmp	r3, #32
 801627a:	d000      	beq.n	801627e <USBD_StdEPReq+0x38>
 801627c:	e18b      	b.n	8016596 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	23ad      	movs	r3, #173	@ 0xad
 8016282:	009b      	lsls	r3, r3, #2
 8016284:	58d3      	ldr	r3, [r2, r3]
 8016286:	689b      	ldr	r3, [r3, #8]
 8016288:	6839      	ldr	r1, [r7, #0]
 801628a:	687a      	ldr	r2, [r7, #4]
 801628c:	0010      	movs	r0, r2
 801628e:	4798      	blx	r3
      break;
 8016290:	e188      	b.n	80165a4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	001a      	movs	r2, r3
 8016298:	2360      	movs	r3, #96	@ 0x60
 801629a:	4013      	ands	r3, r2
 801629c:	2b20      	cmp	r3, #32
 801629e:	d10f      	bne.n	80162c0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80162a0:	687a      	ldr	r2, [r7, #4]
 80162a2:	23ad      	movs	r3, #173	@ 0xad
 80162a4:	009b      	lsls	r3, r3, #2
 80162a6:	58d3      	ldr	r3, [r2, r3]
 80162a8:	689b      	ldr	r3, [r3, #8]
 80162aa:	250f      	movs	r5, #15
 80162ac:	197c      	adds	r4, r7, r5
 80162ae:	6839      	ldr	r1, [r7, #0]
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	0010      	movs	r0, r2
 80162b4:	4798      	blx	r3
 80162b6:	0003      	movs	r3, r0
 80162b8:	7023      	strb	r3, [r4, #0]

        return ret;
 80162ba:	197b      	adds	r3, r7, r5
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	e174      	b.n	80165aa <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	785b      	ldrb	r3, [r3, #1]
 80162c4:	2b03      	cmp	r3, #3
 80162c6:	d007      	beq.n	80162d8 <USBD_StdEPReq+0x92>
 80162c8:	dd00      	ble.n	80162cc <USBD_StdEPReq+0x86>
 80162ca:	e15c      	b.n	8016586 <USBD_StdEPReq+0x340>
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d100      	bne.n	80162d2 <USBD_StdEPReq+0x8c>
 80162d0:	e092      	b.n	80163f8 <USBD_StdEPReq+0x1b2>
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d04b      	beq.n	801636e <USBD_StdEPReq+0x128>
 80162d6:	e156      	b.n	8016586 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80162d8:	687a      	ldr	r2, [r7, #4]
 80162da:	23a7      	movs	r3, #167	@ 0xa7
 80162dc:	009b      	lsls	r3, r3, #2
 80162de:	5cd3      	ldrb	r3, [r2, r3]
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	d002      	beq.n	80162ea <USBD_StdEPReq+0xa4>
 80162e4:	2b03      	cmp	r3, #3
 80162e6:	d01d      	beq.n	8016324 <USBD_StdEPReq+0xde>
 80162e8:	e039      	b.n	801635e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80162ea:	220e      	movs	r2, #14
 80162ec:	18bb      	adds	r3, r7, r2
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d010      	beq.n	8016316 <USBD_StdEPReq+0xd0>
 80162f4:	18bb      	adds	r3, r7, r2
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	2b80      	cmp	r3, #128	@ 0x80
 80162fa:	d00c      	beq.n	8016316 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80162fc:	18bb      	adds	r3, r7, r2
 80162fe:	781a      	ldrb	r2, [r3, #0]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	0011      	movs	r1, r2
 8016304:	0018      	movs	r0, r3
 8016306:	f001 fa10 	bl	801772a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2180      	movs	r1, #128	@ 0x80
 801630e:	0018      	movs	r0, r3
 8016310:	f001 fa0b 	bl	801772a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016314:	e02a      	b.n	801636c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8016316:	683a      	ldr	r2, [r7, #0]
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	0011      	movs	r1, r2
 801631c:	0018      	movs	r0, r3
 801631e:	f000 fcdc 	bl	8016cda <USBD_CtlError>
              break;
 8016322:	e023      	b.n	801636c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	885b      	ldrh	r3, [r3, #2]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d113      	bne.n	8016354 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801632c:	220e      	movs	r2, #14
 801632e:	18bb      	adds	r3, r7, r2
 8016330:	781b      	ldrb	r3, [r3, #0]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d00e      	beq.n	8016354 <USBD_StdEPReq+0x10e>
 8016336:	18bb      	adds	r3, r7, r2
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	2b80      	cmp	r3, #128	@ 0x80
 801633c:	d00a      	beq.n	8016354 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801633e:	683b      	ldr	r3, [r7, #0]
 8016340:	88db      	ldrh	r3, [r3, #6]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d106      	bne.n	8016354 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8016346:	18bb      	adds	r3, r7, r2
 8016348:	781a      	ldrb	r2, [r3, #0]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	0011      	movs	r1, r2
 801634e:	0018      	movs	r0, r3
 8016350:	f001 f9eb 	bl	801772a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	0018      	movs	r0, r3
 8016358:	f000 fda7 	bl	8016eaa <USBD_CtlSendStatus>

              break;
 801635c:	e006      	b.n	801636c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801635e:	683a      	ldr	r2, [r7, #0]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	0011      	movs	r1, r2
 8016364:	0018      	movs	r0, r3
 8016366:	f000 fcb8 	bl	8016cda <USBD_CtlError>
              break;
 801636a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801636c:	e112      	b.n	8016594 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	23a7      	movs	r3, #167	@ 0xa7
 8016372:	009b      	lsls	r3, r3, #2
 8016374:	5cd3      	ldrb	r3, [r2, r3]
 8016376:	2b02      	cmp	r3, #2
 8016378:	d002      	beq.n	8016380 <USBD_StdEPReq+0x13a>
 801637a:	2b03      	cmp	r3, #3
 801637c:	d01d      	beq.n	80163ba <USBD_StdEPReq+0x174>
 801637e:	e032      	b.n	80163e6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016380:	220e      	movs	r2, #14
 8016382:	18bb      	adds	r3, r7, r2
 8016384:	781b      	ldrb	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d010      	beq.n	80163ac <USBD_StdEPReq+0x166>
 801638a:	18bb      	adds	r3, r7, r2
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	2b80      	cmp	r3, #128	@ 0x80
 8016390:	d00c      	beq.n	80163ac <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8016392:	18bb      	adds	r3, r7, r2
 8016394:	781a      	ldrb	r2, [r3, #0]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	0011      	movs	r1, r2
 801639a:	0018      	movs	r0, r3
 801639c:	f001 f9c5 	bl	801772a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	2180      	movs	r1, #128	@ 0x80
 80163a4:	0018      	movs	r0, r3
 80163a6:	f001 f9c0 	bl	801772a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80163aa:	e024      	b.n	80163f6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80163ac:	683a      	ldr	r2, [r7, #0]
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	0011      	movs	r1, r2
 80163b2:	0018      	movs	r0, r3
 80163b4:	f000 fc91 	bl	8016cda <USBD_CtlError>
              break;
 80163b8:	e01d      	b.n	80163f6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	885b      	ldrh	r3, [r3, #2]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d118      	bne.n	80163f4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80163c2:	210e      	movs	r1, #14
 80163c4:	187b      	adds	r3, r7, r1
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	227f      	movs	r2, #127	@ 0x7f
 80163ca:	4013      	ands	r3, r2
 80163cc:	d006      	beq.n	80163dc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80163ce:	187b      	adds	r3, r7, r1
 80163d0:	781a      	ldrb	r2, [r3, #0]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	0011      	movs	r1, r2
 80163d6:	0018      	movs	r0, r3
 80163d8:	f001 f9d2 	bl	8017780 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	0018      	movs	r0, r3
 80163e0:	f000 fd63 	bl	8016eaa <USBD_CtlSendStatus>
              }
              break;
 80163e4:	e006      	b.n	80163f4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80163e6:	683a      	ldr	r2, [r7, #0]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	0011      	movs	r1, r2
 80163ec:	0018      	movs	r0, r3
 80163ee:	f000 fc74 	bl	8016cda <USBD_CtlError>
              break;
 80163f2:	e000      	b.n	80163f6 <USBD_StdEPReq+0x1b0>
              break;
 80163f4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80163f6:	e0cd      	b.n	8016594 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	23a7      	movs	r3, #167	@ 0xa7
 80163fc:	009b      	lsls	r3, r3, #2
 80163fe:	5cd3      	ldrb	r3, [r2, r3]
 8016400:	2b02      	cmp	r3, #2
 8016402:	d002      	beq.n	801640a <USBD_StdEPReq+0x1c4>
 8016404:	2b03      	cmp	r3, #3
 8016406:	d03c      	beq.n	8016482 <USBD_StdEPReq+0x23c>
 8016408:	e0b5      	b.n	8016576 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801640a:	220e      	movs	r2, #14
 801640c:	18bb      	adds	r3, r7, r2
 801640e:	781b      	ldrb	r3, [r3, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d00a      	beq.n	801642a <USBD_StdEPReq+0x1e4>
 8016414:	18bb      	adds	r3, r7, r2
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	2b80      	cmp	r3, #128	@ 0x80
 801641a:	d006      	beq.n	801642a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801641c:	683a      	ldr	r2, [r7, #0]
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	0011      	movs	r1, r2
 8016422:	0018      	movs	r0, r3
 8016424:	f000 fc59 	bl	8016cda <USBD_CtlError>
                break;
 8016428:	e0ac      	b.n	8016584 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801642a:	220e      	movs	r2, #14
 801642c:	18bb      	adds	r3, r7, r2
 801642e:	781b      	ldrb	r3, [r3, #0]
 8016430:	b25b      	sxtb	r3, r3
 8016432:	2b00      	cmp	r3, #0
 8016434:	da0c      	bge.n	8016450 <USBD_StdEPReq+0x20a>
 8016436:	18bb      	adds	r3, r7, r2
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	227f      	movs	r2, #127	@ 0x7f
 801643c:	401a      	ands	r2, r3
 801643e:	0013      	movs	r3, r2
 8016440:	009b      	lsls	r3, r3, #2
 8016442:	189b      	adds	r3, r3, r2
 8016444:	009b      	lsls	r3, r3, #2
 8016446:	3310      	adds	r3, #16
 8016448:	687a      	ldr	r2, [r7, #4]
 801644a:	18d3      	adds	r3, r2, r3
 801644c:	3304      	adds	r3, #4
 801644e:	e00d      	b.n	801646c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016450:	230e      	movs	r3, #14
 8016452:	18fb      	adds	r3, r7, r3
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	227f      	movs	r2, #127	@ 0x7f
 8016458:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801645a:	0013      	movs	r3, r2
 801645c:	009b      	lsls	r3, r3, #2
 801645e:	189b      	adds	r3, r3, r2
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	3351      	adds	r3, #81	@ 0x51
 8016464:	33ff      	adds	r3, #255	@ 0xff
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	18d3      	adds	r3, r2, r3
 801646a:	3304      	adds	r3, #4
 801646c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	2200      	movs	r2, #0
 8016472:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016474:	68b9      	ldr	r1, [r7, #8]
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2202      	movs	r2, #2
 801647a:	0018      	movs	r0, r3
 801647c:	f000 fcab 	bl	8016dd6 <USBD_CtlSendData>
              break;
 8016480:	e080      	b.n	8016584 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016482:	220e      	movs	r2, #14
 8016484:	18bb      	adds	r3, r7, r2
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	b25b      	sxtb	r3, r3
 801648a:	2b00      	cmp	r3, #0
 801648c:	da14      	bge.n	80164b8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801648e:	18bb      	adds	r3, r7, r2
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	220f      	movs	r2, #15
 8016494:	401a      	ands	r2, r3
 8016496:	6879      	ldr	r1, [r7, #4]
 8016498:	0013      	movs	r3, r2
 801649a:	009b      	lsls	r3, r3, #2
 801649c:	189b      	adds	r3, r3, r2
 801649e:	009b      	lsls	r3, r3, #2
 80164a0:	18cb      	adds	r3, r1, r3
 80164a2:	3318      	adds	r3, #24
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d11e      	bne.n	80164e8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80164aa:	683a      	ldr	r2, [r7, #0]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	0011      	movs	r1, r2
 80164b0:	0018      	movs	r0, r3
 80164b2:	f000 fc12 	bl	8016cda <USBD_CtlError>
                  break;
 80164b6:	e065      	b.n	8016584 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80164b8:	230e      	movs	r3, #14
 80164ba:	18fb      	adds	r3, r7, r3
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	220f      	movs	r2, #15
 80164c0:	401a      	ands	r2, r3
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	23ac      	movs	r3, #172	@ 0xac
 80164c6:	0059      	lsls	r1, r3, #1
 80164c8:	0013      	movs	r3, r2
 80164ca:	009b      	lsls	r3, r3, #2
 80164cc:	189b      	adds	r3, r3, r2
 80164ce:	009b      	lsls	r3, r3, #2
 80164d0:	18c3      	adds	r3, r0, r3
 80164d2:	185b      	adds	r3, r3, r1
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d106      	bne.n	80164e8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80164da:	683a      	ldr	r2, [r7, #0]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	0011      	movs	r1, r2
 80164e0:	0018      	movs	r0, r3
 80164e2:	f000 fbfa 	bl	8016cda <USBD_CtlError>
                  break;
 80164e6:	e04d      	b.n	8016584 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80164e8:	220e      	movs	r2, #14
 80164ea:	18bb      	adds	r3, r7, r2
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	b25b      	sxtb	r3, r3
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	da0c      	bge.n	801650e <USBD_StdEPReq+0x2c8>
 80164f4:	18bb      	adds	r3, r7, r2
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	227f      	movs	r2, #127	@ 0x7f
 80164fa:	401a      	ands	r2, r3
 80164fc:	0013      	movs	r3, r2
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	189b      	adds	r3, r3, r2
 8016502:	009b      	lsls	r3, r3, #2
 8016504:	3310      	adds	r3, #16
 8016506:	687a      	ldr	r2, [r7, #4]
 8016508:	18d3      	adds	r3, r2, r3
 801650a:	3304      	adds	r3, #4
 801650c:	e00d      	b.n	801652a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801650e:	230e      	movs	r3, #14
 8016510:	18fb      	adds	r3, r7, r3
 8016512:	781b      	ldrb	r3, [r3, #0]
 8016514:	227f      	movs	r2, #127	@ 0x7f
 8016516:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016518:	0013      	movs	r3, r2
 801651a:	009b      	lsls	r3, r3, #2
 801651c:	189b      	adds	r3, r3, r2
 801651e:	009b      	lsls	r3, r3, #2
 8016520:	3351      	adds	r3, #81	@ 0x51
 8016522:	33ff      	adds	r3, #255	@ 0xff
 8016524:	687a      	ldr	r2, [r7, #4]
 8016526:	18d3      	adds	r3, r2, r3
 8016528:	3304      	adds	r3, #4
 801652a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801652c:	220e      	movs	r2, #14
 801652e:	18bb      	adds	r3, r7, r2
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d003      	beq.n	801653e <USBD_StdEPReq+0x2f8>
 8016536:	18bb      	adds	r3, r7, r2
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b80      	cmp	r3, #128	@ 0x80
 801653c:	d103      	bne.n	8016546 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	2200      	movs	r2, #0
 8016542:	601a      	str	r2, [r3, #0]
 8016544:	e010      	b.n	8016568 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8016546:	230e      	movs	r3, #14
 8016548:	18fb      	adds	r3, r7, r3
 801654a:	781a      	ldrb	r2, [r3, #0]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	0011      	movs	r1, r2
 8016550:	0018      	movs	r0, r3
 8016552:	f001 f940 	bl	80177d6 <USBD_LL_IsStallEP>
 8016556:	1e03      	subs	r3, r0, #0
 8016558:	d003      	beq.n	8016562 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	2201      	movs	r2, #1
 801655e:	601a      	str	r2, [r3, #0]
 8016560:	e002      	b.n	8016568 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8016562:	68bb      	ldr	r3, [r7, #8]
 8016564:	2200      	movs	r2, #0
 8016566:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016568:	68b9      	ldr	r1, [r7, #8]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2202      	movs	r2, #2
 801656e:	0018      	movs	r0, r3
 8016570:	f000 fc31 	bl	8016dd6 <USBD_CtlSendData>
              break;
 8016574:	e006      	b.n	8016584 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8016576:	683a      	ldr	r2, [r7, #0]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	0011      	movs	r1, r2
 801657c:	0018      	movs	r0, r3
 801657e:	f000 fbac 	bl	8016cda <USBD_CtlError>
              break;
 8016582:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8016584:	e006      	b.n	8016594 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8016586:	683a      	ldr	r2, [r7, #0]
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	0011      	movs	r1, r2
 801658c:	0018      	movs	r0, r3
 801658e:	f000 fba4 	bl	8016cda <USBD_CtlError>
          break;
 8016592:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016594:	e006      	b.n	80165a4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8016596:	683a      	ldr	r2, [r7, #0]
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	0011      	movs	r1, r2
 801659c:	0018      	movs	r0, r3
 801659e:	f000 fb9c 	bl	8016cda <USBD_CtlError>
      break;
 80165a2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80165a4:	230f      	movs	r3, #15
 80165a6:	18fb      	adds	r3, r7, r3
 80165a8:	781b      	ldrb	r3, [r3, #0]
}
 80165aa:	0018      	movs	r0, r3
 80165ac:	46bd      	mov	sp, r7
 80165ae:	b004      	add	sp, #16
 80165b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080165b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b084      	sub	sp, #16
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
 80165bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80165be:	2308      	movs	r3, #8
 80165c0:	18fb      	adds	r3, r7, r3
 80165c2:	2200      	movs	r2, #0
 80165c4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80165c6:	2300      	movs	r3, #0
 80165c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80165ca:	230b      	movs	r3, #11
 80165cc:	18fb      	adds	r3, r7, r3
 80165ce:	2200      	movs	r2, #0
 80165d0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	885b      	ldrh	r3, [r3, #2]
 80165d6:	0a1b      	lsrs	r3, r3, #8
 80165d8:	b29b      	uxth	r3, r3
 80165da:	2b07      	cmp	r3, #7
 80165dc:	d900      	bls.n	80165e0 <USBD_GetDescriptor+0x2c>
 80165de:	e159      	b.n	8016894 <USBD_GetDescriptor+0x2e0>
 80165e0:	009a      	lsls	r2, r3, #2
 80165e2:	4bcb      	ldr	r3, [pc, #812]	@ (8016910 <USBD_GetDescriptor+0x35c>)
 80165e4:	18d3      	adds	r3, r2, r3
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	23ac      	movs	r3, #172	@ 0xac
 80165ee:	009b      	lsls	r3, r3, #2
 80165f0:	58d3      	ldr	r3, [r2, r3]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	687a      	ldr	r2, [r7, #4]
 80165f6:	7c12      	ldrb	r2, [r2, #16]
 80165f8:	2108      	movs	r1, #8
 80165fa:	1879      	adds	r1, r7, r1
 80165fc:	0010      	movs	r0, r2
 80165fe:	4798      	blx	r3
 8016600:	0003      	movs	r3, r0
 8016602:	60fb      	str	r3, [r7, #12]
      break;
 8016604:	e153      	b.n	80168ae <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	7c1b      	ldrb	r3, [r3, #16]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d10f      	bne.n	801662e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	23ad      	movs	r3, #173	@ 0xad
 8016612:	009b      	lsls	r3, r3, #2
 8016614:	58d3      	ldr	r3, [r2, r3]
 8016616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016618:	2208      	movs	r2, #8
 801661a:	18ba      	adds	r2, r7, r2
 801661c:	0010      	movs	r0, r2
 801661e:	4798      	blx	r3
 8016620:	0003      	movs	r3, r0
 8016622:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	3301      	adds	r3, #1
 8016628:	2202      	movs	r2, #2
 801662a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801662c:	e13f      	b.n	80168ae <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801662e:	687a      	ldr	r2, [r7, #4]
 8016630:	23ad      	movs	r3, #173	@ 0xad
 8016632:	009b      	lsls	r3, r3, #2
 8016634:	58d3      	ldr	r3, [r2, r3]
 8016636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016638:	2208      	movs	r2, #8
 801663a:	18ba      	adds	r2, r7, r2
 801663c:	0010      	movs	r0, r2
 801663e:	4798      	blx	r3
 8016640:	0003      	movs	r3, r0
 8016642:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	3301      	adds	r3, #1
 8016648:	2202      	movs	r2, #2
 801664a:	701a      	strb	r2, [r3, #0]
      break;
 801664c:	e12f      	b.n	80168ae <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	885b      	ldrh	r3, [r3, #2]
 8016652:	b2db      	uxtb	r3, r3
 8016654:	2b05      	cmp	r3, #5
 8016656:	d900      	bls.n	801665a <USBD_GetDescriptor+0xa6>
 8016658:	e0d0      	b.n	80167fc <USBD_GetDescriptor+0x248>
 801665a:	009a      	lsls	r2, r3, #2
 801665c:	4bad      	ldr	r3, [pc, #692]	@ (8016914 <USBD_GetDescriptor+0x360>)
 801665e:	18d3      	adds	r3, r2, r3
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	23ac      	movs	r3, #172	@ 0xac
 8016668:	009b      	lsls	r3, r3, #2
 801666a:	58d3      	ldr	r3, [r2, r3]
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d00d      	beq.n	801668e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	23ac      	movs	r3, #172	@ 0xac
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	58d3      	ldr	r3, [r2, r3]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	687a      	ldr	r2, [r7, #4]
 801667e:	7c12      	ldrb	r2, [r2, #16]
 8016680:	2108      	movs	r1, #8
 8016682:	1879      	adds	r1, r7, r1
 8016684:	0010      	movs	r0, r2
 8016686:	4798      	blx	r3
 8016688:	0003      	movs	r3, r0
 801668a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801668c:	e0c3      	b.n	8016816 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801668e:	683a      	ldr	r2, [r7, #0]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	0011      	movs	r1, r2
 8016694:	0018      	movs	r0, r3
 8016696:	f000 fb20 	bl	8016cda <USBD_CtlError>
            err++;
 801669a:	210b      	movs	r1, #11
 801669c:	187b      	adds	r3, r7, r1
 801669e:	781a      	ldrb	r2, [r3, #0]
 80166a0:	187b      	adds	r3, r7, r1
 80166a2:	3201      	adds	r2, #1
 80166a4:	701a      	strb	r2, [r3, #0]
          break;
 80166a6:	e0b6      	b.n	8016816 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80166a8:	687a      	ldr	r2, [r7, #4]
 80166aa:	23ac      	movs	r3, #172	@ 0xac
 80166ac:	009b      	lsls	r3, r3, #2
 80166ae:	58d3      	ldr	r3, [r2, r3]
 80166b0:	689b      	ldr	r3, [r3, #8]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00d      	beq.n	80166d2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80166b6:	687a      	ldr	r2, [r7, #4]
 80166b8:	23ac      	movs	r3, #172	@ 0xac
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	58d3      	ldr	r3, [r2, r3]
 80166be:	689b      	ldr	r3, [r3, #8]
 80166c0:	687a      	ldr	r2, [r7, #4]
 80166c2:	7c12      	ldrb	r2, [r2, #16]
 80166c4:	2108      	movs	r1, #8
 80166c6:	1879      	adds	r1, r7, r1
 80166c8:	0010      	movs	r0, r2
 80166ca:	4798      	blx	r3
 80166cc:	0003      	movs	r3, r0
 80166ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80166d0:	e0a1      	b.n	8016816 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80166d2:	683a      	ldr	r2, [r7, #0]
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	0011      	movs	r1, r2
 80166d8:	0018      	movs	r0, r3
 80166da:	f000 fafe 	bl	8016cda <USBD_CtlError>
            err++;
 80166de:	210b      	movs	r1, #11
 80166e0:	187b      	adds	r3, r7, r1
 80166e2:	781a      	ldrb	r2, [r3, #0]
 80166e4:	187b      	adds	r3, r7, r1
 80166e6:	3201      	adds	r2, #1
 80166e8:	701a      	strb	r2, [r3, #0]
          break;
 80166ea:	e094      	b.n	8016816 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80166ec:	687a      	ldr	r2, [r7, #4]
 80166ee:	23ac      	movs	r3, #172	@ 0xac
 80166f0:	009b      	lsls	r3, r3, #2
 80166f2:	58d3      	ldr	r3, [r2, r3]
 80166f4:	68db      	ldr	r3, [r3, #12]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d00d      	beq.n	8016716 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	23ac      	movs	r3, #172	@ 0xac
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	58d3      	ldr	r3, [r2, r3]
 8016702:	68db      	ldr	r3, [r3, #12]
 8016704:	687a      	ldr	r2, [r7, #4]
 8016706:	7c12      	ldrb	r2, [r2, #16]
 8016708:	2108      	movs	r1, #8
 801670a:	1879      	adds	r1, r7, r1
 801670c:	0010      	movs	r0, r2
 801670e:	4798      	blx	r3
 8016710:	0003      	movs	r3, r0
 8016712:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016714:	e07f      	b.n	8016816 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016716:	683a      	ldr	r2, [r7, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	0011      	movs	r1, r2
 801671c:	0018      	movs	r0, r3
 801671e:	f000 fadc 	bl	8016cda <USBD_CtlError>
            err++;
 8016722:	210b      	movs	r1, #11
 8016724:	187b      	adds	r3, r7, r1
 8016726:	781a      	ldrb	r2, [r3, #0]
 8016728:	187b      	adds	r3, r7, r1
 801672a:	3201      	adds	r2, #1
 801672c:	701a      	strb	r2, [r3, #0]
          break;
 801672e:	e072      	b.n	8016816 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016730:	687a      	ldr	r2, [r7, #4]
 8016732:	23ac      	movs	r3, #172	@ 0xac
 8016734:	009b      	lsls	r3, r3, #2
 8016736:	58d3      	ldr	r3, [r2, r3]
 8016738:	691b      	ldr	r3, [r3, #16]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d00d      	beq.n	801675a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801673e:	687a      	ldr	r2, [r7, #4]
 8016740:	23ac      	movs	r3, #172	@ 0xac
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	58d3      	ldr	r3, [r2, r3]
 8016746:	691b      	ldr	r3, [r3, #16]
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	7c12      	ldrb	r2, [r2, #16]
 801674c:	2108      	movs	r1, #8
 801674e:	1879      	adds	r1, r7, r1
 8016750:	0010      	movs	r0, r2
 8016752:	4798      	blx	r3
 8016754:	0003      	movs	r3, r0
 8016756:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016758:	e05d      	b.n	8016816 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801675a:	683a      	ldr	r2, [r7, #0]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	0011      	movs	r1, r2
 8016760:	0018      	movs	r0, r3
 8016762:	f000 faba 	bl	8016cda <USBD_CtlError>
            err++;
 8016766:	210b      	movs	r1, #11
 8016768:	187b      	adds	r3, r7, r1
 801676a:	781a      	ldrb	r2, [r3, #0]
 801676c:	187b      	adds	r3, r7, r1
 801676e:	3201      	adds	r2, #1
 8016770:	701a      	strb	r2, [r3, #0]
          break;
 8016772:	e050      	b.n	8016816 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	23ac      	movs	r3, #172	@ 0xac
 8016778:	009b      	lsls	r3, r3, #2
 801677a:	58d3      	ldr	r3, [r2, r3]
 801677c:	695b      	ldr	r3, [r3, #20]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d00d      	beq.n	801679e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016782:	687a      	ldr	r2, [r7, #4]
 8016784:	23ac      	movs	r3, #172	@ 0xac
 8016786:	009b      	lsls	r3, r3, #2
 8016788:	58d3      	ldr	r3, [r2, r3]
 801678a:	695b      	ldr	r3, [r3, #20]
 801678c:	687a      	ldr	r2, [r7, #4]
 801678e:	7c12      	ldrb	r2, [r2, #16]
 8016790:	2108      	movs	r1, #8
 8016792:	1879      	adds	r1, r7, r1
 8016794:	0010      	movs	r0, r2
 8016796:	4798      	blx	r3
 8016798:	0003      	movs	r3, r0
 801679a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801679c:	e03b      	b.n	8016816 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801679e:	683a      	ldr	r2, [r7, #0]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	0011      	movs	r1, r2
 80167a4:	0018      	movs	r0, r3
 80167a6:	f000 fa98 	bl	8016cda <USBD_CtlError>
            err++;
 80167aa:	210b      	movs	r1, #11
 80167ac:	187b      	adds	r3, r7, r1
 80167ae:	781a      	ldrb	r2, [r3, #0]
 80167b0:	187b      	adds	r3, r7, r1
 80167b2:	3201      	adds	r2, #1
 80167b4:	701a      	strb	r2, [r3, #0]
          break;
 80167b6:	e02e      	b.n	8016816 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80167b8:	687a      	ldr	r2, [r7, #4]
 80167ba:	23ac      	movs	r3, #172	@ 0xac
 80167bc:	009b      	lsls	r3, r3, #2
 80167be:	58d3      	ldr	r3, [r2, r3]
 80167c0:	699b      	ldr	r3, [r3, #24]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00d      	beq.n	80167e2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	23ac      	movs	r3, #172	@ 0xac
 80167ca:	009b      	lsls	r3, r3, #2
 80167cc:	58d3      	ldr	r3, [r2, r3]
 80167ce:	699b      	ldr	r3, [r3, #24]
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	7c12      	ldrb	r2, [r2, #16]
 80167d4:	2108      	movs	r1, #8
 80167d6:	1879      	adds	r1, r7, r1
 80167d8:	0010      	movs	r0, r2
 80167da:	4798      	blx	r3
 80167dc:	0003      	movs	r3, r0
 80167de:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80167e0:	e019      	b.n	8016816 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80167e2:	683a      	ldr	r2, [r7, #0]
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	0011      	movs	r1, r2
 80167e8:	0018      	movs	r0, r3
 80167ea:	f000 fa76 	bl	8016cda <USBD_CtlError>
            err++;
 80167ee:	210b      	movs	r1, #11
 80167f0:	187b      	adds	r3, r7, r1
 80167f2:	781a      	ldrb	r2, [r3, #0]
 80167f4:	187b      	adds	r3, r7, r1
 80167f6:	3201      	adds	r2, #1
 80167f8:	701a      	strb	r2, [r3, #0]
          break;
 80167fa:	e00c      	b.n	8016816 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80167fc:	683a      	ldr	r2, [r7, #0]
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	0011      	movs	r1, r2
 8016802:	0018      	movs	r0, r3
 8016804:	f000 fa69 	bl	8016cda <USBD_CtlError>
          err++;
 8016808:	210b      	movs	r1, #11
 801680a:	187b      	adds	r3, r7, r1
 801680c:	781a      	ldrb	r2, [r3, #0]
 801680e:	187b      	adds	r3, r7, r1
 8016810:	3201      	adds	r2, #1
 8016812:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8016814:	e04b      	b.n	80168ae <USBD_GetDescriptor+0x2fa>
 8016816:	e04a      	b.n	80168ae <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	7c1b      	ldrb	r3, [r3, #16]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d10b      	bne.n	8016838 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016820:	687a      	ldr	r2, [r7, #4]
 8016822:	23ad      	movs	r3, #173	@ 0xad
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	58d3      	ldr	r3, [r2, r3]
 8016828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801682a:	2208      	movs	r2, #8
 801682c:	18ba      	adds	r2, r7, r2
 801682e:	0010      	movs	r0, r2
 8016830:	4798      	blx	r3
 8016832:	0003      	movs	r3, r0
 8016834:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016836:	e03a      	b.n	80168ae <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8016838:	683a      	ldr	r2, [r7, #0]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	0011      	movs	r1, r2
 801683e:	0018      	movs	r0, r3
 8016840:	f000 fa4b 	bl	8016cda <USBD_CtlError>
        err++;
 8016844:	210b      	movs	r1, #11
 8016846:	187b      	adds	r3, r7, r1
 8016848:	781a      	ldrb	r2, [r3, #0]
 801684a:	187b      	adds	r3, r7, r1
 801684c:	3201      	adds	r2, #1
 801684e:	701a      	strb	r2, [r3, #0]
      break;
 8016850:	e02d      	b.n	80168ae <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	7c1b      	ldrb	r3, [r3, #16]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d10f      	bne.n	801687a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801685a:	687a      	ldr	r2, [r7, #4]
 801685c:	23ad      	movs	r3, #173	@ 0xad
 801685e:	009b      	lsls	r3, r3, #2
 8016860:	58d3      	ldr	r3, [r2, r3]
 8016862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016864:	2208      	movs	r2, #8
 8016866:	18ba      	adds	r2, r7, r2
 8016868:	0010      	movs	r0, r2
 801686a:	4798      	blx	r3
 801686c:	0003      	movs	r3, r0
 801686e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	3301      	adds	r3, #1
 8016874:	2207      	movs	r2, #7
 8016876:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016878:	e019      	b.n	80168ae <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801687a:	683a      	ldr	r2, [r7, #0]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	0011      	movs	r1, r2
 8016880:	0018      	movs	r0, r3
 8016882:	f000 fa2a 	bl	8016cda <USBD_CtlError>
        err++;
 8016886:	210b      	movs	r1, #11
 8016888:	187b      	adds	r3, r7, r1
 801688a:	781a      	ldrb	r2, [r3, #0]
 801688c:	187b      	adds	r3, r7, r1
 801688e:	3201      	adds	r2, #1
 8016890:	701a      	strb	r2, [r3, #0]
      break;
 8016892:	e00c      	b.n	80168ae <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8016894:	683a      	ldr	r2, [r7, #0]
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	0011      	movs	r1, r2
 801689a:	0018      	movs	r0, r3
 801689c:	f000 fa1d 	bl	8016cda <USBD_CtlError>
      err++;
 80168a0:	210b      	movs	r1, #11
 80168a2:	187b      	adds	r3, r7, r1
 80168a4:	781a      	ldrb	r2, [r3, #0]
 80168a6:	187b      	adds	r3, r7, r1
 80168a8:	3201      	adds	r2, #1
 80168aa:	701a      	strb	r2, [r3, #0]
      break;
 80168ac:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80168ae:	230b      	movs	r3, #11
 80168b0:	18fb      	adds	r3, r7, r3
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d127      	bne.n	8016908 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80168b8:	2108      	movs	r1, #8
 80168ba:	187b      	adds	r3, r7, r1
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d019      	beq.n	80168f6 <USBD_GetDescriptor+0x342>
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	88db      	ldrh	r3, [r3, #6]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d015      	beq.n	80168f6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	88da      	ldrh	r2, [r3, #6]
 80168ce:	187b      	adds	r3, r7, r1
 80168d0:	881b      	ldrh	r3, [r3, #0]
 80168d2:	1c18      	adds	r0, r3, #0
 80168d4:	1c11      	adds	r1, r2, #0
 80168d6:	b28a      	uxth	r2, r1
 80168d8:	b283      	uxth	r3, r0
 80168da:	429a      	cmp	r2, r3
 80168dc:	d900      	bls.n	80168e0 <USBD_GetDescriptor+0x32c>
 80168de:	1c01      	adds	r1, r0, #0
 80168e0:	b28a      	uxth	r2, r1
 80168e2:	2108      	movs	r1, #8
 80168e4:	187b      	adds	r3, r7, r1
 80168e6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80168e8:	187b      	adds	r3, r7, r1
 80168ea:	881a      	ldrh	r2, [r3, #0]
 80168ec:	68f9      	ldr	r1, [r7, #12]
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	0018      	movs	r0, r3
 80168f2:	f000 fa70 	bl	8016dd6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	88db      	ldrh	r3, [r3, #6]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d105      	bne.n	801690a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	0018      	movs	r0, r3
 8016902:	f000 fad2 	bl	8016eaa <USBD_CtlSendStatus>
 8016906:	e000      	b.n	801690a <USBD_GetDescriptor+0x356>
    return;
 8016908:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801690a:	46bd      	mov	sp, r7
 801690c:	b004      	add	sp, #16
 801690e:	bd80      	pop	{r7, pc}
 8016910:	0801c2ac 	.word	0x0801c2ac
 8016914:	0801c2cc 	.word	0x0801c2cc

08016918 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016918:	b590      	push	{r4, r7, lr}
 801691a:	b085      	sub	sp, #20
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	889b      	ldrh	r3, [r3, #4]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d13d      	bne.n	80169a6 <USBD_SetAddress+0x8e>
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	88db      	ldrh	r3, [r3, #6]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d139      	bne.n	80169a6 <USBD_SetAddress+0x8e>
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	885b      	ldrh	r3, [r3, #2]
 8016936:	2b7f      	cmp	r3, #127	@ 0x7f
 8016938:	d835      	bhi.n	80169a6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	885b      	ldrh	r3, [r3, #2]
 801693e:	b2da      	uxtb	r2, r3
 8016940:	230f      	movs	r3, #15
 8016942:	18fb      	adds	r3, r7, r3
 8016944:	217f      	movs	r1, #127	@ 0x7f
 8016946:	400a      	ands	r2, r1
 8016948:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801694a:	687a      	ldr	r2, [r7, #4]
 801694c:	23a7      	movs	r3, #167	@ 0xa7
 801694e:	009b      	lsls	r3, r3, #2
 8016950:	5cd3      	ldrb	r3, [r2, r3]
 8016952:	2b03      	cmp	r3, #3
 8016954:	d106      	bne.n	8016964 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8016956:	683a      	ldr	r2, [r7, #0]
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	0011      	movs	r1, r2
 801695c:	0018      	movs	r0, r3
 801695e:	f000 f9bc 	bl	8016cda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016962:	e027      	b.n	80169b4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	240f      	movs	r4, #15
 8016968:	193a      	adds	r2, r7, r4
 801696a:	4914      	ldr	r1, [pc, #80]	@ (80169bc <USBD_SetAddress+0xa4>)
 801696c:	7812      	ldrb	r2, [r2, #0]
 801696e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016970:	193b      	adds	r3, r7, r4
 8016972:	781a      	ldrb	r2, [r3, #0]
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	0011      	movs	r1, r2
 8016978:	0018      	movs	r0, r3
 801697a:	f000 ff5d 	bl	8017838 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	0018      	movs	r0, r3
 8016982:	f000 fa92 	bl	8016eaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016986:	193b      	adds	r3, r7, r4
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d005      	beq.n	801699a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	23a7      	movs	r3, #167	@ 0xa7
 8016992:	009b      	lsls	r3, r3, #2
 8016994:	2102      	movs	r1, #2
 8016996:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016998:	e00c      	b.n	80169b4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801699a:	687a      	ldr	r2, [r7, #4]
 801699c:	23a7      	movs	r3, #167	@ 0xa7
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	2101      	movs	r1, #1
 80169a2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169a4:	e006      	b.n	80169b4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80169a6:	683a      	ldr	r2, [r7, #0]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	0011      	movs	r1, r2
 80169ac:	0018      	movs	r0, r3
 80169ae:	f000 f994 	bl	8016cda <USBD_CtlError>
  }
}
 80169b2:	46c0      	nop			@ (mov r8, r8)
 80169b4:	46c0      	nop			@ (mov r8, r8)
 80169b6:	46bd      	mov	sp, r7
 80169b8:	b005      	add	sp, #20
 80169ba:	bd90      	pop	{r4, r7, pc}
 80169bc:	0000029e 	.word	0x0000029e

080169c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	885b      	ldrh	r3, [r3, #2]
 80169ce:	b2da      	uxtb	r2, r3
 80169d0:	4b4c      	ldr	r3, [pc, #304]	@ (8016b04 <USBD_SetConfig+0x144>)
 80169d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80169d4:	4b4b      	ldr	r3, [pc, #300]	@ (8016b04 <USBD_SetConfig+0x144>)
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	2b01      	cmp	r3, #1
 80169da:	d906      	bls.n	80169ea <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80169dc:	683a      	ldr	r2, [r7, #0]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	0011      	movs	r1, r2
 80169e2:	0018      	movs	r0, r3
 80169e4:	f000 f979 	bl	8016cda <USBD_CtlError>
 80169e8:	e088      	b.n	8016afc <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80169ea:	687a      	ldr	r2, [r7, #4]
 80169ec:	23a7      	movs	r3, #167	@ 0xa7
 80169ee:	009b      	lsls	r3, r3, #2
 80169f0:	5cd3      	ldrb	r3, [r2, r3]
 80169f2:	2b02      	cmp	r3, #2
 80169f4:	d002      	beq.n	80169fc <USBD_SetConfig+0x3c>
 80169f6:	2b03      	cmp	r3, #3
 80169f8:	d029      	beq.n	8016a4e <USBD_SetConfig+0x8e>
 80169fa:	e071      	b.n	8016ae0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80169fc:	4b41      	ldr	r3, [pc, #260]	@ (8016b04 <USBD_SetConfig+0x144>)
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d01f      	beq.n	8016a44 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8016a04:	4b3f      	ldr	r3, [pc, #252]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	001a      	movs	r2, r3
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016a0e:	687a      	ldr	r2, [r7, #4]
 8016a10:	23a7      	movs	r3, #167	@ 0xa7
 8016a12:	009b      	lsls	r3, r3, #2
 8016a14:	2103      	movs	r1, #3
 8016a16:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016a18:	4b3a      	ldr	r3, [pc, #232]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016a1a:	781a      	ldrb	r2, [r3, #0]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	0011      	movs	r1, r2
 8016a20:	0018      	movs	r0, r3
 8016a22:	f7ff f8c6 	bl	8015bb2 <USBD_SetClassConfig>
 8016a26:	0003      	movs	r3, r0
 8016a28:	2b02      	cmp	r3, #2
 8016a2a:	d106      	bne.n	8016a3a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8016a2c:	683a      	ldr	r2, [r7, #0]
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	0011      	movs	r1, r2
 8016a32:	0018      	movs	r0, r3
 8016a34:	f000 f951 	bl	8016cda <USBD_CtlError>
            return;
 8016a38:	e060      	b.n	8016afc <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	0018      	movs	r0, r3
 8016a3e:	f000 fa34 	bl	8016eaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8016a42:	e05b      	b.n	8016afc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	0018      	movs	r0, r3
 8016a48:	f000 fa2f 	bl	8016eaa <USBD_CtlSendStatus>
        break;
 8016a4c:	e056      	b.n	8016afc <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8016a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016a50:	781b      	ldrb	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d115      	bne.n	8016a82 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	23a7      	movs	r3, #167	@ 0xa7
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	2102      	movs	r1, #2
 8016a5e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8016a60:	4b28      	ldr	r3, [pc, #160]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016a62:	781b      	ldrb	r3, [r3, #0]
 8016a64:	001a      	movs	r2, r3
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8016a6a:	4b26      	ldr	r3, [pc, #152]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016a6c:	781a      	ldrb	r2, [r3, #0]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	0011      	movs	r1, r2
 8016a72:	0018      	movs	r0, r3
 8016a74:	f7ff f8c4 	bl	8015c00 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	0018      	movs	r0, r3
 8016a7c:	f000 fa15 	bl	8016eaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8016a80:	e03c      	b.n	8016afc <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8016a82:	4b20      	ldr	r3, [pc, #128]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	001a      	movs	r2, r3
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	685b      	ldr	r3, [r3, #4]
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d022      	beq.n	8016ad6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	685b      	ldr	r3, [r3, #4]
 8016a94:	b2da      	uxtb	r2, r3
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	0011      	movs	r1, r2
 8016a9a:	0018      	movs	r0, r3
 8016a9c:	f7ff f8b0 	bl	8015c00 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8016aa0:	4b18      	ldr	r3, [pc, #96]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	001a      	movs	r2, r3
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016aaa:	4b16      	ldr	r3, [pc, #88]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016aac:	781a      	ldrb	r2, [r3, #0]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	0011      	movs	r1, r2
 8016ab2:	0018      	movs	r0, r3
 8016ab4:	f7ff f87d 	bl	8015bb2 <USBD_SetClassConfig>
 8016ab8:	0003      	movs	r3, r0
 8016aba:	2b02      	cmp	r3, #2
 8016abc:	d106      	bne.n	8016acc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8016abe:	683a      	ldr	r2, [r7, #0]
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	0011      	movs	r1, r2
 8016ac4:	0018      	movs	r0, r3
 8016ac6:	f000 f908 	bl	8016cda <USBD_CtlError>
            return;
 8016aca:	e017      	b.n	8016afc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	0018      	movs	r0, r3
 8016ad0:	f000 f9eb 	bl	8016eaa <USBD_CtlSendStatus>
        break;
 8016ad4:	e012      	b.n	8016afc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	0018      	movs	r0, r3
 8016ada:	f000 f9e6 	bl	8016eaa <USBD_CtlSendStatus>
        break;
 8016ade:	e00d      	b.n	8016afc <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016ae0:	683a      	ldr	r2, [r7, #0]
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	0011      	movs	r1, r2
 8016ae6:	0018      	movs	r0, r3
 8016ae8:	f000 f8f7 	bl	8016cda <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8016aec:	4b05      	ldr	r3, [pc, #20]	@ (8016b04 <USBD_SetConfig+0x144>)
 8016aee:	781a      	ldrb	r2, [r3, #0]
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	0011      	movs	r1, r2
 8016af4:	0018      	movs	r0, r3
 8016af6:	f7ff f883 	bl	8015c00 <USBD_ClrClassConfig>
        break;
 8016afa:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8016afc:	46bd      	mov	sp, r7
 8016afe:	b002      	add	sp, #8
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	46c0      	nop			@ (mov r8, r8)
 8016b04:	20002b74 	.word	0x20002b74

08016b08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b082      	sub	sp, #8
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	88db      	ldrh	r3, [r3, #6]
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	d006      	beq.n	8016b28 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8016b1a:	683a      	ldr	r2, [r7, #0]
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	0011      	movs	r1, r2
 8016b20:	0018      	movs	r0, r3
 8016b22:	f000 f8da 	bl	8016cda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016b26:	e026      	b.n	8016b76 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8016b28:	687a      	ldr	r2, [r7, #4]
 8016b2a:	23a7      	movs	r3, #167	@ 0xa7
 8016b2c:	009b      	lsls	r3, r3, #2
 8016b2e:	5cd3      	ldrb	r3, [r2, r3]
 8016b30:	2b02      	cmp	r3, #2
 8016b32:	dc02      	bgt.n	8016b3a <USBD_GetConfig+0x32>
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	dc03      	bgt.n	8016b40 <USBD_GetConfig+0x38>
 8016b38:	e016      	b.n	8016b68 <USBD_GetConfig+0x60>
 8016b3a:	2b03      	cmp	r3, #3
 8016b3c:	d00c      	beq.n	8016b58 <USBD_GetConfig+0x50>
 8016b3e:	e013      	b.n	8016b68 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2200      	movs	r2, #0
 8016b44:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	3308      	adds	r3, #8
 8016b4a:	0019      	movs	r1, r3
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2201      	movs	r2, #1
 8016b50:	0018      	movs	r0, r3
 8016b52:	f000 f940 	bl	8016dd6 <USBD_CtlSendData>
        break;
 8016b56:	e00e      	b.n	8016b76 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	1d19      	adds	r1, r3, #4
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2201      	movs	r2, #1
 8016b60:	0018      	movs	r0, r3
 8016b62:	f000 f938 	bl	8016dd6 <USBD_CtlSendData>
        break;
 8016b66:	e006      	b.n	8016b76 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8016b68:	683a      	ldr	r2, [r7, #0]
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	0011      	movs	r1, r2
 8016b6e:	0018      	movs	r0, r3
 8016b70:	f000 f8b3 	bl	8016cda <USBD_CtlError>
        break;
 8016b74:	46c0      	nop			@ (mov r8, r8)
}
 8016b76:	46c0      	nop			@ (mov r8, r8)
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	b002      	add	sp, #8
 8016b7c:	bd80      	pop	{r7, pc}

08016b7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b7e:	b580      	push	{r7, lr}
 8016b80:	b082      	sub	sp, #8
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
 8016b86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	23a7      	movs	r3, #167	@ 0xa7
 8016b8c:	009b      	lsls	r3, r3, #2
 8016b8e:	5cd3      	ldrb	r3, [r2, r3]
 8016b90:	3b01      	subs	r3, #1
 8016b92:	2b02      	cmp	r3, #2
 8016b94:	d822      	bhi.n	8016bdc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016b96:	683b      	ldr	r3, [r7, #0]
 8016b98:	88db      	ldrh	r3, [r3, #6]
 8016b9a:	2b02      	cmp	r3, #2
 8016b9c:	d006      	beq.n	8016bac <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8016b9e:	683a      	ldr	r2, [r7, #0]
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	0011      	movs	r1, r2
 8016ba4:	0018      	movs	r0, r3
 8016ba6:	f000 f898 	bl	8016cda <USBD_CtlError>
        break;
 8016baa:	e01e      	b.n	8016bea <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2201      	movs	r2, #1
 8016bb0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8016bb2:	687a      	ldr	r2, [r7, #4]
 8016bb4:	23a9      	movs	r3, #169	@ 0xa9
 8016bb6:	009b      	lsls	r3, r3, #2
 8016bb8:	58d3      	ldr	r3, [r2, r3]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d005      	beq.n	8016bca <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	68db      	ldr	r3, [r3, #12]
 8016bc2:	2202      	movs	r2, #2
 8016bc4:	431a      	orrs	r2, r3
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	330c      	adds	r3, #12
 8016bce:	0019      	movs	r1, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2202      	movs	r2, #2
 8016bd4:	0018      	movs	r0, r3
 8016bd6:	f000 f8fe 	bl	8016dd6 <USBD_CtlSendData>
      break;
 8016bda:	e006      	b.n	8016bea <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016bdc:	683a      	ldr	r2, [r7, #0]
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	0011      	movs	r1, r2
 8016be2:	0018      	movs	r0, r3
 8016be4:	f000 f879 	bl	8016cda <USBD_CtlError>
      break;
 8016be8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016bea:	46c0      	nop			@ (mov r8, r8)
 8016bec:	46bd      	mov	sp, r7
 8016bee:	b002      	add	sp, #8
 8016bf0:	bd80      	pop	{r7, pc}

08016bf2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016bf2:	b580      	push	{r7, lr}
 8016bf4:	b082      	sub	sp, #8
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	6078      	str	r0, [r7, #4]
 8016bfa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	885b      	ldrh	r3, [r3, #2]
 8016c00:	2b01      	cmp	r3, #1
 8016c02:	d108      	bne.n	8016c16 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	23a9      	movs	r3, #169	@ 0xa9
 8016c08:	009b      	lsls	r3, r3, #2
 8016c0a:	2101      	movs	r1, #1
 8016c0c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	0018      	movs	r0, r3
 8016c12:	f000 f94a 	bl	8016eaa <USBD_CtlSendStatus>
  }
}
 8016c16:	46c0      	nop			@ (mov r8, r8)
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	b002      	add	sp, #8
 8016c1c:	bd80      	pop	{r7, pc}

08016c1e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016c1e:	b580      	push	{r7, lr}
 8016c20:	b082      	sub	sp, #8
 8016c22:	af00      	add	r7, sp, #0
 8016c24:	6078      	str	r0, [r7, #4]
 8016c26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016c28:	687a      	ldr	r2, [r7, #4]
 8016c2a:	23a7      	movs	r3, #167	@ 0xa7
 8016c2c:	009b      	lsls	r3, r3, #2
 8016c2e:	5cd3      	ldrb	r3, [r2, r3]
 8016c30:	3b01      	subs	r3, #1
 8016c32:	2b02      	cmp	r3, #2
 8016c34:	d80d      	bhi.n	8016c52 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	885b      	ldrh	r3, [r3, #2]
 8016c3a:	2b01      	cmp	r3, #1
 8016c3c:	d110      	bne.n	8016c60 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8016c3e:	687a      	ldr	r2, [r7, #4]
 8016c40:	23a9      	movs	r3, #169	@ 0xa9
 8016c42:	009b      	lsls	r3, r3, #2
 8016c44:	2100      	movs	r1, #0
 8016c46:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	0018      	movs	r0, r3
 8016c4c:	f000 f92d 	bl	8016eaa <USBD_CtlSendStatus>
      }
      break;
 8016c50:	e006      	b.n	8016c60 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8016c52:	683a      	ldr	r2, [r7, #0]
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	0011      	movs	r1, r2
 8016c58:	0018      	movs	r0, r3
 8016c5a:	f000 f83e 	bl	8016cda <USBD_CtlError>
      break;
 8016c5e:	e000      	b.n	8016c62 <USBD_ClrFeature+0x44>
      break;
 8016c60:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016c62:	46c0      	nop			@ (mov r8, r8)
 8016c64:	46bd      	mov	sp, r7
 8016c66:	b002      	add	sp, #8
 8016c68:	bd80      	pop	{r7, pc}

08016c6a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016c6a:	b580      	push	{r7, lr}
 8016c6c:	b082      	sub	sp, #8
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	6078      	str	r0, [r7, #4]
 8016c72:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	781a      	ldrb	r2, [r3, #0]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	785a      	ldrb	r2, [r3, #1]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	3302      	adds	r3, #2
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	001a      	movs	r2, r3
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	3303      	adds	r3, #3
 8016c90:	781b      	ldrb	r3, [r3, #0]
 8016c92:	021b      	lsls	r3, r3, #8
 8016c94:	b29b      	uxth	r3, r3
 8016c96:	18d3      	adds	r3, r2, r3
 8016c98:	b29a      	uxth	r2, r3
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	3304      	adds	r3, #4
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	001a      	movs	r2, r3
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	3305      	adds	r3, #5
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	021b      	lsls	r3, r3, #8
 8016cae:	b29b      	uxth	r3, r3
 8016cb0:	18d3      	adds	r3, r2, r3
 8016cb2:	b29a      	uxth	r2, r3
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	3306      	adds	r3, #6
 8016cbc:	781b      	ldrb	r3, [r3, #0]
 8016cbe:	001a      	movs	r2, r3
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	3307      	adds	r3, #7
 8016cc4:	781b      	ldrb	r3, [r3, #0]
 8016cc6:	021b      	lsls	r3, r3, #8
 8016cc8:	b29b      	uxth	r3, r3
 8016cca:	18d3      	adds	r3, r2, r3
 8016ccc:	b29a      	uxth	r2, r3
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	80da      	strh	r2, [r3, #6]

}
 8016cd2:	46c0      	nop			@ (mov r8, r8)
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	b002      	add	sp, #8
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b082      	sub	sp, #8
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	6078      	str	r0, [r7, #4]
 8016ce2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2180      	movs	r1, #128	@ 0x80
 8016ce8:	0018      	movs	r0, r3
 8016cea:	f000 fd1e 	bl	801772a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2100      	movs	r1, #0
 8016cf2:	0018      	movs	r0, r3
 8016cf4:	f000 fd19 	bl	801772a <USBD_LL_StallEP>
}
 8016cf8:	46c0      	nop			@ (mov r8, r8)
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	b002      	add	sp, #8
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016d00:	b590      	push	{r4, r7, lr}
 8016d02:	b087      	sub	sp, #28
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	60f8      	str	r0, [r7, #12]
 8016d08:	60b9      	str	r1, [r7, #8]
 8016d0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016d0c:	2417      	movs	r4, #23
 8016d0e:	193b      	adds	r3, r7, r4
 8016d10:	2200      	movs	r2, #0
 8016d12:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d03c      	beq.n	8016d94 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	0018      	movs	r0, r3
 8016d1e:	f000 f83d 	bl	8016d9c <USBD_GetLen>
 8016d22:	0003      	movs	r3, r0
 8016d24:	3301      	adds	r3, #1
 8016d26:	b29b      	uxth	r3, r3
 8016d28:	18db      	adds	r3, r3, r3
 8016d2a:	b29a      	uxth	r2, r3
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8016d30:	193b      	adds	r3, r7, r4
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	193a      	adds	r2, r7, r4
 8016d36:	1c59      	adds	r1, r3, #1
 8016d38:	7011      	strb	r1, [r2, #0]
 8016d3a:	001a      	movs	r2, r3
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	189b      	adds	r3, r3, r2
 8016d40:	687a      	ldr	r2, [r7, #4]
 8016d42:	7812      	ldrb	r2, [r2, #0]
 8016d44:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8016d46:	193b      	adds	r3, r7, r4
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	193a      	adds	r2, r7, r4
 8016d4c:	1c59      	adds	r1, r3, #1
 8016d4e:	7011      	strb	r1, [r2, #0]
 8016d50:	001a      	movs	r2, r3
 8016d52:	68bb      	ldr	r3, [r7, #8]
 8016d54:	189b      	adds	r3, r3, r2
 8016d56:	2203      	movs	r2, #3
 8016d58:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8016d5a:	e017      	b.n	8016d8c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	1c5a      	adds	r2, r3, #1
 8016d60:	60fa      	str	r2, [r7, #12]
 8016d62:	2417      	movs	r4, #23
 8016d64:	193a      	adds	r2, r7, r4
 8016d66:	7812      	ldrb	r2, [r2, #0]
 8016d68:	1939      	adds	r1, r7, r4
 8016d6a:	1c50      	adds	r0, r2, #1
 8016d6c:	7008      	strb	r0, [r1, #0]
 8016d6e:	0011      	movs	r1, r2
 8016d70:	68ba      	ldr	r2, [r7, #8]
 8016d72:	1852      	adds	r2, r2, r1
 8016d74:	781b      	ldrb	r3, [r3, #0]
 8016d76:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8016d78:	193b      	adds	r3, r7, r4
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	193a      	adds	r2, r7, r4
 8016d7e:	1c59      	adds	r1, r3, #1
 8016d80:	7011      	strb	r1, [r2, #0]
 8016d82:	001a      	movs	r2, r3
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	189b      	adds	r3, r3, r2
 8016d88:	2200      	movs	r2, #0
 8016d8a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	781b      	ldrb	r3, [r3, #0]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d1e3      	bne.n	8016d5c <USBD_GetString+0x5c>
    }
  }
}
 8016d94:	46c0      	nop			@ (mov r8, r8)
 8016d96:	46bd      	mov	sp, r7
 8016d98:	b007      	add	sp, #28
 8016d9a:	bd90      	pop	{r4, r7, pc}

08016d9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016da4:	230f      	movs	r3, #15
 8016da6:	18fb      	adds	r3, r7, r3
 8016da8:	2200      	movs	r2, #0
 8016daa:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8016dac:	e008      	b.n	8016dc0 <USBD_GetLen+0x24>
  {
    len++;
 8016dae:	210f      	movs	r1, #15
 8016db0:	187b      	adds	r3, r7, r1
 8016db2:	781a      	ldrb	r2, [r3, #0]
 8016db4:	187b      	adds	r3, r7, r1
 8016db6:	3201      	adds	r2, #1
 8016db8:	701a      	strb	r2, [r3, #0]
    buf++;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	781b      	ldrb	r3, [r3, #0]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d1f2      	bne.n	8016dae <USBD_GetLen+0x12>
  }

  return len;
 8016dc8:	230f      	movs	r3, #15
 8016dca:	18fb      	adds	r3, r7, r3
 8016dcc:	781b      	ldrb	r3, [r3, #0]
}
 8016dce:	0018      	movs	r0, r3
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	b004      	add	sp, #16
 8016dd4:	bd80      	pop	{r7, pc}

08016dd6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8016dd6:	b580      	push	{r7, lr}
 8016dd8:	b084      	sub	sp, #16
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	60f8      	str	r0, [r7, #12]
 8016dde:	60b9      	str	r1, [r7, #8]
 8016de0:	1dbb      	adds	r3, r7, #6
 8016de2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016de4:	68fa      	ldr	r2, [r7, #12]
 8016de6:	23a5      	movs	r3, #165	@ 0xa5
 8016de8:	009b      	lsls	r3, r3, #2
 8016dea:	2102      	movs	r1, #2
 8016dec:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8016dee:	1dbb      	adds	r3, r7, #6
 8016df0:	881a      	ldrh	r2, [r3, #0]
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8016df6:	1dbb      	adds	r3, r7, #6
 8016df8:	881a      	ldrh	r2, [r3, #0]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016dfe:	1dbb      	adds	r3, r7, #6
 8016e00:	881b      	ldrh	r3, [r3, #0]
 8016e02:	68ba      	ldr	r2, [r7, #8]
 8016e04:	68f8      	ldr	r0, [r7, #12]
 8016e06:	2100      	movs	r1, #0
 8016e08:	f000 fd41 	bl	801788e <USBD_LL_Transmit>

  return USBD_OK;
 8016e0c:	2300      	movs	r3, #0
}
 8016e0e:	0018      	movs	r0, r3
 8016e10:	46bd      	mov	sp, r7
 8016e12:	b004      	add	sp, #16
 8016e14:	bd80      	pop	{r7, pc}

08016e16 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8016e16:	b580      	push	{r7, lr}
 8016e18:	b084      	sub	sp, #16
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	60f8      	str	r0, [r7, #12]
 8016e1e:	60b9      	str	r1, [r7, #8]
 8016e20:	1dbb      	adds	r3, r7, #6
 8016e22:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016e24:	1dbb      	adds	r3, r7, #6
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	68ba      	ldr	r2, [r7, #8]
 8016e2a:	68f8      	ldr	r0, [r7, #12]
 8016e2c:	2100      	movs	r1, #0
 8016e2e:	f000 fd2e 	bl	801788e <USBD_LL_Transmit>

  return USBD_OK;
 8016e32:	2300      	movs	r3, #0
}
 8016e34:	0018      	movs	r0, r3
 8016e36:	46bd      	mov	sp, r7
 8016e38:	b004      	add	sp, #16
 8016e3a:	bd80      	pop	{r7, pc}

08016e3c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b084      	sub	sp, #16
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	1dbb      	adds	r3, r7, #6
 8016e48:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016e4a:	68fa      	ldr	r2, [r7, #12]
 8016e4c:	23a5      	movs	r3, #165	@ 0xa5
 8016e4e:	009b      	lsls	r3, r3, #2
 8016e50:	2103      	movs	r1, #3
 8016e52:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016e54:	1dbb      	adds	r3, r7, #6
 8016e56:	8819      	ldrh	r1, [r3, #0]
 8016e58:	68fa      	ldr	r2, [r7, #12]
 8016e5a:	23ae      	movs	r3, #174	@ 0xae
 8016e5c:	005b      	lsls	r3, r3, #1
 8016e5e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8016e60:	1dbb      	adds	r3, r7, #6
 8016e62:	8819      	ldrh	r1, [r3, #0]
 8016e64:	68fa      	ldr	r2, [r7, #12]
 8016e66:	23b0      	movs	r3, #176	@ 0xb0
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016e6c:	1dbb      	adds	r3, r7, #6
 8016e6e:	881b      	ldrh	r3, [r3, #0]
 8016e70:	68ba      	ldr	r2, [r7, #8]
 8016e72:	68f8      	ldr	r0, [r7, #12]
 8016e74:	2100      	movs	r1, #0
 8016e76:	f000 fd41 	bl	80178fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e7a:	2300      	movs	r3, #0
}
 8016e7c:	0018      	movs	r0, r3
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	b004      	add	sp, #16
 8016e82:	bd80      	pop	{r7, pc}

08016e84 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	60f8      	str	r0, [r7, #12]
 8016e8c:	60b9      	str	r1, [r7, #8]
 8016e8e:	1dbb      	adds	r3, r7, #6
 8016e90:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016e92:	1dbb      	adds	r3, r7, #6
 8016e94:	881b      	ldrh	r3, [r3, #0]
 8016e96:	68ba      	ldr	r2, [r7, #8]
 8016e98:	68f8      	ldr	r0, [r7, #12]
 8016e9a:	2100      	movs	r1, #0
 8016e9c:	f000 fd2e 	bl	80178fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	0018      	movs	r0, r3
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	b004      	add	sp, #16
 8016ea8:	bd80      	pop	{r7, pc}

08016eaa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016eaa:	b580      	push	{r7, lr}
 8016eac:	b082      	sub	sp, #8
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016eb2:	687a      	ldr	r2, [r7, #4]
 8016eb4:	23a5      	movs	r3, #165	@ 0xa5
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	2104      	movs	r1, #4
 8016eba:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	2100      	movs	r1, #0
 8016ec4:	f000 fce3 	bl	801788e <USBD_LL_Transmit>

  return USBD_OK;
 8016ec8:	2300      	movs	r3, #0
}
 8016eca:	0018      	movs	r0, r3
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	b002      	add	sp, #8
 8016ed0:	bd80      	pop	{r7, pc}

08016ed2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016ed2:	b580      	push	{r7, lr}
 8016ed4:	b082      	sub	sp, #8
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016eda:	687a      	ldr	r2, [r7, #4]
 8016edc:	23a5      	movs	r3, #165	@ 0xa5
 8016ede:	009b      	lsls	r3, r3, #2
 8016ee0:	2105      	movs	r1, #5
 8016ee2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	2200      	movs	r2, #0
 8016eea:	2100      	movs	r1, #0
 8016eec:	f000 fd06 	bl	80178fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016ef0:	2300      	movs	r3, #0
}
 8016ef2:	0018      	movs	r0, r3
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	b002      	add	sp, #8
 8016ef8:	bd80      	pop	{r7, pc}
	...

08016efc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016f00:	4914      	ldr	r1, [pc, #80]	@ (8016f54 <MX_USB_DEVICE_Init+0x58>)
 8016f02:	4b15      	ldr	r3, [pc, #84]	@ (8016f58 <MX_USB_DEVICE_Init+0x5c>)
 8016f04:	2200      	movs	r2, #0
 8016f06:	0018      	movs	r0, r3
 8016f08:	f7fe fdec 	bl	8015ae4 <USBD_Init>
 8016f0c:	1e03      	subs	r3, r0, #0
 8016f0e:	d001      	beq.n	8016f14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016f10:	f7ef fc0c 	bl	800672c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016f14:	4a11      	ldr	r2, [pc, #68]	@ (8016f5c <MX_USB_DEVICE_Init+0x60>)
 8016f16:	4b10      	ldr	r3, [pc, #64]	@ (8016f58 <MX_USB_DEVICE_Init+0x5c>)
 8016f18:	0011      	movs	r1, r2
 8016f1a:	0018      	movs	r0, r3
 8016f1c:	f7fe fe13 	bl	8015b46 <USBD_RegisterClass>
 8016f20:	1e03      	subs	r3, r0, #0
 8016f22:	d001      	beq.n	8016f28 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8016f24:	f7ef fc02 	bl	800672c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016f28:	4a0d      	ldr	r2, [pc, #52]	@ (8016f60 <MX_USB_DEVICE_Init+0x64>)
 8016f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8016f58 <MX_USB_DEVICE_Init+0x5c>)
 8016f2c:	0011      	movs	r1, r2
 8016f2e:	0018      	movs	r0, r3
 8016f30:	f7fe fd28 	bl	8015984 <USBD_CDC_RegisterInterface>
 8016f34:	1e03      	subs	r3, r0, #0
 8016f36:	d001      	beq.n	8016f3c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8016f38:	f7ef fbf8 	bl	800672c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016f3c:	4b06      	ldr	r3, [pc, #24]	@ (8016f58 <MX_USB_DEVICE_Init+0x5c>)
 8016f3e:	0018      	movs	r0, r3
 8016f40:	f7fe fe21 	bl	8015b86 <USBD_Start>
 8016f44:	1e03      	subs	r3, r0, #0
 8016f46:	d001      	beq.n	8016f4c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8016f48:	f7ef fbf0 	bl	800672c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016f4c:	46c0      	nop			@ (mov r8, r8)
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	46c0      	nop			@ (mov r8, r8)
 8016f54:	20000198 	.word	0x20000198
 8016f58:	20002b78 	.word	0x20002b78
 8016f5c:	20000084 	.word	0x20000084
 8016f60:	20000188 	.word	0x20000188

08016f64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016f68:	4907      	ldr	r1, [pc, #28]	@ (8016f88 <CDC_Init_FS+0x24>)
 8016f6a:	4b08      	ldr	r3, [pc, #32]	@ (8016f8c <CDC_Init_FS+0x28>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	0018      	movs	r0, r3
 8016f70:	f7fe fd23 	bl	80159ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016f74:	4a06      	ldr	r2, [pc, #24]	@ (8016f90 <CDC_Init_FS+0x2c>)
 8016f76:	4b05      	ldr	r3, [pc, #20]	@ (8016f8c <CDC_Init_FS+0x28>)
 8016f78:	0011      	movs	r1, r2
 8016f7a:	0018      	movs	r0, r3
 8016f7c:	f7fe fd39 	bl	80159f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016f80:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016f82:	0018      	movs	r0, r3
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}
 8016f88:	200032fc 	.word	0x200032fc
 8016f8c:	20002b78 	.word	0x20002b78
 8016f90:	20002efc 	.word	0x20002efc

08016f94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016f98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016f9a:	0018      	movs	r0, r3
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6039      	str	r1, [r7, #0]
 8016fa8:	0011      	movs	r1, r2
 8016faa:	1dfb      	adds	r3, r7, #7
 8016fac:	1c02      	adds	r2, r0, #0
 8016fae:	701a      	strb	r2, [r3, #0]
 8016fb0:	1d3b      	adds	r3, r7, #4
 8016fb2:	1c0a      	adds	r2, r1, #0
 8016fb4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016fb6:	1dfb      	adds	r3, r7, #7
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	2b23      	cmp	r3, #35	@ 0x23
 8016fbc:	d804      	bhi.n	8016fc8 <CDC_Control_FS+0x28>
 8016fbe:	009a      	lsls	r2, r3, #2
 8016fc0:	4b04      	ldr	r3, [pc, #16]	@ (8016fd4 <CDC_Control_FS+0x34>)
 8016fc2:	18d3      	adds	r3, r2, r3
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016fc8:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8016fca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016fcc:	0018      	movs	r0, r3
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	b002      	add	sp, #8
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	0801c2e4 	.word	0x0801c2e4

08016fd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b082      	sub	sp, #8
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016fe2:	4b12      	ldr	r3, [pc, #72]	@ (801702c <CDC_Receive_FS+0x54>)
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d013      	beq.n	8017012 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	b29a      	uxth	r2, r3
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	425b      	negs	r3, r3
 8016ff4:	6879      	ldr	r1, [r7, #4]
 8016ff6:	480e      	ldr	r0, [pc, #56]	@ (8017030 <CDC_Receive_FS+0x58>)
 8016ff8:	f7fa fd3a 	bl	8011a70 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8017034 <CDC_Receive_FS+0x5c>)
 8017000:	0011      	movs	r1, r2
 8017002:	0018      	movs	r0, r3
 8017004:	f7fe fcf5 	bl	80159f2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017008:	4b0a      	ldr	r3, [pc, #40]	@ (8017034 <CDC_Receive_FS+0x5c>)
 801700a:	0018      	movs	r0, r3
 801700c:	f7fe fd3c 	bl	8015a88 <USBD_CDC_ReceivePacket>
 8017010:	e006      	b.n	8017020 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	681a      	ldr	r2, [r3, #0]
 8017016:	4b08      	ldr	r3, [pc, #32]	@ (8017038 <CDC_Receive_FS+0x60>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	18d2      	adds	r2, r2, r3
 801701c:	4b06      	ldr	r3, [pc, #24]	@ (8017038 <CDC_Receive_FS+0x60>)
 801701e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8017020:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017022:	0018      	movs	r0, r3
 8017024:	46bd      	mov	sp, r7
 8017026:	b002      	add	sp, #8
 8017028:	bd80      	pop	{r7, pc}
 801702a:	46c0      	nop			@ (mov r8, r8)
 801702c:	20002e3c 	.word	0x20002e3c
 8017030:	20002e40 	.word	0x20002e40
 8017034:	20002b78 	.word	0x20002b78
 8017038:	20002ef8 	.word	0x20002ef8

0801703c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801703c:	b5b0      	push	{r4, r5, r7, lr}
 801703e:	b084      	sub	sp, #16
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	000a      	movs	r2, r1
 8017046:	1cbb      	adds	r3, r7, #2
 8017048:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801704a:	230f      	movs	r3, #15
 801704c:	18fb      	adds	r3, r7, r3
 801704e:	2200      	movs	r2, #0
 8017050:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017052:	4a11      	ldr	r2, [pc, #68]	@ (8017098 <CDC_Transmit_FS+0x5c>)
 8017054:	23ae      	movs	r3, #174	@ 0xae
 8017056:	009b      	lsls	r3, r3, #2
 8017058:	58d3      	ldr	r3, [r2, r3]
 801705a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801705c:	68ba      	ldr	r2, [r7, #8]
 801705e:	2385      	movs	r3, #133	@ 0x85
 8017060:	009b      	lsls	r3, r3, #2
 8017062:	58d3      	ldr	r3, [r2, r3]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d001      	beq.n	801706c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8017068:	2301      	movs	r3, #1
 801706a:	e010      	b.n	801708e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801706c:	1cbb      	adds	r3, r7, #2
 801706e:	881a      	ldrh	r2, [r3, #0]
 8017070:	6879      	ldr	r1, [r7, #4]
 8017072:	4b09      	ldr	r3, [pc, #36]	@ (8017098 <CDC_Transmit_FS+0x5c>)
 8017074:	0018      	movs	r0, r3
 8017076:	f7fe fca0 	bl	80159ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801707a:	250f      	movs	r5, #15
 801707c:	197c      	adds	r4, r7, r5
 801707e:	4b06      	ldr	r3, [pc, #24]	@ (8017098 <CDC_Transmit_FS+0x5c>)
 8017080:	0018      	movs	r0, r3
 8017082:	f7fe fcca 	bl	8015a1a <USBD_CDC_TransmitPacket>
 8017086:	0003      	movs	r3, r0
 8017088:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801708a:	197b      	adds	r3, r7, r5
 801708c:	781b      	ldrb	r3, [r3, #0]
}
 801708e:	0018      	movs	r0, r3
 8017090:	46bd      	mov	sp, r7
 8017092:	b004      	add	sp, #16
 8017094:	bdb0      	pop	{r4, r5, r7, pc}
 8017096:	46c0      	nop			@ (mov r8, r8)
 8017098:	20002b78 	.word	0x20002b78

0801709c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801709c:	b580      	push	{r7, lr}
 801709e:	af00      	add	r7, sp, #0
  ESPProg = true;
 80170a0:	4b02      	ldr	r3, [pc, #8]	@ (80170ac <EnableESPProg+0x10>)
 80170a2:	2201      	movs	r2, #1
 80170a4:	701a      	strb	r2, [r3, #0]
}
 80170a6:	46c0      	nop			@ (mov r8, r8)
 80170a8:	46bd      	mov	sp, r7
 80170aa:	bd80      	pop	{r7, pc}
 80170ac:	20002e3c 	.word	0x20002e3c

080170b0 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80170b4:	4b01      	ldr	r3, [pc, #4]	@ (80170bc <GetUsbRxPointer+0xc>)
}
 80170b6:	0018      	movs	r0, r3
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd80      	pop	{r7, pc}
 80170bc:	20002efc 	.word	0x20002efc

080170c0 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80170c4:	4b07      	ldr	r3, [pc, #28]	@ (80170e4 <ResetUsbRxDataSize+0x24>)
 80170c6:	2200      	movs	r2, #0
 80170c8:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80170ca:	4a07      	ldr	r2, [pc, #28]	@ (80170e8 <ResetUsbRxDataSize+0x28>)
 80170cc:	4b07      	ldr	r3, [pc, #28]	@ (80170ec <ResetUsbRxDataSize+0x2c>)
 80170ce:	0011      	movs	r1, r2
 80170d0:	0018      	movs	r0, r3
 80170d2:	f7fe fc8e 	bl	80159f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80170d6:	4b05      	ldr	r3, [pc, #20]	@ (80170ec <ResetUsbRxDataSize+0x2c>)
 80170d8:	0018      	movs	r0, r3
 80170da:	f7fe fcd5 	bl	8015a88 <USBD_CDC_ReceivePacket>
}
 80170de:	46c0      	nop			@ (mov r8, r8)
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}
 80170e4:	20002ef8 	.word	0x20002ef8
 80170e8:	20002efc 	.word	0x20002efc
 80170ec:	20002b78 	.word	0x20002b78

080170f0 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 80170f0:	b580      	push	{r7, lr}
 80170f2:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 80170f4:	4b02      	ldr	r3, [pc, #8]	@ (8017100 <GetUsbRxDataSize+0x10>)
 80170f6:	681b      	ldr	r3, [r3, #0]
}
 80170f8:	0018      	movs	r0, r3
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}
 80170fe:	46c0      	nop			@ (mov r8, r8)
 8017100:	20002ef8 	.word	0x20002ef8

08017104 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801710c:	687a      	ldr	r2, [r7, #4]
 801710e:	4b07      	ldr	r3, [pc, #28]	@ (801712c <GetUsbRxNextChunk+0x28>)
 8017110:	18d2      	adds	r2, r2, r3
 8017112:	4b07      	ldr	r3, [pc, #28]	@ (8017130 <GetUsbRxNextChunk+0x2c>)
 8017114:	0011      	movs	r1, r2
 8017116:	0018      	movs	r0, r3
 8017118:	f7fe fc6b 	bl	80159f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801711c:	4b04      	ldr	r3, [pc, #16]	@ (8017130 <GetUsbRxNextChunk+0x2c>)
 801711e:	0018      	movs	r0, r3
 8017120:	f7fe fcb2 	bl	8015a88 <USBD_CDC_ReceivePacket>
}
 8017124:	46c0      	nop			@ (mov r8, r8)
 8017126:	46bd      	mov	sp, r7
 8017128:	b002      	add	sp, #8
 801712a:	bd80      	pop	{r7, pc}
 801712c:	20002efc 	.word	0x20002efc
 8017130:	20002b78 	.word	0x20002b78

08017134 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b082      	sub	sp, #8
 8017138:	af00      	add	r7, sp, #0
 801713a:	0002      	movs	r2, r0
 801713c:	6039      	str	r1, [r7, #0]
 801713e:	1dfb      	adds	r3, r7, #7
 8017140:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	2212      	movs	r2, #18
 8017146:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017148:	4b02      	ldr	r3, [pc, #8]	@ (8017154 <USBD_FS_DeviceDescriptor+0x20>)
}
 801714a:	0018      	movs	r0, r3
 801714c:	46bd      	mov	sp, r7
 801714e:	b002      	add	sp, #8
 8017150:	bd80      	pop	{r7, pc}
 8017152:	46c0      	nop			@ (mov r8, r8)
 8017154:	200001b4 	.word	0x200001b4

08017158 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b082      	sub	sp, #8
 801715c:	af00      	add	r7, sp, #0
 801715e:	0002      	movs	r2, r0
 8017160:	6039      	str	r1, [r7, #0]
 8017162:	1dfb      	adds	r3, r7, #7
 8017164:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	2204      	movs	r2, #4
 801716a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801716c:	4b02      	ldr	r3, [pc, #8]	@ (8017178 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801716e:	0018      	movs	r0, r3
 8017170:	46bd      	mov	sp, r7
 8017172:	b002      	add	sp, #8
 8017174:	bd80      	pop	{r7, pc}
 8017176:	46c0      	nop			@ (mov r8, r8)
 8017178:	200001c8 	.word	0x200001c8

0801717c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801717c:	b580      	push	{r7, lr}
 801717e:	b082      	sub	sp, #8
 8017180:	af00      	add	r7, sp, #0
 8017182:	0002      	movs	r2, r0
 8017184:	6039      	str	r1, [r7, #0]
 8017186:	1dfb      	adds	r3, r7, #7
 8017188:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801718a:	1dfb      	adds	r3, r7, #7
 801718c:	781b      	ldrb	r3, [r3, #0]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d106      	bne.n	80171a0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017192:	683a      	ldr	r2, [r7, #0]
 8017194:	4908      	ldr	r1, [pc, #32]	@ (80171b8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8017196:	4b09      	ldr	r3, [pc, #36]	@ (80171bc <USBD_FS_ProductStrDescriptor+0x40>)
 8017198:	0018      	movs	r0, r3
 801719a:	f7ff fdb1 	bl	8016d00 <USBD_GetString>
 801719e:	e005      	b.n	80171ac <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80171a0:	683a      	ldr	r2, [r7, #0]
 80171a2:	4905      	ldr	r1, [pc, #20]	@ (80171b8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80171a4:	4b05      	ldr	r3, [pc, #20]	@ (80171bc <USBD_FS_ProductStrDescriptor+0x40>)
 80171a6:	0018      	movs	r0, r3
 80171a8:	f7ff fdaa 	bl	8016d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80171ac:	4b02      	ldr	r3, [pc, #8]	@ (80171b8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80171ae:	0018      	movs	r0, r3
 80171b0:	46bd      	mov	sp, r7
 80171b2:	b002      	add	sp, #8
 80171b4:	bd80      	pop	{r7, pc}
 80171b6:	46c0      	nop			@ (mov r8, r8)
 80171b8:	200036fc 	.word	0x200036fc
 80171bc:	0801bfa4 	.word	0x0801bfa4

080171c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	0002      	movs	r2, r0
 80171c8:	6039      	str	r1, [r7, #0]
 80171ca:	1dfb      	adds	r3, r7, #7
 80171cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80171ce:	683a      	ldr	r2, [r7, #0]
 80171d0:	4904      	ldr	r1, [pc, #16]	@ (80171e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80171d2:	4b05      	ldr	r3, [pc, #20]	@ (80171e8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80171d4:	0018      	movs	r0, r3
 80171d6:	f7ff fd93 	bl	8016d00 <USBD_GetString>
  return USBD_StrDesc;
 80171da:	4b02      	ldr	r3, [pc, #8]	@ (80171e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80171dc:	0018      	movs	r0, r3
 80171de:	46bd      	mov	sp, r7
 80171e0:	b002      	add	sp, #8
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	200036fc 	.word	0x200036fc
 80171e8:	0801bfbc 	.word	0x0801bfbc

080171ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b082      	sub	sp, #8
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	0002      	movs	r2, r0
 80171f4:	6039      	str	r1, [r7, #0]
 80171f6:	1dfb      	adds	r3, r7, #7
 80171f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	221a      	movs	r2, #26
 80171fe:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017200:	f000 f84c 	bl	801729c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017204:	4b02      	ldr	r3, [pc, #8]	@ (8017210 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8017206:	0018      	movs	r0, r3
 8017208:	46bd      	mov	sp, r7
 801720a:	b002      	add	sp, #8
 801720c:	bd80      	pop	{r7, pc}
 801720e:	46c0      	nop			@ (mov r8, r8)
 8017210:	200001cc 	.word	0x200001cc

08017214 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b082      	sub	sp, #8
 8017218:	af00      	add	r7, sp, #0
 801721a:	0002      	movs	r2, r0
 801721c:	6039      	str	r1, [r7, #0]
 801721e:	1dfb      	adds	r3, r7, #7
 8017220:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8017222:	1dfb      	adds	r3, r7, #7
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d106      	bne.n	8017238 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801722a:	683a      	ldr	r2, [r7, #0]
 801722c:	4908      	ldr	r1, [pc, #32]	@ (8017250 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801722e:	4b09      	ldr	r3, [pc, #36]	@ (8017254 <USBD_FS_ConfigStrDescriptor+0x40>)
 8017230:	0018      	movs	r0, r3
 8017232:	f7ff fd65 	bl	8016d00 <USBD_GetString>
 8017236:	e005      	b.n	8017244 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	4905      	ldr	r1, [pc, #20]	@ (8017250 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801723c:	4b05      	ldr	r3, [pc, #20]	@ (8017254 <USBD_FS_ConfigStrDescriptor+0x40>)
 801723e:	0018      	movs	r0, r3
 8017240:	f7ff fd5e 	bl	8016d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017244:	4b02      	ldr	r3, [pc, #8]	@ (8017250 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8017246:	0018      	movs	r0, r3
 8017248:	46bd      	mov	sp, r7
 801724a:	b002      	add	sp, #8
 801724c:	bd80      	pop	{r7, pc}
 801724e:	46c0      	nop			@ (mov r8, r8)
 8017250:	200036fc 	.word	0x200036fc
 8017254:	0801bfd0 	.word	0x0801bfd0

08017258 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b082      	sub	sp, #8
 801725c:	af00      	add	r7, sp, #0
 801725e:	0002      	movs	r2, r0
 8017260:	6039      	str	r1, [r7, #0]
 8017262:	1dfb      	adds	r3, r7, #7
 8017264:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8017266:	1dfb      	adds	r3, r7, #7
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d106      	bne.n	801727c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801726e:	683a      	ldr	r2, [r7, #0]
 8017270:	4908      	ldr	r1, [pc, #32]	@ (8017294 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8017272:	4b09      	ldr	r3, [pc, #36]	@ (8017298 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8017274:	0018      	movs	r0, r3
 8017276:	f7ff fd43 	bl	8016d00 <USBD_GetString>
 801727a:	e005      	b.n	8017288 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801727c:	683a      	ldr	r2, [r7, #0]
 801727e:	4905      	ldr	r1, [pc, #20]	@ (8017294 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8017280:	4b05      	ldr	r3, [pc, #20]	@ (8017298 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8017282:	0018      	movs	r0, r3
 8017284:	f7ff fd3c 	bl	8016d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017288:	4b02      	ldr	r3, [pc, #8]	@ (8017294 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801728a:	0018      	movs	r0, r3
 801728c:	46bd      	mov	sp, r7
 801728e:	b002      	add	sp, #8
 8017290:	bd80      	pop	{r7, pc}
 8017292:	46c0      	nop			@ (mov r8, r8)
 8017294:	200036fc 	.word	0x200036fc
 8017298:	0801bfdc 	.word	0x0801bfdc

0801729c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b084      	sub	sp, #16
 80172a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80172a2:	4b10      	ldr	r3, [pc, #64]	@ (80172e4 <Get_SerialNum+0x48>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80172a8:	4b0f      	ldr	r3, [pc, #60]	@ (80172e8 <Get_SerialNum+0x4c>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80172ae:	4b0f      	ldr	r3, [pc, #60]	@ (80172ec <Get_SerialNum+0x50>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80172b4:	68fa      	ldr	r2, [r7, #12]
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	18d3      	adds	r3, r2, r3
 80172ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d00b      	beq.n	80172da <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80172c2:	490b      	ldr	r1, [pc, #44]	@ (80172f0 <Get_SerialNum+0x54>)
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2208      	movs	r2, #8
 80172c8:	0018      	movs	r0, r3
 80172ca:	f000 f815 	bl	80172f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80172ce:	4909      	ldr	r1, [pc, #36]	@ (80172f4 <Get_SerialNum+0x58>)
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	2204      	movs	r2, #4
 80172d4:	0018      	movs	r0, r3
 80172d6:	f000 f80f 	bl	80172f8 <IntToUnicode>
  }
}
 80172da:	46c0      	nop			@ (mov r8, r8)
 80172dc:	46bd      	mov	sp, r7
 80172de:	b004      	add	sp, #16
 80172e0:	bd80      	pop	{r7, pc}
 80172e2:	46c0      	nop			@ (mov r8, r8)
 80172e4:	1ff80050 	.word	0x1ff80050
 80172e8:	1ff80054 	.word	0x1ff80054
 80172ec:	1ff80058 	.word	0x1ff80058
 80172f0:	200001ce 	.word	0x200001ce
 80172f4:	200001de 	.word	0x200001de

080172f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b086      	sub	sp, #24
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	1dfb      	adds	r3, r7, #7
 8017304:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8017306:	2117      	movs	r1, #23
 8017308:	187b      	adds	r3, r7, r1
 801730a:	2200      	movs	r2, #0
 801730c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801730e:	187b      	adds	r3, r7, r1
 8017310:	2200      	movs	r2, #0
 8017312:	701a      	strb	r2, [r3, #0]
 8017314:	e02f      	b.n	8017376 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	0f1b      	lsrs	r3, r3, #28
 801731a:	2b09      	cmp	r3, #9
 801731c:	d80d      	bhi.n	801733a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	0f1b      	lsrs	r3, r3, #28
 8017322:	b2da      	uxtb	r2, r3
 8017324:	2317      	movs	r3, #23
 8017326:	18fb      	adds	r3, r7, r3
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	005b      	lsls	r3, r3, #1
 801732c:	0019      	movs	r1, r3
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	185b      	adds	r3, r3, r1
 8017332:	3230      	adds	r2, #48	@ 0x30
 8017334:	b2d2      	uxtb	r2, r2
 8017336:	701a      	strb	r2, [r3, #0]
 8017338:	e00c      	b.n	8017354 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	0f1b      	lsrs	r3, r3, #28
 801733e:	b2da      	uxtb	r2, r3
 8017340:	2317      	movs	r3, #23
 8017342:	18fb      	adds	r3, r7, r3
 8017344:	781b      	ldrb	r3, [r3, #0]
 8017346:	005b      	lsls	r3, r3, #1
 8017348:	0019      	movs	r1, r3
 801734a:	68bb      	ldr	r3, [r7, #8]
 801734c:	185b      	adds	r3, r3, r1
 801734e:	3237      	adds	r2, #55	@ 0x37
 8017350:	b2d2      	uxtb	r2, r2
 8017352:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	011b      	lsls	r3, r3, #4
 8017358:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801735a:	2117      	movs	r1, #23
 801735c:	187b      	adds	r3, r7, r1
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	005b      	lsls	r3, r3, #1
 8017362:	3301      	adds	r3, #1
 8017364:	68ba      	ldr	r2, [r7, #8]
 8017366:	18d3      	adds	r3, r2, r3
 8017368:	2200      	movs	r2, #0
 801736a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801736c:	187b      	adds	r3, r7, r1
 801736e:	781a      	ldrb	r2, [r3, #0]
 8017370:	187b      	adds	r3, r7, r1
 8017372:	3201      	adds	r2, #1
 8017374:	701a      	strb	r2, [r3, #0]
 8017376:	2317      	movs	r3, #23
 8017378:	18fa      	adds	r2, r7, r3
 801737a:	1dfb      	adds	r3, r7, #7
 801737c:	7812      	ldrb	r2, [r2, #0]
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	429a      	cmp	r2, r3
 8017382:	d3c8      	bcc.n	8017316 <IntToUnicode+0x1e>
  }
}
 8017384:	46c0      	nop			@ (mov r8, r8)
 8017386:	46c0      	nop			@ (mov r8, r8)
 8017388:	46bd      	mov	sp, r7
 801738a:	b006      	add	sp, #24
 801738c:	bd80      	pop	{r7, pc}
	...

08017390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b082      	sub	sp, #8
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	4a0a      	ldr	r2, [pc, #40]	@ (80173c8 <HAL_PCD_MspInit+0x38>)
 801739e:	4293      	cmp	r3, r2
 80173a0:	d10e      	bne.n	80173c0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80173a2:	4b0a      	ldr	r3, [pc, #40]	@ (80173cc <HAL_PCD_MspInit+0x3c>)
 80173a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80173a6:	4b09      	ldr	r3, [pc, #36]	@ (80173cc <HAL_PCD_MspInit+0x3c>)
 80173a8:	2180      	movs	r1, #128	@ 0x80
 80173aa:	0409      	lsls	r1, r1, #16
 80173ac:	430a      	orrs	r2, r1
 80173ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80173b0:	2200      	movs	r2, #0
 80173b2:	2100      	movs	r1, #0
 80173b4:	201f      	movs	r0, #31
 80173b6:	f7f3 fc57 	bl	800ac68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80173ba:	201f      	movs	r0, #31
 80173bc:	f7f3 fc69 	bl	800ac92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80173c0:	46c0      	nop			@ (mov r8, r8)
 80173c2:	46bd      	mov	sp, r7
 80173c4:	b002      	add	sp, #8
 80173c6:	bd80      	pop	{r7, pc}
 80173c8:	40005c00 	.word	0x40005c00
 80173cc:	40021000 	.word	0x40021000

080173d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	23bc      	movs	r3, #188	@ 0xbc
 80173dc:	009b      	lsls	r3, r3, #2
 80173de:	58d2      	ldr	r2, [r2, r3]
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	21ac      	movs	r1, #172	@ 0xac
 80173e4:	0089      	lsls	r1, r1, #2
 80173e6:	468c      	mov	ip, r1
 80173e8:	4463      	add	r3, ip
 80173ea:	0019      	movs	r1, r3
 80173ec:	0010      	movs	r0, r2
 80173ee:	f7fe fc1d 	bl	8015c2c <USBD_LL_SetupStage>
}
 80173f2:	46c0      	nop			@ (mov r8, r8)
 80173f4:	46bd      	mov	sp, r7
 80173f6:	b002      	add	sp, #8
 80173f8:	bd80      	pop	{r7, pc}

080173fa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173fa:	b590      	push	{r4, r7, lr}
 80173fc:	b083      	sub	sp, #12
 80173fe:	af00      	add	r7, sp, #0
 8017400:	6078      	str	r0, [r7, #4]
 8017402:	000a      	movs	r2, r1
 8017404:	1cfb      	adds	r3, r7, #3
 8017406:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017408:	687a      	ldr	r2, [r7, #4]
 801740a:	23bc      	movs	r3, #188	@ 0xbc
 801740c:	009b      	lsls	r3, r3, #2
 801740e:	58d4      	ldr	r4, [r2, r3]
 8017410:	1cfb      	adds	r3, r7, #3
 8017412:	781a      	ldrb	r2, [r3, #0]
 8017414:	6878      	ldr	r0, [r7, #4]
 8017416:	23be      	movs	r3, #190	@ 0xbe
 8017418:	0059      	lsls	r1, r3, #1
 801741a:	0013      	movs	r3, r2
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	189b      	adds	r3, r3, r2
 8017420:	00db      	lsls	r3, r3, #3
 8017422:	18c3      	adds	r3, r0, r3
 8017424:	185b      	adds	r3, r3, r1
 8017426:	681a      	ldr	r2, [r3, #0]
 8017428:	1cfb      	adds	r3, r7, #3
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	0019      	movs	r1, r3
 801742e:	0020      	movs	r0, r4
 8017430:	f7fe fc5a 	bl	8015ce8 <USBD_LL_DataOutStage>
}
 8017434:	46c0      	nop			@ (mov r8, r8)
 8017436:	46bd      	mov	sp, r7
 8017438:	b003      	add	sp, #12
 801743a:	bd90      	pop	{r4, r7, pc}

0801743c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b082      	sub	sp, #8
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	000a      	movs	r2, r1
 8017446:	1cfb      	adds	r3, r7, #3
 8017448:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801744a:	687a      	ldr	r2, [r7, #4]
 801744c:	23bc      	movs	r3, #188	@ 0xbc
 801744e:	009b      	lsls	r3, r3, #2
 8017450:	58d0      	ldr	r0, [r2, r3]
 8017452:	1cfb      	adds	r3, r7, #3
 8017454:	781a      	ldrb	r2, [r3, #0]
 8017456:	6879      	ldr	r1, [r7, #4]
 8017458:	0013      	movs	r3, r2
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	189b      	adds	r3, r3, r2
 801745e:	00db      	lsls	r3, r3, #3
 8017460:	18cb      	adds	r3, r1, r3
 8017462:	333c      	adds	r3, #60	@ 0x3c
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	1cfb      	adds	r3, r7, #3
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	0019      	movs	r1, r3
 801746c:	f7fe fcbe 	bl	8015dec <USBD_LL_DataInStage>
}
 8017470:	46c0      	nop			@ (mov r8, r8)
 8017472:	46bd      	mov	sp, r7
 8017474:	b002      	add	sp, #8
 8017476:	bd80      	pop	{r7, pc}

08017478 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b082      	sub	sp, #8
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017480:	687a      	ldr	r2, [r7, #4]
 8017482:	23bc      	movs	r3, #188	@ 0xbc
 8017484:	009b      	lsls	r3, r3, #2
 8017486:	58d3      	ldr	r3, [r2, r3]
 8017488:	0018      	movs	r0, r3
 801748a:	f7fe fdf5 	bl	8016078 <USBD_LL_SOF>
}
 801748e:	46c0      	nop			@ (mov r8, r8)
 8017490:	46bd      	mov	sp, r7
 8017492:	b002      	add	sp, #8
 8017494:	bd80      	pop	{r7, pc}

08017496 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017496:	b580      	push	{r7, lr}
 8017498:	b084      	sub	sp, #16
 801749a:	af00      	add	r7, sp, #0
 801749c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801749e:	230f      	movs	r3, #15
 80174a0:	18fb      	adds	r3, r7, r3
 80174a2:	2201      	movs	r2, #1
 80174a4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	689b      	ldr	r3, [r3, #8]
 80174aa:	2b02      	cmp	r3, #2
 80174ac:	d001      	beq.n	80174b2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80174ae:	f7ef f93d 	bl	800672c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80174b2:	687a      	ldr	r2, [r7, #4]
 80174b4:	23bc      	movs	r3, #188	@ 0xbc
 80174b6:	009b      	lsls	r3, r3, #2
 80174b8:	58d2      	ldr	r2, [r2, r3]
 80174ba:	230f      	movs	r3, #15
 80174bc:	18fb      	adds	r3, r7, r3
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	0019      	movs	r1, r3
 80174c2:	0010      	movs	r0, r2
 80174c4:	f7fe fd97 	bl	8015ff6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80174c8:	687a      	ldr	r2, [r7, #4]
 80174ca:	23bc      	movs	r3, #188	@ 0xbc
 80174cc:	009b      	lsls	r3, r3, #2
 80174ce:	58d3      	ldr	r3, [r2, r3]
 80174d0:	0018      	movs	r0, r3
 80174d2:	f7fe fd48 	bl	8015f66 <USBD_LL_Reset>
}
 80174d6:	46c0      	nop			@ (mov r8, r8)
 80174d8:	46bd      	mov	sp, r7
 80174da:	b004      	add	sp, #16
 80174dc:	bd80      	pop	{r7, pc}
	...

080174e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b082      	sub	sp, #8
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	23bc      	movs	r3, #188	@ 0xbc
 80174ec:	009b      	lsls	r3, r3, #2
 80174ee:	58d3      	ldr	r3, [r2, r3]
 80174f0:	0018      	movs	r0, r3
 80174f2:	f7fe fd91 	bl	8016018 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	699b      	ldr	r3, [r3, #24]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d005      	beq.n	801750a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80174fe:	4b05      	ldr	r3, [pc, #20]	@ (8017514 <HAL_PCD_SuspendCallback+0x34>)
 8017500:	691a      	ldr	r2, [r3, #16]
 8017502:	4b04      	ldr	r3, [pc, #16]	@ (8017514 <HAL_PCD_SuspendCallback+0x34>)
 8017504:	2106      	movs	r1, #6
 8017506:	430a      	orrs	r2, r1
 8017508:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801750a:	46c0      	nop			@ (mov r8, r8)
 801750c:	46bd      	mov	sp, r7
 801750e:	b002      	add	sp, #8
 8017510:	bd80      	pop	{r7, pc}
 8017512:	46c0      	nop			@ (mov r8, r8)
 8017514:	e000ed00 	.word	0xe000ed00

08017518 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b082      	sub	sp, #8
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	699b      	ldr	r3, [r3, #24]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d007      	beq.n	8017538 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017528:	4b09      	ldr	r3, [pc, #36]	@ (8017550 <HAL_PCD_ResumeCallback+0x38>)
 801752a:	691a      	ldr	r2, [r3, #16]
 801752c:	4b08      	ldr	r3, [pc, #32]	@ (8017550 <HAL_PCD_ResumeCallback+0x38>)
 801752e:	2106      	movs	r1, #6
 8017530:	438a      	bics	r2, r1
 8017532:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8017534:	f000 fa44 	bl	80179c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017538:	687a      	ldr	r2, [r7, #4]
 801753a:	23bc      	movs	r3, #188	@ 0xbc
 801753c:	009b      	lsls	r3, r3, #2
 801753e:	58d3      	ldr	r3, [r2, r3]
 8017540:	0018      	movs	r0, r3
 8017542:	f7fe fd81 	bl	8016048 <USBD_LL_Resume>
}
 8017546:	46c0      	nop			@ (mov r8, r8)
 8017548:	46bd      	mov	sp, r7
 801754a:	b002      	add	sp, #8
 801754c:	bd80      	pop	{r7, pc}
 801754e:	46c0      	nop			@ (mov r8, r8)
 8017550:	e000ed00 	.word	0xe000ed00

08017554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801755c:	4a2d      	ldr	r2, [pc, #180]	@ (8017614 <USBD_LL_Init+0xc0>)
 801755e:	23bc      	movs	r3, #188	@ 0xbc
 8017560:	009b      	lsls	r3, r3, #2
 8017562:	6879      	ldr	r1, [r7, #4]
 8017564:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8017566:	687a      	ldr	r2, [r7, #4]
 8017568:	23b0      	movs	r3, #176	@ 0xb0
 801756a:	009b      	lsls	r3, r3, #2
 801756c:	4929      	ldr	r1, [pc, #164]	@ (8017614 <USBD_LL_Init+0xc0>)
 801756e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8017570:	4b28      	ldr	r3, [pc, #160]	@ (8017614 <USBD_LL_Init+0xc0>)
 8017572:	4a29      	ldr	r2, [pc, #164]	@ (8017618 <USBD_LL_Init+0xc4>)
 8017574:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017576:	4b27      	ldr	r3, [pc, #156]	@ (8017614 <USBD_LL_Init+0xc0>)
 8017578:	2208      	movs	r2, #8
 801757a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801757c:	4b25      	ldr	r3, [pc, #148]	@ (8017614 <USBD_LL_Init+0xc0>)
 801757e:	2202      	movs	r2, #2
 8017580:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017582:	4b24      	ldr	r3, [pc, #144]	@ (8017614 <USBD_LL_Init+0xc0>)
 8017584:	2202      	movs	r2, #2
 8017586:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017588:	4b22      	ldr	r3, [pc, #136]	@ (8017614 <USBD_LL_Init+0xc0>)
 801758a:	2200      	movs	r2, #0
 801758c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801758e:	4b21      	ldr	r3, [pc, #132]	@ (8017614 <USBD_LL_Init+0xc0>)
 8017590:	2200      	movs	r2, #0
 8017592:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017594:	4b1f      	ldr	r3, [pc, #124]	@ (8017614 <USBD_LL_Init+0xc0>)
 8017596:	2200      	movs	r2, #0
 8017598:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801759a:	4b1e      	ldr	r3, [pc, #120]	@ (8017614 <USBD_LL_Init+0xc0>)
 801759c:	0018      	movs	r0, r3
 801759e:	f7f6 fe07 	bl	800e1b0 <HAL_PCD_Init>
 80175a2:	1e03      	subs	r3, r0, #0
 80175a4:	d001      	beq.n	80175aa <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80175a6:	f7ef f8c1 	bl	800672c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	23b0      	movs	r3, #176	@ 0xb0
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	58d0      	ldr	r0, [r2, r3]
 80175b2:	2318      	movs	r3, #24
 80175b4:	2200      	movs	r2, #0
 80175b6:	2100      	movs	r1, #0
 80175b8:	f7f8 fbc8 	bl	800fd4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	23b0      	movs	r3, #176	@ 0xb0
 80175c0:	009b      	lsls	r3, r3, #2
 80175c2:	58d0      	ldr	r0, [r2, r3]
 80175c4:	2358      	movs	r3, #88	@ 0x58
 80175c6:	2200      	movs	r2, #0
 80175c8:	2180      	movs	r1, #128	@ 0x80
 80175ca:	f7f8 fbbf 	bl	800fd4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80175ce:	687a      	ldr	r2, [r7, #4]
 80175d0:	23b0      	movs	r3, #176	@ 0xb0
 80175d2:	009b      	lsls	r3, r3, #2
 80175d4:	58d0      	ldr	r0, [r2, r3]
 80175d6:	23c0      	movs	r3, #192	@ 0xc0
 80175d8:	2200      	movs	r2, #0
 80175da:	2181      	movs	r1, #129	@ 0x81
 80175dc:	f7f8 fbb6 	bl	800fd4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	23b0      	movs	r3, #176	@ 0xb0
 80175e4:	009b      	lsls	r3, r3, #2
 80175e6:	58d0      	ldr	r0, [r2, r3]
 80175e8:	2388      	movs	r3, #136	@ 0x88
 80175ea:	005b      	lsls	r3, r3, #1
 80175ec:	2200      	movs	r2, #0
 80175ee:	2101      	movs	r1, #1
 80175f0:	f7f8 fbac 	bl	800fd4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	23b0      	movs	r3, #176	@ 0xb0
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	58d0      	ldr	r0, [r2, r3]
 80175fc:	2380      	movs	r3, #128	@ 0x80
 80175fe:	005b      	lsls	r3, r3, #1
 8017600:	2200      	movs	r2, #0
 8017602:	2182      	movs	r1, #130	@ 0x82
 8017604:	f7f8 fba2 	bl	800fd4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8017608:	2300      	movs	r3, #0
}
 801760a:	0018      	movs	r0, r3
 801760c:	46bd      	mov	sp, r7
 801760e:	b002      	add	sp, #8
 8017610:	bd80      	pop	{r7, pc}
 8017612:	46c0      	nop			@ (mov r8, r8)
 8017614:	200038fc 	.word	0x200038fc
 8017618:	40005c00 	.word	0x40005c00

0801761c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801761c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801761e:	b085      	sub	sp, #20
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017624:	210f      	movs	r1, #15
 8017626:	187b      	adds	r3, r7, r1
 8017628:	2200      	movs	r2, #0
 801762a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801762c:	260e      	movs	r6, #14
 801762e:	19bb      	adds	r3, r7, r6
 8017630:	2200      	movs	r2, #0
 8017632:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017634:	687a      	ldr	r2, [r7, #4]
 8017636:	23b0      	movs	r3, #176	@ 0xb0
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	58d3      	ldr	r3, [r2, r3]
 801763c:	000d      	movs	r5, r1
 801763e:	187c      	adds	r4, r7, r1
 8017640:	0018      	movs	r0, r3
 8017642:	f7f6 feb5 	bl	800e3b0 <HAL_PCD_Start>
 8017646:	0003      	movs	r3, r0
 8017648:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801764a:	19bc      	adds	r4, r7, r6
 801764c:	197b      	adds	r3, r7, r5
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	0018      	movs	r0, r3
 8017652:	f000 f9bc 	bl	80179ce <USBD_Get_USB_Status>
 8017656:	0003      	movs	r3, r0
 8017658:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801765a:	19bb      	adds	r3, r7, r6
 801765c:	781b      	ldrb	r3, [r3, #0]
}
 801765e:	0018      	movs	r0, r3
 8017660:	46bd      	mov	sp, r7
 8017662:	b005      	add	sp, #20
 8017664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017666 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017668:	b085      	sub	sp, #20
 801766a:	af00      	add	r7, sp, #0
 801766c:	6078      	str	r0, [r7, #4]
 801766e:	000c      	movs	r4, r1
 8017670:	0010      	movs	r0, r2
 8017672:	0019      	movs	r1, r3
 8017674:	1cfb      	adds	r3, r7, #3
 8017676:	1c22      	adds	r2, r4, #0
 8017678:	701a      	strb	r2, [r3, #0]
 801767a:	1cbb      	adds	r3, r7, #2
 801767c:	1c02      	adds	r2, r0, #0
 801767e:	701a      	strb	r2, [r3, #0]
 8017680:	003b      	movs	r3, r7
 8017682:	1c0a      	adds	r2, r1, #0
 8017684:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017686:	260f      	movs	r6, #15
 8017688:	19bb      	adds	r3, r7, r6
 801768a:	2200      	movs	r2, #0
 801768c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801768e:	250e      	movs	r5, #14
 8017690:	197b      	adds	r3, r7, r5
 8017692:	2200      	movs	r2, #0
 8017694:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017696:	687a      	ldr	r2, [r7, #4]
 8017698:	23b0      	movs	r3, #176	@ 0xb0
 801769a:	009b      	lsls	r3, r3, #2
 801769c:	58d0      	ldr	r0, [r2, r3]
 801769e:	19bc      	adds	r4, r7, r6
 80176a0:	1cbb      	adds	r3, r7, #2
 80176a2:	781d      	ldrb	r5, [r3, #0]
 80176a4:	003b      	movs	r3, r7
 80176a6:	881a      	ldrh	r2, [r3, #0]
 80176a8:	1cfb      	adds	r3, r7, #3
 80176aa:	7819      	ldrb	r1, [r3, #0]
 80176ac:	002b      	movs	r3, r5
 80176ae:	f7f7 f814 	bl	800e6da <HAL_PCD_EP_Open>
 80176b2:	0003      	movs	r3, r0
 80176b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176b6:	250e      	movs	r5, #14
 80176b8:	197c      	adds	r4, r7, r5
 80176ba:	19bb      	adds	r3, r7, r6
 80176bc:	781b      	ldrb	r3, [r3, #0]
 80176be:	0018      	movs	r0, r3
 80176c0:	f000 f985 	bl	80179ce <USBD_Get_USB_Status>
 80176c4:	0003      	movs	r3, r0
 80176c6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80176c8:	197b      	adds	r3, r7, r5
 80176ca:	781b      	ldrb	r3, [r3, #0]
}
 80176cc:	0018      	movs	r0, r3
 80176ce:	46bd      	mov	sp, r7
 80176d0:	b005      	add	sp, #20
 80176d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176d6:	b085      	sub	sp, #20
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	000a      	movs	r2, r1
 80176de:	1cfb      	adds	r3, r7, #3
 80176e0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176e2:	210f      	movs	r1, #15
 80176e4:	187b      	adds	r3, r7, r1
 80176e6:	2200      	movs	r2, #0
 80176e8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176ea:	260e      	movs	r6, #14
 80176ec:	19bb      	adds	r3, r7, r6
 80176ee:	2200      	movs	r2, #0
 80176f0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	23b0      	movs	r3, #176	@ 0xb0
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	58d2      	ldr	r2, [r2, r3]
 80176fa:	000d      	movs	r5, r1
 80176fc:	187c      	adds	r4, r7, r1
 80176fe:	1cfb      	adds	r3, r7, #3
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	0019      	movs	r1, r3
 8017704:	0010      	movs	r0, r2
 8017706:	f7f7 f857 	bl	800e7b8 <HAL_PCD_EP_Close>
 801770a:	0003      	movs	r3, r0
 801770c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801770e:	19bc      	adds	r4, r7, r6
 8017710:	197b      	adds	r3, r7, r5
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	0018      	movs	r0, r3
 8017716:	f000 f95a 	bl	80179ce <USBD_Get_USB_Status>
 801771a:	0003      	movs	r3, r0
 801771c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801771e:	19bb      	adds	r3, r7, r6
 8017720:	781b      	ldrb	r3, [r3, #0]
}
 8017722:	0018      	movs	r0, r3
 8017724:	46bd      	mov	sp, r7
 8017726:	b005      	add	sp, #20
 8017728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801772a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801772a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801772c:	b085      	sub	sp, #20
 801772e:	af00      	add	r7, sp, #0
 8017730:	6078      	str	r0, [r7, #4]
 8017732:	000a      	movs	r2, r1
 8017734:	1cfb      	adds	r3, r7, #3
 8017736:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017738:	210f      	movs	r1, #15
 801773a:	187b      	adds	r3, r7, r1
 801773c:	2200      	movs	r2, #0
 801773e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017740:	260e      	movs	r6, #14
 8017742:	19bb      	adds	r3, r7, r6
 8017744:	2200      	movs	r2, #0
 8017746:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	23b0      	movs	r3, #176	@ 0xb0
 801774c:	009b      	lsls	r3, r3, #2
 801774e:	58d2      	ldr	r2, [r2, r3]
 8017750:	000d      	movs	r5, r1
 8017752:	187c      	adds	r4, r7, r1
 8017754:	1cfb      	adds	r3, r7, #3
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	0019      	movs	r1, r3
 801775a:	0010      	movs	r0, r2
 801775c:	f7f7 f909 	bl	800e972 <HAL_PCD_EP_SetStall>
 8017760:	0003      	movs	r3, r0
 8017762:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017764:	19bc      	adds	r4, r7, r6
 8017766:	197b      	adds	r3, r7, r5
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	0018      	movs	r0, r3
 801776c:	f000 f92f 	bl	80179ce <USBD_Get_USB_Status>
 8017770:	0003      	movs	r3, r0
 8017772:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017774:	19bb      	adds	r3, r7, r6
 8017776:	781b      	ldrb	r3, [r3, #0]
}
 8017778:	0018      	movs	r0, r3
 801777a:	46bd      	mov	sp, r7
 801777c:	b005      	add	sp, #20
 801777e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017780 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017782:	b085      	sub	sp, #20
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	000a      	movs	r2, r1
 801778a:	1cfb      	adds	r3, r7, #3
 801778c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801778e:	210f      	movs	r1, #15
 8017790:	187b      	adds	r3, r7, r1
 8017792:	2200      	movs	r2, #0
 8017794:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017796:	260e      	movs	r6, #14
 8017798:	19bb      	adds	r3, r7, r6
 801779a:	2200      	movs	r2, #0
 801779c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	23b0      	movs	r3, #176	@ 0xb0
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	58d2      	ldr	r2, [r2, r3]
 80177a6:	000d      	movs	r5, r1
 80177a8:	187c      	adds	r4, r7, r1
 80177aa:	1cfb      	adds	r3, r7, #3
 80177ac:	781b      	ldrb	r3, [r3, #0]
 80177ae:	0019      	movs	r1, r3
 80177b0:	0010      	movs	r0, r2
 80177b2:	f7f7 f93a 	bl	800ea2a <HAL_PCD_EP_ClrStall>
 80177b6:	0003      	movs	r3, r0
 80177b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177ba:	19bc      	adds	r4, r7, r6
 80177bc:	197b      	adds	r3, r7, r5
 80177be:	781b      	ldrb	r3, [r3, #0]
 80177c0:	0018      	movs	r0, r3
 80177c2:	f000 f904 	bl	80179ce <USBD_Get_USB_Status>
 80177c6:	0003      	movs	r3, r0
 80177c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80177ca:	19bb      	adds	r3, r7, r6
 80177cc:	781b      	ldrb	r3, [r3, #0]
}
 80177ce:	0018      	movs	r0, r3
 80177d0:	46bd      	mov	sp, r7
 80177d2:	b005      	add	sp, #20
 80177d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177d6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177d6:	b580      	push	{r7, lr}
 80177d8:	b084      	sub	sp, #16
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
 80177de:	000a      	movs	r2, r1
 80177e0:	1cfb      	adds	r3, r7, #3
 80177e2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80177e4:	687a      	ldr	r2, [r7, #4]
 80177e6:	23b0      	movs	r3, #176	@ 0xb0
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	58d3      	ldr	r3, [r2, r3]
 80177ec:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80177ee:	1cfb      	adds	r3, r7, #3
 80177f0:	781b      	ldrb	r3, [r3, #0]
 80177f2:	b25b      	sxtb	r3, r3
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	da0d      	bge.n	8017814 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80177f8:	1cfb      	adds	r3, r7, #3
 80177fa:	781b      	ldrb	r3, [r3, #0]
 80177fc:	227f      	movs	r2, #127	@ 0x7f
 80177fe:	4013      	ands	r3, r2
 8017800:	68f9      	ldr	r1, [r7, #12]
 8017802:	1c5a      	adds	r2, r3, #1
 8017804:	0013      	movs	r3, r2
 8017806:	009b      	lsls	r3, r3, #2
 8017808:	189b      	adds	r3, r3, r2
 801780a:	00db      	lsls	r3, r3, #3
 801780c:	18cb      	adds	r3, r1, r3
 801780e:	3302      	adds	r3, #2
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	e00d      	b.n	8017830 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017814:	1cfb      	adds	r3, r7, #3
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	227f      	movs	r2, #127	@ 0x7f
 801781a:	401a      	ands	r2, r3
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	23b5      	movs	r3, #181	@ 0xb5
 8017820:	0059      	lsls	r1, r3, #1
 8017822:	0013      	movs	r3, r2
 8017824:	009b      	lsls	r3, r3, #2
 8017826:	189b      	adds	r3, r3, r2
 8017828:	00db      	lsls	r3, r3, #3
 801782a:	18c3      	adds	r3, r0, r3
 801782c:	185b      	adds	r3, r3, r1
 801782e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017830:	0018      	movs	r0, r3
 8017832:	46bd      	mov	sp, r7
 8017834:	b004      	add	sp, #16
 8017836:	bd80      	pop	{r7, pc}

08017838 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801783a:	b085      	sub	sp, #20
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
 8017840:	000a      	movs	r2, r1
 8017842:	1cfb      	adds	r3, r7, #3
 8017844:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017846:	210f      	movs	r1, #15
 8017848:	187b      	adds	r3, r7, r1
 801784a:	2200      	movs	r2, #0
 801784c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801784e:	260e      	movs	r6, #14
 8017850:	19bb      	adds	r3, r7, r6
 8017852:	2200      	movs	r2, #0
 8017854:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017856:	687a      	ldr	r2, [r7, #4]
 8017858:	23b0      	movs	r3, #176	@ 0xb0
 801785a:	009b      	lsls	r3, r3, #2
 801785c:	58d2      	ldr	r2, [r2, r3]
 801785e:	000d      	movs	r5, r1
 8017860:	187c      	adds	r4, r7, r1
 8017862:	1cfb      	adds	r3, r7, #3
 8017864:	781b      	ldrb	r3, [r3, #0]
 8017866:	0019      	movs	r1, r3
 8017868:	0010      	movs	r0, r2
 801786a:	f7f6 ff0b 	bl	800e684 <HAL_PCD_SetAddress>
 801786e:	0003      	movs	r3, r0
 8017870:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017872:	19bc      	adds	r4, r7, r6
 8017874:	197b      	adds	r3, r7, r5
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	0018      	movs	r0, r3
 801787a:	f000 f8a8 	bl	80179ce <USBD_Get_USB_Status>
 801787e:	0003      	movs	r3, r0
 8017880:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017882:	19bb      	adds	r3, r7, r6
 8017884:	781b      	ldrb	r3, [r3, #0]
}
 8017886:	0018      	movs	r0, r3
 8017888:	46bd      	mov	sp, r7
 801788a:	b005      	add	sp, #20
 801788c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801788e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801788e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017890:	b087      	sub	sp, #28
 8017892:	af00      	add	r7, sp, #0
 8017894:	60f8      	str	r0, [r7, #12]
 8017896:	0008      	movs	r0, r1
 8017898:	607a      	str	r2, [r7, #4]
 801789a:	0019      	movs	r1, r3
 801789c:	230b      	movs	r3, #11
 801789e:	18fb      	adds	r3, r7, r3
 80178a0:	1c02      	adds	r2, r0, #0
 80178a2:	701a      	strb	r2, [r3, #0]
 80178a4:	2408      	movs	r4, #8
 80178a6:	193b      	adds	r3, r7, r4
 80178a8:	1c0a      	adds	r2, r1, #0
 80178aa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178ac:	2117      	movs	r1, #23
 80178ae:	187b      	adds	r3, r7, r1
 80178b0:	2200      	movs	r2, #0
 80178b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178b4:	2516      	movs	r5, #22
 80178b6:	197b      	adds	r3, r7, r5
 80178b8:	2200      	movs	r2, #0
 80178ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80178bc:	68fa      	ldr	r2, [r7, #12]
 80178be:	23b0      	movs	r3, #176	@ 0xb0
 80178c0:	009b      	lsls	r3, r3, #2
 80178c2:	58d0      	ldr	r0, [r2, r3]
 80178c4:	193b      	adds	r3, r7, r4
 80178c6:	881d      	ldrh	r5, [r3, #0]
 80178c8:	000e      	movs	r6, r1
 80178ca:	187c      	adds	r4, r7, r1
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	230b      	movs	r3, #11
 80178d0:	18fb      	adds	r3, r7, r3
 80178d2:	7819      	ldrb	r1, [r3, #0]
 80178d4:	002b      	movs	r3, r5
 80178d6:	f7f7 f810 	bl	800e8fa <HAL_PCD_EP_Transmit>
 80178da:	0003      	movs	r3, r0
 80178dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178de:	2516      	movs	r5, #22
 80178e0:	197c      	adds	r4, r7, r5
 80178e2:	19bb      	adds	r3, r7, r6
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	0018      	movs	r0, r3
 80178e8:	f000 f871 	bl	80179ce <USBD_Get_USB_Status>
 80178ec:	0003      	movs	r3, r0
 80178ee:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80178f0:	197b      	adds	r3, r7, r5
 80178f2:	781b      	ldrb	r3, [r3, #0]
}
 80178f4:	0018      	movs	r0, r3
 80178f6:	46bd      	mov	sp, r7
 80178f8:	b007      	add	sp, #28
 80178fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080178fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80178fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178fe:	b087      	sub	sp, #28
 8017900:	af00      	add	r7, sp, #0
 8017902:	60f8      	str	r0, [r7, #12]
 8017904:	0008      	movs	r0, r1
 8017906:	607a      	str	r2, [r7, #4]
 8017908:	0019      	movs	r1, r3
 801790a:	230b      	movs	r3, #11
 801790c:	18fb      	adds	r3, r7, r3
 801790e:	1c02      	adds	r2, r0, #0
 8017910:	701a      	strb	r2, [r3, #0]
 8017912:	2408      	movs	r4, #8
 8017914:	193b      	adds	r3, r7, r4
 8017916:	1c0a      	adds	r2, r1, #0
 8017918:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801791a:	2117      	movs	r1, #23
 801791c:	187b      	adds	r3, r7, r1
 801791e:	2200      	movs	r2, #0
 8017920:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017922:	2516      	movs	r5, #22
 8017924:	197b      	adds	r3, r7, r5
 8017926:	2200      	movs	r2, #0
 8017928:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801792a:	68fa      	ldr	r2, [r7, #12]
 801792c:	23b0      	movs	r3, #176	@ 0xb0
 801792e:	009b      	lsls	r3, r3, #2
 8017930:	58d0      	ldr	r0, [r2, r3]
 8017932:	193b      	adds	r3, r7, r4
 8017934:	881d      	ldrh	r5, [r3, #0]
 8017936:	000e      	movs	r6, r1
 8017938:	187c      	adds	r4, r7, r1
 801793a:	687a      	ldr	r2, [r7, #4]
 801793c:	230b      	movs	r3, #11
 801793e:	18fb      	adds	r3, r7, r3
 8017940:	7819      	ldrb	r1, [r3, #0]
 8017942:	002b      	movs	r3, r5
 8017944:	f7f6 ff89 	bl	800e85a <HAL_PCD_EP_Receive>
 8017948:	0003      	movs	r3, r0
 801794a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801794c:	2516      	movs	r5, #22
 801794e:	197c      	adds	r4, r7, r5
 8017950:	19bb      	adds	r3, r7, r6
 8017952:	781b      	ldrb	r3, [r3, #0]
 8017954:	0018      	movs	r0, r3
 8017956:	f000 f83a 	bl	80179ce <USBD_Get_USB_Status>
 801795a:	0003      	movs	r3, r0
 801795c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801795e:	197b      	adds	r3, r7, r5
 8017960:	781b      	ldrb	r3, [r3, #0]
}
 8017962:	0018      	movs	r0, r3
 8017964:	46bd      	mov	sp, r7
 8017966:	b007      	add	sp, #28
 8017968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801796a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801796a:	b580      	push	{r7, lr}
 801796c:	b082      	sub	sp, #8
 801796e:	af00      	add	r7, sp, #0
 8017970:	6078      	str	r0, [r7, #4]
 8017972:	000a      	movs	r2, r1
 8017974:	1cfb      	adds	r3, r7, #3
 8017976:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	23b0      	movs	r3, #176	@ 0xb0
 801797c:	009b      	lsls	r3, r3, #2
 801797e:	58d2      	ldr	r2, [r2, r3]
 8017980:	1cfb      	adds	r3, r7, #3
 8017982:	781b      	ldrb	r3, [r3, #0]
 8017984:	0019      	movs	r1, r3
 8017986:	0010      	movs	r0, r2
 8017988:	f7f6 ff9e 	bl	800e8c8 <HAL_PCD_EP_GetRxCount>
 801798c:	0003      	movs	r3, r0
}
 801798e:	0018      	movs	r0, r3
 8017990:	46bd      	mov	sp, r7
 8017992:	b002      	add	sp, #8
 8017994:	bd80      	pop	{r7, pc}
	...

08017998 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b082      	sub	sp, #8
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80179a0:	4b02      	ldr	r3, [pc, #8]	@ (80179ac <USBD_static_malloc+0x14>)
}
 80179a2:	0018      	movs	r0, r3
 80179a4:	46bd      	mov	sp, r7
 80179a6:	b002      	add	sp, #8
 80179a8:	bd80      	pop	{r7, pc}
 80179aa:	46c0      	nop			@ (mov r8, r8)
 80179ac:	20003bf0 	.word	0x20003bf0

080179b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b082      	sub	sp, #8
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]

}
 80179b8:	46c0      	nop			@ (mov r8, r8)
 80179ba:	46bd      	mov	sp, r7
 80179bc:	b002      	add	sp, #8
 80179be:	bd80      	pop	{r7, pc}

080179c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80179c4:	f7ee fe2c 	bl	8006620 <SystemClock_Config>
}
 80179c8:	46c0      	nop			@ (mov r8, r8)
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}

080179ce <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80179ce:	b580      	push	{r7, lr}
 80179d0:	b084      	sub	sp, #16
 80179d2:	af00      	add	r7, sp, #0
 80179d4:	0002      	movs	r2, r0
 80179d6:	1dfb      	adds	r3, r7, #7
 80179d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179da:	230f      	movs	r3, #15
 80179dc:	18fb      	adds	r3, r7, r3
 80179de:	2200      	movs	r2, #0
 80179e0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80179e2:	1dfb      	adds	r3, r7, #7
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	2b03      	cmp	r3, #3
 80179e8:	d017      	beq.n	8017a1a <USBD_Get_USB_Status+0x4c>
 80179ea:	dc1b      	bgt.n	8017a24 <USBD_Get_USB_Status+0x56>
 80179ec:	2b02      	cmp	r3, #2
 80179ee:	d00f      	beq.n	8017a10 <USBD_Get_USB_Status+0x42>
 80179f0:	dc18      	bgt.n	8017a24 <USBD_Get_USB_Status+0x56>
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d002      	beq.n	80179fc <USBD_Get_USB_Status+0x2e>
 80179f6:	2b01      	cmp	r3, #1
 80179f8:	d005      	beq.n	8017a06 <USBD_Get_USB_Status+0x38>
 80179fa:	e013      	b.n	8017a24 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80179fc:	230f      	movs	r3, #15
 80179fe:	18fb      	adds	r3, r7, r3
 8017a00:	2200      	movs	r2, #0
 8017a02:	701a      	strb	r2, [r3, #0]
    break;
 8017a04:	e013      	b.n	8017a2e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017a06:	230f      	movs	r3, #15
 8017a08:	18fb      	adds	r3, r7, r3
 8017a0a:	2202      	movs	r2, #2
 8017a0c:	701a      	strb	r2, [r3, #0]
    break;
 8017a0e:	e00e      	b.n	8017a2e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017a10:	230f      	movs	r3, #15
 8017a12:	18fb      	adds	r3, r7, r3
 8017a14:	2201      	movs	r2, #1
 8017a16:	701a      	strb	r2, [r3, #0]
    break;
 8017a18:	e009      	b.n	8017a2e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017a1a:	230f      	movs	r3, #15
 8017a1c:	18fb      	adds	r3, r7, r3
 8017a1e:	2202      	movs	r2, #2
 8017a20:	701a      	strb	r2, [r3, #0]
    break;
 8017a22:	e004      	b.n	8017a2e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8017a24:	230f      	movs	r3, #15
 8017a26:	18fb      	adds	r3, r7, r3
 8017a28:	2202      	movs	r2, #2
 8017a2a:	701a      	strb	r2, [r3, #0]
    break;
 8017a2c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8017a2e:	230f      	movs	r3, #15
 8017a30:	18fb      	adds	r3, r7, r3
 8017a32:	781b      	ldrb	r3, [r3, #0]
}
 8017a34:	0018      	movs	r0, r3
 8017a36:	46bd      	mov	sp, r7
 8017a38:	b004      	add	sp, #16
 8017a3a:	bd80      	pop	{r7, pc}

08017a3c <__cvt>:
 8017a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a3e:	001f      	movs	r7, r3
 8017a40:	2300      	movs	r3, #0
 8017a42:	0016      	movs	r6, r2
 8017a44:	b08b      	sub	sp, #44	@ 0x2c
 8017a46:	429f      	cmp	r7, r3
 8017a48:	da04      	bge.n	8017a54 <__cvt+0x18>
 8017a4a:	2180      	movs	r1, #128	@ 0x80
 8017a4c:	0609      	lsls	r1, r1, #24
 8017a4e:	187b      	adds	r3, r7, r1
 8017a50:	001f      	movs	r7, r3
 8017a52:	232d      	movs	r3, #45	@ 0x2d
 8017a54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017a56:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017a58:	7013      	strb	r3, [r2, #0]
 8017a5a:	2320      	movs	r3, #32
 8017a5c:	2203      	movs	r2, #3
 8017a5e:	439d      	bics	r5, r3
 8017a60:	2d46      	cmp	r5, #70	@ 0x46
 8017a62:	d007      	beq.n	8017a74 <__cvt+0x38>
 8017a64:	002b      	movs	r3, r5
 8017a66:	3b45      	subs	r3, #69	@ 0x45
 8017a68:	4259      	negs	r1, r3
 8017a6a:	414b      	adcs	r3, r1
 8017a6c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017a6e:	3a01      	subs	r2, #1
 8017a70:	18cb      	adds	r3, r1, r3
 8017a72:	9310      	str	r3, [sp, #64]	@ 0x40
 8017a74:	ab09      	add	r3, sp, #36	@ 0x24
 8017a76:	9304      	str	r3, [sp, #16]
 8017a78:	ab08      	add	r3, sp, #32
 8017a7a:	9303      	str	r3, [sp, #12]
 8017a7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a7e:	9200      	str	r2, [sp, #0]
 8017a80:	9302      	str	r3, [sp, #8]
 8017a82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017a84:	0032      	movs	r2, r6
 8017a86:	9301      	str	r3, [sp, #4]
 8017a88:	003b      	movs	r3, r7
 8017a8a:	f000 ff13 	bl	80188b4 <_dtoa_r>
 8017a8e:	0004      	movs	r4, r0
 8017a90:	2d47      	cmp	r5, #71	@ 0x47
 8017a92:	d11b      	bne.n	8017acc <__cvt+0x90>
 8017a94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017a96:	07db      	lsls	r3, r3, #31
 8017a98:	d511      	bpl.n	8017abe <__cvt+0x82>
 8017a9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017a9c:	18c3      	adds	r3, r0, r3
 8017a9e:	9307      	str	r3, [sp, #28]
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	0030      	movs	r0, r6
 8017aa6:	0039      	movs	r1, r7
 8017aa8:	f7e8 fcd0 	bl	800044c <__aeabi_dcmpeq>
 8017aac:	2800      	cmp	r0, #0
 8017aae:	d001      	beq.n	8017ab4 <__cvt+0x78>
 8017ab0:	9b07      	ldr	r3, [sp, #28]
 8017ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ab4:	2230      	movs	r2, #48	@ 0x30
 8017ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ab8:	9907      	ldr	r1, [sp, #28]
 8017aba:	428b      	cmp	r3, r1
 8017abc:	d320      	bcc.n	8017b00 <__cvt+0xc4>
 8017abe:	0020      	movs	r0, r4
 8017ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ac2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017ac4:	1b1b      	subs	r3, r3, r4
 8017ac6:	6013      	str	r3, [r2, #0]
 8017ac8:	b00b      	add	sp, #44	@ 0x2c
 8017aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017acc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017ace:	18c3      	adds	r3, r0, r3
 8017ad0:	9307      	str	r3, [sp, #28]
 8017ad2:	2d46      	cmp	r5, #70	@ 0x46
 8017ad4:	d1e4      	bne.n	8017aa0 <__cvt+0x64>
 8017ad6:	7803      	ldrb	r3, [r0, #0]
 8017ad8:	2b30      	cmp	r3, #48	@ 0x30
 8017ada:	d10c      	bne.n	8017af6 <__cvt+0xba>
 8017adc:	2200      	movs	r2, #0
 8017ade:	2300      	movs	r3, #0
 8017ae0:	0030      	movs	r0, r6
 8017ae2:	0039      	movs	r1, r7
 8017ae4:	f7e8 fcb2 	bl	800044c <__aeabi_dcmpeq>
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	d104      	bne.n	8017af6 <__cvt+0xba>
 8017aec:	2301      	movs	r3, #1
 8017aee:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017af0:	1a9b      	subs	r3, r3, r2
 8017af2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017af4:	6013      	str	r3, [r2, #0]
 8017af6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017af8:	9a07      	ldr	r2, [sp, #28]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	18d3      	adds	r3, r2, r3
 8017afe:	e7ce      	b.n	8017a9e <__cvt+0x62>
 8017b00:	1c59      	adds	r1, r3, #1
 8017b02:	9109      	str	r1, [sp, #36]	@ 0x24
 8017b04:	701a      	strb	r2, [r3, #0]
 8017b06:	e7d6      	b.n	8017ab6 <__cvt+0x7a>

08017b08 <__exponent>:
 8017b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b0a:	232b      	movs	r3, #43	@ 0x2b
 8017b0c:	0005      	movs	r5, r0
 8017b0e:	000c      	movs	r4, r1
 8017b10:	b085      	sub	sp, #20
 8017b12:	7002      	strb	r2, [r0, #0]
 8017b14:	2900      	cmp	r1, #0
 8017b16:	da01      	bge.n	8017b1c <__exponent+0x14>
 8017b18:	424c      	negs	r4, r1
 8017b1a:	3302      	adds	r3, #2
 8017b1c:	706b      	strb	r3, [r5, #1]
 8017b1e:	2c09      	cmp	r4, #9
 8017b20:	dd2c      	ble.n	8017b7c <__exponent+0x74>
 8017b22:	ab02      	add	r3, sp, #8
 8017b24:	1dde      	adds	r6, r3, #7
 8017b26:	0020      	movs	r0, r4
 8017b28:	210a      	movs	r1, #10
 8017b2a:	f7e8 fc79 	bl	8000420 <__aeabi_idivmod>
 8017b2e:	0037      	movs	r7, r6
 8017b30:	3130      	adds	r1, #48	@ 0x30
 8017b32:	3e01      	subs	r6, #1
 8017b34:	0020      	movs	r0, r4
 8017b36:	7031      	strb	r1, [r6, #0]
 8017b38:	210a      	movs	r1, #10
 8017b3a:	9401      	str	r4, [sp, #4]
 8017b3c:	f7e8 fb8a 	bl	8000254 <__divsi3>
 8017b40:	9b01      	ldr	r3, [sp, #4]
 8017b42:	0004      	movs	r4, r0
 8017b44:	2b63      	cmp	r3, #99	@ 0x63
 8017b46:	dcee      	bgt.n	8017b26 <__exponent+0x1e>
 8017b48:	1eba      	subs	r2, r7, #2
 8017b4a:	1ca8      	adds	r0, r5, #2
 8017b4c:	0001      	movs	r1, r0
 8017b4e:	0013      	movs	r3, r2
 8017b50:	3430      	adds	r4, #48	@ 0x30
 8017b52:	7014      	strb	r4, [r2, #0]
 8017b54:	ac02      	add	r4, sp, #8
 8017b56:	3407      	adds	r4, #7
 8017b58:	429c      	cmp	r4, r3
 8017b5a:	d80a      	bhi.n	8017b72 <__exponent+0x6a>
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	42a2      	cmp	r2, r4
 8017b60:	d803      	bhi.n	8017b6a <__exponent+0x62>
 8017b62:	3309      	adds	r3, #9
 8017b64:	aa02      	add	r2, sp, #8
 8017b66:	189b      	adds	r3, r3, r2
 8017b68:	1bdb      	subs	r3, r3, r7
 8017b6a:	18c0      	adds	r0, r0, r3
 8017b6c:	1b40      	subs	r0, r0, r5
 8017b6e:	b005      	add	sp, #20
 8017b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b72:	781c      	ldrb	r4, [r3, #0]
 8017b74:	3301      	adds	r3, #1
 8017b76:	700c      	strb	r4, [r1, #0]
 8017b78:	3101      	adds	r1, #1
 8017b7a:	e7eb      	b.n	8017b54 <__exponent+0x4c>
 8017b7c:	2330      	movs	r3, #48	@ 0x30
 8017b7e:	18e4      	adds	r4, r4, r3
 8017b80:	70ab      	strb	r3, [r5, #2]
 8017b82:	1d28      	adds	r0, r5, #4
 8017b84:	70ec      	strb	r4, [r5, #3]
 8017b86:	e7f1      	b.n	8017b6c <__exponent+0x64>

08017b88 <_printf_float>:
 8017b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b8a:	b097      	sub	sp, #92	@ 0x5c
 8017b8c:	000d      	movs	r5, r1
 8017b8e:	920a      	str	r2, [sp, #40]	@ 0x28
 8017b90:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017b92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b94:	9009      	str	r0, [sp, #36]	@ 0x24
 8017b96:	f000 fd6b 	bl	8018670 <_localeconv_r>
 8017b9a:	6803      	ldr	r3, [r0, #0]
 8017b9c:	0018      	movs	r0, r3
 8017b9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017ba0:	f7e8 fab2 	bl	8000108 <strlen>
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017ba8:	9314      	str	r3, [sp, #80]	@ 0x50
 8017baa:	7e2b      	ldrb	r3, [r5, #24]
 8017bac:	2207      	movs	r2, #7
 8017bae:	930c      	str	r3, [sp, #48]	@ 0x30
 8017bb0:	682b      	ldr	r3, [r5, #0]
 8017bb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8017bb4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017bb6:	6823      	ldr	r3, [r4, #0]
 8017bb8:	05c9      	lsls	r1, r1, #23
 8017bba:	d545      	bpl.n	8017c48 <_printf_float+0xc0>
 8017bbc:	189b      	adds	r3, r3, r2
 8017bbe:	4393      	bics	r3, r2
 8017bc0:	001a      	movs	r2, r3
 8017bc2:	3208      	adds	r2, #8
 8017bc4:	6022      	str	r2, [r4, #0]
 8017bc6:	2201      	movs	r2, #1
 8017bc8:	681e      	ldr	r6, [r3, #0]
 8017bca:	685f      	ldr	r7, [r3, #4]
 8017bcc:	007b      	lsls	r3, r7, #1
 8017bce:	085b      	lsrs	r3, r3, #1
 8017bd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8017bd2:	9610      	str	r6, [sp, #64]	@ 0x40
 8017bd4:	64ae      	str	r6, [r5, #72]	@ 0x48
 8017bd6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8017bd8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017bda:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017bdc:	4ba7      	ldr	r3, [pc, #668]	@ (8017e7c <_printf_float+0x2f4>)
 8017bde:	4252      	negs	r2, r2
 8017be0:	f7eb fb0e 	bl	8003200 <__aeabi_dcmpun>
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d131      	bne.n	8017c4c <_printf_float+0xc4>
 8017be8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017bea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017bec:	2201      	movs	r2, #1
 8017bee:	4ba3      	ldr	r3, [pc, #652]	@ (8017e7c <_printf_float+0x2f4>)
 8017bf0:	4252      	negs	r2, r2
 8017bf2:	f7e8 fc3b 	bl	800046c <__aeabi_dcmple>
 8017bf6:	2800      	cmp	r0, #0
 8017bf8:	d128      	bne.n	8017c4c <_printf_float+0xc4>
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	0030      	movs	r0, r6
 8017c00:	0039      	movs	r1, r7
 8017c02:	f7e8 fc29 	bl	8000458 <__aeabi_dcmplt>
 8017c06:	2800      	cmp	r0, #0
 8017c08:	d003      	beq.n	8017c12 <_printf_float+0x8a>
 8017c0a:	002b      	movs	r3, r5
 8017c0c:	222d      	movs	r2, #45	@ 0x2d
 8017c0e:	3343      	adds	r3, #67	@ 0x43
 8017c10:	701a      	strb	r2, [r3, #0]
 8017c12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c14:	4f9a      	ldr	r7, [pc, #616]	@ (8017e80 <_printf_float+0x2f8>)
 8017c16:	2b47      	cmp	r3, #71	@ 0x47
 8017c18:	d900      	bls.n	8017c1c <_printf_float+0x94>
 8017c1a:	4f9a      	ldr	r7, [pc, #616]	@ (8017e84 <_printf_float+0x2fc>)
 8017c1c:	2303      	movs	r3, #3
 8017c1e:	2400      	movs	r4, #0
 8017c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017c22:	612b      	str	r3, [r5, #16]
 8017c24:	3301      	adds	r3, #1
 8017c26:	439a      	bics	r2, r3
 8017c28:	602a      	str	r2, [r5, #0]
 8017c2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c2c:	0029      	movs	r1, r5
 8017c2e:	9300      	str	r3, [sp, #0]
 8017c30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c34:	aa15      	add	r2, sp, #84	@ 0x54
 8017c36:	f000 f9e5 	bl	8018004 <_printf_common>
 8017c3a:	3001      	adds	r0, #1
 8017c3c:	d000      	beq.n	8017c40 <_printf_float+0xb8>
 8017c3e:	e09f      	b.n	8017d80 <_printf_float+0x1f8>
 8017c40:	2001      	movs	r0, #1
 8017c42:	4240      	negs	r0, r0
 8017c44:	b017      	add	sp, #92	@ 0x5c
 8017c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c48:	3307      	adds	r3, #7
 8017c4a:	e7b8      	b.n	8017bbe <_printf_float+0x36>
 8017c4c:	0032      	movs	r2, r6
 8017c4e:	003b      	movs	r3, r7
 8017c50:	0030      	movs	r0, r6
 8017c52:	0039      	movs	r1, r7
 8017c54:	f7eb fad4 	bl	8003200 <__aeabi_dcmpun>
 8017c58:	2800      	cmp	r0, #0
 8017c5a:	d00b      	beq.n	8017c74 <_printf_float+0xec>
 8017c5c:	2f00      	cmp	r7, #0
 8017c5e:	da03      	bge.n	8017c68 <_printf_float+0xe0>
 8017c60:	002b      	movs	r3, r5
 8017c62:	222d      	movs	r2, #45	@ 0x2d
 8017c64:	3343      	adds	r3, #67	@ 0x43
 8017c66:	701a      	strb	r2, [r3, #0]
 8017c68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c6a:	4f87      	ldr	r7, [pc, #540]	@ (8017e88 <_printf_float+0x300>)
 8017c6c:	2b47      	cmp	r3, #71	@ 0x47
 8017c6e:	d9d5      	bls.n	8017c1c <_printf_float+0x94>
 8017c70:	4f86      	ldr	r7, [pc, #536]	@ (8017e8c <_printf_float+0x304>)
 8017c72:	e7d3      	b.n	8017c1c <_printf_float+0x94>
 8017c74:	2220      	movs	r2, #32
 8017c76:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017c78:	686b      	ldr	r3, [r5, #4]
 8017c7a:	4394      	bics	r4, r2
 8017c7c:	1c5a      	adds	r2, r3, #1
 8017c7e:	d146      	bne.n	8017d0e <_printf_float+0x186>
 8017c80:	3307      	adds	r3, #7
 8017c82:	606b      	str	r3, [r5, #4]
 8017c84:	2380      	movs	r3, #128	@ 0x80
 8017c86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017c88:	00db      	lsls	r3, r3, #3
 8017c8a:	4313      	orrs	r3, r2
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	602b      	str	r3, [r5, #0]
 8017c90:	9206      	str	r2, [sp, #24]
 8017c92:	aa14      	add	r2, sp, #80	@ 0x50
 8017c94:	9205      	str	r2, [sp, #20]
 8017c96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017c98:	a90a      	add	r1, sp, #40	@ 0x28
 8017c9a:	9204      	str	r2, [sp, #16]
 8017c9c:	aa13      	add	r2, sp, #76	@ 0x4c
 8017c9e:	9203      	str	r2, [sp, #12]
 8017ca0:	2223      	movs	r2, #35	@ 0x23
 8017ca2:	1852      	adds	r2, r2, r1
 8017ca4:	9202      	str	r2, [sp, #8]
 8017ca6:	9301      	str	r3, [sp, #4]
 8017ca8:	686b      	ldr	r3, [r5, #4]
 8017caa:	0032      	movs	r2, r6
 8017cac:	9300      	str	r3, [sp, #0]
 8017cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017cb0:	003b      	movs	r3, r7
 8017cb2:	f7ff fec3 	bl	8017a3c <__cvt>
 8017cb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017cb8:	0007      	movs	r7, r0
 8017cba:	2c47      	cmp	r4, #71	@ 0x47
 8017cbc:	d12d      	bne.n	8017d1a <_printf_float+0x192>
 8017cbe:	1cd3      	adds	r3, r2, #3
 8017cc0:	db02      	blt.n	8017cc8 <_printf_float+0x140>
 8017cc2:	686b      	ldr	r3, [r5, #4]
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	dd48      	ble.n	8017d5a <_printf_float+0x1d2>
 8017cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017ccc:	3b02      	subs	r3, #2
 8017cce:	b2db      	uxtb	r3, r3
 8017cd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8017cd2:	0028      	movs	r0, r5
 8017cd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017cd6:	3901      	subs	r1, #1
 8017cd8:	3050      	adds	r0, #80	@ 0x50
 8017cda:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017cdc:	f7ff ff14 	bl	8017b08 <__exponent>
 8017ce0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017ce2:	0004      	movs	r4, r0
 8017ce4:	1813      	adds	r3, r2, r0
 8017ce6:	612b      	str	r3, [r5, #16]
 8017ce8:	2a01      	cmp	r2, #1
 8017cea:	dc02      	bgt.n	8017cf2 <_printf_float+0x16a>
 8017cec:	682a      	ldr	r2, [r5, #0]
 8017cee:	07d2      	lsls	r2, r2, #31
 8017cf0:	d501      	bpl.n	8017cf6 <_printf_float+0x16e>
 8017cf2:	3301      	adds	r3, #1
 8017cf4:	612b      	str	r3, [r5, #16]
 8017cf6:	2323      	movs	r3, #35	@ 0x23
 8017cf8:	aa0a      	add	r2, sp, #40	@ 0x28
 8017cfa:	189b      	adds	r3, r3, r2
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d100      	bne.n	8017d04 <_printf_float+0x17c>
 8017d02:	e792      	b.n	8017c2a <_printf_float+0xa2>
 8017d04:	002b      	movs	r3, r5
 8017d06:	222d      	movs	r2, #45	@ 0x2d
 8017d08:	3343      	adds	r3, #67	@ 0x43
 8017d0a:	701a      	strb	r2, [r3, #0]
 8017d0c:	e78d      	b.n	8017c2a <_printf_float+0xa2>
 8017d0e:	2c47      	cmp	r4, #71	@ 0x47
 8017d10:	d1b8      	bne.n	8017c84 <_printf_float+0xfc>
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d1b6      	bne.n	8017c84 <_printf_float+0xfc>
 8017d16:	3301      	adds	r3, #1
 8017d18:	e7b3      	b.n	8017c82 <_printf_float+0xfa>
 8017d1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d1c:	0011      	movs	r1, r2
 8017d1e:	2b65      	cmp	r3, #101	@ 0x65
 8017d20:	d9d7      	bls.n	8017cd2 <_printf_float+0x14a>
 8017d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d24:	2b66      	cmp	r3, #102	@ 0x66
 8017d26:	d11a      	bne.n	8017d5e <_printf_float+0x1d6>
 8017d28:	686b      	ldr	r3, [r5, #4]
 8017d2a:	2a00      	cmp	r2, #0
 8017d2c:	dd09      	ble.n	8017d42 <_printf_float+0x1ba>
 8017d2e:	612a      	str	r2, [r5, #16]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d102      	bne.n	8017d3a <_printf_float+0x1b2>
 8017d34:	6829      	ldr	r1, [r5, #0]
 8017d36:	07c9      	lsls	r1, r1, #31
 8017d38:	d50b      	bpl.n	8017d52 <_printf_float+0x1ca>
 8017d3a:	3301      	adds	r3, #1
 8017d3c:	189b      	adds	r3, r3, r2
 8017d3e:	612b      	str	r3, [r5, #16]
 8017d40:	e007      	b.n	8017d52 <_printf_float+0x1ca>
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d103      	bne.n	8017d4e <_printf_float+0x1c6>
 8017d46:	2201      	movs	r2, #1
 8017d48:	6829      	ldr	r1, [r5, #0]
 8017d4a:	4211      	tst	r1, r2
 8017d4c:	d000      	beq.n	8017d50 <_printf_float+0x1c8>
 8017d4e:	1c9a      	adds	r2, r3, #2
 8017d50:	612a      	str	r2, [r5, #16]
 8017d52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d54:	2400      	movs	r4, #0
 8017d56:	65ab      	str	r3, [r5, #88]	@ 0x58
 8017d58:	e7cd      	b.n	8017cf6 <_printf_float+0x16e>
 8017d5a:	2367      	movs	r3, #103	@ 0x67
 8017d5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8017d5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017d60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017d62:	4299      	cmp	r1, r3
 8017d64:	db06      	blt.n	8017d74 <_printf_float+0x1ec>
 8017d66:	682b      	ldr	r3, [r5, #0]
 8017d68:	6129      	str	r1, [r5, #16]
 8017d6a:	07db      	lsls	r3, r3, #31
 8017d6c:	d5f1      	bpl.n	8017d52 <_printf_float+0x1ca>
 8017d6e:	3101      	adds	r1, #1
 8017d70:	6129      	str	r1, [r5, #16]
 8017d72:	e7ee      	b.n	8017d52 <_printf_float+0x1ca>
 8017d74:	2201      	movs	r2, #1
 8017d76:	2900      	cmp	r1, #0
 8017d78:	dce0      	bgt.n	8017d3c <_printf_float+0x1b4>
 8017d7a:	1892      	adds	r2, r2, r2
 8017d7c:	1a52      	subs	r2, r2, r1
 8017d7e:	e7dd      	b.n	8017d3c <_printf_float+0x1b4>
 8017d80:	682a      	ldr	r2, [r5, #0]
 8017d82:	0553      	lsls	r3, r2, #21
 8017d84:	d408      	bmi.n	8017d98 <_printf_float+0x210>
 8017d86:	692b      	ldr	r3, [r5, #16]
 8017d88:	003a      	movs	r2, r7
 8017d8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d8e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d90:	47a0      	blx	r4
 8017d92:	3001      	adds	r0, #1
 8017d94:	d129      	bne.n	8017dea <_printf_float+0x262>
 8017d96:	e753      	b.n	8017c40 <_printf_float+0xb8>
 8017d98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d9a:	2b65      	cmp	r3, #101	@ 0x65
 8017d9c:	d800      	bhi.n	8017da0 <_printf_float+0x218>
 8017d9e:	e0da      	b.n	8017f56 <_printf_float+0x3ce>
 8017da0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017da2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017da4:	2200      	movs	r2, #0
 8017da6:	2300      	movs	r3, #0
 8017da8:	f7e8 fb50 	bl	800044c <__aeabi_dcmpeq>
 8017dac:	2800      	cmp	r0, #0
 8017dae:	d033      	beq.n	8017e18 <_printf_float+0x290>
 8017db0:	2301      	movs	r3, #1
 8017db2:	4a37      	ldr	r2, [pc, #220]	@ (8017e90 <_printf_float+0x308>)
 8017db4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017db8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017dba:	47a0      	blx	r4
 8017dbc:	3001      	adds	r0, #1
 8017dbe:	d100      	bne.n	8017dc2 <_printf_float+0x23a>
 8017dc0:	e73e      	b.n	8017c40 <_printf_float+0xb8>
 8017dc2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017dc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017dc6:	42b3      	cmp	r3, r6
 8017dc8:	db02      	blt.n	8017dd0 <_printf_float+0x248>
 8017dca:	682b      	ldr	r3, [r5, #0]
 8017dcc:	07db      	lsls	r3, r3, #31
 8017dce:	d50c      	bpl.n	8017dea <_printf_float+0x262>
 8017dd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017dd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017dd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017dd6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017dd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017dda:	47a0      	blx	r4
 8017ddc:	2400      	movs	r4, #0
 8017dde:	3001      	adds	r0, #1
 8017de0:	d100      	bne.n	8017de4 <_printf_float+0x25c>
 8017de2:	e72d      	b.n	8017c40 <_printf_float+0xb8>
 8017de4:	1e73      	subs	r3, r6, #1
 8017de6:	42a3      	cmp	r3, r4
 8017de8:	dc0a      	bgt.n	8017e00 <_printf_float+0x278>
 8017dea:	682b      	ldr	r3, [r5, #0]
 8017dec:	079b      	lsls	r3, r3, #30
 8017dee:	d500      	bpl.n	8017df2 <_printf_float+0x26a>
 8017df0:	e105      	b.n	8017ffe <_printf_float+0x476>
 8017df2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017df4:	68e8      	ldr	r0, [r5, #12]
 8017df6:	4298      	cmp	r0, r3
 8017df8:	db00      	blt.n	8017dfc <_printf_float+0x274>
 8017dfa:	e723      	b.n	8017c44 <_printf_float+0xbc>
 8017dfc:	0018      	movs	r0, r3
 8017dfe:	e721      	b.n	8017c44 <_printf_float+0xbc>
 8017e00:	002a      	movs	r2, r5
 8017e02:	2301      	movs	r3, #1
 8017e04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e08:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017e0a:	321a      	adds	r2, #26
 8017e0c:	47b8      	blx	r7
 8017e0e:	3001      	adds	r0, #1
 8017e10:	d100      	bne.n	8017e14 <_printf_float+0x28c>
 8017e12:	e715      	b.n	8017c40 <_printf_float+0xb8>
 8017e14:	3401      	adds	r4, #1
 8017e16:	e7e5      	b.n	8017de4 <_printf_float+0x25c>
 8017e18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	dc3a      	bgt.n	8017e94 <_printf_float+0x30c>
 8017e1e:	2301      	movs	r3, #1
 8017e20:	4a1b      	ldr	r2, [pc, #108]	@ (8017e90 <_printf_float+0x308>)
 8017e22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017e28:	47a0      	blx	r4
 8017e2a:	3001      	adds	r0, #1
 8017e2c:	d100      	bne.n	8017e30 <_printf_float+0x2a8>
 8017e2e:	e707      	b.n	8017c40 <_printf_float+0xb8>
 8017e30:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017e32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e34:	4333      	orrs	r3, r6
 8017e36:	d102      	bne.n	8017e3e <_printf_float+0x2b6>
 8017e38:	682b      	ldr	r3, [r5, #0]
 8017e3a:	07db      	lsls	r3, r3, #31
 8017e3c:	d5d5      	bpl.n	8017dea <_printf_float+0x262>
 8017e3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017e42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017e48:	47a0      	blx	r4
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	3001      	adds	r0, #1
 8017e4e:	d100      	bne.n	8017e52 <_printf_float+0x2ca>
 8017e50:	e6f6      	b.n	8017c40 <_printf_float+0xb8>
 8017e52:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017e58:	425b      	negs	r3, r3
 8017e5a:	4293      	cmp	r3, r2
 8017e5c:	dc01      	bgt.n	8017e62 <_printf_float+0x2da>
 8017e5e:	0033      	movs	r3, r6
 8017e60:	e792      	b.n	8017d88 <_printf_float+0x200>
 8017e62:	002a      	movs	r2, r5
 8017e64:	2301      	movs	r3, #1
 8017e66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e6a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017e6c:	321a      	adds	r2, #26
 8017e6e:	47a0      	blx	r4
 8017e70:	3001      	adds	r0, #1
 8017e72:	d100      	bne.n	8017e76 <_printf_float+0x2ee>
 8017e74:	e6e4      	b.n	8017c40 <_printf_float+0xb8>
 8017e76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e78:	3301      	adds	r3, #1
 8017e7a:	e7ea      	b.n	8017e52 <_printf_float+0x2ca>
 8017e7c:	7fefffff 	.word	0x7fefffff
 8017e80:	0801c374 	.word	0x0801c374
 8017e84:	0801c378 	.word	0x0801c378
 8017e88:	0801c37c 	.word	0x0801c37c
 8017e8c:	0801c380 	.word	0x0801c380
 8017e90:	0801c384 	.word	0x0801c384
 8017e94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017e96:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017e98:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e9a:	429e      	cmp	r6, r3
 8017e9c:	dd00      	ble.n	8017ea0 <_printf_float+0x318>
 8017e9e:	001e      	movs	r6, r3
 8017ea0:	2e00      	cmp	r6, #0
 8017ea2:	dc31      	bgt.n	8017f08 <_printf_float+0x380>
 8017ea4:	43f3      	mvns	r3, r6
 8017ea6:	2400      	movs	r4, #0
 8017ea8:	17db      	asrs	r3, r3, #31
 8017eaa:	4033      	ands	r3, r6
 8017eac:	930e      	str	r3, [sp, #56]	@ 0x38
 8017eae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017eb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017eb2:	1af3      	subs	r3, r6, r3
 8017eb4:	42a3      	cmp	r3, r4
 8017eb6:	dc30      	bgt.n	8017f1a <_printf_float+0x392>
 8017eb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017eba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	dc38      	bgt.n	8017f32 <_printf_float+0x3aa>
 8017ec0:	682b      	ldr	r3, [r5, #0]
 8017ec2:	07db      	lsls	r3, r3, #31
 8017ec4:	d435      	bmi.n	8017f32 <_printf_float+0x3aa>
 8017ec6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017ec8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017eca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017ecc:	1b9b      	subs	r3, r3, r6
 8017ece:	1b14      	subs	r4, r2, r4
 8017ed0:	429c      	cmp	r4, r3
 8017ed2:	dd00      	ble.n	8017ed6 <_printf_float+0x34e>
 8017ed4:	001c      	movs	r4, r3
 8017ed6:	2c00      	cmp	r4, #0
 8017ed8:	dc34      	bgt.n	8017f44 <_printf_float+0x3bc>
 8017eda:	43e3      	mvns	r3, r4
 8017edc:	2600      	movs	r6, #0
 8017ede:	17db      	asrs	r3, r3, #31
 8017ee0:	401c      	ands	r4, r3
 8017ee2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017ee4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017ee6:	1ad3      	subs	r3, r2, r3
 8017ee8:	1b1b      	subs	r3, r3, r4
 8017eea:	42b3      	cmp	r3, r6
 8017eec:	dc00      	bgt.n	8017ef0 <_printf_float+0x368>
 8017eee:	e77c      	b.n	8017dea <_printf_float+0x262>
 8017ef0:	002a      	movs	r2, r5
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ef8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017efa:	321a      	adds	r2, #26
 8017efc:	47b8      	blx	r7
 8017efe:	3001      	adds	r0, #1
 8017f00:	d100      	bne.n	8017f04 <_printf_float+0x37c>
 8017f02:	e69d      	b.n	8017c40 <_printf_float+0xb8>
 8017f04:	3601      	adds	r6, #1
 8017f06:	e7ec      	b.n	8017ee2 <_printf_float+0x35a>
 8017f08:	0033      	movs	r3, r6
 8017f0a:	003a      	movs	r2, r7
 8017f0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017f12:	47a0      	blx	r4
 8017f14:	3001      	adds	r0, #1
 8017f16:	d1c5      	bne.n	8017ea4 <_printf_float+0x31c>
 8017f18:	e692      	b.n	8017c40 <_printf_float+0xb8>
 8017f1a:	002a      	movs	r2, r5
 8017f1c:	2301      	movs	r3, #1
 8017f1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f24:	321a      	adds	r2, #26
 8017f26:	47b0      	blx	r6
 8017f28:	3001      	adds	r0, #1
 8017f2a:	d100      	bne.n	8017f2e <_printf_float+0x3a6>
 8017f2c:	e688      	b.n	8017c40 <_printf_float+0xb8>
 8017f2e:	3401      	adds	r4, #1
 8017f30:	e7bd      	b.n	8017eae <_printf_float+0x326>
 8017f32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017f36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f3a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017f3c:	47a0      	blx	r4
 8017f3e:	3001      	adds	r0, #1
 8017f40:	d1c1      	bne.n	8017ec6 <_printf_float+0x33e>
 8017f42:	e67d      	b.n	8017c40 <_printf_float+0xb8>
 8017f44:	19ba      	adds	r2, r7, r6
 8017f46:	0023      	movs	r3, r4
 8017f48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f4e:	47b0      	blx	r6
 8017f50:	3001      	adds	r0, #1
 8017f52:	d1c2      	bne.n	8017eda <_printf_float+0x352>
 8017f54:	e674      	b.n	8017c40 <_printf_float+0xb8>
 8017f56:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017f58:	930c      	str	r3, [sp, #48]	@ 0x30
 8017f5a:	2b01      	cmp	r3, #1
 8017f5c:	dc02      	bgt.n	8017f64 <_printf_float+0x3dc>
 8017f5e:	2301      	movs	r3, #1
 8017f60:	421a      	tst	r2, r3
 8017f62:	d039      	beq.n	8017fd8 <_printf_float+0x450>
 8017f64:	2301      	movs	r3, #1
 8017f66:	003a      	movs	r2, r7
 8017f68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f6e:	47b0      	blx	r6
 8017f70:	3001      	adds	r0, #1
 8017f72:	d100      	bne.n	8017f76 <_printf_float+0x3ee>
 8017f74:	e664      	b.n	8017c40 <_printf_float+0xb8>
 8017f76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017f7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f7e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f80:	47b0      	blx	r6
 8017f82:	3001      	adds	r0, #1
 8017f84:	d100      	bne.n	8017f88 <_printf_float+0x400>
 8017f86:	e65b      	b.n	8017c40 <_printf_float+0xb8>
 8017f88:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017f8a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017f8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f8e:	2200      	movs	r2, #0
 8017f90:	3b01      	subs	r3, #1
 8017f92:	930c      	str	r3, [sp, #48]	@ 0x30
 8017f94:	2300      	movs	r3, #0
 8017f96:	f7e8 fa59 	bl	800044c <__aeabi_dcmpeq>
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	d11a      	bne.n	8017fd4 <_printf_float+0x44c>
 8017f9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017fa0:	1c7a      	adds	r2, r7, #1
 8017fa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017fa4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fa6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017fa8:	47b0      	blx	r6
 8017faa:	3001      	adds	r0, #1
 8017fac:	d10e      	bne.n	8017fcc <_printf_float+0x444>
 8017fae:	e647      	b.n	8017c40 <_printf_float+0xb8>
 8017fb0:	002a      	movs	r2, r5
 8017fb2:	2301      	movs	r3, #1
 8017fb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fb8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017fba:	321a      	adds	r2, #26
 8017fbc:	47b8      	blx	r7
 8017fbe:	3001      	adds	r0, #1
 8017fc0:	d100      	bne.n	8017fc4 <_printf_float+0x43c>
 8017fc2:	e63d      	b.n	8017c40 <_printf_float+0xb8>
 8017fc4:	3601      	adds	r6, #1
 8017fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017fc8:	429e      	cmp	r6, r3
 8017fca:	dbf1      	blt.n	8017fb0 <_printf_float+0x428>
 8017fcc:	002a      	movs	r2, r5
 8017fce:	0023      	movs	r3, r4
 8017fd0:	3250      	adds	r2, #80	@ 0x50
 8017fd2:	e6da      	b.n	8017d8a <_printf_float+0x202>
 8017fd4:	2600      	movs	r6, #0
 8017fd6:	e7f6      	b.n	8017fc6 <_printf_float+0x43e>
 8017fd8:	003a      	movs	r2, r7
 8017fda:	e7e2      	b.n	8017fa2 <_printf_float+0x41a>
 8017fdc:	002a      	movs	r2, r5
 8017fde:	2301      	movs	r3, #1
 8017fe0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017fe4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017fe6:	3219      	adds	r2, #25
 8017fe8:	47b0      	blx	r6
 8017fea:	3001      	adds	r0, #1
 8017fec:	d100      	bne.n	8017ff0 <_printf_float+0x468>
 8017fee:	e627      	b.n	8017c40 <_printf_float+0xb8>
 8017ff0:	3401      	adds	r4, #1
 8017ff2:	68eb      	ldr	r3, [r5, #12]
 8017ff4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017ff6:	1a9b      	subs	r3, r3, r2
 8017ff8:	42a3      	cmp	r3, r4
 8017ffa:	dcef      	bgt.n	8017fdc <_printf_float+0x454>
 8017ffc:	e6f9      	b.n	8017df2 <_printf_float+0x26a>
 8017ffe:	2400      	movs	r4, #0
 8018000:	e7f7      	b.n	8017ff2 <_printf_float+0x46a>
 8018002:	46c0      	nop			@ (mov r8, r8)

08018004 <_printf_common>:
 8018004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018006:	0016      	movs	r6, r2
 8018008:	9301      	str	r3, [sp, #4]
 801800a:	688a      	ldr	r2, [r1, #8]
 801800c:	690b      	ldr	r3, [r1, #16]
 801800e:	000c      	movs	r4, r1
 8018010:	9000      	str	r0, [sp, #0]
 8018012:	4293      	cmp	r3, r2
 8018014:	da00      	bge.n	8018018 <_printf_common+0x14>
 8018016:	0013      	movs	r3, r2
 8018018:	0022      	movs	r2, r4
 801801a:	6033      	str	r3, [r6, #0]
 801801c:	3243      	adds	r2, #67	@ 0x43
 801801e:	7812      	ldrb	r2, [r2, #0]
 8018020:	2a00      	cmp	r2, #0
 8018022:	d001      	beq.n	8018028 <_printf_common+0x24>
 8018024:	3301      	adds	r3, #1
 8018026:	6033      	str	r3, [r6, #0]
 8018028:	6823      	ldr	r3, [r4, #0]
 801802a:	069b      	lsls	r3, r3, #26
 801802c:	d502      	bpl.n	8018034 <_printf_common+0x30>
 801802e:	6833      	ldr	r3, [r6, #0]
 8018030:	3302      	adds	r3, #2
 8018032:	6033      	str	r3, [r6, #0]
 8018034:	6822      	ldr	r2, [r4, #0]
 8018036:	2306      	movs	r3, #6
 8018038:	0015      	movs	r5, r2
 801803a:	401d      	ands	r5, r3
 801803c:	421a      	tst	r2, r3
 801803e:	d027      	beq.n	8018090 <_printf_common+0x8c>
 8018040:	0023      	movs	r3, r4
 8018042:	3343      	adds	r3, #67	@ 0x43
 8018044:	781b      	ldrb	r3, [r3, #0]
 8018046:	1e5a      	subs	r2, r3, #1
 8018048:	4193      	sbcs	r3, r2
 801804a:	6822      	ldr	r2, [r4, #0]
 801804c:	0692      	lsls	r2, r2, #26
 801804e:	d430      	bmi.n	80180b2 <_printf_common+0xae>
 8018050:	0022      	movs	r2, r4
 8018052:	9901      	ldr	r1, [sp, #4]
 8018054:	9800      	ldr	r0, [sp, #0]
 8018056:	9d08      	ldr	r5, [sp, #32]
 8018058:	3243      	adds	r2, #67	@ 0x43
 801805a:	47a8      	blx	r5
 801805c:	3001      	adds	r0, #1
 801805e:	d025      	beq.n	80180ac <_printf_common+0xa8>
 8018060:	2206      	movs	r2, #6
 8018062:	6823      	ldr	r3, [r4, #0]
 8018064:	2500      	movs	r5, #0
 8018066:	4013      	ands	r3, r2
 8018068:	2b04      	cmp	r3, #4
 801806a:	d105      	bne.n	8018078 <_printf_common+0x74>
 801806c:	6833      	ldr	r3, [r6, #0]
 801806e:	68e5      	ldr	r5, [r4, #12]
 8018070:	1aed      	subs	r5, r5, r3
 8018072:	43eb      	mvns	r3, r5
 8018074:	17db      	asrs	r3, r3, #31
 8018076:	401d      	ands	r5, r3
 8018078:	68a3      	ldr	r3, [r4, #8]
 801807a:	6922      	ldr	r2, [r4, #16]
 801807c:	4293      	cmp	r3, r2
 801807e:	dd01      	ble.n	8018084 <_printf_common+0x80>
 8018080:	1a9b      	subs	r3, r3, r2
 8018082:	18ed      	adds	r5, r5, r3
 8018084:	2600      	movs	r6, #0
 8018086:	42b5      	cmp	r5, r6
 8018088:	d120      	bne.n	80180cc <_printf_common+0xc8>
 801808a:	2000      	movs	r0, #0
 801808c:	e010      	b.n	80180b0 <_printf_common+0xac>
 801808e:	3501      	adds	r5, #1
 8018090:	68e3      	ldr	r3, [r4, #12]
 8018092:	6832      	ldr	r2, [r6, #0]
 8018094:	1a9b      	subs	r3, r3, r2
 8018096:	42ab      	cmp	r3, r5
 8018098:	ddd2      	ble.n	8018040 <_printf_common+0x3c>
 801809a:	0022      	movs	r2, r4
 801809c:	2301      	movs	r3, #1
 801809e:	9901      	ldr	r1, [sp, #4]
 80180a0:	9800      	ldr	r0, [sp, #0]
 80180a2:	9f08      	ldr	r7, [sp, #32]
 80180a4:	3219      	adds	r2, #25
 80180a6:	47b8      	blx	r7
 80180a8:	3001      	adds	r0, #1
 80180aa:	d1f0      	bne.n	801808e <_printf_common+0x8a>
 80180ac:	2001      	movs	r0, #1
 80180ae:	4240      	negs	r0, r0
 80180b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80180b2:	2030      	movs	r0, #48	@ 0x30
 80180b4:	18e1      	adds	r1, r4, r3
 80180b6:	3143      	adds	r1, #67	@ 0x43
 80180b8:	7008      	strb	r0, [r1, #0]
 80180ba:	0021      	movs	r1, r4
 80180bc:	1c5a      	adds	r2, r3, #1
 80180be:	3145      	adds	r1, #69	@ 0x45
 80180c0:	7809      	ldrb	r1, [r1, #0]
 80180c2:	18a2      	adds	r2, r4, r2
 80180c4:	3243      	adds	r2, #67	@ 0x43
 80180c6:	3302      	adds	r3, #2
 80180c8:	7011      	strb	r1, [r2, #0]
 80180ca:	e7c1      	b.n	8018050 <_printf_common+0x4c>
 80180cc:	0022      	movs	r2, r4
 80180ce:	2301      	movs	r3, #1
 80180d0:	9901      	ldr	r1, [sp, #4]
 80180d2:	9800      	ldr	r0, [sp, #0]
 80180d4:	9f08      	ldr	r7, [sp, #32]
 80180d6:	321a      	adds	r2, #26
 80180d8:	47b8      	blx	r7
 80180da:	3001      	adds	r0, #1
 80180dc:	d0e6      	beq.n	80180ac <_printf_common+0xa8>
 80180de:	3601      	adds	r6, #1
 80180e0:	e7d1      	b.n	8018086 <_printf_common+0x82>
	...

080180e4 <_printf_i>:
 80180e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180e6:	b08b      	sub	sp, #44	@ 0x2c
 80180e8:	9206      	str	r2, [sp, #24]
 80180ea:	000a      	movs	r2, r1
 80180ec:	3243      	adds	r2, #67	@ 0x43
 80180ee:	9307      	str	r3, [sp, #28]
 80180f0:	9005      	str	r0, [sp, #20]
 80180f2:	9203      	str	r2, [sp, #12]
 80180f4:	7e0a      	ldrb	r2, [r1, #24]
 80180f6:	000c      	movs	r4, r1
 80180f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80180fa:	2a78      	cmp	r2, #120	@ 0x78
 80180fc:	d809      	bhi.n	8018112 <_printf_i+0x2e>
 80180fe:	2a62      	cmp	r2, #98	@ 0x62
 8018100:	d80b      	bhi.n	801811a <_printf_i+0x36>
 8018102:	2a00      	cmp	r2, #0
 8018104:	d100      	bne.n	8018108 <_printf_i+0x24>
 8018106:	e0bc      	b.n	8018282 <_printf_i+0x19e>
 8018108:	497b      	ldr	r1, [pc, #492]	@ (80182f8 <_printf_i+0x214>)
 801810a:	9104      	str	r1, [sp, #16]
 801810c:	2a58      	cmp	r2, #88	@ 0x58
 801810e:	d100      	bne.n	8018112 <_printf_i+0x2e>
 8018110:	e090      	b.n	8018234 <_printf_i+0x150>
 8018112:	0025      	movs	r5, r4
 8018114:	3542      	adds	r5, #66	@ 0x42
 8018116:	702a      	strb	r2, [r5, #0]
 8018118:	e022      	b.n	8018160 <_printf_i+0x7c>
 801811a:	0010      	movs	r0, r2
 801811c:	3863      	subs	r0, #99	@ 0x63
 801811e:	2815      	cmp	r0, #21
 8018120:	d8f7      	bhi.n	8018112 <_printf_i+0x2e>
 8018122:	f7e8 f803 	bl	800012c <__gnu_thumb1_case_shi>
 8018126:	0016      	.short	0x0016
 8018128:	fff6001f 	.word	0xfff6001f
 801812c:	fff6fff6 	.word	0xfff6fff6
 8018130:	001ffff6 	.word	0x001ffff6
 8018134:	fff6fff6 	.word	0xfff6fff6
 8018138:	fff6fff6 	.word	0xfff6fff6
 801813c:	003600a1 	.word	0x003600a1
 8018140:	fff60080 	.word	0xfff60080
 8018144:	00b2fff6 	.word	0x00b2fff6
 8018148:	0036fff6 	.word	0x0036fff6
 801814c:	fff6fff6 	.word	0xfff6fff6
 8018150:	0084      	.short	0x0084
 8018152:	0025      	movs	r5, r4
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	3542      	adds	r5, #66	@ 0x42
 8018158:	1d11      	adds	r1, r2, #4
 801815a:	6019      	str	r1, [r3, #0]
 801815c:	6813      	ldr	r3, [r2, #0]
 801815e:	702b      	strb	r3, [r5, #0]
 8018160:	2301      	movs	r3, #1
 8018162:	e0a0      	b.n	80182a6 <_printf_i+0x1c2>
 8018164:	6818      	ldr	r0, [r3, #0]
 8018166:	6809      	ldr	r1, [r1, #0]
 8018168:	1d02      	adds	r2, r0, #4
 801816a:	060d      	lsls	r5, r1, #24
 801816c:	d50b      	bpl.n	8018186 <_printf_i+0xa2>
 801816e:	6806      	ldr	r6, [r0, #0]
 8018170:	601a      	str	r2, [r3, #0]
 8018172:	2e00      	cmp	r6, #0
 8018174:	da03      	bge.n	801817e <_printf_i+0x9a>
 8018176:	232d      	movs	r3, #45	@ 0x2d
 8018178:	9a03      	ldr	r2, [sp, #12]
 801817a:	4276      	negs	r6, r6
 801817c:	7013      	strb	r3, [r2, #0]
 801817e:	4b5e      	ldr	r3, [pc, #376]	@ (80182f8 <_printf_i+0x214>)
 8018180:	270a      	movs	r7, #10
 8018182:	9304      	str	r3, [sp, #16]
 8018184:	e018      	b.n	80181b8 <_printf_i+0xd4>
 8018186:	6806      	ldr	r6, [r0, #0]
 8018188:	601a      	str	r2, [r3, #0]
 801818a:	0649      	lsls	r1, r1, #25
 801818c:	d5f1      	bpl.n	8018172 <_printf_i+0x8e>
 801818e:	b236      	sxth	r6, r6
 8018190:	e7ef      	b.n	8018172 <_printf_i+0x8e>
 8018192:	6808      	ldr	r0, [r1, #0]
 8018194:	6819      	ldr	r1, [r3, #0]
 8018196:	c940      	ldmia	r1!, {r6}
 8018198:	0605      	lsls	r5, r0, #24
 801819a:	d402      	bmi.n	80181a2 <_printf_i+0xbe>
 801819c:	0640      	lsls	r0, r0, #25
 801819e:	d500      	bpl.n	80181a2 <_printf_i+0xbe>
 80181a0:	b2b6      	uxth	r6, r6
 80181a2:	6019      	str	r1, [r3, #0]
 80181a4:	4b54      	ldr	r3, [pc, #336]	@ (80182f8 <_printf_i+0x214>)
 80181a6:	270a      	movs	r7, #10
 80181a8:	9304      	str	r3, [sp, #16]
 80181aa:	2a6f      	cmp	r2, #111	@ 0x6f
 80181ac:	d100      	bne.n	80181b0 <_printf_i+0xcc>
 80181ae:	3f02      	subs	r7, #2
 80181b0:	0023      	movs	r3, r4
 80181b2:	2200      	movs	r2, #0
 80181b4:	3343      	adds	r3, #67	@ 0x43
 80181b6:	701a      	strb	r2, [r3, #0]
 80181b8:	6863      	ldr	r3, [r4, #4]
 80181ba:	60a3      	str	r3, [r4, #8]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	db03      	blt.n	80181c8 <_printf_i+0xe4>
 80181c0:	2104      	movs	r1, #4
 80181c2:	6822      	ldr	r2, [r4, #0]
 80181c4:	438a      	bics	r2, r1
 80181c6:	6022      	str	r2, [r4, #0]
 80181c8:	2e00      	cmp	r6, #0
 80181ca:	d102      	bne.n	80181d2 <_printf_i+0xee>
 80181cc:	9d03      	ldr	r5, [sp, #12]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d00c      	beq.n	80181ec <_printf_i+0x108>
 80181d2:	9d03      	ldr	r5, [sp, #12]
 80181d4:	0030      	movs	r0, r6
 80181d6:	0039      	movs	r1, r7
 80181d8:	f7e8 f838 	bl	800024c <__aeabi_uidivmod>
 80181dc:	9b04      	ldr	r3, [sp, #16]
 80181de:	3d01      	subs	r5, #1
 80181e0:	5c5b      	ldrb	r3, [r3, r1]
 80181e2:	702b      	strb	r3, [r5, #0]
 80181e4:	0033      	movs	r3, r6
 80181e6:	0006      	movs	r6, r0
 80181e8:	429f      	cmp	r7, r3
 80181ea:	d9f3      	bls.n	80181d4 <_printf_i+0xf0>
 80181ec:	2f08      	cmp	r7, #8
 80181ee:	d109      	bne.n	8018204 <_printf_i+0x120>
 80181f0:	6823      	ldr	r3, [r4, #0]
 80181f2:	07db      	lsls	r3, r3, #31
 80181f4:	d506      	bpl.n	8018204 <_printf_i+0x120>
 80181f6:	6862      	ldr	r2, [r4, #4]
 80181f8:	6923      	ldr	r3, [r4, #16]
 80181fa:	429a      	cmp	r2, r3
 80181fc:	dc02      	bgt.n	8018204 <_printf_i+0x120>
 80181fe:	2330      	movs	r3, #48	@ 0x30
 8018200:	3d01      	subs	r5, #1
 8018202:	702b      	strb	r3, [r5, #0]
 8018204:	9b03      	ldr	r3, [sp, #12]
 8018206:	1b5b      	subs	r3, r3, r5
 8018208:	6123      	str	r3, [r4, #16]
 801820a:	9b07      	ldr	r3, [sp, #28]
 801820c:	0021      	movs	r1, r4
 801820e:	9300      	str	r3, [sp, #0]
 8018210:	9805      	ldr	r0, [sp, #20]
 8018212:	9b06      	ldr	r3, [sp, #24]
 8018214:	aa09      	add	r2, sp, #36	@ 0x24
 8018216:	f7ff fef5 	bl	8018004 <_printf_common>
 801821a:	3001      	adds	r0, #1
 801821c:	d148      	bne.n	80182b0 <_printf_i+0x1cc>
 801821e:	2001      	movs	r0, #1
 8018220:	4240      	negs	r0, r0
 8018222:	b00b      	add	sp, #44	@ 0x2c
 8018224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018226:	2220      	movs	r2, #32
 8018228:	6809      	ldr	r1, [r1, #0]
 801822a:	430a      	orrs	r2, r1
 801822c:	6022      	str	r2, [r4, #0]
 801822e:	2278      	movs	r2, #120	@ 0x78
 8018230:	4932      	ldr	r1, [pc, #200]	@ (80182fc <_printf_i+0x218>)
 8018232:	9104      	str	r1, [sp, #16]
 8018234:	0021      	movs	r1, r4
 8018236:	3145      	adds	r1, #69	@ 0x45
 8018238:	700a      	strb	r2, [r1, #0]
 801823a:	6819      	ldr	r1, [r3, #0]
 801823c:	6822      	ldr	r2, [r4, #0]
 801823e:	c940      	ldmia	r1!, {r6}
 8018240:	0610      	lsls	r0, r2, #24
 8018242:	d402      	bmi.n	801824a <_printf_i+0x166>
 8018244:	0650      	lsls	r0, r2, #25
 8018246:	d500      	bpl.n	801824a <_printf_i+0x166>
 8018248:	b2b6      	uxth	r6, r6
 801824a:	6019      	str	r1, [r3, #0]
 801824c:	07d3      	lsls	r3, r2, #31
 801824e:	d502      	bpl.n	8018256 <_printf_i+0x172>
 8018250:	2320      	movs	r3, #32
 8018252:	4313      	orrs	r3, r2
 8018254:	6023      	str	r3, [r4, #0]
 8018256:	2e00      	cmp	r6, #0
 8018258:	d001      	beq.n	801825e <_printf_i+0x17a>
 801825a:	2710      	movs	r7, #16
 801825c:	e7a8      	b.n	80181b0 <_printf_i+0xcc>
 801825e:	2220      	movs	r2, #32
 8018260:	6823      	ldr	r3, [r4, #0]
 8018262:	4393      	bics	r3, r2
 8018264:	6023      	str	r3, [r4, #0]
 8018266:	e7f8      	b.n	801825a <_printf_i+0x176>
 8018268:	681a      	ldr	r2, [r3, #0]
 801826a:	680d      	ldr	r5, [r1, #0]
 801826c:	1d10      	adds	r0, r2, #4
 801826e:	6949      	ldr	r1, [r1, #20]
 8018270:	6018      	str	r0, [r3, #0]
 8018272:	6813      	ldr	r3, [r2, #0]
 8018274:	062e      	lsls	r6, r5, #24
 8018276:	d501      	bpl.n	801827c <_printf_i+0x198>
 8018278:	6019      	str	r1, [r3, #0]
 801827a:	e002      	b.n	8018282 <_printf_i+0x19e>
 801827c:	066d      	lsls	r5, r5, #25
 801827e:	d5fb      	bpl.n	8018278 <_printf_i+0x194>
 8018280:	8019      	strh	r1, [r3, #0]
 8018282:	2300      	movs	r3, #0
 8018284:	9d03      	ldr	r5, [sp, #12]
 8018286:	6123      	str	r3, [r4, #16]
 8018288:	e7bf      	b.n	801820a <_printf_i+0x126>
 801828a:	681a      	ldr	r2, [r3, #0]
 801828c:	1d11      	adds	r1, r2, #4
 801828e:	6019      	str	r1, [r3, #0]
 8018290:	6815      	ldr	r5, [r2, #0]
 8018292:	2100      	movs	r1, #0
 8018294:	0028      	movs	r0, r5
 8018296:	6862      	ldr	r2, [r4, #4]
 8018298:	f000 fa69 	bl	801876e <memchr>
 801829c:	2800      	cmp	r0, #0
 801829e:	d001      	beq.n	80182a4 <_printf_i+0x1c0>
 80182a0:	1b40      	subs	r0, r0, r5
 80182a2:	6060      	str	r0, [r4, #4]
 80182a4:	6863      	ldr	r3, [r4, #4]
 80182a6:	6123      	str	r3, [r4, #16]
 80182a8:	2300      	movs	r3, #0
 80182aa:	9a03      	ldr	r2, [sp, #12]
 80182ac:	7013      	strb	r3, [r2, #0]
 80182ae:	e7ac      	b.n	801820a <_printf_i+0x126>
 80182b0:	002a      	movs	r2, r5
 80182b2:	6923      	ldr	r3, [r4, #16]
 80182b4:	9906      	ldr	r1, [sp, #24]
 80182b6:	9805      	ldr	r0, [sp, #20]
 80182b8:	9d07      	ldr	r5, [sp, #28]
 80182ba:	47a8      	blx	r5
 80182bc:	3001      	adds	r0, #1
 80182be:	d0ae      	beq.n	801821e <_printf_i+0x13a>
 80182c0:	6823      	ldr	r3, [r4, #0]
 80182c2:	079b      	lsls	r3, r3, #30
 80182c4:	d415      	bmi.n	80182f2 <_printf_i+0x20e>
 80182c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182c8:	68e0      	ldr	r0, [r4, #12]
 80182ca:	4298      	cmp	r0, r3
 80182cc:	daa9      	bge.n	8018222 <_printf_i+0x13e>
 80182ce:	0018      	movs	r0, r3
 80182d0:	e7a7      	b.n	8018222 <_printf_i+0x13e>
 80182d2:	0022      	movs	r2, r4
 80182d4:	2301      	movs	r3, #1
 80182d6:	9906      	ldr	r1, [sp, #24]
 80182d8:	9805      	ldr	r0, [sp, #20]
 80182da:	9e07      	ldr	r6, [sp, #28]
 80182dc:	3219      	adds	r2, #25
 80182de:	47b0      	blx	r6
 80182e0:	3001      	adds	r0, #1
 80182e2:	d09c      	beq.n	801821e <_printf_i+0x13a>
 80182e4:	3501      	adds	r5, #1
 80182e6:	68e3      	ldr	r3, [r4, #12]
 80182e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182ea:	1a9b      	subs	r3, r3, r2
 80182ec:	42ab      	cmp	r3, r5
 80182ee:	dcf0      	bgt.n	80182d2 <_printf_i+0x1ee>
 80182f0:	e7e9      	b.n	80182c6 <_printf_i+0x1e2>
 80182f2:	2500      	movs	r5, #0
 80182f4:	e7f7      	b.n	80182e6 <_printf_i+0x202>
 80182f6:	46c0      	nop			@ (mov r8, r8)
 80182f8:	0801c386 	.word	0x0801c386
 80182fc:	0801c397 	.word	0x0801c397

08018300 <std>:
 8018300:	2300      	movs	r3, #0
 8018302:	b510      	push	{r4, lr}
 8018304:	0004      	movs	r4, r0
 8018306:	6003      	str	r3, [r0, #0]
 8018308:	6043      	str	r3, [r0, #4]
 801830a:	6083      	str	r3, [r0, #8]
 801830c:	8181      	strh	r1, [r0, #12]
 801830e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018310:	81c2      	strh	r2, [r0, #14]
 8018312:	6103      	str	r3, [r0, #16]
 8018314:	6143      	str	r3, [r0, #20]
 8018316:	6183      	str	r3, [r0, #24]
 8018318:	0019      	movs	r1, r3
 801831a:	2208      	movs	r2, #8
 801831c:	305c      	adds	r0, #92	@ 0x5c
 801831e:	f000 f967 	bl	80185f0 <memset>
 8018322:	4b0b      	ldr	r3, [pc, #44]	@ (8018350 <std+0x50>)
 8018324:	6224      	str	r4, [r4, #32]
 8018326:	6263      	str	r3, [r4, #36]	@ 0x24
 8018328:	4b0a      	ldr	r3, [pc, #40]	@ (8018354 <std+0x54>)
 801832a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801832c:	4b0a      	ldr	r3, [pc, #40]	@ (8018358 <std+0x58>)
 801832e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018330:	4b0a      	ldr	r3, [pc, #40]	@ (801835c <std+0x5c>)
 8018332:	6323      	str	r3, [r4, #48]	@ 0x30
 8018334:	4b0a      	ldr	r3, [pc, #40]	@ (8018360 <std+0x60>)
 8018336:	429c      	cmp	r4, r3
 8018338:	d005      	beq.n	8018346 <std+0x46>
 801833a:	4b0a      	ldr	r3, [pc, #40]	@ (8018364 <std+0x64>)
 801833c:	429c      	cmp	r4, r3
 801833e:	d002      	beq.n	8018346 <std+0x46>
 8018340:	4b09      	ldr	r3, [pc, #36]	@ (8018368 <std+0x68>)
 8018342:	429c      	cmp	r4, r3
 8018344:	d103      	bne.n	801834e <std+0x4e>
 8018346:	0020      	movs	r0, r4
 8018348:	3058      	adds	r0, #88	@ 0x58
 801834a:	f000 fa0d 	bl	8018768 <__retarget_lock_init_recursive>
 801834e:	bd10      	pop	{r4, pc}
 8018350:	080184e9 	.word	0x080184e9
 8018354:	08018511 	.word	0x08018511
 8018358:	08018549 	.word	0x08018549
 801835c:	08018575 	.word	0x08018575
 8018360:	20003e10 	.word	0x20003e10
 8018364:	20003e78 	.word	0x20003e78
 8018368:	20003ee0 	.word	0x20003ee0

0801836c <stdio_exit_handler>:
 801836c:	b510      	push	{r4, lr}
 801836e:	4a03      	ldr	r2, [pc, #12]	@ (801837c <stdio_exit_handler+0x10>)
 8018370:	4903      	ldr	r1, [pc, #12]	@ (8018380 <stdio_exit_handler+0x14>)
 8018372:	4804      	ldr	r0, [pc, #16]	@ (8018384 <stdio_exit_handler+0x18>)
 8018374:	f000 f86c 	bl	8018450 <_fwalk_sglue>
 8018378:	bd10      	pop	{r4, pc}
 801837a:	46c0      	nop			@ (mov r8, r8)
 801837c:	200001e8 	.word	0x200001e8
 8018380:	0801a441 	.word	0x0801a441
 8018384:	200001f8 	.word	0x200001f8

08018388 <cleanup_stdio>:
 8018388:	6841      	ldr	r1, [r0, #4]
 801838a:	4b0b      	ldr	r3, [pc, #44]	@ (80183b8 <cleanup_stdio+0x30>)
 801838c:	b510      	push	{r4, lr}
 801838e:	0004      	movs	r4, r0
 8018390:	4299      	cmp	r1, r3
 8018392:	d001      	beq.n	8018398 <cleanup_stdio+0x10>
 8018394:	f002 f854 	bl	801a440 <_fflush_r>
 8018398:	68a1      	ldr	r1, [r4, #8]
 801839a:	4b08      	ldr	r3, [pc, #32]	@ (80183bc <cleanup_stdio+0x34>)
 801839c:	4299      	cmp	r1, r3
 801839e:	d002      	beq.n	80183a6 <cleanup_stdio+0x1e>
 80183a0:	0020      	movs	r0, r4
 80183a2:	f002 f84d 	bl	801a440 <_fflush_r>
 80183a6:	68e1      	ldr	r1, [r4, #12]
 80183a8:	4b05      	ldr	r3, [pc, #20]	@ (80183c0 <cleanup_stdio+0x38>)
 80183aa:	4299      	cmp	r1, r3
 80183ac:	d002      	beq.n	80183b4 <cleanup_stdio+0x2c>
 80183ae:	0020      	movs	r0, r4
 80183b0:	f002 f846 	bl	801a440 <_fflush_r>
 80183b4:	bd10      	pop	{r4, pc}
 80183b6:	46c0      	nop			@ (mov r8, r8)
 80183b8:	20003e10 	.word	0x20003e10
 80183bc:	20003e78 	.word	0x20003e78
 80183c0:	20003ee0 	.word	0x20003ee0

080183c4 <global_stdio_init.part.0>:
 80183c4:	b510      	push	{r4, lr}
 80183c6:	4b09      	ldr	r3, [pc, #36]	@ (80183ec <global_stdio_init.part.0+0x28>)
 80183c8:	4a09      	ldr	r2, [pc, #36]	@ (80183f0 <global_stdio_init.part.0+0x2c>)
 80183ca:	2104      	movs	r1, #4
 80183cc:	601a      	str	r2, [r3, #0]
 80183ce:	4809      	ldr	r0, [pc, #36]	@ (80183f4 <global_stdio_init.part.0+0x30>)
 80183d0:	2200      	movs	r2, #0
 80183d2:	f7ff ff95 	bl	8018300 <std>
 80183d6:	2201      	movs	r2, #1
 80183d8:	2109      	movs	r1, #9
 80183da:	4807      	ldr	r0, [pc, #28]	@ (80183f8 <global_stdio_init.part.0+0x34>)
 80183dc:	f7ff ff90 	bl	8018300 <std>
 80183e0:	2202      	movs	r2, #2
 80183e2:	2112      	movs	r1, #18
 80183e4:	4805      	ldr	r0, [pc, #20]	@ (80183fc <global_stdio_init.part.0+0x38>)
 80183e6:	f7ff ff8b 	bl	8018300 <std>
 80183ea:	bd10      	pop	{r4, pc}
 80183ec:	20003f48 	.word	0x20003f48
 80183f0:	0801836d 	.word	0x0801836d
 80183f4:	20003e10 	.word	0x20003e10
 80183f8:	20003e78 	.word	0x20003e78
 80183fc:	20003ee0 	.word	0x20003ee0

08018400 <__sfp_lock_acquire>:
 8018400:	b510      	push	{r4, lr}
 8018402:	4802      	ldr	r0, [pc, #8]	@ (801840c <__sfp_lock_acquire+0xc>)
 8018404:	f000 f9b1 	bl	801876a <__retarget_lock_acquire_recursive>
 8018408:	bd10      	pop	{r4, pc}
 801840a:	46c0      	nop			@ (mov r8, r8)
 801840c:	20003f51 	.word	0x20003f51

08018410 <__sfp_lock_release>:
 8018410:	b510      	push	{r4, lr}
 8018412:	4802      	ldr	r0, [pc, #8]	@ (801841c <__sfp_lock_release+0xc>)
 8018414:	f000 f9aa 	bl	801876c <__retarget_lock_release_recursive>
 8018418:	bd10      	pop	{r4, pc}
 801841a:	46c0      	nop			@ (mov r8, r8)
 801841c:	20003f51 	.word	0x20003f51

08018420 <__sinit>:
 8018420:	b510      	push	{r4, lr}
 8018422:	0004      	movs	r4, r0
 8018424:	f7ff ffec 	bl	8018400 <__sfp_lock_acquire>
 8018428:	6a23      	ldr	r3, [r4, #32]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d002      	beq.n	8018434 <__sinit+0x14>
 801842e:	f7ff ffef 	bl	8018410 <__sfp_lock_release>
 8018432:	bd10      	pop	{r4, pc}
 8018434:	4b04      	ldr	r3, [pc, #16]	@ (8018448 <__sinit+0x28>)
 8018436:	6223      	str	r3, [r4, #32]
 8018438:	4b04      	ldr	r3, [pc, #16]	@ (801844c <__sinit+0x2c>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d1f6      	bne.n	801842e <__sinit+0xe>
 8018440:	f7ff ffc0 	bl	80183c4 <global_stdio_init.part.0>
 8018444:	e7f3      	b.n	801842e <__sinit+0xe>
 8018446:	46c0      	nop			@ (mov r8, r8)
 8018448:	08018389 	.word	0x08018389
 801844c:	20003f48 	.word	0x20003f48

08018450 <_fwalk_sglue>:
 8018450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018452:	0014      	movs	r4, r2
 8018454:	2600      	movs	r6, #0
 8018456:	9000      	str	r0, [sp, #0]
 8018458:	9101      	str	r1, [sp, #4]
 801845a:	68a5      	ldr	r5, [r4, #8]
 801845c:	6867      	ldr	r7, [r4, #4]
 801845e:	3f01      	subs	r7, #1
 8018460:	d504      	bpl.n	801846c <_fwalk_sglue+0x1c>
 8018462:	6824      	ldr	r4, [r4, #0]
 8018464:	2c00      	cmp	r4, #0
 8018466:	d1f8      	bne.n	801845a <_fwalk_sglue+0xa>
 8018468:	0030      	movs	r0, r6
 801846a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801846c:	89ab      	ldrh	r3, [r5, #12]
 801846e:	2b01      	cmp	r3, #1
 8018470:	d908      	bls.n	8018484 <_fwalk_sglue+0x34>
 8018472:	220e      	movs	r2, #14
 8018474:	5eab      	ldrsh	r3, [r5, r2]
 8018476:	3301      	adds	r3, #1
 8018478:	d004      	beq.n	8018484 <_fwalk_sglue+0x34>
 801847a:	0029      	movs	r1, r5
 801847c:	9800      	ldr	r0, [sp, #0]
 801847e:	9b01      	ldr	r3, [sp, #4]
 8018480:	4798      	blx	r3
 8018482:	4306      	orrs	r6, r0
 8018484:	3568      	adds	r5, #104	@ 0x68
 8018486:	e7ea      	b.n	801845e <_fwalk_sglue+0xe>

08018488 <iprintf>:
 8018488:	b40f      	push	{r0, r1, r2, r3}
 801848a:	b507      	push	{r0, r1, r2, lr}
 801848c:	4905      	ldr	r1, [pc, #20]	@ (80184a4 <iprintf+0x1c>)
 801848e:	ab04      	add	r3, sp, #16
 8018490:	6808      	ldr	r0, [r1, #0]
 8018492:	cb04      	ldmia	r3!, {r2}
 8018494:	6881      	ldr	r1, [r0, #8]
 8018496:	9301      	str	r3, [sp, #4]
 8018498:	f001 fe30 	bl	801a0fc <_vfiprintf_r>
 801849c:	b003      	add	sp, #12
 801849e:	bc08      	pop	{r3}
 80184a0:	b004      	add	sp, #16
 80184a2:	4718      	bx	r3
 80184a4:	200001f4 	.word	0x200001f4

080184a8 <siprintf>:
 80184a8:	b40e      	push	{r1, r2, r3}
 80184aa:	b500      	push	{lr}
 80184ac:	490b      	ldr	r1, [pc, #44]	@ (80184dc <siprintf+0x34>)
 80184ae:	b09c      	sub	sp, #112	@ 0x70
 80184b0:	ab1d      	add	r3, sp, #116	@ 0x74
 80184b2:	9002      	str	r0, [sp, #8]
 80184b4:	9006      	str	r0, [sp, #24]
 80184b6:	9107      	str	r1, [sp, #28]
 80184b8:	9104      	str	r1, [sp, #16]
 80184ba:	4809      	ldr	r0, [pc, #36]	@ (80184e0 <siprintf+0x38>)
 80184bc:	4909      	ldr	r1, [pc, #36]	@ (80184e4 <siprintf+0x3c>)
 80184be:	cb04      	ldmia	r3!, {r2}
 80184c0:	9105      	str	r1, [sp, #20]
 80184c2:	6800      	ldr	r0, [r0, #0]
 80184c4:	a902      	add	r1, sp, #8
 80184c6:	9301      	str	r3, [sp, #4]
 80184c8:	f001 fcf2 	bl	8019eb0 <_svfiprintf_r>
 80184cc:	2200      	movs	r2, #0
 80184ce:	9b02      	ldr	r3, [sp, #8]
 80184d0:	701a      	strb	r2, [r3, #0]
 80184d2:	b01c      	add	sp, #112	@ 0x70
 80184d4:	bc08      	pop	{r3}
 80184d6:	b003      	add	sp, #12
 80184d8:	4718      	bx	r3
 80184da:	46c0      	nop			@ (mov r8, r8)
 80184dc:	7fffffff 	.word	0x7fffffff
 80184e0:	200001f4 	.word	0x200001f4
 80184e4:	ffff0208 	.word	0xffff0208

080184e8 <__sread>:
 80184e8:	b570      	push	{r4, r5, r6, lr}
 80184ea:	000c      	movs	r4, r1
 80184ec:	250e      	movs	r5, #14
 80184ee:	5f49      	ldrsh	r1, [r1, r5]
 80184f0:	f000 f8e8 	bl	80186c4 <_read_r>
 80184f4:	2800      	cmp	r0, #0
 80184f6:	db03      	blt.n	8018500 <__sread+0x18>
 80184f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80184fa:	181b      	adds	r3, r3, r0
 80184fc:	6563      	str	r3, [r4, #84]	@ 0x54
 80184fe:	bd70      	pop	{r4, r5, r6, pc}
 8018500:	89a3      	ldrh	r3, [r4, #12]
 8018502:	4a02      	ldr	r2, [pc, #8]	@ (801850c <__sread+0x24>)
 8018504:	4013      	ands	r3, r2
 8018506:	81a3      	strh	r3, [r4, #12]
 8018508:	e7f9      	b.n	80184fe <__sread+0x16>
 801850a:	46c0      	nop			@ (mov r8, r8)
 801850c:	ffffefff 	.word	0xffffefff

08018510 <__swrite>:
 8018510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018512:	001f      	movs	r7, r3
 8018514:	898b      	ldrh	r3, [r1, #12]
 8018516:	0005      	movs	r5, r0
 8018518:	000c      	movs	r4, r1
 801851a:	0016      	movs	r6, r2
 801851c:	05db      	lsls	r3, r3, #23
 801851e:	d505      	bpl.n	801852c <__swrite+0x1c>
 8018520:	230e      	movs	r3, #14
 8018522:	5ec9      	ldrsh	r1, [r1, r3]
 8018524:	2200      	movs	r2, #0
 8018526:	2302      	movs	r3, #2
 8018528:	f000 f8b8 	bl	801869c <_lseek_r>
 801852c:	89a3      	ldrh	r3, [r4, #12]
 801852e:	4a05      	ldr	r2, [pc, #20]	@ (8018544 <__swrite+0x34>)
 8018530:	0028      	movs	r0, r5
 8018532:	4013      	ands	r3, r2
 8018534:	81a3      	strh	r3, [r4, #12]
 8018536:	0032      	movs	r2, r6
 8018538:	230e      	movs	r3, #14
 801853a:	5ee1      	ldrsh	r1, [r4, r3]
 801853c:	003b      	movs	r3, r7
 801853e:	f000 f8d5 	bl	80186ec <_write_r>
 8018542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018544:	ffffefff 	.word	0xffffefff

08018548 <__sseek>:
 8018548:	b570      	push	{r4, r5, r6, lr}
 801854a:	000c      	movs	r4, r1
 801854c:	250e      	movs	r5, #14
 801854e:	5f49      	ldrsh	r1, [r1, r5]
 8018550:	f000 f8a4 	bl	801869c <_lseek_r>
 8018554:	89a3      	ldrh	r3, [r4, #12]
 8018556:	1c42      	adds	r2, r0, #1
 8018558:	d103      	bne.n	8018562 <__sseek+0x1a>
 801855a:	4a05      	ldr	r2, [pc, #20]	@ (8018570 <__sseek+0x28>)
 801855c:	4013      	ands	r3, r2
 801855e:	81a3      	strh	r3, [r4, #12]
 8018560:	bd70      	pop	{r4, r5, r6, pc}
 8018562:	2280      	movs	r2, #128	@ 0x80
 8018564:	0152      	lsls	r2, r2, #5
 8018566:	4313      	orrs	r3, r2
 8018568:	81a3      	strh	r3, [r4, #12]
 801856a:	6560      	str	r0, [r4, #84]	@ 0x54
 801856c:	e7f8      	b.n	8018560 <__sseek+0x18>
 801856e:	46c0      	nop			@ (mov r8, r8)
 8018570:	ffffefff 	.word	0xffffefff

08018574 <__sclose>:
 8018574:	b510      	push	{r4, lr}
 8018576:	230e      	movs	r3, #14
 8018578:	5ec9      	ldrsh	r1, [r1, r3]
 801857a:	f000 f87d 	bl	8018678 <_close_r>
 801857e:	bd10      	pop	{r4, pc}

08018580 <_vsniprintf_r>:
 8018580:	b530      	push	{r4, r5, lr}
 8018582:	0014      	movs	r4, r2
 8018584:	0005      	movs	r5, r0
 8018586:	001a      	movs	r2, r3
 8018588:	b09b      	sub	sp, #108	@ 0x6c
 801858a:	2c00      	cmp	r4, #0
 801858c:	da05      	bge.n	801859a <_vsniprintf_r+0x1a>
 801858e:	238b      	movs	r3, #139	@ 0x8b
 8018590:	6003      	str	r3, [r0, #0]
 8018592:	2001      	movs	r0, #1
 8018594:	4240      	negs	r0, r0
 8018596:	b01b      	add	sp, #108	@ 0x6c
 8018598:	bd30      	pop	{r4, r5, pc}
 801859a:	2382      	movs	r3, #130	@ 0x82
 801859c:	4668      	mov	r0, sp
 801859e:	009b      	lsls	r3, r3, #2
 80185a0:	8183      	strh	r3, [r0, #12]
 80185a2:	2300      	movs	r3, #0
 80185a4:	9100      	str	r1, [sp, #0]
 80185a6:	9104      	str	r1, [sp, #16]
 80185a8:	429c      	cmp	r4, r3
 80185aa:	d000      	beq.n	80185ae <_vsniprintf_r+0x2e>
 80185ac:	1e63      	subs	r3, r4, #1
 80185ae:	9302      	str	r3, [sp, #8]
 80185b0:	9305      	str	r3, [sp, #20]
 80185b2:	2301      	movs	r3, #1
 80185b4:	4669      	mov	r1, sp
 80185b6:	425b      	negs	r3, r3
 80185b8:	81cb      	strh	r3, [r1, #14]
 80185ba:	0028      	movs	r0, r5
 80185bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80185be:	f001 fc77 	bl	8019eb0 <_svfiprintf_r>
 80185c2:	1c43      	adds	r3, r0, #1
 80185c4:	da01      	bge.n	80185ca <_vsniprintf_r+0x4a>
 80185c6:	238b      	movs	r3, #139	@ 0x8b
 80185c8:	602b      	str	r3, [r5, #0]
 80185ca:	2c00      	cmp	r4, #0
 80185cc:	d0e3      	beq.n	8018596 <_vsniprintf_r+0x16>
 80185ce:	2200      	movs	r2, #0
 80185d0:	9b00      	ldr	r3, [sp, #0]
 80185d2:	701a      	strb	r2, [r3, #0]
 80185d4:	e7df      	b.n	8018596 <_vsniprintf_r+0x16>
	...

080185d8 <vsniprintf>:
 80185d8:	b513      	push	{r0, r1, r4, lr}
 80185da:	4c04      	ldr	r4, [pc, #16]	@ (80185ec <vsniprintf+0x14>)
 80185dc:	9300      	str	r3, [sp, #0]
 80185de:	0013      	movs	r3, r2
 80185e0:	000a      	movs	r2, r1
 80185e2:	0001      	movs	r1, r0
 80185e4:	6820      	ldr	r0, [r4, #0]
 80185e6:	f7ff ffcb 	bl	8018580 <_vsniprintf_r>
 80185ea:	bd16      	pop	{r1, r2, r4, pc}
 80185ec:	200001f4 	.word	0x200001f4

080185f0 <memset>:
 80185f0:	0003      	movs	r3, r0
 80185f2:	1882      	adds	r2, r0, r2
 80185f4:	4293      	cmp	r3, r2
 80185f6:	d100      	bne.n	80185fa <memset+0xa>
 80185f8:	4770      	bx	lr
 80185fa:	7019      	strb	r1, [r3, #0]
 80185fc:	3301      	adds	r3, #1
 80185fe:	e7f9      	b.n	80185f4 <memset+0x4>

08018600 <strchr>:
 8018600:	b2c9      	uxtb	r1, r1
 8018602:	7803      	ldrb	r3, [r0, #0]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d004      	beq.n	8018612 <strchr+0x12>
 8018608:	428b      	cmp	r3, r1
 801860a:	d100      	bne.n	801860e <strchr+0xe>
 801860c:	4770      	bx	lr
 801860e:	3001      	adds	r0, #1
 8018610:	e7f7      	b.n	8018602 <strchr+0x2>
 8018612:	424b      	negs	r3, r1
 8018614:	4159      	adcs	r1, r3
 8018616:	4249      	negs	r1, r1
 8018618:	4008      	ands	r0, r1
 801861a:	e7f7      	b.n	801860c <strchr+0xc>

0801861c <strncpy>:
 801861c:	0003      	movs	r3, r0
 801861e:	b530      	push	{r4, r5, lr}
 8018620:	001d      	movs	r5, r3
 8018622:	2a00      	cmp	r2, #0
 8018624:	d006      	beq.n	8018634 <strncpy+0x18>
 8018626:	780c      	ldrb	r4, [r1, #0]
 8018628:	3a01      	subs	r2, #1
 801862a:	3301      	adds	r3, #1
 801862c:	702c      	strb	r4, [r5, #0]
 801862e:	3101      	adds	r1, #1
 8018630:	2c00      	cmp	r4, #0
 8018632:	d1f5      	bne.n	8018620 <strncpy+0x4>
 8018634:	2100      	movs	r1, #0
 8018636:	189a      	adds	r2, r3, r2
 8018638:	4293      	cmp	r3, r2
 801863a:	d100      	bne.n	801863e <strncpy+0x22>
 801863c:	bd30      	pop	{r4, r5, pc}
 801863e:	7019      	strb	r1, [r3, #0]
 8018640:	3301      	adds	r3, #1
 8018642:	e7f9      	b.n	8018638 <strncpy+0x1c>

08018644 <strstr>:
 8018644:	780a      	ldrb	r2, [r1, #0]
 8018646:	b530      	push	{r4, r5, lr}
 8018648:	2a00      	cmp	r2, #0
 801864a:	d10c      	bne.n	8018666 <strstr+0x22>
 801864c:	bd30      	pop	{r4, r5, pc}
 801864e:	429a      	cmp	r2, r3
 8018650:	d108      	bne.n	8018664 <strstr+0x20>
 8018652:	2301      	movs	r3, #1
 8018654:	5ccc      	ldrb	r4, [r1, r3]
 8018656:	2c00      	cmp	r4, #0
 8018658:	d0f8      	beq.n	801864c <strstr+0x8>
 801865a:	5cc5      	ldrb	r5, [r0, r3]
 801865c:	42a5      	cmp	r5, r4
 801865e:	d101      	bne.n	8018664 <strstr+0x20>
 8018660:	3301      	adds	r3, #1
 8018662:	e7f7      	b.n	8018654 <strstr+0x10>
 8018664:	3001      	adds	r0, #1
 8018666:	7803      	ldrb	r3, [r0, #0]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d1f0      	bne.n	801864e <strstr+0xa>
 801866c:	0018      	movs	r0, r3
 801866e:	e7ed      	b.n	801864c <strstr+0x8>

08018670 <_localeconv_r>:
 8018670:	4800      	ldr	r0, [pc, #0]	@ (8018674 <_localeconv_r+0x4>)
 8018672:	4770      	bx	lr
 8018674:	20000334 	.word	0x20000334

08018678 <_close_r>:
 8018678:	2300      	movs	r3, #0
 801867a:	b570      	push	{r4, r5, r6, lr}
 801867c:	4d06      	ldr	r5, [pc, #24]	@ (8018698 <_close_r+0x20>)
 801867e:	0004      	movs	r4, r0
 8018680:	0008      	movs	r0, r1
 8018682:	602b      	str	r3, [r5, #0]
 8018684:	f7f0 feee 	bl	8009464 <_close>
 8018688:	1c43      	adds	r3, r0, #1
 801868a:	d103      	bne.n	8018694 <_close_r+0x1c>
 801868c:	682b      	ldr	r3, [r5, #0]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d000      	beq.n	8018694 <_close_r+0x1c>
 8018692:	6023      	str	r3, [r4, #0]
 8018694:	bd70      	pop	{r4, r5, r6, pc}
 8018696:	46c0      	nop			@ (mov r8, r8)
 8018698:	20003f4c 	.word	0x20003f4c

0801869c <_lseek_r>:
 801869c:	b570      	push	{r4, r5, r6, lr}
 801869e:	0004      	movs	r4, r0
 80186a0:	0008      	movs	r0, r1
 80186a2:	0011      	movs	r1, r2
 80186a4:	001a      	movs	r2, r3
 80186a6:	2300      	movs	r3, #0
 80186a8:	4d05      	ldr	r5, [pc, #20]	@ (80186c0 <_lseek_r+0x24>)
 80186aa:	602b      	str	r3, [r5, #0]
 80186ac:	f7f0 fefb 	bl	80094a6 <_lseek>
 80186b0:	1c43      	adds	r3, r0, #1
 80186b2:	d103      	bne.n	80186bc <_lseek_r+0x20>
 80186b4:	682b      	ldr	r3, [r5, #0]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d000      	beq.n	80186bc <_lseek_r+0x20>
 80186ba:	6023      	str	r3, [r4, #0]
 80186bc:	bd70      	pop	{r4, r5, r6, pc}
 80186be:	46c0      	nop			@ (mov r8, r8)
 80186c0:	20003f4c 	.word	0x20003f4c

080186c4 <_read_r>:
 80186c4:	b570      	push	{r4, r5, r6, lr}
 80186c6:	0004      	movs	r4, r0
 80186c8:	0008      	movs	r0, r1
 80186ca:	0011      	movs	r1, r2
 80186cc:	001a      	movs	r2, r3
 80186ce:	2300      	movs	r3, #0
 80186d0:	4d05      	ldr	r5, [pc, #20]	@ (80186e8 <_read_r+0x24>)
 80186d2:	602b      	str	r3, [r5, #0]
 80186d4:	f7f0 fea9 	bl	800942a <_read>
 80186d8:	1c43      	adds	r3, r0, #1
 80186da:	d103      	bne.n	80186e4 <_read_r+0x20>
 80186dc:	682b      	ldr	r3, [r5, #0]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d000      	beq.n	80186e4 <_read_r+0x20>
 80186e2:	6023      	str	r3, [r4, #0]
 80186e4:	bd70      	pop	{r4, r5, r6, pc}
 80186e6:	46c0      	nop			@ (mov r8, r8)
 80186e8:	20003f4c 	.word	0x20003f4c

080186ec <_write_r>:
 80186ec:	b570      	push	{r4, r5, r6, lr}
 80186ee:	0004      	movs	r4, r0
 80186f0:	0008      	movs	r0, r1
 80186f2:	0011      	movs	r1, r2
 80186f4:	001a      	movs	r2, r3
 80186f6:	2300      	movs	r3, #0
 80186f8:	4d05      	ldr	r5, [pc, #20]	@ (8018710 <_write_r+0x24>)
 80186fa:	602b      	str	r3, [r5, #0]
 80186fc:	f7f1 fb06 	bl	8009d0c <_write>
 8018700:	1c43      	adds	r3, r0, #1
 8018702:	d103      	bne.n	801870c <_write_r+0x20>
 8018704:	682b      	ldr	r3, [r5, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d000      	beq.n	801870c <_write_r+0x20>
 801870a:	6023      	str	r3, [r4, #0]
 801870c:	bd70      	pop	{r4, r5, r6, pc}
 801870e:	46c0      	nop			@ (mov r8, r8)
 8018710:	20003f4c 	.word	0x20003f4c

08018714 <__errno>:
 8018714:	4b01      	ldr	r3, [pc, #4]	@ (801871c <__errno+0x8>)
 8018716:	6818      	ldr	r0, [r3, #0]
 8018718:	4770      	bx	lr
 801871a:	46c0      	nop			@ (mov r8, r8)
 801871c:	200001f4 	.word	0x200001f4

08018720 <__libc_init_array>:
 8018720:	b570      	push	{r4, r5, r6, lr}
 8018722:	2600      	movs	r6, #0
 8018724:	4c0c      	ldr	r4, [pc, #48]	@ (8018758 <__libc_init_array+0x38>)
 8018726:	4d0d      	ldr	r5, [pc, #52]	@ (801875c <__libc_init_array+0x3c>)
 8018728:	1b64      	subs	r4, r4, r5
 801872a:	10a4      	asrs	r4, r4, #2
 801872c:	42a6      	cmp	r6, r4
 801872e:	d109      	bne.n	8018744 <__libc_init_array+0x24>
 8018730:	2600      	movs	r6, #0
 8018732:	f002 fe57 	bl	801b3e4 <_init>
 8018736:	4c0a      	ldr	r4, [pc, #40]	@ (8018760 <__libc_init_array+0x40>)
 8018738:	4d0a      	ldr	r5, [pc, #40]	@ (8018764 <__libc_init_array+0x44>)
 801873a:	1b64      	subs	r4, r4, r5
 801873c:	10a4      	asrs	r4, r4, #2
 801873e:	42a6      	cmp	r6, r4
 8018740:	d105      	bne.n	801874e <__libc_init_array+0x2e>
 8018742:	bd70      	pop	{r4, r5, r6, pc}
 8018744:	00b3      	lsls	r3, r6, #2
 8018746:	58eb      	ldr	r3, [r5, r3]
 8018748:	4798      	blx	r3
 801874a:	3601      	adds	r6, #1
 801874c:	e7ee      	b.n	801872c <__libc_init_array+0xc>
 801874e:	00b3      	lsls	r3, r6, #2
 8018750:	58eb      	ldr	r3, [r5, r3]
 8018752:	4798      	blx	r3
 8018754:	3601      	adds	r6, #1
 8018756:	e7f2      	b.n	801873e <__libc_init_array+0x1e>
 8018758:	0801c708 	.word	0x0801c708
 801875c:	0801c708 	.word	0x0801c708
 8018760:	0801c70c 	.word	0x0801c70c
 8018764:	0801c708 	.word	0x0801c708

08018768 <__retarget_lock_init_recursive>:
 8018768:	4770      	bx	lr

0801876a <__retarget_lock_acquire_recursive>:
 801876a:	4770      	bx	lr

0801876c <__retarget_lock_release_recursive>:
 801876c:	4770      	bx	lr

0801876e <memchr>:
 801876e:	b2c9      	uxtb	r1, r1
 8018770:	1882      	adds	r2, r0, r2
 8018772:	4290      	cmp	r0, r2
 8018774:	d101      	bne.n	801877a <memchr+0xc>
 8018776:	2000      	movs	r0, #0
 8018778:	4770      	bx	lr
 801877a:	7803      	ldrb	r3, [r0, #0]
 801877c:	428b      	cmp	r3, r1
 801877e:	d0fb      	beq.n	8018778 <memchr+0xa>
 8018780:	3001      	adds	r0, #1
 8018782:	e7f6      	b.n	8018772 <memchr+0x4>

08018784 <memcpy>:
 8018784:	2300      	movs	r3, #0
 8018786:	b510      	push	{r4, lr}
 8018788:	429a      	cmp	r2, r3
 801878a:	d100      	bne.n	801878e <memcpy+0xa>
 801878c:	bd10      	pop	{r4, pc}
 801878e:	5ccc      	ldrb	r4, [r1, r3]
 8018790:	54c4      	strb	r4, [r0, r3]
 8018792:	3301      	adds	r3, #1
 8018794:	e7f8      	b.n	8018788 <memcpy+0x4>

08018796 <quorem>:
 8018796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018798:	6902      	ldr	r2, [r0, #16]
 801879a:	690f      	ldr	r7, [r1, #16]
 801879c:	b087      	sub	sp, #28
 801879e:	0006      	movs	r6, r0
 80187a0:	000b      	movs	r3, r1
 80187a2:	2000      	movs	r0, #0
 80187a4:	9102      	str	r1, [sp, #8]
 80187a6:	42ba      	cmp	r2, r7
 80187a8:	db6d      	blt.n	8018886 <quorem+0xf0>
 80187aa:	3f01      	subs	r7, #1
 80187ac:	00bc      	lsls	r4, r7, #2
 80187ae:	3314      	adds	r3, #20
 80187b0:	9305      	str	r3, [sp, #20]
 80187b2:	191b      	adds	r3, r3, r4
 80187b4:	9303      	str	r3, [sp, #12]
 80187b6:	0033      	movs	r3, r6
 80187b8:	3314      	adds	r3, #20
 80187ba:	191c      	adds	r4, r3, r4
 80187bc:	9301      	str	r3, [sp, #4]
 80187be:	6823      	ldr	r3, [r4, #0]
 80187c0:	9304      	str	r3, [sp, #16]
 80187c2:	9b03      	ldr	r3, [sp, #12]
 80187c4:	9804      	ldr	r0, [sp, #16]
 80187c6:	681d      	ldr	r5, [r3, #0]
 80187c8:	3501      	adds	r5, #1
 80187ca:	0029      	movs	r1, r5
 80187cc:	f7e7 fcb8 	bl	8000140 <__udivsi3>
 80187d0:	9b04      	ldr	r3, [sp, #16]
 80187d2:	9000      	str	r0, [sp, #0]
 80187d4:	42ab      	cmp	r3, r5
 80187d6:	d32b      	bcc.n	8018830 <quorem+0x9a>
 80187d8:	9b05      	ldr	r3, [sp, #20]
 80187da:	9d01      	ldr	r5, [sp, #4]
 80187dc:	469c      	mov	ip, r3
 80187de:	2300      	movs	r3, #0
 80187e0:	9305      	str	r3, [sp, #20]
 80187e2:	9304      	str	r3, [sp, #16]
 80187e4:	4662      	mov	r2, ip
 80187e6:	ca08      	ldmia	r2!, {r3}
 80187e8:	6828      	ldr	r0, [r5, #0]
 80187ea:	4694      	mov	ip, r2
 80187ec:	9a00      	ldr	r2, [sp, #0]
 80187ee:	b299      	uxth	r1, r3
 80187f0:	4351      	muls	r1, r2
 80187f2:	9a05      	ldr	r2, [sp, #20]
 80187f4:	0c1b      	lsrs	r3, r3, #16
 80187f6:	1889      	adds	r1, r1, r2
 80187f8:	9a00      	ldr	r2, [sp, #0]
 80187fa:	4353      	muls	r3, r2
 80187fc:	0c0a      	lsrs	r2, r1, #16
 80187fe:	189b      	adds	r3, r3, r2
 8018800:	0c1a      	lsrs	r2, r3, #16
 8018802:	b289      	uxth	r1, r1
 8018804:	9205      	str	r2, [sp, #20]
 8018806:	b282      	uxth	r2, r0
 8018808:	1a52      	subs	r2, r2, r1
 801880a:	9904      	ldr	r1, [sp, #16]
 801880c:	0c00      	lsrs	r0, r0, #16
 801880e:	1852      	adds	r2, r2, r1
 8018810:	b29b      	uxth	r3, r3
 8018812:	1411      	asrs	r1, r2, #16
 8018814:	1ac3      	subs	r3, r0, r3
 8018816:	185b      	adds	r3, r3, r1
 8018818:	1419      	asrs	r1, r3, #16
 801881a:	b292      	uxth	r2, r2
 801881c:	041b      	lsls	r3, r3, #16
 801881e:	431a      	orrs	r2, r3
 8018820:	9b03      	ldr	r3, [sp, #12]
 8018822:	9104      	str	r1, [sp, #16]
 8018824:	c504      	stmia	r5!, {r2}
 8018826:	4563      	cmp	r3, ip
 8018828:	d2dc      	bcs.n	80187e4 <quorem+0x4e>
 801882a:	6823      	ldr	r3, [r4, #0]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d030      	beq.n	8018892 <quorem+0xfc>
 8018830:	0030      	movs	r0, r6
 8018832:	9902      	ldr	r1, [sp, #8]
 8018834:	f001 f9c6 	bl	8019bc4 <__mcmp>
 8018838:	2800      	cmp	r0, #0
 801883a:	db23      	blt.n	8018884 <quorem+0xee>
 801883c:	0034      	movs	r4, r6
 801883e:	2500      	movs	r5, #0
 8018840:	9902      	ldr	r1, [sp, #8]
 8018842:	3414      	adds	r4, #20
 8018844:	3114      	adds	r1, #20
 8018846:	6823      	ldr	r3, [r4, #0]
 8018848:	c901      	ldmia	r1!, {r0}
 801884a:	9302      	str	r3, [sp, #8]
 801884c:	466b      	mov	r3, sp
 801884e:	891b      	ldrh	r3, [r3, #8]
 8018850:	b282      	uxth	r2, r0
 8018852:	1a9a      	subs	r2, r3, r2
 8018854:	9b02      	ldr	r3, [sp, #8]
 8018856:	1952      	adds	r2, r2, r5
 8018858:	0c00      	lsrs	r0, r0, #16
 801885a:	0c1b      	lsrs	r3, r3, #16
 801885c:	1a1b      	subs	r3, r3, r0
 801885e:	1410      	asrs	r0, r2, #16
 8018860:	181b      	adds	r3, r3, r0
 8018862:	141d      	asrs	r5, r3, #16
 8018864:	b292      	uxth	r2, r2
 8018866:	041b      	lsls	r3, r3, #16
 8018868:	431a      	orrs	r2, r3
 801886a:	9b03      	ldr	r3, [sp, #12]
 801886c:	c404      	stmia	r4!, {r2}
 801886e:	428b      	cmp	r3, r1
 8018870:	d2e9      	bcs.n	8018846 <quorem+0xb0>
 8018872:	9a01      	ldr	r2, [sp, #4]
 8018874:	00bb      	lsls	r3, r7, #2
 8018876:	18d3      	adds	r3, r2, r3
 8018878:	681a      	ldr	r2, [r3, #0]
 801887a:	2a00      	cmp	r2, #0
 801887c:	d013      	beq.n	80188a6 <quorem+0x110>
 801887e:	9b00      	ldr	r3, [sp, #0]
 8018880:	3301      	adds	r3, #1
 8018882:	9300      	str	r3, [sp, #0]
 8018884:	9800      	ldr	r0, [sp, #0]
 8018886:	b007      	add	sp, #28
 8018888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801888a:	6823      	ldr	r3, [r4, #0]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d104      	bne.n	801889a <quorem+0x104>
 8018890:	3f01      	subs	r7, #1
 8018892:	9b01      	ldr	r3, [sp, #4]
 8018894:	3c04      	subs	r4, #4
 8018896:	42a3      	cmp	r3, r4
 8018898:	d3f7      	bcc.n	801888a <quorem+0xf4>
 801889a:	6137      	str	r7, [r6, #16]
 801889c:	e7c8      	b.n	8018830 <quorem+0x9a>
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	2a00      	cmp	r2, #0
 80188a2:	d104      	bne.n	80188ae <quorem+0x118>
 80188a4:	3f01      	subs	r7, #1
 80188a6:	9a01      	ldr	r2, [sp, #4]
 80188a8:	3b04      	subs	r3, #4
 80188aa:	429a      	cmp	r2, r3
 80188ac:	d3f7      	bcc.n	801889e <quorem+0x108>
 80188ae:	6137      	str	r7, [r6, #16]
 80188b0:	e7e5      	b.n	801887e <quorem+0xe8>
	...

080188b4 <_dtoa_r>:
 80188b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188b6:	0014      	movs	r4, r2
 80188b8:	001d      	movs	r5, r3
 80188ba:	69c6      	ldr	r6, [r0, #28]
 80188bc:	b09d      	sub	sp, #116	@ 0x74
 80188be:	940a      	str	r4, [sp, #40]	@ 0x28
 80188c0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80188c2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80188c4:	9003      	str	r0, [sp, #12]
 80188c6:	2e00      	cmp	r6, #0
 80188c8:	d10f      	bne.n	80188ea <_dtoa_r+0x36>
 80188ca:	2010      	movs	r0, #16
 80188cc:	f000 fe30 	bl	8019530 <malloc>
 80188d0:	9b03      	ldr	r3, [sp, #12]
 80188d2:	1e02      	subs	r2, r0, #0
 80188d4:	61d8      	str	r0, [r3, #28]
 80188d6:	d104      	bne.n	80188e2 <_dtoa_r+0x2e>
 80188d8:	21ef      	movs	r1, #239	@ 0xef
 80188da:	4bc7      	ldr	r3, [pc, #796]	@ (8018bf8 <_dtoa_r+0x344>)
 80188dc:	48c7      	ldr	r0, [pc, #796]	@ (8018bfc <_dtoa_r+0x348>)
 80188de:	f001 fea1 	bl	801a624 <__assert_func>
 80188e2:	6046      	str	r6, [r0, #4]
 80188e4:	6086      	str	r6, [r0, #8]
 80188e6:	6006      	str	r6, [r0, #0]
 80188e8:	60c6      	str	r6, [r0, #12]
 80188ea:	9b03      	ldr	r3, [sp, #12]
 80188ec:	69db      	ldr	r3, [r3, #28]
 80188ee:	6819      	ldr	r1, [r3, #0]
 80188f0:	2900      	cmp	r1, #0
 80188f2:	d00b      	beq.n	801890c <_dtoa_r+0x58>
 80188f4:	685a      	ldr	r2, [r3, #4]
 80188f6:	2301      	movs	r3, #1
 80188f8:	4093      	lsls	r3, r2
 80188fa:	604a      	str	r2, [r1, #4]
 80188fc:	608b      	str	r3, [r1, #8]
 80188fe:	9803      	ldr	r0, [sp, #12]
 8018900:	f000 ff16 	bl	8019730 <_Bfree>
 8018904:	2200      	movs	r2, #0
 8018906:	9b03      	ldr	r3, [sp, #12]
 8018908:	69db      	ldr	r3, [r3, #28]
 801890a:	601a      	str	r2, [r3, #0]
 801890c:	2d00      	cmp	r5, #0
 801890e:	da1e      	bge.n	801894e <_dtoa_r+0x9a>
 8018910:	2301      	movs	r3, #1
 8018912:	603b      	str	r3, [r7, #0]
 8018914:	006b      	lsls	r3, r5, #1
 8018916:	085b      	lsrs	r3, r3, #1
 8018918:	930b      	str	r3, [sp, #44]	@ 0x2c
 801891a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801891c:	4bb8      	ldr	r3, [pc, #736]	@ (8018c00 <_dtoa_r+0x34c>)
 801891e:	4ab8      	ldr	r2, [pc, #736]	@ (8018c00 <_dtoa_r+0x34c>)
 8018920:	403b      	ands	r3, r7
 8018922:	4293      	cmp	r3, r2
 8018924:	d116      	bne.n	8018954 <_dtoa_r+0xa0>
 8018926:	4bb7      	ldr	r3, [pc, #732]	@ (8018c04 <_dtoa_r+0x350>)
 8018928:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801892a:	6013      	str	r3, [r2, #0]
 801892c:	033b      	lsls	r3, r7, #12
 801892e:	0b1b      	lsrs	r3, r3, #12
 8018930:	4323      	orrs	r3, r4
 8018932:	d101      	bne.n	8018938 <_dtoa_r+0x84>
 8018934:	f000 fd83 	bl	801943e <_dtoa_r+0xb8a>
 8018938:	4bb3      	ldr	r3, [pc, #716]	@ (8018c08 <_dtoa_r+0x354>)
 801893a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801893c:	9308      	str	r3, [sp, #32]
 801893e:	2a00      	cmp	r2, #0
 8018940:	d002      	beq.n	8018948 <_dtoa_r+0x94>
 8018942:	4bb2      	ldr	r3, [pc, #712]	@ (8018c0c <_dtoa_r+0x358>)
 8018944:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018946:	6013      	str	r3, [r2, #0]
 8018948:	9808      	ldr	r0, [sp, #32]
 801894a:	b01d      	add	sp, #116	@ 0x74
 801894c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801894e:	2300      	movs	r3, #0
 8018950:	603b      	str	r3, [r7, #0]
 8018952:	e7e2      	b.n	801891a <_dtoa_r+0x66>
 8018954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018958:	9212      	str	r2, [sp, #72]	@ 0x48
 801895a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801895c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801895e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018960:	2200      	movs	r2, #0
 8018962:	2300      	movs	r3, #0
 8018964:	f7e7 fd72 	bl	800044c <__aeabi_dcmpeq>
 8018968:	1e06      	subs	r6, r0, #0
 801896a:	d00b      	beq.n	8018984 <_dtoa_r+0xd0>
 801896c:	2301      	movs	r3, #1
 801896e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018970:	6013      	str	r3, [r2, #0]
 8018972:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018974:	2b00      	cmp	r3, #0
 8018976:	d002      	beq.n	801897e <_dtoa_r+0xca>
 8018978:	4ba5      	ldr	r3, [pc, #660]	@ (8018c10 <_dtoa_r+0x35c>)
 801897a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801897c:	6013      	str	r3, [r2, #0]
 801897e:	4ba5      	ldr	r3, [pc, #660]	@ (8018c14 <_dtoa_r+0x360>)
 8018980:	9308      	str	r3, [sp, #32]
 8018982:	e7e1      	b.n	8018948 <_dtoa_r+0x94>
 8018984:	ab1a      	add	r3, sp, #104	@ 0x68
 8018986:	9301      	str	r3, [sp, #4]
 8018988:	ab1b      	add	r3, sp, #108	@ 0x6c
 801898a:	9300      	str	r3, [sp, #0]
 801898c:	9803      	ldr	r0, [sp, #12]
 801898e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018990:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018992:	f001 f9cd 	bl	8019d30 <__d2b>
 8018996:	007a      	lsls	r2, r7, #1
 8018998:	9005      	str	r0, [sp, #20]
 801899a:	0d52      	lsrs	r2, r2, #21
 801899c:	d100      	bne.n	80189a0 <_dtoa_r+0xec>
 801899e:	e07b      	b.n	8018a98 <_dtoa_r+0x1e4>
 80189a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80189a2:	9618      	str	r6, [sp, #96]	@ 0x60
 80189a4:	0319      	lsls	r1, r3, #12
 80189a6:	4b9c      	ldr	r3, [pc, #624]	@ (8018c18 <_dtoa_r+0x364>)
 80189a8:	0b09      	lsrs	r1, r1, #12
 80189aa:	430b      	orrs	r3, r1
 80189ac:	499b      	ldr	r1, [pc, #620]	@ (8018c1c <_dtoa_r+0x368>)
 80189ae:	1857      	adds	r7, r2, r1
 80189b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80189b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80189b4:	0019      	movs	r1, r3
 80189b6:	2200      	movs	r2, #0
 80189b8:	4b99      	ldr	r3, [pc, #612]	@ (8018c20 <_dtoa_r+0x36c>)
 80189ba:	f7ea f885 	bl	8002ac8 <__aeabi_dsub>
 80189be:	4a99      	ldr	r2, [pc, #612]	@ (8018c24 <_dtoa_r+0x370>)
 80189c0:	4b99      	ldr	r3, [pc, #612]	@ (8018c28 <_dtoa_r+0x374>)
 80189c2:	f7e9 fdb9 	bl	8002538 <__aeabi_dmul>
 80189c6:	4a99      	ldr	r2, [pc, #612]	@ (8018c2c <_dtoa_r+0x378>)
 80189c8:	4b99      	ldr	r3, [pc, #612]	@ (8018c30 <_dtoa_r+0x37c>)
 80189ca:	f7e8 fe0d 	bl	80015e8 <__aeabi_dadd>
 80189ce:	0004      	movs	r4, r0
 80189d0:	0038      	movs	r0, r7
 80189d2:	000d      	movs	r5, r1
 80189d4:	f7ea fc72 	bl	80032bc <__aeabi_i2d>
 80189d8:	4a96      	ldr	r2, [pc, #600]	@ (8018c34 <_dtoa_r+0x380>)
 80189da:	4b97      	ldr	r3, [pc, #604]	@ (8018c38 <_dtoa_r+0x384>)
 80189dc:	f7e9 fdac 	bl	8002538 <__aeabi_dmul>
 80189e0:	0002      	movs	r2, r0
 80189e2:	000b      	movs	r3, r1
 80189e4:	0020      	movs	r0, r4
 80189e6:	0029      	movs	r1, r5
 80189e8:	f7e8 fdfe 	bl	80015e8 <__aeabi_dadd>
 80189ec:	0004      	movs	r4, r0
 80189ee:	000d      	movs	r5, r1
 80189f0:	f7ea fc28 	bl	8003244 <__aeabi_d2iz>
 80189f4:	2200      	movs	r2, #0
 80189f6:	9004      	str	r0, [sp, #16]
 80189f8:	2300      	movs	r3, #0
 80189fa:	0020      	movs	r0, r4
 80189fc:	0029      	movs	r1, r5
 80189fe:	f7e7 fd2b 	bl	8000458 <__aeabi_dcmplt>
 8018a02:	2800      	cmp	r0, #0
 8018a04:	d00b      	beq.n	8018a1e <_dtoa_r+0x16a>
 8018a06:	9804      	ldr	r0, [sp, #16]
 8018a08:	f7ea fc58 	bl	80032bc <__aeabi_i2d>
 8018a0c:	002b      	movs	r3, r5
 8018a0e:	0022      	movs	r2, r4
 8018a10:	f7e7 fd1c 	bl	800044c <__aeabi_dcmpeq>
 8018a14:	4243      	negs	r3, r0
 8018a16:	4158      	adcs	r0, r3
 8018a18:	9b04      	ldr	r3, [sp, #16]
 8018a1a:	1a1b      	subs	r3, r3, r0
 8018a1c:	9304      	str	r3, [sp, #16]
 8018a1e:	2301      	movs	r3, #1
 8018a20:	9315      	str	r3, [sp, #84]	@ 0x54
 8018a22:	9b04      	ldr	r3, [sp, #16]
 8018a24:	2b16      	cmp	r3, #22
 8018a26:	d810      	bhi.n	8018a4a <_dtoa_r+0x196>
 8018a28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018a2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018a2c:	9a04      	ldr	r2, [sp, #16]
 8018a2e:	4b83      	ldr	r3, [pc, #524]	@ (8018c3c <_dtoa_r+0x388>)
 8018a30:	00d2      	lsls	r2, r2, #3
 8018a32:	189b      	adds	r3, r3, r2
 8018a34:	681a      	ldr	r2, [r3, #0]
 8018a36:	685b      	ldr	r3, [r3, #4]
 8018a38:	f7e7 fd0e 	bl	8000458 <__aeabi_dcmplt>
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d047      	beq.n	8018ad0 <_dtoa_r+0x21c>
 8018a40:	9b04      	ldr	r3, [sp, #16]
 8018a42:	3b01      	subs	r3, #1
 8018a44:	9304      	str	r3, [sp, #16]
 8018a46:	2300      	movs	r3, #0
 8018a48:	9315      	str	r3, [sp, #84]	@ 0x54
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018a4e:	9206      	str	r2, [sp, #24]
 8018a50:	1bdb      	subs	r3, r3, r7
 8018a52:	1e5a      	subs	r2, r3, #1
 8018a54:	d53e      	bpl.n	8018ad4 <_dtoa_r+0x220>
 8018a56:	2201      	movs	r2, #1
 8018a58:	1ad3      	subs	r3, r2, r3
 8018a5a:	9306      	str	r3, [sp, #24]
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a60:	9b04      	ldr	r3, [sp, #16]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	db38      	blt.n	8018ad8 <_dtoa_r+0x224>
 8018a66:	9a04      	ldr	r2, [sp, #16]
 8018a68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a6a:	4694      	mov	ip, r2
 8018a6c:	4463      	add	r3, ip
 8018a6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a70:	2300      	movs	r3, #0
 8018a72:	9214      	str	r2, [sp, #80]	@ 0x50
 8018a74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018a76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a78:	2401      	movs	r4, #1
 8018a7a:	2b09      	cmp	r3, #9
 8018a7c:	d867      	bhi.n	8018b4e <_dtoa_r+0x29a>
 8018a7e:	2b05      	cmp	r3, #5
 8018a80:	dd02      	ble.n	8018a88 <_dtoa_r+0x1d4>
 8018a82:	2400      	movs	r4, #0
 8018a84:	3b04      	subs	r3, #4
 8018a86:	9322      	str	r3, [sp, #136]	@ 0x88
 8018a88:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a8a:	1e98      	subs	r0, r3, #2
 8018a8c:	2803      	cmp	r0, #3
 8018a8e:	d867      	bhi.n	8018b60 <_dtoa_r+0x2ac>
 8018a90:	f7e7 fb42 	bl	8000118 <__gnu_thumb1_case_uqi>
 8018a94:	5b383a2b 	.word	0x5b383a2b
 8018a98:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018a9a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018a9c:	18f6      	adds	r6, r6, r3
 8018a9e:	4b68      	ldr	r3, [pc, #416]	@ (8018c40 <_dtoa_r+0x38c>)
 8018aa0:	18f2      	adds	r2, r6, r3
 8018aa2:	2a20      	cmp	r2, #32
 8018aa4:	dd0f      	ble.n	8018ac6 <_dtoa_r+0x212>
 8018aa6:	2340      	movs	r3, #64	@ 0x40
 8018aa8:	1a9b      	subs	r3, r3, r2
 8018aaa:	409f      	lsls	r7, r3
 8018aac:	4b65      	ldr	r3, [pc, #404]	@ (8018c44 <_dtoa_r+0x390>)
 8018aae:	0038      	movs	r0, r7
 8018ab0:	18f3      	adds	r3, r6, r3
 8018ab2:	40dc      	lsrs	r4, r3
 8018ab4:	4320      	orrs	r0, r4
 8018ab6:	f7ea fc2f 	bl	8003318 <__aeabi_ui2d>
 8018aba:	2201      	movs	r2, #1
 8018abc:	4b62      	ldr	r3, [pc, #392]	@ (8018c48 <_dtoa_r+0x394>)
 8018abe:	1e77      	subs	r7, r6, #1
 8018ac0:	18cb      	adds	r3, r1, r3
 8018ac2:	9218      	str	r2, [sp, #96]	@ 0x60
 8018ac4:	e776      	b.n	80189b4 <_dtoa_r+0x100>
 8018ac6:	2320      	movs	r3, #32
 8018ac8:	0020      	movs	r0, r4
 8018aca:	1a9b      	subs	r3, r3, r2
 8018acc:	4098      	lsls	r0, r3
 8018ace:	e7f2      	b.n	8018ab6 <_dtoa_r+0x202>
 8018ad0:	9015      	str	r0, [sp, #84]	@ 0x54
 8018ad2:	e7ba      	b.n	8018a4a <_dtoa_r+0x196>
 8018ad4:	920d      	str	r2, [sp, #52]	@ 0x34
 8018ad6:	e7c3      	b.n	8018a60 <_dtoa_r+0x1ac>
 8018ad8:	9b06      	ldr	r3, [sp, #24]
 8018ada:	9a04      	ldr	r2, [sp, #16]
 8018adc:	1a9b      	subs	r3, r3, r2
 8018ade:	9306      	str	r3, [sp, #24]
 8018ae0:	4253      	negs	r3, r2
 8018ae2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	9314      	str	r3, [sp, #80]	@ 0x50
 8018ae8:	e7c5      	b.n	8018a76 <_dtoa_r+0x1c2>
 8018aea:	2300      	movs	r3, #0
 8018aec:	9310      	str	r3, [sp, #64]	@ 0x40
 8018aee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018af0:	930e      	str	r3, [sp, #56]	@ 0x38
 8018af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	dc13      	bgt.n	8018b20 <_dtoa_r+0x26c>
 8018af8:	2301      	movs	r3, #1
 8018afa:	001a      	movs	r2, r3
 8018afc:	930e      	str	r3, [sp, #56]	@ 0x38
 8018afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b00:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018b02:	e00d      	b.n	8018b20 <_dtoa_r+0x26c>
 8018b04:	2301      	movs	r3, #1
 8018b06:	e7f1      	b.n	8018aec <_dtoa_r+0x238>
 8018b08:	2300      	movs	r3, #0
 8018b0a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018b0c:	9310      	str	r3, [sp, #64]	@ 0x40
 8018b0e:	4694      	mov	ip, r2
 8018b10:	9b04      	ldr	r3, [sp, #16]
 8018b12:	4463      	add	r3, ip
 8018b14:	930e      	str	r3, [sp, #56]	@ 0x38
 8018b16:	3301      	adds	r3, #1
 8018b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	dc00      	bgt.n	8018b20 <_dtoa_r+0x26c>
 8018b1e:	2301      	movs	r3, #1
 8018b20:	9a03      	ldr	r2, [sp, #12]
 8018b22:	2100      	movs	r1, #0
 8018b24:	69d0      	ldr	r0, [r2, #28]
 8018b26:	2204      	movs	r2, #4
 8018b28:	0015      	movs	r5, r2
 8018b2a:	3514      	adds	r5, #20
 8018b2c:	429d      	cmp	r5, r3
 8018b2e:	d91b      	bls.n	8018b68 <_dtoa_r+0x2b4>
 8018b30:	6041      	str	r1, [r0, #4]
 8018b32:	9803      	ldr	r0, [sp, #12]
 8018b34:	f000 fdb8 	bl	80196a8 <_Balloc>
 8018b38:	9008      	str	r0, [sp, #32]
 8018b3a:	2800      	cmp	r0, #0
 8018b3c:	d117      	bne.n	8018b6e <_dtoa_r+0x2ba>
 8018b3e:	21b0      	movs	r1, #176	@ 0xb0
 8018b40:	4b42      	ldr	r3, [pc, #264]	@ (8018c4c <_dtoa_r+0x398>)
 8018b42:	482e      	ldr	r0, [pc, #184]	@ (8018bfc <_dtoa_r+0x348>)
 8018b44:	9a08      	ldr	r2, [sp, #32]
 8018b46:	31ff      	adds	r1, #255	@ 0xff
 8018b48:	e6c9      	b.n	80188de <_dtoa_r+0x2a>
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	e7dd      	b.n	8018b0a <_dtoa_r+0x256>
 8018b4e:	2300      	movs	r3, #0
 8018b50:	9410      	str	r4, [sp, #64]	@ 0x40
 8018b52:	9322      	str	r3, [sp, #136]	@ 0x88
 8018b54:	3b01      	subs	r3, #1
 8018b56:	930e      	str	r3, [sp, #56]	@ 0x38
 8018b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	3313      	adds	r3, #19
 8018b5e:	e7cf      	b.n	8018b00 <_dtoa_r+0x24c>
 8018b60:	2301      	movs	r3, #1
 8018b62:	9310      	str	r3, [sp, #64]	@ 0x40
 8018b64:	3b02      	subs	r3, #2
 8018b66:	e7f6      	b.n	8018b56 <_dtoa_r+0x2a2>
 8018b68:	3101      	adds	r1, #1
 8018b6a:	0052      	lsls	r2, r2, #1
 8018b6c:	e7dc      	b.n	8018b28 <_dtoa_r+0x274>
 8018b6e:	9b03      	ldr	r3, [sp, #12]
 8018b70:	9a08      	ldr	r2, [sp, #32]
 8018b72:	69db      	ldr	r3, [r3, #28]
 8018b74:	601a      	str	r2, [r3, #0]
 8018b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b78:	2b0e      	cmp	r3, #14
 8018b7a:	d900      	bls.n	8018b7e <_dtoa_r+0x2ca>
 8018b7c:	e0d9      	b.n	8018d32 <_dtoa_r+0x47e>
 8018b7e:	2c00      	cmp	r4, #0
 8018b80:	d100      	bne.n	8018b84 <_dtoa_r+0x2d0>
 8018b82:	e0d6      	b.n	8018d32 <_dtoa_r+0x47e>
 8018b84:	9b04      	ldr	r3, [sp, #16]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	dd64      	ble.n	8018c54 <_dtoa_r+0x3a0>
 8018b8a:	210f      	movs	r1, #15
 8018b8c:	9a04      	ldr	r2, [sp, #16]
 8018b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8018c3c <_dtoa_r+0x388>)
 8018b90:	400a      	ands	r2, r1
 8018b92:	00d2      	lsls	r2, r2, #3
 8018b94:	189b      	adds	r3, r3, r2
 8018b96:	681e      	ldr	r6, [r3, #0]
 8018b98:	685f      	ldr	r7, [r3, #4]
 8018b9a:	9b04      	ldr	r3, [sp, #16]
 8018b9c:	2402      	movs	r4, #2
 8018b9e:	111d      	asrs	r5, r3, #4
 8018ba0:	05db      	lsls	r3, r3, #23
 8018ba2:	d50a      	bpl.n	8018bba <_dtoa_r+0x306>
 8018ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8018c50 <_dtoa_r+0x39c>)
 8018ba6:	400d      	ands	r5, r1
 8018ba8:	6a1a      	ldr	r2, [r3, #32]
 8018baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018bae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018bb0:	f7e9 f87e 	bl	8001cb0 <__aeabi_ddiv>
 8018bb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8018bb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018bb8:	3401      	adds	r4, #1
 8018bba:	4b25      	ldr	r3, [pc, #148]	@ (8018c50 <_dtoa_r+0x39c>)
 8018bbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8018bbe:	2d00      	cmp	r5, #0
 8018bc0:	d108      	bne.n	8018bd4 <_dtoa_r+0x320>
 8018bc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018bc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018bc6:	0032      	movs	r2, r6
 8018bc8:	003b      	movs	r3, r7
 8018bca:	f7e9 f871 	bl	8001cb0 <__aeabi_ddiv>
 8018bce:	900a      	str	r0, [sp, #40]	@ 0x28
 8018bd0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018bd2:	e05a      	b.n	8018c8a <_dtoa_r+0x3d6>
 8018bd4:	2301      	movs	r3, #1
 8018bd6:	421d      	tst	r5, r3
 8018bd8:	d009      	beq.n	8018bee <_dtoa_r+0x33a>
 8018bda:	18e4      	adds	r4, r4, r3
 8018bdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bde:	0030      	movs	r0, r6
 8018be0:	681a      	ldr	r2, [r3, #0]
 8018be2:	685b      	ldr	r3, [r3, #4]
 8018be4:	0039      	movs	r1, r7
 8018be6:	f7e9 fca7 	bl	8002538 <__aeabi_dmul>
 8018bea:	0006      	movs	r6, r0
 8018bec:	000f      	movs	r7, r1
 8018bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bf0:	106d      	asrs	r5, r5, #1
 8018bf2:	3308      	adds	r3, #8
 8018bf4:	e7e2      	b.n	8018bbc <_dtoa_r+0x308>
 8018bf6:	46c0      	nop			@ (mov r8, r8)
 8018bf8:	0801c3b5 	.word	0x0801c3b5
 8018bfc:	0801c3cc 	.word	0x0801c3cc
 8018c00:	7ff00000 	.word	0x7ff00000
 8018c04:	0000270f 	.word	0x0000270f
 8018c08:	0801c3b1 	.word	0x0801c3b1
 8018c0c:	0801c3b4 	.word	0x0801c3b4
 8018c10:	0801c385 	.word	0x0801c385
 8018c14:	0801c384 	.word	0x0801c384
 8018c18:	3ff00000 	.word	0x3ff00000
 8018c1c:	fffffc01 	.word	0xfffffc01
 8018c20:	3ff80000 	.word	0x3ff80000
 8018c24:	636f4361 	.word	0x636f4361
 8018c28:	3fd287a7 	.word	0x3fd287a7
 8018c2c:	8b60c8b3 	.word	0x8b60c8b3
 8018c30:	3fc68a28 	.word	0x3fc68a28
 8018c34:	509f79fb 	.word	0x509f79fb
 8018c38:	3fd34413 	.word	0x3fd34413
 8018c3c:	0801c4c8 	.word	0x0801c4c8
 8018c40:	00000432 	.word	0x00000432
 8018c44:	00000412 	.word	0x00000412
 8018c48:	fe100000 	.word	0xfe100000
 8018c4c:	0801c424 	.word	0x0801c424
 8018c50:	0801c4a0 	.word	0x0801c4a0
 8018c54:	9b04      	ldr	r3, [sp, #16]
 8018c56:	2402      	movs	r4, #2
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d016      	beq.n	8018c8a <_dtoa_r+0x3d6>
 8018c5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018c5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018c60:	220f      	movs	r2, #15
 8018c62:	425d      	negs	r5, r3
 8018c64:	402a      	ands	r2, r5
 8018c66:	4bd7      	ldr	r3, [pc, #860]	@ (8018fc4 <_dtoa_r+0x710>)
 8018c68:	00d2      	lsls	r2, r2, #3
 8018c6a:	189b      	adds	r3, r3, r2
 8018c6c:	681a      	ldr	r2, [r3, #0]
 8018c6e:	685b      	ldr	r3, [r3, #4]
 8018c70:	f7e9 fc62 	bl	8002538 <__aeabi_dmul>
 8018c74:	2701      	movs	r7, #1
 8018c76:	2300      	movs	r3, #0
 8018c78:	900a      	str	r0, [sp, #40]	@ 0x28
 8018c7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018c7c:	4ed2      	ldr	r6, [pc, #840]	@ (8018fc8 <_dtoa_r+0x714>)
 8018c7e:	112d      	asrs	r5, r5, #4
 8018c80:	2d00      	cmp	r5, #0
 8018c82:	d000      	beq.n	8018c86 <_dtoa_r+0x3d2>
 8018c84:	e0ba      	b.n	8018dfc <_dtoa_r+0x548>
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d1a1      	bne.n	8018bce <_dtoa_r+0x31a>
 8018c8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018c8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c8e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d100      	bne.n	8018c96 <_dtoa_r+0x3e2>
 8018c94:	e0bd      	b.n	8018e12 <_dtoa_r+0x55e>
 8018c96:	2200      	movs	r2, #0
 8018c98:	0030      	movs	r0, r6
 8018c9a:	0039      	movs	r1, r7
 8018c9c:	4bcb      	ldr	r3, [pc, #812]	@ (8018fcc <_dtoa_r+0x718>)
 8018c9e:	f7e7 fbdb 	bl	8000458 <__aeabi_dcmplt>
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	d100      	bne.n	8018ca8 <_dtoa_r+0x3f4>
 8018ca6:	e0b4      	b.n	8018e12 <_dtoa_r+0x55e>
 8018ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d100      	bne.n	8018cb0 <_dtoa_r+0x3fc>
 8018cae:	e0b0      	b.n	8018e12 <_dtoa_r+0x55e>
 8018cb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	dd39      	ble.n	8018d2a <_dtoa_r+0x476>
 8018cb6:	9b04      	ldr	r3, [sp, #16]
 8018cb8:	2200      	movs	r2, #0
 8018cba:	3b01      	subs	r3, #1
 8018cbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8018cbe:	0030      	movs	r0, r6
 8018cc0:	4bc3      	ldr	r3, [pc, #780]	@ (8018fd0 <_dtoa_r+0x71c>)
 8018cc2:	0039      	movs	r1, r7
 8018cc4:	f7e9 fc38 	bl	8002538 <__aeabi_dmul>
 8018cc8:	900a      	str	r0, [sp, #40]	@ 0x28
 8018cca:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018cce:	3401      	adds	r4, #1
 8018cd0:	0020      	movs	r0, r4
 8018cd2:	9311      	str	r3, [sp, #68]	@ 0x44
 8018cd4:	f7ea faf2 	bl	80032bc <__aeabi_i2d>
 8018cd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018cda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018cdc:	f7e9 fc2c 	bl	8002538 <__aeabi_dmul>
 8018ce0:	4bbc      	ldr	r3, [pc, #752]	@ (8018fd4 <_dtoa_r+0x720>)
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	f7e8 fc80 	bl	80015e8 <__aeabi_dadd>
 8018ce8:	4bbb      	ldr	r3, [pc, #748]	@ (8018fd8 <_dtoa_r+0x724>)
 8018cea:	0006      	movs	r6, r0
 8018cec:	18cf      	adds	r7, r1, r3
 8018cee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d000      	beq.n	8018cf6 <_dtoa_r+0x442>
 8018cf4:	e091      	b.n	8018e1a <_dtoa_r+0x566>
 8018cf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018cf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	4bb7      	ldr	r3, [pc, #732]	@ (8018fdc <_dtoa_r+0x728>)
 8018cfe:	f7e9 fee3 	bl	8002ac8 <__aeabi_dsub>
 8018d02:	0032      	movs	r2, r6
 8018d04:	003b      	movs	r3, r7
 8018d06:	0004      	movs	r4, r0
 8018d08:	000d      	movs	r5, r1
 8018d0a:	f7e7 fbb9 	bl	8000480 <__aeabi_dcmpgt>
 8018d0e:	2800      	cmp	r0, #0
 8018d10:	d000      	beq.n	8018d14 <_dtoa_r+0x460>
 8018d12:	e29d      	b.n	8019250 <_dtoa_r+0x99c>
 8018d14:	2180      	movs	r1, #128	@ 0x80
 8018d16:	0609      	lsls	r1, r1, #24
 8018d18:	187b      	adds	r3, r7, r1
 8018d1a:	0032      	movs	r2, r6
 8018d1c:	0020      	movs	r0, r4
 8018d1e:	0029      	movs	r1, r5
 8018d20:	f7e7 fb9a 	bl	8000458 <__aeabi_dcmplt>
 8018d24:	2800      	cmp	r0, #0
 8018d26:	d000      	beq.n	8018d2a <_dtoa_r+0x476>
 8018d28:	e130      	b.n	8018f8c <_dtoa_r+0x6d8>
 8018d2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018d2c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d30:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018d32:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	da00      	bge.n	8018d3a <_dtoa_r+0x486>
 8018d38:	e177      	b.n	801902a <_dtoa_r+0x776>
 8018d3a:	9a04      	ldr	r2, [sp, #16]
 8018d3c:	2a0e      	cmp	r2, #14
 8018d3e:	dd00      	ble.n	8018d42 <_dtoa_r+0x48e>
 8018d40:	e173      	b.n	801902a <_dtoa_r+0x776>
 8018d42:	4ba0      	ldr	r3, [pc, #640]	@ (8018fc4 <_dtoa_r+0x710>)
 8018d44:	00d2      	lsls	r2, r2, #3
 8018d46:	189b      	adds	r3, r3, r2
 8018d48:	685c      	ldr	r4, [r3, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	9306      	str	r3, [sp, #24]
 8018d4e:	9407      	str	r4, [sp, #28]
 8018d50:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	da03      	bge.n	8018d5e <_dtoa_r+0x4aa>
 8018d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	dc00      	bgt.n	8018d5e <_dtoa_r+0x4aa>
 8018d5c:	e106      	b.n	8018f6c <_dtoa_r+0x6b8>
 8018d5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018d60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d64:	9d08      	ldr	r5, [sp, #32]
 8018d66:	3b01      	subs	r3, #1
 8018d68:	195b      	adds	r3, r3, r5
 8018d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d6c:	9a06      	ldr	r2, [sp, #24]
 8018d6e:	9b07      	ldr	r3, [sp, #28]
 8018d70:	0030      	movs	r0, r6
 8018d72:	0039      	movs	r1, r7
 8018d74:	f7e8 ff9c 	bl	8001cb0 <__aeabi_ddiv>
 8018d78:	f7ea fa64 	bl	8003244 <__aeabi_d2iz>
 8018d7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8018d7e:	f7ea fa9d 	bl	80032bc <__aeabi_i2d>
 8018d82:	9a06      	ldr	r2, [sp, #24]
 8018d84:	9b07      	ldr	r3, [sp, #28]
 8018d86:	f7e9 fbd7 	bl	8002538 <__aeabi_dmul>
 8018d8a:	0002      	movs	r2, r0
 8018d8c:	000b      	movs	r3, r1
 8018d8e:	0030      	movs	r0, r6
 8018d90:	0039      	movs	r1, r7
 8018d92:	f7e9 fe99 	bl	8002ac8 <__aeabi_dsub>
 8018d96:	002b      	movs	r3, r5
 8018d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d9a:	3501      	adds	r5, #1
 8018d9c:	3230      	adds	r2, #48	@ 0x30
 8018d9e:	701a      	strb	r2, [r3, #0]
 8018da0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018da2:	002c      	movs	r4, r5
 8018da4:	429a      	cmp	r2, r3
 8018da6:	d000      	beq.n	8018daa <_dtoa_r+0x4f6>
 8018da8:	e131      	b.n	801900e <_dtoa_r+0x75a>
 8018daa:	0002      	movs	r2, r0
 8018dac:	000b      	movs	r3, r1
 8018dae:	f7e8 fc1b 	bl	80015e8 <__aeabi_dadd>
 8018db2:	9a06      	ldr	r2, [sp, #24]
 8018db4:	9b07      	ldr	r3, [sp, #28]
 8018db6:	0006      	movs	r6, r0
 8018db8:	000f      	movs	r7, r1
 8018dba:	f7e7 fb61 	bl	8000480 <__aeabi_dcmpgt>
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	d000      	beq.n	8018dc4 <_dtoa_r+0x510>
 8018dc2:	e10f      	b.n	8018fe4 <_dtoa_r+0x730>
 8018dc4:	9a06      	ldr	r2, [sp, #24]
 8018dc6:	9b07      	ldr	r3, [sp, #28]
 8018dc8:	0030      	movs	r0, r6
 8018dca:	0039      	movs	r1, r7
 8018dcc:	f7e7 fb3e 	bl	800044c <__aeabi_dcmpeq>
 8018dd0:	2800      	cmp	r0, #0
 8018dd2:	d003      	beq.n	8018ddc <_dtoa_r+0x528>
 8018dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dd6:	07dd      	lsls	r5, r3, #31
 8018dd8:	d500      	bpl.n	8018ddc <_dtoa_r+0x528>
 8018dda:	e103      	b.n	8018fe4 <_dtoa_r+0x730>
 8018ddc:	9905      	ldr	r1, [sp, #20]
 8018dde:	9803      	ldr	r0, [sp, #12]
 8018de0:	f000 fca6 	bl	8019730 <_Bfree>
 8018de4:	2300      	movs	r3, #0
 8018de6:	7023      	strb	r3, [r4, #0]
 8018de8:	9b04      	ldr	r3, [sp, #16]
 8018dea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018dec:	3301      	adds	r3, #1
 8018dee:	6013      	str	r3, [r2, #0]
 8018df0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d100      	bne.n	8018df8 <_dtoa_r+0x544>
 8018df6:	e5a7      	b.n	8018948 <_dtoa_r+0x94>
 8018df8:	601c      	str	r4, [r3, #0]
 8018dfa:	e5a5      	b.n	8018948 <_dtoa_r+0x94>
 8018dfc:	423d      	tst	r5, r7
 8018dfe:	d005      	beq.n	8018e0c <_dtoa_r+0x558>
 8018e00:	6832      	ldr	r2, [r6, #0]
 8018e02:	6873      	ldr	r3, [r6, #4]
 8018e04:	f7e9 fb98 	bl	8002538 <__aeabi_dmul>
 8018e08:	003b      	movs	r3, r7
 8018e0a:	3401      	adds	r4, #1
 8018e0c:	106d      	asrs	r5, r5, #1
 8018e0e:	3608      	adds	r6, #8
 8018e10:	e736      	b.n	8018c80 <_dtoa_r+0x3cc>
 8018e12:	9b04      	ldr	r3, [sp, #16]
 8018e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8018e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e18:	e75a      	b.n	8018cd0 <_dtoa_r+0x41c>
 8018e1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018e1c:	4b69      	ldr	r3, [pc, #420]	@ (8018fc4 <_dtoa_r+0x710>)
 8018e1e:	3a01      	subs	r2, #1
 8018e20:	00d2      	lsls	r2, r2, #3
 8018e22:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018e24:	189b      	adds	r3, r3, r2
 8018e26:	681a      	ldr	r2, [r3, #0]
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	2900      	cmp	r1, #0
 8018e2c:	d04c      	beq.n	8018ec8 <_dtoa_r+0x614>
 8018e2e:	2000      	movs	r0, #0
 8018e30:	496b      	ldr	r1, [pc, #428]	@ (8018fe0 <_dtoa_r+0x72c>)
 8018e32:	f7e8 ff3d 	bl	8001cb0 <__aeabi_ddiv>
 8018e36:	0032      	movs	r2, r6
 8018e38:	003b      	movs	r3, r7
 8018e3a:	f7e9 fe45 	bl	8002ac8 <__aeabi_dsub>
 8018e3e:	9a08      	ldr	r2, [sp, #32]
 8018e40:	0006      	movs	r6, r0
 8018e42:	4694      	mov	ip, r2
 8018e44:	000f      	movs	r7, r1
 8018e46:	9b08      	ldr	r3, [sp, #32]
 8018e48:	9316      	str	r3, [sp, #88]	@ 0x58
 8018e4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018e4c:	4463      	add	r3, ip
 8018e4e:	9311      	str	r3, [sp, #68]	@ 0x44
 8018e50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018e52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e54:	f7ea f9f6 	bl	8003244 <__aeabi_d2iz>
 8018e58:	0005      	movs	r5, r0
 8018e5a:	f7ea fa2f 	bl	80032bc <__aeabi_i2d>
 8018e5e:	0002      	movs	r2, r0
 8018e60:	000b      	movs	r3, r1
 8018e62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018e64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e66:	f7e9 fe2f 	bl	8002ac8 <__aeabi_dsub>
 8018e6a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018e6c:	3530      	adds	r5, #48	@ 0x30
 8018e6e:	1c5c      	adds	r4, r3, #1
 8018e70:	701d      	strb	r5, [r3, #0]
 8018e72:	0032      	movs	r2, r6
 8018e74:	003b      	movs	r3, r7
 8018e76:	900a      	str	r0, [sp, #40]	@ 0x28
 8018e78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018e7a:	f7e7 faed 	bl	8000458 <__aeabi_dcmplt>
 8018e7e:	2800      	cmp	r0, #0
 8018e80:	d16a      	bne.n	8018f58 <_dtoa_r+0x6a4>
 8018e82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e86:	2000      	movs	r0, #0
 8018e88:	4950      	ldr	r1, [pc, #320]	@ (8018fcc <_dtoa_r+0x718>)
 8018e8a:	f7e9 fe1d 	bl	8002ac8 <__aeabi_dsub>
 8018e8e:	0032      	movs	r2, r6
 8018e90:	003b      	movs	r3, r7
 8018e92:	f7e7 fae1 	bl	8000458 <__aeabi_dcmplt>
 8018e96:	2800      	cmp	r0, #0
 8018e98:	d000      	beq.n	8018e9c <_dtoa_r+0x5e8>
 8018e9a:	e0a5      	b.n	8018fe8 <_dtoa_r+0x734>
 8018e9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018e9e:	42a3      	cmp	r3, r4
 8018ea0:	d100      	bne.n	8018ea4 <_dtoa_r+0x5f0>
 8018ea2:	e742      	b.n	8018d2a <_dtoa_r+0x476>
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	0030      	movs	r0, r6
 8018ea8:	0039      	movs	r1, r7
 8018eaa:	4b49      	ldr	r3, [pc, #292]	@ (8018fd0 <_dtoa_r+0x71c>)
 8018eac:	f7e9 fb44 	bl	8002538 <__aeabi_dmul>
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	0006      	movs	r6, r0
 8018eb4:	000f      	movs	r7, r1
 8018eb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018eb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018eba:	4b45      	ldr	r3, [pc, #276]	@ (8018fd0 <_dtoa_r+0x71c>)
 8018ebc:	f7e9 fb3c 	bl	8002538 <__aeabi_dmul>
 8018ec0:	9416      	str	r4, [sp, #88]	@ 0x58
 8018ec2:	900a      	str	r0, [sp, #40]	@ 0x28
 8018ec4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018ec6:	e7c3      	b.n	8018e50 <_dtoa_r+0x59c>
 8018ec8:	0030      	movs	r0, r6
 8018eca:	0039      	movs	r1, r7
 8018ecc:	f7e9 fb34 	bl	8002538 <__aeabi_dmul>
 8018ed0:	9d08      	ldr	r5, [sp, #32]
 8018ed2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018ed4:	002b      	movs	r3, r5
 8018ed6:	4694      	mov	ip, r2
 8018ed8:	9016      	str	r0, [sp, #88]	@ 0x58
 8018eda:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018edc:	4463      	add	r3, ip
 8018ede:	9319      	str	r3, [sp, #100]	@ 0x64
 8018ee0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018ee2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018ee4:	f7ea f9ae 	bl	8003244 <__aeabi_d2iz>
 8018ee8:	0004      	movs	r4, r0
 8018eea:	f7ea f9e7 	bl	80032bc <__aeabi_i2d>
 8018eee:	000b      	movs	r3, r1
 8018ef0:	0002      	movs	r2, r0
 8018ef2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018ef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018ef6:	f7e9 fde7 	bl	8002ac8 <__aeabi_dsub>
 8018efa:	3430      	adds	r4, #48	@ 0x30
 8018efc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018efe:	702c      	strb	r4, [r5, #0]
 8018f00:	3501      	adds	r5, #1
 8018f02:	0006      	movs	r6, r0
 8018f04:	000f      	movs	r7, r1
 8018f06:	42ab      	cmp	r3, r5
 8018f08:	d129      	bne.n	8018f5e <_dtoa_r+0x6aa>
 8018f0a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8018f0c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018f0e:	9b08      	ldr	r3, [sp, #32]
 8018f10:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018f12:	469c      	mov	ip, r3
 8018f14:	2200      	movs	r2, #0
 8018f16:	4b32      	ldr	r3, [pc, #200]	@ (8018fe0 <_dtoa_r+0x72c>)
 8018f18:	4464      	add	r4, ip
 8018f1a:	f7e8 fb65 	bl	80015e8 <__aeabi_dadd>
 8018f1e:	0002      	movs	r2, r0
 8018f20:	000b      	movs	r3, r1
 8018f22:	0030      	movs	r0, r6
 8018f24:	0039      	movs	r1, r7
 8018f26:	f7e7 faab 	bl	8000480 <__aeabi_dcmpgt>
 8018f2a:	2800      	cmp	r0, #0
 8018f2c:	d15c      	bne.n	8018fe8 <_dtoa_r+0x734>
 8018f2e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018f30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018f32:	2000      	movs	r0, #0
 8018f34:	492a      	ldr	r1, [pc, #168]	@ (8018fe0 <_dtoa_r+0x72c>)
 8018f36:	f7e9 fdc7 	bl	8002ac8 <__aeabi_dsub>
 8018f3a:	0002      	movs	r2, r0
 8018f3c:	000b      	movs	r3, r1
 8018f3e:	0030      	movs	r0, r6
 8018f40:	0039      	movs	r1, r7
 8018f42:	f7e7 fa89 	bl	8000458 <__aeabi_dcmplt>
 8018f46:	2800      	cmp	r0, #0
 8018f48:	d100      	bne.n	8018f4c <_dtoa_r+0x698>
 8018f4a:	e6ee      	b.n	8018d2a <_dtoa_r+0x476>
 8018f4c:	0023      	movs	r3, r4
 8018f4e:	3c01      	subs	r4, #1
 8018f50:	7822      	ldrb	r2, [r4, #0]
 8018f52:	2a30      	cmp	r2, #48	@ 0x30
 8018f54:	d0fa      	beq.n	8018f4c <_dtoa_r+0x698>
 8018f56:	001c      	movs	r4, r3
 8018f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f5a:	9304      	str	r3, [sp, #16]
 8018f5c:	e73e      	b.n	8018ddc <_dtoa_r+0x528>
 8018f5e:	2200      	movs	r2, #0
 8018f60:	4b1b      	ldr	r3, [pc, #108]	@ (8018fd0 <_dtoa_r+0x71c>)
 8018f62:	f7e9 fae9 	bl	8002538 <__aeabi_dmul>
 8018f66:	900a      	str	r0, [sp, #40]	@ 0x28
 8018f68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018f6a:	e7b9      	b.n	8018ee0 <_dtoa_r+0x62c>
 8018f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d10c      	bne.n	8018f8c <_dtoa_r+0x6d8>
 8018f72:	9806      	ldr	r0, [sp, #24]
 8018f74:	9907      	ldr	r1, [sp, #28]
 8018f76:	2200      	movs	r2, #0
 8018f78:	4b18      	ldr	r3, [pc, #96]	@ (8018fdc <_dtoa_r+0x728>)
 8018f7a:	f7e9 fadd 	bl	8002538 <__aeabi_dmul>
 8018f7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018f82:	f7e7 fa87 	bl	8000494 <__aeabi_dcmpge>
 8018f86:	2800      	cmp	r0, #0
 8018f88:	d100      	bne.n	8018f8c <_dtoa_r+0x6d8>
 8018f8a:	e164      	b.n	8019256 <_dtoa_r+0x9a2>
 8018f8c:	2600      	movs	r6, #0
 8018f8e:	0037      	movs	r7, r6
 8018f90:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018f92:	9c08      	ldr	r4, [sp, #32]
 8018f94:	43db      	mvns	r3, r3
 8018f96:	930c      	str	r3, [sp, #48]	@ 0x30
 8018f98:	2300      	movs	r3, #0
 8018f9a:	9304      	str	r3, [sp, #16]
 8018f9c:	0031      	movs	r1, r6
 8018f9e:	9803      	ldr	r0, [sp, #12]
 8018fa0:	f000 fbc6 	bl	8019730 <_Bfree>
 8018fa4:	2f00      	cmp	r7, #0
 8018fa6:	d0d7      	beq.n	8018f58 <_dtoa_r+0x6a4>
 8018fa8:	9b04      	ldr	r3, [sp, #16]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d005      	beq.n	8018fba <_dtoa_r+0x706>
 8018fae:	42bb      	cmp	r3, r7
 8018fb0:	d003      	beq.n	8018fba <_dtoa_r+0x706>
 8018fb2:	0019      	movs	r1, r3
 8018fb4:	9803      	ldr	r0, [sp, #12]
 8018fb6:	f000 fbbb 	bl	8019730 <_Bfree>
 8018fba:	0039      	movs	r1, r7
 8018fbc:	9803      	ldr	r0, [sp, #12]
 8018fbe:	f000 fbb7 	bl	8019730 <_Bfree>
 8018fc2:	e7c9      	b.n	8018f58 <_dtoa_r+0x6a4>
 8018fc4:	0801c4c8 	.word	0x0801c4c8
 8018fc8:	0801c4a0 	.word	0x0801c4a0
 8018fcc:	3ff00000 	.word	0x3ff00000
 8018fd0:	40240000 	.word	0x40240000
 8018fd4:	401c0000 	.word	0x401c0000
 8018fd8:	fcc00000 	.word	0xfcc00000
 8018fdc:	40140000 	.word	0x40140000
 8018fe0:	3fe00000 	.word	0x3fe00000
 8018fe4:	9b04      	ldr	r3, [sp, #16]
 8018fe6:	930c      	str	r3, [sp, #48]	@ 0x30
 8018fe8:	0023      	movs	r3, r4
 8018fea:	001c      	movs	r4, r3
 8018fec:	3b01      	subs	r3, #1
 8018fee:	781a      	ldrb	r2, [r3, #0]
 8018ff0:	2a39      	cmp	r2, #57	@ 0x39
 8018ff2:	d108      	bne.n	8019006 <_dtoa_r+0x752>
 8018ff4:	9a08      	ldr	r2, [sp, #32]
 8018ff6:	429a      	cmp	r2, r3
 8018ff8:	d1f7      	bne.n	8018fea <_dtoa_r+0x736>
 8018ffa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018ffc:	9908      	ldr	r1, [sp, #32]
 8018ffe:	3201      	adds	r2, #1
 8019000:	920c      	str	r2, [sp, #48]	@ 0x30
 8019002:	2230      	movs	r2, #48	@ 0x30
 8019004:	700a      	strb	r2, [r1, #0]
 8019006:	781a      	ldrb	r2, [r3, #0]
 8019008:	3201      	adds	r2, #1
 801900a:	701a      	strb	r2, [r3, #0]
 801900c:	e7a4      	b.n	8018f58 <_dtoa_r+0x6a4>
 801900e:	2200      	movs	r2, #0
 8019010:	4bc6      	ldr	r3, [pc, #792]	@ (801932c <_dtoa_r+0xa78>)
 8019012:	f7e9 fa91 	bl	8002538 <__aeabi_dmul>
 8019016:	2200      	movs	r2, #0
 8019018:	2300      	movs	r3, #0
 801901a:	0006      	movs	r6, r0
 801901c:	000f      	movs	r7, r1
 801901e:	f7e7 fa15 	bl	800044c <__aeabi_dcmpeq>
 8019022:	2800      	cmp	r0, #0
 8019024:	d100      	bne.n	8019028 <_dtoa_r+0x774>
 8019026:	e6a1      	b.n	8018d6c <_dtoa_r+0x4b8>
 8019028:	e6d8      	b.n	8018ddc <_dtoa_r+0x528>
 801902a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801902c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801902e:	9c06      	ldr	r4, [sp, #24]
 8019030:	2f00      	cmp	r7, #0
 8019032:	d014      	beq.n	801905e <_dtoa_r+0x7aa>
 8019034:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8019036:	2a01      	cmp	r2, #1
 8019038:	dd00      	ble.n	801903c <_dtoa_r+0x788>
 801903a:	e0c8      	b.n	80191ce <_dtoa_r+0x91a>
 801903c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801903e:	2a00      	cmp	r2, #0
 8019040:	d100      	bne.n	8019044 <_dtoa_r+0x790>
 8019042:	e0be      	b.n	80191c2 <_dtoa_r+0x90e>
 8019044:	4aba      	ldr	r2, [pc, #744]	@ (8019330 <_dtoa_r+0xa7c>)
 8019046:	189b      	adds	r3, r3, r2
 8019048:	9a06      	ldr	r2, [sp, #24]
 801904a:	2101      	movs	r1, #1
 801904c:	18d2      	adds	r2, r2, r3
 801904e:	9206      	str	r2, [sp, #24]
 8019050:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019052:	9803      	ldr	r0, [sp, #12]
 8019054:	18d3      	adds	r3, r2, r3
 8019056:	930d      	str	r3, [sp, #52]	@ 0x34
 8019058:	f000 fc22 	bl	80198a0 <__i2b>
 801905c:	0007      	movs	r7, r0
 801905e:	2c00      	cmp	r4, #0
 8019060:	d00e      	beq.n	8019080 <_dtoa_r+0x7cc>
 8019062:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019064:	2b00      	cmp	r3, #0
 8019066:	dd0b      	ble.n	8019080 <_dtoa_r+0x7cc>
 8019068:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801906a:	0023      	movs	r3, r4
 801906c:	4294      	cmp	r4, r2
 801906e:	dd00      	ble.n	8019072 <_dtoa_r+0x7be>
 8019070:	0013      	movs	r3, r2
 8019072:	9a06      	ldr	r2, [sp, #24]
 8019074:	1ae4      	subs	r4, r4, r3
 8019076:	1ad2      	subs	r2, r2, r3
 8019078:	9206      	str	r2, [sp, #24]
 801907a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801907c:	1ad3      	subs	r3, r2, r3
 801907e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019082:	2b00      	cmp	r3, #0
 8019084:	d01f      	beq.n	80190c6 <_dtoa_r+0x812>
 8019086:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019088:	2b00      	cmp	r3, #0
 801908a:	d100      	bne.n	801908e <_dtoa_r+0x7da>
 801908c:	e0b5      	b.n	80191fa <_dtoa_r+0x946>
 801908e:	2d00      	cmp	r5, #0
 8019090:	d010      	beq.n	80190b4 <_dtoa_r+0x800>
 8019092:	0039      	movs	r1, r7
 8019094:	002a      	movs	r2, r5
 8019096:	9803      	ldr	r0, [sp, #12]
 8019098:	f000 fccc 	bl	8019a34 <__pow5mult>
 801909c:	9a05      	ldr	r2, [sp, #20]
 801909e:	0001      	movs	r1, r0
 80190a0:	0007      	movs	r7, r0
 80190a2:	9803      	ldr	r0, [sp, #12]
 80190a4:	f000 fc14 	bl	80198d0 <__multiply>
 80190a8:	0006      	movs	r6, r0
 80190aa:	9905      	ldr	r1, [sp, #20]
 80190ac:	9803      	ldr	r0, [sp, #12]
 80190ae:	f000 fb3f 	bl	8019730 <_Bfree>
 80190b2:	9605      	str	r6, [sp, #20]
 80190b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190b6:	1b5a      	subs	r2, r3, r5
 80190b8:	42ab      	cmp	r3, r5
 80190ba:	d004      	beq.n	80190c6 <_dtoa_r+0x812>
 80190bc:	9905      	ldr	r1, [sp, #20]
 80190be:	9803      	ldr	r0, [sp, #12]
 80190c0:	f000 fcb8 	bl	8019a34 <__pow5mult>
 80190c4:	9005      	str	r0, [sp, #20]
 80190c6:	2101      	movs	r1, #1
 80190c8:	9803      	ldr	r0, [sp, #12]
 80190ca:	f000 fbe9 	bl	80198a0 <__i2b>
 80190ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80190d0:	0006      	movs	r6, r0
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d100      	bne.n	80190d8 <_dtoa_r+0x824>
 80190d6:	e1bc      	b.n	8019452 <_dtoa_r+0xb9e>
 80190d8:	001a      	movs	r2, r3
 80190da:	0001      	movs	r1, r0
 80190dc:	9803      	ldr	r0, [sp, #12]
 80190de:	f000 fca9 	bl	8019a34 <__pow5mult>
 80190e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80190e4:	0006      	movs	r6, r0
 80190e6:	2500      	movs	r5, #0
 80190e8:	2b01      	cmp	r3, #1
 80190ea:	dc16      	bgt.n	801911a <_dtoa_r+0x866>
 80190ec:	2500      	movs	r5, #0
 80190ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190f0:	42ab      	cmp	r3, r5
 80190f2:	d10e      	bne.n	8019112 <_dtoa_r+0x85e>
 80190f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80190f6:	031b      	lsls	r3, r3, #12
 80190f8:	42ab      	cmp	r3, r5
 80190fa:	d10a      	bne.n	8019112 <_dtoa_r+0x85e>
 80190fc:	4b8d      	ldr	r3, [pc, #564]	@ (8019334 <_dtoa_r+0xa80>)
 80190fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019100:	4213      	tst	r3, r2
 8019102:	d006      	beq.n	8019112 <_dtoa_r+0x85e>
 8019104:	9b06      	ldr	r3, [sp, #24]
 8019106:	3501      	adds	r5, #1
 8019108:	3301      	adds	r3, #1
 801910a:	9306      	str	r3, [sp, #24]
 801910c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801910e:	3301      	adds	r3, #1
 8019110:	930d      	str	r3, [sp, #52]	@ 0x34
 8019112:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019114:	2001      	movs	r0, #1
 8019116:	2b00      	cmp	r3, #0
 8019118:	d008      	beq.n	801912c <_dtoa_r+0x878>
 801911a:	6933      	ldr	r3, [r6, #16]
 801911c:	3303      	adds	r3, #3
 801911e:	009b      	lsls	r3, r3, #2
 8019120:	18f3      	adds	r3, r6, r3
 8019122:	6858      	ldr	r0, [r3, #4]
 8019124:	f000 fb6c 	bl	8019800 <__hi0bits>
 8019128:	2320      	movs	r3, #32
 801912a:	1a18      	subs	r0, r3, r0
 801912c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801912e:	1818      	adds	r0, r3, r0
 8019130:	0002      	movs	r2, r0
 8019132:	231f      	movs	r3, #31
 8019134:	401a      	ands	r2, r3
 8019136:	4218      	tst	r0, r3
 8019138:	d065      	beq.n	8019206 <_dtoa_r+0x952>
 801913a:	3301      	adds	r3, #1
 801913c:	1a9b      	subs	r3, r3, r2
 801913e:	2b04      	cmp	r3, #4
 8019140:	dd5d      	ble.n	80191fe <_dtoa_r+0x94a>
 8019142:	231c      	movs	r3, #28
 8019144:	1a9b      	subs	r3, r3, r2
 8019146:	9a06      	ldr	r2, [sp, #24]
 8019148:	18e4      	adds	r4, r4, r3
 801914a:	18d2      	adds	r2, r2, r3
 801914c:	9206      	str	r2, [sp, #24]
 801914e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019150:	18d3      	adds	r3, r2, r3
 8019152:	930d      	str	r3, [sp, #52]	@ 0x34
 8019154:	9b06      	ldr	r3, [sp, #24]
 8019156:	2b00      	cmp	r3, #0
 8019158:	dd05      	ble.n	8019166 <_dtoa_r+0x8b2>
 801915a:	001a      	movs	r2, r3
 801915c:	9905      	ldr	r1, [sp, #20]
 801915e:	9803      	ldr	r0, [sp, #12]
 8019160:	f000 fcc4 	bl	8019aec <__lshift>
 8019164:	9005      	str	r0, [sp, #20]
 8019166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019168:	2b00      	cmp	r3, #0
 801916a:	dd05      	ble.n	8019178 <_dtoa_r+0x8c4>
 801916c:	0031      	movs	r1, r6
 801916e:	001a      	movs	r2, r3
 8019170:	9803      	ldr	r0, [sp, #12]
 8019172:	f000 fcbb 	bl	8019aec <__lshift>
 8019176:	0006      	movs	r6, r0
 8019178:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801917a:	2b00      	cmp	r3, #0
 801917c:	d045      	beq.n	801920a <_dtoa_r+0x956>
 801917e:	0031      	movs	r1, r6
 8019180:	9805      	ldr	r0, [sp, #20]
 8019182:	f000 fd1f 	bl	8019bc4 <__mcmp>
 8019186:	2800      	cmp	r0, #0
 8019188:	da3f      	bge.n	801920a <_dtoa_r+0x956>
 801918a:	9b04      	ldr	r3, [sp, #16]
 801918c:	220a      	movs	r2, #10
 801918e:	3b01      	subs	r3, #1
 8019190:	930c      	str	r3, [sp, #48]	@ 0x30
 8019192:	9905      	ldr	r1, [sp, #20]
 8019194:	2300      	movs	r3, #0
 8019196:	9803      	ldr	r0, [sp, #12]
 8019198:	f000 faee 	bl	8019778 <__multadd>
 801919c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801919e:	9005      	str	r0, [sp, #20]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d100      	bne.n	80191a6 <_dtoa_r+0x8f2>
 80191a4:	e15c      	b.n	8019460 <_dtoa_r+0xbac>
 80191a6:	2300      	movs	r3, #0
 80191a8:	0039      	movs	r1, r7
 80191aa:	220a      	movs	r2, #10
 80191ac:	9803      	ldr	r0, [sp, #12]
 80191ae:	f000 fae3 	bl	8019778 <__multadd>
 80191b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80191b4:	0007      	movs	r7, r0
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	dc55      	bgt.n	8019266 <_dtoa_r+0x9b2>
 80191ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80191bc:	2b02      	cmp	r3, #2
 80191be:	dc2d      	bgt.n	801921c <_dtoa_r+0x968>
 80191c0:	e051      	b.n	8019266 <_dtoa_r+0x9b2>
 80191c2:	2336      	movs	r3, #54	@ 0x36
 80191c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80191c6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80191c8:	9c06      	ldr	r4, [sp, #24]
 80191ca:	1a9b      	subs	r3, r3, r2
 80191cc:	e73c      	b.n	8019048 <_dtoa_r+0x794>
 80191ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191d0:	1e5d      	subs	r5, r3, #1
 80191d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191d4:	42ab      	cmp	r3, r5
 80191d6:	db08      	blt.n	80191ea <_dtoa_r+0x936>
 80191d8:	1b5d      	subs	r5, r3, r5
 80191da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191dc:	9c06      	ldr	r4, [sp, #24]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	db00      	blt.n	80191e4 <_dtoa_r+0x930>
 80191e2:	e731      	b.n	8019048 <_dtoa_r+0x794>
 80191e4:	1ae4      	subs	r4, r4, r3
 80191e6:	2300      	movs	r3, #0
 80191e8:	e72e      	b.n	8019048 <_dtoa_r+0x794>
 80191ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80191ee:	1aeb      	subs	r3, r5, r3
 80191f0:	18d3      	adds	r3, r2, r3
 80191f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80191f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80191f6:	2500      	movs	r5, #0
 80191f8:	e7ef      	b.n	80191da <_dtoa_r+0x926>
 80191fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80191fc:	e75e      	b.n	80190bc <_dtoa_r+0x808>
 80191fe:	2b04      	cmp	r3, #4
 8019200:	d0a8      	beq.n	8019154 <_dtoa_r+0x8a0>
 8019202:	331c      	adds	r3, #28
 8019204:	e79f      	b.n	8019146 <_dtoa_r+0x892>
 8019206:	0013      	movs	r3, r2
 8019208:	e7fb      	b.n	8019202 <_dtoa_r+0x94e>
 801920a:	9b04      	ldr	r3, [sp, #16]
 801920c:	930c      	str	r3, [sp, #48]	@ 0x30
 801920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019210:	930e      	str	r3, [sp, #56]	@ 0x38
 8019212:	2b00      	cmp	r3, #0
 8019214:	dc23      	bgt.n	801925e <_dtoa_r+0x9aa>
 8019216:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019218:	2b02      	cmp	r3, #2
 801921a:	dd20      	ble.n	801925e <_dtoa_r+0x9aa>
 801921c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801921e:	2b00      	cmp	r3, #0
 8019220:	d000      	beq.n	8019224 <_dtoa_r+0x970>
 8019222:	e6b5      	b.n	8018f90 <_dtoa_r+0x6dc>
 8019224:	0031      	movs	r1, r6
 8019226:	2205      	movs	r2, #5
 8019228:	9803      	ldr	r0, [sp, #12]
 801922a:	f000 faa5 	bl	8019778 <__multadd>
 801922e:	0006      	movs	r6, r0
 8019230:	0001      	movs	r1, r0
 8019232:	9805      	ldr	r0, [sp, #20]
 8019234:	f000 fcc6 	bl	8019bc4 <__mcmp>
 8019238:	2800      	cmp	r0, #0
 801923a:	dc00      	bgt.n	801923e <_dtoa_r+0x98a>
 801923c:	e6a8      	b.n	8018f90 <_dtoa_r+0x6dc>
 801923e:	9b08      	ldr	r3, [sp, #32]
 8019240:	9a08      	ldr	r2, [sp, #32]
 8019242:	1c5c      	adds	r4, r3, #1
 8019244:	2331      	movs	r3, #49	@ 0x31
 8019246:	7013      	strb	r3, [r2, #0]
 8019248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801924a:	3301      	adds	r3, #1
 801924c:	930c      	str	r3, [sp, #48]	@ 0x30
 801924e:	e6a3      	b.n	8018f98 <_dtoa_r+0x6e4>
 8019250:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019252:	0037      	movs	r7, r6
 8019254:	e7f3      	b.n	801923e <_dtoa_r+0x98a>
 8019256:	9b04      	ldr	r3, [sp, #16]
 8019258:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801925a:	930c      	str	r3, [sp, #48]	@ 0x30
 801925c:	e7f9      	b.n	8019252 <_dtoa_r+0x99e>
 801925e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019260:	2b00      	cmp	r3, #0
 8019262:	d100      	bne.n	8019266 <_dtoa_r+0x9b2>
 8019264:	e100      	b.n	8019468 <_dtoa_r+0xbb4>
 8019266:	2c00      	cmp	r4, #0
 8019268:	dd05      	ble.n	8019276 <_dtoa_r+0x9c2>
 801926a:	0039      	movs	r1, r7
 801926c:	0022      	movs	r2, r4
 801926e:	9803      	ldr	r0, [sp, #12]
 8019270:	f000 fc3c 	bl	8019aec <__lshift>
 8019274:	0007      	movs	r7, r0
 8019276:	0038      	movs	r0, r7
 8019278:	2d00      	cmp	r5, #0
 801927a:	d018      	beq.n	80192ae <_dtoa_r+0x9fa>
 801927c:	6879      	ldr	r1, [r7, #4]
 801927e:	9803      	ldr	r0, [sp, #12]
 8019280:	f000 fa12 	bl	80196a8 <_Balloc>
 8019284:	1e04      	subs	r4, r0, #0
 8019286:	d105      	bne.n	8019294 <_dtoa_r+0x9e0>
 8019288:	0022      	movs	r2, r4
 801928a:	4b2b      	ldr	r3, [pc, #172]	@ (8019338 <_dtoa_r+0xa84>)
 801928c:	482b      	ldr	r0, [pc, #172]	@ (801933c <_dtoa_r+0xa88>)
 801928e:	492c      	ldr	r1, [pc, #176]	@ (8019340 <_dtoa_r+0xa8c>)
 8019290:	f7ff fb25 	bl	80188de <_dtoa_r+0x2a>
 8019294:	0039      	movs	r1, r7
 8019296:	693a      	ldr	r2, [r7, #16]
 8019298:	310c      	adds	r1, #12
 801929a:	3202      	adds	r2, #2
 801929c:	0092      	lsls	r2, r2, #2
 801929e:	300c      	adds	r0, #12
 80192a0:	f7ff fa70 	bl	8018784 <memcpy>
 80192a4:	2201      	movs	r2, #1
 80192a6:	0021      	movs	r1, r4
 80192a8:	9803      	ldr	r0, [sp, #12]
 80192aa:	f000 fc1f 	bl	8019aec <__lshift>
 80192ae:	9b08      	ldr	r3, [sp, #32]
 80192b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80192b2:	9306      	str	r3, [sp, #24]
 80192b4:	3b01      	subs	r3, #1
 80192b6:	189b      	adds	r3, r3, r2
 80192b8:	2201      	movs	r2, #1
 80192ba:	9704      	str	r7, [sp, #16]
 80192bc:	0007      	movs	r7, r0
 80192be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80192c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80192c2:	4013      	ands	r3, r2
 80192c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80192c6:	0031      	movs	r1, r6
 80192c8:	9805      	ldr	r0, [sp, #20]
 80192ca:	f7ff fa64 	bl	8018796 <quorem>
 80192ce:	9904      	ldr	r1, [sp, #16]
 80192d0:	0005      	movs	r5, r0
 80192d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80192d4:	9805      	ldr	r0, [sp, #20]
 80192d6:	f000 fc75 	bl	8019bc4 <__mcmp>
 80192da:	003a      	movs	r2, r7
 80192dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80192de:	0031      	movs	r1, r6
 80192e0:	9803      	ldr	r0, [sp, #12]
 80192e2:	f000 fc8b 	bl	8019bfc <__mdiff>
 80192e6:	2201      	movs	r2, #1
 80192e8:	68c3      	ldr	r3, [r0, #12]
 80192ea:	0004      	movs	r4, r0
 80192ec:	3530      	adds	r5, #48	@ 0x30
 80192ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d104      	bne.n	80192fe <_dtoa_r+0xa4a>
 80192f4:	0001      	movs	r1, r0
 80192f6:	9805      	ldr	r0, [sp, #20]
 80192f8:	f000 fc64 	bl	8019bc4 <__mcmp>
 80192fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80192fe:	0021      	movs	r1, r4
 8019300:	9803      	ldr	r0, [sp, #12]
 8019302:	f000 fa15 	bl	8019730 <_Bfree>
 8019306:	9b06      	ldr	r3, [sp, #24]
 8019308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801930a:	1c5c      	adds	r4, r3, #1
 801930c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801930e:	4313      	orrs	r3, r2
 8019310:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019312:	4313      	orrs	r3, r2
 8019314:	d116      	bne.n	8019344 <_dtoa_r+0xa90>
 8019316:	2d39      	cmp	r5, #57	@ 0x39
 8019318:	d02f      	beq.n	801937a <_dtoa_r+0xac6>
 801931a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801931c:	2b00      	cmp	r3, #0
 801931e:	dd01      	ble.n	8019324 <_dtoa_r+0xa70>
 8019320:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019322:	3531      	adds	r5, #49	@ 0x31
 8019324:	9b06      	ldr	r3, [sp, #24]
 8019326:	701d      	strb	r5, [r3, #0]
 8019328:	e638      	b.n	8018f9c <_dtoa_r+0x6e8>
 801932a:	46c0      	nop			@ (mov r8, r8)
 801932c:	40240000 	.word	0x40240000
 8019330:	00000433 	.word	0x00000433
 8019334:	7ff00000 	.word	0x7ff00000
 8019338:	0801c424 	.word	0x0801c424
 801933c:	0801c3cc 	.word	0x0801c3cc
 8019340:	000002ef 	.word	0x000002ef
 8019344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019346:	2b00      	cmp	r3, #0
 8019348:	db04      	blt.n	8019354 <_dtoa_r+0xaa0>
 801934a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801934c:	4313      	orrs	r3, r2
 801934e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019350:	4313      	orrs	r3, r2
 8019352:	d11e      	bne.n	8019392 <_dtoa_r+0xade>
 8019354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019356:	2b00      	cmp	r3, #0
 8019358:	dde4      	ble.n	8019324 <_dtoa_r+0xa70>
 801935a:	9905      	ldr	r1, [sp, #20]
 801935c:	2201      	movs	r2, #1
 801935e:	9803      	ldr	r0, [sp, #12]
 8019360:	f000 fbc4 	bl	8019aec <__lshift>
 8019364:	0031      	movs	r1, r6
 8019366:	9005      	str	r0, [sp, #20]
 8019368:	f000 fc2c 	bl	8019bc4 <__mcmp>
 801936c:	2800      	cmp	r0, #0
 801936e:	dc02      	bgt.n	8019376 <_dtoa_r+0xac2>
 8019370:	d1d8      	bne.n	8019324 <_dtoa_r+0xa70>
 8019372:	07eb      	lsls	r3, r5, #31
 8019374:	d5d6      	bpl.n	8019324 <_dtoa_r+0xa70>
 8019376:	2d39      	cmp	r5, #57	@ 0x39
 8019378:	d1d2      	bne.n	8019320 <_dtoa_r+0xa6c>
 801937a:	2339      	movs	r3, #57	@ 0x39
 801937c:	9a06      	ldr	r2, [sp, #24]
 801937e:	7013      	strb	r3, [r2, #0]
 8019380:	0023      	movs	r3, r4
 8019382:	001c      	movs	r4, r3
 8019384:	3b01      	subs	r3, #1
 8019386:	781a      	ldrb	r2, [r3, #0]
 8019388:	2a39      	cmp	r2, #57	@ 0x39
 801938a:	d04f      	beq.n	801942c <_dtoa_r+0xb78>
 801938c:	3201      	adds	r2, #1
 801938e:	701a      	strb	r2, [r3, #0]
 8019390:	e604      	b.n	8018f9c <_dtoa_r+0x6e8>
 8019392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019394:	2b00      	cmp	r3, #0
 8019396:	dd03      	ble.n	80193a0 <_dtoa_r+0xaec>
 8019398:	2d39      	cmp	r5, #57	@ 0x39
 801939a:	d0ee      	beq.n	801937a <_dtoa_r+0xac6>
 801939c:	3501      	adds	r5, #1
 801939e:	e7c1      	b.n	8019324 <_dtoa_r+0xa70>
 80193a0:	9b06      	ldr	r3, [sp, #24]
 80193a2:	9a06      	ldr	r2, [sp, #24]
 80193a4:	701d      	strb	r5, [r3, #0]
 80193a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80193a8:	4293      	cmp	r3, r2
 80193aa:	d02a      	beq.n	8019402 <_dtoa_r+0xb4e>
 80193ac:	2300      	movs	r3, #0
 80193ae:	220a      	movs	r2, #10
 80193b0:	9905      	ldr	r1, [sp, #20]
 80193b2:	9803      	ldr	r0, [sp, #12]
 80193b4:	f000 f9e0 	bl	8019778 <__multadd>
 80193b8:	9b04      	ldr	r3, [sp, #16]
 80193ba:	9005      	str	r0, [sp, #20]
 80193bc:	42bb      	cmp	r3, r7
 80193be:	d109      	bne.n	80193d4 <_dtoa_r+0xb20>
 80193c0:	2300      	movs	r3, #0
 80193c2:	220a      	movs	r2, #10
 80193c4:	9904      	ldr	r1, [sp, #16]
 80193c6:	9803      	ldr	r0, [sp, #12]
 80193c8:	f000 f9d6 	bl	8019778 <__multadd>
 80193cc:	9004      	str	r0, [sp, #16]
 80193ce:	0007      	movs	r7, r0
 80193d0:	9406      	str	r4, [sp, #24]
 80193d2:	e778      	b.n	80192c6 <_dtoa_r+0xa12>
 80193d4:	9904      	ldr	r1, [sp, #16]
 80193d6:	2300      	movs	r3, #0
 80193d8:	220a      	movs	r2, #10
 80193da:	9803      	ldr	r0, [sp, #12]
 80193dc:	f000 f9cc 	bl	8019778 <__multadd>
 80193e0:	2300      	movs	r3, #0
 80193e2:	9004      	str	r0, [sp, #16]
 80193e4:	220a      	movs	r2, #10
 80193e6:	0039      	movs	r1, r7
 80193e8:	9803      	ldr	r0, [sp, #12]
 80193ea:	f000 f9c5 	bl	8019778 <__multadd>
 80193ee:	e7ee      	b.n	80193ce <_dtoa_r+0xb1a>
 80193f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80193f2:	2401      	movs	r4, #1
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	dd00      	ble.n	80193fa <_dtoa_r+0xb46>
 80193f8:	001c      	movs	r4, r3
 80193fa:	9b08      	ldr	r3, [sp, #32]
 80193fc:	191c      	adds	r4, r3, r4
 80193fe:	2300      	movs	r3, #0
 8019400:	9304      	str	r3, [sp, #16]
 8019402:	9905      	ldr	r1, [sp, #20]
 8019404:	2201      	movs	r2, #1
 8019406:	9803      	ldr	r0, [sp, #12]
 8019408:	f000 fb70 	bl	8019aec <__lshift>
 801940c:	0031      	movs	r1, r6
 801940e:	9005      	str	r0, [sp, #20]
 8019410:	f000 fbd8 	bl	8019bc4 <__mcmp>
 8019414:	2800      	cmp	r0, #0
 8019416:	dcb3      	bgt.n	8019380 <_dtoa_r+0xacc>
 8019418:	d101      	bne.n	801941e <_dtoa_r+0xb6a>
 801941a:	07ed      	lsls	r5, r5, #31
 801941c:	d4b0      	bmi.n	8019380 <_dtoa_r+0xacc>
 801941e:	0023      	movs	r3, r4
 8019420:	001c      	movs	r4, r3
 8019422:	3b01      	subs	r3, #1
 8019424:	781a      	ldrb	r2, [r3, #0]
 8019426:	2a30      	cmp	r2, #48	@ 0x30
 8019428:	d0fa      	beq.n	8019420 <_dtoa_r+0xb6c>
 801942a:	e5b7      	b.n	8018f9c <_dtoa_r+0x6e8>
 801942c:	9a08      	ldr	r2, [sp, #32]
 801942e:	429a      	cmp	r2, r3
 8019430:	d1a7      	bne.n	8019382 <_dtoa_r+0xace>
 8019432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019434:	3301      	adds	r3, #1
 8019436:	930c      	str	r3, [sp, #48]	@ 0x30
 8019438:	2331      	movs	r3, #49	@ 0x31
 801943a:	7013      	strb	r3, [r2, #0]
 801943c:	e5ae      	b.n	8018f9c <_dtoa_r+0x6e8>
 801943e:	4b15      	ldr	r3, [pc, #84]	@ (8019494 <_dtoa_r+0xbe0>)
 8019440:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8019442:	9308      	str	r3, [sp, #32]
 8019444:	4b14      	ldr	r3, [pc, #80]	@ (8019498 <_dtoa_r+0xbe4>)
 8019446:	2a00      	cmp	r2, #0
 8019448:	d001      	beq.n	801944e <_dtoa_r+0xb9a>
 801944a:	f7ff fa7b 	bl	8018944 <_dtoa_r+0x90>
 801944e:	f7ff fa7b 	bl	8018948 <_dtoa_r+0x94>
 8019452:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019454:	2b01      	cmp	r3, #1
 8019456:	dc00      	bgt.n	801945a <_dtoa_r+0xba6>
 8019458:	e648      	b.n	80190ec <_dtoa_r+0x838>
 801945a:	2001      	movs	r0, #1
 801945c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801945e:	e665      	b.n	801912c <_dtoa_r+0x878>
 8019460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019462:	2b00      	cmp	r3, #0
 8019464:	dc00      	bgt.n	8019468 <_dtoa_r+0xbb4>
 8019466:	e6d6      	b.n	8019216 <_dtoa_r+0x962>
 8019468:	2400      	movs	r4, #0
 801946a:	0031      	movs	r1, r6
 801946c:	9805      	ldr	r0, [sp, #20]
 801946e:	f7ff f992 	bl	8018796 <quorem>
 8019472:	9b08      	ldr	r3, [sp, #32]
 8019474:	3030      	adds	r0, #48	@ 0x30
 8019476:	5518      	strb	r0, [r3, r4]
 8019478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801947a:	3401      	adds	r4, #1
 801947c:	0005      	movs	r5, r0
 801947e:	429c      	cmp	r4, r3
 8019480:	dab6      	bge.n	80193f0 <_dtoa_r+0xb3c>
 8019482:	2300      	movs	r3, #0
 8019484:	220a      	movs	r2, #10
 8019486:	9905      	ldr	r1, [sp, #20]
 8019488:	9803      	ldr	r0, [sp, #12]
 801948a:	f000 f975 	bl	8019778 <__multadd>
 801948e:	9005      	str	r0, [sp, #20]
 8019490:	e7eb      	b.n	801946a <_dtoa_r+0xbb6>
 8019492:	46c0      	nop			@ (mov r8, r8)
 8019494:	0801c3a8 	.word	0x0801c3a8
 8019498:	0801c3b0 	.word	0x0801c3b0

0801949c <_free_r>:
 801949c:	b570      	push	{r4, r5, r6, lr}
 801949e:	0005      	movs	r5, r0
 80194a0:	1e0c      	subs	r4, r1, #0
 80194a2:	d010      	beq.n	80194c6 <_free_r+0x2a>
 80194a4:	3c04      	subs	r4, #4
 80194a6:	6823      	ldr	r3, [r4, #0]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	da00      	bge.n	80194ae <_free_r+0x12>
 80194ac:	18e4      	adds	r4, r4, r3
 80194ae:	0028      	movs	r0, r5
 80194b0:	f000 f8ea 	bl	8019688 <__malloc_lock>
 80194b4:	4a1d      	ldr	r2, [pc, #116]	@ (801952c <_free_r+0x90>)
 80194b6:	6813      	ldr	r3, [r2, #0]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d105      	bne.n	80194c8 <_free_r+0x2c>
 80194bc:	6063      	str	r3, [r4, #4]
 80194be:	6014      	str	r4, [r2, #0]
 80194c0:	0028      	movs	r0, r5
 80194c2:	f000 f8e9 	bl	8019698 <__malloc_unlock>
 80194c6:	bd70      	pop	{r4, r5, r6, pc}
 80194c8:	42a3      	cmp	r3, r4
 80194ca:	d908      	bls.n	80194de <_free_r+0x42>
 80194cc:	6820      	ldr	r0, [r4, #0]
 80194ce:	1821      	adds	r1, r4, r0
 80194d0:	428b      	cmp	r3, r1
 80194d2:	d1f3      	bne.n	80194bc <_free_r+0x20>
 80194d4:	6819      	ldr	r1, [r3, #0]
 80194d6:	685b      	ldr	r3, [r3, #4]
 80194d8:	1809      	adds	r1, r1, r0
 80194da:	6021      	str	r1, [r4, #0]
 80194dc:	e7ee      	b.n	80194bc <_free_r+0x20>
 80194de:	001a      	movs	r2, r3
 80194e0:	685b      	ldr	r3, [r3, #4]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d001      	beq.n	80194ea <_free_r+0x4e>
 80194e6:	42a3      	cmp	r3, r4
 80194e8:	d9f9      	bls.n	80194de <_free_r+0x42>
 80194ea:	6811      	ldr	r1, [r2, #0]
 80194ec:	1850      	adds	r0, r2, r1
 80194ee:	42a0      	cmp	r0, r4
 80194f0:	d10b      	bne.n	801950a <_free_r+0x6e>
 80194f2:	6820      	ldr	r0, [r4, #0]
 80194f4:	1809      	adds	r1, r1, r0
 80194f6:	1850      	adds	r0, r2, r1
 80194f8:	6011      	str	r1, [r2, #0]
 80194fa:	4283      	cmp	r3, r0
 80194fc:	d1e0      	bne.n	80194c0 <_free_r+0x24>
 80194fe:	6818      	ldr	r0, [r3, #0]
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	1841      	adds	r1, r0, r1
 8019504:	6011      	str	r1, [r2, #0]
 8019506:	6053      	str	r3, [r2, #4]
 8019508:	e7da      	b.n	80194c0 <_free_r+0x24>
 801950a:	42a0      	cmp	r0, r4
 801950c:	d902      	bls.n	8019514 <_free_r+0x78>
 801950e:	230c      	movs	r3, #12
 8019510:	602b      	str	r3, [r5, #0]
 8019512:	e7d5      	b.n	80194c0 <_free_r+0x24>
 8019514:	6820      	ldr	r0, [r4, #0]
 8019516:	1821      	adds	r1, r4, r0
 8019518:	428b      	cmp	r3, r1
 801951a:	d103      	bne.n	8019524 <_free_r+0x88>
 801951c:	6819      	ldr	r1, [r3, #0]
 801951e:	685b      	ldr	r3, [r3, #4]
 8019520:	1809      	adds	r1, r1, r0
 8019522:	6021      	str	r1, [r4, #0]
 8019524:	6063      	str	r3, [r4, #4]
 8019526:	6054      	str	r4, [r2, #4]
 8019528:	e7ca      	b.n	80194c0 <_free_r+0x24>
 801952a:	46c0      	nop			@ (mov r8, r8)
 801952c:	20003f58 	.word	0x20003f58

08019530 <malloc>:
 8019530:	b510      	push	{r4, lr}
 8019532:	4b03      	ldr	r3, [pc, #12]	@ (8019540 <malloc+0x10>)
 8019534:	0001      	movs	r1, r0
 8019536:	6818      	ldr	r0, [r3, #0]
 8019538:	f000 f826 	bl	8019588 <_malloc_r>
 801953c:	bd10      	pop	{r4, pc}
 801953e:	46c0      	nop			@ (mov r8, r8)
 8019540:	200001f4 	.word	0x200001f4

08019544 <sbrk_aligned>:
 8019544:	b570      	push	{r4, r5, r6, lr}
 8019546:	4e0f      	ldr	r6, [pc, #60]	@ (8019584 <sbrk_aligned+0x40>)
 8019548:	000d      	movs	r5, r1
 801954a:	6831      	ldr	r1, [r6, #0]
 801954c:	0004      	movs	r4, r0
 801954e:	2900      	cmp	r1, #0
 8019550:	d102      	bne.n	8019558 <sbrk_aligned+0x14>
 8019552:	f001 f855 	bl	801a600 <_sbrk_r>
 8019556:	6030      	str	r0, [r6, #0]
 8019558:	0029      	movs	r1, r5
 801955a:	0020      	movs	r0, r4
 801955c:	f001 f850 	bl	801a600 <_sbrk_r>
 8019560:	1c43      	adds	r3, r0, #1
 8019562:	d103      	bne.n	801956c <sbrk_aligned+0x28>
 8019564:	2501      	movs	r5, #1
 8019566:	426d      	negs	r5, r5
 8019568:	0028      	movs	r0, r5
 801956a:	bd70      	pop	{r4, r5, r6, pc}
 801956c:	2303      	movs	r3, #3
 801956e:	1cc5      	adds	r5, r0, #3
 8019570:	439d      	bics	r5, r3
 8019572:	42a8      	cmp	r0, r5
 8019574:	d0f8      	beq.n	8019568 <sbrk_aligned+0x24>
 8019576:	1a29      	subs	r1, r5, r0
 8019578:	0020      	movs	r0, r4
 801957a:	f001 f841 	bl	801a600 <_sbrk_r>
 801957e:	3001      	adds	r0, #1
 8019580:	d1f2      	bne.n	8019568 <sbrk_aligned+0x24>
 8019582:	e7ef      	b.n	8019564 <sbrk_aligned+0x20>
 8019584:	20003f54 	.word	0x20003f54

08019588 <_malloc_r>:
 8019588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801958a:	2203      	movs	r2, #3
 801958c:	1ccb      	adds	r3, r1, #3
 801958e:	4393      	bics	r3, r2
 8019590:	3308      	adds	r3, #8
 8019592:	0005      	movs	r5, r0
 8019594:	001f      	movs	r7, r3
 8019596:	2b0c      	cmp	r3, #12
 8019598:	d234      	bcs.n	8019604 <_malloc_r+0x7c>
 801959a:	270c      	movs	r7, #12
 801959c:	42b9      	cmp	r1, r7
 801959e:	d833      	bhi.n	8019608 <_malloc_r+0x80>
 80195a0:	0028      	movs	r0, r5
 80195a2:	f000 f871 	bl	8019688 <__malloc_lock>
 80195a6:	4e37      	ldr	r6, [pc, #220]	@ (8019684 <_malloc_r+0xfc>)
 80195a8:	6833      	ldr	r3, [r6, #0]
 80195aa:	001c      	movs	r4, r3
 80195ac:	2c00      	cmp	r4, #0
 80195ae:	d12f      	bne.n	8019610 <_malloc_r+0x88>
 80195b0:	0039      	movs	r1, r7
 80195b2:	0028      	movs	r0, r5
 80195b4:	f7ff ffc6 	bl	8019544 <sbrk_aligned>
 80195b8:	0004      	movs	r4, r0
 80195ba:	1c43      	adds	r3, r0, #1
 80195bc:	d15f      	bne.n	801967e <_malloc_r+0xf6>
 80195be:	6834      	ldr	r4, [r6, #0]
 80195c0:	9400      	str	r4, [sp, #0]
 80195c2:	9b00      	ldr	r3, [sp, #0]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d14a      	bne.n	801965e <_malloc_r+0xd6>
 80195c8:	2c00      	cmp	r4, #0
 80195ca:	d052      	beq.n	8019672 <_malloc_r+0xea>
 80195cc:	6823      	ldr	r3, [r4, #0]
 80195ce:	0028      	movs	r0, r5
 80195d0:	18e3      	adds	r3, r4, r3
 80195d2:	9900      	ldr	r1, [sp, #0]
 80195d4:	9301      	str	r3, [sp, #4]
 80195d6:	f001 f813 	bl	801a600 <_sbrk_r>
 80195da:	9b01      	ldr	r3, [sp, #4]
 80195dc:	4283      	cmp	r3, r0
 80195de:	d148      	bne.n	8019672 <_malloc_r+0xea>
 80195e0:	6823      	ldr	r3, [r4, #0]
 80195e2:	0028      	movs	r0, r5
 80195e4:	1aff      	subs	r7, r7, r3
 80195e6:	0039      	movs	r1, r7
 80195e8:	f7ff ffac 	bl	8019544 <sbrk_aligned>
 80195ec:	3001      	adds	r0, #1
 80195ee:	d040      	beq.n	8019672 <_malloc_r+0xea>
 80195f0:	6823      	ldr	r3, [r4, #0]
 80195f2:	19db      	adds	r3, r3, r7
 80195f4:	6023      	str	r3, [r4, #0]
 80195f6:	6833      	ldr	r3, [r6, #0]
 80195f8:	685a      	ldr	r2, [r3, #4]
 80195fa:	2a00      	cmp	r2, #0
 80195fc:	d133      	bne.n	8019666 <_malloc_r+0xde>
 80195fe:	9b00      	ldr	r3, [sp, #0]
 8019600:	6033      	str	r3, [r6, #0]
 8019602:	e019      	b.n	8019638 <_malloc_r+0xb0>
 8019604:	2b00      	cmp	r3, #0
 8019606:	dac9      	bge.n	801959c <_malloc_r+0x14>
 8019608:	230c      	movs	r3, #12
 801960a:	602b      	str	r3, [r5, #0]
 801960c:	2000      	movs	r0, #0
 801960e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019610:	6821      	ldr	r1, [r4, #0]
 8019612:	1bc9      	subs	r1, r1, r7
 8019614:	d420      	bmi.n	8019658 <_malloc_r+0xd0>
 8019616:	290b      	cmp	r1, #11
 8019618:	d90a      	bls.n	8019630 <_malloc_r+0xa8>
 801961a:	19e2      	adds	r2, r4, r7
 801961c:	6027      	str	r7, [r4, #0]
 801961e:	42a3      	cmp	r3, r4
 8019620:	d104      	bne.n	801962c <_malloc_r+0xa4>
 8019622:	6032      	str	r2, [r6, #0]
 8019624:	6863      	ldr	r3, [r4, #4]
 8019626:	6011      	str	r1, [r2, #0]
 8019628:	6053      	str	r3, [r2, #4]
 801962a:	e005      	b.n	8019638 <_malloc_r+0xb0>
 801962c:	605a      	str	r2, [r3, #4]
 801962e:	e7f9      	b.n	8019624 <_malloc_r+0x9c>
 8019630:	6862      	ldr	r2, [r4, #4]
 8019632:	42a3      	cmp	r3, r4
 8019634:	d10e      	bne.n	8019654 <_malloc_r+0xcc>
 8019636:	6032      	str	r2, [r6, #0]
 8019638:	0028      	movs	r0, r5
 801963a:	f000 f82d 	bl	8019698 <__malloc_unlock>
 801963e:	0020      	movs	r0, r4
 8019640:	2207      	movs	r2, #7
 8019642:	300b      	adds	r0, #11
 8019644:	1d23      	adds	r3, r4, #4
 8019646:	4390      	bics	r0, r2
 8019648:	1ac2      	subs	r2, r0, r3
 801964a:	4298      	cmp	r0, r3
 801964c:	d0df      	beq.n	801960e <_malloc_r+0x86>
 801964e:	1a1b      	subs	r3, r3, r0
 8019650:	50a3      	str	r3, [r4, r2]
 8019652:	e7dc      	b.n	801960e <_malloc_r+0x86>
 8019654:	605a      	str	r2, [r3, #4]
 8019656:	e7ef      	b.n	8019638 <_malloc_r+0xb0>
 8019658:	0023      	movs	r3, r4
 801965a:	6864      	ldr	r4, [r4, #4]
 801965c:	e7a6      	b.n	80195ac <_malloc_r+0x24>
 801965e:	9c00      	ldr	r4, [sp, #0]
 8019660:	6863      	ldr	r3, [r4, #4]
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	e7ad      	b.n	80195c2 <_malloc_r+0x3a>
 8019666:	001a      	movs	r2, r3
 8019668:	685b      	ldr	r3, [r3, #4]
 801966a:	42a3      	cmp	r3, r4
 801966c:	d1fb      	bne.n	8019666 <_malloc_r+0xde>
 801966e:	2300      	movs	r3, #0
 8019670:	e7da      	b.n	8019628 <_malloc_r+0xa0>
 8019672:	230c      	movs	r3, #12
 8019674:	0028      	movs	r0, r5
 8019676:	602b      	str	r3, [r5, #0]
 8019678:	f000 f80e 	bl	8019698 <__malloc_unlock>
 801967c:	e7c6      	b.n	801960c <_malloc_r+0x84>
 801967e:	6007      	str	r7, [r0, #0]
 8019680:	e7da      	b.n	8019638 <_malloc_r+0xb0>
 8019682:	46c0      	nop			@ (mov r8, r8)
 8019684:	20003f58 	.word	0x20003f58

08019688 <__malloc_lock>:
 8019688:	b510      	push	{r4, lr}
 801968a:	4802      	ldr	r0, [pc, #8]	@ (8019694 <__malloc_lock+0xc>)
 801968c:	f7ff f86d 	bl	801876a <__retarget_lock_acquire_recursive>
 8019690:	bd10      	pop	{r4, pc}
 8019692:	46c0      	nop			@ (mov r8, r8)
 8019694:	20003f50 	.word	0x20003f50

08019698 <__malloc_unlock>:
 8019698:	b510      	push	{r4, lr}
 801969a:	4802      	ldr	r0, [pc, #8]	@ (80196a4 <__malloc_unlock+0xc>)
 801969c:	f7ff f866 	bl	801876c <__retarget_lock_release_recursive>
 80196a0:	bd10      	pop	{r4, pc}
 80196a2:	46c0      	nop			@ (mov r8, r8)
 80196a4:	20003f50 	.word	0x20003f50

080196a8 <_Balloc>:
 80196a8:	b570      	push	{r4, r5, r6, lr}
 80196aa:	69c5      	ldr	r5, [r0, #28]
 80196ac:	0006      	movs	r6, r0
 80196ae:	000c      	movs	r4, r1
 80196b0:	2d00      	cmp	r5, #0
 80196b2:	d10e      	bne.n	80196d2 <_Balloc+0x2a>
 80196b4:	2010      	movs	r0, #16
 80196b6:	f7ff ff3b 	bl	8019530 <malloc>
 80196ba:	1e02      	subs	r2, r0, #0
 80196bc:	61f0      	str	r0, [r6, #28]
 80196be:	d104      	bne.n	80196ca <_Balloc+0x22>
 80196c0:	216b      	movs	r1, #107	@ 0x6b
 80196c2:	4b19      	ldr	r3, [pc, #100]	@ (8019728 <_Balloc+0x80>)
 80196c4:	4819      	ldr	r0, [pc, #100]	@ (801972c <_Balloc+0x84>)
 80196c6:	f000 ffad 	bl	801a624 <__assert_func>
 80196ca:	6045      	str	r5, [r0, #4]
 80196cc:	6085      	str	r5, [r0, #8]
 80196ce:	6005      	str	r5, [r0, #0]
 80196d0:	60c5      	str	r5, [r0, #12]
 80196d2:	69f5      	ldr	r5, [r6, #28]
 80196d4:	68eb      	ldr	r3, [r5, #12]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d013      	beq.n	8019702 <_Balloc+0x5a>
 80196da:	69f3      	ldr	r3, [r6, #28]
 80196dc:	00a2      	lsls	r2, r4, #2
 80196de:	68db      	ldr	r3, [r3, #12]
 80196e0:	189b      	adds	r3, r3, r2
 80196e2:	6818      	ldr	r0, [r3, #0]
 80196e4:	2800      	cmp	r0, #0
 80196e6:	d118      	bne.n	801971a <_Balloc+0x72>
 80196e8:	2101      	movs	r1, #1
 80196ea:	000d      	movs	r5, r1
 80196ec:	40a5      	lsls	r5, r4
 80196ee:	1d6a      	adds	r2, r5, #5
 80196f0:	0030      	movs	r0, r6
 80196f2:	0092      	lsls	r2, r2, #2
 80196f4:	f000 ffb4 	bl	801a660 <_calloc_r>
 80196f8:	2800      	cmp	r0, #0
 80196fa:	d00c      	beq.n	8019716 <_Balloc+0x6e>
 80196fc:	6044      	str	r4, [r0, #4]
 80196fe:	6085      	str	r5, [r0, #8]
 8019700:	e00d      	b.n	801971e <_Balloc+0x76>
 8019702:	2221      	movs	r2, #33	@ 0x21
 8019704:	2104      	movs	r1, #4
 8019706:	0030      	movs	r0, r6
 8019708:	f000 ffaa 	bl	801a660 <_calloc_r>
 801970c:	69f3      	ldr	r3, [r6, #28]
 801970e:	60e8      	str	r0, [r5, #12]
 8019710:	68db      	ldr	r3, [r3, #12]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d1e1      	bne.n	80196da <_Balloc+0x32>
 8019716:	2000      	movs	r0, #0
 8019718:	bd70      	pop	{r4, r5, r6, pc}
 801971a:	6802      	ldr	r2, [r0, #0]
 801971c:	601a      	str	r2, [r3, #0]
 801971e:	2300      	movs	r3, #0
 8019720:	6103      	str	r3, [r0, #16]
 8019722:	60c3      	str	r3, [r0, #12]
 8019724:	e7f8      	b.n	8019718 <_Balloc+0x70>
 8019726:	46c0      	nop			@ (mov r8, r8)
 8019728:	0801c3b5 	.word	0x0801c3b5
 801972c:	0801c435 	.word	0x0801c435

08019730 <_Bfree>:
 8019730:	b570      	push	{r4, r5, r6, lr}
 8019732:	69c6      	ldr	r6, [r0, #28]
 8019734:	0005      	movs	r5, r0
 8019736:	000c      	movs	r4, r1
 8019738:	2e00      	cmp	r6, #0
 801973a:	d10e      	bne.n	801975a <_Bfree+0x2a>
 801973c:	2010      	movs	r0, #16
 801973e:	f7ff fef7 	bl	8019530 <malloc>
 8019742:	1e02      	subs	r2, r0, #0
 8019744:	61e8      	str	r0, [r5, #28]
 8019746:	d104      	bne.n	8019752 <_Bfree+0x22>
 8019748:	218f      	movs	r1, #143	@ 0x8f
 801974a:	4b09      	ldr	r3, [pc, #36]	@ (8019770 <_Bfree+0x40>)
 801974c:	4809      	ldr	r0, [pc, #36]	@ (8019774 <_Bfree+0x44>)
 801974e:	f000 ff69 	bl	801a624 <__assert_func>
 8019752:	6046      	str	r6, [r0, #4]
 8019754:	6086      	str	r6, [r0, #8]
 8019756:	6006      	str	r6, [r0, #0]
 8019758:	60c6      	str	r6, [r0, #12]
 801975a:	2c00      	cmp	r4, #0
 801975c:	d007      	beq.n	801976e <_Bfree+0x3e>
 801975e:	69eb      	ldr	r3, [r5, #28]
 8019760:	6862      	ldr	r2, [r4, #4]
 8019762:	68db      	ldr	r3, [r3, #12]
 8019764:	0092      	lsls	r2, r2, #2
 8019766:	189b      	adds	r3, r3, r2
 8019768:	681a      	ldr	r2, [r3, #0]
 801976a:	6022      	str	r2, [r4, #0]
 801976c:	601c      	str	r4, [r3, #0]
 801976e:	bd70      	pop	{r4, r5, r6, pc}
 8019770:	0801c3b5 	.word	0x0801c3b5
 8019774:	0801c435 	.word	0x0801c435

08019778 <__multadd>:
 8019778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801977a:	000f      	movs	r7, r1
 801977c:	9001      	str	r0, [sp, #4]
 801977e:	000c      	movs	r4, r1
 8019780:	001e      	movs	r6, r3
 8019782:	2000      	movs	r0, #0
 8019784:	690d      	ldr	r5, [r1, #16]
 8019786:	3714      	adds	r7, #20
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	3001      	adds	r0, #1
 801978c:	b299      	uxth	r1, r3
 801978e:	4351      	muls	r1, r2
 8019790:	0c1b      	lsrs	r3, r3, #16
 8019792:	4353      	muls	r3, r2
 8019794:	1989      	adds	r1, r1, r6
 8019796:	0c0e      	lsrs	r6, r1, #16
 8019798:	199b      	adds	r3, r3, r6
 801979a:	0c1e      	lsrs	r6, r3, #16
 801979c:	b289      	uxth	r1, r1
 801979e:	041b      	lsls	r3, r3, #16
 80197a0:	185b      	adds	r3, r3, r1
 80197a2:	c708      	stmia	r7!, {r3}
 80197a4:	4285      	cmp	r5, r0
 80197a6:	dcef      	bgt.n	8019788 <__multadd+0x10>
 80197a8:	2e00      	cmp	r6, #0
 80197aa:	d022      	beq.n	80197f2 <__multadd+0x7a>
 80197ac:	68a3      	ldr	r3, [r4, #8]
 80197ae:	42ab      	cmp	r3, r5
 80197b0:	dc19      	bgt.n	80197e6 <__multadd+0x6e>
 80197b2:	6861      	ldr	r1, [r4, #4]
 80197b4:	9801      	ldr	r0, [sp, #4]
 80197b6:	3101      	adds	r1, #1
 80197b8:	f7ff ff76 	bl	80196a8 <_Balloc>
 80197bc:	1e07      	subs	r7, r0, #0
 80197be:	d105      	bne.n	80197cc <__multadd+0x54>
 80197c0:	003a      	movs	r2, r7
 80197c2:	21ba      	movs	r1, #186	@ 0xba
 80197c4:	4b0c      	ldr	r3, [pc, #48]	@ (80197f8 <__multadd+0x80>)
 80197c6:	480d      	ldr	r0, [pc, #52]	@ (80197fc <__multadd+0x84>)
 80197c8:	f000 ff2c 	bl	801a624 <__assert_func>
 80197cc:	0021      	movs	r1, r4
 80197ce:	6922      	ldr	r2, [r4, #16]
 80197d0:	310c      	adds	r1, #12
 80197d2:	3202      	adds	r2, #2
 80197d4:	0092      	lsls	r2, r2, #2
 80197d6:	300c      	adds	r0, #12
 80197d8:	f7fe ffd4 	bl	8018784 <memcpy>
 80197dc:	0021      	movs	r1, r4
 80197de:	9801      	ldr	r0, [sp, #4]
 80197e0:	f7ff ffa6 	bl	8019730 <_Bfree>
 80197e4:	003c      	movs	r4, r7
 80197e6:	1d2b      	adds	r3, r5, #4
 80197e8:	009b      	lsls	r3, r3, #2
 80197ea:	18e3      	adds	r3, r4, r3
 80197ec:	3501      	adds	r5, #1
 80197ee:	605e      	str	r6, [r3, #4]
 80197f0:	6125      	str	r5, [r4, #16]
 80197f2:	0020      	movs	r0, r4
 80197f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80197f6:	46c0      	nop			@ (mov r8, r8)
 80197f8:	0801c424 	.word	0x0801c424
 80197fc:	0801c435 	.word	0x0801c435

08019800 <__hi0bits>:
 8019800:	2280      	movs	r2, #128	@ 0x80
 8019802:	0003      	movs	r3, r0
 8019804:	0252      	lsls	r2, r2, #9
 8019806:	2000      	movs	r0, #0
 8019808:	4293      	cmp	r3, r2
 801980a:	d201      	bcs.n	8019810 <__hi0bits+0x10>
 801980c:	041b      	lsls	r3, r3, #16
 801980e:	3010      	adds	r0, #16
 8019810:	2280      	movs	r2, #128	@ 0x80
 8019812:	0452      	lsls	r2, r2, #17
 8019814:	4293      	cmp	r3, r2
 8019816:	d201      	bcs.n	801981c <__hi0bits+0x1c>
 8019818:	3008      	adds	r0, #8
 801981a:	021b      	lsls	r3, r3, #8
 801981c:	2280      	movs	r2, #128	@ 0x80
 801981e:	0552      	lsls	r2, r2, #21
 8019820:	4293      	cmp	r3, r2
 8019822:	d201      	bcs.n	8019828 <__hi0bits+0x28>
 8019824:	3004      	adds	r0, #4
 8019826:	011b      	lsls	r3, r3, #4
 8019828:	2280      	movs	r2, #128	@ 0x80
 801982a:	05d2      	lsls	r2, r2, #23
 801982c:	4293      	cmp	r3, r2
 801982e:	d201      	bcs.n	8019834 <__hi0bits+0x34>
 8019830:	3002      	adds	r0, #2
 8019832:	009b      	lsls	r3, r3, #2
 8019834:	2b00      	cmp	r3, #0
 8019836:	db03      	blt.n	8019840 <__hi0bits+0x40>
 8019838:	3001      	adds	r0, #1
 801983a:	4213      	tst	r3, r2
 801983c:	d100      	bne.n	8019840 <__hi0bits+0x40>
 801983e:	2020      	movs	r0, #32
 8019840:	4770      	bx	lr

08019842 <__lo0bits>:
 8019842:	6803      	ldr	r3, [r0, #0]
 8019844:	0001      	movs	r1, r0
 8019846:	2207      	movs	r2, #7
 8019848:	0018      	movs	r0, r3
 801984a:	4010      	ands	r0, r2
 801984c:	4213      	tst	r3, r2
 801984e:	d00d      	beq.n	801986c <__lo0bits+0x2a>
 8019850:	3a06      	subs	r2, #6
 8019852:	2000      	movs	r0, #0
 8019854:	4213      	tst	r3, r2
 8019856:	d105      	bne.n	8019864 <__lo0bits+0x22>
 8019858:	3002      	adds	r0, #2
 801985a:	4203      	tst	r3, r0
 801985c:	d003      	beq.n	8019866 <__lo0bits+0x24>
 801985e:	40d3      	lsrs	r3, r2
 8019860:	0010      	movs	r0, r2
 8019862:	600b      	str	r3, [r1, #0]
 8019864:	4770      	bx	lr
 8019866:	089b      	lsrs	r3, r3, #2
 8019868:	600b      	str	r3, [r1, #0]
 801986a:	e7fb      	b.n	8019864 <__lo0bits+0x22>
 801986c:	b29a      	uxth	r2, r3
 801986e:	2a00      	cmp	r2, #0
 8019870:	d101      	bne.n	8019876 <__lo0bits+0x34>
 8019872:	2010      	movs	r0, #16
 8019874:	0c1b      	lsrs	r3, r3, #16
 8019876:	b2da      	uxtb	r2, r3
 8019878:	2a00      	cmp	r2, #0
 801987a:	d101      	bne.n	8019880 <__lo0bits+0x3e>
 801987c:	3008      	adds	r0, #8
 801987e:	0a1b      	lsrs	r3, r3, #8
 8019880:	071a      	lsls	r2, r3, #28
 8019882:	d101      	bne.n	8019888 <__lo0bits+0x46>
 8019884:	3004      	adds	r0, #4
 8019886:	091b      	lsrs	r3, r3, #4
 8019888:	079a      	lsls	r2, r3, #30
 801988a:	d101      	bne.n	8019890 <__lo0bits+0x4e>
 801988c:	3002      	adds	r0, #2
 801988e:	089b      	lsrs	r3, r3, #2
 8019890:	07da      	lsls	r2, r3, #31
 8019892:	d4e9      	bmi.n	8019868 <__lo0bits+0x26>
 8019894:	3001      	adds	r0, #1
 8019896:	085b      	lsrs	r3, r3, #1
 8019898:	d1e6      	bne.n	8019868 <__lo0bits+0x26>
 801989a:	2020      	movs	r0, #32
 801989c:	e7e2      	b.n	8019864 <__lo0bits+0x22>
	...

080198a0 <__i2b>:
 80198a0:	b510      	push	{r4, lr}
 80198a2:	000c      	movs	r4, r1
 80198a4:	2101      	movs	r1, #1
 80198a6:	f7ff feff 	bl	80196a8 <_Balloc>
 80198aa:	2800      	cmp	r0, #0
 80198ac:	d107      	bne.n	80198be <__i2b+0x1e>
 80198ae:	2146      	movs	r1, #70	@ 0x46
 80198b0:	4c05      	ldr	r4, [pc, #20]	@ (80198c8 <__i2b+0x28>)
 80198b2:	0002      	movs	r2, r0
 80198b4:	4b05      	ldr	r3, [pc, #20]	@ (80198cc <__i2b+0x2c>)
 80198b6:	0020      	movs	r0, r4
 80198b8:	31ff      	adds	r1, #255	@ 0xff
 80198ba:	f000 feb3 	bl	801a624 <__assert_func>
 80198be:	2301      	movs	r3, #1
 80198c0:	6144      	str	r4, [r0, #20]
 80198c2:	6103      	str	r3, [r0, #16]
 80198c4:	bd10      	pop	{r4, pc}
 80198c6:	46c0      	nop			@ (mov r8, r8)
 80198c8:	0801c435 	.word	0x0801c435
 80198cc:	0801c424 	.word	0x0801c424

080198d0 <__multiply>:
 80198d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198d2:	0014      	movs	r4, r2
 80198d4:	690a      	ldr	r2, [r1, #16]
 80198d6:	6923      	ldr	r3, [r4, #16]
 80198d8:	000d      	movs	r5, r1
 80198da:	b08b      	sub	sp, #44	@ 0x2c
 80198dc:	429a      	cmp	r2, r3
 80198de:	db02      	blt.n	80198e6 <__multiply+0x16>
 80198e0:	0023      	movs	r3, r4
 80198e2:	000c      	movs	r4, r1
 80198e4:	001d      	movs	r5, r3
 80198e6:	6927      	ldr	r7, [r4, #16]
 80198e8:	692e      	ldr	r6, [r5, #16]
 80198ea:	6861      	ldr	r1, [r4, #4]
 80198ec:	19bb      	adds	r3, r7, r6
 80198ee:	9303      	str	r3, [sp, #12]
 80198f0:	68a3      	ldr	r3, [r4, #8]
 80198f2:	19ba      	adds	r2, r7, r6
 80198f4:	4293      	cmp	r3, r2
 80198f6:	da00      	bge.n	80198fa <__multiply+0x2a>
 80198f8:	3101      	adds	r1, #1
 80198fa:	f7ff fed5 	bl	80196a8 <_Balloc>
 80198fe:	9002      	str	r0, [sp, #8]
 8019900:	2800      	cmp	r0, #0
 8019902:	d106      	bne.n	8019912 <__multiply+0x42>
 8019904:	21b1      	movs	r1, #177	@ 0xb1
 8019906:	4b49      	ldr	r3, [pc, #292]	@ (8019a2c <__multiply+0x15c>)
 8019908:	4849      	ldr	r0, [pc, #292]	@ (8019a30 <__multiply+0x160>)
 801990a:	9a02      	ldr	r2, [sp, #8]
 801990c:	0049      	lsls	r1, r1, #1
 801990e:	f000 fe89 	bl	801a624 <__assert_func>
 8019912:	9b02      	ldr	r3, [sp, #8]
 8019914:	2200      	movs	r2, #0
 8019916:	3314      	adds	r3, #20
 8019918:	469c      	mov	ip, r3
 801991a:	19bb      	adds	r3, r7, r6
 801991c:	009b      	lsls	r3, r3, #2
 801991e:	4463      	add	r3, ip
 8019920:	9304      	str	r3, [sp, #16]
 8019922:	4663      	mov	r3, ip
 8019924:	9904      	ldr	r1, [sp, #16]
 8019926:	428b      	cmp	r3, r1
 8019928:	d32a      	bcc.n	8019980 <__multiply+0xb0>
 801992a:	0023      	movs	r3, r4
 801992c:	00bf      	lsls	r7, r7, #2
 801992e:	3314      	adds	r3, #20
 8019930:	3514      	adds	r5, #20
 8019932:	9308      	str	r3, [sp, #32]
 8019934:	00b6      	lsls	r6, r6, #2
 8019936:	19db      	adds	r3, r3, r7
 8019938:	9305      	str	r3, [sp, #20]
 801993a:	19ab      	adds	r3, r5, r6
 801993c:	9309      	str	r3, [sp, #36]	@ 0x24
 801993e:	2304      	movs	r3, #4
 8019940:	9306      	str	r3, [sp, #24]
 8019942:	0023      	movs	r3, r4
 8019944:	9a05      	ldr	r2, [sp, #20]
 8019946:	3315      	adds	r3, #21
 8019948:	9501      	str	r5, [sp, #4]
 801994a:	429a      	cmp	r2, r3
 801994c:	d305      	bcc.n	801995a <__multiply+0x8a>
 801994e:	1b13      	subs	r3, r2, r4
 8019950:	3b15      	subs	r3, #21
 8019952:	089b      	lsrs	r3, r3, #2
 8019954:	3301      	adds	r3, #1
 8019956:	009b      	lsls	r3, r3, #2
 8019958:	9306      	str	r3, [sp, #24]
 801995a:	9b01      	ldr	r3, [sp, #4]
 801995c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801995e:	4293      	cmp	r3, r2
 8019960:	d310      	bcc.n	8019984 <__multiply+0xb4>
 8019962:	9b03      	ldr	r3, [sp, #12]
 8019964:	2b00      	cmp	r3, #0
 8019966:	dd05      	ble.n	8019974 <__multiply+0xa4>
 8019968:	9b04      	ldr	r3, [sp, #16]
 801996a:	3b04      	subs	r3, #4
 801996c:	9304      	str	r3, [sp, #16]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d056      	beq.n	8019a22 <__multiply+0x152>
 8019974:	9b02      	ldr	r3, [sp, #8]
 8019976:	9a03      	ldr	r2, [sp, #12]
 8019978:	0018      	movs	r0, r3
 801997a:	611a      	str	r2, [r3, #16]
 801997c:	b00b      	add	sp, #44	@ 0x2c
 801997e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019980:	c304      	stmia	r3!, {r2}
 8019982:	e7cf      	b.n	8019924 <__multiply+0x54>
 8019984:	9b01      	ldr	r3, [sp, #4]
 8019986:	6818      	ldr	r0, [r3, #0]
 8019988:	b280      	uxth	r0, r0
 801998a:	2800      	cmp	r0, #0
 801998c:	d01e      	beq.n	80199cc <__multiply+0xfc>
 801998e:	4667      	mov	r7, ip
 8019990:	2500      	movs	r5, #0
 8019992:	9e08      	ldr	r6, [sp, #32]
 8019994:	ce02      	ldmia	r6!, {r1}
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	9307      	str	r3, [sp, #28]
 801999a:	b28b      	uxth	r3, r1
 801999c:	4343      	muls	r3, r0
 801999e:	001a      	movs	r2, r3
 80199a0:	466b      	mov	r3, sp
 80199a2:	0c09      	lsrs	r1, r1, #16
 80199a4:	8b9b      	ldrh	r3, [r3, #28]
 80199a6:	4341      	muls	r1, r0
 80199a8:	18d3      	adds	r3, r2, r3
 80199aa:	9a07      	ldr	r2, [sp, #28]
 80199ac:	195b      	adds	r3, r3, r5
 80199ae:	0c12      	lsrs	r2, r2, #16
 80199b0:	1889      	adds	r1, r1, r2
 80199b2:	0c1a      	lsrs	r2, r3, #16
 80199b4:	188a      	adds	r2, r1, r2
 80199b6:	b29b      	uxth	r3, r3
 80199b8:	0c15      	lsrs	r5, r2, #16
 80199ba:	0412      	lsls	r2, r2, #16
 80199bc:	431a      	orrs	r2, r3
 80199be:	9b05      	ldr	r3, [sp, #20]
 80199c0:	c704      	stmia	r7!, {r2}
 80199c2:	42b3      	cmp	r3, r6
 80199c4:	d8e6      	bhi.n	8019994 <__multiply+0xc4>
 80199c6:	4663      	mov	r3, ip
 80199c8:	9a06      	ldr	r2, [sp, #24]
 80199ca:	509d      	str	r5, [r3, r2]
 80199cc:	9b01      	ldr	r3, [sp, #4]
 80199ce:	6818      	ldr	r0, [r3, #0]
 80199d0:	0c00      	lsrs	r0, r0, #16
 80199d2:	d020      	beq.n	8019a16 <__multiply+0x146>
 80199d4:	4663      	mov	r3, ip
 80199d6:	0025      	movs	r5, r4
 80199d8:	4661      	mov	r1, ip
 80199da:	2700      	movs	r7, #0
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	3514      	adds	r5, #20
 80199e0:	682a      	ldr	r2, [r5, #0]
 80199e2:	680e      	ldr	r6, [r1, #0]
 80199e4:	b292      	uxth	r2, r2
 80199e6:	4342      	muls	r2, r0
 80199e8:	0c36      	lsrs	r6, r6, #16
 80199ea:	1992      	adds	r2, r2, r6
 80199ec:	19d2      	adds	r2, r2, r7
 80199ee:	0416      	lsls	r6, r2, #16
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	431e      	orrs	r6, r3
 80199f4:	600e      	str	r6, [r1, #0]
 80199f6:	cd40      	ldmia	r5!, {r6}
 80199f8:	684b      	ldr	r3, [r1, #4]
 80199fa:	0c36      	lsrs	r6, r6, #16
 80199fc:	4346      	muls	r6, r0
 80199fe:	b29b      	uxth	r3, r3
 8019a00:	0c12      	lsrs	r2, r2, #16
 8019a02:	18f3      	adds	r3, r6, r3
 8019a04:	189b      	adds	r3, r3, r2
 8019a06:	9a05      	ldr	r2, [sp, #20]
 8019a08:	0c1f      	lsrs	r7, r3, #16
 8019a0a:	3104      	adds	r1, #4
 8019a0c:	42aa      	cmp	r2, r5
 8019a0e:	d8e7      	bhi.n	80199e0 <__multiply+0x110>
 8019a10:	4662      	mov	r2, ip
 8019a12:	9906      	ldr	r1, [sp, #24]
 8019a14:	5053      	str	r3, [r2, r1]
 8019a16:	9b01      	ldr	r3, [sp, #4]
 8019a18:	3304      	adds	r3, #4
 8019a1a:	9301      	str	r3, [sp, #4]
 8019a1c:	2304      	movs	r3, #4
 8019a1e:	449c      	add	ip, r3
 8019a20:	e79b      	b.n	801995a <__multiply+0x8a>
 8019a22:	9b03      	ldr	r3, [sp, #12]
 8019a24:	3b01      	subs	r3, #1
 8019a26:	9303      	str	r3, [sp, #12]
 8019a28:	e79b      	b.n	8019962 <__multiply+0x92>
 8019a2a:	46c0      	nop			@ (mov r8, r8)
 8019a2c:	0801c424 	.word	0x0801c424
 8019a30:	0801c435 	.word	0x0801c435

08019a34 <__pow5mult>:
 8019a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019a36:	2303      	movs	r3, #3
 8019a38:	0015      	movs	r5, r2
 8019a3a:	0007      	movs	r7, r0
 8019a3c:	000e      	movs	r6, r1
 8019a3e:	401a      	ands	r2, r3
 8019a40:	421d      	tst	r5, r3
 8019a42:	d008      	beq.n	8019a56 <__pow5mult+0x22>
 8019a44:	4925      	ldr	r1, [pc, #148]	@ (8019adc <__pow5mult+0xa8>)
 8019a46:	3a01      	subs	r2, #1
 8019a48:	0092      	lsls	r2, r2, #2
 8019a4a:	5852      	ldr	r2, [r2, r1]
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	0031      	movs	r1, r6
 8019a50:	f7ff fe92 	bl	8019778 <__multadd>
 8019a54:	0006      	movs	r6, r0
 8019a56:	10ad      	asrs	r5, r5, #2
 8019a58:	d03d      	beq.n	8019ad6 <__pow5mult+0xa2>
 8019a5a:	69fc      	ldr	r4, [r7, #28]
 8019a5c:	2c00      	cmp	r4, #0
 8019a5e:	d10f      	bne.n	8019a80 <__pow5mult+0x4c>
 8019a60:	2010      	movs	r0, #16
 8019a62:	f7ff fd65 	bl	8019530 <malloc>
 8019a66:	1e02      	subs	r2, r0, #0
 8019a68:	61f8      	str	r0, [r7, #28]
 8019a6a:	d105      	bne.n	8019a78 <__pow5mult+0x44>
 8019a6c:	21b4      	movs	r1, #180	@ 0xb4
 8019a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8019ae0 <__pow5mult+0xac>)
 8019a70:	481c      	ldr	r0, [pc, #112]	@ (8019ae4 <__pow5mult+0xb0>)
 8019a72:	31ff      	adds	r1, #255	@ 0xff
 8019a74:	f000 fdd6 	bl	801a624 <__assert_func>
 8019a78:	6044      	str	r4, [r0, #4]
 8019a7a:	6084      	str	r4, [r0, #8]
 8019a7c:	6004      	str	r4, [r0, #0]
 8019a7e:	60c4      	str	r4, [r0, #12]
 8019a80:	69fb      	ldr	r3, [r7, #28]
 8019a82:	689c      	ldr	r4, [r3, #8]
 8019a84:	9301      	str	r3, [sp, #4]
 8019a86:	2c00      	cmp	r4, #0
 8019a88:	d108      	bne.n	8019a9c <__pow5mult+0x68>
 8019a8a:	0038      	movs	r0, r7
 8019a8c:	4916      	ldr	r1, [pc, #88]	@ (8019ae8 <__pow5mult+0xb4>)
 8019a8e:	f7ff ff07 	bl	80198a0 <__i2b>
 8019a92:	9b01      	ldr	r3, [sp, #4]
 8019a94:	0004      	movs	r4, r0
 8019a96:	6098      	str	r0, [r3, #8]
 8019a98:	2300      	movs	r3, #0
 8019a9a:	6003      	str	r3, [r0, #0]
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	421d      	tst	r5, r3
 8019aa0:	d00a      	beq.n	8019ab8 <__pow5mult+0x84>
 8019aa2:	0031      	movs	r1, r6
 8019aa4:	0022      	movs	r2, r4
 8019aa6:	0038      	movs	r0, r7
 8019aa8:	f7ff ff12 	bl	80198d0 <__multiply>
 8019aac:	0031      	movs	r1, r6
 8019aae:	9001      	str	r0, [sp, #4]
 8019ab0:	0038      	movs	r0, r7
 8019ab2:	f7ff fe3d 	bl	8019730 <_Bfree>
 8019ab6:	9e01      	ldr	r6, [sp, #4]
 8019ab8:	106d      	asrs	r5, r5, #1
 8019aba:	d00c      	beq.n	8019ad6 <__pow5mult+0xa2>
 8019abc:	6820      	ldr	r0, [r4, #0]
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	d107      	bne.n	8019ad2 <__pow5mult+0x9e>
 8019ac2:	0022      	movs	r2, r4
 8019ac4:	0021      	movs	r1, r4
 8019ac6:	0038      	movs	r0, r7
 8019ac8:	f7ff ff02 	bl	80198d0 <__multiply>
 8019acc:	2300      	movs	r3, #0
 8019ace:	6020      	str	r0, [r4, #0]
 8019ad0:	6003      	str	r3, [r0, #0]
 8019ad2:	0004      	movs	r4, r0
 8019ad4:	e7e2      	b.n	8019a9c <__pow5mult+0x68>
 8019ad6:	0030      	movs	r0, r6
 8019ad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019ada:	46c0      	nop			@ (mov r8, r8)
 8019adc:	0801c490 	.word	0x0801c490
 8019ae0:	0801c3b5 	.word	0x0801c3b5
 8019ae4:	0801c435 	.word	0x0801c435
 8019ae8:	00000271 	.word	0x00000271

08019aec <__lshift>:
 8019aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019aee:	000c      	movs	r4, r1
 8019af0:	0016      	movs	r6, r2
 8019af2:	6923      	ldr	r3, [r4, #16]
 8019af4:	1157      	asrs	r7, r2, #5
 8019af6:	b085      	sub	sp, #20
 8019af8:	18fb      	adds	r3, r7, r3
 8019afa:	9301      	str	r3, [sp, #4]
 8019afc:	3301      	adds	r3, #1
 8019afe:	9300      	str	r3, [sp, #0]
 8019b00:	6849      	ldr	r1, [r1, #4]
 8019b02:	68a3      	ldr	r3, [r4, #8]
 8019b04:	9002      	str	r0, [sp, #8]
 8019b06:	9a00      	ldr	r2, [sp, #0]
 8019b08:	4293      	cmp	r3, r2
 8019b0a:	db10      	blt.n	8019b2e <__lshift+0x42>
 8019b0c:	9802      	ldr	r0, [sp, #8]
 8019b0e:	f7ff fdcb 	bl	80196a8 <_Balloc>
 8019b12:	2300      	movs	r3, #0
 8019b14:	0001      	movs	r1, r0
 8019b16:	0005      	movs	r5, r0
 8019b18:	001a      	movs	r2, r3
 8019b1a:	3114      	adds	r1, #20
 8019b1c:	4298      	cmp	r0, r3
 8019b1e:	d10c      	bne.n	8019b3a <__lshift+0x4e>
 8019b20:	21ef      	movs	r1, #239	@ 0xef
 8019b22:	002a      	movs	r2, r5
 8019b24:	4b25      	ldr	r3, [pc, #148]	@ (8019bbc <__lshift+0xd0>)
 8019b26:	4826      	ldr	r0, [pc, #152]	@ (8019bc0 <__lshift+0xd4>)
 8019b28:	0049      	lsls	r1, r1, #1
 8019b2a:	f000 fd7b 	bl	801a624 <__assert_func>
 8019b2e:	3101      	adds	r1, #1
 8019b30:	005b      	lsls	r3, r3, #1
 8019b32:	e7e8      	b.n	8019b06 <__lshift+0x1a>
 8019b34:	0098      	lsls	r0, r3, #2
 8019b36:	500a      	str	r2, [r1, r0]
 8019b38:	3301      	adds	r3, #1
 8019b3a:	42bb      	cmp	r3, r7
 8019b3c:	dbfa      	blt.n	8019b34 <__lshift+0x48>
 8019b3e:	43fb      	mvns	r3, r7
 8019b40:	17db      	asrs	r3, r3, #31
 8019b42:	401f      	ands	r7, r3
 8019b44:	00bf      	lsls	r7, r7, #2
 8019b46:	0023      	movs	r3, r4
 8019b48:	201f      	movs	r0, #31
 8019b4a:	19c9      	adds	r1, r1, r7
 8019b4c:	0037      	movs	r7, r6
 8019b4e:	6922      	ldr	r2, [r4, #16]
 8019b50:	3314      	adds	r3, #20
 8019b52:	0092      	lsls	r2, r2, #2
 8019b54:	189a      	adds	r2, r3, r2
 8019b56:	4007      	ands	r7, r0
 8019b58:	4206      	tst	r6, r0
 8019b5a:	d029      	beq.n	8019bb0 <__lshift+0xc4>
 8019b5c:	3001      	adds	r0, #1
 8019b5e:	1bc0      	subs	r0, r0, r7
 8019b60:	9003      	str	r0, [sp, #12]
 8019b62:	468c      	mov	ip, r1
 8019b64:	2000      	movs	r0, #0
 8019b66:	681e      	ldr	r6, [r3, #0]
 8019b68:	40be      	lsls	r6, r7
 8019b6a:	4306      	orrs	r6, r0
 8019b6c:	4660      	mov	r0, ip
 8019b6e:	c040      	stmia	r0!, {r6}
 8019b70:	4684      	mov	ip, r0
 8019b72:	9e03      	ldr	r6, [sp, #12]
 8019b74:	cb01      	ldmia	r3!, {r0}
 8019b76:	40f0      	lsrs	r0, r6
 8019b78:	429a      	cmp	r2, r3
 8019b7a:	d8f4      	bhi.n	8019b66 <__lshift+0x7a>
 8019b7c:	0026      	movs	r6, r4
 8019b7e:	3615      	adds	r6, #21
 8019b80:	2304      	movs	r3, #4
 8019b82:	42b2      	cmp	r2, r6
 8019b84:	d304      	bcc.n	8019b90 <__lshift+0xa4>
 8019b86:	1b13      	subs	r3, r2, r4
 8019b88:	3b15      	subs	r3, #21
 8019b8a:	089b      	lsrs	r3, r3, #2
 8019b8c:	3301      	adds	r3, #1
 8019b8e:	009b      	lsls	r3, r3, #2
 8019b90:	50c8      	str	r0, [r1, r3]
 8019b92:	2800      	cmp	r0, #0
 8019b94:	d002      	beq.n	8019b9c <__lshift+0xb0>
 8019b96:	9b01      	ldr	r3, [sp, #4]
 8019b98:	3302      	adds	r3, #2
 8019b9a:	9300      	str	r3, [sp, #0]
 8019b9c:	9b00      	ldr	r3, [sp, #0]
 8019b9e:	9802      	ldr	r0, [sp, #8]
 8019ba0:	3b01      	subs	r3, #1
 8019ba2:	0021      	movs	r1, r4
 8019ba4:	612b      	str	r3, [r5, #16]
 8019ba6:	f7ff fdc3 	bl	8019730 <_Bfree>
 8019baa:	0028      	movs	r0, r5
 8019bac:	b005      	add	sp, #20
 8019bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bb0:	cb01      	ldmia	r3!, {r0}
 8019bb2:	c101      	stmia	r1!, {r0}
 8019bb4:	429a      	cmp	r2, r3
 8019bb6:	d8fb      	bhi.n	8019bb0 <__lshift+0xc4>
 8019bb8:	e7f0      	b.n	8019b9c <__lshift+0xb0>
 8019bba:	46c0      	nop			@ (mov r8, r8)
 8019bbc:	0801c424 	.word	0x0801c424
 8019bc0:	0801c435 	.word	0x0801c435

08019bc4 <__mcmp>:
 8019bc4:	b530      	push	{r4, r5, lr}
 8019bc6:	690b      	ldr	r3, [r1, #16]
 8019bc8:	6904      	ldr	r4, [r0, #16]
 8019bca:	0002      	movs	r2, r0
 8019bcc:	1ae0      	subs	r0, r4, r3
 8019bce:	429c      	cmp	r4, r3
 8019bd0:	d10f      	bne.n	8019bf2 <__mcmp+0x2e>
 8019bd2:	3214      	adds	r2, #20
 8019bd4:	009b      	lsls	r3, r3, #2
 8019bd6:	3114      	adds	r1, #20
 8019bd8:	0014      	movs	r4, r2
 8019bda:	18c9      	adds	r1, r1, r3
 8019bdc:	18d2      	adds	r2, r2, r3
 8019bde:	3a04      	subs	r2, #4
 8019be0:	3904      	subs	r1, #4
 8019be2:	6815      	ldr	r5, [r2, #0]
 8019be4:	680b      	ldr	r3, [r1, #0]
 8019be6:	429d      	cmp	r5, r3
 8019be8:	d004      	beq.n	8019bf4 <__mcmp+0x30>
 8019bea:	2001      	movs	r0, #1
 8019bec:	429d      	cmp	r5, r3
 8019bee:	d200      	bcs.n	8019bf2 <__mcmp+0x2e>
 8019bf0:	3802      	subs	r0, #2
 8019bf2:	bd30      	pop	{r4, r5, pc}
 8019bf4:	4294      	cmp	r4, r2
 8019bf6:	d3f2      	bcc.n	8019bde <__mcmp+0x1a>
 8019bf8:	e7fb      	b.n	8019bf2 <__mcmp+0x2e>
	...

08019bfc <__mdiff>:
 8019bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bfe:	000c      	movs	r4, r1
 8019c00:	b087      	sub	sp, #28
 8019c02:	9000      	str	r0, [sp, #0]
 8019c04:	0011      	movs	r1, r2
 8019c06:	0020      	movs	r0, r4
 8019c08:	0017      	movs	r7, r2
 8019c0a:	f7ff ffdb 	bl	8019bc4 <__mcmp>
 8019c0e:	1e05      	subs	r5, r0, #0
 8019c10:	d110      	bne.n	8019c34 <__mdiff+0x38>
 8019c12:	0001      	movs	r1, r0
 8019c14:	9800      	ldr	r0, [sp, #0]
 8019c16:	f7ff fd47 	bl	80196a8 <_Balloc>
 8019c1a:	1e02      	subs	r2, r0, #0
 8019c1c:	d104      	bne.n	8019c28 <__mdiff+0x2c>
 8019c1e:	4b40      	ldr	r3, [pc, #256]	@ (8019d20 <__mdiff+0x124>)
 8019c20:	4840      	ldr	r0, [pc, #256]	@ (8019d24 <__mdiff+0x128>)
 8019c22:	4941      	ldr	r1, [pc, #260]	@ (8019d28 <__mdiff+0x12c>)
 8019c24:	f000 fcfe 	bl	801a624 <__assert_func>
 8019c28:	2301      	movs	r3, #1
 8019c2a:	6145      	str	r5, [r0, #20]
 8019c2c:	6103      	str	r3, [r0, #16]
 8019c2e:	0010      	movs	r0, r2
 8019c30:	b007      	add	sp, #28
 8019c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c34:	2600      	movs	r6, #0
 8019c36:	42b0      	cmp	r0, r6
 8019c38:	da03      	bge.n	8019c42 <__mdiff+0x46>
 8019c3a:	0023      	movs	r3, r4
 8019c3c:	003c      	movs	r4, r7
 8019c3e:	001f      	movs	r7, r3
 8019c40:	3601      	adds	r6, #1
 8019c42:	6861      	ldr	r1, [r4, #4]
 8019c44:	9800      	ldr	r0, [sp, #0]
 8019c46:	f7ff fd2f 	bl	80196a8 <_Balloc>
 8019c4a:	1e02      	subs	r2, r0, #0
 8019c4c:	d103      	bne.n	8019c56 <__mdiff+0x5a>
 8019c4e:	4b34      	ldr	r3, [pc, #208]	@ (8019d20 <__mdiff+0x124>)
 8019c50:	4834      	ldr	r0, [pc, #208]	@ (8019d24 <__mdiff+0x128>)
 8019c52:	4936      	ldr	r1, [pc, #216]	@ (8019d2c <__mdiff+0x130>)
 8019c54:	e7e6      	b.n	8019c24 <__mdiff+0x28>
 8019c56:	6923      	ldr	r3, [r4, #16]
 8019c58:	3414      	adds	r4, #20
 8019c5a:	9300      	str	r3, [sp, #0]
 8019c5c:	009b      	lsls	r3, r3, #2
 8019c5e:	18e3      	adds	r3, r4, r3
 8019c60:	0021      	movs	r1, r4
 8019c62:	9401      	str	r4, [sp, #4]
 8019c64:	003c      	movs	r4, r7
 8019c66:	9302      	str	r3, [sp, #8]
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	3414      	adds	r4, #20
 8019c6c:	009b      	lsls	r3, r3, #2
 8019c6e:	18e3      	adds	r3, r4, r3
 8019c70:	9303      	str	r3, [sp, #12]
 8019c72:	0003      	movs	r3, r0
 8019c74:	60c6      	str	r6, [r0, #12]
 8019c76:	468c      	mov	ip, r1
 8019c78:	2000      	movs	r0, #0
 8019c7a:	3314      	adds	r3, #20
 8019c7c:	9304      	str	r3, [sp, #16]
 8019c7e:	9305      	str	r3, [sp, #20]
 8019c80:	4663      	mov	r3, ip
 8019c82:	cb20      	ldmia	r3!, {r5}
 8019c84:	b2a9      	uxth	r1, r5
 8019c86:	000e      	movs	r6, r1
 8019c88:	469c      	mov	ip, r3
 8019c8a:	cc08      	ldmia	r4!, {r3}
 8019c8c:	0c2d      	lsrs	r5, r5, #16
 8019c8e:	b299      	uxth	r1, r3
 8019c90:	1a71      	subs	r1, r6, r1
 8019c92:	1809      	adds	r1, r1, r0
 8019c94:	0c1b      	lsrs	r3, r3, #16
 8019c96:	1408      	asrs	r0, r1, #16
 8019c98:	1aeb      	subs	r3, r5, r3
 8019c9a:	181b      	adds	r3, r3, r0
 8019c9c:	1418      	asrs	r0, r3, #16
 8019c9e:	b289      	uxth	r1, r1
 8019ca0:	041b      	lsls	r3, r3, #16
 8019ca2:	4319      	orrs	r1, r3
 8019ca4:	9b05      	ldr	r3, [sp, #20]
 8019ca6:	c302      	stmia	r3!, {r1}
 8019ca8:	9305      	str	r3, [sp, #20]
 8019caa:	9b03      	ldr	r3, [sp, #12]
 8019cac:	42a3      	cmp	r3, r4
 8019cae:	d8e7      	bhi.n	8019c80 <__mdiff+0x84>
 8019cb0:	0039      	movs	r1, r7
 8019cb2:	9c03      	ldr	r4, [sp, #12]
 8019cb4:	3115      	adds	r1, #21
 8019cb6:	2304      	movs	r3, #4
 8019cb8:	428c      	cmp	r4, r1
 8019cba:	d304      	bcc.n	8019cc6 <__mdiff+0xca>
 8019cbc:	1be3      	subs	r3, r4, r7
 8019cbe:	3b15      	subs	r3, #21
 8019cc0:	089b      	lsrs	r3, r3, #2
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	009b      	lsls	r3, r3, #2
 8019cc6:	9901      	ldr	r1, [sp, #4]
 8019cc8:	18cd      	adds	r5, r1, r3
 8019cca:	9904      	ldr	r1, [sp, #16]
 8019ccc:	002e      	movs	r6, r5
 8019cce:	18cb      	adds	r3, r1, r3
 8019cd0:	001f      	movs	r7, r3
 8019cd2:	9902      	ldr	r1, [sp, #8]
 8019cd4:	428e      	cmp	r6, r1
 8019cd6:	d311      	bcc.n	8019cfc <__mdiff+0x100>
 8019cd8:	9c02      	ldr	r4, [sp, #8]
 8019cda:	1ee9      	subs	r1, r5, #3
 8019cdc:	2000      	movs	r0, #0
 8019cde:	428c      	cmp	r4, r1
 8019ce0:	d304      	bcc.n	8019cec <__mdiff+0xf0>
 8019ce2:	0021      	movs	r1, r4
 8019ce4:	3103      	adds	r1, #3
 8019ce6:	1b49      	subs	r1, r1, r5
 8019ce8:	0889      	lsrs	r1, r1, #2
 8019cea:	0088      	lsls	r0, r1, #2
 8019cec:	181b      	adds	r3, r3, r0
 8019cee:	3b04      	subs	r3, #4
 8019cf0:	6819      	ldr	r1, [r3, #0]
 8019cf2:	2900      	cmp	r1, #0
 8019cf4:	d010      	beq.n	8019d18 <__mdiff+0x11c>
 8019cf6:	9b00      	ldr	r3, [sp, #0]
 8019cf8:	6113      	str	r3, [r2, #16]
 8019cfa:	e798      	b.n	8019c2e <__mdiff+0x32>
 8019cfc:	4684      	mov	ip, r0
 8019cfe:	ce02      	ldmia	r6!, {r1}
 8019d00:	b288      	uxth	r0, r1
 8019d02:	4460      	add	r0, ip
 8019d04:	1400      	asrs	r0, r0, #16
 8019d06:	0c0c      	lsrs	r4, r1, #16
 8019d08:	1904      	adds	r4, r0, r4
 8019d0a:	4461      	add	r1, ip
 8019d0c:	1420      	asrs	r0, r4, #16
 8019d0e:	b289      	uxth	r1, r1
 8019d10:	0424      	lsls	r4, r4, #16
 8019d12:	4321      	orrs	r1, r4
 8019d14:	c702      	stmia	r7!, {r1}
 8019d16:	e7dc      	b.n	8019cd2 <__mdiff+0xd6>
 8019d18:	9900      	ldr	r1, [sp, #0]
 8019d1a:	3901      	subs	r1, #1
 8019d1c:	9100      	str	r1, [sp, #0]
 8019d1e:	e7e6      	b.n	8019cee <__mdiff+0xf2>
 8019d20:	0801c424 	.word	0x0801c424
 8019d24:	0801c435 	.word	0x0801c435
 8019d28:	00000237 	.word	0x00000237
 8019d2c:	00000245 	.word	0x00000245

08019d30 <__d2b>:
 8019d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d32:	2101      	movs	r1, #1
 8019d34:	0016      	movs	r6, r2
 8019d36:	001f      	movs	r7, r3
 8019d38:	f7ff fcb6 	bl	80196a8 <_Balloc>
 8019d3c:	1e04      	subs	r4, r0, #0
 8019d3e:	d105      	bne.n	8019d4c <__d2b+0x1c>
 8019d40:	0022      	movs	r2, r4
 8019d42:	4b25      	ldr	r3, [pc, #148]	@ (8019dd8 <__d2b+0xa8>)
 8019d44:	4825      	ldr	r0, [pc, #148]	@ (8019ddc <__d2b+0xac>)
 8019d46:	4926      	ldr	r1, [pc, #152]	@ (8019de0 <__d2b+0xb0>)
 8019d48:	f000 fc6c 	bl	801a624 <__assert_func>
 8019d4c:	033b      	lsls	r3, r7, #12
 8019d4e:	007d      	lsls	r5, r7, #1
 8019d50:	0b1b      	lsrs	r3, r3, #12
 8019d52:	0d6d      	lsrs	r5, r5, #21
 8019d54:	d002      	beq.n	8019d5c <__d2b+0x2c>
 8019d56:	2280      	movs	r2, #128	@ 0x80
 8019d58:	0352      	lsls	r2, r2, #13
 8019d5a:	4313      	orrs	r3, r2
 8019d5c:	9301      	str	r3, [sp, #4]
 8019d5e:	2e00      	cmp	r6, #0
 8019d60:	d025      	beq.n	8019dae <__d2b+0x7e>
 8019d62:	4668      	mov	r0, sp
 8019d64:	9600      	str	r6, [sp, #0]
 8019d66:	f7ff fd6c 	bl	8019842 <__lo0bits>
 8019d6a:	9b01      	ldr	r3, [sp, #4]
 8019d6c:	9900      	ldr	r1, [sp, #0]
 8019d6e:	2800      	cmp	r0, #0
 8019d70:	d01b      	beq.n	8019daa <__d2b+0x7a>
 8019d72:	2220      	movs	r2, #32
 8019d74:	001e      	movs	r6, r3
 8019d76:	1a12      	subs	r2, r2, r0
 8019d78:	4096      	lsls	r6, r2
 8019d7a:	0032      	movs	r2, r6
 8019d7c:	40c3      	lsrs	r3, r0
 8019d7e:	430a      	orrs	r2, r1
 8019d80:	6162      	str	r2, [r4, #20]
 8019d82:	9301      	str	r3, [sp, #4]
 8019d84:	9e01      	ldr	r6, [sp, #4]
 8019d86:	61a6      	str	r6, [r4, #24]
 8019d88:	1e73      	subs	r3, r6, #1
 8019d8a:	419e      	sbcs	r6, r3
 8019d8c:	3601      	adds	r6, #1
 8019d8e:	6126      	str	r6, [r4, #16]
 8019d90:	2d00      	cmp	r5, #0
 8019d92:	d014      	beq.n	8019dbe <__d2b+0x8e>
 8019d94:	2635      	movs	r6, #53	@ 0x35
 8019d96:	4b13      	ldr	r3, [pc, #76]	@ (8019de4 <__d2b+0xb4>)
 8019d98:	18ed      	adds	r5, r5, r3
 8019d9a:	9b08      	ldr	r3, [sp, #32]
 8019d9c:	182d      	adds	r5, r5, r0
 8019d9e:	601d      	str	r5, [r3, #0]
 8019da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019da2:	1a36      	subs	r6, r6, r0
 8019da4:	601e      	str	r6, [r3, #0]
 8019da6:	0020      	movs	r0, r4
 8019da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019daa:	6161      	str	r1, [r4, #20]
 8019dac:	e7ea      	b.n	8019d84 <__d2b+0x54>
 8019dae:	a801      	add	r0, sp, #4
 8019db0:	f7ff fd47 	bl	8019842 <__lo0bits>
 8019db4:	9b01      	ldr	r3, [sp, #4]
 8019db6:	2601      	movs	r6, #1
 8019db8:	6163      	str	r3, [r4, #20]
 8019dba:	3020      	adds	r0, #32
 8019dbc:	e7e7      	b.n	8019d8e <__d2b+0x5e>
 8019dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8019de8 <__d2b+0xb8>)
 8019dc0:	18c0      	adds	r0, r0, r3
 8019dc2:	9b08      	ldr	r3, [sp, #32]
 8019dc4:	6018      	str	r0, [r3, #0]
 8019dc6:	4b09      	ldr	r3, [pc, #36]	@ (8019dec <__d2b+0xbc>)
 8019dc8:	18f3      	adds	r3, r6, r3
 8019dca:	009b      	lsls	r3, r3, #2
 8019dcc:	18e3      	adds	r3, r4, r3
 8019dce:	6958      	ldr	r0, [r3, #20]
 8019dd0:	f7ff fd16 	bl	8019800 <__hi0bits>
 8019dd4:	0176      	lsls	r6, r6, #5
 8019dd6:	e7e3      	b.n	8019da0 <__d2b+0x70>
 8019dd8:	0801c424 	.word	0x0801c424
 8019ddc:	0801c435 	.word	0x0801c435
 8019de0:	0000030f 	.word	0x0000030f
 8019de4:	fffffbcd 	.word	0xfffffbcd
 8019de8:	fffffbce 	.word	0xfffffbce
 8019dec:	3fffffff 	.word	0x3fffffff

08019df0 <__ssputs_r>:
 8019df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019df2:	688e      	ldr	r6, [r1, #8]
 8019df4:	b085      	sub	sp, #20
 8019df6:	001f      	movs	r7, r3
 8019df8:	000c      	movs	r4, r1
 8019dfa:	680b      	ldr	r3, [r1, #0]
 8019dfc:	9002      	str	r0, [sp, #8]
 8019dfe:	9203      	str	r2, [sp, #12]
 8019e00:	42be      	cmp	r6, r7
 8019e02:	d830      	bhi.n	8019e66 <__ssputs_r+0x76>
 8019e04:	210c      	movs	r1, #12
 8019e06:	5e62      	ldrsh	r2, [r4, r1]
 8019e08:	2190      	movs	r1, #144	@ 0x90
 8019e0a:	00c9      	lsls	r1, r1, #3
 8019e0c:	420a      	tst	r2, r1
 8019e0e:	d028      	beq.n	8019e62 <__ssputs_r+0x72>
 8019e10:	2003      	movs	r0, #3
 8019e12:	6921      	ldr	r1, [r4, #16]
 8019e14:	1a5b      	subs	r3, r3, r1
 8019e16:	9301      	str	r3, [sp, #4]
 8019e18:	6963      	ldr	r3, [r4, #20]
 8019e1a:	4343      	muls	r3, r0
 8019e1c:	9801      	ldr	r0, [sp, #4]
 8019e1e:	0fdd      	lsrs	r5, r3, #31
 8019e20:	18ed      	adds	r5, r5, r3
 8019e22:	1c7b      	adds	r3, r7, #1
 8019e24:	181b      	adds	r3, r3, r0
 8019e26:	106d      	asrs	r5, r5, #1
 8019e28:	42ab      	cmp	r3, r5
 8019e2a:	d900      	bls.n	8019e2e <__ssputs_r+0x3e>
 8019e2c:	001d      	movs	r5, r3
 8019e2e:	0552      	lsls	r2, r2, #21
 8019e30:	d528      	bpl.n	8019e84 <__ssputs_r+0x94>
 8019e32:	0029      	movs	r1, r5
 8019e34:	9802      	ldr	r0, [sp, #8]
 8019e36:	f7ff fba7 	bl	8019588 <_malloc_r>
 8019e3a:	1e06      	subs	r6, r0, #0
 8019e3c:	d02c      	beq.n	8019e98 <__ssputs_r+0xa8>
 8019e3e:	9a01      	ldr	r2, [sp, #4]
 8019e40:	6921      	ldr	r1, [r4, #16]
 8019e42:	f7fe fc9f 	bl	8018784 <memcpy>
 8019e46:	89a2      	ldrh	r2, [r4, #12]
 8019e48:	4b18      	ldr	r3, [pc, #96]	@ (8019eac <__ssputs_r+0xbc>)
 8019e4a:	401a      	ands	r2, r3
 8019e4c:	2380      	movs	r3, #128	@ 0x80
 8019e4e:	4313      	orrs	r3, r2
 8019e50:	81a3      	strh	r3, [r4, #12]
 8019e52:	9b01      	ldr	r3, [sp, #4]
 8019e54:	6126      	str	r6, [r4, #16]
 8019e56:	18f6      	adds	r6, r6, r3
 8019e58:	6026      	str	r6, [r4, #0]
 8019e5a:	003e      	movs	r6, r7
 8019e5c:	6165      	str	r5, [r4, #20]
 8019e5e:	1aed      	subs	r5, r5, r3
 8019e60:	60a5      	str	r5, [r4, #8]
 8019e62:	42be      	cmp	r6, r7
 8019e64:	d900      	bls.n	8019e68 <__ssputs_r+0x78>
 8019e66:	003e      	movs	r6, r7
 8019e68:	0032      	movs	r2, r6
 8019e6a:	9903      	ldr	r1, [sp, #12]
 8019e6c:	6820      	ldr	r0, [r4, #0]
 8019e6e:	f000 fbb3 	bl	801a5d8 <memmove>
 8019e72:	2000      	movs	r0, #0
 8019e74:	68a3      	ldr	r3, [r4, #8]
 8019e76:	1b9b      	subs	r3, r3, r6
 8019e78:	60a3      	str	r3, [r4, #8]
 8019e7a:	6823      	ldr	r3, [r4, #0]
 8019e7c:	199b      	adds	r3, r3, r6
 8019e7e:	6023      	str	r3, [r4, #0]
 8019e80:	b005      	add	sp, #20
 8019e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e84:	002a      	movs	r2, r5
 8019e86:	9802      	ldr	r0, [sp, #8]
 8019e88:	f000 fc29 	bl	801a6de <_realloc_r>
 8019e8c:	1e06      	subs	r6, r0, #0
 8019e8e:	d1e0      	bne.n	8019e52 <__ssputs_r+0x62>
 8019e90:	6921      	ldr	r1, [r4, #16]
 8019e92:	9802      	ldr	r0, [sp, #8]
 8019e94:	f7ff fb02 	bl	801949c <_free_r>
 8019e98:	230c      	movs	r3, #12
 8019e9a:	2001      	movs	r0, #1
 8019e9c:	9a02      	ldr	r2, [sp, #8]
 8019e9e:	4240      	negs	r0, r0
 8019ea0:	6013      	str	r3, [r2, #0]
 8019ea2:	89a2      	ldrh	r2, [r4, #12]
 8019ea4:	3334      	adds	r3, #52	@ 0x34
 8019ea6:	4313      	orrs	r3, r2
 8019ea8:	81a3      	strh	r3, [r4, #12]
 8019eaa:	e7e9      	b.n	8019e80 <__ssputs_r+0x90>
 8019eac:	fffffb7f 	.word	0xfffffb7f

08019eb0 <_svfiprintf_r>:
 8019eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eb2:	b0a1      	sub	sp, #132	@ 0x84
 8019eb4:	9003      	str	r0, [sp, #12]
 8019eb6:	001d      	movs	r5, r3
 8019eb8:	898b      	ldrh	r3, [r1, #12]
 8019eba:	000f      	movs	r7, r1
 8019ebc:	0016      	movs	r6, r2
 8019ebe:	061b      	lsls	r3, r3, #24
 8019ec0:	d511      	bpl.n	8019ee6 <_svfiprintf_r+0x36>
 8019ec2:	690b      	ldr	r3, [r1, #16]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d10e      	bne.n	8019ee6 <_svfiprintf_r+0x36>
 8019ec8:	2140      	movs	r1, #64	@ 0x40
 8019eca:	f7ff fb5d 	bl	8019588 <_malloc_r>
 8019ece:	6038      	str	r0, [r7, #0]
 8019ed0:	6138      	str	r0, [r7, #16]
 8019ed2:	2800      	cmp	r0, #0
 8019ed4:	d105      	bne.n	8019ee2 <_svfiprintf_r+0x32>
 8019ed6:	230c      	movs	r3, #12
 8019ed8:	9a03      	ldr	r2, [sp, #12]
 8019eda:	6013      	str	r3, [r2, #0]
 8019edc:	2001      	movs	r0, #1
 8019ede:	4240      	negs	r0, r0
 8019ee0:	e0cf      	b.n	801a082 <_svfiprintf_r+0x1d2>
 8019ee2:	2340      	movs	r3, #64	@ 0x40
 8019ee4:	617b      	str	r3, [r7, #20]
 8019ee6:	2300      	movs	r3, #0
 8019ee8:	ac08      	add	r4, sp, #32
 8019eea:	6163      	str	r3, [r4, #20]
 8019eec:	3320      	adds	r3, #32
 8019eee:	7663      	strb	r3, [r4, #25]
 8019ef0:	3310      	adds	r3, #16
 8019ef2:	76a3      	strb	r3, [r4, #26]
 8019ef4:	9507      	str	r5, [sp, #28]
 8019ef6:	0035      	movs	r5, r6
 8019ef8:	782b      	ldrb	r3, [r5, #0]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d001      	beq.n	8019f02 <_svfiprintf_r+0x52>
 8019efe:	2b25      	cmp	r3, #37	@ 0x25
 8019f00:	d148      	bne.n	8019f94 <_svfiprintf_r+0xe4>
 8019f02:	1bab      	subs	r3, r5, r6
 8019f04:	9305      	str	r3, [sp, #20]
 8019f06:	42b5      	cmp	r5, r6
 8019f08:	d00b      	beq.n	8019f22 <_svfiprintf_r+0x72>
 8019f0a:	0032      	movs	r2, r6
 8019f0c:	0039      	movs	r1, r7
 8019f0e:	9803      	ldr	r0, [sp, #12]
 8019f10:	f7ff ff6e 	bl	8019df0 <__ssputs_r>
 8019f14:	3001      	adds	r0, #1
 8019f16:	d100      	bne.n	8019f1a <_svfiprintf_r+0x6a>
 8019f18:	e0ae      	b.n	801a078 <_svfiprintf_r+0x1c8>
 8019f1a:	6963      	ldr	r3, [r4, #20]
 8019f1c:	9a05      	ldr	r2, [sp, #20]
 8019f1e:	189b      	adds	r3, r3, r2
 8019f20:	6163      	str	r3, [r4, #20]
 8019f22:	782b      	ldrb	r3, [r5, #0]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d100      	bne.n	8019f2a <_svfiprintf_r+0x7a>
 8019f28:	e0a6      	b.n	801a078 <_svfiprintf_r+0x1c8>
 8019f2a:	2201      	movs	r2, #1
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	4252      	negs	r2, r2
 8019f30:	6062      	str	r2, [r4, #4]
 8019f32:	a904      	add	r1, sp, #16
 8019f34:	3254      	adds	r2, #84	@ 0x54
 8019f36:	1852      	adds	r2, r2, r1
 8019f38:	1c6e      	adds	r6, r5, #1
 8019f3a:	6023      	str	r3, [r4, #0]
 8019f3c:	60e3      	str	r3, [r4, #12]
 8019f3e:	60a3      	str	r3, [r4, #8]
 8019f40:	7013      	strb	r3, [r2, #0]
 8019f42:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019f44:	4b54      	ldr	r3, [pc, #336]	@ (801a098 <_svfiprintf_r+0x1e8>)
 8019f46:	2205      	movs	r2, #5
 8019f48:	0018      	movs	r0, r3
 8019f4a:	7831      	ldrb	r1, [r6, #0]
 8019f4c:	9305      	str	r3, [sp, #20]
 8019f4e:	f7fe fc0e 	bl	801876e <memchr>
 8019f52:	1c75      	adds	r5, r6, #1
 8019f54:	2800      	cmp	r0, #0
 8019f56:	d11f      	bne.n	8019f98 <_svfiprintf_r+0xe8>
 8019f58:	6822      	ldr	r2, [r4, #0]
 8019f5a:	06d3      	lsls	r3, r2, #27
 8019f5c:	d504      	bpl.n	8019f68 <_svfiprintf_r+0xb8>
 8019f5e:	2353      	movs	r3, #83	@ 0x53
 8019f60:	a904      	add	r1, sp, #16
 8019f62:	185b      	adds	r3, r3, r1
 8019f64:	2120      	movs	r1, #32
 8019f66:	7019      	strb	r1, [r3, #0]
 8019f68:	0713      	lsls	r3, r2, #28
 8019f6a:	d504      	bpl.n	8019f76 <_svfiprintf_r+0xc6>
 8019f6c:	2353      	movs	r3, #83	@ 0x53
 8019f6e:	a904      	add	r1, sp, #16
 8019f70:	185b      	adds	r3, r3, r1
 8019f72:	212b      	movs	r1, #43	@ 0x2b
 8019f74:	7019      	strb	r1, [r3, #0]
 8019f76:	7833      	ldrb	r3, [r6, #0]
 8019f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8019f7a:	d016      	beq.n	8019faa <_svfiprintf_r+0xfa>
 8019f7c:	0035      	movs	r5, r6
 8019f7e:	2100      	movs	r1, #0
 8019f80:	200a      	movs	r0, #10
 8019f82:	68e3      	ldr	r3, [r4, #12]
 8019f84:	782a      	ldrb	r2, [r5, #0]
 8019f86:	1c6e      	adds	r6, r5, #1
 8019f88:	3a30      	subs	r2, #48	@ 0x30
 8019f8a:	2a09      	cmp	r2, #9
 8019f8c:	d950      	bls.n	801a030 <_svfiprintf_r+0x180>
 8019f8e:	2900      	cmp	r1, #0
 8019f90:	d111      	bne.n	8019fb6 <_svfiprintf_r+0x106>
 8019f92:	e017      	b.n	8019fc4 <_svfiprintf_r+0x114>
 8019f94:	3501      	adds	r5, #1
 8019f96:	e7af      	b.n	8019ef8 <_svfiprintf_r+0x48>
 8019f98:	9b05      	ldr	r3, [sp, #20]
 8019f9a:	6822      	ldr	r2, [r4, #0]
 8019f9c:	1ac0      	subs	r0, r0, r3
 8019f9e:	2301      	movs	r3, #1
 8019fa0:	4083      	lsls	r3, r0
 8019fa2:	4313      	orrs	r3, r2
 8019fa4:	002e      	movs	r6, r5
 8019fa6:	6023      	str	r3, [r4, #0]
 8019fa8:	e7cc      	b.n	8019f44 <_svfiprintf_r+0x94>
 8019faa:	9b07      	ldr	r3, [sp, #28]
 8019fac:	1d19      	adds	r1, r3, #4
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	9107      	str	r1, [sp, #28]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	db01      	blt.n	8019fba <_svfiprintf_r+0x10a>
 8019fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019fb8:	e004      	b.n	8019fc4 <_svfiprintf_r+0x114>
 8019fba:	425b      	negs	r3, r3
 8019fbc:	60e3      	str	r3, [r4, #12]
 8019fbe:	2302      	movs	r3, #2
 8019fc0:	4313      	orrs	r3, r2
 8019fc2:	6023      	str	r3, [r4, #0]
 8019fc4:	782b      	ldrb	r3, [r5, #0]
 8019fc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8019fc8:	d10c      	bne.n	8019fe4 <_svfiprintf_r+0x134>
 8019fca:	786b      	ldrb	r3, [r5, #1]
 8019fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8019fce:	d134      	bne.n	801a03a <_svfiprintf_r+0x18a>
 8019fd0:	9b07      	ldr	r3, [sp, #28]
 8019fd2:	3502      	adds	r5, #2
 8019fd4:	1d1a      	adds	r2, r3, #4
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	9207      	str	r2, [sp, #28]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	da01      	bge.n	8019fe2 <_svfiprintf_r+0x132>
 8019fde:	2301      	movs	r3, #1
 8019fe0:	425b      	negs	r3, r3
 8019fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fe4:	4e2d      	ldr	r6, [pc, #180]	@ (801a09c <_svfiprintf_r+0x1ec>)
 8019fe6:	2203      	movs	r2, #3
 8019fe8:	0030      	movs	r0, r6
 8019fea:	7829      	ldrb	r1, [r5, #0]
 8019fec:	f7fe fbbf 	bl	801876e <memchr>
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	d006      	beq.n	801a002 <_svfiprintf_r+0x152>
 8019ff4:	2340      	movs	r3, #64	@ 0x40
 8019ff6:	1b80      	subs	r0, r0, r6
 8019ff8:	4083      	lsls	r3, r0
 8019ffa:	6822      	ldr	r2, [r4, #0]
 8019ffc:	3501      	adds	r5, #1
 8019ffe:	4313      	orrs	r3, r2
 801a000:	6023      	str	r3, [r4, #0]
 801a002:	7829      	ldrb	r1, [r5, #0]
 801a004:	2206      	movs	r2, #6
 801a006:	4826      	ldr	r0, [pc, #152]	@ (801a0a0 <_svfiprintf_r+0x1f0>)
 801a008:	1c6e      	adds	r6, r5, #1
 801a00a:	7621      	strb	r1, [r4, #24]
 801a00c:	f7fe fbaf 	bl	801876e <memchr>
 801a010:	2800      	cmp	r0, #0
 801a012:	d038      	beq.n	801a086 <_svfiprintf_r+0x1d6>
 801a014:	4b23      	ldr	r3, [pc, #140]	@ (801a0a4 <_svfiprintf_r+0x1f4>)
 801a016:	2b00      	cmp	r3, #0
 801a018:	d122      	bne.n	801a060 <_svfiprintf_r+0x1b0>
 801a01a:	2207      	movs	r2, #7
 801a01c:	9b07      	ldr	r3, [sp, #28]
 801a01e:	3307      	adds	r3, #7
 801a020:	4393      	bics	r3, r2
 801a022:	3308      	adds	r3, #8
 801a024:	9307      	str	r3, [sp, #28]
 801a026:	6963      	ldr	r3, [r4, #20]
 801a028:	9a04      	ldr	r2, [sp, #16]
 801a02a:	189b      	adds	r3, r3, r2
 801a02c:	6163      	str	r3, [r4, #20]
 801a02e:	e762      	b.n	8019ef6 <_svfiprintf_r+0x46>
 801a030:	4343      	muls	r3, r0
 801a032:	0035      	movs	r5, r6
 801a034:	2101      	movs	r1, #1
 801a036:	189b      	adds	r3, r3, r2
 801a038:	e7a4      	b.n	8019f84 <_svfiprintf_r+0xd4>
 801a03a:	2300      	movs	r3, #0
 801a03c:	200a      	movs	r0, #10
 801a03e:	0019      	movs	r1, r3
 801a040:	3501      	adds	r5, #1
 801a042:	6063      	str	r3, [r4, #4]
 801a044:	782a      	ldrb	r2, [r5, #0]
 801a046:	1c6e      	adds	r6, r5, #1
 801a048:	3a30      	subs	r2, #48	@ 0x30
 801a04a:	2a09      	cmp	r2, #9
 801a04c:	d903      	bls.n	801a056 <_svfiprintf_r+0x1a6>
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d0c8      	beq.n	8019fe4 <_svfiprintf_r+0x134>
 801a052:	9109      	str	r1, [sp, #36]	@ 0x24
 801a054:	e7c6      	b.n	8019fe4 <_svfiprintf_r+0x134>
 801a056:	4341      	muls	r1, r0
 801a058:	0035      	movs	r5, r6
 801a05a:	2301      	movs	r3, #1
 801a05c:	1889      	adds	r1, r1, r2
 801a05e:	e7f1      	b.n	801a044 <_svfiprintf_r+0x194>
 801a060:	aa07      	add	r2, sp, #28
 801a062:	9200      	str	r2, [sp, #0]
 801a064:	0021      	movs	r1, r4
 801a066:	003a      	movs	r2, r7
 801a068:	4b0f      	ldr	r3, [pc, #60]	@ (801a0a8 <_svfiprintf_r+0x1f8>)
 801a06a:	9803      	ldr	r0, [sp, #12]
 801a06c:	f7fd fd8c 	bl	8017b88 <_printf_float>
 801a070:	9004      	str	r0, [sp, #16]
 801a072:	9b04      	ldr	r3, [sp, #16]
 801a074:	3301      	adds	r3, #1
 801a076:	d1d6      	bne.n	801a026 <_svfiprintf_r+0x176>
 801a078:	89bb      	ldrh	r3, [r7, #12]
 801a07a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a07c:	065b      	lsls	r3, r3, #25
 801a07e:	d500      	bpl.n	801a082 <_svfiprintf_r+0x1d2>
 801a080:	e72c      	b.n	8019edc <_svfiprintf_r+0x2c>
 801a082:	b021      	add	sp, #132	@ 0x84
 801a084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a086:	aa07      	add	r2, sp, #28
 801a088:	9200      	str	r2, [sp, #0]
 801a08a:	0021      	movs	r1, r4
 801a08c:	003a      	movs	r2, r7
 801a08e:	4b06      	ldr	r3, [pc, #24]	@ (801a0a8 <_svfiprintf_r+0x1f8>)
 801a090:	9803      	ldr	r0, [sp, #12]
 801a092:	f7fe f827 	bl	80180e4 <_printf_i>
 801a096:	e7eb      	b.n	801a070 <_svfiprintf_r+0x1c0>
 801a098:	0801c590 	.word	0x0801c590
 801a09c:	0801c596 	.word	0x0801c596
 801a0a0:	0801c59a 	.word	0x0801c59a
 801a0a4:	08017b89 	.word	0x08017b89
 801a0a8:	08019df1 	.word	0x08019df1

0801a0ac <__sfputc_r>:
 801a0ac:	6893      	ldr	r3, [r2, #8]
 801a0ae:	b510      	push	{r4, lr}
 801a0b0:	3b01      	subs	r3, #1
 801a0b2:	6093      	str	r3, [r2, #8]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	da04      	bge.n	801a0c2 <__sfputc_r+0x16>
 801a0b8:	6994      	ldr	r4, [r2, #24]
 801a0ba:	42a3      	cmp	r3, r4
 801a0bc:	db07      	blt.n	801a0ce <__sfputc_r+0x22>
 801a0be:	290a      	cmp	r1, #10
 801a0c0:	d005      	beq.n	801a0ce <__sfputc_r+0x22>
 801a0c2:	6813      	ldr	r3, [r2, #0]
 801a0c4:	1c58      	adds	r0, r3, #1
 801a0c6:	6010      	str	r0, [r2, #0]
 801a0c8:	7019      	strb	r1, [r3, #0]
 801a0ca:	0008      	movs	r0, r1
 801a0cc:	bd10      	pop	{r4, pc}
 801a0ce:	f000 f9e2 	bl	801a496 <__swbuf_r>
 801a0d2:	0001      	movs	r1, r0
 801a0d4:	e7f9      	b.n	801a0ca <__sfputc_r+0x1e>

0801a0d6 <__sfputs_r>:
 801a0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0d8:	0006      	movs	r6, r0
 801a0da:	000f      	movs	r7, r1
 801a0dc:	0014      	movs	r4, r2
 801a0de:	18d5      	adds	r5, r2, r3
 801a0e0:	42ac      	cmp	r4, r5
 801a0e2:	d101      	bne.n	801a0e8 <__sfputs_r+0x12>
 801a0e4:	2000      	movs	r0, #0
 801a0e6:	e007      	b.n	801a0f8 <__sfputs_r+0x22>
 801a0e8:	7821      	ldrb	r1, [r4, #0]
 801a0ea:	003a      	movs	r2, r7
 801a0ec:	0030      	movs	r0, r6
 801a0ee:	f7ff ffdd 	bl	801a0ac <__sfputc_r>
 801a0f2:	3401      	adds	r4, #1
 801a0f4:	1c43      	adds	r3, r0, #1
 801a0f6:	d1f3      	bne.n	801a0e0 <__sfputs_r+0xa>
 801a0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a0fc <_vfiprintf_r>:
 801a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0fe:	b0a1      	sub	sp, #132	@ 0x84
 801a100:	000f      	movs	r7, r1
 801a102:	0015      	movs	r5, r2
 801a104:	001e      	movs	r6, r3
 801a106:	9003      	str	r0, [sp, #12]
 801a108:	2800      	cmp	r0, #0
 801a10a:	d004      	beq.n	801a116 <_vfiprintf_r+0x1a>
 801a10c:	6a03      	ldr	r3, [r0, #32]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d101      	bne.n	801a116 <_vfiprintf_r+0x1a>
 801a112:	f7fe f985 	bl	8018420 <__sinit>
 801a116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a118:	07db      	lsls	r3, r3, #31
 801a11a:	d405      	bmi.n	801a128 <_vfiprintf_r+0x2c>
 801a11c:	89bb      	ldrh	r3, [r7, #12]
 801a11e:	059b      	lsls	r3, r3, #22
 801a120:	d402      	bmi.n	801a128 <_vfiprintf_r+0x2c>
 801a122:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a124:	f7fe fb21 	bl	801876a <__retarget_lock_acquire_recursive>
 801a128:	89bb      	ldrh	r3, [r7, #12]
 801a12a:	071b      	lsls	r3, r3, #28
 801a12c:	d502      	bpl.n	801a134 <_vfiprintf_r+0x38>
 801a12e:	693b      	ldr	r3, [r7, #16]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d113      	bne.n	801a15c <_vfiprintf_r+0x60>
 801a134:	0039      	movs	r1, r7
 801a136:	9803      	ldr	r0, [sp, #12]
 801a138:	f000 f9f0 	bl	801a51c <__swsetup_r>
 801a13c:	2800      	cmp	r0, #0
 801a13e:	d00d      	beq.n	801a15c <_vfiprintf_r+0x60>
 801a140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a142:	07db      	lsls	r3, r3, #31
 801a144:	d503      	bpl.n	801a14e <_vfiprintf_r+0x52>
 801a146:	2001      	movs	r0, #1
 801a148:	4240      	negs	r0, r0
 801a14a:	b021      	add	sp, #132	@ 0x84
 801a14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a14e:	89bb      	ldrh	r3, [r7, #12]
 801a150:	059b      	lsls	r3, r3, #22
 801a152:	d4f8      	bmi.n	801a146 <_vfiprintf_r+0x4a>
 801a154:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a156:	f7fe fb09 	bl	801876c <__retarget_lock_release_recursive>
 801a15a:	e7f4      	b.n	801a146 <_vfiprintf_r+0x4a>
 801a15c:	2300      	movs	r3, #0
 801a15e:	ac08      	add	r4, sp, #32
 801a160:	6163      	str	r3, [r4, #20]
 801a162:	3320      	adds	r3, #32
 801a164:	7663      	strb	r3, [r4, #25]
 801a166:	3310      	adds	r3, #16
 801a168:	76a3      	strb	r3, [r4, #26]
 801a16a:	9607      	str	r6, [sp, #28]
 801a16c:	002e      	movs	r6, r5
 801a16e:	7833      	ldrb	r3, [r6, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d001      	beq.n	801a178 <_vfiprintf_r+0x7c>
 801a174:	2b25      	cmp	r3, #37	@ 0x25
 801a176:	d148      	bne.n	801a20a <_vfiprintf_r+0x10e>
 801a178:	1b73      	subs	r3, r6, r5
 801a17a:	9305      	str	r3, [sp, #20]
 801a17c:	42ae      	cmp	r6, r5
 801a17e:	d00b      	beq.n	801a198 <_vfiprintf_r+0x9c>
 801a180:	002a      	movs	r2, r5
 801a182:	0039      	movs	r1, r7
 801a184:	9803      	ldr	r0, [sp, #12]
 801a186:	f7ff ffa6 	bl	801a0d6 <__sfputs_r>
 801a18a:	3001      	adds	r0, #1
 801a18c:	d100      	bne.n	801a190 <_vfiprintf_r+0x94>
 801a18e:	e0ae      	b.n	801a2ee <_vfiprintf_r+0x1f2>
 801a190:	6963      	ldr	r3, [r4, #20]
 801a192:	9a05      	ldr	r2, [sp, #20]
 801a194:	189b      	adds	r3, r3, r2
 801a196:	6163      	str	r3, [r4, #20]
 801a198:	7833      	ldrb	r3, [r6, #0]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d100      	bne.n	801a1a0 <_vfiprintf_r+0xa4>
 801a19e:	e0a6      	b.n	801a2ee <_vfiprintf_r+0x1f2>
 801a1a0:	2201      	movs	r2, #1
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	4252      	negs	r2, r2
 801a1a6:	6062      	str	r2, [r4, #4]
 801a1a8:	a904      	add	r1, sp, #16
 801a1aa:	3254      	adds	r2, #84	@ 0x54
 801a1ac:	1852      	adds	r2, r2, r1
 801a1ae:	1c75      	adds	r5, r6, #1
 801a1b0:	6023      	str	r3, [r4, #0]
 801a1b2:	60e3      	str	r3, [r4, #12]
 801a1b4:	60a3      	str	r3, [r4, #8]
 801a1b6:	7013      	strb	r3, [r2, #0]
 801a1b8:	65a3      	str	r3, [r4, #88]	@ 0x58
 801a1ba:	4b59      	ldr	r3, [pc, #356]	@ (801a320 <_vfiprintf_r+0x224>)
 801a1bc:	2205      	movs	r2, #5
 801a1be:	0018      	movs	r0, r3
 801a1c0:	7829      	ldrb	r1, [r5, #0]
 801a1c2:	9305      	str	r3, [sp, #20]
 801a1c4:	f7fe fad3 	bl	801876e <memchr>
 801a1c8:	1c6e      	adds	r6, r5, #1
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	d11f      	bne.n	801a20e <_vfiprintf_r+0x112>
 801a1ce:	6822      	ldr	r2, [r4, #0]
 801a1d0:	06d3      	lsls	r3, r2, #27
 801a1d2:	d504      	bpl.n	801a1de <_vfiprintf_r+0xe2>
 801a1d4:	2353      	movs	r3, #83	@ 0x53
 801a1d6:	a904      	add	r1, sp, #16
 801a1d8:	185b      	adds	r3, r3, r1
 801a1da:	2120      	movs	r1, #32
 801a1dc:	7019      	strb	r1, [r3, #0]
 801a1de:	0713      	lsls	r3, r2, #28
 801a1e0:	d504      	bpl.n	801a1ec <_vfiprintf_r+0xf0>
 801a1e2:	2353      	movs	r3, #83	@ 0x53
 801a1e4:	a904      	add	r1, sp, #16
 801a1e6:	185b      	adds	r3, r3, r1
 801a1e8:	212b      	movs	r1, #43	@ 0x2b
 801a1ea:	7019      	strb	r1, [r3, #0]
 801a1ec:	782b      	ldrb	r3, [r5, #0]
 801a1ee:	2b2a      	cmp	r3, #42	@ 0x2a
 801a1f0:	d016      	beq.n	801a220 <_vfiprintf_r+0x124>
 801a1f2:	002e      	movs	r6, r5
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	200a      	movs	r0, #10
 801a1f8:	68e3      	ldr	r3, [r4, #12]
 801a1fa:	7832      	ldrb	r2, [r6, #0]
 801a1fc:	1c75      	adds	r5, r6, #1
 801a1fe:	3a30      	subs	r2, #48	@ 0x30
 801a200:	2a09      	cmp	r2, #9
 801a202:	d950      	bls.n	801a2a6 <_vfiprintf_r+0x1aa>
 801a204:	2900      	cmp	r1, #0
 801a206:	d111      	bne.n	801a22c <_vfiprintf_r+0x130>
 801a208:	e017      	b.n	801a23a <_vfiprintf_r+0x13e>
 801a20a:	3601      	adds	r6, #1
 801a20c:	e7af      	b.n	801a16e <_vfiprintf_r+0x72>
 801a20e:	9b05      	ldr	r3, [sp, #20]
 801a210:	6822      	ldr	r2, [r4, #0]
 801a212:	1ac0      	subs	r0, r0, r3
 801a214:	2301      	movs	r3, #1
 801a216:	4083      	lsls	r3, r0
 801a218:	4313      	orrs	r3, r2
 801a21a:	0035      	movs	r5, r6
 801a21c:	6023      	str	r3, [r4, #0]
 801a21e:	e7cc      	b.n	801a1ba <_vfiprintf_r+0xbe>
 801a220:	9b07      	ldr	r3, [sp, #28]
 801a222:	1d19      	adds	r1, r3, #4
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	9107      	str	r1, [sp, #28]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	db01      	blt.n	801a230 <_vfiprintf_r+0x134>
 801a22c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a22e:	e004      	b.n	801a23a <_vfiprintf_r+0x13e>
 801a230:	425b      	negs	r3, r3
 801a232:	60e3      	str	r3, [r4, #12]
 801a234:	2302      	movs	r3, #2
 801a236:	4313      	orrs	r3, r2
 801a238:	6023      	str	r3, [r4, #0]
 801a23a:	7833      	ldrb	r3, [r6, #0]
 801a23c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a23e:	d10c      	bne.n	801a25a <_vfiprintf_r+0x15e>
 801a240:	7873      	ldrb	r3, [r6, #1]
 801a242:	2b2a      	cmp	r3, #42	@ 0x2a
 801a244:	d134      	bne.n	801a2b0 <_vfiprintf_r+0x1b4>
 801a246:	9b07      	ldr	r3, [sp, #28]
 801a248:	3602      	adds	r6, #2
 801a24a:	1d1a      	adds	r2, r3, #4
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	9207      	str	r2, [sp, #28]
 801a250:	2b00      	cmp	r3, #0
 801a252:	da01      	bge.n	801a258 <_vfiprintf_r+0x15c>
 801a254:	2301      	movs	r3, #1
 801a256:	425b      	negs	r3, r3
 801a258:	9309      	str	r3, [sp, #36]	@ 0x24
 801a25a:	4d32      	ldr	r5, [pc, #200]	@ (801a324 <_vfiprintf_r+0x228>)
 801a25c:	2203      	movs	r2, #3
 801a25e:	0028      	movs	r0, r5
 801a260:	7831      	ldrb	r1, [r6, #0]
 801a262:	f7fe fa84 	bl	801876e <memchr>
 801a266:	2800      	cmp	r0, #0
 801a268:	d006      	beq.n	801a278 <_vfiprintf_r+0x17c>
 801a26a:	2340      	movs	r3, #64	@ 0x40
 801a26c:	1b40      	subs	r0, r0, r5
 801a26e:	4083      	lsls	r3, r0
 801a270:	6822      	ldr	r2, [r4, #0]
 801a272:	3601      	adds	r6, #1
 801a274:	4313      	orrs	r3, r2
 801a276:	6023      	str	r3, [r4, #0]
 801a278:	7831      	ldrb	r1, [r6, #0]
 801a27a:	2206      	movs	r2, #6
 801a27c:	482a      	ldr	r0, [pc, #168]	@ (801a328 <_vfiprintf_r+0x22c>)
 801a27e:	1c75      	adds	r5, r6, #1
 801a280:	7621      	strb	r1, [r4, #24]
 801a282:	f7fe fa74 	bl	801876e <memchr>
 801a286:	2800      	cmp	r0, #0
 801a288:	d040      	beq.n	801a30c <_vfiprintf_r+0x210>
 801a28a:	4b28      	ldr	r3, [pc, #160]	@ (801a32c <_vfiprintf_r+0x230>)
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d122      	bne.n	801a2d6 <_vfiprintf_r+0x1da>
 801a290:	2207      	movs	r2, #7
 801a292:	9b07      	ldr	r3, [sp, #28]
 801a294:	3307      	adds	r3, #7
 801a296:	4393      	bics	r3, r2
 801a298:	3308      	adds	r3, #8
 801a29a:	9307      	str	r3, [sp, #28]
 801a29c:	6963      	ldr	r3, [r4, #20]
 801a29e:	9a04      	ldr	r2, [sp, #16]
 801a2a0:	189b      	adds	r3, r3, r2
 801a2a2:	6163      	str	r3, [r4, #20]
 801a2a4:	e762      	b.n	801a16c <_vfiprintf_r+0x70>
 801a2a6:	4343      	muls	r3, r0
 801a2a8:	002e      	movs	r6, r5
 801a2aa:	2101      	movs	r1, #1
 801a2ac:	189b      	adds	r3, r3, r2
 801a2ae:	e7a4      	b.n	801a1fa <_vfiprintf_r+0xfe>
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	200a      	movs	r0, #10
 801a2b4:	0019      	movs	r1, r3
 801a2b6:	3601      	adds	r6, #1
 801a2b8:	6063      	str	r3, [r4, #4]
 801a2ba:	7832      	ldrb	r2, [r6, #0]
 801a2bc:	1c75      	adds	r5, r6, #1
 801a2be:	3a30      	subs	r2, #48	@ 0x30
 801a2c0:	2a09      	cmp	r2, #9
 801a2c2:	d903      	bls.n	801a2cc <_vfiprintf_r+0x1d0>
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d0c8      	beq.n	801a25a <_vfiprintf_r+0x15e>
 801a2c8:	9109      	str	r1, [sp, #36]	@ 0x24
 801a2ca:	e7c6      	b.n	801a25a <_vfiprintf_r+0x15e>
 801a2cc:	4341      	muls	r1, r0
 801a2ce:	002e      	movs	r6, r5
 801a2d0:	2301      	movs	r3, #1
 801a2d2:	1889      	adds	r1, r1, r2
 801a2d4:	e7f1      	b.n	801a2ba <_vfiprintf_r+0x1be>
 801a2d6:	aa07      	add	r2, sp, #28
 801a2d8:	9200      	str	r2, [sp, #0]
 801a2da:	0021      	movs	r1, r4
 801a2dc:	003a      	movs	r2, r7
 801a2de:	4b14      	ldr	r3, [pc, #80]	@ (801a330 <_vfiprintf_r+0x234>)
 801a2e0:	9803      	ldr	r0, [sp, #12]
 801a2e2:	f7fd fc51 	bl	8017b88 <_printf_float>
 801a2e6:	9004      	str	r0, [sp, #16]
 801a2e8:	9b04      	ldr	r3, [sp, #16]
 801a2ea:	3301      	adds	r3, #1
 801a2ec:	d1d6      	bne.n	801a29c <_vfiprintf_r+0x1a0>
 801a2ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2f0:	07db      	lsls	r3, r3, #31
 801a2f2:	d405      	bmi.n	801a300 <_vfiprintf_r+0x204>
 801a2f4:	89bb      	ldrh	r3, [r7, #12]
 801a2f6:	059b      	lsls	r3, r3, #22
 801a2f8:	d402      	bmi.n	801a300 <_vfiprintf_r+0x204>
 801a2fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a2fc:	f7fe fa36 	bl	801876c <__retarget_lock_release_recursive>
 801a300:	89bb      	ldrh	r3, [r7, #12]
 801a302:	065b      	lsls	r3, r3, #25
 801a304:	d500      	bpl.n	801a308 <_vfiprintf_r+0x20c>
 801a306:	e71e      	b.n	801a146 <_vfiprintf_r+0x4a>
 801a308:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a30a:	e71e      	b.n	801a14a <_vfiprintf_r+0x4e>
 801a30c:	aa07      	add	r2, sp, #28
 801a30e:	9200      	str	r2, [sp, #0]
 801a310:	0021      	movs	r1, r4
 801a312:	003a      	movs	r2, r7
 801a314:	4b06      	ldr	r3, [pc, #24]	@ (801a330 <_vfiprintf_r+0x234>)
 801a316:	9803      	ldr	r0, [sp, #12]
 801a318:	f7fd fee4 	bl	80180e4 <_printf_i>
 801a31c:	e7e3      	b.n	801a2e6 <_vfiprintf_r+0x1ea>
 801a31e:	46c0      	nop			@ (mov r8, r8)
 801a320:	0801c590 	.word	0x0801c590
 801a324:	0801c596 	.word	0x0801c596
 801a328:	0801c59a 	.word	0x0801c59a
 801a32c:	08017b89 	.word	0x08017b89
 801a330:	0801a0d7 	.word	0x0801a0d7

0801a334 <__sflush_r>:
 801a334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a336:	220c      	movs	r2, #12
 801a338:	5e8b      	ldrsh	r3, [r1, r2]
 801a33a:	0005      	movs	r5, r0
 801a33c:	000c      	movs	r4, r1
 801a33e:	071a      	lsls	r2, r3, #28
 801a340:	d456      	bmi.n	801a3f0 <__sflush_r+0xbc>
 801a342:	684a      	ldr	r2, [r1, #4]
 801a344:	2a00      	cmp	r2, #0
 801a346:	dc02      	bgt.n	801a34e <__sflush_r+0x1a>
 801a348:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801a34a:	2a00      	cmp	r2, #0
 801a34c:	dd4e      	ble.n	801a3ec <__sflush_r+0xb8>
 801a34e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a350:	2f00      	cmp	r7, #0
 801a352:	d04b      	beq.n	801a3ec <__sflush_r+0xb8>
 801a354:	2200      	movs	r2, #0
 801a356:	2080      	movs	r0, #128	@ 0x80
 801a358:	682e      	ldr	r6, [r5, #0]
 801a35a:	602a      	str	r2, [r5, #0]
 801a35c:	001a      	movs	r2, r3
 801a35e:	0140      	lsls	r0, r0, #5
 801a360:	6a21      	ldr	r1, [r4, #32]
 801a362:	4002      	ands	r2, r0
 801a364:	4203      	tst	r3, r0
 801a366:	d033      	beq.n	801a3d0 <__sflush_r+0x9c>
 801a368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a36a:	89a3      	ldrh	r3, [r4, #12]
 801a36c:	075b      	lsls	r3, r3, #29
 801a36e:	d506      	bpl.n	801a37e <__sflush_r+0x4a>
 801a370:	6863      	ldr	r3, [r4, #4]
 801a372:	1ad2      	subs	r2, r2, r3
 801a374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a376:	2b00      	cmp	r3, #0
 801a378:	d001      	beq.n	801a37e <__sflush_r+0x4a>
 801a37a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a37c:	1ad2      	subs	r2, r2, r3
 801a37e:	2300      	movs	r3, #0
 801a380:	0028      	movs	r0, r5
 801a382:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a384:	6a21      	ldr	r1, [r4, #32]
 801a386:	47b8      	blx	r7
 801a388:	89a2      	ldrh	r2, [r4, #12]
 801a38a:	1c43      	adds	r3, r0, #1
 801a38c:	d106      	bne.n	801a39c <__sflush_r+0x68>
 801a38e:	6829      	ldr	r1, [r5, #0]
 801a390:	291d      	cmp	r1, #29
 801a392:	d846      	bhi.n	801a422 <__sflush_r+0xee>
 801a394:	4b29      	ldr	r3, [pc, #164]	@ (801a43c <__sflush_r+0x108>)
 801a396:	410b      	asrs	r3, r1
 801a398:	07db      	lsls	r3, r3, #31
 801a39a:	d442      	bmi.n	801a422 <__sflush_r+0xee>
 801a39c:	2300      	movs	r3, #0
 801a39e:	6063      	str	r3, [r4, #4]
 801a3a0:	6923      	ldr	r3, [r4, #16]
 801a3a2:	6023      	str	r3, [r4, #0]
 801a3a4:	04d2      	lsls	r2, r2, #19
 801a3a6:	d505      	bpl.n	801a3b4 <__sflush_r+0x80>
 801a3a8:	1c43      	adds	r3, r0, #1
 801a3aa:	d102      	bne.n	801a3b2 <__sflush_r+0x7e>
 801a3ac:	682b      	ldr	r3, [r5, #0]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d100      	bne.n	801a3b4 <__sflush_r+0x80>
 801a3b2:	6560      	str	r0, [r4, #84]	@ 0x54
 801a3b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a3b6:	602e      	str	r6, [r5, #0]
 801a3b8:	2900      	cmp	r1, #0
 801a3ba:	d017      	beq.n	801a3ec <__sflush_r+0xb8>
 801a3bc:	0023      	movs	r3, r4
 801a3be:	3344      	adds	r3, #68	@ 0x44
 801a3c0:	4299      	cmp	r1, r3
 801a3c2:	d002      	beq.n	801a3ca <__sflush_r+0x96>
 801a3c4:	0028      	movs	r0, r5
 801a3c6:	f7ff f869 	bl	801949c <_free_r>
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	6363      	str	r3, [r4, #52]	@ 0x34
 801a3ce:	e00d      	b.n	801a3ec <__sflush_r+0xb8>
 801a3d0:	2301      	movs	r3, #1
 801a3d2:	0028      	movs	r0, r5
 801a3d4:	47b8      	blx	r7
 801a3d6:	0002      	movs	r2, r0
 801a3d8:	1c43      	adds	r3, r0, #1
 801a3da:	d1c6      	bne.n	801a36a <__sflush_r+0x36>
 801a3dc:	682b      	ldr	r3, [r5, #0]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d0c3      	beq.n	801a36a <__sflush_r+0x36>
 801a3e2:	2b1d      	cmp	r3, #29
 801a3e4:	d001      	beq.n	801a3ea <__sflush_r+0xb6>
 801a3e6:	2b16      	cmp	r3, #22
 801a3e8:	d11a      	bne.n	801a420 <__sflush_r+0xec>
 801a3ea:	602e      	str	r6, [r5, #0]
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	e01e      	b.n	801a42e <__sflush_r+0xfa>
 801a3f0:	690e      	ldr	r6, [r1, #16]
 801a3f2:	2e00      	cmp	r6, #0
 801a3f4:	d0fa      	beq.n	801a3ec <__sflush_r+0xb8>
 801a3f6:	680f      	ldr	r7, [r1, #0]
 801a3f8:	600e      	str	r6, [r1, #0]
 801a3fa:	1bba      	subs	r2, r7, r6
 801a3fc:	9201      	str	r2, [sp, #4]
 801a3fe:	2200      	movs	r2, #0
 801a400:	079b      	lsls	r3, r3, #30
 801a402:	d100      	bne.n	801a406 <__sflush_r+0xd2>
 801a404:	694a      	ldr	r2, [r1, #20]
 801a406:	60a2      	str	r2, [r4, #8]
 801a408:	9b01      	ldr	r3, [sp, #4]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	ddee      	ble.n	801a3ec <__sflush_r+0xb8>
 801a40e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a410:	0032      	movs	r2, r6
 801a412:	001f      	movs	r7, r3
 801a414:	0028      	movs	r0, r5
 801a416:	9b01      	ldr	r3, [sp, #4]
 801a418:	6a21      	ldr	r1, [r4, #32]
 801a41a:	47b8      	blx	r7
 801a41c:	2800      	cmp	r0, #0
 801a41e:	dc07      	bgt.n	801a430 <__sflush_r+0xfc>
 801a420:	89a2      	ldrh	r2, [r4, #12]
 801a422:	2340      	movs	r3, #64	@ 0x40
 801a424:	2001      	movs	r0, #1
 801a426:	4313      	orrs	r3, r2
 801a428:	b21b      	sxth	r3, r3
 801a42a:	81a3      	strh	r3, [r4, #12]
 801a42c:	4240      	negs	r0, r0
 801a42e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a430:	9b01      	ldr	r3, [sp, #4]
 801a432:	1836      	adds	r6, r6, r0
 801a434:	1a1b      	subs	r3, r3, r0
 801a436:	9301      	str	r3, [sp, #4]
 801a438:	e7e6      	b.n	801a408 <__sflush_r+0xd4>
 801a43a:	46c0      	nop			@ (mov r8, r8)
 801a43c:	dfbffffe 	.word	0xdfbffffe

0801a440 <_fflush_r>:
 801a440:	690b      	ldr	r3, [r1, #16]
 801a442:	b570      	push	{r4, r5, r6, lr}
 801a444:	0005      	movs	r5, r0
 801a446:	000c      	movs	r4, r1
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d102      	bne.n	801a452 <_fflush_r+0x12>
 801a44c:	2500      	movs	r5, #0
 801a44e:	0028      	movs	r0, r5
 801a450:	bd70      	pop	{r4, r5, r6, pc}
 801a452:	2800      	cmp	r0, #0
 801a454:	d004      	beq.n	801a460 <_fflush_r+0x20>
 801a456:	6a03      	ldr	r3, [r0, #32]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d101      	bne.n	801a460 <_fflush_r+0x20>
 801a45c:	f7fd ffe0 	bl	8018420 <__sinit>
 801a460:	220c      	movs	r2, #12
 801a462:	5ea3      	ldrsh	r3, [r4, r2]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d0f1      	beq.n	801a44c <_fflush_r+0xc>
 801a468:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a46a:	07d2      	lsls	r2, r2, #31
 801a46c:	d404      	bmi.n	801a478 <_fflush_r+0x38>
 801a46e:	059b      	lsls	r3, r3, #22
 801a470:	d402      	bmi.n	801a478 <_fflush_r+0x38>
 801a472:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a474:	f7fe f979 	bl	801876a <__retarget_lock_acquire_recursive>
 801a478:	0028      	movs	r0, r5
 801a47a:	0021      	movs	r1, r4
 801a47c:	f7ff ff5a 	bl	801a334 <__sflush_r>
 801a480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a482:	0005      	movs	r5, r0
 801a484:	07db      	lsls	r3, r3, #31
 801a486:	d4e2      	bmi.n	801a44e <_fflush_r+0xe>
 801a488:	89a3      	ldrh	r3, [r4, #12]
 801a48a:	059b      	lsls	r3, r3, #22
 801a48c:	d4df      	bmi.n	801a44e <_fflush_r+0xe>
 801a48e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a490:	f7fe f96c 	bl	801876c <__retarget_lock_release_recursive>
 801a494:	e7db      	b.n	801a44e <_fflush_r+0xe>

0801a496 <__swbuf_r>:
 801a496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a498:	0006      	movs	r6, r0
 801a49a:	000d      	movs	r5, r1
 801a49c:	0014      	movs	r4, r2
 801a49e:	2800      	cmp	r0, #0
 801a4a0:	d004      	beq.n	801a4ac <__swbuf_r+0x16>
 801a4a2:	6a03      	ldr	r3, [r0, #32]
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d101      	bne.n	801a4ac <__swbuf_r+0x16>
 801a4a8:	f7fd ffba 	bl	8018420 <__sinit>
 801a4ac:	69a3      	ldr	r3, [r4, #24]
 801a4ae:	60a3      	str	r3, [r4, #8]
 801a4b0:	89a3      	ldrh	r3, [r4, #12]
 801a4b2:	071b      	lsls	r3, r3, #28
 801a4b4:	d502      	bpl.n	801a4bc <__swbuf_r+0x26>
 801a4b6:	6923      	ldr	r3, [r4, #16]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d109      	bne.n	801a4d0 <__swbuf_r+0x3a>
 801a4bc:	0021      	movs	r1, r4
 801a4be:	0030      	movs	r0, r6
 801a4c0:	f000 f82c 	bl	801a51c <__swsetup_r>
 801a4c4:	2800      	cmp	r0, #0
 801a4c6:	d003      	beq.n	801a4d0 <__swbuf_r+0x3a>
 801a4c8:	2501      	movs	r5, #1
 801a4ca:	426d      	negs	r5, r5
 801a4cc:	0028      	movs	r0, r5
 801a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4d0:	6923      	ldr	r3, [r4, #16]
 801a4d2:	6820      	ldr	r0, [r4, #0]
 801a4d4:	b2ef      	uxtb	r7, r5
 801a4d6:	1ac0      	subs	r0, r0, r3
 801a4d8:	6963      	ldr	r3, [r4, #20]
 801a4da:	b2ed      	uxtb	r5, r5
 801a4dc:	4283      	cmp	r3, r0
 801a4de:	dc05      	bgt.n	801a4ec <__swbuf_r+0x56>
 801a4e0:	0021      	movs	r1, r4
 801a4e2:	0030      	movs	r0, r6
 801a4e4:	f7ff ffac 	bl	801a440 <_fflush_r>
 801a4e8:	2800      	cmp	r0, #0
 801a4ea:	d1ed      	bne.n	801a4c8 <__swbuf_r+0x32>
 801a4ec:	68a3      	ldr	r3, [r4, #8]
 801a4ee:	3001      	adds	r0, #1
 801a4f0:	3b01      	subs	r3, #1
 801a4f2:	60a3      	str	r3, [r4, #8]
 801a4f4:	6823      	ldr	r3, [r4, #0]
 801a4f6:	1c5a      	adds	r2, r3, #1
 801a4f8:	6022      	str	r2, [r4, #0]
 801a4fa:	701f      	strb	r7, [r3, #0]
 801a4fc:	6963      	ldr	r3, [r4, #20]
 801a4fe:	4283      	cmp	r3, r0
 801a500:	d004      	beq.n	801a50c <__swbuf_r+0x76>
 801a502:	89a3      	ldrh	r3, [r4, #12]
 801a504:	07db      	lsls	r3, r3, #31
 801a506:	d5e1      	bpl.n	801a4cc <__swbuf_r+0x36>
 801a508:	2d0a      	cmp	r5, #10
 801a50a:	d1df      	bne.n	801a4cc <__swbuf_r+0x36>
 801a50c:	0021      	movs	r1, r4
 801a50e:	0030      	movs	r0, r6
 801a510:	f7ff ff96 	bl	801a440 <_fflush_r>
 801a514:	2800      	cmp	r0, #0
 801a516:	d0d9      	beq.n	801a4cc <__swbuf_r+0x36>
 801a518:	e7d6      	b.n	801a4c8 <__swbuf_r+0x32>
	...

0801a51c <__swsetup_r>:
 801a51c:	4b2d      	ldr	r3, [pc, #180]	@ (801a5d4 <__swsetup_r+0xb8>)
 801a51e:	b570      	push	{r4, r5, r6, lr}
 801a520:	0005      	movs	r5, r0
 801a522:	6818      	ldr	r0, [r3, #0]
 801a524:	000c      	movs	r4, r1
 801a526:	2800      	cmp	r0, #0
 801a528:	d004      	beq.n	801a534 <__swsetup_r+0x18>
 801a52a:	6a03      	ldr	r3, [r0, #32]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d101      	bne.n	801a534 <__swsetup_r+0x18>
 801a530:	f7fd ff76 	bl	8018420 <__sinit>
 801a534:	230c      	movs	r3, #12
 801a536:	5ee2      	ldrsh	r2, [r4, r3]
 801a538:	0713      	lsls	r3, r2, #28
 801a53a:	d423      	bmi.n	801a584 <__swsetup_r+0x68>
 801a53c:	06d3      	lsls	r3, r2, #27
 801a53e:	d407      	bmi.n	801a550 <__swsetup_r+0x34>
 801a540:	2309      	movs	r3, #9
 801a542:	602b      	str	r3, [r5, #0]
 801a544:	2340      	movs	r3, #64	@ 0x40
 801a546:	2001      	movs	r0, #1
 801a548:	4313      	orrs	r3, r2
 801a54a:	81a3      	strh	r3, [r4, #12]
 801a54c:	4240      	negs	r0, r0
 801a54e:	e03a      	b.n	801a5c6 <__swsetup_r+0xaa>
 801a550:	0752      	lsls	r2, r2, #29
 801a552:	d513      	bpl.n	801a57c <__swsetup_r+0x60>
 801a554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a556:	2900      	cmp	r1, #0
 801a558:	d008      	beq.n	801a56c <__swsetup_r+0x50>
 801a55a:	0023      	movs	r3, r4
 801a55c:	3344      	adds	r3, #68	@ 0x44
 801a55e:	4299      	cmp	r1, r3
 801a560:	d002      	beq.n	801a568 <__swsetup_r+0x4c>
 801a562:	0028      	movs	r0, r5
 801a564:	f7fe ff9a 	bl	801949c <_free_r>
 801a568:	2300      	movs	r3, #0
 801a56a:	6363      	str	r3, [r4, #52]	@ 0x34
 801a56c:	2224      	movs	r2, #36	@ 0x24
 801a56e:	89a3      	ldrh	r3, [r4, #12]
 801a570:	4393      	bics	r3, r2
 801a572:	81a3      	strh	r3, [r4, #12]
 801a574:	2300      	movs	r3, #0
 801a576:	6063      	str	r3, [r4, #4]
 801a578:	6923      	ldr	r3, [r4, #16]
 801a57a:	6023      	str	r3, [r4, #0]
 801a57c:	2308      	movs	r3, #8
 801a57e:	89a2      	ldrh	r2, [r4, #12]
 801a580:	4313      	orrs	r3, r2
 801a582:	81a3      	strh	r3, [r4, #12]
 801a584:	6923      	ldr	r3, [r4, #16]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d10b      	bne.n	801a5a2 <__swsetup_r+0x86>
 801a58a:	21a0      	movs	r1, #160	@ 0xa0
 801a58c:	2280      	movs	r2, #128	@ 0x80
 801a58e:	89a3      	ldrh	r3, [r4, #12]
 801a590:	0089      	lsls	r1, r1, #2
 801a592:	0092      	lsls	r2, r2, #2
 801a594:	400b      	ands	r3, r1
 801a596:	4293      	cmp	r3, r2
 801a598:	d003      	beq.n	801a5a2 <__swsetup_r+0x86>
 801a59a:	0021      	movs	r1, r4
 801a59c:	0028      	movs	r0, r5
 801a59e:	f000 f915 	bl	801a7cc <__smakebuf_r>
 801a5a2:	230c      	movs	r3, #12
 801a5a4:	5ee2      	ldrsh	r2, [r4, r3]
 801a5a6:	2101      	movs	r1, #1
 801a5a8:	0013      	movs	r3, r2
 801a5aa:	400b      	ands	r3, r1
 801a5ac:	420a      	tst	r2, r1
 801a5ae:	d00b      	beq.n	801a5c8 <__swsetup_r+0xac>
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	60a3      	str	r3, [r4, #8]
 801a5b4:	6963      	ldr	r3, [r4, #20]
 801a5b6:	425b      	negs	r3, r3
 801a5b8:	61a3      	str	r3, [r4, #24]
 801a5ba:	2000      	movs	r0, #0
 801a5bc:	6923      	ldr	r3, [r4, #16]
 801a5be:	4283      	cmp	r3, r0
 801a5c0:	d101      	bne.n	801a5c6 <__swsetup_r+0xaa>
 801a5c2:	0613      	lsls	r3, r2, #24
 801a5c4:	d4be      	bmi.n	801a544 <__swsetup_r+0x28>
 801a5c6:	bd70      	pop	{r4, r5, r6, pc}
 801a5c8:	0791      	lsls	r1, r2, #30
 801a5ca:	d400      	bmi.n	801a5ce <__swsetup_r+0xb2>
 801a5cc:	6963      	ldr	r3, [r4, #20]
 801a5ce:	60a3      	str	r3, [r4, #8]
 801a5d0:	e7f3      	b.n	801a5ba <__swsetup_r+0x9e>
 801a5d2:	46c0      	nop			@ (mov r8, r8)
 801a5d4:	200001f4 	.word	0x200001f4

0801a5d8 <memmove>:
 801a5d8:	b510      	push	{r4, lr}
 801a5da:	4288      	cmp	r0, r1
 801a5dc:	d806      	bhi.n	801a5ec <memmove+0x14>
 801a5de:	2300      	movs	r3, #0
 801a5e0:	429a      	cmp	r2, r3
 801a5e2:	d008      	beq.n	801a5f6 <memmove+0x1e>
 801a5e4:	5ccc      	ldrb	r4, [r1, r3]
 801a5e6:	54c4      	strb	r4, [r0, r3]
 801a5e8:	3301      	adds	r3, #1
 801a5ea:	e7f9      	b.n	801a5e0 <memmove+0x8>
 801a5ec:	188b      	adds	r3, r1, r2
 801a5ee:	4298      	cmp	r0, r3
 801a5f0:	d2f5      	bcs.n	801a5de <memmove+0x6>
 801a5f2:	3a01      	subs	r2, #1
 801a5f4:	d200      	bcs.n	801a5f8 <memmove+0x20>
 801a5f6:	bd10      	pop	{r4, pc}
 801a5f8:	5c8b      	ldrb	r3, [r1, r2]
 801a5fa:	5483      	strb	r3, [r0, r2]
 801a5fc:	e7f9      	b.n	801a5f2 <memmove+0x1a>
	...

0801a600 <_sbrk_r>:
 801a600:	2300      	movs	r3, #0
 801a602:	b570      	push	{r4, r5, r6, lr}
 801a604:	4d06      	ldr	r5, [pc, #24]	@ (801a620 <_sbrk_r+0x20>)
 801a606:	0004      	movs	r4, r0
 801a608:	0008      	movs	r0, r1
 801a60a:	602b      	str	r3, [r5, #0]
 801a60c:	f7ee ff56 	bl	80094bc <_sbrk>
 801a610:	1c43      	adds	r3, r0, #1
 801a612:	d103      	bne.n	801a61c <_sbrk_r+0x1c>
 801a614:	682b      	ldr	r3, [r5, #0]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d000      	beq.n	801a61c <_sbrk_r+0x1c>
 801a61a:	6023      	str	r3, [r4, #0]
 801a61c:	bd70      	pop	{r4, r5, r6, pc}
 801a61e:	46c0      	nop			@ (mov r8, r8)
 801a620:	20003f4c 	.word	0x20003f4c

0801a624 <__assert_func>:
 801a624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a626:	0014      	movs	r4, r2
 801a628:	001a      	movs	r2, r3
 801a62a:	4b09      	ldr	r3, [pc, #36]	@ (801a650 <__assert_func+0x2c>)
 801a62c:	0005      	movs	r5, r0
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	000e      	movs	r6, r1
 801a632:	68d8      	ldr	r0, [r3, #12]
 801a634:	4b07      	ldr	r3, [pc, #28]	@ (801a654 <__assert_func+0x30>)
 801a636:	2c00      	cmp	r4, #0
 801a638:	d101      	bne.n	801a63e <__assert_func+0x1a>
 801a63a:	4b07      	ldr	r3, [pc, #28]	@ (801a658 <__assert_func+0x34>)
 801a63c:	001c      	movs	r4, r3
 801a63e:	4907      	ldr	r1, [pc, #28]	@ (801a65c <__assert_func+0x38>)
 801a640:	9301      	str	r3, [sp, #4]
 801a642:	9402      	str	r4, [sp, #8]
 801a644:	002b      	movs	r3, r5
 801a646:	9600      	str	r6, [sp, #0]
 801a648:	f000 f886 	bl	801a758 <fiprintf>
 801a64c:	f000 f924 	bl	801a898 <abort>
 801a650:	200001f4 	.word	0x200001f4
 801a654:	0801c5ab 	.word	0x0801c5ab
 801a658:	0801c5e6 	.word	0x0801c5e6
 801a65c:	0801c5b8 	.word	0x0801c5b8

0801a660 <_calloc_r>:
 801a660:	b570      	push	{r4, r5, r6, lr}
 801a662:	0c0b      	lsrs	r3, r1, #16
 801a664:	0c15      	lsrs	r5, r2, #16
 801a666:	2b00      	cmp	r3, #0
 801a668:	d11e      	bne.n	801a6a8 <_calloc_r+0x48>
 801a66a:	2d00      	cmp	r5, #0
 801a66c:	d10c      	bne.n	801a688 <_calloc_r+0x28>
 801a66e:	b289      	uxth	r1, r1
 801a670:	b294      	uxth	r4, r2
 801a672:	434c      	muls	r4, r1
 801a674:	0021      	movs	r1, r4
 801a676:	f7fe ff87 	bl	8019588 <_malloc_r>
 801a67a:	1e05      	subs	r5, r0, #0
 801a67c:	d01a      	beq.n	801a6b4 <_calloc_r+0x54>
 801a67e:	0022      	movs	r2, r4
 801a680:	2100      	movs	r1, #0
 801a682:	f7fd ffb5 	bl	80185f0 <memset>
 801a686:	e016      	b.n	801a6b6 <_calloc_r+0x56>
 801a688:	1c2b      	adds	r3, r5, #0
 801a68a:	1c0c      	adds	r4, r1, #0
 801a68c:	b289      	uxth	r1, r1
 801a68e:	b292      	uxth	r2, r2
 801a690:	434a      	muls	r2, r1
 801a692:	b29b      	uxth	r3, r3
 801a694:	b2a1      	uxth	r1, r4
 801a696:	4359      	muls	r1, r3
 801a698:	0c14      	lsrs	r4, r2, #16
 801a69a:	190c      	adds	r4, r1, r4
 801a69c:	0c23      	lsrs	r3, r4, #16
 801a69e:	d107      	bne.n	801a6b0 <_calloc_r+0x50>
 801a6a0:	0424      	lsls	r4, r4, #16
 801a6a2:	b292      	uxth	r2, r2
 801a6a4:	4314      	orrs	r4, r2
 801a6a6:	e7e5      	b.n	801a674 <_calloc_r+0x14>
 801a6a8:	2d00      	cmp	r5, #0
 801a6aa:	d101      	bne.n	801a6b0 <_calloc_r+0x50>
 801a6ac:	1c14      	adds	r4, r2, #0
 801a6ae:	e7ed      	b.n	801a68c <_calloc_r+0x2c>
 801a6b0:	230c      	movs	r3, #12
 801a6b2:	6003      	str	r3, [r0, #0]
 801a6b4:	2500      	movs	r5, #0
 801a6b6:	0028      	movs	r0, r5
 801a6b8:	bd70      	pop	{r4, r5, r6, pc}

0801a6ba <__ascii_mbtowc>:
 801a6ba:	b082      	sub	sp, #8
 801a6bc:	2900      	cmp	r1, #0
 801a6be:	d100      	bne.n	801a6c2 <__ascii_mbtowc+0x8>
 801a6c0:	a901      	add	r1, sp, #4
 801a6c2:	1e10      	subs	r0, r2, #0
 801a6c4:	d006      	beq.n	801a6d4 <__ascii_mbtowc+0x1a>
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d006      	beq.n	801a6d8 <__ascii_mbtowc+0x1e>
 801a6ca:	7813      	ldrb	r3, [r2, #0]
 801a6cc:	600b      	str	r3, [r1, #0]
 801a6ce:	7810      	ldrb	r0, [r2, #0]
 801a6d0:	1e43      	subs	r3, r0, #1
 801a6d2:	4198      	sbcs	r0, r3
 801a6d4:	b002      	add	sp, #8
 801a6d6:	4770      	bx	lr
 801a6d8:	2002      	movs	r0, #2
 801a6da:	4240      	negs	r0, r0
 801a6dc:	e7fa      	b.n	801a6d4 <__ascii_mbtowc+0x1a>

0801a6de <_realloc_r>:
 801a6de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a6e0:	0006      	movs	r6, r0
 801a6e2:	000c      	movs	r4, r1
 801a6e4:	0015      	movs	r5, r2
 801a6e6:	2900      	cmp	r1, #0
 801a6e8:	d105      	bne.n	801a6f6 <_realloc_r+0x18>
 801a6ea:	0011      	movs	r1, r2
 801a6ec:	f7fe ff4c 	bl	8019588 <_malloc_r>
 801a6f0:	0004      	movs	r4, r0
 801a6f2:	0020      	movs	r0, r4
 801a6f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a6f6:	2a00      	cmp	r2, #0
 801a6f8:	d103      	bne.n	801a702 <_realloc_r+0x24>
 801a6fa:	f7fe fecf 	bl	801949c <_free_r>
 801a6fe:	2400      	movs	r4, #0
 801a700:	e7f7      	b.n	801a6f2 <_realloc_r+0x14>
 801a702:	f000 f8d0 	bl	801a8a6 <_malloc_usable_size_r>
 801a706:	0007      	movs	r7, r0
 801a708:	4285      	cmp	r5, r0
 801a70a:	d802      	bhi.n	801a712 <_realloc_r+0x34>
 801a70c:	0843      	lsrs	r3, r0, #1
 801a70e:	42ab      	cmp	r3, r5
 801a710:	d3ef      	bcc.n	801a6f2 <_realloc_r+0x14>
 801a712:	0029      	movs	r1, r5
 801a714:	0030      	movs	r0, r6
 801a716:	f7fe ff37 	bl	8019588 <_malloc_r>
 801a71a:	9001      	str	r0, [sp, #4]
 801a71c:	2800      	cmp	r0, #0
 801a71e:	d0ee      	beq.n	801a6fe <_realloc_r+0x20>
 801a720:	002a      	movs	r2, r5
 801a722:	42bd      	cmp	r5, r7
 801a724:	d900      	bls.n	801a728 <_realloc_r+0x4a>
 801a726:	003a      	movs	r2, r7
 801a728:	0021      	movs	r1, r4
 801a72a:	9801      	ldr	r0, [sp, #4]
 801a72c:	f7fe f82a 	bl	8018784 <memcpy>
 801a730:	0021      	movs	r1, r4
 801a732:	0030      	movs	r0, r6
 801a734:	f7fe feb2 	bl	801949c <_free_r>
 801a738:	9c01      	ldr	r4, [sp, #4]
 801a73a:	e7da      	b.n	801a6f2 <_realloc_r+0x14>

0801a73c <__ascii_wctomb>:
 801a73c:	0003      	movs	r3, r0
 801a73e:	1e08      	subs	r0, r1, #0
 801a740:	d005      	beq.n	801a74e <__ascii_wctomb+0x12>
 801a742:	2aff      	cmp	r2, #255	@ 0xff
 801a744:	d904      	bls.n	801a750 <__ascii_wctomb+0x14>
 801a746:	228a      	movs	r2, #138	@ 0x8a
 801a748:	2001      	movs	r0, #1
 801a74a:	601a      	str	r2, [r3, #0]
 801a74c:	4240      	negs	r0, r0
 801a74e:	4770      	bx	lr
 801a750:	2001      	movs	r0, #1
 801a752:	700a      	strb	r2, [r1, #0]
 801a754:	e7fb      	b.n	801a74e <__ascii_wctomb+0x12>
	...

0801a758 <fiprintf>:
 801a758:	b40e      	push	{r1, r2, r3}
 801a75a:	b517      	push	{r0, r1, r2, r4, lr}
 801a75c:	4c05      	ldr	r4, [pc, #20]	@ (801a774 <fiprintf+0x1c>)
 801a75e:	ab05      	add	r3, sp, #20
 801a760:	cb04      	ldmia	r3!, {r2}
 801a762:	0001      	movs	r1, r0
 801a764:	6820      	ldr	r0, [r4, #0]
 801a766:	9301      	str	r3, [sp, #4]
 801a768:	f7ff fcc8 	bl	801a0fc <_vfiprintf_r>
 801a76c:	bc1e      	pop	{r1, r2, r3, r4}
 801a76e:	bc08      	pop	{r3}
 801a770:	b003      	add	sp, #12
 801a772:	4718      	bx	r3
 801a774:	200001f4 	.word	0x200001f4

0801a778 <__swhatbuf_r>:
 801a778:	b570      	push	{r4, r5, r6, lr}
 801a77a:	000e      	movs	r6, r1
 801a77c:	001d      	movs	r5, r3
 801a77e:	230e      	movs	r3, #14
 801a780:	5ec9      	ldrsh	r1, [r1, r3]
 801a782:	0014      	movs	r4, r2
 801a784:	b096      	sub	sp, #88	@ 0x58
 801a786:	2900      	cmp	r1, #0
 801a788:	da0c      	bge.n	801a7a4 <__swhatbuf_r+0x2c>
 801a78a:	89b2      	ldrh	r2, [r6, #12]
 801a78c:	2380      	movs	r3, #128	@ 0x80
 801a78e:	0011      	movs	r1, r2
 801a790:	4019      	ands	r1, r3
 801a792:	421a      	tst	r2, r3
 801a794:	d114      	bne.n	801a7c0 <__swhatbuf_r+0x48>
 801a796:	2380      	movs	r3, #128	@ 0x80
 801a798:	00db      	lsls	r3, r3, #3
 801a79a:	2000      	movs	r0, #0
 801a79c:	6029      	str	r1, [r5, #0]
 801a79e:	6023      	str	r3, [r4, #0]
 801a7a0:	b016      	add	sp, #88	@ 0x58
 801a7a2:	bd70      	pop	{r4, r5, r6, pc}
 801a7a4:	466a      	mov	r2, sp
 801a7a6:	f000 f853 	bl	801a850 <_fstat_r>
 801a7aa:	2800      	cmp	r0, #0
 801a7ac:	dbed      	blt.n	801a78a <__swhatbuf_r+0x12>
 801a7ae:	23f0      	movs	r3, #240	@ 0xf0
 801a7b0:	9901      	ldr	r1, [sp, #4]
 801a7b2:	021b      	lsls	r3, r3, #8
 801a7b4:	4019      	ands	r1, r3
 801a7b6:	4b04      	ldr	r3, [pc, #16]	@ (801a7c8 <__swhatbuf_r+0x50>)
 801a7b8:	18c9      	adds	r1, r1, r3
 801a7ba:	424b      	negs	r3, r1
 801a7bc:	4159      	adcs	r1, r3
 801a7be:	e7ea      	b.n	801a796 <__swhatbuf_r+0x1e>
 801a7c0:	2100      	movs	r1, #0
 801a7c2:	2340      	movs	r3, #64	@ 0x40
 801a7c4:	e7e9      	b.n	801a79a <__swhatbuf_r+0x22>
 801a7c6:	46c0      	nop			@ (mov r8, r8)
 801a7c8:	ffffe000 	.word	0xffffe000

0801a7cc <__smakebuf_r>:
 801a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7ce:	2602      	movs	r6, #2
 801a7d0:	898b      	ldrh	r3, [r1, #12]
 801a7d2:	0005      	movs	r5, r0
 801a7d4:	000c      	movs	r4, r1
 801a7d6:	b085      	sub	sp, #20
 801a7d8:	4233      	tst	r3, r6
 801a7da:	d007      	beq.n	801a7ec <__smakebuf_r+0x20>
 801a7dc:	0023      	movs	r3, r4
 801a7de:	3347      	adds	r3, #71	@ 0x47
 801a7e0:	6023      	str	r3, [r4, #0]
 801a7e2:	6123      	str	r3, [r4, #16]
 801a7e4:	2301      	movs	r3, #1
 801a7e6:	6163      	str	r3, [r4, #20]
 801a7e8:	b005      	add	sp, #20
 801a7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7ec:	ab03      	add	r3, sp, #12
 801a7ee:	aa02      	add	r2, sp, #8
 801a7f0:	f7ff ffc2 	bl	801a778 <__swhatbuf_r>
 801a7f4:	9f02      	ldr	r7, [sp, #8]
 801a7f6:	9001      	str	r0, [sp, #4]
 801a7f8:	0039      	movs	r1, r7
 801a7fa:	0028      	movs	r0, r5
 801a7fc:	f7fe fec4 	bl	8019588 <_malloc_r>
 801a800:	2800      	cmp	r0, #0
 801a802:	d108      	bne.n	801a816 <__smakebuf_r+0x4a>
 801a804:	220c      	movs	r2, #12
 801a806:	5ea3      	ldrsh	r3, [r4, r2]
 801a808:	059a      	lsls	r2, r3, #22
 801a80a:	d4ed      	bmi.n	801a7e8 <__smakebuf_r+0x1c>
 801a80c:	2203      	movs	r2, #3
 801a80e:	4393      	bics	r3, r2
 801a810:	431e      	orrs	r6, r3
 801a812:	81a6      	strh	r6, [r4, #12]
 801a814:	e7e2      	b.n	801a7dc <__smakebuf_r+0x10>
 801a816:	2380      	movs	r3, #128	@ 0x80
 801a818:	89a2      	ldrh	r2, [r4, #12]
 801a81a:	6020      	str	r0, [r4, #0]
 801a81c:	4313      	orrs	r3, r2
 801a81e:	81a3      	strh	r3, [r4, #12]
 801a820:	9b03      	ldr	r3, [sp, #12]
 801a822:	6120      	str	r0, [r4, #16]
 801a824:	6167      	str	r7, [r4, #20]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d00c      	beq.n	801a844 <__smakebuf_r+0x78>
 801a82a:	0028      	movs	r0, r5
 801a82c:	230e      	movs	r3, #14
 801a82e:	5ee1      	ldrsh	r1, [r4, r3]
 801a830:	f000 f820 	bl	801a874 <_isatty_r>
 801a834:	2800      	cmp	r0, #0
 801a836:	d005      	beq.n	801a844 <__smakebuf_r+0x78>
 801a838:	2303      	movs	r3, #3
 801a83a:	89a2      	ldrh	r2, [r4, #12]
 801a83c:	439a      	bics	r2, r3
 801a83e:	3b02      	subs	r3, #2
 801a840:	4313      	orrs	r3, r2
 801a842:	81a3      	strh	r3, [r4, #12]
 801a844:	89a3      	ldrh	r3, [r4, #12]
 801a846:	9a01      	ldr	r2, [sp, #4]
 801a848:	4313      	orrs	r3, r2
 801a84a:	81a3      	strh	r3, [r4, #12]
 801a84c:	e7cc      	b.n	801a7e8 <__smakebuf_r+0x1c>
	...

0801a850 <_fstat_r>:
 801a850:	2300      	movs	r3, #0
 801a852:	b570      	push	{r4, r5, r6, lr}
 801a854:	4d06      	ldr	r5, [pc, #24]	@ (801a870 <_fstat_r+0x20>)
 801a856:	0004      	movs	r4, r0
 801a858:	0008      	movs	r0, r1
 801a85a:	0011      	movs	r1, r2
 801a85c:	602b      	str	r3, [r5, #0]
 801a85e:	f7ee fe0b 	bl	8009478 <_fstat>
 801a862:	1c43      	adds	r3, r0, #1
 801a864:	d103      	bne.n	801a86e <_fstat_r+0x1e>
 801a866:	682b      	ldr	r3, [r5, #0]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d000      	beq.n	801a86e <_fstat_r+0x1e>
 801a86c:	6023      	str	r3, [r4, #0]
 801a86e:	bd70      	pop	{r4, r5, r6, pc}
 801a870:	20003f4c 	.word	0x20003f4c

0801a874 <_isatty_r>:
 801a874:	2300      	movs	r3, #0
 801a876:	b570      	push	{r4, r5, r6, lr}
 801a878:	4d06      	ldr	r5, [pc, #24]	@ (801a894 <_isatty_r+0x20>)
 801a87a:	0004      	movs	r4, r0
 801a87c:	0008      	movs	r0, r1
 801a87e:	602b      	str	r3, [r5, #0]
 801a880:	f7ee fe08 	bl	8009494 <_isatty>
 801a884:	1c43      	adds	r3, r0, #1
 801a886:	d103      	bne.n	801a890 <_isatty_r+0x1c>
 801a888:	682b      	ldr	r3, [r5, #0]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d000      	beq.n	801a890 <_isatty_r+0x1c>
 801a88e:	6023      	str	r3, [r4, #0]
 801a890:	bd70      	pop	{r4, r5, r6, pc}
 801a892:	46c0      	nop			@ (mov r8, r8)
 801a894:	20003f4c 	.word	0x20003f4c

0801a898 <abort>:
 801a898:	2006      	movs	r0, #6
 801a89a:	b510      	push	{r4, lr}
 801a89c:	f000 f834 	bl	801a908 <raise>
 801a8a0:	2001      	movs	r0, #1
 801a8a2:	f7ee fdb5 	bl	8009410 <_exit>

0801a8a6 <_malloc_usable_size_r>:
 801a8a6:	1f0b      	subs	r3, r1, #4
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	1f18      	subs	r0, r3, #4
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	da01      	bge.n	801a8b4 <_malloc_usable_size_r+0xe>
 801a8b0:	580b      	ldr	r3, [r1, r0]
 801a8b2:	18c0      	adds	r0, r0, r3
 801a8b4:	4770      	bx	lr

0801a8b6 <_raise_r>:
 801a8b6:	b570      	push	{r4, r5, r6, lr}
 801a8b8:	0004      	movs	r4, r0
 801a8ba:	000d      	movs	r5, r1
 801a8bc:	291f      	cmp	r1, #31
 801a8be:	d904      	bls.n	801a8ca <_raise_r+0x14>
 801a8c0:	2316      	movs	r3, #22
 801a8c2:	6003      	str	r3, [r0, #0]
 801a8c4:	2001      	movs	r0, #1
 801a8c6:	4240      	negs	r0, r0
 801a8c8:	bd70      	pop	{r4, r5, r6, pc}
 801a8ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d004      	beq.n	801a8da <_raise_r+0x24>
 801a8d0:	008a      	lsls	r2, r1, #2
 801a8d2:	189b      	adds	r3, r3, r2
 801a8d4:	681a      	ldr	r2, [r3, #0]
 801a8d6:	2a00      	cmp	r2, #0
 801a8d8:	d108      	bne.n	801a8ec <_raise_r+0x36>
 801a8da:	0020      	movs	r0, r4
 801a8dc:	f000 f830 	bl	801a940 <_getpid_r>
 801a8e0:	002a      	movs	r2, r5
 801a8e2:	0001      	movs	r1, r0
 801a8e4:	0020      	movs	r0, r4
 801a8e6:	f000 f819 	bl	801a91c <_kill_r>
 801a8ea:	e7ed      	b.n	801a8c8 <_raise_r+0x12>
 801a8ec:	2a01      	cmp	r2, #1
 801a8ee:	d009      	beq.n	801a904 <_raise_r+0x4e>
 801a8f0:	1c51      	adds	r1, r2, #1
 801a8f2:	d103      	bne.n	801a8fc <_raise_r+0x46>
 801a8f4:	2316      	movs	r3, #22
 801a8f6:	6003      	str	r3, [r0, #0]
 801a8f8:	2001      	movs	r0, #1
 801a8fa:	e7e5      	b.n	801a8c8 <_raise_r+0x12>
 801a8fc:	2100      	movs	r1, #0
 801a8fe:	0028      	movs	r0, r5
 801a900:	6019      	str	r1, [r3, #0]
 801a902:	4790      	blx	r2
 801a904:	2000      	movs	r0, #0
 801a906:	e7df      	b.n	801a8c8 <_raise_r+0x12>

0801a908 <raise>:
 801a908:	b510      	push	{r4, lr}
 801a90a:	4b03      	ldr	r3, [pc, #12]	@ (801a918 <raise+0x10>)
 801a90c:	0001      	movs	r1, r0
 801a90e:	6818      	ldr	r0, [r3, #0]
 801a910:	f7ff ffd1 	bl	801a8b6 <_raise_r>
 801a914:	bd10      	pop	{r4, pc}
 801a916:	46c0      	nop			@ (mov r8, r8)
 801a918:	200001f4 	.word	0x200001f4

0801a91c <_kill_r>:
 801a91c:	2300      	movs	r3, #0
 801a91e:	b570      	push	{r4, r5, r6, lr}
 801a920:	4d06      	ldr	r5, [pc, #24]	@ (801a93c <_kill_r+0x20>)
 801a922:	0004      	movs	r4, r0
 801a924:	0008      	movs	r0, r1
 801a926:	0011      	movs	r1, r2
 801a928:	602b      	str	r3, [r5, #0]
 801a92a:	f7ee fd61 	bl	80093f0 <_kill>
 801a92e:	1c43      	adds	r3, r0, #1
 801a930:	d103      	bne.n	801a93a <_kill_r+0x1e>
 801a932:	682b      	ldr	r3, [r5, #0]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d000      	beq.n	801a93a <_kill_r+0x1e>
 801a938:	6023      	str	r3, [r4, #0]
 801a93a:	bd70      	pop	{r4, r5, r6, pc}
 801a93c:	20003f4c 	.word	0x20003f4c

0801a940 <_getpid_r>:
 801a940:	b510      	push	{r4, lr}
 801a942:	f7ee fd4f 	bl	80093e4 <_getpid>
 801a946:	bd10      	pop	{r4, pc}

0801a948 <log10>:
 801a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a94a:	0004      	movs	r4, r0
 801a94c:	000d      	movs	r5, r1
 801a94e:	f000 fa0b 	bl	801ad68 <__ieee754_log10>
 801a952:	0022      	movs	r2, r4
 801a954:	0006      	movs	r6, r0
 801a956:	000f      	movs	r7, r1
 801a958:	002b      	movs	r3, r5
 801a95a:	0020      	movs	r0, r4
 801a95c:	0029      	movs	r1, r5
 801a95e:	f7e8 fc4f 	bl	8003200 <__aeabi_dcmpun>
 801a962:	2800      	cmp	r0, #0
 801a964:	d115      	bne.n	801a992 <log10+0x4a>
 801a966:	2200      	movs	r2, #0
 801a968:	2300      	movs	r3, #0
 801a96a:	0020      	movs	r0, r4
 801a96c:	0029      	movs	r1, r5
 801a96e:	f7e5 fd7d 	bl	800046c <__aeabi_dcmple>
 801a972:	2800      	cmp	r0, #0
 801a974:	d00d      	beq.n	801a992 <log10+0x4a>
 801a976:	2200      	movs	r2, #0
 801a978:	2300      	movs	r3, #0
 801a97a:	0020      	movs	r0, r4
 801a97c:	0029      	movs	r1, r5
 801a97e:	f7e5 fd65 	bl	800044c <__aeabi_dcmpeq>
 801a982:	2800      	cmp	r0, #0
 801a984:	d008      	beq.n	801a998 <log10+0x50>
 801a986:	f7fd fec5 	bl	8018714 <__errno>
 801a98a:	2322      	movs	r3, #34	@ 0x22
 801a98c:	2600      	movs	r6, #0
 801a98e:	4f07      	ldr	r7, [pc, #28]	@ (801a9ac <log10+0x64>)
 801a990:	6003      	str	r3, [r0, #0]
 801a992:	0030      	movs	r0, r6
 801a994:	0039      	movs	r1, r7
 801a996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a998:	f7fd febc 	bl	8018714 <__errno>
 801a99c:	2321      	movs	r3, #33	@ 0x21
 801a99e:	6003      	str	r3, [r0, #0]
 801a9a0:	4803      	ldr	r0, [pc, #12]	@ (801a9b0 <log10+0x68>)
 801a9a2:	f000 f871 	bl	801aa88 <nan>
 801a9a6:	0006      	movs	r6, r0
 801a9a8:	000f      	movs	r7, r1
 801a9aa:	e7f2      	b.n	801a992 <log10+0x4a>
 801a9ac:	fff00000 	.word	0xfff00000
 801a9b0:	0801c5e6 	.word	0x0801c5e6

0801a9b4 <sqrt>:
 801a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9b6:	0004      	movs	r4, r0
 801a9b8:	000d      	movs	r5, r1
 801a9ba:	f000 f875 	bl	801aaa8 <__ieee754_sqrt>
 801a9be:	0022      	movs	r2, r4
 801a9c0:	0006      	movs	r6, r0
 801a9c2:	000f      	movs	r7, r1
 801a9c4:	002b      	movs	r3, r5
 801a9c6:	0020      	movs	r0, r4
 801a9c8:	0029      	movs	r1, r5
 801a9ca:	f7e8 fc19 	bl	8003200 <__aeabi_dcmpun>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	d113      	bne.n	801a9fa <sqrt+0x46>
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	0020      	movs	r0, r4
 801a9d8:	0029      	movs	r1, r5
 801a9da:	f7e5 fd3d 	bl	8000458 <__aeabi_dcmplt>
 801a9de:	2800      	cmp	r0, #0
 801a9e0:	d00b      	beq.n	801a9fa <sqrt+0x46>
 801a9e2:	f7fd fe97 	bl	8018714 <__errno>
 801a9e6:	2321      	movs	r3, #33	@ 0x21
 801a9e8:	2200      	movs	r2, #0
 801a9ea:	6003      	str	r3, [r0, #0]
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	0010      	movs	r0, r2
 801a9f0:	0019      	movs	r1, r3
 801a9f2:	f7e7 f95d 	bl	8001cb0 <__aeabi_ddiv>
 801a9f6:	0006      	movs	r6, r0
 801a9f8:	000f      	movs	r7, r1
 801a9fa:	0030      	movs	r0, r6
 801a9fc:	0039      	movs	r1, r7
 801a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa00 <expf>:
 801aa00:	b570      	push	{r4, r5, r6, lr}
 801aa02:	1c04      	adds	r4, r0, #0
 801aa04:	f000 fa2a 	bl	801ae5c <__ieee754_expf>
 801aa08:	1c05      	adds	r5, r0, #0
 801aa0a:	1c20      	adds	r0, r4, #0
 801aa0c:	f000 f842 	bl	801aa94 <finitef>
 801aa10:	2800      	cmp	r0, #0
 801aa12:	d00b      	beq.n	801aa2c <expf+0x2c>
 801aa14:	490c      	ldr	r1, [pc, #48]	@ (801aa48 <expf+0x48>)
 801aa16:	1c20      	adds	r0, r4, #0
 801aa18:	f7e5 fd6c 	bl	80004f4 <__aeabi_fcmpgt>
 801aa1c:	2800      	cmp	r0, #0
 801aa1e:	d007      	beq.n	801aa30 <expf+0x30>
 801aa20:	f7fd fe78 	bl	8018714 <__errno>
 801aa24:	25ff      	movs	r5, #255	@ 0xff
 801aa26:	2322      	movs	r3, #34	@ 0x22
 801aa28:	05ed      	lsls	r5, r5, #23
 801aa2a:	6003      	str	r3, [r0, #0]
 801aa2c:	1c28      	adds	r0, r5, #0
 801aa2e:	bd70      	pop	{r4, r5, r6, pc}
 801aa30:	4906      	ldr	r1, [pc, #24]	@ (801aa4c <expf+0x4c>)
 801aa32:	1c20      	adds	r0, r4, #0
 801aa34:	f7e5 fd4a 	bl	80004cc <__aeabi_fcmplt>
 801aa38:	2800      	cmp	r0, #0
 801aa3a:	d0f7      	beq.n	801aa2c <expf+0x2c>
 801aa3c:	f7fd fe6a 	bl	8018714 <__errno>
 801aa40:	2322      	movs	r3, #34	@ 0x22
 801aa42:	2500      	movs	r5, #0
 801aa44:	6003      	str	r3, [r0, #0]
 801aa46:	e7f1      	b.n	801aa2c <expf+0x2c>
 801aa48:	42b17217 	.word	0x42b17217
 801aa4c:	c2cff1b5 	.word	0xc2cff1b5

0801aa50 <sqrtf>:
 801aa50:	b570      	push	{r4, r5, r6, lr}
 801aa52:	1c05      	adds	r5, r0, #0
 801aa54:	f000 f910 	bl	801ac78 <__ieee754_sqrtf>
 801aa58:	1c29      	adds	r1, r5, #0
 801aa5a:	1c04      	adds	r4, r0, #0
 801aa5c:	1c28      	adds	r0, r5, #0
 801aa5e:	f7e6 fcff 	bl	8001460 <__aeabi_fcmpun>
 801aa62:	2800      	cmp	r0, #0
 801aa64:	d10e      	bne.n	801aa84 <sqrtf+0x34>
 801aa66:	2100      	movs	r1, #0
 801aa68:	1c28      	adds	r0, r5, #0
 801aa6a:	f7e5 fd2f 	bl	80004cc <__aeabi_fcmplt>
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	d008      	beq.n	801aa84 <sqrtf+0x34>
 801aa72:	f7fd fe4f 	bl	8018714 <__errno>
 801aa76:	2321      	movs	r3, #33	@ 0x21
 801aa78:	2100      	movs	r1, #0
 801aa7a:	6003      	str	r3, [r0, #0]
 801aa7c:	1c08      	adds	r0, r1, #0
 801aa7e:	f7e6 f827 	bl	8000ad0 <__aeabi_fdiv>
 801aa82:	1c04      	adds	r4, r0, #0
 801aa84:	1c20      	adds	r0, r4, #0
 801aa86:	bd70      	pop	{r4, r5, r6, pc}

0801aa88 <nan>:
 801aa88:	2000      	movs	r0, #0
 801aa8a:	4901      	ldr	r1, [pc, #4]	@ (801aa90 <nan+0x8>)
 801aa8c:	4770      	bx	lr
 801aa8e:	46c0      	nop			@ (mov r8, r8)
 801aa90:	7ff80000 	.word	0x7ff80000

0801aa94 <finitef>:
 801aa94:	22ff      	movs	r2, #255	@ 0xff
 801aa96:	0043      	lsls	r3, r0, #1
 801aa98:	085b      	lsrs	r3, r3, #1
 801aa9a:	2001      	movs	r0, #1
 801aa9c:	05d2      	lsls	r2, r2, #23
 801aa9e:	4293      	cmp	r3, r2
 801aaa0:	db00      	blt.n	801aaa4 <finitef+0x10>
 801aaa2:	2000      	movs	r0, #0
 801aaa4:	4770      	bx	lr
	...

0801aaa8 <__ieee754_sqrt>:
 801aaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaaa:	000a      	movs	r2, r1
 801aaac:	000d      	movs	r5, r1
 801aaae:	496d      	ldr	r1, [pc, #436]	@ (801ac64 <__ieee754_sqrt+0x1bc>)
 801aab0:	0004      	movs	r4, r0
 801aab2:	0003      	movs	r3, r0
 801aab4:	0008      	movs	r0, r1
 801aab6:	b087      	sub	sp, #28
 801aab8:	4028      	ands	r0, r5
 801aaba:	4288      	cmp	r0, r1
 801aabc:	d111      	bne.n	801aae2 <__ieee754_sqrt+0x3a>
 801aabe:	0022      	movs	r2, r4
 801aac0:	002b      	movs	r3, r5
 801aac2:	0020      	movs	r0, r4
 801aac4:	0029      	movs	r1, r5
 801aac6:	f7e7 fd37 	bl	8002538 <__aeabi_dmul>
 801aaca:	0002      	movs	r2, r0
 801aacc:	000b      	movs	r3, r1
 801aace:	0020      	movs	r0, r4
 801aad0:	0029      	movs	r1, r5
 801aad2:	f7e6 fd89 	bl	80015e8 <__aeabi_dadd>
 801aad6:	0004      	movs	r4, r0
 801aad8:	000d      	movs	r5, r1
 801aada:	0020      	movs	r0, r4
 801aadc:	0029      	movs	r1, r5
 801aade:	b007      	add	sp, #28
 801aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aae2:	2d00      	cmp	r5, #0
 801aae4:	dc11      	bgt.n	801ab0a <__ieee754_sqrt+0x62>
 801aae6:	0069      	lsls	r1, r5, #1
 801aae8:	0849      	lsrs	r1, r1, #1
 801aaea:	4321      	orrs	r1, r4
 801aaec:	d0f5      	beq.n	801aada <__ieee754_sqrt+0x32>
 801aaee:	2000      	movs	r0, #0
 801aaf0:	4285      	cmp	r5, r0
 801aaf2:	d010      	beq.n	801ab16 <__ieee754_sqrt+0x6e>
 801aaf4:	0022      	movs	r2, r4
 801aaf6:	002b      	movs	r3, r5
 801aaf8:	0020      	movs	r0, r4
 801aafa:	0029      	movs	r1, r5
 801aafc:	f7e7 ffe4 	bl	8002ac8 <__aeabi_dsub>
 801ab00:	0002      	movs	r2, r0
 801ab02:	000b      	movs	r3, r1
 801ab04:	f7e7 f8d4 	bl	8001cb0 <__aeabi_ddiv>
 801ab08:	e7e5      	b.n	801aad6 <__ieee754_sqrt+0x2e>
 801ab0a:	1528      	asrs	r0, r5, #20
 801ab0c:	d115      	bne.n	801ab3a <__ieee754_sqrt+0x92>
 801ab0e:	2480      	movs	r4, #128	@ 0x80
 801ab10:	2100      	movs	r1, #0
 801ab12:	0364      	lsls	r4, r4, #13
 801ab14:	e007      	b.n	801ab26 <__ieee754_sqrt+0x7e>
 801ab16:	0ada      	lsrs	r2, r3, #11
 801ab18:	3815      	subs	r0, #21
 801ab1a:	055b      	lsls	r3, r3, #21
 801ab1c:	2a00      	cmp	r2, #0
 801ab1e:	d0fa      	beq.n	801ab16 <__ieee754_sqrt+0x6e>
 801ab20:	e7f5      	b.n	801ab0e <__ieee754_sqrt+0x66>
 801ab22:	0052      	lsls	r2, r2, #1
 801ab24:	3101      	adds	r1, #1
 801ab26:	4222      	tst	r2, r4
 801ab28:	d0fb      	beq.n	801ab22 <__ieee754_sqrt+0x7a>
 801ab2a:	1e4c      	subs	r4, r1, #1
 801ab2c:	1b00      	subs	r0, r0, r4
 801ab2e:	2420      	movs	r4, #32
 801ab30:	001d      	movs	r5, r3
 801ab32:	1a64      	subs	r4, r4, r1
 801ab34:	40e5      	lsrs	r5, r4
 801ab36:	408b      	lsls	r3, r1
 801ab38:	432a      	orrs	r2, r5
 801ab3a:	494b      	ldr	r1, [pc, #300]	@ (801ac68 <__ieee754_sqrt+0x1c0>)
 801ab3c:	0312      	lsls	r2, r2, #12
 801ab3e:	1844      	adds	r4, r0, r1
 801ab40:	2180      	movs	r1, #128	@ 0x80
 801ab42:	0b12      	lsrs	r2, r2, #12
 801ab44:	0349      	lsls	r1, r1, #13
 801ab46:	4311      	orrs	r1, r2
 801ab48:	07c0      	lsls	r0, r0, #31
 801ab4a:	d403      	bmi.n	801ab54 <__ieee754_sqrt+0xac>
 801ab4c:	0fda      	lsrs	r2, r3, #31
 801ab4e:	0049      	lsls	r1, r1, #1
 801ab50:	1851      	adds	r1, r2, r1
 801ab52:	005b      	lsls	r3, r3, #1
 801ab54:	2500      	movs	r5, #0
 801ab56:	1062      	asrs	r2, r4, #1
 801ab58:	0049      	lsls	r1, r1, #1
 801ab5a:	2480      	movs	r4, #128	@ 0x80
 801ab5c:	9205      	str	r2, [sp, #20]
 801ab5e:	0fda      	lsrs	r2, r3, #31
 801ab60:	1852      	adds	r2, r2, r1
 801ab62:	2016      	movs	r0, #22
 801ab64:	0029      	movs	r1, r5
 801ab66:	005b      	lsls	r3, r3, #1
 801ab68:	03a4      	lsls	r4, r4, #14
 801ab6a:	190e      	adds	r6, r1, r4
 801ab6c:	4296      	cmp	r6, r2
 801ab6e:	dc02      	bgt.n	801ab76 <__ieee754_sqrt+0xce>
 801ab70:	1931      	adds	r1, r6, r4
 801ab72:	1b92      	subs	r2, r2, r6
 801ab74:	192d      	adds	r5, r5, r4
 801ab76:	0fde      	lsrs	r6, r3, #31
 801ab78:	0052      	lsls	r2, r2, #1
 801ab7a:	3801      	subs	r0, #1
 801ab7c:	1992      	adds	r2, r2, r6
 801ab7e:	005b      	lsls	r3, r3, #1
 801ab80:	0864      	lsrs	r4, r4, #1
 801ab82:	2800      	cmp	r0, #0
 801ab84:	d1f1      	bne.n	801ab6a <__ieee754_sqrt+0xc2>
 801ab86:	2620      	movs	r6, #32
 801ab88:	2780      	movs	r7, #128	@ 0x80
 801ab8a:	0004      	movs	r4, r0
 801ab8c:	9604      	str	r6, [sp, #16]
 801ab8e:	063f      	lsls	r7, r7, #24
 801ab90:	19c6      	adds	r6, r0, r7
 801ab92:	46b4      	mov	ip, r6
 801ab94:	4291      	cmp	r1, r2
 801ab96:	db02      	blt.n	801ab9e <__ieee754_sqrt+0xf6>
 801ab98:	d114      	bne.n	801abc4 <__ieee754_sqrt+0x11c>
 801ab9a:	429e      	cmp	r6, r3
 801ab9c:	d812      	bhi.n	801abc4 <__ieee754_sqrt+0x11c>
 801ab9e:	4660      	mov	r0, ip
 801aba0:	4666      	mov	r6, ip
 801aba2:	19c0      	adds	r0, r0, r7
 801aba4:	9100      	str	r1, [sp, #0]
 801aba6:	2e00      	cmp	r6, #0
 801aba8:	da03      	bge.n	801abb2 <__ieee754_sqrt+0x10a>
 801abaa:	43c6      	mvns	r6, r0
 801abac:	0ff6      	lsrs	r6, r6, #31
 801abae:	198e      	adds	r6, r1, r6
 801abb0:	9600      	str	r6, [sp, #0]
 801abb2:	1a52      	subs	r2, r2, r1
 801abb4:	4563      	cmp	r3, ip
 801abb6:	4189      	sbcs	r1, r1
 801abb8:	4249      	negs	r1, r1
 801abba:	1a52      	subs	r2, r2, r1
 801abbc:	4661      	mov	r1, ip
 801abbe:	1a5b      	subs	r3, r3, r1
 801abc0:	9900      	ldr	r1, [sp, #0]
 801abc2:	19e4      	adds	r4, r4, r7
 801abc4:	0fde      	lsrs	r6, r3, #31
 801abc6:	0052      	lsls	r2, r2, #1
 801abc8:	1992      	adds	r2, r2, r6
 801abca:	9e04      	ldr	r6, [sp, #16]
 801abcc:	005b      	lsls	r3, r3, #1
 801abce:	3e01      	subs	r6, #1
 801abd0:	087f      	lsrs	r7, r7, #1
 801abd2:	9604      	str	r6, [sp, #16]
 801abd4:	2e00      	cmp	r6, #0
 801abd6:	d1db      	bne.n	801ab90 <__ieee754_sqrt+0xe8>
 801abd8:	431a      	orrs	r2, r3
 801abda:	d01f      	beq.n	801ac1c <__ieee754_sqrt+0x174>
 801abdc:	4e23      	ldr	r6, [pc, #140]	@ (801ac6c <__ieee754_sqrt+0x1c4>)
 801abde:	4f24      	ldr	r7, [pc, #144]	@ (801ac70 <__ieee754_sqrt+0x1c8>)
 801abe0:	6830      	ldr	r0, [r6, #0]
 801abe2:	6871      	ldr	r1, [r6, #4]
 801abe4:	683a      	ldr	r2, [r7, #0]
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	9200      	str	r2, [sp, #0]
 801abea:	9301      	str	r3, [sp, #4]
 801abec:	6832      	ldr	r2, [r6, #0]
 801abee:	6873      	ldr	r3, [r6, #4]
 801abf0:	9202      	str	r2, [sp, #8]
 801abf2:	9303      	str	r3, [sp, #12]
 801abf4:	9a00      	ldr	r2, [sp, #0]
 801abf6:	9b01      	ldr	r3, [sp, #4]
 801abf8:	f7e7 ff66 	bl	8002ac8 <__aeabi_dsub>
 801abfc:	0002      	movs	r2, r0
 801abfe:	000b      	movs	r3, r1
 801ac00:	9802      	ldr	r0, [sp, #8]
 801ac02:	9903      	ldr	r1, [sp, #12]
 801ac04:	f7e5 fc32 	bl	800046c <__aeabi_dcmple>
 801ac08:	2800      	cmp	r0, #0
 801ac0a:	d007      	beq.n	801ac1c <__ieee754_sqrt+0x174>
 801ac0c:	6830      	ldr	r0, [r6, #0]
 801ac0e:	6871      	ldr	r1, [r6, #4]
 801ac10:	683a      	ldr	r2, [r7, #0]
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	1c67      	adds	r7, r4, #1
 801ac16:	d10f      	bne.n	801ac38 <__ieee754_sqrt+0x190>
 801ac18:	9c04      	ldr	r4, [sp, #16]
 801ac1a:	3501      	adds	r5, #1
 801ac1c:	4b15      	ldr	r3, [pc, #84]	@ (801ac74 <__ieee754_sqrt+0x1cc>)
 801ac1e:	106a      	asrs	r2, r5, #1
 801ac20:	18d2      	adds	r2, r2, r3
 801ac22:	0863      	lsrs	r3, r4, #1
 801ac24:	07ed      	lsls	r5, r5, #31
 801ac26:	d502      	bpl.n	801ac2e <__ieee754_sqrt+0x186>
 801ac28:	2180      	movs	r1, #128	@ 0x80
 801ac2a:	0609      	lsls	r1, r1, #24
 801ac2c:	430b      	orrs	r3, r1
 801ac2e:	9905      	ldr	r1, [sp, #20]
 801ac30:	001c      	movs	r4, r3
 801ac32:	0509      	lsls	r1, r1, #20
 801ac34:	188d      	adds	r5, r1, r2
 801ac36:	e750      	b.n	801aada <__ieee754_sqrt+0x32>
 801ac38:	f7e6 fcd6 	bl	80015e8 <__aeabi_dadd>
 801ac3c:	6877      	ldr	r7, [r6, #4]
 801ac3e:	6836      	ldr	r6, [r6, #0]
 801ac40:	0002      	movs	r2, r0
 801ac42:	000b      	movs	r3, r1
 801ac44:	0030      	movs	r0, r6
 801ac46:	0039      	movs	r1, r7
 801ac48:	f7e5 fc06 	bl	8000458 <__aeabi_dcmplt>
 801ac4c:	2800      	cmp	r0, #0
 801ac4e:	d004      	beq.n	801ac5a <__ieee754_sqrt+0x1b2>
 801ac50:	3402      	adds	r4, #2
 801ac52:	4263      	negs	r3, r4
 801ac54:	4163      	adcs	r3, r4
 801ac56:	18ed      	adds	r5, r5, r3
 801ac58:	e7e0      	b.n	801ac1c <__ieee754_sqrt+0x174>
 801ac5a:	2301      	movs	r3, #1
 801ac5c:	3401      	adds	r4, #1
 801ac5e:	439c      	bics	r4, r3
 801ac60:	e7dc      	b.n	801ac1c <__ieee754_sqrt+0x174>
 801ac62:	46c0      	nop			@ (mov r8, r8)
 801ac64:	7ff00000 	.word	0x7ff00000
 801ac68:	fffffc01 	.word	0xfffffc01
 801ac6c:	200003b8 	.word	0x200003b8
 801ac70:	200003b0 	.word	0x200003b0
 801ac74:	3fe00000 	.word	0x3fe00000

0801ac78 <__ieee754_sqrtf>:
 801ac78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac7a:	0003      	movs	r3, r0
 801ac7c:	0042      	lsls	r2, r0, #1
 801ac7e:	1c04      	adds	r4, r0, #0
 801ac80:	20ff      	movs	r0, #255	@ 0xff
 801ac82:	0852      	lsrs	r2, r2, #1
 801ac84:	05c0      	lsls	r0, r0, #23
 801ac86:	4282      	cmp	r2, r0
 801ac88:	d30a      	bcc.n	801aca0 <__ieee754_sqrtf+0x28>
 801ac8a:	1c21      	adds	r1, r4, #0
 801ac8c:	1c20      	adds	r0, r4, #0
 801ac8e:	f7e6 f905 	bl	8000e9c <__aeabi_fmul>
 801ac92:	1c01      	adds	r1, r0, #0
 801ac94:	1c20      	adds	r0, r4, #0
 801ac96:	f7e5 fd91 	bl	80007bc <__aeabi_fadd>
 801ac9a:	1c04      	adds	r4, r0, #0
 801ac9c:	1c20      	adds	r0, r4, #0
 801ac9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801aca0:	2a00      	cmp	r2, #0
 801aca2:	d0fb      	beq.n	801ac9c <__ieee754_sqrtf+0x24>
 801aca4:	2c00      	cmp	r4, #0
 801aca6:	da07      	bge.n	801acb8 <__ieee754_sqrtf+0x40>
 801aca8:	1c21      	adds	r1, r4, #0
 801acaa:	1c20      	adds	r0, r4, #0
 801acac:	f7e6 fa34 	bl	8001118 <__aeabi_fsub>
 801acb0:	1c01      	adds	r1, r0, #0
 801acb2:	f7e5 ff0d 	bl	8000ad0 <__aeabi_fdiv>
 801acb6:	e7f0      	b.n	801ac9a <__ieee754_sqrtf+0x22>
 801acb8:	0022      	movs	r2, r4
 801acba:	15e1      	asrs	r1, r4, #23
 801acbc:	4002      	ands	r2, r0
 801acbe:	4204      	tst	r4, r0
 801acc0:	d046      	beq.n	801ad50 <__ieee754_sqrtf+0xd8>
 801acc2:	2280      	movs	r2, #128	@ 0x80
 801acc4:	000f      	movs	r7, r1
 801acc6:	025b      	lsls	r3, r3, #9
 801acc8:	0a5b      	lsrs	r3, r3, #9
 801acca:	0412      	lsls	r2, r2, #16
 801accc:	3f7f      	subs	r7, #127	@ 0x7f
 801acce:	4313      	orrs	r3, r2
 801acd0:	07c9      	lsls	r1, r1, #31
 801acd2:	d400      	bmi.n	801acd6 <__ieee754_sqrtf+0x5e>
 801acd4:	005b      	lsls	r3, r3, #1
 801acd6:	2400      	movs	r4, #0
 801acd8:	2180      	movs	r1, #128	@ 0x80
 801acda:	2019      	movs	r0, #25
 801acdc:	0026      	movs	r6, r4
 801acde:	107f      	asrs	r7, r7, #1
 801ace0:	005b      	lsls	r3, r3, #1
 801ace2:	0449      	lsls	r1, r1, #17
 801ace4:	1875      	adds	r5, r6, r1
 801ace6:	001a      	movs	r2, r3
 801ace8:	429d      	cmp	r5, r3
 801acea:	dc02      	bgt.n	801acf2 <__ieee754_sqrtf+0x7a>
 801acec:	186e      	adds	r6, r5, r1
 801acee:	1b5a      	subs	r2, r3, r5
 801acf0:	1864      	adds	r4, r4, r1
 801acf2:	3801      	subs	r0, #1
 801acf4:	0053      	lsls	r3, r2, #1
 801acf6:	0849      	lsrs	r1, r1, #1
 801acf8:	2800      	cmp	r0, #0
 801acfa:	d1f3      	bne.n	801ace4 <__ieee754_sqrtf+0x6c>
 801acfc:	2a00      	cmp	r2, #0
 801acfe:	d019      	beq.n	801ad34 <__ieee754_sqrtf+0xbc>
 801ad00:	4d17      	ldr	r5, [pc, #92]	@ (801ad60 <__ieee754_sqrtf+0xe8>)
 801ad02:	4e18      	ldr	r6, [pc, #96]	@ (801ad64 <__ieee754_sqrtf+0xec>)
 801ad04:	6828      	ldr	r0, [r5, #0]
 801ad06:	6831      	ldr	r1, [r6, #0]
 801ad08:	682b      	ldr	r3, [r5, #0]
 801ad0a:	9301      	str	r3, [sp, #4]
 801ad0c:	f7e6 fa04 	bl	8001118 <__aeabi_fsub>
 801ad10:	1c01      	adds	r1, r0, #0
 801ad12:	9801      	ldr	r0, [sp, #4]
 801ad14:	f7e5 fbe4 	bl	80004e0 <__aeabi_fcmple>
 801ad18:	2800      	cmp	r0, #0
 801ad1a:	d00b      	beq.n	801ad34 <__ieee754_sqrtf+0xbc>
 801ad1c:	6828      	ldr	r0, [r5, #0]
 801ad1e:	6831      	ldr	r1, [r6, #0]
 801ad20:	f7e5 fd4c 	bl	80007bc <__aeabi_fadd>
 801ad24:	682d      	ldr	r5, [r5, #0]
 801ad26:	1c01      	adds	r1, r0, #0
 801ad28:	1c28      	adds	r0, r5, #0
 801ad2a:	f7e5 fbcf 	bl	80004cc <__aeabi_fcmplt>
 801ad2e:	2800      	cmp	r0, #0
 801ad30:	d011      	beq.n	801ad56 <__ieee754_sqrtf+0xde>
 801ad32:	3402      	adds	r4, #2
 801ad34:	23fc      	movs	r3, #252	@ 0xfc
 801ad36:	1064      	asrs	r4, r4, #1
 801ad38:	059b      	lsls	r3, r3, #22
 801ad3a:	18e3      	adds	r3, r4, r3
 801ad3c:	05fc      	lsls	r4, r7, #23
 801ad3e:	18e4      	adds	r4, r4, r3
 801ad40:	e7ac      	b.n	801ac9c <__ieee754_sqrtf+0x24>
 801ad42:	005b      	lsls	r3, r3, #1
 801ad44:	3201      	adds	r2, #1
 801ad46:	4203      	tst	r3, r0
 801ad48:	d0fb      	beq.n	801ad42 <__ieee754_sqrtf+0xca>
 801ad4a:	3a01      	subs	r2, #1
 801ad4c:	1a89      	subs	r1, r1, r2
 801ad4e:	e7b8      	b.n	801acc2 <__ieee754_sqrtf+0x4a>
 801ad50:	2080      	movs	r0, #128	@ 0x80
 801ad52:	0400      	lsls	r0, r0, #16
 801ad54:	e7f7      	b.n	801ad46 <__ieee754_sqrtf+0xce>
 801ad56:	2301      	movs	r3, #1
 801ad58:	3401      	adds	r4, #1
 801ad5a:	439c      	bics	r4, r3
 801ad5c:	e7ea      	b.n	801ad34 <__ieee754_sqrtf+0xbc>
 801ad5e:	46c0      	nop			@ (mov r8, r8)
 801ad60:	200003c4 	.word	0x200003c4
 801ad64:	200003c0 	.word	0x200003c0

0801ad68 <__ieee754_log10>:
 801ad68:	2280      	movs	r2, #128	@ 0x80
 801ad6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad6c:	000b      	movs	r3, r1
 801ad6e:	0004      	movs	r4, r0
 801ad70:	000d      	movs	r5, r1
 801ad72:	b085      	sub	sp, #20
 801ad74:	0352      	lsls	r2, r2, #13
 801ad76:	4291      	cmp	r1, r2
 801ad78:	da26      	bge.n	801adc8 <__ieee754_log10+0x60>
 801ad7a:	004a      	lsls	r2, r1, #1
 801ad7c:	0852      	lsrs	r2, r2, #1
 801ad7e:	4302      	orrs	r2, r0
 801ad80:	d107      	bne.n	801ad92 <__ieee754_log10+0x2a>
 801ad82:	2200      	movs	r2, #0
 801ad84:	2300      	movs	r3, #0
 801ad86:	2000      	movs	r0, #0
 801ad88:	4929      	ldr	r1, [pc, #164]	@ (801ae30 <__ieee754_log10+0xc8>)
 801ad8a:	f7e6 ff91 	bl	8001cb0 <__aeabi_ddiv>
 801ad8e:	b005      	add	sp, #20
 801ad90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad92:	2900      	cmp	r1, #0
 801ad94:	da05      	bge.n	801ada2 <__ieee754_log10+0x3a>
 801ad96:	0002      	movs	r2, r0
 801ad98:	f7e7 fe96 	bl	8002ac8 <__aeabi_dsub>
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	2300      	movs	r3, #0
 801ada0:	e7f3      	b.n	801ad8a <__ieee754_log10+0x22>
 801ada2:	2200      	movs	r2, #0
 801ada4:	4b23      	ldr	r3, [pc, #140]	@ (801ae34 <__ieee754_log10+0xcc>)
 801ada6:	f7e7 fbc7 	bl	8002538 <__aeabi_dmul>
 801adaa:	2236      	movs	r2, #54	@ 0x36
 801adac:	0004      	movs	r4, r0
 801adae:	000d      	movs	r5, r1
 801adb0:	000b      	movs	r3, r1
 801adb2:	4252      	negs	r2, r2
 801adb4:	4920      	ldr	r1, [pc, #128]	@ (801ae38 <__ieee754_log10+0xd0>)
 801adb6:	428b      	cmp	r3, r1
 801adb8:	dd08      	ble.n	801adcc <__ieee754_log10+0x64>
 801adba:	0022      	movs	r2, r4
 801adbc:	002b      	movs	r3, r5
 801adbe:	0020      	movs	r0, r4
 801adc0:	0029      	movs	r1, r5
 801adc2:	f7e6 fc11 	bl	80015e8 <__aeabi_dadd>
 801adc6:	e7e2      	b.n	801ad8e <__ieee754_log10+0x26>
 801adc8:	2200      	movs	r2, #0
 801adca:	e7f3      	b.n	801adb4 <__ieee754_log10+0x4c>
 801adcc:	491b      	ldr	r1, [pc, #108]	@ (801ae3c <__ieee754_log10+0xd4>)
 801adce:	1518      	asrs	r0, r3, #20
 801add0:	1840      	adds	r0, r0, r1
 801add2:	1880      	adds	r0, r0, r2
 801add4:	0fc2      	lsrs	r2, r0, #31
 801add6:	031b      	lsls	r3, r3, #12
 801add8:	0b1b      	lsrs	r3, r3, #12
 801adda:	1880      	adds	r0, r0, r2
 801addc:	9203      	str	r2, [sp, #12]
 801adde:	9300      	str	r3, [sp, #0]
 801ade0:	f7e8 fa6c 	bl	80032bc <__aeabi_i2d>
 801ade4:	9a03      	ldr	r2, [sp, #12]
 801ade6:	4b16      	ldr	r3, [pc, #88]	@ (801ae40 <__ieee754_log10+0xd8>)
 801ade8:	0006      	movs	r6, r0
 801adea:	1a9b      	subs	r3, r3, r2
 801adec:	9a00      	ldr	r2, [sp, #0]
 801adee:	051b      	lsls	r3, r3, #20
 801adf0:	431a      	orrs	r2, r3
 801adf2:	0015      	movs	r5, r2
 801adf4:	4b13      	ldr	r3, [pc, #76]	@ (801ae44 <__ieee754_log10+0xdc>)
 801adf6:	4a14      	ldr	r2, [pc, #80]	@ (801ae48 <__ieee754_log10+0xe0>)
 801adf8:	000f      	movs	r7, r1
 801adfa:	f7e7 fb9d 	bl	8002538 <__aeabi_dmul>
 801adfe:	9000      	str	r0, [sp, #0]
 801ae00:	9101      	str	r1, [sp, #4]
 801ae02:	0020      	movs	r0, r4
 801ae04:	0029      	movs	r1, r5
 801ae06:	f000 f93b 	bl	801b080 <__ieee754_log>
 801ae0a:	4a10      	ldr	r2, [pc, #64]	@ (801ae4c <__ieee754_log10+0xe4>)
 801ae0c:	4b10      	ldr	r3, [pc, #64]	@ (801ae50 <__ieee754_log10+0xe8>)
 801ae0e:	f7e7 fb93 	bl	8002538 <__aeabi_dmul>
 801ae12:	9a00      	ldr	r2, [sp, #0]
 801ae14:	9b01      	ldr	r3, [sp, #4]
 801ae16:	f7e6 fbe7 	bl	80015e8 <__aeabi_dadd>
 801ae1a:	4a0e      	ldr	r2, [pc, #56]	@ (801ae54 <__ieee754_log10+0xec>)
 801ae1c:	4b0e      	ldr	r3, [pc, #56]	@ (801ae58 <__ieee754_log10+0xf0>)
 801ae1e:	0004      	movs	r4, r0
 801ae20:	000d      	movs	r5, r1
 801ae22:	0030      	movs	r0, r6
 801ae24:	0039      	movs	r1, r7
 801ae26:	f7e7 fb87 	bl	8002538 <__aeabi_dmul>
 801ae2a:	0002      	movs	r2, r0
 801ae2c:	000b      	movs	r3, r1
 801ae2e:	e7c6      	b.n	801adbe <__ieee754_log10+0x56>
 801ae30:	c3500000 	.word	0xc3500000
 801ae34:	43500000 	.word	0x43500000
 801ae38:	7fefffff 	.word	0x7fefffff
 801ae3c:	fffffc01 	.word	0xfffffc01
 801ae40:	000003ff 	.word	0x000003ff
 801ae44:	3d59fef3 	.word	0x3d59fef3
 801ae48:	11f12b36 	.word	0x11f12b36
 801ae4c:	1526e50e 	.word	0x1526e50e
 801ae50:	3fdbcb7b 	.word	0x3fdbcb7b
 801ae54:	509f6000 	.word	0x509f6000
 801ae58:	3fd34413 	.word	0x3fd34413

0801ae5c <__ieee754_expf>:
 801ae5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae5e:	21ff      	movs	r1, #255	@ 0xff
 801ae60:	0043      	lsls	r3, r0, #1
 801ae62:	1c04      	adds	r4, r0, #0
 801ae64:	085b      	lsrs	r3, r3, #1
 801ae66:	05c9      	lsls	r1, r1, #23
 801ae68:	428b      	cmp	r3, r1
 801ae6a:	d904      	bls.n	801ae76 <__ieee754_expf+0x1a>
 801ae6c:	1c01      	adds	r1, r0, #0
 801ae6e:	1c20      	adds	r0, r4, #0
 801ae70:	f7e5 fca4 	bl	80007bc <__aeabi_fadd>
 801ae74:	e00d      	b.n	801ae92 <__ieee754_expf+0x36>
 801ae76:	0fc6      	lsrs	r6, r0, #31
 801ae78:	428b      	cmp	r3, r1
 801ae7a:	d104      	bne.n	801ae86 <__ieee754_expf+0x2a>
 801ae7c:	2e00      	cmp	r6, #0
 801ae7e:	d000      	beq.n	801ae82 <__ieee754_expf+0x26>
 801ae80:	e0ba      	b.n	801aff8 <__ieee754_expf+0x19c>
 801ae82:	1c20      	adds	r0, r4, #0
 801ae84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ae86:	495d      	ldr	r1, [pc, #372]	@ (801affc <__ieee754_expf+0x1a0>)
 801ae88:	4288      	cmp	r0, r1
 801ae8a:	dd04      	ble.n	801ae96 <__ieee754_expf+0x3a>
 801ae8c:	2000      	movs	r0, #0
 801ae8e:	f000 f8f1 	bl	801b074 <__math_oflowf>
 801ae92:	1c04      	adds	r4, r0, #0
 801ae94:	e7f5      	b.n	801ae82 <__ieee754_expf+0x26>
 801ae96:	2800      	cmp	r0, #0
 801ae98:	da06      	bge.n	801aea8 <__ieee754_expf+0x4c>
 801ae9a:	4a59      	ldr	r2, [pc, #356]	@ (801b000 <__ieee754_expf+0x1a4>)
 801ae9c:	4293      	cmp	r3, r2
 801ae9e:	d903      	bls.n	801aea8 <__ieee754_expf+0x4c>
 801aea0:	2000      	movs	r0, #0
 801aea2:	f000 f8e1 	bl	801b068 <__math_uflowf>
 801aea6:	e7f4      	b.n	801ae92 <__ieee754_expf+0x36>
 801aea8:	4a56      	ldr	r2, [pc, #344]	@ (801b004 <__ieee754_expf+0x1a8>)
 801aeaa:	4293      	cmp	r3, r2
 801aeac:	d96e      	bls.n	801af8c <__ieee754_expf+0x130>
 801aeae:	4a56      	ldr	r2, [pc, #344]	@ (801b008 <__ieee754_expf+0x1ac>)
 801aeb0:	00b5      	lsls	r5, r6, #2
 801aeb2:	4293      	cmp	r3, r2
 801aeb4:	d84e      	bhi.n	801af54 <__ieee754_expf+0xf8>
 801aeb6:	4b55      	ldr	r3, [pc, #340]	@ (801b00c <__ieee754_expf+0x1b0>)
 801aeb8:	1c20      	adds	r0, r4, #0
 801aeba:	5959      	ldr	r1, [r3, r5]
 801aebc:	f7e6 f92c 	bl	8001118 <__aeabi_fsub>
 801aec0:	4b53      	ldr	r3, [pc, #332]	@ (801b010 <__ieee754_expf+0x1b4>)
 801aec2:	1c07      	adds	r7, r0, #0
 801aec4:	595b      	ldr	r3, [r3, r5]
 801aec6:	2501      	movs	r5, #1
 801aec8:	1bad      	subs	r5, r5, r6
 801aeca:	9300      	str	r3, [sp, #0]
 801aecc:	1bad      	subs	r5, r5, r6
 801aece:	9900      	ldr	r1, [sp, #0]
 801aed0:	1c38      	adds	r0, r7, #0
 801aed2:	f7e6 f921 	bl	8001118 <__aeabi_fsub>
 801aed6:	1c04      	adds	r4, r0, #0
 801aed8:	1c21      	adds	r1, r4, #0
 801aeda:	1c20      	adds	r0, r4, #0
 801aedc:	f7e5 ffde 	bl	8000e9c <__aeabi_fmul>
 801aee0:	494c      	ldr	r1, [pc, #304]	@ (801b014 <__ieee754_expf+0x1b8>)
 801aee2:	1c06      	adds	r6, r0, #0
 801aee4:	f7e5 ffda 	bl	8000e9c <__aeabi_fmul>
 801aee8:	494b      	ldr	r1, [pc, #300]	@ (801b018 <__ieee754_expf+0x1bc>)
 801aeea:	f7e6 f915 	bl	8001118 <__aeabi_fsub>
 801aeee:	1c31      	adds	r1, r6, #0
 801aef0:	f7e5 ffd4 	bl	8000e9c <__aeabi_fmul>
 801aef4:	4949      	ldr	r1, [pc, #292]	@ (801b01c <__ieee754_expf+0x1c0>)
 801aef6:	f7e5 fc61 	bl	80007bc <__aeabi_fadd>
 801aefa:	1c31      	adds	r1, r6, #0
 801aefc:	f7e5 ffce 	bl	8000e9c <__aeabi_fmul>
 801af00:	4947      	ldr	r1, [pc, #284]	@ (801b020 <__ieee754_expf+0x1c4>)
 801af02:	f7e6 f909 	bl	8001118 <__aeabi_fsub>
 801af06:	1c31      	adds	r1, r6, #0
 801af08:	f7e5 ffc8 	bl	8000e9c <__aeabi_fmul>
 801af0c:	4945      	ldr	r1, [pc, #276]	@ (801b024 <__ieee754_expf+0x1c8>)
 801af0e:	f7e5 fc55 	bl	80007bc <__aeabi_fadd>
 801af12:	1c31      	adds	r1, r6, #0
 801af14:	f7e5 ffc2 	bl	8000e9c <__aeabi_fmul>
 801af18:	1c01      	adds	r1, r0, #0
 801af1a:	1c20      	adds	r0, r4, #0
 801af1c:	f7e6 f8fc 	bl	8001118 <__aeabi_fsub>
 801af20:	1c01      	adds	r1, r0, #0
 801af22:	1c06      	adds	r6, r0, #0
 801af24:	1c20      	adds	r0, r4, #0
 801af26:	f7e5 ffb9 	bl	8000e9c <__aeabi_fmul>
 801af2a:	9001      	str	r0, [sp, #4]
 801af2c:	2d00      	cmp	r5, #0
 801af2e:	d140      	bne.n	801afb2 <__ieee754_expf+0x156>
 801af30:	2180      	movs	r1, #128	@ 0x80
 801af32:	1c30      	adds	r0, r6, #0
 801af34:	05c9      	lsls	r1, r1, #23
 801af36:	f7e6 f8ef 	bl	8001118 <__aeabi_fsub>
 801af3a:	1c01      	adds	r1, r0, #0
 801af3c:	9801      	ldr	r0, [sp, #4]
 801af3e:	f7e5 fdc7 	bl	8000ad0 <__aeabi_fdiv>
 801af42:	1c21      	adds	r1, r4, #0
 801af44:	f7e6 f8e8 	bl	8001118 <__aeabi_fsub>
 801af48:	1c01      	adds	r1, r0, #0
 801af4a:	20fe      	movs	r0, #254	@ 0xfe
 801af4c:	0580      	lsls	r0, r0, #22
 801af4e:	f7e6 f8e3 	bl	8001118 <__aeabi_fsub>
 801af52:	e79e      	b.n	801ae92 <__ieee754_expf+0x36>
 801af54:	4934      	ldr	r1, [pc, #208]	@ (801b028 <__ieee754_expf+0x1cc>)
 801af56:	1c20      	adds	r0, r4, #0
 801af58:	f7e5 ffa0 	bl	8000e9c <__aeabi_fmul>
 801af5c:	4b33      	ldr	r3, [pc, #204]	@ (801b02c <__ieee754_expf+0x1d0>)
 801af5e:	5959      	ldr	r1, [r3, r5]
 801af60:	f7e5 fc2c 	bl	80007bc <__aeabi_fadd>
 801af64:	f7e6 fa92 	bl	800148c <__aeabi_f2iz>
 801af68:	0005      	movs	r5, r0
 801af6a:	f7e6 faaf 	bl	80014cc <__aeabi_i2f>
 801af6e:	4930      	ldr	r1, [pc, #192]	@ (801b030 <__ieee754_expf+0x1d4>)
 801af70:	1c06      	adds	r6, r0, #0
 801af72:	f7e5 ff93 	bl	8000e9c <__aeabi_fmul>
 801af76:	1c01      	adds	r1, r0, #0
 801af78:	1c20      	adds	r0, r4, #0
 801af7a:	f7e6 f8cd 	bl	8001118 <__aeabi_fsub>
 801af7e:	492d      	ldr	r1, [pc, #180]	@ (801b034 <__ieee754_expf+0x1d8>)
 801af80:	1c07      	adds	r7, r0, #0
 801af82:	1c30      	adds	r0, r6, #0
 801af84:	f7e5 ff8a 	bl	8000e9c <__aeabi_fmul>
 801af88:	9000      	str	r0, [sp, #0]
 801af8a:	e7a0      	b.n	801aece <__ieee754_expf+0x72>
 801af8c:	22d0      	movs	r2, #208	@ 0xd0
 801af8e:	0592      	lsls	r2, r2, #22
 801af90:	4293      	cmp	r3, r2
 801af92:	d20c      	bcs.n	801afae <__ieee754_expf+0x152>
 801af94:	4928      	ldr	r1, [pc, #160]	@ (801b038 <__ieee754_expf+0x1dc>)
 801af96:	1c20      	adds	r0, r4, #0
 801af98:	f7e5 fc10 	bl	80007bc <__aeabi_fadd>
 801af9c:	21fe      	movs	r1, #254	@ 0xfe
 801af9e:	0589      	lsls	r1, r1, #22
 801afa0:	f7e5 faa8 	bl	80004f4 <__aeabi_fcmpgt>
 801afa4:	1e05      	subs	r5, r0, #0
 801afa6:	d097      	beq.n	801aed8 <__ieee754_expf+0x7c>
 801afa8:	21fe      	movs	r1, #254	@ 0xfe
 801afaa:	0589      	lsls	r1, r1, #22
 801afac:	e75f      	b.n	801ae6e <__ieee754_expf+0x12>
 801afae:	2500      	movs	r5, #0
 801afb0:	e792      	b.n	801aed8 <__ieee754_expf+0x7c>
 801afb2:	2080      	movs	r0, #128	@ 0x80
 801afb4:	1c31      	adds	r1, r6, #0
 801afb6:	05c0      	lsls	r0, r0, #23
 801afb8:	f7e6 f8ae 	bl	8001118 <__aeabi_fsub>
 801afbc:	1c01      	adds	r1, r0, #0
 801afbe:	9801      	ldr	r0, [sp, #4]
 801afc0:	f7e5 fd86 	bl	8000ad0 <__aeabi_fdiv>
 801afc4:	1c01      	adds	r1, r0, #0
 801afc6:	9800      	ldr	r0, [sp, #0]
 801afc8:	f7e6 f8a6 	bl	8001118 <__aeabi_fsub>
 801afcc:	1c39      	adds	r1, r7, #0
 801afce:	f7e6 f8a3 	bl	8001118 <__aeabi_fsub>
 801afd2:	1c01      	adds	r1, r0, #0
 801afd4:	20fe      	movs	r0, #254	@ 0xfe
 801afd6:	0580      	lsls	r0, r0, #22
 801afd8:	f7e6 f89e 	bl	8001118 <__aeabi_fsub>
 801afdc:	002b      	movs	r3, r5
 801afde:	337d      	adds	r3, #125	@ 0x7d
 801afe0:	db02      	blt.n	801afe8 <__ieee754_expf+0x18c>
 801afe2:	05ec      	lsls	r4, r5, #23
 801afe4:	1824      	adds	r4, r4, r0
 801afe6:	e74c      	b.n	801ae82 <__ieee754_expf+0x26>
 801afe8:	21d8      	movs	r1, #216	@ 0xd8
 801afea:	3564      	adds	r5, #100	@ 0x64
 801afec:	05ed      	lsls	r5, r5, #23
 801afee:	1828      	adds	r0, r5, r0
 801aff0:	0509      	lsls	r1, r1, #20
 801aff2:	f7e5 ff53 	bl	8000e9c <__aeabi_fmul>
 801aff6:	e74c      	b.n	801ae92 <__ieee754_expf+0x36>
 801aff8:	2400      	movs	r4, #0
 801affa:	e742      	b.n	801ae82 <__ieee754_expf+0x26>
 801affc:	42b17217 	.word	0x42b17217
 801b000:	42cff1b5 	.word	0x42cff1b5
 801b004:	3eb17218 	.word	0x3eb17218
 801b008:	3f851591 	.word	0x3f851591
 801b00c:	0801c6f0 	.word	0x0801c6f0
 801b010:	0801c6e8 	.word	0x0801c6e8
 801b014:	3331bb4c 	.word	0x3331bb4c
 801b018:	35ddea0e 	.word	0x35ddea0e
 801b01c:	388ab355 	.word	0x388ab355
 801b020:	3b360b61 	.word	0x3b360b61
 801b024:	3e2aaaab 	.word	0x3e2aaaab
 801b028:	3fb8aa3b 	.word	0x3fb8aa3b
 801b02c:	0801c6f8 	.word	0x0801c6f8
 801b030:	3f317180 	.word	0x3f317180
 801b034:	3717f7d1 	.word	0x3717f7d1
 801b038:	7149f2ca 	.word	0x7149f2ca

0801b03c <with_errnof>:
 801b03c:	b570      	push	{r4, r5, r6, lr}
 801b03e:	000d      	movs	r5, r1
 801b040:	1c04      	adds	r4, r0, #0
 801b042:	f7fd fb67 	bl	8018714 <__errno>
 801b046:	6005      	str	r5, [r0, #0]
 801b048:	1c20      	adds	r0, r4, #0
 801b04a:	bd70      	pop	{r4, r5, r6, pc}

0801b04c <xflowf>:
 801b04c:	b510      	push	{r4, lr}
 801b04e:	1c0b      	adds	r3, r1, #0
 801b050:	2800      	cmp	r0, #0
 801b052:	d002      	beq.n	801b05a <xflowf+0xe>
 801b054:	2380      	movs	r3, #128	@ 0x80
 801b056:	061b      	lsls	r3, r3, #24
 801b058:	18cb      	adds	r3, r1, r3
 801b05a:	1c18      	adds	r0, r3, #0
 801b05c:	f7e5 ff1e 	bl	8000e9c <__aeabi_fmul>
 801b060:	2122      	movs	r1, #34	@ 0x22
 801b062:	f7ff ffeb 	bl	801b03c <with_errnof>
 801b066:	bd10      	pop	{r4, pc}

0801b068 <__math_uflowf>:
 801b068:	2180      	movs	r1, #128	@ 0x80
 801b06a:	b510      	push	{r4, lr}
 801b06c:	0549      	lsls	r1, r1, #21
 801b06e:	f7ff ffed 	bl	801b04c <xflowf>
 801b072:	bd10      	pop	{r4, pc}

0801b074 <__math_oflowf>:
 801b074:	21e0      	movs	r1, #224	@ 0xe0
 801b076:	b510      	push	{r4, lr}
 801b078:	05c9      	lsls	r1, r1, #23
 801b07a:	f7ff ffe7 	bl	801b04c <xflowf>
 801b07e:	bd10      	pop	{r4, pc}

0801b080 <__ieee754_log>:
 801b080:	2380      	movs	r3, #128	@ 0x80
 801b082:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b084:	035b      	lsls	r3, r3, #13
 801b086:	000e      	movs	r6, r1
 801b088:	b08d      	sub	sp, #52	@ 0x34
 801b08a:	4299      	cmp	r1, r3
 801b08c:	da23      	bge.n	801b0d6 <__ieee754_log+0x56>
 801b08e:	004b      	lsls	r3, r1, #1
 801b090:	085b      	lsrs	r3, r3, #1
 801b092:	4303      	orrs	r3, r0
 801b094:	d107      	bne.n	801b0a6 <__ieee754_log+0x26>
 801b096:	2200      	movs	r2, #0
 801b098:	2300      	movs	r3, #0
 801b09a:	2000      	movs	r0, #0
 801b09c:	49b4      	ldr	r1, [pc, #720]	@ (801b370 <__ieee754_log+0x2f0>)
 801b09e:	f7e6 fe07 	bl	8001cb0 <__aeabi_ddiv>
 801b0a2:	b00d      	add	sp, #52	@ 0x34
 801b0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0a6:	2900      	cmp	r1, #0
 801b0a8:	da06      	bge.n	801b0b8 <__ieee754_log+0x38>
 801b0aa:	0002      	movs	r2, r0
 801b0ac:	000b      	movs	r3, r1
 801b0ae:	f7e7 fd0b 	bl	8002ac8 <__aeabi_dsub>
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	e7f2      	b.n	801b09e <__ieee754_log+0x1e>
 801b0b8:	4bae      	ldr	r3, [pc, #696]	@ (801b374 <__ieee754_log+0x2f4>)
 801b0ba:	2200      	movs	r2, #0
 801b0bc:	f7e7 fa3c 	bl	8002538 <__aeabi_dmul>
 801b0c0:	2336      	movs	r3, #54	@ 0x36
 801b0c2:	000e      	movs	r6, r1
 801b0c4:	425b      	negs	r3, r3
 801b0c6:	4aac      	ldr	r2, [pc, #688]	@ (801b378 <__ieee754_log+0x2f8>)
 801b0c8:	4296      	cmp	r6, r2
 801b0ca:	dd06      	ble.n	801b0da <__ieee754_log+0x5a>
 801b0cc:	0002      	movs	r2, r0
 801b0ce:	000b      	movs	r3, r1
 801b0d0:	f7e6 fa8a 	bl	80015e8 <__aeabi_dadd>
 801b0d4:	e7e5      	b.n	801b0a2 <__ieee754_log+0x22>
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	e7f5      	b.n	801b0c6 <__ieee754_log+0x46>
 801b0da:	4ca8      	ldr	r4, [pc, #672]	@ (801b37c <__ieee754_log+0x2fc>)
 801b0dc:	1532      	asrs	r2, r6, #20
 801b0de:	1912      	adds	r2, r2, r4
 801b0e0:	0336      	lsls	r6, r6, #12
 801b0e2:	4ca7      	ldr	r4, [pc, #668]	@ (801b380 <__ieee754_log+0x300>)
 801b0e4:	18d2      	adds	r2, r2, r3
 801b0e6:	0b33      	lsrs	r3, r6, #12
 801b0e8:	9302      	str	r3, [sp, #8]
 801b0ea:	191b      	adds	r3, r3, r4
 801b0ec:	2480      	movs	r4, #128	@ 0x80
 801b0ee:	0364      	lsls	r4, r4, #13
 801b0f0:	4023      	ands	r3, r4
 801b0f2:	4ca4      	ldr	r4, [pc, #656]	@ (801b384 <__ieee754_log+0x304>)
 801b0f4:	9d02      	ldr	r5, [sp, #8]
 801b0f6:	405c      	eors	r4, r3
 801b0f8:	151b      	asrs	r3, r3, #20
 801b0fa:	189b      	adds	r3, r3, r2
 801b0fc:	4325      	orrs	r5, r4
 801b0fe:	2200      	movs	r2, #0
 801b100:	9300      	str	r3, [sp, #0]
 801b102:	0029      	movs	r1, r5
 801b104:	4b9f      	ldr	r3, [pc, #636]	@ (801b384 <__ieee754_log+0x304>)
 801b106:	f7e7 fcdf 	bl	8002ac8 <__aeabi_dsub>
 801b10a:	9b02      	ldr	r3, [sp, #8]
 801b10c:	0006      	movs	r6, r0
 801b10e:	3302      	adds	r3, #2
 801b110:	031b      	lsls	r3, r3, #12
 801b112:	000f      	movs	r7, r1
 801b114:	2200      	movs	r2, #0
 801b116:	0b1b      	lsrs	r3, r3, #12
 801b118:	2b02      	cmp	r3, #2
 801b11a:	dc64      	bgt.n	801b1e6 <__ieee754_log+0x166>
 801b11c:	2300      	movs	r3, #0
 801b11e:	f7e5 f995 	bl	800044c <__aeabi_dcmpeq>
 801b122:	2800      	cmp	r0, #0
 801b124:	d019      	beq.n	801b15a <__ieee754_log+0xda>
 801b126:	9b00      	ldr	r3, [sp, #0]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d100      	bne.n	801b12e <__ieee754_log+0xae>
 801b12c:	e11c      	b.n	801b368 <__ieee754_log+0x2e8>
 801b12e:	0018      	movs	r0, r3
 801b130:	f7e8 f8c4 	bl	80032bc <__aeabi_i2d>
 801b134:	4a94      	ldr	r2, [pc, #592]	@ (801b388 <__ieee754_log+0x308>)
 801b136:	4b95      	ldr	r3, [pc, #596]	@ (801b38c <__ieee754_log+0x30c>)
 801b138:	0004      	movs	r4, r0
 801b13a:	000d      	movs	r5, r1
 801b13c:	f7e7 f9fc 	bl	8002538 <__aeabi_dmul>
 801b140:	4a93      	ldr	r2, [pc, #588]	@ (801b390 <__ieee754_log+0x310>)
 801b142:	0006      	movs	r6, r0
 801b144:	000f      	movs	r7, r1
 801b146:	4b93      	ldr	r3, [pc, #588]	@ (801b394 <__ieee754_log+0x314>)
 801b148:	0020      	movs	r0, r4
 801b14a:	0029      	movs	r1, r5
 801b14c:	f7e7 f9f4 	bl	8002538 <__aeabi_dmul>
 801b150:	0002      	movs	r2, r0
 801b152:	000b      	movs	r3, r1
 801b154:	0030      	movs	r0, r6
 801b156:	0039      	movs	r1, r7
 801b158:	e7ba      	b.n	801b0d0 <__ieee754_log+0x50>
 801b15a:	4a8f      	ldr	r2, [pc, #572]	@ (801b398 <__ieee754_log+0x318>)
 801b15c:	4b8f      	ldr	r3, [pc, #572]	@ (801b39c <__ieee754_log+0x31c>)
 801b15e:	0030      	movs	r0, r6
 801b160:	0039      	movs	r1, r7
 801b162:	f7e7 f9e9 	bl	8002538 <__aeabi_dmul>
 801b166:	0002      	movs	r2, r0
 801b168:	000b      	movs	r3, r1
 801b16a:	2000      	movs	r0, #0
 801b16c:	498c      	ldr	r1, [pc, #560]	@ (801b3a0 <__ieee754_log+0x320>)
 801b16e:	f7e7 fcab 	bl	8002ac8 <__aeabi_dsub>
 801b172:	0032      	movs	r2, r6
 801b174:	0004      	movs	r4, r0
 801b176:	000d      	movs	r5, r1
 801b178:	003b      	movs	r3, r7
 801b17a:	0030      	movs	r0, r6
 801b17c:	0039      	movs	r1, r7
 801b17e:	f7e7 f9db 	bl	8002538 <__aeabi_dmul>
 801b182:	000b      	movs	r3, r1
 801b184:	0002      	movs	r2, r0
 801b186:	0029      	movs	r1, r5
 801b188:	0020      	movs	r0, r4
 801b18a:	f7e7 f9d5 	bl	8002538 <__aeabi_dmul>
 801b18e:	9b00      	ldr	r3, [sp, #0]
 801b190:	9002      	str	r0, [sp, #8]
 801b192:	9103      	str	r1, [sp, #12]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d106      	bne.n	801b1a6 <__ieee754_log+0x126>
 801b198:	0002      	movs	r2, r0
 801b19a:	000b      	movs	r3, r1
 801b19c:	0030      	movs	r0, r6
 801b19e:	0039      	movs	r1, r7
 801b1a0:	f7e7 fc92 	bl	8002ac8 <__aeabi_dsub>
 801b1a4:	e77d      	b.n	801b0a2 <__ieee754_log+0x22>
 801b1a6:	9800      	ldr	r0, [sp, #0]
 801b1a8:	f7e8 f888 	bl	80032bc <__aeabi_i2d>
 801b1ac:	4a76      	ldr	r2, [pc, #472]	@ (801b388 <__ieee754_log+0x308>)
 801b1ae:	4b77      	ldr	r3, [pc, #476]	@ (801b38c <__ieee754_log+0x30c>)
 801b1b0:	0004      	movs	r4, r0
 801b1b2:	000d      	movs	r5, r1
 801b1b4:	f7e7 f9c0 	bl	8002538 <__aeabi_dmul>
 801b1b8:	4a75      	ldr	r2, [pc, #468]	@ (801b390 <__ieee754_log+0x310>)
 801b1ba:	9000      	str	r0, [sp, #0]
 801b1bc:	9101      	str	r1, [sp, #4]
 801b1be:	4b75      	ldr	r3, [pc, #468]	@ (801b394 <__ieee754_log+0x314>)
 801b1c0:	0020      	movs	r0, r4
 801b1c2:	0029      	movs	r1, r5
 801b1c4:	f7e7 f9b8 	bl	8002538 <__aeabi_dmul>
 801b1c8:	0002      	movs	r2, r0
 801b1ca:	000b      	movs	r3, r1
 801b1cc:	9802      	ldr	r0, [sp, #8]
 801b1ce:	9903      	ldr	r1, [sp, #12]
 801b1d0:	f7e7 fc7a 	bl	8002ac8 <__aeabi_dsub>
 801b1d4:	0032      	movs	r2, r6
 801b1d6:	003b      	movs	r3, r7
 801b1d8:	f7e7 fc76 	bl	8002ac8 <__aeabi_dsub>
 801b1dc:	0002      	movs	r2, r0
 801b1de:	000b      	movs	r3, r1
 801b1e0:	9800      	ldr	r0, [sp, #0]
 801b1e2:	9901      	ldr	r1, [sp, #4]
 801b1e4:	e7dc      	b.n	801b1a0 <__ieee754_log+0x120>
 801b1e6:	2380      	movs	r3, #128	@ 0x80
 801b1e8:	05db      	lsls	r3, r3, #23
 801b1ea:	f7e6 f9fd 	bl	80015e8 <__aeabi_dadd>
 801b1ee:	0002      	movs	r2, r0
 801b1f0:	000b      	movs	r3, r1
 801b1f2:	0030      	movs	r0, r6
 801b1f4:	0039      	movs	r1, r7
 801b1f6:	f7e6 fd5b 	bl	8001cb0 <__aeabi_ddiv>
 801b1fa:	9004      	str	r0, [sp, #16]
 801b1fc:	9105      	str	r1, [sp, #20]
 801b1fe:	9800      	ldr	r0, [sp, #0]
 801b200:	f7e8 f85c 	bl	80032bc <__aeabi_i2d>
 801b204:	9a04      	ldr	r2, [sp, #16]
 801b206:	9b05      	ldr	r3, [sp, #20]
 801b208:	9006      	str	r0, [sp, #24]
 801b20a:	9107      	str	r1, [sp, #28]
 801b20c:	0010      	movs	r0, r2
 801b20e:	0019      	movs	r1, r3
 801b210:	f7e7 f992 	bl	8002538 <__aeabi_dmul>
 801b214:	4a63      	ldr	r2, [pc, #396]	@ (801b3a4 <__ieee754_log+0x324>)
 801b216:	9b02      	ldr	r3, [sp, #8]
 801b218:	4694      	mov	ip, r2
 801b21a:	4463      	add	r3, ip
 801b21c:	0002      	movs	r2, r0
 801b21e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b220:	000b      	movs	r3, r1
 801b222:	9008      	str	r0, [sp, #32]
 801b224:	9109      	str	r1, [sp, #36]	@ 0x24
 801b226:	f7e7 f987 	bl	8002538 <__aeabi_dmul>
 801b22a:	0004      	movs	r4, r0
 801b22c:	000d      	movs	r5, r1
 801b22e:	4a5e      	ldr	r2, [pc, #376]	@ (801b3a8 <__ieee754_log+0x328>)
 801b230:	4b5e      	ldr	r3, [pc, #376]	@ (801b3ac <__ieee754_log+0x32c>)
 801b232:	f7e7 f981 	bl	8002538 <__aeabi_dmul>
 801b236:	4a5e      	ldr	r2, [pc, #376]	@ (801b3b0 <__ieee754_log+0x330>)
 801b238:	4b5e      	ldr	r3, [pc, #376]	@ (801b3b4 <__ieee754_log+0x334>)
 801b23a:	f7e6 f9d5 	bl	80015e8 <__aeabi_dadd>
 801b23e:	0022      	movs	r2, r4
 801b240:	002b      	movs	r3, r5
 801b242:	f7e7 f979 	bl	8002538 <__aeabi_dmul>
 801b246:	4a5c      	ldr	r2, [pc, #368]	@ (801b3b8 <__ieee754_log+0x338>)
 801b248:	4b5c      	ldr	r3, [pc, #368]	@ (801b3bc <__ieee754_log+0x33c>)
 801b24a:	f7e6 f9cd 	bl	80015e8 <__aeabi_dadd>
 801b24e:	0022      	movs	r2, r4
 801b250:	002b      	movs	r3, r5
 801b252:	f7e7 f971 	bl	8002538 <__aeabi_dmul>
 801b256:	4a5a      	ldr	r2, [pc, #360]	@ (801b3c0 <__ieee754_log+0x340>)
 801b258:	4b5a      	ldr	r3, [pc, #360]	@ (801b3c4 <__ieee754_log+0x344>)
 801b25a:	f7e6 f9c5 	bl	80015e8 <__aeabi_dadd>
 801b25e:	9a08      	ldr	r2, [sp, #32]
 801b260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b262:	f7e7 f969 	bl	8002538 <__aeabi_dmul>
 801b266:	4a58      	ldr	r2, [pc, #352]	@ (801b3c8 <__ieee754_log+0x348>)
 801b268:	9008      	str	r0, [sp, #32]
 801b26a:	9109      	str	r1, [sp, #36]	@ 0x24
 801b26c:	4b57      	ldr	r3, [pc, #348]	@ (801b3cc <__ieee754_log+0x34c>)
 801b26e:	0020      	movs	r0, r4
 801b270:	0029      	movs	r1, r5
 801b272:	f7e7 f961 	bl	8002538 <__aeabi_dmul>
 801b276:	4a56      	ldr	r2, [pc, #344]	@ (801b3d0 <__ieee754_log+0x350>)
 801b278:	4b56      	ldr	r3, [pc, #344]	@ (801b3d4 <__ieee754_log+0x354>)
 801b27a:	f7e6 f9b5 	bl	80015e8 <__aeabi_dadd>
 801b27e:	0022      	movs	r2, r4
 801b280:	002b      	movs	r3, r5
 801b282:	f7e7 f959 	bl	8002538 <__aeabi_dmul>
 801b286:	4a54      	ldr	r2, [pc, #336]	@ (801b3d8 <__ieee754_log+0x358>)
 801b288:	4b54      	ldr	r3, [pc, #336]	@ (801b3dc <__ieee754_log+0x35c>)
 801b28a:	f7e6 f9ad 	bl	80015e8 <__aeabi_dadd>
 801b28e:	0022      	movs	r2, r4
 801b290:	002b      	movs	r3, r5
 801b292:	f7e7 f951 	bl	8002538 <__aeabi_dmul>
 801b296:	0002      	movs	r2, r0
 801b298:	000b      	movs	r3, r1
 801b29a:	9808      	ldr	r0, [sp, #32]
 801b29c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b29e:	f7e6 f9a3 	bl	80015e8 <__aeabi_dadd>
 801b2a2:	9a02      	ldr	r2, [sp, #8]
 801b2a4:	4b4e      	ldr	r3, [pc, #312]	@ (801b3e0 <__ieee754_log+0x360>)
 801b2a6:	0004      	movs	r4, r0
 801b2a8:	1a9b      	subs	r3, r3, r2
 801b2aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b2ac:	000d      	movs	r5, r1
 801b2ae:	4313      	orrs	r3, r2
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	dd34      	ble.n	801b31e <__ieee754_log+0x29e>
 801b2b4:	2200      	movs	r2, #0
 801b2b6:	4b3a      	ldr	r3, [pc, #232]	@ (801b3a0 <__ieee754_log+0x320>)
 801b2b8:	0030      	movs	r0, r6
 801b2ba:	0039      	movs	r1, r7
 801b2bc:	f7e7 f93c 	bl	8002538 <__aeabi_dmul>
 801b2c0:	0032      	movs	r2, r6
 801b2c2:	003b      	movs	r3, r7
 801b2c4:	f7e7 f938 	bl	8002538 <__aeabi_dmul>
 801b2c8:	0002      	movs	r2, r0
 801b2ca:	000b      	movs	r3, r1
 801b2cc:	9002      	str	r0, [sp, #8]
 801b2ce:	9103      	str	r1, [sp, #12]
 801b2d0:	0020      	movs	r0, r4
 801b2d2:	0029      	movs	r1, r5
 801b2d4:	f7e6 f988 	bl	80015e8 <__aeabi_dadd>
 801b2d8:	9a04      	ldr	r2, [sp, #16]
 801b2da:	9b05      	ldr	r3, [sp, #20]
 801b2dc:	f7e7 f92c 	bl	8002538 <__aeabi_dmul>
 801b2e0:	9b00      	ldr	r3, [sp, #0]
 801b2e2:	0004      	movs	r4, r0
 801b2e4:	000d      	movs	r5, r1
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d106      	bne.n	801b2f8 <__ieee754_log+0x278>
 801b2ea:	0002      	movs	r2, r0
 801b2ec:	000b      	movs	r3, r1
 801b2ee:	9802      	ldr	r0, [sp, #8]
 801b2f0:	9903      	ldr	r1, [sp, #12]
 801b2f2:	f7e7 fbe9 	bl	8002ac8 <__aeabi_dsub>
 801b2f6:	e74f      	b.n	801b198 <__ieee754_log+0x118>
 801b2f8:	4a23      	ldr	r2, [pc, #140]	@ (801b388 <__ieee754_log+0x308>)
 801b2fa:	4b24      	ldr	r3, [pc, #144]	@ (801b38c <__ieee754_log+0x30c>)
 801b2fc:	9806      	ldr	r0, [sp, #24]
 801b2fe:	9907      	ldr	r1, [sp, #28]
 801b300:	f7e7 f91a 	bl	8002538 <__aeabi_dmul>
 801b304:	4a22      	ldr	r2, [pc, #136]	@ (801b390 <__ieee754_log+0x310>)
 801b306:	9000      	str	r0, [sp, #0]
 801b308:	9101      	str	r1, [sp, #4]
 801b30a:	9806      	ldr	r0, [sp, #24]
 801b30c:	9907      	ldr	r1, [sp, #28]
 801b30e:	4b21      	ldr	r3, [pc, #132]	@ (801b394 <__ieee754_log+0x314>)
 801b310:	f7e7 f912 	bl	8002538 <__aeabi_dmul>
 801b314:	0022      	movs	r2, r4
 801b316:	002b      	movs	r3, r5
 801b318:	f7e6 f966 	bl	80015e8 <__aeabi_dadd>
 801b31c:	e754      	b.n	801b1c8 <__ieee754_log+0x148>
 801b31e:	0002      	movs	r2, r0
 801b320:	000b      	movs	r3, r1
 801b322:	0030      	movs	r0, r6
 801b324:	0039      	movs	r1, r7
 801b326:	f7e7 fbcf 	bl	8002ac8 <__aeabi_dsub>
 801b32a:	9a04      	ldr	r2, [sp, #16]
 801b32c:	9b05      	ldr	r3, [sp, #20]
 801b32e:	f7e7 f903 	bl	8002538 <__aeabi_dmul>
 801b332:	9b00      	ldr	r3, [sp, #0]
 801b334:	0004      	movs	r4, r0
 801b336:	000d      	movs	r5, r1
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d102      	bne.n	801b342 <__ieee754_log+0x2c2>
 801b33c:	0002      	movs	r2, r0
 801b33e:	000b      	movs	r3, r1
 801b340:	e72c      	b.n	801b19c <__ieee754_log+0x11c>
 801b342:	4a11      	ldr	r2, [pc, #68]	@ (801b388 <__ieee754_log+0x308>)
 801b344:	4b11      	ldr	r3, [pc, #68]	@ (801b38c <__ieee754_log+0x30c>)
 801b346:	9806      	ldr	r0, [sp, #24]
 801b348:	9907      	ldr	r1, [sp, #28]
 801b34a:	f7e7 f8f5 	bl	8002538 <__aeabi_dmul>
 801b34e:	4a10      	ldr	r2, [pc, #64]	@ (801b390 <__ieee754_log+0x310>)
 801b350:	9000      	str	r0, [sp, #0]
 801b352:	9101      	str	r1, [sp, #4]
 801b354:	9806      	ldr	r0, [sp, #24]
 801b356:	9907      	ldr	r1, [sp, #28]
 801b358:	4b0e      	ldr	r3, [pc, #56]	@ (801b394 <__ieee754_log+0x314>)
 801b35a:	f7e7 f8ed 	bl	8002538 <__aeabi_dmul>
 801b35e:	0002      	movs	r2, r0
 801b360:	000b      	movs	r3, r1
 801b362:	0020      	movs	r0, r4
 801b364:	0029      	movs	r1, r5
 801b366:	e733      	b.n	801b1d0 <__ieee754_log+0x150>
 801b368:	2000      	movs	r0, #0
 801b36a:	2100      	movs	r1, #0
 801b36c:	e699      	b.n	801b0a2 <__ieee754_log+0x22>
 801b36e:	46c0      	nop			@ (mov r8, r8)
 801b370:	c3500000 	.word	0xc3500000
 801b374:	43500000 	.word	0x43500000
 801b378:	7fefffff 	.word	0x7fefffff
 801b37c:	fffffc01 	.word	0xfffffc01
 801b380:	00095f64 	.word	0x00095f64
 801b384:	3ff00000 	.word	0x3ff00000
 801b388:	fee00000 	.word	0xfee00000
 801b38c:	3fe62e42 	.word	0x3fe62e42
 801b390:	35793c76 	.word	0x35793c76
 801b394:	3dea39ef 	.word	0x3dea39ef
 801b398:	55555555 	.word	0x55555555
 801b39c:	3fd55555 	.word	0x3fd55555
 801b3a0:	3fe00000 	.word	0x3fe00000
 801b3a4:	fff9eb86 	.word	0xfff9eb86
 801b3a8:	df3e5244 	.word	0xdf3e5244
 801b3ac:	3fc2f112 	.word	0x3fc2f112
 801b3b0:	96cb03de 	.word	0x96cb03de
 801b3b4:	3fc74664 	.word	0x3fc74664
 801b3b8:	94229359 	.word	0x94229359
 801b3bc:	3fd24924 	.word	0x3fd24924
 801b3c0:	55555593 	.word	0x55555593
 801b3c4:	3fe55555 	.word	0x3fe55555
 801b3c8:	d078c69f 	.word	0xd078c69f
 801b3cc:	3fc39a09 	.word	0x3fc39a09
 801b3d0:	1d8e78af 	.word	0x1d8e78af
 801b3d4:	3fcc71c5 	.word	0x3fcc71c5
 801b3d8:	9997fa04 	.word	0x9997fa04
 801b3dc:	3fd99999 	.word	0x3fd99999
 801b3e0:	0006b851 	.word	0x0006b851

0801b3e4 <_init>:
 801b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3e6:	46c0      	nop			@ (mov r8, r8)
 801b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3ea:	bc08      	pop	{r3}
 801b3ec:	469e      	mov	lr, r3
 801b3ee:	4770      	bx	lr

0801b3f0 <_fini>:
 801b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3f2:	46c0      	nop			@ (mov r8, r8)
 801b3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3f6:	bc08      	pop	{r3}
 801b3f8:	469e      	mov	lr, r3
 801b3fa:	4770      	bx	lr
